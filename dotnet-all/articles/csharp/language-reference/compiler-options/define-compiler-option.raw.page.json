{"content":"<div><div class=\"content\">\n<p>The <strong>/define</strong> option defines <code>name</code> as a symbol in all source code files your program.  </p>\n<h2 id=\"syntax\">Syntax</h2>\n<pre class=\"loading\"><code>/define:name[;name2]  \n</code></pre><h2 id=\"arguments\">Arguments</h2>\n<p> <code>name</code>, <code>name2</code><br> The name of one or more symbols that you want to define.  </p>\n<h2 id=\"remarks\">Remarks</h2>\n<p> The <strong>/define</strong> option has the same effect as using a <a href=\"../preprocessor-directives/preprocessor-define\" data-linktype=\"relative-path\">#define</a> preprocessor directive except that the compiler option is in effect for all files in the project. A symbol remains defined in a source file until an <a href=\"../preprocessor-directives/preprocessor-undef\" data-linktype=\"relative-path\">#undef</a> directive in the source file removes the definition. When you use the /define option, an <code>#undef</code> directive in one file has no effect on other source code files in the project.  </p>\n<p> You can use symbols created by this option with <a href=\"../preprocessor-directives/preprocessor-if\" data-linktype=\"relative-path\">#if</a>, <a href=\"../preprocessor-directives/preprocessor-else\" data-linktype=\"relative-path\">#else</a>, <a href=\"../preprocessor-directives/preprocessor-elif\" data-linktype=\"relative-path\">#elif</a>, and <a href=\"../preprocessor-directives/preprocessor-endif\" data-linktype=\"relative-path\">#endif</a> to compile source files conditionally.  </p>\n<p> <strong>/d</strong> is the short form of <strong>/define</strong>.  </p>\n<p> You can define multiple symbols with <strong>/define</strong> by using a semicolon or comma to separate symbol names. For example:  </p>\n<pre class=\"loading\"><code>/define:DEBUG;TUESDAY  \n</code></pre><p> The C# compiler itself defines no symbols or macros that you can use in your source code; all symbol definitions must be user-defined.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The C# <code>#define</code> does not allow a symbol to be given a value, as in languages such as C++. For example, <code>#define</code> cannot be used to create a macro or to define a constant. If you need to define a constant, use an <code>enum</code> variable. If you want to create a C++ style macro, consider alternatives such as generics. Since macros are notoriously error-prone, C# disallows their use but provides safer alternatives.  </p>\n</div>\n<h3 id=\"to-set-this-compiler-option-in-the-visual-studio-development-environment\">To set this compiler option in the Visual Studio development environment</h3>\n<ol>\n<li><p>Open the project&#39;s <strong>Properties</strong> page.  </p>\n</li>\n<li><p>On the <strong>Build</strong> tab, type the symbol that is to be defined in the <strong>Conditional compilation symbols</strong> box. For example, if you are using the code example that follows, just type <code>xx</code> into the text box.  </p>\n<p>For information on how to set this compiler option programmatically, see <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/6x63tw6d(v=vs.140).aspx\" data-linktype=\"external\">DefineConstants</a>.  </p>\n</li>\n</ol>\n<h2 id=\"example\">Example</h2>\n<pre class=\"loading\"><code>// preprocessor_define.cs  \n// compile with: /define:xx  \n// or uncomment the next line  \n// #define xx  \nusing System;  \npublic class Test   \n{  \n    public static void Main()   \n    {  \n        #if (xx)   \n            Console.WriteLine(&quot;xx defined&quot;);  \n        #else  \n            Console.WriteLine(&quot;xx not defined&quot;);  \n        #endif  \n    }  \n}  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"index\" data-linktype=\"relative-path\">C# Compiler Options</a><br> <a href=\"http://msdn.microsoft.com/en-us/e7184bc5-2f2b-4b4f-aa9a-3ecfcbc48b67\" data-linktype=\"external\">NIB How to: Modify Project Properties and Configuration Settings</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"ms.assetid\" content=\"f17d7b4d-82d0-4133-8563-68cced1cac6e\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"21\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/compiler-options/define-compiler-option.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/compiler-options/define-compiler-option.md\">\r\n<meta name=\"document_id\" content=\"7770d8ea-66c1-218e-abac-3edd513acf52\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","uhfHeaderId":"MSDocsHeader-DotNet","title":"-define (C# Compiler Options) | Microsoft Docs","ms.assetid":"f17d7b4d-82d0-4133-8563-68cced1cac6e","f1_keywords":["/define"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":21,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["-define compiler option [C#]","/define compiler option [C#]","-d compiler option [C#]","define compiler option [C#]","/d compiler option [C#]","d compiler option [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/compiler-options/define-compiler-option.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/compiler-options/define-compiler-option.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/compiler-options/define-compiler-option.md","document_id":"7770d8ea-66c1-218e-abac-3edd513acf52","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/compiler-options/define-compiler-option","toc_asset_id":"articles/csharp/language-reference/compiler-options/toc.json","toc_rel":"toc.json","_op_ogTitle":"-define (C# Compiler Options)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":359,"_op_rawTitle":"<h1 id=\"define-c-compiler-options\" sourcefile=\"docs/csharp/language-reference/compiler-options/define-compiler-option.md\" sourcestartlinenumber=\"38\" sourceendlinenumber=\"38\">/define (C# Compiler Options)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/compiler-options/define-compiler-option","fileRelativePath":"articles/csharp/language-reference/compiler-options/define-compiler-option.html"},"themesRelativePathToOutputRoot":"_themes/"}