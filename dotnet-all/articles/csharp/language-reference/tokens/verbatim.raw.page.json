{"content":"<div><div class=\"content\">\n<p>The <code>@</code> special character serves as a verbatim identifier. It can be used in the following ways:</p>\n<ol>\n<li><p>To enable C# keywords to be used as identifiers. The <code>@</code> character prefixes a code element that the compiler is to interpret as an identifier rather than a C# keyword. The following example uses the <code>@</code> character to define an identifier named <code>for</code> that it uses in a <code>for</code> loop.</p>\n<pre><code class=\"lang-cs\" name=\"verbatim1\">string[] @for = { &quot;John&quot;, &quot;James&quot;, &quot;Joan&quot;, &quot;Jamie&quot; };\nfor (int ctr = 0; ctr &lt; @for.Length; ctr++)\n{\n   Console.WriteLine($&quot;Here is your gift, {@for[ctr]}!&quot;);\n}\n// The example displays the following output:\n//     Here is your gift, John!\n//     Here is your gift, James!\n//     Here is your gift, Joan!\n//     Here is your gift, Jamie!\n</code></pre></li>\n<li><p>To indicate that a string literal is to be interpreted verbatim. The <code>@</code> character in this instance defines a <em>verbatim string literal</em>. Simple escape sequences (such as <code>&quot;\\\\&quot;</code> for a backslash), hexadecimal escape sequences (such as <code>&quot;\\x0041&quot;</code> for an uppercase A, and Unicode escape sequences, such as <code>&quot;\\u0041&quot;</code> for an uppercase A, are interpreted literally. Only a quote escape sequence (<code>&quot;&quot;</code>) is not interpreted literally; it produces a single quotation mark. The following example defines two identical file paths, one by using a regular string literal and the other by using a verbatim string literal. This is one of the more common uses of verbatim string literals.</p>\n<pre><code class=\"lang-cs\" name=\"verbatim2\">string filename1 = @&quot;c:\\documents\\files\\u0066.txt&quot;;\nstring filename2 = &quot;c:\\\\documents\\\\files\\\\u0066.txt&quot;;\n\nConsole.WriteLine(filename1);\nConsole.WriteLine(filename2);\n</code></pre><p>The following example illustrates the effect of defining a regular string literal and a verbatim string literal that contain identical character sequences.</p>\n<pre><code class=\"lang-cs\" name=\"verbatim3\">string s1 = &quot;He said, \\&quot;This is the last \\u0063hance\\x0021\\&quot;&quot;;\nstring s2 = @&quot;He said, &quot;&quot;This is the last \\u0063hance\\x0021&quot;&quot;&quot;;\n\nConsole.WriteLine(s1);\nConsole.WriteLine(s2);\n// The example displays the following output:\n//     He said, &quot;This is the last chance!&quot;\n//     He said, &quot;This is the last \\u0063hance\\x0021&quot;      \n</code></pre></li>\n<li><p>To enable the compiler to distinguish between attributes in cases of a naming conflict. An attribute is a type that derives from <a class=\"xref\" href=\"../../../../api/system.attribute\" data-linktype=\"relative-path\">Attribute</a>. Its type name typically includes the suffix <strong>Attribute</strong>, although the compiler does not enforce this convention. The attribute can then be referenced in code either by its full type name (for example, <code>[InfoAttribute]</code> or its shortened name (for example, <code>[Info]</code>). However, a naming conflict occurs if two shortened attribute type names are identical, and one type name includes the <strong>Attribute</strong> suffix but the other does not. For example, the following code fails to compile because the compiler cannot determine whether the <code>Info</code> or <code>InfoAttribute</code> attribute is applied to the <code>Main</code> method.</p>\n<pre class=\"loading\"><code class=\"lang-cs\">using System;\n\n[AttributeUsage(AttributeTargets.Class)]\npublic class Info : Attribute\n{\n   private string information;\n\n   public Info(string info)\n   {\n       information = info;\n   }\n}\n\n[AttributeUsage(AttributeTargets.Method)]\npublic class InfoAttribute : Attribute\n{\n   private string information;\n\n   public InfoAttribute(string info)\n   {\n       information = info;\n   }\n}\n\n[Info(&quot;A simple executable.&quot;)]\npublic class Example\n{\n   [InfoAttribute(&quot;The entry point.&quot;)]\n   public static void Main()\n   {\n   }\n}\n</code></pre><p>If the verbatim identifier is used to identify the <code>Info</code> attribute, the example compiles successfully.</p>\n<pre><code class=\"lang-cs\" name=\"verbatim4\">using System;\n\n[AttributeUsage(AttributeTargets.Class)]\npublic class Info : Attribute\n{\n   private string information;\n   \n   public Info(string info)\n   {\n      information = info;\n   }\n}\n\n[AttributeUsage(AttributeTargets.Method)]\npublic class InfoAttribute : Attribute\n{\n   private string information;\n   \n   public InfoAttribute(string info)\n   {\n      information = info;\n   }\n}\n\n[@Info(&quot;A simple executable.&quot;)]\npublic class Example\n{\n   [InfoAttribute(&quot;The entry point.&quot;)]\n   public static void Main()\n   {\n   }\n}\n</code></pre></li>\n</ol>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"../../programming-guide/index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">C# Special Characters</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"rpetrusha\">\r\n<meta name=\"ms.author\" content=\"ronpet\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"89bc7e53-85f5-478a-866d-1cca003c4e8c\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2017-02-09\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/c65be0e0919f55fddd0a8f861a6bbf6cdbf28cea/docs/csharp/language-reference/tokens/verbatim.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/tokens/verbatim.md\">\r\n<meta name=\"document_id\" content=\"2e9a13cc-723b-e7a5-f142-3c16768c3b1d\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"rpetrusha","ms.author":"ronpet","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"@ (C# Reference) | Microsoft Docs","ms.assetid":"89bc7e53-85f5-478a-866d-1cca003c4e8c","f1_keywords":["@_CSharpKeyword","@"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["@ special character [C#]","@ language element [C#]"],"ms.date":"2017-02-09","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"rpetrusha","author_email":"ronpet@microsoft.com","committer_name":"rpetrusha","comitter_email":"ronpet@microsoft.com","message":"Changed 'token' to 'special character'.","commit_sha":"c65be0e0919f55fddd0a8f861a6bbf6cdbf28cea","commit_date":"2017-02-14 10:46:20 -0800"},{"author_name":"rpetrusha","author_email":"ronpet@microsoft.com","committer_name":"rpetrusha","comitter_email":"ronpet@microsoft.com","message":"Documented @ and $ as tokens.","commit_sha":"274fda7c541998e5bb5c395025a4568c694f3a60","commit_date":"2017-02-13 12:03:15 -0800"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/rpetrusha","display_name":"rpetrusha","id":"10886961"},"contributors":[{"profile_url":"https://github.com/rpetrusha","display_name":"rpetrusha"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/c65be0e0919f55fddd0a8f861a6bbf6cdbf28cea/docs/csharp/language-reference/tokens/verbatim.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/tokens/verbatim.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/tokens/verbatim.md","document_id":"2e9a13cc-723b-e7a5-f142-3c16768c3b1d","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/tokens/verbatim","toc_asset_id":"articles/csharp/language-reference/tokens/toc.json","toc_rel":"toc.json","_op_ogTitle":"@ (C# Reference)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":555,"_op_rawTitle":"<h1 id=\"-c-reference\" sourcefile=\"docs/csharp/language-reference/tokens/verbatim.md\" sourcestartlinenumber=\"34\" sourceendlinenumber=\"34\">@ (C# Reference)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/tokens/verbatim","fileRelativePath":"articles/csharp/language-reference/tokens/verbatim.html"},"themesRelativePathToOutputRoot":"_themes/"}