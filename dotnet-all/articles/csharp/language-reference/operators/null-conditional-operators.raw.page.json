{"content":"<div><div class=\"content\">\n<p>Used to test for null before performing a member access (<code>?.</code>) or index (<code>?[</code>) operation.  These operators help you write less code to handle null checks, especially for descending into data structures.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">int? length = customers?.Length; // null if customers is null   \nCustomer first = customers?[0];  // null if customers is null  \nint? count = customers?[0]?.Orders?.Count();  // null if customers, the first customer, or Orders is null  \n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim length = customers?.Length  ‘’ null if customers is null  \nDim first as Customer = customers?(0);  ‘’ null if customers is null  \nDim count as Integer? = customers?[0]?.Orders?.Count();  // null if customers, the first customer, or Orders is null  \n</code></pre><p> The last example demonstrates that the null-condition operators are short-circuiting.  If one operation in a chain of conditional member access and index operation returns null, then the rest of the chain’s execution stops.  Other operations with lower precedence in the expression continue.  For example, <code>E</code> in the following always executes, and the <code>??</code> and <code>==</code> operations execute.  </p>\n<pre class=\"loading\"><code class=\"lang-vb-c#\">A?.B?.C?[0] ?? E  \nA?.B?.C?[0] == E  \n</code></pre><p> Another use for the null-condition member access is invoking delegates in a thread-safe way with much less code.  The old way requires code like the following:  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">var handler = this.PropertyChanged;  \nif (handler != null)  \n    handler(…)  \n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim handler = AddressOf(Me.PropertyChanged)  \nIf handler IsNot Nothing  \n    Call handler(…)  \n</code></pre><p> The new way is much simpler:  </p>\n<pre class=\"loading\"><code class=\"lang-vb-c#\">PropertyChanged?.Invoke(e)  \n</code></pre><p> The new way is thread-safe because the compiler generates code to evaluate <code>PropertyChanged</code> one time only, keeping the result in temporary variable.  </p>\n<p> You need to explicitly call the <code>Invoke</code> method because there is no null-conditional delegate invocation syntax <code>PropertyChanged?(e)</code>.  There were too many ambiguous parsing situations to allow it.  </p>\n<h2 id=\"language-specifications\">Language Specifications</h2>\n<p> For more information, see the <a href=\"../language-specification\" data-linktype=\"relative-path\">C# Language Specification</a>. The language specification is the definitive source for C# syntax and usage.  </p>\n<p> For more information, see the <a href=\"../../../visual-basic/language-reference/index\" data-linktype=\"relative-path\">Visual Basic Language Reference</a>.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"null-conditional-operator\" data-linktype=\"relative-path\">?? (null-coalescing operator)</a><br> <a href=\"../index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"../../programming-guide/index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"../../../visual-basic/language-reference/index\" data-linktype=\"relative-path\">Visual Basic Language Reference</a><br> <a href=\"../../../visual-basic/programming-guide/index\" data-linktype=\"relative-path\">Visual Basic Programming Guide</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"9c7b2c8f-a785-44ca-836c-407bfb6d27f5\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/4d9c07753c5a70d400b05ce6d80033ab588624ba/docs/csharp/language-reference/operators/null-conditional-operators.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/operators/null-conditional-operators.md\">\r\n<meta name=\"document_id\" content=\"7922cc23-d038-cf80-d877-d870af6b8e7f\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Null-conditional Operators (C# and Visual Basic) | Microsoft Docs","ms.assetid":"9c7b2c8f-a785-44ca-836c-407bfb6d27f5","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":3,"ms.topic":"article","dev_langs":["csharp"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"rpetrusha","author_email":"ronpet@microsoft.com","committer_name":"rpetrusha","comitter_email":"ronpet@microsoft.com","message":"Added link to ?? operator and some other changes","commit_sha":"4d9c07753c5a70d400b05ce6d80033ab588624ba","commit_date":"2017-03-09 15:37:25 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/rpetrusha","display_name":"rpetrusha","id":"10886961"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/4d9c07753c5a70d400b05ce6d80033ab588624ba/docs/csharp/language-reference/operators/null-conditional-operators.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/operators/null-conditional-operators.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/operators/null-conditional-operators.md","document_id":"7922cc23-d038-cf80-d877-d870af6b8e7f","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/operators/null-conditional-operators","toc_asset_id":"articles/csharp/language-reference/operators/toc.json","toc_rel":"toc.json","_op_ogTitle":"Null-conditional Operators (C# and Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":314,"_op_rawTitle":"<h1 id=\"null-conditional-operators-c-and-visual-basic\" sourcefile=\"docs/csharp/language-reference/operators/null-conditional-operators.md\" sourcestartlinenumber=\"29\" sourceendlinenumber=\"29\">Null-conditional Operators (C# and Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/operators/null-conditional-operators","fileRelativePath":"articles/csharp/language-reference/operators/null-conditional-operators.html"},"themesRelativePathToOutputRoot":"_themes/"}