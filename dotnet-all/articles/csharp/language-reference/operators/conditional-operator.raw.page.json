{"content":"<div><div class=\"content\">\n<p>The conditional operator (<code>?:</code>) returns one of two values depending on the value of a Boolean expression. Following is the syntax for the conditional operator.  </p>\n<pre class=\"loading\"><code>condition ? first_expression : second_expression;  \n</code></pre><h2 id=\"remarks\">Remarks</h2>\n<p> The <code>condition</code> must evaluate to <code>true</code> or <code>false</code>. If <code>condition</code> is <code>true</code>, <code>first_expression</code> is evaluated and becomes the result. If <code>condition</code> is <code>false</code>, <code>second_expression</code> is evaluated and becomes the result. Only one of the two expressions is evaluated.  </p>\n<p> Either the type of <code>first_expression</code> and <code>second_expression</code> must be the same, or an implicit conversion must exist from one type to the other.  </p>\n<p> You can express calculations that might otherwise require an <code>if-else</code> construction more concisely by using the conditional operator. For example, the following code uses first an <code>if</code> statement and then a conditional operator to classify an integer as positive or negative.  </p>\n<pre class=\"loading\"><code>\nint input = Convert.ToInt32(Console.ReadLine());  \nstring classify;  \n\n// if-else construction.  \nif (input &gt; 0)  \n    classify = &quot;positive&quot;;  \nelse  \n    classify = &quot;negative&quot;;  \n\n// ?: conditional operator.  \nclassify = (input &gt; 0) ? &quot;positive&quot; : &quot;negative&quot;;  \n</code></pre><p> The conditional operator is right-associative. The expression <code>a ? b : c ? d : e</code> is evaluated as <code>a ? b : (c ? d : e)</code>, not as <code>(a ? b : c) ? d : e</code>.  </p>\n<p> The conditional operator cannot be overloaded.  </p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"lang-cs\" name=\"csRefOperators#41\">    class ConditionalOp\n    {\n        static double sinc(double x)\n        {\n            return x != 0.0 ? Math.Sin(x) / x : 1.0;\n        }\n\n        static void Main()\n        {\n            Console.WriteLine(sinc(0.2));\n            Console.WriteLine(sinc(0.1));\n            Console.WriteLine(sinc(0.0));\n        }\n    }\n    /*\n    Output:\n    0.993346653975306\n    0.998334166468282\n    1\n    */\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"../../programming-guide/index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">C# Operators</a><br> <a href=\"../keywords/if-else\" data-linktype=\"relative-path\">if-else</a><br> <a href=\"null-conditional-operators\" data-linktype=\"relative-path\">?. and ?Operators</a><br> <a href=\"null-conditional-operator\" data-linktype=\"relative-path\">?? Operator</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-all/api/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"e83a17f1-7500-48ba-8bee-2fbc4c847af4\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"23\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/operators/conditional-operator.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/operators/conditional-operator.md\">\r\n<meta name=\"document_id\" content=\"6a681379-320d-47c5-ca6e-f4e347a7120e\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"?: Operator (C# Reference) | Microsoft Docs","ms.assetid":"e83a17f1-7500-48ba-8bee-2fbc4c847af4","f1_keywords":["?:_CSharpKeyword","?_CSharpKeyword",":_CSharpKeyword"],"translation.priority.ht":["de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","ru-ru","zh-cn","zh-tw"],"caps.latest.revision":23,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["?: operator [C#]","conditional operator (?:) [C#]"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/operators/conditional-operator.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/operators/conditional-operator.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/operators/conditional-operator.md","document_id":"6a681379-320d-47c5-ca6e-f4e347a7120e","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/operators/conditional-operator","toc_asset_id":"articles/csharp/language-reference/operators/toc.json","toc_rel":"toc.json","_op_ogTitle":"?: Operator (C# Reference)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":239,"_op_rawTitle":"<h1 id=\"-operator-c-reference\" sourcefile=\"docs/csharp/language-reference/operators/conditional-operator.md\" sourcestartlinenumber=\"37\" sourceendlinenumber=\"37\">?: Operator (C# Reference)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/operators/conditional-operator","fileRelativePath":"articles/csharp/language-reference/operators/conditional-operator.html"},"themesRelativePathToOutputRoot":"_themes/"}