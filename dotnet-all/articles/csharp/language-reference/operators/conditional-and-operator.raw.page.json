{"content":"<div><div class=\"content\">\n<p>The conditional-AND operator (<code>&amp;&amp;</code>) performs a logical-AND of its <code>bool</code> operands, but only evaluates its second operand if necessary.  </p>\n<h2 id=\"remarks\">Remarks</h2>\n<p> The operation  </p>\n<pre class=\"loading\"><code>x &amp;&amp; y  \n</code></pre><p> corresponds to the operation  </p>\n<pre class=\"loading\"><code>x &amp; y  \n</code></pre><p> except that if <code>x</code> is <code>false</code>, <code>y</code> is not evaluated, because the result of the AND operation is <code>false</code> no matter what the value of <code>y</code>  is. This is known as &quot;short-circuit&quot; evaluation.  </p>\n<p> The conditional-AND operator cannot be overloaded, but overloads of the regular logical operators and operators <a href=\"../keywords/true\" data-linktype=\"relative-path\">true</a> and <a href=\"../keywords/false\" data-linktype=\"relative-path\">false</a> are, with certain restrictions, also considered overloads of the conditional logical operators.  </p>\n<h2 id=\"example\">Example</h2>\n<p> In the following example, the conditional expression in the second <code>if</code> statement evaluates only the first operand because the operand returns <code>false</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"csRefOperators#48\">    class LogicalAnd\n    {\n        static void Main()\n        {\n            // Each method displays a message and returns a Boolean value. \n            // Method1 returns false and Method2 returns true. When &amp; is used,\n            // both methods are called. \n            Console.WriteLine(&quot;Regular AND:&quot;);\n            if (Method1() &amp; Method2())\n                Console.WriteLine(&quot;Both methods returned true.&quot;);\n            else\n                Console.WriteLine(&quot;At least one of the methods returned false.&quot;);\n\n            // When &amp;&amp; is used, after Method1 returns false, Method2 is \n            // not called.\n            Console.WriteLine(&quot;\\nShort-circuit AND:&quot;);\n            if (Method1() &amp;&amp; Method2())\n                Console.WriteLine(&quot;Both methods returned true.&quot;);\n            else\n                Console.WriteLine(&quot;At least one of the methods returned false.&quot;);\n        }\n\n        static bool Method1()\n        {\n            Console.WriteLine(&quot;Method1 called.&quot;);\n            return false;\n        }\n\n        static bool Method2()\n        {\n            Console.WriteLine(&quot;Method2 called.&quot;);\n            return true;\n        }\n    }\n    // Output:\n    // Regular AND:\n    // Method1 called.\n    // Method2 called.\n    // At least one of the methods returned false.\n\n    // Short-circuit AND:\n    // Method1 called.\n    // At least one of the methods returned false.\n</code></pre><h2 id=\"c-language-specification\">C# Language Specification</h2>\n<p> For more information, see the <a href=\"../language-specification\" data-linktype=\"relative-path\">C# Language Specification</a>. The language specification is the definitive source for C# syntax and usage.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"../../programming-guide/index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">C# Operators</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"2e4f0a1c-92a3-40f8-8e3b-17b607f20c31\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"18\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/operators/conditional-and-operator.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/operators/conditional-and-operator.md\">\r\n<meta name=\"document_id\" content=\"4e7e3035-e626-15d1-8fa4-b92ccc003e7f\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"&amp;&amp; Operator (C# Reference) | Microsoft Docs","ms.assetid":"2e4f0a1c-92a3-40f8-8e3b-17b607f20c31","f1_keywords":["&&_CSharpKeyword"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":18,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["&& operator [C#]","logical AND operator [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/operators/conditional-and-operator.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/operators/conditional-and-operator.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/operators/conditional-and-operator.md","document_id":"4e7e3035-e626-15d1-8fa4-b92ccc003e7f","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/operators/conditional-and-operator","toc_asset_id":"articles/csharp/language-reference/operators/toc.json","toc_rel":"toc.json","_op_ogTitle":"&amp;&amp; Operator (C# Reference)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":292,"_op_rawTitle":"<h1 id=\"ampamp-operator-c-reference\" sourcefile=\"docs/csharp/language-reference/operators/conditional-and-operator.md\" sourcestartlinenumber=\"34\" sourceendlinenumber=\"34\">&amp;&amp; Operator (C# Reference)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/operators/conditional-and-operator","fileRelativePath":"articles/csharp/language-reference/operators/conditional-and-operator.html"},"themesRelativePathToOutputRoot":"_themes/"}