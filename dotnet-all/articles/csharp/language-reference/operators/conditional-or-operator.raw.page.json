{"content":"<div><div class=\"content\">\n<p>The conditional-OR operator (<code>||</code>) performs a logical-OR of its <code>bool</code> operands. If the first operand evaluates to <code>true</code>, the second operand isn&#39;t evaluated. If the first operand evaluates to <code>false</code>, the second operator determines whether the OR expression as a whole evaluates to <code>true</code> or <code>false</code>.  </p>\n<h2 id=\"remarks\">Remarks</h2>\n<p> The operation  </p>\n<pre class=\"loading\"><code>x || y  \n</code></pre><p> corresponds to the operation  </p>\n<pre class=\"loading\"><code>x | y  \n</code></pre><p> except that if <code>x</code> is <code>true</code>, <code>y</code> is not evaluated because the OR operation is <code>true</code> regardless of the value of <code>y</code>. This concept is known as &quot;short-circuit&quot; evaluation.  </p>\n<p> The conditional-OR operator cannot be overloaded, but overloads of the regular logical operators and the <a href=\"../keywords/true\" data-linktype=\"relative-path\">true</a> and <a href=\"../keywords/false\" data-linktype=\"relative-path\">false</a> operators are, with certain restrictions, also considered to be overloads of the conditional logical operators.  </p>\n<h2 id=\"example\">Example</h2>\n<p> In the following examples, the expression that uses <code>||</code> evaluates only the first operand. The expression that uses <code>|</code> evaluates both operands. In the second example, a run-time exception occurs if both operands are evaluated.  </p>\n<pre><code class=\"lang-cs\" name=\"csRefOperators#52\">    class ConditionalOr\n    {\n        // Method1 returns true.\n        static bool Method1()\n        {\n            Console.WriteLine(&quot;Method1 called.&quot;);\n            return true;\n        }\n\n        // Method2 returns false.\n        static bool Method2()\n        {\n            Console.WriteLine(&quot;Method2 called.&quot;);\n            return false;\n        }\n\n\n        static bool Divisible(int number, int divisor)\n        {\n            // If the OR expression uses ||, the division is not attempted\n            // when the divisor equals 0.\n            return !(divisor == 0 || number % divisor != 0);\n\n            // If the OR expression uses |, the division is attempted when\n            // the divisor equals 0, and causes a divide-by-zero exception.\n            // Replace the return statement with the following line to\n            // see the exception.\n            //return !(divisor == 0 | number % divisor != 0);\n        }\n\n        static void Main()\n        {\n            // Example #1 uses Method1 and Method2 to demonstrate \n            // short-circuit evaluation.\n\n            Console.WriteLine(&quot;Regular OR:&quot;);\n            // The | operator evaluates both operands, even though after \n            // Method1 returns true, you know that the OR expression is\n            // true.\n            Console.WriteLine(&quot;Result is {0}.\\n&quot;, Method1() | Method2());\n\n            Console.WriteLine(&quot;Short-circuit OR:&quot;);\n            // Method2 is not called, because Method1 returns true.\n            Console.WriteLine(&quot;Result is {0}.\\n&quot;, Method1() || Method2());\n\n\n            // In Example #2, method Divisible returns True if the\n            // first argument is evenly divisible by the second, and False\n            // otherwise. Using the | operator instead of the || operator\n            // causes a divide-by-zero exception.\n\n            // The following line displays True, because 42 is evenly \n            // divisible by 7.\n            Console.WriteLine(&quot;Divisible returns {0}.&quot;, Divisible(42, 7));\n\n            // The following line displays False, because 42 is not evenly\n            // divisible by 5.\n            Console.WriteLine(&quot;Divisible returns {0}.&quot;, Divisible(42, 5));\n\n            // The following line displays False when method Divisible \n            // uses ||, because you cannot divide by 0.\n            // If method Divisible uses | instead of ||, this line\n            // causes an exception.\n            Console.WriteLine(&quot;Divisible returns {0}.&quot;, Divisible(42, 0));\n        }\n    }\n    /*\n    Output:\n    Regular OR:\n    Method1 called.\n    Method2 called.\n    Result is True.\n\n    Short-circuit OR:\n    Method1 called.\n    Result is True.\n \n    Divisible returns True.\n    Divisible returns False.\n    Divisible returns False.\n    */\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"../../programming-guide/index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">C# Operators</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"7d442d8e-400d-421f-b4d2-034bf82bcbdc\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"25\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/operators/conditional-or-operator.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/operators/conditional-or-operator.md\">\r\n<meta name=\"document_id\" content=\"1535a8f3-81ad-0456-7aa6-180561602f10\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":" | Microsoft Docs","ms.assetid":"7d442d8e-400d-421f-b4d2-034bf82bcbdc","f1_keywords":["||_CSharpKeyword"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":25,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["logical OR operator [C#]","conditional-OR operator (||) [C#]","|| operator [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/operators/conditional-or-operator.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/operators/conditional-or-operator.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/operators/conditional-or-operator.md","document_id":"1535a8f3-81ad-0456-7aa6-180561602f10","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/operators/conditional-or-operator","toc_asset_id":"articles/csharp/language-reference/operators/toc.json","toc_rel":"toc.json","_op_ogTitle":"","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":485,"_op_rawTitle":"<h1 id=\"-operator-c-reference\" sourcefile=\"docs/csharp/language-reference/operators/conditional-or-operator.md\" sourcestartlinenumber=\"35\" sourceendlinenumber=\"35\">|| Operator (C# Reference)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/operators/conditional-or-operator","fileRelativePath":"articles/csharp/language-reference/operators/conditional-or-operator.html"},"themesRelativePathToOutputRoot":"_themes/"}