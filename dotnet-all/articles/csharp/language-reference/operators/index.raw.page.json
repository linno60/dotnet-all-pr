{"content":"<div><div class=\"content\">\n<p>C# provides many operators, which are symbols that specify which operations (math, indexing, function call, etc.) to perform in an expression.  You can <a href=\"../../programming-guide/statements-expressions-operators/overloadable-operators\" data-linktype=\"relative-path\">overload</a> many operators to change their meaning when applied to a user-defined type.  </p>\n<p> Operations on integral types (such as <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&amp;</code>, <code>|</code>) are generally allowed on enumeration (<code>enum</code>) types.  </p>\n<p> The sections lists the C# operators starting with the highest precedence to the lowest.  The operators within each section share the same precedence level.  </p>\n<h2 id=\"primary-operators\">Primary Operators</h2>\n<p> These are the highest precedence operators.  NOTE, you can click on the operators to go the detailed pages with examples.  </p>\n<p> <a href=\"member-access-operator\" data-linktype=\"relative-path\">x.y</a> – member access.  </p>\n<p> <a href=\"null-conditional-operators\" data-linktype=\"relative-path\">x?.y</a> – null conditional member access.  Returns <code>null</code> if the left-hand operand is <code>null</code>.  </p>\n<p> <a href=\"null-conditional-operators\" data-linktype=\"relative-path\">x?[y]</a> - null conditional index access. Returns <code>null</code> if the left-hand operand is <code>null</code>.</p>\n<p> <a href=\"invocation-operator\" data-linktype=\"relative-path\">f(x)</a> – function invocation.  </p>\n<p> <a href=\"index-operator\" data-linktype=\"relative-path\">a&#91;x&#93;</a> – aggregate object indexing.  </p>\n<p> <a href=\"null-conditional-operators\" data-linktype=\"relative-path\">a?&#91;x&#93;</a> – null conditional indexing.  Returns <code>null</code> if the left-hand operand is <code>null</code>.  </p>\n<p> <a href=\"increment-operator\" data-linktype=\"relative-path\">x++</a> – postfix increment.  Returns the value of x and then updates the storage location with the value of x that is one greater (typically adds the integer 1).  </p>\n<p> <a href=\"decrement-operator\" data-linktype=\"relative-path\">x--</a> –  postfix decrement.  Returns the value of x and then updates the storage location with the value of x that is one less (typically subtracts the integer 1).  </p>\n<p> <a href=\"../keywords/new-operator\" data-linktype=\"relative-path\">new</a> – type instantiation.  </p>\n<p> <a href=\"../keywords/typeof\" data-linktype=\"relative-path\">typeof</a> – returns the System.Type object representing the operand.  </p>\n<p> <a href=\"../keywords/checked\" data-linktype=\"relative-path\">checked</a> – enables overflow checking for integer operations.  </p>\n<p> <a href=\"../keywords/unchecked\" data-linktype=\"relative-path\">unchecked</a> – disables overflow checking for integer operations.  This is the default compiler behavior.  </p>\n<p> <a href=\"../../programming-guide/generics/default-keyword-in-generic-code\" data-linktype=\"relative-path\">default(T)</a> – returns the default initialized value of type T, <code>null</code> for reference types, zero for numeric types, and zero/<code>null</code> filled in members for struct types.  </p>\n<p> <a href=\"../../programming-guide/statements-expressions-operators/anonymous-methods\" data-linktype=\"relative-path\">delegate</a> – declares and returns a delegate instance.  </p>\n<p> <a href=\"../keywords/sizeof\" data-linktype=\"relative-path\">sizeof</a> – returns the size in bytes of the type operand.  </p>\n<p> <a href=\"dereference-operator\" data-linktype=\"relative-path\">-&gt;</a> – pointer dereferencing combined with member access.  </p>\n<h2 id=\"unary-operators\">Unary Operators</h2>\n<p> These operators have higher precedence than the next section and lower precedence than the previous section.  NOTE, you can click on the operators to go the detailed pages with examples.  </p>\n<p> <a href=\"addition-operator\" data-linktype=\"relative-path\">+x</a> – returns the value of x.  </p>\n<p> <a href=\"subtraction-operator\" data-linktype=\"relative-path\">-x</a> – numeric negation.  </p>\n<p> <a href=\"logical-negation-operator\" data-linktype=\"relative-path\">!x</a> – logical negation.  </p>\n<p> <a href=\"bitwise-complement-operator\" data-linktype=\"relative-path\">~x</a> – bitwise complement.  </p>\n<p> <a href=\"increment-operator\" data-linktype=\"relative-path\">++x</a> – prefix increment.  Returns the value of x after updating the storage location with the value of x that is one greater (typically adds the integer 1).  </p>\n<p> <a href=\"decrement-operator\" data-linktype=\"relative-path\">--x</a> – prefix decrement.  Returns the value of x after updating the storage location with the value of x that is one less (typically adds the integer 1).  </p>\n<p> <a href=\"invocation-operator\" data-linktype=\"relative-path\">(T)x</a> – type casting.  </p>\n<p> <a href=\"../keywords/await\" data-linktype=\"relative-path\">await</a> – awaits a <code>Task</code>.  </p>\n<p> <a href=\"and-operator\" data-linktype=\"relative-path\">&amp;x</a> – address of.  </p>\n<p> <a href=\"multiplication-operator\" data-linktype=\"relative-path\">*x</a> – dereferencing.  </p>\n<h2 id=\"multiplicative-operators\">Multiplicative Operators</h2>\n<p> These operators have higher precedence than the next section and lower precedence than the previous section.  NOTE, you can click on the operators to go the detailed pages with examples.  </p>\n<p> <a href=\"multiplication-operator\" data-linktype=\"relative-path\">x * y</a> – multiplication.  </p>\n<p> <a href=\"division-operator\" data-linktype=\"relative-path\">x / y</a> – division.  If the operands are integers, the result is an integer truncated toward zero (for example, <code>-7 / 2 is -3</code>).  </p>\n<p> <a href=\"modulus-operator\" data-linktype=\"relative-path\">x % y</a> – modulus.  If the operands are integers, this returns the remainder of dividing x by y.  If <code>q = x / y</code> and <code>r = x % y</code>, then <code>x = q * y + r</code>.  </p>\n<h2 id=\"additive-operators\">Additive Operators</h2>\n<p> These operators have higher precedence than the next section and lower precedence than the previous section.  NOTE, you can click on the operators to go the detailed pages with examples.  </p>\n<p> <a href=\"addition-operator\" data-linktype=\"relative-path\">x + y</a> – addition.  </p>\n<p> <a href=\"subtraction-operator\" data-linktype=\"relative-path\">x – y</a> – subtraction.  </p>\n<h2 id=\"shift-operators\">Shift Operators</h2>\n<p> These operators have higher precedence than the next section and lower precedence than the previous section.  NOTE, you can click on the operators to go the detailed pages with examples.  </p>\n<p> <a href=\"left-shift-operator\" data-linktype=\"relative-path\">x &lt;&lt;  y</a> – shift bits left and fill with zero on the right.  </p>\n<p> <a href=\"right-shift-operator\" data-linktype=\"relative-path\">x &gt;&gt; y</a> – shift bits right.  If the left operand is <code>int</code> or <code>long</code>, then left bits are filled with the sign bit.  If the left operand is <code>uint</code> or <code>ulong</code>, then left bits are filled with zero.  </p>\n<h2 id=\"relational-and-type-testing-operators\">Relational and Type-testing Operators</h2>\n<p> These operators have higher precedence than the next section and lower precedence than the previous section.  NOTE, you can click on the operators to go the detailed pages with examples.  </p>\n<p> <a href=\"less-than-operator\" data-linktype=\"relative-path\">x &lt; y</a> – less than (true if x is less than y).  </p>\n<p> <a href=\"greater-than-operator\" data-linktype=\"relative-path\">x &gt; y</a> – greater than (true if x is greater than y).  </p>\n<p> <a href=\"less-than-equal-operator\" data-linktype=\"relative-path\">x &lt;= y</a> – less than or equal to.  </p>\n<p> <a href=\"greater-than-equal-operator\" data-linktype=\"relative-path\">x &gt;= y</a> – greater than or equal to.  </p>\n<p> <a href=\"../keywords/is\" data-linktype=\"relative-path\">is</a> – type compatibility.  Returns true if the evaluated left operand can be cast to the type specified in the right operand (a static type).  </p>\n<p> <a href=\"../keywords/as\" data-linktype=\"relative-path\">as</a> – type conversion.  Returns the left operand cast to the type specified by the right operand (a static type), but <code>as</code> returns <code>null</code> where <code>(T)x</code> would throw an exception.  </p>\n<h2 id=\"equality-operators\">Equality Operators</h2>\n<p> These operators have higher precedence than the next section and lower precedence than the previous section.  NOTE, you can click on the operators to go the detailed pages with examples.  </p>\n<p> <a href=\"equality-comparison-operator\" data-linktype=\"relative-path\">x == y</a> – equality.  By default, for reference types other than <code>string</code>, this returns reference equality (identity test).  However, types can overload <code>==</code>, so if your intent is to test identity, it is best to use the <code>ReferenceEquals</code> method on <code>object</code>.  </p>\n<p> <a href=\"not-equal-operator\" data-linktype=\"relative-path\">x != y</a> – not equal.  See comment for <code>==</code>.  If a type overloads <code>==</code>, then it must overload <code>!=</code>.  </p>\n<h2 id=\"logical-and-operator\">Logical AND Operator</h2>\n<p> This operator has higher precedence than the next section and lower precedence than the previous section.  NOTE, you can click on the operator to go the details page with examples.  </p>\n<p> <a href=\"and-operator\" data-linktype=\"relative-path\">x &amp; y</a> – logical or bitwise AND.  Use with integer types and <code>enum</code> types is generally allowed.  </p>\n<h2 id=\"logical-xor-operator\">Logical XOR Operator</h2>\n<p> This operator has higher precedence than the next section and lower precedence than the previous section.  NOTE, you can click on the operator to go the details page with examples.  </p>\n<p> <a href=\"xor-operator\" data-linktype=\"relative-path\">x ^ y</a> – logical or bitwise XOR.  You can generally use this with integer types and <code>enum</code> types.  </p>\n<h2 id=\"logical-or-operator\">Logical OR Operator</h2>\n<p> This operator has higher precedence than the next section and lower precedence than the previous section.  NOTE, you can click on the operator to go the details page with examples.  </p>\n<p> <a href=\"or-operator\" data-linktype=\"relative-path\">x &#124; y</a> – logical or bitwise OR.  Use with integer types and <code>enum</code> types is generally allowed.  </p>\n<h2 id=\"conditional-and-operator\">Conditional AND Operator</h2>\n<p> This operator has higher precedence than the next section and lower precedence than the previous section.  NOTE, you can click on the operator to go the details page with examples.  </p>\n<p> <a href=\"conditional-and-operator\" data-linktype=\"relative-path\">x &amp;&amp; y</a> – logical AND.  If the first operand is false, then C# does not evaluate the second operand.  </p>\n<h2 id=\"conditional-or-operator\">Conditional OR Operator</h2>\n<p> This operator has higher precedence than the next section and lower precedence than the previous section.  NOTE, you can click on the operator to go the details page with examples.  </p>\n<p> <a href=\"conditional-or-operator\" data-linktype=\"relative-path\">x &#124;&#124; y</a> – logical OR.  If the first operand is true, then C# does not evaluate the second operand.  </p>\n<h2 id=\"null-coalescing-operator\">Null-coalescing Operator</h2>\n<p> This operator has higher precedence than the next section and lower precedence than the previous section.  NOTE, you can click on the operator to go the details page with examples.  </p>\n<p> <a href=\"null-conditional-operator\" data-linktype=\"relative-path\">x ?? y</a> – returns <code>x</code> if it is non-<code>null</code>; otherwise, returns <code>y</code>.  </p>\n<h2 id=\"conditional-operator\">Conditional Operator</h2>\n<p> This operator has higher precedence than the next section and lower precedence than the previous section.  NOTE, you can click on the operator to go the details page with examples.  </p>\n<p> <a href=\"conditional-operator\" data-linktype=\"relative-path\">t ? x : y</a> – if test <code>t</code> is true, then evaluate and return <code>x</code>; otherwise, evaluate and return <code>y</code>.  </p>\n<h2 id=\"assignment-and-lambda-operators\">Assignment and Lambda Operators</h2>\n<p> These operators have higher precedence than the next section and lower precedence than the previous section.  NOTE, you can click on the operators to go the detailed pages with examples.  </p>\n<p> <a href=\"assignment-operator\" data-linktype=\"relative-path\">x = y</a> – assignment.  </p>\n<p> <a href=\"addition-assignment-operator\" data-linktype=\"relative-path\">x += y</a> – increment.  Add the value of <code>y</code> to the value of <code>x</code>, store the result in <code>x</code>, and return the new value.  If <code>x</code> designates an <code>event</code>, then <code>y</code> must be an appropriate function that C# adds as an event handler.  </p>\n<p> <a href=\"subtraction-assignment-operator\" data-linktype=\"relative-path\">x -= y</a> – decrement.  Subtract the value of <code>y</code> from the value of <code>x</code>, store the result in <code>x</code>, and return the new value.  If <code>x</code> designates an <code>event</code>, then <code>y</code> must be an appropriate function that C# removes as an event handler  </p>\n<p> <a href=\"multiplication-assignment-operator\" data-linktype=\"relative-path\">x *= y</a> – multiplication assignment.  Multiply the value of <code>y</code> to the value of <code>x</code>, store the result in <code>x</code>, and return the new value.  </p>\n<p> <a href=\"division-assignment-operator\" data-linktype=\"relative-path\">x /= y</a> – division assignment.  Divide the value of <code>x</code> by the value of <code>y</code>, store the result in <code>x</code>, and return the new value.  </p>\n<p> <a href=\"modulus-assignment-operator\" data-linktype=\"relative-path\">x %= y</a> – modulus assignment.  Divide the value of <code>x</code> by the value of <code>y</code>, store the remainder in <code>x</code>, and return the new value.  </p>\n<p> <a href=\"and-assignment-operator\" data-linktype=\"relative-path\">x &amp;= y</a> – AND assignment.  AND the value of <code>y</code> with the value of <code>x</code>, store the result in <code>x</code>, and return the new value.  </p>\n<p> <a href=\"or-assignment-operator\" data-linktype=\"relative-path\">x &#124;= y</a> – OR assignment.  OR the value of <code>y</code> with the value of <code>x</code>, store the result in <code>x</code>, and return the new value.  </p>\n<p> <a href=\"xor-assignment-operator\" data-linktype=\"relative-path\">x ^= y</a> – XOR assignment.  XOR the value of <code>y</code> with the value of <code>x</code>, store the result in <code>x</code>, and return the new value.  </p>\n<p> <a href=\"left-shift-assignment-operator\" data-linktype=\"relative-path\">x &lt;&lt;= y</a> – left-shift assignment.  Shift the value of <code>x</code> left by <code>y</code> places, store the result in <code>x</code>, and return the new value.  </p>\n<p> <a href=\"right-shift-assignment-operator\" data-linktype=\"relative-path\">x &gt;&gt;= y</a> – right-shift assignment.  Shift the value of <code>x</code> right by <code>y</code> places, store the result in <code>x</code>, and return the new value.  </p>\n<p> <a href=\"lambda-operator\" data-linktype=\"relative-path\">=&gt;</a> – lambda declaration.  </p>\n<h2 id=\"arithmetic-overflow\">Arithmetic Overflow</h2>\n<p> The arithmetic operators (<a href=\"addition-operator\" data-linktype=\"relative-path\">+</a>, <a href=\"subtraction-operator\" data-linktype=\"relative-path\">-</a>, <a href=\"multiplication-operator\" data-linktype=\"relative-path\">*</a>, <a href=\"division-operator\" data-linktype=\"relative-path\">/</a>) can produce results that are outside the range of possible values for the numeric type involved. You should refer to the section on a particular operator for details, but in general:  </p>\n<ul>\n<li><p>Integer arithmetic overflow either throws an <a class=\"xref\" href=\"../../../../api/system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> or discards the most significant bits of the result. Integer division by zero always throws a <a class=\"xref\" href=\"../../../../api/system.dividebyzeroexception\" data-linktype=\"relative-path\">DivideByZeroException</a>.  </p>\n<p> When integer overflow occurs, what happens depends on the execution context, which can be <a href=\"../keywords/checked-and-unchecked\" data-linktype=\"relative-path\">checked or unchecked</a>. In a checked context, an <a class=\"xref\" href=\"../../../../api/system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> is thrown. In an unchecked context, the most significant bits of the result are discarded and execution continues. Thus, C# gives you the choice of handling or ignoring overflow. By default, arithmetic operations occur in an <em>unchecked</em> context. </p>\n<p> In addition to the arithmetic operations, integral-type to integral-type casts can cause overflow (such as when you cast a <a href=\"../keywords/long\" data-linktype=\"relative-path\">long</a> to an <a href=\"../keywords/int\" data-linktype=\"relative-path\">int</a>), and are subject to checked or unchecked execution. However, bitwise operators and shift operators never cause overflow.  </p>\n</li>\n<li><p>Floating-point arithmetic overflow or division by zero never throws an exception, because floating-point types are based on IEEE 754 and so have provisions for representing infinity and NaN (Not a Number).  </p>\n</li>\n<li><p><a href=\"../keywords/decimal\" data-linktype=\"relative-path\">Decimal</a> arithmetic overflow always throws an <a class=\"xref\" href=\"../../../../api/system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a>. Decimal division by zero always throws a <a class=\"xref\" href=\"../../../../api/system.dividebyzeroexception\" data-linktype=\"relative-path\">DivideByZeroException</a>.  </p>\n</li>\n</ul>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"../../programming-guide/index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"../../csharp\" data-linktype=\"relative-path\">C#</a><br> <a href=\"../../programming-guide/statements-expressions-operators/overloadable-operators\" data-linktype=\"relative-path\">Overloadable Operators</a><br> <a href=\"../keywords/index\" data-linktype=\"relative-path\">C# Keywords</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"0301e31f-22ad-49af-ac3c-d5eae7f0ac43\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"40\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2017-03-09\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/143a74f2845a89a3758b10cb309e24a85ca9c3bd/docs/csharp/language-reference/operators/index.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/operators/index.md\">\r\n<meta name=\"document_id\" content=\"7812d46a-22cb-675b-72e3-f873b56c6f18\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"C# Operators | Microsoft Docs","ms.assetid":"0301e31f-22ad-49af-ac3c-d5eae7f0ac43","f1_keywords":["cs.operators"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":40,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["boolean operators [C#]","expressions [C#], operators","logical operators [C#]","operators [C#]","Visual C#, operators","indirection operators [C#]","assignment operators [C#]","shift operators [C#]","relational operators [C#]","bitwise operators [C#]","address operators [C#]","keywords [C#], operators","arithmetic operators [C#]"],"ms.date":"2017-03-09","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"rpetrusha","author_email":"ronpet@microsoft.com","committer_name":"rpetrusha","comitter_email":"ronpet@microsoft.com","message":"Hyphenated left-hand","commit_sha":"143a74f2845a89a3758b10cb309e24a85ca9c3bd","commit_date":"2017-03-10 08:18:16 -0800"},{"author_name":"rpetrusha","author_email":"ronpet@microsoft.com","committer_name":"rpetrusha","comitter_email":"ronpet@microsoft.com","message":"Added link to ?? operator and some other changes","commit_sha":"4d9c07753c5a70d400b05ce6d80033ab588624ba","commit_date":"2017-03-09 15:37:25 -0800"},{"author_name":"Petr Onderka","author_email":"gsvick@gmail.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":"Fixed C# operator titles (#1388)","commit_sha":"c954064337e3e77cbd09e61c64aa67a3c450743a","commit_date":"2017-01-06 11:27:09 -0500"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/rpetrusha","display_name":"rpetrusha","id":"10886961"},{"profile_url":"https://github.com/svick","display_name":"Petr Onderka","id":"287848"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/143a74f2845a89a3758b10cb309e24a85ca9c3bd/docs/csharp/language-reference/operators/index.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/operators/index.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/operators/index.md","document_id":"7812d46a-22cb-675b-72e3-f873b56c6f18","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/operators/index","toc_asset_id":"articles/csharp/language-reference/operators/toc.json","toc_rel":"toc.json","_op_ogTitle":"C# Operators","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":1789,"_op_rawTitle":"<h1 id=\"c-operators\" sourcefile=\"docs/csharp/language-reference/operators/index.md\" sourcestartlinenumber=\"45\" sourceendlinenumber=\"45\">C# Operators</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/operators/index","fileRelativePath":"articles/csharp/language-reference/operators/index.html"},"themesRelativePathToOutputRoot":"_themes/"}