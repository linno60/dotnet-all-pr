{"content":"<div><div class=\"content\">\n<p>The &amp; operator can function as either a unary or a binary operator.  </p>\n<h2 id=\"remarks\">Remarks</h2>\n<p> The unary &amp; operator returns the address of its operand (requires <a href=\"../keywords/unsafe\" data-linktype=\"relative-path\">unsafe</a> context).  </p>\n<p> Binary &amp; operators are predefined for the integral types and <code>bool</code>. For integral types, &amp; computes the logical bitwise AND of its operands. For <code>bool</code> operands, &amp; computes the logical AND of its operands; that is, the result is <code>true</code> if and only if both its operands are <code>true</code>.  </p>\n<p> The <code>&amp;</code> operator evaluates both operators regardless of the first one&#39;s value. For example:  </p>\n<pre><code class=\"lang-cs\" name=\"csRefOperators#37\">int i = 0;\nif (false &amp; ++i == 1)\n{\n    // i is incremented, but the conditional\n    // expression evaluates to false, so\n    // this block does not execute.\n}\n</code></pre><p> User-defined types can overload the binary <code>&amp;</code> operator (see <a href=\"../keywords/operator\" data-linktype=\"relative-path\">operator</a>). Operations on integral types are generally allowed on enumeration. When a binary operator is overloaded, the corresponding assignment operator, if any, is also implicitly overloaded.  </p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"lang-cs\" name=\"csRefOperators#38\">class BitwiseAnd\n{\n    static void Main()\n    {\n        // The following two statements perform logical ANDs.\n        Console.WriteLine(true &amp; false); \n        Console.WriteLine(true &amp; true);  \n\n        // The following line performs a bitwise AND of F8 (1111 1000) and\n        // 3F (0011 1111).\n        //    1111 1000\n        //    0011 1111\n        //    ---------\n        //    0011 1000 or 38\n        Console.WriteLine(&quot;0x{0:x}&quot;, 0xf8 &amp; 0x3f); \n    }\n}\n// Output:\n// False\n// True\n// 0x38\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"../../programming-guide/index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">C# Operators</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"afa346d5-90ec-4b1f-a2c8-3881f018741d\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"19\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/operators/and-operator.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/operators/and-operator.md\">\r\n<meta name=\"document_id\" content=\"0de38471-25d6-d3c2-1109-af4ab887192b\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"&amp; Operator (C# Reference) | Microsoft Docs","ms.assetid":"afa346d5-90ec-4b1f-a2c8-3881f018741d","f1_keywords":["&_CSharpKeyword"],"translation.priority.ht":["de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","ru-ru","zh-cn","zh-tw"],"caps.latest.revision":19,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["bitwise AND operator [C#]","ampersand operator (&) [C#]","& operator [C#]","AND operator (&) [C#]"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/operators/and-operator.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/operators/and-operator.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/operators/and-operator.md","document_id":"0de38471-25d6-d3c2-1109-af4ab887192b","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/operators/and-operator","toc_asset_id":"articles/csharp/language-reference/operators/toc.json","toc_rel":"toc.json","_op_ogTitle":"&amp; Operator (C# Reference)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":231,"_op_rawTitle":"<h1 id=\"amp-operator-c-reference\" sourcefile=\"docs/csharp/language-reference/operators/and-operator.md\" sourcestartlinenumber=\"37\" sourceendlinenumber=\"37\">&amp; Operator (C# Reference)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/operators/and-operator","fileRelativePath":"articles/csharp/language-reference/operators/and-operator.html"},"themesRelativePathToOutputRoot":"_themes/"}