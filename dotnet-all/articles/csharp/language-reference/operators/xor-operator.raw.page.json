{"content":"<div><div class=\"content\">\n<p>Binary <code>^</code> operators are predefined for the integral types and <code>bool</code>. For integral types, <code>^</code> computes the bitwise exclusive-OR of its operands. For <code>bool</code> operands, <code>^</code> computes the logical exclusive-or of its operands; that is, the result is <code>true</code> if and only if exactly one of its operands is <code>true</code>.  </p>\n<h2 id=\"remarks\">Remarks</h2>\n<p> User-defined types can overload the <code>^</code> operator (see <a href=\"../keywords/operator\" data-linktype=\"relative-path\">operator</a>). Operations on integral types are generally allowed on enumeration.  </p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"lang-cs\" name=\"csRefOperators#30\">    class XOR\n    {\n        static void Main()\n        {\n            // Logical exclusive-OR\n\n            // When one operand is true and the other is false, exclusive-OR \n            // returns True.\n            Console.WriteLine(true ^ false);\n            // When both operands are false, exclusive-OR returns False.\n            Console.WriteLine(false ^ false);\n            // When both operands are true, exclusive-OR returns False.\n            Console.WriteLine(true ^ true);\n\n\n            // Bitwise exclusive-OR\n\n            // Bitwise exclusive-OR of 0 and 1 returns 1.\n            Console.WriteLine(&quot;Bitwise result: {0}&quot;, Convert.ToString(0x0 ^ 0x1, 2));\n            // Bitwise exclusive-OR of 0 and 0 returns 0.\n            Console.WriteLine(&quot;Bitwise result: {0}&quot;, Convert.ToString(0x0 ^ 0x0, 2));\n            // Bitwise exclusive-OR of 1 and 1 returns 0.\n            Console.WriteLine(&quot;Bitwise result: {0}&quot;, Convert.ToString(0x1 ^ 0x1, 2));\n\n            // With more than one digit, perform the exclusive-OR column by column.\n            //    10\n            //    11\n            //    --\n            //    01\n            // Bitwise exclusive-OR of 10 (2) and 11 (3) returns 01 (1).\n            Console.WriteLine(&quot;Bitwise result: {0}&quot;, Convert.ToString(0x2 ^ 0x3, 2));\n\n            // Bitwise exclusive-OR of 101 (5) and 011 (3) returns 110 (6).\n            Console.WriteLine(&quot;Bitwise result: {0}&quot;, Convert.ToString(0x5 ^ 0x3, 2));\n\n            // Bitwise exclusive-OR of 1111 (decimal 15, hexadecimal F) and 0101 (5)\n            // returns 1010 (decimal 10, hexadecimal A).\n            Console.WriteLine(&quot;Bitwise result: {0}&quot;, Convert.ToString(0xf ^ 0x5, 2));\n\n            // Finally, bitwise exclusive-OR of 11111000 (decimal 248, hexadecimal F8)\n            // and 00111111 (decimal 63, hexadecimal 3F) returns 11000111, which is \n            // 199 in decimal, C7 in hexadecimal.\n            Console.WriteLine(&quot;Bitwise result: {0}&quot;, Convert.ToString(0xf8 ^ 0x3f, 2));\n        }\n    }\n    /*\n    Output:\n    True\n    False\n    False\n    Bitwise result: 1\n    Bitwise result: 0\n    Bitwise result: 0\n    Bitwise result: 1\n    Bitwise result: 110\n    Bitwise result: 1010\n    Bitwise result: 11000111\n    */\n</code></pre><p> The computation of <code>0xf8 ^ 0x3f</code> in the previous example performs a bitwise exclusive-OR of the following two binary values, which correspond to the hexadecimal values F8 and 3F:  </p>\n<p> <code>1111 1000</code>  </p>\n<p> <code>0011 1111</code>  </p>\n<p> The result of the exclusive-OR is <code>1100 0111</code>, which is C7 in hexadecimal.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"../../programming-guide/index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">C# Operators</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"b09bc815-570f-4db6-a637-5b4ed99d014a\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"19\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-21 01:42 AM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/operators/xor-operator.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/csharp/language-reference/operators/xor-operator.md\">\r\n<meta name=\"document_id\" content=\"842fe05a-f559-7037-ea7e-ca7a8964f6be\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"^ Operator (C# Reference) | Microsoft Docs","ms.assetid":"b09bc815-570f-4db6-a637-5b4ed99d014a","f1_keywords":["^_CSharpKeyword"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":19,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["^ operator [C#]","bitwise exclusive OR operator [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-21 01:42 AM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/21/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/operators/xor-operator.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/csharp/language-reference/operators/xor-operator.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/operators/xor-operator.md","document_id":"842fe05a-f559-7037-ea7e-ca7a8964f6be","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/operators/xor-operator","toc_asset_id":"articles/csharp/language-reference/operators/toc.json","toc_rel":"toc.json","_op_ogTitle":"^ Operator (C# Reference)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":376,"_op_rawTitle":"<h1 id=\"-operator-c-reference\" sourcefile=\"docs/csharp/language-reference/operators/xor-operator.md\" sourcestartlinenumber=\"34\" sourceendlinenumber=\"34\">^ Operator (C# Reference)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/operators/xor-operator","fileRelativePath":"articles/csharp/language-reference/operators/xor-operator.html"},"themesRelativePathToOutputRoot":"_themes/"}