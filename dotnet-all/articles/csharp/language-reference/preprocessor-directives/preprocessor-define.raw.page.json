{"content":"<div><div class=\"content\">\n<p>You use <code>#define</code> to define a symbol. When you use the symbol as the expression that&#39;s passed to the <a href=\"preprocessor-if\" data-linktype=\"relative-path\">#if</a> directive, the expression will evaluate to <code>true</code>, as the following example shows:  </p>\n<p> <code>#</code>  <code>define</code>   <code>DEBUG</code>  </p>\n<h2 id=\"remarks\">Remarks</h2>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>#define</code> directive cannot be used to declare constant values as is typically done in C and C++. Constants in C# are best defined as static members of a class or struct. If you have several such constants, consider creating a separate &quot;Constants&quot; class to hold them.  </p>\n</div>\n<p> Symbols can be used to specify conditions for compilation. You can test for the symbol with either <a href=\"preprocessor-if\" data-linktype=\"relative-path\">#if</a> or <a href=\"preprocessor-elif\" data-linktype=\"relative-path\">#elif</a>. You can also use the <code>conditional</code> attribute to perform conditional compilation.  </p>\n<p> You can define a symbol, but you cannot assign a value to a symbol. The <code>#define</code> directive must appear in the file before you use any instructions that aren&#39;t also preprocessor directives.  </p>\n<p> You can also define a symbol with the <a href=\"../compiler-options/define-compiler-option\" data-linktype=\"relative-path\">/define</a> compiler option. You can undefine a symbol with <a href=\"preprocessor-undef\" data-linktype=\"relative-path\">#undef</a>.  </p>\n<p> A symbol that you define with <code>/define</code> or with <code>#define</code> does not conflict with a variable of the same name. That is, a variable name should not be passed to a preprocessor directive and a symbol can only be evaluated by a preprocessor directive.  </p>\n<p> The scope of a symbol that was created by using <code>#define</code> is the file in which the symbol was defined.  </p>\n<p> As the following example shows, you must put <code>#define</code> directives at the top of the file.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">#define DEBUG  \n//#define TRACE  \n#undef TRACE  \n\nusing System;  \n\npublic class TestDefine  \n{  \n    static void Main()  \n    {  \n#if (DEBUG)  \n        Console.WriteLine(&quot;Debugging is enabled.&quot;);  \n#endif  \n\n#if (TRACE)  \n     Console.WriteLine(&quot;Tracing is enabled.&quot;);  \n#endif  \n    }  \n}  \n// Output:  \n// Debugging is enabled.  \n</code></pre><p> For an example of how to undefine a symbol, see <a href=\"preprocessor-undef\" data-linktype=\"relative-path\">#undef</a>.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"../../programming-guide/index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">C# Preprocessor Directives</a><br> <a href=\"../keywords/const\" data-linktype=\"relative-path\">const</a><br> <a href=\"http://msdn.microsoft.com/library/56d051c3-012c-42c1-9a58-7270edc624aa\" data-linktype=\"external\">How to: Compile Conditionally with Trace and Debug</a><br> <a href=\"preprocessor-undef\" data-linktype=\"relative-path\">#undef</a><br> <a href=\"preprocessor-if\" data-linktype=\"relative-path\">#if</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"23638b8f-779c-450e-b600-d55682de7d01\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"22\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/preprocessor-directives/preprocessor-define.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/preprocessor-directives/preprocessor-define.md\">\r\n<meta name=\"document_id\" content=\"2ab0b82a-83fd-dc0d-80a9-a35feaab3d69\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"#define (C# Reference) | Microsoft Docs","ms.assetid":"23638b8f-779c-450e-b600-d55682de7d01","f1_keywords":["#define"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":22,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["#define directive [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/preprocessor-directives/preprocessor-define.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/preprocessor-directives/preprocessor-define.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/preprocessor-directives/preprocessor-define.md","document_id":"2ab0b82a-83fd-dc0d-80a9-a35feaab3d69","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/preprocessor-directives/preprocessor-define","toc_asset_id":"articles/csharp/language-reference/preprocessor-directives/toc.json","toc_rel":"toc.json","_op_ogTitle":"#define (C# Reference)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":313,"_op_rawTitle":"<h1 id=\"define-c-reference\" sourcefile=\"docs/csharp/language-reference/preprocessor-directives/preprocessor-define.md\" sourcestartlinenumber=\"33\" sourceendlinenumber=\"33\">#define (C# Reference)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/preprocessor-directives/preprocessor-define","fileRelativePath":"articles/csharp/language-reference/preprocessor-directives/preprocessor-define.html"},"themesRelativePathToOutputRoot":"_themes/"}