{"content":"<div><div class=\"content\">\n<p>When the C# compiler encounters an <code>#if</code> directive, followed eventually by an <a href=\"preprocessor-endif\" data-linktype=\"relative-path\">#endif</a> directive, it will compile the code between the directives only if the specified symbol is defined.  Unlike C and C++, you cannot assign a numeric value to a symbol; the #if statement in C# is Boolean and only tests whether the symbol has been defined or not. For example,  </p>\n<pre class=\"loading\"><code>#define DEBUG  \n// ...  \n#if DEBUG  \n    Console.WriteLine(&quot;Debug version&quot;);  \n#endif  \n</code></pre><p> You can use the operators <a href=\"../operators/equality-comparison-operator\" data-linktype=\"relative-path\">==</a> (equality), <a href=\"../operators/not-equal-operator\" data-linktype=\"relative-path\">!=</a> (inequality) only to test for <a href=\"../keywords/true\" data-linktype=\"relative-path\">true</a> or <a href=\"../keywords/false\" data-linktype=\"relative-path\">false</a> . True means the symbol is defined. The statement <code>#if DEBUG</code> has the same meaning as <code>#if (DEBUG == true)</code>. You can use the operators <a href=\"../operators/conditional-and-operator\" data-linktype=\"relative-path\">&amp;&amp;</a> (and), <a href=\"../operators/conditional-or-operator\" data-linktype=\"relative-path\">&#124;&#124;</a> (or), and <a href=\"../operators/logical-negation-operator\" data-linktype=\"relative-path\">!</a> (not) to evaluate whether multiple symbols have been defined. You can also group symbols and operators with parentheses.  </p>\n<h2 id=\"remarks\">Remarks</h2>\n<p> <code>#if</code>, along with the <a href=\"preprocessor-else\" data-linktype=\"relative-path\">#else</a>, <a href=\"preprocessor-elif\" data-linktype=\"relative-path\">#elif</a>, <a href=\"preprocessor-endif\" data-linktype=\"relative-path\">#endif</a>, <a href=\"preprocessor-define\" data-linktype=\"relative-path\">#define</a>, and <a href=\"preprocessor-undef\" data-linktype=\"relative-path\">#undef</a> directives, lets you include or exclude code based on the existence of one or more symbols. This can be useful when compiling code for a debug build or when compiling for a specific configuration.  </p>\n<p> A conditional directive beginning with a <code>#if</code> directive must explicitly be terminated with a <code>#endif</code> directive.  </p>\n<p> <code>#define</code> lets you define a symbol, such that, by using the symbol as the expression passed to the <code>#if</code> directive, the expression will evaluate to <code>true</code>.  </p>\n<p> You can also define a symbol with the <a href=\"../compiler-options/define-compiler-option\" data-linktype=\"relative-path\">/define</a> compiler option. You can undefine a symbol with <a href=\"preprocessor-undef\" data-linktype=\"relative-path\">#undef</a>.  </p>\n<p> A symbol that you define with <code>/define</code> or with <code>#define</code> does not conflict with a variable of the same name. That is, a variable name should not be passed to a preprocessor directive and a symbol can only be evaluated by a preprocessor directive.  </p>\n<p> The scope of a symbol created with <code>#define</code> is the file in which it was defined.  </p>\n<h2 id=\"example\">Example</h2>\n<pre class=\"loading\"><code>// preprocessor_if.cs  \n#define DEBUG#define MYTEST  \nusing System;  \npublic class MyClass   \n{  \n    static void Main()   \n    {  \n#if (DEBUG &amp;&amp; !MYTEST)  \n        Console.WriteLine(&quot;DEBUG is defined&quot;);  \n#elif (!DEBUG &amp;&amp; MYTEST)  \n        Console.WriteLine(&quot;MYTEST is defined&quot;);  \n#elif (DEBUG &amp;&amp; MYTEST)  \n        Console.WriteLine(&quot;DEBUG and MYTEST are defined&quot;);  \n#else  \n        Console.WriteLine(&quot;DEBUG and MYTEST are not defined&quot;);  \n#endif  \n    }  \n}  \n</code></pre><p> <strong>DEBUG and MYTEST are defined</strong>   </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"../../programming-guide/index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">C# Preprocessor Directives</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"48cabbff-ca82-491f-a56a-eeccd528c7c2\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"17\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/preprocessor-directives/preprocessor-if.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/preprocessor-directives/preprocessor-if.md\">\r\n<meta name=\"document_id\" content=\"a90f0d7e-e415-c45a-dfe1-6fb1c1a59a81\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"#if (C# Reference) | Microsoft Docs","ms.assetid":"48cabbff-ca82-491f-a56a-eeccd528c7c2","f1_keywords":["#if"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":17,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["#if directive [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/preprocessor-directives/preprocessor-if.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/preprocessor-directives/preprocessor-if.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/preprocessor-directives/preprocessor-if.md","document_id":"a90f0d7e-e415-c45a-dfe1-6fb1c1a59a81","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/preprocessor-directives/preprocessor-if","toc_asset_id":"articles/csharp/language-reference/preprocessor-directives/toc.json","toc_rel":"toc.json","_op_ogTitle":"#if (C# Reference)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":362,"_op_rawTitle":"<h1 id=\"if-c-reference\" sourcefile=\"docs/csharp/language-reference/preprocessor-directives/preprocessor-if.md\" sourcestartlinenumber=\"33\" sourceendlinenumber=\"33\">#if (C# Reference)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/preprocessor-directives/preprocessor-if","fileRelativePath":"articles/csharp/language-reference/preprocessor-directives/preprocessor-if.html"},"themesRelativePathToOutputRoot":"_themes/"}