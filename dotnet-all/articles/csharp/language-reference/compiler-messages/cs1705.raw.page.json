{"content":"<div><div class=\"content\">\n<p>Assembly &#39;AssemblyName1&#39; uses &#39;TypeName&#39; which has a higher version than referenced assembly &#39;AssemblyName2&#39;  </p>\n<p> You are accessing a type that has a higher version number than the version number in a referenced assembly. Typically, this error is caused by the accidental use of two versions of the same assembly.  </p>\n<p> For example, suppose that you have two assemblies, Asmb1 and Asmb2. Assembly Asmb1 references version 1.0 of assembly Asmb2. Assembly Asmb1 also uses a class <code>MyClass</code> that was added to assembly Asmb2 in version 2.0. The compiler has unification rules for binding references, and a reference to <code>MyClass</code> in version 2.0 cannot be satisfied by version 1.0.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following more detailed example consists of four code modules:  </p>\n<ul>\n<li><p>Two DLLs that are identical except for a version attribute.  </p>\n</li>\n<li><p>A third DLL that references the first two.  </p>\n</li>\n<li><p>A client that references only version 1.0 of the identical DLLs, but accesses a class from version 2.0.  </p>\n<p>The following code creates the first of the identical DLLs. For information about how to generate a key file, see <a href=\"../compiler-options/keyfile-compiler-option\" data-linktype=\"relative-path\">/keyfile (C# Compiler Options)</a>.  </p>\n</li>\n</ul>\n<pre class=\"loading\"><code class=\"lang-cs\">// CS1705a.cs  \n\n// Compile by using the following command:   \n//      csc /target:library /out:C:\\\\CS1705.dll /keyfile:mykey.snk CS1705a.cs  \n\n// The DLL is created in the C:\\ directory.  \n\n// The AssemblyVersion attribute specifies version 1.0 for this DLL.  \n\n[assembly:System.Reflection.AssemblyVersion(&quot;1.0&quot;)]  \npublic class Class1   \n{  \n   public void Method1() {}  \n}  \n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> The following code defines version 2.0 of the assembly, as specified by the <a class=\"xref\" href=\"../../../../api/system.reflection.assemblyversionattribute\" data-linktype=\"relative-path\">AssemblyVersionAttribute</a> attribute.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">// CS1705b.cs  \n\n// Compile by using the following command:   \n//     csc /target:library /out:CS1705.dll /keyfile:mykey.snk CS1705b.cs  \n\n// The DLL is created in the current directory.  \n\n// The AssemblyVersion attribute specifies version 2.0 for this DLL.  \n\n[assembly:System.Reflection.AssemblyVersion(&quot;2.0&quot;)]  \npublic class Class1  \n{  \n    public void Method1() { }  \n}  \n</code></pre><h2 id=\"example-2\">Example</h2>\n<p> The following code references the two DLL versions that are defined in the preceding code. <code>AssemblyA</code> refers to the DLL created by CS1705a.cs (version 1.0). <code>AssemblyB</code> refers to the DLL created by CS1705b.cs (version 2.0). In <code>ClassC</code>, two methods are defined. The first, <code>Return1A</code>, returns an object of type <code>Class1A</code>, which is an alias for <code>Class1</code> from version 1.0 of the DLL. The second, <code>Return1B</code>, returns an object of type <code>Class1B</code>, which is an alias for <code>Class1</code> from version 2.0 of the DLL. The definition of <code>Return1A</code> creates a dependency on version 1.0; the definition of <code>Return1B</code> creates a dependency on version 2.0.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">// CS1705c.cs  \n\n// Compile by using the following command. AssemblyA refers to the DLL created by  \n// CS1705a.cs (version 1.0). AssemblyB refers to the DLL created by CS1705b.cs  \n// (version 2.0).  \n//    csc /target:library /r:AssemblyA=C:\\\\CS1705.dll /r:AssemblyB=CS1705.dll CS1705c.cs  \n\nextern alias AssemblyA;  \nextern alias AssemblyB;  \n\n// Class1A is an alias for type Class1 from VS1705a.cs, which is in version 1.0   \n// of the assembly. Class1B is an alias for type Class1 from CS1705b.cs, which  \n// is in version 2.0 of the assembly.  \n\nusing Class1A = AssemblyA::Class1;  \nusing Class1B = AssemblyB::Class1;  \n\n// Method Return1A in ClassC returns an object of type Class1A, which is  \n// Class1 from version 1.0 of the DLL. Method Return1B returns an object  \n// of type Class1B, which is Class1 from version 2.0 of the DLL.  \n\npublic class ClassC  \n{  \n    // The following line creates a dependency on version 1.0 of CS1705.dll.  \n    // This is not the source of the problem when ClassC is accessed from  \n    // CS1705d.cs because CS1705d.cs references version 1.0 of the DLL.   \n    // Therefore, type Class1A and the assembly have the same version.  \n    public static Class1A Return1A() { return new Class1A(); }  \n\n    // The following line creates a dependency on version 2.0 of CS1705.dll.  \n    // This causes compiler error CS1705 when ClassC is accessed from     \n    // CS1705d.cs, because CS1705d.cs does not reference version 2.0 of the   \n    // DLL. Class1B is the alias for Class1 in version 2.0, and CS1705d.cs   \n    // references version 1.0.  \n    public static Class1B Return1B() { return new Class1B(); }  \n}  \n</code></pre><h2 id=\"example-3\">Example</h2>\n<p> The following code generates compiler error CS1705. It references the DLL created by CS1705a.cs (version 1.0). However, in the <code>Main</code> method, the code accesses <code>ClassC</code> from CS1705c.cs. <code>ClassC</code> uses a type that is defined in CS1705b.cs (version 2.0). This causes compiler error CS1705 because the type has a version number for CS1705.dll that is higher than the referenced version of CS1705.dll.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">// CS1705d.cs  \n\n// Compile by using the following command:  \n//     csc /reference:C:\\\\CS1705.dll /reference:CS1705c.dll CS1705d.cs  \n\n// C:\\\\CS1705.dll is version 1.0 of the assembly.  \n\nclass Tester   \n{  \n    static void Main()  \n    {  \n        // Return1A returns a type defined in version 1.0.  \n        ClassC.Return1A().Method1();  \n        // Return1B returns a type defined in version 2.0.  \n        ClassC.Return1B().Method1();  \n    }  \n}  \n</code></pre><p> You can resolve the error in one of the following ways:  </p>\n<ul>\n<li><p>Update the code so that all files use the same version of the DLL.  </p>\n</li>\n<li><p>Add a reference to version 2.0 of the DLL to CS1705d.cs by using the following command to compile:  </p>\n<p> <code>csc /reference:C:\\\\CS1705.dll /reference:CS1705.dll /reference:CS1705c.dll CS1705d.cs</code>  </p>\n<p> Although the program compiles when you use this command, it still does not run. To enable the program to run, you can provide an application configuration file that includes a <a href=\"http://msdn.microsoft.com/library/14e95627-dd79-4b82-ac85-e682aa3a31d8\" data-linktype=\"external\">&lt;dependentAssembly&gt; element</a> that uses <a href=\"http://msdn.microsoft.com/library/cea4d187-6398-4da4-af09-c1abc6a349c1\" data-linktype=\"external\">&lt;assemblyIdentity&gt;</a> and <a href=\"http://msdn.microsoft.com/library/d48a3983-2297-43ff-a14d-1f29d3995822\" data-linktype=\"external\">&lt;codeBase&gt;</a> child elements to specify the location of version 1.0 of the DLL. For more information about configuration files, see <a href=\"http://msdn.microsoft.com/library/86bd26d3-737e-4484-9782-19b17f34cd1f\" data-linktype=\"external\">Configuring Apps</a>.  </p>\n</li>\n</ul>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../keywords/extern-alias\" data-linktype=\"relative-path\">extern alias</a><br> <a href=\"../operators/namespace-alias-qualifer\" data-linktype=\"relative-path\">:: Operator</a><br> <a href=\"../compiler-options/command-line-building-with-csc-exe\" data-linktype=\"relative-path\">Command-line Building With csc.exe</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"3612a542-0256-4fed-b020-41691ef5a052\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"13\">\r\n<meta name=\"ms.topic\" content=\"error-reference\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/compiler-messages/cs1705.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/compiler-messages/cs1705.md\">\r\n<meta name=\"document_id\" content=\"321d404c-a8d8-e442-c25b-e716190dd428\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Compiler Error CS1705 | Microsoft Docs","ms.assetid":"3612a542-0256-4fed-b020-41691ef5a052","f1_keywords":["CS1705"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":13,"ms.topic":"error-reference","dev_langs":["csharp"],"helpviewer_keywords":["CS1705"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/compiler-messages/cs1705.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/compiler-messages/cs1705.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/compiler-messages/cs1705.md","document_id":"321d404c-a8d8-e442-c25b-e716190dd428","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/compiler-messages/cs1705","toc_asset_id":"articles/csharp/language-reference/compiler-messages/toc.json","toc_rel":"toc.json","_op_ogTitle":"Compiler Error CS1705","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":860,"_op_rawTitle":"<h1 id=\"compiler-error-cs1705\" sourcefile=\"docs/csharp/language-reference/compiler-messages/cs1705.md\" sourcestartlinenumber=\"33\" sourceendlinenumber=\"33\">Compiler Error CS1705</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/compiler-messages/cs1705","fileRelativePath":"articles/csharp/language-reference/compiler-messages/cs1705.html"},"themesRelativePathToOutputRoot":"_themes/"}