{"content":"<div><div class=\"content\">\n<p>Cannot implicitly convert type &#39;type&#39; to &#39;type&#39;  </p>\n<p> The compiler requires an explicit conversion. For example, you may need to cast an r-value to be the same type as an l-value. Or, you must provide conversion routines to support certain operator overloads.  </p>\n<p> Conversions must occur when assigning a variable of one type to a variable of a different type. When making an assignment between variables of different types, the compiler must convert the type on the right-hand side of the assignment operator to the type on the left-hand side of the assignment operator. Take the following the code:  </p>\n<pre class=\"loading\"><code>int i = 50;  \nlong lng = 100;  \ni = lng;  \n</code></pre><p> <code>i = lng;</code> makes an assignment, but the data types of the variables on the left and right-hand side of the assignment operator don&#39;t match. Before making the assignment the compiler is implicitly converting the variable <code>lng</code>, which is of type long, to an int. This is implicit because no code explicitly instructed the compiler to perform this conversion. The problem with this code is that this is considered a narrowing conversion, and the compiler does not allow implicit narrowing conversions because there could be a potential loss of data.  </p>\n<p> A narrowing conversion exists when converting to a data type that occupies less storage space in memory than the data type we are converting from. For example, converting a long to an int would be considered a narrowing conversion. A long occupies 8 bytes of memory while an int occupies 4 bytes. To see how data loss can occur, consider the following sample:  </p>\n<pre class=\"loading\"><code>int i = 50;  \nlong lng = 3147483647;  \ni = lng;  \n</code></pre><p> The variable <code>lng</code> now contains a value that cannot be stored in the variable <code>i</code> because it is too large. If we were to convert this value to an int type we would be losing some of our data and the converted value would not be the same as the value before the conversion.  </p>\n<p> A widening conversion would be the opposite of a narrowing conversion. With widening conversions, we are converting to a data type that occupies more storage space in memory than the data type we are converting from. Here is an example of a widening conversion:  </p>\n<pre class=\"loading\"><code>int i = 50;  \nlong lng = 100;  \nlng = i;  \n</code></pre><p> Notice the difference between this code sample and the first. This time the variable <code>lng</code> is on the left-hand side of the assignment operator, so it is the target of our assignment. Before the assignment can be made, the compiler must implicitly convert the variable <code>i</code>, which is of type int, to type long. This is a widening conversion since we are converting from a type that occupies 4 bytes of memory (an int) to a type that occupies 8 bytes of memory (a long). Implicit widening conversions are allowed because there is no potential loss of data. Any value that can be stored in an int can also be stored in a long.  </p>\n<p> We know that implicit narrowing conversions are not allowed, so to be able to compile this code we need to explicitly convert the data type. Explicit conversions are done using casting. Casting is the term used in C# to describe converting one data type to another. To get the code to compile we would need to use the following syntax:  </p>\n<pre class=\"loading\"><code>int i = 50;  \nlong lng = 100;  \ni = (int) lng;   // cast to int  \n</code></pre><p> The third line of code tells the compiler to explicitly convert the variable <code>lng</code>, which is of type long, to an int before making the assignment. Remember that with a narrowing conversion, there is a potential loss of data. Narrowing conversions should be used with caution and even though the code will compile you may get unexpected results at run-time.  </p>\n<p> This discussion has only been for value types. When working with value types you work directly with the data stored in the variable. However, the .NET Framework also has reference types. When working with reference types you are working with a reference to a variable, not the actual data. Examples of reference types would be classes, interfaces and arrays. You cannot implicitly or explicitly convert one reference type to another unless the compiler allows the specific conversion or the appropriate conversion operators are implemented.  </p>\n<p> The following sample generates CS0029:  </p>\n<pre class=\"loading\"><code>// CS0029.cs  \npublic class MyInt  \n{  \n    private int x = 0;      \n\n    // Uncomment this conversion routine to resolve CS0029  \n    /*  \n    public static implicit operator int(MyInt i)  \n    {  \n       return i.x;  \n    }  \n    */  \n\n    public static void Main()  \n   {  \n      MyInt myInt = new MyInt();  \n      int i = myInt; // CS0029  \n   }  \n}  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../../programming-guide/statements-expressions-operators/conversion-operators\" data-linktype=\"relative-path\">Conversion Operators</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"63c3e574-1868-4a9e-923e-dcd9f38bce88\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"7\">\r\n<meta name=\"ms.topic\" content=\"error-reference\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-21 01:42 AM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/compiler-messages/cs0029.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/csharp/language-reference/compiler-messages/cs0029.md\">\r\n<meta name=\"document_id\" content=\"b22ade0d-d5c3-a063-e827-e942447bdac8\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Compiler Error CS0029 | Microsoft Docs","ms.assetid":"63c3e574-1868-4a9e-923e-dcd9f38bce88","f1_keywords":["CS0029"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":7,"ms.topic":"error-reference","dev_langs":["csharp"],"helpviewer_keywords":["CS0029"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-21 01:42 AM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/21/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/compiler-messages/cs0029.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/csharp/language-reference/compiler-messages/cs0029.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/compiler-messages/cs0029.md","document_id":"b22ade0d-d5c3-a063-e827-e942447bdac8","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/compiler-messages/cs0029","toc_asset_id":"articles/csharp/language-reference/compiler-messages/toc.json","toc_rel":"toc.json","_op_ogTitle":"Compiler Error CS0029","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":773,"_op_rawTitle":"<h1 id=\"compiler-error-cs0029\" sourcefile=\"docs/csharp/language-reference/compiler-messages/cs0029.md\" sourcestartlinenumber=\"33\" sourceendlinenumber=\"33\">Compiler Error CS0029</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/compiler-messages/cs0029","fileRelativePath":"articles/csharp/language-reference/compiler-messages/cs0029.html"},"themesRelativePathToOutputRoot":"_themes/"}