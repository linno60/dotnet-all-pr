{"content":"<div><div class=\"content\">\n<p>Because this call is not awaited, execution of the current method continues before the call is completed. Consider applying the &#39;await&#39; operator to the result of the call.  </p>\n<p> The current method calls an async method that returns a <a class=\"xref\" href=\"../../../../api/system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> or a <a class=\"xref\" href=\"../../../../api/system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> and doesnâ€™t apply the <a href=\"../keywords/await\" data-linktype=\"relative-path\">await</a> operator to the result. The call to the async method starts an asynchronous task. However, because no <code>await</code> operator is applied, the program continues without waiting for the task to complete. In most cases, that behavior isn&#39;t what you expect. Usually other aspects of the calling method depend on the results of the call or, minimally, the called method is expected to complete before you return from the method that contains the call.  </p>\n<p> An equally important issue is what happens to exceptions that are raised in the called async method. An exception that&#39;s raised in a method that returns a <a class=\"xref\" href=\"../../../../api/system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> or  <a class=\"xref\" href=\"../../../../api/system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> is stored in the returned task. If you don&#39;t await the task or explicitly check for exceptions, the exception is lost. If you await the task, its exception is rethrown.  </p>\n<p> As a best practice, you should always await the call.  </p>\n<p> You should consider suppressing the warning only if you&#39;re sure that you don&#39;t want to wait for the asynchronous call to complete and that the called method won&#39;t raise any exceptions. In that case, you can suppress the warning by assigning the task result of the call to a variable.  </p>\n<p> The following example shows how to cause the warning, how to suppress it, and how to await the call.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">\nasync Task CallingMethodAsync()  \n{  \n    resultsTextBox.Text += &quot;\\r\\n  Entering calling method.&quot;;  \n    // Variable delay is used to slow down the called method so that you can  \n    // distinguish between awaiting and not awaiting in the program&#39;s output.  \n    // You can adjust the value to produce the output that this topic shows  \n    // after the code.  \n    var delay = 5000;  \n\n    // Call #1.  \n    // Call an async method. Because you don&#39;t await it, its completion   \n    // isn&#39;t coordinated with the current method, CallingMethodAsync.  \n    // The following line causes warning CS4014.  \n    CalledMethodAsync(delay);  \n\n    // Call #2.  \n    // To suppress the warning without awaiting, you can assign the   \n    // returned task to a variable. The assignment doesn&#39;t change how  \n    // the program runs. However, recommended practice is always to  \n    // await a call to an async method.  \n\n    // Replace Call #1 with the following line.  \n    //Task delayTask = CalledMethodAsync(delay);  \n\n    // Call #3  \n    // To contrast with an awaited call, replace the unawaited call   \n    // (Call #1 or Call #2) with the following awaited call. Best   \n    // practice is to await the call.  \n\n    //await CalledMethodAsync(delay);  \n\n    // If the call to CalledMethodAsync isn&#39;t awaited, CallingMethodAsync  \n    // continues to run and, in this example, finishes its work and returns  \n    // to its caller.  \n    resultsTextBox.Text += &quot;\\r\\n  Returning from calling method.&quot;;  \n}  \n\nasync Task CalledMethodAsync(int howLong)  \n{  \n    resultsTextBox.Text +=   \n        &quot;\\r\\n    Entering called method, starting and awaiting Task.Delay.&quot;;  \n\n    // Slow the process down a little so that you can distinguish between  \n    // awaiting and not awaiting in the program&#39;s output. Adjust the value  \n    // for howLong if necessary.  \n    await Task.Delay(howLong);  \n    resultsTextBox.Text +=   \n        &quot;\\r\\n    Task.Delay is finished--returning from called method.&quot;;  \n}  \n</code></pre><p> In the example, if you choose Call #1 or Call #2, the unawaited async method (<code>CalledMethodAsync</code>) finishes after both its caller (<code>CallingMethodAsync</code>) and the caller&#39;s caller (<code>startButton_Click</code>) are complete. The last line in the following output shows you when the called method finishes. Entry to and exit from the event handler that calls <code>CallingMethodAsync</code> in the full example are marked in the output.  </p>\n<pre class=\"loading\"><code>\nEntering the Click event handler.  \n  Entering calling method.  \n    Entering called method, starting and awaiting Task.Delay.  \n  Returning from calling method.  \nExiting the Click event handler.  \n    Task.Delay is finished--returning from called method.  \n</code></pre><p> You can also suppress compiler warnings by using <a href=\"../preprocessor-directives/preprocessor-pragma-warning\" data-linktype=\"relative-path\">#pragma warning</a> directives.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following Windows Presentation Foundation (WPF) application contains the methods from the previous example. The following steps set up the application.  </p>\n<ol>\n<li><p>Create a WPF application, and name it <code>AsyncWarning</code>.  </p>\n</li>\n<li><p>In the Visual Studio Code Editor, choose the <strong>MainWindow.xaml</strong> tab.  </p>\n<p> If the tab isn&#39;t visible, open the shortcut menu for MainWindow.xaml in <strong>Solution Explorer</strong>, and then choose <strong>View Code</strong>.  </p>\n</li>\n<li><p>Replace the code in the <strong>XAML</strong> view of MainWindow.xaml with the following code.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">&lt;Window x:Class=&quot;AsyncWarning.MainWindow&quot;  \n        xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;  \n        xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;  \n        Title=&quot;MainWindow&quot; Height=&quot;350&quot; Width=&quot;525&quot;&gt;  \n    &lt;Grid&gt;  \n        &lt;Button x:Name=&quot;startButton&quot; Content=&quot;Start&quot; HorizontalAlignment=&quot;Left&quot; Margin=&quot;214,28,0,0&quot; VerticalAlignment=&quot;Top&quot; Width=&quot;75&quot; HorizontalContentAlignment=&quot;Center&quot; FontWeight=&quot;Bold&quot; FontFamily=&quot;Aharoni&quot; Click=&quot;startButton_Click&quot; /&gt;  \n        &lt;TextBox x:Name=&quot;resultsTextBox&quot; Margin=&quot;0,80,0,0&quot; TextWrapping=&quot;Wrap&quot; FontFamily=&quot;Lucida Console&quot;/&gt;  \n    &lt;/Grid&gt;  \n&lt;/Window&gt;  \n</code></pre><p> A simple window that contains a button and a text box appears in the <strong>Design</strong> view of MainWindow.xaml.  </p>\n<p> For more information about the XAML Designer, see <a href=\"https://docs.microsoft.com/visualstudio/designers/creating-a-ui-by-using-xaml-designer-in-visual-studio\" data-linktype=\"external\">Creating a UI by using XAML Designer</a>. For information about how to build your own simple UI, see the &quot;To create a WPF application&quot; and &quot;To design a simple WPF MainWindow&quot; sections of <a href=\"http://msdn.microsoft.com/library/25879a6d-fdee-4a38-bc98-bb8c24d16042\" data-linktype=\"external\">Walkthrough: Accessing the Web by Using Async and Await</a>.  </p>\n</li>\n<li><p>Replace the code in MainWindow.xaml.cs with the following code.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">using System;  \nusing System.Collections.Generic;  \nusing System.Linq;  \nusing System.Text;  \nusing System.Threading.Tasks;  \nusing System.Windows;  \nusing System.Windows.Controls;  \nusing System.Windows.Data;  \nusing System.Windows.Documents;  \nusing System.Windows.Input;  \nusing System.Windows.Media;  \nusing System.Windows.Media.Imaging;  \nusing System.Windows.Navigation;  \nusing System.Windows.Shapes;  \n\nnamespace AsyncWarning  \n{  \n    public partial class MainWindow : Window  \n    {  \n        public MainWindow()  \n        {  \n            InitializeComponent();  \n        }  \n\n        private async void startButton_Click(object sender, RoutedEventArgs e)  \n        {  \n            resultsTextBox.Text += &quot;\\r\\nEntering the Click event handler.&quot;;  \n            await CallingMethodAsync();  \n            resultsTextBox.Text += &quot;\\r\\nExiting the Click event handler.&quot;;  \n        }  \n\n        async Task CallingMethodAsync()  \n        {  \n            resultsTextBox.Text += &quot;\\r\\n  Entering calling method.&quot;;  \n            // Variable delay is used to slow down the called method so that you can  \n            // distinguish between awaiting and not awaiting in the program&#39;s output.  \n            // You can adjust the value to produce the output that this topic shows  \n            // after the code.  \n            var delay = 5000;  \n\n            // Call #1.  \n            // Call an async method. Because you don&#39;t await it, its completion   \n            // isn&#39;t coordinated with the current method, CallingMethodAsync.  \n            // The following line causes warning CS4014.  \n            CalledMethodAsync(delay);  \n\n            // Call #2.  \n            // To suppress the warning without awaiting, you can assign the   \n            // returned task to a variable. The assignment doesn&#39;t change how  \n            // the program runs. However, recommended practice is always to  \n            // await a call to an async method.  \n\n            // Replace Call #1 with the following line.  \n            //Task delayTask = CalledMethodAsync(delay);  \n\n            // Call #3  \n            // To contrast with an awaited call, replace the unawaited call   \n            // (Call #1 or Call #2) with the following awaited call. Best   \n            // practice is to await the call.  \n\n            //await CalledMethodAsync(delay);  \n\n            // If the call to CalledMethodAsync isn&#39;t awaited, CallingMethodAsync  \n            // continues to run and, in this example, finishes its work and returns  \n            // to its caller.  \n            resultsTextBox.Text += &quot;\\r\\n  Returning from calling method.&quot;;  \n        }  \n\n        async Task CalledMethodAsync(int howLong)  \n        {  \n            resultsTextBox.Text +=   \n                &quot;\\r\\n    Entering called method, starting and awaiting Task.Delay.&quot;;  \n\n            // Slow the process down a little so that you can distinguish between  \n            // awaiting and not awaiting in the program&#39;s output. Adjust the value  \n            // for howLong if necessary.  \n            await Task.Delay(howLong);  \n            resultsTextBox.Text +=   \n                &quot;\\r\\n    Task.Delay is finished--returning from called method.&quot;;  \n        }  \n    }  \n\n    // Output with Call #1 or Call #2. (Wait for the last line to appear.)  \n\n    // Entering the Click event handler.  \n    //   Entering calling method.  \n    //     Entering called method, starting and awaiting Task.Delay.  \n    //   Returning from calling method.  \n    // Exiting the Click event handler.  \n    //     Task.Delay is finished--returning from called method.  \n\n    // Output with Call #3, which awaits the call to CalledMethodAsync.  \n\n    // Entering the Click event handler.  \n    //   Entering calling method.  \n    //     Entering called method, starting and awaiting Task.Delay.  \n    //     Task.Delay is finished--returning from called method.  \n    //   Returning from calling method.  \n    // Exiting the Click event handler.  \n}  \n</code></pre></li>\n<li><p>Choose the F5 key to run the program, and then choose the <strong>Start</strong> button.  </p>\n<p> The expected output appears at the end of the code.  </p>\n</li>\n</ol>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../keywords/await\" data-linktype=\"relative-path\">await</a><br> <a href=\"../../programming-guide/concepts/async/index\" data-linktype=\"relative-path\">Asynchronous Programming with async and await</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"b9e7c029-eaa9-48d7-8b3c-9823772c9acb\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"26\">\r\n<meta name=\"ms.topic\" content=\"error-reference\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/3115359729431ecbcc16058612da59b85621fa0f/docs/csharp/language-reference/compiler-messages/cs4014.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/compiler-messages/cs4014.md\">\r\n<meta name=\"document_id\" content=\"f016ce5d-5992-8f44-f046-4c26e6c5893f\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc1.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"Compiler Warning (level 1) CS4014 | Microsoft Docs","ms.assetid":"b9e7c029-eaa9-48d7-8b3c-9823772c9acb","f1_keywords":["CS4014"],"translation.priority.ht":["de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","ru-ru","zh-cn","zh-tw"],"caps.latest.revision":26,"ms.topic":"error-reference","dev_langs":["csharp"],"helpviewer_keywords":["CS4014"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Bill Wagner","author_email":"wiwagn@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Reorganize the C# Guide TOC (#1318)","commit_sha":"3115359729431ecbcc16058612da59b85621fa0f","commit_date":"2017-01-23 23:20:14 -0500"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Absolute urls and other fixes (#1281)","commit_sha":"f7dffe4885b331cec8d37f3cc5c9163f69c3b4c9","commit_date":"2016-11-22 12:57:26 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/3115359729431ecbcc16058612da59b85621fa0f/docs/csharp/language-reference/compiler-messages/cs4014.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/compiler-messages/cs4014.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/compiler-messages/cs4014.md","document_id":"f016ce5d-5992-8f44-f046-4c26e6c5893f","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/compiler-messages/cs4014","toc_asset_id":"articles/csharp/language-reference/compiler-messages/toc.json","toc_rel":"toc.json","_op_ogTitle":"Compiler Warning (level 1) CS4014","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":1276,"_op_rawTitle":"<h1 id=\"compiler-warning-level-1-cs4014\" sourcefile=\"docs/csharp/language-reference/compiler-messages/cs4014.md\" sourcestartlinenumber=\"34\" sourceendlinenumber=\"34\">Compiler Warning (level 1) CS4014</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/compiler-messages/cs4014","fileRelativePath":"articles/csharp/language-reference/compiler-messages/cs4014.html"},"themesRelativePathToOutputRoot":"_themes/"}