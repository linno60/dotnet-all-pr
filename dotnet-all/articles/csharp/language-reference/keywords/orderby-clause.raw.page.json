{"content":"<div><div class=\"content\">\n<p>In a query expression, the <code>orderby</code> clause causes the returned sequence or subsequence (group) to be sorted in either ascending or descending order. Multiple keys can be specified in order to perform one or more secondary sort operations. The sorting is performed by the default comparer for the type of the element. The default sort order is ascending. You can also specify a custom comparer. However, it is only available by using method-based syntax. For more information, see <a href=\"http://msdn.microsoft.com/library/6d76e2d7-b418-49b5-ac78-2bcd61169c48\" data-linktype=\"external\">Sorting Data</a>.  </p>\n<h2 id=\"example\">Example</h2>\n<p> In the following example, the first query sorts the words in alphabetical order starting from A, and second query sorts the same words in descending order. (The <code>ascending</code> keyword is the default sort value and can be omitted.)  </p>\n<pre><code class=\"lang-cs\" name=\"cscsrefQueryKeywords#20\">    class OrderbySample1\n    {\n        static void Main()\n        {            \n            // Create a delicious data source.\n            string[] fruits = { &quot;cherry&quot;, &quot;apple&quot;, &quot;blueberry&quot; };\n\n            // Query for ascending sort.\n            IEnumerable&lt;string&gt; sortAscendingQuery =\n                from fruit in fruits\n                orderby fruit //&quot;ascending&quot; is default\n                select fruit;\n\n            // Query for descending sort.\n            IEnumerable&lt;string&gt; sortDescendingQuery =\n                from w in fruits\n                orderby w descending\n                select w;            \n\n            // Execute the query.\n            Console.WriteLine(&quot;Ascending:&quot;);\n            foreach (string s in sortAscendingQuery)\n            {\n                Console.WriteLine(s);\n            }\n\n            // Execute the query.\n            Console.WriteLine(Environment.NewLine + &quot;Descending:&quot;);\n            foreach (string s in sortDescendingQuery)\n            {\n                Console.WriteLine(s);\n            }\n\n            // Keep the console window open in debug mode.\n            Console.WriteLine(&quot;Press any key to exit.&quot;);\n            Console.ReadKey();\n        }\n    }\n    /* Output:\n    Ascending:\n    apple\n    blueberry\n    cherry\n\n    Descending:\n    cherry\n    blueberry\n    apple\n    */\n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> The following example performs a primary sort on the students&#39; last names, and then a secondary sort on their first names.  </p>\n<pre><code class=\"lang-cs\" name=\"cscsrefQueryKeywords#22\">    class OrderbySample2\n    {\n        // The element type of the data source.\n        public class Student\n        {\n            public string First { get; set; }\n            public string Last { get; set; }\n            public int ID { get; set; }\n        }\n\n        public static List&lt;Student&gt; GetStudents()\n        {\n            // Use a collection initializer to create the data source. Note that each element\n            //  in the list contains an inner sequence of scores.\n            List&lt;Student&gt; students = new List&lt;Student&gt;\n            {\n               new Student {First=&quot;Svetlana&quot;, Last=&quot;Omelchenko&quot;, ID=111},\n               new Student {First=&quot;Claire&quot;, Last=&quot;O&#39;Donnell&quot;, ID=112},\n               new Student {First=&quot;Sven&quot;, Last=&quot;Mortensen&quot;, ID=113},\n               new Student {First=&quot;Cesar&quot;, Last=&quot;Garcia&quot;, ID=114},\n               new Student {First=&quot;Debra&quot;, Last=&quot;Garcia&quot;, ID=115} \n            };\n\n            return students;\n\n        }\n        static void Main(string[] args)\n        {\n            // Create the data source.\n            List&lt;Student&gt; students = GetStudents();\n            \n            // Create the query.\n            IEnumerable&lt;Student&gt; sortedStudents =\n                from student in students\n                orderby student.Last ascending, student.First ascending\n                select student;\n\n            // Execute the query.\n            Console.WriteLine(&quot;sortedStudents:&quot;);\n            foreach (Student student in sortedStudents)\n                Console.WriteLine(student.Last + &quot; &quot; + student.First);           \n\n            // Now create groups and sort the groups. The query first sorts the names\n            // of all students so that they will be in alphabetical order after they are\n            // grouped. The second orderby sorts the group keys in alpha order.            \n            var sortedGroups =\n                from student in students\n                orderby student.Last, student.First\n                group student by student.Last[0] into newGroup\n                orderby newGroup.Key\n                select newGroup;\n\n            // Execute the query.\n            Console.WriteLine(Environment.NewLine + &quot;sortedGroups:&quot;);\n            foreach (var studentGroup in sortedGroups)\n            {\n                Console.WriteLine(studentGroup.Key);\n                foreach (var student in studentGroup)\n                {\n                    Console.WriteLine(&quot;   {0}, {1}&quot;, student.Last, student.First);\n                }\n            }\n\n            // Keep the console window open in debug mode\n            Console.WriteLine(&quot;Press any key to exit.&quot;);\n            Console.ReadKey();\n        }\n    }\n    /* Output:  \n    sortedStudents:\n    Garcia Cesar\n    Garcia Debra\n    Mortensen Sven\n    O&#39;Donnell Claire\n    Omelchenko Svetlana\n\n    sortedGroups:\n    G\n       Garcia, Cesar\n       Garcia, Debra\n    M\n       Mortensen, Sven\n    O\n       O&#39;Donnell, Claire\n       Omelchenko, Svetlana\n    */\n</code></pre><h2 id=\"remarks\">Remarks</h2>\n<p> At compile time, the <code>orderby</code> clause is translated to a call to the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb343617(v=vs.110).aspx\" data-linktype=\"external\">OrderBy</a> method. Multiple keys in the <code>orderby</code> clause translate to <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb302612(v=vs.110).aspx\" data-linktype=\"external\">ThenBy</a> method calls.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"query-keywords\" data-linktype=\"relative-path\">Query Keywords (LINQ)</a><br> <a href=\"../../programming-guide/linq-query-expressions/index\" data-linktype=\"relative-path\">LINQ Query Expressions</a><br> <a href=\"group-clause\" data-linktype=\"relative-path\">group clause</a><br> <a href=\"../../programming-guide/concepts/linq/getting-started-with-linq\" data-linktype=\"relative-path\">Getting Started with LINQ in C#</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"21f87f48-d69d-4e95-9a52-6fec47b37e1f\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"17\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/orderby-clause.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/orderby-clause.md\">\r\n<meta name=\"document_id\" content=\"43fb53fb-0692-522a-f1f2-8f6b1640aea3\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"orderby clause (C# Reference) | Microsoft Docs","ms.assetid":"21f87f48-d69d-4e95-9a52-6fec47b37e1f","f1_keywords":["orderby","orderby_CSharpKeyword"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":17,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["orderby clause [C#]","orderby keyword [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/orderby-clause.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/orderby-clause.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/keywords/orderby-clause.md","document_id":"43fb53fb-0692-522a-f1f2-8f6b1640aea3","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/keywords/orderby-clause","toc_asset_id":"articles/csharp/language-reference/keywords/toc.json","toc_rel":"toc.json","_op_ogTitle":"orderby clause (C# Reference)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":579,"_op_rawTitle":"<h1 id=\"orderby-clause-c-reference\" sourcefile=\"docs/csharp/language-reference/keywords/orderby-clause.md\" sourcestartlinenumber=\"35\" sourceendlinenumber=\"35\">orderby clause (C# Reference)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/keywords/orderby-clause","fileRelativePath":"articles/csharp/language-reference/keywords/orderby-clause.html"},"themesRelativePathToOutputRoot":"_themes/"}