{"content":"<div><div class=\"content\">\n<p>In a query expression, the <code>select</code> clause specifies the type of values that will be produced when the query is executed. The result is based on the evaluation of all the previous clauses and on any expressions in the <code>select</code> clause itself. A query expression must terminate with either a <code>select</code> clause or a <a href=\"group-clause\" data-linktype=\"relative-path\">group</a> clause.  </p>\n<p> The following example shows a simple <code>select</code> clause in a query expression.  </p>\n<pre><code class=\"lang-cs\" name=\"cscsrefQueryKeywords#8\">class SelectSample1\n{   \n    static void Main()\n    {           \n        //Create the data source\n        List&lt;int&gt; Scores = new List&lt;int&gt;() { 97, 92, 81, 60 };\n\n        // Create the query.\n        IEnumerable&lt;int&gt; queryHighScores =\n            from score in Scores\n            where score &gt; 80\n            select score;\n\n        // Execute the query.\n        foreach (int i in queryHighScores)\n        {\n            Console.Write(i + &quot; &quot;);\n        }            \n    }\n}\n//Output: 97 92 81\n</code></pre><p> The type of the sequence produced by the <code>select</code> clause determines the type of the query variable <code>queryHighScores</code>. In the simplest case, the <code>select</code> clause just specifies the range variable. This causes the returned sequence to contain elements of the same type as the data source. For more information, see <a href=\"../../programming-guide/concepts/linq/type-relationships-in-linq-query-operations\" data-linktype=\"relative-path\">Type Relationships in LINQ Query Operations</a>. However, the <code>select</code> clause also provides a powerful mechanism for transforming (or <em>projecting</em>) source data into new types. For more information, see <a href=\"../../programming-guide/concepts/linq/data-transformations-with-linq\" data-linktype=\"relative-path\">Data Transformations with LINQ (C#)</a>.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following example shows all the different forms that a <code>select</code> clause may take. In each query, note the relationship between the <code>select</code> clause and the type of the <em>query variable</em> (<code>studentQuery1</code>, <code>studentQuery2</code>, and so on).  </p>\n<pre><code class=\"lang-cs\" name=\"cscsrefQueryKeywords#9\">    class SelectSample2\n    {\n        // Define some classes\n        public class Student\n        {\n            public string First { get; set; }\n            public string Last { get; set; }\n            public int ID { get; set; }\n            public List&lt;int&gt; Scores;\n            public ContactInfo GetContactInfo(SelectSample2 app, int id)\n            {\n                ContactInfo cInfo =\n                    (from ci in app.contactList\n                    where ci.ID == id\n                    select ci)\n                    .FirstOrDefault();\n                    \n                return cInfo;\n            }\n\n            public override string ToString()\n            {\n                return First + &quot; &quot; + Last + &quot;:&quot; + ID;\n            }\n        }\n\n        public class ContactInfo\n        {\n            public int ID { get; set; }\n            public string Email { get; set; }\n            public string Phone { get; set; }\n            public override string ToString() { return Email + &quot;,&quot; + Phone; }\n        }\n\n        public class ScoreInfo\n        {\n            public double Average { get; set; }\n            public int ID { get; set; }\n        }\n\n        // The primary data source\n        List&lt;Student&gt; students = new List&lt;Student&gt;()\n        {\n             new Student {First=&quot;Svetlana&quot;, Last=&quot;Omelchenko&quot;, ID=111, Scores= new List&lt;int&gt;() {97, 92, 81, 60}},\n             new Student {First=&quot;Claire&quot;, Last=&quot;O&#39;Donnell&quot;, ID=112, Scores= new List&lt;int&gt;() {75, 84, 91, 39}},\n             new Student {First=&quot;Sven&quot;, Last=&quot;Mortensen&quot;, ID=113, Scores= new List&lt;int&gt;() {88, 94, 65, 91}},\n             new Student {First=&quot;Cesar&quot;, Last=&quot;Garcia&quot;, ID=114, Scores= new List&lt;int&gt;() {97, 89, 85, 82}},\n        };\n\n        // Separate data source for contact info.\n        List&lt;ContactInfo&gt; contactList = new List&lt;ContactInfo&gt;()\n        {\n            new ContactInfo {ID=111, Email=&quot;SvetlanO@Contoso.com&quot;, Phone=&quot;206-555-0108&quot;},\n            new ContactInfo {ID=112, Email=&quot;ClaireO@Contoso.com&quot;, Phone=&quot;206-555-0298&quot;},\n            new ContactInfo {ID=113, Email=&quot;SvenMort@Contoso.com&quot;, Phone=&quot;206-555-1130&quot;},\n            new ContactInfo {ID=114, Email=&quot;CesarGar@Contoso.com&quot;, Phone=&quot;206-555-0521&quot;}\n        };\n\n\n        static void Main(string[] args)\n        {\n            SelectSample2 app = new SelectSample2();\n\n            // Produce a filtered sequence of unmodified Students.\n            IEnumerable&lt;Student&gt; studentQuery1 =\n                from student in app.students\n                where student.ID &gt; 111\n                select student;\n\n            Console.WriteLine(&quot;Query1: select range_variable&quot;);\n            foreach (Student s in studentQuery1)\n            {\n                Console.WriteLine(s.ToString());\n            }\n\n            // Produce a filtered sequence of elements that contain\n            // only one property of each Student.\n            IEnumerable&lt;String&gt; studentQuery2 =\n                from student in app.students\n                where student.ID &gt; 111\n                select student.Last;\n\n            Console.WriteLine(&quot;\\r\\n studentQuery2: select range_variable.Property&quot;);\n            foreach (string s in studentQuery2)\n            {\n                Console.WriteLine(s);\n            }\n\n            // Produce a filtered sequence of objects created by\n            // a method call on each Student.\n            IEnumerable&lt;ContactInfo&gt; studentQuery3 =\n                from student in app.students\n                where student.ID &gt; 111\n                select student.GetContactInfo(app, student.ID);\n\n            Console.WriteLine(&quot;\\r\\n studentQuery3: select range_variable.Method&quot;);\n            foreach (ContactInfo ci in studentQuery3)\n            {\n                Console.WriteLine(ci.ToString());\n            }\n\n            // Produce a filtered sequence of ints from\n            // the internal array inside each Student.\n            IEnumerable&lt;int&gt; studentQuery4 =\n                from student in app.students\n                where student.ID &gt; 111\n                select student.Scores[0];\n\n            Console.WriteLine(&quot;\\r\\n studentQuery4: select range_variable[index]&quot;);\n            foreach (int i in studentQuery4)\n            {\n                Console.WriteLine(&quot;First score = {0}&quot;, i);\n            }\n\n            // Produce a filtered sequence of doubles \n            // that are the result of an expression.\n            IEnumerable&lt;double&gt; studentQuery5 =\n                from student in app.students\n                where student.ID &gt; 111\n                select student.Scores[0] * 1.1;\n\n            Console.WriteLine(&quot;\\r\\n studentQuery5: select expression&quot;);\n            foreach (double d in studentQuery5)\n            {\n                Console.WriteLine(&quot;Adjusted first score = {0}&quot;, d);\n            }\n\n            // Produce a filtered sequence of doubles that are\n            // the result of a method call.\n            IEnumerable&lt;double&gt; studentQuery6 =\n                from student in app.students\n                where student.ID &gt; 111\n                select student.Scores.Average();\n\n            Console.WriteLine(&quot;\\r\\n studentQuery6: select expression2&quot;);\n            foreach (double d in studentQuery6)\n            {\n                Console.WriteLine(&quot;Average = {0}&quot;, d);\n            }\n\n            // Produce a filtered sequence of anonymous types\n            // that contain only two properties from each Student.\n            var studentQuery7 =\n                from student in app.students\n                where student.ID &gt; 111\n                select new { student.First, student.Last };\n\n            Console.WriteLine(&quot;\\r\\n studentQuery7: select new anonymous type&quot;);\n            foreach (var item in studentQuery7)\n            {\n                Console.WriteLine(&quot;{0}, {1}&quot;, item.Last, item.First);\n            }\n\n            // Produce a filtered sequence of named objects that contain\n            // a method return value and a property from each Student.\n            // Use named types if you need to pass the query variable \n            // across a method boundary.\n            IEnumerable&lt;ScoreInfo&gt; studentQuery8 =\n                from student in app.students\n                where student.ID &gt; 111\n                select new ScoreInfo\n                {\n                    Average = student.Scores.Average(),\n                    ID = student.ID\n                };\n\n            Console.WriteLine(&quot;\\r\\n studentQuery8: select new named type&quot;);\n            foreach (ScoreInfo si in studentQuery8)\n            {\n                Console.WriteLine(&quot;ID = {0}, Average = {1}&quot;, si.ID, si.Average);\n            }\n\n            // Produce a filtered sequence of students who appear on a contact list\n            // and whose average is greater than 85.\n            IEnumerable&lt;ContactInfo&gt; studentQuery9 =\n                from student in app.students\n                where student.Scores.Average() &gt; 85\n                join ci in app.contactList on student.ID equals ci.ID\n                select ci;\n\n            Console.WriteLine(&quot;\\r\\n studentQuery9: select result of join clause&quot;);\n            foreach (ContactInfo ci in studentQuery9)\n            {\n                Console.WriteLine(&quot;ID = {0}, Email = {1}&quot;, ci.ID, ci.Email);\n            }\n\n            // Keep the console window open in debug mode\n            Console.WriteLine(&quot;Press any key to exit.&quot;);\n            Console.ReadKey();\n            }\n        }\n    /* Output\n        Query1: select range_variable\n        Claire O&#39;Donnell:112\n        Sven Mortensen:113\n        Cesar Garcia:114\n\n        studentQuery2: select range_variable.Property\n        O&#39;Donnell\n        Mortensen\n        Garcia\n\n        studentQuery3: select range_variable.Method\n        ClaireO@Contoso.com,206-555-0298\n        SvenMort@Contoso.com,206-555-1130\n        CesarGar@Contoso.com,206-555-0521\n\n        studentQuery4: select range_variable[index]\n        First score = 75\n        First score = 88\n        First score = 97\n\n        studentQuery5: select expression\n        Adjusted first score = 82.5\n        Adjusted first score = 96.8\n        Adjusted first score = 106.7\n\n        studentQuery6: select expression2\n        Average = 72.25\n        Average = 84.5\n        Average = 88.25\n\n        studentQuery7: select new anonymous type\n        O&#39;Donnell, Claire\n        Mortensen, Sven\n        Garcia, Cesar\n\n        studentQuery8: select new named type\n        ID = 112, Average = 72.25\n        ID = 113, Average = 84.5\n        ID = 114, Average = 88.25\n\n        studentQuery9: select result of join clause\n        ID = 114, Email = CesarGar@Contoso.com\n*/\n</code></pre><p> As shown in <code>studentQuery8</code> in the previous example, sometimes you might want the elements of the returned sequence to contain only a subset of the properties of the source elements. By keeping the returned sequence as small as possible you can reduce the memory requirements and increase the speed of the execution of the query. You can accomplish this by creating an anonymous type in the <code>select</code> clause and using an object initializer to initialize it with the appropriate properties from the source element. For an example of how to do this, see <a href=\"../../programming-guide/classes-and-structs/object-and-collection-initializers\" data-linktype=\"relative-path\">Object and Collection Initializers</a>.  </p>\n<h2 id=\"remarks\">Remarks</h2>\n<p> At compile time, the <code>select</code> clause is translated to a method call to the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb357126(v=vs.110).aspx\" data-linktype=\"external\">Select</a> standard query operator.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"query-keywords\" data-linktype=\"relative-path\">Query Keywords (LINQ)</a><br> <a href=\"from-clause\" data-linktype=\"relative-path\">from clause</a><br> <a href=\"partial-method\" data-linktype=\"relative-path\">partial (Method) (C# Reference)</a><br> <a href=\"../../programming-guide/classes-and-structs/anonymous-types\" data-linktype=\"relative-path\">Anonymous Types</a><br> <a href=\"../../programming-guide/linq-query-expressions/index\" data-linktype=\"relative-path\">LINQ Query Expressions</a><br> <a href=\"../../programming-guide/concepts/linq/getting-started-with-linq\" data-linktype=\"relative-path\">Getting Started with LINQ in C#</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"df01e266-5781-4aaa-80c4-67cf28ea093f\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"19\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/select-clause.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/select-clause.md\">\r\n<meta name=\"document_id\" content=\"f54838e3-8817-f164-8b50-a69c756edbb0\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc1.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"select clause (C# Reference) | Microsoft Docs","ms.assetid":"df01e266-5781-4aaa-80c4-67cf28ea093f","f1_keywords":["select_CSharpKeyword","select"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":19,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["select keyword [C#]","select clause [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/select-clause.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/select-clause.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/keywords/select-clause.md","document_id":"f54838e3-8817-f164-8b50-a69c756edbb0","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/select-clause","toc_asset_id":"articles/csharp/language-reference/keywords/toc.json","toc_rel":"toc.json","_op_ogTitle":"select clause (C# Reference)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":1203,"_op_rawTitle":"<h1 id=\"select-clause-c-reference\" sourcefile=\"docs/csharp/language-reference/keywords/select-clause.md\" sourcestartlinenumber=\"35\" sourceendlinenumber=\"35\">select clause (C# Reference)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/select-clause","fileRelativePath":"articles/csharp/language-reference/keywords/select-clause.html"},"themesRelativePathToOutputRoot":"_themes/"}