{"content":"<div><div class=\"content\">\n<p>By using a <code>finally</code> block, you can clean up any resources that are allocated in a <a href=\"try-catch\" data-linktype=\"relative-path\">try</a> block, and you can run code even if an exception occurs in the <code>try</code> block. Typically, the statements of a <code>finally</code> block run when control leaves a <code>try</code> statement. The transfer of control can occur as a result of normal execution, of execution of a <code>break</code>, <code>continue</code>, <code>goto</code>, or <code>return</code> statement, or of propagation of an exception out of the <code>try</code> statement.  </p>\n<p> Within a handled exception, the associated <code>finally</code> block is guaranteed to be run. However, if the exception is unhandled, execution of the <code>finally</code> block is dependent on how the exception unwind operation is triggered. That, in turn, is dependent on how your computer is set up. For more information, see <a href=\"http://go.microsoft.com/fwlink/?LinkId=128371\" data-linktype=\"external\">Unhandled Exception Processing in the CLR</a>.  </p>\n<p> Usually, when an unhandled exception ends an application, whether or not the <code>finally</code> block is run is not important. However, if you have statements in a <code>finally</code> block that must be run even in that situation, one solution is to add a <code>catch</code> block to the <code>try</code>-<code>finally</code> statement. Alternatively, you can catch the exception that might be thrown in the <code>try</code> block of a <code>try</code>-<code>finally</code> statement higher up the call stack. That is, you can catch the exception in the method that calls the method that contains the <code>try</code>-<code>finally</code> statement, or in the method that calls that method, or in any method in the call stack. If the exception is not caught, execution of the <code>finally</code> block depends on whether the operating system chooses to trigger an exception unwind operation.  </p>\n<h2 id=\"example\">Example</h2>\n<p> In the following example, an invalid conversion statement causes a <code>System.InvalidCastException</code> exception. The exception is unhandled.  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsExceptions#4\">public class ThrowTestA\n{\n    static void Main()\n    {\n        int i = 123;\n        string s = &quot;Some string&quot;;\n        object obj = s;\n\n        try\n        {\n            // Invalid conversion; obj contains a string, not a numeric type.\n            i = (int)obj;\n\n            // The following statement is not run.\n            Console.WriteLine(&quot;WriteLine at the end of the try block.&quot;);\n        }\n        finally\n        {\n            // To run the program in Visual Studio, type CTRL+F5. Then \n            // click Cancel in the error dialog.\n            Console.WriteLine(&quot;\\nExecution of the finally block after an unhandled\\n&quot; +\n                &quot;error depends on how the exception unwind operation is triggered.&quot;);\n            Console.WriteLine(&quot;i = {0}&quot;, i);\n        }\n    }\n    // Output:\n    // Unhandled Exception: System.InvalidCastException: Specified cast is not valid.\n    //\n    // Execution of the finally block after an unhandled\n    // error depends on how the exception unwind operation is triggered.\n    // i = 123\n}\n</code></pre><p> In the following example, an exception from the <code>TryCast</code> method is caught in a method farther up the call stack.  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsExceptions#6\">public class ThrowTestB\n{\n    static void Main()\n    {\n        try\n        {\n            // TryCast produces an unhandled exception.\n            TryCast();\n        }\n        catch (Exception ex)\n        {\n            // Catch the exception that is unhandled in TryCast.\n            Console.WriteLine\n                (&quot;Catching the {0} exception triggers the finally block.&quot;,\n                ex.GetType());\n\n            // Restore the original unhandled exception. You might not\n            // know what exception to expect, or how to handle it, so pass \n            // it on.\n            throw;\n        }\n    }\n\n    public static void TryCast()\n    {\n        int i = 123;\n        string s = &quot;Some string&quot;;\n        object obj = s;\n\n        try\n        {\n            // Invalid conversion; obj contains a string, not a numeric type.\n            i = (int)obj;\n\n            // The following statement is not run.\n            Console.WriteLine(&quot;WriteLine at the end of the try block.&quot;);\n        }\n        finally\n        {\n            // Report that the finally block is run, and show that the value of\n            // i has not been changed.\n            Console.WriteLine(&quot;\\nIn the finally block in TryCast, i = {0}.\\n&quot;, i);\n        }\n    }\n    // Output:\n    // In the finally block in TryCast, i = 123.\n\n    // Catching the System.InvalidCastException exception triggers the finally block.\n\n    // Unhandled Exception: System.InvalidCastException: Specified cast is not valid.\n}\n</code></pre><p> For more information about <code>finally</code>, see <a href=\"try-catch-finally\" data-linktype=\"relative-path\">try-catch-finally</a>.  </p>\n<p> C# also contains the <a href=\"using-statement\" data-linktype=\"relative-path\">using statement</a>, which provides similar functionality for <a class=\"xref\" href=\"../../../../api/system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> objects in a convenient syntax.  </p>\n<h2 id=\"c-language-specification\">C# Language Specification</h2>\n<p>For more information, see the <a href=\"../language-specification\" data-linktype=\"relative-path\">C# Language Specification</a>. The language specification is the definitive source for C# syntax and usage.</p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"../../programming-guide/index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">C# Keywords</a><br> <a href=\"https://docs.microsoft.com/cpp/cpp/try-throw-and-catch-statements-cpp\" data-linktype=\"external\">try, throw, and catch Statements (C++)</a><br> <a href=\"exception-handling-statements\" data-linktype=\"relative-path\">Exception Handling Statements</a><br> <a href=\"throw\" data-linktype=\"relative-path\">throw</a><br> <a href=\"try-catch\" data-linktype=\"relative-path\">try-catch</a><br> <a href=\"https://msdn.microsoft.com/library/xhcbs8fz\" data-linktype=\"external\">How to: Explicitly Throw Exceptions</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"c27623fb-7261-4464-862c-7a369d3c8f0a\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"25\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/try-finally.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/try-finally.md\">\r\n<meta name=\"document_id\" content=\"f722f2e8-530c-f850-1f77-1a90699d0dec\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"try-finally (C# Reference) | Microsoft Docs","ms.assetid":"c27623fb-7261-4464-862c-7a369d3c8f0a","f1_keywords":["finally","finally_CSharpKeyword"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":25,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["finally keyword [C#]","try-finally statement [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Absolute urls and other fixes (#1281)","commit_sha":"f7dffe4885b331cec8d37f3cc5c9163f69c3b4c9","commit_date":"2016-11-22 12:57:26 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/try-finally.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/try-finally.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/keywords/try-finally.md","document_id":"f722f2e8-530c-f850-1f77-1a90699d0dec","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/try-finally","toc_asset_id":"articles/csharp/language-reference/keywords/toc.json","toc_rel":"toc.json","_op_ogTitle":"try-finally (C# Reference)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":695,"_op_rawTitle":"<h1 id=\"try-finally-c-reference\" sourcefile=\"docs/csharp/language-reference/keywords/try-finally.md\" sourcestartlinenumber=\"35\" sourceendlinenumber=\"35\">try-finally (C# Reference)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/try-finally","fileRelativePath":"articles/csharp/language-reference/keywords/try-finally.html"},"themesRelativePathToOutputRoot":"_themes/"}