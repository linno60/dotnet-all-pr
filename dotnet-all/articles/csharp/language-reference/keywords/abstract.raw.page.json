{"content":"<div><div class=\"content\">\n<p>The <code>abstract</code> modifier indicates that the thing being modified has a missing or incomplete implementation. The abstract modifier can be used with classes, methods, properties, indexers, and events. Use the <code>abstract</code> modifier in a class declaration to indicate that a class is intended only to be a base class of other classes. Members marked as abstract, or included in an abstract class, must be implemented by classes that derive from the abstract class.  </p>\n<h2 id=\"example\">Example</h2>\n<p> In this example, the class <code>Square</code> must provide an implementation of <code>Area</code> because it derives from <code>ShapesClass</code>:  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsModifiers#1\">\nabstract class ShapesClass\n{\n    abstract public int Area();\n}\nclass Square : ShapesClass\n{\n    int side = 0;\n\n    public Square(int n)\n    {\n        side = n;\n    }\n    // Area method is required to avoid\n    // a compile-time error.\n    public override int Area()\n    {\n        return side * side;\n    }\n\n    static void Main() \n    {\n        Square sq = new Square(12);\n        Console.WriteLine(&quot;Area of the square = {0}&quot;, sq.Area());\n    }\n\n    interface I\n    {\n        void M();\n    }\n    abstract class C : I\n    {\n        public abstract void M();\n    }\n\n}\n// Output: Area of the square = 144\n</code></pre><p> Abstract classes have the following features:  </p>\n<ul>\n<li><p>An abstract class cannot be instantiated.  </p>\n</li>\n<li><p>An abstract class may contain abstract methods and accessors.  </p>\n</li>\n<li><p>It is not possible to modify an abstract class with the <a href=\"sealed\" data-linktype=\"relative-path\">sealed</a> modifier because the two modifers have opposite meanings. The <code>sealed</code> modifier prevents a class from being inherited and the <code>abstract</code> modifier requires a class to be inherited.  </p>\n</li>\n<li><p>A non-abstract class derived from an abstract class must include actual implementations of all inherited abstract methods and accessors.  </p>\n</li>\n</ul>\n<p> Use the <code>abstract</code> modifier in a method or property declaration to indicate that the method or property does not contain implementation.  </p>\n<p> Abstract methods have the following features:  </p>\n<ul>\n<li><p>An abstract method is implicitly a virtual method.  </p>\n</li>\n<li><p>Abstract method declarations are only permitted in abstract classes.  </p>\n</li>\n<li><p>Because an abstract method declaration provides no actual implementation, there is no method body; the method declaration simply ends with a semicolon and there are no curly braces ({ }) following the signature. For example:  </p>\n<pre class=\"loading\"><code>public abstract void MyMethod();  \n</code></pre><p> The implementation is provided by an overriding method<a href=\"override\" data-linktype=\"relative-path\">override</a>, which is a member of a non-abstract class.  </p>\n</li>\n<li><p>It is an error to use the <a href=\"static\" data-linktype=\"relative-path\">static</a> or <a href=\"virtual\" data-linktype=\"relative-path\">virtual</a> modifiers in an abstract method declaration.  </p>\n</li>\n</ul>\n<p> Abstract properties behave like abstract methods, except for the differences in declaration and invocation syntax.  </p>\n<ul>\n<li><p>It is an error to use the <code>abstract</code> modifier on a static property.  </p>\n</li>\n<li><p>An abstract inherited property can be overridden in a derived class by including a property declaration that uses the <a href=\"override\" data-linktype=\"relative-path\">override</a> modifier.  </p>\n</li>\n</ul>\n<p> For more information about abstract classes, see <a href=\"../../programming-guide/classes-and-structs/abstract-and-sealed-classes-and-class-members\" data-linktype=\"relative-path\">Abstract and Sealed Classes and Class Members</a>.  </p>\n<p> An abstract class must provide implementation for all interface members.  </p>\n<p> An abstract class that implements an interface might map the interface methods onto abstract methods. For example:  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsModifiers#2\">interface I\n{\n    void M();\n}\nabstract class C : I\n{\n    public abstract void M();\n}\n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> In this example, the class <code>DerivedClass</code> is derived from an abstract class <code>BaseClass</code>. The abstract class contains an abstract method, <code>AbstractMethod</code>, and two abstract properties, <code>X</code> and <code>Y</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsModifiers#3\">abstract class BaseClass   // Abstract class\n{\n    protected int _x = 100;\n    protected int _y = 150;\n    public abstract void AbstractMethod();   // Abstract method\n    public abstract int X    { get; }\n    public abstract int Y    { get; }\n}\n\nclass DerivedClass : BaseClass\n{\n    public override void AbstractMethod()\n    {\n        _x++;\n        _y++;\n    }\n\n    public override int X   // overriding property\n    {\n        get\n        {\n            return _x + 10;\n        }\n    }\n\n    public override int Y   // overriding property\n    {\n        get\n        {\n            return _y + 10;\n        }\n    }\n\n    static void Main()\n    {\n        DerivedClass o = new DerivedClass();\n        o.AbstractMethod();\n        Console.WriteLine(&quot;x = {0}, y = {1}&quot;, o.X, o.Y);\n    }\n}\n// Output: x = 111, y = 161\n</code></pre><p> In the preceding example, if you attempt to instantiate the abstract class by using a statement like this:  </p>\n<pre class=\"loading\"><code>BaseClass bc = new BaseClass();   // Error  \n</code></pre><p> you will get an error saying that the compiler cannot create an instance of the abstract class &#39;BaseClass&#39;.  </p>\n<h2 id=\"c-language-specification\">C# Language Specification</h2>\n<p>For more information, see the <a href=\"../language-specification\" data-linktype=\"relative-path\">C# Language Specification</a>. The language specification is the definitive source for C# syntax and usage.</p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"../../programming-guide/index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"modifiers\" data-linktype=\"relative-path\">Modifiers</a><br> <a href=\"virtual\" data-linktype=\"relative-path\">virtual</a><br> <a href=\"override\" data-linktype=\"relative-path\">override</a><br> <a href=\"index\" data-linktype=\"relative-path\">C# Keywords</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"b0797770-c1f3-4b4d-9441-b9122602a6bb\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"24\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/abstract.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/abstract.md\">\r\n<meta name=\"document_id\" content=\"4d51d646-e29d-9349-9d34-c7a344ed5e26\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"abstract (C# Reference) | Microsoft Docs","ms.assetid":"b0797770-c1f3-4b4d-9441-b9122602a6bb","f1_keywords":["abstract","abstract_CSharpKeyword"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":24,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["abstract keyword [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/abstract.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/abstract.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/keywords/abstract.md","document_id":"4d51d646-e29d-9349-9d34-c7a344ed5e26","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/abstract","toc_asset_id":"articles/csharp/language-reference/keywords/toc.json","toc_rel":"toc.json","_op_ogTitle":"abstract (C# Reference)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":697,"_op_rawTitle":"<h1 id=\"abstract-c-reference\" sourcefile=\"docs/csharp/language-reference/keywords/abstract.md\" sourcestartlinenumber=\"34\" sourceendlinenumber=\"34\">abstract (C# Reference)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/abstract","fileRelativePath":"articles/csharp/language-reference/keywords/abstract.html"},"themesRelativePathToOutputRoot":"_themes/"}