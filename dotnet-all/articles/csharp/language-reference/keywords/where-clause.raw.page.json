{"content":"<div><div class=\"content\">\n<p>The <code>where</code> clause is used in a query expression to specify which elements from the data source will be returned in the query expression. It applies a Boolean condition (<em>predicate</em>) to each source element (referenced by the range variable) and returns those for which the specified condition is true. A single query expression may contain multiple <code>where</code> clauses and a single clause may contain multiple predicate subexpressions.  </p>\n<h2 id=\"example\">Example</h2>\n<p> In the following example, the <code>where</code> clause filters out all numbers except those that are less than five. If you remove the <code>where</code> clause, all numbers from the data source would be returned. The expression <code>num &lt; 5</code> is the predicate that is applied to each element.  </p>\n<pre><code class=\"lang-cs\" name=\"cscsrefQueryKeywords#5\">    class WhereSample\n    {\n        static void Main()\n        {   \n            // Simple data source. Arrays support IEnumerable&lt;T&gt;.\n            int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };\n\n            // Simple query with one predicate in where clause.\n            var queryLowNums =\n                from num in numbers\n                where num &lt; 5\n                select num;\n\n            // Execute the query.\n            foreach (var s in queryLowNums)\n            {\n                Console.Write(s.ToString() + &quot; &quot;);\n            }\n        }\n    }\n    //Output: 4 1 3 2 0\n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> Within a single <code>where</code> clause, you can specify as many predicates as necessary by using the <a href=\"../operators/conditional-and-operator\" data-linktype=\"relative-path\">&amp;&amp;</a> and <a href=\"../operators/conditional-or-operator\" data-linktype=\"relative-path\">&#124;&#124;</a> operators. In the following example, the query specifies two predicates in order to select only the even numbers that are less than five.  </p>\n<pre><code class=\"lang-cs\" name=\"cscsrefQueryKeywords#6\">class WhereSample2\n{\n    static void Main()\n    {\n        // Data source.\n        int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };\n\n        // Create the query with two predicates in where clause.\n        var queryLowNums2 =\n            from num in numbers\n            where num &lt; 5 &amp;&amp; num % 2 == 0\n            select num;\n\n        // Execute the query\n        foreach (var s in queryLowNums2)\n        {\n            Console.Write(s.ToString() + &quot; &quot;);\n        }\n        Console.WriteLine();\n\n        // Create the query with two where clause.\n        var queryLowNums3 =\n            from num in numbers\n            where num &lt; 5\n            where num % 2 == 0\n            select num;\n\n        // Execute the query\n        foreach (var s in queryLowNums3)\n        {\n            Console.Write(s.ToString() + &quot; &quot;);\n        }\n\n    }\n}\n// Output: \n// 4 2 0\n// 4 2 0\n</code></pre><h2 id=\"example-2\">Example</h2>\n<p> A <code>where</code> clause may contain one or more methods that return Boolean values. In the following example, the <code>where</code> clause uses a method to determine whether the current value of the range variable is even or odd.  </p>\n<pre><code class=\"lang-cs\" name=\"cscsrefQueryKeywords#7\">    class WhereSample3\n    {       \n        static void Main()\n        {\n            // Data source\n            int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };\n\n            // Create the query with a method call in the where clause.\n            // Note: This won&#39;t work in LINQ to SQL unless you have a\n            // stored procedure that is mapped to a method by this name.\n            var queryEvenNums =\n                from num in numbers\n                where IsEven(num)\n                select num;\n\n             // Execute the query.\n            foreach (var s in queryEvenNums)\n            {\n                Console.Write(s.ToString() + &quot; &quot;);\n            }\n        }\n\n        // Method may be instance method or static method.\n        static bool IsEven(int i)\n        {\n            return i % 2 == 0;\n        }    \n    }\n    //Output: 4 8 6 2 0\n</code></pre><h2 id=\"remarks\">Remarks</h2>\n<p> The <code>where</code> clause is a filtering mechanism. It can be positioned almost anywhere in a query expression, except it cannot be the first or last clause. A <code>where</code> clause may appear either before or after a <a href=\"group-clause\" data-linktype=\"relative-path\">group</a> clause depending on whether you have to filter the source elements before or after they are grouped.  </p>\n<p> If a specified predicate is not valid for the elements in the data source, a compile-time error will result. This is one benefit of the strong type-checking provided by LINQ.  </p>\n<p> At compile time the <code>where</code> keyword is converted into a call to the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb301979(v=vs.110).aspx\" data-linktype=\"external\">Where</a> Standard Query Operator method.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"query-keywords\" data-linktype=\"relative-path\">Query Keywords (LINQ)</a><br> <a href=\"from-clause\" data-linktype=\"relative-path\">from clause</a><br> <a href=\"select-clause\" data-linktype=\"relative-path\">select clause</a><br> <a href=\"http://msdn.microsoft.com/library/cee88d0f-31aa-4c60-9452-cc122ed0057d\" data-linktype=\"external\">Filtering Data</a><br> <a href=\"../../programming-guide/linq-query-expressions/index\" data-linktype=\"relative-path\">LINQ Query Expressions</a><br> <a href=\"../../programming-guide/concepts/linq/getting-started-with-linq\" data-linktype=\"relative-path\">Getting Started with LINQ in C#</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-all/api/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"7f9bf952-7744-4f91-b676-cddb55d107c3\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"16\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/where-clause.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/where-clause.md\">\r\n<meta name=\"document_id\" content=\"8d034501-4e64-c139-4a59-f854969d1507\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"where clause (C# Reference) | Microsoft Docs","ms.assetid":"7f9bf952-7744-4f91-b676-cddb55d107c3","f1_keywords":["whereclause_CSharpKeyword"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":16,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["where keyword [C#]","where clause [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/where-clause.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/where-clause.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/keywords/where-clause.md","document_id":"8d034501-4e64-c139-4a59-f854969d1507","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/keywords/where-clause","toc_asset_id":"articles/csharp/language-reference/keywords/toc.json","toc_rel":"toc.json","_op_ogTitle":"where clause (C# Reference)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":633,"_op_rawTitle":"<h1 id=\"where-clause-c-reference\" sourcefile=\"docs/csharp/language-reference/keywords/where-clause.md\" sourcestartlinenumber=\"34\" sourceendlinenumber=\"34\">where clause (C# Reference)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/keywords/where-clause","fileRelativePath":"articles/csharp/language-reference/keywords/where-clause.html"},"themesRelativePathToOutputRoot":"_themes/"}