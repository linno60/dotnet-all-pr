{"content":"<div><div class=\"content\">\n<p>You can use the <code>when</code> contextual keyword to specify a filter condition in two contexts:</p>\n<ul>\n<li>In the <code>catch</code> statement of a <a href=\"try-catch\" data-linktype=\"relative-path\">try/catch</a> or <a href=\"try-catch-finally\" data-linktype=\"relative-path\">try/catch/finally</a> block.</li>\n<li>In the <code>case</code> label of a <a href=\"switch\" data-linktype=\"relative-path\">switch</a> statement.</li>\n</ul>\n<h2 id=\"when-in-a-catch-statement\"><code>when</code> in a <code>catch</code> statement</h2>\n<p>Starting with C# 6, <code>When</code> can be used in a <code>catch</code> statement to specify a condition that must be true for the handler for a specific exception to execute. Its syntax is:</p>\n<pre class=\"loading\"><code class=\"lang-cs\">catch ExceptionType [e] when (expr)\n</code></pre><p>where <em>expr</em> is an expression that evaluates to a Boolean value. If it returns <code>true</code>, the exception handler executes; if <code>false</code>, it does not. </p>\n<p>The following example uses the <code>when</code> keyword to conditionally execute handlers for an @System.Net.HttpRequestException depending on the text of the exception message.</p>\n<pre><code class=\"lang-cs\" name=\"when-with-catch\">using System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\nclass Program\n{\n   static void Main()\n   {\n      Console.WriteLine(MakeRequest().Result);\n   }\n\n   public static async Task&lt;string&gt; MakeRequest()\n   { \n       var client = new System.Net.Http.HttpClient();\n       var streamTask = client.GetStringAsync(&quot;https://localHost:10000&quot;);\n       try {\n           var responseText = await streamTask;\n           return responseText;\n       } \n       catch (HttpRequestException e) when (e.Message.Contains(&quot;301&quot;)) {\n           return &quot;Site Moved&quot;;\n       }\n       catch (HttpRequestException e) when (e.Message.Contains(&quot;404&quot;)) {\n           return &quot;Page Not Found&quot;;\n       }\n       catch (HttpRequestException e) {\n           return e.Message;\n       }\n   }\n}\n</code></pre><h2 id=\"when-in-a-switch-statement\"><code>when</code> in a <code>switch</code> statement</h2>\n<p>Starting with 7, <code>case</code> labels no longer need be mutually exclusive, and the order in which <code>case</code> labels appear in a <code>switch</code> statement can determine which switch block executes. The <code>when</code> keyword can be used to specify a filter condition that causes its associated case label to be true only if the filter condition is also true. Its syntax is:</p>\n<pre class=\"loading\"><code class=\"lang-cs\">case (expr) where (when-condition):\n</code></pre><p>where <em>expr</em> is a constant pattern or type pattern that is compared to the match expression, and <em>when-condition</em> is any Boolean expression. </p>\n<p>The following example uses the <code>when</code> keyword to test for <code>Shape</code> objects that have an area of zero, as well as to test for a variety of <code>Shape</code> objects that have an area greater than zero. </p>\n<pre><code class=\"lang-cs\" name=\"when-with-case#1\">using System;\n\npublic abstract class Shape\n{\n   public abstract double Area { get; }\n   public abstract double Circumference { get; } \n}\n\npublic class Rectangle : Shape\n{\n   public Rectangle(double length, double width) \n   {\n      Length = length;\n      Width = width; \n   }\n\n   public double Length { get; set; }\n   public double Width { get; set; }\n   \n   public override double Area\n   { \n      get { return Math.Round(Length * Width,2); } \n   } \n   \n   public override double Circumference \n   {\n      get { return (Length + Width) * 2; }\n   }\n}\n\npublic class Square : Rectangle\n{\n   public Square(double side) : base(side, side) \n   {\n      Side = side; \n   }\n\n   public double Side { get; set; }\n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      Shape sh = null;\n      Shape[] shapes = { new Square(10), new Rectangle(5, 7),\n                         new Rectangle(10, 10), sh, new Square(0) };\n      foreach (var shape in shapes)\n         ShowShapeInfo(shape);\n   }\n\n   private static void ShowShapeInfo(Object obj)\n   {\n      switch (obj)\n      {\n         case Shape shape when shape.Area == 0:\n            Console.WriteLine($&quot;The shape: {shape.GetType().Name} with no dimensions&quot;);\n            break;\n         case Rectangle r when r.Area &gt; 0:\n            Console.WriteLine(&quot;Information about the rectangle:&quot;);\n            Console.WriteLine($&quot;   Dimensions: {r.Length} x {r.Width}&quot;);\n            Console.WriteLine($&quot;   Area: {r.Area}&quot;);\n            break;\n         case Square sq when sq.Area &gt; 0:\n            Console.WriteLine(&quot;Information about the square:&quot;);\n            Console.WriteLine($&quot;   Length of a side: {sq.Side}&quot;);\n            Console.WriteLine($&quot;   Area: {sq.Area}&quot;);\n            break;\n         case Shape shape:\n            Console.WriteLine($&quot;A {shape.GetType().Name} shape&quot;);\n            break;\n         case null:\n            Console.WriteLine($&quot;The {nameof(obj)} variable is uninitialized.&quot;);\n            break;\n         default:\n            Console.WriteLine($&quot;The {nameof(obj)} variable does not represent a Shape.&quot;);\n            break;   \n      }\n   }\n}\n// The example displays the following output:\n//       Information about the rectangle:\n//          Dimensions: 10 x 10\n//          Area: 100\n//       Information about the rectangle:\n//          Dimensions: 5 x 7\n//          Area: 35\n//       Information about the rectangle:\n//          Dimensions: 10 x 10\n//          Area: 100\n//       The obj variable is uninitialized.\n//       The shape: Square with no dimensions\n</code></pre><h2 id=\"see-also\">See also</h2>\n<p>  <a href=\"switch\" data-linktype=\"relative-path\">switch statement</a><br>  <a href=\"try-catch\" data-linktype=\"relative-path\">try/catch statement</a><br>  <a href=\"try-catch-finally\" data-linktype=\"relative-path\">try/catch/finally statement</a> </p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-all/api/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"dd543335-ae37-48ac-9560-bd5f047b9aea\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"30\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2017-03-07\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/42bc4b6840278d083ff01579399a505d2b64aa47/docs/csharp/language-reference/keywords/when.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/when.md\">\r\n<meta name=\"document_id\" content=\"3d1f43dd-d3ac-f32a-237f-2dba9844b262\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"when (C# Reference) | Microsoft Docs","ms.assetid":"dd543335-ae37-48ac-9560-bd5f047b9aea","f1_keywords":["when_CSharpKeyword","when"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":30,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["when keyword [C#]"],"ms.date":"2017-03-07","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Ron Petrusha","author_email":"ronpet@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":"Documented C# when keyword (#1647)","commit_sha":"42bc4b6840278d083ff01579399a505d2b64aa47","commit_date":"2017-03-07 10:05:55 -0500"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/rpetrusha","display_name":"rpetrusha","id":"10886961"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/42bc4b6840278d083ff01579399a505d2b64aa47/docs/csharp/language-reference/keywords/when.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/when.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/keywords/when.md","document_id":"3d1f43dd-d3ac-f32a-237f-2dba9844b262","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/keywords/when","toc_asset_id":"articles/csharp/language-reference/keywords/toc.json","toc_rel":"toc.json","_op_ogTitle":"when (C# Reference)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":618,"_op_rawTitle":"<h1 id=\"when-c-reference\" sourcefile=\"docs/csharp/language-reference/keywords/when.md\" sourcestartlinenumber=\"34\" sourceendlinenumber=\"34\">when (C# Reference)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/keywords/when","fileRelativePath":"articles/csharp/language-reference/keywords/when.html"},"themesRelativePathToOutputRoot":"_themes/"}