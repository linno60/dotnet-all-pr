{"content":"<div><div class=\"content\">\n<p><code>short</code> denotes an integral data type that stores values according to the size and range shown in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Range</th>\n<th>Size</th>\n<th>.NET Framework type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>short</code></td>\n<td>-32,768 to 32,767</td>\n<td>Signed 16-bit integer</td>\n<td><a class=\"xref\" href=\"../../../../api/system.int16\" data-linktype=\"relative-path\">System.Int16</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"literals\">Literals</h2>\n<p>You can declare and initialize a <code>short</code> variable by assigning a decimal literal, a hexadecimal literal, or (starting with C# 7) a binary literal to it.  If the integer literal is outside the range of <code>short</code> (that is, if it is less than <a class=\"xref\" href=\"../../../../api/system.int16#System_Int16_MinValue\" data-linktype=\"relative-path\">System.Int16.MinValue</a> or greater than <a class=\"xref\" href=\"../../../../api/system.int16#System_Int16_MaxValue\" data-linktype=\"relative-path\">System.Int16.MaxValue</a>, a compilation error occurs. </p>\n<p>In the following example, integers equal to 1,034 that are represented as decimal, hexadecimal, and binary literals are implicitly converted from <a href=\"int\" data-linktype=\"relative-path\">int</a> to <code>short</code> values.  </p>\n<pre><code class=\"lang-cs\" name=\"Short\">short shortValue1 = 1034;\nConsole.WriteLine(shortValue1);\n\nshort shortValue2 = 0x040A;\nConsole.WriteLine(shortValue2);\n\nshort shortValue3 = 0b0100_00001010;\nConsole.WriteLine(shortValue3);\n// The example displays the following output:\n//          1034\n//          1034\n//          1034\n</code></pre><div class=\"NOTE\"><h5>Note</h5><p>You use the prefix <code>0x</code> or <code>0X</code> to denote a hexadecimal literal and the prefix <code>0b</code> or <code>0B</code> to denote a binary literal. Decimal literals have no prefix.</p>\n</div>\n<p>Starting with C# 7, you can also use the underscore character, <code>_</code>, as a digit separator to enhance readability, as the following example shows.</p>\n<pre><code class=\"lang-cs\" name=\"Short\">short shortValue1 = 1_034;\nConsole.WriteLine(shortValue1);\n\nshort shortValue3 = 0b00000100_00001010;\nConsole.WriteLine(shortValue3);\n// The example displays the following output:\n//          1034\n//          1034\n</code></pre><h2 id=\"compiler-overload-resolution\">Compiler overload resolution</h2>\n<p> A cast must be used when calling overloaded methods. Consider, for example, the following overloaded methods that use <code>short</code> and <a href=\"int\" data-linktype=\"relative-path\">int</a> parameters:  </p>\n<pre class=\"loading\"><code class=\"lang-csharp\">public static void SampleMethod(int i) {}  \npublic static void SampleMethod(short s) {}  \n</code></pre><p> Using the <code>short</code> cast guarantees that the correct type is called, for example:  </p>\n<pre class=\"loading\"><code class=\"lang-csharp\">SampleMethod(5);         // Calling the method with the int parameter  \nSampleMethod((short)5);  // Calling the method with the short parameter  \n</code></pre><h2 id=\"conversions\">Conversions</h2>\n<p> There is a predefined implicit conversion from <code>short</code> to <a href=\"int\" data-linktype=\"relative-path\">int</a>, <a href=\"long\" data-linktype=\"relative-path\">long</a>, <a href=\"float\" data-linktype=\"relative-path\">float</a>, <a href=\"double\" data-linktype=\"relative-path\">double</a>, or <a href=\"decimal\" data-linktype=\"relative-path\">decimal</a>.  </p>\n<p> You cannot implicitly convert nonliteral numeric types of larger storage size to <code>short</code> (see <a href=\"integral-types-table\" data-linktype=\"relative-path\">Integral Types Table</a> for the storage sizes of integral types). Consider, for example, the following two <code>short</code> variables <code>x</code> and <code>y</code>:  </p>\n<pre class=\"loading\"><code class=\"lang-csharp\">short x = 5, y = 12;  \n</code></pre><p> The following assignment statement produces a compilation error because the arithmetic expression on the right-hand side of the assignment operator evaluates to <a href=\"int\" data-linktype=\"relative-path\">int</a> by default.  </p>\n<pre class=\"loading\"><code class=\"lang-csharp\">short z  = x + y;        // Compiler error CS0266: no conversion from int to short\n</code></pre><p> To fix this problem, use a cast:  </p>\n<pre class=\"loading\"><code class=\"lang-csharp\">short z  = (short)(x + y);   // Explicit conversion\n</code></pre><p> It is also possible to use the following statements, where the destination variable has the same storage size or a larger storage size:  </p>\n<pre class=\"loading\"><code class=\"lang-csharp\">int m = x + y;  \nlong n = x + y;  \n</code></pre><p> There is no implicit conversion from floating-point types to <code>short</code>. For example, the following statement generates a compiler error unless an explicit cast is used:  </p>\n<pre class=\"loading\"><code class=\"lang-csharp\">short x = 3.0;          // Error: no implicit conversion from double  \nshort y = (short)3.0;   // OK: explicit conversion  \n</code></pre><p> For information on arithmetic expressions with mixed floating-point types and integral types, see <a href=\"float\" data-linktype=\"relative-path\">float</a> and <a href=\"double\" data-linktype=\"relative-path\">double</a>.  </p>\n<p> For more information on implicit numeric conversion rules, see the <a href=\"implicit-numeric-conversions-table\" data-linktype=\"relative-path\">Implicit Numeric Conversions Table</a>.  </p>\n<h2 id=\"c-language-specification\">C# Language Specification</h2>\n<p>For more information, see the <a href=\"../language-specification\" data-linktype=\"relative-path\">C# Language Specification</a>. The language specification is the definitive source for C# syntax and usage.</p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../api/system.int16\" data-linktype=\"relative-path\">Int16</a><br> <a href=\"../index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"../../programming-guide/index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">C# Keywords</a><br> <a href=\"integral-types-table\" data-linktype=\"relative-path\">Integral Types Table</a><br> <a href=\"built-in-types-table\" data-linktype=\"relative-path\">Built-In Types Table</a><br> <a href=\"implicit-numeric-conversions-table\" data-linktype=\"relative-path\">Implicit Numeric Conversions Table</a><br> <a href=\"explicit-numeric-conversions-table\" data-linktype=\"relative-path\">Explicit Numeric Conversions Table</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"ms.assetid\" content=\"04c10688-e51a-4a87-bfec-83f7fb42ff11\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"17\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2017-03-14\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:46 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/400dfda51d978f35c3995f90840643aaff1b9c13/docs/csharp/language-reference/keywords/short.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/short.md\">\r\n<meta name=\"document_id\" content=\"fd87cbc1-8f8b-dc6a-e06b-7e4404762737\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","uhfHeaderId":"MSDocsHeader-DotNet","title":"short (C# Reference) | Microsoft Docs","ms.assetid":"04c10688-e51a-4a87-bfec-83f7fb42ff11","f1_keywords":["short","short_CSharpKeyword"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":17,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["short keyword [C#]"],"ms.date":"2017-03-14","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"tompratt-AQ","author_email":"v-thprat@microsoft.com","committer_name":"Maira Wenzel","comitter_email":"mairaw@microsoft.com","message":"Update language identifiers and styleguide. (#1796)","commit_sha":"400dfda51d978f35c3995f90840643aaff1b9c13","commit_date":"2017-03-24 14:01:03 -0700"},{"author_name":"Ron Petrusha","author_email":"ronpet@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":"Revisions for support of binary literals (#1723)","commit_sha":"57c4b1c7ead9386ff4067da5915a55a79f5e562e","commit_date":"2017-03-20 13:35:24 -0400"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-04-01 05:46 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/tompratt-AQ","display_name":"tompratt-AQ","id":"26311438"},{"profile_url":"https://github.com/rpetrusha","display_name":"rpetrusha","id":"10886961"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"4/1/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/400dfda51d978f35c3995f90840643aaff1b9c13/docs/csharp/language-reference/keywords/short.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/short.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/keywords/short.md","document_id":"fd87cbc1-8f8b-dc6a-e06b-7e4404762737","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/short","toc_asset_id":"articles/csharp/language-reference/keywords/toc.json","toc_rel":"toc.json","_op_ogTitle":"short (C# Reference)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":549,"_op_rawTitle":"<h1 id=\"short-c-reference\" sourcefile=\"docs/csharp/language-reference/keywords/short.md\" sourcestartlinenumber=\"34\" sourceendlinenumber=\"34\">short (C# Reference)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/short","fileRelativePath":"articles/csharp/language-reference/keywords/short.html"},"themesRelativePathToOutputRoot":"_themes/"}