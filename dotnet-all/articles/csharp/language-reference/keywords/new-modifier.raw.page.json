{"content":"<div><div class=\"content\">\n<p>When used as a declaration modifier, the <code>new</code> keyword explicitly hides a member that is inherited from a base class. When you hide an inherited member, the derived version of the member replaces the base class version. Although you can hide members without using the <code>new</code> modifier, you get a compiler warning. If you use <code>new</code> to explicitly hide a member, it suppresses this warning.  </p>\n<p> To hide an inherited member, declare it in the derived class by using the same member name, and modify it with the <code>new</code> keyword. For example:  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsOperator#8\">    public class BaseC\n    {\n        public int x;\n        public void Invoke() { }\n    }\n    public class DerivedC : BaseC\n    {\n        new public void Invoke() { }\n    }\n</code></pre><p> In this example, <code>BaseC.Invoke</code> is hidden by <code>DerivedC.Invoke</code>. The field <code>x</code> is not affected because it is not hidden by a similar name.  </p>\n<p> Name hiding through inheritance takes one of the following forms:  </p>\n<ul>\n<li><p>Generally, a constant, field, property, or type that is introduced in a class or struct hides all base class members that share its name.  There are special cases.  For example, if you declare a new field with name <code>N</code> to have a type that is not invocable, and a base type declares <code>N</code> to be a method, the new field does not hide the base declaration in invocation syntax.  See the <a href=\"http://go.microsoft.com/fwlink/?LinkId=199552\" data-linktype=\"external\">C# language specification</a> for details (see section &quot;Member Lookup&quot; in section &quot;Expressions&quot;).  </p>\n</li>\n<li><p>A method introduced in a class or struct hides properties, fields, and types that share that name in the base class. It also hides all base class methods that have the same signature.  </p>\n</li>\n<li><p>An indexer introduced in a class or struct hides all base class indexers that have the same signature.  </p>\n<p>It is an error to use both <code>new</code> and <a href=\"override\" data-linktype=\"relative-path\">override</a> on the same member, because the two modifiers have mutually exclusive meanings. The <code>new</code> modifier creates a new member with the same name and causes the original member to become hidden. The <code>override</code> modifier extends the implementation for an inherited member.  </p>\n<p>Using the <code>new</code> modifier in a declaration that does not hide an inherited member generates a warning.  </p>\n</li>\n</ul>\n<h2 id=\"example\">Example</h2>\n<p> In this example, a base class, <code>BaseC</code>, and a derived class, <code>DerivedC</code>, use the same field name <code>x</code>, which hides the value of the inherited field. The example demonstrates the use of the <code>new</code> modifier. It also demonstrates how to access the hidden members of the base class by using their fully qualified names.  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsOperator#9\">        public class BaseC\n        {\n            public static int x = 55;\n            public static int y = 22;\n        }\n\n        public class DerivedC : BaseC\n        {\n            // Hide field &#39;x&#39;.\n            new public static int x = 100;\n\n            static void Main()\n            {\n                // Display the new value of x:\n                Console.WriteLine(x);\n\n                // Display the hidden value of x:\n                Console.WriteLine(BaseC.x);\n\n                // Display the unhidden member y:\n                Console.WriteLine(y);\n            }\n        }\n        /*\n        Output:\n        100\n        55\n        22\n        */\n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> In this example, a nested class hides a class that has the same name in the base class. The example demonstrates how to use the <code>new</code> modifier to eliminate the warning message and how to access the hidden class members by using their fully qualified names.  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsOperator#10\">    public class BaseC \n    {\n        public class NestedC \n        {\n            public int x = 200;\n            public int y;\n        }\n    }\n\n    public class DerivedC : BaseC \n    {\n        // Nested type hiding the base type members.\n        new public class NestedC   \n        {\n            public int x = 100;\n            public int y; \n            public int z;\n        }\n\n        static void Main() \n        {\n            // Creating an object from the overlapping class:\n            NestedC c1  = new NestedC();\n\n            // Creating an object from the hidden class:\n            BaseC.NestedC c2 = new BaseC.NestedC();\n\n            Console.WriteLine(c1.x);\n            Console.WriteLine(c2.x);   \n        }\n    }\n    /*\n    Output:\n    100\n    200\n    */\n</code></pre><p> If you remove the <code>new</code> modifier, the program will still compile and run, but you will get the following warning:  </p>\n<pre class=\"loading\"><code>The keyword new is required on &#39;MyDerivedC.x&#39; because it hides inherited member &#39;MyBaseC.x&#39;.  \n</code></pre><h2 id=\"c-language-specification\">C# Language Specification</h2>\n<p> For more information, see the <a href=\"../language-specification\" data-linktype=\"relative-path\">C# Language Specification</a>. The language specification is the definitive source for C# syntax and usage.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"../../programming-guide/index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">C# Keywords</a><br> <a href=\"operator-keywords\" data-linktype=\"relative-path\">Operator Keywords</a><br> <a href=\"modifiers\" data-linktype=\"relative-path\">Modifiers</a><br> <a href=\"../../programming-guide/classes-and-structs/versioning-with-the-override-and-new-keywords\" data-linktype=\"relative-path\">Versioning with the Override and New Keywords</a><br> <a href=\"../../programming-guide/classes-and-structs/knowing-when-to-use-override-and-new-keywords\" data-linktype=\"relative-path\">Knowing When to Use Override and New Keywords</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"a2e20856-33b9-4620-b535-a60dbce8349b\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"28\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-21 01:42 AM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/new-modifier.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/csharp/language-reference/keywords/new-modifier.md\">\r\n<meta name=\"document_id\" content=\"67d2fbf0-0dcc-2786-c5d0-7ee25b1fc379\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"new Modifier (C# Reference) | Microsoft Docs","ms.assetid":"a2e20856-33b9-4620-b535-a60dbce8349b","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":28,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["new modifier keyword [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-21 01:42 AM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/21/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/new-modifier.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/csharp/language-reference/keywords/new-modifier.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/keywords/new-modifier.md","document_id":"67d2fbf0-0dcc-2786-c5d0-7ee25b1fc379","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/keywords/new-modifier","toc_asset_id":"articles/csharp/language-reference/keywords/toc.json","toc_rel":"toc.json","_op_ogTitle":"new Modifier (C# Reference)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":691,"_op_rawTitle":"<h1 id=\"new-modifier-c-reference\" sourcefile=\"docs/csharp/language-reference/keywords/new-modifier.md\" sourcestartlinenumber=\"31\" sourceendlinenumber=\"31\">new Modifier (C# Reference)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/keywords/new-modifier","fileRelativePath":"articles/csharp/language-reference/keywords/new-modifier.html"},"themesRelativePathToOutputRoot":"_themes/"}