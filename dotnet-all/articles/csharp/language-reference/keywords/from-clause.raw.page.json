{"content":"<div><div class=\"content\">\n<p>A query expression must begin with a <code>from</code> clause. Additionally, a query expression can contain sub-queries, which also begin with a <code>from</code> clause. The <code>from</code> clause specifies the following:  </p>\n<ul>\n<li><p>The data source on which the query or sub-query will be run.  </p>\n</li>\n<li><p>A local <em>range variable</em> that represents each element in the source sequence.  </p>\n<p>Both the range variable and the data source are strongly typed. The data source referenced in the <code>from</code> clause must have a type of <a class=\"xref\" href=\"../../../../api/system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a>, <a class=\"xref\" href=\"../../../../api/system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>, or a derived type such as <a class=\"xref\" href=\"../../../../api/system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable&lt;T&gt;</a>.  </p>\n<p>In the following example, <code>numbers</code> is the data source and <code>num</code> is the range variable. Note that both variables are strongly typed even through the <a href=\"var\" data-linktype=\"relative-path\">var</a> keyword is used.  </p>\n<pre><code class=\"lang-cs\" name=\"cscsrefQueryKeywords#1\">    class LowNums\n    {\n        static void Main()\n        {   \n            // A simple data source.\n            int[] numbers = { 5, 4, 1, 3, 9, 8, 6, 7, 2, 0 };\n\n            // Create the query.\n            // lowNums is an IEnumerable&lt;int&gt;\n            var lowNums = from num in numbers\n                where num &lt; 5\n                select num;\n\n            // Execute the query.\n            foreach (int i in lowNums)\n            {\n                Console.Write(i + &quot; &quot;);\n            }\n        }        \n    }\n    // Output: 4 1 3 2 0\n</code></pre></li>\n</ul>\n<h2 id=\"the-range-variable\">The Range Variable</h2>\n<p> The compiler infers the type of the range variable when the data source implements <a class=\"xref\" href=\"../../../../api/system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>. For example, if the source has a type of <code>IEnumerable&lt;Customer&gt;</code>, then the range variable is inferred to be <code>Customer</code>. The only time that you must specify the type explicitly is when the source is a non-generic <code>IEnumerable</code> type such as <a class=\"xref\" href=\"../../../../api/system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>. For more information, see <a href=\"http://msdn.microsoft.com/library/c318b79a-fa4d-4de3-b62d-c1162beb267e\" data-linktype=\"external\">How to: Query an ArrayList with LINQ</a>.  </p>\n<p> In the previous example <code>num</code> is inferred to be of type <code>int</code>. Because the range variable is strongly typed, you can call methods on it or use it in other operations. For example, instead of writing <code>select num</code>, you could write <code>select num.ToString()</code> to cause the query expression to return a sequence of strings instead of integers. Or you could write <code>select n + 10</code> to cause the expression to return the sequence 14, 11, 13, 12, 10. For more information, see <a href=\"select-clause\" data-linktype=\"relative-path\">select clause</a>.  </p>\n<p> The range variable is like an iteration variable in a <a href=\"foreach-in\" data-linktype=\"relative-path\">foreach</a> statement except for one very important difference: a range variable never actually stores data from the source. It just a syntactic convenience that enables the query to describe what will occur when the query is executed. For more information, see <a href=\"../../programming-guide/concepts/linq/introduction-to-linq-queries\" data-linktype=\"relative-path\">Introduction to LINQ Queries (C#)</a>.  </p>\n<h2 id=\"compound-from-clauses\">Compound from Clauses</h2>\n<p> In some cases, each element in the source sequence may itself be either a sequence or contain a sequence. For example, your data source may be an <code>IEnumerable&lt;Student&gt;</code> where each student object in the sequence contains a list of test scores. To access the inner list within each <code>Student</code> element, you can use compound <code>from</code> clauses. The technique is like using nested <a href=\"foreach-in\" data-linktype=\"relative-path\">foreach</a> statements. You can add <a href=\"partial-method\" data-linktype=\"relative-path\">where</a> or <a href=\"orderby-clause\" data-linktype=\"relative-path\">orderby</a> clauses to either <code>from</code> clause to filter the results. The following example shows a sequence of <code>Student</code> objects, each of which contains an inner <code>List</code> of integers representing test scores. To access the inner list, use a compound <code>from</code> clause. You can insert clauses between the two <code>from</code> clauses if necessary.  </p>\n<pre><code class=\"lang-cs\" name=\"cscsrefQueryKeywords#2\">    class CompoundFrom\n    {\n        // The element type of the data source.\n        public class Student\n        {\n            public string LastName { get; set; }\n            public List&lt;int&gt; Scores {get; set;}\n        }\n\n        static void Main()\n        {\n            \n            // Use a collection initializer to create the data source. Note that \n            // each element in the list contains an inner sequence of scores.\n            List&lt;Student&gt; students = new List&lt;Student&gt;\n            {\n               new Student {LastName=&quot;Omelchenko&quot;, Scores= new List&lt;int&gt; {97, 72, 81, 60}},\n               new Student {LastName=&quot;O&#39;Donnell&quot;, Scores= new List&lt;int&gt; {75, 84, 91, 39}},\n               new Student {LastName=&quot;Mortensen&quot;, Scores= new List&lt;int&gt; {88, 94, 65, 85}},\n               new Student {LastName=&quot;Garcia&quot;, Scores= new List&lt;int&gt; {97, 89, 85, 82}},\n               new Student {LastName=&quot;Beebe&quot;, Scores= new List&lt;int&gt; {35, 72, 91, 70}} \n            };        \n\n            // Use a compound from to access the inner sequence within each element.\n            // Note the similarity to a nested foreach statement.\n            var scoreQuery = from student in students\n                             from score in student.Scores\n                                where score &gt; 90\n                                select new { Last = student.LastName, score };\n                        \n            // Execute the queries.\n            Console.WriteLine(&quot;scoreQuery:&quot;);\n            // Rest the mouse pointer on scoreQuery in the following line to \n            // see its type. The type is IEnumerable&lt;&#39;a&gt;, where &#39;a is an \n            // anonymous type defined as new {string Last, int score}. That is,\n            // each instance of this anonymous type has two members, a string \n            // (Last) and an int (score).\n            foreach (var student in scoreQuery)\n            {\n                Console.WriteLine(&quot;{0} Score: {1}&quot;, student.Last, student.score);\n            }\n            \n            // Keep the console window open in debug mode.\n            Console.WriteLine(&quot;Press any key to exit.&quot;);\n            Console.ReadKey();\n        }       \n    }\n    /*\n    scoreQuery:\n    Omelchenko Score: 97\n    O&#39;Donnell Score: 91\n    Mortensen Score: 94\n    Garcia Score: 97\n    Beebe Score: 91\n    */\n</code></pre><h2 id=\"using-multiple-from-clauses-to-perform-joins\">Using Multiple from Clauses to Perform Joins</h2>\n<p> A compound <code>from</code> clause is used to access inner collections in a single data source. However, a query can also contain multiple <code>from</code> clauses that generate supplemental queries from independent data sources. This technique enables you to perform certain types of join operations that are not possible by using the <a href=\"join-clause\" data-linktype=\"relative-path\">join clause</a>.  </p>\n<p> The following example shows how two <code>from</code> clauses can be used to form a complete cross join of two data sources.  </p>\n<pre><code class=\"lang-cs\" name=\"cscsrefQueryKeywords#3\">    class CompoundFrom2\n    {\n        static void Main()\n        {\n            char[] upperCase = { &#39;A&#39;, &#39;B&#39;, &#39;C&#39; };\n            char[] lowerCase = { &#39;x&#39;, &#39;y&#39;, &#39;z&#39; };\n\n            // The type of joinQuery1 is IEnumerable&lt;&#39;a&gt;, where &#39;a\n            // indicates an anonymous type. This anonymous type has two\n            // members, upper and lower, both of type char.\n            var joinQuery1 =\n                from upper in upperCase\n                from lower in lowerCase\n                select new { upper, lower };\n\n            // The type of joinQuery2 is IEnumerable&lt;&#39;a&gt;, where &#39;a\n            // indicates an anonymous type. This anonymous type has two\n            // members, upper and lower, both of type char.\n            var joinQuery2 =\n                from lower in lowerCase\n                where lower != &#39;x&#39;\n                from upper in upperCase\n                select new { lower, upper };\n\n\n            // Execute the queries.\n            Console.WriteLine(&quot;Cross join:&quot;);\n            // Rest the mouse pointer on joinQuery1 to verify its type.\n            foreach (var pair in joinQuery1)\n            {\n                Console.WriteLine(&quot;{0} is matched to {1}&quot;, pair.upper, pair.lower);\n            }\n\n            Console.WriteLine(&quot;Filtered non-equijoin:&quot;);\n            // Rest the mouse pointer over joinQuery2 to verify its type.\n            foreach (var pair in joinQuery2)\n            {\n                Console.WriteLine(&quot;{0} is matched to {1}&quot;, pair.lower, pair.upper);\n            }\n\n            // Keep the console window open in debug mode.\n            Console.WriteLine(&quot;Press any key to exit.&quot;);\n            Console.ReadKey();\n        }\n    }\n    /* Output:\n            Cross join:\n            A is matched to x\n            A is matched to y\n            A is matched to z\n            B is matched to x\n            B is matched to y\n            B is matched to z\n            C is matched to x\n            C is matched to y\n            C is matched to z\n            Filtered non-equijoin:\n            y is matched to A\n            y is matched to B\n            y is matched to C\n            z is matched to A\n            z is matched to B\n            z is matched to C\n            */\n</code></pre><p> For more information about join operations that use multiple <code>from</code> clauses, see <a href=\"../../programming-guide/linq-query-expressions/how-to-perform-custom-join-operations\" data-linktype=\"relative-path\">How to: Perform Custom Join Operations</a>.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"query-keywords\" data-linktype=\"relative-path\">Query Keywords (LINQ)</a><br> <a href=\"../../programming-guide/linq-query-expressions/index\" data-linktype=\"relative-path\">LINQ Query Expressions</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"1aefd18c-1314-47f8-99ec-9bcefb09e699\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"27\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/from-clause.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/from-clause.md\">\r\n<meta name=\"document_id\" content=\"385c5bb7-a958-71ab-b511-e9995d4fcd04\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"from clause (C# Reference) | Microsoft Docs","ms.assetid":"1aefd18c-1314-47f8-99ec-9bcefb09e699","f1_keywords":["from_CSharpKeyword","from"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":27,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["from clause [C#]","from keyword [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/from-clause.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/from-clause.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/keywords/from-clause.md","document_id":"385c5bb7-a958-71ab-b511-e9995d4fcd04","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/keywords/from-clause","toc_asset_id":"articles/csharp/language-reference/keywords/toc.json","toc_rel":"toc.json","_op_ogTitle":"from clause (C# Reference)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":1161,"_op_rawTitle":"<h1 id=\"from-clause-c-reference\" sourcefile=\"docs/csharp/language-reference/keywords/from-clause.md\" sourcestartlinenumber=\"35\" sourceendlinenumber=\"35\">from clause (C# Reference)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/keywords/from-clause","fileRelativePath":"articles/csharp/language-reference/keywords/from-clause.html"},"themesRelativePathToOutputRoot":"_themes/"}