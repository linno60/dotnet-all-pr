{"content":"<div><div class=\"content\">\n<p>When you use the <code>yield</code> keyword in a statement, you indicate that the method, operator, or <code>get</code> accessor in which it appears is an iterator. Using <code>yield</code> to define an iterator removes the need for an explicit extra class (the class that holds the state for an enumeration, see <a class=\"xref\" href=\"../../../../api/system.collections.generic.ienumerator-1\" data-linktype=\"relative-path\">IEnumerator&lt;T&gt;</a> for an example) when you implement the <a class=\"xref\" href=\"../../../../api/system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> and <a class=\"xref\" href=\"../../../../api/system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> pattern for a custom collection type.  </p>\n<p> The following example shows the two forms of the <code>yield</code> statement.  </p>\n<p><codecontentplaceholder>0</codecontentplaceholder>  </p>\n<h2 id=\"remarks\">Remarks</h2>\n<p> You use a <code>yield return</code> statement to return each element one at a time.  </p>\n<p> You consume an iterator method by using a <a href=\"foreach-in\" data-linktype=\"relative-path\">foreach</a> statement or LINQ query. Each iteration of the <code>foreach</code> loop calls the iterator method. When a <code>yield return</code> statement is reached in the iterator method, <code>expression</code> is returned, and the current location in code is retained. Execution is restarted from that location the next time that the iterator function is called.  </p>\n<p> You can use a <code>yield break</code> statement to end the iteration.  </p>\n<p> For more information about iterators, see <a href=\"http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7\" data-linktype=\"external\">Iterators</a>.  </p>\n<h2 id=\"iterator-methods-and-get-accessors\">Iterator Methods and get Accessors</h2>\n<p> The declaration of an iterator must meet the following requirements:  </p>\n<ul>\n<li><p>The return type must be <a class=\"xref\" href=\"../../../../api/system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a>, <a class=\"xref\" href=\"../../../../api/system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>, <a class=\"xref\" href=\"../../../../api/system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a>, or <a class=\"xref\" href=\"../../../../api/system.collections.generic.ienumerator-1\" data-linktype=\"relative-path\">IEnumerator&lt;T&gt;</a>.  </p>\n</li>\n<li><p>The declaration can&#39;t have any <a href=\"ref\" data-linktype=\"relative-path\">ref</a> or <a href=\"out\" data-linktype=\"relative-path\">out</a> parameters.  </p>\n<p>The <code>yield</code> type of an iterator that returns <a class=\"xref\" href=\"../../../../api/system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> or <a class=\"xref\" href=\"../../../../api/system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> is <code>object</code>.  If the iterator returns <a class=\"xref\" href=\"../../../../api/system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> or <a class=\"xref\" href=\"../../../../api/system.collections.generic.ienumerator-1\" data-linktype=\"relative-path\">IEnumerator&lt;T&gt;</a>, there must be an implicit conversion from the type of the expression in the <code>yield return</code> statement to the generic type parameter .  </p>\n<p>You can&#39;t include a <code>yield return</code> or <code>yield break</code> statement in methods that have the following characteristics:  </p>\n</li>\n<li><p>Anonymous methods. For more information, see <a href=\"../../programming-guide/statements-expressions-operators/anonymous-methods\" data-linktype=\"relative-path\">Anonymous Methods</a>.  </p>\n</li>\n<li><p>Methods that contain unsafe blocks. For more information, see <a href=\"unsafe\" data-linktype=\"relative-path\">unsafe</a>.  </p>\n</li>\n</ul>\n<h2 id=\"exception-handling\">Exception Handling</h2>\n<p> A <code>yield return</code> statement can&#39;t be located in a try-catch block. A <code>yield return</code> statement can be located in the try block of a try-finally statement.  </p>\n<p> A <code>yield break</code> statement can be located in a try block or a catch block but not a finally block.  </p>\n<p> If the <code>foreach</code> body (outside of the iterator method) throws an exception, a <code>finally</code> block in the iterator method is executed.  </p>\n<h2 id=\"technical-implementation\">Technical Implementation</h2>\n<p> The following code returns an <code>IEnumerable&lt;string&gt;</code> from an iterator method and then iterates through its elements.  </p>\n<p><codecontentplaceholder>1</codecontentplaceholder><br> The call to <code>MyIteratorMethod</code> doesn&#39;t execute the body of the method. Instead the call returns an <code>IEnumerable&lt;string&gt;</code> into the <code>elements</code> variable.  </p>\n<p> On an iteration of the <code>foreach</code> loop, the <a class=\"xref\" href=\"../../../../api/system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> method is called for <code>elements</code>. This call executes the body of <code>MyIteratorMethod</code> until the next <code>yield return</code> statement is reached. The expression returned by the <code>yield return</code> statement determines not only the value of the <code>element</code> variable for consumption by the loop body but also the <a class=\"xref\" href=\"../../../../api/system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a> property of elements, which is an <code>IEnumerable&lt;string&gt;</code>.  </p>\n<p> On each subsequent iteration of the <code>foreach</code> loop, the execution of the iterator body continues from where it left off, again stopping when it reaches a <code>yield return</code> statement. The <code>foreach</code> loop completes when the end of the iterator method or a <code>yield break</code> statement is reached.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following example has a <code>yield return</code> statement that&#39;s inside a <code>for</code> loop. Each iteration of the <code>foreach</code> statement body in <code>Process</code> creates a call to the <code>Power</code> iterator function. Each call to the iterator function proceeds to the next execution of the <code>yield return</code> statement, which occurs during the next iteration of the <code>for</code> loop.  </p>\n<p> The return type of the iterator method is <a class=\"xref\" href=\"../../../../api/system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a>, which is an iterator interface type. When the iterator method is called, it returns an enumerable object that contains the powers of a number.  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsContextual#5\">    public class PowersOf2\n    {\n        static void Main()\n        {\n            // Display powers of 2 up to the exponent of 8:\n            foreach (int i in Power(2, 8))\n            {\n                Console.Write(&quot;{0} &quot;, i);\n            }\n        }\n\n        public static System.Collections.Generic.IEnumerable&lt;int&gt; Power(int number, int exponent)\n        {\n            int result = 1;\n\n            for (int i = 0; i &lt; exponent; i++)\n            {\n                result = result * number;\n                yield return result;\n            }\n        }\n\n        // Output: 2 4 8 16 32 64 128 256\n    }\n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> The following example demonstrates a <code>get</code> accessor that is an iterator. In the example, each <code>yield return</code> statement returns an instance of a user-defined class.  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsContextual#21\">public static class GalaxyClass\n{\n    public static void ShowGalaxies()\n    {\n        var theGalaxies = new Galaxies();\n        foreach (Galaxy theGalaxy in theGalaxies.NextGalaxy)\n        {\n            Debug.WriteLine(theGalaxy.Name + &quot; &quot; + theGalaxy.MegaLightYears.ToString());\n        }\n    }\n\n    public class Galaxies\n    {\n\n        public System.Collections.Generic.IEnumerable&lt;Galaxy&gt; NextGalaxy\n        {\n            get\n            {\n                yield return new Galaxy { Name = &quot;Tadpole&quot;, MegaLightYears = 400 };\n                yield return new Galaxy { Name = &quot;Pinwheel&quot;, MegaLightYears = 25 };\n                yield return new Galaxy { Name = &quot;Milky Way&quot;, MegaLightYears = 0 };\n                yield return new Galaxy { Name = &quot;Andromeda&quot;, MegaLightYears = 3 };\n            }\n        }\n\n    }\n\n    public class Galaxy\n    {\n        public String Name { get; set; }\n        public int MegaLightYears { get; set; }\n    }\n}\n</code></pre><h2 id=\"c-language-specification\">C# Language Specification</h2>\n<p> For more information, see the <a href=\"../language-specification\" data-linktype=\"relative-path\">C# Language Specification</a>. The language specification is the definitive source for C# syntax and usage.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"../../programming-guide/index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"foreach-in\" data-linktype=\"relative-path\">foreach, in</a><br> <a href=\"http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7\" data-linktype=\"external\">Iterators</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"1089194f-9e53-46a2-8642-53ccbe9d414d\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"46\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/yield.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/yield.md\">\r\n<meta name=\"document_id\" content=\"1381ae9b-efe1-f207-a117-2fb4d8f12b1f\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"yield (C# Reference) | Microsoft Docs","ms.assetid":"1089194f-9e53-46a2-8642-53ccbe9d414d","f1_keywords":["yield","yield_CSharpKeyword"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":46,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["yield keyword [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/yield.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/yield.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/keywords/yield.md","document_id":"1381ae9b-efe1-f207-a117-2fb4d8f12b1f","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/keywords/yield","toc_asset_id":"articles/csharp/language-reference/keywords/toc.json","toc_rel":"toc.json","_op_ogTitle":"yield (C# Reference)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":821,"_op_rawTitle":"<h1 id=\"yield-c-reference\" sourcefile=\"docs/csharp/language-reference/keywords/yield.md\" sourcestartlinenumber=\"34\" sourceendlinenumber=\"34\">yield (C# Reference)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/keywords/yield","fileRelativePath":"articles/csharp/language-reference/keywords/yield.html"},"themesRelativePathToOutputRoot":"_themes/"}