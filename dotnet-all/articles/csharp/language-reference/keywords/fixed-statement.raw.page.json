{"content":"<div><div class=\"content\">\n<p>The <code>fixed</code> statement prevents the garbage collector from relocating a movable variable. The <code>fixed</code> statement is only permitted in an <a href=\"unsafe\" data-linktype=\"relative-path\">unsafe</a> context. <code>Fixed</code> can also be used to create <a href=\"../../programming-guide/unsafe-code-pointers/fixed-size-buffers\" data-linktype=\"relative-path\">fixed size buffers</a>.  </p>\n<p> The <code>fixed</code> statement sets a pointer to a managed variable and &quot;pins&quot; that variable during the execution of the statement. Without <code>fixed</code>, pointers to movable managed variables would be of little use since garbage collection could relocate the variables unpredictably. The C# compiler only lets you assign a pointer to a managed variable in a <code>fixed</code> statement.  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsFixedLock#1\">unsafe static void TestMethod()\n{\n    \n    // Assume that the following class exists.\n    //class Point \n    //{ \n    //    public int x;\n    //    public int y; \n    //}\n\n    // Variable pt is a managed variable, subject to garbage collection.\n    Point pt = new Point();\n\n    // Using fixed allows the address of pt members to be taken,\n    // and &quot;pins&quot; pt so that it is not relocated.\n    \n    fixed (int* p = &amp;pt.x)\n    {\n        *p = 1;\n    }        \n   \n}\n</code></pre><p> You can initialize a pointer by using an array, a string, a fixed-size buffer, or the address of a variable. The following example illustrates the use of variable addresses, arrays, and strings. For more information about fixed-size buffers, see <a href=\"../../programming-guide/unsafe-code-pointers/fixed-size-buffers\" data-linktype=\"relative-path\">Fixed Size Buffers</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsFixedLock#2\">static unsafe void Test2()\n{\n    Point point = new Point();\n    double[] arr = { 0, 1.5, 2.3, 3.4, 4.0, 5.9 };\n    string str = &quot;Hello World&quot;;\n\n    // The following two assignments are equivalent. Each assigns the address\n    // of the first element in array arr to pointer p.\n\n    // You can initialize a pointer by using an array.\n    fixed (double* p = arr) { /*...*/ }\n\n    // You can initialize a pointer by using the address of a variable. \n    fixed (double* p = &amp;arr[0]) { /*...*/ }\n\n    // The following assignment initializes p by using a string.\n    fixed (char* p = str) { /*...*/ }\n\n    // The following assignment is not valid, because str[0] is a char, \n    // which is a value, not a variable.\n    //fixed (char* p = &amp;str[0]) { /*...*/ } \n\n\n    // You can initialize a pointer by using the address of a variable, such\n    // as point.x or arr[5].\n    fixed (int* p1 = &amp;point.x)\n    {\n        fixed (double* p2 = &amp;arr[5])\n        {\n            // Do something with p1 and p2.\n        }\n    }\n}\n</code></pre><p> You can initialize multiple pointers, as long as they are all of the same type.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">fixed (byte* ps = srcarray, pd = dstarray) {...}  \n</code></pre><p> To initialize pointers of different types, simply nest <code>fixed</code> statements, as shown in the following example.  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsFixedLock#3\">fixed (int* p1 = &amp;point.x)\n{\n    fixed (double* p2 = &amp;arr[5])\n    {\n        // Do something with p1 and p2.\n    }\n}\n</code></pre><p> After the code in the statement is executed, any pinned variables are unpinned and subject to garbage collection. Therefore, do not point to those variables outside the <code>fixed</code> statement.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Pointers initialized in fixed statements cannot be modified.  </p>\n</div>\n<p> In unsafe mode, you can allocate memory on the stack, where it is not subject to garbage collection and therefore does not need to be pinned. For more information, see <a href=\"stackalloc\" data-linktype=\"relative-path\">stackalloc</a>.  </p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsFixedLock#4\">class Point\n{ \n    public int x, y; \n}\n\nclass FixedTest2 \n{\n    // Unsafe method: takes a pointer to an int.\n    unsafe static void SquarePtrParam (int* p) \n    {\n        *p *= *p;\n    }\n\n    unsafe static void Main() \n    {\n        Point pt = new Point();\n        pt.x = 5;\n        pt.y = 6;\n        // Pin pt in place:\n        fixed (int* p = &amp;pt.x) \n        {\n            SquarePtrParam (p);\n        }\n        // pt now unpinned.\n        Console.WriteLine (&quot;{0} {1}&quot;, pt.x, pt.y);\n    }\n}\n/*\nOutput:\n25 6\n */\n</code></pre><h2 id=\"c-language-specification\">C# Language Specification</h2>\n<p>For more information, see the <a href=\"../language-specification\" data-linktype=\"relative-path\">C# Language Specification</a>. The language specification is the definitive source for C# syntax and usage.</p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"../../programming-guide/index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">C# Keywords</a><br> <a href=\"unsafe\" data-linktype=\"relative-path\">unsafe</a><br> <a href=\"../../programming-guide/unsafe-code-pointers/fixed-size-buffers\" data-linktype=\"relative-path\">Fixed Size Buffers</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"7ea6db08-ad49-4a7a-b934-d8c4acad1c3a\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"24\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/fixed-statement.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/fixed-statement.md\">\r\n<meta name=\"document_id\" content=\"fce42e91-c2fc-95bc-7497-078b3624210b\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"fixed Statement (C# Reference) | Microsoft Docs","ms.assetid":"7ea6db08-ad49-4a7a-b934-d8c4acad1c3a","f1_keywords":["fixed_CSharpKeyword","fixed"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":24,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["fixed keyword [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/fixed-statement.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/fixed-statement.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/keywords/fixed-statement.md","document_id":"fce42e91-c2fc-95bc-7497-078b3624210b","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/fixed-statement","toc_asset_id":"articles/csharp/language-reference/keywords/toc.json","toc_rel":"toc.json","_op_ogTitle":"fixed Statement (C# Reference)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":622,"_op_rawTitle":"<h1 id=\"fixed-statement-c-reference\" sourcefile=\"docs/csharp/language-reference/keywords/fixed-statement.md\" sourcestartlinenumber=\"34\" sourceendlinenumber=\"34\">fixed Statement (C# Reference)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/fixed-statement","fileRelativePath":"articles/csharp/language-reference/keywords/fixed-statement.html"},"themesRelativePathToOutputRoot":"_themes/"}