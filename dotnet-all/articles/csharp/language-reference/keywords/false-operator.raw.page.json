{"content":"<div><div class=\"content\">\n<p>Returns the <a href=\"bool\" data-linktype=\"relative-path\">bool</a> value <code>true</code> to indicate that an operand is <code>false</code> and returns <code>false</code> otherwise.  </p>\n<p> Prior to C# 2.0, the <code>true</code> and <code>false</code> operators were used to create user-defined nullable value types that were compatible with types such as <code>SqlBool</code>. However, the language now provides built-in support for nullable value types, and whenever possible you should use those instead of overloading the <code>true</code> and <code>false</code> operators. For more information, see <a href=\"../../programming-guide/nullable-types/index\" data-linktype=\"relative-path\">Nullable Types</a>.  </p>\n<p> With nullable Booleans, the expression <code>a != b</code> is not necessarily equal to <code>!(a == b)</code> because one or both of the values might be null. You have to overload both the <code>true</code> and <code>false</code> operators separately to correctly handle the null values in the expression. The following example shows how to overload and use the <code>true</code> and <code>false</code> operators.  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsOperator#16\">// For example purposes only. Use the built-in nullable bool \n// type (bool?) whenever possible.\npublic struct DBBool\n{\n    // The three possible DBBool values.\n    public static readonly DBBool Null = new DBBool(0);\n    public static readonly DBBool False = new DBBool(-1);\n    public static readonly DBBool True = new DBBool(1);\n    // Private field that stores –1, 0, 1 for False, Null, True.\n    sbyte value;\n    // Private instance constructor. The value parameter must be –1, 0, or 1.\n    DBBool(int value)\n    {\n        this.value = (sbyte)value;\n    }\n    // Properties to examine the value of a DBBool. Return true if this\n    // DBBool has the given value, false otherwise.\n    public bool IsNull { get { return value == 0; } }\n    public bool IsFalse { get { return value &lt; 0; } }\n    public bool IsTrue { get { return value &gt; 0; } }\n    // Implicit conversion from bool to DBBool. Maps true to DBBool.True and\n    // false to DBBool.False.\n    public static implicit operator DBBool(bool x)\n    {\n        return x ? True : False;\n    }\n    // Explicit conversion from DBBool to bool. Throws an exception if the\n    // given DBBool is Null; otherwise returns true or false.\n    public static explicit operator bool(DBBool x)\n    {\n        if (x.value == 0) throw new InvalidOperationException();\n        return x.value &gt; 0;\n    }\n    // Equality operator. Returns Null if either operand is Null; otherwise\n    // returns True or False.\n    public static DBBool operator ==(DBBool x, DBBool y)\n    {\n        if (x.value == 0 || y.value == 0) return Null;\n        return x.value == y.value ? True : False;\n    }\n    // Inequality operator. Returns Null if either operand is Null; otherwise\n    // returns True or False.\n    public static DBBool operator !=(DBBool x, DBBool y)\n    {\n        if (x.value == 0 || y.value == 0) return Null;\n        return x.value != y.value ? True : False;\n    }\n    // Logical negation operator. Returns True if the operand is False, Null\n    // if the operand is Null, or False if the operand is True.\n    public static DBBool operator !(DBBool x)\n    {\n        return new DBBool(-x.value);\n    }\n    // Logical AND operator. Returns False if either operand is False,\n    // Null if either operand is Null, otherwise True.\n    public static DBBool operator &amp;(DBBool x, DBBool y)\n    {\n        return new DBBool(x.value &lt; y.value ? x.value : y.value);\n    }\n    // Logical OR operator. Returns True if either operand is True, \n    // Null if either operand is Null, otherwise False.\n    public static DBBool operator |(DBBool x, DBBool y)\n    {\n        return new DBBool(x.value &gt; y.value ? x.value : y.value);\n    }\n    // Definitely true operator. Returns true if the operand is True, false\n    // otherwise.\n    public static bool operator true(DBBool x)\n    {\n        return x.value &gt; 0;\n    }\n    // Definitely false operator. Returns true if the operand is False, false\n    // otherwise.\n    public static bool operator false(DBBool x)\n    {\n        return x.value &lt; 0;\n    }\n    public override bool Equals(object obj)\n    {\n        if (!(obj is DBBool)) return false;\n        return value == ((DBBool)obj).value;\n    }\n    public override int GetHashCode()\n    {\n        return value;\n    }\n    public override string ToString()\n    {\n        if (value &gt; 0) return &quot;DBBool.True&quot;;\n        if (value &lt; 0) return &quot;DBBool.False&quot;;\n        return &quot;DBBool.Null&quot;;\n    }\n}\n</code></pre><p> A type that overloads the <code>true</code> and <code>false</code> operators can be used for the controlling expression in <a href=\"if-else\" data-linktype=\"relative-path\">if</a>, <a href=\"do\" data-linktype=\"relative-path\">do</a>, <a href=\"while\" data-linktype=\"relative-path\">while</a>, and <a href=\"for\" data-linktype=\"relative-path\">for</a> statements and in <a href=\"../operators/conditional-operator\" data-linktype=\"relative-path\">conditional expressions</a>.  </p>\n<p> If a type defines operator <code>false</code>, it must also define operator <a href=\"true\" data-linktype=\"relative-path\">true</a>.  </p>\n<p> A type cannot directly overload the conditional logical operators <a href=\"../operators/conditional-and-operator\" data-linktype=\"relative-path\">&amp;&amp;</a> and <a href=\"../operators/conditional-or-operator\" data-linktype=\"relative-path\">&#124;&#124;</a>, but an equivalent effect can be achieved by overloading the regular logical operators and operators <code>true</code> and <code>false</code>.  </p>\n<h2 id=\"c-language-specification\">C# Language Specification</h2>\n<p>For more information, see the <a href=\"../language-specification\" data-linktype=\"relative-path\">C# Language Specification</a>. The language specification is the definitive source for C# syntax and usage.</p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"../../programming-guide/index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">C# Keywords</a><br> <a href=\"../operators/index\" data-linktype=\"relative-path\">C# Operators</a><br> <a href=\"true\" data-linktype=\"relative-path\">true</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"81a888fd-011e-4589-b242-6c261fea505e\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"21\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/false-operator.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/false-operator.md\">\r\n<meta name=\"document_id\" content=\"1dbf781a-4069-d41d-aeaf-70212a5bb449\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"false Operator (C# Reference) | Microsoft Docs","ms.assetid":"81a888fd-011e-4589-b242-6c261fea505e","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":21,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["false operator keyword [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/false-operator.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/false-operator.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/keywords/false-operator.md","document_id":"1dbf781a-4069-d41d-aeaf-70212a5bb449","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/false-operator","toc_asset_id":"articles/csharp/language-reference/keywords/toc.json","toc_rel":"toc.json","_op_ogTitle":"false Operator (C# Reference)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":738,"_op_rawTitle":"<h1 id=\"false-operator-c-reference\" sourcefile=\"docs/csharp/language-reference/keywords/false-operator.md\" sourcestartlinenumber=\"31\" sourceendlinenumber=\"31\">false Operator (C# Reference)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/false-operator","fileRelativePath":"articles/csharp/language-reference/keywords/false-operator.html"},"themesRelativePathToOutputRoot":"_themes/"}