{"content":"<div><div class=\"content\">\n<p>The <code>char</code> keyword is used to declare an instance of the <a class=\"xref\" href=\"../../../../api/system.char\" data-linktype=\"relative-path\">System.Char</a> structure that the .NET Framework uses to represent a Unicode character. The value of a <code>Char</code> object is a 16-bit numeric (ordinal) value.  </p>\n<p> Unicode characters are used to represent most of the written languages throughout the world.  </p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Range</th>\n<th>Size</th>\n<th>.NET Framework type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>char</code></td>\n<td>U+0000 to U+FFFF</td>\n<td>Unicode 16-bit character</td>\n<td><a class=\"xref\" href=\"../../../../api/system.char\" data-linktype=\"relative-path\">System.Char</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"literals\">Literals</h2>\n<p> Constants of the <code>char</code> type can be written as character literals, hexadecimal escape sequence, or Unicode representation. You can also cast the integral character codes. In the following example four <code>char</code> variables are initialized with the same character <code>X</code>:  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsTypes#19\">            char[] chars = new char[4];\n\n            chars[0] = &#39;X&#39;;        // Character literal\n            chars[1] = &#39;\\x0058&#39;;   // Hexadecimal\n            chars[2] = (char)88;   // Cast from integral type\n            chars[3] = &#39;\\u0058&#39;;   // Unicode\n\n            foreach (char c in chars)\n            {\n                Console.Write(c + &quot; &quot;);\n            }\n            // Output: X X X X\n</code></pre><h2 id=\"conversions\">Conversions</h2>\n<p> A <code>char</code> can be implicitly converted to <a href=\"ushort\" data-linktype=\"relative-path\">ushort</a>, <a href=\"int\" data-linktype=\"relative-path\">int</a>, <a href=\"uint\" data-linktype=\"relative-path\">uint</a>, <a href=\"long\" data-linktype=\"relative-path\">long</a>, <a href=\"ulong\" data-linktype=\"relative-path\">ulong</a>, <a href=\"float\" data-linktype=\"relative-path\">float</a>, <a href=\"double\" data-linktype=\"relative-path\">double</a>, or <a href=\"decimal\" data-linktype=\"relative-path\">decimal</a>. However, there are no implicit conversions from other types to the <code>char</code> type.  </p>\n<p> The <a class=\"xref\" href=\"../../../../api/system.char\" data-linktype=\"relative-path\">System.Char</a> type provides several static methods for working with <code>char</code> values.  </p>\n<h2 id=\"c-language-specification\">C# Language Specification</h2>\n<p> For more information, see the <a href=\"../language-specification\" data-linktype=\"relative-path\">C# Language Specification</a>. The language specification is the definitive source for C# syntax and usage.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../api/system.char\" data-linktype=\"relative-path\">Char</a><br> <a href=\"../index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"../../programming-guide/index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">C# Keywords</a><br> <a href=\"integral-types-table\" data-linktype=\"relative-path\">Integral Types Table</a><br> <a href=\"built-in-types-table\" data-linktype=\"relative-path\">Built-In Types Table</a><br> <a href=\"implicit-numeric-conversions-table\" data-linktype=\"relative-path\">Implicit Numeric Conversions Table</a><br> <a href=\"explicit-numeric-conversions-table\" data-linktype=\"relative-path\">Explicit Numeric Conversions Table</a><br> <a href=\"../../programming-guide/nullable-types/index\" data-linktype=\"relative-path\">Nullable Types</a><br> <a href=\"../../programming-guide/strings/index\" data-linktype=\"relative-path\">Strings</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"b51cf4fb-124c-4067-af48-afbac122b228\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"27\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/char.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/char.md\">\r\n<meta name=\"document_id\" content=\"7fe35e15-8053-30d2-54cd-dd82dbf48cf6\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"char (C# Reference) | Microsoft Docs","ms.assetid":"b51cf4fb-124c-4067-af48-afbac122b228","f1_keywords":["char","char_CSharpKeyword"],"translation.priority.ht":["de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","ru-ru","zh-cn","zh-tw"],"caps.latest.revision":27,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["char data type [C#]"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/char.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/char.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/keywords/char.md","document_id":"7fe35e15-8053-30d2-54cd-dd82dbf48cf6","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/char","toc_asset_id":"articles/csharp/language-reference/keywords/toc.json","toc_rel":"toc.json","_op_ogTitle":"char (C# Reference)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":237,"_op_rawTitle":"<h1 id=\"char-c-reference\" sourcefile=\"docs/csharp/language-reference/keywords/char.md\" sourcestartlinenumber=\"35\" sourceendlinenumber=\"35\">char (C# Reference)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/char","fileRelativePath":"articles/csharp/language-reference/keywords/char.html"},"themesRelativePathToOutputRoot":"_themes/"}