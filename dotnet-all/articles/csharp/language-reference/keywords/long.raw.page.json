{"content":"<div><div class=\"content\">\n<p>The <code>long</code> keyword denotes an integral type that stores values according to the size and range shown in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Range</th>\n<th>Size</th>\n<th>.NET Framework type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>long</code></td>\n<td>â€“9,223,372,036,854,775,808 to 9,223,372,036,854,775,807</td>\n<td>Signed 64-bit integer</td>\n<td><a class=\"xref\" href=\"../../../../api/system.int64\" data-linktype=\"relative-path\">System.Int64</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"literals\">Literals</h2>\n<p> You can declare and initialize a <code>long</code> variable like this example:  </p>\n<pre class=\"loading\"><code>\nlong long1 = 4294967296;  \n</code></pre><p> When an integer literal has no suffix, its type is the first of these types in which its value can be represented: <a href=\"int\" data-linktype=\"relative-path\">int</a>, <a href=\"uint\" data-linktype=\"relative-path\">uint</a>, <code>long</code>, <a href=\"ulong\" data-linktype=\"relative-path\">ulong</a>. In the preceding example, it is of the type <code>long</code> because it exceeds the range of <a href=\"uint\" data-linktype=\"relative-path\">uint</a> (see <a href=\"integral-types-table\" data-linktype=\"relative-path\">Integral Types Table</a> for the storage sizes of integral types).  </p>\n<p> You can also use the suffix L with the <code>long</code> type like this:  </p>\n<pre class=\"loading\"><code>\nlong long2 = 4294967296L;  \n</code></pre><p> When you use the suffix L, the type of the literal integer is determined to be either <code>long</code> or <a href=\"ulong\" data-linktype=\"relative-path\">ulong</a> according to its size. In the case it is <code>long</code> because it less than the range of <a href=\"ulong\" data-linktype=\"relative-path\">ulong</a>.  </p>\n<p> A common use of the suffix is with calling overloaded methods. Consider, for example, the following overloaded methods that use <code>long</code> and <a href=\"int\" data-linktype=\"relative-path\">int</a> parameters:  </p>\n<pre class=\"loading\"><code>public static void SampleMethod(int i) {}  \npublic static void SampleMethod(long l) {}  \n</code></pre><p> Using the suffix L guarantees that the correct type is called, for example:  </p>\n<pre class=\"loading\"><code>SampleMethod(5);    // Calling the method with the int parameter  \nSampleMethod(5L);   // Calling the method with the long parameter  \n</code></pre><p> You can use the <code>long</code> type with other numeric integral types in the same expression, in which case the expression is evaluated as <code>long</code> (or <a href=\"bool\" data-linktype=\"relative-path\">bool</a> in the case of relational or Boolean expressions). For example, the following expression evaluates as <code>long</code>:  </p>\n<pre class=\"loading\"><code>898L + 88  \n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> You can also use the lowercase letter &quot;l&quot; as a suffix. However, this generates a compiler warning because the letter &quot;l&quot; is easily confused with the digit &quot;1.&quot; Use &quot;L&quot; for clarity.  </p>\n</div>\n<p> For information on arithmetic expressions with mixed floating-point types and integral types, see <a href=\"float\" data-linktype=\"relative-path\">float</a> and <a href=\"double\" data-linktype=\"relative-path\">double</a>.  </p>\n<h2 id=\"conversions\">Conversions</h2>\n<p> There is a predefined implicit conversion from <code>long</code> to <a href=\"float\" data-linktype=\"relative-path\">float</a>, <a href=\"double\" data-linktype=\"relative-path\">double</a>, or <a href=\"decimal\" data-linktype=\"relative-path\">decimal</a>. Otherwise a cast must be used. For example, the following statement will produce a compilation error without an explicit cast:  </p>\n<pre class=\"loading\"><code>int x = 8L;        // Error: no implicit conversion from long to int  \nint x = (int)8L;   // OK: explicit conversion to int  \n</code></pre><p> There is a predefined implicit conversion from <a href=\"sbyte\" data-linktype=\"relative-path\">sbyte</a>, <a href=\"byte\" data-linktype=\"relative-path\">byte</a>, <a href=\"short\" data-linktype=\"relative-path\">short</a>, <a href=\"ushort\" data-linktype=\"relative-path\">ushort</a>, <a href=\"int\" data-linktype=\"relative-path\">int</a>, <a href=\"uint\" data-linktype=\"relative-path\">uint</a>, or <a href=\"char\" data-linktype=\"relative-path\">char</a> to <code>long</code>.  </p>\n<p> Notice also that there is no implicit conversion from floating-point types to <code>long</code>. For example, the following statement generates a compiler error unless an explicit cast is used:  </p>\n<pre class=\"loading\"><code>\n      long x = 3.0;         // Error: no implicit conversion from double  \nlong y = (long)3.0;   // OK: explicit conversion  \n</code></pre><h2 id=\"c-language-specification\">C# Language Specification</h2>\n<p> For more information, see the <a href=\"../language-specification\" data-linktype=\"relative-path\">C# Language Specification</a>. The language specification is the definitive source for C# syntax and usage.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../api/system.int64\" data-linktype=\"relative-path\">Int64</a><br> <a href=\"../index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"../../programming-guide/index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">C# Keywords</a><br> <a href=\"integral-types-table\" data-linktype=\"relative-path\">Integral Types Table</a><br> <a href=\"built-in-types-table\" data-linktype=\"relative-path\">Built-In Types Table</a><br> <a href=\"implicit-numeric-conversions-table\" data-linktype=\"relative-path\">Implicit Numeric Conversions Table</a><br> <a href=\"explicit-numeric-conversions-table\" data-linktype=\"relative-path\">Explicit Numeric Conversions Table</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"f9b24319-1f39-48be-a42b-d528ee28a7fd\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"17\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/long.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/long.md\">\r\n<meta name=\"document_id\" content=\"51b8f8b1-2fe2-e0d1-ed84-5ce64b958d25\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"long (C# Reference) | Microsoft Docs","ms.assetid":"f9b24319-1f39-48be-a42b-d528ee28a7fd","f1_keywords":["long_CSharpKeyword","long"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":17,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["long keyword [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/long.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/long.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/keywords/long.md","document_id":"51b8f8b1-2fe2-e0d1-ed84-5ce64b958d25","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/long","toc_asset_id":"articles/csharp/language-reference/keywords/toc.json","toc_rel":"toc.json","_op_ogTitle":"long (C# Reference)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":487,"_op_rawTitle":"<h1 id=\"long-c-reference\" sourcefile=\"docs/csharp/language-reference/keywords/long.md\" sourcestartlinenumber=\"34\" sourceendlinenumber=\"34\">long (C# Reference)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/long","fileRelativePath":"articles/csharp/language-reference/keywords/long.html"},"themesRelativePathToOutputRoot":"_themes/"}