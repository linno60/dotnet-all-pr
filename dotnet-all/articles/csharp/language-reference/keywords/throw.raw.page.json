{"content":"<div><div class=\"content\">\n<p>Signals the occurrence of an exception during program execution.  </p>\n<h2 id=\"remarks\">Remarks</h2>\n<p>The syntax of <code>throw</code> is:</p>\n<pre class=\"loading\"><code class=\"lang-cs\">throw [e]\n</code></pre><p>where <code>e</code> is an instance of a class derived from <a class=\"xref\" href=\"../../../../api/system.exception\" data-linktype=\"relative-path\">System.Exception</a>. The following example uses the <code>throw</code> statement to throw an <a class=\"xref\" href=\"../../../../api/system.indexoutofrangeexception\" data-linktype=\"relative-path\">IndexOutOfRangeException</a> if the argument passed to a method named <code>GetNumber</code> does not correspond to a valid index of an internal array.</p>\n<pre><code class=\"lang-cs\" name=\"csrefKeyword#1\">using System;\n\npublic class NumberGenerator\n{\n   int[] numbers = { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20 };\n   \n   public int GetNumber(int index)\n   {\n      if (index &lt; 0 || index &gt;= numbers.Length) {\n         throw new IndexOutOfRangeException();\n      }\n      return numbers[index];\n   }\n}\n</code></pre><p>Method callers then use a <code>try-catch</code> or <code>try-catch-finally</code> block to handle the thrown exception. The following example handles the exception thrown by the <code>GetNumber</code> method.</p>\n<pre><code class=\"lang-cs\" name=\"csrefKeyword#2\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var gen = new NumberGenerator();\n      int index = 10;\n      try {\n          int value = gen.GetNumber(index);\n          Console.WriteLine($&quot;Retrieved {value}&quot;);\n      }\n      catch (IndexOutOfRangeException e) \n      {\n         Console.WriteLine($&quot;{e.GetType().Name}: {index} is outside the bounds of the array&quot;);\n      }\n   }\n}\n// The example displays the following output:\n//        IndexOutOfRangeException: 10 is outside the bounds of the array\n</code></pre><h2 id=\"re-throwing-an-exception\">Re-throwing an exception</h2>\n<p><code>throw</code> can also be used in a <code>catch</code> block to re-throw an exception handled in a <code>catch</code> block.  In this case, <code>throw</code> does not take an exception operand. It is most useful when a method passes on an argument from a caller to some other library method, and the library method throws an exception that must be passed on to the caller. For example, the following example re-throws an <a class=\"xref\" href=\"../../../../api/system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> that is thrown when attempting to retrieve the first character of an uninitialized string. </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeyword#3\">using System;\n\npublic class Sentence\n{\n   public Sentence(string s)\n   {\n      Value = s;\n   }\n\n   public string Value { get; set; }\n\n   public char GetFirstCharacter()\n   {\n      try {\n         return Value[0];\n        }\n      catch (NullReferenceException e) {\n         throw;   \n      } \n   }\n}\n\npublic class Example \n{\n   public static void Main()\n   {\n      var s = new Sentence(null);\n      Console.WriteLine($&quot;The first character is {s.GetFirstCharacter()}&quot;);\n   }\n}\n// The example displays the following output:\n//    Unhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.\n//       at Sentence.GetFirstCharacter()\n//       at Example.Main()\n</code></pre><div class=\"IMPORTANT\"><h5>Important</h5><p>You can also use the <code>throw e</code> syntax in a <code>catch</code> block to instantiate a new exception that you pass on to the caller. In this case, the stack trace of the original exception, which is available from the @System.Exception.Stacktrace property, is not preserved.</p>\n</div>\n<h2 id=\"the-throw-expression\">The <code>throw</code> expression</h2>\n<p>Starting with C# 7, <code>throw</code> can be used as an expression as well as a statement. This allows an exception to be thrown in contexts that were previously unsupported. These include:</p>\n<ul>\n<li><p><a href=\"../operators/conditional-operator\" data-linktype=\"relative-path\">the conditional operator</a>. The following example uses a <code>throw</code> expression to throw an <a class=\"xref\" href=\"../../../../api/system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> if a method is passed an empty string array. Before C# 7, this logic would need to appear in an <code>if</code>/<code>else</code> statement.</p>\n<pre><code class=\"lang-cs\" name=\"csrefKeyword#4\">private static void DisplayFirstNumber(string[] args)\n{\n   string arg = args.Length &gt;= 1 ? args[0] : \n                              throw new ArgumentException(&quot;You must supply an argument&quot;);\n   if (Int64.TryParse(arg, out var number))\n      Console.WriteLine($&quot;You entered {number:F0}&quot;);\n   else\n      Console.WriteLine($&quot;{arg} is not a number.&quot;);                            \n  \n}\n</code></pre></li>\n<li><p><a href=\"../operators/null-conditional-operator\" data-linktype=\"relative-path\">the null-coalescing operator</a>. In the following example, a <code>throw</code> expression is used with a null-coalescing operator to throw an exception if the string assigned to a <code>Name</code> property is <code>null</code>.</p>\n<pre><code class=\"lang-cs\" name=\"csrefKeyword#5\">public string Name\n{\n    get =&gt; name;\n    set =&gt; name = value ?? \n        throw new ArgumentNullException(&quot;Name cannot be null&quot;, nameof(value));\n}   \n</code></pre></li>\n<li><p>an expression-bodied <a href=\"../../lambda-expressions\" data-linktype=\"relative-path\">lambda</a> or method. The following example illustrates an expression-bodied method that throws an <a class=\"xref\" href=\"../../../../api/system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a> because a conversion to a <a class=\"xref\" href=\"../../../../api/system.datetime\" data-linktype=\"relative-path\">DateTime</a> value is not supported.</p>\n<pre><code class=\"lang-cs\" name=\"csrefKeyword#6\">DateTime ToDateTime(IFormatProvider provider) =&gt; \n         throw new InvalidCastException(&quot;Conversion to a DateTime is not supported.&quot;);\n</code></pre></li>\n</ul>\n<h2 id=\"c-language-specification\">C# Language Specification</h2>\n<p> For more information, see the <a href=\"../language-specification\" data-linktype=\"relative-path\">C# Language Specification</a>. The language specification is the definitive source for C# syntax and usage.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"../../programming-guide/index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"try-catch\" data-linktype=\"relative-path\">try-catch</a><br> <a href=\"try-catch\" data-linktype=\"relative-path\">The try, catch, and throw Statements in C++</a><br> <a href=\"index\" data-linktype=\"relative-path\">C# Keywords</a><br> <a href=\"exception-handling-statements\" data-linktype=\"relative-path\">Exception Handling Statements</a><br> <a href=\"https://msdn.microsoft.com/library/xhcbs8fz\" data-linktype=\"external\">How to: Explicitly Throw Exceptions</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"rpetrusha\">\r\n<meta name=\"ms.author\" content=\"ronpet\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"5ac4feef-4b1a-4c61-aeb4-61d549e5dd42\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"22\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-03-02\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/e99226272196c1e669f952ec6d3fe65e4b59be9c/docs/csharp/language-reference/keywords/throw.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/throw.md\">\r\n<meta name=\"document_id\" content=\"60e7d90a-eda7-0cb7-639b-51b9f2610ded\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"rpetrusha","ms.author":"ronpet","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"throw (C# Reference) | Microsoft Docs","ms.assetid":"5ac4feef-4b1a-4c61-aeb4-61d549e5dd42","f1_keywords":["throw","throw_CSharpKeyword"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":22,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["throw statement [C#]","throw expression [C#]","throw keyword [C#]"],"ms.date":"2015-03-02","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"rpetrusha","author_email":"ronpet@microsoft.com","committer_name":"rpetrusha","comitter_email":"ronpet@microsoft.com","message":"C# 7 revision of throw","commit_sha":"e99226272196c1e669f952ec6d3fe65e4b59be9c","commit_date":"2017-03-01 13:17:24 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/rpetrusha","display_name":"rpetrusha","id":"10886961"},"contributors":[{"profile_url":"https://github.com/rpetrusha","display_name":"rpetrusha"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/e99226272196c1e669f952ec6d3fe65e4b59be9c/docs/csharp/language-reference/keywords/throw.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/throw.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/keywords/throw.md","document_id":"60e7d90a-eda7-0cb7-639b-51b9f2610ded","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/throw","toc_asset_id":"articles/csharp/language-reference/keywords/toc.json","toc_rel":"toc.json","_op_ogTitle":"throw (C# Reference)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":644,"_op_rawTitle":"<h1 id=\"throw-c-reference\" sourcefile=\"docs/csharp/language-reference/keywords/throw.md\" sourcestartlinenumber=\"36\" sourceendlinenumber=\"36\">throw (C# Reference)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/throw","fileRelativePath":"articles/csharp/language-reference/keywords/throw.html"},"themesRelativePathToOutputRoot":"_themes/"}