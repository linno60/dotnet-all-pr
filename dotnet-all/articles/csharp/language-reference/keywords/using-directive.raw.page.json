{"content":"<div><div class=\"content\">\n<p>The <code>using</code> directive has three uses:  </p>\n<ul>\n<li><p>To allow the use of types in a namespace so that you do not have to qualify the use of a type in that namespace:  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">using System.Text;  \n</code></pre></li>\n<li><p>To allow you to access static members of a type without having to qualify the access with the type name. </p>\n<pre class=\"loading\"><code class=\"lang-cs\">using static System.Math;  \n</code></pre><p>For more information, see the <a href=\"using-static\" data-linktype=\"relative-path\">using static directive</a>.</p>\n</li>\n<li><p>To create an alias for a namespace or a type. This is called a <em>using alias directive</em>.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">using Project = PC.MyCompany.Project;  \n</code></pre><p>The <code>using</code> keyword is also used to create <em>using statements</em>, which help ensure that <a class=\"xref\" href=\"../../../../api/system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> objects such as files and fonts are handled correctly. See <a href=\"using-statement\" data-linktype=\"relative-path\">using Statement</a> for more information.  </p>\n</li>\n</ul>\n<h2 id=\"using-static-type\">Using Static Type</h2>\n<p> You can access static members of a type without having to qualify the access with the type name:  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">using static System.Console;   \nusing static System.Math;  \nclass Program   \n{   \n    static void Main()   \n    {   \n        WriteLine(Sqrt(3*3 + 4*4));   \n    }   \n}  \n</code></pre><h2 id=\"remarks\">Remarks</h2>\n<p> The scope of a <code>using</code> directive is limited to the file in which it appears.  </p>\n<p> Create a <code>using</code> alias to make it easier to qualify an identifier to a namespace or type. The right side of a using alias directive must always be a fully-qualified type regardless of the using directives that come before it.  </p>\n<p> Create a <code>using</code> directive to use the types in a namespace without having to specify the namespace. A <code>using</code> directive does not give you access to any namespaces that are nested in the namespace you specify.  </p>\n<p> Namespaces come in two categories: user-defined and system-defined. User-defined namespaces are namespaces defined in your code. For a list of the system-defined namespaces, see <a href=\"http://go.microsoft.com/fwlink/?LinkID=227195\" data-linktype=\"external\">.NET Framework Class Library</a>.  </p>\n<p> For examples on referencing methods in other assemblies, see <a href=\"http://msdn.microsoft.com/library/70f65026-3687-4e9c-ab79-c18b97dd8be4\" data-linktype=\"external\">Creating and Using C# DLLs</a>.  </p>\n<h2 id=\"example-1\">Example 1</h2>\n<p> The following example shows how to define and use a <code>using</code> alias for a namespace:  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsNamespace#8\">namespace PC\n{\n    // Define an alias for the nested namespace.\n    using Project = PC.MyCompany.Project;\n    class A\n    {\n        void M()\n        {\n            // Use the alias\n            Project.MyClass mc = new Project.MyClass();\n        }\n    }\n    namespace MyCompany\n    {\n        namespace Project\n        {\n            public class MyClass { }\n        }\n    }\n}\n</code></pre><p> A using alias directive cannot have an open generic type on the right hand side. For example, you cannot create a using alias for a List&lt;T&gt;, but you can create one for a List&lt;int&gt;.  </p>\n<h2 id=\"example-2\">Example 2</h2>\n<p> The following example shows how to define a <code>using</code> directive and a <code>using</code> alias for a class:  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsNamespace#9\">using System;\n\n// Using alias directive for a class.\nusing AliasToMyClass = NameSpace1.MyClass;\n\n// Using alias directive for a generic class.\nusing UsingAlias = NameSpace2.MyClass&lt;int&gt;;\n\nnamespace NameSpace1\n{\n    public class MyClass\n    {\n        public override string ToString()\n        {\n            return &quot;You are in NameSpace1.MyClass.&quot;;\n        }\n    }\n\n}\n\nnamespace NameSpace2\n{\n    class MyClass&lt;T&gt;\n    {\n        public override string ToString()\n        {\n            return &quot;You are in NameSpace2.MyClass.&quot;;\n        }\n    }\n}\n\nnamespace NameSpace3\n{\n    // Using directive:\n    using NameSpace1;\n    // Using directive:\n    using NameSpace2;\n\n    class MainClass\n    {\n        static void Main()\n        {\n            AliasToMyClass instance1 = new AliasToMyClass();\n            Console.WriteLine(instance1);\n\n            UsingAlias instance2 = new UsingAlias();\n            Console.WriteLine(instance2);\n\n        }\n    }\n}\n// Output: \n//    You are in NameSpace1.MyClass.\n//    You are in NameSpace2.MyClass.\n</code></pre><h2 id=\"c-language-specification\">C# Language Specification</h2>\n<p> For more information, see the <a href=\"../language-specification\" data-linktype=\"relative-path\">C# Language Specification</a>. The language specification is the definitive source for C# syntax and usage.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"../../programming-guide/index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"../../programming-guide/namespaces/using-namespaces\" data-linktype=\"relative-path\">Using Namespaces</a><br> <a href=\"index\" data-linktype=\"relative-path\">C# Keywords</a><br> <a href=\"namespace-keywords\" data-linktype=\"relative-path\">Namespace Keywords</a><br> <a href=\"../../programming-guide/namespaces/index\" data-linktype=\"relative-path\">Namespaces</a><br> <a href=\"using-statement\" data-linktype=\"relative-path\">using Statement</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"b42b8e61-5e7e-439c-bb71-370094b44ae8\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"31\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/169498eabf60039261f10f6cda4127baa46fa094/docs/csharp/language-reference/keywords/using-directive.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/using-directive.md\">\r\n<meta name=\"document_id\" content=\"8959fe27-ffd9-3615-7fb2-7de2ea3b5ee3\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"using Directive (C# Reference) | Microsoft Docs","ms.assetid":"b42b8e61-5e7e-439c-bb71-370094b44ae8","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":31,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["using directive [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"rpetrusha","author_email":"ronpet@microsoft.com","committer_name":"rpetrusha","comitter_email":"ronpet@microsoft.com","message":"Added 'using static' directive","commit_sha":"169498eabf60039261f10f6cda4127baa46fa094","commit_date":"2017-03-08 13:58:38 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/rpetrusha","display_name":"rpetrusha","id":"10886961"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/169498eabf60039261f10f6cda4127baa46fa094/docs/csharp/language-reference/keywords/using-directive.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/using-directive.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/keywords/using-directive.md","document_id":"8959fe27-ffd9-3615-7fb2-7de2ea3b5ee3","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/keywords/using-directive","toc_asset_id":"articles/csharp/language-reference/keywords/toc.json","toc_rel":"toc.json","_op_ogTitle":"using Directive (C# Reference)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":553,"_op_rawTitle":"<h1 id=\"using-directive-c-reference\" sourcefile=\"docs/csharp/language-reference/keywords/using-directive.md\" sourcestartlinenumber=\"31\" sourceendlinenumber=\"31\">using Directive (C# Reference)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/keywords/using-directive","fileRelativePath":"articles/csharp/language-reference/keywords/using-directive.html"},"themesRelativePathToOutputRoot":"_themes/"}