{"content":"<div><div class=\"content\">\n<p>The <code>explicit</code> keyword declares a user-defined type conversion operator that must be invoked with a cast. For example, this operator converts from a class called Fahrenheit to a class called Celsius:  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsConversion#2\">        // Must be defined inside a class called Fahrenheit:\n        public static explicit operator Celsius(Fahrenheit fahr)\n        {\n            return new Celsius((5.0f / 9.0f) * (fahr.degrees - 32));\n        }\n</code></pre><p> This conversion operator can be invoked like this:  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsConversion#3\">            Fahrenheit fahr = new Fahrenheit(100.0f);\n            Console.Write(&quot;{0} Fahrenheit&quot;, fahr.Degrees);\n            Celsius c = (Celsius)fahr;\n</code></pre><p> The conversion operator converts from a source type to a target type. The source type provides the conversion operator. Unlike implicit conversion, explicit conversion operators must be invoked by means of a cast. If a conversion operation can cause exceptions or lose information, you should mark it <code>explicit</code>. This prevents the compiler from silently invoking the conversion operation with possibly unforeseen consequences.  </p>\n<p> Omitting the cast results in compile-time error CS0266.  </p>\n<p> For more information, see <a href=\"../../programming-guide/statements-expressions-operators/using-conversion-operators\" data-linktype=\"relative-path\">Using Conversion Operators</a>.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following example provides a <code>Fahrenheit</code> and a <code>Celsius</code> class, each of which provides an explicit conversion operator to the other class.  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsConversion#1\">    \n    class Celsius\n    {\n        public Celsius(float temp)\n        {\n            degrees = temp;\n        }\n        public static explicit operator Fahrenheit(Celsius c)\n        {\n            return new Fahrenheit((9.0f / 5.0f) * c.degrees + 32);\n        }\n        public float Degrees\n        {\n            get { return degrees; }\n        }\n        private float degrees;\n    }\n\n    class Fahrenheit\n    {\n        public Fahrenheit(float temp)\n        {\n            degrees = temp;\n        }\n        // Must be defined inside a class called Fahrenheit:\n        public static explicit operator Celsius(Fahrenheit fahr)\n        {\n            return new Celsius((5.0f / 9.0f) * (fahr.degrees - 32));\n        }\n        public float Degrees\n        {\n            get { return degrees; }\n        }\n        private float degrees;\n    }\n\n    class MainClass\n    {\n        static void Main()\n        {\n            Fahrenheit fahr = new Fahrenheit(100.0f);\n            Console.Write(&quot;{0} Fahrenheit&quot;, fahr.Degrees);\n            Celsius c = (Celsius)fahr;\n\n            Console.Write(&quot; = {0} Celsius&quot;, c.Degrees);\n            Fahrenheit fahr2 = (Fahrenheit)c;\n            Console.WriteLine(&quot; = {0} Fahrenheit&quot;, fahr2.Degrees);\n        }\n    }\n    // Output:\n    // 100 Fahrenheit = 37.77778 Celsius = 100 Fahrenheit\n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> The following example defines a struct, <code>Digit</code>, that represents a single decimal digit. An operator is defined for conversions from <code>byte</code> to <code>Digit</code>, but because not all bytes can be converted to a <code>Digit</code>, the conversion is explicit.  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsConversion#4\">    struct Digit\n    {\n        byte value;\n        public Digit(byte value)\n        {\n            if (value &gt; 9)\n            {\n                throw new ArgumentException();\n            }\n            this.value = value;\n        }\n\n        // Define explicit byte-to-Digit conversion operator:\n        public static explicit operator Digit(byte b)\n        {\n            Digit d = new Digit(b);\n            Console.WriteLine(&quot;conversion occurred&quot;);\n            return d;\n        }\n    }\n\n    class ExplicitTest\n    {\n        static void Main()\n        {\n            try\n            {\n                byte b = 3;\n                Digit d = (Digit)b; // explicit conversion\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(&quot;{0} Exception caught.&quot;, e);\n            }\n        }\n    }\n    /*\n    Output:\n    conversion occurred\n    */\n</code></pre><h2 id=\"c-language-specification\">C# Language Specification</h2>\n<p> For more information, see the <a href=\"../language-specification\" data-linktype=\"relative-path\">C# Language Specification</a>. The language specification is the definitive source for C# syntax and usage.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"../../programming-guide/index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">C# Keywords</a><br> <a href=\"implicit\" data-linktype=\"relative-path\">implicit</a><br> <a href=\"operator\" data-linktype=\"relative-path\">operator (C# Reference)</a><br> <a href=\"../../programming-guide/statements-expressions-operators/how-to-implement-user-defined-conversions-between-structs\" data-linktype=\"relative-path\">How to: Implement User-Defined Conversions Between Structs</a><br> <a href=\"http://go.microsoft.com/fwlink/?LinkId=112384\" data-linktype=\"external\">Chained user-defined explicit conversions in C#</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"cfb8f42a-e411-4db2-af9b-796b05644846\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"21\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/explicit.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/explicit.md\">\r\n<meta name=\"document_id\" content=\"46486272-34fb-e72a-5ea9-ed69721abd19\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"explicit (C# Reference) | Microsoft Docs","ms.assetid":"cfb8f42a-e411-4db2-af9b-796b05644846","f1_keywords":["explicit_CSharpKeyword","explicit"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":21,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["explicit keyword [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/explicit.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/explicit.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/keywords/explicit.md","document_id":"46486272-34fb-e72a-5ea9-ed69721abd19","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/explicit","toc_asset_id":"articles/csharp/language-reference/keywords/toc.json","toc_rel":"toc.json","_op_ogTitle":"explicit (C# Reference)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":487,"_op_rawTitle":"<h1 id=\"explicit-c-reference\" sourcefile=\"docs/csharp/language-reference/keywords/explicit.md\" sourcestartlinenumber=\"34\" sourceendlinenumber=\"34\">explicit (C# Reference)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/explicit","fileRelativePath":"articles/csharp/language-reference/keywords/explicit.html"},"themesRelativePathToOutputRoot":"_themes/"}