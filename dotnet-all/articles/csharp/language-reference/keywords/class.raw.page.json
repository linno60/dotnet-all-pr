{"content":"<div><div class=\"content\">\n<p>Classes are declared using the keyword <code>class</code>, as shown in the following example:  </p>\n<pre class=\"loading\"><code>\n      class TestClass  \n{  \n    // Methods, properties, fields, events, delegates   \n    // and nested classes go here.  \n}  \n</code></pre><h2 id=\"remarks\">Remarks</h2>\n<p> Only single inheritance is allowed in C#. In other words, a class can inherit implementation from one base class only. However, a class can implement more than one interface. The following table shows examples of class inheritance and interface implementation:  </p>\n<table>\n<thead>\n<tr>\n<th>Inheritance</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>None</td>\n<td><code>class ClassA { }</code></td>\n</tr>\n<tr>\n<td>Single</td>\n<td><code>class DerivedClass: BaseClass { }</code></td>\n</tr>\n<tr>\n<td>None, implements two interfaces</td>\n<td><code>class ImplClass: IFace1, IFace2 { }</code></td>\n</tr>\n<tr>\n<td>Single, implements one interface</td>\n<td><code>class ImplDerivedClass: BaseClass, IFace1 { }</code></td>\n</tr>\n</tbody>\n</table>\n<p> Classes that you declare directly within a namespace, not nested within other classes, can be either <a href=\"public\" data-linktype=\"relative-path\">public</a> or <a href=\"internal\" data-linktype=\"relative-path\">internal</a>. Classes are <code>internal</code> by default.  </p>\n<p> Class members, including nested classes, can be <a href=\"public\" data-linktype=\"relative-path\">public</a>, <code>protected internal</code>, <a href=\"protected\" data-linktype=\"relative-path\">protected</a>, <a href=\"internal\" data-linktype=\"relative-path\">internal</a>, or <a href=\"private\" data-linktype=\"relative-path\">private</a>. Members are <a href=\"private\" data-linktype=\"relative-path\">private</a> by default.  </p>\n<p> For more information, see <a href=\"../../programming-guide/classes-and-structs/access-modifiers\" data-linktype=\"relative-path\">Access Modifiers</a>.  </p>\n<p> You can declare generic classes that have type parameters. For more information, see <a href=\"../../programming-guide/generics/generic-classes\" data-linktype=\"relative-path\">Generic Classes</a>.  </p>\n<p> A class can contain declarations of the following members:  </p>\n<ul>\n<li><p><a href=\"../../programming-guide/classes-and-structs/constructors\" data-linktype=\"relative-path\">Constructors</a>  </p>\n</li>\n<li><p><a href=\"../../programming-guide/classes-and-structs/destructors\" data-linktype=\"relative-path\">Destructors</a>  </p>\n</li>\n<li><p><a href=\"../../programming-guide/classes-and-structs/constants\" data-linktype=\"relative-path\">Constants</a>  </p>\n</li>\n<li><p><a href=\"../../programming-guide/classes-and-structs/fields\" data-linktype=\"relative-path\">Fields</a>  </p>\n</li>\n<li><p><a href=\"../../programming-guide/classes-and-structs/methods\" data-linktype=\"relative-path\">Methods</a>  </p>\n</li>\n<li><p><a href=\"../../programming-guide/classes-and-structs/properties\" data-linktype=\"relative-path\">Properties</a>  </p>\n</li>\n<li><p><a href=\"../../programming-guide/indexers/index\" data-linktype=\"relative-path\">Indexers</a>  </p>\n</li>\n<li><p><a href=\"../../programming-guide/statements-expressions-operators/operators\" data-linktype=\"relative-path\">Operators</a>  </p>\n</li>\n<li><p><a href=\"../../programming-guide/events/index\" data-linktype=\"relative-path\">Events</a>  </p>\n</li>\n<li><p><a href=\"../../programming-guide/delegates/index\" data-linktype=\"relative-path\">Delegates</a>  </p>\n</li>\n<li><p><a href=\"../../programming-guide/classes-and-structs/classes\" data-linktype=\"relative-path\">Classes</a>  </p>\n</li>\n<li><p><a href=\"../../programming-guide/interfaces/index\" data-linktype=\"relative-path\">Interfaces</a>  </p>\n</li>\n<li><p><a href=\"../../programming-guide/classes-and-structs/structs\" data-linktype=\"relative-path\">Structs</a>  </p>\n</li>\n</ul>\n<h2 id=\"example\">Example</h2>\n<p> The following example demonstrates declaring class fields, constructors, and methods. It also demonstrates object instantiation and printing instance data. In this example, two classes are declared, the <code>Child</code> class, which contains two private fields (<code>name</code> and <code>age</code>) and two public methods. The second class, <code>StringTest</code>, is used to contain <code>Main</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsTypes#5\">    class Child\n    {\n        private int age;\n        private string name;\n\n        // Default constructor:\n        public Child()\n        {\n            name = &quot;N/A&quot;;\n        }\n\n        // Constructor:\n        public Child(string name, int age)\n        {\n            this.name = name;\n            this.age = age;\n        }\n\n        // Printing method:\n        public void PrintChild()\n        {\n            Console.WriteLine(&quot;{0}, {1} years old.&quot;, name, age);\n        }\n    }\n\n    class StringTest\n    {\n        static void Main()\n        {\n            // Create objects by using the new operator:\n            Child child1 = new Child(&quot;Craig&quot;, 11);\n            Child child2 = new Child(&quot;Sally&quot;, 10);\n\n            // Create an object using the default constructor:\n            Child child3 = new Child();\n\n            // Display results:\n            Console.Write(&quot;Child #1: &quot;);\n            child1.PrintChild();\n            Console.Write(&quot;Child #2: &quot;);\n            child2.PrintChild();\n            Console.Write(&quot;Child #3: &quot;);\n            child3.PrintChild();\n        }\n    }\n    /* Output:\n        Child #1: Craig, 11 years old.\n        Child #2: Sally, 10 years old.\n        Child #3: N/A, 0 years old.\n    */\n</code></pre><h2 id=\"comments\">Comments</h2>\n<p> Notice, in the preceding example, that the private fields (<code>name</code> and <code>age</code>) can only be accessed through the public methods of the <code>Child</code> class. For example, you cannot print the child&#39;s name, from the <code>Main</code> method, using a statement like this:  </p>\n<pre class=\"loading\"><code>Console.Write(child1.name);   // Error  \n</code></pre><p> Accessing private members of <code>Child</code> from <code>Main</code> would only be possible if <code>Main</code> were a member of the class.  </p>\n<p> Types declared inside a class without an access modifier default to <code>private</code>, so the data members in this example would still be <code>private</code> if the keyword were removed.  </p>\n<p> Finally, notice that for the object created using the default constructor (<code>child3</code>), the age field was initialized to zero by default.  </p>\n<h2 id=\"c-language-specification\">C# Language Specification</h2>\n<p> For more information, see the <a href=\"../language-specification\" data-linktype=\"relative-path\">C# Language Specification</a>. The language specification is the definitive source for C# syntax and usage.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"../../programming-guide/index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">C# Keywords</a><br> <a href=\"reference-types\" data-linktype=\"relative-path\">Reference Types</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-all/api/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"b95d8815-de18-4c3f-a8cc-a0a53bdf8690\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"30\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/class.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/class.md\">\r\n<meta name=\"document_id\" content=\"1afb5e7e-18f0-20d2-edeb-0fa5b95539c5\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"class (C# Reference) | Microsoft Docs","ms.assetid":"b95d8815-de18-4c3f-a8cc-a0a53bdf8690","f1_keywords":["class_CSharpKeyword","class"],"translation.priority.ht":["de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","ru-ru","zh-cn","zh-tw"],"caps.latest.revision":30,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["class keyword [C#]"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/class.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/class.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/keywords/class.md","document_id":"1afb5e7e-18f0-20d2-edeb-0fa5b95539c5","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/keywords/class","toc_asset_id":"articles/csharp/language-reference/keywords/toc.json","toc_rel":"toc.json","_op_ogTitle":"class (C# Reference)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":514,"_op_rawTitle":"<h1 id=\"class-c-reference\" sourcefile=\"docs/csharp/language-reference/keywords/class.md\" sourcestartlinenumber=\"35\" sourceendlinenumber=\"35\">class (C# Reference)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/keywords/class","fileRelativePath":"articles/csharp/language-reference/keywords/class.html"},"themesRelativePathToOutputRoot":"_themes/"}