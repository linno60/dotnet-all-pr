{"content":"<div><div class=\"content\">\n<p>For generic type parameters, the <code>out</code> keyword specifies that the type parameter is covariant. You can use the <code>out</code> keyword in generic interfaces and delegates.  </p>\n<p> Covariance enables you to use a more derived type than that specified by the generic parameter. This allows for implicit conversion of classes that implement variant interfaces and implicit conversion of delegate types. Covariance and contravariance are supported for reference types, but they are not supported for value types.  </p>\n<p> An interface that has a covariant type parameter enables its methods to return more derived types than those specified by the type parameter. For example, because in .NET Framework 4, in <a class=\"xref\" href=\"../../../../api/system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>, type T is covariant, you can assign an object of the <code>IEnumerabe(Of String)</code> type to an object of the <code>IEnumerable(Of Object)</code> type without using any special conversion methods.  </p>\n<p> A covariant delegate can be assigned another delegate of the same type, but with a more derived generic type parameter.  </p>\n<p> For more information, see <a href=\"http://msdn.microsoft.com/library/a58cc086-276f-4f91-a366-85b7f95f38b8\" data-linktype=\"external\">Covariance and Contravariance</a>.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following example shows how to declare, extend, and implement a covariant generic interface. It also shows how to use implicit conversion for classes that implement a covariant interface.  </p>\n<pre><code class=\"lang-cs\" name=\"csVarianceKeywords#3\">// Covariant interface.\ninterface ICovariant&lt;out R&gt; { }\n\n// Extending covariant interface.\ninterface IExtCovariant&lt;out R&gt; : ICovariant&lt;R&gt; { }\n\n// Implementing covariant interface.\nclass Sample&lt;R&gt; : ICovariant&lt;R&gt; { }\n\nclass Program\n{\n    static void Test()\n    {\n        ICovariant&lt;Object&gt; iobj = new Sample&lt;Object&gt;();\n        ICovariant&lt;String&gt; istr = new Sample&lt;String&gt;();\n\n        // You can assign istr to iobj because\n        // the ICovariant interface is covariant.\n        iobj = istr;\n    }\n}\n</code></pre><p> In a generic interface, a type parameter can be declared covariant if it satisfies the following conditions:  </p>\n<ul>\n<li><p>The type parameter is used only as a return type of interface methods and not used as a type of method arguments.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> There is one exception to this rule. If in a covariant interface you have a contravariant generic delegate as a method parameter, you can use the covariant type as a generic type parameter for this delegate. For more information about covariant and contravariant generic delegates, see <a href=\"http://msdn.microsoft.com/library/e3b98197-6c5b-4e55-9c6e-9739b60645ca\" data-linktype=\"external\">Variance in Delegates</a> and <a href=\"http://msdn.microsoft.com/library/e69c4f39-09aa-4c6d-a752-08cc767d8290\" data-linktype=\"external\">Using Variance for Func and Action Generic Delegates</a>.  </p>\n</div>\n</li>\n<li><p>The type parameter is not used as a generic constraint for the interface methods.  </p>\n</li>\n</ul>\n<h2 id=\"example-1\">Example</h2>\n<p> The following example shows how to declare, instantiate, and invoke a covariant generic delegate. It also shows how to implicitly convert delegate types.  </p>\n<pre><code class=\"lang-cs\" name=\"csVarianceKeywords#4\">// Covariant delegate.\npublic delegate R DCovariant&lt;out R&gt;();\n\n// Methods that match the delegate signature.\npublic static Control SampleControl()\n{ return new Control(); }\n\npublic static Button SampleButton()\n{ return new Button(); }\n\npublic void Test()\n{            \n    // Instantiate the delegates with the methods.\n    DCovariant&lt;Control&gt; dControl = SampleControl;\n    DCovariant&lt;Button&gt; dButton = SampleButton;\n\n    // You can assign dButton to dControl\n    // because the DCovariant delegate is covariant.\n    dControl = dButton;\n\n    // Invoke the delegate.\n    dControl(); \n}\n</code></pre><p> In a generic delegate, a type can be declared covariant if it is used only as a method return type and not used for method arguments.  </p>\n<h2 id=\"c-language-specification\">C# Language Specification</h2>\n<p>For more information, see the <a href=\"../language-specification\" data-linktype=\"relative-path\">C# Language Specification</a>. The language specification is the definitive source for C# syntax and usage.</p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"http://msdn.microsoft.com/library/e14322da-1db3-42f2-9a67-397daddd6b6a\" data-linktype=\"external\">Variance in Generic Interfaces</a><br> <a href=\"in-generic-modifier\" data-linktype=\"relative-path\">in</a><br> <a href=\"modifiers\" data-linktype=\"relative-path\">Modifiers</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"f8c20dec-a8bc-426a-9882-4076b1db1e00\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"15\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/out-generic-modifier.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/out-generic-modifier.md\">\r\n<meta name=\"document_id\" content=\"906df2ef-c459-8864-fbaf-91604eaf145a\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc1.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"out (Generic Modifier) (C# Reference) | Microsoft Docs","ms.assetid":"f8c20dec-a8bc-426a-9882-4076b1db1e00","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":15,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["covariance, out keyword [C#]","out keyword [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/out-generic-modifier.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/out-generic-modifier.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/keywords/out-generic-modifier.md","document_id":"906df2ef-c459-8864-fbaf-91604eaf145a","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/out-generic-modifier","toc_asset_id":"articles/csharp/language-reference/keywords/toc.json","toc_rel":"toc.json","_op_ogTitle":"out (Generic Modifier) (C# Reference)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":521,"_op_rawTitle":"<h1 id=\"out-generic-modifier-c-reference\" sourcefile=\"docs/csharp/language-reference/keywords/out-generic-modifier.md\" sourcestartlinenumber=\"32\" sourceendlinenumber=\"32\">out (Generic Modifier) (C# Reference)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/out-generic-modifier","fileRelativePath":"articles/csharp/language-reference/keywords/out-generic-modifier.html"},"themesRelativePathToOutputRoot":"_themes/"}