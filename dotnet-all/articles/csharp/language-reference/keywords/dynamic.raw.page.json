{"content":"<div><div class=\"content\">\n<p>The <code>dynamic</code> type enables the operations in which it occurs to bypass compile-time type checking. Instead, these operations are resolved at run time. The <code>dynamic</code> type simplifies access to COM APIs such as the Office Automation APIs, and also to dynamic APIs such as IronPython libraries, and to the HTML Document Object Model (DOM).  </p>\n<p> Type <code>dynamic</code> behaves like type <code>object</code> in most circumstances. However, operations that contain expressions of type <code>dynamic</code> are not resolved or type checked by the compiler. The compiler packages together information about the operation, and that information is later used to evaluate the operation at run time. As part of the process, variables of type <code>dynamic</code> are compiled into variables of type <code>object</code>. Therefore, type <code>dynamic</code> exists only at compile time, not at run time.  </p>\n<p> The following example contrasts a variable of type <code>dynamic</code> to a variable of type <code>object</code>. To verify the type of each variable at compile time, place the mouse pointer over <code>dyn</code> or <code>obj</code> in the <code>WriteLine</code> statements. IntelliSense shows <strong>dynamic</strong> for <code>dyn</code> and <strong>object</strong> for <code>obj</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsTypes#21\">    class Program\n    {\n        static void Main(string[] args)\n        {\n            dynamic dyn = 1;\n            object obj = 1;\n\n            // Rest the mouse pointer over dyn and obj to see their\n            // types at compile time.\n            System.Console.WriteLine(dyn.GetType());\n            System.Console.WriteLine(obj.GetType());\n        }\n    }\n</code></pre><p> The <code>WriteLine</code> statements display the run-time types of <code>dyn</code> and <code>obj</code>. At that point, both have the same type, integer. The following output is produced:  </p>\n<p> <code>System.Int32</code>  </p>\n<p> <code>System.Int32</code>  </p>\n<p> To see the difference between <code>dyn</code> and <code>obj</code> at compile time, add the following two lines between the declarations and the <code>WriteLine</code> statements in the previous example.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">dyn = dyn + 3;  \nobj = obj + 3;  \n</code></pre><p> A compiler error is reported for the attempted addition of an integer and an object in expression <code>obj + 3</code>. However, no error is reported for <code>dyn + 3</code>. The expression that contains <code>dyn</code> is not checked at compile time because the type of <code>dyn</code> is <code>dynamic</code>.  </p>\n<h2 id=\"context\">Context</h2>\n<p> The <code>dynamic</code> keyword can appear directly or as a component of a constructed type in the following situations:  </p>\n<ul>\n<li><p>In declarations, as the type of a property, field, indexer, parameter, return value, local variable, or type constraint. The following class definition uses <code>dynamic</code> in several different declarations.  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsTypes#22\">    class ExampleClass\n    {\n        // A dynamic field.\n        static dynamic field;\n\n        // A dynamic property.\n        dynamic prop { get; set; }\n\n        // A dynamic return type and a dynamic parameter type.\n        public dynamic exampleMethod(dynamic d)\n        {\n            // A dynamic local variable.\n            dynamic local = &quot;Local variable&quot;;\n            int two = 2;\n\n            if (d is int)\n            {\n                return local;\n            }\n            else\n            {\n                return two;\n            }\n        }\n    }\n</code></pre></li>\n<li><p>In explicit type conversions, as the target type of a conversion.  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsTypes#23\">        static void convertToDynamic()\n        {\n            dynamic d;\n            int i = 20;\n            d = (dynamic)i;\n            Console.WriteLine(d);\n\n            string s = &quot;Example string.&quot;;\n            d = (dynamic)s;\n            Console.WriteLine(d);\n\n            DateTime dt = DateTime.Today;\n            d = (dynamic)dt;\n            Console.WriteLine(d);\n\n        }\n        // Results:\n        // 20\n        // Example string.\n        // 2/17/2009 9:12:00 AM\n</code></pre></li>\n<li><p>In any context where types serve as values, such as on the right side of an <code>is</code> operator or an <code>as</code> operator, or as the argument to <code>typeof</code> as part of a constructed type. For example, <code>dynamic</code> can be used in the following expressions.  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsTypes#24\">            int i = 8;\n            dynamic d;\n            // With the is operator.\n            // The dynamic type behaves like object. The following\n            // expression returns true unless someVar has the value null.\n            if (someVar is dynamic) { }\n\n            // With the as operator.\n            d = i as dynamic;\n\n            // With typeof, as part of a constructed type.\n            Console.WriteLine(typeof(List&lt;dynamic&gt;));\n\n            // The following statement causes a compiler error.\n            //Console.WriteLine(typeof(dynamic));\n</code></pre></li>\n</ul>\n<h2 id=\"example\">Example</h2>\n<p> The following example uses <code>dynamic</code> in several declarations. The <code>Main</code> method also contrasts compile-time type checking with run-time type checking.  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsTypes#25\">using System;\n\nnamespace DynamicExamples\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            ExampleClass ec = new ExampleClass();\n            Console.WriteLine(ec.exampleMethod(10));\n            Console.WriteLine(ec.exampleMethod(&quot;value&quot;));\n\n            // The following line causes a compiler error because exampleMethod\n            // takes only one argument.\n            //Console.WriteLine(ec.exampleMethod(10, 4));\n\n            dynamic dynamic_ec = new ExampleClass();\n            Console.WriteLine(dynamic_ec.exampleMethod(10));\n\n            // Because dynamic_ec is dynamic, the following call to exampleMethod\n            // with two arguments does not produce an error at compile time.\n            // However, itdoes cause a run-time error. \n            //Console.WriteLine(dynamic_ec.exampleMethod(10, 4));\n        }\n    }\n\n    class ExampleClass\n    {\n        static dynamic field;\n        dynamic prop { get; set; }\n\n        public dynamic exampleMethod(dynamic d)\n        {\n            dynamic local = &quot;Local variable&quot;;\n            int two = 2;\n\n            if (d is int)\n            {\n                return local;\n            }\n            else\n            {\n                return two;\n            }\n        }\n    }\n}\n// Results:\n// Local variable\n// 2\n// Local variable\n</code></pre><p> For more information and examples, see <a href=\"../../programming-guide/types/using-type-dynamic\" data-linktype=\"relative-path\">Using Type dynamic</a>.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../api/system.dynamic.expandoobject\" data-linktype=\"relative-path\">System.Dynamic.ExpandoObject</a><br> <a class=\"xref\" href=\"../../../../api/system.dynamic.dynamicobject\" data-linktype=\"relative-path\">System.Dynamic.DynamicObject</a><br> <a href=\"../../programming-guide/types/using-type-dynamic\" data-linktype=\"relative-path\">Using Type dynamic</a><br> <a href=\"object\" data-linktype=\"relative-path\">object</a><br> <a href=\"is\" data-linktype=\"relative-path\">is</a><br> <a href=\"as\" data-linktype=\"relative-path\">as</a><br> <a href=\"typeof\" data-linktype=\"relative-path\">typeof</a><br> <a href=\"../../programming-guide/types/how-to-safely-cast-by-using-as-and-is-operators\" data-linktype=\"relative-path\">How to: Safely Cast by Using as and is Operators</a><br> <a href=\"../../programming-guide/types/walkthrough-creating-and-using-dynamic-objects\" data-linktype=\"relative-path\">Walkthrough: Creating and Using Dynamic Objects</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"9e797102-cc83-4964-bf58-afe4f54d16bc\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"25\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/dynamic.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/dynamic.md\">\r\n<meta name=\"document_id\" content=\"803a0ea3-adb6-63f4-814a-6477776d6e6f\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"dynamic (C# Reference) | Microsoft Docs","ms.assetid":"9e797102-cc83-4964-bf58-afe4f54d16bc","f1_keywords":["dynamic_CSharpKeyword"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":25,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["dynamic [C#]","dynamic keyword [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/dynamic.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/dynamic.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/keywords/dynamic.md","document_id":"803a0ea3-adb6-63f4-814a-6477776d6e6f","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/dynamic","toc_asset_id":"articles/csharp/language-reference/keywords/toc.json","toc_rel":"toc.json","_op_ogTitle":"dynamic (C# Reference)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":780,"_op_rawTitle":"<h1 id=\"dynamic-c-reference\" sourcefile=\"docs/csharp/language-reference/keywords/dynamic.md\" sourcestartlinenumber=\"34\" sourceendlinenumber=\"34\">dynamic (C# Reference)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/dynamic","fileRelativePath":"articles/csharp/language-reference/keywords/dynamic.html"},"themesRelativePathToOutputRoot":"_themes/"}