{"content":"<div><div class=\"content\">\n<p>The <code>decimal</code> keyword indicates a 128-bit data type. Compared to floating-point types, the <code>decimal</code> type has more precision and a smaller range, which makes it appropriate for financial and monetary calculations. The approximate range and precision for the <code>decimal</code> type are shown in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Approximate Range</th>\n<th>Precision</th>\n<th>.NET Framework type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>decimal</code></td>\n<td>(-7.9 x 10<sup>28</sup> to 7.9 x 10<sup>28</sup>) / (10<sup>0 to 28</sup>)</td>\n<td>28-29 significant digits</td>\n<td><a class=\"xref\" href=\"../../../../api/system.decimal\" data-linktype=\"relative-path\">System.Decimal</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"literals\">Literals</h2>\n<p> If you want a numeric real literal to be treated as <code>decimal</code>, use the suffix m or M, for example:  </p>\n<pre class=\"loading\"><code>\ndecimal myMoney = 300.5m;  \n</code></pre><p> Without the suffix m, the number is treated as a <a href=\"double\" data-linktype=\"relative-path\">double</a> and generates a compiler error.  </p>\n<h2 id=\"conversions\">Conversions</h2>\n<p> The integral types are implicitly converted to <code>decimal</code> and the result evaluates to <code>decimal</code>. Therefore you can initialize a decimal variable using an integer literal, without the suffix, as follows:  </p>\n<pre class=\"loading\"><code>\ndecimal myMoney = 300;  \n</code></pre><p> There is no implicit conversion between floating-point types and the <code>decimal</code> type; therefore, a cast must be used to convert between these two types. For example:  </p>\n<pre class=\"loading\"><code>\n      decimal myMoney = 99.9m;  \ndouble x = (double)myMoney;  \nmyMoney = (decimal)x;  \n</code></pre><p> You can also mix <code>decimal</code> and numeric integral types in the same expression. However, mixing <code>decimal</code> and floating-point types without a cast causes a compilation error.  </p>\n<p> For more information about implicit numeric conversions, see <a href=\"implicit-numeric-conversions-table\" data-linktype=\"relative-path\">Implicit Numeric Conversions Table</a>.  </p>\n<p> For more information about explicit numeric conversions, see <a href=\"explicit-numeric-conversions-table\" data-linktype=\"relative-path\">Explicit Numeric Conversions Table</a>.  </p>\n<h2 id=\"formatting-decimal-output\">Formatting Decimal Output</h2>\n<p> You can format the results by using the <code>String.Format</code> method, or through the <a class=\"xref\" href=\"../../../../api/system.console#System_Console_Write_\" data-linktype=\"relative-path\">Write</a> method, which calls <code>String.Format()</code>. The currency format is specified by using the standard currency format string &quot;C&quot; or &quot;c,&quot; as shown in the second example later in this article. For more information about the <code>String.Format</code> method, see <a class=\"xref\" href=\"../../../../api/system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a>.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following example causes a compiler error by trying to add <a href=\"double\" data-linktype=\"relative-path\">double</a> and <code>decimal</code> variables.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">double dub = 9;  \n// The following line causes an error that reads &quot;Operator &#39;+&#39; cannot be applied to   \n// operands of type &#39;double&#39; and &#39;decimal&#39;&quot;  \nConsole.WriteLine(dec + dub);   \n\n// You can fix the error by using explicit casting of either operand.  \nConsole.WriteLine(dec + (decimal)dub);  \nConsole.WriteLine((double)dec + dub);  \n</code></pre><p> The result is the following error:  </p>\n<p> <code>Operator &#39;+&#39; cannot be applied to operands of type &#39;double&#39; and &#39;decimal&#39;</code>  </p>\n<p> In this example, a <code>decimal</code> and an <a href=\"int\" data-linktype=\"relative-path\">int</a> are mixed in the same expression. The result evaluates to the <code>decimal</code> type.  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsTypes#6\">    public class TestDecimal\n    {\n        static void Main()\n        {\n            decimal d = 9.1m;\n            int y = 3;\n            Console.WriteLine(d + y);   // Result converted to decimal\n        }\n    }\n    // Output: 12.1\n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> In this example, the output is formatted by using the currency format string. Notice that <code>x</code> is rounded because the decimal places exceed $0.99. The variable <code>y</code>, which represents the maximum exact digits, is displayed exactly in the correct format.  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsTypes#7\">    public class TestDecimalFormat\n    {\n        static void Main()\n        {\n            decimal x = 0.999m;\n            decimal y = 9999999999999999999999999999m;\n            Console.WriteLine(&quot;My amount = {0:C}&quot;, x);\n            Console.WriteLine(&quot;Your amount = {0:C}&quot;, y);\n        }\n    }\n    /* Output:\n        My amount = $1.00\n        Your amount = $9,999,999,999,999,999,999,999,999,999.00\n    */\n</code></pre><h2 id=\"c-language-specification\">C# Language Specification</h2>\n<p> For more information, see the <a href=\"../language-specification\" data-linktype=\"relative-path\">C# Language Specification</a>. The language specification is the definitive source for C# syntax and usage.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../api/system.decimal\" data-linktype=\"relative-path\">Decimal</a><br> <a href=\"../index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"../../programming-guide/index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">C# Keywords</a><br> <a href=\"integral-types-table\" data-linktype=\"relative-path\">Integral Types Table</a><br> <a href=\"built-in-types-table\" data-linktype=\"relative-path\">Built-In Types Table</a><br> <a href=\"implicit-numeric-conversions-table\" data-linktype=\"relative-path\">Implicit Numeric Conversions Table</a><br> <a href=\"explicit-numeric-conversions-table\" data-linktype=\"relative-path\">Explicit Numeric Conversions Table</a><br> <a href=\"http://msdn.microsoft.com/library/580e57eb-ac47-4ffd-bccd-3a1637c2f467\" data-linktype=\"external\">Standard Numeric Format Strings</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"b6522132-b5ee-4be3-ad13-3adfdb7de7a1\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"32\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/decimal.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/decimal.md\">\r\n<meta name=\"document_id\" content=\"a4e75396-6842-72f6-9808-78618ae5bc1a\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"decimal (C# Reference) | Microsoft Docs","ms.assetid":"b6522132-b5ee-4be3-ad13-3adfdb7de7a1","f1_keywords":["decimal_CSharpKeyword","decimal"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":32,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["decimal keyword [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/decimal.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/decimal.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/keywords/decimal.md","document_id":"a4e75396-6842-72f6-9808-78618ae5bc1a","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/decimal","toc_asset_id":"articles/csharp/language-reference/keywords/toc.json","toc_rel":"toc.json","_op_ogTitle":"decimal (C# Reference)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":546,"_op_rawTitle":"<h1 id=\"decimal-c-reference\" sourcefile=\"docs/csharp/language-reference/keywords/decimal.md\" sourcestartlinenumber=\"34\" sourceendlinenumber=\"34\">decimal (C# Reference)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/decimal","fileRelativePath":"articles/csharp/language-reference/keywords/decimal.html"},"themesRelativePathToOutputRoot":"_themes/"}