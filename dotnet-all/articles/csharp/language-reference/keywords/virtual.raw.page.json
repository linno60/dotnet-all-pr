{"content":"<div><div class=\"content\">\n<p>The <code>virtual</code> keyword is used to modify a method, property, indexer, or event declaration and allow for it to be overridden in a derived class. For example, this method can be overridden by any class that inherits it:  </p>\n<pre class=\"loading\"><code>public virtual double Area()   \n{  \n    return x * y;  \n}  \n</code></pre><p> The implementation of a virtual member can be changed by an <a href=\"override\" data-linktype=\"relative-path\">overriding member</a> in a derived class. For more information about how to use the <code>virtual</code> keyword, see <a href=\"../../programming-guide/classes-and-structs/versioning-with-the-override-and-new-keywords\" data-linktype=\"relative-path\">Versioning with the Override and New Keywords</a> and <a href=\"../../programming-guide/classes-and-structs/knowing-when-to-use-override-and-new-keywords\" data-linktype=\"relative-path\">Knowing When to Use Override and New Keywords</a>.  </p>\n<h2 id=\"remarks\">Remarks</h2>\n<p> When a virtual method is invoked, the run-time type of the object is checked for an overriding member. The overriding member in the most derived class is called, which might be the original member, if no derived class has overridden the member.  </p>\n<p> By default, methods are non-virtual. You cannot override a non-virtual method.  </p>\n<p> You cannot use the <code>virtual</code> modifier with the <code>static</code>, <code>abstract, private</code>, or <code>override</code> modifiers. The following example shows a virtual property:  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsModifiers#26\">    class MyBaseClass\n    {\n        // virtual auto-implemented property. Overrides can only\n        // provide specialized behavior if they implement get and set accessors.\n        public virtual string Name { get; set; }\n\n        // ordinary virtual property with backing field\n        private int num;\n        public virtual int Number\n        {\n            get { return num; }\n            set { num = value; }\n        }\n    }\n\n   \n    class MyDerivedClass : MyBaseClass\n    {\n        private string name;\n\n       // Override auto-implemented property with ordinary property\n       // to provide specialized accessor behavior.\n        public override string Name\n        {\n            get\n            {\n                return name;\n            }\n            set\n            {\n                if (value != String.Empty)\n                {\n                    name = value;\n                }\n                else\n                {\n                    name = &quot;Unknown&quot;;\n                }\n            }\n        }\n \n    }\n</code></pre><p> Virtual properties behave like abstract methods, except for the differences in declaration and invocation syntax.  </p>\n<ul>\n<li><p>It is an error to use the <code>virtual</code> modifier on a static property.  </p>\n</li>\n<li><p>A virtual inherited property can be overridden in a derived class by including a property declaration that uses the <code>override</code> modifier.  </p>\n</li>\n</ul>\n<h2 id=\"example\">Example</h2>\n<p> In this example, the <code>Shape</code> class contains the two coordinates <code>x</code>, <code>y</code>, and the <code>Area()</code> virtual method. Different shape classes such as <code>Circle</code>, <code>Cylinder</code>, and <code>Sphere</code> inherit the <code>Shape</code> class, and the surface area is calculated for each figure. Each derived class has it own override implementation of <code>Area()</code>.  </p>\n<p> Notice that the inherited classes <code>Circle</code>, <code>Sphere</code>, and <code>Cylinder</code> all use constructors that initialize the base class, as shown in the following declaration.  </p>\n<pre class=\"loading\"><code>public Cylinder(double r, double h): base(r, h) {}  \n</code></pre><p> The following program calculates and displays the appropriate area for each figure by invoking the appropriate implementation of the <code>Area()</code> method, according to the object that is associated with the method.  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsModifiers#23\">    class TestClass\n    {\n        public class Shape\n        {\n            public const double PI = Math.PI;\n            protected double x, y;\n            public Shape()\n            {\n            }\n            public Shape(double x, double y)\n            {\n                this.x = x;\n                this.y = y;\n            }\n\n            public virtual double Area()\n            {\n                return x * y;\n            }\n        }\n\n        public class Circle : Shape\n        {\n            public Circle(double r) : base(r, 0)\n            {\n            }\n\n            public override double Area()\n            {\n                return PI * x * x;\n            }\n        }\n\n        class Sphere : Shape\n        {\n            public Sphere(double r) : base(r, 0)\n            {\n            }\n\n            public override double Area()\n            {\n                return 4 * PI * x * x;\n            }\n        }\n\n        class Cylinder : Shape\n        {\n            public Cylinder(double r, double h) : base(r, h)\n            {\n            }\n\n            public override double Area()\n            {\n                return 2 * PI * x * x + 2 * PI * x * y;\n            }\n        }\n\n        static void Main()\n        {\n            double r = 3.0, h = 5.0;\n            Shape c = new Circle(r);\n            Shape s = new Sphere(r);\n            Shape l = new Cylinder(r, h);\n            // Display results:\n            Console.WriteLine(&quot;Area of Circle   = {0:F2}&quot;, c.Area());\n            Console.WriteLine(&quot;Area of Sphere   = {0:F2}&quot;, s.Area());\n            Console.WriteLine(&quot;Area of Cylinder = {0:F2}&quot;, l.Area());\n            }\n        }\n        /*\n            Output:\n            Area of Circle   = 28.27\n            Area of Sphere   = 113.10\n            Area of Cylinder = 150.80\n        */\n</code></pre><h2 id=\"c-language-specification\">C# Language Specification</h2>\n<p> For more information, see the <a href=\"../language-specification\" data-linktype=\"relative-path\">C# Language Specification</a>. The language specification is the definitive source for C# syntax and usage.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"../../programming-guide/index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"modifiers\" data-linktype=\"relative-path\">Modifiers</a><br> <a href=\"index\" data-linktype=\"relative-path\">C# Keywords</a><br> <a href=\"../../programming-guide/classes-and-structs/polymorphism\" data-linktype=\"relative-path\">Polymorphism</a><br> <a href=\"abstract\" data-linktype=\"relative-path\">abstract</a><br> <a href=\"override\" data-linktype=\"relative-path\">override</a><br> <a href=\"new\" data-linktype=\"relative-path\">new</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"5da9abae-bc1e-434f-8bea-3601b8dcb3b2\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"26\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-21 01:42 AM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/virtual.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/csharp/language-reference/keywords/virtual.md\">\r\n<meta name=\"document_id\" content=\"2c17d4c4-0e36-16ad-c94b-7590df850b1c\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"virtual (C# Reference) | Microsoft Docs","ms.assetid":"5da9abae-bc1e-434f-8bea-3601b8dcb3b2","f1_keywords":["virtual_CSharpKeyword","virtual"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":26,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["virtual keyword [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-21 01:42 AM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/21/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/virtual.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/csharp/language-reference/keywords/virtual.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/keywords/virtual.md","document_id":"2c17d4c4-0e36-16ad-c94b-7590df850b1c","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/keywords/virtual","toc_asset_id":"articles/csharp/language-reference/keywords/toc.json","toc_rel":"toc.json","_op_ogTitle":"virtual (C# Reference)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":672,"_op_rawTitle":"<h1 id=\"virtual-c-reference\" sourcefile=\"docs/csharp/language-reference/keywords/virtual.md\" sourcestartlinenumber=\"34\" sourceendlinenumber=\"34\">virtual (C# Reference)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/keywords/virtual","fileRelativePath":"articles/csharp/language-reference/keywords/virtual.html"},"themesRelativePathToOutputRoot":"_themes/"}