{"content":"<div><div class=\"content\">\n<p>An <code>if</code> statement identifies which statement to run based on the value of a <code>Boolean</code> expression. In the following example, the <code>Boolean</code> variable <code>result</code> is set to <code>true</code> and then checked in the <code>if</code> statement. The output is <code>The condition is true</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsSelection#1\">            bool condition = true;\n\n            if (condition)\n            {\n                Console.WriteLine(&quot;The variable is set to true.&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;The variable is set to false.&quot;);\n            }\n</code></pre><p> You can run the examples in this topic by placing them in the <code>Main</code> method of a console app.  </p>\n<p> An <code>if</code> statement in C# can take two forms, as the following example shows.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">\n// if-else statement  \nif (condition)  \n{  \n    then-statement;  \n}  \nelse  \n{  \n    else-statement;  \n}  \n// Next statement in the program.  \n\n// if statement without an else  \nif (condition)  \n{  \n    then-statement;  \n}  \n// Next statement in the program.  \n</code></pre><p> In an <code>if-else</code> statement, if <code>condition</code> evaluates to true, the <code>then-statement</code> runs. If <code>condition</code> is false, the <code>else-statement</code> runs. Because <code>condition</code> can’t be simultaneously true and false, the <code>then-statement</code> and the <code>else-statement</code> of an <code>if-else</code> statement can never both run. After the <code>then-statement</code> or the <code>else-statement</code> runs, control is transferred to the next statement after the <code>if</code> statement.  </p>\n<p> In an <code>if</code> statement that doesn’t include an <code>else</code> statement, if <code>condition</code> is true, the <code>then-statement</code> runs. If <code>condition</code> is false, control is transferred to the next statement after the <code>if</code> statement.  </p>\n<p> Both the <code>then-statement</code> and the <code>else-statement</code> can consist of a single statement or multiple statements that are enclosed in braces (<code>{}</code>). For a single statement, the braces are optional but recommended.  </p>\n<p> The statement or statements in the <code>then-statement</code> and the <code>else-statement</code> can be of any kind, including another <code>if</code> statement nested inside the original <code>if</code> statement. In nested <code>if</code> statements, each <code>else</code> clause belongs to the last <code>if</code> that doesn’t have a corresponding <code>else</code>. In the following example, <code>Result1</code> appears if both <code>m &gt; 10</code> and <code>n &gt; 20</code> evaluate to true. If <code>m &gt; 10</code> is true but <code>n &gt; 20</code> is false, <code>Result2</code> appears.  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsSelection#2\">            // Try with m = 12 and then with m = 8.\n            int m = 12;\n            int n = 18;\n\n            if (m &gt; 10)\n                if (n &gt; 20)\n                {\n                    Console.WriteLine(&quot;Result1&quot;);\n                }\n                else\n                {\n                    Console.WriteLine(&quot;Result2&quot;);\n                }\n</code></pre><p> If, instead, you want <code>Result2</code> to appear when <code>(m &gt; 10)</code> is false, you can specify that association by using braces to establish the start and end of the nested <code>if</code> statement, as the following example shows.  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsSelection#3\">            // Try with m = 12 and then with m = 8.\n            if (m &gt; 10)\n            {\n                if (n &gt; 20)\n                    Console.WriteLine(&quot;Result1&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;Result2&quot;);\n            }\n</code></pre><p> <code>Result2</code> appears if the condition <code>(m &gt; 10)</code> evaluates to false.  </p>\n<h2 id=\"example\">Example</h2>\n<p> In the following example, you enter a character from the keyboard, and the program uses a nested <code>if</code> statement to determine whether the input character is an alphabetic character. If the input character is an alphabetic character, the program checks whether the input character is lowercase or uppercase. A message appears for each case.  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsSelection#4\">            Console.Write(&quot;Enter a character: &quot;);\n            char c = (char)Console.Read();\n            if (Char.IsLetter(c))\n            {\n                if (Char.IsLower(c))\n                {\n                    Console.WriteLine(&quot;The character is lowercase.&quot;);\n                }\n                else\n                {\n                    Console.WriteLine(&quot;The character is uppercase.&quot;);\n                }\n            }\n            else\n            {\n                Console.WriteLine(&quot;The character isn&#39;t an alphabetic character.&quot;);\n            }\n\n            //Sample Output:\n\n            //Enter a character: 2\n            //The character isn&#39;t an alphabetic character.\n\n            //Enter a character: A\n            //The character is uppercase.\n\n            //Enter a character: h\n            //The character is lowercase.\n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> You also can nest an <code>if</code> statement inside an else block, as the following partial code shows. The example nests <code>if</code> statements inside two else blocks and one then block. The comments specify which conditions are true or false in each block.  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsSelection#5\">            // Change the values of these variables to test the results.\n            bool Condition1 = true;\n            bool Condition2 = true;\n            bool Condition3 = true;\n            bool Condition4 = true;\n\n            if (Condition1)\n            {\n                // Condition1 is true.\n            }\n            else if (Condition2)\n            {\n                // Condition1 is false and Condition2 is true.\n            }\n            else if (Condition3)\n            {\n                if (Condition4)\n                {\n                    // Condition1 and Condition2 are false. Condition3 and Condition4 are true.\n                }\n                else\n                {\n                    // Condition1, Condition2, and Condition4 are false. Condition3 is true.\n                }\n            }\n            else\n            {\n                // Condition1, Condition2, and Condition3 are false.\n            }\n</code></pre><h2 id=\"example-2\">Example</h2>\n<p> The following example determines whether an input character is a lowercase letter, an uppercase letter, or a number. If all three conditions are false, the character isn’t an alphanumeric character. The example displays a message for each case.  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsSelection#6\">            Console.Write(&quot;Enter a character: &quot;);\n            char ch = (char)Console.Read();\n\n            if (Char.IsUpper(ch))\n            {\n                Console.WriteLine(&quot;The character is an uppercase letter.&quot;);\n            }\n            else if (Char.IsLower(ch))\n            {\n                Console.WriteLine(&quot;The character is a lowercase letter.&quot;);\n            }\n            else if (Char.IsDigit(ch))\n            {\n                Console.WriteLine(&quot;The character is a number.&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;The character is not alphanumeric.&quot;);\n            }\n\n            //Sample Input and Output:\n            //Enter a character: E\n            //The character is an uppercase letter.\n\n            //Enter a character: e\n            //The character is a lowercase letter.\n\n            //Enter a character: 4\n            //The character is a number.\n\n            //Enter a character: =\n            //The character is not alphanumeric.\n</code></pre><p> Just as a statement in the else block or the then block can be any valid statement, you can use any valid Boolean expression for the condition. You can use logical operators such as <a href=\"../operators/conditional-and-operator\" data-linktype=\"relative-path\">&amp;&amp;</a>, <a href=\"../operators/and-operator\" data-linktype=\"relative-path\">&amp;</a>, <a href=\"../operators/conditional-or-operator\" data-linktype=\"relative-path\">&#124;&#124;</a>, <a href=\"../operators/or-operator\" data-linktype=\"relative-path\">&#124;</a> and <a href=\"../operators/logical-negation-operator\" data-linktype=\"relative-path\">!</a> to make compound conditions. The following code shows examples.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">// NOT  \nbool result = true;  \nif (!result)  \n{  \n    Console.WriteLine(&quot;The condition is true (result is false).&quot;);  \n}  \nelse  \n{  \n    Console.WriteLine(&quot;The condition is false (result is true).&quot;);  \n}  \n\n// Short-circuit AND  \nint m = 9;  \nint n = 7;  \nint p = 5;  \nif (m &gt;= n &amp;&amp; m &gt;= p)  \n{  \n    Console.WriteLine(&quot;Nothing is larger than m.&quot;);  \n}  \n\n// AND and NOT  \nif (m &gt;= n &amp;&amp; !(p &gt; m))  \n{  \n    Console.WriteLine(&quot;Nothing is larger than m.&quot;);  \n}  \n\n// Short-circuit OR  \nif (m &gt; n || m &gt; p)  \n{  \n    Console.WriteLine(&quot;m isn&#39;t the smallest.&quot;);  \n}  \n\n// NOT and OR  \nm = 4;  \nif (!(m &gt;= n || m &gt;= p))  \n{  \n    Console.WriteLine(&quot;Now m is the smallest.&quot;);  \n}  \n// Output:  \n// The condition is false (result is true).  \n// Nothing is larger than m.  \n// Nothing is larger than m.  \n// m isn&#39;t the smallest.  \n// Now m is the smallest.  \n</code></pre><h2 id=\"c-language-specification\">C# Language Specification</h2>\n<p> For more information, see the <a href=\"../language-specification\" data-linktype=\"relative-path\">C# Language Specification</a>. The language specification is the definitive source for C# syntax and usage.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"../../programming-guide/index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">C# Keywords</a><br> <a href=\"../operators/conditional-operator\" data-linktype=\"relative-path\">?: Operator</a><br> <a href=\"https://docs.microsoft.com/cpp/cpp/if-else-statement-cpp\" data-linktype=\"external\">if-else Statement (C++)</a><br> <a href=\"switch\" data-linktype=\"relative-path\">switch</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"d9a1d562-8cf5-4bd4-9ba7-8ad970cd25b2\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"32\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/if-else.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/if-else.md\">\r\n<meta name=\"document_id\" content=\"abe9e13c-ce29-1522-1d1a-f0300e46ecac\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"if-else (C# Reference) | Microsoft Docs","ms.assetid":"d9a1d562-8cf5-4bd4-9ba7-8ad970cd25b2","f1_keywords":["if_CSharpKeyword","else","else_CSharpKeyword","if"],"translation.priority.ht":["de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","ru-ru","zh-cn","zh-tw"],"caps.latest.revision":32,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["else keyword [C#]","if keyword [C#]"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Absolute urls and other fixes (#1281)","commit_sha":"f7dffe4885b331cec8d37f3cc5c9163f69c3b4c9","commit_date":"2016-11-22 12:57:26 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/if-else.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/if-else.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/keywords/if-else.md","document_id":"abe9e13c-ce29-1522-1d1a-f0300e46ecac","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/keywords/if-else","toc_asset_id":"articles/csharp/language-reference/keywords/toc.json","toc_rel":"toc.json","_op_ogTitle":"if-else (C# Reference)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":1053,"_op_rawTitle":"<h1 id=\"if-else-c-reference\" sourcefile=\"docs/csharp/language-reference/keywords/if-else.md\" sourcestartlinenumber=\"38\" sourceendlinenumber=\"38\">if-else (C# Reference)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/keywords/if-else","fileRelativePath":"articles/csharp/language-reference/keywords/if-else.html"},"themesRelativePathToOutputRoot":"_themes/"}