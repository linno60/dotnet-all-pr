{"content":"<div><div class=\"content\">\n<p>Used to obtain the <code>System.Type</code> object for a type. A <code>typeof</code> expression takes the following form:  </p>\n<pre class=\"loading\"><code>System.Type type = typeof(int);  \n</code></pre><h2 id=\"remarks\">Remarks</h2>\n<p> To obtain the run-time type of an expression, you can use the .NET Framework method <a class=\"xref\" href=\"../../../../api/system.object#System_Object_GetType_\" data-linktype=\"relative-path\">GetType</a>, as in the following example:  </p>\n<pre class=\"loading\"><code>int i = 0;  \nSystem.Type type = i.GetType();  \n</code></pre><p> The <code>typeof</code> operator cannot be overloaded.  </p>\n<p> The <code>typeof</code> operator can also be used on open generic types. Types with more than one type parameter must have the appropriate number of commas in the specification. The following example shows how to determine whether the return type of a method is a generic <a class=\"xref\" href=\"../../../../api/system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>. Assume that method is an instance of a MethodInfo type:  </p>\n<pre class=\"loading\"><code>string s = method.ReturnType.GetInterface  \n    (typeof(System.Collections.Generic.IEnumerable&lt;&gt;).FullName);  \n</code></pre><h2 id=\"example\">Example</h2>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsOperator#12\">    public class ExampleClass\n    {\n       public int sampleMember;\n       public void SampleMethod() {}\n\n       static void Main()\n       {\n          Type t = typeof(ExampleClass);\n          // Alternatively, you could use\n          // ExampleClass obj = new ExampleClass();\n          // Type t = obj.GetType();\n\n          Console.WriteLine(&quot;Methods:&quot;);\n          System.Reflection.MethodInfo[] methodInfo = t.GetMethods();\n\n          foreach (System.Reflection.MethodInfo mInfo in methodInfo)\n             Console.WriteLine(mInfo.ToString());\n\n          Console.WriteLine(&quot;Members:&quot;);\n          System.Reflection.MemberInfo[] memberInfo = t.GetMembers();\n\n          foreach (System.Reflection.MemberInfo mInfo in memberInfo)\n             Console.WriteLine(mInfo.ToString());\n       }\n    }\n    /*\n     Output:\n        Methods:\n        Void SampleMethod()\n        System.String ToString()\n        Boolean Equals(System.Object)\n        Int32 GetHashCode()\n        System.Type GetType()\n        Members:\n        Void SampleMethod()\n        System.String ToString()\n        Boolean Equals(System.Object)\n        Int32 GetHashCode()\n        System.Type GetType()\n        Void .ctor()\n        Int32 sampleMember\n    */\n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> This sample uses the <a class=\"xref\" href=\"../../../../api/system.object#System_Object_GetType_\" data-linktype=\"relative-path\">GetType</a> method to determine the type that is used to contain the result of a numeric calculation. This depends on the storage requirements of the resulting number.  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsOperator#13\">    class GetTypeTest\n    {\n        static void Main()\n        {\n            int radius = 3;\n            Console.WriteLine(&quot;Area = {0}&quot;, radius * radius * Math.PI);\n            Console.WriteLine(&quot;The type is {0}&quot;,\n                              (radius * radius * Math.PI).GetType()\n            );\n        }\n    }\n    /*\n    Output:\n    Area = 28.2743338823081\n    The type is System.Double\n    */\n</code></pre><h2 id=\"c-language-specification\">C# Language Specification</h2>\n<p> For more information, see the <a href=\"../language-specification\" data-linktype=\"relative-path\">C# Language Specification</a>. The language specification is the definitive source for C# syntax and usage.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../api/system.type\" data-linktype=\"relative-path\">System.Type</a><br> <a href=\"../index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"../../programming-guide/index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">C# Keywords</a><br> <a href=\"is\" data-linktype=\"relative-path\">is</a><br> <a href=\"operator-keywords\" data-linktype=\"relative-path\">Operator Keywords</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"0c08d880-515e-46bb-8cd2-48b8dd62c08d\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"21\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-21 01:42 AM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/typeof.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/csharp/language-reference/keywords/typeof.md\">\r\n<meta name=\"document_id\" content=\"01e57cff-fae0-d847-fb0e-08459558d987\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"typeof (C# Reference) | Microsoft Docs","ms.assetid":"0c08d880-515e-46bb-8cd2-48b8dd62c08d","f1_keywords":["typeof","typeof_CSharpKeyword"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":21,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["typeof keyword [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-21 01:42 AM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/21/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/typeof.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/csharp/language-reference/keywords/typeof.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/keywords/typeof.md","document_id":"01e57cff-fae0-d847-fb0e-08459558d987","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/keywords/typeof","toc_asset_id":"articles/csharp/language-reference/keywords/toc.json","toc_rel":"toc.json","_op_ogTitle":"typeof (C# Reference)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":310,"_op_rawTitle":"<h1 id=\"typeof-c-reference\" sourcefile=\"docs/csharp/language-reference/keywords/typeof.md\" sourcestartlinenumber=\"34\" sourceendlinenumber=\"34\">typeof (C# Reference)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/language-reference/keywords/typeof","fileRelativePath":"articles/csharp/language-reference/keywords/typeof.html"},"themesRelativePathToOutputRoot":"_themes/"}