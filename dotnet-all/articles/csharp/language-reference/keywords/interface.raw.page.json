{"content":"<div><div class=\"content\">\n<p>An interface contains only the signatures of <a href=\"../../programming-guide/classes-and-structs/methods\" data-linktype=\"relative-path\">methods</a>, <a href=\"../../programming-guide/classes-and-structs/properties\" data-linktype=\"relative-path\">properties</a>, <a href=\"../../programming-guide/events/index\" data-linktype=\"relative-path\">events</a> or <a href=\"../../programming-guide/indexers/index\" data-linktype=\"relative-path\">indexers</a>. A class or struct that implements the interface must implement the members of the interface that are specified in the interface definition. In the following example, class <code>ImplementationClass</code> must implement a method named <code>SampleMethod</code> that has no parameters and returns <code>void</code>.  </p>\n<p> For more information and examples, see <a href=\"../../programming-guide/interfaces/index\" data-linktype=\"relative-path\">Interfaces</a>.  </p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsTypes#14\">    interface ISampleInterface\n    {\n        void SampleMethod();\n    }\n\n    class ImplementationClass : ISampleInterface\n    {\n        // Explicit interface member implementation: \n        void ISampleInterface.SampleMethod()\n        {\n            // Method implementation.\n        }\n\n        static void Main()\n        {\n            // Declare an interface instance.\n            ISampleInterface obj = new ImplementationClass();\n\n            // Call the member.\n            obj.SampleMethod();\n        }\n    }\n</code></pre><p> An interface can be a member of a namespace or a class and can contain signatures of the following members:  </p>\n<ul>\n<li><p><a href=\"../../programming-guide/classes-and-structs/methods\" data-linktype=\"relative-path\">Methods</a>  </p>\n</li>\n<li><p><a href=\"../../programming-guide/classes-and-structs/using-properties\" data-linktype=\"relative-path\">Properties</a>  </p>\n</li>\n<li><p><a href=\"../../programming-guide/indexers/using-indexers\" data-linktype=\"relative-path\">Indexers</a>  </p>\n</li>\n<li><p><a href=\"event\" data-linktype=\"relative-path\">Events</a>  </p>\n<p>An interface can inherit from one or more base interfaces.  </p>\n<p>When a base type list contains a base class and interfaces, the base class must come first in the list.  </p>\n<p>A class that implements an interface can explicitly implement members of that interface. An explicitly implemented member cannot be accessed through a class instance, but only through an instance of the interface.  </p>\n<p>For more details and code examples on explicit interface implementation, see <a href=\"../../programming-guide/interfaces/explicit-interface-implementation\" data-linktype=\"relative-path\">Explicit Interface Implementation</a>.  </p>\n</li>\n</ul>\n<h2 id=\"example-1\">Example</h2>\n<p> The following example demonstrates interface implementation. In this example, the interface contains the property declaration and the class contains the implementation. Any instance of a class that implements <code>IPoint</code> has integer properties <code>x</code> and <code>y</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsTypes#15\">    interface IPoint\n    {\n       // Property signatures:\n       int x\n       {\n          get;\n          set;\n       }\n\n       int y\n       {\n          get;\n          set;\n       }\n    }\n\n    class Point : IPoint\n    {\n       // Fields:\n       private int _x;\n       private int _y;\n\n       // Constructor:\n       public Point(int x, int y)\n       {\n          _x = x;\n          _y = y;\n       }\n\n       // Property implementation:\n       public int x\n       {\n          get\n          {\n             return _x;\n          }\n\n          set\n          {\n             _x = value;\n          }\n       }\n\n       public int y\n       {\n          get\n          {\n             return _y;\n          }\n          set\n          {\n             _y = value;\n          }\n       }\n    }\n\n    class MainClass\n    {\n       static void PrintPoint(IPoint p)\n       {\n          Console.WriteLine(&quot;x={0}, y={1}&quot;, p.x, p.y);\n       }\n\n       static void Main()\n       {\n          Point p = new Point(2, 3);\n          Console.Write(&quot;My Point: &quot;);\n          PrintPoint(p);\n       }\n    }\n    // Output: My Point: x=2, y=3\n</code></pre><h2 id=\"c-language-specification\">C# Language Specification</h2>\n<p> For more information, see the <a href=\"../language-specification\" data-linktype=\"relative-path\">C# Language Specification</a>. The language specification is the definitive source for C# syntax and usage.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"../../programming-guide/index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">C# Keywords</a><br> <a href=\"reference-types\" data-linktype=\"relative-path\">Reference Types</a><br> <a href=\"../../programming-guide/interfaces/index\" data-linktype=\"relative-path\">Interfaces</a><br> <a href=\"../../programming-guide/classes-and-structs/using-properties\" data-linktype=\"relative-path\">Using Properties</a><br> <a href=\"../../programming-guide/indexers/using-indexers\" data-linktype=\"relative-path\">Using Indexers</a><br> <a href=\"class\" data-linktype=\"relative-path\">class</a><br> <a href=\"struct\" data-linktype=\"relative-path\">struct</a><br> <a href=\"../../programming-guide/interfaces/index\" data-linktype=\"relative-path\">Interfaces</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"7da38e81-4f99-4bc5-b07d-c986b687eeba\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"29\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/interface.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/interface.md\">\r\n<meta name=\"document_id\" content=\"470a5abb-43a0-1358-19c6-b4bf7144b1a8\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"interface (C# Reference) | Microsoft Docs","ms.assetid":"7da38e81-4f99-4bc5-b07d-c986b687eeba","f1_keywords":["interface_CSharpKeyword"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":29,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["interface keyword [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/language-reference/keywords/interface.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/interface.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/keywords/interface.md","document_id":"470a5abb-43a0-1358-19c6-b4bf7144b1a8","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/interface","toc_asset_id":"articles/csharp/language-reference/keywords/toc.json","toc_rel":"toc.json","_op_ogTitle":"interface (C# Reference)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":399,"_op_rawTitle":"<h1 id=\"interface-c-reference\" sourcefile=\"docs/csharp/language-reference/keywords/interface.md\" sourcestartlinenumber=\"33\" sourceendlinenumber=\"33\">interface (C# Reference)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/interface","fileRelativePath":"articles/csharp/language-reference/keywords/interface.html"},"themesRelativePathToOutputRoot":"_themes/"}