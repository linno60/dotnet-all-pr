{"content":"<div><div class=\"content\">\n<p>The <code>out</code> keyword causes arguments to be passed by reference. It is like the <a href=\"ref\" data-linktype=\"relative-path\">ref</a> keyword, except that <code>ref</code> requires that the variable be initialized before it is passed. To use an <code>out</code> parameter, both the method definition and the calling method must explicitly use the <code>out</code> keyword. For example:  </p>\n<pre><code class=\"lang-cs\" name=\"cs-out-keyword\">using System;\n\nclass OutExample\n{\n   static void Method(out int i)\n   {\n      i = 44;\n   }\n   \n   static void Main()\n   {\n      int value;\n      Method(out value);\n      Console.WriteLine(value);     // value is now 44\n   }\n}\n</code></pre><div class=\"NOTE\"><h5>Note</h5><p>The <code>out</code> keyword can also be used with a generic type parameter to specify that the type parameter is covariant. For more information on the use of the <code>out</code> keyword in this context, see <a href=\"out-generic-modifier\" data-linktype=\"relative-path\">out (Generic Modifier)</a>.</p>\n</div>\n<p> Variables passed as <code>out</code> arguments do not have to be initialized before being passed in a method call. However, the called method is required to assign a value before the method returns.  </p>\n<p> Although the <code>ref</code> and <code>out</code> keywords cause different run-time behavior, they are not considered part of the method signature at compile time. Therefore, methods cannot be overloaded if the only difference is that one method takes a <code>ref</code> argument and the other takes an <code>out</code> argument. The following code, for example, will not compile:  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">class CS0663_Example\n{\n    // Compiler error CS0663: &quot;Cannot define overloaded \n    // methods that differ only on ref and out&quot;.\n    public void SampleMethod(out int i) { }\n    public void SampleMethod(ref int i) { }\n}\n</code></pre><p>Overloading is legal, however, if one method takes a <code>ref</code> or <code>out</code> argument and the other uses neither, like this:  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsMethodParams#3\">    class OutOverloadExample\n    {\n        public void SampleMethod(int i) { }\n        public void SampleMethod(out int i) { i = 5; }\n    }\n</code></pre><p> Properties are not variables and therefore cannot be passed as <code>out</code> parameters.  </p>\n<p> For information about passing arrays, see <a href=\"../../programming-guide/arrays/passing-arrays-using-ref-and-out\" data-linktype=\"relative-path\">Passing Arrays Using ref and out</a>.  </p>\n<p> You can&#39;t use the <code>ref</code> and <code>out</code> keywords for the following kinds of methods:  </p>\n<ul>\n<li><p>Async methods, which you define by using the <a href=\"async\" data-linktype=\"relative-path\">async</a> modifier.  </p>\n</li>\n<li><p>Iterator methods, which include a <a href=\"yield\" data-linktype=\"relative-path\">yield return</a> or <code>yield break</code> statement.  </p>\n</li>\n</ul>\n<h2 id=\"declaring-out-arguments\">Declaring <code>out</code> arguments</h2>\n<p> Declaring a method with <code>out</code> arguments is useful when you want a method to return multiple values. The following example uses <code>out</code> to return three variables with a single method call. Note that the third argument is assigned to null. This enables methods to return values optionally.  </p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsMethodParams#4\">class OutReturnExample\n{\n    static void Method(out int i, out string s1, out string s2)\n    {\n        i = 44;\n        s1 = &quot;I&#39;ve been returned&quot;;\n        s2 = null;\n    }\n\n    static void Main()\n    {\n        int value;\n        string str1, str2;\n        Method(out value, out str1, out str2);\n        // value is now 44\n        // str1 is now &quot;I&#39;ve been returned&quot;\n        // str2 is (still) null;\n    }\n}\n</code></pre><p> The <a href=\"https://docs.microsoft.com/visualstudio/code-quality/ca1021-avoid-out-parameters#try-pattern-methods.md\" data-linktype=\"external\">Try pattern</a> involves returning a <code>bool</code> to indicate whether an operation succeeded and failed, and returning the value produced by the operation in an <code>out</code> argument. A number of parsing methods, such as the @System.DateTime.TryParse(System.String,@System.DateTime) method, use this pattern.</p>\n<h2 id=\"calling-a-method-with-an-out-argument\">Calling a method with an <code>out</code> argument</h2>\n<p>In C# 6 and earlier, you must declare a variable in a separate statement before you pass it as an <code>out</code> argument. The following example declares a variable named <code>number</code> before it is passed to the [Int32.TryParse](xref:System.Int32.TryParse(System.String,@System.Int32) method, which attempts to convert a string to a number.</p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsMethodParams#5\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string value = &quot;1640&quot;;\n\n      int number;\n      if (Int32.TryParse(value, out number))\n         Console.WriteLine($&quot;Converted &#39;{value}&#39; to {number}&quot;);\n      else\n         Console.WriteLine($&quot;Unable to convert &#39;{value}&#39;&quot;);   \n   }\n}\n// The example displays the following output:\n//       Converted &#39;1640&#39; to 1640\n\n\n</code></pre><p>Starting with C# 7, you can declare the <code>out</code> variable in the argument list of the method call, rather than in a separate variable declaration. This produces more compact, readable code, and also prevents you from inadvertently assigning a value to the variable before the method call. The following example is like the previous example, except that it defines the <code>number</code> variable in the call to the [Int32.TryParse](xref:System.Int32.TryParse(System.String,@System.Int32) method.</p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsMethodParams#6\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string value = &quot;1640&quot;;\n\n      if (Int32.TryParse(value, out int number))\n         Console.WriteLine($&quot;Converted &#39;{value}&#39; to {number}&quot;);\n      else\n         Console.WriteLine($&quot;Unable to convert &#39;{value}&#39;&quot;);   \n   }\n}\n// The example displays the following output:\n//       Converted &#39;1640&#39; to 1640\n\n\n</code></pre><p>In the previous example, the <code>number</code> variable is strongly typed as an <code>int</code>. You can also declare an implicitly typed local variable, as the following example does.</p>\n<pre><code class=\"lang-cs\" name=\"csrefKeywordsMethodParams#7\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string value = &quot;1640&quot;;\n\n      if (Int32.TryParse(value, out var number))\n         Console.WriteLine($&quot;Converted &#39;{value}&#39; to {number}&quot;);\n      else\n         Console.WriteLine($&quot;Unable to convert &#39;{value}&#39;&quot;);   \n   }\n}\n// The example displays the following output:\n//       Converted &#39;1640&#39; to 1640\n\n\n</code></pre><h2 id=\"c-language-specification\">C# Language Specification</h2>\n<p> For more information, see the <a href=\"../language-specification\" data-linktype=\"relative-path\">C# Language Specification</a>. The language specification is the definitive source for C# syntax and usage.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"../../programming-guide/index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">C# Keywords</a><br> <a href=\"method-parameters\" data-linktype=\"relative-path\">Method Parameters</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"3fce0dc5-03f4-4faa-bd61-36c41bc6baf1\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"9\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/db02e73bf89a00cc4d3bd591bffc3cf091754515/docs/csharp/language-reference/keywords/out-parameter-modifier.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/out-parameter-modifier.md\">\r\n<meta name=\"document_id\" content=\"7fe1888e-8054-dec6-a90c-ef6b263a7af3\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"out parameter modifier (C# Reference) | Microsoft Docs","ms.assetid":"3fce0dc5-03f4-4faa-bd61-36c41bc6baf1","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":9,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["parameters [C#], out","out parameters [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"rpetrusha","author_email":"ronpet@microsoft.com","committer_name":"rpetrusha","comitter_email":"ronpet@microsoft.com","message":"Addressed review comments","commit_sha":"db02e73bf89a00cc4d3bd591bffc3cf091754515","commit_date":"2017-03-06 15:58:04 -0800"},{"author_name":"rpetrusha","author_email":"ronpet@microsoft.com","committer_name":"rpetrusha","comitter_email":"ronpet@microsoft.com","message":"Fixed alert.","commit_sha":"b6dbb0549db3d0b925a3643dd82de9bc6635555e","commit_date":"2017-02-28 12:49:49 -0800"},{"author_name":"rpetrusha","author_email":"ronpet@microsoft.com","committer_name":"rpetrusha","comitter_email":"ronpet@microsoft.com","message":"Fixed one more broken link.","commit_sha":"a8f8c21a87036cbaa1694960a28926a36aeef18d","commit_date":"2017-02-28 12:45:05 -0800"},{"author_name":"rpetrusha","author_email":"ronpet@microsoft.com","committer_name":"rpetrusha","comitter_email":"ronpet@microsoft.com","message":"Corrected bad code example links.","commit_sha":"c217c092d5bf2ace8d1935500a7c2cdc150024e7","commit_date":"2017-02-28 12:05:27 -0800"},{"author_name":"rpetrusha","author_email":"ronpet@microsoft.com","committer_name":"rpetrusha","comitter_email":"ronpet@microsoft.com","message":"Revised out parameter modifier for C# 7","commit_sha":"4fa46d5aa8d46c8c9c106a058ff2ebee69e71313","commit_date":"2017-02-28 09:49:00 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/rpetrusha","display_name":"rpetrusha","id":"10886961"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/db02e73bf89a00cc4d3bd591bffc3cf091754515/docs/csharp/language-reference/keywords/out-parameter-modifier.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/language-reference/keywords/out-parameter-modifier.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/language-reference/keywords/out-parameter-modifier.md","document_id":"7fe1888e-8054-dec6-a90c-ef6b263a7af3","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/out-parameter-modifier","toc_asset_id":"articles/csharp/language-reference/keywords/toc.json","toc_rel":"toc.json","_op_ogTitle":"out parameter modifier (C# Reference)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":802,"_op_rawTitle":"<h1 id=\"out-parameter-modifier-c-reference\" sourcefile=\"docs/csharp/language-reference/keywords/out-parameter-modifier.md\" sourcestartlinenumber=\"32\" sourceendlinenumber=\"32\">out parameter modifier (C# Reference)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/language-reference/keywords/out-parameter-modifier","fileRelativePath":"articles/csharp/language-reference/keywords/out-parameter-modifier.html"},"themesRelativePathToOutputRoot":"_themes/"}