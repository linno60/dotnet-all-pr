{"content":"<div><div class=\"content\">\n<p>A class library defines types and methods that can be called from any application. A class library developed using .NET Core supports the .NET Standard Library, which allows your library to be called by any .NET platform that supports that version of the .NET Standard Library. When you finish your class library, you can decide whether you want to distribute it as a third-party component, or whether you want to include it as a component that is bundled with one or more applications.</p>\n<div class=\"NOTE\"><h5>Note</h5><p>For a list of the .NET Standard versions and the platforms they support, see <a href=\"../../standard/library\" data-linktype=\"relative-path\">.NET Standard Library</a>.</p>\n</div>\n<p>In this topic, we&#39;ll create a simple utility library that contains a single string-handling method. We&#39;ll implement it as an <a href=\"../programming-guide/classes-and-structs/extension-methods\" data-linktype=\"relative-path\">extension method</a> so that it can be called as if it were a member of the <a class=\"xref\" href=\"../../../api/system.string\" data-linktype=\"relative-path\">String</a> class.</p>\n<h2 id=\"creating-a-class-library-solution\">Creating a class library solution</h2>\n<p>Let&#39;s start by creating a solution for our class library project and its related projects. A Visual Studio Solution just serves as a container for one or more projects. To create the solution:</p>\n<ol>\n<li><p>On the Visual Studio menu bar, choose <strong>File</strong>, <strong>New</strong>, <strong>Project</strong>.</p>\n</li>\n<li><p>In the <strong>New Projects</strong> dialog, expand the <strong>Other Project Types</strong> node, and choose <strong>Visual Studio Solutions</strong>, as the following figure shows.</p>\n<p><img src=\"media/solution.jpg\" alt=\"Image\" data-linktype=\"relative-path\"></p>\n</li>\n<li><p>Name the solution &quot;ClassLibraryProjects&quot;, and choose the <strong>OK</strong> button. The following figure shows the result.</p>\n<p><img src=\"media/vs_with_solution.jpg\" alt=\"Image\" data-linktype=\"relative-path\"></p>\n</li>\n</ol>\n<h2 id=\"creating-the-class-library-project\">Creating the class library project</h2>\n<p>Now we can create our class library project:</p>\n<ol>\n<li><p>In <strong>Solution Explorer</strong>, open the context menu for the <strong>ClassLibraryProjects</strong> node and choose <strong>Add</strong>, <strong>New Project</strong>.</p>\n</li>\n<li><p>In the <strong>Add New Project</strong> dialog, choose the <strong>.NET Core</strong> node, then choose the <strong>Class Library (.NET Standard)</strong> project template.</p>\n</li>\n<li><p>In the <strong>Name</strong> text box, enter &quot;StringLibrary&quot; as the name of the project, as the following figure shows.</p>\n<p><img src=\"media/lib_project.jpg\" alt=\"Image\" data-linktype=\"relative-path\"></p>\n</li>\n<li><p>Choose <strong>OK</strong> to create the class library project. The following figure shows the result.</p>\n<p><img src=\"media/class_library.jpg\" alt=\"Image\" data-linktype=\"relative-path\"></p>\n</li>\n<li><p>Replace the code in the code window with the following code:</p>\n<pre><code class=\"lang-csharp\" name=\"ClassLib#1\">using System;\n\nnamespace UtilityLibraries\n{\n    public static class StringLibrary\n    {\n        public static bool StartsWithUpper(this String str)\n        {\n            if (String.IsNullOrWhiteSpace(str))\n                return false;\n\n            Char ch = str[0];\n            return Char.IsUpper(ch);\n        }\n    }\n}\n</code></pre><p>The class library, <code>UtilityLibraries.StringLibrary</code>, contains a method named <code>StartsWithUpper</code>, which returns a <a class=\"xref\" href=\"../../../api/system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the current string instance begins with an uppercase character. Which characters are uppercase is defined by the Unicode standard. In .NET Core, the <a class=\"xref\" href=\"../../../api/system.char#System_Char_IsUpper_System_Char_\" data-linktype=\"relative-path\">Char.IsUpper</a> method returns <code>true</code> if a character is uppercase.</p>\n</li>\n<li><p>On the menu bar, choose <strong>Build</strong>, <strong>Build Solution</strong>. The project should compile without error.</p>\n</li>\n</ol>\n<h2 id=\"the-next-step\">The next step</h2>\n<p>So far, we&#39;ve successfully built the library. But because we haven&#39;t called any of its methods, we don&#39;t know whether it works as expected. The next step in developing our library is to test it by using a <a href=\"testing-library-with-visual-studio\" data-linktype=\"relative-path\">C# Unit Test Project</a>.</p>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"csharp\">\r\n<meta name=\"ms.assetid\" content=\"c849ca26-6a25-4d35-9544-f343af88e0e7\">\r\n<meta name=\"description\" content=\"Learn how to build a class library written in C# using Visual Studio 2017\">\r\n<meta name=\"keywords\" content=\".NET Core, .NET Standard class library, Visual Studio 2017\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"11/16/2016\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net-core\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/594f8bfc6ab944d56d0249d05b99bb6fc209666c/docs/csharp/getting-started/library-with-visual-studio-2017.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/getting-started/library-with-visual-studio-2017.md\">\r\n<meta name=\"document_id\" content=\"f12cb80f-7d8c-4671-a329-505bdfaf6e70\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Building a class library with C# and .NET Core in Visual Studio 2017 | Microsoft Docs","ms.devlang":"csharp","ms.assetid":"c849ca26-6a25-4d35-9544-f343af88e0e7","description":"Learn how to build a class library written in C# using Visual Studio 2017","keywords":".NET Core, .NET Standard class library, Visual Studio 2017","ms.topic":"article","ms.date":"11/16/2016","ms.technology":"devlang-csharp","ms.prod":".net-core","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Maira Wenzel","comitter_email":"mairaw@microsoft.com","message":"bringing changes back","commit_sha":"594f8bfc6ab944d56d0249d05b99bb6fc209666c","commit_date":"2017-03-06 12:01:31 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"reverting merge (#1447)","commit_sha":"a8019c9fc25ef458aa555743e61cd83a3beb11ed","commit_date":"2017-01-24 07:04:28 -0800"},{"author_name":"rpetrusha","author_email":"ronpet@microsoft.com","committer_name":"rpetrusha","comitter_email":"ronpet@microsoft.com","message":"Removed RC from Visual Studio 2017 product name","commit_sha":"21de50320db3399a80602b4e862cb54c71043e0d","commit_date":"2017-01-18 12:58:36 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Absolute urls and other fixes (#1281)","commit_sha":"f7dffe4885b331cec8d37f3cc5c9163f69c3b4c9","commit_date":"2016-11-22 12:57:26 -0800"},{"author_name":"Bill Wagner","author_email":"wiwagn@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Fix broken connect links (#1250)","commit_sha":"d6ce9e3dd3c1189f35d147d140bb45095b3d77a5","commit_date":"2016-11-16 16:00:06 -0500"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"},{"profile_url":"https://github.com/rpetrusha","display_name":"rpetrusha","id":"10886961"},{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/594f8bfc6ab944d56d0249d05b99bb6fc209666c/docs/csharp/getting-started/library-with-visual-studio-2017.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/getting-started/library-with-visual-studio-2017.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/getting-started/library-with-visual-studio-2017.md","document_id":"f12cb80f-7d8c-4671-a329-505bdfaf6e70","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/getting-started/library-with-visual-studio-2017","toc_asset_id":"articles/csharp/getting-started/toc.json","toc_rel":"toc.json","_op_ogTitle":"Building a class library with C# and .NET Core in Visual Studio 2017","_op_displayDate":"2016-11-16","_op_displayDate_source":"2016-11-16T00:00:00Z","_op_wordCount":451,"_op_rawTitle":"<h1 id=\"building-a-class-library-with-c-and-net-core-in-visual-studio-2017\" sourcefile=\"docs/csharp/getting-started/library-with-visual-studio-2017.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Building a class library with C# and .NET Core in Visual Studio 2017</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/getting-started/library-with-visual-studio-2017","fileRelativePath":"articles/csharp/getting-started/library-with-visual-studio-2017.html"},"themesRelativePathToOutputRoot":"_themes/"}