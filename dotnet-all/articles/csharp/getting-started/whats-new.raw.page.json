{"content":"<div><div class=\"content\">\n<p>This page lists key feature names for each version of C# with descriptions of the new and enhanced features in the lastest version of the language.  </p>\n<h2 id=\"previous-versions\">Previous Versions</h2>\n<p> C# 1, Visual Studio .NET 2002<br> First release  </p>\n<p> C# 1.1, Visual Studio .NET 2003<br> <code>#line</code> pragma and xml doc comments  </p>\n<p> C# 2, Visual Studio .NET 2005<br> Anonymous methods, generics, nullable types, iterators/yield, <code>static</code> classes, co/contra variance for delegates  </p>\n<p> C# 3, Visual Studio .NET 2008<br> Object and collection initializers, lambda expressions, extension methods, anonymous types, automatic properties, Language Integrated Query (LINQ), anonymous types, local <code>var</code> type inference, LINQ  </p>\n<p> C# 4, Visual Studio .NET 2010<br> <code>Dynamic</code>, named arguments, optional parameters, generic co/contra variance  </p>\n<p> C# 5, Visual Studio .NET 2012<br> <code>Async</code> / <code>await</code>, caller information attributes  </p>\n<p> Visual Studio .NET 2013<br> Bug fixes, performance improvements, and technology previews of .NET Compiler Platform (“Roslyn”)  </p>\n<p> C# 6, Visual Studio .NET 2015<br> Current version, see below  </p>\n<h2 id=\"current-version\">Current Version</h2>\n<p> <a href=\"../language-reference/keywords/nameof\" data-linktype=\"relative-path\">nameof</a><br> You can get the unqualified string name of a type or member for use in an error message without hard coding a string.  This allows your code to remain correct when refactoring.  This feature is also useful for hooking up model-view-controller MVC links and firing property changed events.  </p>\n<p> <a href=\"../language-reference/keywords/interpolated-strings\" data-linktype=\"relative-path\">String Interpolation</a><br> You can use string interpolation expressions to construct strings.  An interpolated string expression looks like a template string that contains expressions.  C# creates a string by replacing the expressions with the ToString represenations of the expressions’ results.  An interpolated string is easier to understand with respect to arguments than <a href=\"http://msdn.microsoft.com/library/87b7d528-73f6-43c6-b71a-f23043039a49\" data-linktype=\"external\">Composite Formatting</a>.  </p>\n<p> <a href=\"../language-reference/operators/null-conditional-operators\" data-linktype=\"relative-path\">Null-conditional Member Access and Indexing</a><br> You can test for null in a very light syntactic way before performing a member access (<code>?.</code>) or index (<code>?[]</code>) operation.  These operators help you write less code to handle null checks, especially for descending into data structures.  If the left operand or object reference is null, the operations returns null.  </p>\n<p> <a href=\"../programming-guide/classes-and-structs/object-and-collection-initializers\" data-linktype=\"relative-path\">Index Initializers</a><br> You can now initialize specific elements of a collection that supports indexing, such as initializing a dictionary.  </p>\n<p> <a href=\"../programming-guide/classes-and-structs/object-and-collection-initializers\" data-linktype=\"relative-path\">Collection Initializer and Add Extension Methods</a><br> You can use initializers for collections now when the collection has an Add Extension method.  Previously the Add method had to be an instance method.  </p>\n<p> <strong>Overload Resolution</strong><br> The compiler has improved overload resolution that results in more code just working the way you would expect it to behave.  One place where you might stop noticing a problem is when choosing between overloads taking nullable value types, or when passing method groups (instead of lambdas) to overloads that take delegates.  </p>\n<p> <a href=\"../language-reference/keywords/try-catch\" data-linktype=\"relative-path\">Exception Filters</a><br> You can use exception filers in <code>catch</code> clauses to determine whether a catch clause should handle the exception.  Without this feature, you have to rethrow the exception, which clips the call stack reported in the rethrown exception.  </p>\n<p> <a href=\"../language-reference/keywords/try-catch\" data-linktype=\"relative-path\">Await in Catch and Finally Blocks</a><br> You can use <code>await</code> in <code>catch</code> and <code>finally</code> clauses.  </p>\n<p> <a href=\"../programming-guide/classes-and-structs/auto-implemented-properties\" data-linktype=\"relative-path\">Auto-property Initializers</a><br> You can initialize auto-properties now similarly to how you initialize fields.  </p>\n<p> <a href=\"../programming-guide/classes-and-structs/auto-implemented-properties\" data-linktype=\"relative-path\">Getter-only Auto-properites</a><br> You can define read-only auto-properties now without having to define a property with complete property syntax.  You can initialize the property where you declare it or in the type’s constructor.  </p>\n<p> <strong>Function Members with Expression Bodies</strong><br> You can declare members with expression-bodies of code in the same lightweight syntax you use with lambda expressions.  See <a href=\"../programming-guide/classes-and-structs/methods\" data-linktype=\"relative-path\">Methods</a>, <a href=\"../programming-guide/classes-and-structs/properties\" data-linktype=\"relative-path\">Properties</a>, <a href=\"../programming-guide/indexers/index\" data-linktype=\"relative-path\">Indexers</a>, and <a href=\"../programming-guide/statements-expressions-operators/overloadable-operators\" data-linktype=\"relative-path\">Overloadable Operators</a>.  </p>\n<p> <a href=\"../language-reference/keywords/using-directive\" data-linktype=\"relative-path\">Using Static</a><br> You can import accessible static members of static types so that you can refer to the members without qualifying the access with the type’s name.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"https://docs.microsoft.com/visualstudio/ide/what-s-new-in-visual-studio-2015\" data-linktype=\"external\">What&#39;s New in Visual Studio 2015</a></p>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"9f18dc26-27fa-4603-a639-b573f07a117b\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"39\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/getting-started/whats-new.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/getting-started/whats-new.md\">\r\n<meta name=\"document_id\" content=\"cb212e11-9e12-bb0a-0d1e-20df335d0fcf\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"What&#39;s New for Visual C# | Microsoft Docs","ms.assetid":"9f18dc26-27fa-4603-a639-b573f07a117b","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":39,"ms.topic":"article","dev_langs":["csharp"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Absolute urls and other fixes (#1281)","commit_sha":"f7dffe4885b331cec8d37f3cc5c9163f69c3b4c9","commit_date":"2016-11-22 12:57:26 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/getting-started/whats-new.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/getting-started/whats-new.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/getting-started/whats-new.md","document_id":"cb212e11-9e12-bb0a-0d1e-20df335d0fcf","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/getting-started/whats-new","toc_asset_id":"articles/csharp/getting-started/toc.json","toc_rel":"toc.json","_op_ogTitle":"What&#39;s New for Visual C#","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":573,"_op_rawTitle":"<h1 id=\"what39s-new-for-visual-c\" sourcefile=\"docs/csharp/getting-started/whats-new.md\" sourcestartlinenumber=\"29\" sourceendlinenumber=\"29\">What&#39;s New for Visual C</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/getting-started/whats-new","fileRelativePath":"articles/csharp/getting-started/whats-new.html"},"themesRelativePathToOutputRoot":"_themes/"}