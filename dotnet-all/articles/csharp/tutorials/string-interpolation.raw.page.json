{"content":"<div><div class=\"content\">\n<p>String Interpolation is the way that placeholders in a string are replaced by the value of a string variable. Before C# 6, the way to do this is with <code>System.String.Format</code>. This works okay, but since it uses numbered placeholders, it can be harder to read and more verbose.</p>\n<p>Other programming languages have had string interpolation built into the language for a while. For instance, in PHP:</p>\n<pre class=\"loading\"><code class=\"lang-php\">$name = &quot;Jonas&quot;;\necho &quot;My name is $name.&quot;;\n// This will output &quot;My name is Jonas.&quot;\n</code></pre><p>In C# 6, we finally have that style of string interpolation. You can use a <code>$</code> before a string to indicate that it should substitute variables/expressions for their values.</p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>You’ll need to set up your machine to run .NET core. You can find the\ninstallation instructions on the <a href=\"https://www.microsoft.com/net/core\" data-linktype=\"external\">.NET Core</a>\npage.\nYou can run this application on Windows, Ubuntu Linux, macOS or in a Docker container. \nYou’ll need to install your favorite code editor. The descriptions below\nuse <a href=\"https://code.visualstudio.com/\" data-linktype=\"external\">Visual Studio Code</a> which is an open\nsource, cross platform editor. However, you can use whatever tools you are\ncomfortable with.</p>\n<h2 id=\"create-the-application\">Create the Application</h2>\n<p>Now that you&#39;ve installed all the tools, create a new .NET Core\napplication. To use the command line generator, create a directory for your project, such as <code>interpolated</code>, and execute the following command in your favorite shell:</p>\n<pre class=\"loading\"><code>dotnet new console\n</code></pre><p>This command will create a barebones .NET core project with a project file, <em>interpolated.csproj</em>, and a source code file, <em>Program.cs</em>. You will need to execute <code>dotnet restore</code> to restore the dependencies needed to compile this project.</p>\n<p>To execute the program, use <code>dotnet run</code>. You should see &quot;Hello, World&quot; output to the console.</p>\n<h2 id=\"intro-to-string-interpolation\">Intro to String Interpolation</h2>\n<p>With <code>System.String.Format</code>, you specify &quot;placeholders&quot; in a string that are replaced by the parameters following the string. For instance:</p>\n<pre><code class=\"lang-csharp\" name=\"String.Format example\">var firstName = &quot;Matt&quot;;\nvar lastName = &quot;Groves&quot;;\nvar str = String.Format(&quot;My name is {0} {1}&quot;, firstName, lastName);\nConsole.WriteLine(str);\n</code></pre><p>That will output &quot;My name is Matt Groves&quot;.</p>\n<p>In C# 6, instead of using <code>String.Format</code>, you define an interpolated string by prepending it with the <code>$</code> symbol, and then using the variables directly in the string. For instance:</p>\n<pre><code class=\"lang-csharp\" name=\"Interpolation example\">var firstName = &quot;Matt&quot;;\nvar lastName = &quot;Groves&quot;;\nvar str = $&quot;My name is {firstName} {lastName}&quot;;\nConsole.WriteLine(str);\n</code></pre><p>You don&#39;t have to use just variables. You can use any expression within the brackets. For instance:</p>\n<pre><code class=\"lang-csharp\" name=\"Interpolation expression example\">for(var i = 0; i &lt; 5; i++) {\n    Console.WriteLine($&quot;This is line number {i + 1}&quot;);\n}\n</code></pre><p>Which would output:</p>\n<pre class=\"loading\"><code>This is line number 1\nThis is line number 2\nThis is line number 3\nThis is line number 4\nThis is line number 5\n</code></pre><h2 id=\"how-string-interpolation-works\">How string interpolation works</h2>\n<p>Behind the scenes, this string interpolation syntax is translated into String.Format by the compiler. So, you can do the <a href=\"https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110).aspx\" data-linktype=\"external\">same type of stuff you&#39;ve done before with String.Format</a>.</p>\n<p>For instance, you can add padding and numeric formatting:</p>\n<pre><code class=\"lang-csharp\" name=\"Interpolation formatting example\">var rand = new Random();\nfor(var i = 998; i &lt; 1005; i++)\n{\n    var randomDecimal = rand.NextDouble() * 10000;\n    Console.WriteLine($&quot;{i, -10} {randomDecimal, 6:N2}&quot;);\n}\n</code></pre><p>The above would output something like:</p>\n<pre class=\"loading\"><code>998        5,177.67\n999        6,719.30\n1000       9,910.61\n1001       529.34\n1002       1,349.86\n1003       2,660.82\n1004       6,227.77\n</code></pre><p>If a variable name is not found, then a compile time error will be generated.</p>\n<p>For instance:</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">var animal = &quot;fox&quot;;\nvar localizeMe = $&quot;The {adj} brown {animal} jumped over the lazy {otheranimal}&quot;;\nvar adj = &quot;quick&quot;;\nConsole.WriteLine(localizeMe);\n</code></pre><p>If you compile this, you&#39;ll get errors:</p>\n<ul>\n<li><code>Cannot use local variable &#39;adj&#39; before it is declared</code> - the <code>adj</code> variable wasn&#39;t declared until <em>after</em> the interpolated string.</li>\n<li><code>The name &#39;otheranimal&#39; does not exist in the current context</code> - a variable called <code>otheranimal</code> was never even declared</li>\n</ul>\n<h2 id=\"localization-and-internationalization\">Localization and Internationalization</h2>\n<p>An interpolated string supports <code>IFormattable</code> and <code>FormattableString</code>, which can be useful for internationalization.</p>\n<p>By default, an interpolated string uses the current culture. To use a different culture, you could cast it as <code>IFormattable</code></p>\n<p>For instance:</p>\n<pre><code class=\"lang-csharp\" name=\"Interpolation internationalization example\">var birthday = new DateTime(1980, 1, 29);\nConsole.WriteLine($&quot;My birthday is {birthday}&quot;);\n// This outputs &quot;My birthday is 1/29/1980 12:00:00 AM&quot;\n\nvar birthdayFormattable = (IFormattable)$&quot;My birthday is {birthday}&quot;;\nConsole.WriteLine(birthdayFormattable.ToString(null, new CultureInfo(&quot;fr-FR&quot;)));\n// This outputs &quot;My birthday is 29/01/1980 00:00:00&quot;\n</code></pre><h2 id=\"conclusion\">Conclusion</h2>\n<p>In this tutorial, you learned how to use string interpolation features of C# 6. It&#39;s basically a more concise way of writing simple <code>String.Format</code> statements, with some caveats for more advanced uses of it.</p>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"mgroves\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"ms.devlang\" content=\"csharp\">\r\n<meta name=\"ms.assetid\" content=\"f8806f6b-3ac7-4ee6-9b3e-c524d5301ae9\">\r\n<meta name=\"description\" content=\"Learn how string interpolation works in C# 6\">\r\n<meta name=\"keywords\" content=\".NET, .NET Core, C#, string\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"03/06/2017\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:46 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/400dfda51d978f35c3995f90840643aaff1b9c13/docs/csharp/tutorials/string-interpolation.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/tutorials/string-interpolation.md\">\r\n<meta name=\"document_id\" content=\"118dadbb-bca9-9ce8-e64e-49cd40549829\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"mgroves","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","uhfHeaderId":"MSDocsHeader-DotNet","title":"String Interpolation | Microsoft Docs","ms.devlang":"csharp","ms.assetid":"f8806f6b-3ac7-4ee6-9b3e-c524d5301ae9","description":"Learn how string interpolation works in C# 6","keywords":".NET, .NET Core, C#, string","ms.topic":"article","ms.date":"03/06/2017","ms.technology":"devlang-csharp","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"tompratt-AQ","author_email":"v-thprat@microsoft.com","committer_name":"Maira Wenzel","comitter_email":"mairaw@microsoft.com","message":"Update language identifiers and styleguide. (#1796)","commit_sha":"400dfda51d978f35c3995f90840643aaff1b9c13","commit_date":"2017-03-24 14:01:03 -0700"},{"author_name":"Luke Latham","author_email":"GuardRex@users.noreply.github.com","committer_name":"Maira Wenzel","comitter_email":"mairaw@microsoft.com","message":"dotnet new updates for MSBuild/csproj (#1649)","commit_sha":"abd4eadaede26fe144b5d8f249dd9b334e5a567f","commit_date":"2017-03-07 01:09:15 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Merge branch 'master' into csproj","commit_sha":"e93d2b0350f16865a6e74e3758ed29a315e7c192","commit_date":"2017-03-04 18:06:39 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"fix metadata section","commit_sha":"01ff1bd72715cf8a00c8368e56360791453f4350","commit_date":"2017-02-17 11:36:48 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Revert \"update getting started for csproj build system.\"","commit_sha":"8fba5c76375763abf90e2e17d3bcc9d0039089f0","commit_date":"2017-02-14 16:56:09 -0800"},{"author_name":"Bill Wagner","author_email":"wiwagn@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"update getting started for csproj build system. (#1541)","commit_sha":"e616713ca82b83807daac4a33a92f26dbe27de91","commit_date":"2017-02-14 12:05:18 -0500"},{"author_name":"Ron Petrusha","author_email":"ronpet@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":"Tutorials revised for *.csproj projects (#1488)","commit_sha":"8e7bde15f951a1f63e3c24937d2e4462ddd3c998","commit_date":"2017-02-04 15:12:57 -0500"},{"author_name":"Sai Wentum","author_email":"Sai.wentum@huskers.unl.edu","committer_name":"Maira Wenzel","comitter_email":"mairaw@microsoft.com","message":"fixed a small typo in the title from 'String Interpolation in C' to 'String Interpolation in C#' (#1410)","commit_sha":"7cc870cc20e692ed8ffef187a63f317e11a184a1","commit_date":"2017-01-15 16:16:34 -0800"},{"author_name":"Bill Wagner","author_email":"wiwagn@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"update metadata and TOC for tutorial (#1340)","commit_sha":"ea7439a3f21738f7fd1de1011468275d8c882336","commit_date":"2016-12-16 14:48:08 -0500"},{"author_name":"Matthew D. Groves","author_email":"me@mgroves.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":"#275 string interpolation tutorial for C# (#1317)","commit_sha":"2da046ab2a6d237930e49117392b8a9f36109f16","commit_date":"2016-12-15 13:47:20 -0500"}],"updated_at":"2017-04-01 05:46 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/mgroves","display_name":"Matthew D. Groves","id":"103484"},"contributors":[{"profile_url":"https://github.com/mgroves","display_name":"Matthew D. Groves"},{"profile_url":"https://github.com/tompratt-AQ","display_name":"tompratt-AQ","id":"26311438"},{"profile_url":"https://github.com/GuardRex","display_name":"Luke Latham","id":"1622880"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"},{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},{"profile_url":"https://github.com/rpetrusha","display_name":"rpetrusha","id":"10886961"},{"profile_url":"https://github.com/smwentum","display_name":"Sai Wentum","id":"4346733"}],"update_at":"4/1/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/400dfda51d978f35c3995f90840643aaff1b9c13/docs/csharp/tutorials/string-interpolation.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/tutorials/string-interpolation.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/tutorials/string-interpolation.md","document_id":"118dadbb-bca9-9ce8-e64e-49cd40549829","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/tutorials/string-interpolation","toc_asset_id":"articles/csharp/tutorials/toc.json","toc_rel":"toc.json","_op_ogTitle":"String Interpolation","_op_displayDate":"2017-3-6","_op_displayDate_source":"2017-03-06T00:00:00Z","_op_wordCount":717,"_op_rawTitle":"<h1 id=\"string-interpolation-in-c\" sourcefile=\"docs/csharp/tutorials/string-interpolation.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">String Interpolation in C#</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/tutorials/string-interpolation","fileRelativePath":"articles/csharp/tutorials/string-interpolation.html"},"themesRelativePathToOutputRoot":"_themes/"}