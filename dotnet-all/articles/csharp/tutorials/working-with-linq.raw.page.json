{"content":"<div><div class=\"content\">\n<h2 id=\"introduction\">Introduction</h2>\n<p>This tutorial teaches you a number of features in .NET Core and the C# language. You’ll learn:</p>\n<ul>\n<li>How to generate sequences with LINQ</li>\n<li>How to write methods that can be easily used in LINQ queries.</li>\n<li>How to distinguish between eager and lazy evaluation.</li>\n</ul>\n<p>You&#39;ll learn these techniques by building an application that demonstrates\none of the basic skills of any magician: the\n<a href=\"https://en.wikipedia.org/wiki/Faro_shuffle\" data-linktype=\"external\">faro shuffle</a>. Briefly,\na faro shuffle is a technique where you split a card deck exactly in half,\nthen the shuffle interleaves each one card from each half to rebuild the\noriginal deck.</p>\n<p>Magicians use this technique because every card is in a known location\nafter each shuffle, and the order is a repeating pattern. </p>\n<p>For our purposes, it is a light hearted look at manipulating sequences\nof data. The application you&#39;ll build will construct a card deck, and\nthen perform a sequence of shuffles, writing the sequence out each time.\nYou&#39;ll also compare the updated order to the original order.</p>\n<p>This tutorial has multiple steps. After each step, you can run the\napplication and see the progress. You can also see the completed\nsample in our <a href=\"https://github.com/dotnet/docs/blob/master/samples/csharp/getting-started/console-linq\" data-linktype=\"external\">GitHub repository.</a></p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>You’ll need to setup your machine to run .NET core. You can find the\ninstallation instructions on the <a href=\"https://www.microsoft.com/net/core\" data-linktype=\"external\">.NET Core</a>\npage. You can run this\napplication on Windows, Ubuntu Linux, OS X or in a Docker container. \nYou’ll need to install your favorite code editor. The descriptions below\nuse <a href=\"https://code.visualstudio.com/\" data-linktype=\"external\">Visual Studio Code</a> which is an open\nsource, cross platform editor. However, you can use whatever tools you are\ncomfortable with.</p>\n<h2 id=\"create-the-application\">Create the Application</h2>\n<p>The first step is to create a new application. Open a command prompt and\ncreate a new directory for your application. Make that the current\ndirectory. Type the command <code>dotnet new console</code> at the command prompt. This\ncreates the starter files for a basic “Hello World” application.</p>\n<p>If you&#39;ve never used C# before, <a href=\"console-teleprompter\" data-linktype=\"relative-path\">this tutorial</a>\nexplains the structure of a C# program. You can read that and then\nreturn here to learn more about LINQ. </p>\n<h2 id=\"creating-the-data-set\">Creating the Data Set</h2>\n<p>Let&#39;s start by creating a deck of cards. You&#39;ll do this using a LINQ\nquery that has two sources (one for the four suits, one for the\nthirteen values). You&#39;ll combine those source into a 52 card deck.</p>\n<p>Here&#39;s the query:</p>\n<pre class=\"loading\"><code class=\"lang-cs\">var startingDeck = from s in Suits()\n                   from r in Ranks()\n                   select new { Suit = s, Rank = r };\n</code></pre><p>The multiple <code>from</code> clauses produce a <code>SelectMany</code>, which creates\na single sequence from combining each element in the first sequence\nwith each element in the second sequence. The order is important\nfor our purposes. The first element in the first source sequence\n(Suits) is combined with every element in the second sequence (Values).\nThis produces all thirteen cards of first suit. That process is repeated\nwith each element in the first sequence (Suits). The end result is a deck of cards\nordered by suits, followed by values.</p>\n<p>Next, you&#39;ll need to build the Suits() and Ranks() methods. Let&#39;s start\nwith a really simple set of <em>iterator methods</em> that generate the sequence\nas an enumerable of strings:</p>\n<pre class=\"loading\"><code class=\"lang-cs\">static IEnumerable&lt;string&gt; Suits()\n{\n    yield return &quot;clubs&quot;;\n    yield return &quot;diamonds&quot;;\n    yield return &quot;hearts&quot;;\n    yield return &quot;spades&quot;;\n}\n\nstatic IEnumerable&lt;string&gt; Ranks()\n{\n    yield return &quot;two&quot;;\n    yield return &quot;three&quot;;\n    yield return &quot;four&quot;;\n    yield return &quot;five&quot;;\n    yield return &quot;six&quot;;\n    yield return &quot;seven&quot;;\n    yield return &quot;eight&quot;;\n    yield return &quot;nine&quot;;\n    yield return &quot;ten&quot;;\n    yield return &quot;jack&quot;;\n    yield return &quot;queen&quot;;\n    yield return &quot;king&quot;;\n    yield return &quot;ace&quot;;\n}\n</code></pre><p>These two methods both utilize the <code>yield return</code> syntax to produce a sequence\nas they run. The compiler builds an object that implements <code>IEnumerable&lt;T&gt;</code>\nand generates the sequence of strings as they are requested.</p>\n<p>Go ahead and run the sample you&#39;ve built at this point. It will display\nall 52 cards in the deck. You may find it very helpful to run this sample\nunder a debugger to observe how the <code>Suits()</code> and <code>Values()</code> methods\nexecute. You can clearly see that each string in each sequence is generated\nonly as it is needed.</p>\n<h2 id=\"manipulating-the-order\">Manipulating the Order</h2>\n<p>Next, let&#39;s build a utility method that can perform the shuffle. The first step\nis to split the deck in two. The <code>Take()</code> and <code>Skip()</code> methods that are\npart of the LINQ APIs provide that feature for us:</p>\n<pre class=\"loading\"><code class=\"lang-cs\">var top = startingDeck.Take(26);\nvar bottom = startingDeck.Skip(26);\n</code></pre><p>The shuffle method doesn&#39;t exist in the standard library, so you&#39;ll have\nto write your own. This new method illustrates several techniques that you&#39;ll\nuse with LINQ-based programs, so let&#39;s explain each part of the method in\nsteps.</p>\n<p>The signature for the method creates an <em>extension method</em>:</p>\n<pre class=\"loading\"><code class=\"lang-cs\">public static IEnumerable&lt;T&gt; InterleaveSequenceWith&lt;T&gt;\n    (this IEnumerable&lt;T&gt; first, IEnumerable&lt;T&gt; second)\n</code></pre><p>An extension method is a special purpose <em>static method.</em>\nYou can see the addition of the <code>this</code> modifier on the first\nargument to the method. That means you call the method as though\nit were a member method of the type of the first argument.</p>\n<p>Extension methods can be declared only inside <code>static</code> classes, so\nlet&#39;s create a new static class called <code>extensions</code> for this functionality.\nYou&#39;ll add more extension methods as you continue this tutorial, and those\nwill be placed in the same class.</p>\n<p>This method declaration also follows a standard idiom where the input and\noutput types are <code>IEnumerable&lt;T&gt;</code>. That practice enables LINQ methods to\nbe chained together to perform more complex queries.</p>\n<pre class=\"loading\"><code class=\"lang-cs\">using System.Collections.Generic;\n\nnamespace LinqFaroShuffle\n{\n    public static class Extensions\n    {\n        public static IEnumerable&lt;T&gt; InterleaveSequenceWith&lt;T&gt;\n            (this IEnumerable&lt;T&gt; first, IEnumerable&lt;T&gt; second)\n        {\n            // implementation coming.\n        }\n    }\n}\n</code></pre><p>You will be enumerating both sequences at once, interleaving the elements,\nand creating one object.  Writing a LINQ method that works with two\nsequences requires that you understand how <code>IEnumerable</code> works.</p>\n<p>The <code>IEnumerable</code> interface has one method: <code>GetEnumerator()</code>. The object\nreturned by <code>GetEnumerator()</code> has a method to move to the next element,\nand a property that retrieves the current element in the sequence. You\nwill use those two members to enumerate the collection and return the\nelements. This Interleave method will be an iterator method, so instead\nof building a collection and returning the collection, you&#39;ll use the \n<code>yield return</code> syntax shown above. </p>\n<p>Here&#39;s the implementation of that method:</p>\n<pre class=\"loading\"><code class=\"lang-cs\">public static IEnumerable&lt;T&gt; InterleaveSequenceWith&lt;T&gt;\n    (this IEnumerable&lt;T&gt; first, IEnumerable&lt;T&gt; second)\n{\n    var firstIter = first.GetEnumerator();\n    var secondIter = second.GetEnumerator();\n    while (firstIter.MoveNext() &amp;&amp; secondIter.MoveNext())\n    {\n        yield return firstIter.Current;\n        yield return secondIter.Current;\n    }\n}\n</code></pre><p>Now that you&#39;ve written this method, go back to the <code>Main</code> method\nand shuffle the deck once:</p>\n<pre class=\"loading\"><code class=\"lang-cs\">public static void Main(string[] args)\n{\n    var startingDeck = from s in Suits()\n                       from r in Ranks()\n                       select new { Suit = s, Rank = r };\n    foreach (var c in startingDeck)\n        Console.WriteLine(c);\n\n    var top = startingDeck.Take(26);\n    var bottom = startingDeck.Skip(26);\n\n    var shuffle = top.InterleaveSequenceWith(bottom);\n    foreach (var c in shuffle)\n        Console.WriteLine(c);\n}\n</code></pre><h2 id=\"comparisons\">Comparisons</h2>\n<p>Let&#39;s see how many shuffles it takes to set the deck back to its\noriginal order. You&#39;ll need to write a method that determines if\ntwo sequences are equal. After you have that method, you&#39;ll need to\nplace the code that shuffles the deck in a loop, and check to see when\nthe deck is back in order.</p>\n<p>Writing a method to determine if the two sequences are equal should\nbe straightforward. It&#39;s a similar structure to the method you wrote\nto shuffle the deck. Only this time, instead of yield returning each\nelement, you&#39;ll compare the matching elements of each sequence. When\nthe entire sequence has been enumerated, if every element matches,\nthe sequences are the same:</p>\n<pre class=\"loading\"><code class=\"lang-cs\">public static bool SequenceEquals&lt;T&gt;(this IEnumerable&lt;T&gt; first, IEnumerable&lt;T&gt; second)\n{\n    var firstIter = first.GetEnumerator();\n    var secondIter = second.GetEnumerator();\n    while (firstIter.MoveNext() &amp;&amp; secondIter.MoveNext())\n    {\n        if (!firstIter.Current.Equals(secondIter.Current))\n            return false;\n    }\n    return true;\n}\n</code></pre><p>This shows a second Linq idiom: terminal methods. They take a sequence as input\n(or in this case, two sequences), and return a single scalar value. These methods,\nwhen they are used, are always the final method of a query. (Hence the name). </p>\n<p>You can see this in action when you use it to determine when the deck\nis back in its original order. Put the shuffle code inside a loop, and stop when\nthe sequence is back in its original order by applying the <code>SequenceEquals()</code>\nmethod. You can see it would always be the final method in any query, because it\nreturns a single value instead of a sequence:</p>\n<pre class=\"loading\"><code class=\"lang-cs\">var times = 0;\nvar shuffle = startingDeck;\ndo\n{\n    shuffle = shuffle.Take(26).InterleaveSequenceWith(shuffle.Skip(26));\n\n    foreach (var c in shuffle)\n        Console.WriteLine(c);\n\n    Console.WriteLine();\n    times++;\n} while (!startingDeck.SequenceEquals(shuffle));\nConsole.WriteLine(times);\n</code></pre><p>Run the sample, and see how the deck rearranges on each shuffle, until\nit returns to its original configuration after 8 iterations.</p>\n<h2 id=\"optimizations\">Optimizations</h2>\n<p>The sample you&#39;ve built so far executes an <em>in shuffle</em>, where the\ntop and bottom cards stay the same on each run. Let&#39;s make one change,\nand run an <em>out shuffle</em>, where all 52 cards change position. For an out shuffle,\nyou interleave the deck so that the first card in the bottom half becomes the\nfirst card in the deck. That means the last card in the top half becomes the bottom\ncard. That&#39;s just a one line change. Update the call to shuffle to change the order\nof the top and bottom halves of the deck:</p>\n<pre class=\"loading\"><code class=\"lang-cs\">shuffle = shuffle.Skip(26).InterleaveSequenceWith(shuffle.Take(26));\n</code></pre><p>Run the program again, and you&#39;ll see that it takes 52 iterations for the\ndeck to reorder itself. You&#39;ll also start to notice some serious performance degradations\nas the program continues to run.</p>\n<p>There are a number of reasons for this. Let&#39;s tackle one of the major causes: inefficient\nuse of <em>lazy evaluation</em>.</p>\n<p>LINQ queries are evaluated lazily. The sequences are generated only as the elements are requested.\nUsually, that&#39;s a major benefit of LINQ. However, in a use such as this program, this causes\nexponential growth in execution time.</p>\n<p>The original deck was generated using a LINQ query. Each shuffle is generated by performing three\nLINQ queries on the previous deck. All these are performed lazily. That also means they are performed\nagain each time the sequence is requested. By the time you get to the 52nd iteration, you&#39;re regenerating\nthe original deck many, many times. Let&#39;s write a log to demonstrate this behavior. Then, you&#39;ll fix it.</p>\n<p>Here&#39;s a log method that can be appended to any query to mark that the query executed.</p>\n<pre class=\"loading\"><code class=\"lang-cs\">public static IEnumerable&lt;T&gt; LogQuery&lt;T&gt;(this IEnumerable&lt;T&gt; sequence, string tag)\n{\n    using (var writer = File.AppendText(&quot;debug.log&quot;))\n    {\n        writer.WriteLine($&quot;Executing Query {tag}&quot;);\n    }\n    return sequence;\n}\n</code></pre><p>Next, instrument the definition of each query with a log message:</p>\n<pre class=\"loading\"><code class=\"lang-cs\">public static void Main(string[] args)\n{\nvar startingDeck = (from s in Suits().LogQuery(&quot;Suit Generation&quot;)\n                    from r in Ranks().LogQuery(&quot;Rank Generation&quot;)\n                    select new { Suit = s, Rank = r }).LogQuery(&quot;Starting Deck&quot;);\n    foreach (var c in startingDeck)\n        Console.WriteLine(c);\n\n    Console.WriteLine();\n    var times = 0;\n    var shuffle = startingDeck;\n    do\n    {\n        //shuffle = shuffle.Take(26).LogQuery(&quot;Top Half&quot;)\n        //    .InterleaveSequenceWith(shuffle.Skip(26).LogQuery(&quot;Bottom Half&quot;)).LogQuery(&quot;Shuffle&quot;);\n\n        shuffle = shuffle.Skip(26).LogQuery(&quot;Bottom Half&quot;)\n            .InterleaveSequenceWith(shuffle.Take(26).LogQuery(&quot;Top Half&quot;)).LogQuery(&quot;Shuffle&quot;);\n\n        foreach (var c in shuffle)\n            Console.WriteLine(c);\n        times++;\n        Console.WriteLine(times);\n    } while (!startingDeck.SequenceEquals(shuffle));\n    Console.WriteLine(times);\n}\n</code></pre><p>Notice that you don&#39;t log every time you access a query. You log only when you create\nthe original query. The program still takes a long time to run, but now you can see why.\nIf you run out of patience running the outer shuffle with logging turned on, switch back\nto the inner shuffle. You&#39;ll still see the lazy evaluation effects. In one run, it executes\n2592 queries, including all the value and suit generation.</p>\n<p>There is an easy way to update this program to avoid all those executions. There are \nLINQ methods <code>ToArray()</code> and <code>ToList()</code> that cause the query to run, and store the results\nin an array or a list, respectively. You use these methods to cache the data results of a query\nrather than execute the source query again.  Append the queries that generate the card decks\nwith a call to <code>ToArray()</code> and run the query again:</p>\n<pre class=\"loading\"><code class=\"lang-cs\">public static void Main(string[] args)\n{\nvar startingDeck = (from s in Suits().LogQuery(&quot;Suit Generation&quot;)\n                    from v in Ranks().LogQuery(&quot;Rank Generation&quot;)\n                    select new { Suit = s, Rank = r })\n                    .LogQuery(&quot;Starting Deck&quot;)\n                    .ToArray();\n    foreach (var c in startingDeck)\n        Console.WriteLine(c);\n\n    Console.WriteLine();\n    var times = 0;\n    var shuffle = startingDeck;\n    do\n    {\n        shuffle = shuffle.Take(26).LogQuery(&quot;Top Half&quot;)\n            .InterleaveSequenceWith(shuffle.Skip(26).LogQuery(&quot;Bottom Half&quot;)).LogQuery(&quot;Shuffle&quot;).ToArray();\n\n        //shuffle = shuffle.Skip(26).LogQuery(&quot;Bottom Half&quot;)\n        //    .InterleaveSequenceWith(shuffle.Take(26).LogQuery(&quot;Top Half&quot;)).LogQuery(&quot;Shuffle&quot;);\n\n        foreach (var c in shuffle)\n            Console.WriteLine(c);\n        times++;\n        Console.WriteLine(times);\n    } while (!startingDeck.SequenceEquals(shuffle));\n    Console.WriteLine(times);\n}\n</code></pre><p>Run again, and the inner shuffle is down to 30 queries. Run again with the outer shuffle\nand you&#39;ll see similar improvements. (It now executes 162 queries).</p>\n<p>Don&#39;t misinterpret this example by thinking that all queries should run\neagerly. This example is designed to highlight the use cases where lazy\nevaluation can cause performance difficulties. That&#39;s because each new\narrangement of the deck of cards is built from the previous arrangement.\nUsing lazy evaluation means each new deck configuration is built from\nthe original deck, even executing the code that built the <code>startingDeck</code>.\nThat causes a large amount of extra work. </p>\n<p>In practice, some algorithms run much better using eager evaluation, and others run much\nbetter using lazy evaluation. (In general, lazy evaluation is a much better choice\nwhen the data source is a separate process, like a database engine. In those cases,\nlazy evaluation enables more complex queries to execute only one round trip to the\ndatabase process.) LINQ enables both lazy and eager evaluation. Measure, and pick\nthe best choice.</p>\n<h2 id=\"preparing-for-new-features\">Preparing for New Features</h2>\n<p>The code you&#39;ve written for this sample is an example of creating a simple prototype that does the\njob. This is a great way to explore a problem space, and for many features, it may be\nthe best permanent solution. You&#39;ve leveraged <em>anonymous types</em> for the cards, and each\ncard is represented by strings.</p>\n<p><em>Anonymous Types</em> have many productivity advantages. You don&#39;t need to define a class yourself\nto represent the storage. The compiler generates the type for you. The compiler generated type\nutilizes many of the best practices for simple data objects. It&#39;s <em>immutable</em>, meaning that\nnone of its properties can be changed after it has been constructed. Anonymous types are\ninternal to an assembly, so they aren&#39;t seen as part of the public API for that assembly.\nAnonymous types also contain an override of the <code>ToString()</code> method that returns a formatted\nstring with each of the values.</p>\n<p>Anonymous types also have disadvantages. They don&#39;t have accessible names, so you can&#39;t use\nthem as return values or arguments. You&#39;ll notice that any methods above that used these anonymous\ntypes are generic methods. The override of <code>ToString()</code> may not be what you want as the application\ngrows more features. </p>\n<p>The sample also uses strings for the suit and the rank of each card. That&#39;s quite open ended.\nThe C# type system can help us make better code, by leveraging <code>enum</code> types for those\nvalues.</p>\n<p>Start with the suits. This is a perfect time to use an <code>enum</code>:</p>\n<pre class=\"loading\"><code class=\"lang-cs\">public enum Suit\n{\n    Clubs,\n    Diamonds,\n    Hearts,\n    Spades\n}\n</code></pre><p>The <code>Suits()</code> method also changes type and implementation:</p>\n<pre class=\"loading\"><code class=\"lang-cs\">static IEnumerable&lt;Suit&gt; Suits()\n{\n    yield return Suit.Clubs;\n    yield return Suit.Diamonds;\n    yield return Suit.Hearts;\n    yield return Suit.Spades;\n}\n</code></pre><p>Next, do the same change with the Rank of the cards:</p>\n<pre class=\"loading\"><code class=\"lang-cs\">public enum Rank\n{\n    Two,\n    Three,\n    Four,\n    Five,\n    Six,\n    Seven,\n    Eight,\n    Nine,\n    Ten,\n    Jack,\n    Queen,\n    King,\n    Ace\n}\n</code></pre><p>And the method that generates them:</p>\n<pre class=\"loading\"><code class=\"lang-cs\">static IEnumerable&lt;Rank&gt; Values()\n{\n    yield return Rank.Two;\n    yield return Rank.Three;\n    yield return Rank.Four;\n    yield return Rank.Five;\n    yield return Rank.Six;\n    yield return Rank.Seven;\n    yield return Rank.Eight;\n    yield return Rank.Nine;\n    yield return Rank.Ten;\n    yield return Rank.Jack;\n    yield return Rank.Queen;\n    yield return Rank.King;\n    yield return Rank.Ace;\n}\n</code></pre><p>As one final cleanup, let&#39;s make a type to represent the card, instead of \nrelying on an anonymous type. Anonymous types are great for lightweight,\nlocal types, but in this example, the playing card is one of the main\nconcepts. It should be a concrete type.</p>\n<pre class=\"loading\"><code class=\"lang-cs\">public class PlayingCard\n{\n    public Suit CardSuit { get; }\n    public Rank CardRank { get; }\n\n    public PlayingCard(Suit s, Rank r)\n    {\n        CardSuit = s;\n        CardRank = r;\n    }\n\n    public override string ToString()\n    {\n        return $&quot;{CardRank} of {CardSuit}&quot;;\n    }\n}\n</code></pre><p>This type uses <em>auto-implemented read-only properties</em> which are set\nin the constructor, and then cannot be modified. It also makes use of\nthe new <em>string interpolation</em> feature that makes it easier to format\nstring output.</p>\n<p>Update the query that generates the starting deck to use the new type:</p>\n<pre class=\"loading\"><code class=\"lang-cs\">var startingDeck = (from s in Suits().LogQuery(&quot;Suit Generation&quot;)\n                    from r in Ranks().LogQuery(&quot;Value Generation&quot;)\n                    select new PlayingCard(s, r))\n                    .LogQuery(&quot;Starting Deck&quot;)\n                    .ToArray();\n</code></pre><p>Compile and run again. The output is a little cleaner, and the code is a bit\nmore clear and can be extended more easily.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>This sample should you some of the methods used in LINQ, how to create your\nown methods that will be easily used with LINQ enabled code. It also showed\nyou the differences between lazy and eager evaluation, and the affect that\ndecision can have on performance.</p>\n<p>And, you learned a bit about one magician&#39;s technique. Magician&#39;s use the\nfaro shuffle because they can control where every card moves in the deck.\nIn some tricks, the magician has an audience member place a card on top\nof the deck, and shuffles a few times, knowing where that card goes. Other\nillusions require the deck set a certain way. A magician will set the deck\nprior to performing the trick. Then she will shuffle the deck 5 times\nusing an inner shuffle. On stage, she can show what looks like a random\ndeck, shuffle it 3 more times, and have the deck set exactly how she wants.</p>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc.json\">\r\n<meta name=\"ms.devlang\" content=\"csharp\">\r\n<meta name=\"ms.assetid\" content=\"0db12548-82cb-4903-ac88-13103d70aa77\">\r\n<meta name=\"description\" content=\"This tutorial teaches you how to generate sequences with LINQ, write methods for use in LINQ queries, and distinguish between eager and lazy evaluation.\">\r\n<meta name=\"keywords\" content=\".NET, .NET Core\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"03/06/2017\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-21 01:42 AM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/abd4eadaede26fe144b5d8f249dd9b334e5a567f/docs/csharp/tutorials/working-with-linq.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/csharp/tutorials/working-with-linq.md\">\r\n<meta name=\"document_id\" content=\"394081f2-3bf1-2a0a-295f-88798465213c\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Working with LINQ | Microsoft Docs","ms.devlang":"csharp","ms.assetid":"0db12548-82cb-4903-ac88-13103d70aa77","description":"This tutorial teaches you how to generate sequences with LINQ, write methods for use in LINQ queries, and distinguish between eager and lazy evaluation.","keywords":".NET, .NET Core","ms.topic":"article","ms.date":"03/06/2017","ms.technology":"devlang-csharp","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Luke Latham","author_email":"GuardRex@users.noreply.github.com","committer_name":"Maira Wenzel","comitter_email":"mairaw@microsoft.com","message":"dotnet new updates for MSBuild/csproj (#1649)","commit_sha":"abd4eadaede26fe144b5d8f249dd9b334e5a567f","commit_date":"2017-03-07 01:09:15 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":"renamed repo/fixed headings (#1186)","commit_sha":"15c55a87beb64f265a164db918c7721c7690fadf","commit_date":"2016-10-29 15:23:17 -0400"},{"author_name":"Bill Wagner","author_email":"wiwagn@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Update ci build for ubuntu (#891)","commit_sha":"ce52ada663c2ed9b8b3d10bc3d4dcb453abb79f7","commit_date":"2016-08-09 16:02:13 -0400"},{"author_name":"Bill Wagner","author_email":"wiwagn@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Update Samples section of contributing.md (#796)","commit_sha":"d82a5907ae4405358eccb9fd8b8dd68a3996fc74","commit_date":"2016-07-28 14:26:57 -0400"},{"author_name":"Carlos Muñoz Rodriguez","author_email":"carlosmunozrodriguez@outlook.com","committer_name":"Maira Wenzel","comitter_email":"mairaw@microsoft.com","message":"Fixed some spelling mistakes (#775)","commit_sha":"0d350825e91548a46a53f2e4ba78e881cdd8b8f1","commit_date":"2016-07-10 15:02:46 -0700"},{"author_name":"Tom Dykstra","author_email":"tdykstra@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"move tutorials folder to csharp folder (#704)","commit_sha":"9e4c8eafc7301549383306d9c679015a95f1406f","commit_date":"2016-06-29 12:23:39 -0700"}],"updated_at":"2017-03-21 01:42 AM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/GuardRex","display_name":"Luke Latham","id":"1622880"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"},{"profile_url":"https://github.com/carlosmunozrodriguez","display_name":"Carlos Muñoz Rodriguez","id":"4722957"},{"profile_url":"https://github.com/tdykstra","display_name":"Tom Dykstra","id":"1569635"}],"update_at":"3/21/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/abd4eadaede26fe144b5d8f249dd9b334e5a567f/docs/csharp/tutorials/working-with-linq.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/csharp/tutorials/working-with-linq.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/tutorials/working-with-linq.md","document_id":"394081f2-3bf1-2a0a-295f-88798465213c","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/tutorials/working-with-linq","toc_asset_id":"articles/csharp/tutorials/toc.json","toc_rel":"toc.json","_op_ogTitle":"Working with LINQ","_op_displayDate":"2017-3-6","_op_displayDate_source":"2017-03-06T00:00:00Z","_op_wordCount":2918,"_op_rawTitle":"<h1 id=\"working-with-linq\" sourcefile=\"docs/csharp/tutorials/working-with-linq.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Working with LINQ</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/tutorials/working-with-linq","fileRelativePath":"articles/csharp/tutorials/working-with-linq.html"},"themesRelativePathToOutputRoot":"_themes/"}