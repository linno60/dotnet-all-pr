{"content":"<div><div class=\"content\">\n<p>The group join is useful for producing hierarchical data structures. It pairs each element from the first collection with a set of correlated elements from the second collection.  </p>\n<p> For example, a class or a relational database table named <code>Student</code> might contain two fields: <code>Id</code> and <code>Name</code>. A second class or relational database table named <code>Course</code> might contain two fields: <code>StudentId</code> and <code>CourseTitle</code>. A group join of these two data sources, based on matching <code>Student.Id</code> and <code>Course.StudentId</code>, would group each <code>Student</code> with a collection of <code>Course</code> objects (which might be empty).  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Each element of the first collection appears in the result set of a group join regardless of whether correlated elements are found in the second collection. In the case where no correlated elements are found, the sequence of correlated elements for that element is empty. The result selector therefore has access to every element of the first collection. This differs from the result selector in a non-group join, which cannot access elements from the first collection that have no match in the second collection.  </p>\n</div>\n<p> The first example in this topic shows you how to perform a group join. The second example shows you how to use a group join to create XML elements.  </p>\n<h2 id=\"example\">Example</h2>\n<h3 id=\"group-join-example\">Group join example</h3>\n<p> The following example performs a group join of objects of type <code>Person</code> and <code>Pet</code> based on the <code>Person</code> matching the <code>Pet.Owner</code> property. Unlike a non-group join, which would produce a pair of elements for each match, the group join produces only one resulting object for each element of the first collection, which in this example is a <code>Person</code> object. The corresponding elements from the second collection, which in this example are <code>Pet</code> objects, are grouped into a collection. Finally, the result selector function creates an anonymous type for each match that consists of <code>Person.FirstName</code> and a collection of <code>Pet</code> objects.  </p>\n<pre><code class=\"lang-cs\" name=\"CsLINQProgJoining#5\">class Person\n{\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n}\n\nclass Pet\n{\n    public string Name { get; set; }\n    public Person Owner { get; set; }\n}\n\n/// &lt;summary&gt;\n/// This example performs a grouped join.\n/// &lt;/summary&gt;\npublic static void GroupJoinExample()\n{\n    Person magnus = new Person { FirstName = &quot;Magnus&quot;, LastName = &quot;Hedlund&quot; };\n    Person terry = new Person { FirstName = &quot;Terry&quot;, LastName = &quot;Adams&quot; };\n    Person charlotte = new Person { FirstName = &quot;Charlotte&quot;, LastName = &quot;Weiss&quot; };\n    Person arlene = new Person { FirstName = &quot;Arlene&quot;, LastName = &quot;Huff&quot; };\n\n    Pet barley = new Pet { Name = &quot;Barley&quot;, Owner = terry };\n    Pet boots = new Pet { Name = &quot;Boots&quot;, Owner = terry };\n    Pet whiskers = new Pet { Name = &quot;Whiskers&quot;, Owner = charlotte };\n    Pet bluemoon = new Pet { Name = &quot;Blue Moon&quot;, Owner = terry };\n    Pet daisy = new Pet { Name = &quot;Daisy&quot;, Owner = magnus };\n\n    // Create two lists.\n    List&lt;Person&gt; people = new List&lt;Person&gt; { magnus, terry, charlotte, arlene };\n    List&lt;Pet&gt; pets = new List&lt;Pet&gt; { barley, boots, whiskers, bluemoon, daisy };\n\n    // Create a list where each element is an anonymous type\n    // that contains the person&#39;s first name and a collection of \n    // pets that are owned by them.\n    var query = from person in people\n                join pet in pets on person equals pet.Owner into gj\n                select new { OwnerName = person.FirstName, Pets = gj };\n\n    foreach (var v in query)\n    {\n        // Output the owner&#39;s name.\n        Console.WriteLine(&quot;{0}:&quot;, v.OwnerName);\n        // Output each of the owner&#39;s pet&#39;s names.\n        foreach (Pet pet in v.Pets)\n            Console.WriteLine(&quot;  {0}&quot;, pet.Name);\n    }\n}\n\n// This code produces the following output:\n//\n// Magnus:\n//   Daisy\n// Terry:\n//   Barley\n//   Boots\n//   Blue Moon\n// Charlotte:\n//   Whiskers\n// Arlene:\n</code></pre><h2 id=\"example-1\">Example</h2>\n<h3 id=\"group-join-to-create-xml-example\">Group join to create XML example</h3>\n<p> Group joins are ideal for creating XML by using LINQ to XML. The following example is similar to the previous example except that instead of creating anonymous types, the result selector function creates XML elements that represent the joined objects.  </p>\n<pre><code class=\"lang-cs\" name=\"CsLINQProgJoining#6\">\nclass Person\n{\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n}\n\nclass Pet\n{\n    public string Name { get; set; }\n    public Person Owner { get; set; }\n}\n\n/// &lt;summary&gt;\n/// This example creates XML output from a grouped join.\n/// &lt;/summary&gt;\npublic static void GroupJoinXMLExample()\n{\n    Person magnus = new Person { FirstName = &quot;Magnus&quot;, LastName = &quot;Hedlund&quot; };\n    Person terry = new Person { FirstName = &quot;Terry&quot;, LastName = &quot;Adams&quot; };\n    Person charlotte = new Person { FirstName = &quot;Charlotte&quot;, LastName = &quot;Weiss&quot; };\n    Person arlene = new Person { FirstName = &quot;Arlene&quot;, LastName = &quot;Huff&quot; };\n\n    Pet barley = new Pet { Name = &quot;Barley&quot;, Owner = terry };\n    Pet boots = new Pet { Name = &quot;Boots&quot;, Owner = terry };\n    Pet whiskers = new Pet { Name = &quot;Whiskers&quot;, Owner = charlotte };\n    Pet bluemoon = new Pet { Name = &quot;Blue Moon&quot;, Owner = terry };\n    Pet daisy = new Pet { Name = &quot;Daisy&quot;, Owner = magnus };\n\n    // Create two lists.\n    List&lt;Person&gt; people = new List&lt;Person&gt; { magnus, terry, charlotte, arlene };\n    List&lt;Pet&gt; pets = new List&lt;Pet&gt; { barley, boots, whiskers, bluemoon, daisy };\n\n    // Create XML to display the hierarchical organization of people and their pets.\n    XElement ownersAndPets = new XElement(&quot;PetOwners&quot;,\n        from person in people\n        join pet in pets on person equals pet.Owner into gj\n        select new XElement(&quot;Person&quot;,\n            new XAttribute(&quot;FirstName&quot;, person.FirstName),\n            new XAttribute(&quot;LastName&quot;, person.LastName),\n            from subpet in gj\n            select new XElement(&quot;Pet&quot;, subpet.Name)));\n\n    Console.WriteLine(ownersAndPets);\n}\n\n// This code produces the following output:\n//\n// &lt;PetOwners&gt;\n//   &lt;Person FirstName=&quot;Magnus&quot; LastName=&quot;Hedlund&quot;&gt;\n//     &lt;Pet&gt;Daisy&lt;/Pet&gt;\n//   &lt;/Person&gt;\n//   &lt;Person FirstName=&quot;Terry&quot; LastName=&quot;Adams&quot;&gt;\n//     &lt;Pet&gt;Barley&lt;/Pet&gt;\n//     &lt;Pet&gt;Boots&lt;/Pet&gt;\n//     &lt;Pet&gt;Blue Moon&lt;/Pet&gt;\n//   &lt;/Person&gt;\n//   &lt;Person FirstName=&quot;Charlotte&quot; LastName=&quot;Weiss&quot;&gt;\n//     &lt;Pet&gt;Whiskers&lt;/Pet&gt;\n//   &lt;/Person&gt;\n//   &lt;Person FirstName=&quot;Arlene&quot; LastName=&quot;Huff&quot; /&gt;\n// &lt;/PetOwners&gt;\n</code></pre><h2 id=\"see-also\">See also</h2>\n<p> <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb344797(v=vs.110).aspx\" data-linktype=\"external\">Join</a><br> <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb358101(v=vs.110).aspx\" data-linktype=\"external\">GroupJoin</a><br> <a href=\"perform-inner-joins\" data-linktype=\"relative-path\">Perform inner joins</a><br> <a href=\"perform-left-outer-joins\" data-linktype=\"relative-path\">Perform left outer joins</a><br> <a href=\"../programming-guide/classes-and-structs/anonymous-types\" data-linktype=\"relative-path\">Anonymous types</a>   </p>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"ms.devlang\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"9667daf9-a5fd-4b43-a5c4-a9c2b744000e\">\r\n<meta name=\"description\" content=\"How to perform grouped joins.\">\r\n<meta name=\"keywords\" content=\".NET, .NET Core, C#\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"12/1/2016\">\r\n<meta name=\"ms.technology\" content=\".net-core-technologies\">\r\n<meta name=\"ms.prod\" content=\".net-core\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/97a29e60f5d861d848b85ef1e8ed8b1988f9ced1/docs/csharp/linq/perform-grouped-joins.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/linq/perform-grouped-joins.md\">\r\n<meta name=\"document_id\" content=\"34630616-2ccf-9aa9-802c-760b10cfee78\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","uhfHeaderId":"MSDocsHeader-DotNet","title":"Perform grouped joins | Microsoft Docs","ms.devlang":"dotnet","ms.assetid":"9667daf9-a5fd-4b43-a5c4-a9c2b744000e","description":"How to perform grouped joins.","keywords":".NET, .NET Core, C#","ms.topic":"article","ms.date":"12/1/2016","ms.technology":".net-core-technologies","ms.prod":".net-core","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Updated LINQ topics for C# Concepts section (#1302)","commit_sha":"97a29e60f5d861d848b85ef1e8ed8b1988f9ced1","commit_date":"2016-12-12 09:02:31 -0800"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/97a29e60f5d861d848b85ef1e8ed8b1988f9ced1/docs/csharp/linq/perform-grouped-joins.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/linq/perform-grouped-joins.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/linq/perform-grouped-joins.md","document_id":"34630616-2ccf-9aa9-802c-760b10cfee78","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/linq/perform-grouped-joins","toc_asset_id":"articles/csharp/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"Perform grouped joins","_op_displayDate":"2016-12-1","_op_displayDate_source":"2016-12-01T00:00:00Z","_op_wordCount":974,"_op_rawTitle":"<h1 id=\"perform-grouped-joins\" sourcefile=\"docs/csharp/linq/perform-grouped-joins.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Perform grouped joins</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/linq/perform-grouped-joins","fileRelativePath":"articles/csharp/linq/perform-grouped-joins.html"},"themesRelativePathToOutputRoot":"_themes/"}