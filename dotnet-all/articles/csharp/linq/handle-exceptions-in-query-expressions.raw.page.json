{"content":"<div><div class=\"content\">\n<p>It is possible to call any method in the context of a query expression. However, we recommend that you avoid calling any method in a query expression that can create a side effect such as modifying the contents of the data source or throwing an exception. This example shows how to avoid raising exceptions when you call methods in a query expression without violating the general .NET Framework guidelines on exception handling. Those guidelines state that it is acceptable to catch a specific exception when you understand why it will be thrown in a given context. For more information, see <a href=\"http://msdn.microsoft.com/library/f06da765-235b-427a-bfb6-47cd219af539\" data-linktype=\"external\">Best Practices for Exceptions</a>.  </p>\n<p> The final example shows how to handle those cases when you must throw an exception during execution of a query.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following example shows how to move exception handling code outside a query expression. This is only possible when the method does not depend on any variables local to the query.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideLINQ#10\">    class ExceptionsOutsideQuery\n    {\n        static void Main()\n        {\n            // DO THIS with a datasource that might\n            // throw an exception. It is easier to deal with\n            // outside of the query expression.\n            IEnumerable&lt;int&gt; dataSource;\n            try\n            {\n                dataSource = GetData();\n            }\n            catch (InvalidOperationException)\n            {\n                // Handle (or don&#39;t handle) the exception \n                // in the way that is appropriate for your application.\n                Console.WriteLine(&quot;Invalid operation&quot;);\n                goto Exit;\n            }\n            \n            // If we get here, it is safe to proceed.\n            var query = from i in dataSource\n                        select i * i;\n\n            foreach (var i in query)\n                Console.WriteLine(i.ToString());\n\n            //Keep the console window open in debug mode\n            Exit:\n            Console.WriteLine(&quot;Press any key to exit&quot;);\n            Console.ReadKey();\n        }\n\n        // A data source that is very likely to throw an exception!\n        static IEnumerable&lt;int&gt; GetData()\n        {\n            throw new InvalidOperationException();\n        }\n    }\n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> In some cases, the best response to an exception that is thrown from within a query might be to stop the query execution immediately. The following example shows how to handle exceptions that might be thrown from inside a query body. Assume that <code>SomeMethodThatMightThrow</code> can potentially cause an exception that requires the query execution to stop.  </p>\n<p> Note that the <code>try</code> block encloses the <code>foreach</code> loop, and not the query itself. This is because the <code>foreach</code> loop is the point at which the query is actually executed. For more information, see <a href=\"../programming-guide/concepts/linq/introduction-to-linq-queries\" data-linktype=\"relative-path\">Introduction to LINQ queries</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideLINQ#12\">    class QueryThatThrows\n    {\n        static void Main()\n        {\n            // Data source.\n            string[] files = { &quot;fileA.txt&quot;, &quot;fileB.txt&quot;, &quot;fileC.txt&quot; };\n\n            // Demonstration query that throws.\n            var exceptionDemoQuery =\n                from file in files\n                let n = SomeMethodThatMightThrow(file)\n                select n;\n\n            // Runtime exceptions are thrown when query is executed.\n            // Therefore they must be handled in the foreach loop.\n            try\n            {\n                foreach (var item in exceptionDemoQuery)\n                {\n                    Console.WriteLine($&quot;Processing {item}&quot;);\n                }\n            }\n\n            // Catch whatever exception you expect to raise\n            // and/or do any necessary cleanup in a finally block\n            catch (InvalidOperationException e)\n            {\n                Console.WriteLine(e.Message);\n            }\n\n            //Keep the console window open in debug mode\n            Console.WriteLine(&quot;Press any key to exit&quot;);\n            Console.ReadKey();\n        }\n\n        // Not very useful as a general purpose method.\n        static string SomeMethodThatMightThrow(string s)\n        {\n            if (s[4] == &#39;C&#39;)\n                throw new InvalidOperationException();\n            return @&quot;C:\\newFolder\\&quot; + s;\n        }\n    }\n    /* Output:\n        Processing C:\\newFolder\\fileA.txt\n        Processing C:\\newFolder\\fileB.txt\n        Operation is not valid due to the current state of the object.\n     */\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"index\" data-linktype=\"relative-path\">LINQ query expressions</a></p>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-all/api/toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"2bf0c397-13fb-4f68-bc2b-531c6c88a167\">\r\n<meta name=\"description\" content=\"How to handle exceptions in query expressions.\">\r\n<meta name=\"keywords\" content=\".NET, .NET Core, C#\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"12/1/2016\">\r\n<meta name=\"ms.technology\" content=\".net-core-technologies\">\r\n<meta name=\"ms.prod\" content=\".net-core\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/97a29e60f5d861d848b85ef1e8ed8b1988f9ced1/docs/csharp/linq/handle-exceptions-in-query-expressions.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/linq/handle-exceptions-in-query-expressions.md\">\r\n<meta name=\"document_id\" content=\"4fb13031-d96e-aa84-a13a-e0fe457a16a4\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Handle exceptions in query expressions | Microsoft Docs","ms.devlang":"dotnet","ms.assetid":"2bf0c397-13fb-4f68-bc2b-531c6c88a167","description":"How to handle exceptions in query expressions.","keywords":".NET, .NET Core, C#","ms.topic":"article","ms.date":"12/1/2016","ms.technology":".net-core-technologies","ms.prod":".net-core","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Updated LINQ topics for C# Concepts section (#1302)","commit_sha":"97a29e60f5d861d848b85ef1e8ed8b1988f9ced1","commit_date":"2016-12-12 09:02:31 -0800"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/97a29e60f5d861d848b85ef1e8ed8b1988f9ced1/docs/csharp/linq/handle-exceptions-in-query-expressions.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/linq/handle-exceptions-in-query-expressions.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/linq/handle-exceptions-in-query-expressions.md","document_id":"4fb13031-d96e-aa84-a13a-e0fe457a16a4","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/linq/handle-exceptions-in-query-expressions","toc_asset_id":"articles/csharp/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"Handle exceptions in query expressions","_op_displayDate":"2016-12-1","_op_displayDate_source":"2016-12-01T00:00:00Z","_op_wordCount":536,"_op_rawTitle":"<h1 id=\"handle-exceptions-in-query-expressions\" sourcefile=\"docs/csharp/linq/handle-exceptions-in-query-expressions.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Handle exceptions in query expressions</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/linq/handle-exceptions-in-query-expressions","fileRelativePath":"articles/csharp/linq/handle-exceptions-in-query-expressions.html"},"themesRelativePathToOutputRoot":"_themes/"}