{"content":"<div><div class=\"content\">\n<p>A left outer join is a join in which each element of the first collection is returned, regardless of whether it has any correlated elements in the second collection. You can use LINQ to perform a left outer join by calling the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb360530(v=vs.110).aspx\" data-linktype=\"external\">DefaultIfEmpty</a> method on the results of a group join.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following example demonstrates how to use the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb360530(v=vs.110).aspx\" data-linktype=\"external\">DefaultIfEmpty</a> method on the results of a group join to perform a left outer join.  </p>\n<p> The first step in producing a left outer join of two collections is to perform an inner join by using a group join. (See <a href=\"perform-inner-joins\" data-linktype=\"relative-path\">Perform inner joins</a> for an explanation of this process.) In this example, the list of <code>Person</code> objects is inner-joined to the list of <code>Pet</code> objects based on a <code>Person</code> object that matches <code>Pet.Owner</code>.  </p>\n<p> The second step is to include each element of the first (left) collection in the result set even if that element has no matches in the right collection. This is accomplished by calling <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb360530(v=vs.110).aspx\" data-linktype=\"external\">DefaultIfEmpty</a> on each sequence of matching elements from the group join. In this example, <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb360530(v=vs.110).aspx\" data-linktype=\"external\">DefaultIfEmpty</a> is called on each sequence of matching <code>Pet</code> objects. The method returns a collection that contains a single, default value if the sequence of matching <code>Pet</code> objects is empty for any <code>Person</code> object, thereby ensuring that each <code>Person</code> object is represented in the result collection.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The default value for a reference type is <code>null</code>; therefore, the example checks for a null reference before accessing each element of each <code>Pet</code> collection.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"CsLINQProgJoining#7\">        class Person\n        {\n            public string FirstName { get; set; }\n            public string LastName { get; set; }\n        }\n\n        class Pet\n        {\n            public string Name { get; set; }\n            public Person Owner { get; set; }\n        }\n\n        public static void LeftOuterJoinExample()\n        {\n            Person magnus = new Person { FirstName = &quot;Magnus&quot;, LastName = &quot;Hedlund&quot; };\n            Person terry = new Person { FirstName = &quot;Terry&quot;, LastName = &quot;Adams&quot; };\n            Person charlotte = new Person { FirstName = &quot;Charlotte&quot;, LastName = &quot;Weiss&quot; };\n            Person arlene = new Person { FirstName = &quot;Arlene&quot;, LastName = &quot;Huff&quot; };\n\n            Pet barley = new Pet { Name = &quot;Barley&quot;, Owner = terry };\n            Pet boots = new Pet { Name = &quot;Boots&quot;, Owner = terry };\n            Pet whiskers = new Pet { Name = &quot;Whiskers&quot;, Owner = charlotte };\n            Pet bluemoon = new Pet { Name = &quot;Blue Moon&quot;, Owner = terry };\n            Pet daisy = new Pet { Name = &quot;Daisy&quot;, Owner = magnus };\n\n            // Create two lists.\n            List&lt;Person&gt; people = new List&lt;Person&gt; { magnus, terry, charlotte, arlene };\n            List&lt;Pet&gt; pets = new List&lt;Pet&gt; { barley, boots, whiskers, bluemoon, daisy };\n\n            var query = from person in people\n                        join pet in pets on person equals pet.Owner into gj\n                        from subpet in gj.DefaultIfEmpty()\n                        select new { person.FirstName, PetName = subpet?.Name ?? String.Empty : subpet.Name) };\n\n            foreach (var v in query)\n            {\n                Console.WriteLine($&quot;{v.FirstName:-15}{v.PetName}&quot;);\n            }\n        }\n\n        // This code produces the following output:\n        //\n        // Magnus:         Daisy\n        // Terry:          Barley\n        // Terry:          Boots\n        // Terry:          Blue Moon\n        // Charlotte:      Whiskers\n        // Arlene:\n</code></pre><h2 id=\"see-also\">See also</h2>\n<p> <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb344797(v=vs.110).aspx\" data-linktype=\"external\">Join</a><br> <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb358101(v=vs.110).aspx\" data-linktype=\"external\">GroupJoin</a><br> <a href=\"perform-inner-joins\" data-linktype=\"relative-path\">Perform inner joins</a><br> <a href=\"perform-grouped-joins\" data-linktype=\"relative-path\">Perform grouped joins</a><br> <a href=\"../programming-guide/classes-and-structs/anonymous-types\" data-linktype=\"relative-path\">Anonymous types</a>   </p>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"f542cee6-3169-4dcf-a631-3a6a79ccd473\">\r\n<meta name=\"description\" content=\"How to perform left outer joins.\">\r\n<meta name=\"keywords\" content=\".NET, .NET Core, C#\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"12/1/2016\">\r\n<meta name=\"ms.technology\" content=\".net-core-technologies\">\r\n<meta name=\"ms.prod\" content=\".net-core\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/97a29e60f5d861d848b85ef1e8ed8b1988f9ced1/docs/csharp/linq/perform-left-outer-joins.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/linq/perform-left-outer-joins.md\">\r\n<meta name=\"document_id\" content=\"632367c5-1db4-5dfa-03fe-1b0e130d6977\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Perform left outer joins | Microsoft Docs","ms.devlang":"dotnet","ms.assetid":"f542cee6-3169-4dcf-a631-3a6a79ccd473","description":"How to perform left outer joins.","keywords":".NET, .NET Core, C#","ms.topic":"article","ms.date":"12/1/2016","ms.technology":".net-core-technologies","ms.prod":".net-core","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Updated LINQ topics for C# Concepts section (#1302)","commit_sha":"97a29e60f5d861d848b85ef1e8ed8b1988f9ced1","commit_date":"2016-12-12 09:02:31 -0800"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/97a29e60f5d861d848b85ef1e8ed8b1988f9ced1/docs/csharp/linq/perform-left-outer-joins.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/linq/perform-left-outer-joins.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/linq/perform-left-outer-joins.md","document_id":"632367c5-1db4-5dfa-03fe-1b0e130d6977","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/linq/perform-left-outer-joins","toc_asset_id":"articles/csharp/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"Perform left outer joins","_op_displayDate":"2016-12-1","_op_displayDate_source":"2016-12-01T00:00:00Z","_op_wordCount":509,"_op_rawTitle":"<h1 id=\"perform-left-outer-joins\" sourcefile=\"docs/csharp/linq/perform-left-outer-joins.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Perform left outer joins</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/linq/perform-left-outer-joins","fileRelativePath":"articles/csharp/linq/perform-left-outer-joins.html"},"themesRelativePathToOutputRoot":"_themes/"}