{"content":"<div><div class=\"content\">\n<p>This example shows how to perform a simple query over a list of <code>Student</code> objects. Each <code>Student</code> object contains some basic information about the student, and a list that represents the student&#39;s scores on four examinations.  </p>\n<p> This application serves as the framework for many other examples in this section that use the same <code>students</code> data source.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following query returns the students who received a score of 90 or greater on their first exam.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideLINQ#15\">public class StudentClass\n{\n    #region data\n    protected enum GradeLevel { FirstYear = 1, SecondYear, ThirdYear, FourthYear };\n    protected class Student\n    {\n        public string FirstName { get; set; }\n        public string LastName { get; set; }\n        public int ID { get; set; }\n        public GradeLevel Year;\n        public List&lt;int&gt; ExamScores;\n    }\n\n    protected static List&lt;Student&gt; students = new List&lt;Student&gt;\n    {\n        new Student {FirstName = &quot;Terry&quot;, LastName = &quot;Adams&quot;, ID = 120, \n            Year = GradeLevel.SecondYear, \n            ExamScores = new List&lt;int&gt;{ 99, 82, 81, 79}},\n        new Student {FirstName = &quot;Fadi&quot;, LastName = &quot;Fakhouri&quot;, ID = 116, \n            Year = GradeLevel.ThirdYear,\n            ExamScores = new List&lt;int&gt;{ 99, 86, 90, 94}},\n        new Student {FirstName = &quot;Hanying&quot;, LastName = &quot;Feng&quot;, ID = 117, \n            Year = GradeLevel.FirstYear, \n            ExamScores = new List&lt;int&gt;{ 93, 92, 80, 87}},\n        new Student {FirstName = &quot;Cesar&quot;, LastName = &quot;Garcia&quot;, ID = 114, \n            Year = GradeLevel.FourthYear,\n            ExamScores = new List&lt;int&gt;{ 97, 89, 85, 82}},\n        new Student {FirstName = &quot;Debra&quot;, LastName = &quot;Garcia&quot;, ID = 115, \n            Year = GradeLevel.ThirdYear, \n            ExamScores = new List&lt;int&gt;{ 35, 72, 91, 70}},\n        new Student {FirstName = &quot;Hugo&quot;, LastName = &quot;Garcia&quot;, ID = 118, \n            Year = GradeLevel.SecondYear, \n            ExamScores = new List&lt;int&gt;{ 92, 90, 83, 78}},\n        new Student {FirstName = &quot;Sven&quot;, LastName = &quot;Mortensen&quot;, ID = 113, \n            Year = GradeLevel.FirstYear, \n            ExamScores = new List&lt;int&gt;{ 88, 94, 65, 91}},\n        new Student {FirstName = &quot;Claire&quot;, LastName = &quot;O&#39;Donnell&quot;, ID = 112, \n            Year = GradeLevel.FourthYear, \n            ExamScores = new List&lt;int&gt;{ 75, 84, 91, 39}},\n        new Student {FirstName = &quot;Svetlana&quot;, LastName = &quot;Omelchenko&quot;, ID = 111, \n            Year = GradeLevel.SecondYear, \n            ExamScores = new List&lt;int&gt;{ 97, 92, 81, 60}},\n        new Student {FirstName = &quot;Lance&quot;, LastName = &quot;Tucker&quot;, ID = 119, \n            Year = GradeLevel.ThirdYear, \n            ExamScores = new List&lt;int&gt;{ 68, 79, 88, 92}},\n        new Student {FirstName = &quot;Michael&quot;, LastName = &quot;Tucker&quot;, ID = 122, \n            Year = GradeLevel.FirstYear, \n            ExamScores = new List&lt;int&gt;{ 94, 92, 91, 91}},\n        new Student {FirstName = &quot;Eugene&quot;, LastName = &quot;Zabokritski&quot;, ID = 121,\n            Year = GradeLevel.FourthYear, \n            ExamScores = new List&lt;int&gt;{ 96, 85, 91, 60}}\n    };\n    #endregion\n\n    //Helper method, used in GroupByRange.\n    protected static int GetPercentile(Student s)\n    {\n        double avg = s.ExamScores.Average();\n        return avg &gt; 0 ? (int)avg / 10 : 0;\n    }\n\n    \n\n    public void QueryHighScores(int exam, int score)\n    {\n        var highScores = from student in students\n                         where student.ExamScores[exam] &gt; score\n                         select new {Name = student.FirstName, Score = student.ExamScores[exam]};\n\n        foreach (var item in highScores)\n        {\n            Console.WriteLine($&quot;item.Name:-15}{item.Score}}&quot;)\n        }\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        StudentClass sc = new StudentClass();\n        sc.QueryHighScores(1, 90);\n\n        // Keep the console window open in debug mode.\n        Console.WriteLine(&quot;Press any key to exit&quot;);\n        Console.ReadKey();\n    }\n}\n</code></pre><p> This query is intentionally simple to enable you to experiment. For example, you can try more conditions in the <code>where</code> clause, or use an <code>orderby</code> clause to sort the results.  </p>\n<h2 id=\"see-also\">See also</h2>\n<p> <a href=\"index\" data-linktype=\"relative-path\">LINQ Query Expressions</a></p>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"87a76f8a-0b58-4791-90ea-2fe0a30416c9\">\r\n<meta name=\"description\" content=\"How query collections.\">\r\n<meta name=\"keywords\" content=\".NET, .NET Core, C#\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"11/30/2016\">\r\n<meta name=\"ms.technology\" content=\".net-core-technologies\">\r\n<meta name=\"ms.prod\" content=\".net-core\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/97a29e60f5d861d848b85ef1e8ed8b1988f9ced1/docs/csharp/linq/query-a-collection-of-objects.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/linq/query-a-collection-of-objects.md\">\r\n<meta name=\"document_id\" content=\"74859b59-72a1-ae8d-03eb-75ca0e897ab9\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Query a collection of objects | Microsoft Docs","ms.devlang":"dotnet","ms.assetid":"87a76f8a-0b58-4791-90ea-2fe0a30416c9","description":"How query collections.","keywords":".NET, .NET Core, C#","ms.topic":"article","ms.date":"11/30/2016","ms.technology":".net-core-technologies","ms.prod":".net-core","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Updated LINQ topics for C# Concepts section (#1302)","commit_sha":"97a29e60f5d861d848b85ef1e8ed8b1988f9ced1","commit_date":"2016-12-12 09:02:31 -0800"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/97a29e60f5d861d848b85ef1e8ed8b1988f9ced1/docs/csharp/linq/query-a-collection-of-objects.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/linq/query-a-collection-of-objects.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/linq/query-a-collection-of-objects.md","document_id":"74859b59-72a1-ae8d-03eb-75ca0e897ab9","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/linq/query-a-collection-of-objects","toc_asset_id":"articles/csharp/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"Query a collection of objects","_op_displayDate":"2016-11-30","_op_displayDate_source":"2016-11-30T00:00:00Z","_op_wordCount":526,"_op_rawTitle":"<h1 id=\"query-a-collection-of-objects\" sourcefile=\"docs/csharp/linq/query-a-collection-of-objects.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Query a collection of objects</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/linq/query-a-collection-of-objects","fileRelativePath":"articles/csharp/linq/query-a-collection-of-objects.html"},"themesRelativePathToOutputRoot":"_themes/"}