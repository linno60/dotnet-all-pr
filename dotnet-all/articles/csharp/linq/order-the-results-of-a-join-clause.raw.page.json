{"content":"<div><div class=\"content\">\n<p>This example shows how to order the results of a join operation. Note that the ordering is performed after the join. Although you can use an <code>orderby</code> clause with one or more of the source sequences before the join, generally we do not recommend it. Some LINQ providers might not preserve that ordering after the join.  </p>\n<h2 id=\"example\">Example</h2>\n<p> This query creates a group join, and then sorts the groups based on the category element, which is still in scope. Inside the anonymous type initializer, a sub-query orders all the matching elements from the products sequence.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideLINQ#81\">            class HowToOrderJoins\n            {\n                #region Data\n                class Product\n                {\n                    public string Name { get; set; }\n                    public int CategoryID { get; set; }\n                }\n\n                class Category\n                {\n                    public string Name { get; set; }\n                    public int ID { get; set; }\n                }\n\n                // Specify the first data source.\n                List&lt;Category&gt; categories = new List&lt;Category&gt;()\n        { \n            new Category(){Name=&quot;Beverages&quot;, ID=001},\n            new Category(){ Name=&quot;Condiments&quot;, ID=002},\n            new Category(){ Name=&quot;Vegetables&quot;, ID=003},\n            new Category() {  Name=&quot;Grains&quot;, ID=004},\n            new Category() {  Name=&quot;Fruit&quot;, ID=005}            \n        };\n\n                // Specify the second data source.\n                List&lt;Product&gt; products = new List&lt;Product&gt;()\n       {\n          new Product{Name=&quot;Cola&quot;,  CategoryID=001},\n          new Product{Name=&quot;Tea&quot;,  CategoryID=001},\n          new Product{Name=&quot;Mustard&quot;, CategoryID=002},\n          new Product{Name=&quot;Pickles&quot;, CategoryID=002},\n          new Product{Name=&quot;Carrots&quot;, CategoryID=003},\n          new Product{Name=&quot;Bok Choy&quot;, CategoryID=003},\n          new Product{Name=&quot;Peaches&quot;, CategoryID=005},\n          new Product{Name=&quot;Melons&quot;, CategoryID=005},\n        };\n                #endregion\n                static void Main()\n                {\n                    HowToOrderJoins app = new HowToOrderJoins();\n                    app.OrderJoin1();\n\n                    // Keep console window open in debug mode.\n                    Console.WriteLine(&quot;Press any key to exit.&quot;);\n                    Console.ReadKey();\n\n                }\n\n                void OrderJoin1()\n                {\n                    var groupJoinQuery2 =\n                        from category in categories\n                        join prod in products on category.ID equals prod.CategoryID into prodGroup\n                        orderby category.Name\n                        select new\n                        {\n                            Category = category.Name,\n                            Products = from prod2 in prodGroup\n                                       orderby prod2.Name\n                                       select prod2\n                        };\n\n                    foreach (var productGroup in groupJoinQuery2)\n                    {\n                        Console.WriteLine(productGroup.Category);\n                        foreach (var prodItem in productGroup.Products)\n                        {\n                            Console.WriteLine(&quot;  {prodItem.Name:-10} {prodItem.CategoryID}&quot;);\n                        }\n                    }\n                }\n                /* Output:\n                    Beverages\n                      Cola       1\n                      Tea        1\n                    Condiments\n                      Mustard    2\n                      Pickles    2\n                    Fruit\n                      Melons     5\n                      Peaches    5\n                    Grains\n                    Vegetables\n                      Bok Choy   3\n                      Carrots    3\n                 */\n            }\n</code></pre><h2 id=\"see-also\">See also</h2>\n<p> <a href=\"index\" data-linktype=\"relative-path\">LINQ query expressions</a><br> <a href=\"../language-reference/keywords/orderby-clause\" data-linktype=\"relative-path\">orderby clause</a><br> <a href=\"../language-reference/keywords/join-clause\" data-linktype=\"relative-path\">join clause</a> </p>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet/toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"a7458901-1201-4c25-b8d9-c04ca52e0eb9\">\r\n<meta name=\"description\" content=\"How to order the results of a join clause.\">\r\n<meta name=\"keywords\" content=\".NET, .NET Core, C#\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"12/1/2016\">\r\n<meta name=\"ms.technology\" content=\".net-core-technologies\">\r\n<meta name=\"ms.prod\" content=\".net-core\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/97a29e60f5d861d848b85ef1e8ed8b1988f9ced1/docs/csharp/linq/order-the-results-of-a-join-clause.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/linq/order-the-results-of-a-join-clause.md\">\r\n<meta name=\"document_id\" content=\"b9bf13b7-5ba5-959b-e476-052d7f54ad2d\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Order the results of a join clause | Microsoft Docs","ms.devlang":"dotnet","ms.assetid":"a7458901-1201-4c25-b8d9-c04ca52e0eb9","description":"How to order the results of a join clause.","keywords":".NET, .NET Core, C#","ms.topic":"article","ms.date":"12/1/2016","ms.technology":".net-core-technologies","ms.prod":".net-core","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Updated LINQ topics for C# Concepts section (#1302)","commit_sha":"97a29e60f5d861d848b85ef1e8ed8b1988f9ced1","commit_date":"2016-12-12 09:02:31 -0800"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/97a29e60f5d861d848b85ef1e8ed8b1988f9ced1/docs/csharp/linq/order-the-results-of-a-join-clause.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/linq/order-the-results-of-a-join-clause.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/linq/order-the-results-of-a-join-clause.md","document_id":"b9bf13b7-5ba5-959b-e476-052d7f54ad2d","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/linq/order-the-results-of-a-join-clause","toc_asset_id":"articles/csharp/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"Order the results of a join clause","_op_displayDate":"2016-12-1","_op_displayDate_source":"2016-12-01T00:00:00Z","_op_wordCount":326,"_op_rawTitle":"<h1 id=\"order-the-results-of-a-join-clause\" sourcefile=\"docs/csharp/linq/order-the-results-of-a-join-clause.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Order the results of a join clause</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/linq/order-the-results-of-a-join-clause","fileRelativePath":"articles/csharp/linq/order-the-results-of-a-join-clause.html"},"themesRelativePathToOutputRoot":"_themes/"}