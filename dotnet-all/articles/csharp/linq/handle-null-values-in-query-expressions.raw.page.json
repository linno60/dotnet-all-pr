{"content":"<div><div class=\"content\">\n<p>This example shows how to handle possible null values in source collections. An object collection such as an <a class=\"xref\" href=\"../../../api/system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> can contain elements whose value is <a href=\"../language-reference/keywords/null\" data-linktype=\"relative-path\">null</a>. If a source collection is null or contains an element whose value is null, and your query does not handle null values, a <a class=\"xref\" href=\"../../../api/system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> will be thrown when you execute the query.  </p>\n<h2 id=\"example\">Example</h2>\n<p> You can code defensively to avoid a null reference exception as shown in the following example:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideLINQ#82\">var query1 =\n    from c in categories\n    where c != null\n    join p in products on c.ID equals\n        p?.CategoryID\n    select new { Category = c.Name, Name = p.Name };\n</code></pre><p> In the previous example, the <code>where</code> clause filters out all null elements in the categories sequence. This technique is independent of the null check in the join clause. The conditional expression with null in this example works because <code>Products.CategoryID</code> is of type <code>int?</code> which is shorthand for <code>Nullable&lt;int&gt;</code>.  </p>\n<h2 id=\"example-1\">Example</h2>\n<p> In a join clause, if only one of the comparison keys is a nullable value type, you can cast the other to a nullable type in the query expression. In the following example, assume that <code>EmployeeID</code> is a column that contains values of type <code>int?</code>:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideLINQ#83\">void TestMethod(Northwind db)\n{\n    var query =\n        from o in db.Orders\n        join e in db.Employees\n            on o.EmployeeID equals (int?)e.EmployeeID\n        select new { o.OrderID, e.FirstName };\n}\n</code></pre><h2 id=\"see-also\">See also</h2>\n<p> <a class=\"xref\" href=\"../../../api/system.nullable-1\" data-linktype=\"relative-path\">Nullable&lt;T&gt;</a><br> <a href=\"index\" data-linktype=\"relative-path\">LINQ query expressions</a><br> <a href=\"../programming-guide/nullable-types/index\" data-linktype=\"relative-path\">Nullable types</a></p>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.devlang\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"ac63ae8b-724d-4251-9334-528f4e884ae7\">\r\n<meta name=\"description\" content=\"How to handle null values in query expressions.\">\r\n<meta name=\"keywords\" content=\".NET, .NET Core, C#\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"12/1/2016\">\r\n<meta name=\"ms.technology\" content=\".net-core-technologies\">\r\n<meta name=\"ms.prod\" content=\".net-core\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/97a29e60f5d861d848b85ef1e8ed8b1988f9ced1/docs/csharp/linq/handle-null-values-in-query-expressions.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/linq/handle-null-values-in-query-expressions.md\">\r\n<meta name=\"document_id\" content=\"c9baf2cc-03de-014b-71a6-bc2b1c2650f0\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc1.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"Handle null values in query expressions | Microsoft Docs","ms.devlang":"dotnet","ms.assetid":"ac63ae8b-724d-4251-9334-528f4e884ae7","description":"How to handle null values in query expressions.","keywords":".NET, .NET Core, C#","ms.topic":"article","ms.date":"12/1/2016","ms.technology":".net-core-technologies","ms.prod":".net-core","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Updated LINQ topics for C# Concepts section (#1302)","commit_sha":"97a29e60f5d861d848b85ef1e8ed8b1988f9ced1","commit_date":"2016-12-12 09:02:31 -0800"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/97a29e60f5d861d848b85ef1e8ed8b1988f9ced1/docs/csharp/linq/handle-null-values-in-query-expressions.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/linq/handle-null-values-in-query-expressions.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/linq/handle-null-values-in-query-expressions.md","document_id":"c9baf2cc-03de-014b-71a6-bc2b1c2650f0","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/linq/handle-null-values-in-query-expressions","toc_asset_id":"articles/csharp/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"Handle null values in query expressions","_op_displayDate":"2016-12-1","_op_displayDate_source":"2016-12-01T00:00:00Z","_op_wordCount":229,"_op_rawTitle":"<h1 id=\"handle-null-values-in-query-expressions\" sourcefile=\"docs/csharp/linq/handle-null-values-in-query-expressions.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Handle null values in query expressions</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/linq/handle-null-values-in-query-expressions","fileRelativePath":"articles/csharp/linq/handle-null-values-in-query-expressions.html"},"themesRelativePathToOutputRoot":"_themes/"}