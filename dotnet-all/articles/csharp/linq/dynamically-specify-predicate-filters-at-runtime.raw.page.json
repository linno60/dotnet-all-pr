{"content":"<div><div class=\"content\">\n<p>In some cases you do not know until run time how many predicates you have to apply to source elements in the <code>where</code> clause. One way to dynamically specify multiple predicate filters is to use the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb357185(v=vs.110).aspx\" data-linktype=\"external\">Contains</a> method, as shown in the following example. The example is constructed in two ways. First, the project is run by filtering on values that are provided in the program. Then the project is run again by using input provided at run time.  </p>\n<h2 id=\"to-filter-by-using-the-contains-method\">To filter by using the Contains method</h2>\n<ol>\n<li><p>Open a new console application and name it <code>PredicateFilters</code>.  </p>\n</li>\n<li><p>Copy the <code>StudentClass</code> class from <a href=\"query-a-collection-of-objects\" data-linktype=\"relative-path\">Query a collection of objects</a> and paste it into namespace <code>PredicateFilters</code> underneath class <code>Program</code>. <code>StudentClass</code> provides a list of <code>Student</code> objects.  </p>\n</li>\n<li><p>Comment out the <code>Main</code> method in <code>StudentClass</code>.  </p>\n</li>\n<li><p>Replace class <code>Program</code> with the following code.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideLINQ#26\">class DynamicPredicates : StudentClass\n{\n    static void Main(string[] args)\n    {\n        string[] ids = { &quot;111&quot;, &quot;114&quot;, &quot;112&quot; };\n\n        Console.WriteLine(&quot;Press any key to exit.&quot;);\n        Console.ReadKey();\n    }\n\n    static void QueryByID(string[] ids)\n    {\n        var queryNames =\n            from student in students\n            let i = student.ID.ToString()\n            where ids.Contains(i)\n            select new { student.LastName, student.ID };\n\n        foreach (var name in queryNames)\n        {\n            Console.WriteLine($&quot;{name.LastName}: {name.ID}&quot;);\n        }\n    }\n}\n</code></pre></li>\n<li><p>Add the following line to the <code>Main</code> method in class <code>DynamicPredicates</code>, under the declaration of <code>ids</code>.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\"> QueryById(ids);\n</code></pre></li>\n<li><p>Run the project.  </p>\n</li>\n<li><p>The following output is displayed in a console window:  </p>\n<p> Garcia: 114  </p>\n<p> O&#39;Donnell: 112  </p>\n<p> Omelchenko: 111  </p>\n</li>\n<li><p>The next step is to run the project again, this time by using input entered at run time instead of array <code>ids</code>. Change <code>QueryByID(ids)</code> to <code>QueryByID(args)</code> in the <code>Main</code> method.  </p>\n</li>\n<li><p>Run the project with the command line arguments <code>122 117 120 115</code>. When the project is run, those values become elements of <code>args</code>, the parameter of the <code>Main</code> method..  </p>\n</li>\n<li><p>The following output is displayed in a console window:  </p>\n<p> Adams: 120  </p>\n<p> Feng: 117  </p>\n<p> Garcia: 115  </p>\n<p> Tucker: 122  </p>\n</li>\n</ol>\n<h2 id=\"to-filter-by-using-a-switch-statement\">To filter by using a switch statement</h2>\n<ol>\n<li><p>You can use a <code>switch</code> statement to select among predetermined alternative queries. In the following example, <code>studentQuery</code> uses a different <code>where</code> clause depending on which grade level, or year, is specified at run time.  </p>\n</li>\n<li><p>Copy the following method and paste it into class <code>DynamicPredicates</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideLINQ#27\">// To run this sample, first specify an integer value of 1 to 4 for the command\n// line. This number will be converted to a GradeLevel value that specifies which\n// set of students to query. \n// Call the method: QueryByYear(args[0]);\n\nstatic void QueryByYear(string level)\n{\n    GradeLevel year = (GradeLevel)Convert.ToInt32(level);\n    IEnumerable&lt;Student&gt; studentQuery = null;\n    switch (year)\n    {\n        case GradeLevel.FirstYear:\n            studentQuery = from student in students\n                           where student.Year == GradeLevel.FirstYear\n                           select student;\n            break;\n        case GradeLevel.SecondYear:\n            studentQuery = from student in students\n                           where student.Year == GradeLevel.SecondYear\n                           select student;\n            break;\n        case GradeLevel.ThirdYear:\n            studentQuery = from student in students\n                           where student.Year == GradeLevel.ThirdYear\n                           select student;\n            break;\n        case GradeLevel.FourthYear:\n            studentQuery = from student in students\n                           where student.Year == GradeLevel.FourthYear\n                           select student;\n            break;\n\n        default:\n            break;\n    }\n    Console.WriteLine(&quot;The following students are at level {0}&quot;, year.ToString());\n    foreach (Student name in studentQuery)\n    {\n        Console.WriteLine($&quot;{name.LastName}: {name.ID}&quot;);\n    }\n}\n</code></pre></li>\n<li><p>In the <code>Main</code> method, replace the call to <code>QueryByID</code> with the following call, which sends the first element from the <code>args</code> array as its argument: <code>QueryByYear(args[0])</code>.  </p>\n</li>\n<li><p>Run the project with a command line argument of an integer value between 1 and 4.  </p>\n</li>\n</ol>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"index\" data-linktype=\"relative-path\">LINQ Query Expressions</a><br> <a href=\"../language-reference/keywords/where-clause\" data-linktype=\"relative-path\">where clause</a></p>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"90238470-0767-497c-916c-52d0d16845e0\">\r\n<meta name=\"description\" content=\"How to dynamically specify predicate filters at runtime.\">\r\n<meta name=\"keywords\" content=\".NET, .NET Core, C#\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"12/1/2016\">\r\n<meta name=\"ms.technology\" content=\".net-core-technologies\">\r\n<meta name=\"ms.prod\" content=\".net-core\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/97a29e60f5d861d848b85ef1e8ed8b1988f9ced1/docs/csharp/linq/dynamically-specify-predicate-filters-at-runtime.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/linq/dynamically-specify-predicate-filters-at-runtime.md\">\r\n<meta name=\"document_id\" content=\"afa86f61-4fa3-5664-1b0b-7e3d65b6a830\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Dynamically specify predicate filters at runtime | Microsoft Docs","ms.devlang":"dotnet","ms.assetid":"90238470-0767-497c-916c-52d0d16845e0","description":"How to dynamically specify predicate filters at runtime.","keywords":".NET, .NET Core, C#","ms.topic":"article","ms.date":"12/1/2016","ms.technology":".net-core-technologies","ms.prod":".net-core","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Updated LINQ topics for C# Concepts section (#1302)","commit_sha":"97a29e60f5d861d848b85ef1e8ed8b1988f9ced1","commit_date":"2016-12-12 09:02:31 -0800"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/97a29e60f5d861d848b85ef1e8ed8b1988f9ced1/docs/csharp/linq/dynamically-specify-predicate-filters-at-runtime.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/linq/dynamically-specify-predicate-filters-at-runtime.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/linq/dynamically-specify-predicate-filters-at-runtime.md","document_id":"afa86f61-4fa3-5664-1b0b-7e3d65b6a830","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/linq/dynamically-specify-predicate-filters-at-runtime","toc_asset_id":"articles/csharp/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"Dynamically specify predicate filters at runtime","_op_displayDate":"2016-12-1","_op_displayDate_source":"2016-12-01T00:00:00Z","_op_wordCount":543,"_op_rawTitle":"<h1 id=\"dynamically-specify-predicate-filters-at-runtime\" sourcefile=\"docs/csharp/linq/dynamically-specify-predicate-filters-at-runtime.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Dynamically specify predicate filters at runtime</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/linq/dynamically-specify-predicate-filters-at-runtime","fileRelativePath":"articles/csharp/linq/dynamically-specify-predicate-filters-at-runtime.html"},"themesRelativePathToOutputRoot":"_themes/"}