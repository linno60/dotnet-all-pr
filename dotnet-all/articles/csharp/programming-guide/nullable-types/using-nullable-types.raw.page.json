{"content":"<div><div class=\"content\">\n<p>Nullable types can represent all the values of an underlying type, and an additional <a href=\"../../language-reference/keywords/null\" data-linktype=\"relative-path\">null</a> value. Nullable types are declared in one of two ways:  </p>\n<p> <code>System.Nullable&lt;T&gt; variable</code>  </p>\n<p> -or-  </p>\n<p> <code>T? variable</code>  </p>\n<p> <code>T</code> is the underlying type of the nullable type. <code>T</code> can be any value type including <code>struct</code>; it cannot be a reference type.  </p>\n<p> For an example of when you might use a nullable type, consider how an ordinary Boolean variable can have two values: true and false. There is no value that signifies &quot;undefined&quot;. In many programming applications, most notably database interactions, variables can occur in an undefined state. For example, a field in a database may contain the values true or false, but it may also contain no value at all. Similarly, reference types can be set to <code>null</code> to indicate that they are not initialized.  </p>\n<p> This disparity can create extra programming work, with additional variables used to store state information, the use of special values, and so on. The nullable type modifier enables C# to create value-type variables that indicate an undefined value.  </p>\n<h2 id=\"examples-of-nullable-types\">Examples of Nullable Types</h2>\n<p> Any value type may be used as the basis for a nullable type. For example:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideTypes#4\">            int? i = 10;\n            double? d1 = 3.14;\n            bool? flag = null;\n            char? letter = &#39;a&#39;;\n            int?[] arr = new int?[10];\n</code></pre><h2 id=\"the-members-of-nullable-types\">The Members of Nullable Types</h2>\n<p> Each instance of a nullable type has two public read-only properties:  </p>\n<ul>\n<li><p><code>HasValue</code>  </p>\n<p> <code>HasValue</code> is of type <code>bool</code>. It is set to <code>true</code> when the variable contains a non-null value.  </p>\n</li>\n<li><p><code>Value</code>  </p>\n<p> <code>Value</code> is of the same type as the underlying type. If <code>HasValue</code> is <code>true</code>, <code>Value</code> contains a meaningful value. If <code>HasValue</code> is <code>false</code>, accessing <code>Value</code> will throw a <a class=\"xref\" href=\"../../../../api/system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.  </p>\n<p>In this example, the <code>HasValue</code> member is used to test whether the variable contains a value before it tries to display it.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideTypes#5\">            int? x = 10;\n            if (x.HasValue)\n            {\n                System.Console.WriteLine(x.Value);\n            }\n            else\n            {\n                System.Console.WriteLine(&quot;Undefined&quot;);\n            }\n</code></pre><p>Testing for a value can also be done as in the following example:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideTypes#6\">            int? y = 10;\n            if (y != null)\n            {\n                System.Console.WriteLine(y.Value);\n            }\n            else\n            {\n                System.Console.WriteLine(&quot;Undefined&quot;);\n            }\n</code></pre></li>\n</ul>\n<h2 id=\"explicit-conversions\">Explicit Conversions</h2>\n<p> A nullable type can be cast to a regular type, either explicitly with a cast, or by using the <code>Value</code> property. For example:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideTypes#7\">            int? n = null;\n\n            //int m1 = n;      // Will not compile.\n            int m2 = (int)n;   // Compiles, but will create an exception if n is null.\n            int m3 = n.Value;  // Compiles, but will create an exception if n is null.\n</code></pre><p> If a user-defined conversion is defined between two data types, the same conversion can also be used with the nullable versions of these data types.  </p>\n<h2 id=\"implicit-conversions\">Implicit Conversions</h2>\n<p> A variable of nullable type can be set to null with the <code>null</code> keyword, as shown in the following example:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideTypes#8\">            int? n1 = null;\n</code></pre><p> The conversion from an ordinary type to a nullable type, is implicit.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideTypes#9\">            int? n2;\n            n2 = 10;  // Implicit conversion.\n</code></pre><h2 id=\"operators\">Operators</h2>\n<p> The predefined unary and binary operators and any user-defined operators that exist for value types may also be used by nullable types. These operators produce a null value if the operands are null; otherwise, the operator uses the contained value to calculate the result. For example:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideTypes#10\">            int? a = 10;\n            int? b = null;\n\n            a++;         // Increment by 1, now a is 11.\n            a = a * 10;  // Multiply by 10, now a is 110.\n            a = a + b;   // Add b, now a is null.\n</code></pre><p> When you perform comparisons with nullable types, if the value of one of the nullable types is null and the other is not, all comparisons evaluate to <code>false</code> except for <code>!=</code> (not equal). It is important not to assume that because a particular comparison returns <code>false</code>, the opposite case returns <code>true</code>. In the following example, 10 is not greater than, less than, nor equal to null. Only <code>num1 != num2</code> evaluates to <code>true</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideTypes#11\">            int? num1 = 10;\n            int? num2 = null;\n            if (num1 &gt;= num2)\n            {\n                Console.WriteLine(&quot;num1 is greater than or equal to num2&quot;);\n            }\n            else\n            {\n                // This clause is selected, but num1 is not less than num2.\n                Console.WriteLine(&quot;num1 &gt;= num2 returned false (but num1 &lt; num2 also is false)&quot;);\n            }\n\n            if (num1 &lt; num2)\n            {\n                Console.WriteLine(&quot;num1 is less than num2&quot;);\n            }\n            else\n            {\n                // The else clause is selected again, but num1 is not greater than\n                // or equal to num2.\n                Console.WriteLine(&quot;num1 &lt; num2 returned false (but num1 &gt;= num2 also is false)&quot;);\n            }\n\n            if (num1 != num2)\n            {\n                // This comparison is true, num1 and num2 are not equal.\n                Console.WriteLine(&quot;Finally, num1 != num2 returns true!&quot;);\n            }\n\n            // Change the value of num1, so that both num1 and num2 are null.\n            num1 = null;\n            if (num1 == num2)\n            {\n                // The equality comparison returns true when both operands are null.\n                Console.WriteLine(&quot;num1 == num2 returns true when the value of each is null&quot;);\n            }\n\n            /* Output:\n             * num1 &gt;= num2 returned false (but num1 &lt; num2 also is false)\n             * num1 &lt; num2 returned false (but num1 &gt;= num2 also is false)\n             * Finally, num1 != num2 returns true!\n             * num1 == num2 returns true when the value of each is null\n             */\n</code></pre><p> An equality comparison of two nullable types that are both null evaluates to <code>true</code>.  </p>\n<h2 id=\"the--operator\">The ?? Operator</h2>\n<p> The <code>??</code> operator defines a default value that is returned when a nullable type is assigned to a non-nullable type.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideTypes#12\">            int? c = null;\n\n            // d = c, unless c is null, in which case d = -1.\n            int d = c ?? -1;\n</code></pre><p> This operator can also be used with multiple nullable types. For example:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideTypes#13\">            int? e = null;\n            int? f = null;\n\n            // g = e or f, unless e and f are both null, in which case g = -1.\n            int g = e ?? f ?? -1;\n</code></pre><h2 id=\"the-bool-type\">The bool? type</h2>\n<p> The <code>bool?</code> nullable type can contain three different values: <a href=\"../../language-reference/keywords/true\" data-linktype=\"relative-path\">true</a>, <a href=\"../../language-reference/keywords/false\" data-linktype=\"relative-path\">false</a> and <a href=\"../../language-reference/keywords/null\" data-linktype=\"relative-path\">null</a>. For information about how to cast from a bool? to a bool, see <a href=\"how-to-safely-cast-from-bool-to-bool\" data-linktype=\"relative-path\">How to: Safely Cast from bool? to bool</a>.  </p>\n<p> Nullable Booleans are like the Boolean variable type that is used in SQL. To ensure that the results produced by the <code>&amp;</code> and <code>|</code> operators are consistent with the three-valued Boolean type in SQL, the following predefined operators are provided:  </p>\n<p> <code>bool? operator &amp;(bool? x, bool? y)</code>  </p>\n<p> <code>bool? operator |(bool? x, bool? y)</code>  </p>\n<p> The results of these operators are listed in the following table:  </p>\n<table>\n<thead>\n<tr>\n<th>X</th>\n<th>y</th>\n<th>x&amp;y</th>\n<th>x&#124;y</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>true</td>\n<td>true</td>\n<td>true</td>\n<td>true</td>\n</tr>\n<tr>\n<td>true</td>\n<td>false</td>\n<td>false</td>\n<td>true</td>\n</tr>\n<tr>\n<td>true</td>\n<td>null</td>\n<td>null</td>\n<td>true</td>\n</tr>\n<tr>\n<td>false</td>\n<td>true</td>\n<td>false</td>\n<td>true</td>\n</tr>\n<tr>\n<td>false</td>\n<td>false</td>\n<td>false</td>\n<td>false</td>\n</tr>\n<tr>\n<td>false</td>\n<td>null</td>\n<td>false</td>\n<td>null</td>\n</tr>\n<tr>\n<td>null</td>\n<td>true</td>\n<td>null</td>\n<td>true</td>\n</tr>\n<tr>\n<td>null</td>\n<td>false</td>\n<td>false</td>\n<td>null</td>\n</tr>\n<tr>\n<td>null</td>\n<td>null</td>\n<td>null</td>\n<td>null</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">Nullable Types</a><br> <a href=\"boxing-nullable-types\" data-linktype=\"relative-path\">Boxing Nullable Types</a><br> <a href=\"../../../visual-basic/programming-guide/language-features/data-types/nullable-value-types\" data-linktype=\"relative-path\">Nullable Value Types</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"0bacbe72-ce15-4b14-83e1-9c14e6380c28\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"31\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/nullable-types/using-nullable-types.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/nullable-types/using-nullable-types.md\">\r\n<meta name=\"document_id\" content=\"7c1bbc60-0e67-fb67-3a9a-1ca5c12f8e6b\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Using Nullable Types (C# Programming Guide) | Microsoft Docs","ms.assetid":"0bacbe72-ce15-4b14-83e1-9c14e6380c28","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":31,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["nullable types [C#], about nullable types"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/nullable-types/using-nullable-types.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/nullable-types/using-nullable-types.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/nullable-types/using-nullable-types.md","document_id":"7c1bbc60-0e67-fb67-3a9a-1ca5c12f8e6b","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/nullable-types/using-nullable-types","toc_asset_id":"articles/csharp/programming-guide/nullable-types/toc.json","toc_rel":"toc.json","_op_ogTitle":"Using Nullable Types (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":1108,"_op_rawTitle":"<h1 id=\"using-nullable-types-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/nullable-types/using-nullable-types.md\" sourcestartlinenumber=\"36\" sourceendlinenumber=\"36\">Using Nullable Types (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/nullable-types/using-nullable-types","fileRelativePath":"articles/csharp/programming-guide/nullable-types/using-nullable-types.html"},"themesRelativePathToOutputRoot":"_themes/"}