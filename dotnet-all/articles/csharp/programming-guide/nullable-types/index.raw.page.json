{"content":"<div><div class=\"content\">\n<p>Nullable types are instances of the <a class=\"xref\" href=\"../../../../api/system.nullable-1\" data-linktype=\"relative-path\">System.Nullable&lt;T&gt;</a> struct. A nullable type can represent the correct range of values for its underlying value type, plus an additional <code>null</code> value. For example, a <code>Nullable&lt;Int32&gt;</code>, pronounced &quot;Nullable of Int32,&quot; can be assigned any value from -2147483648 to 2147483647, or it can be assigned the <code>null</code> value. A <code>Nullable&lt;bool&gt;</code> can be assigned the values <a href=\"../../language-reference/keywords/true\" data-linktype=\"relative-path\">true</a>, <a href=\"../../language-reference/keywords/false\" data-linktype=\"relative-path\">false</a>, or <a href=\"../../language-reference/keywords/null\" data-linktype=\"relative-path\">null</a>. The ability to assign <code>null</code> to numeric and Boolean types is especially useful when you are dealing with databases and other data types that contain elements that may not be assigned a value. For example, a Boolean field in a database can store the values <code>true</code> or <code>false</code>, or it may be undefined.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideTypes#3\">            int a = 5;             \n            int b = a + 2; //OK\n            \n            bool test = true;\n              \n            // Error. Operator &#39;+&#39; cannot be applied to operands of type &#39;int&#39; and &#39;bool&#39;.\n            int c = a + test;\n</code></pre><p> The example will display the output:  </p>\n<p> <code>num = Null</code>  </p>\n<p> <code>Nullable object must have a value.</code>  </p>\n<p> For more examples, see <a href=\"using-nullable-types\" data-linktype=\"relative-path\">Using Nullable Types</a>  </p>\n<h2 id=\"nullable-types-overview\">Nullable Types Overview</h2>\n<p> Nullable types have the following characteristics:  </p>\n<ul>\n<li><p>Nullable types represent value-type variables that can be assigned the value of <code>null</code>. You cannot create a nullable type based on a reference type. (Reference types already support the <code>null</code> value.)  </p>\n</li>\n<li><p>The syntax <code>T?</code> is shorthand for <a class=\"xref\" href=\"../../../../api/system.nullable-1\" data-linktype=\"relative-path\">Nullable&lt;T&gt;</a>, where <code>T</code> is a value type. The two forms are interchangeable.  </p>\n</li>\n<li><p>Assign a value to a nullable type just as you would for an ordinary value type, for example <code>int? x = 10;</code> or <code>double? d = 4.108</code>. A nullable type can also be assigned the value <code>null</code>: <code>int? x = null.</code>  </p>\n</li>\n<li><p>Use the <a class=\"xref\" href=\"../../../../api/system.nullable-1#System_Nullable_1_GetValueOrDefault_\" data-linktype=\"relative-path\">GetValueOrDefault</a> method to return either the assigned value, or the default value for the underlying type if the value is <code>null</code>, for example <code>int j = x.GetValueOrDefault();</code>  </p>\n</li>\n<li><p>Use the <a class=\"xref\" href=\"../../../../api/system.nullable-1#System_Nullable_1_HasValue_\" data-linktype=\"relative-path\">HasValue</a> and <a class=\"xref\" href=\"../../../../api/system.nullable-1#System_Nullable_1_Value_\" data-linktype=\"relative-path\">Value</a> read-only properties to test for null and retrieve the value, as shown in the following example: <code>if(x.HasValue) j = x.Value;</code>  </p>\n<ul>\n<li><p>The <code>HasValue</code> property returns <code>true</code> if the variable contains a value, or <code>false</code> if it is <code>null</code>.  </p>\n</li>\n<li><p>The <code>Value</code> property returns a value if one is assigned. Otherwise, a <a class=\"xref\" href=\"../../../../api/system.invalidoperationexception\" data-linktype=\"relative-path\">System.InvalidOperationException</a> is thrown.  </p>\n</li>\n<li><p>The default value for <code>HasValue</code> is <code>false</code>. The <code>Value</code> property has no default value.  </p>\n</li>\n<li><p>You can also use the <code>==</code> and <code>!=</code> operators with a nullable type, as shown in the following example: <code>if (x != null) y = x;</code>  </p>\n</li>\n</ul>\n</li>\n<li><p>Use the <code>??</code> operator to assign a default value that will be applied when a nullable type whose current value is <code>null</code> is assigned to a non-nullable type, for example <code>int? x = null; int y = x ?? -1;</code>  </p>\n</li>\n<li><p>Nested nullable types are not allowed. The following line will not compile: <code>Nullable&lt;Nullable&lt;int&gt;&gt; n;</code>  </p>\n</li>\n</ul>\n<h2 id=\"related-sections\">Related Sections</h2>\n<p> For more information:  </p>\n<ul>\n<li><p><a href=\"using-nullable-types\" data-linktype=\"relative-path\">Using Nullable Types</a>  </p>\n</li>\n<li><p><a href=\"boxing-nullable-types\" data-linktype=\"relative-path\">Boxing Nullable Types</a>  </p>\n</li>\n<li><p><a href=\"../../language-reference/operators/null-conditional-operator\" data-linktype=\"relative-path\">?? Operator</a>  </p>\n</li>\n</ul>\n<h2 id=\"c-language-specification\">C# Language Specification</h2>\n<p> For more information, see the <a href=\"../../language-reference/language-specification\" data-linktype=\"relative-path\">C# Language Specification</a>. The language specification is the definitive source for C# syntax and usage.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../api/system.nullable\" data-linktype=\"relative-path\">Nullable</a><br> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"../../csharp\" data-linktype=\"relative-path\">C#</a><br> <a href=\"../../language-reference/index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"http://go.microsoft.com/fwlink/?LinkId=112382\" data-linktype=\"external\">What exactly does &#39;lifted&#39; mean?</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"e473cb01-28ca-42be-9cea-f717055d72c6\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"44\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/a2a5030262723d513c899a3d7dddd2142eabc17d/docs/csharp/programming-guide/nullable-types/index.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/nullable-types/index.md\">\r\n<meta name=\"document_id\" content=\"df481e24-f759-2e37-70b2-2c0ee346aea2\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Nullable Types (C# Programming Guide) | Microsoft Docs","ms.assetid":"e473cb01-28ca-42be-9cea-f717055d72c6","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":44,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["nullable types [C#]","C# language, nullable types","types [C#], nullable"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Robert C. Seacord","author_email":"rcseacord@gmail.com","committer_name":"Maira Wenzel","comitter_email":"mairaw@microsoft.com","message":"Update index.md (#1358)","commit_sha":"a2a5030262723d513c899a3d7dddd2142eabc17d","commit_date":"2017-01-04 12:08:23 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/rcseacord","display_name":"Robert C. Seacord","id":"3037076"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/a2a5030262723d513c899a3d7dddd2142eabc17d/docs/csharp/programming-guide/nullable-types/index.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/nullable-types/index.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/nullable-types/index.md","document_id":"df481e24-f759-2e37-70b2-2c0ee346aea2","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/nullable-types/index","toc_asset_id":"articles/csharp/programming-guide/nullable-types/toc.json","toc_rel":"toc.json","_op_ogTitle":"Nullable Types (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":493,"_op_rawTitle":"<h1 id=\"nullable-types-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/nullable-types/index.md\" sourcestartlinenumber=\"38\" sourceendlinenumber=\"38\">Nullable Types (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/nullable-types/index","fileRelativePath":"articles/csharp/programming-guide/nullable-types/index.html"},"themesRelativePathToOutputRoot":"_themes/"}