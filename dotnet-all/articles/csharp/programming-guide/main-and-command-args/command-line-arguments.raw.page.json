{"content":"<div><div class=\"content\">\n<p>You can send arguments to the <code>Main</code> method by defining the method in one of the following ways:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideMain#2\">    static int Main(string[] args)\n</code></pre><pre><code class=\"lang-cs\" name=\"csProgGuideMain#3\">    static void Main(string[] args)\n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> To enable command-line arguments in the <code>Main</code> method in a Windows Forms application, you must manually modify the signature of <code>Main</code> in program.cs. The code generated by the Windows Forms designer creates a <code>Main</code> without an input parameter. You can also use <a class=\"xref\" href=\"../../../../api/system.environment#System_Environment_CommandLine_\" data-linktype=\"relative-path\">CommandLine</a> or <a class=\"xref\" href=\"../../../../api/system.environment#System_Environment_GetCommandLineArgs_\" data-linktype=\"relative-path\">GetCommandLineArgs</a> to access the command-line arguments from any point in a console or Windows application.  </p>\n</div>\n<p> The parameter of the <code>Main</code> method is a <a class=\"xref\" href=\"../../../../api/system.string\" data-linktype=\"relative-path\">String</a> array that represents the command-line arguments. Usually you determine whether arguments exist by testing the <code>Length</code> property, for example:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideMain#4\">        if (args.Length == 0)\n        {\n            System.Console.WriteLine(&quot;Please enter a numeric argument.&quot;);\n            return 1;\n        }\n</code></pre><p> You can also convert the string arguments to numeric types by using the <a class=\"xref\" href=\"../../../../api/system.convert\" data-linktype=\"relative-path\">Convert</a> class or the <code>Parse</code> method. For example, the following statement converts the <code>string</code> to a <code>long</code> number by using the <a class=\"xref\" href=\"../../../../api/system.int64#System_Int64_Parse_\" data-linktype=\"relative-path\">Parse</a> method:  </p>\n<pre class=\"loading\"><code>long num = Int64.Parse(args[0]);  \n</code></pre><p> It is also possible to use the C# type <code>long</code>, which aliases <code>Int64</code>:  </p>\n<pre class=\"loading\"><code>long num = long.Parse(args[0]);  \n</code></pre><p> You can also use the <code>Convert</code> class method <code>ToInt64</code> to do the same thing:  </p>\n<pre class=\"loading\"><code>long num = Convert.ToInt64(s);  \n</code></pre><p> For more information, see <a class=\"xref\" href=\"../../../../api/system.int64#System_Int64_Parse_\" data-linktype=\"relative-path\">Parse</a> and <a class=\"xref\" href=\"../../../../api/system.convert\" data-linktype=\"relative-path\">Convert</a>.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following example shows how to use command-line arguments in a console application. The application takes one argument at run time, converts the argument to an integer, and calculates the factorial of the number. If no arguments are supplied, the application issues a message that explains the correct usage of the program.  </p>\n<p> To compile and run the application from a command prompt, follow these steps:  </p>\n<ol>\n<li><p>Paste the following code into any text editor, and then save the file as  a text file with the name <code>Factorial.cs</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideMain#16\">    //Add a using directive for System if the directive isn&#39;t already present.\n\n    public class Functions\n    {\n        public static long Factorial(int n)\n        {\n            // Test for invalid input\n            if ((n &lt; 0) || (n &gt; 20))\n            {\n                return -1;\n            }\n\n            // Calculate the factorial iteratively rather than recursively:\n            long tempResult = 1;\n            for (int i = 1; i &lt;= n; i++)\n            {\n                tempResult *= i;\n            }\n            return tempResult;\n        }\n    }\n\n    class MainClass\n    {\n        static int Main(string[] args)\n        {\n            // Test if input arguments were supplied:\n            if (args.Length == 0)\n            {\n                System.Console.WriteLine(&quot;Please enter a numeric argument.&quot;);\n                System.Console.WriteLine(&quot;Usage: Factorial &lt;num&gt;&quot;);\n                return 1;\n            }\n\n            // Try to convert the input arguments to numbers. This will throw\n            // an exception if the argument is not a number.\n            // num = int.Parse(args[0]);\n            int num;\n            bool test = int.TryParse(args[0], out num);\n            if (test == false)\n            {\n                System.Console.WriteLine(&quot;Please enter a numeric argument.&quot;);\n                System.Console.WriteLine(&quot;Usage: Factorial &lt;num&gt;&quot;);\n                return 1;\n            }\n\n            // Calculate factorial.\n            long result = Functions.Factorial(num);\n\n            // Print result.\n            if (result == -1)\n                System.Console.WriteLine(&quot;Input must be &gt;= 0 and &lt;= 20.&quot;);\n            else\n                System.Console.WriteLine(&quot;The Factorial of {0} is {1}.&quot;, num, result);\n\n            return 0;\n        }\n    }\n    // If 3 is entered on command line, the\n    // output reads: The factorial of 3 is 6.\n</code></pre></li>\n<li><p>From the <strong>Start</strong> screen or <strong>Start</strong> menu, open a Visual Studio <strong>Developer Command Prompt</strong> window, and then navigate to the folder that contains the file that you just created.  </p>\n</li>\n<li><p>Enter the following command to compile the application.  </p>\n<p> <code>csc Factorial.cs</code>  </p>\n<p> If your application has no compilation errors, an executable file that&#39;s named <code>Factorial.exe</code> is created.  </p>\n</li>\n<li><p>Enter the following command to calculate the factorial of 3:  </p>\n<p> <code>Factorial 3</code>  </p>\n</li>\n<li><p>The command produces this output: <code>The factorial of 3 is 6.</code>  </p>\n</li>\n</ol>\n<div class=\"NOTE\"><h5>Note</h5><p> When running an application in Visual Studio, you can specify command-line arguments in the <a href=\"https://docs.microsoft.com/visualstudio/ide/reference/debug-page-project-designer\" data-linktype=\"external\">Debug Page, Project Designer</a>.  </p>\n</div>\n<p> For more examples about how to use command-line arguments, see <a href=\"http://msdn.microsoft.com/library/70f65026-3687-4e9c-ab79-c18b97dd8be4\" data-linktype=\"external\">How to: Create and Use Assemblies Using the Command Line</a>.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../api/system.environment\" data-linktype=\"relative-path\">System.Environment</a><br> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">Main() and Command-Line Arguments</a><br> <a href=\"how-to-display-command-line-arguments\" data-linktype=\"relative-path\">How to: Display Command Line Arguments</a><br> <a href=\"how-to-access-command-line-arguments-using-foreach\" data-linktype=\"relative-path\">How to: Access Command-Line Arguments Using foreach</a><br> <a href=\"main-return-values\" data-linktype=\"relative-path\">Main() Return Values</a><br> <a href=\"../classes-and-structs/classes\" data-linktype=\"relative-path\">Classes</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"0e597e0d-ea7a-41ba-a38a-0198122f3c26\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"27\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/3115359729431ecbcc16058612da59b85621fa0f/docs/csharp/programming-guide/main-and-command-args/command-line-arguments.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/main-and-command-args/command-line-arguments.md\">\r\n<meta name=\"document_id\" content=\"1d4b5579-2c3b-3f3c-4707-e54d191b03d0\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Command-Line Arguments (C# Programming Guide) | Microsoft Docs","ms.assetid":"0e597e0d-ea7a-41ba-a38a-0198122f3c26","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":27,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["command-line arguments [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Bill Wagner","author_email":"wiwagn@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Reorganize the C# Guide TOC (#1318)","commit_sha":"3115359729431ecbcc16058612da59b85621fa0f","commit_date":"2017-01-23 23:20:14 -0500"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Absolute urls and other fixes (#1281)","commit_sha":"f7dffe4885b331cec8d37f3cc5c9163f69c3b4c9","commit_date":"2016-11-22 12:57:26 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/3115359729431ecbcc16058612da59b85621fa0f/docs/csharp/programming-guide/main-and-command-args/command-line-arguments.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/main-and-command-args/command-line-arguments.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/main-and-command-args/command-line-arguments.md","document_id":"1d4b5579-2c3b-3f3c-4707-e54d191b03d0","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/main-and-command-args/command-line-arguments","toc_asset_id":"articles/csharp/programming-guide/main-and-command-args/toc.json","toc_rel":"toc.json","_op_ogTitle":"Command-Line Arguments (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":634,"_op_rawTitle":"<h1 id=\"command-line-arguments-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/main-and-command-args/command-line-arguments.md\" sourcestartlinenumber=\"36\" sourceendlinenumber=\"36\">Command-Line Arguments (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/main-and-command-args/command-line-arguments","fileRelativePath":"articles/csharp/programming-guide/main-and-command-args/command-line-arguments.html"},"themesRelativePathToOutputRoot":"_themes/"}