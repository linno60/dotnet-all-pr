{"content":"<div><div class=\"content\">\n<p>The <a href=\"http://go.microsoft.com/fwlink/?LinkId=199552\" data-linktype=\"external\">C# Language Specification</a> does not define a coding standard. However, the guidelines in this topic are used by Microsoft to develop samples and documentation.  </p>\n<p> Coding conventions serve the following purposes:  </p>\n<ul>\n<li><p>They create a consistent look to the code, so that readers can focus on content, not layout.  </p>\n</li>\n<li><p>They enable readers to understand the code more quickly by making assumptions based on previous experience.  </p>\n</li>\n<li><p>They facilitate copying, changing, and maintaining the code.  </p>\n</li>\n<li><p>They demonstrate C# best practices.  </p>\n</li>\n</ul>\n<h2 id=\"naming-conventions\">Naming Conventions</h2>\n<ul>\n<li><p>In short examples that do not include <a href=\"../../language-reference/keywords/using-directive\" data-linktype=\"relative-path\">using directives</a>, use namespace qualifications. If you know that a namespace is imported by default in a project, you do not have to fully qualify the names from that namespace. Qualified names can be broken after a dot (.) if they are too long for a single line, as shown in the following example.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideCodingConventions#1\">            var currentPerformanceCounterCategory = new System.Diagnostics.\n                PerformanceCounterCategory();\n</code></pre></li>\n<li><p>You do not have to change the names of objects that were created by using the Visual Studio designer tools to make them fit other guidelines.  </p>\n</li>\n</ul>\n<h2 id=\"layout-conventions\">Layout Conventions</h2>\n<p> Good layout uses formatting to emphasize the structure of your code and to make the code easier to read. Microsoft examples and samples conform to the following conventions:  </p>\n<ul>\n<li><p>Use the default Code Editor settings (smart indenting, four-character indents, tabs saved as spaces). For more information, see <a href=\"https://docs.microsoft.com/visualstudio/ide/reference/options-text-editor-csharp-formatting\" data-linktype=\"external\">Options, Text Editor, C#, Formatting</a>.  </p>\n</li>\n<li><p>Write only one statement per line.  </p>\n</li>\n<li><p>Write only one declaration per line.  </p>\n</li>\n<li><p>If continuation lines are not indented automatically, indent them one tab stop (four spaces).  </p>\n</li>\n<li><p>Add at least one blank line between method definitions and property definitions.  </p>\n</li>\n<li><p>Use parentheses to make clauses in an expression apparent, as shown in the following code.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideCodingConventions#2\">            if ((val1 &gt; val2) &amp;&amp; (val1 &gt; val3))\n            {\n                // Take appropriate action.\n            }\n</code></pre></li>\n</ul>\n<h2 id=\"commenting-conventions\">Commenting Conventions</h2>\n<ul>\n<li><p>Place the comment on a separate line, not at the end of a line of code.  </p>\n</li>\n<li><p>Begin comment text with an uppercase letter.  </p>\n</li>\n<li><p>End comment text with a period.  </p>\n</li>\n<li><p>Insert one space between the comment delimiter (//) and the comment text, as shown in the following example.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideCodingConventions#3\">            // The following declaration creates a query. It does not run\n            // the query.\n</code></pre></li>\n<li><p>Do not create formatted blocks of asterisks around comments.  </p>\n</li>\n</ul>\n<h2 id=\"language-guidelines\">Language Guidelines</h2>\n<p> The following sections describe practices that the C# team follows to prepare code examples and samples.  </p>\n<h3 id=\"string-data-type\">String Data Type</h3>\n<ul>\n<li><p>Use the <code>+</code> operator to concatenate short strings, as shown in the following code.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideCodingConventions#6\">            string displayName = nameList[n].LastName + &quot;, &quot; + nameList[n].FirstName;\n</code></pre></li>\n<li><p>To append strings in loops, especially when you are working with large amounts of text, use a <a class=\"xref\" href=\"../../../../api/system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideCodingConventions#7\">            var phrase = &quot;lalalalalalalalalalalalalalalalalalalalalalalalalalalalalala&quot;;\n            var manyPhrases = new StringBuilder();\n            for (var i = 0; i &lt; 10000; i++)\n            {\n                manyPhrases.Append(phrase);\n            }\n            //Console.WriteLine(&quot;tra&quot; + manyPhrases);\n</code></pre></li>\n</ul>\n<h3 id=\"implicitly-typed-local-variables\">Implicitly Typed Local Variables</h3>\n<ul>\n<li><p>Use <a href=\"../classes-and-structs/implicitly-typed-local-variables\" data-linktype=\"relative-path\">implicit typing</a> for local variables when the type of the variable is obvious from the right side of the assignment, or when the precise type is not important.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideCodingConventions#8\">            // When the type of a variable is clear from the context, use var \n            // in the declaration.\n            var var1 = &quot;This is clearly a string.&quot;;\n            var var2 = 27;\n            var var3 = Convert.ToInt32(Console.ReadLine());\n</code></pre></li>\n<li><p>Do not use <a href=\"../../language-reference/keywords/var\" data-linktype=\"relative-path\">var</a> when the type is not apparent from the right side of the assignment.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideCodingConventions#9\">            // When the type of a variable is not clear from the context, use an\n            // explicit type.\n            int var4 = ExampleClass.ResultSoFar();\n</code></pre></li>\n<li><p>Do not rely on the variable name to specify the type of the variable. It might not be correct.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideCodingConventions#10\">            // Naming the following variable inputInt is misleading. \n            // It is a string.\n            var inputInt = Console.ReadLine();\n            Console.WriteLine(inputInt);\n</code></pre></li>\n<li><p>Avoid the use of <code>var</code> in place of <a href=\"../../language-reference/keywords/dynamic\" data-linktype=\"relative-path\">dynamic</a>.  </p>\n</li>\n<li><p>Use implicit typing to determine the type of the loop variable in <a href=\"../../language-reference/keywords/for\" data-linktype=\"relative-path\">for</a> and <a href=\"../../language-reference/keywords/foreach-in\" data-linktype=\"relative-path\">foreach</a> loops.  </p>\n<p> The following example uses implicit typing in a <code>for</code> statement.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideCodingConventions#11\">            var syllable = &quot;ha&quot;;\n            var laugh = &quot;&quot;;\n            for (var i = 0; i &lt; 10; i++)\n            {\n                laugh += syllable;\n                Console.WriteLine(laugh);\n            }\n</code></pre><p> The following example uses implicit typing in a <code>foreach</code> statement.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideCodingConventions#12\">            foreach (var ch in laugh)\n            {\n                if (ch == &#39;h&#39;)\n                    Console.Write(&quot;H&quot;);\n                else\n                    Console.Write(ch);\n            }\n            Console.WriteLine();\n</code></pre></li>\n</ul>\n<h3 id=\"unsigned-data-type\">Unsigned Data Type</h3>\n<ul>\n<li>In general, use <code>int</code> rather than unsigned types. The use of <code>int</code> is common throughout C#, and it is easier to interact with other libraries when you use <code>int</code>.  </li>\n</ul>\n<h3 id=\"arrays\">Arrays</h3>\n<ul>\n<li><p>Use the concise syntax when you initialize arrays on the declaration line.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideCodingConventions#13\">            // Preferred syntax. Note that you cannot use var here instead of string[].\n            string[] vowels1 = { &quot;a&quot;, &quot;e&quot;, &quot;i&quot;, &quot;o&quot;, &quot;u&quot; };\n\n\n            // If you use explicit instantiation, you can use var.\n            var vowels2 = new string[] { &quot;a&quot;, &quot;e&quot;, &quot;i&quot;, &quot;o&quot;, &quot;u&quot; };\n\n            // If you specify an array size, you must initialize the elements one at a time.\n            var vowels3 = new string[5];\n            vowels3[0] = &quot;a&quot;;\n            vowels3[1] = &quot;e&quot;;\n            // And so on.\n</code></pre></li>\n</ul>\n<h3 id=\"delegates\">Delegates</h3>\n<ul>\n<li><p>Use the concise syntax to create instances of a delegate type.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideCodingConventions#14\">        // First, in class Program, define the delegate type and a method that  \n        // has a matching signature.\n\n        // Define the type.\n        public delegate void Del(string message);\n\n        // Define a method that has a matching signature.\n        public static void DelMethod(string str)\n        {\n            Console.WriteLine(&quot;DelMethod argument: {0}&quot;, str);\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"csProgGuideCodingConventions#15\">            // In the Main method, create an instance of Del.\n\n            // Preferred: Create an instance of Del by using condensed syntax.\n            Del exampleDel2 = DelMethod;\n\n            // The following declaration uses the full syntax.\n            Del exampleDel1 = new Del(DelMethod);\n</code></pre></li>\n</ul>\n<h3 id=\"try-catch-and-using-statements-in-exception-handling\">try-catch and using Statements in Exception Handling</h3>\n<ul>\n<li><p>Use a <a href=\"../../language-reference/keywords/try-catch\" data-linktype=\"relative-path\">try-catch</a> statement for most exception handling.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideCodingConventions#16\">        static string GetValueFromArray(string[] array, int index)\n        {\n            try\n            {\n                return array[index];\n            }\n            catch (System.IndexOutOfRangeException ex)\n            {\n                Console.WriteLine(&quot;Index is out of range: {0}&quot;, index);\n                throw;\n            }\n        }\n</code></pre></li>\n<li><p>Simplify your code by using the C# <a href=\"../../language-reference/keywords/using-statement\" data-linktype=\"relative-path\">using statement</a>. If you have a <a href=\"../../language-reference/keywords/try-finally\" data-linktype=\"relative-path\">try-finally</a> statement in which the only code in the <code>finally</code> block is a call to the <a class=\"xref\" href=\"../../../../api/system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method, use a <code>using</code> statement instead.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideCodingConventions#17\">            // This try-finally statement only calls Dispose in the finally block.\n            Font font1 = new Font(&quot;Arial&quot;, 10.0f);\n            try\n            {\n                byte charset = font1.GdiCharSet;\n            }\n            finally\n            {\n                if (font1 != null)\n                {\n                    ((IDisposable)font1).Dispose();\n                }\n            }\n\n\n            // You can do the same thing with a using statement.\n            using (Font font2 = new Font(&quot;Arial&quot;, 10.0f))\n            {\n                byte charset = font2.GdiCharSet;\n            }\n</code></pre></li>\n</ul>\n<h3 id=\"-and-124124-operators\">&amp;&amp; and &#124;&#124; Operators</h3>\n<ul>\n<li><p>To avoid exceptions and increase performance by skipping unnecessary comparisons, use <a href=\"../../language-reference/operators/conditional-and-operator\" data-linktype=\"relative-path\">&amp;&amp;</a> instead of <a href=\"../../language-reference/operators/and-operator\" data-linktype=\"relative-path\">&amp;</a> and <a href=\"../../language-reference/operators/conditional-or-operator\" data-linktype=\"relative-path\">&#124;&#124;</a> instead of <a href=\"../../language-reference/operators/or-operator\" data-linktype=\"relative-path\">&#124;</a> when you perform comparisons, as shown in the following example.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideCodingConventions#18\">            Console.Write(&quot;Enter a dividend: &quot;);\n            var dividend = Convert.ToInt32(Console.ReadLine());\n\n            Console.Write(&quot;Enter a divisor: &quot;);\n            var divisor = Convert.ToInt32(Console.ReadLine());\n\n            // If the divisor is 0, the second clause in the following condition\n            // causes a run-time error. The &amp;&amp; operator short circuits when the\n            // first expression is false. That is, it does not evaluate the\n            // second expression. The &amp; operator evaluates both, and causes \n            // a run-time error when divisor is 0.\n            if ((divisor != 0) &amp;&amp; (dividend / divisor &gt; 0))\n            {\n                Console.WriteLine(&quot;Quotient: {0}&quot;, dividend / divisor);\n            }\n            else\n            {\n                Console.WriteLine(&quot;Attempted division by 0 ends up here.&quot;);\n            }\n</code></pre></li>\n</ul>\n<h3 id=\"new-operator\">New Operator</h3>\n<ul>\n<li><p>Use the concise form of object instantiation, with implicit typing, as shown in the following declaration.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideCodingConventions#19\">            var instance1 = new ExampleClass();\n</code></pre><p> The previous line is equivalent to the following declaration.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideCodingConventions#20\">            ExampleClass instance2 = new ExampleClass();\n</code></pre></li>\n<li><p>Use object initializers to simplify object creation.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideCodingConventions#21\">            // Object initializer.\n            var instance3 = new ExampleClass { Name = &quot;Desktop&quot;, ID = 37414, \n                Location = &quot;Redmond&quot;, Age = 2.3 };\n\n            // Default constructor and assignment statements.\n            var instance4 = new ExampleClass();\n            instance4.Name = &quot;Desktop&quot;;\n            instance4.ID = 37414;\n            instance4.Location = &quot;Redmond&quot;;\n            instance4.Age = 2.3;\n</code></pre></li>\n</ul>\n<h3 id=\"event-handling\">Event Handling</h3>\n<ul>\n<li><p>If you are defining an event handler that you do not need to remove later, use a lambda expression.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideCodingConventions#22\">        public Form2()\n        {\n            // You can use a lambda expression to define an event handler.\n            this.Click += (s, e) =&gt;\n                {\n                    MessageBox.Show(\n                        ((MouseEventArgs)e).Location.ToString());\n                };\n        }\n</code></pre><pre><code class=\"lang-cs\" name=\"csProgGuideCodingConventions#23\">        // Using a lambda expression shortens the following traditional definition.\n        public Form1()\n        {\n            this.Click += new EventHandler(Form1_Click);\n        }\n\n        void Form1_Click(object sender, EventArgs e)\n        {\n            MessageBox.Show(((MouseEventArgs)e).Location.ToString());\n        }\n</code></pre></li>\n</ul>\n<h3 id=\"static-members\">Static Members</h3>\n<ul>\n<li>Call <a href=\"../../language-reference/keywords/static\" data-linktype=\"relative-path\">static</a> members by using the class name: <em>ClassName.StaticMember</em>. This practice makes code more readable by making static access clear.  Do not qualify a static member defined in a base class with the name of a derived class.  While that code compiles, the code readability is misleading, and the code may break in the future if you add a static member with the same name to the derived class.  </li>\n</ul>\n<h3 id=\"linq-queries\">LINQ Queries</h3>\n<ul>\n<li><p>Use meaningful names for query variables. The following example uses <code>seattleCustomers</code> for customers who are located in Seattle.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideCodingConventions#25\">            var seattleCustomers = from cust in customers\n                                   where cust.City == &quot;Seattle&quot;\n                                   select cust.Name;\n</code></pre></li>\n<li><p>Use aliases to make sure that property names of anonymous types are correctly capitalized, using Pascal casing.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideCodingConventions#26\">            var localDistributors =\n                from customer in customers\n                join distributor in distributors on customer.City equals distributor.City\n                select new { Customer = customer, Distributor = distributor };\n</code></pre></li>\n<li><p>Rename properties when the property names in the result would be ambiguous. For example, if your query returns a customer name and a distributor ID, instead of leaving them as <code>Name</code> and <code>ID</code> in the result, rename them to clarify that <code>Name</code> is the name of a customer, and <code>ID</code> is the ID of a distributor.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideCodingConventions#27\">            var localDistributors2 =\n                from cust in customers\n                join dist in distributors on cust.City equals dist.City\n                select new { CustomerName = cust.Name, DistributorID = dist.ID };\n</code></pre></li>\n<li><p>Use implicit typing in the declaration of query variables and range variables.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideCodingConventions#25\">            var seattleCustomers = from cust in customers\n                                   where cust.City == &quot;Seattle&quot;\n                                   select cust.Name;\n</code></pre></li>\n<li><p>Align query clauses under the <a href=\"../../language-reference/keywords/from-clause\" data-linktype=\"relative-path\">from</a> clause, as shown in the previous examples.  </p>\n</li>\n<li><p>Use <a href=\"../../language-reference/keywords/where-clause\" data-linktype=\"relative-path\">where</a> clauses before other query clauses to ensure that later query clauses operate on the reduced, filtered set of data.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideCodingConventions#29\">            var seattleCustomers2 = from cust in customers\n                                    where cust.City == &quot;Seattle&quot;\n                                    orderby cust.Name\n                                    select cust;\n</code></pre></li>\n<li><p>Use multiple <code>from</code> clauses instead of a <a href=\"../../language-reference/keywords/join-clause\" data-linktype=\"relative-path\">join</a> clause to access inner collections. For example, a collection of <code>Student</code> objects might each contain a collection of test scores. When the following query is executed, it returns each score that is over 90, along with the last name of the student who received the score.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideCodingConventions#30\">            // Use a compound from to access the inner sequence within each element.\n            var scoreQuery = from student in students\n                             from score in student.Scores\n                             where score &gt; 90\n                             select new { Last = student.LastName, score };\n</code></pre></li>\n</ul>\n<h2 id=\"security\">Security</h2>\n<p> Follow the guidelines in <a href=\"http://msdn.microsoft.com/library/4f882d94-262b-4494-b0a6-ba9ba1f5f177\" data-linktype=\"external\">Secure Coding Guidelines</a>.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../../../visual-basic/programming-guide/program-structure/coding-conventions\" data-linktype=\"relative-path\">Visual Basic Coding Conventions</a><br> <a href=\"http://msdn.microsoft.com/library/4f882d94-262b-4494-b0a6-ba9ba1f5f177\" data-linktype=\"external\">Secure Coding Guidelines</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"f4f60de9-d49b-4fb6-bab1-20e19ea24710\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"32\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/inside-a-program/coding-conventions.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/inside-a-program/coding-conventions.md\">\r\n<meta name=\"document_id\" content=\"7ab9903c-9674-0660-1021-017dd50c989b\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"C# Coding Conventions (C# Programming Guide) | Microsoft Docs","ms.assetid":"f4f60de9-d49b-4fb6-bab1-20e19ea24710","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":32,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["coding conventions, C#","Visual C#, coding conventions","C# language, coding conventions"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Absolute urls and other fixes (#1281)","commit_sha":"f7dffe4885b331cec8d37f3cc5c9163f69c3b4c9","commit_date":"2016-11-22 12:57:26 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/inside-a-program/coding-conventions.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/inside-a-program/coding-conventions.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/inside-a-program/coding-conventions.md","document_id":"7ab9903c-9674-0660-1021-017dd50c989b","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/inside-a-program/coding-conventions","toc_asset_id":"articles/csharp/programming-guide/inside-a-program/toc.json","toc_rel":"toc.json","_op_ogTitle":"C# Coding Conventions (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":1728,"_op_rawTitle":"<h1 id=\"c-coding-conventions-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/inside-a-program/coding-conventions.md\" sourcestartlinenumber=\"38\" sourceendlinenumber=\"38\">C# Coding Conventions (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/inside-a-program/coding-conventions","fileRelativePath":"articles/csharp/programming-guide/inside-a-program/coding-conventions.html"},"themesRelativePathToOutputRoot":"_themes/"}