{"content":"<div><div class=\"content\">\n<p>Instance constructors are used to create and initialize any instance member variables when you use the <a href=\"../../language-reference/keywords/new\" data-linktype=\"relative-path\">new</a> expression to create an object of a <a href=\"../../language-reference/keywords/class\" data-linktype=\"relative-path\">class</a>. To initialize a <a href=\"../../language-reference/keywords/static\" data-linktype=\"relative-path\">static</a> class, or static variables in a non-static class, you must define a static constructor. For more information, see <a href=\"static-constructors\" data-linktype=\"relative-path\">Static Constructors</a>.  </p>\n<p> The following example shows an instance constructor:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideObjects#5\">        class CoOrds\n        {\n            public int x, y;\n\n            // constructor\n            public CoOrds()\n            {\n                x = 0;\n                y = 0;\n            }\n        }\n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> For clarity, this class contains public fields. The use of public fields is not a recommended programming practice because it allows any method anywhere in a program unrestricted and unverified access to an object&#39;s inner workings. Data members should generally be private, and should be accessed only through class methods and properties.  </p>\n</div>\n<p> This instance constructor is called whenever an object based on the <code>CoOrds</code> class is created. A constructor like this one, which takes no arguments, is called a <em>default constructor</em>. However, it is often useful to provide additional constructors. For example, we can add a constructor to the <code>CoOrds</code> class that allows us to specify the initial values for the data members:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideObjects#76\">            // A constructor with two arguments:\n            public CoOrds(int x, int y)\n            {\n                this.x = x;\n                this.y = y;\n            }\n</code></pre><p> This allows <code>CoOrd</code> objects to be created with default or specific initial values, like this:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideObjects#77\">                CoOrds p1 = new CoOrds();\n                CoOrds p2 = new CoOrds(5, 3);\n</code></pre><p> If a class does not have a constructor, a default constructor is automatically generated and default values are used to initialize the object fields. For example, an <a href=\"../../language-reference/keywords/int\" data-linktype=\"relative-path\">int</a> is initialized to 0. For more information on default values, see <a href=\"../../language-reference/keywords/default-values-table\" data-linktype=\"relative-path\">Default Values Table</a>. Therefore, because the <code>CoOrds</code> class default constructor initializes all data members to zero, it can be removed altogether without changing how the class works. A complete example using multiple constructors is provided in Example 1 later in this topic, and an example of an automatically generated constructor is provided in Example 2.  </p>\n<p> Instance constructors can also be used to call the instance constructors of base classes. The class constructor can invoke the constructor of the base class through the initializer, as follows:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideObjects#78\">        class Circle : Shape\n        {\n            public Circle(double radius)\n                : base(radius, 0)\n            {\n            }\n        }\n</code></pre><p> In this example, the <code>Circle</code> class passes values representing radius and height to the constructor provided by <code>Shape</code> from which <code>Circle</code> is derived. A complete example using <code>Shape</code> and <code>Circle</code> appears in this topic as Example 3.  </p>\n<h2 id=\"example-1\">Example 1</h2>\n<p> The following example demonstrates a class with two class constructors, one without arguments and one with two arguments.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideObjects#4\">        class CoOrds\n        {\n            public int x, y;\n\n            // Default constructor:\n            public CoOrds()\n            {\n                x = 0;\n                y = 0;\n            }\n\n            // A constructor with two arguments:\n            public CoOrds(int x, int y)\n            {\n                this.x = x;\n                this.y = y;\n            }\n\n            // Override the ToString method:\n            public override string ToString()\n            {\n                return (String.Format(&quot;({0},{1})&quot;, x, y));\n            }\n        }\n\n        class MainClass\n        {\n            static void Main()\n            {\n                CoOrds p1 = new CoOrds();\n                CoOrds p2 = new CoOrds(5, 3);\n\n                // Display the results using the overriden ToString method:\n                Console.WriteLine(&quot;CoOrds #1 at {0}&quot;, p1);\n                Console.WriteLine(&quot;CoOrds #2 at {0}&quot;, p2);\n                Console.ReadKey();\n            }\n        }\n        /* Output:\n         CoOrds #1 at (0,0)\n         CoOrds #2 at (5,3)        \n        */\n</code></pre><h2 id=\"example-2\">Example 2</h2>\n<p> In this example, the class <code>Person</code> does not have any constructors, in which case, a default constructor is automatically provided and the fields are initialized to their default values.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideObjects#8\">        public class Person\n        {\n            public int age;\n            public string name;\n        }\n\n        class TestPerson\n        {\n            static void Main()\n            {\n                Person person = new Person();\n\n                Console.WriteLine(&quot;Name: {0}, Age: {1}&quot;, person.name, person.age);\n                // Keep the console window open in debug mode.\n                Console.WriteLine(&quot;Press any key to exit.&quot;);\n                Console.ReadKey();\n            }\n        }\n        // Output:  Name: , Age: 0\n</code></pre><p> Notice that the default value of <code>age</code> is <code>0</code> and the default value of <code>name</code> is <code>null</code>. For more information on default values, see <a href=\"../../language-reference/keywords/default-values-table\" data-linktype=\"relative-path\">Default Values Table</a>.  </p>\n<h2 id=\"example-3\">Example 3</h2>\n<p> The following example demonstrates using the base class initializer. The <code>Circle</code> class is derived from the general class <code>Shape</code>, and the <code>Cylinder</code> class is derived from the <code>Circle</code> class. The constructor on each derived class is using its base class initializer.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideObjects#9\">    abstract class Shape\n    {\n        public const double pi = Math.PI;\n        protected double x, y;\n\n        public Shape(double x, double y)\n        {\n            this.x = x;\n            this.y = y;\n        }\n\n        public abstract double Area();\n    }\n\n    class Circle : Shape\n    {\n        public Circle(double radius)\n            : base(radius, 0)\n        {\n        }\n        public override double Area()\n        {\n            return pi * x * x;\n        }\n    }\n\n    class Cylinder : Circle\n    {\n        public Cylinder(double radius, double height)\n            : base(radius)\n        {\n            y = height;\n        }\n\n        public override double Area()\n        {\n            return (2 * base.Area()) + (2 * pi * x * y);\n        }\n    }\n\n    class TestShapes\n    {\n        static void Main()\n        {\n            double radius = 2.5;\n            double height = 3.0;\n\n            Circle ring = new Circle(radius);\n            Cylinder tube = new Cylinder(radius, height);\n\n            Console.WriteLine(&quot;Area of the circle = {0:F2}&quot;, ring.Area());\n            Console.WriteLine(&quot;Area of the cylinder = {0:F2}&quot;, tube.Area());\n\n            // Keep the console window open in debug mode.\n            Console.WriteLine(&quot;Press any key to exit.&quot;);\n            Console.ReadKey();\n        }\n    }\n    /* Output:\n        Area of the circle = 19.63\n        Area of the cylinder = 86.39\n    */\n</code></pre><p> For more examples on invoking the base class constructors, see <a href=\"../../language-reference/keywords/virtual\" data-linktype=\"relative-path\">virtual</a>, <a href=\"../../language-reference/keywords/override\" data-linktype=\"relative-path\">override</a>, and <a href=\"../../language-reference/keywords/base\" data-linktype=\"relative-path\">base</a>.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">Classes and Structs</a><br> <a href=\"constructors\" data-linktype=\"relative-path\">Constructors</a><br> <a href=\"destructors\" data-linktype=\"relative-path\">Destructors</a><br> <a href=\"../../language-reference/keywords/static\" data-linktype=\"relative-path\">static</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"24663779-c1e5-4af4-a942-ca554e4c542d\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"26\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/classes-and-structs/instance-constructors.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/classes-and-structs/instance-constructors.md\">\r\n<meta name=\"document_id\" content=\"27ea8135-04b5-bd20-15a3-8b7c7916c1b1\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Instance Constructors (C# Programming Guide) | Microsoft Docs","ms.assetid":"24663779-c1e5-4af4-a942-ca554e4c542d","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":26,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["constructors [C#], instance constructors","instance constructors [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/classes-and-structs/instance-constructors.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/classes-and-structs/instance-constructors.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/classes-and-structs/instance-constructors.md","document_id":"27ea8135-04b5-bd20-15a3-8b7c7916c1b1","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/classes-and-structs/instance-constructors","toc_asset_id":"articles/csharp/programming-guide/classes-and-structs/toc.json","toc_rel":"toc.json","_op_ogTitle":"Instance Constructors (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":873,"_op_rawTitle":"<h1 id=\"instance-constructors-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/classes-and-structs/instance-constructors.md\" sourcestartlinenumber=\"37\" sourceendlinenumber=\"37\">Instance Constructors (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/classes-and-structs/instance-constructors","fileRelativePath":"articles/csharp/programming-guide/classes-and-structs/instance-constructors.html"},"themesRelativePathToOutputRoot":"_themes/"}