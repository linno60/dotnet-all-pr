{"content":"<div><div class=\"content\">\n<p>This example shows how to create an immutable lightweight class that serves only to encapsulate a set of auto-implemented properties. Use this kind of construct instead of a struct when you must use reference type semantics.  </p>\n<p> You can make an immutable property in two ways.  You can declare the <a href=\"../../language-reference/keywords/set\" data-linktype=\"relative-path\">set</a> accessor.to be <a href=\"../../language-reference/keywords/private\" data-linktype=\"relative-path\">private</a>.  The property is only settable within the type, but it is immutable to consumers.  You can instead declare only the <a href=\"../../language-reference/keywords/get\" data-linktype=\"relative-path\">get</a> accessor, which makes the property immutable everywhere except in the typeâ€™s constructor.  </p>\n<p> When you declare a private <code>set</code> accessor, you cannot use an object initializer to initialize the property. You must use a constructor or a factory method.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following example shows two ways to implement an immutable class that has auto-implemented properties. Each way declares one of the properties with a private <code>set</code> and one of the properties with a <code>get</code> only.  The first class uses a constructor only to initialize the properties, and the second class uses a static factory method that calls a constructor.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">// This class is immutable. After an object is created,   \n    // it cannot be modified from outside the class. It uses a   \n    // constructor to initialize its properties.   \n    class Contact  \n    {  \n        // Read-only properties.   \n        public string Name { get; }  \n        public string Address { get; private set; }  \n\n        // Public constructor.   \n        public Contact(string contactName, string contactAddress)  \n        {  \n            Name = contactName;  \n            Address = contactAddress;                 \n        }  \n    }  \n\n    // This class is immutable. After an object is created,   \n    // it cannot be modified from outside the class. It uses a   \n    // static method and private constructor to initialize its properties.      \n    public class Contact2  \n    {  \n        // Read-only properties.   \n        public string Name { get; private set; }  \n        public string Address { get; }  \n\n        // Private constructor.   \n        private Contact2(string contactName, string contactAddress)  \n        {  \n            Name = contactName;  \n            Address = contactAddress;                 \n        }  \n\n        // Public factory method.   \n        public static Contact2 CreateContact(string name, string address)  \n        {  \n            return new Contact2(name, address);  \n        }  \n    }  \n\n    public class Program  \n    {   \n        static void Main()  \n        {  \n            // Some simple data sources.   \n            string[] names = {&quot;Terry Adams&quot;,&quot;Fadi Fakhouri&quot;, &quot;Hanying Feng&quot;,   \n                              &quot;Cesar Garcia&quot;, &quot;Debra Garcia&quot;};  \n            string[] addresses = {&quot;123 Main St.&quot;, &quot;345 Cypress Ave.&quot;, &quot;678 1st Ave&quot;,  \n                                  &quot;12 108th St.&quot;, &quot;89 E. 42nd St.&quot;};  \n\n            // Simple query to demonstrate object creation in select clause.   \n            // Create Contact objects by using a constructor.   \n            var query1 = from i in Enumerable.Range(0, 5)  \n                        select new Contact(names[i], addresses[i]);  \n\n            // List elements cannot be modified by client code.   \n            var list = query1.ToList();  \n            foreach (var contact in list)  \n            {  \n                Console.WriteLine(&quot;{0}, {1}&quot;, contact.Name, contact.Address);  \n            }  \n\n            // Create Contact2 objects by using a static factory method.   \n            var query2 = from i in Enumerable.Range(0, 5)  \n                         select Contact2.CreateContact(names[i], addresses[i]);  \n\n            // Console output is identical to query1.   \n            var list2 = query2.ToList();  \n\n            // List elements cannot be modified by client code.   \n            // CS0272:   \n            // list2[0].Name = &quot;Eugene Zabokritski&quot;;   \n\n            // Keep the console open in debug mode.  \n            Console.WriteLine(&quot;Press any key to exit.&quot;);  \n            Console.ReadKey();                  \n        }  \n    }  \n\n/* Output:  \n    Terry Adams, 123 Main St.  \n    Fadi Fakhouri, 345 Cypress Ave.  \n    Hanying Feng, 678 1st Ave  \n    Cesar Garcia, 12 108th St.  \n    Debra Garcia, 89 E. 42nd St.  \n*/  \n</code></pre><p> The compiler creates backing fields for each auto-implemented property. The fields are not accessible directly from source code.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"properties\" data-linktype=\"relative-path\">Properties</a><br> <a href=\"../../language-reference/keywords/struct\" data-linktype=\"relative-path\">struct</a><br> <a href=\"object-and-collection-initializers\" data-linktype=\"relative-path\">Object and Collection Initializers</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"1dc5a8ad-a4f7-4f32-8506-3fc6d8c8bfed\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"11\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/classes-and-structs/how-to-implement-a-lightweight-class-with-auto-implemented-properties.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/classes-and-structs/how-to-implement-a-lightweight-class-with-auto-implemented-properties.md\">\r\n<meta name=\"document_id\" content=\"da0d0050-dd37-4a6f-ff66-f1cea4e48a9a\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"How to: Implement a Lightweight Class with Auto-Implemented Properties (C# Programming Guide) | Microsoft Docs","ms.assetid":"1dc5a8ad-a4f7-4f32-8506-3fc6d8c8bfed","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":11,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["auto-implemented properties [C#]","properties [C#], auto-implemented"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/classes-and-structs/how-to-implement-a-lightweight-class-with-auto-implemented-properties.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/classes-and-structs/how-to-implement-a-lightweight-class-with-auto-implemented-properties.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/classes-and-structs/how-to-implement-a-lightweight-class-with-auto-implemented-properties.md","document_id":"da0d0050-dd37-4a6f-ff66-f1cea4e48a9a","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/classes-and-structs/how-to-implement-a-lightweight-class-with-auto-implemented-properties","toc_asset_id":"articles/csharp/programming-guide/classes-and-structs/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Implement a Lightweight Class with Auto-Implemented Properties (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":541,"_op_rawTitle":"<h1 id=\"how-to-implement-a-lightweight-class-with-auto-implemented-properties-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/classes-and-structs/how-to-implement-a-lightweight-class-with-auto-implemented-properties.md\" sourcestartlinenumber=\"37\" sourceendlinenumber=\"37\">How to: Implement a Lightweight Class with Auto-Implemented Properties (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/classes-and-structs/how-to-implement-a-lightweight-class-with-auto-implemented-properties","fileRelativePath":"articles/csharp/programming-guide/classes-and-structs/how-to-implement-a-lightweight-class-with-auto-implemented-properties.html"},"themesRelativePathToOutputRoot":"_themes/"}