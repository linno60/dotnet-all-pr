{"content":"<div><div class=\"content\">\n<p>Properties provide the convenience of public data members without the risks that come with unprotected, uncontrolled, and unverified access to an object&#39;s data. This is accomplished through <em>accessors</em>: special methods that assign and retrieve values from the underlying data member. The <a href=\"../../language-reference/keywords/set\" data-linktype=\"relative-path\">set</a> accessor enables data members to be assigned, and the <a href=\"../../language-reference/keywords/get\" data-linktype=\"relative-path\">get</a> accessor retrieves data member values.  </p>\n<p> This sample shows a <code>Person</code> class that has two properties: <code>Name</code> (string) and <code>Age</code> (int). Both properties provide <code>get</code> and <code>set</code> accessors, so they are considered read/write properties.  </p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"lang-cs\" name=\"csProgGuideObjects#33\">        class Person\n        {\n            private string name = &quot;N/A&quot;;\n            private int age = 0;\n\n            // Declare a Name property of type string:\n            public string Name\n            {\n                get\n                {\n                    return name;\n                }\n                set\n                {\n                    name = value;\n                }\n            }\n\n            // Declare an Age property of type int:\n            public int Age\n            {\n                get\n                {\n                    return age;\n                }\n\n                set\n                {\n                    age = value;\n                }\n            }\n\n            public override string ToString()\n            {\n                return &quot;Name = &quot; + Name + &quot;, Age = &quot; + Age;\n            }\n        }\n\n        class TestPerson\n        {\n            static void Main()\n            {\n                // Create a new Person object:\n                Person person = new Person();\n\n                // Print out the name and the age associated with the person:\n                Console.WriteLine(&quot;Person details - {0}&quot;, person);\n\n                // Set some values on the person object:\n                person.Name = &quot;Joe&quot;;\n                person.Age = 99;\n                Console.WriteLine(&quot;Person details - {0}&quot;, person);\n\n                // Increment the Age property:\n                person.Age += 1;\n                Console.WriteLine(&quot;Person details - {0}&quot;, person);\n\n                // Keep the console window open in debug mode.\n                Console.WriteLine(&quot;Press any key to exit.&quot;);\n                Console.ReadKey();\n            }\n        }\n        /* Output:\n            Person details - Name = N/A, Age = 0\n            Person details - Name = Joe, Age = 99\n            Person details - Name = Joe, Age = 100\n        */\n</code></pre><h2 id=\"robust-programming\">Robust Programming</h2>\n<p> In the previous example, the <code>Name</code> and <code>Age</code> properties are <a href=\"../../language-reference/keywords/public\" data-linktype=\"relative-path\">public</a> and include both a <code>get</code> and a <code>set</code> accessor. This allows any object to read and write these properties. It is sometimes desirable, however, to exclude one of the accessors. Omitting the <code>set</code> accessor, for example, makes the property read-only:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideObjects#87\">            public string Name\n            {\n                get\n                {\n                    return name;\n                }\n            }\n</code></pre><p> Alternatively, you can expose one accessor publicly but make the other private or protected. For more information, see <a href=\"restricting-accessor-accessibility\" data-linktype=\"relative-path\">Asymmetric Accessor Accessibility</a>.  </p>\n<p> Once the properties are declared, they can be used as if they were fields of the class. This allows for a very natural syntax when both getting and setting the value of a property, as in the following statements:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideObjects#35\">                person.Name = &quot;Joe&quot;;\n                person.Age = 99;\n</code></pre><p> Note that in a property <code>set</code> method a special <code>value</code> variable is available. This variable contains the value that the user specified, for example:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideObjects#36\">                    name = value;\n</code></pre><p> Notice the clean syntax for incrementing the <code>Age</code> property on a <code>Person</code> object:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideObjects#37\">                person.Age += 1;\n</code></pre><p> If separate <code>set</code> and <code>get</code> methods were used to model properties, the equivalent code might look like this:  </p>\n<pre class=\"loading\"><code>person.SetAge(person.GetAge() + 1);   \n</code></pre><p> The <code>ToString</code> method is overridden in this example:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideObjects#38\">            public override string ToString()\n            {\n                return &quot;Name = &quot; + Name + &quot;, Age = &quot; + Age;\n            }\n</code></pre><p> Notice that <code>ToString</code> is not explicitly used in the program. It is invoked by default by the <code>WriteLine</code> calls.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"properties\" data-linktype=\"relative-path\">Properties</a><br> <a href=\"index\" data-linktype=\"relative-path\">Classes and Structs</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"a4962fef-af7e-4c4b-a929-4ae4d646ab8a\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"19\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/classes-and-structs/how-to-declare-and-use-read-write-properties.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/classes-and-structs/how-to-declare-and-use-read-write-properties.md\">\r\n<meta name=\"document_id\" content=\"0434e10c-367f-94d0-0da5-41281de7fd02\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"How to: Declare and Use Read Write Properties (C# Programming Guide) | Microsoft Docs","ms.assetid":"a4962fef-af7e-4c4b-a929-4ae4d646ab8a","translation.priority.ht":["de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","ru-ru","zh-cn","zh-tw"],"caps.latest.revision":19,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["get accessor [C#], declaring properties","set accessor [C#]","properties [C#], declaring","read/write properties [C#]","accessors [C#], declaring properties with"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/classes-and-structs/how-to-declare-and-use-read-write-properties.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/classes-and-structs/how-to-declare-and-use-read-write-properties.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/classes-and-structs/how-to-declare-and-use-read-write-properties.md","document_id":"0434e10c-367f-94d0-0da5-41281de7fd02","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/classes-and-structs/how-to-declare-and-use-read-write-properties","toc_asset_id":"articles/csharp/programming-guide/classes-and-structs/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Declare and Use Read Write Properties (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":529,"_op_rawTitle":"<h1 id=\"how-to-declare-and-use-read-write-properties-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/classes-and-structs/how-to-declare-and-use-read-write-properties.md\" sourcestartlinenumber=\"41\" sourceendlinenumber=\"41\">How to: Declare and Use Read Write Properties (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/classes-and-structs/how-to-declare-and-use-read-write-properties","fileRelativePath":"articles/csharp/programming-guide/classes-and-structs/how-to-declare-and-use-read-write-properties.html"},"themesRelativePathToOutputRoot":"_themes/"}