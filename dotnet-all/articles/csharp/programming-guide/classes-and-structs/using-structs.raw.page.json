{"content":"<div><div class=\"content\">\n<p>The <code>struct</code> type is suitable for representing lightweight objects such as <code>Point</code>, <code>Rectangle</code>, and <code>Color</code>. Although it is just as convenient to represent a point as a <a href=\"../../language-reference/keywords/class\" data-linktype=\"relative-path\">class</a> with <a href=\"auto-implemented-properties\" data-linktype=\"relative-path\">Auto-Implemented Properties</a>, a <a href=\"../../language-reference/keywords/struct\" data-linktype=\"relative-path\">struct</a> might be more efficient in some scenarios. For example, if you declare an array of 1000 <code>Point</code> objects, you will allocate additional memory for referencing each object; in this case, a struct would be less expensive. Because the .NET Framework contains an object called <a class=\"xref\" href=\"../../../../api/system.drawing.point\" data-linktype=\"relative-path\">Point</a>, the struct in this example is named &quot;CoOrds&quot; instead.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideObjects#1\">public struct CoOrds\n{\n    public int x, y;\n\n    public CoOrds(int p1, int p2)\n    {\n        x = p1;\n        y = p2;\n    }\n}\n</code></pre><p> It is an error to define a default (parameterless) constructor for a struct. It is also an error to initialize an instance field in a struct body. You can initialize struct members only by using a parameterized constructor or by accessing the members individually after the struct is declared. Any private or otherwise inaccessible members can be initialized only in a constructor.  </p>\n<p> When you create a struct object using the <a href=\"../../language-reference/keywords/new\" data-linktype=\"relative-path\">new</a> operator, it gets created and the appropriate constructor is called. Unlike classes, structs can be instantiated without using the <code>new</code> operator. In such a case, there is no constructor call, which makes the allocation more efficient. However, the fields will remain unassigned and the object cannot be used until all of the fields are initialized.  </p>\n<p> When a struct contains a reference type as a member, the default constructor of the member must be invoked explicitly, otherwise the member remains unassigned and the struct cannot be used. (This results in compiler error CS0171.)  </p>\n<p> There is no inheritance for structs as there is for classes. A struct cannot inherit from another struct or class, and it cannot be the base of a class. Structs, however, inherit from the base class <a class=\"xref\" href=\"../../../../api/system.object\" data-linktype=\"relative-path\">Object</a>. A struct can implement interfaces, and it does that exactly as classes do.  </p>\n<p> You cannot declare a class using the keyword <code>struct</code>. In C#, classes and structs are semantically different. A struct is a value type, while a class is a reference type. For more information, see <a href=\"../../language-reference/keywords/value-types\" data-linktype=\"relative-path\">Value Types</a>.  </p>\n<p> Unless you need reference-type semantics, a small class may be more efficiently handled by the system if you declare it as a struct instead.  </p>\n<h2 id=\"example-1\">Example 1</h2>\n<h3 id=\"description\">Description</h3>\n<p> This example demonstrates <code>struct</code> initialization using both default and parameterized constructors.  </p>\n<h3 id=\"code\">Code</h3>\n<pre><code class=\"lang-cs\" name=\"csProgGuideObjects#1\">public struct CoOrds\n{\n    public int x, y;\n\n    public CoOrds(int p1, int p2)\n    {\n        x = p1;\n        y = p2;\n    }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"csProgGuideObjects#2\">// Declare and initialize struct objects.\nclass TestCoOrds\n{\n    static void Main()\n    {\n        // Initialize:   \n        CoOrds coords1 = new CoOrds();\n        CoOrds coords2 = new CoOrds(10, 10);\n\n        // Display results:\n        Console.Write(&quot;CoOrds 1: &quot;);\n        Console.WriteLine(&quot;x = {0}, y = {1}&quot;, coords1.x, coords1.y);\n\n        Console.Write(&quot;CoOrds 2: &quot;);\n        Console.WriteLine(&quot;x = {0}, y = {1}&quot;, coords2.x, coords2.y);\n\n        // Keep the console window open in debug mode.\n        Console.WriteLine(&quot;Press any key to exit.&quot;);\n        Console.ReadKey();\n    }\n}\n/* Output:\n    CoOrds 1: x = 0, y = 0\n    CoOrds 2: x = 10, y = 10\n*/\n</code></pre><h2 id=\"example-2\">Example 2</h2>\n<h3 id=\"description-1\">Description</h3>\n<p> This example demonstrates a feature that is unique to structs. It creates a CoOrds object without using the <code>new</code> operator. If you replace the word <code>struct</code> with the word <code>class</code>, the program will not compile.  </p>\n<h3 id=\"code-1\">Code</h3>\n<pre><code class=\"lang-cs\" name=\"csProgGuideObjects#1\">public struct CoOrds\n{\n    public int x, y;\n\n    public CoOrds(int p1, int p2)\n    {\n        x = p1;\n        y = p2;\n    }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"csProgGuideObjects#3\">// Declare a struct object without &quot;new.&quot;\nclass TestCoOrdsNoNew\n{\n    static void Main()\n    {\n        // Declare an object:\n        CoOrds coords1;\n\n        // Initialize:\n        coords1.x = 10;\n        coords1.y = 20;\n\n        // Display results:\n        Console.Write(&quot;CoOrds 1: &quot;);\n        Console.WriteLine(&quot;x = {0}, y = {1}&quot;, coords1.x, coords1.y);\n\n        // Keep the console window open in debug mode.\n        Console.WriteLine(&quot;Press any key to exit.&quot;);\n        Console.ReadKey();\n    }\n}\n// Output: CoOrds 1: x = 10, y = 20\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">Classes and Structs</a><br> <a href=\"structs\" data-linktype=\"relative-path\">Structs</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"cea4a459-9eb9-442b-8d08-490e0797ba38\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"28\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/classes-and-structs/using-structs.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/classes-and-structs/using-structs.md\">\r\n<meta name=\"document_id\" content=\"7a42242c-ece3-7d68-6b53-cd76f5cf5146\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Using Structs (C# Programming Guide) | Microsoft Docs","ms.assetid":"cea4a459-9eb9-442b-8d08-490e0797ba38","translation.priority.ht":["de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","ru-ru","zh-cn","zh-tw"],"caps.latest.revision":28,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["structs [C#], using"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/classes-and-structs/using-structs.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/classes-and-structs/using-structs.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/classes-and-structs/using-structs.md","document_id":"7a42242c-ece3-7d68-6b53-cd76f5cf5146","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/classes-and-structs/using-structs","toc_asset_id":"articles/csharp/programming-guide/classes-and-structs/toc.json","toc_rel":"toc.json","_op_ogTitle":"Using Structs (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":643,"_op_rawTitle":"<h1 id=\"using-structs-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/classes-and-structs/using-structs.md\" sourcestartlinenumber=\"37\" sourceendlinenumber=\"37\">Using Structs (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/classes-and-structs/using-structs","fileRelativePath":"articles/csharp/programming-guide/classes-and-structs/using-structs.html"},"themesRelativePathToOutputRoot":"_themes/"}