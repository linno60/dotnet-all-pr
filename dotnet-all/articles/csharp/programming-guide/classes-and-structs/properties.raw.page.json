{"content":"<div><div class=\"content\">\n<p>A property is a member that provides a flexible mechanism to read, write, or compute the value of a private field. Properties can be used as if they are public data members, but they are actually special methods called <em>accessors</em>. This enables data to be accessed easily and still helps promote the safety and flexibility of methods.  </p>\n<h2 id=\"properties-overview\">Properties overview</h2>\n<ul>\n<li><p>Properties enable a class to expose a public way of getting and setting values, while hiding implementation or verification code.  </p>\n</li>\n<li><p>A <a href=\"../../language-reference/keywords/get\" data-linktype=\"relative-path\">get</a> property accessor is used to return the property value, and a <a href=\"../../language-reference/keywords/set\" data-linktype=\"relative-path\">set</a> property accessor is used to assign a new value. These accessors can have different access levels. For more information, see <a href=\"restricting-accessor-accessibility\" data-linktype=\"relative-path\">Restricting Accessor Accessibility</a>.  </p>\n</li>\n<li><p>The <a href=\"../../language-reference/keywords/value\" data-linktype=\"relative-path\">value</a> keyword is used to define the value being assigned by the <code>set</code> accessor.  </p>\n</li>\n<li><p>Properties can be <em>read-write</em> (they have both a <code>get</code> and a <code>set</code> accessor), <em>read-only</em> (they have a <code>get</code> accessor but no <code>set</code> accessor), or <em>write-only</em> (they have a <code>set</code> accessor, but no <code>get</code> accessor). Write-only properties are rare and are most commonly used to restrict access to sensitive data.</p>\n</li>\n<li><p>Simple properties that require no custom accessor code can be implemented either as expression body definitions or as <a href=\"auto-implemented-properties\" data-linktype=\"relative-path\">auto-implemented properties</a>.</p>\n</li>\n</ul>\n<h2 id=\"properties-with-backing-fields\">Properties with backing fields</h2>\n<p>One basic pattern for implementing a property involves using a private backing field for setting and retrieving the property value. The <code>get</code> accessor returns the value of the private field, and the <code>set</code> accessor may perform some data validation before assigning a value to the private field. Both accessors may also perform some conversion or computation on the data before it is stored or returned.</p>\n<p>The following example illustrates this pattern. In this example, the <code>TimePeriod</code> class represents an interval of time. Internally, the class stores the time interval in seconds in a private field named <code>seconds</code>. A read-write property named <code>Hours</code> allows the customer to specify the time interval in hours. Both the <code>get</code> and the <code>set</code> accessors perform the necessary conversion between hours and seconds. In addition, the <code>set</code> accessor validates the data and throws an <a class=\"xref\" href=\"../../../../api/system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a> if the number of hours is invalid. </p>\n<pre><code class=\"lang-cs\" name=\"Properties#1\">using System;\n\nclass TimePeriod\n{\n   private double seconds;\n\n   public double Hours\n   {\n       get { return seconds / 3600; }\n       set { \n          if (value &lt; 0 || value &gt; 24)\n             throw new ArgumentOutOfRangeException(\n                   $&quot;{nameof(value)} must be between 0 and 24.&quot;);\n\n          seconds = value * 3600; \n       }\n   }\n}\n\nclass Program\n{\n   static void Main()\n   {\n       TimePeriod t = new TimePeriod();\n       // The property assignment causes the &#39;set&#39; accessor to be called.\n       t.Hours = 24;\n\n       // Retrieving the property causes the &#39;get&#39; accessor to be called.\n       Console.WriteLine($&quot;Time in hours: {t.Hours}&quot;);\n   }\n}\n// The example displays the following output:\n//    Time in hours: 24\n</code></pre><h2 id=\"expression-body-definitions\">Expression body definitions</h2>\n<p> Property accessors often consist of single-line statements that just assign or return the result of an expression. You can implement these properties as expression-bodied members. Expression body definitions consist of the <code>=&gt;</code> symbol followed by the expression to assign to or retrieve from the property.</p>\n<p> Starting with C# 6, read-only properties can implement the <code>get</code> accessor as an expression-bodied member. In this case, neither the <code>get</code> accessor keyword nor the <code>return</code> keyword is used. The following example implements the read-only <code>Name</code> property as an expression-bodied member.</p>\n<pre><code class=\"lang-cs\" name=\"Properties#2\">using System;\n\npublic class Person\n{\n   private string firstName;\n   private string lastName;\n   \n   public Person(string first, string last)\n   {\n      firstName = first;\n      lastName = last;\n   }\n\n   public string Name =&gt; $&quot;{firstName} {lastName}&quot;;   \n}\n\npublic class Example\n{\n   public static void Main()\n   {\n      var person = new Person(&quot;Wayne&quot;, &quot;Withrow&quot;);\n      Console.WriteLine(person.Name);\n   }\n}\n// The example displays the following output:\n//       John Doe\n\n</code></pre><p> Starting with C# 7, both the <code>get</code> and the <code>set</code> accessor can be implemented as expression-bodied members. In this case, the <code>get</code> and <code>set</code> keywords must be present. The following example illustrates the use of expression body definitions for both accessors. Note that the <code>return</code> keyword is not used with the <code>get</code> accessor.</p>\n<pre><code class=\"lang-cs\" name=\"Properties#3\">using System;\n\npublic class SaleItem\n{\n   string name;\n   decimal cost;\n   \n   public SaleItem(string name, decimal cost)\n   {\n      this.name = name;\n      this.cost = cost;\n   }\n\n   public string Name \n   {\n      get =&gt; name;\n      set =&gt; name = value;\n   }\n\n   public decimal Price\n   {\n      get =&gt; cost;\n      set =&gt; cost = value; \n   }\n}\n\nclass Program\n{\n   static void Main(string[] args)\n   {\n      var item = new SaleItem(&quot;Shoes&quot;, 19.95m);\n      Console.WriteLine($&quot;{item.Name}: sells for {item.Price:C2}&quot;);\n   }\n}\n// The example displays output like the following:\n//       Shoes: sells for $19.95\n\n\n\n</code></pre><h2 id=\"auto-implemented-properties\">Auto-implemented properties</h2>\n<p>In some cases, property <code>get</code> and <code>set</code> accessors just assign a value to or retrieve a value from a backing field without including any additional logic. By using auto-implemented properties, you can simplify your code while having the C# compiler transparently provide the backing field for you. </p>\n<p>If a property has both a <code>get</code> and a <code>set</code> accessor, both must be auto-implemented. You define an auto-implemented property by using the <code>get</code> and <code>set</code> keywords without providing any implementation. The following example repeats the previous one, except that <code>Name</code> and <code>Price</code> are auto-implemented properties. Note that the example also removes the parameterized constructor, so that <code>SaleItem</code> objects are now initialized with a call to the default constructor and an <a href=\"object-and-collection-initializers\" data-linktype=\"relative-path\">object initializer</a>.</p>\n<pre><code class=\"lang-cs\" name=\"Properties#4\">using System;\n\npublic class SaleItem\n{\n   public string Name \n   { get; set; }\n\n   public decimal Price\n   { get; set; }\n}\n\nclass Program\n{\n   static void Main(string[] args)\n   {\n      var item = new SaleItem{ Name = &quot;Shoes&quot;, Price = 19.95m };\n      Console.WriteLine($&quot;{item.Name}: sells for {item.Price:C2}&quot;);\n   }\n}\n// The example displays output like the following:\n//       Shoes: sells for $19.95\n\n\n\n</code></pre><h2 id=\"related-sections\">Related sections</h2>\n<ul>\n<li><p><a href=\"using-properties\" data-linktype=\"relative-path\">Using Properties</a>  </p>\n</li>\n<li><p><a href=\"interface-properties\" data-linktype=\"relative-path\">Interface Properties</a>  </p>\n</li>\n<li><p><a href=\"../indexers/comparison-between-properties-and-indexers\" data-linktype=\"relative-path\">Comparison Between Properties and Indexers</a>  </p>\n</li>\n<li><p><a href=\"restricting-accessor-accessibility\" data-linktype=\"relative-path\">Restricting Accessor Accessibility</a>  </p>\n</li>\n<li><p><a href=\"auto-implemented-properties\" data-linktype=\"relative-path\">Auto-Implemented Properties</a>  </p>\n</li>\n</ul>\n<h2 id=\"c-language-specification\">C# Language Specification</h2>\n<p> For more information, see the <a href=\"../../language-reference/language-specification\" data-linktype=\"relative-path\">C# Language Specification</a>. The language specification is the definitive source for C# syntax and usage.  </p>\n<h2 id=\"see-also\">See also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"using-properties\" data-linktype=\"relative-path\">Using Properties</a><br> <a href=\"../indexers/index\" data-linktype=\"relative-path\">Indexers</a><br> <a href=\"../../language-reference/keywords/get\" data-linktype=\"relative-path\">get keyword</a><br> <a href=\"../../language-reference/keywords/set\" data-linktype=\"relative-path\">set keyword</a>    </p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-all/api/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"e295a8a2-b357-4ee7-a12e-385a44146fa8\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"38\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2017-03-10\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/b595df05e38e793a1d3e0358783847a45c192778/docs/csharp/programming-guide/classes-and-structs/properties.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/classes-and-structs/properties.md\">\r\n<meta name=\"document_id\" content=\"40aa5a3f-ae1c-cefa-163f-a55c4a12b4e4\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Properties (C# Programming Guide) | Microsoft Docs","ms.assetid":"e295a8a2-b357-4ee7-a12e-385a44146fa8","f1_keywords":["cs.properties"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":38,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["properties [C#]","C# language, properties"],"ms.date":"2017-03-10","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"rpetrusha","author_email":"ronpet@microsoft.com","committer_name":"rpetrusha","comitter_email":"ronpet@microsoft.com","message":"Addressed review comments","commit_sha":"b595df05e38e793a1d3e0358783847a45c192778","commit_date":"2017-03-10 09:16:15 -0800"},{"author_name":"rpetrusha","author_email":"ronpet@microsoft.com","committer_name":"rpetrusha","comitter_email":"ronpet@microsoft.com","message":"Corrected build errors","commit_sha":"a49097b44e8799428ee1debc5a152e64019f4b70","commit_date":"2017-03-09 14:32:50 -0800"},{"author_name":"rpetrusha","author_email":"ronpet@microsoft.com","committer_name":"rpetrusha","comitter_email":"ronpet@microsoft.com","message":"Revision for expression-bodied properties","commit_sha":"6caa5b9da01b5ec442d7eb995d9abb8b4c9c22e2","commit_date":"2017-03-09 13:20:50 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/rpetrusha","display_name":"rpetrusha","id":"10886961"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/b595df05e38e793a1d3e0358783847a45c192778/docs/csharp/programming-guide/classes-and-structs/properties.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/classes-and-structs/properties.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/classes-and-structs/properties.md","document_id":"40aa5a3f-ae1c-cefa-163f-a55c4a12b4e4","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/classes-and-structs/properties","toc_asset_id":"articles/csharp/programming-guide/classes-and-structs/toc.json","toc_rel":"toc.json","_op_ogTitle":"Properties (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":969,"_op_rawTitle":"<h1 id=\"properties-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/classes-and-structs/properties.md\" sourcestartlinenumber=\"39\" sourceendlinenumber=\"39\">Properties (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/classes-and-structs/properties","fileRelativePath":"articles/csharp/programming-guide/classes-and-structs/properties.html"},"themesRelativePathToOutputRoot":"_themes/"}