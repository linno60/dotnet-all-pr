{"content":"<div><div class=\"content\">\n<p>Properties can be declared on an <a href=\"../../language-reference/keywords/interface\" data-linktype=\"relative-path\">interface</a>. The following is an example of an interface indexer accessor:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideProperties#14\">        public interface ISampleInterface\n        {\n            // Property declaration:\n            string Name\n            {\n                get;\n                set;\n            }\n        }\n</code></pre><p> The accessor of an interface property does not have a body. Thus, the purpose of the accessors is to indicate whether the property is read-write, read-only, or write-only.  </p>\n<h2 id=\"example\">Example</h2>\n<p> In this example, the interface <code>IEmployee</code> has a read-write property, <code>Name</code>, and a read-only property, <code>Counter</code>. The class <code>Employee</code> implements the <code>IEmployee</code> interface and uses these two properties. The program reads the name of a new employee and the current number of employees and displays the employee name and the computed employee number.  </p>\n<p> You could use the fully qualified name of the property, which references the interface in which the member is declared. For example:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideProperties#16\">            string IEmployee.Name\n            {\n                get { return &quot;Employee Name&quot;; }\n                set { }\n            }\n</code></pre><p> This is called <a href=\"../interfaces/explicit-interface-implementation\" data-linktype=\"relative-path\">Explicit Interface Implementation</a>. For example, if the class <code>Employee</code> is implementing two interfaces <code>ICitizen</code> and <code>IEmployee</code> and both interfaces have the <code>Name</code> property, the explicit interface member implementation will be necessary. That is, the following property declaration:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideProperties#16\">            string IEmployee.Name\n            {\n                get { return &quot;Employee Name&quot;; }\n                set { }\n            }\n</code></pre><p> implements the <code>Name</code> property on the <code>IEmployee</code> interface, while the following declaration:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideProperties#17\">            string ICitizen.Name\n            {\n                get { return &quot;Citizen Name&quot;; }\n                set { }\n            }\n</code></pre><p> implements the <code>Name</code> property on the <code>ICitizen</code> interface.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideProperties#15\">        interface IEmployee\n        {\n            string Name\n            {\n                get;\n                set;\n            }\n\n            int Counter\n            {\n                get;\n            }\n        }\n\n        public class Employee : IEmployee\n        {\n            public static int numberOfEmployees;\n\n            private string name;\n            public string Name  // read-write instance property\n            {\n                get\n                {\n                    return name;\n                }\n                set\n                {\n                    name = value;\n                }\n            }\n\n            private int counter;\n            public int Counter  // read-only instance property\n            {\n                get\n                {\n                    return counter;\n                }\n            }\n\n            public Employee()  // constructor\n            {\n                counter = ++counter + numberOfEmployees;\n            }\n        }\n\n        class TestEmployee\n        {\n            static void Main()\n            {\n                System.Console.Write(&quot;Enter number of employees: &quot;);\n                Employee.numberOfEmployees = int.Parse(System.Console.ReadLine());\n\n                Employee e1 = new Employee();\n                System.Console.Write(&quot;Enter the name of the new employee: &quot;);\n                e1.Name = System.Console.ReadLine();\n\n                System.Console.WriteLine(&quot;The employee information:&quot;);\n                System.Console.WriteLine(&quot;Employee number: {0}&quot;, e1.Counter);\n                System.Console.WriteLine(&quot;Employee name: {0}&quot;, e1.Name);\n            }\n        }\n</code></pre><p>  <strong><code>210 Hazem Abolrous</code></strong>    </p>\n<h2 id=\"sample-output\">Sample Output</h2>\n<p> <code>Enter number of employees: 210</code>  </p>\n<p> <code>Enter the name of the new employee: Hazem Abolrous</code>  </p>\n<p> <code>The employee information:</code>  </p>\n<p> <code>Employee number: 211</code>  </p>\n<p> <code>Employee name: Hazem Abolrous</code>  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"properties\" data-linktype=\"relative-path\">Properties</a><br> <a href=\"using-properties\" data-linktype=\"relative-path\">Using Properties</a><br> <a href=\"../indexers/comparison-between-properties-and-indexers\" data-linktype=\"relative-path\">Comparison Between Properties and Indexers</a><br> <a href=\"../indexers/index\" data-linktype=\"relative-path\">Indexers</a><br> <a href=\"../interfaces/index\" data-linktype=\"relative-path\">Interfaces</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"6503e9ed-33d7-44ec-b4c1-cc16c084b795\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"13\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/classes-and-structs/interface-properties.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/classes-and-structs/interface-properties.md\">\r\n<meta name=\"document_id\" content=\"6a162c28-fb9d-13c0-27f2-7d1c75994846\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Interface Properties (C# Programming Guide) | Microsoft Docs","ms.assetid":"6503e9ed-33d7-44ec-b4c1-cc16c084b795","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":13,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["properties [C#], on interfaces","interfaces [C#], properties"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/classes-and-structs/interface-properties.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/classes-and-structs/interface-properties.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/classes-and-structs/interface-properties.md","document_id":"6a162c28-fb9d-13c0-27f2-7d1c75994846","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/classes-and-structs/interface-properties","toc_asset_id":"articles/csharp/programming-guide/classes-and-structs/toc.json","toc_rel":"toc.json","_op_ogTitle":"Interface Properties (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":398,"_op_rawTitle":"<h1 id=\"interface-properties-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/classes-and-structs/interface-properties.md\" sourcestartlinenumber=\"37\" sourceendlinenumber=\"37\">Interface Properties (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/classes-and-structs/interface-properties","fileRelativePath":"articles/csharp/programming-guide/classes-and-structs/interface-properties.html"},"themesRelativePathToOutputRoot":"_themes/"}