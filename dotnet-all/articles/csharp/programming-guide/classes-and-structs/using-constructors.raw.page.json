{"content":"<div><div class=\"content\">\n<p>When a <a href=\"../../language-reference/keywords/class\" data-linktype=\"relative-path\">class</a> or <a href=\"../../language-reference/keywords/struct\" data-linktype=\"relative-path\">struct</a> is created, its constructor is called. Constructors have the same name as the class or struct, and they usually initialize the data members of the new object.  </p>\n<p> In the following example, a class named <code>Taxi</code> is defined by using a simple constructor. This class is then instantiated with the <a href=\"../../language-reference/keywords/new\" data-linktype=\"relative-path\">new</a> operator. The <code>Taxi</code> constructor is invoked by the <code>new</code> operator immediately after memory is allocated for the new object.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideObjects#53\">    public class Taxi\n    {\n        public bool isInitialized;\n        public Taxi()\n        {\n            isInitialized = true;\n        }\n    }\n\n    class TestTaxi\n    {\n        static void Main()\n        {\n            Taxi t = new Taxi();\n            Console.WriteLine(t.isInitialized);\n        }\n    }\n</code></pre><p> A constructor that takes no parameters is called a <em>default constructor</em>. Default constructors are invoked whenever an object is instantiated by using the <code>new</code> operator and no arguments are provided to <code>new</code>. For more information, see <a href=\"instance-constructors\" data-linktype=\"relative-path\">Instance Constructors</a>.  </p>\n<p> Unless the class is <a href=\"../../language-reference/keywords/static\" data-linktype=\"relative-path\">static</a>, classes without constructors are given a public default constructor by the C# compiler in order to enable class instantiation. For more information, see <a href=\"static-classes-and-static-class-members\" data-linktype=\"relative-path\">Static Classes and Static Class Members</a>.  </p>\n<p> You can prevent a class from being instantiated by making the constructor private, as follows:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideObjects#11\">    class NLog\n    {\n        // Private Constructor:\n        private NLog() { }\n\n        public static double e = Math.E;  //2.71828...\n    }\n</code></pre><p> For more information, see <a href=\"private-constructors\" data-linktype=\"relative-path\">Private Constructors</a>.  </p>\n<p> Constructors for <a href=\"../../language-reference/keywords/struct\" data-linktype=\"relative-path\">struct</a> types resemble class constructors, but <code>structs</code> cannot contain an explicit default constructor because one is provided automatically by the compiler. This constructor initializes each field in the <code>struct</code> to the default values. For more information, see <a href=\"../../language-reference/keywords/default-values-table\" data-linktype=\"relative-path\">Default Values Table</a>. However, this default constructor is only invoked if the <code>struct</code> is instantiated with <code>new</code>. For example, this code uses the default constructor for <a class=\"xref\" href=\"../../../../api/system.int32\" data-linktype=\"relative-path\">Int32</a>, so that you are assured that the integer is initialized:  </p>\n<pre class=\"loading\"><code>int i = new int();  \nConsole.WriteLine(i);  \n</code></pre><p> The following code, however, causes a compiler error because it does not use <code>new</code>, and because it tries to use an object that has not been initialized:  </p>\n<pre class=\"loading\"><code>int i;  \nConsole.WriteLine(i);  \n</code></pre><p> Alternatively, objects based on <code>structs</code> (including all built-in numeric types) can be initialized or assigned and then used as in the following example:  </p>\n<pre class=\"loading\"><code>int a = 44;  // Initialize the value type...  \nint b;  \nb = 33;      // Or assign it before using it.  \nConsole.WriteLine(&quot;{0}, {1}&quot;, a, b);  \n</code></pre><p> So calling the default constructor for a value type is not required.  </p>\n<p> Both classes and <code>structs</code> can define constructors that take parameters. Constructors that take parameters must be called through a <code>new</code> statement or a <a href=\"../../language-reference/keywords/base\" data-linktype=\"relative-path\">base</a> statement. Classes and <code>structs</code> can also define multiple constructors, and neither is required to define a default constructor. For example:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideObjects#54\">        public class Employee\n        {\n            public int salary;\n\n            public Employee(int annualSalary)\n            {\n                salary = annualSalary;\n            }\n\n            public Employee(int weeklySalary, int numberOfWeeks)\n            {\n                salary = weeklySalary * numberOfWeeks;\n            }\n        }\n</code></pre><p> This class can be created by using either of the following statements:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideObjects#55\">                Employee e1 = new Employee(30000);\n                Employee e2 = new Employee(500, 52);\n</code></pre><p> A constructor can use the <code>base</code> keyword to call the constructor of a base class. For example:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideObjects#56\">        public class Manager : Employee\n        {\n            public Manager(int annualSalary)\n                : base(annualSalary)\n            {\n                //Add further instructions here.\n            }\n        }\n</code></pre><p> In this example, the constructor for the base class is called before the block for the constructor is executed. The <code>base</code> keyword can be used with or without parameters. Any parameters to the constructor can be used as parameters to <code>base</code>, or as part of an expression. For more information, see <a href=\"../../language-reference/keywords/base\" data-linktype=\"relative-path\">base</a>.  </p>\n<p> In a derived class, if a base-class constructor is not called explicitly by using the <code>base</code> keyword, the default constructor, if there is one, is called implicitly. This means that the following constructor declarations are effectively the same:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideObjects#58\">                public Manager(int initialdata)\n                {\n                    //Add further instructions here.\n                }\n</code></pre><pre><code class=\"lang-cs\" name=\"csProgGuideObjects#57\">                public Manager(int initialdata)\n                    : base()\n                {\n                    //Add further instructions here.\n                }\n</code></pre><p> If a base class does not offer a default constructor, the derived class must make an explicit call to a base constructor by using <code>base</code>.  </p>\n<p> A constructor can invoke another constructor in the same object by using the <a href=\"../../language-reference/keywords/this\" data-linktype=\"relative-path\">this</a> keyword. Like <code>base</code>, <code>this</code> can be used with or without parameters, and any parameters in the constructor are available as parameters to <code>this</code>, or as part of an expression. For example, the second constructor in the previous example can be rewritten using <code>this</code>:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideObjects#59\">                public Employee(int weeklySalary, int numberOfWeeks)\n                    : this(weeklySalary * numberOfWeeks)\n                {\n                }\n</code></pre><p> The use of the <code>this</code> keyword in the previous example causes this constructor to be called:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideObjects#60\">            public Employee(int annualSalary)\n            {\n                salary = annualSalary;\n            }\n</code></pre><p> Constructors can be marked as <a href=\"../../language-reference/keywords/public\" data-linktype=\"relative-path\">public</a>, <a href=\"../../language-reference/keywords/private\" data-linktype=\"relative-path\">private</a>, <a href=\"../../language-reference/keywords/protected\" data-linktype=\"relative-path\">protected</a>, <a href=\"../../language-reference/keywords/internal\" data-linktype=\"relative-path\">internal</a>, or <code>protected``internal</code>. These access modifiers define how users of the class can construct the class. For more information, see <a href=\"access-modifiers\" data-linktype=\"relative-path\">Access Modifiers</a>.  </p>\n<p> A constructor can be declared static by using the <a href=\"../../language-reference/keywords/static\" data-linktype=\"relative-path\">static</a> keyword. Static constructors are called automatically, immediately before any static fields are accessed, and are generally used to initialize static class members. For more information, see <a href=\"static-constructors\" data-linktype=\"relative-path\">Static Constructors</a>.  </p>\n<h2 id=\"c-language-specification\">C# Language Specification</h2>\n<p> For more information, see the <a href=\"../../language-reference/language-specification\" data-linktype=\"relative-path\">C# Language Specification</a>. The language specification is the definitive source for C# syntax and usage.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">Classes and Structs</a><br> <a href=\"constructors\" data-linktype=\"relative-path\">Constructors</a><br> <a href=\"destructors\" data-linktype=\"relative-path\">Destructors</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc.json\">\r\n<meta name=\"ms.assetid\" content=\"464253b2-fd5d-469a-836d-df0fdf2a43f7\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"26\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-21 01:42 AM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/classes-and-structs/using-constructors.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/csharp/programming-guide/classes-and-structs/using-constructors.md\">\r\n<meta name=\"document_id\" content=\"06444f20-f2ed-b47e-ca72-af95787ac759\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Using Constructors (C# Programming Guide) | Microsoft Docs","ms.assetid":"464253b2-fd5d-469a-836d-df0fdf2a43f7","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":26,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["constructors [C#], about constructors"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-21 01:42 AM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/21/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/classes-and-structs/using-constructors.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/csharp/programming-guide/classes-and-structs/using-constructors.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/classes-and-structs/using-constructors.md","document_id":"06444f20-f2ed-b47e-ca72-af95787ac759","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/classes-and-structs/using-constructors","toc_asset_id":"articles/csharp/programming-guide/classes-and-structs/toc.json","toc_rel":"toc.json","_op_ogTitle":"Using Constructors (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":840,"_op_rawTitle":"<h1 id=\"using-constructors-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/classes-and-structs/using-constructors.md\" sourcestartlinenumber=\"36\" sourceendlinenumber=\"36\">Using Constructors (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/classes-and-structs/using-constructors","fileRelativePath":"articles/csharp/programming-guide/classes-and-structs/using-constructors.html"},"themesRelativePathToOutputRoot":"_themes/"}