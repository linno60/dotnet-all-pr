{"content":"<div><div class=\"content\">\n<p>You can use extension methods to add functionality specific to a particular enum type.  </p>\n<h2 id=\"example\">Example</h2>\n<p> In the following example, the <code>Grades</code> enumeration represents the possible letter grades that a student may receive in a class. An extension method named <code>Passing</code> is added to the <code>Grades</code> type so that each instance of that type now &quot;knows&quot; whether it represents a passing grade or not.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideExtensionMethods#2\">using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Linq;\n\nnamespace EnumExtension\n{\n    // Define an extension method in a non-nested static class.\n    public static class Extensions\n    {        \n        public static Grades minPassing = Grades.D;\n        public static bool Passing(this Grades grade)\n        {\n            return grade &gt;= minPassing;\n        }\n    }\n\n    public enum Grades { F = 0, D=1, C=2, B=3, A=4 };\n    class Program\n    {       \n        static void Main(string[] args)\n        {\n            Grades g1 = Grades.D;\n            Grades g2 = Grades.F;\n            Console.WriteLine(&quot;First {0} a passing grade.&quot;, g1.Passing() ? &quot;is&quot; : &quot;is not&quot;);\n            Console.WriteLine(&quot;Second {0} a passing grade.&quot;, g2.Passing() ? &quot;is&quot; : &quot;is not&quot;);\n\n            Extensions.minPassing = Grades.C;\n            Console.WriteLine(&quot;\\r\\nRaising the bar!\\r\\n&quot;);\n            Console.WriteLine(&quot;First {0} a passing grade.&quot;, g1.Passing() ? &quot;is&quot; : &quot;is not&quot;);\n            Console.WriteLine(&quot;Second {0} a passing grade.&quot;, g2.Passing() ? &quot;is&quot; : &quot;is not&quot;);\n        }\n    }\n  }\n/* Output:\n    First is a passing grade.\n    Second is not a passing grade.\n\n    Raising the bar!\n\n    First is not a passing grade.\n    Second is not a passing grade.\n */\n</code></pre><p> Note that the <code>Extensions</code> class also contains a static variable that is updated dynamically and that the return value of the extension method reflects the current value of that variable. This demonstrates that, behind the scenes, extension methods are invoked directly on the static class in which they are defined.  </p>\n<h2 id=\"compiling-the-code\">Compiling the Code</h2>\n<p> To run this code, copy and paste it into a Visual C# console application project that has been created in Visual Studio. By default, this project targets version 3.5 of the .NET Framework, and it has a reference to System.Core.dll and a <code>using</code> directive for System.Linq. If one or more of these requirements are missing from the project, you can add them manually.   </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"extension-methods\" data-linktype=\"relative-path\">Extension Methods</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"100106f9-1e54-462c-8ebe-3892fe23b6eb\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"7\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-21 01:42 AM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/classes-and-structs/how-to-create-a-new-method-for-an-enumeration.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/csharp/programming-guide/classes-and-structs/how-to-create-a-new-method-for-an-enumeration.md\">\r\n<meta name=\"document_id\" content=\"4add3c98-e1e3-76b9-f9b7-b164ead9bfac\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"How to: Create a New Method for an Enumeration (C# Programming Guide) | Microsoft Docs","ms.assetid":"100106f9-1e54-462c-8ebe-3892fe23b6eb","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":7,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["enumerations [C#]","extension methods [C#], for enums","enum extensibility [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-21 01:42 AM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/21/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/classes-and-structs/how-to-create-a-new-method-for-an-enumeration.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/csharp/programming-guide/classes-and-structs/how-to-create-a-new-method-for-an-enumeration.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/classes-and-structs/how-to-create-a-new-method-for-an-enumeration.md","document_id":"4add3c98-e1e3-76b9-f9b7-b164ead9bfac","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/classes-and-structs/how-to-create-a-new-method-for-an-enumeration","toc_asset_id":"articles/csharp/programming-guide/classes-and-structs/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Create a New Method for an Enumeration (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":333,"_op_rawTitle":"<h1 id=\"how-to-create-a-new-method-for-an-enumeration-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/classes-and-structs/how-to-create-a-new-method-for-an-enumeration.md\" sourcestartlinenumber=\"38\" sourceendlinenumber=\"38\">How to: Create a New Method for an Enumeration (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/classes-and-structs/how-to-create-a-new-method-for-an-enumeration","fileRelativePath":"articles/csharp/programming-guide/classes-and-structs/how-to-create-a-new-method-for-an-enumeration.html"},"themesRelativePathToOutputRoot":"_themes/"}