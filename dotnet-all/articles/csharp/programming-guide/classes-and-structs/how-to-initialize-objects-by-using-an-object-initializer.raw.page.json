{"content":"<div><div class=\"content\">\n<p>You can use object initializers to initialize type objects in a declarative manner without explicitly invoking a constructor for the type.  </p>\n<p> The following examples show how to use object initializers with named objects. The compiler processes object initializers by first accessing the default instance constructor and then processing the member initializations. Therefore, if the default constructor is declared as <code>private</code> in the class, object initializers that require public access will fail.  </p>\n<p> You must use an object initializer if you&#39;re defining an anonymous type. For more information, see <a href=\"how-to-return-subsets-of-element-properties-in-a-query\" data-linktype=\"relative-path\">How to: Return Subsets of Element Properties in a Query</a>.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following example shows how to initialize a new <code>StudentName</code> type by using object initializers.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideLINQ#35\">                public class Program\n                {\n                    public static void Main()\n                    {\n\n                        // Declare a StudentName by using the constructor that has two parameters.\n                        StudentName student1 = new StudentName(&quot;Craig&quot;, &quot;Playstead&quot;);\n\n                        // Make the same declaration by using an object initializer and sending \n                        // arguments for the first and last names. The default constructor is \n                        // invoked in processing this declaration, not the constructor that has\n                        // two parameters.\n                        StudentName student2 = new StudentName\n                        {\n                            FirstName = &quot;Craig&quot;,\n                            LastName = &quot;Playstead&quot;,\n                        };\n\n                        // Declare a StudentName by using an object initializer and sending \n                        // an argument for only the ID property. No corresponding constructor is\n                        // necessary. Only the default constructor is used to process object \n                        // initializers.\n                        StudentName student3 = new StudentName\n                        {\n                            ID = 183\n                        };\n\n                        // Declare a StudentName by using an object initializer and sending\n                        // arguments for all three properties. No corresponding constructor is \n                        // defined in the class.\n                        StudentName student4 = new StudentName\n                        {\n                            FirstName = &quot;Craig&quot;,\n                            LastName = &quot;Playstead&quot;,\n                            ID = 116\n                        };\n\n                        System.Console.WriteLine(student1.ToString());\n                        System.Console.WriteLine(student2.ToString());\n                        System.Console.WriteLine(student3.ToString());\n                        System.Console.WriteLine(student4.ToString());\n                    }\n\n                    // Output:\n                    // Craig  0\n                    // Craig  0\n                    //   183\n                    // Craig  116\n                }\n\n                public class StudentName\n                {\n                    // The default constructor has no parameters. The default constructor \n                    // is invoked in the processing of object initializers. \n                    // You can test this by changing the access modifier from public to \n                    // private. The declarations in Main that use object initializers will \n                    // fail.\n                    public StudentName() { }\n\n                    // The following constructor has parameters for two of the three \n                    // properties. \n                    public StudentName(string first, string last)\n                    {\n                        FirstName = first;\n                        LastName = last;\n                    }\n\n                    // Properties.\n                    public string FirstName { get; set; }\n                    public string LastName { get; set; }\n                    public int ID { get; set; }\n\n                    public override string ToString()\n                    {\n                        return FirstName + &quot;  &quot; + ID;\n                    }\n                }\n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> The following example shows how to initialize a collection of <code>StudentName</code> types by using a collection initializer. Note that a collection initializer is a series of comma-separated object initializers.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideLINQ#36\">                List&lt;StudentName&gt; students = new List&lt;StudentName&gt;()\n                {\n                  new StudentName {FirstName=&quot;Craig&quot;, LastName=&quot;Playstead&quot;, ID=116},\n                  new StudentName {FirstName=&quot;Shu&quot;, LastName=&quot;Ito&quot;, ID=112},\n                  new StudentName {FirstName=&quot;Gretchen&quot;, LastName=&quot;Rivas&quot;, ID=113},\n                  new StudentName {FirstName=&quot;Rajesh&quot;, LastName=&quot;Rotti&quot;, ID=114}\n                };\n</code></pre><h2 id=\"compiling-the-code\">Compiling the Code</h2>\n<p> To run this code, copy and paste the class into a Visual C# console application project that has been created in Visual Studio.   </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"object-and-collection-initializers\" data-linktype=\"relative-path\">Object and Collection Initializers</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"4b75ebb2-2e29-43de-929c-d736a8f27ce6\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"20\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/classes-and-structs/how-to-initialize-objects-by-using-an-object-initializer.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/classes-and-structs/how-to-initialize-objects-by-using-an-object-initializer.md\">\r\n<meta name=\"document_id\" content=\"5312fbf1-566f-f0fd-2593-18276bda8697\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"How to: Initialize Objects by Using an Object Initializer (C# Programming Guide) | Microsoft Docs","ms.assetid":"4b75ebb2-2e29-43de-929c-d736a8f27ce6","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":20,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["object initializers [C#], how to use","objects [C#], initializing"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/classes-and-structs/how-to-initialize-objects-by-using-an-object-initializer.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/classes-and-structs/how-to-initialize-objects-by-using-an-object-initializer.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/classes-and-structs/how-to-initialize-objects-by-using-an-object-initializer.md","document_id":"5312fbf1-566f-f0fd-2593-18276bda8697","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/classes-and-structs/how-to-initialize-objects-by-using-an-object-initializer","toc_asset_id":"articles/csharp/programming-guide/classes-and-structs/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Initialize Objects by Using an Object Initializer (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":506,"_op_rawTitle":"<h1 id=\"how-to-initialize-objects-by-using-an-object-initializer-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/classes-and-structs/how-to-initialize-objects-by-using-an-object-initializer.md\" sourcestartlinenumber=\"37\" sourceendlinenumber=\"37\">How to: Initialize Objects by Using an Object Initializer (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/classes-and-structs/how-to-initialize-objects-by-using-an-object-initializer","fileRelativePath":"articles/csharp/programming-guide/classes-and-structs/how-to-initialize-objects-by-using-an-object-initializer.html"},"themesRelativePathToOutputRoot":"_themes/"}