{"content":"<div><div class=\"content\">\n<p>Object initializers let you assign values to any accessible fields or properties of an object at creation time without having to invoke a constructor followed by lines of assignment statements. The object initializer syntax enables you to specify arguments for a constructor or omit the arguments (and parentheses syntax).  The following example shows how to use an object initializer with a named type, <code>Cat</code> and how to invoke the default constructor. Note the use of auto-implemented properties in the <code>Cat</code> class. For more information, see <a href=\"auto-implemented-properties\" data-linktype=\"relative-path\">Auto-Implemented Properties</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideLINQ#39\">class Cat\n{\n    // Auto-implemented properties.\n    public int Age { get; set; }\n    public string Name { get; set; }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"csProgGuideLINQ#45\">Cat cat = new Cat { Age = 10, Name = &quot;Fluffy&quot; };\n</code></pre><h2 id=\"object-initializers-with-anonymous-types\">Object Initializers with anonymous types</h2>\n<p> Although object initializers can be used in any context, they are especially useful in LINQ query expressions. Query expressions make frequent use of <a href=\"anonymous-types\" data-linktype=\"relative-path\">anonymous types</a>, which can only be initialized by using an object initializer, as shown in the following declaration.  </p>\n<pre class=\"loading\"><code>var pet = new { Age = 10, Name = &quot;Fluffy&quot; };  \n</code></pre><p> Anonymous types enable the <code>select</code> clause in a LINQ query expression to transform objects of the original sequence into objects whose value and shape may differ from the original. This is useful if you want to store only a part of the information from each object in a sequence. In the following example, assume that a product object (<code>p</code>) contains many fields and methods, and that you are only interested in creating a sequence of objects that contain the product name and the unit price.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideLINQ#40\">var productInfos =\n    from p in products\n    select new { p.ProductName, p.UnitPrice };\n</code></pre><p> When this query is executed, the <code>productInfos</code> variable will contain a sequence of objects that can be accessed in a <code>foreach</code> statement as shown in this example:  </p>\n<pre class=\"loading\"><code>foreach(var p in productInfos){...}  \n</code></pre><p> Each object in the new anonymous type has two public properties which receive the same names as the properties or fields in the original object. You can also rename a field when you are creating an anonymous type; the following example renames the <code>UnitPrice</code> field to <code>Price</code>.  </p>\n<pre class=\"loading\"><code>select new {p.ProductName, Price = p.UnitPrice};  \n</code></pre><h2 id=\"object-initializers-with-nullable-types\">Object initializers with nullable types</h2>\n<p> It is a compile-time error to use an object initializer with a nullable struct.  </p>\n<h2 id=\"collection-initializers\">Collection initializers</h2>\n<p> Collection initializers let you specify one or more element initializers when you initialize a collection class that implements <a class=\"xref\" href=\"../../../../api/system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> or a class with an <code>Add</code> extension method. The element initializers can be a simple value, an expression or an object initializer. By using a collection initializer you do not have to specify multiple calls to the <code>Add</code> method of the class in your source code; the compiler adds the calls.  </p>\n<p> The following examples shows two simple collection initializers:  </p>\n<pre class=\"loading\"><code>List&lt;int&gt; digits = new List&lt;int&gt; { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };  \nList&lt;int&gt; digits2 = new List&lt;int&gt; { 0 + 1, 12 % 3, MakeInt() };  \n</code></pre><p> The following collection initializer uses object initializers to initialize objects of the <code>Cat</code> class defined in a previous example. Note that the individual object initializers are enclosed in braces and separated by commas.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideLINQ#41\">List&lt;Cat&gt; cats = new List&lt;Cat&gt;\n{\n    new Cat(){ Name = &quot;Sylvester&quot;, Age=8 },\n    new Cat(){ Name = &quot;Whiskers&quot;, Age=2 },\n    new Cat(){ Name = &quot;Sasha&quot;, Age=14 }\n};\n</code></pre><p> You can specify <a href=\"../../language-reference/keywords/null\" data-linktype=\"relative-path\">null</a> as an element in a collection initializer if the collection&#39;s <code>Add</code> method allows it.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideLINQ#42\">List&lt;Cat&gt; moreCats = new List&lt;Cat&gt;\n{\n    new Cat(){ Name = &quot;Furrytail&quot;, Age=5 },\n    new Cat(){ Name = &quot;Peaches&quot;, Age=4 },\n    null\n};\n</code></pre><p> You can specify indexed elements if the collection supports indexing.  </p>\n<pre class=\"loading\"><code>var numbers = new Dictionary&lt;int, string&gt; {   \n    [7] = &quot;seven&quot;,   \n    [9] = &quot;nine&quot;,   \n    [13] = &quot;thirteen&quot;   \n};  \n</code></pre><h2 id=\"example\">Example</h2>\n<pre><code class=\"lang-cs\" name=\"csProgGuideLINQ#46\">// The following code consolidates examples from the topic.\nclass ObjInitializers\n{\n    class Cat\n    {\n        // Auto-implemented properties.\n        public int Age { get; set; }\n        public string Name { get; set; }\n    }\n\n    static void Main()\n    {\n        Cat cat = new Cat { Age = 10, Name = &quot;Fluffy&quot; };\n\n        List&lt;Cat&gt; cats = new List&lt;Cat&gt;\n        {\n            new Cat(){ Name = &quot;Sylvester&quot;, Age=8 },\n            new Cat(){ Name = &quot;Whiskers&quot;, Age=2 },\n            new Cat(){ Name = &quot;Sasha&quot;, Age=14 }\n        };\n\n        List&lt;Cat&gt; moreCats = new List&lt;Cat&gt;\n        {\n            new Cat(){ Name = &quot;Furrytail&quot;, Age=5 },\n            new Cat(){ Name = &quot;Peaches&quot;, Age=4 },\n            null\n        };\n\n        // Display results.\n        System.Console.WriteLine(cat.Name);\n\n        foreach (Cat c in cats)\n            System.Console.WriteLine(c.Name);\n\n        foreach (Cat c in moreCats)\n            if (c != null)\n                System.Console.WriteLine(c.Name);\n            else\n                System.Console.WriteLine(&quot;List element has null value.&quot;);\n    }\n    // Output:\n    //Fluffy\n    //Sylvester\n    //Whiskers\n    //Sasha\n    //Furrytail\n    //Peaches\n    //List element has null value.\n}\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"../linq-query-expressions/index\" data-linktype=\"relative-path\">LINQ Query Expressions</a><br> <a href=\"anonymous-types\" data-linktype=\"relative-path\">Anonymous Types</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"c58f3db5-d7d4-4651-bd2d-5a3a97357f61\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"27\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/classes-and-structs/object-and-collection-initializers.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/classes-and-structs/object-and-collection-initializers.md\">\r\n<meta name=\"document_id\" content=\"39a34f13-b070-c080-00d3-b5bcc48a144a\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Object and Collection Initializers (C# Programming Guide) | Microsoft Docs","ms.assetid":"c58f3db5-d7d4-4651-bd2d-5a3a97357f61","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":27,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["object initializers [C#]","collection initializers [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/classes-and-structs/object-and-collection-initializers.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/classes-and-structs/object-and-collection-initializers.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/classes-and-structs/object-and-collection-initializers.md","document_id":"39a34f13-b070-c080-00d3-b5bcc48a144a","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/classes-and-structs/object-and-collection-initializers","toc_asset_id":"articles/csharp/programming-guide/classes-and-structs/toc.json","toc_rel":"toc.json","_op_ogTitle":"Object and Collection Initializers (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":770,"_op_rawTitle":"<h1 id=\"object-and-collection-initializers-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/classes-and-structs/object-and-collection-initializers.md\" sourcestartlinenumber=\"37\" sourceendlinenumber=\"37\">Object and Collection Initializers (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/classes-and-structs/object-and-collection-initializers","fileRelativePath":"articles/csharp/programming-guide/classes-and-structs/object-and-collection-initializers.html"},"themesRelativePathToOutputRoot":"_themes/"}