{"content":"<div><div class=\"content\">\n<p>Constants are immutable values which are known at compile time and do not change for the life of the program. Constants are declared with the <a href=\"../../language-reference/keywords/const\" data-linktype=\"relative-path\">const</a> modifier. Only the C# built-in types (excluding <a class=\"xref\" href=\"../../../../api/system.object\" data-linktype=\"relative-path\">System.Object</a>) may be declared as <code>const</code>. For a list of the built-in types, see <a href=\"../../language-reference/keywords/built-in-types-table\" data-linktype=\"relative-path\">Built-In Types Table</a>. User-defined types, including classes, structs, and arrays, cannot be <code>const</code>. Use the <a href=\"../../language-reference/keywords/readonly\" data-linktype=\"relative-path\">readonly</a> modifier to create a class, struct, or array that is initialized one time at runtime (for example in a constructor) and thereafter cannot be changed.  </p>\n<p> C# does not support <code>const</code> methods, properties, or events.  </p>\n<p> The enum type enables you to define named constants for integral built-in types (for example <code>int</code>, <code>uint</code>, <code>long</code>, and so on). For more information, see <a href=\"../../language-reference/keywords/enum\" data-linktype=\"relative-path\">enum</a>.  </p>\n<p> Constants must be initialized as they are declared. For example:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideObjects#64\">class Calendar1\n{\n    public const int months = 12;\n}\n</code></pre><p> In this example, the constant <code>months</code> is always 12, and it cannot be changed even by the class itself. In fact, when the compiler encounters a constant identifier in C# source code (for example, <code>months</code>), it substitutes the literal value directly into the intermediate language (IL) code that it produces. Because there is no variable address associated with a constant at run time, <code>const</code> fields cannot be passed by reference and cannot appear as an l-value in an expression.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Use caution when you refer to constant values defined in other code such as DLLs. If a new version of the DLL defines a new value for the constant, your program will still hold the old literal value until it is recompiled against the new version.  </p>\n</div>\n<p> Multiple constants of the same type can be declared at the same time, for example:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideObjects#65\">class Calendar2\n{\n    const int months = 12, weeks = 52, days = 365;\n}\n</code></pre><p> The expression that is used to initialize a constant can refer to another constant if it does not create a circular reference. For example:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideObjects#66\">class Calendar3\n{\n    const int months = 12;\n    const int weeks = 52;\n    const int days = 365;\n\n    const double daysPerWeek = (double) days / (double) weeks;\n    const double daysPerMonth = (double) days / (double) months;\n}\n</code></pre><p> Constants can be marked as <a href=\"../../language-reference/keywords/public\" data-linktype=\"relative-path\">public</a>, <a href=\"../../language-reference/keywords/private\" data-linktype=\"relative-path\">private</a>, <a href=\"../../language-reference/keywords/protected\" data-linktype=\"relative-path\">protected</a>, <a href=\"../../language-reference/keywords/internal\" data-linktype=\"relative-path\">internal</a>, or <code>protected``internal</code>. These access modifiers define how users of the class can access the constant. For more information, see <a href=\"access-modifiers\" data-linktype=\"relative-path\">Access Modifiers</a>.  </p>\n<p> Constants are accessed as if they were <a href=\"../../language-reference/keywords/static\" data-linktype=\"relative-path\">static</a> fields because the value of the constant is the same for all instances of the type. You do not use the <code>static</code> keyword to declare them. Expressions that are not in the class that defines the constant must use the class name, a period, and the name of the constant to access the constant. For example:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideObjects#67\">int birthstones = Calendar.months;\n</code></pre><h2 id=\"c-language-specification\">C# Language Specification</h2>\n<p>For more information, see the <a href=\"../../language-reference/language-specification\" data-linktype=\"relative-path\">C# Language Specification</a>. The language specification is the definitive source for C# syntax and usage.</p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">Classes and Structs</a><br> <a href=\"properties\" data-linktype=\"relative-path\">Properties</a><br> <a href=\"../types/index\" data-linktype=\"relative-path\">Types</a><br> <a href=\"../../language-reference/keywords/readonly\" data-linktype=\"relative-path\">readonly</a><br> <a href=\"http://go.microsoft.com/fwlink/?LinkId=112379\" data-linktype=\"external\">Immutability in C# Part One: Kinds of Immutability</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"1fb39621-1738-49b1-a1b3-8587f109123f\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"24\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/classes-and-structs/constants.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/classes-and-structs/constants.md\">\r\n<meta name=\"document_id\" content=\"3a4dd29f-e84d-708c-fef8-ee3f1c480559\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc1.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"Constants (C# Programming Guide) | Microsoft Docs","ms.assetid":"1fb39621-1738-49b1-a1b3-8587f109123f","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":24,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["C# language, constants","constants [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/classes-and-structs/constants.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/classes-and-structs/constants.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/classes-and-structs/constants.md","document_id":"3a4dd29f-e84d-708c-fef8-ee3f1c480559","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/classes-and-structs/constants","toc_asset_id":"articles/csharp/programming-guide/classes-and-structs/toc.json","toc_rel":"toc.json","_op_ogTitle":"Constants (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":499,"_op_rawTitle":"<h1 id=\"constants-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/classes-and-structs/constants.md\" sourcestartlinenumber=\"37\" sourceendlinenumber=\"37\">Constants (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/classes-and-structs/constants","fileRelativePath":"articles/csharp/programming-guide/classes-and-structs/constants.html"},"themesRelativePathToOutputRoot":"_themes/"}