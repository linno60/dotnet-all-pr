{"content":"<div><div class=\"content\">\n<p>A variable of a <a href=\"../../language-reference/keywords/reference-types\" data-linktype=\"relative-path\">reference type</a> does not contain its data directly; it contains a reference to its data. When you pass a reference-type parameter by value, it is possible to change the data pointed to by the reference, such as the value of a class member. However, you cannot change the value of the reference itself; that is, you cannot use the same reference to allocate memory for a new class and have it persist outside the block. To do that, pass the parameter using the <a href=\"../../language-reference/keywords/ref\" data-linktype=\"relative-path\">ref</a> or <a href=\"../../language-reference/keywords/out\" data-linktype=\"relative-path\">out</a> keyword. For simplicity, the following examples use <code>ref</code>.  </p>\n<h2 id=\"passing-reference-types-by-value\">Passing Reference Types by Value</h2>\n<p> The following example demonstrates passing a reference-type parameter, <code>arr</code>, by value, to a method, <code>Change</code>. Because the parameter is a reference to <code>arr</code>, it is possible to change the values of the array elements. However, the attempt to reassign the parameter to a different memory location only works inside the method and does not affect the original variable, <code>arr</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideParameters#7\">        class PassingRefByVal \n        {\n            static void Change(int[] pArray)\n            {\n                pArray[0] = 888;  // This change affects the original element.\n                pArray = new int[5] {-3, -1, -2, -3, -4};   // This change is local.\n                System.Console.WriteLine(&quot;Inside the method, the first element is: {0}&quot;, pArray[0]);\n            }\n\n            static void Main() \n            {\n                int[] arr = {1, 4, 5};\n                System.Console.WriteLine(&quot;Inside Main, before calling the method, the first element is: {0}&quot;, arr [0]);\n\n                Change(arr);\n                System.Console.WriteLine(&quot;Inside Main, after calling the method, the first element is: {0}&quot;, arr [0]);\n            }\n        }\n        /* Output:\n            Inside Main, before calling the method, the first element is: 1\n            Inside the method, the first element is: -3\n            Inside Main, after calling the method, the first element is: 888\n        */\n</code></pre><p> In the preceding example, the array, <code>arr</code>, which is a reference type, is passed to the method without the <code>ref</code> parameter. In such a case, a copy of the reference, which points to <code>arr</code>, is passed to the method. The output shows that it is possible for the method to change the contents of an array element, in this case from <code>1</code> to <code>888</code>. However, allocating a new portion of memory by using the <a href=\"../../language-reference/keywords/new\" data-linktype=\"relative-path\">new</a> operator inside the <code>Change</code> method makes the variable <code>pArray</code> reference a new array. Thus, any changes after that will not affect the original array, <code>arr</code>, which is created inside <code>Main</code>. In fact, two arrays are created in this example, one inside <code>Main</code> and one inside the <code>Change</code> method.  </p>\n<h2 id=\"passing-reference-types-by-reference\">Passing Reference Types by Reference</h2>\n<p> The following example is the same as the previous example, except that the <code>ref</code> keyword is added to the method header and call. Any changes that take place in the method affect the original variable in the calling program.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideParameters#8\">        class PassingRefByRef \n        {\n            static void Change(ref int[] pArray)\n            {\n                // Both of the following changes will affect the original variables:\n                pArray[0] = 888;\n                pArray = new int[5] {-3, -1, -2, -3, -4};\n                System.Console.WriteLine(&quot;Inside the method, the first element is: {0}&quot;, pArray[0]);\n            }\n                \n            static void Main() \n            {\n                int[] arr = {1, 4, 5};\n                System.Console.WriteLine(&quot;Inside Main, before calling the method, the first element is: {0}&quot;, arr[0]);\n\n                Change(ref arr);\n                System.Console.WriteLine(&quot;Inside Main, after calling the method, the first element is: {0}&quot;, arr[0]);\n            }\n        }\n        /* Output:\n            Inside Main, before calling the method, the first element is: 1\n            Inside the method, the first element is: -3\n            Inside Main, after calling the method, the first element is: -3\n        */\n</code></pre><p> All of the changes that take place inside the method affect the original array in <code>Main</code>. In fact, the original array is reallocated using the <code>new</code> operator. Thus, after calling the <code>Change</code> method, any reference to <code>arr</code> points to the five-element array, which is created in the <code>Change</code> method.  </p>\n<h2 id=\"swapping-two-strings\">Swapping Two Strings</h2>\n<p> Swapping strings is a good example of passing reference-type parameters by reference. In the example, two strings, <code>str1</code> and <code>str2</code>, are initialized in <code>Main</code> and passed to the <code>SwapStrings</code> method as parameters modified by the <code>ref</code> keyword. The two strings are swapped inside the method and inside <code>Main</code> as well.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideParameters#9\">        class SwappingStrings\n        {\n            static void SwapStrings(ref string s1, ref string s2)\n            // The string parameter is passed by reference.\n            // Any changes on parameters will affect the original variables.\n            {\n                string temp = s1;\n                s1 = s2;\n                s2 = temp;\n                System.Console.WriteLine(&quot;Inside the method: {0} {1}&quot;, s1, s2);\n            }\n\n            static void Main()\n            {\n                string str1 = &quot;John&quot;;\n                string str2 = &quot;Smith&quot;;\n                System.Console.WriteLine(&quot;Inside Main, before swapping: {0} {1}&quot;, str1, str2);\n\n                SwapStrings(ref str1, ref str2);   // Passing strings by reference\n                System.Console.WriteLine(&quot;Inside Main, after swapping: {0} {1}&quot;, str1, str2);\n            }\n        }\n        /* Output:\n            Inside Main, before swapping: John Smith\n            Inside the method: Smith John\n            Inside Main, after swapping: Smith John\n       */\n</code></pre><p> In this example, the parameters need to be passed by reference to affect the variables in the calling program. If you remove the <code>ref</code> keyword from both the method header and the method call, no changes will take place in the calling program.  </p>\n<p> For more information about strings, see <a href=\"../../language-reference/keywords/string\" data-linktype=\"relative-path\">string</a>.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"passing-parameters\" data-linktype=\"relative-path\">Passing Parameters</a><br> <a href=\"../arrays/passing-arrays-using-ref-and-out\" data-linktype=\"relative-path\">Passing Arrays Using ref and out</a><br> <a href=\"../../language-reference/keywords/ref\" data-linktype=\"relative-path\">ref</a><br> <a href=\"../../language-reference/keywords/reference-types\" data-linktype=\"relative-path\">Reference Types</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-all/api/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"9e6eb65c-942e-48ab-920a-b7ba9df4ea20\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"14\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/classes-and-structs/passing-reference-type-parameters.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/classes-and-structs/passing-reference-type-parameters.md\">\r\n<meta name=\"document_id\" content=\"35543075-a713-a26f-b962-5a1f50fc15f2\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Passing Reference-Type Parameters (C# Programming Guide) | Microsoft Docs","ms.assetid":"9e6eb65c-942e-48ab-920a-b7ba9df4ea20","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":14,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["method parameters [C#], reference types","parameters [C#], reference"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/classes-and-structs/passing-reference-type-parameters.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/classes-and-structs/passing-reference-type-parameters.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/classes-and-structs/passing-reference-type-parameters.md","document_id":"35543075-a713-a26f-b962-5a1f50fc15f2","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/classes-and-structs/passing-reference-type-parameters","toc_asset_id":"articles/csharp/programming-guide/classes-and-structs/toc.json","toc_rel":"toc.json","_op_ogTitle":"Passing Reference-Type Parameters (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":831,"_op_rawTitle":"<h1 id=\"passing-reference-type-parameters-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/classes-and-structs/passing-reference-type-parameters.md\" sourcestartlinenumber=\"37\" sourceendlinenumber=\"37\">Passing Reference-Type Parameters (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/classes-and-structs/passing-reference-type-parameters","fileRelativePath":"articles/csharp/programming-guide/classes-and-structs/passing-reference-type-parameters.html"},"themesRelativePathToOutputRoot":"_themes/"}