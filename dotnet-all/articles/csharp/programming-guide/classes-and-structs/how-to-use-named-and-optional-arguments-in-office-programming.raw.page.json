{"content":"<div><div class=\"content\">\n<p>Named arguments and optional arguments, introduced in Visual C# 2010, enhance convenience, flexibility, and readability in C# programming. In addition, these features greatly facilitate access to COM interfaces such as the Microsoft Office automation APIs.  </p>\n<p> In the following example, method <a href=\"http://go.microsoft.com/fwlink/?LinkId=145378\" data-linktype=\"external\">ConvertToTable</a> has sixteen parameters that represent characteristics of a table, such as number of columns and rows, formatting, borders, fonts, and colors. All sixteen parameters are optional, because most of the time you do not want to specify particular values for all of them. However, without named and optional arguments, a value or a placeholder value has to be provided for each parameter. With named and optional arguments, you specify values only for the parameters that are required for your project.  </p>\n<p> You must have Microsoft Office Word installed on your computer to complete these procedures.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p>Your computer might show different names or locations for some of the Visual Studio user interface elements in the following instructions. The Visual Studio edition that you have and the settings that you use determine these elements. For more information, see <a href=\"https://docs.microsoft.com/visualstudio/ide/personalizing-the-visual-studio-ide\" data-linktype=\"external\">Personalizing the IDE</a>.</p>\n</div>\n<h3 id=\"to-create-a-new-console-application\">To create a new console application</h3>\n<ol>\n<li><p>Start Visual Studio.  </p>\n</li>\n<li><p>On the <strong>File</strong> menu, point to <strong>New</strong>, and then click <strong>Project</strong>.  </p>\n</li>\n<li><p>In the <strong>Templates Categories</strong> pane, expand <strong>Visual C#</strong>, and then click <strong>Windows</strong>.  </p>\n</li>\n<li><p>Look in the top of the <strong>Templates</strong> pane to make sure that <strong>.NET Framework 4</strong> appears in the <strong>Target Framework</strong> box.  </p>\n</li>\n<li><p>In the <strong>Templates</strong> pane, click <strong>Console Application</strong>.  </p>\n</li>\n<li><p>Type a name for your project in the <strong>Name</strong> field.  </p>\n</li>\n<li><p>Click <strong>OK</strong>.  </p>\n<p> The new project appears in <strong>Solution Explorer</strong>.  </p>\n</li>\n</ol>\n<h3 id=\"to-add-a-reference\">To add a reference</h3>\n<ol>\n<li><p>In <strong>Solution Explorer</strong>, right-click your project&#39;s name and then click <strong>Add Reference</strong>. The <strong>Add Reference</strong> dialog box appears.  </p>\n</li>\n<li><p>On the <strong>.NET</strong> page, select <strong>Microsoft.Office.Interop.Word</strong> in the <strong>Component Name</strong> list.  </p>\n</li>\n<li><p>Click <strong>OK</strong>.  </p>\n</li>\n</ol>\n<h3 id=\"to-add-necessary-using-directives\">To add necessary using directives</h3>\n<ol>\n<li><p>In <strong>Solution Explorer</strong>, right-click the <strong>Program.cs</strong> file and then click <strong>View Code</strong>.  </p>\n</li>\n<li><p>Add the following <code>using</code> directives to the top of the code file.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideNamedAndOptional#4\">using Word = Microsoft.Office.Interop.Word;\n</code></pre></li>\n</ol>\n<h3 id=\"to-display-text-in-a-word-document\">To display text in a Word document</h3>\n<ol>\n<li><p>In the <code>Program</code> class in Program.cs, add the following method to create a Word application and a Word document. The <a href=\"http://go.microsoft.com/fwlink/?LinkId=145381\" data-linktype=\"external\">Add</a> method has four optional parameters. This example uses their default values. Therefore, no arguments are necessary in the calling statement.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideNamedAndOptional#6\">        static void DisplayInWord()\n        {\n            var wordApp = new Word.Application();\n            wordApp.Visible = true;\n            // docs is a collection of all the Document objects currently \n            // open in Word.\n            Word.Documents docs = wordApp.Documents;\n\n            // Add a document to the collection and name it doc. \n            Word.Document doc = docs.Add();\n        }\n</code></pre></li>\n<li><p>Add the following code at the end of the method to define where to display text in the document, and what text to display.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideNamedAndOptional#7\">            // Define a range, a contiguous area in the document, by specifying\n            // a starting and ending character position. Currently, the document\n            // is empty.\n            Word.Range range = doc.Range(0, 0);\n\n            // Use the InsertAfter method to insert a string at the end of the\n            // current range.\n            range.InsertAfter(&quot;Testing, testing, testing. . .&quot;);\n</code></pre></li>\n</ol>\n<h3 id=\"to-run-the-application\">To run the application</h3>\n<ol>\n<li><p>Add the following statement to Main.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideNamedAndOptional#8\">            DisplayInWord();\n</code></pre></li>\n<li><p>Press CTRL+F5 to run the project. A Word document appears that contains the specified text.  </p>\n</li>\n</ol>\n<h3 id=\"to-change-the-text-to-a-table\">To change the text to a table</h3>\n<ol>\n<li><p>Use the <code>ConvertToTable</code> method to enclose the text in a table. The method has sixteen optional parameters. IntelliSense encloses optional parameters in brackets, as shown in the following illustration.  </p>\n<p> <img src=\"media/convert_tableparameters.png\" alt=\"List of parameters for ConvertToTable method.\" title=\"Convert_TableParameters\" data-linktype=\"relative-path\"><br>ConvertToTable parameters  </p>\n<p> Named and optional arguments enable you to specify values for only the parameters that you want to change. Add the following code to the end of method <code>DisplayInWord</code> to create a simple table. The argument specifies that the commas in the text string in <code>range</code> separate the cells of the table.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideNamedAndOptional#9\">            // Convert to a simple table. The table will have a single row with\n            // three columns.\n            range.ConvertToTable(Separator: &quot;,&quot;);\n</code></pre><p> In earlier versions of C#, the call to <code>ConvertToTable</code> requires a reference argument for each parameter, as shown in the following code.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideNamedAndOptional#14\">            // Call to ConvertToTable in Visual C# 2008 or earlier. This code\n            // is not part of the solution.\n            var missing = Type.Missing;\n            object separator = &quot;,&quot;;\n            range.ConvertToTable(ref separator, ref missing, ref missing,\n                ref missing, ref missing, ref missing, ref missing,\n                ref missing, ref missing, ref missing, ref missing,\n                ref missing, ref missing, ref missing, ref missing,\n                ref missing);\n</code></pre></li>\n<li><p>Press CTRL+F5 to run the project.  </p>\n</li>\n</ol>\n<h3 id=\"to-experiment-with-other-parameters\">To experiment with other parameters</h3>\n<ol>\n<li><p>To change the table so that it has one column and three rows, replace the last line in <code>DisplayInWord</code> with the following statement and then type CTRL+F5.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideNamedAndOptional#10\">            range.ConvertToTable(Separator: &quot;,&quot;, AutoFit: true, NumColumns: 1);\n</code></pre></li>\n<li><p>To specify a predefined format for the table, replace the last line in <code>DisplayInWord</code> with the following statement and then type CTRL+F5. The format can be any of the <a href=\"http://go.microsoft.com/fwlink/?LinkId=145382\" data-linktype=\"external\">WdTableFormat</a> constants.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideNamedAndOptional#11\">            range.ConvertToTable(Separator: &quot;,&quot;, AutoFit: true, NumColumns: 1,\n                Format: Word.WdTableFormat.wdTableFormatElegant);\n</code></pre></li>\n</ol>\n<h2 id=\"example\">Example</h2>\n<p> The following code includes the full example.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideNamedAndOptional#12\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing Word = Microsoft.Office.Interop.Word;\n\n\nnamespace OfficeHowTo\n{\n    class WordProgram\n    {\n        static void Main(string[] args)\n        {\n            DisplayInWord();\n        }\n\n        static void DisplayInWord()\n        {\n            var wordApp = new Word.Application();\n            wordApp.Visible = true;\n            // docs is a collection of all the Document objects currently \n            // open in Word.\n            Word.Documents docs = wordApp.Documents;\n\n            // Add a document to the collection and name it doc. \n            Word.Document doc = docs.Add();\n\n            // Define a range, a contiguous area in the document, by specifying\n            // a starting and ending character position. Currently, the document\n            // is empty.\n            Word.Range range = doc.Range(0, 0);\n\n            // Use the InsertAfter method to insert a string at the end of the\n            // current range.\n            range.InsertAfter(&quot;Testing, testing, testing. . .&quot;);\n\n            // You can comment out any or all of the following statements to\n            // see the effect of each one in the Word document.\n\n            // Next, use the ConvertToTable method to put the text into a table. \n            // The method has 16 optional parameters. You only have to specify\n            // values for those you want to change.\n\n            // Convert to a simple table. The table will have a single row with\n            // three columns.\n            range.ConvertToTable(Separator: &quot;,&quot;);\n\n            // Change to a single column with three rows..\n            range.ConvertToTable(Separator: &quot;,&quot;, AutoFit: true, NumColumns: 1);\n\n            // Format the table.\n            range.ConvertToTable(Separator: &quot;,&quot;, AutoFit: true, NumColumns: 1,\n                Format: Word.WdTableFormat.wdTableFormatElegant);\n        }\n    }\n}\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"named-and-optional-arguments\" data-linktype=\"relative-path\">Named and Optional Arguments</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc.json\">\r\n<meta name=\"ms.assetid\" content=\"65b8a222-bcd8-454c-845f-84adff5a356f\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"34\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-21 01:42 AM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/classes-and-structs/how-to-use-named-and-optional-arguments-in-office-programming.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/csharp/programming-guide/classes-and-structs/how-to-use-named-and-optional-arguments-in-office-programming.md\">\r\n<meta name=\"document_id\" content=\"37d322ef-d8e7-11f3-ddf3-7cd3eb75daf9\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"How to: Use Named and Optional Arguments in Office Programming (C# Programming Guide) | Microsoft Docs","ms.assetid":"65b8a222-bcd8-454c-845f-84adff5a356f","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":34,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["named and optional arguments [C#], Office programming","optional arguments [C#], Office programming","named arguments [C#], Office programming"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-21 01:42 AM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/21/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/classes-and-structs/how-to-use-named-and-optional-arguments-in-office-programming.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/csharp/programming-guide/classes-and-structs/how-to-use-named-and-optional-arguments-in-office-programming.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/classes-and-structs/how-to-use-named-and-optional-arguments-in-office-programming.md","document_id":"37d322ef-d8e7-11f3-ddf3-7cd3eb75daf9","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/classes-and-structs/how-to-use-named-and-optional-arguments-in-office-programming","toc_asset_id":"articles/csharp/programming-guide/classes-and-structs/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Use Named and Optional Arguments in Office Programming (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":1037,"_op_rawTitle":"<h1 id=\"how-to-use-named-and-optional-arguments-in-office-programming-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/classes-and-structs/how-to-use-named-and-optional-arguments-in-office-programming.md\" sourcestartlinenumber=\"38\" sourceendlinenumber=\"38\">How to: Use Named and Optional Arguments in Office Programming (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/classes-and-structs/how-to-use-named-and-optional-arguments-in-office-programming","fileRelativePath":"articles/csharp/programming-guide/classes-and-structs/how-to-use-named-and-optional-arguments-in-office-programming.html"},"themesRelativePathToOutputRoot":"_themes/"}