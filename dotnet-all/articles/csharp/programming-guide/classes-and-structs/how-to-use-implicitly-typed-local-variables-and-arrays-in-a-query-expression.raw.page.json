{"content":"<div><div class=\"content\">\n<p>You can use implicitly typed local variables whenever you want the compiler to determine the type of a local variable. You must use implicitly typed local variables to store anonymous types, which are often used in query expressions. The following examples illustrate both optional and required uses of implicitly typed local variables in queries.  </p>\n<p> Implicitly typed local variables are declared by using the <a href=\"../../language-reference/keywords/var\" data-linktype=\"relative-path\">var</a> contextual keyword. For more information, see <a href=\"implicitly-typed-local-variables\" data-linktype=\"relative-path\">Implicitly Typed Local Variables</a> and <a href=\"../arrays/implicitly-typed-arrays\" data-linktype=\"relative-path\">Implicitly Typed Arrays</a>.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following example shows a common scenario in which the <code>var</code> keyword is required: a query expression that produces a sequence of anonymous types. In this scenario, both the query variable and the iteration variable in the <code>foreach</code> statement must be implicitly typed by using <code>var</code> because you do not have access to a type name for the anonymous type. For more information about anonymous types, see <a href=\"anonymous-types\" data-linktype=\"relative-path\">Anonymous Types</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideLINQ#32\">                private static void QueryNames(char firstLetter)\n                {\n                    // Create the query. Use of var is required because\n                    // the query produces a sequence of anonymous types:\n                    // System.Collections.Generic.IEnumerable&lt;????&gt;.\n                    var studentQuery =\n                        from student in students\n                        where student.FirstName[0] == firstLetter\n                        select new { student.FirstName, student.LastName };\n\n                    // Execute the query and display the results.\n                    foreach (var anonType in studentQuery)\n                    {\n                        Console.WriteLine(&quot;First = {0}, Last = {1}&quot;, anonType.FirstName, anonType.LastName);\n                    }\n                }\n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> The following example uses the <code>var</code> keyword in a situation that is similar, but in which the use of <code>var</code> is optional. Because <code>student.LastName</code> is a string, execution of the query returns a sequence of strings. Therefore, the type of <code>queryID</code> could be declared as <code>System.Collections.Generic.IEnumerable&lt;string&gt;</code> instead of <code>var</code>. Keyword <code>var</code> is used for convenience. In the example, the iteration variable in the <code>foreach</code> statement is explicitly typed as a string, but it could instead be declared by using <code>var</code>. Because the type of the iteration variable is not an anonymous type, the use of <code>var</code> is an option, not a requirement. Remember, <code>var</code> itself is not a type, but an instruction to the compiler to infer and assign the type.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideLINQ#33\">                    // Variable queryID could be declared by using \n                    // System.Collections.Generic.IEnumerable&lt;string&gt;\n                    // instead of var.\n                    var queryID =\n                        from student in students\n                        where student.ID &gt; 111\n                        select student.LastName;\n\n                    // Variable str could be declared by using var instead of string.     \n                    foreach (string str in queryID)\n                    {\n                        Console.WriteLine(&quot;Last name: {0}&quot;, str);\n                    }\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"extension-methods\" data-linktype=\"relative-path\">Extension Methods</a><br> <a href=\"http://msdn.microsoft.com/library/a73c4aec-5d15-4e98-b962-1274021ea93d\" data-linktype=\"external\">LINQ (Language-Integrated Query)</a><br> <a href=\"../../language-reference/keywords/var\" data-linktype=\"relative-path\">var</a><br> <a href=\"../linq-query-expressions/index\" data-linktype=\"relative-path\">LINQ Query Expressions</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"6b7354d2-af79-427a-b6a8-f74eb8fd0b91\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"15\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/classes-and-structs/how-to-use-implicitly-typed-local-variables-and-arrays-in-a-query-expression.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/classes-and-structs/how-to-use-implicitly-typed-local-variables-and-arrays-in-a-query-expression.md\">\r\n<meta name=\"document_id\" content=\"f46ce9f8-849e-1b42-7d38-8f4ba75b5535\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"How to: Use Implicitly Typed Local Variables and Arrays in a Query Expression (C# Programming Guide) | Microsoft Docs","ms.assetid":"6b7354d2-af79-427a-b6a8-f74eb8fd0b91","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":15,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["implicitly-typed local variables [C#], how to use"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/classes-and-structs/how-to-use-implicitly-typed-local-variables-and-arrays-in-a-query-expression.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/classes-and-structs/how-to-use-implicitly-typed-local-variables-and-arrays-in-a-query-expression.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/classes-and-structs/how-to-use-implicitly-typed-local-variables-and-arrays-in-a-query-expression.md","document_id":"f46ce9f8-849e-1b42-7d38-8f4ba75b5535","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/classes-and-structs/how-to-use-implicitly-typed-local-variables-and-arrays-in-a-query-expression","toc_asset_id":"articles/csharp/programming-guide/classes-and-structs/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Use Implicitly Typed Local Variables and Arrays in a Query Expression (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":402,"_op_rawTitle":"<h1 id=\"how-to-use-implicitly-typed-local-variables-and-arrays-in-a-query-expression-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/classes-and-structs/how-to-use-implicitly-typed-local-variables-and-arrays-in-a-query-expression.md\" sourcestartlinenumber=\"36\" sourceendlinenumber=\"36\">How to: Use Implicitly Typed Local Variables and Arrays in a Query Expression (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/classes-and-structs/how-to-use-implicitly-typed-local-variables-and-arrays-in-a-query-expression","fileRelativePath":"articles/csharp/programming-guide/classes-and-structs/how-to-use-implicitly-typed-local-variables-and-arrays-in-a-query-expression.html"},"themesRelativePathToOutputRoot":"_themes/"}