{"content":"<div><div class=\"content\">\n<p>The following code example illustrates how to write a non-generic collection class that can be used with <a href=\"../../language-reference/keywords/foreach-in\" data-linktype=\"relative-path\">foreach</a>. The example defines a string tokenizer class.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This example represents recommended practice only when you cannot use a generic collection class. For an example of how to implement a type-safe generic collection class that supports <a class=\"xref\" href=\"../../../../api/system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>, see <a href=\"http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7\" data-linktype=\"external\">Iterators</a>.  </p>\n</div>\n<p> In the example, the following code segment uses the <code>Tokens</code> class to break the sentence &quot;This is a sample sentence.&quot; into tokens by using &#39; &#39; and &#39;-&#39; as separators. The code then displays those tokens by using a <code>foreach</code> statement.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideCollections#3\">        Tokens f = new Tokens(&quot;This is a sample sentence.&quot;, new char[] {&#39; &#39;,&#39;-&#39;});\n\n        // Display the tokens.\n        foreach (string item in f)\n        {\n            System.Console.WriteLine(item);\n        }\n</code></pre><h2 id=\"example\">Example</h2>\n<p> Internally, the <code>Tokens</code> class uses an array to store the tokens. Because arrays implement <a class=\"xref\" href=\"../../../../api/system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> and <a class=\"xref\" href=\"../../../../api/system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a>, the code example could have used the array&#39;s enumeration methods (<a class=\"xref\" href=\"../../../../api/system.collections.ienumerable#System_Collections_IEnumerable_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a>, <a class=\"xref\" href=\"../../../../api/system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a>, <a class=\"xref\" href=\"../../../../api/system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a>, and <a class=\"xref\" href=\"../../../../api/system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a>) instead of defining them in the <code>Tokens</code> class. The method definitions are included in the example to clarify how they are defined and what each does.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideCollections#2\">using System.Collections;\n\n// Declare the Tokens class. The class implements the IEnumerable interface.\npublic class Tokens : IEnumerable\n{\n    private string[] elements;\n\n    Tokens(string source, char[] delimiters)\n    {\n        // The constructor parses the string argument into tokens.\n        elements = source.Split(delimiters);\n    }\n\n    // The IEnumerable interface requires implementation of method GetEnumerator.\n    public IEnumerator GetEnumerator()\n    {\n        return new TokenEnumerator(this);\n    }\n\n\n    // Declare an inner class that implements the IEnumerator interface.\n    private class TokenEnumerator : IEnumerator\n    {\n        private int position = -1;\n        private Tokens t;\n\n        public TokenEnumerator(Tokens t)\n        {\n            this.t = t;\n        }\n\n        // The IEnumerator interface requires a MoveNext method.\n        public bool MoveNext()\n        {\n            if (position &lt; t.elements.Length - 1)\n            {\n                position++;\n                return true;\n            }\n            else\n            {\n                return false;\n            }\n        }\n\n        // The IEnumerator interface requires a Reset method.\n        public void Reset()\n        {\n            position = -1;\n        }\n\n        // The IEnumerator interface requires a Current method.\n        public object Current\n        {\n            get\n            {\n                return t.elements[position];\n            }\n        }\n    }\n\n\n    // Test the Tokens class.\n    static void Main()\n    {\n        // Create a Tokens instance.\n        Tokens f = new Tokens(&quot;This is a sample sentence.&quot;, new char[] {&#39; &#39;,&#39;-&#39;});\n\n        // Display the tokens.\n        foreach (string item in f)\n        {\n            System.Console.WriteLine(item);\n        }\n    }\n}\n/* Output:\n    This\n    is\n    a\n    sample\n    sentence.  \n*/\n</code></pre><p> In C#, it is not necessary for a collection class to implement <a class=\"xref\" href=\"../../../../api/system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> and <a class=\"xref\" href=\"../../../../api/system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> to be compatible with <code>foreach</code>. If the class has the required <a class=\"xref\" href=\"../../../../api/system.collections.ienumerable#System_Collections_IEnumerable_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a>, <a class=\"xref\" href=\"../../../../api/system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a>, <a class=\"xref\" href=\"../../../../api/system.collections.ienumerator#System_Collections_IEnumerator_Reset_\" data-linktype=\"relative-path\">Reset</a>, and <a class=\"xref\" href=\"../../../../api/system.collections.ienumerator#System_Collections_IEnumerator_Current_\" data-linktype=\"relative-path\">Current</a> members, it will work with <code>foreach</code>. Omitting the interfaces has the advantage of enabling you to define a return type for <code>Current</code> that is more specific than <a class=\"xref\" href=\"../../../../api/system.object\" data-linktype=\"relative-path\">Object</a>. This provides type safety.  </p>\n<p> For example, change the following lines in the previous example.  </p>\n<p><codecontentplaceholder>0</codecontentplaceholder><br> Because <code>Current</code> returns a string, the compiler can detect when an incompatible type is used in a <code>foreach</code> statement, as shown in the following code.  </p>\n<p><codecontentplaceholder>1</codecontentplaceholder><br> The disadvantage of omitting <a class=\"xref\" href=\"../../../../api/system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> and <a class=\"xref\" href=\"../../../../api/system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> is that the collection class is no longer interoperable with the <code>foreach</code> statements, or equivalent statements, of other common language runtime languages.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../api/system.collections.generic\" data-linktype=\"relative-path\">System.Collections.Generic</a><br> <a href=\"../../language-reference/index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"../arrays/index\" data-linktype=\"relative-path\">Arrays</a><br> <a href=\"http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b\" data-linktype=\"external\">Collections</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"a6b9cf5c-6c8d-4223-b12c-288949434493\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"21\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/classes-and-structs/how-to-access-a-collection-class-with-foreach.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/classes-and-structs/how-to-access-a-collection-class-with-foreach.md\">\r\n<meta name=\"document_id\" content=\"3a306603-0c16-3f4d-03eb-9ab567e39f62\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"How to: Access a Collection Class with foreach (C# Programming Guide) | Microsoft Docs","ms.assetid":"a6b9cf5c-6c8d-4223-b12c-288949434493","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":21,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["collection classes [C#], foreach statement"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/classes-and-structs/how-to-access-a-collection-class-with-foreach.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/classes-and-structs/how-to-access-a-collection-class-with-foreach.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/classes-and-structs/how-to-access-a-collection-class-with-foreach.md","document_id":"3a306603-0c16-3f4d-03eb-9ab567e39f62","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/classes-and-structs/how-to-access-a-collection-class-with-foreach","toc_asset_id":"articles/csharp/programming-guide/classes-and-structs/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Access a Collection Class with foreach (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":504,"_op_rawTitle":"<h1 id=\"how-to-access-a-collection-class-with-foreach-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/classes-and-structs/how-to-access-a-collection-class-with-foreach.md\" sourcestartlinenumber=\"36\" sourceendlinenumber=\"36\">How to: Access a Collection Class with foreach (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/classes-and-structs/how-to-access-a-collection-class-with-foreach","fileRelativePath":"articles/csharp/programming-guide/classes-and-structs/how-to-access-a-collection-class-with-foreach.html"},"themesRelativePathToOutputRoot":"_themes/"}