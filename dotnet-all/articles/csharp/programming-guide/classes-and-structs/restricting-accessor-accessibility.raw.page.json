{"content":"<div><div class=\"content\">\n<p>The <a href=\"../../language-reference/keywords/get\" data-linktype=\"relative-path\">get</a> and <a href=\"../../language-reference/keywords/set\" data-linktype=\"relative-path\">set</a> portions of a property or indexer are called <em>accessors</em>. By default these accessors have the same visibility, or access level: that of the property or indexer to which they belong. For more information, see <a href=\"../../language-reference/keywords/accessibility-levels\" data-linktype=\"relative-path\">accessibility levels</a>. However, it is sometimes useful to restrict access to one of these accessors. Typically, this involves restricting the accessibility of the <code>set</code> accessor, while keeping the <code>get</code> accessor publicly accessible. For example:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideIndexers#6\">    private string name = &quot;Hello&quot;;\n\n    public string Name\n    {\n        get\n        {\n            return name;\n        }\n        protected set\n        {\n            name = value;\n        }\n    }\n</code></pre><p> In this example, a property called <code>Name</code> defines a <code>get</code> and <code>set</code> accessor. The <code>get</code> accessor receives the accessibility level of the property itself, <code>public</code> in this case, while the <code>set</code> accessor is explicitly restricted by applying the <a href=\"../../language-reference/keywords/protected\" data-linktype=\"relative-path\">protected</a> access modifier to the accessor itself.  </p>\n<h2 id=\"restrictions-on-access-modifiers-on-accessors\">Restrictions on Access Modifiers on Accessors</h2>\n<p> Using the accessor modifiers on properties or indexers is subject to these conditions:  </p>\n<ul>\n<li><p>You cannot use accessor modifiers on an interface or an explicit <a href=\"../../language-reference/keywords/interface\" data-linktype=\"relative-path\">interface</a> member implementation.  </p>\n</li>\n<li><p>You can use accessor modifiers only if the property or indexer has both <code>set</code> and <code>get</code> accessors. In this case, the modifier is permitted on one only of the two accessors.  </p>\n</li>\n<li><p>If the property or indexer has an <a href=\"../../language-reference/keywords/override\" data-linktype=\"relative-path\">override</a> modifier, the accessor modifier must match the accessor of the overridden accessor, if any.  </p>\n</li>\n<li><p>The accessibility level on the accessor must be more restrictive than the accessibility level on the property or indexer itself.  </p>\n</li>\n</ul>\n<h2 id=\"access-modifiers-on-overriding-accessors\">Access Modifiers on Overriding Accessors</h2>\n<p> When you override a property or indexer, the overridden accessors must be accessible to the overriding code. Also, the accessibility level of both the property/indexer, and that of the accessors must match the corresponding overridden property/indexer and the accessors. For example:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideIndexers#7\">public class Parent\n{\n    public virtual int TestProperty\n    {\n        // Notice the accessor accessibility level.\n        protected set { }\n\n        // No access modifier is used here.\n        get { return 0; }\n    }\n}\npublic class Kid : Parent\n{\n    public override int TestProperty\n    {\n        // Use the same accessibility level as in the overridden accessor.\n        protected set { }\n\n        // Cannot use access modifier here.\n        get { return 0; }\n    }\n}\n</code></pre><h2 id=\"implementing-interfaces\">Implementing Interfaces</h2>\n<p> When you use an accessor to implement an interface, the accessor may not have an access modifier. However, if you implement the interface using one accessor, such as <code>get</code>, the other accessor can have an access modifier, as in the following example:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideIndexers#8\">    public interface ISomeInterface\n    {\n        int TestProperty\n        {\n            // No access modifier allowed here\n            // because this is an interface.\n            get;\n        }\n    }\n\n    public class TestClass : ISomeInterface\n    {\n        public int TestProperty\n        {\n            // Cannot use access modifier here because\n            // this is an interface implementation.\n            get { return 10; }\n\n            // Interface property does not have set accessor,\n            // so access modifier is allowed.\n            protected set { }\n        }\n    }\n</code></pre><h2 id=\"accessor-accessibility-domain\">Accessor Accessibility Domain</h2>\n<p> If you use an access modifier on the accessor, the <a href=\"../../language-reference/keywords/accessibility-domain\" data-linktype=\"relative-path\">accessibility domain</a> of the accessor is determined by this modifier.  </p>\n<p> If you did not use an access modifier on the accessor, the accessibility domain of the accessor is determined by the accessibility level of the property or indexer.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following example contains three classes, <code>BaseClass</code>, <code>DerivedClass</code>, and <code>MainClass</code>. There are two properties on the <code>BaseClass</code>, <code>Name</code> and <code>Id</code> on both classes. The example demonstrates how the property <code>Id</code> on <code>DerivedClass</code> can be hidden by the property <code>Id</code> on <code>BaseClass</code> when you use a restrictive access modifier such as <a href=\"../../language-reference/keywords/protected\" data-linktype=\"relative-path\">protected</a> or <a href=\"../../language-reference/keywords/private\" data-linktype=\"relative-path\">private</a>. Therefore, when you assign values to this property, the property on the <code>BaseClass</code> class is called instead. Replacing the access modifier by <a href=\"../../language-reference/keywords/public\" data-linktype=\"relative-path\">public</a> will make the property accessible.  </p>\n<p> The example also demonstrates that a restrictive access modifier, such as <code>private</code> or <code>protected</code>, on the <code>set</code> accessor of the <code>Name</code> property in <code>DerivedClass</code> prevents access to the accessor and generates an error when you assign to it.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideIndexers#5\">    public class BaseClass\n    {\n        private string name = &quot;Name-BaseClass&quot;;\n        private string id = &quot;ID-BaseClass&quot;;\n\n        public string Name\n        {\n            get { return name; }\n            set { }\n        }\n\n        public string Id\n        {\n            get { return id; }\n            set { }\n        }\n    }\n\n    public class DerivedClass : BaseClass\n    {\n        private string name = &quot;Name-DerivedClass&quot;;\n        private string id = &quot;ID-DerivedClass&quot;;\n\n        new public string Name\n        {\n            get\n            {\n                return name;\n            }\n\n            // Using &quot;protected&quot; would make the set accessor not accessible. \n            set\n            {\n                name = value;\n            }\n        }\n\n        // Using private on the following property hides it in the Main Class.\n        // Any assignment to the property will use Id in BaseClass.\n        new private string Id\n        {\n            get\n            {\n                return id;\n            }\n            set\n            {\n                id = value;\n            }\n        }\n    }\n\n    class MainClass\n    {\n        static void Main()\n        {\n            BaseClass b1 = new BaseClass();\n            DerivedClass d1 = new DerivedClass();\n\n            b1.Name = &quot;Mary&quot;;\n            d1.Name = &quot;John&quot;;\n\n            b1.Id = &quot;Mary123&quot;;\n            d1.Id = &quot;John123&quot;;  // The BaseClass.Id property is called.\n\n            System.Console.WriteLine(&quot;Base: {0}, {1}&quot;, b1.Name, b1.Id);\n            System.Console.WriteLine(&quot;Derived: {0}, {1}&quot;, d1.Name, d1.Id);\n\n            // Keep the console window open in debug mode.\n            System.Console.WriteLine(&quot;Press any key to exit.&quot;);\n            System.Console.ReadKey();\n        }\n    }\n    /* Output:\n        Base: Name-BaseClass, ID-BaseClass\n        Derived: John, ID-BaseClass\n    */\n</code></pre><h2 id=\"comments\">Comments</h2>\n<p> Notice that if you replace the declaration <code>new private string Id</code> by <code>new public string Id</code>, you get the output:  </p>\n<p> <code>Name and ID in the base class: Name-BaseClass, ID-BaseClass</code>  </p>\n<p> <code>Name and ID in the derived class: John, John123</code>  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"properties\" data-linktype=\"relative-path\">Properties</a><br> <a href=\"../indexers/index\" data-linktype=\"relative-path\">Indexers</a><br> <a href=\"access-modifiers\" data-linktype=\"relative-path\">Access Modifiers</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"6e655798-e112-4301-a680-6310a6e012e1\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"26\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/classes-and-structs/restricting-accessor-accessibility.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/classes-and-structs/restricting-accessor-accessibility.md\">\r\n<meta name=\"document_id\" content=\"ba0807b6-029e-6644-a31e-51ab476a0b86\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Restricting Accessor Accessibility (C# Programming Guide) | Microsoft Docs","ms.assetid":"6e655798-e112-4301-a680-6310a6e012e1","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":26,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["read-only properties [C#]","read-only indexers [C#]","accessors [C#]","properties [C#], read-only","asymmetric accessor accesibility [C#]","indexers [C#], read-only"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/classes-and-structs/restricting-accessor-accessibility.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/classes-and-structs/restricting-accessor-accessibility.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/classes-and-structs/restricting-accessor-accessibility.md","document_id":"ba0807b6-029e-6644-a31e-51ab476a0b86","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/classes-and-structs/restricting-accessor-accessibility","toc_asset_id":"articles/csharp/programming-guide/classes-and-structs/toc.json","toc_rel":"toc.json","_op_ogTitle":"Restricting Accessor Accessibility (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":890,"_op_rawTitle":"<h1 id=\"restricting-accessor-accessibility-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/classes-and-structs/restricting-accessor-accessibility.md\" sourcestartlinenumber=\"41\" sourceendlinenumber=\"41\">Restricting Accessor Accessibility (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/classes-and-structs/restricting-accessor-accessibility","fileRelativePath":"articles/csharp/programming-guide/classes-and-structs/restricting-accessor-accessibility.html"},"themesRelativePathToOutputRoot":"_themes/"}