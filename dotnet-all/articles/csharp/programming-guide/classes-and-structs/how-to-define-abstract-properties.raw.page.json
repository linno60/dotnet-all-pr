{"content":"<div><div class=\"content\">\n<p>The following example shows how to define <a href=\"../../language-reference/keywords/abstract\" data-linktype=\"relative-path\">abstract</a> properties. An abstract property declaration does not provide an implementation of the property accessors -- it declares that the class supports properties, but leaves the accessor implementation to derived classes. The following example demonstrates how to implement the abstract properties inherited from a base class.  </p>\n<p> This sample consists of three files, each of which is compiled individually and its resulting assembly is referenced by the next compilation:  </p>\n<ul>\n<li><p>abstractshape.cs: the <code>Shape</code> class that contains an abstract <code>Area</code> property.  </p>\n</li>\n<li><p>shapes.cs: The subclasses of the <code>Shape</code> class.  </p>\n</li>\n<li><p>shapetest.cs: A test program to display the areas of some <code>Shape</code>-derived objects.  </p>\n<p>To compile the example, use the following command:  </p>\n<p><code>csc abstractshape.cs shapes.cs shapetest.cs</code>  </p>\n<p>This will create the executable file shapetest.exe.  </p>\n</li>\n</ul>\n<h2 id=\"example\">Example</h2>\n<p> This file declares the <code>Shape</code> class that contains the <code>Area</code> property of the type <code>double</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideInheritance#1\">// compile with: csc /target:library abstractshape.cs\npublic abstract class Shape\n{\n    private string name;\n\n    public Shape(string s)\n    {\n        // calling the set accessor of the Id property.\n        Id = s;\n    }\n\n    public string Id\n    {\n        get\n        {\n            return name;\n        }\n\n        set\n        {\n            name = value;\n        }\n    }\n\n    // Area is a read-only property - only a get accessor is needed:\n    public abstract double Area\n    {\n        get;\n    }\n\n    public override string ToString()\n    {\n        return Id + &quot; Area = &quot; + string.Format(&quot;{0:F2}&quot;, Area);\n    }\n}\n</code></pre><ul>\n<li><p>Modifiers on the property are placed on the property declaration itself. For example:  </p>\n<pre class=\"loading\"><code>public abstract double Area  \n</code></pre></li>\n<li><p>When declaring an abstract property (such as <code>Area</code> in this example), you simply indicate what property accessors are available, but do not implement them. In this example, only a <a href=\"../../language-reference/keywords/get\" data-linktype=\"relative-path\">get</a> accessor is available, so the property is read-only.  </p>\n</li>\n</ul>\n<h2 id=\"example-1\">Example</h2>\n<p> The following code shows three subclasses of <code>Shape</code> and how they override the <code>Area</code> property to provide their own implementation.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideInheritance#2\">// compile with: csc /target:library /reference:abstractshape.dll shapes.cs\npublic class Square : Shape\n{\n    private int side;\n\n    public Square(int side, string id)\n        : base(id)\n    {\n        this.side = side;\n    }\n\n    public override double Area\n    {\n        get\n        {\n            // Given the side, return the area of a square:\n            return side * side;\n        }\n    }\n}\n\npublic class Circle : Shape\n{\n    private int radius;\n\n    public Circle(int radius, string id)\n        : base(id)\n    {\n        this.radius = radius;\n    }\n\n    public override double Area\n    {\n        get\n        {\n            // Given the radius, return the area of a circle:\n            return radius * radius * System.Math.PI;\n        }\n    }\n}\n\npublic class Rectangle : Shape\n{\n    private int width;\n    private int height;\n\n    public Rectangle(int width, int height, string id)\n        : base(id)\n    {\n        this.width = width;\n        this.height = height;\n    }\n\n    public override double Area\n    {\n        get\n        {\n            // Given the width and height, return the area of a rectangle:\n            return width * height;\n        }\n    }\n}\n</code></pre><h2 id=\"example-2\">Example</h2>\n<p> The following code shows a test program that creates a number of <code>Shape</code>-derived objects and prints out their areas.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideInheritance#3\">// compile with: csc /reference:abstractshape.dll;shapes.dll shapetest.cs\nclass TestClass\n{\n    static void Main()\n    {\n        Shape[] shapes =\n        {\n            new Square(5, &quot;Square #1&quot;),\n            new Circle(3, &quot;Circle #1&quot;),\n            new Rectangle( 4, 5, &quot;Rectangle #1&quot;)\n        };\n\n        System.Console.WriteLine(&quot;Shapes Collection&quot;);\n        foreach (Shape s in shapes)\n        {\n            System.Console.WriteLine(s);\n        }\n    }\n}\n/* Output:\n    Shapes Collection\n    Square #1 Area = 25.00\n    Circle #1 Area = 28.27\n    Rectangle #1 Area = 20.00\n*/\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">Classes and Structs</a><br> <a href=\"abstract-and-sealed-classes-and-class-members\" data-linktype=\"relative-path\">Abstract and Sealed Classes and Class Members</a><br> <a href=\"properties\" data-linktype=\"relative-path\">Properties</a><br> <a href=\"http://msdn.microsoft.com/library/70f65026-3687-4e9c-ab79-c18b97dd8be4\" data-linktype=\"external\">How to: Create and Use Assemblies Using the Command Line</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"ms.assetid\" content=\"672a90eb-47b9-4ae0-9914-af53852fddcb\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"13\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/classes-and-structs/how-to-define-abstract-properties.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/classes-and-structs/how-to-define-abstract-properties.md\">\r\n<meta name=\"document_id\" content=\"586c1ea6-73d6-84c8-64ed-6207ef7ff947\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","uhfHeaderId":"MSDocsHeader-DotNet","title":"How to: Define Abstract Properties (C# Programming Guide) | Microsoft Docs","ms.assetid":"672a90eb-47b9-4ae0-9914-af53852fddcb","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":13,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["properties [C#], abstract","abstract properties [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/classes-and-structs/how-to-define-abstract-properties.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/classes-and-structs/how-to-define-abstract-properties.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/classes-and-structs/how-to-define-abstract-properties.md","document_id":"586c1ea6-73d6-84c8-64ed-6207ef7ff947","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/classes-and-structs/how-to-define-abstract-properties","toc_asset_id":"articles/csharp/programming-guide/classes-and-structs/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Define Abstract Properties (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":559,"_op_rawTitle":"<h1 id=\"how-to-define-abstract-properties-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/classes-and-structs/how-to-define-abstract-properties.md\" sourcestartlinenumber=\"37\" sourceendlinenumber=\"37\">How to: Define Abstract Properties (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/classes-and-structs/how-to-define-abstract-properties","fileRelativePath":"articles/csharp/programming-guide/classes-and-structs/how-to-define-abstract-properties.html"},"themesRelativePathToOutputRoot":"_themes/"}