{"content":"<div><div class=\"content\">\n<p>Arrays can be passed as arguments to method parameters. Because arrays are reference types, the method can change the value of the elements.  </p>\n<h2 id=\"passing-single-dimensional-arrays-as-arguments\">Passing Single-Dimensional Arrays As Arguments</h2>\n<p> You can pass an initialized single-dimensional array to a method. For example, the following statement sends an array to a print method.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideArrays#34\">        int[] theArray = { 1, 3, 5, 7, 9 };\n        PrintArray(theArray);\n</code></pre><p> The following code shows a partial implementation of the print method.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideArrays#33\">    void PrintArray(int[] arr)\n    {\n        // Method code.\n    }\n</code></pre><p> You can initialize and pass a new array in one step, as is shown in the following example.  </p>\n<pre><code class=\"lang-cs\" name=\"CsProgGuideArrays#35\">        PrintArray(new int[] { 1, 3, 5, 7, 9 });\n</code></pre><h2 id=\"example\">Example</h2>\n<h3 id=\"description\">Description</h3>\n<p> In the following example, an array of strings is initialized and passed as an argument to a <code>PrintArray</code> method for strings. The method displays the elements of the array. Next, methods <code>ChangeArray</code> and <code>ChangeArrayElement</code> are called to demonstrate that sending an array argument by value does not prevent changes to the array elements.  </p>\n<h3 id=\"code\">Code</h3>\n<pre><code class=\"lang-cs\" name=\"csProgGuideArrays#30\">class ArrayClass\n{\n    static void PrintArray(string[] arr)\n    {\n        for (int i = 0; i &lt; arr.Length; i++)\n        {\n            System.Console.Write(arr[i] + &quot;{0}&quot;, i &lt; arr.Length - 1 ? &quot; &quot; : &quot;&quot;);\n        }\n        System.Console.WriteLine();\n    }\n\n    static void ChangeArray(string[] arr)\n    {\n        // The following attempt to reverse the array does not persist when\n        // the method returns, because arr is a value parameter.\n        arr = (arr.Reverse()).ToArray();\n        // The following statement displays Sat as the first element in the array.\n        System.Console.WriteLine(&quot;arr[0] is {0} in ChangeArray.&quot;, arr[0]);\n    }\n\n    static void ChangeArrayElements(string[] arr)\n    {\n        // The following assignments change the value of individual array \n        // elements. \n        arr[0] = &quot;Sat&quot;;\n        arr[1] = &quot;Fri&quot;;\n        arr[2] = &quot;Thu&quot;;\n        // The following statement again displays Sat as the first element\n        // in the array arr, inside the called method.\n        System.Console.WriteLine(&quot;arr[0] is {0} in ChangeArrayElements.&quot;, arr[0]);\n    }\n\n    static void Main()\n    {\n        // Declare and initialize an array.\n        string[] weekDays = { &quot;Sun&quot;, &quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot; };\n\n        // Pass the array as an argument to PrintArray.\n        PrintArray(weekDays);\n\n        // ChangeArray tries to change the array by assigning something new\n        // to the array in the method. \n        ChangeArray(weekDays);\n\n        // Print the array again, to verify that it has not been changed.\n        System.Console.WriteLine(&quot;Array weekDays after the call to ChangeArray:&quot;);\n        PrintArray(weekDays);\n        System.Console.WriteLine();\n\n        // ChangeArrayElements assigns new values to individual array\n        // elements.\n        ChangeArrayElements(weekDays);\n\n        // The changes to individual elements persist after the method returns.\n        // Print the array, to verify that it has been changed.\n        System.Console.WriteLine(&quot;Array weekDays after the call to ChangeArrayElements:&quot;);\n        PrintArray(weekDays);\n    }\n}\n// Output: \n// Sun Mon Tue Wed Thu Fri Sat\n// arr[0] is Sat in ChangeArray.\n// Array weekDays after the call to ChangeArray:\n// Sun Mon Tue Wed Thu Fri Sat\n// \n// arr[0] is Sat in ChangeArrayElements.\n// Array weekDays after the call to ChangeArrayElements:\n// Sat Fri Thu Wed Thu Fri Sat\n</code></pre><h2 id=\"passing-multidimensional-arrays-as-arguments\">Passing Multidimensional Arrays As Arguments</h2>\n<p> You pass an initialized multidimensional array to a method in the same way that you pass a one-dimensional array.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideArrays#41\">        int[,] theArray = { { 1, 2 }, { 2, 3 }, { 3, 4 } };\n        Print2DArray(theArray);\n</code></pre><p> The following code shows a partial declaration of a print method that accepts a two-dimensional array as its argument.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideArrays#36\">    void Print2DArray(int[,] arr)\n    {\n        // Method code.\n    }\n</code></pre><p> You can initialize and pass a new array in one step, as is shown in the following example.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideArrays#32\">        Print2DArray(new int[,] { { 1, 2 }, { 3, 4 }, { 5, 6 }, { 7, 8 } });\n</code></pre><h2 id=\"example-1\">Example</h2>\n<h3 id=\"description-1\">Description</h3>\n<p> In the following example, a two-dimensional array of integers is initialized and passed to the <code>Print2DArray</code> method. The method displays the elements of the array.  </p>\n<h3 id=\"code-1\">Code</h3>\n<pre><code class=\"lang-cs\" name=\"csProgGuideArrays#31\">class ArrayClass2D\n{\n    static void Print2DArray(int[,] arr)\n    {\n        // Display the array elements.\n        for (int i = 0; i &lt; arr.GetLength(0); i++)\n        {\n            for (int j = 0; j &lt; arr.GetLength(1); j++)\n            {\n                System.Console.WriteLine(&quot;Element({0},{1})={2}&quot;, i, j, arr[i, j]);\n            }\n        }\n    }\n    static void Main()\n    {\n        // Pass the array as an argument.\n        Print2DArray(new int[,] { { 1, 2 }, { 3, 4 }, { 5, 6 }, { 7, 8 } });\n\n        // Keep the console window open in debug mode.\n        System.Console.WriteLine(&quot;Press any key to exit.&quot;);\n        System.Console.ReadKey();\n    }\n}\n    /* Output:\n        Element(0,0)=1\n        Element(0,1)=2\n        Element(1,0)=3\n        Element(1,1)=4\n        Element(2,0)=5\n        Element(2,1)=6\n        Element(3,0)=7\n        Element(3,1)=8\n    */\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">Arrays</a><br> <a href=\"single-dimensional-arrays\" data-linktype=\"relative-path\">Single-Dimensional Arrays</a><br> <a href=\"multidimensional-arrays\" data-linktype=\"relative-path\">Multidimensional Arrays</a><br> <a href=\"jagged-arrays\" data-linktype=\"relative-path\">Jagged Arrays</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"f3a0971e-c87c-4a1f-8262-bc0a3b712772\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"21\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/arrays/passing-arrays-as-arguments.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/arrays/passing-arrays-as-arguments.md\">\r\n<meta name=\"document_id\" content=\"cbacf72e-e8a6-946e-9c06-fa1f4c3de6f6\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Passing Arrays as Arguments (C# Programming Guide) | Microsoft Docs","ms.assetid":"f3a0971e-c87c-4a1f-8262-bc0a3b712772","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":21,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["arrays [C#], passing as arguments"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/arrays/passing-arrays-as-arguments.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/arrays/passing-arrays-as-arguments.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/arrays/passing-arrays-as-arguments.md","document_id":"cbacf72e-e8a6-946e-9c06-fa1f4c3de6f6","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/arrays/passing-arrays-as-arguments","toc_asset_id":"articles/csharp/programming-guide/arrays/toc.json","toc_rel":"toc.json","_op_ogTitle":"Passing Arrays as Arguments (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":716,"_op_rawTitle":"<h1 id=\"passing-arrays-as-arguments-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/arrays/passing-arrays-as-arguments.md\" sourcestartlinenumber=\"36\" sourceendlinenumber=\"36\">Passing Arrays as Arguments (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/arrays/passing-arrays-as-arguments","fileRelativePath":"articles/csharp/programming-guide/arrays/passing-arrays-as-arguments.html"},"themesRelativePathToOutputRoot":"_themes/"}