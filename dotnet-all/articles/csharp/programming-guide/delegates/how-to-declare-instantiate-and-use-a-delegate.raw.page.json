{"content":"<div><div class=\"content\">\n<p>In C# 1.0 and later, delegates can be declared as shown in the following example.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideDelegates#13\">// Declare a delegate.\ndelegate void Del(string str);\n\n// Declare a method with the same signature as the delegate.\nstatic void Notify(string name)\n{\n    Console.WriteLine(&quot;Notification received for: {0}&quot;, name);\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"csProgGuideDelegates#14\">// Create an instance of the delegate.\nDel del1 = new Del(Notify);\n</code></pre><p> C# 2.0 provides a simpler way to write the previous declaration, as shown in the following example.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideDelegates#32\">// C# 2.0 provides a simpler way to declare an instance of Del.\nDel del2 = Notify;\n</code></pre><p> In C# 2.0 and later, it is also possible to use an anonymous method to declare and initialize a <a href=\"../../language-reference/keywords/delegate\" data-linktype=\"relative-path\">delegate</a>, as shown in the following example.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideDelegates#15\">// Instantiate Del by using an anonymous method.\nDel del3 = delegate(string name)\n    { Console.WriteLine(&quot;Notification received for: {0}&quot;, name); };\n</code></pre><p> In C# 3.0 and later, delegates can also be declared and instantiated by using a lambda expression, as shown in the following example.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideDelegates#31\">// Instantiate Del by using a lambda expression.\nDel del4 = name =&gt;  { Console.WriteLine(&quot;Notification received for: {0}&quot;, name); };\n</code></pre><p> For more information, see <a href=\"../statements-expressions-operators/lambda-expressions\" data-linktype=\"relative-path\">Lambda Expressions</a>.  </p>\n<p> The following example illustrates declaring, instantiating, and using a delegate. The <code>BookDB</code> class encapsulates a bookstore database that maintains a database of books. It exposes a method, <code>ProcessPaperbackBooks</code>, which finds all paperback books in the database and calls a delegate for each one. The <code>delegate</code> type that is used is named <code>ProcessBookDelegate</code>. The <code>Test</code> class uses this class to print the titles and average price of the paperback books.  </p>\n<p> The use of delegates promotes good separation of functionality between the bookstore database and the client code. The client code has no knowledge of how the books are stored or how the bookstore code finds paperback books. The bookstore code has no knowledge of what processing is performed on the paperback books after it finds them.  </p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"lang-cs\" name=\"csProgGuideDelegates#12\">// A set of classes for handling a bookstore:\nnamespace Bookstore\n{\n    using System.Collections;\n\n    // Describes a book in the book list:\n    public struct Book\n    {\n        public string Title;        // Title of the book.\n        public string Author;       // Author of the book.\n        public decimal Price;       // Price of the book.\n        public bool Paperback;      // Is it paperback?\n\n        public Book(string title, string author, decimal price, bool paperBack)\n        {\n            Title = title;\n            Author = author;\n            Price = price;\n            Paperback = paperBack;\n        }\n    }\n\n    // Declare a delegate type for processing a book:\n    public delegate void ProcessBookDelegate(Book book);\n\n    // Maintains a book database.\n    public class BookDB\n    {\n        // List of all books in the database:\n        ArrayList list = new ArrayList();\n\n        // Add a book to the database:\n        public void AddBook(string title, string author, decimal price, bool paperBack)\n        {\n            list.Add(new Book(title, author, price, paperBack));\n        }\n\n        // Call a passed-in delegate on each paperback book to process it: \n        public void ProcessPaperbackBooks(ProcessBookDelegate processBook)\n        {\n            foreach (Book b in list)\n            {\n                if (b.Paperback)\n                    // Calling the delegate:\n                    processBook(b);\n            }\n        }\n    }\n}\n\n\n// Using the Bookstore classes:\nnamespace BookTestClient\n{\n    using Bookstore;\n\n    // Class to total and average prices of books:\n    class PriceTotaller\n    {\n        int countBooks = 0;\n        decimal priceBooks = 0.0m;\n\n        internal void AddBookToTotal(Book book)\n        {\n            countBooks += 1;\n            priceBooks += book.Price;\n        }\n\n        internal decimal AveragePrice()\n        {\n            return priceBooks / countBooks;\n        }\n    }\n\n    // Class to test the book database:\n    class TestBookDB\n    {\n        // Print the title of the book.\n        static void PrintTitle(Book b)\n        {\n            System.Console.WriteLine(&quot;   {0}&quot;, b.Title);\n        }\n\n        // Execution starts here.\n        static void Main()\n        {\n            BookDB bookDB = new BookDB();\n\n            // Initialize the database with some books:\n            AddBooks(bookDB);\n\n            // Print all the titles of paperbacks:\n            System.Console.WriteLine(&quot;Paperback Book Titles:&quot;);\n\n            // Create a new delegate object associated with the static \n            // method Test.PrintTitle:\n            bookDB.ProcessPaperbackBooks(PrintTitle);\n\n            // Get the average price of a paperback by using\n            // a PriceTotaller object:\n            PriceTotaller totaller = new PriceTotaller();\n\n            // Create a new delegate object associated with the nonstatic \n            // method AddBookToTotal on the object totaller:\n            bookDB.ProcessPaperbackBooks(totaller.AddBookToTotal);\n\n            System.Console.WriteLine(&quot;Average Paperback Book Price: ${0:#.##}&quot;,\n                    totaller.AveragePrice());\n        }\n\n        // Initialize the book database with some test books:\n        static void AddBooks(BookDB bookDB)\n        {\n            bookDB.AddBook(&quot;The C Programming Language&quot;, &quot;Brian W. Kernighan and Dennis M. Ritchie&quot;, 19.95m, true);\n            bookDB.AddBook(&quot;The Unicode Standard 2.0&quot;, &quot;The Unicode Consortium&quot;, 39.95m, true);\n            bookDB.AddBook(&quot;The MS-DOS Encyclopedia&quot;, &quot;Ray Duncan&quot;, 129.95m, false);\n            bookDB.AddBook(&quot;Dogbert&#39;s Clues for the Clueless&quot;, &quot;Scott Adams&quot;, 12.00m, true);\n        }\n    }\n}\n/* Output:\nPaperback Book Titles:\n   The C Programming Language\n   The Unicode Standard 2.0\n   Dogbert&#39;s Clues for the Clueless\nAverage Paperback Book Price: $23.97\n*/\n</code></pre><h2 id=\"robust-programming\">Robust Programming</h2>\n<ul>\n<li><p>Declaring a delegate.  </p>\n<p> The following statement declares a new delegate type.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideDelegates#16\">public delegate void ProcessBookDelegate(Book book);\n</code></pre><p> Each delegate type describes the number and types of the arguments, and the type of the return value of methods that it can encapsulate. Whenever a new set of argument types or return value type is needed, a new delegate type must be declared.  </p>\n</li>\n<li><p>Instantiating a delegate.  </p>\n<p> After a delegate type has been declared, a delegate object must be created and associated with a particular method. In the previous example, you do this by passing the <code>PrintTitle</code> method to the <code>ProcessPaperbackBooks</code> method as in the following example:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideDelegates#17\">bookDB.ProcessPaperbackBooks(PrintTitle);\n</code></pre><p> This creates a new delegate object associated with the <a href=\"../../language-reference/keywords/static\" data-linktype=\"relative-path\">static</a> method <code>Test.PrintTitle</code>. Similarly, the non-static method <code>AddBookToTotal</code> on the object <code>totaller</code> is passed as in the following example:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideDelegates#18\">bookDB.ProcessPaperbackBooks(totaller.AddBookToTotal);\n</code></pre><p> In both cases a new delegate object is passed to the <code>ProcessPaperbackBooks</code> method.  </p>\n<p> After a delegate is created, the method it is associated with never changes; delegate objects are immutable.  </p>\n</li>\n<li><p>Calling a delegate.  </p>\n<p> After a delegate object is created, the delegate object is typically passed to other code that will call the delegate. A delegate object is called by using the name of the delegate object, followed by the parenthesized arguments to be passed to the delegate. Following is an example of a delegate call:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideDelegates#19\">processBook(b);\n</code></pre><p> A delegate can be either called synchronously, as in this example, or asynchronously by using <code>BeginInvoke</code> and <code>EndInvoke</code> methods.  </p>\n</li>\n</ul>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"../events/index\" data-linktype=\"relative-path\">Events</a><br> <a href=\"index\" data-linktype=\"relative-path\">Delegates</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"61c4895f-f785-48f8-8bfe-db73b411c4ae\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"21\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/delegates/how-to-declare-instantiate-and-use-a-delegate.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/delegates/how-to-declare-instantiate-and-use-a-delegate.md\">\r\n<meta name=\"document_id\" content=\"362acf29-a812-4f22-1030-3c3625fdb7b6\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"How to: Declare, Instantiate, and Use a Delegate (C# Programming Guide) | Microsoft Docs","ms.assetid":"61c4895f-f785-48f8-8bfe-db73b411c4ae","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":21,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["delegates [C#], declaring and instantiating"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/delegates/how-to-declare-instantiate-and-use-a-delegate.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/delegates/how-to-declare-instantiate-and-use-a-delegate.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/delegates/how-to-declare-instantiate-and-use-a-delegate.md","document_id":"362acf29-a812-4f22-1030-3c3625fdb7b6","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/delegates/how-to-declare-instantiate-and-use-a-delegate","toc_asset_id":"articles/csharp/programming-guide/delegates/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Declare, Instantiate, and Use a Delegate (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":980,"_op_rawTitle":"<h1 id=\"how-to-declare-instantiate-and-use-a-delegate-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/delegates/how-to-declare-instantiate-and-use-a-delegate.md\" sourcestartlinenumber=\"36\" sourceendlinenumber=\"36\">How to: Declare, Instantiate, and Use a Delegate (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/delegates/how-to-declare-instantiate-and-use-a-delegate","fileRelativePath":"articles/csharp/programming-guide/delegates/how-to-declare-instantiate-and-use-a-delegate.html"},"themesRelativePathToOutputRoot":"_themes/"}