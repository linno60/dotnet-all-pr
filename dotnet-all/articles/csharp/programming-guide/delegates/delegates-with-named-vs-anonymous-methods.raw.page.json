{"content":"<div><div class=\"content\">\n<p>A <a href=\"../../language-reference/keywords/delegate\" data-linktype=\"relative-path\">delegate</a> can be associated with a named method. When you instantiate a delegate by using a named method, the method is passed as a parameter, for example:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideDelegates#1\">// Declare a delegate:\ndelegate void Del(int x);\n\n// Define a named method:\nvoid DoWork(int k) { /* ... */ }\n\n// Instantiate the delegate using the method as a parameter:\nDel d = obj.DoWork;\n</code></pre><p> This is called using a named method. Delegates constructed with a named method can encapsulate either a <a href=\"../../language-reference/keywords/static\" data-linktype=\"relative-path\">static</a> method or an instance method. Named methods are the only way to instantiate a delegate in earlier versions of C#. However, in a situation where creating a new method is unwanted overhead, C# enables you to instantiate a delegate and immediately specify a code block that the delegate will process when it is called. The block can contain either a lambda expression or an anonymous method. For more information, see <a href=\"../statements-expressions-operators/anonymous-functions\" data-linktype=\"relative-path\">Anonymous Functions</a>.  </p>\n<h2 id=\"remarks\">Remarks</h2>\n<p> The method that you pass as a delegate parameter must have the same signature as the delegate declaration.  </p>\n<p> A delegate instance may encapsulate either static or instance method.  </p>\n<p> Although the delegate can use an <a href=\"../../language-reference/keywords/out\" data-linktype=\"relative-path\">out</a> parameter, we do not recommend its use with multicast event delegates because you cannot know which delegate will be called.  </p>\n<h2 id=\"example-1\">Example 1</h2>\n<p> The following is a simple example of declaring and using a delegate. Notice that both the delegate, <code>Del</code>, and the associated method, <code>MultiplyNumbers</code>, have the same signature  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideDelegates#2\">// Declare a delegate\ndelegate void Del(int i, double j);\n\nclass MathClass\n{\n    static void Main()\n    {\n        MathClass m = new MathClass();\n\n        // Delegate instantiation using &quot;MultiplyNumbers&quot;\n        Del d = m.MultiplyNumbers;\n\n        // Invoke the delegate object.\n        System.Console.WriteLine(&quot;Invoking the delegate using &#39;MultiplyNumbers&#39;:&quot;);\n        for (int i = 1; i &lt;= 5; i++)\n        {\n            d(i, 2);\n        }\n\n        // Keep the console window open in debug mode.\n        System.Console.WriteLine(&quot;Press any key to exit.&quot;);\n        System.Console.ReadKey();\n    }\n\n    // Declare the associated method.\n    void MultiplyNumbers(int m, double n)\n    {\n        System.Console.Write(m * n + &quot; &quot;);\n    }\n}\n/* Output:\n    Invoking the delegate using &#39;MultiplyNumbers&#39;:\n    2 4 6 8 10\n*/\n</code></pre><h2 id=\"example-2\">Example 2</h2>\n<p> In the following example, one delegate is mapped to both static and instance methods and returns specific information from each.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideDelegates#3\">// Declare a delegate\ndelegate void Del();\n\nclass SampleClass\n{\n    public void InstanceMethod()\n    {\n        System.Console.WriteLine(&quot;A message from the instance method.&quot;);\n    }\n\n    static public void StaticMethod()\n    {\n        System.Console.WriteLine(&quot;A message from the static method.&quot;);\n    }\n}\n\nclass TestSampleClass\n{\n    static void Main()\n    {\n        SampleClass sc = new SampleClass();\n\n        // Map the delegate to the instance method:\n        Del d = sc.InstanceMethod;\n        d();\n\n        // Map to the static method:\n        d = SampleClass.StaticMethod;\n        d();\n    }\n}\n/* Output:\n    A message from the instance method.\n    A message from the static method.\n*/\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">Delegates</a><br> <a href=\"../statements-expressions-operators/anonymous-methods\" data-linktype=\"relative-path\">Anonymous Methods</a><br> <a href=\"how-to-combine-delegates-multicast-delegates\" data-linktype=\"relative-path\">How to: Combine Delegates (Multicast Delegates)</a><br> <a href=\"../events/index\" data-linktype=\"relative-path\">Events</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"98fa8c61-66b6-4146-986c-3236c4045733\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"18\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/delegates/delegates-with-named-vs-anonymous-methods.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/delegates/delegates-with-named-vs-anonymous-methods.md\">\r\n<meta name=\"document_id\" content=\"a78c8261-4dda-ede9-592f-c33271af9142\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc1.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"Delegates with Named vs. Anonymous Methods (C# Programming Guide) | Microsoft Docs","ms.assetid":"98fa8c61-66b6-4146-986c-3236c4045733","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":18,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["delegates [C#], with named vs. anonymous methods","methods [C#], in delegates"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/delegates/delegates-with-named-vs-anonymous-methods.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/delegates/delegates-with-named-vs-anonymous-methods.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/delegates/delegates-with-named-vs-anonymous-methods.md","document_id":"a78c8261-4dda-ede9-592f-c33271af9142","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/delegates/delegates-with-named-vs-anonymous-methods","toc_asset_id":"articles/csharp/programming-guide/delegates/toc.json","toc_rel":"toc.json","_op_ogTitle":"Delegates with Named vs. Anonymous Methods (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":462,"_op_rawTitle":"<h1 id=\"delegates-with-named-vs-anonymous-methods-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/delegates/delegates-with-named-vs-anonymous-methods.md\" sourcestartlinenumber=\"37\" sourceendlinenumber=\"37\">Delegates with Named vs. Anonymous Methods (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/delegates/delegates-with-named-vs-anonymous-methods","fileRelativePath":"articles/csharp/programming-guide/delegates/delegates-with-named-vs-anonymous-methods.html"},"themesRelativePathToOutputRoot":"_themes/"}