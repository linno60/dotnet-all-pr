{"content":"<div><div class=\"content\">\n<p>Generic classes and methods combine reusability, type safety and efficiency in a way that their non-generic counterparts cannot. Generics are most frequently used with collections and the methods that operate on them. Version 2.0 of the .NET Framework class library provides a new namespace, <a class=\"xref\" href=\"../../../../api/system.collections.generic\" data-linktype=\"relative-path\">System.Collections.Generic</a>, which contains several new generic-based collection classes. It is recommended that all applications that target the .NET Framework 2.0 and later use the new generic collection classes instead of the older non-generic counterparts such as <a class=\"xref\" href=\"../../../../api/system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a>. For more information, see <a href=\"generics-in-the-net-framework-class-library\" data-linktype=\"relative-path\">Generics in the .NET Framework Class Library</a>.  </p>\n<p> Of course, you can also create custom generic types and methods to provide your own generalized solutions and design patterns that are type-safe and efficient. The following code example shows a simple generic linked-list class for demonstration purposes. (In most cases, you should use the <a class=\"xref\" href=\"../../../../api/system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> class provided by the .NET Framework class library instead of creating your own.) The type parameter <code>T</code> is used in several locations where a concrete type would ordinarily be used to indicate the type of the item stored in the list. It is used in the following ways:  </p>\n<ul>\n<li><p>As the type of a method parameter in the <code>AddHead</code> method.  </p>\n</li>\n<li><p>As the return type of the public method <code>GetNext</code> and the <code>Data</code> property in the nested <code>Node</code> class.  </p>\n</li>\n<li><p>As the type of the private member data in the nested class.  </p>\n</li>\n</ul>\n<p> Note that T is available to the nested <code>Node</code> class. When <code>GenericList&lt;T&gt;</code> is instantiated with a concrete type, for example as a <code>GenericList&lt;int&gt;</code>, each occurrence of <code>T</code> will be replaced with <code>int</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideGenerics#2\">// type parameter T in angle brackets\npublic class GenericList&lt;T&gt; \n{\n    // The nested class is also generic on T.\n    private class Node\n    {\n        // T used in non-generic constructor.\n        public Node(T t)\n        {\n            next = null;\n            data = t;\n        }\n\n        private Node next;\n        public Node Next\n        {\n            get { return next; }\n            set { next = value; }\n        }\n        \n        // T as private member data type.\n        private T data;\n\n        // T as return type of property.\n        public T Data  \n        {\n            get { return data; }\n            set { data = value; }\n        }\n    }\n\n    private Node head;\n    \n    // constructor\n    public GenericList() \n    {\n        head = null;\n    }\n\n    // T as method parameter type:\n    public void AddHead(T t) \n    {\n        Node n = new Node(t);\n        n.Next = head;\n        head = n;\n    }\n\n    public IEnumerator&lt;T&gt; GetEnumerator()\n    {\n        Node current = head;\n\n        while (current != null)\n        {\n            yield return current.Data;\n            current = current.Next;\n        }\n    }\n}\n</code></pre><p> The following code example shows how client code uses the generic <code>GenericList&lt;T&gt;</code> class to create a list of integers. Simply by changing the type argument, the following code could easily be modified to create lists of strings or any other custom type:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideGenerics#3\">class TestGenericList\n{\n    static void Main()\n    {\n        // int is the type argument\n        GenericList&lt;int&gt; list = new GenericList&lt;int&gt;();\n\n        for (int x = 0; x &lt; 10; x++)\n        {\n            list.AddHead(x);\n        }\n\n        foreach (int i in list)\n        {\n            System.Console.Write(i + &quot; &quot;);\n        }\n        System.Console.WriteLine(&quot;\\nDone&quot;);\n    }\n}\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../api/system.collections.generic\" data-linktype=\"relative-path\">System.Collections.Generic</a><br> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">Generics</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"a1ad761e-42f7-41dd-a62f-452a2de26b9d\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"32\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/generics/introduction-to-generics.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/generics/introduction-to-generics.md\">\r\n<meta name=\"document_id\" content=\"8c44f61b-edd9-674b-92d3-2295fbf5d5b6\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc1.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"Introduction to Generics (C# Programming Guide) | Microsoft Docs","ms.assetid":"a1ad761e-42f7-41dd-a62f-452a2de26b9d","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":32,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["generics [C#], about generics"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/generics/introduction-to-generics.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/generics/introduction-to-generics.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/generics/introduction-to-generics.md","document_id":"8c44f61b-edd9-674b-92d3-2295fbf5d5b6","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/generics/introduction-to-generics","toc_asset_id":"articles/csharp/programming-guide/generics/toc.json","toc_rel":"toc.json","_op_ogTitle":"Introduction to Generics (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":499,"_op_rawTitle":"<h1 id=\"introduction-to-generics-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/generics/introduction-to-generics.md\" sourcestartlinenumber=\"36\" sourceendlinenumber=\"36\">Introduction to Generics (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/generics/introduction-to-generics","fileRelativePath":"articles/csharp/programming-guide/generics/introduction-to-generics.html"},"themesRelativePathToOutputRoot":"_themes/"}