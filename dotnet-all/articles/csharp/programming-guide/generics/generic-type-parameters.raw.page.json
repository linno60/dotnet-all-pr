{"content":"<div><div class=\"content\">\n<p>In a generic type or method definition, a type parameters is a placeholder for a specific type that a client specifies when they instantiate a variable of the generic type. A generic class, such as <code>GenericList&lt;T&gt;</code> listed in <a href=\"introduction-to-generics\" data-linktype=\"relative-path\">Introduction to Generics</a>, cannot be used as-is because it is not really a type; it is more like a blueprint for a type. To use <code>GenericList&lt;T&gt;</code>, client code must declare and instantiate a constructed type by specifying a type argument inside the angle brackets. The type argument for this particular class can be any type recognized by the compiler. Any number of constructed type instances can be created, each one using a different type argument, as follows:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideGenerics#7\">            GenericList&lt;float&gt; list1 = new GenericList&lt;float&gt;();\n            GenericList&lt;ExampleClass&gt; list2 = new GenericList&lt;ExampleClass&gt;();\n            GenericList&lt;ExampleStruct&gt; list3 = new GenericList&lt;ExampleStruct&gt;();\n</code></pre><p> In each of these instances of <code>GenericList&lt;T&gt;</code>, every occurrence of <code>T</code> in the class will be substituted at run time with the type argument. By means of this substitution, we have created three separate type-safe and efficient objects using a single class definition. For more information on how this substitution is performed by the CLR, see <a href=\"generics-in-the-run-time\" data-linktype=\"relative-path\">Generics in the Run Time</a>.  </p>\n<h2 id=\"type-parameter-naming-guidelines\">Type Parameter Naming Guidelines</h2>\n<ul>\n<li><p><strong>Do</strong> name generic type parameters with descriptive names, unless a single letter name is completely self explanatory and a descriptive name would not add value.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideGenerics#8\">        public interface ISessionChannel&lt;TSession&gt; { /*...*/ }\n        public delegate TOutput Converter&lt;TInput, TOutput&gt;(TInput from);\n        public class List&lt;T&gt; { /*...*/ }\n</code></pre></li>\n<li><p><strong>Consider</strong> using T as the type parameter name for types with one single letter type parameter.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideGenerics#9\">        public int IComparer&lt;T&gt;() { return 0; }\n        public delegate bool Predicate&lt;T&gt;(T item);\n        public struct Nullable&lt;T&gt; where T : struct { /*...*/ }\n</code></pre></li>\n<li><p><strong>Do</strong> prefix descriptive type parameter names with &quot;T&quot;.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideGenerics#10\">            public interface ISessionChannel&lt;TSession&gt;\n            {\n                TSession Session { get; }\n            }\n</code></pre></li>\n<li><p><strong>Consider</strong> indicating constraints placed on a type parameter in the name of parameter. For example, a parameter constrained to <code>ISession</code> may be called <code>TSession</code>.  </p>\n</li>\n</ul>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../api/system.collections.generic\" data-linktype=\"relative-path\">System.Collections.Generic</a><br> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">Generics</a><br> <a href=\"differences-between-cpp-templates-and-csharp-generics\" data-linktype=\"relative-path\">Differences Between C++ Templates and C# Generics</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"a03b0ab2-0606-4b41-b7bf-e64d5bb4d18f\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"23\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/generics/generic-type-parameters.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/generics/generic-type-parameters.md\">\r\n<meta name=\"document_id\" content=\"8baba05d-95f9-cf3b-91e7-a48bb7dba705\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Generic Type Parameters (C# Programming Guide) | Microsoft Docs","ms.assetid":"a03b0ab2-0606-4b41-b7bf-e64d5bb4d18f","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":23,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["generics [C#], type parameters","type parameters [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/generics/generic-type-parameters.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/generics/generic-type-parameters.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/generics/generic-type-parameters.md","document_id":"8baba05d-95f9-cf3b-91e7-a48bb7dba705","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/generics/generic-type-parameters","toc_asset_id":"articles/csharp/programming-guide/generics/toc.json","toc_rel":"toc.json","_op_ogTitle":"Generic Type Parameters (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":330,"_op_rawTitle":"<h1 id=\"generic-type-parameters-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/generics/generic-type-parameters.md\" sourcestartlinenumber=\"37\" sourceendlinenumber=\"37\">Generic Type Parameters (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/generics/generic-type-parameters","fileRelativePath":"articles/csharp/programming-guide/generics/generic-type-parameters.html"},"themesRelativePathToOutputRoot":"_themes/"}