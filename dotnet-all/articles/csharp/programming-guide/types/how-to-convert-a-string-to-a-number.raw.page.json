{"content":"<div><div class=\"content\">\n<p>You can convert a <a href=\"../../language-reference/keywords/string\" data-linktype=\"relative-path\">string</a> to a number by using methods in the <a class=\"xref\" href=\"../../../../api/system.convert\" data-linktype=\"relative-path\">Convert</a> class or by using the <code>TryParse</code> method found on the various numeric types (int, long, float, etc.).  </p>\n<p> If you have a string, it is slightly more efficient and straightforward to call a <code>TryParse</code> method (for example, <code>int.TryParse(“11”)</code>).  Using a <code>Convert</code> method is more useful for general objects that implement <a class=\"xref\" href=\"../../../../api/system.iconvertible\" data-linktype=\"relative-path\">IConvertible</a>.  </p>\n<p> You can use <code>Parse</code> or <code>TryParse</code> methods on the numeric type you expect the string contains, such as the <a class=\"xref\" href=\"../../../../api/system.int32\" data-linktype=\"relative-path\">System.Int32</a> type.  The <a class=\"xref\" href=\"../../../../api/system.convert#System_Convert_ToUInt32_\" data-linktype=\"relative-path\">ToUInt32</a> method uses <a class=\"xref\" href=\"../../../../api/system.int32#System_Int32_Parse_\" data-linktype=\"relative-path\">Parse</a> internally.  If the string is not in a valid format, <code>Parse</code> throws an exception whereas <code>TryParse</code> returns <a href=\"../../language-reference/keywords/false\" data-linktype=\"relative-path\">false</a>.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The <code>Parse</code> and <code>TryParse</code> methods ignore whitespace at the beginning and at the end of the string, but all other characters must be characters that form the appropriate numeric type (int, long, ulong, float, decimal, etc.).  Any whitespace within the characters that form the number cause an error.  For example, you can use <code>decimal.TryParse</code> to parse “10”, “10.3”, “  10  “, but you cannot use this method to parse 10 from “10X”, “1 0” (note space), “10 .3” (note space), “10e1” (<code>float.TryParse</code> works here), and so on.  </p>\n<p> The examples below demonstrate both successful and unsuccessful calls to <code>Parse</code> and <code>TryParse</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideTypes#5555\">using System;\nusing System.Linq;\nusing System.Collections;\nusing System.Collections.Generic;\n</code></pre><pre><code class=\"lang-cs\" name=\"csProgGuideTypes#25\">            int numVal = Int32.Parse(&quot;-105&quot;);\n            Console.WriteLine(numVal);\n            // Output: -105\n</code></pre><pre><code class=\"lang-cs\" name=\"csProgGuideTypes#26\">            // TryParse returns true if the conversion succeeded\n            // and stores the result in j.\n            int j;\n            if (Int32.TryParse(&quot;-105&quot;, out j))\n                Console.WriteLine(j);\n            else\n                Console.WriteLine(&quot;String could not be parsed.&quot;);\n            // Output: -105\n</code></pre><pre><code class=\"lang-cs\" name=\"csProgGuideTypes#27\">            try\n            {\n                int m = Int32.Parse(&quot;abc&quot;);\n            }\n            catch (FormatException e)\n            {\n                Console.WriteLine(e.Message);\n            }\n            // Output: Input string was not in a correct format.\n</code></pre><pre><code class=\"lang-cs\" name=\"csProgGuideTypes#28\">            string inputString = &quot;abc&quot;;\n            int numValue;\n            bool parsed = Int32.TryParse(inputString, out numValue);\n\n            if (!parsed)\n                Console.WriteLine(&quot;Int32.TryParse could not parse &#39;{0}&#39; to an int.\\n&quot;, inputString);\n\n            // Output: Int32.TryParse could not parse &#39;abc&#39; to an int.\n</code></pre><pre><code class=\"lang-cs\" name=\"csProgGuideTypes#100\">            // This snippet shows a couple of examples that extract number characters from the\n            // beginning of the string to avoid TryParse errors.\n            StringBuilder sb = new StringBuilder();\n            var str = &quot;  10FFxxx&quot;;\n            foreach (char c in str) {\n                // Check for numeric characters (hex in this case).  Add &quot;.&quot; and &quot;e&quot; if float,\n                // and remove letters.  Include initial space because it is harmless.\n                if ((c &gt;= &#39;0&#39; &amp;&amp; c &lt;= &#39;9&#39;) || (c &gt;= &#39;A&#39; &amp;&amp; c &lt;= &#39;F&#39;) || (c &gt;= &#39;a&#39; &amp;&amp; c &lt;= &#39;f&#39;) || c == &#39; &#39;) {\n                    sb.Append(c);\n                }\n                else\n                    break;\n            }\n            if (int.TryParse(sb.ToString(), System.Globalization.NumberStyles.HexNumber, null, out i))\n                Console.WriteLine(sb.ToString());\n\n            str = &quot;   -10FFXXX&quot;;\n            sb.Clear();\n            foreach (char c in str) {\n                // Check for numeric characters (allow negative in this case but no hex digits). \n                // Though we use int.TryParse in the previous example and this one, int.TryParse does NOT\n                // allow a sign character (-) AND hex digits at the same time.\n                // Include initial space because it is harmless.\n                if ((c &gt;= &#39;0&#39; &amp;&amp; c &lt;= &#39;9&#39;) || c == &#39; &#39; || c == &#39;-&#39;) {\n                    sb.Append(c);\n                } else\n                    break;\n            }\n            if (int.TryParse(sb.ToString(), out i))\n                Console.WriteLine(sb.ToString());\n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> The following table lists some of the methods from the <a class=\"xref\" href=\"../../../../api/system.convert\" data-linktype=\"relative-path\">Convert</a> class that you can use.  </p>\n<table>\n<thead>\n<tr>\n<th>Numeric Type</th>\n<th>Method</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>decimal</code></td>\n<td><a class=\"xref\" href=\"../../../../api/system.convert#System_Convert_ToDecimal_System_String_\" data-linktype=\"relative-path\">ToDecimal(String)</a></td>\n</tr>\n<tr>\n<td><code>float</code></td>\n<td><a class=\"xref\" href=\"../../../../api/system.convert#System_Convert_ToSingle_System_String_\" data-linktype=\"relative-path\">ToSingle(String)</a></td>\n</tr>\n<tr>\n<td><code>double</code></td>\n<td><a class=\"xref\" href=\"../../../../api/system.convert#System_Convert_ToDouble_System_String_\" data-linktype=\"relative-path\">ToDouble(String)</a></td>\n</tr>\n<tr>\n<td><code>short</code></td>\n<td><a class=\"xref\" href=\"../../../../api/system.convert#System_Convert_ToInt16_System_String_\" data-linktype=\"relative-path\">ToInt16(String)</a></td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td><a class=\"xref\" href=\"../../../../api/system.convert#System_Convert_ToInt32_System_String_\" data-linktype=\"relative-path\">ToInt32(String)</a></td>\n</tr>\n<tr>\n<td><code>long</code></td>\n<td><a class=\"xref\" href=\"../../../../api/system.convert#System_Convert_ToInt64_System_String_\" data-linktype=\"relative-path\">ToInt64(String)</a></td>\n</tr>\n<tr>\n<td><code>ushort</code></td>\n<td><a class=\"xref\" href=\"../../../../api/system.convert#System_Convert_ToUInt16_System_String_\" data-linktype=\"relative-path\">ToUInt16(String)</a></td>\n</tr>\n<tr>\n<td><code>uint</code></td>\n<td><a class=\"xref\" href=\"../../../../api/system.convert#System_Convert_ToUInt32_System_String_\" data-linktype=\"relative-path\">ToUInt32(String)</a></td>\n</tr>\n<tr>\n<td><code>ulong</code></td>\n<td><a class=\"xref\" href=\"../../../../api/system.convert#System_Convert_ToUInt64_System_String_\" data-linktype=\"relative-path\">ToUInt64(String)</a></td>\n</tr>\n</tbody>\n</table>\n<p> This example calls the <a class=\"xref\" href=\"../../../../api/system.convert#System_Convert_ToInt32_System_String_\" data-linktype=\"relative-path\">System.Convert.ToInt32(String)</a> method to convert an input <a href=\"../../language-reference/keywords/string\" data-linktype=\"relative-path\">string</a> to an <a href=\"../../language-reference/keywords/int\" data-linktype=\"relative-path\">int</a> . The code catches the two most common exceptions that can be thrown by this method, <a class=\"xref\" href=\"../../../../api/system.formatexception\" data-linktype=\"relative-path\">FormatException</a> and <a class=\"xref\" href=\"../../../../api/system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a>. If the number can be incremented without overflowing the integer storage location, the program adds 1 to the result and prints the output.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideTypes#5555\">using System;\nusing System.Linq;\nusing System.Collections;\nusing System.Collections.Generic;\n</code></pre><pre><code class=\"lang-cs\" name=\"csProgGuideTypes#24\">        static void Main(string[] args)\n        {\n            int numVal = -1;\n            bool repeat = true;\n\n            while (repeat)\n            {\n                Console.WriteLine(&quot;Enter a number between −2,147,483,648 and +2,147,483,647 (inclusive).&quot;);\n\n                string input = Console.ReadLine();\n\n                // ToInt32 can throw FormatException or OverflowException.\n                try\n                {\n                    numVal = Convert.ToInt32(input);\n                }\n                catch (FormatException e)\n                {\n                    Console.WriteLine(&quot;Input string is not a sequence of digits.&quot;);\n                }\n                catch (OverflowException e)\n                {\n                    Console.WriteLine(&quot;The number cannot fit in an Int32.&quot;);\n                }\n                finally\n                {\n                    if (numVal &lt; Int32.MaxValue)\n                    {\n                        Console.WriteLine(&quot;The new value is {0}&quot;, numVal + 1);\n                    }\n                    else\n                    {\n                        Console.WriteLine(&quot;numVal cannot be incremented beyond its current value&quot;);\n                    }\n                }\n                Console.WriteLine(&quot;Go again? Y/N&quot;);\n                string go = Console.ReadLine();\n                if (go == &quot;Y&quot; || go == &quot;y&quot;)\n                {\n                    repeat = true;\n                }\n                else\n                {\n                    repeat = false;\n                }\n            }\n            // Keep the console open in debug mode.\n            Console.WriteLine(&quot;Press any key to exit.&quot;);\n            Console.ReadKey();    \n        }\n        // Sample Output:\n        // Enter a number between -2,147,483,648 and +2,147,483,647 (inclusive).\n        // 473\n        // The new value is 474\n        // Go again? Y/N\n        // y\n        // Enter a number between -2,147,483,648 and +2,147,483,647 (inclusive).\n        // 2147483647\n        // numVal cannot be incremented beyond its current value\n        // Go again? Y/N\n        // Y\n        // Enter a number between -2,147,483,648 and +2,147,483,647 (inclusive).\n        // -1000\n        // The new value is -999\n        // Go again? Y/N\n        // n\n        // Press any key to exit.\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"index\" data-linktype=\"relative-path\">Types</a><br> <a href=\"../strings/how-to-determine-whether-a-string-represents-a-numeric-value\" data-linktype=\"relative-path\">How to: Determine Whether a String Represents a Numeric Value</a><br> <a href=\"http://code.msdn.microsoft.com/NET-Framework-4-Formatting-9c4dae8d\" data-linktype=\"external\">.NET Framework 4 Formatting Utility</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"467b9979-86ee-4afd-b734-30299cda91e3\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"34\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/types/how-to-convert-a-string-to-a-number.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/types/how-to-convert-a-string-to-a-number.md\">\r\n<meta name=\"document_id\" content=\"f659b4b2-1756-36d9-971d-e16cf7e034b4\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"How to: Convert a String to a Number (C# Programming Guide) | Microsoft Docs","ms.assetid":"467b9979-86ee-4afd-b734-30299cda91e3","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":34,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["conversions [C#]","conversions [C#], string to int","converting strings to int [C#]","strings [C#], converting to int"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/types/how-to-convert-a-string-to-a-number.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/types/how-to-convert-a-string-to-a-number.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/types/how-to-convert-a-string-to-a-number.md","document_id":"f659b4b2-1756-36d9-971d-e16cf7e034b4","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/types/how-to-convert-a-string-to-a-number","toc_asset_id":"articles/csharp/programming-guide/types/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Convert a String to a Number (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":826,"_op_rawTitle":"<h1 id=\"how-to-convert-a-string-to-a-number-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/types/how-to-convert-a-string-to-a-number.md\" sourcestartlinenumber=\"39\" sourceendlinenumber=\"39\">How to: Convert a String to a Number (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/types/how-to-convert-a-string-to-a-number","fileRelativePath":"articles/csharp/programming-guide/types/how-to-convert-a-string-to-a-number.html"},"themesRelativePathToOutputRoot":"_themes/"}