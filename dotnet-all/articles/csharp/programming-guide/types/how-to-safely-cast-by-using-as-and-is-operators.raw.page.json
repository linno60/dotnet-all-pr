{"content":"<div><div class=\"content\">\n<p>Because objects are polymorphic, it is possible for a variable of a base class type to hold a derived type. To access the derived type&#39;s method, it is necessary to cast the value back to the derived type. However, to attempt a simple cast in these cases creates the risk of throwing an <a class=\"xref\" href=\"../../../../api/system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a>. That is why C# provides the <a href=\"../../language-reference/keywords/is\" data-linktype=\"relative-path\">is</a> and <a href=\"../../language-reference/keywords/as\" data-linktype=\"relative-path\">as</a> operators. You can use these operators to test whether a cast will succeed without causing an exception to be thrown. In general, the <code>as</code> operator is more efficient because it actually returns the cast value if the cast can be made successfully. The <code>is</code> operator returns only a Boolean value. It can therefore be used when you just want to determine an object&#39;s type but do not have to actually cast it.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following examples show how to use the <code>is</code> and <code>as</code> operators to cast from one reference type to another without the risk of throwing an exception. The example also shows how to use the <code>as</code> operator with nullable value types.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideTypes#40\">    class SafeCasting\n    {\n        class Animal\n        {\n            public void Eat() { Console.WriteLine(&quot;Eating.&quot;); }\n            public override string ToString()\n            {\n                return &quot;I am an animal.&quot;;\n            }\n        }\n        class Mammal : Animal { }\n        class Giraffe : Mammal { }\n\n        class SuperNova { }\n\n        static void Main()\n        {\n            SafeCasting app = new SafeCasting();\n\n            // Use the is operator to verify the type.\n            // before performing a cast.\n            Giraffe g = new Giraffe();\n            app.UseIsOperator(g);\n\n            // Use the as operator and test for null\n            // before referencing the variable.\n            app.UseAsOperator(g);\n\n            // Use the as operator to test\n            // an incompatible type.\n            SuperNova sn = new SuperNova();\n            app.UseAsOperator(sn);\n\n            // Use the as operator with a value type.\n            // Note the implicit conversion to int? in \n            // the method body.\n            int i = 5;\n            app.UseAsWithNullable(i);\n\n\n            double d = 9.78654;\n            app.UseAsWithNullable(d);\n\n            // Keep the console window open in debug mode.\n            System.Console.WriteLine(&quot;Press any key to exit.&quot;);\n            System.Console.ReadKey();\n        }\n\n        void UseIsOperator(Animal a)\n        {\n            if (a is Mammal)\n            {\n                Mammal m = (Mammal)a;\n                m.Eat();\n            }\n        }\n\n        void UseAsOperator(object o)\n        {\n            Mammal m = o as Mammal;\n            if (m != null)\n            {\n                Console.WriteLine(m.ToString());\n            }\n            else\n            {\n                Console.WriteLine(&quot;{0} is not a Mammal&quot;, o.GetType().Name);\n            }\n        }\n\n        void UseAsWithNullable(System.ValueType val)\n        {\n            int? j = val as int?;\n            if (j != null)\n            {\n                Console.WriteLine(j);\n            }\n            else\n            {\n                Console.WriteLine(&quot;Could not convert &quot; + val.ToString());\n            }\n        }\n    }\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"index\" data-linktype=\"relative-path\">Types</a><br> <a href=\"casting-and-type-conversions\" data-linktype=\"relative-path\">Casting and Type Conversions</a><br> <a href=\"../nullable-types/index\" data-linktype=\"relative-path\">Nullable Types</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"c1176cea-1426-4a44-8570-3eadafa58863\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"10\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/types/how-to-safely-cast-by-using-as-and-is-operators.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/types/how-to-safely-cast-by-using-as-and-is-operators.md\">\r\n<meta name=\"document_id\" content=\"2bc0fad9-8f01-b168-41c1-eeebd34d3555\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"How to: Safely Cast by Using as and is Operators (C# Programming Guide) | Microsoft Docs","ms.assetid":"c1176cea-1426-4a44-8570-3eadafa58863","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":10,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["cast operators [C#], as and is operators","as operator [C#]","is operator [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/types/how-to-safely-cast-by-using-as-and-is-operators.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/types/how-to-safely-cast-by-using-as-and-is-operators.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/types/how-to-safely-cast-by-using-as-and-is-operators.md","document_id":"2bc0fad9-8f01-b168-41c1-eeebd34d3555","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/types/how-to-safely-cast-by-using-as-and-is-operators","toc_asset_id":"articles/csharp/programming-guide/types/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Safely Cast by Using as and is Operators (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":402,"_op_rawTitle":"<h1 id=\"how-to-safely-cast-by-using-as-and-is-operators-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/types/how-to-safely-cast-by-using-as-and-is-operators.md\" sourcestartlinenumber=\"38\" sourceendlinenumber=\"38\">How to: Safely Cast by Using as and is Operators (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/types/how-to-safely-cast-by-using-as-and-is-operators","fileRelativePath":"articles/csharp/programming-guide/types/how-to-safely-cast-by-using-as-and-is-operators.html"},"themesRelativePathToOutputRoot":"_themes/"}