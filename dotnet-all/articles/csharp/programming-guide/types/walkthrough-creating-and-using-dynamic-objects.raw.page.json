{"content":"<div><div class=\"content\">\n<p>Dynamic objects expose members such as properties and methods at run time, instead of in at compile time. This enables you to create objects to work with structures that do not match a static type or format. For example, you can use a dynamic object to reference the HTML Document Object Model (DOM), which can contain any combination of valid HTML markup elements and attributes. Because each HTML document is unique, the members for a particular HTML document are determined at run time. A common method to reference an attribute of an HTML element is to pass the name of the attribute to the <code>GetProperty</code> method of the element. To reference the <code>id</code> attribute of the HTML element <code>&lt;div id=&quot;Div1&quot;&gt;</code>, you first obtain a reference to the <code>&lt;div&gt;</code> element, and then use <code>divElement.GetProperty(&quot;id&quot;)</code>. If you use a dynamic object, you can reference the <code>id</code> attribute as <code>divElement.id</code>.  </p>\n<p> Dynamic objects also provide convenient access to dynamic languages such as IronPython and IronRuby. You can use a dynamic object to refer to a dynamic script that is interpreted at run time.  </p>\n<p> You reference a dynamic object by using late binding. In C#, you specify the type of a late-bound object as <code>dynamic</code>. In Visual Basic, you specify the type of a late-bound object as <code>Object</code>. For more information, see <a href=\"../../language-reference/keywords/dynamic\" data-linktype=\"relative-path\">dynamic</a> and <a href=\"../../../visual-basic/programming-guide/language-features/early-late-binding/index\" data-linktype=\"relative-path\">Early and Late Binding</a>.  </p>\n<p> You can create custom dynamic objects by using the classes in the <a class=\"xref\" href=\"../../../../api/system.dynamic\" data-linktype=\"relative-path\">System.Dynamic</a> namespace. For example, you can create an <a class=\"xref\" href=\"../../../../api/system.dynamic.expandoobject\" data-linktype=\"relative-path\">ExpandoObject</a> and specify the members of that object at run time. You can also create your own type that inherits the <a class=\"xref\" href=\"../../../../api/system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class. You can then override the members of the <a class=\"xref\" href=\"../../../../api/system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class to provide run-time dynamic functionality.  </p>\n<p> In this walkthrough you will perform the following tasks:  </p>\n<ul>\n<li><p>Create a custom object that dynamically exposes the contents of a text file as properties of an object.  </p>\n</li>\n<li><p>Create a project that uses an <code>IronPython</code> library.  </p>\n</li>\n</ul>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p> You need IronPython 2.6.1 for .NET 4.0 to complete this walkthrough. You can download IronPython 2.6.1 for .NET 4.0 from <a href=\"http://go.microsoft.com/fwlink/?LinkId=187223\" data-linktype=\"external\">CodePlex</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p>Your computer might show different names or locations for some of the Visual Studio user interface elements in the following instructions. The Visual Studio edition that you have and the settings that you use determine these elements. For more information, see <a href=\"https://docs.microsoft.com/visualstudio/ide/personalizing-the-visual-studio-ide\" data-linktype=\"external\">Personalizing the IDE</a>.</p>\n</div>\n<h2 id=\"creating-a-custom-dynamic-object\">Creating a Custom Dynamic Object</h2>\n<p> The first project that you create in this walkthrough defines a custom dynamic object that searches the contents of a text file. Text to search for is specified by the name of a dynamic property. For example, if calling code specifies <code>dynamicFile.Sample</code>, the dynamic class returns a generic list of strings that contains all of the lines from the file that begin with &quot;Sample&quot;. The search is case-insensitive. The dynamic class also supports two optional arguments. The first argument is a search option enum value that specifies that the dynamic class should search for matches at the start of the line, the end of the line, or anywhere in the line. The second argument specifies that the dynamic class should trim leading and trailing spaces from each line before searching. For example, if calling code specifies <code>dynamicFile.Sample(StringSearchOption.Contains)</code>, the dynamic class searches for &quot;Sample&quot; anywhere in a line. If calling code specifies <code>dynamicFile.Sample(StringSearchOption.StartsWith, false)</code>, the dynamic class searches for &quot;Sample&quot; at the start of each line, and does not remove leading and trailing spaces. The default behavior of the dynamic class is to search for a match at the start of each line and to remove leading and trailing spaces.  </p>\n<h4 id=\"to-create-a-custom-dynamic-class\">To create a custom dynamic class</h4>\n<ol>\n<li><p>Start Visual Studio.  </p>\n</li>\n<li><p>On the <strong>File</strong> menu, point to <strong>New</strong> and then click <strong>Project</strong>.  </p>\n</li>\n<li><p>In the <strong>New Project</strong> dialog box, in the <strong>Project Types</strong> pane, make sure that <strong>Windows</strong> is selected. Select <strong>Console Application</strong> in the <strong>Templates</strong> pane. In the <strong>Name</strong> box, type <code>DynamicSample</code>, and then click <strong>OK</strong>. The new project is created.  </p>\n</li>\n<li><p>Right-click the DynamicSample project and point to <strong>Add</strong>, and then click <strong>Class</strong>. In the <strong>Name</strong> box, type <code>ReadOnlyFile</code>, and then click <strong>OK</strong>. A new file is added that contains the ReadOnlyFile class.  </p>\n</li>\n<li><p>At the top of the ReadOnlyFile.cs or ReadOnlyFile.vb file, add the following code to import the <a class=\"xref\" href=\"../../../../api/system.io\" data-linktype=\"relative-path\">System.IO</a> and <a class=\"xref\" href=\"../../../../api/system.dynamic\" data-linktype=\"relative-path\">System.Dynamic</a> namespaces.  </p>\n<pre><code class=\"lang-cs\" name=\"VbDynamicWalkthrough#1\">using System.IO;\nusing System.Dynamic;\n</code></pre><pre><code class=\"lang-vb\" name=\"VbDynamicWalkthrough#1\">Imports System.IO\nImports System.Dynamic\n</code></pre></li>\n<li><p>The custom dynamic object uses an enum to determine the search criteria. Before the class statement, add the following enum definition.  </p>\n<pre><code class=\"lang-cs\" name=\"VbDynamicWalkthrough#2\">public enum StringSearchOption\n{\n    StartsWith,\n    Contains,\n    EndsWith\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"VbDynamicWalkthrough#2\">Public Enum StringSearchOption\n    StartsWith\n    Contains\n    EndsWith\nEnd Enum\n</code></pre></li>\n<li><p>Update the class statement to inherit the <code>DynamicObject</code> class, as shown in the following code example.  </p>\n<pre><code class=\"lang-cs\" name=\"VbDynamicWalkthrough#3\">class ReadOnlyFile : DynamicObject\n</code></pre><pre><code class=\"lang-vb\" name=\"VbDynamicWalkthrough#3\">Public Class ReadOnlyFile\n    Inherits DynamicObject\n</code></pre></li>\n<li><p>Add the following code to the <code>ReadOnlyFile</code> class to define a private field for the file path and a constructor for the <code>ReadOnlyFile</code> class.  </p>\n<pre><code class=\"lang-cs\" name=\"VbDynamicWalkthrough#4\">// Store the path to the file and the initial line count value.\nprivate string p_filePath;\n\n// Public constructor. Verify that file exists and store the path in \n// the private variable.\npublic ReadOnlyFile(string filePath)\n{\n    if (!File.Exists(filePath))\n    {\n        throw new Exception(&quot;File path does not exist.&quot;);\n    }\n\n    p_filePath = filePath;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"VbDynamicWalkthrough#4\">&#39; Store the path to the file and the initial line count value.\nPrivate p_filePath As String\n\n&#39; Public constructor. Verify that file exists and store the path in \n&#39; the private variable.\nPublic Sub New(ByVal filePath As String)\n    If Not File.Exists(filePath) Then\n        Throw New Exception(&quot;File path does not exist.&quot;)\n    End If\n\n    p_filePath = filePath\nEnd Sub\n</code></pre></li>\n<li><p>Add the following <code>GetPropertyValue</code> method to the <code>ReadOnlyFile</code> class. The <code>GetPropertyValue</code> method takes, as input, search criteria and returns the lines from a text file that match that search criteria. The dynamic methods provided by the <code>ReadOnlyFile</code> class call the <code>GetPropertyValue</code> method to retrieve their respective results.  </p>\n<pre><code class=\"lang-cs\" name=\"VbDynamicWalkthrough#5\">public List&lt;string&gt; GetPropertyValue(string propertyName,\n                                     StringSearchOption StringSearchOption = StringSearchOption.StartsWith,\n                                     bool trimSpaces = true) \n{\n    StreamReader sr = null;\n    List&lt;string&gt; results = new List&lt;string&gt;();\n    string line = &quot;&quot;;\n    string testLine = &quot;&quot;;\n\n    try\n    {\n        sr = new StreamReader(p_filePath);\n\n        while (!sr.EndOfStream)\n        {\n            line = sr.ReadLine();\n\n            // Perform a case-insensitive search by using the specified search options.\n            testLine = line.ToUpper();\n            if (trimSpaces) { testLine = testLine.Trim(); }\n\n            switch (StringSearchOption)\n            {\n                case StringSearchOption.StartsWith:\n                    if (testLine.StartsWith(propertyName.ToUpper())) { results.Add(line); }\n                    break;\n                case StringSearchOption.Contains:\n                    if (testLine.Contains(propertyName.ToUpper())) { results.Add(line); }\n                    break;\n                case StringSearchOption.EndsWith:\n                    if (testLine.EndsWith(propertyName.ToUpper())) { results.Add(line); }\n                    break;\n            }\n        }\n    }\n    catch\n    {\n        // Trap any exception that occurs in reading the file and return null.\n        results = null;\n    }\n    finally\n    {\n        if (sr != null) {sr.Close();}\n    }\n\n    return results;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"VbDynamicWalkthrough#5\">Public Function GetPropertyValue(ByVal propertyName As String,\n                                 Optional ByVal StringSearchOption As StringSearchOption = StringSearchOption.StartsWith,\n                                 Optional ByVal trimSpaces As Boolean = True) As List(Of String)\n\n    Dim sr As StreamReader = Nothing\n    Dim results As New List(Of String)\n    Dim line = &quot;&quot;\n    Dim testLine = &quot;&quot;\n\n    Try\n        sr = New StreamReader(p_filePath)\n\n        While Not sr.EndOfStream\n            line = sr.ReadLine()\n\n            &#39; Perform a case-insensitive search by using the specified search options.\n            testLine = UCase(line)\n            If trimSpaces Then testLine = Trim(testLine)\n\n            Select Case StringSearchOption\n                Case StringSearchOption.StartsWith\n                    If testLine.StartsWith(UCase(propertyName)) Then results.Add(line)\n                Case StringSearchOption.Contains\n                    If testLine.Contains(UCase(propertyName)) Then results.Add(line)\n                Case StringSearchOption.EndsWith\n                    If testLine.EndsWith(UCase(propertyName)) Then results.Add(line)\n            End Select\n        End While\n    Catch\n        &#39; Trap any exception that occurs in reading the file and return Nothing.\n        results = Nothing\n    Finally\n        If sr IsNot Nothing Then sr.Close()\n    End Try\n\n    Return results\nEnd Function\n</code></pre></li>\n<li><p>After the <code>GetPropertyValue</code> method, add the following code to override the <a class=\"xref\" href=\"../../../../api/system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TryGetMember_\" data-linktype=\"relative-path\">TryGetMember</a> method of the <a class=\"xref\" href=\"../../../../api/system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class. The <a class=\"xref\" href=\"../../../../api/system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TryGetMember_\" data-linktype=\"relative-path\">TryGetMember</a> method is called when a member of a dynamic class is requested and no arguments are specified. The <code>binder</code> argument contains information about the referenced member, and the <code>result</code> argument references the result returned for the specified member. The <a class=\"xref\" href=\"../../../../api/system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TryGetMember_\" data-linktype=\"relative-path\">TryGetMember</a> method returns a Boolean value that returns <code>true</code> if the requested member exists; otherwise it returns <code>false</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"VbDynamicWalkthrough#6\">// Implement the TryGetMember method of the DynamicObject class for dynamic member calls.\npublic override bool TryGetMember(GetMemberBinder binder,\n                                  out object result) \n{\n    result = GetPropertyValue(binder.Name);\n    return result == null ? false : true;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"VbDynamicWalkthrough#6\">&#39; Implement the TryGetMember method of the DynamicObject class for dynamic member calls.\nPublic Overrides Function TryGetMember(ByVal binder As GetMemberBinder,\n                                       ByRef result As Object) As Boolean\n    result = GetPropertyValue(binder.Name)\n    Return If(result Is Nothing, False, True)\nEnd Function\n</code></pre></li>\n<li><p>After the <code>TryGetMember</code> method, add the following code to override the <a class=\"xref\" href=\"../../../../api/system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TryInvokeMember_\" data-linktype=\"relative-path\">TryInvokeMember</a> method of the <a class=\"xref\" href=\"../../../../api/system.dynamic.dynamicobject\" data-linktype=\"relative-path\">DynamicObject</a> class. The <a class=\"xref\" href=\"../../../../api/system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TryInvokeMember_\" data-linktype=\"relative-path\">TryInvokeMember</a> method is called when a member of a dynamic class is requested with arguments. The <code>binder</code> argument contains information about the referenced member, and the <code>result</code> argument references the result returned for the specified member. The <code>args</code> argument contains an array of the arguments that are passed to the member. The <a class=\"xref\" href=\"../../../../api/system.dynamic.dynamicobject#System_Dynamic_DynamicObject_TryInvokeMember_\" data-linktype=\"relative-path\">TryInvokeMember</a> method returns a Boolean value that returns <code>true</code> if the requested member exists; otherwise it returns <code>false</code>.  </p>\n<p> The custom version of the <code>TryInvokeMember</code> method expects the first argument to be a value from the <code>StringSearchOption</code> enum that you defined in a previous step. The <code>TryInvokeMember</code> method expects the second argument to be a Boolean value. If one or both arguments are valid values, they are passed to the <code>GetPropertyValue</code> method to retrieve the results.  </p>\n<pre><code class=\"lang-cs\" name=\"VbDynamicWalkthrough#7\">// Implement the TryInvokeMember method of the DynamicObject class for \n// dynamic member calls that have arguments.\npublic override bool TryInvokeMember(InvokeMemberBinder binder,\n                                     object[] args,\n                                     out object result)\n{\n    StringSearchOption StringSearchOption = StringSearchOption.StartsWith;\n    bool trimSpaces = true;\n\n    try\n    {\n        if (args.Length &gt; 0) { StringSearchOption = (StringSearchOption)args[0]; }\n    }\n    catch\n    {\n        throw new ArgumentException(&quot;StringSearchOption argument must be a StringSearchOption enum value.&quot;);\n    }\n\n    try\n    {\n        if (args.Length &gt; 1) { trimSpaces = (bool)args[1]; }\n    }\n    catch\n    {\n        throw new ArgumentException(&quot;trimSpaces argument must be a Boolean value.&quot;);\n    }\n\n    result = GetPropertyValue(binder.Name, StringSearchOption, trimSpaces);\n\n    return result == null ? false : true;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"VbDynamicWalkthrough#7\">&#39; Implement the TryInvokeMember method of the DynamicObject class for \n&#39; dynamic member calls that have arguments.\nPublic Overrides Function TryInvokeMember(ByVal binder As InvokeMemberBinder,\n                                          ByVal args() As Object,\n                                          ByRef result As Object) As Boolean\n\n    Dim StringSearchOption As StringSearchOption = StringSearchOption.StartsWith\n    Dim trimSpaces = True\n\n    Try\n        If args.Length &gt; 0 Then StringSearchOption = CType(args(0), StringSearchOption)\n    Catch\n        Throw New ArgumentException(&quot;StringSearchOption argument must be a StringSearchOption enum value.&quot;)\n    End Try\n\n    Try\n        If args.Length &gt; 1 Then trimSpaces = CType(args(1), Boolean)\n    Catch\n        Throw New ArgumentException(&quot;trimSpaces argument must be a Boolean value.&quot;)\n    End Try\n\n    result = GetPropertyValue(binder.Name, StringSearchOption, trimSpaces)\n\n    Return If(result Is Nothing, False, True)\nEnd Function\n</code></pre></li>\n<li><p>Save and close the file.  </p>\n</li>\n</ol>\n<h4 id=\"to-create-a-sample-text-file\">To create a sample text file</h4>\n<ol>\n<li><p>Right-click the DynamicSample project and point to <strong>Add</strong>, and then click <strong>New Item</strong>. In the <strong>Installed Templates</strong> pane, select <strong>General</strong>, and then select the <strong>Text File</strong> template. Leave the default name of TextFile1.txt in the <strong>Name</strong> box, and then click <strong>Add</strong>. A new text file is added to the project.  </p>\n</li>\n<li><p>Copy the following text to the TextFile1.txt file.  </p>\n<pre class=\"loading\"><code>List of customers and suppliers  \n\nSupplier: Lucerne Publishing (http://www.lucernepublishing.com/)  \nCustomer: Preston, Chris  \nCustomer: Hines, Patrick  \nCustomer: Cameron, Maria  \nSupplier: Graphic Design Institute (http://www.graphicdesigninstitute.com/)   \nSupplier: Fabrikam, Inc. (http://www.fabrikam.com/)   \nCustomer: Seubert, Roxanne  \nSupplier: Proseware, Inc. (http://www.proseware.com/)   \nCustomer: Adolphi, Stephan  \nCustomer: Koch, Paul  \n</code></pre></li>\n<li><p>Save and close the file.  </p>\n</li>\n</ol>\n<h4 id=\"to-create-a-sample-application-that-uses-the-custom-dynamic-object\">To create a sample application that uses the custom dynamic object</h4>\n<ol>\n<li><p>In <strong>Solution Explorer</strong>, double-click the Module1.vb file if you are using Visual Basic or the Program.cs file if you are using Visual C#.  </p>\n</li>\n<li><p>Add the following code to the Main procedure to create an instance of the <code>ReadOnlyFile</code> class for the TextFile1.txt file. The code uses late binding to call dynamic members and retrieve lines of text that contain the string &quot;Customer&quot;.  </p>\n<pre><code class=\"lang-cs\" name=\"VbDynamicWalkthrough#8\">dynamic rFile = new ReadOnlyFile(@&quot;..\\..\\TextFile1.txt&quot;);\nforeach (string line in rFile.Customer)\n{\n    Console.WriteLine(line);\n}\nConsole.WriteLine(&quot;----------------------------&quot;);\nforeach (string line in rFile.Customer(StringSearchOption.Contains, true))\n{\n    Console.WriteLine(line);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"VbDynamicWalkthrough#8\">Dim rFile As Object = New ReadOnlyFile(&quot;..\\..\\TextFile1.txt&quot;)\nFor Each line In rFile.Customer\n    Console.WriteLine(line)\nNext\nConsole.WriteLine(&quot;----------------------------&quot;)\nFor Each line In rFile.Customer(StringSearchOption.Contains, True)\n    Console.WriteLine(line)\nNext\n</code></pre></li>\n<li><p>Save the file and press CTRL+F5 to build and run the application.  </p>\n</li>\n</ol>\n<h2 id=\"calling-a-dynamic-language-library\">Calling a Dynamic Language Library</h2>\n<p> The next project that you create in this walkthrough accesses a library that is written in the dynamic language IronPython. Before you create this project, you must have IronPython 2.6.1 for .NET 4.0 installed. You can download IronPython 2.6.1 for .NET 4.0 from <a href=\"http://go.microsoft.com/fwlink/?LinkId=187223\" data-linktype=\"external\">CodePlex</a>.  </p>\n<h4 id=\"to-create-a-custom-dynamic-class-1\">To create a custom dynamic class</h4>\n<ol>\n<li><p>In Visual Studio, on the <strong>File</strong> menu, point to <strong>New</strong> and then click <strong>Project</strong>.  </p>\n</li>\n<li><p>In the <strong>New Project</strong> dialog box, in the <strong>Project Types</strong> pane, make sure that <strong>Windows</strong> is selected. Select <strong>Console Application</strong> in the <strong>Templates</strong> pane. In the <strong>Name</strong> box, type <code>DynamicIronPythonSample</code>, and then click <strong>OK</strong>. The new project is created.  </p>\n</li>\n<li><p>If you are using Visual Basic, right-click the DynamicIronPythonSample project and then click <strong>Properties</strong>. Click the <strong>References</strong> tab. Click the <strong>Add</strong> button. If you are using Visual C#, in <strong>Solution Explorer</strong>, right-click the <strong>References</strong> folder and then click <strong>Add Reference</strong>.  </p>\n</li>\n<li><p>On the <strong>Browse</strong> tab, browse to the folder where the IronPython libraries are installed. For example, C:\\Program Files\\IronPython 2.6 for .NET 4.0. Select the <strong>IronPython.dll</strong>, <strong>IronPython.Modules.dll</strong>, <strong>Microsoft.Scripting.dll</strong>, and <strong>Microsoft.Dynamic.dll</strong> libraries. Click <strong>OK</strong>.  </p>\n</li>\n<li><p>If you are using Visual Basic, edit the Module1.vb file. If you are using Visual C#, edit the Program.cs file.  </p>\n</li>\n<li><p>At the top of the file, add the following code to import the <code>Microsoft.Scripting.Hosting</code> and <code>IronPython.Hosting</code> namespaces from the IronPython libraries.  </p>\n<pre><code class=\"lang-cs\" name=\"VbDynamicWalkthroughIronPython#1\">using Microsoft.Scripting.Hosting;\nusing IronPython.Hosting;\n</code></pre><pre><code class=\"lang-vb\" name=\"VbDynamicWalkthroughIronPython#1\">Imports Microsoft.Scripting.Hosting\nImports IronPython.Hosting\n</code></pre></li>\n<li><p>In the Main method, add the following code to create a new <code>Microsoft.Scripting.Hosting.ScriptRuntime</code> object to host the IronPython libraries. The <code>ScriptRuntime</code> object loads the IronPython library module random.py.  </p>\n<pre><code class=\"lang-cs\" name=\"VbDynamicWalkthroughIronPython#2\">// Set the current directory to the IronPython libraries.\nSystem.IO.Directory.SetCurrentDirectory(\n   Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles) + \n   @&quot;\\IronPython 2.6 for .NET 4.0\\Lib&quot;);\n\n// Create an instance of the random.py IronPython library.\nConsole.WriteLine(&quot;Loading random.py&quot;);\nScriptRuntime py = Python.CreateRuntime();\ndynamic random = py.UseFile(&quot;random.py&quot;);\nConsole.WriteLine(&quot;random.py loaded.&quot;);\n</code></pre><pre><code class=\"lang-vb\" name=\"VbDynamicWalkthroughIronPython#2\">&#39; Set the current directory to the IronPython libraries.\nMy.Computer.FileSystem.CurrentDirectory = \n   My.Computer.FileSystem.SpecialDirectories.ProgramFiles &amp;\n   &quot;\\IronPython 2.6 for .NET 4.0\\Lib&quot;\n\n&#39; Create an instance of the random.py IronPython library.\nConsole.WriteLine(&quot;Loading random.py&quot;)\nDim py = Python.CreateRuntime()\nDim random As Object = py.UseFile(&quot;random.py&quot;)\nConsole.WriteLine(&quot;random.py loaded.&quot;)\n</code></pre></li>\n<li><p>After the code to load the random.py module, add the following code to create an array of integers. The array is passed to the <code>shuffle</code> method of the random.py module, which randomly sorts the values in the array.  </p>\n<pre><code class=\"lang-cs\" name=\"VbDynamicWalkthroughIronPython#3\">// Initialize an enumerable set of integers.\nint[] items = Enumerable.Range(1, 7).ToArray();\n\n// Randomly shuffle the array of integers by using IronPython.\nfor (int i = 0; i &lt; 5; i++)\n{\n    random.shuffle(items);\n    foreach (int item in items)\n    {\n        Console.WriteLine(item);\n    }\n    Console.WriteLine(&quot;-------------------&quot;);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"VbDynamicWalkthroughIronPython#3\">&#39; Initialize an enumerable set of integers.\nDim items = Enumerable.Range(1, 7).ToArray()\n\n&#39; Randomly shuffle the array of integers by using IronPython.\nFor i = 0 To 4\n    random.shuffle(items)\n    For Each item In items\n        Console.WriteLine(item)\n    Next\n    Console.WriteLine(&quot;-------------------&quot;)\nNext\n</code></pre></li>\n<li><p>Save the file and press CTRL+F5 to build and run the application.  </p>\n</li>\n</ol>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../api/system.dynamic\" data-linktype=\"relative-path\">System.Dynamic</a><br> <a class=\"xref\" href=\"../../../../api/system.dynamic.dynamicobject\" data-linktype=\"relative-path\">System.Dynamic.DynamicObject</a><br> <a href=\"using-type-dynamic\" data-linktype=\"relative-path\">Using Type dynamic</a><br> <a href=\"../../../visual-basic/programming-guide/language-features/early-late-binding/index\" data-linktype=\"relative-path\">Early and Late Binding</a><br> <a href=\"../../language-reference/keywords/dynamic\" data-linktype=\"relative-path\">dynamic</a><br> <a href=\"http://go.microsoft.com/fwlink/?LinkId=230895\" data-linktype=\"external\">Implementing Dynamic Interfaces (external blog)</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"568f1645-1305-4906-8625-5d77af81e04f\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"22\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/0a5d76c154aeb9b749c9c3fc5ad0962e93754a62/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md\">\r\n<meta name=\"document_id\" content=\"5dc72bcc-c130-55cf-f97d-131f7a70224c\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic) | Microsoft Docs","ms.assetid":"568f1645-1305-4906-8625-5d77af81e04f","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":22,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["dynamic objects [Visual Basic]","dynamic objects","dynamic objects [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Reorganizing the VB TOC (#1348)","commit_sha":"0a5d76c154aeb9b749c9c3fc5ad0962e93754a62","commit_date":"2017-02-14 10:22:48 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/0a5d76c154aeb9b749c9c3fc5ad0962e93754a62/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md","document_id":"5dc72bcc-c130-55cf-f97d-131f7a70224c","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects","toc_asset_id":"articles/csharp/programming-guide/types/toc.json","toc_rel":"toc.json","_op_ogTitle":"Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":2400,"_op_rawTitle":"<h1 id=\"walkthrough-creating-and-using-dynamic-objects-c-and-visual-basic\" sourcefile=\"docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md\" sourcestartlinenumber=\"38\" sourceendlinenumber=\"38\">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects","fileRelativePath":"articles/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.html"},"themesRelativePathToOutputRoot":"_themes/"}