{"content":"<div><div class=\"content\">\n<p>In an unsafe context, a type may be a pointer type, a value type, or a reference type. A pointer type declaration takes one of the following forms:  </p>\n<pre class=\"loading\"><code>type* identifier;  \nvoid* identifier; //allowed but not recommended  \n</code></pre><p> Any of the following types may be a pointer type:  </p>\n<ul>\n<li><p><a href=\"../../language-reference/keywords/sbyte\" data-linktype=\"relative-path\">sbyte</a>, <a href=\"../../language-reference/keywords/byte\" data-linktype=\"relative-path\">byte</a>, <a href=\"../../language-reference/keywords/short\" data-linktype=\"relative-path\">short</a>, <a href=\"../../language-reference/keywords/ushort\" data-linktype=\"relative-path\">ushort</a>, <a href=\"../../language-reference/keywords/int\" data-linktype=\"relative-path\">int</a>, <a href=\"../../language-reference/keywords/uint\" data-linktype=\"relative-path\">uint</a>, <a href=\"../../language-reference/keywords/long\" data-linktype=\"relative-path\">long</a>, <a href=\"../../language-reference/keywords/ulong\" data-linktype=\"relative-path\">ulong</a>, <a href=\"../../language-reference/keywords/char\" data-linktype=\"relative-path\">char</a>, <a href=\"../../language-reference/keywords/float\" data-linktype=\"relative-path\">float</a>, <a href=\"../../language-reference/keywords/double\" data-linktype=\"relative-path\">double</a>, <a href=\"../../language-reference/keywords/decimal\" data-linktype=\"relative-path\">decimal</a>, or <a href=\"../../language-reference/keywords/bool\" data-linktype=\"relative-path\">bool</a>.  </p>\n</li>\n<li><p>Any <a href=\"../../language-reference/keywords/enum\" data-linktype=\"relative-path\">enum</a> type.  </p>\n</li>\n<li><p>Any pointer type.  </p>\n</li>\n<li><p>Any user-defined struct type that contains fields of unmanaged types only.  </p>\n<p>Pointer types do not inherit from <a href=\"../../language-reference/keywords/object\" data-linktype=\"relative-path\">object</a> and no conversions exist between pointer types and <code>object</code>. Also, boxing and unboxing do not support pointers. However, you can convert between different pointer types and between pointer types and integral types.  </p>\n<p>When you declare multiple pointers in the same declaration, the asterisk (*) is written together with the underlying type only; it is not used as a prefix to each pointer name. For example:  </p>\n</li>\n</ul>\n<pre class=\"loading\"><code>int* p1, p2, p3;   // Ok  \nint *p1, *p2, *p3;   // Invalid in C#  \n</code></pre><p> A pointer cannot point to a reference or to a <a href=\"../../language-reference/keywords/struct\" data-linktype=\"relative-path\">struct</a> that contains references, because an object reference can be garbage collected even if a pointer is pointing to it. The garbage collector does not keep track of whether an object is being pointed to by any pointer types.  </p>\n<p> The value of the pointer variable of type <code>myType*</code> is the address of a variable of type <code>myType</code>. The following are examples of pointer type declarations:  </p>\n<table>\n<thead>\n<tr>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>int* p</code></td>\n<td><code>p</code> is a pointer to an integer.</td>\n</tr>\n<tr>\n<td><code>int** p</code></td>\n<td><code>p</code> is a pointer to a pointer to an integer.</td>\n</tr>\n<tr>\n<td><code>int*[] p</code></td>\n<td><code>p</code> is a single-dimensional array of pointers to integers.</td>\n</tr>\n<tr>\n<td><code>char* p</code></td>\n<td><code>p</code> is a pointer to a char.</td>\n</tr>\n<tr>\n<td><code>void* p</code></td>\n<td><code>p</code> is a pointer to an unknown type.</td>\n</tr>\n</tbody>\n</table>\n<p> The pointer indirection operator * can be used to access the contents at the location pointed to by the pointer variable. For example, consider the following declaration:  </p>\n<pre class=\"loading\"><code>int* myVariable;  \n</code></pre><p> The expression <code>*myVariable</code> denotes the <code>int</code> variable found at the address contained in <code>myVariable</code>.  </p>\n<p> There are several examples of pointers in the topics <a href=\"../../language-reference/keywords/fixed-statement\" data-linktype=\"relative-path\">fixed Statement</a> and <a href=\"pointer-conversions\" data-linktype=\"relative-path\">Pointer Conversions</a>.  The following example shows the need for the <code>unsafe</code> keyword and the <code>fixed</code> statement, and how to increment an interior pointer.  You can paste this code into the Main function of a console application to run it. (Remember to enable unsafe code in the <strong>Project Designer</strong>; choose <strong>Project</strong>, <strong>Properties</strong> on the menu bar, and then select <strong>Allow unsafe code</strong> in the <strong>Build</strong> tab.)  </p>\n<pre class=\"loading\"><code>// Normal pointer to an object.  \nint[] a = new int[5] {10, 20, 30, 40, 50};  \n// Must be in unsafe code to use interior pointers.  \nunsafe  \n{  \n    // Must pin object on heap so that it doesn&#39;t move while using interior pointers.  \n    fixed (int* p = &amp;a[0])  \n    {  \n        // p is pinned as well as object, so create another pointer to show incrementing it.  \n        int* p2 = p;  \n        Console.WriteLine(*p2);  \n        // Incrementing p2 bumps the pointer by four bytes due to its type ...  \n        p2 += 1;  \n        Console.WriteLine(*p2);  \n        p2 += 1;  \n        Console.WriteLine(*p2);  \n        Console.WriteLine(&quot;--------&quot;);  \n        Console.WriteLine(*p);  \n        // Deferencing p and incrementing changes the value of a[0] ...  \n        *p += 1;  \n        Console.WriteLine(*p);  \n        *p += 1;  \n        Console.WriteLine(*p);  \n    }  \n}  \n\nConsole.WriteLine(&quot;--------&quot;);  \nConsole.WriteLine(a[0]);  \nConsole.ReadLine();  \n\n// Output:  \n//10  \n//20  \n//30  \n//--------  \n//10  \n//11  \n//12  \n//--------  \n//12  \n</code></pre><p> You cannot apply the indirection operator to a pointer of type <code>void*</code>. However, you can use a cast to convert a void pointer to any other pointer type, and vice versa.  </p>\n<p> A pointer can be <code>null</code>. Applying the indirection operator to a null pointer causes an implementation-defined behavior.  </p>\n<p> Be aware that passing pointers between methods can cause undefined behavior. Examples are returning a pointer to a local variable through an Out or Ref parameter or as the function result. If the pointer was set in a fixed block, the variable to which it points may no longer be fixed.  </p>\n<p> The following table lists the operators and statements that can operate on pointers in an unsafe context:  </p>\n<table>\n<thead>\n<tr>\n<th>Operator/Statement</th>\n<th>Use</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*</td>\n<td>Performs pointer indirection.</td>\n</tr>\n<tr>\n<td>-&gt;</td>\n<td>Accesses a member of a struct through a pointer.</td>\n</tr>\n<tr>\n<td>[]</td>\n<td>Indexes a pointer.</td>\n</tr>\n<tr>\n<td><code>&amp;</code></td>\n<td>Obtains the address of a variable.</td>\n</tr>\n<tr>\n<td>++ and --</td>\n<td>Increments and decrements pointers.</td>\n</tr>\n<tr>\n<td>+ and -</td>\n<td>Performs pointer arithmetic.</td>\n</tr>\n<tr>\n<td>==, !=, &lt;, &gt;, &lt;=, and &gt;=</td>\n<td>Compares pointers.</td>\n</tr>\n<tr>\n<td><code>stackalloc</code></td>\n<td>Allocates memory on the stack.</td>\n</tr>\n<tr>\n<td><code>fixed</code> statement</td>\n<td>Temporarily fixes a variable so that its address may be found.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"c-language-specification\">C# Language Specification</h2>\n<p> For more information, see the <a href=\"../../language-reference/language-specification\" data-linktype=\"relative-path\">C# Language Specification</a>. The language specification is the definitive source for C# syntax and usage.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">Unsafe Code and Pointers</a><br> <a href=\"pointer-conversions\" data-linktype=\"relative-path\">Pointer Conversions</a><br> <a href=\"pointer-expressions\" data-linktype=\"relative-path\">Pointer Expressions</a><br> <a href=\"../../language-reference/keywords/types\" data-linktype=\"relative-path\">Types</a><br> <a href=\"../../language-reference/keywords/unsafe\" data-linktype=\"relative-path\">unsafe</a><br> <a href=\"../../language-reference/keywords/fixed-statement\" data-linktype=\"relative-path\">fixed Statement</a><br> <a href=\"../../language-reference/keywords/stackalloc\" data-linktype=\"relative-path\">stackalloc</a><br> <a href=\"../types/boxing-and-unboxing\" data-linktype=\"relative-path\">Boxing and Unboxing</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"3319faf9-336d-4148-9af2-1da2579cdd1e\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"19\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/unsafe-code-pointers/pointer-types.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/unsafe-code-pointers/pointer-types.md\">\r\n<meta name=\"document_id\" content=\"fcaccd92-bea0-1a42-5383-5973f2f0b0a7\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Pointer types (C# Programming Guide) | Microsoft Docs","ms.assetid":"3319faf9-336d-4148-9af2-1da2579cdd1e","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":19,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["unsafe code [C#], pointers","pointers [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/unsafe-code-pointers/pointer-types.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/unsafe-code-pointers/pointer-types.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/unsafe-code-pointers/pointer-types.md","document_id":"fcaccd92-bea0-1a42-5383-5973f2f0b0a7","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/unsafe-code-pointers/pointer-types","toc_asset_id":"articles/csharp/programming-guide/unsafe-code-pointers/toc.json","toc_rel":"toc.json","_op_ogTitle":"Pointer types (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":765,"_op_rawTitle":"<h1 id=\"pointer-types-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/unsafe-code-pointers/pointer-types.md\" sourcestartlinenumber=\"37\" sourceendlinenumber=\"37\">Pointer types (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/unsafe-code-pointers/pointer-types","fileRelativePath":"articles/csharp/programming-guide/unsafe-code-pointers/pointer-types.html"},"themesRelativePathToOutputRoot":"_themes/"}