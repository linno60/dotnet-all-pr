{"content":"<div><div class=\"content\">\n<p>The following example uses pointers to copy bytes from one array to another.  </p>\n<p> This example uses the <a href=\"../../language-reference/keywords/unsafe\" data-linktype=\"relative-path\">unsafe</a> keyword, which enables you to use pointers in the <code>Copy</code> method. The <a href=\"../../language-reference/keywords/fixed-statement\" data-linktype=\"relative-path\">fixed</a> statement is used to declare pointers to the source and destination arrays. This <em>pins</em> the location of the source and destination arrays in memory so that they will not be moved by garbage collection. The memory blocks for the arrays are unpinned when the <code>fixed</code> block is completed. Because the <code>Copy</code> method in this example uses the <code>unsafe</code> keyword, it must be compiled with the <strong>/unsafe</strong> compiler option. To set the option in Visual Studio, right-click the project name, and then click <strong>Properties</strong>. On the <strong>Build</strong> tab, select <strong>Allow unsafe code</strong>.  </p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"lang-cs\" name=\"csProgGuidePointers#3\">// compile with: /unsafe\n</code></pre><pre><code class=\"lang-cs\" name=\"csProgGuidePointers#18\">class TestCopy\n{\n    // The unsafe keyword allows pointers to be used in the following method.\n\n    static unsafe void Copy(byte[] source, int sourceOffset, byte[] target,\n        int targetOffset, int count)\n    {\n        // If either array is not instantiated, you cannot complete the copy.\n        if ((source == null) || (target == null))\n        {\n            throw new System.ArgumentException();\n        }\n\n        // If either offset, or the number of bytes to copy, is negative, you\n        // cannot complete the copy.\n        if ((sourceOffset &lt; 0) || (targetOffset &lt; 0) || (count &lt; 0))\n        {\n            throw new System.ArgumentException();\n        }\n\n        // If the number of bytes from the offset to the end of the array is \n        // less than the number of bytes you want to copy, you cannot complete\n        // the copy. \n        if ((source.Length - sourceOffset &lt; count) ||\n            (target.Length - targetOffset &lt; count))\n        {\n            throw new System.ArgumentException();\n        }\n\n        // The following fixed statement pins the location of the source and\n        // target objects in memory so that they will not be moved by garbage\n        // collection.\n        fixed (byte* pSource = source, pTarget = target)\n        {\n            // Set the starting points in source and target for the copying.\n            byte* ps = pSource + sourceOffset;\n            byte* pt = pTarget + targetOffset;\n\n            // Copy the specified number of bytes from source to target.\n            for (int i = 0; i &lt; count; i++)\n            {\n                *pt = *ps;\n                pt++;\n                ps++;\n            }\n        }\n    }\n\n    static void Main()\n    {\n        // Create two arrays of the same length.\n        int length = 100;\n        byte[] byteArray1 = new byte[length];\n        byte[] byteArray2 = new byte[length];\n\n        // Fill byteArray1 with 0 - 99.\n        for (int i = 0; i &lt; length; ++i)\n        {\n            byteArray1[i] = (byte)i;\n        }\n\n        // Display the first 10 elements in byteArray1.\n        System.Console.WriteLine(&quot;The first 10 elements of the original are:&quot;);\n        for (int i = 0; i &lt; 10; ++i)\n        {\n            System.Console.Write(byteArray1[i] + &quot; &quot;);\n        }\n        System.Console.WriteLine(&quot;\\n&quot;);\n\n        // Copy the contents of byteArray1 to byteArray2.\n        Copy(byteArray1, 0, byteArray2, 0, length);\n\n        // Display the first 10 elements in the copy, byteArray2.\n        System.Console.WriteLine(&quot;The first 10 elements of the copy are:&quot;);\n        for (int i = 0; i &lt; 10; ++i)\n        {\n            System.Console.Write(byteArray2[i] + &quot; &quot;);\n        }\n        System.Console.WriteLine(&quot;\\n&quot;);\n\n        // Copy the contents of the last 10 elements of byteArray1 to the \n        // beginning of byteArray2.\n        // The offset specifies where the copying begins in the source array.\n        int offset = length - 10;\n        Copy(byteArray1, offset, byteArray2, 0, length - offset);\n\n        // Display the first 10 elements in the copy, byteArray2.\n        System.Console.WriteLine(&quot;The first 10 elements of the copy are:&quot;);\n        for (int i = 0; i &lt; 10; ++i)\n        {\n            System.Console.Write(byteArray2[i] + &quot; &quot;);\n        }\n        System.Console.WriteLine(&quot;\\n&quot;);\n    }\n}\n/* Output:\n    The first 10 elements of the original are:\n    0 1 2 3 4 5 6 7 8 9\n\n    The first 10 elements of the copy are:\n    0 1 2 3 4 5 6 7 8 9\n\n    The first 10 elements of the copy are:\n    90 91 92 93 94 95 96 97 98 99\n*/\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">Unsafe Code and Pointers</a><br> <a href=\"../../language-reference/compiler-options/unsafe-compiler-option\" data-linktype=\"relative-path\">/unsafe (C# Compiler Options)</a><br> <a href=\"../../../standard/garbagecollection/index\" data-linktype=\"relative-path\">Garbage Collection</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"ec16fbb4-a24e-45f5-a763-9499d3fabe0a\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"21\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/unsafe-code-pointers/how-to-use-pointers-to-copy-an-array-of-bytes.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/unsafe-code-pointers/how-to-use-pointers-to-copy-an-array-of-bytes.md\">\r\n<meta name=\"document_id\" content=\"5379b753-a13f-6d31-6a17-9383a0a10992\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"How to: Use Pointers to Copy an Array of Bytes  (C# Programming Guide) | Microsoft Docs","ms.assetid":"ec16fbb4-a24e-45f5-a763-9499d3fabe0a","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":21,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["byte arrays [C#]","arrays [C#], byte","pointers [C#], to copy bytes"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/unsafe-code-pointers/how-to-use-pointers-to-copy-an-array-of-bytes.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/unsafe-code-pointers/how-to-use-pointers-to-copy-an-array-of-bytes.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/unsafe-code-pointers/how-to-use-pointers-to-copy-an-array-of-bytes.md","document_id":"5379b753-a13f-6d31-6a17-9383a0a10992","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/unsafe-code-pointers/how-to-use-pointers-to-copy-an-array-of-bytes","toc_asset_id":"articles/csharp/programming-guide/unsafe-code-pointers/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Use Pointers to Copy an Array of Bytes  (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":634,"_op_rawTitle":"<h1 id=\"how-to-use-pointers-to-copy-an-array-of-bytes--c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/unsafe-code-pointers/how-to-use-pointers-to-copy-an-array-of-bytes.md\" sourcestartlinenumber=\"38\" sourceendlinenumber=\"38\">How to: Use Pointers to Copy an Array of Bytes  (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/unsafe-code-pointers/how-to-use-pointers-to-copy-an-array-of-bytes","fileRelativePath":"articles/csharp/programming-guide/unsafe-code-pointers/how-to-use-pointers-to-copy-an-array-of-bytes.html"},"themesRelativePathToOutputRoot":"_themes/"}