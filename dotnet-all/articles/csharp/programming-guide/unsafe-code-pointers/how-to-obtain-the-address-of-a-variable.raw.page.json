{"content":"<div><div class=\"content\">\n<p>To obtain the address of a unary expression, which evaluates to a fixed variable, use the address-of operator:  </p>\n<pre class=\"loading\"><code>int number;  \nint* p = &amp;number; //address-of operator &amp;  \n</code></pre><p> The address-of operator can only be applied to a variable. If the variable is a moveable variable, you can use the <a href=\"../../language-reference/keywords/fixed-statement\" data-linktype=\"relative-path\">fixed statement</a> to temporarily fix the variable before obtaining its address.  </p>\n<p> It is your responsibility to ensure that the variable is initialized. The compiler will not issue an error message if the variable is not initialized.  </p>\n<p> You cannot get the address of a constant or a value.  </p>\n<h2 id=\"example\">Example</h2>\n<p> In this example, a pointer to <code>int</code>, <code>p</code>, is declared and assigned the address of an integer variable, <code>number</code>. The variable <code>number</code> is initialized as a result of the assignment to *p. If you make this assignment statement a comment, the initialization of the variable <code>number</code> will be removed, but no compile-time error is issued. Notice the use of the <a href=\"how-to-access-a-member-with-a-pointer\" data-linktype=\"relative-path\">Member Access</a> operator <code>-&gt;</code> to obtain and display the address stored in the pointer.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuidePointers#7\">// compile with: /unsafe\n</code></pre><pre><code class=\"lang-cs\" name=\"csProgGuidePointers#8\">class AddressOfOperator\n{\n    static void Main()\n    {\n        int number;\n\n        unsafe \n        {\n            // Assign the address of number to a pointer:\n            int* p = &amp;number;\n\n            // Commenting the following statement will remove the\n            // initialization of number.\n            *p = 0xffff;\n\n            // Print the value of *p:\n            System.Console.WriteLine(&quot;Value at the location pointed to by p: {0:X}&quot;, *p);\n\n            // Print the address stored in p:\n            System.Console.WriteLine(&quot;The address stored in p: {0}&quot;, (int)p);\n        }\n\n        // Print the value of the variable number:\n        System.Console.WriteLine(&quot;Value of the variable number: {0:X}&quot;, number);\n\n        System.Console.ReadKey();\n    }\n}\n/* Output:\n        Value at the location pointed to by p: FFFF\n        The address stored in p: 2420904\n        Value of the variable number: FFFF\n*/\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"pointer-expressions\" data-linktype=\"relative-path\">Pointer Expressions</a><br> <a href=\"pointer-types\" data-linktype=\"relative-path\">Pointer types</a><br> <a href=\"../../language-reference/keywords/types\" data-linktype=\"relative-path\">Types</a><br> <a href=\"../../language-reference/keywords/unsafe\" data-linktype=\"relative-path\">unsafe</a><br> <a href=\"../../language-reference/keywords/fixed-statement\" data-linktype=\"relative-path\">fixed Statement</a><br> <a href=\"../../language-reference/keywords/stackalloc\" data-linktype=\"relative-path\">stackalloc</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"44fe2cd9-a64f-4ef5-be2a-09ce807c0182\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"19\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/unsafe-code-pointers/how-to-obtain-the-address-of-a-variable.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/unsafe-code-pointers/how-to-obtain-the-address-of-a-variable.md\">\r\n<meta name=\"document_id\" content=\"c011e817-1f90-7e76-3928-0462d6b795fb\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"How to: Obtain the Address of a Variable (C# Programming Guide) | Microsoft Docs","ms.assetid":"44fe2cd9-a64f-4ef5-be2a-09ce807c0182","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":19,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["variables [C#], address of","pointers [C#], & operator","pointer expressions [C#], address-of operator"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/unsafe-code-pointers/how-to-obtain-the-address-of-a-variable.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/unsafe-code-pointers/how-to-obtain-the-address-of-a-variable.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/unsafe-code-pointers/how-to-obtain-the-address-of-a-variable.md","document_id":"c011e817-1f90-7e76-3928-0462d6b795fb","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/unsafe-code-pointers/how-to-obtain-the-address-of-a-variable","toc_asset_id":"articles/csharp/programming-guide/unsafe-code-pointers/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Obtain the Address of a Variable (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":300,"_op_rawTitle":"<h1 id=\"how-to-obtain-the-address-of-a-variable-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/unsafe-code-pointers/how-to-obtain-the-address-of-a-variable.md\" sourcestartlinenumber=\"38\" sourceendlinenumber=\"38\">How to: Obtain the Address of a Variable (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/unsafe-code-pointers/how-to-obtain-the-address-of-a-variable","fileRelativePath":"articles/csharp/programming-guide/unsafe-code-pointers/how-to-obtain-the-address-of-a-variable.html"},"themesRelativePathToOutputRoot":"_themes/"}