{"content":"<div><div class=\"content\">\n<p>Namespaces are heavily used within C# programs in two ways. Firstly, the .NET Framework classes use namespaces to organize its many classes. Secondly, declaring your own namespaces can help control the scope of class and method names in larger programming projects.  </p>\n<h2 id=\"accessing-namespaces\">Accessing Namespaces</h2>\n<p> Most C# applications begin with a section of <code>using</code> directives. This section lists the namespaces that the application will be using frequently, and saves the programmer from specifying a fully qualified name every time that a method that is contained within is used.  </p>\n<p> For example, by including the line:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuide#1\">using System;\n</code></pre><p> At the start of a program, the programmer can use the code:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuide#31\">Console.WriteLine(&quot;Hello, World!&quot;);\n</code></pre><p> Instead of:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuide#30\">System.Console.WriteLine(&quot;Hello, World!&quot;);\n</code></pre><h2 id=\"namespace-aliases\">Namespace Aliases</h2>\n<p> The <a href=\"../../language-reference/keywords/using-directive\" data-linktype=\"relative-path\">using Directive</a> can also be used to create an alias for a <a href=\"../../language-reference/keywords/namespace\" data-linktype=\"relative-path\">namespace</a>. For example, if you are using a previously written namespace that contains nested namespaces, you might want to declare an alias to provide a shorthand way of referencing one in particular, as in the following example:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideNamespaces#7\">using Co = Company.Proj.Nested;  // define an alias to represent a namespace\n</code></pre><h2 id=\"using-namespaces-to-control-scope\">Using Namespaces to control scope</h2>\n<p> The <code>namespace</code> keyword is used to declare a scope. The ability to create scopes within your project helps organize code and lets you create globally-unique types. In the following example, a class titled <code>SampleClass</code> is defined in two namespaces, one nested inside the other. The <a href=\"../../language-reference/operators/member-access-operator\" data-linktype=\"relative-path\">. Operator</a> is used to differentiate which method gets called.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideNamespaces#8\">namespace SampleNamespace\n{\n    class SampleClass\n    {\n        public void SampleMethod()\n        {\n            System.Console.WriteLine(\n              &quot;SampleMethod inside SampleNamespace&quot;);\n        }\n    }\n\n    // Create a nested namespace, and define another class.\n    namespace NestedNamespace\n    {\n        class SampleClass\n        {\n            public void SampleMethod()\n            {\n                System.Console.WriteLine(\n                  &quot;SampleMethod inside NestedNamespace&quot;);\n            }\n        }\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Displays &quot;SampleMethod inside SampleNamespace.&quot;\n            SampleClass outer = new SampleClass();\n            outer.SampleMethod();\n\n            // Displays &quot;SampleMethod inside SampleNamespace.&quot;\n            SampleNamespace.SampleClass outer2 = new SampleNamespace.SampleClass();\n            outer2.SampleMethod();\n\n            // Displays &quot;SampleMethod inside NestedNamespace.&quot;\n            NestedNamespace.SampleClass inner = new NestedNamespace.SampleClass();\n            inner.SampleMethod();\n        }\n    }\n}\n</code></pre><h2 id=\"fully-qualified-names\">Fully Qualified Names</h2>\n<p> Namespaces and types have unique titles described by fully qualified names that indicate a logical hierarchy. For example, the statement <code>A.B</code> implies that <code>A</code> is the name of the namespace or type, and <code>B</code> is nested inside it.  </p>\n<p> In the following example, there are nested classes and namespaces. The fully qualified name is indicated as a comment following each entity.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideNamespaces#9\">namespace N1     // N1\n{\n    class C1      // N1.C1\n    {\n        class C2   // N1.C1.C2\n        {\n        }\n    }\n    namespace N2  // N1.N2\n    {\n        class C2   // N1.N2.C2\n        {\n        }\n    }\n}\n</code></pre><p> In the previous code segment:  </p>\n<ul>\n<li><p>The namespace <code>N1</code> is a member of the global namespace. Its fully qualified name is <code>N1</code>.  </p>\n</li>\n<li><p>The namespace <code>N2</code> is a member of <code>N1</code>. Its fully qualified name is <code>N1.N2</code>.  </p>\n</li>\n<li><p>The class <code>C1</code> is a member of <code>N1</code>. Its fully qualified name is <code>N1.C1</code>.  </p>\n</li>\n<li><p>The class name <code>C2</code> is used two times in this code. However, the fully qualified names are unique. The first instance of <code>C2</code> is declared inside <code>C1</code>; therefore, its fully qualified name is: <code>N1.C1.C2</code>. The second instance of <code>C2</code> is declared inside a namespace <code>N2</code>; therefore, its fully qualified name is <code>N1.N2.C2</code>.  </p>\n<p>Using the previous code segment, you can add a new class member, <code>C3</code>, to the namespace <code>N1.N2</code> as follows:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideNamespaces#10\">namespace N1.N2\n{\n    class C3   // N1.N2.C3\n    {\n    }\n}\n</code></pre><p>In general, use <code>::</code> to reference a namespace alias or <code>global::</code> to reference the global namespace and <code>.</code> to qualify types or members.  </p>\n<p>It is an error to use <code>::</code> with an alias that references a type instead of a namespace. For example:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideNamespaces#11\">using Alias = System.Console;\n</code></pre><pre><code class=\"lang-cs\" name=\"csProgGuideNamespaces#12\">class TestClass\n{\n    static void Main()\n    {\n        // Error\n        //Alias::WriteLine(&quot;Hi&quot;);\n\n        // OK\n        Alias.WriteLine(&quot;Hi&quot;);\n    }\n}\n</code></pre><p>Remember that the word <code>global</code> is not a predefined alias; therefore, <code>global.X</code> does not have any special meaning. It acquires a special meaning only when it is used with <code>::</code>.  </p>\n<p>Compiler warning CS0440 is generated if you define an alias named global because <code>global::</code> always references the global namespace and not an alias. For example, the following line generates the warning:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideNamespaces#13\">using global = System.Collections;   // Warning\n</code></pre><p>Using <code>::</code> with aliases is a good idea and protects against the unexpected introduction of additional types. For example, consider this example:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideNamespaces#14\">using Alias = System;\n</code></pre><pre><code class=\"lang-cs\" name=\"csProgGuideNamespaces#15\">namespace Library\n{\n    public class C : Alias.Exception { }\n}\n</code></pre><p>This works, but if a type named <code>Alias</code> were to subsequently be introduced, <code>Alias.</code> would bind to that type instead. Using <code>Alias::Exception</code> insures that <code>Alias</code> is treated as a namespace alias and not mistaken for a type.  </p>\n<p>See the topic <a href=\"how-to-use-the-global-namespace-alias\" data-linktype=\"relative-path\">How to: Use the Global Namespace Alias</a> for more information regarding the <code>global</code> alias.  </p>\n</li>\n</ul>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">Namespaces</a><br> <a href=\"../../language-reference/keywords/namespace-keywords\" data-linktype=\"relative-path\">Namespace Keywords</a><br> <a href=\"../../language-reference/operators/member-access-operator\" data-linktype=\"relative-path\">. Operator</a><br> <a href=\"../../language-reference/operators/namespace-alias-qualifer\" data-linktype=\"relative-path\">:: Operator</a><br> <a href=\"../../language-reference/keywords/extern\" data-linktype=\"relative-path\">extern</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"ms.assetid\" content=\"1fe8bf39-addc-438a-bd9e-86410e32381d\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"26\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/namespaces/using-namespaces.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/namespaces/using-namespaces.md\">\r\n<meta name=\"document_id\" content=\"558eba75-4849-dd10-0d42-120ad772ef18\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","uhfHeaderId":"MSDocsHeader-DotNet","title":"Using Namespaces (C# Programming Guide) | Microsoft Docs","ms.assetid":"1fe8bf39-addc-438a-bd9e-86410e32381d","f1_keywords":["cs.names"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":26,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["fully qualified names [C#]","namespaces [C#], how to use"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/namespaces/using-namespaces.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/namespaces/using-namespaces.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/namespaces/using-namespaces.md","document_id":"558eba75-4849-dd10-0d42-120ad772ef18","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/namespaces/using-namespaces","toc_asset_id":"articles/csharp/programming-guide/namespaces/toc.json","toc_rel":"toc.json","_op_ogTitle":"Using Namespaces (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":769,"_op_rawTitle":"<h1 id=\"using-namespaces-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/namespaces/using-namespaces.md\" sourcestartlinenumber=\"39\" sourceendlinenumber=\"39\">Using Namespaces (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/namespaces/using-namespaces","fileRelativePath":"articles/csharp/programming-guide/namespaces/using-namespaces.html"},"themesRelativePathToOutputRoot":"_themes/"}