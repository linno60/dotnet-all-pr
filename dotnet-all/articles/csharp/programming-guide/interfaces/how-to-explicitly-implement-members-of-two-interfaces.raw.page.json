{"content":"<div><div class=\"content\">\n<p>Explicit <a href=\"../../language-reference/keywords/interface\" data-linktype=\"relative-path\">interface</a> implementation also allows the programmer to implement two interfaces that have the same member names and give each interface member a separate implementation. This example displays the dimensions of a box in both metric and English units. The Box <a href=\"../../language-reference/keywords/class\" data-linktype=\"relative-path\">class</a> implements two interfaces IEnglishDimensions and IMetricDimensions, which represent the different measurement systems. Both interfaces have identical member names, Length and Width.  </p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"lang-cs\" name=\"csProgGuideInheritance#9\">// Declare the English units interface:\ninterface IEnglishDimensions\n{\n    float Length();\n    float Width();\n}\n\n// Declare the metric units interface:\ninterface IMetricDimensions\n{\n    float Length();\n    float Width();\n}\n\n// Declare the Box class that implements the two interfaces:\n// IEnglishDimensions and IMetricDimensions:\nclass Box : IEnglishDimensions, IMetricDimensions\n{\n    float lengthInches;\n    float widthInches;\n\n    public Box(float length, float width)\n    {\n        lengthInches = length;\n        widthInches = width;\n    }\n\n    // Explicitly implement the members of IEnglishDimensions:\n    float IEnglishDimensions.Length()\n    {\n        return lengthInches;\n    }\n\n    float IEnglishDimensions.Width()\n    {\n        return widthInches;\n    }\n\n    // Explicitly implement the members of IMetricDimensions:\n    float IMetricDimensions.Length()\n    {\n        return lengthInches * 2.54f;\n    }\n\n    float IMetricDimensions.Width()\n    {\n        return widthInches * 2.54f;\n    }\n\n    static void Main()\n    {\n        // Declare a class instance box1:\n        Box box1 = new Box(30.0f, 20.0f);\n\n        // Declare an instance of the English units interface:\n        IEnglishDimensions eDimensions = (IEnglishDimensions)box1;\n\n        // Declare an instance of the metric units interface:\n        IMetricDimensions mDimensions = (IMetricDimensions)box1;\n\n        // Print dimensions in English units:\n        System.Console.WriteLine(&quot;Length(in): {0}&quot;, eDimensions.Length());\n        System.Console.WriteLine(&quot;Width (in): {0}&quot;, eDimensions.Width());\n\n        // Print dimensions in metric units:\n        System.Console.WriteLine(&quot;Length(cm): {0}&quot;, mDimensions.Length());\n        System.Console.WriteLine(&quot;Width (cm): {0}&quot;, mDimensions.Width());\n    }\n}\n/* Output:\n    Length(in): 30\n    Width (in): 20\n    Length(cm): 76.2\n    Width (cm): 50.8\n*/\n</code></pre><h2 id=\"robust-programming\">Robust Programming</h2>\n<p> If you want to make the default measurements in English units, implement the methods Length and Width normally, and explicitly implement the Length and Width methods from the IMetricDimensions interface:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideInheritance#10\">// Normal implementation:\npublic float Length()\n{\n    return lengthInches;\n}\npublic float Width()\n{\n    return widthInches;\n}\n\n// Explicit implementation:\nfloat IMetricDimensions.Length()\n{\n    return lengthInches * 2.54f;\n}\nfloat IMetricDimensions.Width()\n{\n    return widthInches * 2.54f;\n}\n</code></pre><p> In this case, you can access the English units from the class instance and access the metric units from the interface instance:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideInheritance#11\">public static void Test()\n{\n    Box box1 = new Box(30.0f, 20.0f);\n    IMetricDimensions mDimensions = (IMetricDimensions)box1;\n\n    System.Console.WriteLine(&quot;Length(in): {0}&quot;, box1.Length());\n    System.Console.WriteLine(&quot;Width (in): {0}&quot;, box1.Width());\n    System.Console.WriteLine(&quot;Length(cm): {0}&quot;, mDimensions.Length());\n    System.Console.WriteLine(&quot;Width (cm): {0}&quot;, mDimensions.Width());\n}\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"../classes-and-structs/index\" data-linktype=\"relative-path\">Classes and Structs</a><br> <a href=\"index\" data-linktype=\"relative-path\">Interfaces</a><br> <a href=\"how-to-explicitly-implement-interface-members\" data-linktype=\"relative-path\">How to: Explicitly Implement Interface Members</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"8b402ddc-dff9-4869-89cb-d718c764e68e\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"15\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/interfaces/how-to-explicitly-implement-members-of-two-interfaces.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/interfaces/how-to-explicitly-implement-members-of-two-interfaces.md\">\r\n<meta name=\"document_id\" content=\"ef1978c3-4370-6afa-1740-ea83980bd435\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"How to: Explicitly Implement Members of Two Interfaces (C# Programming Guide) | Microsoft Docs","ms.assetid":"8b402ddc-dff9-4869-89cb-d718c764e68e","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":15,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["inheritance [C#], explicitly implementing interface members","interfaces [C#], explicitly implementing with inheritance"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/interfaces/how-to-explicitly-implement-members-of-two-interfaces.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/interfaces/how-to-explicitly-implement-members-of-two-interfaces.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/interfaces/how-to-explicitly-implement-members-of-two-interfaces.md","document_id":"ef1978c3-4370-6afa-1740-ea83980bd435","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/interfaces/how-to-explicitly-implement-members-of-two-interfaces","toc_asset_id":"articles/csharp/programming-guide/interfaces/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Explicitly Implement Members of Two Interfaces (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":388,"_op_rawTitle":"<h1 id=\"how-to-explicitly-implement-members-of-two-interfaces-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/interfaces/how-to-explicitly-implement-members-of-two-interfaces.md\" sourcestartlinenumber=\"37\" sourceendlinenumber=\"37\">How to: Explicitly Implement Members of Two Interfaces (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/interfaces/how-to-explicitly-implement-members-of-two-interfaces","fileRelativePath":"articles/csharp/programming-guide/interfaces/how-to-explicitly-implement-members-of-two-interfaces.html"},"themesRelativePathToOutputRoot":"_themes/"}