{"content":"<div><div class=\"content\">\n<p>You can use <code>implicit</code> conversion operators, which are easier to use, or <code>explicit</code> conversion operators, which clearly indicate to anyone reading the code that you&#39;re converting a type. This topic demonstrates both types of conversion operator.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For information about simple type conversions, see <a href=\"../types/how-to-convert-a-string-to-a-number\" data-linktype=\"relative-path\">How to: Convert a String to a Number</a>, <a href=\"../types/how-to-convert-a-byte-array-to-an-int\" data-linktype=\"relative-path\">How to: Convert a byte Array to an int</a>, <a href=\"../types/how-to-convert-between-hexadecimal-strings-and-numeric-types\" data-linktype=\"relative-path\">How to: Convert Between Hexadecimal Strings and Numeric Types</a>, or <a class=\"xref\" href=\"../../../../api/system.convert\" data-linktype=\"relative-path\">Convert</a>.  </p>\n</div>\n<h2 id=\"example\">Example</h2>\n<p> This is an example of an explicit conversion operator. This operator converts from the type <a class=\"xref\" href=\"../../../../api/system.byte\" data-linktype=\"relative-path\">Byte</a> to a value type called <code>Digit</code>. Because not all bytes can be converted to a digit, the conversion is explicit, meaning that a cast must be used, as shown in the <code>Main</code> method.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideStatements#11\">        struct Digit\n        {\n            byte value;\n\n            public Digit(byte value)  //constructor\n            {\n                if (value &gt; 9)\n                {\n                    throw new System.ArgumentException();\n                }\n                this.value = value;\n            }\n\n            public static explicit operator Digit(byte b)  // explicit byte to digit conversion operator\n            {\n                Digit d = new Digit(b);  // explicit conversion\n\n                System.Console.WriteLine(&quot;Conversion occurred.&quot;);\n                return d;\n            }\n        }\n\n        class TestExplicitConversion\n        {\n            static void Main()\n            {\n                try\n                {\n                    byte b = 3;\n                    Digit d = (Digit)b;  // explicit conversion\n                }\n                catch (System.Exception e)\n                {\n                    System.Console.WriteLine(&quot;{0} Exception caught.&quot;, e);\n                }\n            }\n        }\n        // Output: Conversion occurred.\n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> This example demonstrates an implicit conversion operator by defining a conversion operator that undoes what the previous example did: it converts from a value class called <code>Digit</code> to the integral <a class=\"xref\" href=\"../../../../api/system.byte\" data-linktype=\"relative-path\">Byte</a> type. Because any digit can be converted to a <a class=\"xref\" href=\"../../../../api/system.byte\" data-linktype=\"relative-path\">Byte</a>, there&#39;s no need to force users to be explicit about the conversion.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideStatements#12\">        struct Digit\n        {\n            byte value;\n\n            public Digit(byte value)  //constructor\n            {\n                if (value &gt; 9)\n                {\n                    throw new System.ArgumentException();\n                }\n                this.value = value;\n            }\n\n            public static implicit operator byte(Digit d)  // implicit digit to byte conversion operator\n            {\n                System.Console.WriteLine(&quot;conversion occurred&quot;);\n                return d.value;  // implicit conversion\n            }\n        }\n\n        class TestImplicitConversion\n        {\n            static void Main()\n            {\n                Digit d = new Digit(3);\n                byte b = d;  // implicit conversion -- no cast needed\n            }\n        }\n        // Output: Conversion occurred.\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../../language-reference/index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"conversion-operators\" data-linktype=\"relative-path\">Conversion Operators</a><br> <a href=\"../../language-reference/keywords/is\" data-linktype=\"relative-path\">is</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"caf36e89-c6c0-4b87-9f9e-85780a45c9a4\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"20\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/statements-expressions-operators/using-conversion-operators.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/statements-expressions-operators/using-conversion-operators.md\">\r\n<meta name=\"document_id\" content=\"8c6194d3-dc2c-8ec5-7e8a-ab1b147a3cd2\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Using Conversion Operators (C# Programming Guide) | Microsoft Docs","ms.assetid":"caf36e89-c6c0-4b87-9f9e-85780a45c9a4","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":20,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["conversions [C#], operators","conversion operators [C#]","operators [C#], conversion","user-defined conversions [C#]","implicit conversion operators [C#]","explicit conversion operators [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/statements-expressions-operators/using-conversion-operators.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/statements-expressions-operators/using-conversion-operators.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/statements-expressions-operators/using-conversion-operators.md","document_id":"8c6194d3-dc2c-8ec5-7e8a-ab1b147a3cd2","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/statements-expressions-operators/using-conversion-operators","toc_asset_id":"articles/csharp/programming-guide/statements-expressions-operators/toc.json","toc_rel":"toc.json","_op_ogTitle":"Using Conversion Operators (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":344,"_op_rawTitle":"<h1 id=\"using-conversion-operators-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/statements-expressions-operators/using-conversion-operators.md\" sourcestartlinenumber=\"41\" sourceendlinenumber=\"41\">Using Conversion Operators (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/statements-expressions-operators/using-conversion-operators","fileRelativePath":"articles/csharp/programming-guide/statements-expressions-operators/using-conversion-operators.html"},"themesRelativePathToOutputRoot":"_themes/"}