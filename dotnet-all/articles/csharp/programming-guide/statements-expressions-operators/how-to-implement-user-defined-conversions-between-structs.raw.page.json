{"content":"<div><div class=\"content\">\n<p>This example defines two structs, <code>RomanNumeral</code> and <code>BinaryNumeral</code>, and demonstrates conversions between them.  </p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"lang-cs\" name=\"csProgGuideStatements#13\">        struct RomanNumeral\n        {\n            private int value;\n\n            public RomanNumeral(int value)  //constructor\n            {\n                this.value = value;\n            }\n\n            static public implicit operator RomanNumeral(int value)\n            {\n                return new RomanNumeral(value);\n            }\n\n            static public implicit operator RomanNumeral(BinaryNumeral binary)\n            {\n                return new RomanNumeral((int)binary);\n            }\n\n            static public explicit operator int(RomanNumeral roman)\n            {\n                return roman.value;\n            }\n\n            static public implicit operator string(RomanNumeral roman)\n            {\n                return (&quot;Conversion to string is not implemented&quot;);\n            }\n        }\n\n        struct BinaryNumeral\n        {\n            private int value;\n\n            public BinaryNumeral(int value)  //constructor\n            {\n                this.value = value;\n            }\n\n            static public implicit operator BinaryNumeral(int value)\n            {\n                return new BinaryNumeral(value);\n            }\n\n            static public explicit operator int(BinaryNumeral binary)\n            {\n                return (binary.value);\n            }\n\n            static public implicit operator string(BinaryNumeral binary)\n            {\n                return (&quot;Conversion to string is not implemented&quot;);\n            }\n        }\n\n        class TestConversions\n        {\n            static void Main()\n            {\n                RomanNumeral roman;\n                BinaryNumeral binary;\n\n                roman = 10;\n\n                // Perform a conversion from a RomanNumeral to a BinaryNumeral:\n                binary = (BinaryNumeral)(int)roman;\n\n                // Perform a conversion from a BinaryNumeral to a RomanNumeral:\n                // No cast is required:\n                roman = binary;\n\n                System.Console.WriteLine((int)binary);\n                System.Console.WriteLine(binary);\n\n                // Keep the console window open in debug mode.\n                System.Console.WriteLine(&quot;Press any key to exit.&quot;);\n                System.Console.ReadKey();\n            }\n        }\n        /* Output:\n            10\n            Conversion not yet implemented\n        */\n</code></pre><h2 id=\"robust-programming\">Robust Programming</h2>\n<ul>\n<li><p>In the previous example, the statement:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideStatements#14\">                binary = (BinaryNumeral)(int)roman;\n</code></pre><p> performs a conversion from a <code>RomanNumeral</code> to a <code>BinaryNumeral</code>. Because there is no direct conversion from <code>RomanNumeral</code> to <code>BinaryNumeral</code>, a cast is used to convert from a <code>RomanNumeral</code> to an <code>int</code>, and another cast to convert from an <code>int</code> to a <code>BinaryNumeral</code>.  </p>\n</li>\n<li><p>Also the statement  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideStatements#15\">                roman = binary;\n</code></pre><p> performs a conversion from a <code>BinaryNumeral</code> to a <code>RomanNumeral</code>. Because <code>RomanNumeral</code> defines an implicit conversion from <code>BinaryNumeral</code>, no cast is required.  </p>\n</li>\n</ul>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../../language-reference/index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"conversion-operators\" data-linktype=\"relative-path\">Conversion Operators</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"97839aef-8fbc-40d5-9769-6b569bc2710b\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"11\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/statements-expressions-operators/how-to-implement-user-defined-conversions-between-structs.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/statements-expressions-operators/how-to-implement-user-defined-conversions-between-structs.md\">\r\n<meta name=\"document_id\" content=\"aa930496-3da7-fdbe-f577-78950b4dd5a2\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"How to: Implement User-Defined Conversions Between Structs (C# Programming Guide) | Microsoft Docs","ms.assetid":"97839aef-8fbc-40d5-9769-6b569bc2710b","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":11,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["user-defined conversions [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/statements-expressions-operators/how-to-implement-user-defined-conversions-between-structs.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/statements-expressions-operators/how-to-implement-user-defined-conversions-between-structs.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/statements-expressions-operators/how-to-implement-user-defined-conversions-between-structs.md","document_id":"aa930496-3da7-fdbe-f577-78950b4dd5a2","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/statements-expressions-operators/how-to-implement-user-defined-conversions-between-structs","toc_asset_id":"articles/csharp/programming-guide/statements-expressions-operators/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Implement User-Defined Conversions Between Structs (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":290,"_op_rawTitle":"<h1 id=\"how-to-implement-user-defined-conversions-between-structs-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/statements-expressions-operators/how-to-implement-user-defined-conversions-between-structs.md\" sourcestartlinenumber=\"36\" sourceendlinenumber=\"36\">How to: Implement User-Defined Conversions Between Structs (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/statements-expressions-operators/how-to-implement-user-defined-conversions-between-structs","fileRelativePath":"articles/csharp/programming-guide/statements-expressions-operators/how-to-implement-user-defined-conversions-between-structs.html"},"themesRelativePathToOutputRoot":"_themes/"}