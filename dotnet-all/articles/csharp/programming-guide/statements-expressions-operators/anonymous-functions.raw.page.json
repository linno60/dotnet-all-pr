{"content":"<div><div class=\"content\">\n<p>An anonymous function is an &quot;inline&quot; statement or expression that can be used wherever a delegate type is expected. You can use it to initialize a named delegate or pass it instead of a named delegate type as a method parameter.  </p>\n<p> There are two kinds of anonymous functions, which are discussed individually in the following topics:  </p>\n<ul>\n<li><p><a href=\"lambda-expressions\" data-linktype=\"relative-path\">Lambda Expressions</a>.  </p>\n</li>\n<li><p><a href=\"anonymous-methods\" data-linktype=\"relative-path\">Anonymous Methods</a>  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Lambda expressions can be bound to expression trees and also to delegates.  </p>\n</div>\n</li>\n</ul>\n<h2 id=\"the-evolution-of-delegates-in-c\">The Evolution of Delegates in C</h2>\n<p> In C# 1.0, you created an instance of a delegate by explicitly initializing it with a method that was defined elsewhere in the code. C# 2.0 introduced the concept of anonymous methods as a way to write unnamed inline statement blocks that can be executed in a delegate invocation. C# 3.0 introduced lambda expressions, which are similar in concept to anonymous methods but more expressive and concise. These two features are known collectively as <em>anonymous functions</em>. In general, applications that target version 3.5 and later of the .NET Framework should use lambda expressions.  </p>\n<p> The following example demonstrates the evolution of delegate creation from C# 1.0 to C# 3.0:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideLINQ#65\">class Test\n{\n    delegate void TestDelegate(string s);\n    static void M(string s)\n    {\n        Console.WriteLine(s);\n    }\n\n    static void Main(string[] args)\n    {\n        // Original delegate syntax required \n        // initialization with a named method.\n        TestDelegate testDelA = new TestDelegate(M);\n\n        // C# 2.0: A delegate can be initialized with\n        // inline code, called an &quot;anonymous method.&quot; This\n        // method takes a string as an input parameter.\n        TestDelegate testDelB = delegate(string s) { Console.WriteLine(s); };\n\n        // C# 3.0. A delegate can be initialized with\n        // a lambda expression. The lambda also takes a string\n        // as an input parameter (x). The type of x is inferred by the compiler.\n        TestDelegate testDelC = (x) =&gt; { Console.WriteLine(x); };\n\n        // Invoke the delegates.\n        testDelA(&quot;Hello. My name is M and I write lines.&quot;);\n        testDelB(&quot;That&#39;s nothing. I&#39;m anonymous and &quot;);\n        testDelC(&quot;I&#39;m a famous author.&quot;);\n\n        // Keep console window open in debug mode.\n        Console.WriteLine(&quot;Press any key to exit.&quot;);\n        Console.ReadKey();\n    }\n}\n/* Output:\n    Hello. My name is M and I write lines.\n    That&#39;s nothing. I&#39;m anonymous and\n    I&#39;m a famous author.\n    Press any key to exit.\n */\n</code></pre><h2 id=\"c-language-specification\">C# Language Specification</h2>\n<p>For more information, see the <a href=\"../../language-reference/language-specification\" data-linktype=\"relative-path\">C# Language Specification</a>. The language specification is the definitive source for C# syntax and usage.</p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"index\" data-linktype=\"relative-path\">Statements, Expressions, and Operators</a><br> <a href=\"lambda-expressions\" data-linktype=\"relative-path\">Lambda Expressions</a><br> <a href=\"../delegates/index\" data-linktype=\"relative-path\">Delegates</a><br> <a href=\"http://msdn.microsoft.com/library/fb1d3ed8-d5b0-4211-a71f-dd271529294b\" data-linktype=\"external\">Expression Trees</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"6ce3f04d-0c71-4728-9127-634c7e9a8365\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"14\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/statements-expressions-operators/anonymous-functions.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/statements-expressions-operators/anonymous-functions.md\">\r\n<meta name=\"document_id\" content=\"07ac50ea-3718-d75f-36c9-d075363648da\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"Anonymous Functions (C# Programming Guide) | Microsoft Docs","ms.assetid":"6ce3f04d-0c71-4728-9127-634c7e9a8365","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":14,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["lambda expressions [C#], as anonymus functions","anonymous functions [C#]","anonymous methods [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/statements-expressions-operators/anonymous-functions.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/statements-expressions-operators/anonymous-functions.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/statements-expressions-operators/anonymous-functions.md","document_id":"07ac50ea-3718-d75f-36c9-d075363648da","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/statements-expressions-operators/anonymous-functions","toc_asset_id":"articles/csharp/programming-guide/statements-expressions-operators/toc.json","toc_rel":"toc.json","_op_ogTitle":"Anonymous Functions (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":397,"_op_rawTitle":"<h1 id=\"anonymous-functions-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/statements-expressions-operators/anonymous-functions.md\" sourcestartlinenumber=\"38\" sourceendlinenumber=\"38\">Anonymous Functions (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/statements-expressions-operators/anonymous-functions","fileRelativePath":"articles/csharp/programming-guide/statements-expressions-operators/anonymous-functions.html"},"themesRelativePathToOutputRoot":"_themes/"}