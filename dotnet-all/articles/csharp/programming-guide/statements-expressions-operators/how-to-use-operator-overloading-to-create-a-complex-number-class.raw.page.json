{"content":"<div><div class=\"content\">\n<p>This example shows how you can use operator overloading to create a complex number class <code>Complex</code> that defines complex addition. The program displays the imaginary and the real parts of the numbers and the addition result using an override of the <code>ToString</code> method.  </p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"lang-cs\" name=\"csProgGuideStatements#16\">        public struct Complex\n        {\n            public int real;\n            public int imaginary;\n\n            // Constructor.\n            public Complex(int real, int imaginary)  \n            {\n                this.real = real;\n                this.imaginary = imaginary;\n            }\n\n            // Specify which operator to overload (+), \n            // the types that can be added (two Complex objects),\n            // and the return type (Complex).\n            public static Complex operator +(Complex c1, Complex c2)\n            {\n                return new Complex(c1.real + c2.real, c1.imaginary + c2.imaginary);\n            }\n\n            // Override the ToString() method to display a complex number \n            // in the traditional format:\n            public override string ToString()\n            {\n                return (System.String.Format(&quot;{0} + {1}i&quot;, real, imaginary));\n            }\n        }\n\n        class TestComplex\n        {\n            static void Main()\n            {\n                Complex num1 = new Complex(2, 3);\n                Complex num2 = new Complex(3, 4);\n\n                // Add two Complex objects by using the overloaded + operator.\n                Complex sum = num1 + num2;\n\n                // Print the numbers and the sum by using the overridden \n                // ToString method.\n                System.Console.WriteLine(&quot;First complex number:  {0}&quot;, num1);\n                System.Console.WriteLine(&quot;Second complex number: {0}&quot;, num2);\n                System.Console.WriteLine(&quot;The sum of the two numbers: {0}&quot;, sum);\n\n                // Keep the console window open in debug mode.\n                System.Console.WriteLine(&quot;Press any key to exit.&quot;);\n                System.Console.ReadKey();\n            }\n        }\n        /* Output:\n            First complex number:  2 + 3i\n            Second complex number: 3 + 4i\n            The sum of the two numbers: 5 + 7i\n        */\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"../../language-reference/operators/index\" data-linktype=\"relative-path\">C# Operators</a><br> <a href=\"../../language-reference/keywords/operator\" data-linktype=\"relative-path\">operator (C# Reference)</a><br> <a href=\"http://go.microsoft.com/fwlink/?LinkId=112383\" data-linktype=\"external\">Why are overloaded operators always static in C#?</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"c9b8d982-5112-413f-bae3-b42ae3248ddf\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"15\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/statements-expressions-operators/how-to-use-operator-overloading-to-create-a-complex-number-class.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/statements-expressions-operators/how-to-use-operator-overloading-to-create-a-complex-number-class.md\">\r\n<meta name=\"document_id\" content=\"045b3bc4-50e4-45e8-04e1-0779a032703e\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"How to: Use Operator Overloading to Create a Complex Number Class (C# Programming Guide) | Microsoft Docs","ms.assetid":"c9b8d982-5112-413f-bae3-b42ae3248ddf","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":15,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["complex numbers [C#]","classes [C#], operator overloading","operator overloading [C#], complex numbers","operator overloading [C#], using to create classes","operators [C#], overloading to create a complex number class"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/statements-expressions-operators/how-to-use-operator-overloading-to-create-a-complex-number-class.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/statements-expressions-operators/how-to-use-operator-overloading-to-create-a-complex-number-class.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/statements-expressions-operators/how-to-use-operator-overloading-to-create-a-complex-number-class.md","document_id":"045b3bc4-50e4-45e8-04e1-0779a032703e","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/statements-expressions-operators/how-to-use-operator-overloading-to-create-a-complex-number-class","toc_asset_id":"articles/csharp/programming-guide/statements-expressions-operators/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Use Operator Overloading to Create a Complex Number Class (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":265,"_op_rawTitle":"<h1 id=\"how-to-use-operator-overloading-to-create-a-complex-number-class-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/statements-expressions-operators/how-to-use-operator-overloading-to-create-a-complex-number-class.md\" sourcestartlinenumber=\"40\" sourceendlinenumber=\"40\">How to: Use Operator Overloading to Create a Complex Number Class (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/statements-expressions-operators/how-to-use-operator-overloading-to-create-a-complex-number-class","fileRelativePath":"articles/csharp/programming-guide/statements-expressions-operators/how-to-use-operator-overloading-to-create-a-complex-number-class.html"},"themesRelativePathToOutputRoot":"_themes/"}