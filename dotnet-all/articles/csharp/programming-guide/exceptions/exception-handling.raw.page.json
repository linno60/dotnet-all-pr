{"content":"<div><div class=\"content\">\n<p>A <a href=\"../../language-reference/keywords/try-catch\" data-linktype=\"relative-path\">try</a> block is used by C# programmers to partition code that might be affected by an exception. Associated <a href=\"../../language-reference/keywords/try-catch\" data-linktype=\"relative-path\">catch</a> blocks are used to handle any resulting exceptions. A <a href=\"../../language-reference/keywords/try-finally\" data-linktype=\"relative-path\">finally</a> block contains code that is run regardless of whether or not an exception is thrown in the <code>try</code> block, such as releasing resources that are allocated in the <code>try</code> block. A <code>try</code> block requires one or more associated <code>catch</code> blocks, or a <code>finally</code> block, or both.  </p>\n<p> The following examples show a <code>try-catch</code> statement, a <code>try-finally</code> statement, and a <code>try-catch-finally</code> statement.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideExceptions#6\">try\n{\n    // Code to try goes here.\n}\ncatch (SomeSpecificException ex)\n{\n    // Code to handle the exception goes here.\n    // Only catch exceptions that you know how to handle.\n    // Never catch base class System.Exception without\n    // rethrowing it at the end of the catch block.\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"csProgGuideExceptions#7\">try\n{\n    // Code to try goes here.\n}\nfinally\n{\n    // Code to execute after the try block goes here.\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"csProgGuideExceptions#8\">try\n{\n    // Code to try goes here.\n}\ncatch (SomeSpecificException ex)\n{\n    // Code to handle the exception goes here.\n}\nfinally\n{\n    // Code to execute after the try (and possibly catch) blocks \n    // goes here.\n}\n</code></pre><p> A <code>try</code> block without a <code>catch</code> or <code>finally</code> block causes a compiler error.  </p>\n<h2 id=\"catch-blocks\">Catch Blocks</h2>\n<p> A <code>catch</code> block can specify the type of exception to catch. The type specification is called an <em>exception filter</em>. The exception type should be derived from <a class=\"xref\" href=\"../../../../api/system.exception\" data-linktype=\"relative-path\">Exception</a>. In general, do not specify <a class=\"xref\" href=\"../../../../api/system.exception\" data-linktype=\"relative-path\">Exception</a> as the exception filter unless either you know how to handle all exceptions that might be thrown in the <code>try</code> block, or you have included a <a href=\"../../language-reference/keywords/throw\" data-linktype=\"relative-path\">throw</a> statement at the end of your <code>catch</code> block.  </p>\n<p> Multiple <code>catch</code> blocks with different exception filters can be chained together. The <code>catch</code> blocks are evaluated from top to bottom in your code, but only one <code>catch</code> block is executed for each exception that is thrown. The first <code>catch</code> block that specifies the exact type or a base class of the thrown exception is executed. If no <code>catch</code> block specifies a matching exception filter, a <code>catch</code> block that does not have a filter is selected, if one is present in the statement. It is important to position <code>catch</code> blocks with the most specific (that is, the most derived) exception types first.  </p>\n<p> You should catch exceptions when the following conditions are true:  </p>\n<ul>\n<li><p>You have a good understanding of why the exception might be thrown, and you can implement a specific recovery, such as prompting the user to enter a new file name when you catch a <a class=\"xref\" href=\"../../../../api/system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a> object.  </p>\n</li>\n<li><p>You can create and throw a new, more specific exception.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideExceptions#9\">int GetInt(int[] array, int index)\n{\n    try\n    {\n        return array[index];\n    }\n    catch(System.IndexOutOfRangeException e)\n    {\n        throw new System.ArgumentOutOfRangeException(\n            &quot;Parameter index is out of range.&quot;, e);\n    }\n}\n</code></pre></li>\n<li><p>You want to partially handle an exception before passing it on for additional handling. In the following example, a <code>catch</code> block is used to add an entry to an error log before re-throwing the exception.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideExceptions#10\">try\n{\n    // Try to access a resource.\n}\ncatch (System.UnauthorizedAccessException e)\n{\n    // Call a custom error logging procedure.\n    LogError(e);\n    // Re-throw the error.\n    throw;     \n}\n</code></pre></li>\n</ul>\n<h2 id=\"finally-blocks\">Finally Blocks</h2>\n<p> A <code>finally</code> block enables you to clean up actions that are performed in a <code>try</code> block. If present, the <code>finally</code> block executes last, after the <code>try</code> block and any matched <code>catch</code> block. A <code>finally</code> block always runs, regardless of whether an exception is thrown or a <code>catch</code> block matching the exception type is found.  </p>\n<p> The <code>finally</code> block can be used to release resources such as file streams, database connections, and graphics handles without waiting for the garbage collector in the runtime to finalize the objects. See <a href=\"../../language-reference/keywords/using-statement\" data-linktype=\"relative-path\">using Statement</a> for more information.  </p>\n<p> In the following example, the <code>finally</code> block is used to close a file that is opened in the <code>try</code> block. Notice that the state of the file handle is checked before the file is closed. If the <code>try</code> block cannot open the file, the file handle still has the value <code>null</code> and the <code>finally</code> block does not try to close it. Alternatively, if the file is opened successfully in the <code>try</code> block, the <code>finally</code> block closes the open file.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideExceptions#11\">System.IO.FileStream file = null;\nSystem.IO.FileInfo fileinfo = new System.IO.FileInfo(&quot;C:\\\\file.txt&quot;);\ntry\n{\n    file = fileinfo.OpenWrite();\n    file.WriteByte(0xF);\n}\nfinally\n{\n    // Check for null because OpenWrite might have failed.\n    if (file != null)\n    {\n        file.Close();\n    }\n}\n</code></pre><h2 id=\"c-language-specification\">C# Language Specification</h2>\n<p>For more information, see the <a href=\"../../language-reference/language-specification\" data-linktype=\"relative-path\">C# Language Specification</a>. The language specification is the definitive source for C# syntax and usage.</p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../../language-reference/index\" data-linktype=\"relative-path\">C# Reference</a><br> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">Exceptions and Exception Handling</a><br> <a href=\"../../language-reference/keywords/try-catch\" data-linktype=\"relative-path\">try-catch</a><br> <a href=\"../../language-reference/keywords/try-finally\" data-linktype=\"relative-path\">try-finally</a><br> <a href=\"../../language-reference/keywords/try-catch-finally\" data-linktype=\"relative-path\">try-catch-finally</a><br> <a href=\"../../language-reference/keywords/using-statement\" data-linktype=\"relative-path\">using Statement</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"ms.assetid\" content=\"b4e4ecf2-b907-4e58-891f-2563762258e9\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"24\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/3115359729431ecbcc16058612da59b85621fa0f/docs/csharp/programming-guide/exceptions/exception-handling.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/exceptions/exception-handling.md\">\r\n<meta name=\"document_id\" content=\"777c7d64-ca67-1971-0814-f8c26d02d500\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","uhfHeaderId":"MSDocsHeader-DotNet","title":"Exception Handling (C# Programming Guide) | Microsoft Docs","ms.assetid":"b4e4ecf2-b907-4e58-891f-2563762258e9","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":24,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["exception handling [C#], about exception handling","exceptions [C#], handling"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Bill Wagner","author_email":"wiwagn@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Reorganize the C# Guide TOC (#1318)","commit_sha":"3115359729431ecbcc16058612da59b85621fa0f","commit_date":"2017-01-23 23:20:14 -0500"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/3115359729431ecbcc16058612da59b85621fa0f/docs/csharp/programming-guide/exceptions/exception-handling.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/exceptions/exception-handling.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/exceptions/exception-handling.md","document_id":"777c7d64-ca67-1971-0814-f8c26d02d500","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/exceptions/exception-handling","toc_asset_id":"articles/csharp/programming-guide/exceptions/toc.json","toc_rel":"toc.json","_op_ogTitle":"Exception Handling (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":771,"_op_rawTitle":"<h1 id=\"exception-handling-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/exceptions/exception-handling.md\" sourcestartlinenumber=\"37\" sourceendlinenumber=\"37\">Exception Handling (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/exceptions/exception-handling","fileRelativePath":"articles/csharp/programming-guide/exceptions/exception-handling.html"},"themesRelativePathToOutputRoot":"_themes/"}