{"content":"<div><div class=\"content\">\n<p>Some .NET languages, including C++/CLI, allow objects to throw exceptions that do not derive from <a class=\"xref\" href=\"../../../../api/system.exception\" data-linktype=\"relative-path\">Exception</a>. Such exceptions are called <em>non-CLS exceptions</em> or <em>non-Exceptions</em>. In Visual C# you cannot throw non-CLS exceptions, but you can catch them in two ways:  </p>\n<ul>\n<li><p>Within a <code>catch (Exception e)</code> block as a <a class=\"xref\" href=\"../../../../api/system.runtime.compilerservices.runtimewrappedexception\" data-linktype=\"relative-path\">RuntimeWrappedException</a>.  </p>\n<p> By default, a Visual C# assembly catches non-CLS exceptions as wrapped exceptions. Use this method if you need access to the original exception, which can be accessed through the <a class=\"xref\" href=\"../../../../api/system.runtime.compilerservices.runtimewrappedexception#System_Runtime_CompilerServices_RuntimeWrappedException_WrappedException_\" data-linktype=\"relative-path\">WrappedException</a> property. The procedure later in this topic explains how to catch exceptions in this manner.  </p>\n</li>\n<li><p>Within a general catch block (a catch block without an exception type specified) that is put after a <code>catch (Exception)</code> or <code>catch (Exception e)</code> block.  </p>\n<p> Use this method when you want to perform some action (such as writing to a log file) in response to non-CLS exceptions, and you do not need access to the exception information. By default the common language runtime wraps all exceptions. To disable this behavior, add this assembly-level attribute to your code, typically in the AssemblyInfo.cs file: <code>[assembly: RuntimeCompatibilityAttribute(WrapNonExceptionThrows = false)]</code>.  </p>\n</li>\n</ul>\n<h3 id=\"to-catch-a-non-cls-exception\">To catch a non-CLS exception</h3>\n<ol>\n<li><p>Within a <code>catch(Exception e) block</code>, use the <code>as</code> keyword to test whether <code>e</code> can be cast to a <a class=\"xref\" href=\"../../../../api/system.runtime.compilerservices.runtimewrappedexception\" data-linktype=\"relative-path\">RuntimeWrappedException</a>.  </p>\n</li>\n<li><p>Access the original exception through the <a class=\"xref\" href=\"../../../../api/system.runtime.compilerservices.runtimewrappedexception#System_Runtime_CompilerServices_RuntimeWrappedException_WrappedException_\" data-linktype=\"relative-path\">WrappedException</a> property.  </p>\n</li>\n</ol>\n<h2 id=\"example\">Example</h2>\n<p> The following example shows how to catch a non-CLS exception that was thrown from a class library written in C++/CLR. Note that in this example, the Visual C# client code knows in advance that the exception type being thrown is a <a class=\"xref\" href=\"../../../../api/system.string\" data-linktype=\"relative-path\">System.String</a>. You can cast the <a class=\"xref\" href=\"../../../../api/system.runtime.compilerservices.runtimewrappedexception#System_Runtime_CompilerServices_RuntimeWrappedException_WrappedException_\" data-linktype=\"relative-path\">WrappedException</a> property back its original type as long as that type is accessible from your code.  </p>\n<pre class=\"loading\"><code>// Class library written in C++/CLR.  \n   ThrowNonCLS.Class1 myClass = new ThrowNonCLS.Class1();  \n\n   try  \n   {  \n    // throws gcnew System::String(  \n    // &quot;I do not derive from System.Exception!&quot;);  \n    myClass.TestThrow();   \n   }  \n\n   catch (Exception e)  \n   {  \n    RuntimeWrappedException rwe = e as RuntimeWrappedException;  \n    if (rwe != null)      \n    {  \n      String s = rwe.WrappedException as String;  \n      if (s != null)  \n      {  \n        Console.WriteLine(s);  \n      }  \n    }  \n    else  \n    {  \n       // Handle other System.Exception types.  \n    }  \n   }             \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../api/system.runtime.compilerservices.runtimewrappedexception\" data-linktype=\"relative-path\">RuntimeWrappedException</a><br> <a href=\"index\" data-linktype=\"relative-path\">Exceptions and Exception Handling</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"db4630b3-5240-471a-b3a7-c7ff6ab31e8d\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"8\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/3115359729431ecbcc16058612da59b85621fa0f/docs/csharp/programming-guide/exceptions/how-to-catch-a-non-cls-exception.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/exceptions/how-to-catch-a-non-cls-exception.md\">\r\n<meta name=\"document_id\" content=\"d51dcb1a-5c56-d4e9-17cf-8e8fbe5ba9fc\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc1.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"How to: Catch a non-CLS Exception | Microsoft Docs","ms.assetid":"db4630b3-5240-471a-b3a7-c7ff6ab31e8d","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":8,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["exceptions [C#], non-CLS"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Bill Wagner","author_email":"wiwagn@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Reorganize the C# Guide TOC (#1318)","commit_sha":"3115359729431ecbcc16058612da59b85621fa0f","commit_date":"2017-01-23 23:20:14 -0500"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/3115359729431ecbcc16058612da59b85621fa0f/docs/csharp/programming-guide/exceptions/how-to-catch-a-non-cls-exception.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/exceptions/how-to-catch-a-non-cls-exception.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/exceptions/how-to-catch-a-non-cls-exception.md","document_id":"d51dcb1a-5c56-d4e9-17cf-8e8fbe5ba9fc","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/exceptions/how-to-catch-a-non-cls-exception","toc_asset_id":"articles/csharp/programming-guide/exceptions/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Catch a non-CLS Exception","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":338,"_op_rawTitle":"<h1 id=\"how-to-catch-a-non-cls-exception\" sourcefile=\"docs/csharp/programming-guide/exceptions/how-to-catch-a-non-cls-exception.md\" sourcestartlinenumber=\"36\" sourceendlinenumber=\"36\">How to: Catch a non-CLS Exception</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/exceptions/how-to-catch-a-non-cls-exception","fileRelativePath":"articles/csharp/programming-guide/exceptions/how-to-catch-a-non-cls-exception.html"},"themesRelativePathToOutputRoot":"_themes/"}