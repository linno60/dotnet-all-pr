{"content":"<div><div class=\"content\">\n<p>Indexers allow instances of a class or struct to be indexed just like arrays. The indexed value can be set or retrieved without explicitly specifying a type or instance member. Indexers resemble <a href=\"../classes-and-structs/properties\" data-linktype=\"relative-path\">properties</a> except that their accessors take parameters.  </p>\n<p> The following example defines a generic class with simple <a href=\"../../language-reference/keywords/get\" data-linktype=\"relative-path\">get</a> and <a href=\"../../language-reference/keywords/set\" data-linktype=\"relative-path\">set</a> accessor methods to assign and retrieve values. The <code>Program</code> class creates an instance of this class for storing strings.  </p>\n<pre><code class=\"lang-cs\" name=\"indexers#1\">using System;\n\nclass SampleCollection&lt;T&gt;\n{\n   // Declare an array to store the data elements.\n   private T[] arr = new T[100];\n\n   // Define the indexer to allow client code to use [] notation.\n   public T this[int i]\n   {\n      get { return arr[i]; }\n      set { arr[i] = value; }\n   }\n}\n\nclass Program\n{\n   static void Main()\n   {\n      var stringCollection = new SampleCollection&lt;string&gt;();\n      stringCollection[0] = &quot;Hello, World&quot;;\n      Console.WriteLine(stringCollection[0]);\n   }\n}\n// The example displays the following output:\n//       Hello, World.\n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> For more examples, see <a href=\"index#BKMK_RelatedSections\" data-linktype=\"relative-path\">Related Sections</a>.  </p>\n</div>\n<h2 id=\"expression-body-definitions\">Expression Body Definitions</h2>\n<p>It is common for an indexer&#39;s get or set accessor to consist of a single statement that either returns or sets a value. Expression-bodied members provide a simplified syntax to support this scenario. Starting with C# 6, a read-only indexer can be implemented as an expression-bodied member, as the following example shows.</p>\n<pre><code class=\"lang-cs\" name=\"indexers#2\">using System;\n\nclass SampleCollection&lt;T&gt;\n{\n   // Declare an array to store the data elements.\n   private T[] arr = new T[100];\n   int nextIndex = 0;\n   \n   // Define the indexer to allow client code to use [] notation.\n   public T this[int i] =&gt; arr[i];\n   \n   public void Add(T value)\n   {\n      if (nextIndex &gt; arr.Length) \n         throw new IndexOutOfRangeException($&quot;The collection can hold only {arr.Length} elements.&quot;);\n      arr[nextIndex++] = value;\n   }\n}\n\nclass Program\n{\n   static void Main()\n   {\n      var stringCollection = new SampleCollection&lt;string&gt;();\n      stringCollection.Add(&quot;Hello, World&quot;);\n      System.Console.WriteLine(stringCollection[0]);\n   }\n}\n// The example displays the following output:\n//       Hello, World.\n</code></pre><p>Note that <code>=&gt;</code> introduces the expression body, and that the <code>get</code> keyword is not used. </p>\n<p>Starting with C# 7, both the get and set accessor can be an implemented as expression-bodied members. In this case, both <code>get</code> and <code>set</code> keywords must be used. For example:</p>\n<pre><code class=\"lang-cs\" name=\"indexers#3\">using System;\n\nclass SampleCollection&lt;T&gt;\n{\n   // Declare an array to store the data elements.\n   private T[] arr = new T[100];\n\n   // Define the indexer to allow client code to use [] notation.\n   public T this[int i]\n   {\n      get =&gt; arr[i]; \n      set =&gt; arr[i] = value; \n   }\n}\n\nclass Program\n{\n   static void Main()\n   {\n      var stringCollection = new SampleCollection&lt;string&gt;();\n      stringCollection[0] = &quot;Hello, World.&quot;;\n      Console.WriteLine(stringCollection[0]);\n   }\n}\n// The example displays the following output:\n//       Hello, World.\n</code></pre><h2 id=\"indexers-overview\">Indexers Overview</h2>\n<ul>\n<li><p>Indexers enable objects to be indexed in a similar manner to arrays.  </p>\n</li>\n<li><p>A <code>get</code> accessor returns a value. A <code>set</code> accessor assigns a value.  </p>\n</li>\n<li><p>The <a href=\"../../language-reference/keywords/this\" data-linktype=\"relative-path\">this</a> keyword is used to define the indexer.  </p>\n</li>\n<li><p>The <a href=\"../../language-reference/keywords/value\" data-linktype=\"relative-path\">value</a> keyword is used to define the value being assigned by the <code>set</code> indexer.  </p>\n</li>\n<li><p>Indexers do not have to be indexed by an integer value; it is up to you how to define the specific look-up mechanism.  </p>\n</li>\n<li><p>Indexers can be overloaded.  </p>\n</li>\n<li><p>Indexers can have more than one formal parameter, for example, when accessing a two-dimensional array.  </p>\n</li>\n</ul>\n<h2 id=\"a-namebkmkrelatedsectionsa-related-sections\"><a name=\"BKMK_RelatedSections\"></a> Related Sections</h2>\n<ul>\n<li><p><a href=\"using-indexers\" data-linktype=\"relative-path\">Using Indexers</a>  </p>\n</li>\n<li><p><a href=\"indexers-in-interfaces\" data-linktype=\"relative-path\">Indexers in Interfaces</a>  </p>\n</li>\n<li><p><a href=\"comparison-between-properties-and-indexers\" data-linktype=\"relative-path\">Comparison Between Properties and Indexers</a>  </p>\n</li>\n<li><p><a href=\"../classes-and-structs/restricting-accessor-accessibility\" data-linktype=\"relative-path\">Restricting Accessor Accessibility</a>  </p>\n</li>\n</ul>\n<h2 id=\"c-language-specification\">C# Language Specification</h2>\n<p>For more information, see the <a href=\"../../language-reference/language-specification\" data-linktype=\"relative-path\">C# Language Specification</a>. The language specification is the definitive source for C# syntax and usage.</p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"../classes-and-structs/properties\" data-linktype=\"relative-path\">Properties</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"022cd27d-d5e0-4cfe-8b97-dc018cc3355d\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"29\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2017-03-10\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/6caa5b9da01b5ec442d7eb995d9abb8b4c9c22e2/docs/csharp/programming-guide/indexers/index.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/indexers/index.md\">\r\n<meta name=\"document_id\" content=\"be1428ae-b07a-4922-cd43-2acf0f55327e\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Indexers (C# Programming Guide) | Microsoft Docs","ms.assetid":"022cd27d-d5e0-4cfe-8b97-dc018cc3355d","f1_keywords":["cs.indexers"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":29,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["indexers [C#]","C# language, indexers"],"ms.date":"2017-03-10","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"rpetrusha","author_email":"ronpet@microsoft.com","committer_name":"rpetrusha","comitter_email":"ronpet@microsoft.com","message":"Revision for expression-bodied properties","commit_sha":"6caa5b9da01b5ec442d7eb995d9abb8b4c9c22e2","commit_date":"2017-03-09 13:20:50 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/rpetrusha","display_name":"rpetrusha","id":"10886961"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/6caa5b9da01b5ec442d7eb995d9abb8b4c9c22e2/docs/csharp/programming-guide/indexers/index.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/indexers/index.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/indexers/index.md","document_id":"be1428ae-b07a-4922-cd43-2acf0f55327e","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/indexers/index","toc_asset_id":"articles/csharp/programming-guide/indexers/toc.json","toc_rel":"toc.json","_op_ogTitle":"Indexers (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":557,"_op_rawTitle":"<h1 id=\"indexers-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/indexers/index.md\" sourcestartlinenumber=\"35\" sourceendlinenumber=\"35\">Indexers (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/indexers/index","fileRelativePath":"articles/csharp/programming-guide/indexers/index.html"},"themesRelativePathToOutputRoot":"_themes/"}