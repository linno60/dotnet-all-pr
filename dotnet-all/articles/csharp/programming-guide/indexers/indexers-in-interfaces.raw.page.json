{"content":"<div><div class=\"content\">\n<p>Indexers can be declared on an <a href=\"../../language-reference/keywords/interface\" data-linktype=\"relative-path\">interface</a>. Accessors of interface indexers differ from the accessors of <a href=\"../../language-reference/keywords/class\" data-linktype=\"relative-path\">class</a> indexers in the following ways:  </p>\n<ul>\n<li><p>Interface accessors do not use modifiers.  </p>\n</li>\n<li><p>An interface accessor does not have a body.  </p>\n<p>Thus, the purpose of the accessor is to indicate whether the indexer is read-write, read-only, or write-only.  </p>\n<p>The following is an example of an interface indexer accessor:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideIndexers#3\">public interface ISomeInterface\n{\n    //...\n\n    // Indexer declaration:\n    string this[int index]\n    {\n        get;\n        set;\n    }\n}\n</code></pre><p>The signature of an indexer must differ from the signatures of all other indexers declared in the same interface.  </p>\n</li>\n</ul>\n<h2 id=\"example\">Example</h2>\n<p> The following example shows how to implement interface indexers.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideIndexers#4\">    // Indexer on an interface:\n    public interface ISomeInterface\n    {\n        // Indexer declaration:\n        int this[int index]\n        {\n            get;\n            set;\n        }\n    }\n\n    // Implementing the interface.\n    class IndexerClass : ISomeInterface\n    {\n        private int[] arr = new int[100];\n        public int this[int index]   // indexer declaration\n        {\n            get\n            {\n                // The arr object will throw IndexOutOfRange exception.\n                return arr[index];\n            }\n            set\n            {\n                arr[index] = value;\n            }\n        }\n    }\n\n    class MainClass\n    {\n        static void Main()\n        {\n            IndexerClass test = new IndexerClass();\n            System.Random rand = new System.Random();\n            // Call the indexer to initialize its elements.\n            for (int i = 0; i &lt; 10; i++)\n            {\n                test[i] = rand.Next();\n            }\n            for (int i = 0; i &lt; 10; i++)\n            {\n                System.Console.WriteLine(&quot;Element #{0} = {1}&quot;, i, test[i]);\n            }\n\n            // Keep the console window open in debug mode.\n            System.Console.WriteLine(&quot;Press any key to exit.&quot;);\n            System.Console.ReadKey();\n        }\n    }\n    /* Sample output:\n        Element #0 = 360877544\n        Element #1 = 327058047\n        Element #2 = 1913480832\n        Element #3 = 1519039937\n        Element #4 = 601472233\n        Element #5 = 323352310\n        Element #6 = 1422639981\n        Element #7 = 1797892494\n        Element #8 = 875761049\n        Element #9 = 393083859\n     */\n\n</code></pre><p> In the preceding example, you could use the explicit interface member implementation by using the fully qualified name of the interface member. For example:  </p>\n<pre class=\"loading\"><code>public string ISomeInterface.this   \n{   \n}   \n</code></pre><p> However, the fully qualified name is only needed to avoid ambiguity when the class is implementing more than one interface with the same indexer signature. For example, if an <code>Employee</code> class is implementing two interfaces, <code>ICitizen</code> and <code>IEmployee</code>, and both interfaces have the same indexer signature, the explicit interface member implementation is necessary. That is, the following indexer declaration:  </p>\n<pre class=\"loading\"><code>public string IEmployee.this   \n{   \n}   \n</code></pre><p> implements the indexer on the <code>IEmployee</code> interface, while the following declaration:  </p>\n<pre class=\"loading\"><code>public string ICitizen.this   \n{   \n}   \n</code></pre><p> implements the indexer on the <code>ICitizen</code> interface.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">Indexers</a><br> <a href=\"../classes-and-structs/properties\" data-linktype=\"relative-path\">Properties</a><br> <a href=\"../interfaces/index\" data-linktype=\"relative-path\">Interfaces</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"e16b54bd-4a83-4f52-bd75-65819fca79e8\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"18\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/indexers/indexers-in-interfaces.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/indexers/indexers-in-interfaces.md\">\r\n<meta name=\"document_id\" content=\"9129fc70-202d-fefe-58d3-7971373b920b\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Indexers in Interfaces (C# Programming Guide) | Microsoft Docs","ms.assetid":"e16b54bd-4a83-4f52-bd75-65819fca79e8","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":18,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["indexers [C#], in interfaces","accessors [C#], indexers"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/indexers/indexers-in-interfaces.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/indexers/indexers-in-interfaces.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/indexers/indexers-in-interfaces.md","document_id":"9129fc70-202d-fefe-58d3-7971373b920b","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/indexers/indexers-in-interfaces","toc_asset_id":"articles/csharp/programming-guide/indexers/toc.json","toc_rel":"toc.json","_op_ogTitle":"Indexers in Interfaces (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":412,"_op_rawTitle":"<h1 id=\"indexers-in-interfaces-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/indexers/indexers-in-interfaces.md\" sourcestartlinenumber=\"37\" sourceendlinenumber=\"37\">Indexers in Interfaces (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/indexers/indexers-in-interfaces","fileRelativePath":"articles/csharp/programming-guide/indexers/indexers-in-interfaces.html"},"themesRelativePathToOutputRoot":"_themes/"}