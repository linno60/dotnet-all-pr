{"content":"<div><div class=\"content\">\n<p><em>Indexed properties</em> improve the way in which COM properties that have parameters are consumed in C# programming. Indexed properties work together with other features in Visual C#, such as <a href=\"../classes-and-structs/named-and-optional-arguments\" data-linktype=\"relative-path\">named and optional arguments</a>, a new type (<a href=\"../../language-reference/keywords/dynamic\" data-linktype=\"relative-path\">dynamic</a>), and <a href=\"../concepts/assemblies-gac/walkthrough-embedding-types-from-managed-assemblies-in-visual-studio\" data-linktype=\"relative-path\">embedded type information</a>, to enhance Microsoft Office programming.  </p>\n<p> In earlier versions of C#, methods are accessible as properties only if the <code>get</code> method has no parameters and the <code>set</code> method has one and only one value parameter. However, not all COM properties meet those restrictions. For example, the Excel <a href=\"http://go.microsoft.com/fwlink/?LinkId=166053\" data-linktype=\"external\">Range</a> property has a <code>get</code> accessor that requires a parameter for the name of the range. In the past, because you could not access the <code>Range</code> property directly, you had to use the <code>get_Range</code> method instead, as shown in the following example.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideIndexedProperties#1\">// Visual C# 2008 and earlier.\nvar excelApp = new Excel.Application();\n// . . .\nExcel.Range targetRange = excelApp.get_Range(&quot;A1&quot;, Type.Missing);\n</code></pre><p> Indexed properties enable you to write the following instead:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideIndexedProperties#2\">// Visual C# 2010.\nvar excelApp = new Excel.Application();\n// . . .\nExcel.Range targetRange = excelApp.Range[&quot;A1&quot;];\n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> The previous example also uses the <a href=\"../classes-and-structs/named-and-optional-arguments\" data-linktype=\"relative-path\">optional arguments</a> feature, which enables you to omit <code>Type.Missing</code>.  </p>\n</div>\n<p> Similarly to set the value of the <code>Value</code> property of a <a href=\"https://msdn.microsoft.com/library/microsoft.office.interop.excel.range.aspx\" data-linktype=\"external\">Range</a> object in Visual C# 2008 and earlier, two arguments are required. One supplies an argument for an optional parameter that specifies the type of the range value. The other supplies the value for the <code>Value</code> property. The following examples illustrate these techniques. Both set the value of the A1 cell to <code>Name</code>.</p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideIndexedProperties#3\">// Visual C# 2008.\ntargetRange.set_Value(Type.Missing, &quot;Name&quot;);\n// Or\ntargetRange.Value2 = &quot;Name&quot;;\n</code></pre><p> Indexed properties enable you to write the following code instead.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideIndexedProperties#4\">// Visual C# 2010.\ntargetRange.Value = &quot;Name&quot;;\n</code></pre><p> You cannot create indexed properties of your own. The feature only supports consumption of existing indexed properties.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following code shows a complete example. For more information about how to set up a project that accesses the Office API, see <a href=\"how-to-access-office-onterop-objects\" data-linktype=\"relative-path\">How to: Access Office Interop Objects by Using Visual C# Features</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideIndexedProperties#5\">// You must add a reference to Microsoft.Office.Interop.Excel to run \n// this example.\nusing System;\nusing Excel = Microsoft.Office.Interop.Excel;\n\nnamespace IndexedProperties\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            CSharp2010();\n            //CSharp2008();\n        }\n\n        static void CSharp2010()\n        {\n            var excelApp = new Excel.Application();\n            excelApp.Workbooks.Add();\n            excelApp.Visible = true;\n\n            Excel.Range targetRange = excelApp.Range[&quot;A1&quot;];\n            targetRange.Value = &quot;Name&quot;;\n        }\n\n        static void CSharp2008()\n        {\n            var excelApp = new Excel.Application();\n            excelApp.Workbooks.Add(Type.Missing);\n            excelApp.Visible = true;\n\n            Excel.Range targetRange = excelApp.get_Range(&quot;A1&quot;, Type.Missing);\n            targetRange.set_Value(Type.Missing, &quot;Name&quot;);\n            // Or\n            //targetRange.Value2 = &quot;Name&quot;;\n\n        }\n    }\n}\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../classes-and-structs/named-and-optional-arguments\" data-linktype=\"relative-path\">Named and Optional Arguments</a><br> <a href=\"../../language-reference/keywords/dynamic\" data-linktype=\"relative-path\">dynamic</a><br> <a href=\"../types/using-type-dynamic\" data-linktype=\"relative-path\">Using Type dynamic</a><br> <a href=\"../classes-and-structs/how-to-use-named-and-optional-arguments-in-office-programming\" data-linktype=\"relative-path\">How to: Use Named and Optional Arguments in Office Programming</a><br> <a href=\"how-to-access-office-onterop-objects\" data-linktype=\"relative-path\">How to: Access Office Interop Objects by Using Visual C# Features</a><br> <a href=\"walkthrough-office-programming\" data-linktype=\"relative-path\">Walkthrough: Office Programming</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"ms.assetid\" content=\"756bfc1e-7c28-4d4d-b114-ac9288c73882\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"20\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:46 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/7e33ed084c560470a486ebbb25035a59ddc18565/docs/csharp/programming-guide/interop/how-to-use-indexed-properties-in-com-interop-rogramming.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/interop/how-to-use-indexed-properties-in-com-interop-rogramming.md\">\r\n<meta name=\"document_id\" content=\"b5dd68ec-0376-51dd-37a6-fa6a02a8928d\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","uhfHeaderId":"MSDocsHeader-DotNet","title":"How to: Use Indexed Properties in COM Interop Programming (C# Programming Guide) | Microsoft Docs","ms.assetid":"756bfc1e-7c28-4d4d-b114-ac9288c73882","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":20,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["indexed properties [C#]","Office programming [C#], indexed properties","properties [C#], indexed"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Luke Latham","author_email":"GuardRex@users.noreply.github.com","committer_name":"Maira Wenzel","comitter_email":"mairaw@microsoft.com","message":"Removing outdated VS references (Part 2) (#1810)","commit_sha":"7e33ed084c560470a486ebbb25035a59ddc18565","commit_date":"2017-03-30 17:48:19 -0700"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-04-01 05:46 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/GuardRex","display_name":"Luke Latham","id":"1622880"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"4/1/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/7e33ed084c560470a486ebbb25035a59ddc18565/docs/csharp/programming-guide/interop/how-to-use-indexed-properties-in-com-interop-rogramming.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/interop/how-to-use-indexed-properties-in-com-interop-rogramming.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/interop/how-to-use-indexed-properties-in-com-interop-rogramming.md","document_id":"b5dd68ec-0376-51dd-37a6-fa6a02a8928d","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/interop/how-to-use-indexed-properties-in-com-interop-rogramming","toc_asset_id":"articles/csharp/programming-guide/interop/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Use Indexed Properties in COM Interop Programming (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":445,"_op_rawTitle":"<h1 id=\"how-to-use-indexed-properties-in-com-interop-programming-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/interop/how-to-use-indexed-properties-in-com-interop-rogramming.md\" sourcestartlinenumber=\"38\" sourceendlinenumber=\"38\">How to: Use Indexed Properties in COM Interop Programming (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/interop/how-to-use-indexed-properties-in-com-interop-rogramming","fileRelativePath":"articles/csharp/programming-guide/interop/how-to-use-indexed-properties-in-com-interop-rogramming.html"},"themesRelativePathToOutputRoot":"_themes/"}