{"content":"<div><div class=\"content\">\n<p>The following C# code example illustrates how to use platform invoke services to play a wave sound file on the Windows operating system.  </p>\n<h2 id=\"example\">Example</h2>\n<p> This example code uses <code>DllImport</code> to import <code>winmm.dll</code>&#39;s <code>PlaySound</code> method entry point as <code>Form1 PlaySound()</code>. The example has a simple Windows Form with a button. Clicking the button opens a standard windows <a class=\"xref\" href=\"../../../../api/system.windows.forms.openfiledialog\" data-linktype=\"relative-path\">OpenFileDialog</a> dialog box so that you can open a file to play. When a wave file is selected, it is played by using the <code>PlaySound()</code> method of the winmm.DLL assembly method. For more information about winmm.dll&#39;s <code>PlaySound</code> method, see <a href=\"http://go.microsoft.com/fwlink/?LinkId=148553\" data-linktype=\"external\">Using the PlaySound function with Waveform-Audio Files</a>. Browse and select a file that has a .wav extension, and then click <strong>Open</strong> to play the wave file by using platform invoke. A text box shows the full path of the file selected.  </p>\n<p> The <strong>Open Files</strong> dialog box is filtered to show only files that have a .wav extension through the filter settings:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideInterop#5\">dialog1.Filter = &quot;Wav Files (*.wav)|*.wav&quot;;\n</code></pre><pre><code class=\"lang-cs\" name=\"csProgGuideInterop#3\">using System.Windows.Forms;\nusing System.Runtime.InteropServices;\n\nnamespace WinSound\n{\n    public partial class Form1 : Form\n    {\n        private TextBox textBox1;\n        private Button button1;\n\n        public Form1()  //constructor\n        {\n            InitializeComponent();\n        }\n\n        [System.Runtime.InteropServices.DllImport(&quot;winmm.DLL&quot;, EntryPoint = &quot;PlaySound&quot;, SetLastError = true, CharSet = CharSet.Unicode, ThrowOnUnmappableChar = true)]\n        private static extern bool PlaySound(string szSound, System.IntPtr hMod, PlaySoundFlags flags);\n\n        [System.Flags] \n        public enum PlaySoundFlags : int\n        {\n            SND_SYNC = 0x0000,\n            SND_ASYNC = 0x0001, \n            SND_NODEFAULT = 0x0002, \n            SND_LOOP = 0x0008, \n            SND_NOSTOP = 0x0010,\n            SND_NOWAIT = 0x00002000, \n            SND_FILENAME = 0x00020000, \n            SND_RESOURCE = 0x00040004 \n        }\n\n        private void button1_Click (object sender, System.EventArgs e)\n        {\n            OpenFileDialog dialog1 = new OpenFileDialog(); \n\n            dialog1.Title = &quot;Browse to find sound file to play&quot;;\n            dialog1.InitialDirectory = @&quot;c:\\&quot;;\n            dialog1.Filter = &quot;Wav Files (*.wav)|*.wav&quot;;\n            dialog1.FilterIndex = 2;\n            dialog1.RestoreDirectory = true;\n\n            if(dialog1.ShowDialog() == DialogResult.OK) \n            { \n                textBox1.Text = dialog1.FileName;\n                PlaySound (dialog1.FileName, new System.IntPtr(), PlaySoundFlags.SND_SYNC);\n            } \n        }\n    }\n}\n</code></pre><h2 id=\"compiling-the-code\">Compiling the Code</h2>\n<h3 id=\"to-compile-the-code\">To compile the code</h3>\n<ol>\n<li><p>Create a new C# Windows Application project in Visual Studio and name it <strong>WinSound</strong>.  </p>\n</li>\n<li><p>Copy the code above, and paste it over the contents of the <code>Form1.cs</code> file.  </p>\n</li>\n<li><p>Copy the following code, and paste it in the <code>Form1.Designer.cs</code> file, in the <code>InitializeComponent()</code> method, after any existing code.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideInterop#4\">this.button1 = new System.Windows.Forms.Button();\nthis.textBox1 = new System.Windows.Forms.TextBox();\nthis.SuspendLayout();\n// \n// button1\n// \nthis.button1.Location = new System.Drawing.Point(192, 40);\nthis.button1.Name = &quot;button1&quot;;\nthis.button1.Size = new System.Drawing.Size(88, 24);\nthis.button1.TabIndex = 0;\nthis.button1.Text = &quot;Browse&quot;;\nthis.button1.Click += new System.EventHandler(this.button1_Click);\n// \n// textBox1\n// \nthis.textBox1.Location = new System.Drawing.Point(8, 40);\nthis.textBox1.Name = &quot;textBox1&quot;;\nthis.textBox1.Size = new System.Drawing.Size(168, 20);\nthis.textBox1.TabIndex = 1;\nthis.textBox1.Text = &quot;FIle path&quot;;\n// \n// Form1\n// \nthis.AutoScaleDimensions = new System.Drawing.SizeF(5, 13);\nthis.ClientSize = new System.Drawing.Size(292, 266);\nthis.Controls.Add(this.textBox1);\nthis.Controls.Add(this.button1);\nthis.Name = &quot;Form1&quot;;\nthis.Text = &quot;Platform Invoke WinSound C#&quot;;\nthis.ResumeLayout(false);\nthis.PerformLayout();\n</code></pre></li>\n<li><p>Compile and run the code.  </p>\n</li>\n</ol>\n<h2 id=\"net-framework-security\">.NET Framework Security</h2>\n<p> For more information, see <a href=\"http://go.microsoft.com/fwlink/?LinkId=37122\" data-linktype=\"external\">.NET Framework Security</a>.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"interoperability-overview\" data-linktype=\"relative-path\">Interoperability Overview</a><br> <a href=\"interoperability-overview\" data-linktype=\"relative-path\">Interoperability Overview</a><br> <a href=\"http://msdn.microsoft.com/en-us/ba9dd55b-2eaa-45cd-8afd-75cb8d64d243\" data-linktype=\"external\">A Closer Look at Platform Invoke</a><br> <a href=\"http://msdn.microsoft.com/library/dc5c76cf-7b12-406f-b79c-d1a023ec245d\" data-linktype=\"external\">Marshaling Data with Platform Invoke</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"f7f62f53-e026-4c40-b221-3a26adb0c2c5\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"30\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/interop/how-to-use-platform-invoke-to-play-a-wave-file.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/interop/how-to-use-platform-invoke-to-play-a-wave-file.md\">\r\n<meta name=\"document_id\" content=\"f4bc7356-9ecf-be64-feb9-426b3d31a1bf\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"How to: Use Platform Invoke to Play a Wave File (C# Programming Guide) | Microsoft Docs","ms.assetid":"f7f62f53-e026-4c40-b221-3a26adb0c2c5","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":30,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["platform invoke, sound files","interoperability [C#], playing WAV files using pinvoke","wav files",".wav files"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/interop/how-to-use-platform-invoke-to-play-a-wave-file.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/interop/how-to-use-platform-invoke-to-play-a-wave-file.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/interop/how-to-use-platform-invoke-to-play-a-wave-file.md","document_id":"f4bc7356-9ecf-be64-feb9-426b3d31a1bf","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/interop/how-to-use-platform-invoke-to-play-a-wave-file","toc_asset_id":"articles/csharp/programming-guide/interop/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Use Platform Invoke to Play a Wave File (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":468,"_op_rawTitle":"<h1 id=\"how-to-use-platform-invoke-to-play-a-wave-file-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/interop/how-to-use-platform-invoke-to-play-a-wave-file.md\" sourcestartlinenumber=\"39\" sourceendlinenumber=\"39\">How to: Use Platform Invoke to Play a Wave File (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/interop/how-to-use-platform-invoke-to-play-a-wave-file","fileRelativePath":"articles/csharp/programming-guide/interop/how-to-use-platform-invoke-to-play-a-wave-file.html"},"themesRelativePathToOutputRoot":"_themes/"}