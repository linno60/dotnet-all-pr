{"content":"<div><div class=\"content\">\n<p>Because strings are <em>immutable</em>, it is not possible (without using unsafe code) to modify the value of a string object after it has been created. However, there are many ways to modify the value of a string and store the result in a new string object. The <a class=\"xref\" href=\"../../../../api/system.string\" data-linktype=\"relative-path\">System.String</a> class provides methods that operate on an input string and return a new string object. In many cases, you can assign the new object to the variable that held the original string. The <a class=\"xref\" href=\"../../../../api/system.text.regularexpressions.regex\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex</a> class provides additional methods that work in a similar manner. The <a class=\"xref\" href=\"../../../../api/system.text.stringbuilder\" data-linktype=\"relative-path\">System.Text.StringBuilder</a> class provides a character buffer that you can modify &quot;in-place.&quot; You call the <a class=\"xref\" href=\"../../../../api/system.text.stringbuilder#System_Text_StringBuilder_ToString_\" data-linktype=\"relative-path\">ToString</a> method to create a new string object that contains the current contents of the buffer.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following example shows various ways to replace or remove substrings in a specified string.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideStrings#28\">    class ReplaceSubstrings\n    {\n        string searchFor;\n        string replaceWith;\n\n        static void Main(string[] args)\n        {\n\n            ReplaceSubstrings app = new ReplaceSubstrings();\n            string s = &quot;The mountains are behind the clouds today.&quot;;\n\n            // Replace one substring with another with String.Replace.\n            // Only exact matches are supported.\n            s = s.Replace(&quot;mountains&quot;, &quot;peaks&quot;);\n            Console.WriteLine(s);\n            // Output: The peaks are behind the clouds today.\n\n            // Use Regex.Replace for more flexibility. \n            // Replace &quot;the&quot; or &quot;The&quot; with &quot;many&quot; or &quot;Many&quot;.\n            // using System.Text.RegularExpressions\n            app.searchFor = &quot;the&quot;; // A very simple regular expression.\n            app.replaceWith = &quot;many&quot;;\n            s = Regex.Replace(s, app.searchFor, app.ReplaceMatchCase, RegexOptions.IgnoreCase);\n            Console.WriteLine(s);\n            // Output: Many peaks are behind many clouds today.\n\n            // Replace all occurrences of one char with another.\n            s = s.Replace(&#39; &#39;, &#39;_&#39;);\n            Console.WriteLine(s);\n            // Output: Many_peaks_are_behind_many_clouds_today.\n\n            // Remove a substring from the middle of the string.\n            string temp = &quot;many_&quot;;\n            int i = s.IndexOf(temp);\n            if (i &gt;= 0)\n            {\n                s = s.Remove(i, temp.Length);\n            }\n            Console.WriteLine(s);\n            // Output: Many_peaks_are_behind_clouds_today.\n\n            // Remove trailing and leading whitespace.\n            // See also the TrimStart and TrimEnd methods.\n            string s2 = &quot;    I&#39;m wider than I need to be.      &quot;;\n            // Store the results in a new string variable.\n            temp = s2.Trim();\n            Console.WriteLine(temp);\n            // Output: I&#39;m wider than I need to be.\n\n            // Keep the console window open in debug mode.\n            Console.WriteLine(&quot;Press any key to exit&quot;);\n            Console.ReadKey();\n        }\n\n        // Custom match method called by Regex.Replace\n        // using System.Text.RegularExpressions\n        string ReplaceMatchCase(Match m)\n        {\n            // Test whether the match is capitalized\n            if (Char.IsUpper(m.Value[0]) == true)\n            {\n                // Capitalize the replacement string\n                // using System.Text;\n                StringBuilder sb = new StringBuilder(replaceWith);\n                sb[0] = (Char.ToUpper(sb[0]));\n                return sb.ToString();\n            }\n            else\n            {\n                return replaceWith;\n            }\n        }\n    }\n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> To access the individual characters in a string by using array notation, you can use the <a class=\"xref\" href=\"../../../../api/system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object, which overloads the <code>[]</code> operator to provide access to its internal character buffer. You can also convert the string to an array of chars by using the <a class=\"xref\" href=\"../../../../api/system.string#System_String_ToCharArray_\" data-linktype=\"relative-path\">ToCharArray</a> method. The following example uses <code>ToCharArray</code> to create the array. Some elements of this array are then modified. A string constructor that takes a char array as an input parameter is then called to create a new string.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideStrings#24\">    class ModifyStrings\n    {\n        static void Main()\n        {\n            string str = &quot;The quick brown fox jumped over the fence&quot;;\n            System.Console.WriteLine(str);\n\n            char[] chars = str.ToCharArray();\n            int animalIndex = str.IndexOf(&quot;fox&quot;);\n            if (animalIndex != -1)\n            {\n                chars[animalIndex++] = &#39;c&#39;;\n                chars[animalIndex++] = &#39;a&#39;;\n                chars[animalIndex] = &#39;t&#39;;\n            }\n\n            string str2 = new string(chars);\n            System.Console.WriteLine(str2);\n\n            // Keep the console window open in debug mode\n            System.Console.WriteLine(&quot;Press any key to exit.&quot;);\n            System.Console.ReadKey();\n        }\n    }\n    /* Output:\n      The quick brown fox jumped over the fence\n      The quick brown cat jumped over the fence \n    */\n</code></pre><h2 id=\"example-2\">Example</h2>\n<p> The following example is provided for those very rare situations in which you may want to modify a string in-place by using unsafe code in a manner similar to C-style char arrays. The example shows how to access the individual characters &quot;in-place&quot; by using the fixed keyword. It also demonstrates one possible side effect of unsafe operations on strings that results from the way that the C# compiler stores (interns) strings internally. In general, you should not use this technique unless it is absolutely necessary.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideStrings#29\">    class UnsafeString\n    {\n        unsafe static void Main(string[] args)\n        {\n            // Compiler will store (intern) \n            // these strings in same location.\n            string s1 = &quot;Hello&quot;;\n            string s2 = &quot;Hello&quot;;\n\n            // Change one string using unsafe code.\n            fixed (char* p = s1)\n            {\n                p[0] = &#39;C&#39;;\n            }\n\n            //  Both strings have changed.\n            Console.WriteLine(s1);\n            Console.WriteLine(s2);\n\n            // Keep console window open in debug mode.\n            Console.WriteLine(&quot;Press any key to exit.&quot;);\n            Console.ReadKey();\n        }\n\n    }\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">Strings</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"b6c20bba-ce22-43d7-ad1b-5ce65f714055\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"16\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/strings/how-to-modify-string-contents.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/strings/how-to-modify-string-contents.md\">\r\n<meta name=\"document_id\" content=\"4b4b22f3-87db-487a-80a3-6144e46a5b3e\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"How to: Modify String Contents (C# Programming Guide) | Microsoft Docs","ms.assetid":"b6c20bba-ce22-43d7-ad1b-5ce65f714055","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":16,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["strings [C#], modifying"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/strings/how-to-modify-string-contents.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/strings/how-to-modify-string-contents.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/strings/how-to-modify-string-contents.md","document_id":"4b4b22f3-87db-487a-80a3-6144e46a5b3e","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/strings/how-to-modify-string-contents","toc_asset_id":"articles/csharp/programming-guide/strings/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Modify String Contents (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":728,"_op_rawTitle":"<h1 id=\"how-to-modify-string-contents-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/strings/how-to-modify-string-contents.md\" sourcestartlinenumber=\"36\" sourceendlinenumber=\"36\">How to: Modify String Contents (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/strings/how-to-modify-string-contents","fileRelativePath":"articles/csharp/programming-guide/strings/how-to-modify-string-contents.html"},"themesRelativePathToOutputRoot":"_themes/"}