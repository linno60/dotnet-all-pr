{"content":"<div><div class=\"content\">\n<p><em>Concatenation</em> is the process of appending one string to the end of another string. When you concatenate string literals or string constants by using the <code>+</code> operator, the compiler creates a single string. No run time concatenation occurs. However, string variables can be concatenated only at run time. In this case, you should understand the performance implications of the various approaches.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following example shows how to split a long string literal into smaller strings in order to improve readability in the source code. These parts will be concatenated into a single string at compile time. There is no run time performance cost regardless of the number of strings involved.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideStrings#30\">        static void Main()\n        {\n            // Concatenation of literals is performed at compile time, not run time.\n            string text = &quot;Historically, the world of data and the world of objects &quot; +\n            &quot;have not been well integrated. Programmers work in C# or Visual Basic &quot; +\n            &quot;and also in SQL or XQuery. On the one side are concepts such as classes, &quot; +\n            &quot;objects, fields, inheritance, and .NET Framework APIs. On the other side &quot; +\n            &quot;are tables, columns, rows, nodes, and separate languages for dealing with &quot; +\n            &quot;them. Data types often require translation between the two worlds; there are &quot; +\n            &quot;different standard functions. Because the object world has no notion of query, a &quot; +\n            &quot;query can only be represented as a string without compile-time type checking or &quot; +\n            &quot;IntelliSense support in the IDE. Transferring data from SQL tables or XML trees to &quot; +\n            &quot;objects in memory is often tedious and error-prone.&quot;;\n\n            Console.WriteLine(text);\n        }\n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> To concatenate string variables, you can use the <code>+</code> or <code>+=</code> operators, or the <a class=\"xref\" href=\"../../../../api/system.string#System_String_Concat_\" data-linktype=\"relative-path\">Concat</a>, <a class=\"xref\" href=\"../../../../api/system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a> or <a class=\"xref\" href=\"../../../../api/system.text.stringbuilder#System_Text_StringBuilder_Append_\" data-linktype=\"relative-path\">Append</a> methods. The <code>+</code> operator is easy to use and makes for intuitive code. Even if you use several + operators in one statement, the string content is copied only once. But if you repeat this operation multiple times, for example in a loop, it might cause efficiency problems. For example, note the following code:  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideStrings#23\">        static void Main(string[] args)\n        {\n            // To run this program, provide a command line string.\n            // In Visual Studio, see Project &gt; Properties &gt; Debug.\n            string userName = args[0];\n            string date = DateTime.Today.ToShortDateString();\n\n            // Use the + and += operators for one-time concatenations.\n            string str = &quot;Hello &quot; + userName + &quot;. Today is &quot; + date + &quot;.&quot;;\n            System.Console.WriteLine(str);\n\n            str += &quot; How are you today?&quot;;\n            System.Console.WriteLine(str);\n\n            // Keep the console window open in debug mode.\n            Console.WriteLine(&quot;Press any key to exit.&quot;);\n            Console.ReadKey();\n        }\n\n        // Example output: \n        //  Hello Alexander. Today is 1/22/2008.\n        //  Hello Alexander. Today is 1/22/2008. How are you today?\n        //  Press any key to exit.\n        //\n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> In string concatenation operations, the C# compiler treats a null string the same as an empty string, but it does not convert the value of the original null string.  </p>\n</div>\n<p> If you are not concatenating large numbers of strings (for example, in a loop), the performance cost of this code is probably not significant. The same is true for the <a class=\"xref\" href=\"../../../../api/system.string#System_String_Concat_\" data-linktype=\"relative-path\">Concat</a> and <a class=\"xref\" href=\"../../../../api/system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a> methods.  </p>\n<p> However, when performance is important, you should always use the <a class=\"xref\" href=\"../../../../api/system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> class to concatenate strings. The following code uses the <a class=\"xref\" href=\"../../../../api/system.text.stringbuilder#System_Text_StringBuilder_Append_\" data-linktype=\"relative-path\">Append</a> method of the <a class=\"xref\" href=\"../../../../api/system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> class to concatenate strings without the chaining effect of the <code>+</code> operator.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideStrings#22\">    class StringBuilderTest\n    {\n        static void Main()\n        {\n            string text = null;\n\n            // Use StringBuilder for concatenation in tight loops.\n            System.Text.StringBuilder sb = new System.Text.StringBuilder();\n            for (int i = 0; i &lt; 100; i++)\n            {\n                sb.AppendLine(i.ToString());\n            }\n            System.Console.WriteLine(sb.ToString());\n\n            // Keep the console window open in debug mode.\n            System.Console.WriteLine(&quot;Press any key to exit.&quot;);\n            System.Console.ReadKey();\n        }\n    }\n    // Output:\n    // 0\n    // 1\n    // 2\n    // 3\n    // 4\n    // ...\n    //\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../api/system.string\" data-linktype=\"relative-path\">String</a><br> <a class=\"xref\" href=\"../../../../api/system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a><br> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">Strings</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"8e16736f-4096-4f3f-be0f-9d4c3ff63520\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"21\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/strings/how-to-concatenate-multiple-strings.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/strings/how-to-concatenate-multiple-strings.md\">\r\n<meta name=\"document_id\" content=\"1b5c490f-3b05-12fc-96b3-d628b2acd8db\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"How to: Concatenate Multiple Strings (C# Programming Guide) | Microsoft Docs","ms.assetid":"8e16736f-4096-4f3f-be0f-9d4c3ff63520","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":21,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["joining strings [C#]","concatenating strings [C#]","strings [C#], concatenation"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/strings/how-to-concatenate-multiple-strings.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/strings/how-to-concatenate-multiple-strings.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/strings/how-to-concatenate-multiple-strings.md","document_id":"1b5c490f-3b05-12fc-96b3-d628b2acd8db","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/strings/how-to-concatenate-multiple-strings","toc_asset_id":"articles/csharp/programming-guide/strings/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Concatenate Multiple Strings (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":619,"_op_rawTitle":"<h1 id=\"how-to-concatenate-multiple-strings-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/strings/how-to-concatenate-multiple-strings.md\" sourcestartlinenumber=\"38\" sourceendlinenumber=\"38\">How to: Concatenate Multiple Strings (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/strings/how-to-concatenate-multiple-strings","fileRelativePath":"articles/csharp/programming-guide/strings/how-to-concatenate-multiple-strings.html"},"themesRelativePathToOutputRoot":"_themes/"}