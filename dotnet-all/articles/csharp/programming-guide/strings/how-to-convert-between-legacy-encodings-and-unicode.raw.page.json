{"content":"<div><div class=\"content\">\n<p>In C#, all strings in memory are encoded as Unicode (UTF-16). When you bring data from storage into a <code>string</code> object, the data is automatically converted to UTF-16. If the data contains only ASCII values from 0 through 127, the conversion requires no extra effort on your part. However, if the source text contains extended ASCII byte values (128 through 255), the extended characters will be interpreted by default according to the current code page. To specify that the source text should be interpreted according to a different code page, use the <a class=\"xref\" href=\"../../../../api/system.text.encoding\" data-linktype=\"relative-path\">System.Text.Encoding</a> class as shown in the following example.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following example shows how to convert a text file that has been encoded in 8-bit ASCII, interpreting the source text according to Windows Code Page 737.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideStrings#34\">class ANSIToUnicode\n{\n    static void Main()\n    {\n        // Create a file that contains the Greek work ψυχή (psyche) when interpreted by using \n        // code page 737 ((DOS) Greek). You can also create the file by using Character Map \n        // to paste the characters into Microsoft Word and then &quot;Save As&quot; by using the DOS\n        // (Greek) encoding. (Word will actually create a six-byte file by appending &quot;\\r\\n&quot; at the end.)\n        System.IO.File.WriteAllBytes(@&quot;greek.txt&quot;, new byte[] { 0xAF, 0xAC, 0xAE, 0x9E });\n\n        // Specify the code page to correctly interpret byte values\n        Encoding encoding = Encoding.GetEncoding(737); //(DOS) Greek code page\n        byte[] codePageValues = System.IO.File.ReadAllBytes(@&quot;greek.txt&quot;);\n\n        // Same content is now encoded as UTF-16\n        string unicodeValues = encoding.GetString(codePageValues);\n\n        // Show that the text content is still intact in Unicode string\n        // (Add a reference to System.Windows.Forms.dll)\n        System.Windows.Forms.MessageBox.Show(unicodeValues);\n\n        // Same content &quot;ψυχή&quot; is stored as UTF-8\n        System.IO.File.WriteAllText(@&quot;greek_unicode.txt&quot;, unicodeValues);\n\n        // Conversion is complete. Show the bytes to prove the conversion. \n        Console.WriteLine(&quot;8-bit encoding byte values:&quot;);\n        foreach(byte b in codePageValues)\n            Console.Write(&quot;{0:X}-&quot;, b);\n\n        Console.WriteLine();\n        Console.WriteLine(&quot;Unicode values:&quot;);\n        string unicodeString = System.IO.File.ReadAllText(&quot;greek_unicode.txt&quot;);\n        System.Globalization.TextElementEnumerator enumerator = \n            System.Globalization.StringInfo.GetTextElementEnumerator(unicodeString);\n        while(enumerator.MoveNext())\n        {                \n           string s = enumerator.GetTextElement();\n           int i = Char.ConvertToUtf32(s, 0);                \n           Console.Write(&quot;{0:X}-&quot;, i);          \n        }                \n        Console.WriteLine();\n        \n        // Keep the console window open in debug mode.\n        Console.Write(&quot;Press any key to exit.&quot;);\n        Console.ReadKey();\n    }\n    /*\n     * Output:\n        8-bit encoding byte values:\n        AF-AC-AE-9E\n        Unicode values:\n        3C8-3C5-3C7-3B7\n    */\n}\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"index\" data-linktype=\"relative-path\">Strings</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"4eed7d8e-47ab-4a7c-8b95-9645a0ef000b\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"11\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/strings/how-to-convert-between-legacy-encodings-and-unicode.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/strings/how-to-convert-between-legacy-encodings-and-unicode.md\">\r\n<meta name=\"document_id\" content=\"9732b9c8-343b-478f-979a-6aecabf6c116\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"How to: Convert Between Legacy Encodings and Unicode (C# Programming Guide) | Microsoft Docs","ms.assetid":"4eed7d8e-47ab-4a7c-8b95-9645a0ef000b","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":11,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["conversions [C#], legacy to unicode encoding","strings [C#], converting between encodings"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/strings/how-to-convert-between-legacy-encodings-and-unicode.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/strings/how-to-convert-between-legacy-encodings-and-unicode.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/strings/how-to-convert-between-legacy-encodings-and-unicode.md","document_id":"9732b9c8-343b-478f-979a-6aecabf6c116","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/strings/how-to-convert-between-legacy-encodings-and-unicode","toc_asset_id":"articles/csharp/programming-guide/strings/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Convert Between Legacy Encodings and Unicode (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":348,"_op_rawTitle":"<h1 id=\"how-to-convert-between-legacy-encodings-and-unicode-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/strings/how-to-convert-between-legacy-encodings-and-unicode.md\" sourcestartlinenumber=\"37\" sourceendlinenumber=\"37\">How to: Convert Between Legacy Encodings and Unicode (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/strings/how-to-convert-between-legacy-encodings-and-unicode","fileRelativePath":"articles/csharp/programming-guide/strings/how-to-convert-between-legacy-encodings-and-unicode.html"},"themesRelativePathToOutputRoot":"_themes/"}