{"content":"<div><div class=\"content\">\n<p>To determine whether a string is a valid representation of a specified numeric type, use the static <code>TryParse</code> method that is implemented by all primitive numeric types and also by types such as <a class=\"xref\" href=\"../../../../api/system.datetime\" data-linktype=\"relative-path\">DateTime</a> and <a class=\"xref\" href=\"../../../../api/system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a>. The following example shows how to determine whether &quot;108&quot; is a valid <a href=\"../../language-reference/keywords/int\" data-linktype=\"relative-path\">int</a>.  </p>\n<pre class=\"loading\"><code>int i = 0;   \nstring s = &quot;108&quot;;  \nbool result = int.TryParse(s, out i); //i now = 108  \n</code></pre><p> If the string contains nonnumeric characters or the numeric value is too large or too small for the particular type you have specified, <code>TryParse</code> returns false and sets the out parameter to zero. Otherwise, it returns true and sets the out parameter to the numeric value of the string.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> A string may contain only numeric characters and still not be valid for the type whose <code>TryParse</code> method that you use. For example, &quot;256&quot; is not a valid value for <code>byte</code> but it is valid for <code>int</code>. &quot;98.6&quot; is not a valid value for <code>int</code> but it is a valid <code>decimal</code>.  </p>\n</div>\n<h2 id=\"example\">Example</h2>\n<p> The following examples show how to use <code>TryParse</code> with string representations of <code>long</code>, <code>byte</code>, and <code>decimal</code> values.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideStrings#14\">\nstring numString = &quot;1287543&quot;; //&quot;1287543.0&quot; will return false for a long\nlong number1 = 0;\nbool canConvert = long.TryParse(numString, out number1);\nif (canConvert == true)\n  Console.WriteLine(&quot;number1 now = {0}&quot;, number1);\nelse\n  Console.WriteLine(&quot;numString is not a valid long&quot;);\n\nbyte number2 = 0;\nnumString = &quot;255&quot;; // A value of 256 will return false\ncanConvert = byte.TryParse(numString, out number2);\nif (canConvert == true)\n  Console.WriteLine(&quot;number2 now = {0}&quot;, number2);\nelse\n  Console.WriteLine(&quot;numString is not a valid byte&quot;);\n\ndecimal number3 = 0;\nnumString = &quot;27.3&quot;; //&quot;27&quot; is also a valid decimal\ncanConvert = decimal.TryParse(numString, out number3);\nif (canConvert == true)\n  Console.WriteLine(&quot;number3 now = {0}&quot;, number3);\nelse\n  Console.WriteLine(&quot;number3 is not a valid decimal&quot;);            \n</code></pre><h2 id=\"robust-programming\">Robust Programming</h2>\n<p> Primitive numeric types also implement the <code>Parse</code> static method, which throws an exception if the string is not a valid number. <code>TryParse</code> is generally more efficient because it just returns false if the number is not valid.  </p>\n<h2 id=\"net-framework-security\">.NET Framework Security</h2>\n<p> Always use the <code>TryParse</code> or <code>Parse</code> methods to validate user input from controls such as text boxes and combo boxes.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../types/how-to-convert-a-byte-array-to-an-int\" data-linktype=\"relative-path\">How to: Convert a byte Array to an int</a><br> <a href=\"../types/how-to-convert-a-string-to-a-number\" data-linktype=\"relative-path\">How to: Convert a String to a Number</a><br> <a href=\"../types/how-to-convert-between-hexadecimal-strings-and-numeric-types\" data-linktype=\"relative-path\">How to: Convert Between Hexadecimal Strings and Numeric Types</a><br> <a href=\"http://msdn.microsoft.com/library/e39324ee-72e5-42d4-a80d-bf3ee7fc6c59\" data-linktype=\"external\">Parsing Numeric Strings</a><br> <a href=\"../../../standard/base-types/formatting-types\" data-linktype=\"relative-path\">Formatting Types</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"ms.assetid\" content=\"a4e84e10-ea0a-489f-a868-503dded9d85f\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"9\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/strings/how-to-determine-whether-a-string-represents-a-numeric-value.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/strings/how-to-determine-whether-a-string-represents-a-numeric-value.md\">\r\n<meta name=\"document_id\" content=\"5b9a5e21-2361-ad46-0c98-f6b3d7a1f0cb\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","uhfHeaderId":"MSDocsHeader-DotNet","title":"How to: Determine Whether a String Represents a Numeric Value (C# Programming Guide) | Microsoft Docs","ms.assetid":"a4e84e10-ea0a-489f-a868-503dded9d85f","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":9,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["numeric strings [C#]","validating numeric input [C#]","strings [C#], numeric"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/strings/how-to-determine-whether-a-string-represents-a-numeric-value.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/strings/how-to-determine-whether-a-string-represents-a-numeric-value.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/strings/how-to-determine-whether-a-string-represents-a-numeric-value.md","document_id":"5b9a5e21-2361-ad46-0c98-f6b3d7a1f0cb","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/strings/how-to-determine-whether-a-string-represents-a-numeric-value","toc_asset_id":"articles/csharp/programming-guide/strings/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Determine Whether a String Represents a Numeric Value (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":386,"_op_rawTitle":"<h1 id=\"how-to-determine-whether-a-string-represents-a-numeric-value-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/strings/how-to-determine-whether-a-string-represents-a-numeric-value.md\" sourcestartlinenumber=\"38\" sourceendlinenumber=\"38\">How to: Determine Whether a String Represents a Numeric Value (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/strings/how-to-determine-whether-a-string-represents-a-numeric-value","fileRelativePath":"articles/csharp/programming-guide/strings/how-to-determine-whether-a-string-represents-a-numeric-value.html"},"themesRelativePathToOutputRoot":"_themes/"}