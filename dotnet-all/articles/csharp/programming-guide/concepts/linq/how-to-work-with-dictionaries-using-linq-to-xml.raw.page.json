{"content":"<div><div class=\"content\">\n<p>It is often convenient to convert varieties of data structures to XML, and XML back to other data structures. This topic shows a specific implementation of this general approach by converting a <a class=\"xref\" href=\"../../../../../api/system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a> to XML and back.  </p>\n<h2 id=\"example\">Example</h2>\n<p> This example uses a form of functional construction in which a query projects new <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> objects, and the resulting collection is passed as an argument to the constructor of the Root <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> object.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">Dictionary&lt;string, string&gt; dict = new Dictionary&lt;string, string&gt;();  \ndict.Add(&quot;Child1&quot;, &quot;Value1&quot;);  \ndict.Add(&quot;Child2&quot;, &quot;Value2&quot;);  \ndict.Add(&quot;Child3&quot;, &quot;Value3&quot;);  \ndict.Add(&quot;Child4&quot;, &quot;Value4&quot;);  \nXElement root = new XElement(&quot;Root&quot;,  \n    from keyValue in dict  \n    select new XElement(keyValue.Key, keyValue.Value)  \n);  \nConsole.WriteLine(root);  \n</code></pre><p> This code produces the following output:  </p>\n<pre class=\"loading\"><code class=\"lang-xml\">&lt;Root&gt;  \n  &lt;Child1&gt;Value1&lt;/Child1&gt;  \n  &lt;Child2&gt;Value2&lt;/Child2&gt;  \n  &lt;Child3&gt;Value3&lt;/Child3&gt;  \n  &lt;Child4&gt;Value4&lt;/Child4&gt;  \n&lt;/Root&gt;  \n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> The following code creates a dictionary from XML.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">XElement root = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Child1&quot;, &quot;Value1&quot;),  \n    new XElement(&quot;Child2&quot;, &quot;Value2&quot;),  \n    new XElement(&quot;Child3&quot;, &quot;Value3&quot;),  \n    new XElement(&quot;Child4&quot;, &quot;Value4&quot;)  \n);  \n\nDictionary&lt;string, string&gt; dict = new Dictionary&lt;string, string&gt;();  \nforeach (XElement el in root.Elements())  \n    dict.Add(el.Name.LocalName, el.Value);  \nforeach (string str in dict.Keys)  \n    Console.WriteLine(&quot;{0}:{1}&quot;, str, dict[str]);  \n</code></pre><p> This code produces the following output:  </p>\n<pre class=\"loading\"><code>Child1:Value1  \nChild2:Value2  \nChild3:Value3  \nChild4:Value4  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"projections-and-transformations-linq-to-xml\" data-linktype=\"relative-path\">Projections and Transformations (LINQ to XML) (C#)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"57bcefe3-8433-4d3b-935a-511c9bcbdfa8\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-work-with-dictionaries-using-linq-to-xml.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-work-with-dictionaries-using-linq-to-xml.md\">\r\n<meta name=\"document_id\" content=\"38f52e90-2f2d-9d23-f817-16fbd3c0a299\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc1.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"How to: Work with Dictionaries Using LINQ to XML (C#) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"57bcefe3-8433-4d3b-935a-511c9bcbdfa8","caps.latest.revision":3,"ms.topic":"article","dev_langs":["csharp"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-work-with-dictionaries-using-linq-to-xml.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-work-with-dictionaries-using-linq-to-xml.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-work-with-dictionaries-using-linq-to-xml.md","document_id":"38f52e90-2f2d-9d23-f817-16fbd3c0a299","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/linq/how-to-work-with-dictionaries-using-linq-to-xml","toc_asset_id":"articles/csharp/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Work with Dictionaries Using LINQ to XML (C#)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":176,"_op_rawTitle":"<h1 id=\"how-to-work-with-dictionaries-using-linq-to-xml-c\" sourcefile=\"docs/csharp/programming-guide/concepts/linq/how-to-work-with-dictionaries-using-linq-to-xml.md\" sourcestartlinenumber=\"20\" sourceendlinenumber=\"20\">How to: Work with Dictionaries Using LINQ to XML (C#)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/linq/how-to-work-with-dictionaries-using-linq-to-xml","fileRelativePath":"articles/csharp/programming-guide/concepts/linq/how-to-work-with-dictionaries-using-linq-to-xml.html"},"themesRelativePathToOutputRoot":"_themes/"}