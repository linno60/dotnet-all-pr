{"content":"<div><div class=\"content\">\n<p>In some cases you might want to project a query to a new type, even though you know you will only use this type for a short while. It is a lot of extra work to create a new type just to use in the projection. A more efficient approach in this case is to project to an anonymous type. Anonymous types allow you to define a class, then declare and initialize an object of that class, without giving the class a name.  </p>\n<p> Anonymous types are the C# implementation of the mathematical concept of a <em>tuple</em>. The mathematical term tuple originated from the sequence single, double, triple, quadruple, quintuple, n-tuple. It refers to a finite sequence of objects, each of a specific type. Sometimes this is called a list of name/value pairs. For example, the contents of an address in the <a href=\"sample-xml-file-typical-purchase-order-linq-to-xml-1\" data-linktype=\"relative-path\">Sample XML File: Typical Purchase Order (LINQ to XML)</a> XML document could be expressed as follows:  </p>\n<pre class=\"loading\"><code>Name: Ellen Adams  \nStreet: 123 Maple Street  \nCity: Mill Valley  \nState: CA  \nZip: 90952  \nCountry: USA  \n</code></pre><p> When you create an instance of an anonymous type, it is convenient to think of it as creating a tuple of order n. If you write a query that creates a tuple in the <code>select</code> clause, the query returns an <code>IEnumerable</code> of the tuple.  </p>\n<h2 id=\"example\">Example</h2>\n<p> In this example, the <code>select</code> clause projects an anonymous type. The example then uses <code>var</code> to create the <code>IEnumerable</code> object. Within the <code>foreach</code> loop, the iteration variable becomes an instance of the anonymous type created in the query expression.  </p>\n<p> This example uses the following XML document: <a href=\"sample-xml-file-customers-and-orders-linq-to-xml-2\" data-linktype=\"relative-path\">Sample XML File: Customers and Orders (LINQ to XML)</a>.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">XElement custOrd = XElement.Load(&quot;CustomersOrders.xml&quot;);  \nvar custList =  \n    from el in custOrd.Element(&quot;Customers&quot;).Elements(&quot;Customer&quot;)  \n    select new {  \n        CustomerID = (string)el.Attribute(&quot;CustomerID&quot;),  \n        CompanyName = (string)el.Element(&quot;CompanyName&quot;),  \n        ContactName = (string)el.Element(&quot;ContactName&quot;)  \n    };  \nforeach (var cust in custList)  \n    Console.WriteLine(&quot;{0}:{1}:{2}&quot;, cust.CustomerID, cust.CompanyName, cust.ContactName);  \n</code></pre><p> This code produces the following output:  </p>\n<pre class=\"loading\"><code>GREAL:Great Lakes Food Market:Howard Snyder  \nHUNGC:Hungry Coyote Import Store:Yoshi Latimer  \nLAZYK:Lazy K Kountry Store:John Steel  \nLETSS:Let&#39;s Stop N Shop:Jaime Yorres  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"projections-and-transformations-linq-to-xml\" data-linktype=\"relative-path\">Projections and Transformations (LINQ to XML) (C#)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"5cb9be13-5ac4-4373-a034-b3520a5b2dec\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-project-an-anonymous-type.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-project-an-anonymous-type.md\">\r\n<meta name=\"document_id\" content=\"f6799518-cc12-cf8d-8fe6-1daea509b4c0\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"How to: Project an Anonymous Type (C#) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"5cb9be13-5ac4-4373-a034-b3520a5b2dec","caps.latest.revision":3,"ms.topic":"article","dev_langs":["csharp"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-project-an-anonymous-type.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-project-an-anonymous-type.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-project-an-anonymous-type.md","document_id":"f6799518-cc12-cf8d-8fe6-1daea509b4c0","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/linq/how-to-project-an-anonymous-type","toc_asset_id":"articles/csharp/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Project an Anonymous Type (C#)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":341,"_op_rawTitle":"<h1 id=\"how-to-project-an-anonymous-type-c\" sourcefile=\"docs/csharp/programming-guide/concepts/linq/how-to-project-an-anonymous-type.md\" sourcestartlinenumber=\"20\" sourceendlinenumber=\"20\">How to: Project an Anonymous Type (C#)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/linq/how-to-project-an-anonymous-type","fileRelativePath":"articles/csharp/programming-guide/concepts/linq/how-to-project-an-anonymous-type.html"},"themesRelativePathToOutputRoot":"_themes/"}