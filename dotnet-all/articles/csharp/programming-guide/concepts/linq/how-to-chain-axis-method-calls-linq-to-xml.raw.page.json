{"content":"<div><div class=\"content\">\n<p>A common pattern that you will use in your code is to call an axis method, then call one of the extension method axes.  </p>\n<p> There are two axes with the name of <code>Elements</code> that return a collection of elements: the <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xcontainer#System_Xml_Linq_XContainer_Elements_\" data-linktype=\"relative-path\">Elements</a> method and the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb354751(v=vs.110).aspx\" data-linktype=\"external\">Extensions.Elements</a> method. You can combine these two axes to find all elements of a specified name at a given depth in the tree.  </p>\n<h2 id=\"example\">Example</h2>\n<p> This example uses <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xcontainer#System_Xml_Linq_XContainer_Elements_\" data-linktype=\"relative-path\">Elements</a> and <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb354751(v=vs.110).aspx\" data-linktype=\"external\">Extensions.Elements</a> to find all <code>Name</code> elements in all <code>Address</code> elements in all <code>PurchaseOrder</code> elements.  </p>\n<p> This example uses the following XML document: <a href=\"sample-xml-file-multiple-purchase-orders-linq-to-xml\" data-linktype=\"relative-path\">Sample XML File: Multiple Purchase Orders (LINQ to XML)</a>.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">XElement purchaseOrders = XElement.Load(&quot;PurchaseOrders.xml&quot;);  \nIEnumerable&lt;XElement&gt; names =  \n    from el in purchaseOrders  \n        .Elements(&quot;PurchaseOrder&quot;)  \n        .Elements(&quot;Address&quot;)  \n        .Elements(&quot;Name&quot;)  \n    select el;  \nforeach (XElement e in names)  \n    Console.WriteLine(e);  \n</code></pre><p> This example produces the following output:  </p>\n<pre class=\"loading\"><code>&lt;Name&gt;Ellen Adams&lt;/Name&gt;  \n&lt;Name&gt;Tai Yee&lt;/Name&gt;  \n&lt;Name&gt;Cristian Osorio&lt;/Name&gt;  \n&lt;Name&gt;Cristian Osorio&lt;/Name&gt;  \n&lt;Name&gt;Jessica Arnold&lt;/Name&gt;  \n&lt;Name&gt;Jessica Arnold&lt;/Name&gt;  \n</code></pre><p> This works because one of the implementations of the <code>Elements</code> axis is as an extension method on <a class=\"xref\" href=\"../../../../../api/system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> of <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xcontainer\" data-linktype=\"relative-path\">XContainer</a>. <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> derives from <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xcontainer\" data-linktype=\"relative-path\">XContainer</a>, so you can call the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb354751(v=vs.110).aspx\" data-linktype=\"external\">Extensions.Elements</a> method on the results of a call to the <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xcontainer#System_Xml_Linq_XContainer_Elements_\" data-linktype=\"relative-path\">Elements</a> method.  </p>\n<h2 id=\"example-1\">Example</h2>\n<p> Sometimes you want to retrieve all elements at a particular element depth when there might or might not be intervening ancestors. For example, in the following document, you might want to retrieve all the <code>ConfigParameter</code> elements that are children of the <code>Customer</code> element, but not the <code>ConfigParameter</code> that is a child of the <code>Root</code> element.  </p>\n<pre class=\"loading\"><code class=\"lang-xml\">&lt;Root&gt;  \n  &lt;ConfigParameter&gt;RootConfigParameter&lt;/ConfigParameter&gt;  \n  &lt;Customer&gt;  \n    &lt;Name&gt;Frank&lt;/Name&gt;  \n    &lt;Config&gt;  \n      &lt;ConfigParameter&gt;FirstConfigParameter&lt;/ConfigParameter&gt;  \n    &lt;/Config&gt;  \n  &lt;/Customer&gt;  \n  &lt;Customer&gt;  \n    &lt;Name&gt;Bob&lt;/Name&gt;  \n    &lt;!--This customer doesn&#39;t have a Config element--&gt;  \n  &lt;/Customer&gt;  \n  &lt;Customer&gt;  \n    &lt;Name&gt;Bill&lt;/Name&gt;  \n    &lt;Config&gt;  \n      &lt;ConfigParameter&gt;SecondConfigParameter&lt;/ConfigParameter&gt;  \n    &lt;/Config&gt;  \n  &lt;/Customer&gt;  \n&lt;/Root&gt;  \n</code></pre><p> To do this, you can use the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb354751(v=vs.110).aspx\" data-linktype=\"external\">Extensions.Elements</a> axis, as follows:  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">XElement root = XElement.Load(&quot;Irregular.xml&quot;);  \nIEnumerable&lt;XElement&gt; configParameters =   \n    root.Elements(&quot;Customer&quot;).Elements(&quot;Config&quot;).  \n    Elements(&quot;ConfigParameter&quot;);  \nforeach (XElement cp in configParameters)  \n    Console.WriteLine(cp);  \n</code></pre><p> This example produces the following output:  </p>\n<pre class=\"loading\"><code>&lt;ConfigParameter&gt;FirstConfigParameter&lt;/ConfigParameter&gt;  \n&lt;ConfigParameter&gt;SecondConfigParameter&lt;/ConfigParameter&gt;  \n</code></pre><h2 id=\"example-2\">Example</h2>\n<p> The following example shows the same technique for XML that is in a namespace. For more information, see <a href=\"working-with-xml-namespaces\" data-linktype=\"relative-path\">Working with XML Namespaces (C#)</a>.  </p>\n<p> This example uses the following XML document: <a href=\"sample-xml-file-multiple-purchase-orders-in-a-namespace\" data-linktype=\"relative-path\">Sample XML File: Multiple Purchase Orders in a Namespace</a>.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement purchaseOrders = XElement.Load(&quot;PurchaseOrdersInNamespace.xml&quot;);  \nIEnumerable&lt;XElement&gt; names =  \n    from el in purchaseOrders  \n        .Elements(aw + &quot;PurchaseOrder&quot;)  \n        .Elements(aw + &quot;Address&quot;)  \n        .Elements(aw + &quot;Name&quot;)  \n    select el;  \nforeach (XElement e in names)  \n    Console.WriteLine(e);  \n</code></pre><p> This example produces the following output:  </p>\n<pre class=\"loading\"><code>&lt;aw:Name xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;Ellen Adams&lt;/aw:Name&gt;  \n&lt;aw:Name xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;Tai Yee&lt;/aw:Name&gt;  \n&lt;aw:Name xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;Cristian Osorio&lt;/aw:Name&gt;  \n&lt;aw:Name xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;Cristian Osorio&lt;/aw:Name&gt;  \n&lt;aw:Name xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;Jessica Arnold&lt;/aw:Name&gt;  \n&lt;aw:Name xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;Jessica Arnold&lt;/aw:Name&gt;  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"linq-to-xml-axes\" data-linktype=\"relative-path\">LINQ to XML Axes (C#)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"067e6da2-ee32-486d-803c-e611b328e39a\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-chain-axis-method-calls-linq-to-xml.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-chain-axis-method-calls-linq-to-xml.md\">\r\n<meta name=\"document_id\" content=\"0e34507e-19ad-5394-fec8-3d47993bd7f7\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"How to: Chain Axis Method Calls (LINQ to XML) (C#) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"067e6da2-ee32-486d-803c-e611b328e39a","caps.latest.revision":3,"ms.topic":"article","dev_langs":["csharp"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-chain-axis-method-calls-linq-to-xml.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-chain-axis-method-calls-linq-to-xml.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-chain-axis-method-calls-linq-to-xml.md","document_id":"0e34507e-19ad-5394-fec8-3d47993bd7f7","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/linq/how-to-chain-axis-method-calls-linq-to-xml","toc_asset_id":"articles/csharp/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Chain Axis Method Calls (LINQ to XML) (C#)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":391,"_op_rawTitle":"<h1 id=\"how-to-chain-axis-method-calls-linq-to-xml-c\" sourcefile=\"docs/csharp/programming-guide/concepts/linq/how-to-chain-axis-method-calls-linq-to-xml.md\" sourcestartlinenumber=\"20\" sourceendlinenumber=\"20\">How to: Chain Axis Method Calls (LINQ to XML) (C#)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/linq/how-to-chain-axis-method-calls-linq-to-xml","fileRelativePath":"articles/csharp/programming-guide/concepts/linq/how-to-chain-axis-method-calls-linq-to-xml.html"},"themesRelativePathToOutputRoot":"_themes/"}