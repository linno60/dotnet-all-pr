{"content":"<div><div class=\"content\">\n<p>This topic illustrates how to project, or populate, an object graph from XML.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following code populates an object graph with the <code>Address</code>, <code>PurchaseOrder</code>, and <code>PurchaseOrderItem</code> classes from the <a href=\"sample-xml-file-typical-purchase-order-linq-to-xml-1\" data-linktype=\"relative-path\">Sample XML File: Typical Purchase Order (LINQ to XML)</a> XML document.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">class Address  \n{  \n    public enum AddressUse  \n    {  \n        Shipping,  \n        Billing,  \n    }  \n\n    private AddressUse addressType;  \n    private string name;  \n    private string street;  \n    private string city;  \n    private string state;  \n    private string zip;  \n    private string country;  \n\n    public AddressUse AddressType {  \n        get { return addressType; } set { addressType = value; }  \n    }  \n\n    public string Name {  \n        get { return name; } set { name = value; }  \n    }  \n\n    public string Street {  \n        get { return street; } set { street = value; }  \n    }  \n\n    public string City {  \n        get { return city; } set { city = value; }  \n    }  \n\n    public string State {  \n        get { return state; } set { state = value; }  \n    }  \n\n    public string Zip {  \n        get { return zip; } set { zip = value; }  \n    }  \n\n    public string Country {  \n        get { return country; } set { country = value; }  \n    }  \n\n    public override string ToString()  \n    {  \n        StringBuilder sb = new StringBuilder();  \n        sb.Append(String.Format(&quot;Type: {0}\\n&quot;,  \n          addressType == AddressUse.Shipping ? &quot;Shipping&quot; : &quot;Billing&quot;));  \n        sb.Append(String.Format(&quot;Name: {0}\\n&quot;, name));  \n        sb.Append(String.Format(&quot;Street: {0}\\n&quot;, street));  \n        sb.Append(String.Format(&quot;City: {0}\\n&quot;, city));  \n        sb.Append(String.Format(&quot;State: {0}\\n&quot;, state));  \n        sb.Append(String.Format(&quot;Zip: {0}\\n&quot;, zip));  \n        sb.Append(String.Format(&quot;Country: {0}\\n&quot;, country));  \n        return sb.ToString();  \n    }  \n}  \n\nclass PurchaseOrderItem  \n{  \n    private string partNumber;  \n    private string productName;  \n    private int quantity;  \n    private Decimal usPrice;  \n    private string comment;  \n    private DateTime shipDate;  \n\n    public string PartNumber {  \n        get { return partNumber; } set { partNumber = value; }  \n    }  \n\n    public string ProductName {  \n        get { return productName; } set { productName = value; }  \n    }  \n\n    public int Quantity {  \n        get { return quantity; } set { quantity = value; }  \n    }  \n\n    public Decimal USPrice {  \n        get { return usPrice; } set { usPrice = value; }  \n    }  \n\n    public string Comment {  \n        get { return comment; } set { comment = value; }  \n    }  \n\n    public DateTime ShipDate {  \n        get { return shipDate; } set { shipDate = value; }  \n    }  \n\n    public override string ToString()  \n    {  \n        StringBuilder sb = new StringBuilder();  \n        sb.Append(String.Format(&quot;PartNumber: {0}\\n&quot;, partNumber));  \n        sb.Append(String.Format(&quot;ProductName: {0}\\n&quot;, productName));  \n        sb.Append(String.Format(&quot;Quantity: {0}\\n&quot;, quantity));  \n        sb.Append(String.Format(&quot;USPrice: {0}\\n&quot;, usPrice));  \n        if (comment != null)  \n            sb.Append(String.Format(&quot;Comment: {0}\\n&quot;, comment));  \n        if (shipDate != DateTime.MinValue)  \n            sb.Append(String.Format(&quot;ShipDate: {0:d}\\n&quot;, shipDate));  \n        return sb.ToString();  \n    }  \n}  \n\nclass PurchaseOrder  \n{  \n    private string purchaseOrderNumber;  \n    private DateTime orderDate;  \n    private string comment;  \n    private List&lt;Address&gt; addresses;  \n    private List&lt;PurchaseOrderItem&gt; items;  \n\n    public string PurchaseOrderNumber {  \n        get { return purchaseOrderNumber; } set { purchaseOrderNumber = value; }  \n    }  \n\n    public DateTime OrderDate {  \n        get { return orderDate; } set { orderDate = value; }  \n    }  \n\n    public string Comment {  \n        get { return comment; } set { comment = value; }  \n    }  \n\n    public List&lt;Address&gt; Addresses {  \n        get { return addresses; } set { addresses = value; }  \n    }  \n\n    public List&lt;PurchaseOrderItem&gt; Items {  \n        get { return items; } set { items = value; }  \n    }  \n\n    public override string ToString()  \n    {  \n        StringBuilder sb = new StringBuilder();  \n        sb.Append(String.Format(&quot;PurchaseOrderNumber: {0}\\n&quot;, purchaseOrderNumber));  \n        sb.Append(String.Format(&quot;OrderDate: {0:d}\\n&quot;, orderDate));  \n        sb.Append(&quot;\\n&quot;);  \n        sb.Append(&quot;Addresses\\n&quot;);  \n        sb.Append(&quot;=====\\n&quot;);  \n        foreach (Address address in addresses)  \n        {  \n            sb.Append(address);  \n            sb.Append(&quot;\\n&quot;);  \n        }  \n        sb.Append(&quot;Items\\n&quot;);  \n        sb.Append(&quot;=====\\n&quot;);  \n        foreach (PurchaseOrderItem item in items)  \n        {  \n            sb.Append(item);  \n            sb.Append(&quot;\\n&quot;);  \n        }  \n        return sb.ToString();  \n    }  \n}  \n\nclass Program {  \n    public static void Main()  \n    {  \n        XElement po = XElement.Load(&quot;PurchaseOrder.xml&quot;);  \n        PurchaseOrder purchaseOrder = new PurchaseOrder {  \n            PurchaseOrderNumber = (string)po.Attribute(&quot;PurchaseOrderNumber&quot;),  \n            OrderDate = (DateTime)po.Attribute(&quot;OrderDate&quot;),  \n            Addresses = (  \n                            from a in po.Elements(&quot;Address&quot;)  \n                            select new Address {  \n                                AddressType = ((string)a.Attribute(&quot;Type&quot;) == &quot;Shipping&quot;) ?  \n                                    Address.AddressUse.Shipping :   \n                                    Address.AddressUse.Billing,  \n                                Name = (string)a.Element(&quot;Name&quot;),  \n                                Street = (string)a.Element(&quot;Street&quot;),  \n                                City = (string)a.Element(&quot;City&quot;),  \n                                State = (string)a.Element(&quot;State&quot;),  \n                                Zip = (string)a.Element(&quot;Zip&quot;),  \n                                Country = (string)a.Element(&quot;Country&quot;)  \n                            }  \n                        ).ToList(),  \n            Items = (  \n                        from i in po.Element(&quot;Items&quot;).Elements(&quot;Item&quot;)  \n                        select new PurchaseOrderItem {  \n                            PartNumber = (string)i.Attribute(&quot;PartNumber&quot;),  \n                            ProductName = (string)i.Element(&quot;ProductName&quot;),  \n                            Quantity = (int)i.Element(&quot;Quantity&quot;),  \n                            USPrice = (Decimal)i.Element(&quot;USPrice&quot;),  \n                            Comment = (string)i.Element(&quot;Comment&quot;),  \n                            ShipDate = (i.Element(&quot;ShipDate&quot;) != null) ?  \n                                (DateTime)i.Element(&quot;ShipDate&quot;) :  \n                                DateTime.MinValue  \n                        }  \n                    ).ToList()  \n        };  \n        Console.WriteLine(purchaseOrder);  \n    }  \n}  \n</code></pre><p> In this example, the result of the LINQ query is returned as an <a class=\"xref\" href=\"../../../../../api/system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> of <code>PurchaseOrderItem</code>. The items in the <code>PurchaseOrder</code> class are of type <a class=\"xref\" href=\"../../../../../api/system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> of <code>PurchaseOrderItem</code>. The code uses the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb342261(v=vs.110).aspx\" data-linktype=\"external\">ToList</a> extension method to create a <a class=\"xref\" href=\"../../../../../api/system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> collection from the results of the query.  </p>\n<p> The example produces the following output:  </p>\n<pre class=\"loading\"><code>PurchaseOrderNumber: 99503  \nOrderDate: 10/20/1999  \n\nAddresses  \n=====  \nType: Shipping  \nName: Ellen Adams  \nStreet: 123 Maple Street  \nCity: Mill Valley  \nState: CA  \nZip: 10999  \nCountry: USA  \n\nType: Billing  \nName: Tai Yee  \nStreet: 8 Oak Avenue  \nCity: Old Town  \nState: PA  \nZip: 95819  \nCountry: USA  \n\nItems  \n=====  \nPartNumber: 872-AA  \nProductName: Lawnmower  \nQuantity: 1  \nUSPrice: 148.95  \nComment: Confirm this is electric  \n\nPartNumber: 926-AA  \nProductName: Baby Monitor  \nQuantity: 2  \nUSPrice: 39.98  \nShipDate: 5/21/1999  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb357126(v=vs.110).aspx\" data-linktype=\"external\">Select</a><br> <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb342261(v=vs.110).aspx\" data-linktype=\"external\">ToList</a><br> <a href=\"projections-and-transformations-linq-to-xml\" data-linktype=\"relative-path\">Projections and Transformations (LINQ to XML) (C#)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"293d15d5-3eaf-48de-9a02-3e13cb117b5b\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-21 01:42 AM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-project-an-object-graph.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/csharp/programming-guide/concepts/linq/how-to-project-an-object-graph.md\">\r\n<meta name=\"document_id\" content=\"7c1b12cd-3c8a-b716-cef8-f741081b45b1\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"How to: Project an Object Graph (C#) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"293d15d5-3eaf-48de-9a02-3e13cb117b5b","caps.latest.revision":3,"ms.topic":"article","dev_langs":["csharp"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-21 01:42 AM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/21/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-project-an-object-graph.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/csharp/programming-guide/concepts/linq/how-to-project-an-object-graph.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-project-an-object-graph.md","document_id":"7c1b12cd-3c8a-b716-cef8-f741081b45b1","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/concepts/linq/how-to-project-an-object-graph","toc_asset_id":"articles/csharp/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Project an Object Graph (C#)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":745,"_op_rawTitle":"<h1 id=\"how-to-project-an-object-graph-c\" sourcefile=\"docs/csharp/programming-guide/concepts/linq/how-to-project-an-object-graph.md\" sourcestartlinenumber=\"20\" sourceendlinenumber=\"20\">How to: Project an Object Graph (C#)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/concepts/linq/how-to-project-an-object-graph","fileRelativePath":"articles/csharp/programming-guide/concepts/linq/how-to-project-an-object-graph.html"},"themesRelativePathToOutputRoot":"_themes/"}