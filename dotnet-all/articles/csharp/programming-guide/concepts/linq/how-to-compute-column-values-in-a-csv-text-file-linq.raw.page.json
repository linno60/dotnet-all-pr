{"content":"<div><div class=\"content\">\n<p>This example shows how to perform aggregate computations such as Sum, Average, Min, and Max on the columns of a .csv file. The example principles that are shown here can be applied to other types of structured text.  </p>\n<h3 id=\"to-create-the-source-file\">To create the source file</h3>\n<ol>\n<li><p>Copy the following lines into a file that is named scores.csv and save it in your project folder. Assume that the first column represents a student ID, and subsequent columns represent scores from four exams.  </p>\n<pre class=\"loading\"><code>111, 97, 92, 81, 60  \n112, 75, 84, 91, 39  \n113, 88, 94, 65, 91  \n114, 97, 89, 85, 82  \n115, 35, 72, 91, 70  \n116, 99, 86, 90, 94  \n117, 93, 92, 80, 87  \n118, 92, 90, 83, 78  \n119, 68, 79, 88, 92  \n120, 99, 82, 81, 79  \n121, 96, 85, 91, 60  \n122, 94, 92, 91, 91  \n</code></pre></li>\n</ol>\n<h2 id=\"example\">Example</h2>\n<pre class=\"loading\"><code class=\"lang-cs\">class SumColumns  \n{  \n    static void Main(string[] args)  \n    {  \n        string[] lines = System.IO.File.ReadAllLines(@&quot;../../../scores.csv&quot;);  \n\n        // Specifies the column to compute.  \n        int exam = 3;  \n\n        // Spreadsheet format:  \n        // Student ID    Exam#1  Exam#2  Exam#3  Exam#4  \n        // 111,          97,     92,     81,     60  \n\n        // Add one to exam to skip over the first column,  \n        // which holds the student ID.  \n        SingleColumn(lines, exam + 1);  \n        Console.WriteLine();  \n        MultiColumns(lines);  \n\n        Console.WriteLine(&quot;Press any key to exit&quot;);  \n        Console.ReadKey();  \n    }  \n\n    static void SingleColumn(IEnumerable&lt;string&gt; strs, int examNum)  \n    {  \n        Console.WriteLine(&quot;Single Column Query:&quot;);  \n\n        // Parameter examNum specifies the column to   \n        // run the calculations on. This value could be  \n        // passed in dynamically at runtime.               \n\n        // Variable columnQuery is an IEnumerable&lt;int&gt;.  \n        // The following query performs two steps:  \n        // 1) use Split to break each row (a string) into an array   \n        //    of strings,   \n        // 2) convert the element at position examNum to an int  \n        //    and select it.  \n        var columnQuery =  \n            from line in strs  \n            let elements = line.Split(&#39;,&#39;)  \n            select Convert.ToInt32(elements[examNum]);  \n\n        // Execute the query and cache the results to improve  \n        // performance. This is helpful only with very large files.  \n        var results = columnQuery.ToList();  \n\n        // Perform aggregate calculations Average, Max, and  \n        // Min on the column specified by examNum.  \n        double average = results.Average();  \n        int max = results.Max();  \n        int min = results.Min();  \n\n        Console.WriteLine(&quot;Exam #{0}: Average:{1:##.##} High Score:{2} Low Score:{3}&quot;,  \n                 examNum, average, max, min);  \n    }  \n\n    static void MultiColumns(IEnumerable&lt;string&gt; strs)  \n    {  \n        Console.WriteLine(&quot;Multi Column Query:&quot;);  \n\n        // Create a query, multiColQuery. Explicit typing is used  \n        // to make clear that, when executed, multiColQuery produces   \n        // nested sequences. However, you get the same results by  \n        // using &#39;var&#39;.  \n\n        // The multiColQuery query performs the following steps:  \n        // 1) use Split to break each row (a string) into an array   \n        //    of strings,   \n        // 2) use Skip to skip the &quot;Student ID&quot; column, and store the   \n        //    rest of the row in scores.  \n        // 3) convert each score in the current row from a string to  \n        //    an int, and select that entire sequence as one row   \n        //    in the results.  \n        IEnumerable&lt;IEnumerable&lt;int&gt;&gt; multiColQuery =  \n            from line in strs  \n            let elements = line.Split(&#39;,&#39;)  \n            let scores = elements.Skip(1)  \n            select (from str in scores  \n                    select Convert.ToInt32(str));  \n\n        // Execute the query and cache the results to improve  \n        // performance.   \n        // ToArray could be used instead of ToList.  \n        var results = multiColQuery.ToList();  \n\n        // Find out how many columns you have in results.  \n        int columnCount = results[0].Count();  \n\n        // Perform aggregate calculations Average, Max, and  \n        // Min on each column.              \n        // Perform one iteration of the loop for each column   \n        // of scores.  \n        // You can use a for loop instead of a foreach loop   \n        // because you already executed the multiColQuery   \n        // query by calling ToList.  \n        for (int column = 0; column &lt; columnCount; column++)  \n        {  \n            var results2 = from row in results  \n                           select row.ElementAt(column);  \n            double average = results2.Average();  \n            int max = results2.Max();  \n            int min = results2.Min();  \n\n            // Add one to column because the first exam is Exam #1,  \n            // not Exam #0.  \n            Console.WriteLine(&quot;Exam #{0} Average: {1:##.##} High Score: {2} Low Score: {3}&quot;,  \n                          column + 1, average, max, min);  \n        }  \n    }  \n}  \n/* Output:  \n    Single Column Query:  \n    Exam #4: Average:76.92 High Score:94 Low Score:39  \n\n    Multi Column Query:  \n    Exam #1 Average: 86.08 High Score: 99 Low Score: 35  \n    Exam #2 Average: 86.42 High Score: 94 Low Score: 72  \n    Exam #3 Average: 84.75 High Score: 91 Low Score: 65  \n    Exam #4 Average: 76.92 High Score: 94 Low Score: 39  \n */  \n</code></pre><p> The query works by using the <a class=\"xref\" href=\"../../../../../api/system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> method to convert each line of text into an array. Each array element represents a column. Finally, the text in each column is converted to its numeric representation. If your file is a tab-separated file, just update the argument in the <code>Split</code> method to <code>\\t</code>.  </p>\n<h2 id=\"compiling-the-code\">Compiling the Code</h2>\n<p> Create a project that targets the .NET Framework  version 3.5 or higher, with a reference to System.Core.dll and <code>using</code> directives for the System.Linq and System.IO namespaces.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"linq-and-strings\" data-linktype=\"relative-path\">LINQ and Strings (C#)</a><br> <a href=\"linq-and-file-directories\" data-linktype=\"relative-path\">LINQ and File Directories (C#)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"4747f37a-a198-4df2-8efe-5b0731e0ea27\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-compute-column-values-in-a-csv-text-file-linq.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-compute-column-values-in-a-csv-text-file-linq.md\">\r\n<meta name=\"document_id\" content=\"e857c77a-de96-1434-89ac-dd6e5639ccb1\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"How to: Compute Column Values in a CSV Text File (LINQ) (C#) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"4747f37a-a198-4df2-8efe-5b0731e0ea27","caps.latest.revision":3,"ms.topic":"article","dev_langs":["csharp"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-compute-column-values-in-a-csv-text-file-linq.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-compute-column-values-in-a-csv-text-file-linq.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-compute-column-values-in-a-csv-text-file-linq.md","document_id":"e857c77a-de96-1434-89ac-dd6e5639ccb1","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/concepts/linq/how-to-compute-column-values-in-a-csv-text-file-linq","toc_asset_id":"articles/csharp/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Compute Column Values in a CSV Text File (LINQ) (C#)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":792,"_op_rawTitle":"<h1 id=\"how-to-compute-column-values-in-a-csv-text-file-linq-c\" sourcefile=\"docs/csharp/programming-guide/concepts/linq/how-to-compute-column-values-in-a-csv-text-file-linq.md\" sourcestartlinenumber=\"25\" sourceendlinenumber=\"25\">How to: Compute Column Values in a CSV Text File (LINQ) (C#)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/concepts/linq/how-to-compute-column-values-in-a-csv-text-file-linq","fileRelativePath":"articles/csharp/programming-guide/concepts/linq/how-to-compute-column-values-in-a-csv-text-file-linq.html"},"themesRelativePathToOutputRoot":"_themes/"}