{"content":"<div><div class=\"content\">\n<p>Other examples in this section have shown queries that return results as <a class=\"xref\" href=\"../../../../../api/system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> of <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>, <a class=\"xref\" href=\"../../../../../api/system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> of <code>string</code>, and <a class=\"xref\" href=\"../../../../../api/system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> of <code>int</code>. These are common result types, but they are not appropriate for every scenario. In many cases you will want your queries to return an <a class=\"xref\" href=\"../../../../../api/system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> of some other type.  </p>\n<h2 id=\"example\">Example</h2>\n<p> This example shows how to instantiate objects in the <code>select</code> clause. The code first defines a new class with a constructor, and then modifies the <code>select</code> statement so that the expression is a new instance of the new class.  </p>\n<p> This example uses the following XML document: <a href=\"sample-xml-file-typical-purchase-order-linq-to-xml-1\" data-linktype=\"relative-path\">Sample XML File: Typical Purchase Order (LINQ to XML)</a>.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">class NameQty {  \n    public string name;  \n    public int qty;  \n    public NameQty(string n, int q)  \n    {  \n        name = n;  \n        qty = q;  \n    }  \n};  \n\nclass Program {  \n    public static void Main() {  \n        XElement po = XElement.Load(&quot;PurchaseOrder.xml&quot;);  \n\n        IEnumerable&lt;NameQty&gt; nqList =  \n            from n in po.Descendants(&quot;Item&quot;)  \n            select new NameQty(  \n                    (string)n.Element(&quot;ProductName&quot;),  \n                    (int)n.Element(&quot;Quantity&quot;)  \n                );  \n\n        foreach (NameQty n in nqList)  \n            Console.WriteLine(n.name + &quot;:&quot; + n.qty);  \n    }  \n}  \n</code></pre><p> This example uses the <code>M:System.Xml.Linq.XElement.Element</code> method that was introduced in the topic <a href=\"how-to-retrieve-a-single-child-element-linq-to-xml\" data-linktype=\"relative-path\">How to: Retrieve a Single Child Element (LINQ to XML) (C#)</a>. It also uses casts to retrieve the values of the elements that are returned by the <code>M:System.Xml.Linq.XElement.Element</code> method.  </p>\n<p> This example produces the following output:  </p>\n<pre class=\"loading\"><code>Lawnmower:1  \nBaby Monitor:2  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"projections-and-transformations-linq-to-xml\" data-linktype=\"relative-path\">Projections and Transformations (LINQ to XML) (C#)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"48145cf9-1e0b-4e73-bbfd-28fc04800dc4\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-project-a-new-type-linq-to-xml.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-project-a-new-type-linq-to-xml.md\">\r\n<meta name=\"document_id\" content=\"d44493c8-3176-a752-ad91-d9dd96600229\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"How to: Project a New Type (LINQ to XML) (C#) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"48145cf9-1e0b-4e73-bbfd-28fc04800dc4","caps.latest.revision":3,"ms.topic":"article","dev_langs":["csharp"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-project-a-new-type-linq-to-xml.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-project-a-new-type-linq-to-xml.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-project-a-new-type-linq-to-xml.md","document_id":"d44493c8-3176-a752-ad91-d9dd96600229","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/concepts/linq/how-to-project-a-new-type-linq-to-xml","toc_asset_id":"articles/csharp/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Project a New Type (LINQ to XML) (C#)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":220,"_op_rawTitle":"<h1 id=\"how-to-project-a-new-type-linq-to-xml-c\" sourcefile=\"docs/csharp/programming-guide/concepts/linq/how-to-project-a-new-type-linq-to-xml.md\" sourcestartlinenumber=\"20\" sourceendlinenumber=\"20\">How to: Project a New Type (LINQ to XML) (C#)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/concepts/linq/how-to-project-a-new-type-linq-to-xml","fileRelativePath":"articles/csharp/programming-guide/concepts/linq/how-to-project-a-new-type-linq-to-xml.html"},"themesRelativePathToOutputRoot":"_themes/"}