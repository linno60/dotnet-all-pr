{"content":"<div><div class=\"content\">\n<p>Projection is the process of taking one set of data, filtering it, changing its shape, and even changing its type. Most query expressions perform projections. Most of the query expressions shown in this section evaluate to <a class=\"xref\" href=\"../../../../../api/system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> of <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>, but you can control the type of the projection to create collections of other types. This topic shows how to do this.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following example defines a new type, <code>Customer</code>. The query expression then instantiates new <code>Customer</code> objects in the <code>Select</code> clause. This causes the type of the query expression to be <a class=\"xref\" href=\"../../../../../api/system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> of <code>Customer</code>.  </p>\n<p> This example uses the following XML document: <a href=\"sample-xml-file-customers-and-orders-linq-to-xml-2\" data-linktype=\"relative-path\">Sample XML File: Customers and Orders (LINQ to XML)</a>.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">public class Customer  \n{  \n    private string customerID;  \n    public string CustomerID{ get{return customerID;} set{customerID = value;}}  \n\n    private string companyName;  \n    public string CompanyName{ get{return companyName;} set{companyName = value;}}  \n\n    private string contactName;  \n    public string ContactName { get{return contactName;} set{contactName = value;}}  \n\n    public Customer(string customerID, string companyName, string contactName)  \n    {  \n        CustomerID = customerID;  \n        CompanyName = companyName;  \n        ContactName = contactName;  \n    }  \n\n    public override string ToString()  \n    {  \n        return String.Format(&quot;{0}:{1}:{2}&quot;, this.customerID, this.companyName, this.contactName);  \n    }  \n}  \n\nclass Program  \n{  \n    static void Main(string[] args)  \n    {  \n        XElement custOrd = XElement.Load(&quot;CustomersOrders.xml&quot;);  \n        IEnumerable&lt;Customer&gt; custList =  \n            from el in custOrd.Element(&quot;Customers&quot;).Elements(&quot;Customer&quot;)  \n            select new Customer(  \n                (string)el.Attribute(&quot;CustomerID&quot;),  \n                (string)el.Element(&quot;CompanyName&quot;),  \n                (string)el.Element(&quot;ContactName&quot;)  \n            );  \n        foreach (Customer cust in custList)  \n            Console.WriteLine(cust);  \n    }  \n}  \n</code></pre><p> This code produces the following output:  </p>\n<pre class=\"loading\"><code>GREAL:Great Lakes Food Market:Howard Snyder  \nHUNGC:Hungry Coyote Import Store:Yoshi Latimer  \nLAZYK:Lazy K Kountry Store:John Steel  \nLETSS:Let&#39;s Stop N Shop:Jaime Yorres  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb357126(v=vs.110).aspx\" data-linktype=\"external\">Select</a><br> <a href=\"projections-and-transformations-linq-to-xml\" data-linktype=\"relative-path\">Projections and Transformations (LINQ to XML) (C#)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"e4db6b7e-4cc9-4c8f-af85-94acf32aa348\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-control-the-type-of-a-projection.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-control-the-type-of-a-projection.md\">\r\n<meta name=\"document_id\" content=\"291a5c50-bfff-06b3-036d-9ddabb092660\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"How to: Control the Type of a Projection (C#) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"e4db6b7e-4cc9-4c8f-af85-94acf32aa348","caps.latest.revision":3,"ms.topic":"article","dev_langs":["csharp"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-control-the-type-of-a-projection.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-control-the-type-of-a-projection.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-control-the-type-of-a-projection.md","document_id":"291a5c50-bfff-06b3-036d-9ddabb092660","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/linq/how-to-control-the-type-of-a-projection","toc_asset_id":"articles/csharp/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Control the Type of a Projection (C#)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":244,"_op_rawTitle":"<h1 id=\"how-to-control-the-type-of-a-projection-c\" sourcefile=\"docs/csharp/programming-guide/concepts/linq/how-to-control-the-type-of-a-projection.md\" sourcestartlinenumber=\"20\" sourceendlinenumber=\"20\">How to: Control the Type of a Projection (C#)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/linq/how-to-control-the-type-of-a-projection","fileRelativePath":"articles/csharp/programming-guide/concepts/linq/how-to-control-the-type-of-a-projection.html"},"themesRelativePathToOutputRoot":"_themes/"}