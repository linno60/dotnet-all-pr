{"content":"<div><div class=\"content\">\n<p>This example demonstrates three ways to compare two file listings:  </p>\n<ul>\n<li><p>By querying for a Boolean value that specifies whether the two file lists are identical.  </p>\n</li>\n<li><p>By querying for the intersection to retrieve the files that are in both folders.  </p>\n</li>\n<li><p>By querying for the set difference to retrieve the files that are in one folder but not the other.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The techniques shown here can be adapted to compare sequences of objects of any type.  </p>\n</div>\n<p>The <code>FileComparer</code> class shown here demonstrates how to use a custom comparer class together with the Standard Query Operators. The class is not intended for use in real-world scenarios. It just uses the name and length in bytes of each file to determine whether the contents of each folder are identical or not. In a real-world scenario, you should modify this comparer to perform a more rigorous equality check.  </p>\n</li>\n</ul>\n<h2 id=\"example\">Example</h2>\n<pre class=\"loading\"><code class=\"lang-cs\">namespace QueryCompareTwoDirs  \n{  \n    class CompareDirs  \n    {  \n\n        static void Main(string[] args)  \n        {  \n\n            // Create two identical or different temporary folders   \n            // on a local drive and change these file paths.  \n            string pathA = @&quot;C:\\TestDir&quot;;  \n            string pathB = @&quot;C:\\TestDir2&quot;;  \n\n            System.IO.DirectoryInfo dir1 = new System.IO.DirectoryInfo(pathA);  \n            System.IO.DirectoryInfo dir2 = new System.IO.DirectoryInfo(pathB);  \n\n            // Take a snapshot of the file system.  \n            IEnumerable&lt;System.IO.FileInfo&gt; list1 = dir1.GetFiles(&quot;*.*&quot;, System.IO.SearchOption.AllDirectories);  \n            IEnumerable&lt;System.IO.FileInfo&gt; list2 = dir2.GetFiles(&quot;*.*&quot;, System.IO.SearchOption.AllDirectories);  \n\n            //A custom file comparer defined below  \n            FileCompare myFileCompare = new FileCompare();  \n\n            // This query determines whether the two folders contain  \n            // identical file lists, based on the custom file comparer  \n            // that is defined in the FileCompare class.  \n            // The query executes immediately because it returns a bool.  \n            bool areIdentical = list1.SequenceEqual(list2, myFileCompare);  \n\n            if (areIdentical == true)  \n            {  \n                Console.WriteLine(&quot;the two folders are the same&quot;);  \n            }  \n            else  \n            {  \n                Console.WriteLine(&quot;The two folders are not the same&quot;);  \n            }  \n\n            // Find the common files. It produces a sequence and doesn&#39;t   \n            // execute until the foreach statement.  \n            var queryCommonFiles = list1.Intersect(list2, myFileCompare);  \n\n            if (queryCommonFiles.Count() &gt; 0)  \n            {  \n                Console.WriteLine(&quot;The following files are in both folders:&quot;);  \n                foreach (var v in queryCommonFiles)  \n                {  \n                    Console.WriteLine(v.FullName); //shows which items end up in result list  \n                }  \n            }  \n            else  \n            {  \n                Console.WriteLine(&quot;There are no common files in the two folders.&quot;);  \n            }  \n\n            // Find the set difference between the two folders.  \n            // For this example we only check one way.  \n            var queryList1Only = (from file in list1  \n                                  select file).Except(list2, myFileCompare);  \n\n            Console.WriteLine(&quot;The following files are in list1 but not list2:&quot;);  \n            foreach (var v in queryList1Only)  \n            {  \n                Console.WriteLine(v.FullName);  \n            }  \n\n            // Keep the console window open in debug mode.  \n            Console.WriteLine(&quot;Press any key to exit.&quot;);  \n            Console.ReadKey();  \n        }  \n    }  \n\n    // This implementation defines a very simple comparison  \n    // between two FileInfo objects. It only compares the name  \n    // of the files being compared and their length in bytes.  \n    class FileCompare : System.Collections.Generic.IEqualityComparer&lt;System.IO.FileInfo&gt;  \n    {  \n        public FileCompare() { }  \n\n        public bool Equals(System.IO.FileInfo f1, System.IO.FileInfo f2)  \n        {  \n            return (f1.Name == f2.Name &amp;&amp;  \n                    f1.Length == f2.Length);  \n        }  \n\n        // Return a hash that reflects the comparison criteria. According to the   \n        // rules for IEqualityComparer&lt;T&gt;, if Equals is true, then the hash codes must  \n        // also be equal. Because equality as defined here is a simple value equality, not  \n        // reference identity, it is possible that two or more objects will produce the same  \n        // hash code.  \n        public int GetHashCode(System.IO.FileInfo fi)  \n        {  \n            string s = String.Format(&quot;{0}{1}&quot;, fi.Name, fi.Length);  \n            return s.GetHashCode();  \n        }  \n    }  \n}  \n</code></pre><h2 id=\"compiling-the-code\">Compiling the Code</h2>\n<p> Create a project that targets the .NET Framework  version 3.5 or higher, with a reference to System.Core.dll and <code>using</code> directives for the System.Linq and System.IO namespaces.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"linq-to-objects\" data-linktype=\"relative-path\">LINQ to Objects (C#)</a><br> <a href=\"linq-and-file-directories\" data-linktype=\"relative-path\">LINQ and File Directories (C#)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"c7c4870e-c500-4de3-afa4-2c8e07f510e6\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-compare-the-contents-of-two-folders-linq.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-compare-the-contents-of-two-folders-linq.md\">\r\n<meta name=\"document_id\" content=\"55bd88cf-92ae-13a6-3419-25bb35137cfb\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"How to: Compare the Contents of Two Folders (LINQ) (C#) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"c7c4870e-c500-4de3-afa4-2c8e07f510e6","caps.latest.revision":3,"ms.topic":"article","dev_langs":["csharp"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-compare-the-contents-of-two-folders-linq.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-compare-the-contents-of-two-folders-linq.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-compare-the-contents-of-two-folders-linq.md","document_id":"55bd88cf-92ae-13a6-3419-25bb35137cfb","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/concepts/linq/how-to-compare-the-contents-of-two-folders-linq","toc_asset_id":"articles/csharp/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Compare the Contents of Two Folders (LINQ) (C#)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":576,"_op_rawTitle":"<h1 id=\"how-to-compare-the-contents-of-two-folders-linq-c\" sourcefile=\"docs/csharp/programming-guide/concepts/linq/how-to-compare-the-contents-of-two-folders-linq.md\" sourcestartlinenumber=\"25\" sourceendlinenumber=\"25\">How to: Compare the Contents of Two Folders (LINQ) (C#)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/concepts/linq/how-to-compare-the-contents-of-two-folders-linq","fileRelativePath":"articles/csharp/programming-guide/concepts/linq/how-to-compare-the-contents-of-two-folders-linq.html"},"themesRelativePathToOutputRoot":"_themes/"}