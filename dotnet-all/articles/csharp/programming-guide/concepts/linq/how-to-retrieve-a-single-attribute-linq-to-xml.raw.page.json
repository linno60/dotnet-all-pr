{"content":"<div><div class=\"content\">\n<p>This topic explains how to retrieve a single attribute of an element, given the attribute name. This is useful for writing query expressions where you want to find an element that has a particular attribute.  </p>\n<p> The <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb293044(v=vs.110).aspx\" data-linktype=\"external\">Attribute</a> method of the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/system.xml.linq.xelement(v=vs.110).aspx\" data-linktype=\"external\">XElement</a> class returns the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/system.xml.linq.xattribute(v=vs.110).aspx\" data-linktype=\"external\">XAttribute</a> with the specified name.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following example uses the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb293044(v=vs.110).aspx\" data-linktype=\"external\">Attribute</a> method.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">XElement cust = new XElement(&quot;PhoneNumbers&quot;,  \n    new XElement(&quot;Phone&quot;,  \n        new XAttribute(&quot;type&quot;, &quot;home&quot;),  \n        &quot;555-555-5555&quot;),  \n    new XElement(&quot;Phone&quot;,  \n        new XAttribute(&quot;type&quot;, &quot;work&quot;),  \n        &quot;555-555-6666&quot;)  \n);  \nIEnumerable&lt;XElement&gt; elList =  \n    from el in cust.Descendants(&quot;Phone&quot;)  \n    select el;  \nforeach (XElement el in elList)  \n    Console.WriteLine((string)el.Attribute(&quot;type&quot;));  \n</code></pre><p> This example finds all the descendants in the tree named <code>Phone</code>, and then finds the attribute named <code>type</code>.  </p>\n<p> This code produces the following output:  </p>\n<pre class=\"loading\"><code>home  \nwork  \n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> If you want to retrieve the value of the attribute, you can cast it, just as you do for with <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/system.xml.linq.xelement(v=vs.110).aspx\" data-linktype=\"external\">XElement</a> objects. The following example demonstrates this.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">XElement cust = new XElement(&quot;PhoneNumbers&quot;,  \n    new XElement(&quot;Phone&quot;,  \n        new XAttribute(&quot;type&quot;, &quot;home&quot;),  \n        &quot;555-555-5555&quot;),  \n    new XElement(&quot;Phone&quot;,  \n        new XAttribute(&quot;type&quot;, &quot;work&quot;),  \n        &quot;555-555-6666&quot;)  \n);  \nIEnumerable&lt;XElement&gt; elList =   \n    from el in cust.Descendants(&quot;Phone&quot;)  \n    select el;  \nforeach (XElement el in elList)  \n    Console.WriteLine((string)el.Attribute(&quot;type&quot;));  \n</code></pre><p> This code produces the following output:  </p>\n<pre class=\"loading\"><code>home  \nwork  \n</code></pre><p> LINQ to XML provides explicit cast operators for the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/system.xml.linq.xattribute(v=vs.110).aspx\" data-linktype=\"external\">XAttribute</a> class to <code>string</code>, <code>bool</code>, <code>bool?</code>, <code>int</code>, <code>int?</code>, <code>uint</code>, <code>uint?</code>, <code>long</code>, <code>long?</code>, <code>ulong</code>, <code>ulong?</code>, <code>float</code>, <code>float?</code>, <code>double</code>, <code>double?</code>, <code>decimal</code>, <code>decimal?</code>, <code>DateTime</code>, <code>DateTime?</code>, <code>TimeSpan</code>, <code>TimeSpan?</code>, <code>GUID</code>, and <code>GUID?</code>.  </p>\n<h2 id=\"example-2\">Example</h2>\n<p> The following example shows the same code for an attribute that is in a namespace. For more information, see <a href=\"working-with-xml-namespaces\" data-linktype=\"relative-path\">Working with XML Namespaces (C#)</a>.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement cust = new XElement(aw + &quot;PhoneNumbers&quot;,  \n    new XElement(aw + &quot;Phone&quot;,  \n        new XAttribute(aw + &quot;type&quot;, &quot;home&quot;),  \n        &quot;555-555-5555&quot;),  \n    new XElement(aw + &quot;Phone&quot;,  \n        new XAttribute(aw + &quot;type&quot;, &quot;work&quot;),  \n        &quot;555-555-6666&quot;)  \n);  \nIEnumerable&lt;XElement&gt; elList =  \n    from el in cust.Descendants(aw + &quot;Phone&quot;)  \n    select el;  \nforeach (XElement el in elList)  \n    Console.WriteLine((string)el.Attribute(aw + &quot;type&quot;));  \n</code></pre><p> This code produces the following output:  </p>\n<pre class=\"loading\"><code>home  \nwork  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"linq-to-xml-axes\" data-linktype=\"relative-path\">LINQ to XML Axes (C#)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"1b6b07b9-933f-47e9-874e-e790cab49dc5\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-21 01:42 AM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-retrieve-a-single-attribute-linq-to-xml.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/csharp/programming-guide/concepts/linq/how-to-retrieve-a-single-attribute-linq-to-xml.md\">\r\n<meta name=\"document_id\" content=\"f54650a2-2cee-7146-ebaa-29ba3741ef8f\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"How to: Retrieve a Single Attribute (LINQ to XML) (C#) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"1b6b07b9-933f-47e9-874e-e790cab49dc5","caps.latest.revision":3,"ms.topic":"article","dev_langs":["csharp"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-21 01:42 AM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/21/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-retrieve-a-single-attribute-linq-to-xml.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/csharp/programming-guide/concepts/linq/how-to-retrieve-a-single-attribute-linq-to-xml.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-retrieve-a-single-attribute-linq-to-xml.md","document_id":"f54650a2-2cee-7146-ebaa-29ba3741ef8f","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/concepts/linq/how-to-retrieve-a-single-attribute-linq-to-xml","toc_asset_id":"articles/csharp/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Retrieve a Single Attribute (LINQ to XML) (C#)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":303,"_op_rawTitle":"<h1 id=\"how-to-retrieve-a-single-attribute-linq-to-xml-c\" sourcefile=\"docs/csharp/programming-guide/concepts/linq/how-to-retrieve-a-single-attribute-linq-to-xml.md\" sourcestartlinenumber=\"20\" sourceendlinenumber=\"20\">How to: Retrieve a Single Attribute (LINQ to XML) (C#)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/concepts/linq/how-to-retrieve-a-single-attribute-linq-to-xml","fileRelativePath":"articles/csharp/programming-guide/concepts/linq/how-to-retrieve-a-single-attribute-linq-to-xml.html"},"themesRelativePathToOutputRoot":"_themes/"}