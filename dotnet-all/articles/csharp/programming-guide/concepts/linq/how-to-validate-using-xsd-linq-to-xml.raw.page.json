{"content":"<div><div class=\"content\">\n<p>The <a class=\"xref\" href=\"../../../../../api/system.xml.schema\" data-linktype=\"relative-path\">System.Xml.Schema</a> namespace contains extension methods that make it easy to validate an XML tree against an XML Schema Definition Language (XSD) file. For more information, see the <a class=\"xref\" href=\"../../../../../api/system.xml.schema.extensions#System_Xml_Schema_Extensions_Validate_\" data-linktype=\"relative-path\">Validate</a> method documentation.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following example creates an <a class=\"xref\" href=\"../../../../../api/system.xml.schema.xmlschemaset\" data-linktype=\"relative-path\">XmlSchemaSet</a>, then validates two <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> objects against the schema set. One of the documents is valid, the other is not.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">string xsdMarkup =  \n    @&quot;&lt;xsd:schema xmlns:xsd=&#39;http://www.w3.org/2001/XMLSchema&#39;&gt;  \n       &lt;xsd:element name=&#39;Root&#39;&gt;  \n        &lt;xsd:complexType&gt;  \n         &lt;xsd:sequence&gt;  \n          &lt;xsd:element name=&#39;Child1&#39; minOccurs=&#39;1&#39; maxOccurs=&#39;1&#39;/&gt;  \n          &lt;xsd:element name=&#39;Child2&#39; minOccurs=&#39;1&#39; maxOccurs=&#39;1&#39;/&gt;  \n         &lt;/xsd:sequence&gt;  \n        &lt;/xsd:complexType&gt;  \n       &lt;/xsd:element&gt;  \n      &lt;/xsd:schema&gt;&quot;;  \nXmlSchemaSet schemas = new XmlSchemaSet();  \nschemas.Add(&quot;&quot;, XmlReader.Create(new StringReader(xsdMarkup)));  \n\nXDocument doc1 = new XDocument(  \n    new XElement(&quot;Root&quot;,  \n        new XElement(&quot;Child1&quot;, &quot;content1&quot;),  \n        new XElement(&quot;Child2&quot;, &quot;content1&quot;)  \n    )  \n);  \n\nXDocument doc2 = new XDocument(  \n    new XElement(&quot;Root&quot;,  \n        new XElement(&quot;Child1&quot;, &quot;content1&quot;),  \n        new XElement(&quot;Child3&quot;, &quot;content1&quot;)  \n    )  \n);  \n\nConsole.WriteLine(&quot;Validating doc1&quot;);  \nbool errors = false;  \ndoc1.Validate(schemas, (o, e) =&gt;  \n                     {  \n                         Console.WriteLine(&quot;{0}&quot;, e.Message);  \n                         errors = true;  \n                     });  \nConsole.WriteLine(&quot;doc1 {0}&quot;, errors ? &quot;did not validate&quot; : &quot;validated&quot;);  \n\nConsole.WriteLine();  \nConsole.WriteLine(&quot;Validating doc2&quot;);  \nerrors = false;  \ndoc2.Validate(schemas, (o, e) =&gt;  \n                     {  \n                         Console.WriteLine(&quot;{0}&quot;, e.Message);  \n                         errors = true;  \n                     });  \nConsole.WriteLine(&quot;doc2 {0}&quot;, errors ? &quot;did not validate&quot; : &quot;validated&quot;);  \n</code></pre><p> This example produces the following output:  </p>\n<pre class=\"loading\"><code>Validating doc1  \ndoc1 validated  \n\nValidating doc2  \nThe element &#39;Root&#39; has invalid child element &#39;Child3&#39;. List of possible elements expected: &#39;Child2&#39;.  \ndoc2 did not validate  \n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> The following example validates that the XML document from <a href=\"sample-xml-file-customers-and-orders-linq-to-xml-2\" data-linktype=\"relative-path\">Sample XML File: Customers and Orders (LINQ to XML)</a> is valid per the schema from <a href=\"sample-xsd-file-customers-and-orders1\" data-linktype=\"relative-path\">Sample XSD File: Customers and Orders</a>. It then modifies the source XML document. It changes the <code>CustomerID</code> attribute on the first customer. After the change, orders will then refer to a customer that does not exist, so the XML document will no longer validate.  </p>\n<p> This example uses the following XML document: <a href=\"sample-xml-file-customers-and-orders-linq-to-xml-2\" data-linktype=\"relative-path\">Sample XML File: Customers and Orders (LINQ to XML)</a>.  </p>\n<p> This example uses the following XSD schema: <a href=\"sample-xsd-file-customers-and-orders1\" data-linktype=\"relative-path\">Sample XSD File: Customers and Orders</a>.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">XmlSchemaSet schemas = new XmlSchemaSet();  \nschemas.Add(&quot;&quot;, &quot;CustomersOrders.xsd&quot;);  \n\nConsole.WriteLine(&quot;Attempting to validate&quot;);  \nXDocument custOrdDoc = XDocument.Load(&quot;CustomersOrders.xml&quot;);  \nbool errors = false;  \ncustOrdDoc.Validate(schemas, (o, e) =&gt;  \n                     {  \n                         Console.WriteLine(&quot;{0}&quot;, e.Message);  \n                         errors = true;  \n                     });  \nConsole.WriteLine(&quot;custOrdDoc {0}&quot;, errors ? &quot;did not validate&quot; : &quot;validated&quot;);  \n\nConsole.WriteLine();  \n// Modify the source document so that it will not validate.  \ncustOrdDoc.Root.Element(&quot;Orders&quot;).Element(&quot;Order&quot;).Element(&quot;CustomerID&quot;).Value = &quot;AAAAA&quot;;  \nConsole.WriteLine(&quot;Attempting to validate after modification&quot;);  \nerrors = false;  \ncustOrdDoc.Validate(schemas, (o, e) =&gt;  \n                     {  \n                         Console.WriteLine(&quot;{0}&quot;, e.Message);  \n                         errors = true;  \n                     });  \nConsole.WriteLine(&quot;custOrdDoc {0}&quot;, errors ? &quot;did not validate&quot; : &quot;validated&quot;);  \n</code></pre><p> This example produces the following output:  </p>\n<pre class=\"loading\"><code>Attempting to validate  \ncustOrdDoc validated  \n\nAttempting to validate after modification  \nThe key sequence &#39;AAAAA&#39; in Keyref fails to refer to some key.  \ncustOrdDoc did not validate  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../../api/system.xml.schema.extensions#System_Xml_Schema_Extensions_Validate_\" data-linktype=\"relative-path\">Validate</a><br> <a href=\"creating-xml-trees\" data-linktype=\"relative-path\">Creating XML Trees (C#)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-all/api/toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"6a7f83a9-2d74-4c2b-8417-0a8595879516\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-validate-using-xsd-linq-to-xml.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-validate-using-xsd-linq-to-xml.md\">\r\n<meta name=\"document_id\" content=\"173eb972-a60c-fdeb-5dba-08c16f75db13\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"How to: Validate Using XSD (LINQ to XML) (C#) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"6a7f83a9-2d74-4c2b-8417-0a8595879516","caps.latest.revision":3,"ms.topic":"article","dev_langs":["csharp"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-validate-using-xsd-linq-to-xml.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-validate-using-xsd-linq-to-xml.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-validate-using-xsd-linq-to-xml.md","document_id":"173eb972-a60c-fdeb-5dba-08c16f75db13","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/concepts/linq/how-to-validate-using-xsd-linq-to-xml","toc_asset_id":"articles/csharp/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Validate Using XSD (LINQ to XML) (C#)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":399,"_op_rawTitle":"<h1 id=\"how-to-validate-using-xsd-linq-to-xml-c\" sourcefile=\"docs/csharp/programming-guide/concepts/linq/how-to-validate-using-xsd-linq-to-xml.md\" sourcestartlinenumber=\"25\" sourceendlinenumber=\"25\">How to: Validate Using XSD (LINQ to XML) (C#)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/concepts/linq/how-to-validate-using-xsd-linq-to-xml","fileRelativePath":"articles/csharp/programming-guide/concepts/linq/how-to-validate-using-xsd-linq-to-xml.html"},"themesRelativePathToOutputRoot":"_themes/"}