{"content":"<div><div class=\"content\">\n<p>Sometimes you want to write LINQ to XML queries with complex filters. For example, you might have to find all elements that have a child element with a particular name and value. This topic gives an example of writing a query with complex filtering.  </p>\n<h2 id=\"example\">Example</h2>\n<p> This example shows how to find all <code>PurchaseOrder</code> elements that have a child <code>Address</code> element that has a <code>Type</code> attribute equal to &quot;Shipping&quot; and a child <code>State</code> element equal to &quot;NY&quot;. It uses a nested query in the <code>Where</code> clause, and the <code>Any</code> operator returns <code>true</code> if the collection has any elements in it. For information about using method-based query syntax, see <a href=\"query-syntax-and-method-syntax-in-linq\" data-linktype=\"relative-path\">Query Syntax and Method Syntax in LINQ</a>.  </p>\n<p> This example uses the following XML document: <a href=\"sample-xml-file-multiple-purchase-orders-linq-to-xml\" data-linktype=\"relative-path\">Sample XML File: Multiple Purchase Orders (LINQ to XML)</a>.  </p>\n<p> For more information about the <code>Any</code> operator, see <a href=\"quantifier-operations\" data-linktype=\"relative-path\">Quantifier Operations (C#)</a>.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">XElement root = XElement.Load(&quot;PurchaseOrders.xml&quot;);  \nIEnumerable&lt;XElement&gt; purchaseOrders =  \n    from el in root.Elements(&quot;PurchaseOrder&quot;)  \n    where   \n        (from add in el.Elements(&quot;Address&quot;)  \n        where  \n            (string)add.Attribute(&quot;Type&quot;) == &quot;Shipping&quot; &amp;&amp;  \n            (string)add.Element(&quot;State&quot;) == &quot;NY&quot;  \n        select add)  \n        .Any()  \n    select el;  \nforeach (XElement el in purchaseOrders)  \n    Console.WriteLine((string)el.Attribute(&quot;PurchaseOrderNumber&quot;));  \n</code></pre><p> This code produces the following output:  </p>\n<pre class=\"loading\"><code>99505  \n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> The following example shows the same query for XML that is in a namespace. For more information, see <a href=\"working-with-xml-namespaces\" data-linktype=\"relative-path\">Working with XML Namespaces (C#)</a>.  </p>\n<p> This example uses the following XML document: <a href=\"sample-xml-file-multiple-purchase-orders-in-a-namespace\" data-linktype=\"relative-path\">Sample XML File: Multiple Purchase Orders in a Namespace</a>.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">XElement root = XElement.Load(&quot;PurchaseOrdersInNamespace.xml&quot;);  \nXNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nIEnumerable&lt;XElement&gt; purchaseOrders =  \n    from el in root.Elements(aw + &quot;PurchaseOrder&quot;)  \n    where  \n        (from add in el.Elements(aw + &quot;Address&quot;)  \n         where  \n             (string)add.Attribute(aw + &quot;Type&quot;) == &quot;Shipping&quot; &amp;&amp;  \n             (string)add.Element(aw + &quot;State&quot;) == &quot;NY&quot;  \n         select add)  \n        .Any()  \n    select el;  \nforeach (XElement el in purchaseOrders)  \n    Console.WriteLine((string)el.Attribute(aw + &quot;PurchaseOrderNumber&quot;));  \n</code></pre><p> This code produces the following output:  </p>\n<pre class=\"loading\"><code>99505  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement#System_Xml_Linq_XElement_Attribute_\" data-linktype=\"relative-path\">Attribute</a><br> <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xcontainer#System_Xml_Linq_XContainer_Elements_\" data-linktype=\"relative-path\">Elements</a><br> <a href=\"basic-queries-linq-to-xml\" data-linktype=\"relative-path\">Basic Queries (LINQ to XML) (C#)</a><br> <a href=\"projection-operations\" data-linktype=\"relative-path\">Projection Operations (C#)</a><br> <a href=\"quantifier-operations\" data-linktype=\"relative-path\">Quantifier Operations (C#)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"4065d901-cf89-4e47-8bf9-abb65acfb003\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-write-queries-with-complex-filtering.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-write-queries-with-complex-filtering.md\">\r\n<meta name=\"document_id\" content=\"b3b6a1a2-75bb-05cd-ce74-f00fe31611e2\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"How to: Write Queries with Complex Filtering (C#) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"4065d901-cf89-4e47-8bf9-abb65acfb003","caps.latest.revision":3,"ms.topic":"article","dev_langs":["csharp"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-write-queries-with-complex-filtering.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-write-queries-with-complex-filtering.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-write-queries-with-complex-filtering.md","document_id":"b3b6a1a2-75bb-05cd-ce74-f00fe31611e2","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/concepts/linq/how-to-write-queries-with-complex-filtering","toc_asset_id":"articles/csharp/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Write Queries with Complex Filtering (C#)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":293,"_op_rawTitle":"<h1 id=\"how-to-write-queries-with-complex-filtering-c\" sourcefile=\"docs/csharp/programming-guide/concepts/linq/how-to-write-queries-with-complex-filtering.md\" sourcestartlinenumber=\"20\" sourceendlinenumber=\"20\">How to: Write Queries with Complex Filtering (C#)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/concepts/linq/how-to-write-queries-with-complex-filtering","fileRelativePath":"articles/csharp/programming-guide/concepts/linq/how-to-write-queries-with-complex-filtering.html"},"themesRelativePathToOutputRoot":"_themes/"}