{"content":"<div><div class=\"content\">\n<p>This topic presents an example that opens an Office Open XML document, and retrieves a collection of all of the paragraphs in the document.  </p>\n<p> For more information on Office Open XML, see <a href=\"http://go.microsoft.com/fwlink/?LinkID=95573\" data-linktype=\"external\">www.openxmldeveloper.org</a>.  </p>\n<h2 id=\"example\">Example</h2>\n<p> This example opens an Office Open XML package, uses the relationships within the Open XML package to find the document and the style parts. It then queries the document, projecting a collection of an anonymous type that contains the paragraph <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> node, the style name of each paragraph, and the text of each paragraph.  </p>\n<p> The example uses an extension method named <code>StringConcatenate</code>, which is also supplied in the example.  </p>\n<p> For a detailed tutorial that explains how this example works, see <a href=\"pure-functional-transformations-of-xml\" data-linktype=\"relative-path\">Pure Functional Transformations of XML (C#)</a>.  </p>\n<p> This example uses classes found in the WindowsBase assembly. It uses types in the <a class=\"xref\" href=\"../../../../../api/system.io.packaging\" data-linktype=\"relative-path\">System.IO.Packaging</a> namespace.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">public static class LocalExtensions  \n{  \n    public static string StringConcatenate(this IEnumerable&lt;string&gt; source)  \n    {  \n        StringBuilder sb = new StringBuilder();  \n        foreach (string s in source)  \n            sb.Append(s);  \n        return sb.ToString();  \n    }  \n\n    public static string StringConcatenate&lt;T&gt;(this IEnumerable&lt;T&gt; source,  \n        Func&lt;T, string&gt; func)  \n    {  \n        StringBuilder sb = new StringBuilder();  \n        foreach (T item in source)  \n            sb.Append(func(item));  \n        return sb.ToString();  \n    }  \n\n    public static string StringConcatenate(this IEnumerable&lt;string&gt; source, string separator)  \n    {  \n        StringBuilder sb = new StringBuilder();  \n        foreach (string s in source)  \n            sb.Append(s).Append(separator);  \n        return sb.ToString();  \n    }  \n\n    public static string StringConcatenate&lt;T&gt;(this IEnumerable&lt;T&gt; source,  \n        Func&lt;T, string&gt; func, string separator)  \n    {  \n        StringBuilder sb = new StringBuilder();  \n        foreach (T item in source)  \n            sb.Append(func(item)).Append(separator);  \n        return sb.ToString();  \n    }  \n}  \n\nclass Program  \n{  \n    public static string ParagraphText(XElement e)  \n    {  \n        XNamespace w = e.Name.Namespace;  \n        return e  \n               .Elements(w + &quot;r&quot;)  \n               .Elements(w + &quot;t&quot;)  \n               .StringConcatenate(element =&gt; (string)element);  \n    }  \n\n    static void Main(string[] args)  \n    {  \n        const string fileName = &quot;SampleDoc.docx&quot;;  \n\n        const string documentRelationshipType =  \n          &quot;http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument&quot;;  \n        const string stylesRelationshipType =  \n          &quot;http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles&quot;;  \n        const string wordmlNamespace =  \n          &quot;http://schemas.openxmlformats.org/wordprocessingml/2006/main&quot;;  \n        XNamespace w = wordmlNamespace;  \n\n        XDocument xDoc = null;  \n        XDocument styleDoc = null;  \n\n        using (Package wdPackage = Package.Open(fileName, FileMode.Open, FileAccess.Read))  \n        {  \n            PackageRelationship docPackageRelationship =  \n              wdPackage  \n              .GetRelationshipsByType(documentRelationshipType)  \n              .FirstOrDefault();  \n            if (docPackageRelationship != null)  \n            {  \n                Uri documentUri =  \n                    PackUriHelper  \n                    .ResolvePartUri(  \n                       new Uri(&quot;/&quot;, UriKind.Relative),  \n                             docPackageRelationship.TargetUri);  \n                PackagePart documentPart =  \n                    wdPackage.GetPart(documentUri);  \n\n                //  Load the document XML in the part into an XDocument instance.  \n                xDoc = XDocument.Load(XmlReader.Create(documentPart.GetStream()));  \n\n                //  Find the styles part. There will only be one.  \n                PackageRelationship styleRelation =  \n                  documentPart.GetRelationshipsByType(stylesRelationshipType)  \n                  .FirstOrDefault();  \n                if (styleRelation != null)  \n                {  \n                    Uri styleUri = PackUriHelper.ResolvePartUri(documentUri, styleRelation.TargetUri);  \n                    PackagePart stylePart = wdPackage.GetPart(styleUri);  \n\n                    //  Load the style XML in the part into an XDocument instance.  \n                    styleDoc = XDocument.Load(XmlReader.Create(stylePart.GetStream()));  \n                }  \n            }  \n        }  \n\n        string defaultStyle =  \n            (string)(  \n                from style in styleDoc.Root.Elements(w + &quot;style&quot;)  \n                where (string)style.Attribute(w + &quot;type&quot;) == &quot;paragraph&quot; &amp;&amp;  \n                      (string)style.Attribute(w + &quot;default&quot;) == &quot;1&quot;  \n                select style  \n            ).First().Attribute(w + &quot;styleId&quot;);  \n\n        // Find all paragraphs in the document.  \n        var paragraphs =  \n            from para in xDoc  \n                         .Root  \n                         .Element(w + &quot;body&quot;)  \n                         .Descendants(w + &quot;p&quot;)  \n            let styleNode = para  \n                            .Elements(w + &quot;pPr&quot;)  \n                            .Elements(w + &quot;pStyle&quot;)  \n                            .FirstOrDefault()  \n            select new  \n            {  \n                ParagraphNode = para,  \n                StyleName = styleNode != null ?  \n                    (string)styleNode.Attribute(w + &quot;val&quot;) :  \n                    defaultStyle  \n            };  \n\n        // Retrieve the text of each paragraph.  \n        var paraWithText =  \n            from para in paragraphs  \n            select new  \n            {  \n                ParagraphNode = para.ParagraphNode,  \n                StyleName = para.StyleName,  \n                Text = ParagraphText(para.ParagraphNode)  \n            };  \n\n        foreach (var p in paraWithText)  \n            Console.WriteLine(&quot;StyleName:{0} &gt;{1}&lt;&quot;, p.StyleName, p.Text);  \n    }  \n}  \n</code></pre><p> When run with the sample Open XML document described in <a href=\"creating-the-source-office-open-xml-document\" data-linktype=\"relative-path\">Creating the Source Office Open XML Document (C#)</a>, this example produces the following output:  </p>\n<pre class=\"loading\"><code>StyleName:Heading1 &gt;Parsing WordprocessingML with LINQ to XML&lt;  \nStyleName:Normal &gt;&lt;  \nStyleName:Normal &gt;The following example prints to the console.&lt;  \nStyleName:Normal &gt;&lt;  \nStyleName:Code &gt;using System;&lt;  \nStyleName:Code &gt;&lt;  \nStyleName:Code &gt;class Program {&lt;  \nStyleName:Code &gt;    public static void (string[] args) {&lt;  \nStyleName:Code &gt;        Console.WriteLine(&quot;Hello World&quot;);&lt;  \nStyleName:Code &gt;    }&lt;  \nStyleName:Code &gt;}&lt;  \nStyleName:Normal &gt;&lt;  \nStyleName:Normal &gt;This example produces the following output:&lt;  \nStyleName:Normal &gt;&lt;  \nStyleName:Code &gt;Hello World&lt;  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"advanced-query-techniques-linq-to-xml\" data-linktype=\"relative-path\">Advanced Query Techniques (LINQ to XML) (C#)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"cc2687cf-d648-451e-88ac-3847c6c967c8\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-retrieve-paragraphs-from-an-office-open-xml-document.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-retrieve-paragraphs-from-an-office-open-xml-document.md\">\r\n<meta name=\"document_id\" content=\"6c97959d-5015-a699-e267-0640753cbf02\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"How to: Retrieve Paragraphs from an Office Open XML Document (C#) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"cc2687cf-d648-451e-88ac-3847c6c967c8","caps.latest.revision":3,"ms.topic":"article","dev_langs":["csharp"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-retrieve-paragraphs-from-an-office-open-xml-document.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-retrieve-paragraphs-from-an-office-open-xml-document.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-retrieve-paragraphs-from-an-office-open-xml-document.md","document_id":"6c97959d-5015-a699-e267-0640753cbf02","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/linq/how-to-retrieve-paragraphs-from-an-office-open-xml-document","toc_asset_id":"articles/csharp/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Retrieve Paragraphs from an Office Open XML Document (C#)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":595,"_op_rawTitle":"<h1 id=\"how-to-retrieve-paragraphs-from-an-office-open-xml-document-c\" sourcefile=\"docs/csharp/programming-guide/concepts/linq/how-to-retrieve-paragraphs-from-an-office-open-xml-document.md\" sourcestartlinenumber=\"20\" sourceendlinenumber=\"20\">How to: Retrieve Paragraphs from an Office Open XML Document (C#)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/linq/how-to-retrieve-paragraphs-from-an-office-open-xml-document","fileRelativePath":"articles/csharp/programming-guide/concepts/linq/how-to-retrieve-paragraphs-from-an-office-open-xml-document.html"},"themesRelativePathToOutputRoot":"_themes/"}