{"content":"<div><div class=\"content\">\n<p>Sometimes files that have the same name may be located in more than one folder. For example, under the Visual Studio installation folder, several folders have a readme.htm file. This example shows how to query for such duplicate file names under a specified root folder. The second example shows how to query for files whose size and creation times also match.  </p>\n<h2 id=\"example\">Example</h2>\n<pre class=\"loading\"><code class=\"lang-cs\">class QueryDuplicateFileNames  \n{  \n    static void Main(string[] args)  \n    {  \n        // Uncomment QueryDuplicates2 to run that query.  \n        QueryDuplicates();  \n        // QueryDuplicates2();  \n\n        // Keep the console window open in debug mode.  \n        Console.WriteLine(&quot;Press any key to exit.&quot;);  \n        Console.ReadKey();  \n    }  \n\n    static void QueryDuplicates()  \n    {  \n        // Change the root drive or folder if necessary  \n        string startFolder = @&quot;c:\\program files\\Microsoft Visual Studio 9.0\\&quot;;  \n\n        // Take a snapshot of the file system.  \n        System.IO.DirectoryInfo dir = new System.IO.DirectoryInfo(startFolder);  \n\n        // This method assumes that the application has discovery permissions  \n        // for all folders under the specified path.  \n        IEnumerable&lt;System.IO.FileInfo&gt; fileList = dir.GetFiles(&quot;*.*&quot;, System.IO.SearchOption.AllDirectories);  \n\n        // used in WriteLine to keep the lines shorter  \n        int charsToSkip = startFolder.Length;  \n\n        // var can be used for convenience with groups.  \n        var queryDupNames =  \n            from file in fileList  \n            group file.FullName.Substring(charsToSkip) by file.Name into fileGroup  \n            where fileGroup.Count() &gt; 1  \n            select fileGroup;  \n\n        // Pass the query to a method that will  \n        // output one page at a time.  \n        PageOutput&lt;string, string&gt;(queryDupNames);  \n    }  \n\n    // A Group key that can be passed to a separate method.  \n    // Override Equals and GetHashCode to define equality for the key.  \n    // Override ToString to provide a friendly name for Key.ToString()  \n    class PortableKey  \n    {  \n        public string Name { get; set; }  \n        public DateTime CreationTime { get; set; }  \n        public long Length { get; set; }  \n\n        public override bool Equals(object obj)  \n        {  \n            PortableKey other = (PortableKey)obj;  \n            return other.CreationTime == this.CreationTime &amp;&amp;  \n                   other.Length == this.Length &amp;&amp;  \n                   other.Name == this.Name;  \n        }  \n\n        public override int GetHashCode()  \n        {  \n            string str = String.Format(&quot;{0}{1}{2}&quot;, this.CreationTime, this.Length, this.Name);  \n            return str.GetHashCode();  \n        }  \n        public override string ToString()  \n        {  \n            return String.Format(&quot;{0} {1} {2}&quot;, this.Name, this.Length, this.CreationTime);  \n        }  \n    }  \n    static void QueryDuplicates2()  \n    {  \n        // Change the root drive or folder if necessary.  \n        string startFolder = @&quot;c:\\program files\\Microsoft Visual Studio 9.0\\Common7&quot;;  \n\n        // Make the the lines shorter for the console display  \n        int charsToSkip = startFolder.Length;  \n\n        // Take a snapshot of the file system.  \n        System.IO.DirectoryInfo dir = new System.IO.DirectoryInfo(startFolder);  \n        IEnumerable&lt;System.IO.FileInfo&gt; fileList = dir.GetFiles(&quot;*.*&quot;, System.IO.SearchOption.AllDirectories);  \n\n        // Note the use of a compound key. Files that match  \n        // all three properties belong to the same group.  \n        // A named type is used to enable the query to be  \n        // passed to another method. Anonymous types can also be used  \n        // for composite keys but cannot be passed across method boundaries  \n        //   \n        var queryDupFiles =  \n            from file in fileList  \n            group file.FullName.Substring(charsToSkip) by  \n                new PortableKey { Name = file.Name, CreationTime = file.CreationTime, Length = file.Length } into fileGroup  \n            where fileGroup.Count() &gt; 1  \n            select fileGroup;  \n\n        var list = queryDupFiles.ToList();  \n\n        int i = queryDupFiles.Count();  \n\n        PageOutput&lt;PortableKey, string&gt;(queryDupFiles);  \n    }  \n\n    // A generic method to page the output of the QueryDuplications methods  \n    // Here the type of the group must be specified explicitly. &quot;var&quot; cannot  \n    // be used in method signatures. This method does not display more than one  \n    // group per page.  \n    private static void PageOutput&lt;K, V&gt;(IEnumerable&lt;System.Linq.IGrouping&lt;K, V&gt;&gt; groupByExtList)  \n    {  \n        // Flag to break out of paging loop.  \n        bool goAgain = true;  \n\n        // &quot;3&quot; = 1 line for extension + 1 for &quot;Press any key&quot; + 1 for input cursor.  \n        int numLines = Console.WindowHeight - 3;  \n\n        // Iterate through the outer collection of groups.  \n        foreach (var filegroup in groupByExtList)  \n        {  \n            // Start a new extension at the top of a page.  \n            int currentLine = 0;  \n\n            // Output only as many lines of the current group as will fit in the window.  \n            do  \n            {  \n                Console.Clear();  \n                Console.WriteLine(&quot;Filename = {0}&quot;, filegroup.Key.ToString() == String.Empty ? &quot;[none]&quot; : filegroup.Key.ToString());  \n\n                // Get &#39;numLines&#39; number of items starting at number &#39;currentLine&#39;.  \n                var resultPage = filegroup.Skip(currentLine).Take(numLines);  \n\n                //Execute the resultPage query  \n                foreach (var fileName in resultPage)  \n                {  \n                    Console.WriteLine(&quot;\\t{0}&quot;, fileName);  \n                }  \n\n                // Increment the line counter.  \n                currentLine += numLines;  \n\n                // Give the user a chance to escape.  \n                Console.WriteLine(&quot;Press any key to continue or the &#39;End&#39; key to break...&quot;);  \n                ConsoleKey key = Console.ReadKey().Key;  \n                if (key == ConsoleKey.End)  \n                {  \n                    goAgain = false;  \n                    break;  \n                }  \n            } while (currentLine &lt; filegroup.Count());  \n\n            if (goAgain == false)  \n                break;  \n        }  \n    }  \n}  \n</code></pre><p> The first query uses a simple key to determine a match; this finds files that have the same name but whose contents might be different. The second query uses a compound key to match against three properties of the <a class=\"xref\" href=\"../../../../../api/system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> object. This query is much more likely to find files that have the same name and similar or identical content.  </p>\n<h2 id=\"compiling-the-code\">Compiling the Code</h2>\n<p> Create a project that targets the .NET Framework  version 3.5 or higher, with a reference to System.Core.dll and <code>using</code> directives for the System.Linq and System.IO namespaces.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"linq-to-objects\" data-linktype=\"relative-path\">LINQ to Objects (C#)</a><br> <a href=\"linq-and-file-directories\" data-linktype=\"relative-path\">LINQ and File Directories (C#)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"1ff5562b-0d30-46d1-b426-a04e8f78c840\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-query-for-duplicate-files-in-a-directory-tree-linq.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-query-for-duplicate-files-in-a-directory-tree-linq.md\">\r\n<meta name=\"document_id\" content=\"343680a1-9d35-ea8b-68a8-f01fcb8d2563\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"How to: Query for Duplicate Files in a Directory Tree (LINQ) (C#) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"1ff5562b-0d30-46d1-b426-a04e8f78c840","caps.latest.revision":3,"ms.topic":"article","dev_langs":["csharp"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-query-for-duplicate-files-in-a-directory-tree-linq.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-query-for-duplicate-files-in-a-directory-tree-linq.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-query-for-duplicate-files-in-a-directory-tree-linq.md","document_id":"343680a1-9d35-ea8b-68a8-f01fcb8d2563","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/concepts/linq/how-to-query-for-duplicate-files-in-a-directory-tree-linq","toc_asset_id":"articles/csharp/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Query for Duplicate Files in a Directory Tree (LINQ) (C#)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":795,"_op_rawTitle":"<h1 id=\"how-to-query-for-duplicate-files-in-a-directory-tree-linq-c\" sourcefile=\"docs/csharp/programming-guide/concepts/linq/how-to-query-for-duplicate-files-in-a-directory-tree-linq.md\" sourcestartlinenumber=\"25\" sourceendlinenumber=\"25\">How to: Query for Duplicate Files in a Directory Tree (LINQ) (C#)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/concepts/linq/how-to-query-for-duplicate-files-in-a-directory-tree-linq","fileRelativePath":"articles/csharp/programming-guide/concepts/linq/how-to-query-for-duplicate-files-in-a-directory-tree-linq.html"},"themesRelativePathToOutputRoot":"_themes/"}