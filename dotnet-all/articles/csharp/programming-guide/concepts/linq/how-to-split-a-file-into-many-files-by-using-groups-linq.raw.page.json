{"content":"<div><div class=\"content\">\n<p>This example shows one way to merge the contents of two files and then create a set of new files that organize the data in a new way.  </p>\n<h3 id=\"to-create-the-data-files\">To create the data files</h3>\n<ol>\n<li><p>Copy these names into a text file that is named names1.txt and save it in your project folder:  </p>\n<pre class=\"loading\"><code>Bankov, Peter  \nHolm, Michael  \nGarcia, Hugo  \nPotra, Cristina  \nNoriega, Fabricio  \nAw, Kam Foo  \nBeebe, Ann  \nToyoshima, Tim  \nGuy, Wey Yuan  \nGarcia, Debra  \n</code></pre></li>\n<li><p>Copy these names into a text file that is named names2.txt and save it in your project folder: Note that the two files have some names in common.  </p>\n<pre class=\"loading\"><code>Liu, Jinghao  \nBankov, Peter  \nHolm, Michael  \nGarcia, Hugo  \nBeebe, Ann  \nGilchrist, Beth  \nMyrcha, Jacek  \nGiakoumakis, Leo  \nMcLin, Nkenge  \nEl Yassir, Mehdi  \n</code></pre></li>\n</ol>\n<h2 id=\"example\">Example</h2>\n<pre class=\"loading\"><code class=\"lang-csharp\">class SplitWithGroups  \n{  \n    static void Main()  \n    {  \n        string[] fileA = System.IO.File.ReadAllLines(@&quot;../../../names1.txt&quot;);  \n        string[] fileB = System.IO.File.ReadAllLines(@&quot;../../../names2.txt&quot;);  \n\n        // Concatenate and remove duplicate names based on  \n        // default string comparer  \n        var mergeQuery = fileA.Union(fileB);  \n\n        // Group the names by the first letter in the last name.  \n        var groupQuery = from name in mergeQuery  \n                         let n = name.Split(&#39;,&#39;)  \n                         group name by n[0][0] into g  \n                         orderby g.Key  \n                         select g;  \n\n        // Create a new file for each group that was created  \n        // Note that nested foreach loops are required to access  \n        // individual items with each group.  \n        foreach (var g in groupQuery)  \n        {  \n            // Create the new file name.  \n            string fileName = @&quot;../../../testFile_&quot; + g.Key + &quot;.txt&quot;;  \n\n            // Output to display.  \n            Console.WriteLine(g.Key);  \n\n            // Write file.  \n            using (System.IO.StreamWriter sw = new System.IO.StreamWriter(fileName))  \n            {  \n                foreach (var item in g)  \n                {  \n                    sw.WriteLine(item);  \n                    // Output to console for example purposes.  \n                    Console.WriteLine(&quot;   {0}&quot;, item);  \n                }  \n            }  \n        }  \n        // Keep console window open in debug mode.  \n        Console.WriteLine(&quot;Files have been written. Press any key to exit&quot;);  \n        Console.ReadKey();  \n    }  \n}  \n/* Output:   \n    A  \n       Aw, Kam Foo  \n    B  \n       Bankov, Peter  \n       Beebe, Ann  \n    E  \n       El Yassir, Mehdi  \n    G  \n       Garcia, Hugo  \n       Guy, Wey Yuan  \n       Garcia, Debra  \n       Gilchrist, Beth  \n       Giakoumakis, Leo  \n    H  \n       Holm, Michael  \n    L  \n       Liu, Jinghao  \n    M  \n       Myrcha, Jacek  \n       McLin, Nkenge  \n    N  \n       Noriega, Fabricio  \n    P  \n       Potra, Cristina  \n    T  \n       Toyoshima, Tim  \n */  \n</code></pre><p> The program writes a separate file for each group in the same folder as the data files.  </p>\n<h2 id=\"compiling-the-code\">Compiling the Code</h2>\n<p> Create a project that targets the .NET Framework  version 3.5 or higher, with a reference to System.Core.dll and <code>using</code> directives for the System.Linq and System.IO namespaces.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"linq-and-strings\" data-linktype=\"relative-path\">LINQ and Strings (C#)</a><br> <a href=\"linq-and-file-directories\" data-linktype=\"relative-path\">LINQ and File Directories (C#)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"8179b91c-d778-4e57-884f-77fe5a8e4e40\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:46 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/400dfda51d978f35c3995f90840643aaff1b9c13/docs/csharp/programming-guide/concepts/linq/how-to-split-a-file-into-many-files-by-using-groups-linq.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-split-a-file-into-many-files-by-using-groups-linq.md\">\r\n<meta name=\"document_id\" content=\"a2e08486-0dfc-9224-28ae-f91c63a8e7bf\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","uhfHeaderId":"MSDocsHeader-DotNet","title":"How to: Split a File Into Many Files by Using Groups (LINQ) (C#) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"8179b91c-d778-4e57-884f-77fe5a8e4e40","caps.latest.revision":3,"ms.topic":"article","dev_langs":["csharp"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"tompratt-AQ","author_email":"v-thprat@microsoft.com","committer_name":"Maira Wenzel","comitter_email":"mairaw@microsoft.com","message":"Update language identifiers and styleguide. (#1796)","commit_sha":"400dfda51d978f35c3995f90840643aaff1b9c13","commit_date":"2017-03-24 14:01:03 -0700"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-04-01 05:46 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/tompratt-AQ","display_name":"tompratt-AQ","id":"26311438"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"4/1/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/400dfda51d978f35c3995f90840643aaff1b9c13/docs/csharp/programming-guide/concepts/linq/how-to-split-a-file-into-many-files-by-using-groups-linq.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-split-a-file-into-many-files-by-using-groups-linq.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-split-a-file-into-many-files-by-using-groups-linq.md","document_id":"a2e08486-0dfc-9224-28ae-f91c63a8e7bf","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/linq/how-to-split-a-file-into-many-files-by-using-groups-linq","toc_asset_id":"articles/csharp/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Split a File Into Many Files by Using Groups (LINQ) (C#)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":394,"_op_rawTitle":"<h1 id=\"how-to-split-a-file-into-many-files-by-using-groups-linq-c\" sourcefile=\"docs/csharp/programming-guide/concepts/linq/how-to-split-a-file-into-many-files-by-using-groups-linq.md\" sourcestartlinenumber=\"25\" sourceendlinenumber=\"25\">How to: Split a File Into Many Files by Using Groups (LINQ) (C#)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/linq/how-to-split-a-file-into-many-files-by-using-groups-linq","fileRelativePath":"articles/csharp/programming-guide/concepts/linq/how-to-split-a-file-into-many-files-by-using-groups-linq.html"},"themesRelativePathToOutputRoot":"_themes/"}