{"content":"<div><div class=\"content\">\n<p>Sometimes you want to filter for an element even though you are not sure it exists in your XML document. The search should be executed so that if the particular element does not have the child element, you do not trigger a null reference exception by filtering for it. In the following example, the <code>Child5</code> element does not have a <code>Type</code> child element, but the query still executes correctly.  </p>\n<h2 id=\"example\">Example</h2>\n<p> This example uses the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb354751(v=vs.110).aspx\" data-linktype=\"external\">Elements</a> extension method.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">XElement root = XElement.Parse(@&quot;&lt;Root&gt;  \n  &lt;Child1&gt;  \n    &lt;Text&gt;Child One Text&lt;/Text&gt;  \n    &lt;Type Value=&quot;&quot;Yes&quot;&quot;/&gt;  \n  &lt;/Child1&gt;  \n  &lt;Child2&gt;  \n    &lt;Text&gt;Child Two Text&lt;/Text&gt;  \n    &lt;Type Value=&quot;&quot;Yes&quot;&quot;/&gt;  \n  &lt;/Child2&gt;  \n  &lt;Child3&gt;  \n    &lt;Text&gt;Child Three Text&lt;/Text&gt;  \n    &lt;Type Value=&quot;&quot;No&quot;&quot;/&gt;  \n  &lt;/Child3&gt;  \n  &lt;Child4&gt;  \n    &lt;Text&gt;Child Four Text&lt;/Text&gt;  \n    &lt;Type Value=&quot;&quot;Yes&quot;&quot;/&gt;  \n  &lt;/Child4&gt;  \n  &lt;Child5&gt;  \n    &lt;Text&gt;Child Five Text&lt;/Text&gt;  \n  &lt;/Child5&gt;  \n&lt;/Root&gt;&quot;);  \nvar cList =  \n    from typeElement in root.Elements().Elements(&quot;Type&quot;)  \n    where (string)typeElement.Attribute(&quot;Value&quot;) == &quot;Yes&quot;  \n    select (string)typeElement.Parent.Element(&quot;Text&quot;);  \nforeach(string str in cList)  \n    Console.WriteLine(str);  \n</code></pre><p> This code produces the following output:  </p>\n<pre class=\"loading\"><code>Child One Text  \nChild Two Text  \nChild Four Text  \n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> The following example shows the same query for XML that is in a namespace. For more information, see <a href=\"working-with-xml-namespaces\" data-linktype=\"relative-path\">Working with XML Namespaces (C#)</a>.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">XElement root = XElement.Parse(@&quot;&lt;Root xmlns=&#39;http://www.adatum.com&#39;&gt;  \n  &lt;Child1&gt;  \n    &lt;Text&gt;Child One Text&lt;/Text&gt;  \n    &lt;Type Value=&quot;&quot;Yes&quot;&quot;/&gt;  \n  &lt;/Child1&gt;  \n  &lt;Child2&gt;  \n    &lt;Text&gt;Child Two Text&lt;/Text&gt;  \n    &lt;Type Value=&quot;&quot;Yes&quot;&quot;/&gt;  \n  &lt;/Child2&gt;  \n  &lt;Child3&gt;  \n    &lt;Text&gt;Child Three Text&lt;/Text&gt;  \n    &lt;Type Value=&quot;&quot;No&quot;&quot;/&gt;  \n  &lt;/Child3&gt;  \n  &lt;Child4&gt;  \n    &lt;Text&gt;Child Four Text&lt;/Text&gt;  \n    &lt;Type Value=&quot;&quot;Yes&quot;&quot;/&gt;  \n  &lt;/Child4&gt;  \n  &lt;Child5&gt;  \n    &lt;Text&gt;Child Five Text&lt;/Text&gt;  \n  &lt;/Child5&gt;  \n&lt;/Root&gt;&quot;);  \nXNamespace ad = &quot;http://www.adatum.com&quot;;  \nvar cList =  \n    from typeElement in root.Elements().Elements(ad + &quot;Type&quot;)  \n    where (string)typeElement.Attribute(&quot;Value&quot;) == &quot;Yes&quot;  \n    select (string)typeElement.Parent.Element(ad + &quot;Text&quot;);  \nforeach (string str in cList)  \n    Console.WriteLine(str);  \n</code></pre><p> This code produces the following output:  </p>\n<pre class=\"loading\"><code>Child One Text  \nChild Two Text  \nChild Four Text  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement#System_Xml_Linq_XElement_Attribute_\" data-linktype=\"relative-path\">Attribute</a><br> <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xcontainer#System_Xml_Linq_XContainer_Elements_\" data-linktype=\"relative-path\">Elements</a><br> <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb354751(v=vs.110).aspx\" data-linktype=\"external\">Extensions.Elements</a><br> <a href=\"basic-queries-linq-to-xml\" data-linktype=\"relative-path\">Basic Queries (LINQ to XML) (C#)</a><br> <a href=\"standard-query-operators-overview\" data-linktype=\"relative-path\">Standard Query Operators Overview (C#)</a><br> <a href=\"projection-operations\" data-linktype=\"relative-path\">Projection Operations (C#)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet/toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"f99e2f93-fca5-403f-8a0c-770761d4905a\">\r\n<meta name=\"caps.latest.revision\" content=\"4\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-filter-on-an-optional-element.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-filter-on-an-optional-element.md\">\r\n<meta name=\"document_id\" content=\"3b5271f1-c31f-ed4a-9735-1e5f4c2f9152\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"How to: Filter on an Optional Element (C#) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"f99e2f93-fca5-403f-8a0c-770761d4905a","caps.latest.revision":4,"ms.topic":"article","dev_langs":["csharp"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-filter-on-an-optional-element.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-filter-on-an-optional-element.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-filter-on-an-optional-element.md","document_id":"3b5271f1-c31f-ed4a-9735-1e5f4c2f9152","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/linq/how-to-filter-on-an-optional-element","toc_asset_id":"articles/csharp/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Filter on an Optional Element (C#)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":268,"_op_rawTitle":"<h1 id=\"how-to-filter-on-an-optional-element-c\" sourcefile=\"docs/csharp/programming-guide/concepts/linq/how-to-filter-on-an-optional-element.md\" sourcestartlinenumber=\"20\" sourceendlinenumber=\"20\">How to: Filter on an Optional Element (C#)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/linq/how-to-filter-on-an-optional-element","fileRelativePath":"articles/csharp/programming-guide/concepts/linq/how-to-filter-on-an-optional-element.html"},"themesRelativePathToOutputRoot":"_themes/"}