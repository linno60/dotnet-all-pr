{"content":"<div><div class=\"content\">\n<p>This topic shows how to get the value of elements. There are two main ways to do this. One way is to cast an <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> or an <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a> to the desired type. The explicit conversion operator then converts the contents of the element or attribute to the specified type and assigns it to your variable. Alternatively, you can use the <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement#System_Xml_Linq_XElement_Value_\" data-linktype=\"relative-path\">Value</a> property or the <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xattribute#System_Xml_Linq_XAttribute_Value_\" data-linktype=\"relative-path\">Value</a> property.  </p>\n<p> With C#, however, casting is generally the better approach. If you cast the element or attribute to a nullable type, the code is simpler to write when retrieving the value of an element (or attribute) that might or might not exist. The last example in this topic demonstrates this. However, you cannot set the contents of an element through casting, as you can through <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement#System_Xml_Linq_XElement_Value_\" data-linktype=\"relative-path\">Value</a> property.  </p>\n<h2 id=\"example\">Example</h2>\n<p> To retrieve the value of an element, you just cast the <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> object to your desired type. You can always cast an element to a string, as follows:  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">XElement e = new XElement(&quot;StringElement&quot;, &quot;abcde&quot;);  \nConsole.WriteLine(e);  \nConsole.WriteLine(&quot;Value of e:&quot; + (string)e);  \n</code></pre><p> This example produces the following output:  </p>\n<pre class=\"loading\"><code>&lt;StringElement&gt;abcde&lt;/StringElement&gt;  \nValue of e:abcde  \n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> You can also cast elements to types other than string. For example, if you have an element that contains an integer, you can cast it to <code>int</code>, as shown in the following code:  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">XElement e = new XElement(&quot;Age&quot;, &quot;44&quot;);  \nConsole.WriteLine(e);  \nConsole.WriteLine(&quot;Value of e:&quot; + (int)e);  \n</code></pre><p> This example produces the following output:  </p>\n<pre class=\"loading\"><code>&lt;Age&gt;44&lt;/Age&gt;  \nValue of e:44  \n</code></pre><p> LINQ to XML provides explicit cast operators for the following data types: <code>string</code>, <code>bool</code>, <code>bool?</code>, <code>int</code>, <code>int?</code>, <code>uint</code>, <code>uint?</code>, <code>long</code>, <code>long?</code>, <code>ulong</code>, <code>ulong?</code>, <code>float</code>, <code>float?</code>, <code>double</code>, <code>double?</code>, <code>decimal</code>, <code>decimal?</code>, <code>DateTime</code>, <code>DateTime?</code>, <code>TimeSpan</code>, <code>TimeSpan?</code>, <code>GUID</code>, and <code>GUID?</code>.  </p>\n<p> LINQ to XML provides the same cast operators for <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a> objects.  </p>\n<h2 id=\"example-2\">Example</h2>\n<p> You can use the <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement#System_Xml_Linq_XElement_Value_\" data-linktype=\"relative-path\">Value</a> property to retrieve the contents of an element:  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">XElement e = new XElement(&quot;StringElement&quot;, &quot;abcde&quot;);   \nConsole.WriteLine(e);  \nConsole.WriteLine(&quot;Value of e:&quot; + e.Value);  \n</code></pre><p> This example produces the following output:  </p>\n<pre class=\"loading\"><code>&lt;StringElement&gt;abcde&lt;/StringElement&gt;  \nValue of e:abcde  \n</code></pre><h2 id=\"example-3\">Example</h2>\n<p> Sometimes you try to retrieve the value of an element even though you are not sure it exists. In this case, when you assign the casted element to a nullable type (either <code>string</code> or one of the nullable types in the .NET Framework), if the element does not exist the assigned variable is just set to <code>null</code>. The following code shows that when the element might or might not exist, it is easier to use casting than to use the <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement#System_Xml_Linq_XElement_Value_\" data-linktype=\"relative-path\">Value</a> property.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">XElement root = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Child1&quot;, &quot;child 1 content&quot;),  \n    new XElement(&quot;Child2&quot;, &quot;2&quot;)  \n);  \n\n// The following assignments show why it is easier to use  \n// casting when the element might or might not exist.  \n\nstring c1 = (string)root.Element(&quot;Child1&quot;);  \nConsole.WriteLine(&quot;c1:{0}&quot;, c1 == null ? &quot;element does not exist&quot; : c1);  \n\nint? c2 = (int?)root.Element(&quot;Child2&quot;);  \nConsole.WriteLine(&quot;c2:{0}&quot;, c2 == null ? &quot;element does not exist&quot; : c2.ToString());  \n\nstring c3 = (string)root.Element(&quot;Child3&quot;);  \nConsole.WriteLine(&quot;c3:{0}&quot;, c3 == null ? &quot;element does not exist&quot; : c3);  \n\nint? c4 = (int?)root.Element(&quot;Child4&quot;);  \nConsole.WriteLine(&quot;c4:{0}&quot;, c4 == null ? &quot;element does not exist&quot; : c4.ToString());  \n\nConsole.WriteLine();  \n\n// The following assignments show the required code when using  \n// the Value property when the element might or might not exist.  \n// Notice that this is more difficult than the casting approach.  \n\nXElement e1 = root.Element(&quot;Child1&quot;);  \nstring v1;  \nif (e1 == null)  \n    v1 = null;  \nelse  \n    v1 = e1.Value;  \nConsole.WriteLine(&quot;v1:{0}&quot;, v1 == null ? &quot;element does not exist&quot; : v1);  \n\nXElement e2 = root.Element(&quot;Child2&quot;);  \nint? v2;  \nif (e2 == null)  \n    v2 = null;  \nelse  \n    v2 = Int32.Parse(e2.Value);  \nConsole.WriteLine(&quot;v2:{0}&quot;, v2 == null ? &quot;element does not exist&quot; : v2.ToString());  \n\nXElement e3 = root.Element(&quot;Child3&quot;);  \nstring v3;  \nif (e3 == null)  \n    v3 = null;  \nelse  \n    v3 = e3.Value;  \nConsole.WriteLine(&quot;v3:{0}&quot;, v3 == null ? &quot;element does not exist&quot; : v3);  \n\nXElement e4 = root.Element(&quot;Child4&quot;);  \nint? v4;  \nif (e4 == null)  \n    v4 = null;  \nelse  \n    v4 = Int32.Parse(e4.Value);  \nConsole.WriteLine(&quot;v4:{0}&quot;, v4 == null ? &quot;element does not exist&quot; : v4.ToString());  \n</code></pre><p> This code produces the following output:  </p>\n<pre class=\"loading\"><code>c1:child 1 content  \nc2:2  \nc3:element does not exist  \nc4:element does not exist  \n\nv1:child 1 content  \nv2:2  \nv3:element does not exist  \nv4:element does not exist  \n</code></pre><p> In general, you can write simpler code when using casting to retrieve the contents of elements and attributes.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"linq-to-xml-axes\" data-linktype=\"relative-path\">LINQ to XML Axes (C#)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"4228c007-07c9-4cf2-a45b-e7074c109581\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-retrieve-the-value-of-an-element-linq-to-xml.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-retrieve-the-value-of-an-element-linq-to-xml.md\">\r\n<meta name=\"document_id\" content=\"67dce4a6-5573-adcb-2b3f-82fef090a06d\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"How to: Retrieve the Value of an Element (LINQ to XML) (C#) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"4228c007-07c9-4cf2-a45b-e7074c109581","caps.latest.revision":3,"ms.topic":"article","dev_langs":["csharp"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-retrieve-the-value-of-an-element-linq-to-xml.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-retrieve-the-value-of-an-element-linq-to-xml.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-retrieve-the-value-of-an-element-linq-to-xml.md","document_id":"67dce4a6-5573-adcb-2b3f-82fef090a06d","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/linq/how-to-retrieve-the-value-of-an-element-linq-to-xml","toc_asset_id":"articles/csharp/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Retrieve the Value of an Element (LINQ to XML) (C#)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":675,"_op_rawTitle":"<h1 id=\"how-to-retrieve-the-value-of-an-element-linq-to-xml-c\" sourcefile=\"docs/csharp/programming-guide/concepts/linq/how-to-retrieve-the-value-of-an-element-linq-to-xml.md\" sourcestartlinenumber=\"20\" sourceendlinenumber=\"20\">How to: Retrieve the Value of an Element (LINQ to XML) (C#)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/linq/how-to-retrieve-the-value-of-an-element-linq-to-xml","fileRelativePath":"articles/csharp/programming-guide/concepts/linq/how-to-retrieve-the-value-of-an-element-linq-to-xml.html"},"themesRelativePathToOutputRoot":"_themes/"}