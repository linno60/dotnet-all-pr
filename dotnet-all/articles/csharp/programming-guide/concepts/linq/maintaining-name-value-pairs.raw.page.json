{"content":"<div><div class=\"content\">\n<p>Many applications have to maintain information that is best kept as name/value pairs. This information might be configuration information or global settings. LINQ to XML contains some methods that make it easy to keep a set of name/value pairs. You can either keep the information as attributes or as a set of child elements.  </p>\n<p> One difference between keeping the information as attributes or as child elements is that attributes have the constraint that there can be only one attribute with a particular name for an element. This limitation does not apply to child elements.  </p>\n<h2 id=\"setattributevalue-and-setelementvalue\">SetAttributeValue and SetElementValue</h2>\n<p> The two methods that facilitate keeping name/value pairs are <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement#System_Xml_Linq_XElement_SetAttributeValue_\" data-linktype=\"relative-path\">SetAttributeValue</a> and <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement#System_Xml_Linq_XElement_SetElementValue_\" data-linktype=\"relative-path\">SetElementValue</a>. These two methods have similar semantics.  </p>\n<p> <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement#System_Xml_Linq_XElement_SetAttributeValue_\" data-linktype=\"relative-path\">SetAttributeValue</a> can add, modify, or remove attributes of an element.  </p>\n<ul>\n<li><p>If you call <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement#System_Xml_Linq_XElement_SetAttributeValue_\" data-linktype=\"relative-path\">SetAttributeValue</a> with a name of an attribute that does not exist, the method creates a new attribute and adds it to the specified element.  </p>\n</li>\n<li><p>If you call <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement#System_Xml_Linq_XElement_SetAttributeValue_\" data-linktype=\"relative-path\">SetAttributeValue</a> with a name of an existing attribute and with some specified content, the contents of the attribute are replaced with the specified content.  </p>\n</li>\n<li><p>If you call <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement#System_Xml_Linq_XElement_SetAttributeValue_\" data-linktype=\"relative-path\">SetAttributeValue</a> with a name of an existing attribute, and specify null for the content, the attribute is removed from its parent.  </p>\n<p><a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement#System_Xml_Linq_XElement_SetElementValue_\" data-linktype=\"relative-path\">SetElementValue</a> can add, modify, or remove child elements of an element.  </p>\n</li>\n<li><p>If you call <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement#System_Xml_Linq_XElement_SetElementValue_\" data-linktype=\"relative-path\">SetElementValue</a> with a name of a child element that does not exist, the method creates a new element and adds it to the specified element.  </p>\n</li>\n<li><p>If you call <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement#System_Xml_Linq_XElement_SetElementValue_\" data-linktype=\"relative-path\">SetElementValue</a> with a name of an existing element and with some specified content, the contents of the element are replaced with the specified content.  </p>\n</li>\n<li><p>If you call <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement#System_Xml_Linq_XElement_SetElementValue_\" data-linktype=\"relative-path\">SetElementValue</a> with a name of an existing element, and specify null for the content, the element is removed from its parent.  </p>\n</li>\n</ul>\n<h2 id=\"example\">Example</h2>\n<p> The following example creates an element with no attributes. It then uses the <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement#System_Xml_Linq_XElement_SetAttributeValue_\" data-linktype=\"relative-path\">SetAttributeValue</a> method to create and maintain a list of name/value pairs.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">// Create an element with no content.  \nXElement root = new XElement(&quot;Root&quot;);  \n\n// Add a number of name/value pairs as attributes.  \nroot.SetAttributeValue(&quot;Top&quot;, 22);  \nroot.SetAttributeValue(&quot;Left&quot;, 20);  \nroot.SetAttributeValue(&quot;Bottom&quot;, 122);  \nroot.SetAttributeValue(&quot;Right&quot;, 300);  \nroot.SetAttributeValue(&quot;DefaultColor&quot;, &quot;Color.Red&quot;);  \nConsole.WriteLine(root);  \n\n// Replace the value of Top.  \nroot.SetAttributeValue(&quot;Top&quot;, 10);  \nConsole.WriteLine(root);  \n\n// Remove DefaultColor.  \nroot.SetAttributeValue(&quot;DefaultColor&quot;, null);  \nConsole.WriteLine(root);  \n</code></pre><p> This example produces the following output:  </p>\n<pre class=\"loading\"><code>&lt;Root Top=&quot;22&quot; Left=&quot;20&quot; Bottom=&quot;122&quot; Right=&quot;300&quot; DefaultColor=&quot;Color.Red&quot; /&gt;  \n&lt;Root Top=&quot;10&quot; Left=&quot;20&quot; Bottom=&quot;122&quot; Right=&quot;300&quot; DefaultColor=&quot;Color.Red&quot; /&gt;  \n&lt;Root Top=&quot;10&quot; Left=&quot;20&quot; Bottom=&quot;122&quot; Right=&quot;300&quot; /&gt;  \n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> The following example creates an element with no child elements. It then uses the <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement#System_Xml_Linq_XElement_SetElementValue_\" data-linktype=\"relative-path\">SetElementValue</a> method to create and maintain a list of name/value pairs.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">// Create an element with no content.  \nXElement root = new XElement(&quot;Root&quot;);  \n\n// Add a number of name/value pairs as elements.  \nroot.SetElementValue(&quot;Top&quot;, 22);  \nroot.SetElementValue(&quot;Left&quot;, 20);  \nroot.SetElementValue(&quot;Bottom&quot;, 122);  \nroot.SetElementValue(&quot;Right&quot;, 300);  \nroot.SetElementValue(&quot;DefaultColor&quot;, &quot;Color.Red&quot;);  \nConsole.WriteLine(root);  \nConsole.WriteLine(&quot;----&quot;);  \n\n// Replace the value of Top.  \nroot.SetElementValue(&quot;Top&quot;, 10);  \nConsole.WriteLine(root);  \nConsole.WriteLine(&quot;----&quot;);  \n\n// Remove DefaultColor.  \nroot.SetElementValue(&quot;DefaultColor&quot;, null);  \nConsole.WriteLine(root);  \n</code></pre><p> This example produces the following output:  </p>\n<pre class=\"loading\"><code>&lt;Root&gt;  \n  &lt;Top&gt;22&lt;/Top&gt;  \n  &lt;Left&gt;20&lt;/Left&gt;  \n  &lt;Bottom&gt;122&lt;/Bottom&gt;  \n  &lt;Right&gt;300&lt;/Right&gt;  \n  &lt;DefaultColor&gt;Color.Red&lt;/DefaultColor&gt;  \n&lt;/Root&gt;  \n----  \n&lt;Root&gt;  \n  &lt;Top&gt;10&lt;/Top&gt;  \n  &lt;Left&gt;20&lt;/Left&gt;  \n  &lt;Bottom&gt;122&lt;/Bottom&gt;  \n  &lt;Right&gt;300&lt;/Right&gt;  \n  &lt;DefaultColor&gt;Color.Red&lt;/DefaultColor&gt;  \n&lt;/Root&gt;  \n----  \n&lt;Root&gt;  \n  &lt;Top&gt;10&lt;/Top&gt;  \n  &lt;Left&gt;20&lt;/Left&gt;  \n  &lt;Bottom&gt;122&lt;/Bottom&gt;  \n  &lt;Right&gt;300&lt;/Right&gt;  \n&lt;/Root&gt;  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement#System_Xml_Linq_XElement_SetAttributeValue_\" data-linktype=\"relative-path\">SetAttributeValue</a><br> <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement#System_Xml_Linq_XElement_SetElementValue_\" data-linktype=\"relative-path\">SetElementValue</a><br> <a href=\"modifying-xml-trees-linq-to-xml\" data-linktype=\"relative-path\">Modifying XML Trees (LINQ to XML) (C#)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-all/api/toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"7b04b0f1-af64-42eb-8737-83f8861b5915\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/maintaining-name-value-pairs.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/maintaining-name-value-pairs.md\">\r\n<meta name=\"document_id\" content=\"7b67846f-058e-7f25-87c6-dbe3b2625c45\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Maintaining Name-Value Pairs (C#) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"7b04b0f1-af64-42eb-8737-83f8861b5915","caps.latest.revision":3,"ms.topic":"article","dev_langs":["csharp"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/maintaining-name-value-pairs.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/maintaining-name-value-pairs.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/concepts/linq/maintaining-name-value-pairs.md","document_id":"7b67846f-058e-7f25-87c6-dbe3b2625c45","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/concepts/linq/maintaining-name-value-pairs","toc_asset_id":"articles/csharp/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"Maintaining Name-Value Pairs (C#)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":491,"_op_rawTitle":"<h1 id=\"maintaining-namevalue-pairs-c\" sourcefile=\"docs/csharp/programming-guide/concepts/linq/maintaining-name-value-pairs.md\" sourcestartlinenumber=\"20\" sourceendlinenumber=\"20\">Maintaining Name/Value Pairs (C#)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/concepts/linq/maintaining-name-value-pairs","fileRelativePath":"articles/csharp/programming-guide/concepts/linq/maintaining-name-value-pairs.html"},"themesRelativePathToOutputRoot":"_themes/"}