{"content":"<div><div class=\"content\">\n<p>The following section introduces new language constructs introduced in C# 3.0. Although these new features are all used to a degree with LINQ queries, they are not limited to LINQ and can be used in any context where you find them useful.  </p>\n<h2 id=\"query-expressions\">Query Expressions</h2>\n<p> Queries expressions use a declarative syntax similar to SQL or XQuery to query over IEnumerable collections. At compile time query syntax is converted to method calls to a LINQ provider&#39;s implementation of the standard query operator extension methods. Applications control the standard query operators that are in scope by specifying the appropriate namespace with a <code>using</code> directive. The following query expression takes an array of strings, groups them according to the first character in the string, and orders the groups.  </p>\n<pre class=\"loading\"><code>var query = from str in stringArray  \n            group str by str[0] into stringGroup  \n            orderby stringGroup.Key  \n            select stringGroup;  \n</code></pre><p> For more information, see <a href=\"../../linq-query-expressions/index\" data-linktype=\"relative-path\">LINQ Query Expressions</a>.  </p>\n<h2 id=\"implicitly-typed-variables-var\">Implicitly Typed Variables (var)</h2>\n<p> Instead of explicitly specifying a type when you declare and initialize a variable, you can use the <a href=\"../../../language-reference/keywords/var\" data-linktype=\"relative-path\">var</a> modifier to instruct the compiler to infer and assign the type, as shown here:  </p>\n<pre class=\"loading\"><code>var number = 5;  \nvar name = &quot;Virginia&quot;;  \nvar query = from str in stringArray  \n            where str[0] == &#39;m&#39;  \n            select str;  \n</code></pre><p> Variables declared as <code>var</code> are just as strongly-typed as variables whose type you specify explicitly. The use of <code>var</code> makes it possible to create anonymous types, but it can be used for any local variable. Arrays can also be declared with implicit typing.  </p>\n<p> For more information, see <a href=\"../../classes-and-structs/implicitly-typed-local-variables\" data-linktype=\"relative-path\">Implicitly Typed Local Variables</a>.  </p>\n<h2 id=\"object-and-collection-initializers\">Object and Collection Initializers</h2>\n<p> Object and collection initializers make it possible to initialize objects without explicitly calling a constructor for the object. Initializers are typically used in query expressions when they project the source data into a new data type. Assuming a class named <code>Customer</code> with public <code>Name</code> and <code>Phone</code> properties, the object initializer can be used as in the following code:  </p>\n<pre class=\"loading\"><code>Customer cust = new Customer { Name = &quot;Mike&quot;, Phone = &quot;555-1212&quot; };  \n</code></pre><p> For more information, see <a href=\"../../classes-and-structs/object-and-collection-initializers\" data-linktype=\"relative-path\">Object and Collection Initializers</a>.  </p>\n<h2 id=\"anonymous-types\">Anonymous Types</h2>\n<p> An anonymous type is constructed by the compiler and the type name is only available to the compiler. Anonymous types provide a convenient way to group a set of properties temporarily in a query result without having to define a separate named type. Anonymous types are initialized with a new expression and an object initializer, as shown here:  </p>\n<pre class=\"loading\"><code>select new {name = cust.Name, phone = cust.Phone};  \n</code></pre><p> For more information, see <a href=\"../../classes-and-structs/anonymous-types\" data-linktype=\"relative-path\">Anonymous Types</a>.  </p>\n<h2 id=\"extension-methods\">Extension Methods</h2>\n<p> An extension method is a static method that can be associated with a type, so that it can be called as if it were an instance method on the type. This feature enables you to, in effect, &quot;add&quot; new methods to existing types without actually modifying them. The standard query operators are a set of extension methods that provide LINQ query functionality for any type that implements <a class=\"xref\" href=\"../../../../../api/system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>.  </p>\n<p> For more information, see <a href=\"../../classes-and-structs/extension-methods\" data-linktype=\"relative-path\">Extension Methods</a>.  </p>\n<h2 id=\"lambda-expressions\">Lambda Expressions</h2>\n<p> A lambda expression is an inline function that uses the =&gt; operator to separate input parameters from the function body and can be converted at compile time to a delegate or an expression tree. In LINQ programming, you will encounter lambda expressions when you make direct method calls to the standard query operators.  </p>\n<p> For more information, see:  </p>\n<ul>\n<li><p><a href=\"../../statements-expressions-operators/anonymous-functions\" data-linktype=\"relative-path\">Anonymous Functions</a>  </p>\n</li>\n<li><p><a href=\"../../statements-expressions-operators/lambda-expressions\" data-linktype=\"relative-path\">Lambda Expressions</a>  </p>\n</li>\n<li><p><a href=\"../expression-trees/index\" data-linktype=\"relative-path\">Expression Trees (C#)</a>  </p>\n</li>\n</ul>\n<h2 id=\"auto-implemented-properties\">Auto-Implemented Properties</h2>\n<p> Auto-implemented properties make property-declaration more concise. When you declare a property as shown in the following example, the compiler will create a private, anonymous backing field that is not accessible except through the property getter and setter.  </p>\n<pre class=\"loading\"><code>public string Name {get; set;}  \n</code></pre><p> For more information, see <a href=\"../../classes-and-structs/auto-implemented-properties\" data-linktype=\"relative-path\">Auto-Implemented Properties</a>.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"index\" data-linktype=\"relative-path\">Language-Integrated Query (LINQ) (C#)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"524b0078-ebfd-45a7-b390-f2ceb9d84797\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"23\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/features-that-support-linq.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/features-that-support-linq.md\">\r\n<meta name=\"document_id\" content=\"f7737540-7252-79c3-d1e8-49eed7955c3b\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"C# Features That Support LINQ | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"524b0078-ebfd-45a7-b390-f2ceb9d84797","translation.priority.ht":["de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","ru-ru","zh-cn","zh-tw"],"caps.latest.revision":23,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["LINQ [C#], features supporting LINQ"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/features-that-support-linq.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/features-that-support-linq.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/concepts/linq/features-that-support-linq.md","document_id":"f7737540-7252-79c3-d1e8-49eed7955c3b","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/linq/features-that-support-linq","toc_asset_id":"articles/csharp/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"C# Features That Support LINQ","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":610,"_op_rawTitle":"<h1 id=\"c-features-that-support-linq\" sourcefile=\"docs/csharp/programming-guide/concepts/linq/features-that-support-linq.md\" sourcestartlinenumber=\"37\" sourceendlinenumber=\"37\">C# Features That Support LINQ</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/linq/features-that-support-linq","fileRelativePath":"articles/csharp/programming-guide/concepts/linq/features-that-support-linq.html"},"themesRelativePathToOutputRoot":"_themes/"}