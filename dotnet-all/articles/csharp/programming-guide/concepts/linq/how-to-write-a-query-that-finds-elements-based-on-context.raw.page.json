{"content":"<div><div class=\"content\">\n<p>Sometimes you might have to write a query that selects elements based on their context. You might want to filter based on preceding or following sibling elements. You might want to filter based on child or ancestor elements.  </p>\n<p> You can do this by writing a query and using the results of the query in the <code>where</code> clause. If you have to first test against null, and then test the value, it is more convenient to do the query in a <code>let</code> clause, and then use the results in the <code>where</code> clause.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following example selects all <code>p</code> elements that are immediately followed by a <code>ul</code> element.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">XElement doc = XElement.Parse(@&quot;&lt;Root&gt;  \n    &lt;p id=&quot;&quot;1&quot;&quot;/&gt;  \n    &lt;ul&gt;abc&lt;/ul&gt;  \n    &lt;Child&gt;  \n        &lt;p id=&quot;&quot;2&quot;&quot;/&gt;  \n        &lt;notul/&gt;  \n        &lt;p id=&quot;&quot;3&quot;&quot;/&gt;  \n        &lt;ul&gt;def&lt;/ul&gt;  \n        &lt;p id=&quot;&quot;4&quot;&quot;/&gt;  \n    &lt;/Child&gt;  \n    &lt;Child&gt;  \n        &lt;p id=&quot;&quot;5&quot;&quot;/&gt;  \n        &lt;notul/&gt;  \n        &lt;p id=&quot;&quot;6&quot;&quot;/&gt;  \n        &lt;ul&gt;abc&lt;/ul&gt;  \n        &lt;p id=&quot;&quot;7&quot;&quot;/&gt;  \n    &lt;/Child&gt;  \n&lt;/Root&gt;&quot;);  \n\nIEnumerable&lt;XElement&gt; items =  \n    from e in doc.Descendants(&quot;p&quot;)  \n    let z = e.ElementsAfterSelf().FirstOrDefault()  \n    where z != null &amp;&amp; z.Name.LocalName == &quot;ul&quot;  \n    select e;  \n\nforeach (XElement e in items)  \n    Console.WriteLine(&quot;id = {0}&quot;, (string)e.Attribute(&quot;id&quot;));  \n</code></pre><p> This code produces the following output:  </p>\n<pre class=\"loading\"><code>id = 1  \nid = 3  \nid = 6  \n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> The following example shows the same query for XML that is in a namespace. For more information, see <a href=\"working-with-xml-namespaces\" data-linktype=\"relative-path\">Working with XML Namespaces (C#)</a>.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">XElement doc = XElement.Parse(@&quot;&lt;Root xmlns=&#39;http://www.adatum.com&#39;&gt;  \n    &lt;p id=&quot;&quot;1&quot;&quot;/&gt;  \n    &lt;ul&gt;abc&lt;/ul&gt;  \n    &lt;Child&gt;  \n        &lt;p id=&quot;&quot;2&quot;&quot;/&gt;  \n        &lt;notul/&gt;  \n        &lt;p id=&quot;&quot;3&quot;&quot;/&gt;  \n        &lt;ul&gt;def&lt;/ul&gt;  \n        &lt;p id=&quot;&quot;4&quot;&quot;/&gt;  \n    &lt;/Child&gt;  \n    &lt;Child&gt;  \n        &lt;p id=&quot;&quot;5&quot;&quot;/&gt;  \n        &lt;notul/&gt;  \n        &lt;p id=&quot;&quot;6&quot;&quot;/&gt;  \n        &lt;ul&gt;abc&lt;/ul&gt;  \n        &lt;p id=&quot;&quot;7&quot;&quot;/&gt;  \n    &lt;/Child&gt;  \n&lt;/Root&gt;&quot;);  \n\nXNamespace ad = &quot;http://www.adatum.com&quot;;  \n\nIEnumerable&lt;XElement&gt; items =  \n    from e in doc.Descendants(ad + &quot;p&quot;)  \n    let z = e.ElementsAfterSelf().FirstOrDefault()  \n    where z != null &amp;&amp; z.Name == ad.GetName(&quot;ul&quot;)  \n    select e;  \n\nforeach (XElement e in items)  \n    Console.WriteLine(&quot;id = {0}&quot;, (string)e.Attribute(&quot;id&quot;));  \n</code></pre><p> This code produces the following output:  </p>\n<pre class=\"loading\"><code>id = 1  \nid = 3  \nid = 6  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement#System_Xml_Linq_XElement_Parse_\" data-linktype=\"relative-path\">Parse</a><br> <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xcontainer#System_Xml_Linq_XContainer_Descendants_\" data-linktype=\"relative-path\">Descendants</a><br> <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xnode#System_Xml_Linq_XNode_ElementsAfterSelf_\" data-linktype=\"relative-path\">ElementsAfterSelf</a><br> <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb358452(v=vs.110).aspx\" data-linktype=\"external\">FirstOrDefault</a><br> <a href=\"basic-queries-linq-to-xml\" data-linktype=\"relative-path\">Basic Queries (LINQ to XML) (C#)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"3ff79ef0-fc8b-42fe-8cc0-10dc32b06b4e\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-write-a-query-that-finds-elements-based-on-context.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-write-a-query-that-finds-elements-based-on-context.md\">\r\n<meta name=\"document_id\" content=\"197c1c85-08a2-4242-3edb-49fbf37b2927\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"How to: Write a Query that Finds Elements Based on Context (C#) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"3ff79ef0-fc8b-42fe-8cc0-10dc32b06b4e","caps.latest.revision":3,"ms.topic":"article","dev_langs":["csharp"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-write-a-query-that-finds-elements-based-on-context.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-write-a-query-that-finds-elements-based-on-context.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-write-a-query-that-finds-elements-based-on-context.md","document_id":"197c1c85-08a2-4242-3edb-49fbf37b2927","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/concepts/linq/how-to-write-a-query-that-finds-elements-based-on-context","toc_asset_id":"articles/csharp/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Write a Query that Finds Elements Based on Context (C#)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":292,"_op_rawTitle":"<h1 id=\"how-to-write-a-query-that-finds-elements-based-on-context-c\" sourcefile=\"docs/csharp/programming-guide/concepts/linq/how-to-write-a-query-that-finds-elements-based-on-context.md\" sourcestartlinenumber=\"20\" sourceendlinenumber=\"20\">How to: Write a Query that Finds Elements Based on Context (C#)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/concepts/linq/how-to-write-a-query-that-finds-elements-based-on-context","fileRelativePath":"articles/csharp/programming-guide/concepts/linq/how-to-write-a-query-that-finds-elements-based-on-context.html"},"themesRelativePathToOutputRoot":"_themes/"}