{"content":"<div><div class=\"content\">\n<p>You can write your own axis methods to retrieve collections from an XML tree. One of the best ways to do this is to write an extension method that returns a collection of elements or attributes. You can write your extension method to return specific subsets of elements or attributes, based on the requirements of your application.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following example uses two extension methods. The first extension method, <code>GetXPath</code>, operates on <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xobject\" data-linktype=\"relative-path\">XObject</a>, and returns an XPath expression that when evaluated will return the node or attribute. The second extension method, <code>Find</code>, operates on <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>. It returns a collection of <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a> objects and <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> objects that contain some specified text.  </p>\n<p> This example uses the following XML document: <a href=\"sample-xml-file-multiple-purchase-orders-linq-to-xml\" data-linktype=\"relative-path\">Sample XML File: Multiple Purchase Orders (LINQ to XML)</a>.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">public static class MyExtensions  \n{  \n    private static string GetQName(XElement xe)  \n    {  \n        string prefix = xe.GetPrefixOfNamespace(xe.Name.Namespace);  \n        if (xe.Name.Namespace == XNamespace.None || prefix == null)  \n            return xe.Name.LocalName.ToString();  \n        else  \n            return prefix + &quot;:&quot; + xe.Name.LocalName.ToString();  \n    }  \n\n    private static string GetQName(XAttribute xa)  \n    {  \n        string prefix =  \n            xa.Parent.GetPrefixOfNamespace(xa.Name.Namespace);  \n        if (xa.Name.Namespace == XNamespace.None || prefix == null)  \n            return xa.Name.ToString();  \n        else  \n            return prefix + &quot;:&quot; + xa.Name.LocalName;  \n    }  \n\n    private static string NameWithPredicate(XElement el)  \n    {  \n        if (el.Parent != null &amp;&amp; el.Parent.Elements(el.Name).Count() != 1)  \n            return GetQName(el) + &quot;[&quot; +   \n                (el.ElementsBeforeSelf(el.Name).Count() + 1) + &quot;]&quot;;  \n        else  \n            return GetQName(el);  \n    }  \n\n    public static string StrCat&lt;T&gt;(this IEnumerable&lt;T&gt; source,  \n        string separator)  \n    {  \n        return source.Aggregate(new StringBuilder(),  \n                   (sb, i) =&gt; sb  \n                       .Append(i.ToString())  \n                       .Append(separator),  \n                   s =&gt; s.ToString());  \n    }  \n\n    public static string GetXPath(this XObject xobj)  \n    {  \n        if (xobj.Parent == null)  \n        {  \n            XDocument doc = xobj as XDocument;  \n            if (doc != null)  \n                return &quot;.&quot;;  \n            XElement el = xobj as XElement;  \n            if (el != null)  \n                return &quot;/&quot; + NameWithPredicate(el);  \n            // the XPath data model does not include white space text nodes  \n            // that are children of a document, so this method returns null.  \n            XText xt = xobj as XText;  \n            if (xt != null)  \n                return null;  \n            XComment com = xobj as XComment;  \n            if (com != null)  \n                return  \n                    &quot;/&quot; +  \n                    (  \n                        com  \n                        .Document  \n                        .Nodes()  \n                        .OfType&lt;XComment&gt;()  \n                        .Count() != 1 ?  \n                        &quot;comment()[&quot; +  \n                        (com  \n                        .NodesBeforeSelf()  \n                        .OfType&lt;XComment&gt;()  \n                        .Count() + 1) +  \n                        &quot;]&quot; :  \n                        &quot;comment()&quot;  \n                    );  \n            XProcessingInstruction pi = xobj as XProcessingInstruction;  \n            if (pi != null)  \n                return  \n                    &quot;/&quot; +  \n                    (  \n                        pi.Document.Nodes()  \n                        .OfType&lt;XProcessingInstruction&gt;()  \n                        .Count() != 1 ?  \n                        &quot;processing-instruction()[&quot; +  \n                        (pi  \n                        .NodesBeforeSelf()  \n                        .OfType&lt;XProcessingInstruction&gt;()  \n                        .Count() + 1) +  \n                        &quot;]&quot; :  \n                        &quot;processing-instruction()&quot;  \n                    );  \n            return null;  \n        }  \n        else  \n        {  \n            XElement el = xobj as XElement;  \n            if (el != null)  \n            {  \n                return  \n                    &quot;/&quot; +  \n                    el  \n                    .Ancestors()  \n                    .InDocumentOrder()  \n                    .Select(e =&gt; NameWithPredicate(e))  \n                    .StrCat(&quot;/&quot;) +  \n                    NameWithPredicate(el);  \n            }  \n            XAttribute at = xobj as XAttribute;  \n            if (at != null)  \n                return  \n                    &quot;/&quot; +  \n                    at  \n                    .Parent  \n                    .AncestorsAndSelf()  \n                    .InDocumentOrder()  \n                    .Select(e =&gt; NameWithPredicate(e))  \n                    .StrCat(&quot;/&quot;) +  \n                    &quot;@&quot; + GetQName(at);  \n            XComment com = xobj as XComment;  \n            if (com != null)  \n                return  \n                    &quot;/&quot; +  \n                    com  \n                    .Parent  \n                    .AncestorsAndSelf()  \n                    .InDocumentOrder()  \n                    .Select(e =&gt; NameWithPredicate(e))  \n                    .StrCat(&quot;/&quot;) +  \n                    (  \n                        com  \n                        .Parent  \n                        .Nodes()  \n                        .OfType&lt;XComment&gt;()  \n                        .Count() != 1 ?  \n                        &quot;comment()[&quot; +  \n                        (com  \n                        .NodesBeforeSelf()  \n                        .OfType&lt;XComment&gt;()  \n                        .Count() + 1) + &quot;]&quot; :  \n                        &quot;comment()&quot;  \n                    );  \n            XCData cd = xobj as XCData;  \n            if (cd != null)  \n                return  \n                    &quot;/&quot; +  \n                    cd  \n                    .Parent  \n                    .AncestorsAndSelf()  \n                    .InDocumentOrder()  \n                    .Select(e =&gt; NameWithPredicate(e))  \n                    .StrCat(&quot;/&quot;) +  \n                    (  \n                        cd  \n                        .Parent  \n                        .Nodes()  \n                        .OfType&lt;XText&gt;()  \n                        .Count() != 1 ?  \n                        &quot;text()[&quot; +  \n                        (cd  \n                        .NodesBeforeSelf()  \n                        .OfType&lt;XText&gt;()  \n                        .Count() + 1) + &quot;]&quot; :  \n                        &quot;text()&quot;  \n                    );  \n            XText tx = xobj as XText;  \n            if (tx != null)  \n                return  \n                    &quot;/&quot; +  \n                    tx  \n                    .Parent  \n                    .AncestorsAndSelf()  \n                    .InDocumentOrder()  \n                    .Select(e =&gt; NameWithPredicate(e))  \n                    .StrCat(&quot;/&quot;) +  \n                    (  \n                        tx  \n                        .Parent  \n                        .Nodes()  \n                        .OfType&lt;XText&gt;()  \n                        .Count() != 1 ?  \n                        &quot;text()[&quot; +  \n                        (tx  \n                        .NodesBeforeSelf()  \n                        .OfType&lt;XText&gt;()  \n                        .Count() + 1) + &quot;]&quot; :  \n                        &quot;text()&quot;  \n                    );  \n            XProcessingInstruction pi = xobj as XProcessingInstruction;  \n            if (pi != null)  \n                return  \n                    &quot;/&quot; +  \n                    pi  \n                    .Parent  \n                    .AncestorsAndSelf()  \n                    .InDocumentOrder()  \n                    .Select(e =&gt; NameWithPredicate(e))  \n                    .StrCat(&quot;/&quot;) +  \n                    (  \n                        pi  \n                        .Parent  \n                        .Nodes()  \n                        .OfType&lt;XProcessingInstruction&gt;()  \n                        .Count() != 1 ?  \n                        &quot;processing-instruction()[&quot; +  \n                        (pi  \n                        .NodesBeforeSelf()  \n                        .OfType&lt;XProcessingInstruction&gt;()  \n                        .Count() + 1) + &quot;]&quot; :  \n                        &quot;processing-instruction()&quot;  \n                    );  \n            return null;  \n        }  \n    }  \n\n    public static IEnumerable&lt;XObject&gt; Find(this XElement source, string value)  \n    {  \n        if (source.Attributes().Any())  \n        {  \n            foreach (XAttribute att in source.Attributes())  \n            {  \n                string contents = (string)att;  \n                if (contents.Contains(value))  \n                    yield return att;  \n            }  \n        }  \n        if (source.Elements().Any())  \n        {  \n            foreach (XElement child in source.Elements())  \n                foreach (XObject s in child.Find(value))  \n                    yield return s;  \n        }  \n        else  \n        {  \n            string contents = (string)source;  \n            if (contents.Contains(value))  \n                yield return source;  \n        }  \n    }  \n}  \n\nclass Program  \n{  \n    static void Main(string[] args)  \n    {  \n        XElement purchaseOrders = XElement.Load(&quot;PurchaseOrders.xml&quot;);  \n\n        IEnumerable&lt;XObject&gt; subset =  \n            from xobj in purchaseOrders.Find(&quot;1999&quot;)  \n            select xobj;  \n\n        foreach (XObject obj in subset)  \n        {  \n            Console.WriteLine(obj.GetXPath());  \n            if (obj.GetType() == typeof(XElement))  \n                Console.WriteLine(((XElement)obj).Value);  \n            else if (obj.GetType() == typeof(XAttribute))  \n                Console.WriteLine(((XAttribute)obj).Value);  \n        }  \n    }  \n}  \n</code></pre><p> This code produces the following output:  </p>\n<pre class=\"loading\"><code>/PurchaseOrders/PurchaseOrder[1]/@OrderDate  \n1999-10-20  \n/PurchaseOrders/PurchaseOrder[1]/Items/Item[2]/ShipDate  \n1999-05-21  \n/PurchaseOrders/PurchaseOrder[2]/@OrderDate  \n1999-10-22  \n/PurchaseOrders/PurchaseOrder[3]/@OrderDate  \n1999-10-22  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"advanced-query-techniques-linq-to-xml\" data-linktype=\"relative-path\">Advanced Query Techniques (LINQ to XML) (C#)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"50aef06b-1d22-4718-a18a-21237e26d7c1\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-write-a-linq-to-xml-axis-method.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-write-a-linq-to-xml-axis-method.md\">\r\n<meta name=\"document_id\" content=\"0b0c3b16-e34a-24ae-be90-c3bd11f97537\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"How to: Write a LINQ to XML Axis Method (C#) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"50aef06b-1d22-4718-a18a-21237e26d7c1","caps.latest.revision":3,"ms.topic":"article","dev_langs":["csharp"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-write-a-linq-to-xml-axis-method.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-write-a-linq-to-xml-axis-method.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-write-a-linq-to-xml-axis-method.md","document_id":"0b0c3b16-e34a-24ae-be90-c3bd11f97537","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/linq/how-to-write-a-linq-to-xml-axis-method","toc_asset_id":"articles/csharp/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Write a LINQ to XML Axis Method (C#)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":710,"_op_rawTitle":"<h1 id=\"how-to-write-a-linq-to-xml-axis-method-c\" sourcefile=\"docs/csharp/programming-guide/concepts/linq/how-to-write-a-linq-to-xml-axis-method.md\" sourcestartlinenumber=\"20\" sourceendlinenumber=\"20\">How to: Write a LINQ to XML Axis Method (C#)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/linq/how-to-write-a-linq-to-xml-axis-method","fileRelativePath":"articles/csharp/programming-guide/concepts/linq/how-to-write-a-linq-to-xml-axis-method.html"},"themesRelativePathToOutputRoot":"_themes/"}