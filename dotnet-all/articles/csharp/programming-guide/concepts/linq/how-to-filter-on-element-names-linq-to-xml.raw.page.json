{"content":"<div><div class=\"content\">\n<p>When you call one of the methods that return <a class=\"xref\" href=\"../../../../../api/system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> of <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>, you can filter on the element name.  </p>\n<h2 id=\"example\">Example</h2>\n<p> This example retrieves a collection of descendants that is filtered to contain only descendants with the specified name.  </p>\n<p> This example uses the following XML document: <a href=\"sample-xml-file-typical-purchase-order-linq-to-xml-1\" data-linktype=\"relative-path\">Sample XML File: Typical Purchase Order (LINQ to XML)</a>.  </p>\n<pre class=\"loading\"><code class=\"lang-csharp\">XElement po = XElement.Load(&quot;PurchaseOrder.xml&quot;);  \nIEnumerable&lt;XElement&gt; items =  \n    from el in po.Descendants(&quot;ProductName&quot;)  \n    select el;  \nforeach(XElement prdName in items)  \n    Console.WriteLine(prdName.Name + &quot;:&quot; + (string) prdName);  \n</code></pre><p> This code produces the following output:  </p>\n<pre class=\"loading\"><code>ProductName:Lawnmower  \nProductName:Baby Monitor  \n</code></pre><p> The other methods that return <a class=\"xref\" href=\"../../../../../api/system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> of <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> collections follow the same pattern. Their signatures are similar to <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xcontainer#System_Xml_Linq_XContainer_Elements_\" data-linktype=\"relative-path\">Elements</a> and <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xcontainer#System_Xml_Linq_XContainer_Descendants_\" data-linktype=\"relative-path\">Descendants</a>. The following is the complete list of methods that have similar method signatures:  </p>\n<ul>\n<li><a class=\"xref\" href=\"../../../../../api/system.xml.linq.xnode#System_Xml_Linq_XNode_Ancestors_\" data-linktype=\"relative-path\">Ancestors</a>  \n</li>\n<li><a class=\"xref\" href=\"../../../../../api/system.xml.linq.xcontainer#System_Xml_Linq_XContainer_Descendants_\" data-linktype=\"relative-path\">Descendants</a>  \n</li>\n<li><a class=\"xref\" href=\"../../../../../api/system.xml.linq.xcontainer#System_Xml_Linq_XContainer_Elements_\" data-linktype=\"relative-path\">Elements</a>  \n</li>\n<li><a class=\"xref\" href=\"../../../../../api/system.xml.linq.xnode#System_Xml_Linq_XNode_ElementsAfterSelf_\" data-linktype=\"relative-path\">ElementsAfterSelf</a>  \n</li>\n<li><a class=\"xref\" href=\"../../../../../api/system.xml.linq.xnode#System_Xml_Linq_XNode_ElementsBeforeSelf_\" data-linktype=\"relative-path\">ElementsBeforeSelf</a>  \n</li>\n<li><a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement#System_Xml_Linq_XElement_AncestorsAndSelf_\" data-linktype=\"relative-path\">AncestorsAndSelf</a>  \n</li>\n<li><a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement#System_Xml_Linq_XElement_DescendantsAndSelf_\" data-linktype=\"relative-path\">DescendantsAndSelf</a>  \n\n</li>\n</ul>\n<h2 id=\"example-1\">Example</h2>\n<p> The following example shows the same query for XML that is in a namespace. For more information, see <a href=\"working-with-xml-namespaces\" data-linktype=\"relative-path\">Working with XML Namespaces (C#)</a>.  </p>\n<p> This example uses the following XML document: <a href=\"sample-xml-file-typical-purchase-order-in-a-namespace\" data-linktype=\"relative-path\">Sample XML File: Typical Purchase Order in a Namespace</a>.  </p>\n<pre class=\"loading\"><code class=\"lang-csharp\">XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement po = XElement.Load(&quot;PurchaseOrderInNamespace.xml&quot;);  \nIEnumerable&lt;XElement&gt; items =  \n    from el in po.Descendants(aw + &quot;ProductName&quot;)  \n    select el;  \nforeach (XElement prdName in items)  \n    Console.WriteLine(prdName.Name + &quot;:&quot; + (string)prdName);  \n</code></pre><p> This code produces the following output:  </p>\n<pre class=\"loading\"><code>{http://www.adventure-works.com}ProductName:Lawnmower  \n{http://www.adventure-works.com}ProductName:Baby Monitor  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"linq-to-xml-axes\" data-linktype=\"relative-path\">LINQ to XML Axes (C#)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"1849fb03-f075-421f-863c-e8fb32773cdf\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:46 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/400dfda51d978f35c3995f90840643aaff1b9c13/docs/csharp/programming-guide/concepts/linq/how-to-filter-on-element-names-linq-to-xml.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-filter-on-element-names-linq-to-xml.md\">\r\n<meta name=\"document_id\" content=\"9d68f206-4be5-7c68-3b28-3036f2eeb362\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","uhfHeaderId":"MSDocsHeader-DotNet","title":"How to: Filter on Element Names (LINQ to XML) (C#) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"1849fb03-f075-421f-863c-e8fb32773cdf","caps.latest.revision":3,"ms.topic":"article","dev_langs":["csharp"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"tompratt-AQ","author_email":"v-thprat@microsoft.com","committer_name":"Maira Wenzel","comitter_email":"mairaw@microsoft.com","message":"Update language identifiers and styleguide. (#1796)","commit_sha":"400dfda51d978f35c3995f90840643aaff1b9c13","commit_date":"2017-03-24 14:01:03 -0700"},{"author_name":"tompratt-AQ","author_email":"v-thprat@microsoft.com","committer_name":"Maira Wenzel","comitter_email":"mairaw@microsoft.com","message":"Added missing samples to migrated topics (#1733)","commit_sha":"401ac8986dee5f9f1504fb6c4e1f627d87f0f236","commit_date":"2017-03-17 01:04:44 -0700"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-04-01 05:46 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/tompratt-AQ","display_name":"tompratt-AQ","id":"26311438"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"4/1/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/400dfda51d978f35c3995f90840643aaff1b9c13/docs/csharp/programming-guide/concepts/linq/how-to-filter-on-element-names-linq-to-xml.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-filter-on-element-names-linq-to-xml.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-filter-on-element-names-linq-to-xml.md","document_id":"9d68f206-4be5-7c68-3b28-3036f2eeb362","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/linq/how-to-filter-on-element-names-linq-to-xml","toc_asset_id":"articles/csharp/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Filter on Element Names (LINQ to XML) (C#)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":199,"_op_rawTitle":"<h1 id=\"how-to-filter-on-element-names-linq-to-xml-c\" sourcefile=\"docs/csharp/programming-guide/concepts/linq/how-to-filter-on-element-names-linq-to-xml.md\" sourcestartlinenumber=\"20\" sourceendlinenumber=\"20\">How to: Filter on Element Names (LINQ to XML) (C#)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/linq/how-to-filter-on-element-names-linq-to-xml","fileRelativePath":"articles/csharp/programming-guide/concepts/linq/how-to-filter-on-element-names-linq-to-xml.html"},"themesRelativePathToOutputRoot":"_themes/"}