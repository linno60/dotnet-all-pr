{"content":"<div><div class=\"content\">\n<p>LINQ to XML provides a powerful way to create XML elements called <em>functional construction</em>. Functional construction is the ability to create an XML tree in a single statement.  </p>\n<p> There are several key features of the LINQ to XML programming interface that enable functional construction:  </p>\n<ul>\n<li><p>The <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> constructor takes various types of arguments for content. For example, you can pass another <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> object, which becomes a child element. You can pass an <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a> object, which becomes an attribute of the element. Or you can pass any other type of object, which is converted to a string and becomes the text content of the element.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> constructor takes a <code>params</code> array of type <a class=\"xref\" href=\"../../../../../api/system.object\" data-linktype=\"relative-path\">Object</a>, so that you can pass any number of objects to the constructor. This enables you to create an element that has complex content.  </p>\n</li>\n<li><p>If an object implements <a class=\"xref\" href=\"../../../../../api/system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>, the collection in the object is enumerated, and all items in the collection are added. If the collection contains <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> or <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a> objects, each item in the collection is added separately. This is important because it lets you pass the results of a LINQ query to the constructor.  </p>\n</li>\n</ul>\n<p> These features enable you to write code to create an XML tree. The following is an example:  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">XElement contacts =  \n    new XElement(&quot;Contacts&quot;,  \n        new XElement(&quot;Contact&quot;,  \n            new XElement(&quot;Name&quot;, &quot;Patrick Hines&quot;),  \n            new XElement(&quot;Phone&quot;, &quot;206-555-0144&quot;),  \n            new XElement(&quot;Address&quot;,  \n                new XElement(&quot;Street1&quot;, &quot;123 Main St&quot;),  \n                new XElement(&quot;City&quot;, &quot;Mercer Island&quot;),  \n                new XElement(&quot;State&quot;, &quot;WA&quot;),  \n                new XElement(&quot;Postal&quot;, &quot;68042&quot;)  \n            )  \n        )  \n    );  \n</code></pre><p> These features also enable you to write code that uses the results of LINQ queries when you create an XML tree, as follows:  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">XElement srcTree = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Element&quot;, 1),  \n    new XElement(&quot;Element&quot;, 2),  \n    new XElement(&quot;Element&quot;, 3),  \n    new XElement(&quot;Element&quot;, 4),  \n    new XElement(&quot;Element&quot;, 5)  \n);  \nXElement xmlTree = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Child&quot;, 1),  \n    new XElement(&quot;Child&quot;, 2),  \n    from el in srcTree.Elements()  \n    where (int)el &gt; 2  \n    select el  \n);  \nConsole.WriteLine(xmlTree);  \n</code></pre><p> This example produces the following output:  </p>\n<pre class=\"loading\"><code class=\"lang-xml\">&lt;Root&gt;  \n  &lt;Child&gt;1&lt;/Child&gt;  \n  &lt;Child&gt;2&lt;/Child&gt;  \n  &lt;Element&gt;3&lt;/Element&gt;  \n  &lt;Element&gt;4&lt;/Element&gt;  \n  &lt;Element&gt;5&lt;/Element&gt;  \n&lt;/Root&gt;  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"creating-xml-trees\" data-linktype=\"relative-path\">Creating XML Trees (C#)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"57a82bcf-de03-4f1c-a0c8-9a76e989d542\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/functional-construction-linq-to-xml.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/functional-construction-linq-to-xml.md\">\r\n<meta name=\"document_id\" content=\"b462ea05-5f0b-1798-9ba8-f4f39697930c\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc1.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"Functional Construction (LINQ to XML) (C#) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"57a82bcf-de03-4f1c-a0c8-9a76e989d542","caps.latest.revision":3,"ms.topic":"article","dev_langs":["csharp"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/functional-construction-linq-to-xml.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/functional-construction-linq-to-xml.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/concepts/linq/functional-construction-linq-to-xml.md","document_id":"b462ea05-5f0b-1798-9ba8-f4f39697930c","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/linq/functional-construction-linq-to-xml","toc_asset_id":"articles/csharp/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"Functional Construction (LINQ to XML) (C#)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":313,"_op_rawTitle":"<h1 id=\"functional-construction-linq-to-xml-c\" sourcefile=\"docs/csharp/programming-guide/concepts/linq/functional-construction-linq-to-xml.md\" sourcestartlinenumber=\"25\" sourceendlinenumber=\"25\">Functional Construction (LINQ to XML) (C#)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/linq/functional-construction-linq-to-xml","fileRelativePath":"articles/csharp/programming-guide/concepts/linq/functional-construction-linq-to-xml.html"},"themesRelativePathToOutputRoot":"_themes/"}