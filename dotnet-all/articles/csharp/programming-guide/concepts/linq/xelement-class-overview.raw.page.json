{"content":"<div><div class=\"content\">\n<p>The <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> class is one of the fundamental classes in LINQ to XML. It represents an XML element. You can use this class to create elements; change the content of the element; add, change, or delete child elements; add attributes to an element; or serialize the contents of an element in text form. You can also interoperate with other classes in <a class=\"xref\" href=\"../../../../../api/system.xml\" data-linktype=\"relative-path\">System.Xml</a>, such as <a class=\"xref\" href=\"../../../../../api/system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>, <a class=\"xref\" href=\"../../../../../api/system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>, and <a class=\"xref\" href=\"../../../../../api/system.xml.xsl.xslcompiledtransform\" data-linktype=\"relative-path\">XslCompiledTransform</a>.  </p>\n<h2 id=\"xelement-functionality\">XElement Functionality</h2>\n<p> This topic describes the functionality provided by the <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> class.  </p>\n<h3 id=\"constructing-xml-trees\">Constructing XML Trees</h3>\n<p> You can construct XML trees in a variety of ways, including the following:  </p>\n<ul>\n<li><p>You can construct an XML tree in code. For more information, see <a href=\"creating-xml-trees\" data-linktype=\"relative-path\">Creating XML Trees (C#)</a>.  </p>\n</li>\n<li><p>You can parse XML from various sources, including a <a class=\"xref\" href=\"../../../../../api/system.io.textreader\" data-linktype=\"relative-path\">TextReader</a>, text files, or a Web address (URL). For more information, see <a href=\"parsing-xml\" data-linktype=\"relative-path\">Parsing XML (C#)</a>.  </p>\n</li>\n<li><p>You can use an <a class=\"xref\" href=\"../../../../../api/system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> to populate the tree. For more information, see <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xnode#System_Xml_Linq_XNode_ReadFrom_\" data-linktype=\"relative-path\">ReadFrom</a>.  </p>\n</li>\n<li><p>If you have a module that can write content to an <a class=\"xref\" href=\"../../../../../api/system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>, you can use the <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xcontainer#System_Xml_Linq_XContainer_CreateWriter_\" data-linktype=\"relative-path\">CreateWriter</a> method to create a writer, pass the writer to the module, and then use the content that is written to the <a class=\"xref\" href=\"../../../../../api/system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a> to populate the XML tree.  </p>\n</li>\n</ul>\n<p> However, the most common way to create an XML tree is as follows:  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">XElement contacts =  \n    new XElement(&quot;Contacts&quot;,  \n        new XElement(&quot;Contact&quot;,  \n            new XElement(&quot;Name&quot;, &quot;Patrick Hines&quot;),   \n            new XElement(&quot;Phone&quot;, &quot;206-555-0144&quot;),  \n            new XElement(&quot;Address&quot;,  \n                new XElement(&quot;Street1&quot;, &quot;123 Main St&quot;),  \n                new XElement(&quot;City&quot;, &quot;Mercer Island&quot;),  \n                new XElement(&quot;State&quot;, &quot;WA&quot;),  \n                new XElement(&quot;Postal&quot;, &quot;68042&quot;)  \n            )  \n        )  \n    );  \n</code></pre><p> Another very common technique for creating an XML tree involves using the results of a LINQ query to populate an XML tree, as shown in the following example:  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">XElement srcTree = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Element&quot;, 1),  \n    new XElement(&quot;Element&quot;, 2),  \n    new XElement(&quot;Element&quot;, 3),  \n    new XElement(&quot;Element&quot;, 4),  \n    new XElement(&quot;Element&quot;, 5)  \n);  \nXElement xmlTree = new XElement(&quot;Root&quot;,  \n    new XElement(&quot;Child&quot;, 1),  \n    new XElement(&quot;Child&quot;, 2),  \n    from el in srcTree.Elements()  \n    where (int)el &gt; 2  \n    select el  \n);  \nConsole.WriteLine(xmlTree);  \n</code></pre><p> This example produces the following output:  </p>\n<pre class=\"loading\"><code class=\"lang-xml\">&lt;Root&gt;  \n  &lt;Child&gt;1&lt;/Child&gt;  \n  &lt;Child&gt;2&lt;/Child&gt;  \n  &lt;Element&gt;3&lt;/Element&gt;  \n  &lt;Element&gt;4&lt;/Element&gt;  \n  &lt;Element&gt;5&lt;/Element&gt;  \n&lt;/Root&gt;  \n</code></pre><h3 id=\"serializing-xml-trees\">Serializing XML Trees</h3>\n<p> You can serialize the XML tree to a <a class=\"xref\" href=\"../../../../../api/system.io.file\" data-linktype=\"relative-path\">File</a>, a <a class=\"xref\" href=\"../../../../../api/system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a>, or an <a class=\"xref\" href=\"../../../../../api/system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.  </p>\n<p> For more information, see <a href=\"serializing-xml-trees\" data-linktype=\"relative-path\">Serializing XML Trees (C#)</a>.  </p>\n<h3 id=\"retrieving-xml-data-via-axis-methods\">Retrieving XML Data via Axis Methods</h3>\n<p> You can use axis methods to retrieve attributes, child elements, descendant elements, and ancestor elements. LINQ queries operate on axis methods, and provide several flexible and powerful ways to navigate through and process an XML tree.  </p>\n<p> For more information, see <a href=\"linq-to-xml-axes\" data-linktype=\"relative-path\">LINQ to XML Axes (C#)</a>.  </p>\n<h3 id=\"querying-xml-trees\">Querying XML Trees</h3>\n<p> You can write LINQ queries that extract data from an XML tree.  </p>\n<p> For more information, see <a href=\"querying-xml-trees\" data-linktype=\"relative-path\">Querying XML Trees (C#)</a>.  </p>\n<h3 id=\"modifying-xml-trees\">Modifying XML Trees</h3>\n<p> You can modify an element in a variety of ways, including changing its content or attributes. You can also remove an element from its parent.  </p>\n<p> For more information, see <a href=\"modifying-xml-trees-linq-to-xml\" data-linktype=\"relative-path\">Modifying XML Trees (LINQ to XML) (C#)</a>.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"linq-to-xml-programming-overview\" data-linktype=\"relative-path\">LINQ to XML Programming Overview (C#)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"2b9f0cd8-a1d1-4037-accf-0f38a410fa11\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/xelement-class-overview.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/xelement-class-overview.md\">\r\n<meta name=\"document_id\" content=\"f57530b1-ce4a-de2f-db0b-71c13b9da4e9\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"XElement Class Overview (C#) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"2b9f0cd8-a1d1-4037-accf-0f38a410fa11","caps.latest.revision":3,"ms.topic":"article","dev_langs":["csharp"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/xelement-class-overview.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/xelement-class-overview.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/concepts/linq/xelement-class-overview.md","document_id":"f57530b1-ce4a-de2f-db0b-71c13b9da4e9","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/linq/xelement-class-overview","toc_asset_id":"articles/csharp/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"XElement Class Overview (C#)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":452,"_op_rawTitle":"<h1 id=\"xelement-class-overview-c\" sourcefile=\"docs/csharp/programming-guide/concepts/linq/xelement-class-overview.md\" sourcestartlinenumber=\"25\" sourceendlinenumber=\"25\">XElement Class Overview (C#)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/linq/xelement-class-overview","fileRelativePath":"articles/csharp/programming-guide/concepts/linq/xelement-class-overview.html"},"themesRelativePathToOutputRoot":"_themes/"}