{"content":"<div><div class=\"content\">\n<p>A sorting operation orders the elements of a sequence based on one or more attributes. The first sort criterion performs a primary sort on the elements. By specifying a second sort criterion, you can sort the elements within each primary sort group.  </p>\n<p> The following illustration shows the results of an alphabetical sort operation on a sequence of characters.  </p>\n<p> <img src=\"media/linq_ordering.png\" alt=\"LINQ Sorting Operation\" title=\"LINQ_Ordering\" data-linktype=\"relative-path\">  </p>\n<p> The standard query operator methods that sort data are listed in the following section.  </p>\n<h2 id=\"methods\">Methods</h2>\n<table>\n<thead>\n<tr>\n<th>Method Name</th>\n<th>Description</th>\n<th>C# Query Expression Syntax</th>\n<th>More Information</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>OrderBy</td>\n<td>Sorts values in ascending order.</td>\n<td><code>orderby</code></td>\n<td><a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb343617(v=vs.110).aspx\" data-linktype=\"external\">Enumerable.OrderBy</a><br><br> <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb341409(v=vs.110).aspx\" data-linktype=\"external\">Queryable.OrderBy</a></td>\n</tr>\n<tr>\n<td>OrderByDescending</td>\n<td>Sorts values in descending order.</td>\n<td><code>orderby … descending</code></td>\n<td><a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb292260(v=vs.110).aspx\" data-linktype=\"external\">Enumerable.OrderByDescending</a><br><br> <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb335927(v=vs.110).aspx\" data-linktype=\"external\">Queryable.OrderByDescending</a></td>\n</tr>\n<tr>\n<td>ThenBy</td>\n<td>Performs a secondary sort in ascending order.</td>\n<td><code>orderby …, …</code></td>\n<td><a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb302612(v=vs.110).aspx\" data-linktype=\"external\">Enumerable.ThenBy</a><br><br> <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb356406(v=vs.110).aspx\" data-linktype=\"external\">Queryable.ThenBy</a></td>\n</tr>\n<tr>\n<td>ThenByDescending</td>\n<td>Performs a secondary sort in descending order.</td>\n<td><code>orderby …, … descending</code></td>\n<td><a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb341945(v=vs.110).aspx\" data-linktype=\"external\">Enumerable.ThenByDescending</a><br><br> <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb347128(v=vs.110).aspx\" data-linktype=\"external\">Queryable.ThenByDescending</a></td>\n</tr>\n<tr>\n<td>Reverse</td>\n<td>Reverses the order of the elements in a collection.</td>\n<td>Not applicable.</td>\n<td><a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb358497(v=vs.110).aspx\" data-linktype=\"external\">Enumerable.Reverse</a><br><br> <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb342885(v=vs.110).aspx\" data-linktype=\"external\">Queryable.Reverse</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"query-expression-syntax-examples\">Query Expression Syntax Examples</h2>\n<h3 id=\"primary-sort-examples\">Primary Sort Examples</h3>\n<h4 id=\"primary-ascending-sort\">Primary Ascending Sort</h4>\n<p> The following example demonstrates how to use the <code>orderby</code> clause in a LINQ query to sort the strings in an array by string length, in ascending order.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">string[] words = { &quot;the&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;, &quot;jumps&quot; };  \n\nIEnumerable&lt;string&gt; query = from word in words  \n                            orderby word.Length  \n                            select word;  \n\nforeach (string str in query)  \n    Console.WriteLine(str);  \n\n/* This code produces the following output:  \n\n    the  \n    fox  \n    quick  \n    brown  \n    jumps  \n*/  \n</code></pre><h4 id=\"primary-descending-sort\">Primary Descending Sort</h4>\n<p> The next example demonstrates how to use the <code>orderby``descending</code> clause in a LINQ query to sort the strings by their first letter, in descending order.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">string[] words = { &quot;the&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;, &quot;jumps&quot; };  \n\nIEnumerable&lt;string&gt; query = from word in words  \n                            orderby word.Substring(0, 1) descending  \n                            select word;  \n\nforeach (string str in query)  \n    Console.WriteLine(str);  \n\n/* This code produces the following output:  \n\n    the  \n    quick  \n    jumps  \n    fox  \n    brown  \n*/  \n</code></pre><h3 id=\"secondary-sort-examples\">Secondary Sort Examples</h3>\n<h4 id=\"secondary-ascending-sort\">Secondary Ascending Sort</h4>\n<p> The following example demonstrates how to use the <code>orderby</code> clause in a LINQ query to perform a primary and secondary sort of the strings in an array. The strings are sorted primarily by length and secondarily by the first letter of the string, both in ascending order.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">string[] words = { &quot;the&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;, &quot;jumps&quot; };  \n\nIEnumerable&lt;string&gt; query = from word in words  \n                            orderby word.Length, word.Substring(0, 1)  \n                            select word;  \n\nforeach (string str in query)  \n    Console.WriteLine(str);  \n\n/* This code produces the following output:  \n\n    fox  \n    the  \n    brown  \n    jumps  \n    quick  \n*/  \n</code></pre><h4 id=\"secondary-descending-sort\">Secondary Descending Sort</h4>\n<p> The next example demonstrates how to use the <code>orderby``descending</code> clause in a LINQ query to perform a primary sort, in ascending order, and a secondary sort, in descending order. The strings are sorted primarily by length and secondarily by the first letter of the string.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">string[] words = { &quot;the&quot;, &quot;quick&quot;, &quot;brown&quot;, &quot;fox&quot;, &quot;jumps&quot; };  \n\nIEnumerable&lt;string&gt; query = from word in words  \n                            orderby word.Length, word.Substring(0, 1) descending  \n                            select word;  \n\nforeach (string str in query)  \n    Console.WriteLine(str);  \n\n/* This code produces the following output:  \n\n    the  \n    fox  \n    quick  \n    jumps  \n    brown  \n*/  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/system.linq(v=vs.110).aspx\" data-linktype=\"external\">System.Linq</a><br> <a href=\"standard-query-operators-overview\" data-linktype=\"relative-path\">Standard Query Operators Overview (C#)</a><br> <a href=\"../../../language-reference/keywords/orderby-clause\" data-linktype=\"relative-path\">orderby clause</a><br> <a href=\"../../linq-query-expressions/how-to-order-the-results-of-a-join-clause\" data-linktype=\"relative-path\">How to: Order the Results of a Join Clause</a><br> <a href=\"how-to-sort-or-filter-text-data-by-any-word-or-field-linq\" data-linktype=\"relative-path\">How to: Sort or Filter Text Data by Any Word or Field (LINQ) (C#)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"d93fa055-2f19-46d2-9898-e2aed628f1c9\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-21 01:42 AM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/sorting-data.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/csharp/programming-guide/concepts/linq/sorting-data.md\">\r\n<meta name=\"document_id\" content=\"f834a67d-776f-acac-ff27-bbb8463bca85\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Sorting Data (C#) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"d93fa055-2f19-46d2-9898-e2aed628f1c9","caps.latest.revision":3,"ms.topic":"article","dev_langs":["csharp"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-21 01:42 AM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/21/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/sorting-data.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/csharp/programming-guide/concepts/linq/sorting-data.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/concepts/linq/sorting-data.md","document_id":"f834a67d-776f-acac-ff27-bbb8463bca85","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/concepts/linq/sorting-data","toc_asset_id":"articles/csharp/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"Sorting Data (C#)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":498,"_op_rawTitle":"<h1 id=\"sorting-data-c\" sourcefile=\"docs/csharp/programming-guide/concepts/linq/sorting-data.md\" sourcestartlinenumber=\"25\" sourceendlinenumber=\"25\">Sorting Data (C#)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/concepts/linq/sorting-data","fileRelativePath":"articles/csharp/programming-guide/concepts/linq/sorting-data.html"},"themesRelativePathToOutputRoot":"_themes/"}