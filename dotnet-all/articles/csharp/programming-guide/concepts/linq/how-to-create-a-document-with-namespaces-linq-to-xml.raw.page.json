{"content":"<div><div class=\"content\">\n<p>This topic shows how to create documents with namespaces.  </p>\n<h2 id=\"example\">Example</h2>\n<p> To create an element or an attribute that is in a namespace, you first declare and initialize an <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> object. You then use the addition operator overload to combine the namespace with the local name, expressed as a string.  </p>\n<p> The following example creates a document with one namespace. By default, LINQ to XML serializes this document with a default namespace.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">// Create an XML tree in a namespace.  \nXNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement root = new XElement(aw + &quot;Root&quot;,  \n    new XElement(aw + &quot;Child&quot;, &quot;child content&quot;)  \n);  \nConsole.WriteLine(root);  \n</code></pre><p> This example produces the following output:  </p>\n<pre class=\"loading\"><code class=\"lang-xml\">&lt;Root xmlns=&quot;http://www.adventure-works.com&quot;&gt;  \n  &lt;Child&gt;child content&lt;/Child&gt;  \n&lt;/Root&gt;  \n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> The following example creates a document with one namespace. It also creates an attribute that declares the namespace with a namespace prefix. To create an attribute that declares a namespace with a prefix, you create an attribute where the name of the attribute is the namespace prefix, and this name is in the <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xnamespace#System_Xml_Linq_XNamespace_Xmlns_\" data-linktype=\"relative-path\">Xmlns</a> namespace. The value of this attribute is the URI of the namespace.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">// Create an XML tree in a namespace, with a specified prefix  \nXNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXElement root = new XElement(aw + &quot;Root&quot;,  \n    new XAttribute(XNamespace.Xmlns + &quot;aw&quot;, &quot;http://www.adventure-works.com&quot;),  \n    new XElement(aw + &quot;Child&quot;, &quot;child content&quot;)  \n);  \nConsole.WriteLine(root);  \n</code></pre><p> This example produces the following output:  </p>\n<pre class=\"loading\"><code class=\"lang-xml\">&lt;aw:Root xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;  \n  &lt;aw:Child&gt;child content&lt;/aw:Child&gt;  \n&lt;/aw:Root&gt;  \n</code></pre><h2 id=\"example-2\">Example</h2>\n<p> The following example shows the creation of a document that contains two namespaces. One is the default namespace. Another is a namespace with a prefix.  </p>\n<p> By including namespace attributes in the root element, the namespaces are serialized so that <a href=\"http://www.adventure-works.com\" data-linktype=\"external\">http://www.adventure-works.com</a> is the default namespace, and www.fourthcoffee.com is serialized with a prefix of &quot;fc&quot;. To create an attribute that declares a default namespace, you create an attribute with the name &quot;xmlns&quot;, without a namespace. The value of the attribute is the default namespace URI.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">// The http://www.adventure-works.com namespace is forced to be the default namespace.  \nXNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXNamespace fc = &quot;www.fourthcoffee.com&quot;;  \nXElement root = new XElement(aw + &quot;Root&quot;,  \n    new XAttribute(&quot;xmlns&quot;, &quot;http://www.adventure-works.com&quot;),  \n    new XAttribute(XNamespace.Xmlns + &quot;fc&quot;, &quot;www.fourthcoffee.com&quot;),  \n    new XElement(fc + &quot;Child&quot;,  \n        new XElement(aw + &quot;DifferentChild&quot;, &quot;other content&quot;)  \n    ),  \n    new XElement(aw + &quot;Child2&quot;, &quot;c2 content&quot;),  \n    new XElement(fc + &quot;Child3&quot;, &quot;c3 content&quot;)  \n);  \nConsole.WriteLine(root);  \n</code></pre><p> This example produces the following output:  </p>\n<pre class=\"loading\"><code class=\"lang-xml\">&lt;Root xmlns=&quot;http://www.adventure-works.com&quot; xmlns:fc=&quot;www.fourthcoffee.com&quot;&gt;  \n  &lt;fc:Child&gt;  \n    &lt;DifferentChild&gt;other content&lt;/DifferentChild&gt;  \n  &lt;/fc:Child&gt;  \n  &lt;Child2&gt;c2 content&lt;/Child2&gt;  \n  &lt;fc:Child3&gt;c3 content&lt;/fc:Child3&gt;  \n&lt;/Root&gt;  \n</code></pre><h2 id=\"example-3\">Example</h2>\n<p> The following example creates a document that contains two namespaces, both with namespace prefixes.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">XNamespace aw = &quot;http://www.adventure-works.com&quot;;  \nXNamespace fc = &quot;www.fourthcoffee.com&quot;;  \nXElement root = new XElement(aw + &quot;Root&quot;,  \n    new XAttribute(XNamespace.Xmlns + &quot;aw&quot;, aw.NamespaceName),  \n    new XAttribute(XNamespace.Xmlns + &quot;fc&quot;, fc.NamespaceName),  \n    new XElement(fc + &quot;Child&quot;,  \n        new XElement(aw + &quot;DifferentChild&quot;, &quot;other content&quot;)  \n    ),  \n    new XElement(aw + &quot;Child2&quot;, &quot;c2 content&quot;),  \n    new XElement(fc + &quot;Child3&quot;, &quot;c3 content&quot;)  \n);  \nConsole.WriteLine(root);  \n</code></pre><p> This example produces the following output:  </p>\n<pre class=\"loading\"><code class=\"lang-xml\">&lt;aw:Root xmlns:aw=&quot;http://www.adventure-works.com&quot; xmlns:fc=&quot;www.fourthcoffee.com&quot;&gt;  \n  &lt;fc:Child&gt;  \n    &lt;aw:DifferentChild&gt;other content&lt;/aw:DifferentChild&gt;  \n  &lt;/fc:Child&gt;  \n  &lt;aw:Child2&gt;c2 content&lt;/aw:Child2&gt;  \n  &lt;fc:Child3&gt;c3 content&lt;/fc:Child3&gt;  \n&lt;/aw:Root&gt;  \n</code></pre><h2 id=\"example-4\">Example</h2>\n<p> Another way to accomplish the same result is to use expanded names instead of declaring and creating an <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> object.  </p>\n<p> This approach has performance implications. Each time you pass a string that contains an expanded name to LINQ to XML, LINQ to XML must parse the name, find the atomized namespace, and find the atomized name. This process takes CPU time. If performance is important, you might want to declare and use an <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xnamespace\" data-linktype=\"relative-path\">XNamespace</a> object explicitly.  </p>\n<p> If performance is an important issue, see <a href=\"pre-atomization-of-xname-objects-linq-to-xml\" data-linktype=\"relative-path\">Pre-Atomization of XName Objects (LINQ to XML) (C#)</a> for more information  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">// Create an XML tree in a namespace, with a specified prefix  \nXElement root = new XElement(&quot;{http://www.adventure-works.com}Root&quot;,  \n    new XAttribute(XNamespace.Xmlns + &quot;aw&quot;, &quot;http://www.adventure-works.com&quot;),  \n    new XElement(&quot;{http://www.adventure-works.com}Child&quot;, &quot;child content&quot;)  \n);  \nConsole.WriteLine(root);  \n</code></pre><p> This example produces the following output:  </p>\n<pre class=\"loading\"><code class=\"lang-xml\">&lt;aw:Root xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;  \n  &lt;aw:Child&gt;child content&lt;/aw:Child&gt;  \n&lt;/aw:Root&gt;  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"working-with-xml-namespaces\" data-linktype=\"relative-path\">Working with XML Namespaces (C#)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"37e63c57-f86d-47ac-88a7-2c2d107def30\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-create-a-document-with-namespaces-linq-to-xml.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-create-a-document-with-namespaces-linq-to-xml.md\">\r\n<meta name=\"document_id\" content=\"b260f93a-7656-11c5-4da6-4b8a6ed94d4a\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"How to: Create a Document with Namespaces (C#) (LINQ to XML) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"37e63c57-f86d-47ac-88a7-2c2d107def30","caps.latest.revision":3,"ms.topic":"article","dev_langs":["csharp"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-create-a-document-with-namespaces-linq-to-xml.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-create-a-document-with-namespaces-linq-to-xml.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-create-a-document-with-namespaces-linq-to-xml.md","document_id":"b260f93a-7656-11c5-4da6-4b8a6ed94d4a","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/linq/how-to-create-a-document-with-namespaces-linq-to-xml","toc_asset_id":"articles/csharp/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Create a Document with Namespaces (C#) (LINQ to XML)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":596,"_op_rawTitle":"<h1 id=\"how-to-create-a-document-with-namespaces-c-linq-to-xml\" sourcefile=\"docs/csharp/programming-guide/concepts/linq/how-to-create-a-document-with-namespaces-linq-to-xml.md\" sourcestartlinenumber=\"25\" sourceendlinenumber=\"25\">How to: Create a Document with Namespaces (C#) (LINQ to XML)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/linq/how-to-create-a-document-with-namespaces-linq-to-xml","fileRelativePath":"articles/csharp/programming-guide/concepts/linq/how-to-create-a-document-with-namespaces-linq-to-xml.html"},"themesRelativePathToOutputRoot":"_themes/"}