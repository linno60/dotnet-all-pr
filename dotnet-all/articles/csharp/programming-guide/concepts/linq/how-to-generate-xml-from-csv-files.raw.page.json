{"content":"<div><div class=\"content\">\n<p>This example shows how to use Language-Integrated Query (LINQ) and LINQ to XML to generate an XML file from a comma-separated value (CSV) file.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following code performs a LINQ query on an array of strings.  </p>\n<p> The query uses the <code>let</code> clause to split each string into an array of fields.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">// Create the text file.  \nstring csvString = @&quot;GREAL,Great Lakes Food Market,Howard Snyder,Marketing Manager,(503) 555-7555,2732 Baker Blvd.,Eugene,OR,97403,USA  \nHUNGC,Hungry Coyote Import Store,Yoshi Latimer,Sales Representative,(503) 555-6874,City Center Plaza 516 Main St.,Elgin,OR,97827,USA  \nLAZYK,Lazy K Kountry Store,John Steel,Marketing Manager,(509) 555-7969,12 Orchestra Terrace,Walla Walla,WA,99362,USA  \nLETSS,Let&#39;s Stop N Shop,Jaime Yorres,Owner,(415) 555-5938,87 Polk St. Suite 5,San Francisco,CA,94117,USA&quot;;  \nFile.WriteAllText(&quot;cust.csv&quot;, csvString);  \n\n// Read into an array of strings.  \nstring[] source = File.ReadAllLines(&quot;cust.csv&quot;);  \nXElement cust = new XElement(&quot;Root&quot;,  \n    from str in source  \n    let fields = str.Split(&#39;,&#39;)  \n    select new XElement(&quot;Customer&quot;,  \n        new XAttribute(&quot;CustomerID&quot;, fields[0]),  \n        new XElement(&quot;CompanyName&quot;, fields[1]),  \n        new XElement(&quot;ContactName&quot;, fields[2]),  \n        new XElement(&quot;ContactTitle&quot;, fields[3]),  \n        new XElement(&quot;Phone&quot;, fields[4]),  \n        new XElement(&quot;FullAddress&quot;,  \n            new XElement(&quot;Address&quot;, fields[5]),  \n            new XElement(&quot;City&quot;, fields[6]),  \n            new XElement(&quot;Region&quot;, fields[7]),  \n            new XElement(&quot;PostalCode&quot;, fields[8]),  \n            new XElement(&quot;Country&quot;, fields[9])  \n        )  \n    )  \n);  \nConsole.WriteLine(cust);  \n</code></pre><p> This code produces the following output:  </p>\n<pre class=\"loading\"><code class=\"lang-xml\">&lt;Root&gt;  \n  &lt;Customer CustomerID=&quot;GREAL&quot;&gt;  \n    &lt;CompanyName&gt;Great Lakes Food Market&lt;/CompanyName&gt;  \n    &lt;ContactName&gt;Howard Snyder&lt;/ContactName&gt;  \n    &lt;ContactTitle&gt;Marketing Manager&lt;/ContactTitle&gt;  \n    &lt;Phone&gt;(503) 555-7555&lt;/Phone&gt;  \n    &lt;FullAddress&gt;  \n      &lt;Address&gt;2732 Baker Blvd.&lt;/Address&gt;  \n      &lt;City&gt;Eugene&lt;/City&gt;  \n      &lt;Region&gt;OR&lt;/Region&gt;  \n      &lt;PostalCode&gt;97403&lt;/PostalCode&gt;  \n      &lt;Country&gt;USA&lt;/Country&gt;  \n    &lt;/FullAddress&gt;  \n  &lt;/Customer&gt;  \n  &lt;Customer CustomerID=&quot;HUNGC&quot;&gt;  \n    &lt;CompanyName&gt;Hungry Coyote Import Store&lt;/CompanyName&gt;  \n    &lt;ContactName&gt;Yoshi Latimer&lt;/ContactName&gt;  \n    &lt;ContactTitle&gt;Sales Representative&lt;/ContactTitle&gt;  \n    &lt;Phone&gt;(503) 555-6874&lt;/Phone&gt;  \n    &lt;FullAddress&gt;  \n      &lt;Address&gt;City Center Plaza 516 Main St.&lt;/Address&gt;  \n      &lt;City&gt;Elgin&lt;/City&gt;  \n      &lt;Region&gt;OR&lt;/Region&gt;  \n      &lt;PostalCode&gt;97827&lt;/PostalCode&gt;  \n      &lt;Country&gt;USA&lt;/Country&gt;  \n    &lt;/FullAddress&gt;  \n  &lt;/Customer&gt;  \n  &lt;Customer CustomerID=&quot;LAZYK&quot;&gt;  \n    &lt;CompanyName&gt;Lazy K Kountry Store&lt;/CompanyName&gt;  \n    &lt;ContactName&gt;John Steel&lt;/ContactName&gt;  \n    &lt;ContactTitle&gt;Marketing Manager&lt;/ContactTitle&gt;  \n    &lt;Phone&gt;(509) 555-7969&lt;/Phone&gt;  \n    &lt;FullAddress&gt;  \n      &lt;Address&gt;12 Orchestra Terrace&lt;/Address&gt;  \n      &lt;City&gt;Walla Walla&lt;/City&gt;  \n      &lt;Region&gt;WA&lt;/Region&gt;  \n      &lt;PostalCode&gt;99362&lt;/PostalCode&gt;  \n      &lt;Country&gt;USA&lt;/Country&gt;  \n    &lt;/FullAddress&gt;  \n  &lt;/Customer&gt;  \n  &lt;Customer CustomerID=&quot;LETSS&quot;&gt;  \n    &lt;CompanyName&gt;Let&#39;s Stop N Shop&lt;/CompanyName&gt;  \n    &lt;ContactName&gt;Jaime Yorres&lt;/ContactName&gt;  \n    &lt;ContactTitle&gt;Owner&lt;/ContactTitle&gt;  \n    &lt;Phone&gt;(415) 555-5938&lt;/Phone&gt;  \n    &lt;FullAddress&gt;  \n      &lt;Address&gt;87 Polk St. Suite 5&lt;/Address&gt;  \n      &lt;City&gt;San Francisco&lt;/City&gt;  \n      &lt;Region&gt;CA&lt;/Region&gt;  \n      &lt;PostalCode&gt;94117&lt;/PostalCode&gt;  \n      &lt;Country&gt;USA&lt;/Country&gt;  \n    &lt;/FullAddress&gt;  \n  &lt;/Customer&gt;  \n&lt;/Root&gt;  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"projections-and-transformations-linq-to-xml\" data-linktype=\"relative-path\">Projections and Transformations (LINQ to XML) (C#)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"57b9ccde-f983-4a21-ae61-70ecede30307\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-generate-xml-from-csv-files.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-generate-xml-from-csv-files.md\">\r\n<meta name=\"document_id\" content=\"be891e69-5acb-f7ba-b6d3-23979914da35\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"How to: Generate XML from CSV Files (C#) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"57b9ccde-f983-4a21-ae61-70ecede30307","caps.latest.revision":3,"ms.topic":"article","dev_langs":["csharp"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/linq/how-to-generate-xml-from-csv-files.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-generate-xml-from-csv-files.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/concepts/linq/how-to-generate-xml-from-csv-files.md","document_id":"be891e69-5acb-f7ba-b6d3-23979914da35","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/linq/how-to-generate-xml-from-csv-files","toc_asset_id":"articles/csharp/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Generate XML from CSV Files (C#)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":275,"_op_rawTitle":"<h1 id=\"how-to-generate-xml-from-csv-files-c\" sourcefile=\"docs/csharp/programming-guide/concepts/linq/how-to-generate-xml-from-csv-files.md\" sourcestartlinenumber=\"20\" sourceendlinenumber=\"20\">How to: Generate XML from CSV Files (C#)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/linq/how-to-generate-xml-from-csv-files","fileRelativePath":"articles/csharp/programming-guide/concepts/linq/how-to-generate-xml-from-csv-files.html"},"themesRelativePathToOutputRoot":"_themes/"}