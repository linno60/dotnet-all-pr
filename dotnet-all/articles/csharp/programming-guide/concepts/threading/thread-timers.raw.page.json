{"content":"<div><div class=\"content\">\n<p>The <a class=\"xref\" href=\"../../../../../api/system.threading.timer\" data-linktype=\"relative-path\">System.Threading.Timer</a> class is useful for periodically running a task on a separate thread. For example, you could use a thread timer to check the status and integrity of a database or to back up critical files.  </p>\n<h2 id=\"thread-timer-example\">Thread Timer Example</h2>\n<p> The following example starts a task every two seconds and uses a flag to initiate the <a class=\"xref\" href=\"../../../../../api/system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method that stops the timer. This example posts status to the output window.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">private class StateObjClass  \n{  \n    // Used to hold parameters for calls to TimerTask.  \n    public int SomeValue;  \n    public System.Threading.Timer TimerReference;  \n    public bool TimerCanceled;  \n}  \n\npublic void RunTimer()  \n{  \n    StateObjClass StateObj = new StateObjClass();  \n    StateObj.TimerCanceled = false;  \n    StateObj.SomeValue = 1;  \n    System.Threading.TimerCallback TimerDelegate =  \n        new System.Threading.TimerCallback(TimerTask);  \n\n    // Create a timer that calls a procedure every 2 seconds.  \n    // Note: There is no Start method; the timer starts running as soon as   \n    // the instance is created.  \n    System.Threading.Timer TimerItem =  \n        new System.Threading.Timer(TimerDelegate, StateObj, 2000, 2000);  \n\n    // Save a reference for Dispose.  \n    StateObj.TimerReference = TimerItem;    \n\n    // Run for ten loops.  \n    while (StateObj.SomeValue &lt; 10)   \n    {  \n        // Wait one second.  \n        System.Threading.Thread.Sleep(1000);    \n    }  \n\n    // Request Dispose of the timer object.  \n    StateObj.TimerCanceled = true;    \n}  \n\nprivate void TimerTask(object StateObj)  \n{  \n    StateObjClass State = (StateObjClass)StateObj;  \n    // Use the interlocked class to increment the counter variable.  \n    System.Threading.Interlocked.Increment(ref State.SomeValue);  \n    System.Diagnostics.Debug.WriteLine(&quot;Launched new thread  &quot; + DateTime.Now.ToString());  \n    if (State.TimerCanceled)      \n    // Dispose Requested.  \n    {  \n        State.TimerReference.Dispose();  \n        System.Diagnostics.Debug.WriteLine(&quot;Done  &quot; + DateTime.Now.ToString());  \n    }  \n}  \n</code></pre><p> Thread timers are particularly useful when the <a class=\"xref\" href=\"../../../../../api/system.windows.forms.timer\" data-linktype=\"relative-path\">System.Windows.Forms.Timer</a> object is unavailable, such as when you are developing console applications.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../../api/system.threading\" data-linktype=\"relative-path\">System.Threading</a><br> <a href=\"multithreaded-applications\" data-linktype=\"relative-path\">Multithreaded Applications (C#)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"52ed71e8-4fd9-43a4-ae40-04cce7cff23f\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/threading/thread-timers.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/threading/thread-timers.md\">\r\n<meta name=\"document_id\" content=\"58e0a41f-8e74-7698-73a5-9284cd9fc4d7\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Thread Timers (C#) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"52ed71e8-4fd9-43a4-ae40-04cce7cff23f","caps.latest.revision":3,"ms.topic":"article","dev_langs":["csharp"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/threading/thread-timers.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/threading/thread-timers.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/concepts/threading/thread-timers.md","document_id":"58e0a41f-8e74-7698-73a5-9284cd9fc4d7","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/threading/thread-timers","toc_asset_id":"articles/csharp/programming-guide/concepts/threading/toc.json","toc_rel":"toc.json","_op_ogTitle":"Thread Timers (C#)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":248,"_op_rawTitle":"<h1 id=\"thread-timers-c\" sourcefile=\"docs/csharp/programming-guide/concepts/threading/thread-timers.md\" sourcestartlinenumber=\"25\" sourceendlinenumber=\"25\">Thread Timers (C#)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/threading/thread-timers","fileRelativePath":"articles/csharp/programming-guide/concepts/threading/thread-timers.html"},"themesRelativePathToOutputRoot":"_themes/"}