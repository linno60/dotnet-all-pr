{"content":"<div><div class=\"content\">\n<p>You can cancel an asynchronous operation after a period of time by using the  <a class=\"xref\" href=\"../../../../../api/system.threading.cancellationtokensource#System_Threading_CancellationTokenSource_CancelAfter_\" data-linktype=\"relative-path\">CancelAfter</a> method if you don&#39;t want to wait for the operation to finish. This method schedules the cancellation of any associated tasks that aren’t complete within the period of time that’s designated by the <code>CancelAfter</code> expression.  </p>\n<p> This example adds to the code that’s developed in <a href=\"cancel-an-async-task-or-a-list-of-tasks\" data-linktype=\"relative-path\">Cancel an Async Task or a List of Tasks (C#)</a> to download a list of websites and to display the length of the contents of each one.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To run the examples, you must have Visual Studio 2012 or newer and the .NET Framework 4.5 or newer installed on your computer.  </p>\n</div>\n<h2 id=\"downloading-the-example\">Downloading the Example</h2>\n<p> You can download the complete Windows Presentation Foundation (WPF) project from <a href=\"http://go.microsoft.com/fwlink/?LinkId=255046\" data-linktype=\"external\">Async Sample: Fine Tuning Your Application</a> and then follow these steps.  </p>\n<ol>\n<li><p>Decompress the file that you downloaded, and then start Visual Studio.  </p>\n</li>\n<li><p>On the menu bar, choose <strong>File</strong>, <strong>Open</strong>, <strong>Project/Solution</strong>.  </p>\n</li>\n<li><p>In the <strong>Open Project</strong> dialog box, open the folder that holds the sample code that you decompressed, and then open the solution (.sln) file for AsyncFineTuningCS.  </p>\n</li>\n<li><p>In <strong>Solution Explorer</strong>, open the shortcut menu for the <strong>CancelAfterTime</strong> project, and then choose <strong>Set as StartUp Project</strong>.  </p>\n</li>\n<li><p>Choose the F5 key to run the project.  </p>\n<p> Choose the Ctrl+F5 keys to run the project without debugging it.  </p>\n</li>\n<li><p>Run the program several times to verify that the output might show output for all websites, no websites, or some web sites.  </p>\n</li>\n</ol>\n<p> If you don&#39;t want to download the project, you can review the MainWindow.xaml.cs file at the end of this topic.  </p>\n<h2 id=\"building-the-example\">Building the Example</h2>\n<p> The example in this topic adds to the project that&#39;s developed in <a href=\"cancel-an-async-task-or-a-list-of-tasks\" data-linktype=\"relative-path\">Cancel an Async Task or a List of Tasks (C#)</a> to cancel a list of tasks. The example uses the same UI, although the <strong>Cancel</strong> button isn’t used explicitly.  </p>\n<p> To build the example yourself, step by step, follow the instructions in the &quot;Downloading the Example&quot; section, but choose <strong>CancelAListOfTasks</strong> as the <strong>StartUp Project</strong>. Add the changes in this topic to that project.  </p>\n<p> To specify a maximum time before the tasks are marked as canceled, add a call to <code>CancelAfter</code> to <code>startButton_Click</code>, as the following example shows. The addition is marked with asterisks.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">private async void startButton_Click(object sender, RoutedEventArgs e)  \n{  \n    // Instantiate the CancellationTokenSource.  \n    cts = new CancellationTokenSource();  \n\n    resultsTextBox.Clear();  \n\n    try  \n    {  \n        // ***Set up the CancellationTokenSource to cancel after 2.5 seconds. (You  \n        // can adjust the time.)  \n        cts.CancelAfter(2500);  \n\n        await AccessTheWebAsync(cts.Token);  \n        resultsTextBox.Text += &quot;\\r\\nDownloads succeeded.\\r\\n&quot;;  \n    }  \n    catch (OperationCanceledException)  \n    {  \n        resultsTextBox.Text += &quot;\\r\\nDownloads canceled.\\r\\n&quot;;  \n    }  \n    catch (Exception)  \n    {  \n        resultsTextBox.Text += &quot;\\r\\nDownloads failed.\\r\\n&quot;;  \n    }  \n\n    cts = null;   \n}  \n</code></pre><p> Run the program several times to verify that the output might show output for all websites, no websites, or some web sites. The following output is a sample.  </p>\n<pre class=\"loading\"><code>Length of the downloaded string: 35990.  \n\nLength of the downloaded string: 407399.  \n\nLength of the downloaded string: 226091.  \n\nDownloads canceled.  \n</code></pre><h2 id=\"complete-example\">Complete Example</h2>\n<p> The following code is the complete text of the MainWindow.xaml.cs file for the example. Asterisks mark the elements that were added for this example.  </p>\n<p> Notice that you must add a reference for <a class=\"xref\" href=\"../../../../../api/system.net.http\" data-linktype=\"relative-path\">System.Net.Http</a>.  </p>\n<p> You can download the project from <a href=\"http://go.microsoft.com/fwlink/?LinkId=255046\" data-linktype=\"external\">Async Sample: Fine Tuning Your Application</a>.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">using System;  \nusing System.Collections.Generic;  \nusing System.Linq;  \nusing System.Text;  \nusing System.Threading.Tasks;  \nusing System.Windows;  \nusing System.Windows.Controls;  \nusing System.Windows.Data;  \nusing System.Windows.Documents;  \nusing System.Windows.Input;  \nusing System.Windows.Media;  \nusing System.Windows.Media.Imaging;  \nusing System.Windows.Navigation;  \nusing System.Windows.Shapes;  \n\n// Add a using directive and a reference for System.Net.Http.  \nusing System.Net.Http;  \n\n// Add the following using directive.  \nusing System.Threading;  \n\nnamespace CancelAfterTime  \n{  \n    public partial class MainWindow : Window  \n    {  \n        // Declare a System.Threading.CancellationTokenSource.  \n        CancellationTokenSource cts;  \n\n        public MainWindow()  \n        {  \n            InitializeComponent();  \n        }  \n\n        private async void startButton_Click(object sender, RoutedEventArgs e)  \n        {  \n            // Instantiate the CancellationTokenSource.  \n            cts = new CancellationTokenSource();  \n\n            resultsTextBox.Clear();  \n\n            try  \n            {  \n                // ***Set up the CancellationTokenSource to cancel after 2.5 seconds. (You  \n                // can adjust the time.)  \n                cts.CancelAfter(2500);  \n\n                await AccessTheWebAsync(cts.Token);  \n                resultsTextBox.Text += &quot;\\r\\nDownloads succeeded.\\r\\n&quot;;  \n            }  \n            catch (OperationCanceledException)  \n            {  \n                resultsTextBox.Text += &quot;\\r\\nDownloads canceled.\\r\\n&quot;;  \n            }  \n            catch (Exception)  \n            {  \n                resultsTextBox.Text += &quot;\\r\\nDownloads failed.\\r\\n&quot;;  \n            }  \n\n            cts = null;   \n        }  \n\n        // You can still include a Cancel button if you want to.  \n        private void cancelButton_Click(object sender, RoutedEventArgs e)  \n        {  \n            if (cts != null)  \n            {  \n                cts.Cancel();  \n            }  \n        }  \n\n        async Task AccessTheWebAsync(CancellationToken ct)  \n        {  \n            // Declare an HttpClient object.  \n            HttpClient client = new HttpClient();  \n\n            // Make a list of web addresses.  \n            List&lt;string&gt; urlList = SetUpURLList();  \n\n            foreach (var url in urlList)  \n            {  \n                // GetAsync returns a Task&lt;HttpResponseMessage&gt;.   \n                // Argument ct carries the message if the Cancel button is chosen.   \n                // Note that the Cancel button cancels all remaining downloads.  \n                HttpResponseMessage response = await client.GetAsync(url, ct);  \n\n                // Retrieve the website contents from the HttpResponseMessage.  \n                byte[] urlContents = await response.Content.ReadAsByteArrayAsync();  \n\n                resultsTextBox.Text +=  \n                    String.Format(&quot;\\r\\nLength of the downloaded string: {0}.\\r\\n&quot;, urlContents.Length);  \n            }  \n        }  \n\n        private List&lt;string&gt; SetUpURLList()  \n        {  \n            List&lt;string&gt; urls = new List&lt;string&gt;   \n            {   \n                &quot;http://msdn.microsoft.com&quot;,  \n                &quot;http://msdn.microsoft.com/library/windows/apps/br211380.aspx&quot;,  \n                &quot;http://msdn.microsoft.com/library/hh290136.aspx&quot;,  \n                &quot;http://msdn.microsoft.com/library/ee256749.aspx&quot;,  \n                &quot;http://msdn.microsoft.com/library/ms404677.aspx&quot;,  \n                &quot;http://msdn.microsoft.com/library/ff730837.aspx&quot;  \n            };  \n            return urls;  \n        }  \n    }  \n\n    // Sample Output:  \n\n    // Length of the downloaded string: 35990.  \n\n    // Length of the downloaded string: 407399.  \n\n    // Length of the downloaded string: 226091.  \n\n    // Downloads canceled.  \n}  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"index\" data-linktype=\"relative-path\">Asynchronous Programming with async and await (C#)</a><br> <a href=\"walkthrough-accessing-the-web-by-using-async-and-await\" data-linktype=\"relative-path\">Walkthrough: Accessing the Web by Using async and await (C#)</a><br> <a href=\"cancel-an-async-task-or-a-list-of-tasks\" data-linktype=\"relative-path\">Cancel an Async Task or a List of Tasks (C#)</a><br> <a href=\"fine-tuning-your-async-application\" data-linktype=\"relative-path\">Fine-Tuning Your Async Application (C#)</a><br> <a href=\"http://go.microsoft.com/fwlink/?LinkId=255046\" data-linktype=\"external\">Async Sample: Fine Tuning Your Application</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"194282c2-399f-46da-a7a6-96674e00b0b3\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/3115359729431ecbcc16058612da59b85621fa0f/docs/csharp/programming-guide/concepts/async/cancel-async-tasks-after-a-period-of-time.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/async/cancel-async-tasks-after-a-period-of-time.md\">\r\n<meta name=\"document_id\" content=\"208115bc-03c0-633b-4e5c-b79aafdfddb2\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Cancel Async Tasks after a Period of Time (C#) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"194282c2-399f-46da-a7a6-96674e00b0b3","caps.latest.revision":3,"ms.topic":"article","dev_langs":["csharp"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Bill Wagner","author_email":"wiwagn@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Reorganize the C# Guide TOC (#1318)","commit_sha":"3115359729431ecbcc16058612da59b85621fa0f","commit_date":"2017-01-23 23:20:14 -0500"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/3115359729431ecbcc16058612da59b85621fa0f/docs/csharp/programming-guide/concepts/async/cancel-async-tasks-after-a-period-of-time.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/async/cancel-async-tasks-after-a-period-of-time.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/concepts/async/cancel-async-tasks-after-a-period-of-time.md","document_id":"208115bc-03c0-633b-4e5c-b79aafdfddb2","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/async/cancel-async-tasks-after-a-period-of-time","toc_asset_id":"articles/csharp/programming-guide/concepts/async/toc.json","toc_rel":"toc.json","_op_ogTitle":"Cancel Async Tasks after a Period of Time (C#)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":858,"_op_rawTitle":"<h1 id=\"cancel-async-tasks-after-a-period-of-time-c\" sourcefile=\"docs/csharp/programming-guide/concepts/async/cancel-async-tasks-after-a-period-of-time.md\" sourcestartlinenumber=\"25\" sourceendlinenumber=\"25\">Cancel Async Tasks after a Period of Time (C#)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/async/cancel-async-tasks-after-a-period-of-time","fileRelativePath":"articles/csharp/programming-guide/concepts/async/cancel-async-tasks-after-a-period-of-time.html"},"themesRelativePathToOutputRoot":"_themes/"}