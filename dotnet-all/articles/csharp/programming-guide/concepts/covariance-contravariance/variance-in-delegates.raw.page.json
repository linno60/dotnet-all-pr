{"content":"<div><div class=\"content\">\n<p>.NET Framework 3.5 introduced variance support for matching method signatures with delegate types in all delegates in C#. This means that you can assign to delegates not only methods that have matching signatures, but also methods that return more derived types (covariance) or that accept parameters that have less derived types (contravariance) than that specified by the delegate type. This includes both generic and non-generic delegates.  </p>\n<p> For example, consider the following code, which has two classes and two delegates: generic and non-generic.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">public class First { }  \npublic class Second : First { }  \npublic delegate First SampleDelegate(Second a);  \npublic delegate R SampleGenericDelegate&lt;A, R&gt;(A a);  \n</code></pre><p> When you create delegates of the <code>SampleDelegate</code> or <code>SampleGenericDelegate&lt;A, R&gt;</code> types, you can assign any one of the following methods to those delegates.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">// Matching signature.  \npublic static First ASecondRFirst(Second first)  \n{ return new First(); }  \n\n// The return type is more derived.  \npublic static Second ASecondRSecond(Second second)  \n{ return new Second(); }  \n\n// The argument type is less derived.  \npublic static First AFirstRFirst(First first)  \n{ return new First(); }  \n\n// The return type is more derived   \n// and the argument type is less derived.  \npublic static Second AFirstRSecond(First first)  \n{ return new Second(); }  \n</code></pre><p> The following code example illustrates the implicit conversion between the method signature and the delegate type.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">// Assigning a method with a matching signature   \n// to a non-generic delegate. No conversion is necessary.  \nSampleDelegate dNonGeneric = ASecondRFirst;  \n// Assigning a method with a more derived return type   \n// and less derived argument type to a non-generic delegate.  \n// The implicit conversion is used.  \nSampleDelegate dNonGenericConversion = AFirstRSecond;  \n\n// Assigning a method with a matching signature to a generic delegate.  \n// No conversion is necessary.  \nSampleGenericDelegate&lt;Second, First&gt; dGeneric = ASecondRFirst;  \n// Assigning a method with a more derived return type   \n// and less derived argument type to a generic delegate.  \n// The implicit conversion is used.  \nSampleGenericDelegate&lt;Second, First&gt; dGenericConversion = AFirstRSecond;  \n</code></pre><p> For more examples, see <a href=\"using-variance-in-delegates\" data-linktype=\"relative-path\">Using Variance in Delegates (C#)</a> and <a href=\"using-variance-for-func-and-action-generic-delegates\" data-linktype=\"relative-path\">Using Variance for Func and Action Generic Delegates (C#)</a>.  </p>\n<h2 id=\"variance-in-generic-type-parameters\">Variance in Generic Type Parameters</h2>\n<p> In .NET Framework 4 or later you can enable implicit conversion between delegates, so that generic delegates that have different types specified by generic type parameters can be assigned to each other, if the types are inherited from each other as required by variance.  </p>\n<p> To enable implicit conversion, you must explicitly declare generic parameters in a delegate as covariant or contravariant by using the <code>in</code> or <code>out</code> keyword.  </p>\n<p> The following code example shows how you can create a delegate that has a covariant generic type parameter.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">// Type T is declared covariant by using the out keyword.  \npublic delegate T SampleGenericDelegate &lt;out T&gt;();  \n\npublic static void Test()  \n{  \n    SampleGenericDelegate &lt;String&gt; dString = () =&gt; &quot; &quot;;  \n\n    // You can assign delegates to each other,  \n    // because the type T is declared covariant.  \n    SampleGenericDelegate &lt;Object&gt; dObject = dString;             \n}  \n</code></pre><p> If you use only variance support to match method signatures with delegate types and do not use the <code>in</code> and <code>out</code> keywords, you may find that sometimes you can instantiate delegates with identical lambda expressions or methods, but you cannot assign one delegate to another.  </p>\n<p> In the following code example, <code>SampleGenericDelegate&lt;String&gt;</code> cannot be explicitly converted to <code>SampleGenericDelegate&lt;Object&gt;</code>, although <code>String</code> inherits <code>Object</code>. You can fix this problem by marking the generic parameter <code>T</code> with the <code>out</code> keyword.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">public delegate T SampleGenericDelegate&lt;T&gt;();  \n\npublic static void Test()  \n{  \n    SampleGenericDelegate&lt;String&gt; dString = () =&gt; &quot; &quot;;  \n\n    // You can assign the dObject delegate  \n    // to the same lambda expression as dString delegate  \n    // because of the variance support for   \n    // matching method signatures with delegate types.  \n    SampleGenericDelegate&lt;Object&gt; dObject = () =&gt; &quot; &quot;;  \n\n    // The following statement generates a compiler error  \n    // because the generic type T is not marked as covariant.  \n    // SampleGenericDelegate &lt;Object&gt; dObject = dString;  \n\n}  \n</code></pre><h3 id=\"generic-delegates-that-have-variant-type-parameters-in-the-net-framework\">Generic Delegates That Have Variant Type Parameters in the .NET Framework</h3>\n<p> .NET Framework 4 introduced variance support for generic type parameters in several existing generic delegates:  </p>\n<ul>\n<li><p><code>Action</code> delegates from the <a class=\"xref\" href=\"../../../../../api/system\" data-linktype=\"relative-path\">System</a> namespace, for example, <a class=\"xref\" href=\"../../../../../api/system.action-1\" data-linktype=\"relative-path\">Action&lt;T&gt;</a> and <a class=\"xref\" href=\"../../../../../api/system.action-2\" data-linktype=\"relative-path\">Action&lt;T1,T2&gt;</a>  </p>\n</li>\n<li><p><code>Func</code> delegates from the <a class=\"xref\" href=\"../../../../../api/system\" data-linktype=\"relative-path\">System</a> namespace, for example, <a class=\"xref\" href=\"../../../../../api/system.func-1\" data-linktype=\"relative-path\">Func&lt;TResult&gt;</a> and <a class=\"xref\" href=\"../../../../../api/system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a>  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"../../../../../api/system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> delegate  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"../../../../../api/system.comparison-1\" data-linktype=\"relative-path\">Comparison&lt;T&gt;</a> delegate  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"../../../../../api/system.converter-2\" data-linktype=\"relative-path\">Converter&lt;TInput,TOutput&gt;</a> delegate  </p>\n<p>For more information and examples, see <a href=\"using-variance-for-func-and-action-generic-delegates\" data-linktype=\"relative-path\">Using Variance for Func and Action Generic Delegates (C#)</a>.  </p>\n</li>\n</ul>\n<h3 id=\"declaring-variant-type-parameters-in-generic-delegates\">Declaring Variant Type Parameters in Generic Delegates</h3>\n<p> If a generic delegate has covariant or contravariant generic type parameters, it can be referred to as a <em>variant generic delegate</em>.  </p>\n<p> You can declare a generic type parameter covariant in a generic delegate by using the <code>out</code> keyword. The covariant type can be used only as a method return type and not as a type of method arguments. The following code example shows how to declare a covariant generic delegate.  </p>\n<p><codecontentplaceholder>5</codecontentplaceholder><br> You can declare a generic type parameter contravariant in a generic delegate by using the <code>in</code> keyword. The contravariant type can be used only as a type of method arguments and not as a method return type. The following code example shows how to declare a contravariant generic delegate.  </p>\n<p><codecontentplaceholder>6</codecontentplaceholder>  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> <code>ref</code> and <code>out</code> parameters in C# can&#39;t be marked as variant.  </p>\n</div>\n<p> It is also possible to support both variance and covariance in the same delegate, but for different type parameters. This is shown in the following example.  </p>\n<p><codecontentplaceholder>7</codecontentplaceholder>  </p>\n<h3 id=\"instantiating-and-invoking-variant-generic-delegates\">Instantiating and Invoking Variant Generic Delegates</h3>\n<p> You can instantiate and invoke variant delegates just as you instantiate and invoke invariant delegates. In the following example, the delegate is instantiated by a lambda expression.  </p>\n<p><codecontentplaceholder>8</codecontentplaceholder>  </p>\n<h3 id=\"combining-variant-generic-delegates\">Combining Variant Generic Delegates</h3>\n<p> You should not combine variant delegates. The <a class=\"xref\" href=\"../../../../../api/system.delegate#System_Delegate_Combine_\" data-linktype=\"relative-path\">Combine</a> method does not support variant delegate conversion and expects delegates to be of exactly the same type. This can lead to a run-time exception when you combine delegates either by using the <a class=\"xref\" href=\"../../../../../api/system.delegate#System_Delegate_Combine_\" data-linktype=\"relative-path\">Combine</a> method or by using the <code>+</code> operator, as shown in the following code example.  </p>\n<p><codecontentplaceholder>9</codecontentplaceholder>  </p>\n<h2 id=\"variance-in-generic-type-parameters-for-value-and-reference-types\">Variance in Generic Type Parameters for Value and Reference Types</h2>\n<p> Variance for generic type parameters is supported for reference types only. For example, <code>DVariant&lt;int&gt;</code> can&#39;t be implicitly converted to <code>DVariant&lt;Object&gt;</code> or <code>DVariant&lt;long&gt;</code>, because integer is a value type.  </p>\n<p> The following example demonstrates that variance in generic type parameters is not supported for value types.  </p>\n<pre class=\"loading\"><code class=\"lang-cs\">// The type T is covariant.  \npublic delegate T DVariant&lt;out T&gt;();  \n\n// The type T is invariant.  \npublic delegate T DInvariant&lt;T&gt;();  \n\npublic static void Test()  \n{  \n    int i = 0;  \n    DInvariant&lt;int&gt; dInt = () =&gt; i;  \n    DVariant&lt;int&gt; dVariantInt = () =&gt; i;  \n\n    // All of the following statements generate a compiler error  \n    // because type variance in generic parameters is not supported  \n    // for value types, even if generic type parameters are declared variant.  \n    // DInvariant&lt;Object&gt; dObject = dInt;  \n    // DInvariant&lt;long&gt; dLong = dInt;  \n    // DVariant&lt;Object&gt; dVariantObject = dVariantInt;  \n    // DVariant&lt;long&gt; dVariantLong = dVariantInt;              \n}  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"https://msdn.microsoft.com/library/ms172192\" data-linktype=\"external\">Generics</a><br> <a href=\"using-variance-for-func-and-action-generic-delegates\" data-linktype=\"relative-path\">Using Variance for Func and Action Generic Delegates (C#)</a><br> <a href=\"../../delegates/how-to-combine-delegates-multicast-delegates\" data-linktype=\"relative-path\">How to: Combine Delegates (Multicast Delegates)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"19de89d2-8224-4406-8964-2965b732b890\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/covariance-contravariance/variance-in-delegates.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/covariance-contravariance/variance-in-delegates.md\">\r\n<meta name=\"document_id\" content=\"0e8ca7ec-35d6-7b5f-bba2-8fbab04ba1b0\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Variance in Delegates (C#) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"19de89d2-8224-4406-8964-2965b732b890","caps.latest.revision":3,"ms.topic":"article","dev_langs":["csharp"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/covariance-contravariance/variance-in-delegates.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/covariance-contravariance/variance-in-delegates.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/concepts/covariance-contravariance/variance-in-delegates.md","document_id":"0e8ca7ec-35d6-7b5f-bba2-8fbab04ba1b0","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/concepts/covariance-contravariance/variance-in-delegates","toc_asset_id":"articles/csharp/programming-guide/concepts/covariance-contravariance/toc.json","toc_rel":"toc.json","_op_ogTitle":"Variance in Delegates (C#)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":1120,"_op_rawTitle":"<h1 id=\"variance-in-delegates-c\" sourcefile=\"docs/csharp/programming-guide/concepts/covariance-contravariance/variance-in-delegates.md\" sourcestartlinenumber=\"25\" sourceendlinenumber=\"25\">Variance in Delegates (C#)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/concepts/covariance-contravariance/variance-in-delegates","fileRelativePath":"articles/csharp/programming-guide/concepts/covariance-contravariance/variance-in-delegates.html"},"themesRelativePathToOutputRoot":"_themes/"}