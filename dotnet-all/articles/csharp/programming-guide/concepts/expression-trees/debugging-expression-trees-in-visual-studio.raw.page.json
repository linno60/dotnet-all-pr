{"content":"<div><div class=\"content\">\n<p>You can analyze the structure and content of expression trees when you debug your applications. To get a quick overview of the expression tree structure, you can use the <code>DebugView</code> property, which is available only in debug mode. For more information about debugging, see <a href=\"https://docs.microsoft.com/visualstudio/debugger/debugging-in-visual-studio\" data-linktype=\"external\">Debugging in Visual Studio</a>.  </p>\n<p> To better represent the content of expression trees, the <code>DebugView</code> property uses Visual Studio visualizers. For more information, see <a href=\"https://docs.microsoft.com/visualstudio/debugger/create-custom-visualizers-of-data\" data-linktype=\"external\">Create Custom Visualizers</a>.  </p>\n<h3 id=\"to-open-a-visualizer-for-an-expression-tree\">To open a visualizer for an expression tree</h3>\n<ol>\n<li><p>Click the magnifying glass icon that appears next to the <code>DebugView</code> property of an expression tree in <strong>DataTips</strong>, a <strong>Watch</strong> window, the <strong>Autos</strong> window, or the <strong>Locals</strong> window.  </p>\n<p> A list of visualizers is displayed.  </p>\n</li>\n<li><p>Click the visualizer you want to use.  </p>\n<p>Each expression type is displayed in the visualizer as described in the following sections.  </p>\n</li>\n</ol>\n<h2 id=\"parameterexpressions\">ParameterExpressions</h2>\n<p> <a class=\"xref\" href=\"../../../../../api/system.linq.expressions.parameterexpression\" data-linktype=\"relative-path\">ParameterExpression</a> variable names are displayed with a &quot;$&quot; symbol at the beginning.  </p>\n<p> If a parameter does not have a name, it is assigned an automatically generated name, such as <code>$var1</code> or <code>$var2</code>.  </p>\n<h3 id=\"examples\">Examples</h3>\n<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th><code>DebugView</code> property</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ParameterExpression numParam =  Expression.Parameter(typeof(int), &quot;num&quot;);</code></td>\n<td><code>$num</code></td>\n</tr>\n<tr>\n<td><code>ParameterExpression numParam =  Expression.Parameter(typeof(int));</code></td>\n<td><code>$var1</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"constantexpressions\">ConstantExpressions</h2>\n<p> For <a class=\"xref\" href=\"../../../../../api/system.linq.expressions.constantexpression\" data-linktype=\"relative-path\">ConstantExpression</a> objects that represent integer values, strings, and <code>null</code>, the value of the constant is displayed.  </p>\n<p> For numeric types that have standard suffixes as C# literals, the suffix is added to the value. The following table shows the suffixes associated with various numeric types.  </p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Suffix</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"../../../../../api/system.uint32\" data-linktype=\"relative-path\">UInt32</a></td>\n<td>U</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"../../../../../api/system.int64\" data-linktype=\"relative-path\">Int64</a></td>\n<td>L</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"../../../../../api/system.uint64\" data-linktype=\"relative-path\">UInt64</a></td>\n<td>UL</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"../../../../../api/system.double\" data-linktype=\"relative-path\">Double</a></td>\n<td>D</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"../../../../../api/system.single\" data-linktype=\"relative-path\">Single</a></td>\n<td>F</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"../../../../../api/system.decimal\" data-linktype=\"relative-path\">Decimal</a></td>\n<td>M</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"examples-1\">Examples</h3>\n<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th><code>DebugView</code> property</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>int num = 10; ConstantExpression expr = Expression.Constant(num);</code></td>\n<td>10</td>\n</tr>\n<tr>\n<td><code>double num = 10; ConstantExpression expr = Expression.Constant(num);</code></td>\n<td>10D</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"blockexpression\">BlockExpression</h2>\n<p> If the type of a <a class=\"xref\" href=\"../../../../../api/system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a> object differs from the type of the last expression in the block, the type is displayed in the <code>DebugInfo</code> property in angle brackets (&lt; and &gt;). Otherwise, the type of the <a class=\"xref\" href=\"../../../../../api/system.linq.expressions.blockexpression\" data-linktype=\"relative-path\">BlockExpression</a> object is not displayed.  </p>\n<h3 id=\"examples-2\">Examples</h3>\n<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th><code>DebugView</code> property</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>BlockExpression block = Expression.Block(Expression.Constant(&quot;test&quot;));</code></td>\n<td><code>.Block() {</code><br><br> <code>&quot;test&quot;</code><br><br> <code>}</code></td>\n</tr>\n<tr>\n<td><code>BlockExpression block =  Expression.Block(typeof(Object), Expression.Constant(&quot;test&quot;));</code></td>\n<td><code>.Block&lt;System.Object&gt;() {</code><br><br> <code>&quot;test&quot;</code><br><br> <code>}</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"lambdaexpression\">LambdaExpression</h2>\n<p> <a class=\"xref\" href=\"../../../../../api/system.linq.expressions.lambdaexpression\" data-linktype=\"relative-path\">LambdaExpression</a> objects are displayed together with their delegate types.  </p>\n<p> If a lambda expression does not have a name, it is assigned an automatically generated name, such as <code>#Lambda1</code> or <code>#Lambda2</code>.  </p>\n<h3 id=\"examples-3\">Examples</h3>\n<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th><code>DebugView</code> property</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>LambdaExpression lambda =  Expression.Lambda&lt;Func&lt;int&gt;&gt;(Expression.Constant(1));</code></td>\n<td><code>.Lambda #Lambda1&lt;System.Func&#39;1[System.Int32]&gt;() {</code><br><br> <code>1</code><br><br> <code>}</code></td>\n</tr>\n<tr>\n<td><code>LambdaExpression lambda =  Expression.Lambda&lt;Func&lt;int&gt;&gt;(Expression.Constant(1), &quot;SampleLambda&quot;, null);</code></td>\n<td><code>.Lambda SampleLambda&lt;System.Func&#39;1[System.Int32]&gt;() {</code><br><br> <code>1</code><br><br> <code>}</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"labelexpression\">LabelExpression</h2>\n<p> If you specify a default value for the <a class=\"xref\" href=\"../../../../../api/system.linq.expressions.labelexpression\" data-linktype=\"relative-path\">LabelExpression</a> object, this value is displayed before the <a class=\"xref\" href=\"../../../../../api/system.linq.expressions.labeltarget\" data-linktype=\"relative-path\">LabelTarget</a> object.  </p>\n<p> The <code>.Label</code> token indicates the start of the label. The <code>.LabelTarget</code> token indicates the destination of the target to jump to.  </p>\n<p> If a label does not have a name, it is assigned an automatically generated name, such as <code>#Label1</code> or <code>#Label2</code>.  </p>\n<h3 id=\"examples-4\">Examples</h3>\n<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th><code>DebugView</code> property</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>LabelTarget target = Expression.Label(typeof(int), &quot;SampleLabel&quot;); BlockExpression block = Expression.Block( Expression.Goto(target, Expression.Constant(0)), Expression.Label(target, Expression.Constant(-1)));</code></td>\n<td><code>.Block() {</code><br><br> <code>.Goto SampleLabel { 0 };</code><br><br> <code>.Label</code><br><br> <code>-1</code><br><br> <code>.LabelTarget SampleLabel:</code><br><br> <code>}</code></td>\n</tr>\n<tr>\n<td><code>LabelTarget target = Expression.Label(); BlockExpression block = Expression.Block( Expression.Goto(target5), Expression.Label(target5));</code></td>\n<td><code>.Block() {</code><br><br> <code>.Goto #Label1 { };</code><br><br> <code>.Label</code><br><br> <code>.LabelTarget #Label1:</code><br><br> <code>}</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"checked-operators\">Checked Operators</h2>\n<p> Checked operators are displayed with the &quot;#&quot; symbol in front of the operator. For example, the checked addition operator is displayed as <code>#+</code>.  </p>\n<h3 id=\"examples-5\">Examples</h3>\n<table>\n<thead>\n<tr>\n<th>Expression</th>\n<th><code>DebugView</code> property</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Expression expr = Expression.AddChecked( Expression.Constant(1), Expression.Constant(2));</code></td>\n<td><code>1 #+ 2</code></td>\n</tr>\n<tr>\n<td><code>Expression expr = Expression.ConvertChecked( Expression.Constant(10.0), typeof(int));</code></td>\n<td><code>#(System.Int32)10D</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"index\" data-linktype=\"relative-path\">Expression Trees (C#)</a><br> <a href=\"https://docs.microsoft.com/visualstudio/debugger/debugging-in-visual-studio\" data-linktype=\"external\">Debugging in Visual Studio</a><br> <a href=\"https://docs.microsoft.com/visualstudio/debugger/create-custom-visualizers-of-data\" data-linktype=\"external\">Create Custom Visualizers</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet/toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"1369fa25-0fbd-4b92-98d0-8df79c49c27a\">\r\n<meta name=\"caps.latest.revision\" content=\"4\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/expression-trees/debugging-expression-trees-in-visual-studio.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/expression-trees/debugging-expression-trees-in-visual-studio.md\">\r\n<meta name=\"document_id\" content=\"21dfb58c-1769-f3c7-73e0-3a31619d36f7\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Debugging Expression Trees in Visual Studio (C#) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"1369fa25-0fbd-4b92-98d0-8df79c49c27a","caps.latest.revision":4,"ms.topic":"article","dev_langs":["csharp"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Absolute urls and other fixes (#1281)","commit_sha":"f7dffe4885b331cec8d37f3cc5c9163f69c3b4c9","commit_date":"2016-11-22 12:57:26 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/concepts/expression-trees/debugging-expression-trees-in-visual-studio.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/concepts/expression-trees/debugging-expression-trees-in-visual-studio.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/concepts/expression-trees/debugging-expression-trees-in-visual-studio.md","document_id":"21dfb58c-1769-f3c7-73e0-3a31619d36f7","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/expression-trees/debugging-expression-trees-in-visual-studio","toc_asset_id":"articles/csharp/programming-guide/concepts/expression-trees/toc.json","toc_rel":"toc.json","_op_ogTitle":"Debugging Expression Trees in Visual Studio (C#)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":535,"_op_rawTitle":"<h1 id=\"debugging-expression-trees-in-visual-studio-c\" sourcefile=\"docs/csharp/programming-guide/concepts/expression-trees/debugging-expression-trees-in-visual-studio.md\" sourcestartlinenumber=\"25\" sourceendlinenumber=\"25\">Debugging Expression Trees in Visual Studio (C#)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/concepts/expression-trees/debugging-expression-trees-in-visual-studio","fileRelativePath":"articles/csharp/programming-guide/concepts/expression-trees/debugging-expression-trees-in-visual-studio.html"},"themesRelativePathToOutputRoot":"_themes/"}