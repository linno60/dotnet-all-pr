{"content":"<div><div class=\"content\">\n<p>The following examples show how to copy, move, and delete files and folders in a synchronous manner by using the <a class=\"xref\" href=\"../../../../api/system.io.file\" data-linktype=\"relative-path\">System.IO.File</a>, <a class=\"xref\" href=\"../../../../api/system.io.directory\" data-linktype=\"relative-path\">System.IO.Directory</a>, <a class=\"xref\" href=\"../../../../api/system.io.fileinfo\" data-linktype=\"relative-path\">System.IO.FileInfo</a>, and <a class=\"xref\" href=\"../../../../api/system.io.directoryinfo\" data-linktype=\"relative-path\">System.IO.DirectoryInfo</a> classes from the <a class=\"xref\" href=\"../../../../api/system.io\" data-linktype=\"relative-path\">System.IO</a> namespace. These examples do not provide a progress bar or any other user interface. If you want to provide a standard progress dialog box, see <a href=\"how-to-provide-a-progress-dialog-box-for-file-operations\" data-linktype=\"relative-path\">How to: Provide a Progress Dialog Box for File Operations</a>.  </p>\n<p> Use <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/system.io.filesystemwatcher(v=vs.110).aspx\" data-linktype=\"external\">System.IO.FileSystemWatcher</a> to provide events that will enable you to calculate the progress when operating on multiple files. Another approach is to use platform invoke to call the relevant file-related methods in the Windows Shell. For information about how to perform these file operations asynchronously, see <a href=\"https://msdn.microsoft.com/library/kztecsys\" data-linktype=\"external\">Asynchronous File I/O</a>.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following example shows how to copy files and directories.  </p>\n<pre><code class=\"lang-cs\" name=\"csFilesandFolders#7\">    // Simple synchronous file copy operations with no user interface.\n    // To run this sample, first create the following directories and files:\n    // C:\\Users\\Public\\TestFolder\n    // C:\\Users\\Public\\TestFolder\\test.txt\n    // C:\\Users\\Public\\TestFolder\\SubDir\\test.txt\n    public class SimpleFileCopy\n    {\n        static void Main()\n        {\n            string fileName = &quot;test.txt&quot;;\n            string sourcePath = @&quot;C:\\Users\\Public\\TestFolder&quot;;\n            string targetPath =  @&quot;C:\\Users\\Public\\TestFolder\\SubDir&quot;;\n\n            // Use Path class to manipulate file and directory paths.\n            string sourceFile = System.IO.Path.Combine(sourcePath, fileName);\n            string destFile = System.IO.Path.Combine(targetPath, fileName);\n\n            // To copy a folder&#39;s contents to a new location:\n            // Create a new target folder, if necessary.\n            if (!System.IO.Directory.Exists(targetPath))\n            {\n                System.IO.Directory.CreateDirectory(targetPath);\n            }\n\n            // To copy a file to another location and \n            // overwrite the destination file if it already exists.\n            System.IO.File.Copy(sourceFile, destFile, true);\n            \n            // To copy all the files in one directory to another directory.\n            // Get the files in the source folder. (To recursively iterate through\n            // all subfolders under the current directory, see\n            // &quot;How to: Iterate Through a Directory Tree.&quot;)\n            // Note: Check for target path was performed previously\n            //       in this code example.\n            if (System.IO.Directory.Exists(sourcePath))\n            {\n                string[] files = System.IO.Directory.GetFiles(sourcePath);\n\n                // Copy the files and overwrite destination files if they already exist.\n                foreach (string s in files)\n                {\n                    // Use static Path methods to extract only the file name from the path.\n                    fileName = System.IO.Path.GetFileName(s);\n                    destFile = System.IO.Path.Combine(targetPath, fileName);\n                    System.IO.File.Copy(s, destFile, true);\n                }\n            }\n            else\n            {\n                Console.WriteLine(&quot;Source path does not exist!&quot;);\n            }\n\n            // Keep console window open in debug mode.\n            Console.WriteLine(&quot;Press any key to exit.&quot;);\n            Console.ReadKey();\n        }\n    }\n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> The following example shows how to move files and directories.  </p>\n<pre><code class=\"lang-cs\" name=\"csFilesandFolders#8\">    // Simple synchronous file move operations with no user interface.\n    public class SimpleFileMove\n    {\n        static void Main()\n        {\n            string sourceFile = @&quot;C:\\Users\\Public\\public\\test.txt&quot;;\n            string destinationFile = @&quot;C:\\Users\\Public\\private\\test.txt&quot;;\n\n            // To move a file or folder to a new location:\n            System.IO.File.Move(sourceFile, destinationFile);\n\n            // To move an entire directory. To programmatically modify or combine\n            // path strings, use the System.IO.Path class.\n            System.IO.Directory.Move(@&quot;C:\\Users\\Public\\public\\test\\&quot;, @&quot;C:\\Users\\Public\\private&quot;);\n        }\n    }\n</code></pre><h2 id=\"example-2\">Example</h2>\n<p> The following example shows how to delete files and directories.  </p>\n<pre><code class=\"lang-cs\" name=\"csFilesandFolders#9\">    // Simple synchronous file deletion operations with no user interface.\n    // To run this sample, create the following files on your drive:\n    // C:\\Users\\Public\\DeleteTest\\test1.txt\n    // C:\\Users\\Public\\DeleteTest\\test2.txt\n    // C:\\Users\\Public\\DeleteTest\\SubDir\\test2.txt\n\n    public class SimpleFileDelete\n    {\n        static void Main()\n        {\n            // Delete a file by using File class static method...\n            if(System.IO.File.Exists(@&quot;C:\\Users\\Public\\DeleteTest\\test.txt&quot;))\n            {\n                // Use a try block to catch IOExceptions, to\n                // handle the case of the file already being\n                // opened by another process.\n                try\n                {\n                    System.IO.File.Delete(@&quot;C:\\Users\\Public\\DeleteTest\\test.txt&quot;);\n                }\n                catch (System.IO.IOException e)\n                {\n                    Console.WriteLine(e.Message);\n                    return;\n                }\n            }\n\n            // ...or by using FileInfo instance method.\n            System.IO.FileInfo fi = new System.IO.FileInfo(@&quot;C:\\Users\\Public\\DeleteTest\\test2.txt&quot;);\n            try\n            {\n                fi.Delete();\n            }\n            catch (System.IO.IOException e)\n            {\n                Console.WriteLine(e.Message);\n            }\n\n            // Delete a directory. Must be writable or empty.\n            try\n            {\n                System.IO.Directory.Delete(@&quot;C:\\Users\\Public\\DeleteTest&quot;);\n            }\n            catch (System.IO.IOException e)\n            {\n                Console.WriteLine(e.Message);\n            }\n            // Delete a directory and all subdirectories with Directory static method...\n            if(System.IO.Directory.Exists(@&quot;C:\\Users\\Public\\DeleteTest&quot;))\n            {\n                try\n                {\n                    System.IO.Directory.Delete(@&quot;C:\\Users\\Public\\DeleteTest&quot;, true);\n                }\n\n                catch (System.IO.IOException e)\n                {\n                    Console.WriteLine(e.Message);\n                }\n            }\n\n            // ...or with DirectoryInfo instance method.\n            System.IO.DirectoryInfo di = new System.IO.DirectoryInfo(@&quot;C:\\Users\\Public\\public&quot;);\n            // Delete this dir and all subdirs.\n            try\n            {\n                di.Delete(true);\n            }\n            catch (System.IO.IOException e)\n            {\n                Console.WriteLine(e.Message);\n            }\n\n        }\n    }\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../api/system.io\" data-linktype=\"relative-path\">System.IO</a><br> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">File System and the Registry (C# Programming Guide)</a><br> <a href=\"how-to-provide-a-progress-dialog-box-for-file-operations\" data-linktype=\"relative-path\">How to: Provide a Progress Dialog Box for File Operations</a><br> <a href=\"https://msdn.microsoft.com/library/k3352a4t\" data-linktype=\"external\">File and Stream I/O</a><br> <a href=\"https://msdn.microsoft.com/library/ms404278\" data-linktype=\"external\">Common I/O Tasks</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"62e52cd7-9597-4e4a-acf9-1315f5cdbf05\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"13\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-21 01:42 AM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/3115359729431ecbcc16058612da59b85621fa0f/docs/csharp/programming-guide/file-system/how-to-copy-delete-and-move-files-and-folders.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/csharp/programming-guide/file-system/how-to-copy-delete-and-move-files-and-folders.md\">\r\n<meta name=\"document_id\" content=\"2e851602-8785-bd00-3b14-929aa5271566\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"How to: Copy, Delete, and Move Files and Folders (C# Programming Guide) | Microsoft Docs","ms.assetid":"62e52cd7-9597-4e4a-acf9-1315f5cdbf05","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":13,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["I/O [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Bill Wagner","author_email":"wiwagn@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Reorganize the C# Guide TOC (#1318)","commit_sha":"3115359729431ecbcc16058612da59b85621fa0f","commit_date":"2017-01-23 23:20:14 -0500"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-21 01:42 AM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/21/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/3115359729431ecbcc16058612da59b85621fa0f/docs/csharp/programming-guide/file-system/how-to-copy-delete-and-move-files-and-folders.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/csharp/programming-guide/file-system/how-to-copy-delete-and-move-files-and-folders.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/file-system/how-to-copy-delete-and-move-files-and-folders.md","document_id":"2e851602-8785-bd00-3b14-929aa5271566","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/file-system/how-to-copy-delete-and-move-files-and-folders","toc_asset_id":"articles/csharp/programming-guide/file-system/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Copy, Delete, and Move Files and Folders (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":651,"_op_rawTitle":"<h1 id=\"how-to-copy-delete-and-move-files-and-folders-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/file-system/how-to-copy-delete-and-move-files-and-folders.md\" sourcestartlinenumber=\"36\" sourceendlinenumber=\"36\">How to: Copy, Delete, and Move Files and Folders (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/file-system/how-to-copy-delete-and-move-files-and-folders","fileRelativePath":"articles/csharp/programming-guide/file-system/how-to-copy-delete-and-move-files-and-folders.html"},"themesRelativePathToOutputRoot":"_themes/"}