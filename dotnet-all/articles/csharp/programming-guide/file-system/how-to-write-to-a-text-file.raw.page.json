{"content":"<div><div class=\"content\">\n<p>These examples show various ways to write text to a file.  The first two examples use static convenience methods on the <a class=\"xref\" href=\"../../../../api/system.io.file\" data-linktype=\"relative-path\">System.IO.File</a> class to write each element of any IEnumerable&lt;string&gt; and a string to a text file.  Example 3 shows how to add text to a file when you have to process each line individually as you write to the file.  Examples 1-3 overwrite all existing content in the file, but example 4 shows you how to append text to an existing file.  </p>\n<p> These examples all write string literals to files, but more likely you will want to use the <a class=\"xref\" href=\"../../../../api/system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a> method, which has many controls for writing different types of values  right or left justified in a field, with or without padding, and so on.  You can also use the C# <a href=\"../../language-reference/keywords/interpolated-strings\" data-linktype=\"relative-path\">string interpolation</a> feature.  </p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"lang-cs\" name=\"csFilesandFolders#3\">class WriteTextFile\n{\n    static void Main()\n    {\n\n        // These examples assume a &quot;C:\\Users\\Public\\TestFolder&quot; folder on your machine.\n        // You can modify the path if necessary.\n        \n\n        // Example #1: Write an array of strings to a file.\n        // Create a string array that consists of three lines.\n        string[] lines = { &quot;First line&quot;, &quot;Second line&quot;, &quot;Third line&quot; };\n        // WriteAllLines creates a file, writes a collection of strings to the file,\n        // and then closes the file.  You do NOT need to call Flush() or Close().\n        System.IO.File.WriteAllLines(@&quot;C:\\Users\\Public\\TestFolder\\WriteLines.txt&quot;, lines);\n\n\n        // Example #2: Write one string to a text file.\n        string text = &quot;A class is the most powerful data type in C#. Like a structure, &quot; +\n                       &quot;a class defines the data and behavior of the data type. &quot;;\n        // WriteAllText creates a file, writes the specified string to the file,\n        // and then closes the file.    You do NOT need to call Flush() or Close().\n        System.IO.File.WriteAllText(@&quot;C:\\Users\\Public\\TestFolder\\WriteText.txt&quot;, text);\n\n        // Example #3: Write only some strings in an array to a file.\n        // The using statement automatically flushes AND CLOSES the stream and calls \n        // IDisposable.Dispose on the stream object.\n        // NOTE: do not use FileStream for text files because it writes bytes, but StreamWriter\n        // encodes the output as text.\n        using (System.IO.StreamWriter file = \n            new System.IO.StreamWriter(@&quot;C:\\Users\\Public\\TestFolder\\WriteLines2.txt&quot;))\n        {\n            foreach (string line in lines)\n            {\n                // If the line doesn&#39;t contain the word &#39;Second&#39;, write the line to the file.\n                if (!line.Contains(&quot;Second&quot;))\n                {\n                    file.WriteLine(line);\n                }\n            }\n        }\n\n        // Example #4: Append new text to an existing file.\n        // The using statement automatically flushes AND CLOSES the stream and calls \n        // IDisposable.Dispose on the stream object.\n        using (System.IO.StreamWriter file = \n            new System.IO.StreamWriter(@&quot;C:\\Users\\Public\\TestFolder\\WriteLines2.txt&quot;, true))\n        {\n            file.WriteLine(&quot;Fourth line&quot;);\n        }\n    }\n}\n //Output (to WriteLines.txt):\n //   First line\n //   Second line\n //   Third line\n     \n //Output (to WriteText.txt):\n //   A class is the most powerful data type in C#. Like a structure, a class defines the data and behavior of the data type.\n     \n //Output to WriteLines2.txt after Example #3:\n //   First line\n //   Third line\n      \n //Output to WriteLines2.txt after Example #4:\n //   First line\n //   Third line\n //   Fourth line\n</code></pre><p> These examples all write string literals to files, but more likely you will want to use the <a class=\"xref\" href=\"../../../../api/system.string#System_String_Format_\" data-linktype=\"relative-path\">Format</a> method, which has many controls for writing different types of values  right or left justified in a field, with or without padding, and so on.  You can also use the C# <a href=\"../../language-reference/keywords/interpolated-strings\" data-linktype=\"relative-path\">string interpolation</a> feature.  </p>\n<h2 id=\"robust-programming\">Robust Programming</h2>\n<p> The following conditions may cause an exception:  </p>\n<ul>\n<li><p>The file exists and is read-only.  </p>\n</li>\n<li><p>The path name may be too long.  </p>\n</li>\n<li><p>The disk may be full.  </p>\n</li>\n</ul>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">File System and the Registry (C# Programming Guide)</a><br> <a href=\"http://code.msdn.microsoft.com/CSWinStoreAppSaveCollection-bed5d6e6\" data-linktype=\"external\">Sample: Save a collection to Application Storage</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"2e99f184-d88b-4719-a7f1-d9ec482aa809\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"23\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/3115359729431ecbcc16058612da59b85621fa0f/docs/csharp/programming-guide/file-system/how-to-write-to-a-text-file.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/file-system/how-to-write-to-a-text-file.md\">\r\n<meta name=\"document_id\" content=\"5b5cfac2-ad18-6160-712c-bb066dcb7a17\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"How to: Write to a Text File (C# Programming Guide) | Microsoft Docs","ms.assetid":"2e99f184-d88b-4719-a7f1-d9ec482aa809","f1_keywords":["TextWriter.WriteLine","StreamWriter.Close"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":23,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["files [C#], text files","text, writing to files [C#]"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Bill Wagner","author_email":"wiwagn@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Reorganize the C# Guide TOC (#1318)","commit_sha":"3115359729431ecbcc16058612da59b85621fa0f","commit_date":"2017-01-23 23:20:14 -0500"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/3115359729431ecbcc16058612da59b85621fa0f/docs/csharp/programming-guide/file-system/how-to-write-to-a-text-file.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/file-system/how-to-write-to-a-text-file.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/file-system/how-to-write-to-a-text-file.md","document_id":"5b5cfac2-ad18-6160-712c-bb066dcb7a17","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/file-system/how-to-write-to-a-text-file","toc_asset_id":"articles/csharp/programming-guide/file-system/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Write to a Text File (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":583,"_op_rawTitle":"<h1 id=\"how-to-write-to-a-text-file-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/file-system/how-to-write-to-a-text-file.md\" sourcestartlinenumber=\"40\" sourceendlinenumber=\"40\">How to: Write to a Text File (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/file-system/how-to-write-to-a-text-file","fileRelativePath":"articles/csharp/programming-guide/file-system/how-to-write-to-a-text-file.html"},"themesRelativePathToOutputRoot":"_themes/"}