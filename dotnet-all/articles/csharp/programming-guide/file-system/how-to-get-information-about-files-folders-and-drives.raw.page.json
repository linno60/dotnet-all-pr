{"content":"<div><div class=\"content\">\n<p>In the .NET Framework, you can access file system information by using the following classes:  </p>\n<ul>\n<li><a class=\"xref\" href=\"../../../../api/system.io.fileinfo\" data-linktype=\"relative-path\">System.IO.FileInfo</a>  \n</li>\n<li><a class=\"xref\" href=\"../../../../api/system.io.directoryinfo\" data-linktype=\"relative-path\">System.IO.DirectoryInfo</a>  \n</li>\n<li><a class=\"xref\" href=\"../../../../api/system.io.driveinfo\" data-linktype=\"relative-path\">System.IO.DriveInfo</a>  \n</li>\n<li><a class=\"xref\" href=\"../../../../api/system.io.directory\" data-linktype=\"relative-path\">System.IO.Directory</a>  \n</li>\n<li><a class=\"xref\" href=\"../../../../api/system.io.file\" data-linktype=\"relative-path\">System.IO.File</a>  \n\n<p>The <a class=\"xref\" href=\"../../../../api/system.io.fileinfo\" data-linktype=\"relative-path\">FileInfo</a> and <a class=\"xref\" href=\"../../../../api/system.io.directoryinfo\" data-linktype=\"relative-path\">DirectoryInfo</a> classes represent a file or directory and contain properties that expose many of the file attributes that are supported by the NTFS file system. They also contain methods for opening, closing, moving, and deleting files and folders. You can create instances of these classes by passing a string that represents the name of the file, folder, or drive in to the constructor:  </p>\n</li>\n</ul>\n<pre class=\"loading\"><code class=\"lang-cs\">System.IO.DriveInfo di = new System.IO.DriveInfo(@&quot;C:\\&quot;);  \n</code></pre><p> You can also obtain the names of files, folders, or drives by using calls to <a class=\"xref\" href=\"../../../../api/system.io.directoryinfo#System_IO_DirectoryInfo_GetDirectories_\" data-linktype=\"relative-path\">GetDirectories</a>, <a class=\"xref\" href=\"../../../../api/system.io.directoryinfo#System_IO_DirectoryInfo_GetFiles_\" data-linktype=\"relative-path\">GetFiles</a>, and <a class=\"xref\" href=\"../../../../api/system.io.driveinfo#System_IO_DriveInfo_RootDirectory_\" data-linktype=\"relative-path\">RootDirectory</a>.  </p>\n<p> The <a class=\"xref\" href=\"../../../../api/system.io.directory\" data-linktype=\"relative-path\">System.IO.Directory</a> and <a class=\"xref\" href=\"../../../../api/system.io.file\" data-linktype=\"relative-path\">System.IO.File</a> classes provide static methods for retrieving information about directories and files.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following example shows various ways to access information about files and folders.  </p>\n<pre><code class=\"lang-cs\" name=\"csFilesandFolders#6\">    class FileSysInfo\n    {\n        static void Main()\n        {\n            // You can also use System.Environment.GetLogicalDrives to\n            // obtain names of all logical drives on the computer.\n            System.IO.DriveInfo di = new System.IO.DriveInfo(@&quot;C:\\&quot;);\n            Console.WriteLine(di.TotalFreeSpace);\n            Console.WriteLine(di.VolumeLabel);\n\n            // Get the root directory and print out some information about it.\n            System.IO.DirectoryInfo dirInfo = di.RootDirectory;\n            Console.WriteLine(dirInfo.Attributes.ToString());\n\n            // Get the files in the directory and print out some information about them.\n            System.IO.FileInfo[] fileNames = dirInfo.GetFiles(&quot;*.*&quot;);\n\n\n            foreach (System.IO.FileInfo fi in fileNames)\n            {\n                Console.WriteLine(&quot;{0}: {1}: {2}&quot;, fi.Name, fi.LastAccessTime, fi.Length);\n            }\n\n            // Get the subdirectories directly that is under the root.\n            // See &quot;How to: Iterate Through a Directory Tree&quot; for an example of how to\n            // iterate through an entire tree.\n            System.IO.DirectoryInfo[] dirInfos = dirInfo.GetDirectories(&quot;*.*&quot;);\n\n            foreach (System.IO.DirectoryInfo d in dirInfos)\n            {\n                Console.WriteLine(d.Name);\n            }\n\n            // The Directory and File classes provide several static methods\n            // for accessing files and directories.\n\n            // Get the current application directory.\n            string currentDirName = System.IO.Directory.GetCurrentDirectory();\n            Console.WriteLine(currentDirName);           \n\n            // Get an array of file names as strings rather than FileInfo objects.\n            // Use this method when storage space is an issue, and when you might\n            // hold on to the file name reference for a while before you try to access\n            // the file.\n            string[] files = System.IO.Directory.GetFiles(currentDirName, &quot;*.txt&quot;);\n\n            foreach (string s in files)\n            {\n                // Create the FileInfo object only when needed to ensure\n                // the information is as current as possible.\n                System.IO.FileInfo fi = null;\n                try\n                {\n                     fi = new System.IO.FileInfo(s);\n                }\n                catch (System.IO.FileNotFoundException e)\n                {\n                    // To inform the user and continue is\n                    // sufficient for this demonstration.\n                    // Your application may require different behavior.\n                    Console.WriteLine(e.Message);\n                    continue;\n                }\n                Console.WriteLine(&quot;{0} : {1}&quot;,fi.Name, fi.Directory);\n            }\n\n            // Change the directory. In this case, first check to see\n            // whether it already exists, and create it if it does not.\n            // If this is not appropriate for your application, you can\n            // handle the System.IO.IOException that will be raised if the\n            // directory cannot be found.\n            if (!System.IO.Directory.Exists(@&quot;C:\\Users\\Public\\TestFolder\\&quot;))\n            {\n                System.IO.Directory.CreateDirectory(@&quot;C:\\Users\\Public\\TestFolder\\&quot;);\n            }\n\n            System.IO.Directory.SetCurrentDirectory(@&quot;C:\\Users\\Public\\TestFolder\\&quot;);\n\n            currentDirName = System.IO.Directory.GetCurrentDirectory();\n            Console.WriteLine(currentDirName);\n\n            // Keep the console window open in debug mode.\n            Console.WriteLine(&quot;Press any key to exit.&quot;);\n            Console.ReadKey();\n        }\n    }\n</code></pre><h2 id=\"robust-programming\">Robust Programming</h2>\n<p> When you process user-specified path strings, you should also handle exceptions for the following conditions:  </p>\n<ul>\n<li><p>The file name is malformed. For example, it contains invalid characters or only white space.  </p>\n</li>\n<li><p>The file name is null.  </p>\n</li>\n<li><p>The file name is longer than the system-defined maximum length.  </p>\n</li>\n<li><p>The file name contains a colon (:).  </p>\n<p>If the application does not have sufficient permissions to read the specified file, the <code>Exists</code> method returns <code>false</code> regardless of whether a path exists; the method does not throw an exception.  </p>\n</li>\n</ul>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../api/system.io\" data-linktype=\"relative-path\">System.IO</a><br> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">File System and the Registry (C# Programming Guide)</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"22fc2da6-5494-405b-995e-c0b99142a93e\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"30\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/3115359729431ecbcc16058612da59b85621fa0f/docs/csharp/programming-guide/file-system/how-to-get-information-about-files-folders-and-drives.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/file-system/how-to-get-information-about-files-folders-and-drives.md\">\r\n<meta name=\"document_id\" content=\"0b0acbea-d9f1-54d4-b927-230ca897a110\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"How to: Get Information About Files, Folders, and Drives  (C# Programming Guide) | Microsoft Docs","ms.assetid":"22fc2da6-5494-405b-995e-c0b99142a93e","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":30,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["files [C#], getting information about"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Bill Wagner","author_email":"wiwagn@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Reorganize the C# Guide TOC (#1318)","commit_sha":"3115359729431ecbcc16058612da59b85621fa0f","commit_date":"2017-01-23 23:20:14 -0500"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/3115359729431ecbcc16058612da59b85621fa0f/docs/csharp/programming-guide/file-system/how-to-get-information-about-files-folders-and-drives.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/file-system/how-to-get-information-about-files-folders-and-drives.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/file-system/how-to-get-information-about-files-folders-and-drives.md","document_id":"0b0acbea-d9f1-54d4-b927-230ca897a110","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/file-system/how-to-get-information-about-files-folders-and-drives","toc_asset_id":"articles/csharp/programming-guide/file-system/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Get Information About Files, Folders, and Drives  (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":566,"_op_rawTitle":"<h1 id=\"how-to-get-information-about-files-folders-and-drives--c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/file-system/how-to-get-information-about-files-folders-and-drives.md\" sourcestartlinenumber=\"36\" sourceendlinenumber=\"36\">How to: Get Information About Files, Folders, and Drives  (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/file-system/how-to-get-information-about-files-folders-and-drives","fileRelativePath":"articles/csharp/programming-guide/file-system/how-to-get-information-about-files-folders-and-drives.html"},"themesRelativePathToOutputRoot":"_themes/"}