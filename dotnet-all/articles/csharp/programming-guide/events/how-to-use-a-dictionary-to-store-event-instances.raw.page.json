{"content":"<div><div class=\"content\">\n<p>One use for <code>accessor-declarations</code> is to expose many events without allocating a field for each event, but instead using a Dictionary to store the event instances. This is only useful if you have many events, but you expect most of the events will not be implemented.  </p>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"lang-cs\" name=\"csProgGuideEvents#9\">    public delegate void EventHandler1(int i);\n    public delegate void EventHandler2(string s);\n\n    public class PropertyEventsSample\n    {\n        private System.Collections.Generic.Dictionary&lt;string, System.Delegate&gt; eventTable;\n\n        public PropertyEventsSample()\n        {\n            eventTable = new System.Collections.Generic.Dictionary&lt;string, System.Delegate&gt;();\n            eventTable.Add(&quot;Event1&quot;, null);\n            eventTable.Add(&quot;Event2&quot;, null);\n        }\n\n        public event EventHandler1 Event1\n        {\n            add\n            {\n                lock (eventTable)\n                {\n                    eventTable[&quot;Event1&quot;] = (EventHandler1)eventTable[&quot;Event1&quot;] + value;\n                }\n            }\n            remove\n            {\n                lock (eventTable)\n                {\n                    eventTable[&quot;Event1&quot;] = (EventHandler1)eventTable[&quot;Event1&quot;] - value;\n                }\n            }\n        }\n\n        public event EventHandler2 Event2\n        {\n            add\n            {\n                lock (eventTable)\n                {\n                    eventTable[&quot;Event2&quot;] = (EventHandler2)eventTable[&quot;Event2&quot;] + value;\n                }\n            }\n            remove\n            {\n                lock (eventTable)\n                {\n                    eventTable[&quot;Event2&quot;] = (EventHandler2)eventTable[&quot;Event2&quot;] - value;\n                }\n            }\n        }\n\n        internal void RaiseEvent1(int i)\n        {\n            EventHandler1 handler1;\n            if (null != (handler1 = (EventHandler1)eventTable[&quot;Event1&quot;]))\n            {\n                handler1(i);\n            }\n        }\n\n        internal void RaiseEvent2(string s)\n        {\n            EventHandler2 handler2;\n            if (null != (handler2 = (EventHandler2)eventTable[&quot;Event2&quot;]))\n            {\n                handler2(s);\n            }\n        }\n    }\n\n    public class TestClass\n    {\n        public static void Delegate1Method(int i)\n        {\n            System.Console.WriteLine(i);\n        }\n\n        public static void Delegate2Method(string s)\n        {\n            System.Console.WriteLine(s);\n        }\n\n        static void Main()\n        {\n            PropertyEventsSample p = new PropertyEventsSample();\n\n            p.Event1 += new EventHandler1(TestClass.Delegate1Method);\n            p.Event1 += new EventHandler1(TestClass.Delegate1Method);\n            p.Event1 -= new EventHandler1(TestClass.Delegate1Method);\n            p.RaiseEvent1(2);\n\n            p.Event2 += new EventHandler2(TestClass.Delegate2Method);\n            p.Event2 += new EventHandler2(TestClass.Delegate2Method);\n            p.Event2 -= new EventHandler2(TestClass.Delegate2Method);\n            p.RaiseEvent2(&quot;TestString&quot;);\n\n            // Keep the console window open in debug mode.\n            System.Console.WriteLine(&quot;Press any key to exit.&quot;);\n            System.Console.ReadKey();\n        }\n    }\n    /* Output:\n        2\n        TestString\n    */\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">Events</a><br> <a href=\"../delegates/index\" data-linktype=\"relative-path\">Delegates</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"9512c64d-5aaf-40cd-b941-ca2a592f0064\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"16\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/events/how-to-use-a-dictionary-to-store-event-instances.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/events/how-to-use-a-dictionary-to-store-event-instances.md\">\r\n<meta name=\"document_id\" content=\"6be0ead8-ee5d-9b99-a11e-bb41c34f8c9e\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"How to: Use a Dictionary to Store Event Instances (C# Programming Guide) | Microsoft Docs","ms.assetid":"9512c64d-5aaf-40cd-b941-ca2a592f0064","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":16,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["events [C#], storing instances in a Dictionary"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/events/how-to-use-a-dictionary-to-store-event-instances.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/events/how-to-use-a-dictionary-to-store-event-instances.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/events/how-to-use-a-dictionary-to-store-event-instances.md","document_id":"6be0ead8-ee5d-9b99-a11e-bb41c34f8c9e","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/events/how-to-use-a-dictionary-to-store-event-instances","toc_asset_id":"articles/csharp/programming-guide/events/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Use a Dictionary to Store Event Instances (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":257,"_op_rawTitle":"<h1 id=\"how-to-use-a-dictionary-to-store-event-instances-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/events/how-to-use-a-dictionary-to-store-event-instances.md\" sourcestartlinenumber=\"36\" sourceendlinenumber=\"36\">How to: Use a Dictionary to Store Event Instances (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/events/how-to-use-a-dictionary-to-store-event-instances","fileRelativePath":"articles/csharp/programming-guide/events/how-to-use-a-dictionary-to-store-event-instances.html"},"themesRelativePathToOutputRoot":"_themes/"}