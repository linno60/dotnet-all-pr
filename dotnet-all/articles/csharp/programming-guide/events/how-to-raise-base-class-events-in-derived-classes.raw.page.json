{"content":"<div><div class=\"content\">\n<p>The following simple example shows the standard way to declare events in a base class so that they can also be raised from derived classes. This pattern is used extensively in Windows Forms classes in the .NET Framework class library.  </p>\n<p> When you create a class that can be used as a base class for other classes, you should consider the fact that events are a special type of delegate that can only be invoked from within the class that declared them. Derived classes cannot directly invoke events that are declared within the base class. Although sometimes you may want an event that can only be raised by the base class, most of the time, you should enable the derived class to invoke base class events. To do this, you can create a protected invoking method in the base class that wraps the event. By calling or overriding this invoking method, derived classes can invoke the event indirectly.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Do not declare virtual events in a base class and override them in a derived class. The C# compiler does not handle these correctly and it is unpredictable whether a subscriber to the derived event will actually be subscribing to the base class event.  </p>\n</div>\n<h2 id=\"example\">Example</h2>\n<pre><code class=\"lang-cs\" name=\"csProgGuideEvents#1\">\nnamespace BaseClassEvents\n{\n    using System;\n    using System.Collections.Generic;\n\n    // Special EventArgs class to hold info about Shapes.\n    public class ShapeEventArgs : EventArgs\n    {\n        private double newArea;\n\n        public ShapeEventArgs(double d)\n        {\n            newArea = d;\n        }\n        public double NewArea\n        {\n            get { return newArea; }\n        }\n    }\n\n    // Base class event publisher\n    public abstract class Shape\n    {\n        protected double area;\n\n        public double Area\n        {\n            get { return area; }\n            set { area = value; }\n        }\n        // The event. Note that by using the generic EventHandler&lt;T&gt; event type\n        // we do not need to declare a separate delegate type.\n        public event EventHandler&lt;ShapeEventArgs&gt; ShapeChanged;\n\n        public abstract void Draw();\n\n        //The event-invoking method that derived classes can override.\n        protected virtual void OnShapeChanged(ShapeEventArgs e)\n        {\n            // Make a temporary copy of the event to avoid possibility of\n            // a race condition if the last subscriber unsubscribes\n            // immediately after the null check and before the event is raised.\n            EventHandler&lt;ShapeEventArgs&gt; handler = ShapeChanged;\n            if (handler != null)\n            {\n                handler(this, e);\n            }\n        }\n    }\n\n    public class Circle : Shape\n    {\n        private double radius;\n        public Circle(double d)\n        {\n            radius = d;\n            area = 3.14 * radius * radius;\n        }\n        public void Update(double d)\n        {\n            radius = d;\n            area = 3.14 * radius * radius;\n            OnShapeChanged(new ShapeEventArgs(area));\n        }\n        protected override void OnShapeChanged(ShapeEventArgs e)\n        {\n            // Do any circle-specific processing here.\n\n            // Call the base class event invocation method.\n            base.OnShapeChanged(e);\n        }\n        public override void Draw()\n        {\n            Console.WriteLine(&quot;Drawing a circle&quot;);\n        }\n    }\n\n    public class Rectangle : Shape\n    {\n        private double length;\n        private double width;\n        public Rectangle(double length, double width)\n        {\n            this.length = length;\n            this.width = width;\n            area = length * width;\n        }\n        public void Update(double length, double width)\n        {\n            this.length = length;\n            this.width = width;\n            area = length * width;\n            OnShapeChanged(new ShapeEventArgs(area));\n        }\n        protected override void OnShapeChanged(ShapeEventArgs e)\n        {\n            // Do any rectangle-specific processing here.\n\n            // Call the base class event invocation method.\n            base.OnShapeChanged(e);\n        }\n        public override void Draw()\n        {\n            Console.WriteLine(&quot;Drawing a rectangle&quot;);\n        }\n\n    }\n\n    // Represents the surface on which the shapes are drawn\n    // Subscribes to shape events so that it knows\n    // when to redraw a shape.\n    public class ShapeContainer\n    {\n        List&lt;Shape&gt; _list;\n\n        public ShapeContainer()\n        {\n            _list = new List&lt;Shape&gt;();\n        }\n\n        public void AddShape(Shape s)\n        {\n            _list.Add(s);\n            // Subscribe to the base class event.\n            s.ShapeChanged += HandleShapeChanged;\n        }\n\n        // ...Other methods to draw, resize, etc.\n\n        private void HandleShapeChanged(object sender, ShapeEventArgs e)\n        {\n            Shape s = (Shape)sender;\n\n            // Diagnostic message for demonstration purposes.\n            Console.WriteLine(&quot;Received event. Shape area is now {0}&quot;, e.NewArea);\n\n            // Redraw the shape here.\n            s.Draw();\n        }\n    }\n\n    class Test\n    {\n\n        static void Main(string[] args)\n        {\n            //Create the event publishers and subscriber\n            Circle c1 = new Circle(54);\n            Rectangle r1 = new Rectangle(12, 9);\n            ShapeContainer sc = new ShapeContainer();\n\n            // Add the shapes to the container.\n            sc.AddShape(c1);\n            sc.AddShape(r1);\n\n            // Cause some events to be raised.\n            c1.Update(57);\n            r1.Update(7, 7);\n\n            // Keep the console window open in debug mode.\n            System.Console.WriteLine(&quot;Press any key to exit.&quot;);\n            System.Console.ReadKey();\n        }\n    }\n}\n/* Output:\n        Received event. Shape area is now 10201.86\n        Drawing a circle\n        Received event. Shape area is now 49\n        Drawing a rectangle\n */\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">Events</a><br> <a href=\"../delegates/index\" data-linktype=\"relative-path\">Delegates</a><br> <a href=\"../classes-and-structs/access-modifiers\" data-linktype=\"relative-path\">Access Modifiers</a><br> <a href=\"https://msdn.microsoft.com/library/dacysss4.aspx\" data-linktype=\"external\">Creating Event Handlers in Windows Forms</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"2d20556a-0aad-46fc-845e-f85d86ea617a\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"24\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/events/how-to-raise-base-class-events-in-derived-classes.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/events/how-to-raise-base-class-events-in-derived-classes.md\">\r\n<meta name=\"document_id\" content=\"239388e2-5ead-fc60-fb4c-22167b396bf5\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc1.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"How to: Raise Base Class Events in Derived Classes (C# Programming Guide) | Microsoft Docs","ms.assetid":"2d20556a-0aad-46fc-845e-f85d86ea617a","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":24,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["events [C#], in derived classes"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/events/how-to-raise-base-class-events-in-derived-classes.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/programming-guide/events/how-to-raise-base-class-events-in-derived-classes.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/events/how-to-raise-base-class-events-in-derived-classes.md","document_id":"239388e2-5ead-fc60-fb4c-22167b396bf5","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/events/how-to-raise-base-class-events-in-derived-classes","toc_asset_id":"articles/csharp/programming-guide/events/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Raise Base Class Events in Derived Classes (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":723,"_op_rawTitle":"<h1 id=\"how-to-raise-base-class-events-in-derived-classes-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/events/how-to-raise-base-class-events-in-derived-classes.md\" sourcestartlinenumber=\"36\" sourceendlinenumber=\"36\">How to: Raise Base Class Events in Derived Classes (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/programming-guide/events/how-to-raise-base-class-events-in-derived-classes","fileRelativePath":"articles/csharp/programming-guide/events/how-to-raise-base-class-events-in-derived-classes.html"},"themesRelativePathToOutputRoot":"_themes/"}