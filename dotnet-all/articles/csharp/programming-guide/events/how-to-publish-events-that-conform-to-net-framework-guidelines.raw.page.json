{"content":"<div><div class=\"content\">\n<p>The following procedure demonstrates how to add events that follow the standard .NET Framework pattern to your classes and structs. All events in the .NET Framework class library are based on the <a class=\"xref\" href=\"../../../../api/system.eventhandler\" data-linktype=\"relative-path\">EventHandler</a> delegate, which is defined as follows:  </p>\n<pre class=\"loading\"><code>public delegate void EventHandler(object sender, EventArgs e);  \n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> The .NET Framework 2.0 introduces a generic version of this delegate, <a class=\"xref\" href=\"../../../../api/system.eventhandler-1\" data-linktype=\"relative-path\">EventHandler&lt;TEventArgs&gt;</a>. The following examples show how to use both versions.  </p>\n</div>\n<p> Although events in classes that you define can be based on any valid delegate type, even delegates that return a value, it is generally recommended that you base your events on the .NET Framework pattern by using <a class=\"xref\" href=\"../../../../api/system.eventhandler\" data-linktype=\"relative-path\">EventHandler</a>, as shown in the following example.  </p>\n<h3 id=\"to-publish-events-based-on-the-eventhandler-pattern\">To publish events based on the EventHandler pattern</h3>\n<ol>\n<li>(Skip this step and go to Step 3a if you do not have to send custom data with your event.) Declare the class for your custom data at a scope that is visible to both your publisher and subscriber classes. Then add the required members to hold your custom event data. In this example, a simple string is returned.  </li>\n</ol>\n<p><codecontentplaceholder>1</codecontentplaceholder>  </p>\n<ol>\n<li><p>(Skip this step if you are using the generic version of <a class=\"xref\" href=\"../../../../api/system.eventhandler-1\" data-linktype=\"relative-path\">EventHandler&lt;TEventArgs&gt;</a> .) Declare a delegate in your publishing class. Give it a name that ends with <em>EventHandler</em>. The second parameter specifies your custom EventArgs type.  </p>\n<pre class=\"loading\"><code>public delegate void CustomEventHandler(object sender, CustomEventArgs a);  \n</code></pre></li>\n<li><p>Declare the event in your publishing class by using one of the following steps.  </p>\n<ol>\n<li><p>If you have no custom EventArgs class, your Event type will be the non-generic EventHandler delegate. You do not have to declare the delegate because it is already declared in the <a class=\"xref\" href=\"../../../../api/system\" data-linktype=\"relative-path\">System</a> namespace that is included when you create your C# project. Add the following code to your publisher class.  </p>\n<pre class=\"loading\"><code>public event EventHandler RaiseCustomEvent;  \n</code></pre></li>\n<li><p>If you are using the non-generic version of <a class=\"xref\" href=\"../../../../api/system.eventhandler\" data-linktype=\"relative-path\">EventHandler</a> and you have a custom class derived from <a class=\"xref\" href=\"../../../../api/system.eventargs\" data-linktype=\"relative-path\">EventArgs</a>, declare your event inside your publishing class and use your delegate from step 2 as the type.  </p>\n<pre class=\"loading\"><code>public event CustomEventHandler RaiseCustomEvent;  \n</code></pre></li>\n<li><p>If you are using the generic version, you do not need a custom delegate. Instead, in your publishing class, you specify your event type as <code>EventHandler&lt;CustomEventArgs&gt;</code>, substituting the name of your own class between the angle brackets.  </p>\n<pre class=\"loading\"><code>public event EventHandler&lt;CustomEventArgs&gt; RaiseCustomEvent;  \n</code></pre></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"example\">Example</h2>\n<p> The following example demonstrates the previous steps by using a custom EventArgs class and <a class=\"xref\" href=\"../../../../api/system.eventhandler-1\" data-linktype=\"relative-path\">EventHandler&lt;TEventArgs&gt;</a> as the event type.  </p>\n<pre><code class=\"lang-cs\" name=\"csProgGuideEvents#2\">namespace DotNetEvents\n{\n    using System;\n    using System.Collections.Generic;\n\n    // Define a class to hold custom event info\n    public class CustomEventArgs : EventArgs\n    {\n        public CustomEventArgs(string s)\n        {\n            message = s;\n        }\n        private string message;\n\n        public string Message\n        {\n            get { return message; }\n            set { message = value; }\n        }\n    }\n\n    // Class that publishes an event\n    class Publisher\n    {\n\n        // Declare the event using EventHandler&lt;T&gt;\n        public event EventHandler&lt;CustomEventArgs&gt; RaiseCustomEvent;\n\n        public void DoSomething()\n        {\n            // Write some code that does something useful here\n            // then raise the event. You can also raise an event\n            // before you execute a block of code.\n            OnRaiseCustomEvent(new CustomEventArgs(&quot;Did something&quot;));\n\n        }\n\n        // Wrap event invocations inside a protected virtual method\n        // to allow derived classes to override the event invocation behavior\n        protected virtual void OnRaiseCustomEvent(CustomEventArgs e)\n        {\n            // Make a temporary copy of the event to avoid possibility of\n            // a race condition if the last subscriber unsubscribes\n            // immediately after the null check and before the event is raised.\n            EventHandler&lt;CustomEventArgs&gt; handler = RaiseCustomEvent;\n\n            // Event will be null if there are no subscribers\n            if (handler != null)\n            {\n                // Format the string to send inside the CustomEventArgs parameter\n                e.Message += String.Format(&quot; at {0}&quot;, DateTime.Now.ToString());\n\n                // Use the () operator to raise the event.\n                handler(this, e);\n            }\n        }\n    }\n\n    //Class that subscribes to an event\n    class Subscriber\n    {\n        private string id;\n        public Subscriber(string ID, Publisher pub)\n        {\n            id = ID;\n            // Subscribe to the event using C# 2.0 syntax\n            pub.RaiseCustomEvent += HandleCustomEvent;\n        }\n\n        // Define what actions to take when the event is raised.\n        void HandleCustomEvent(object sender, CustomEventArgs e)\n        {\n            Console.WriteLine(id + &quot; received this message: {0}&quot;, e.Message);\n        }\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Publisher pub = new Publisher();\n            Subscriber sub1 = new Subscriber(&quot;sub1&quot;, pub);\n            Subscriber sub2 = new Subscriber(&quot;sub2&quot;, pub);\n\n            // Call the method that raises the event.\n            pub.DoSomething();\n\n            // Keep the console window open\n            Console.WriteLine(&quot;Press Enter to close this window.&quot;);\n            Console.ReadLine();\n\n        }\n    }\n}\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../api/system.delegate\" data-linktype=\"relative-path\">Delegate</a><br> <a href=\"../index\" data-linktype=\"relative-path\">C# Programming Guide</a><br> <a href=\"index\" data-linktype=\"relative-path\">Events</a><br> <a href=\"../delegates/index\" data-linktype=\"relative-path\">Delegates</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc.json\">\r\n<meta name=\"ms.assetid\" content=\"9310ae16-8627-44a2-b08c-05e5976202b1\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"31\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-21 01:42 AM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/events/how-to-publish-events-that-conform-to-net-framework-guidelines.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/csharp/programming-guide/events/how-to-publish-events-that-conform-to-net-framework-guidelines.md\">\r\n<meta name=\"document_id\" content=\"756503b6-3b7a-b3c4-ae2d-4d677236cc7d\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"How to: Publish Events that Conform to .NET Framework Guidelines (C# Programming Guide) | Microsoft Docs","ms.assetid":"9310ae16-8627-44a2-b08c-05e5976202b1","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":31,"ms.topic":"article","dev_langs":["csharp"],"helpviewer_keywords":["events [C#], implementation guidelines"],"ms.date":"2015-07-20","ms.technology":["devlang-csharp"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-21 01:42 AM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/21/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/programming-guide/events/how-to-publish-events-that-conform-to-net-framework-guidelines.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/csharp/programming-guide/events/how-to-publish-events-that-conform-to-net-framework-guidelines.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/programming-guide/events/how-to-publish-events-that-conform-to-net-framework-guidelines.md","document_id":"756503b6-3b7a-b3c4-ae2d-4d677236cc7d","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/events/how-to-publish-events-that-conform-to-net-framework-guidelines","toc_asset_id":"articles/csharp/programming-guide/events/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Publish Events that Conform to .NET Framework Guidelines (C# Programming Guide)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":711,"_op_rawTitle":"<h1 id=\"how-to-publish-events-that-conform-to-net-framework-guidelines-c-programming-guide\" sourcefile=\"docs/csharp/programming-guide/events/how-to-publish-events-that-conform-to-net-framework-guidelines.md\" sourcestartlinenumber=\"36\" sourceendlinenumber=\"36\">How to: Publish Events that Conform to .NET Framework Guidelines (C# Programming Guide)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/programming-guide/events/how-to-publish-events-that-conform-to-net-framework-guidelines","fileRelativePath":"articles/csharp/programming-guide/events/how-to-publish-events-that-conform-to-net-framework-guidelines.html"},"themesRelativePathToOutputRoot":"_themes/"}