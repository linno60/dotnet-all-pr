{"content":"<div><div class=\"content\">\n<p>An <strong><em>enum type</em></strong> is a distinct value type with a set of named constants. You define enums when you need to define a type that can have a set of discrete values. They use one of the integral value types as their underlying storage. They provide semantic meaning to the discrete values.</p>\n<p>The following example declares and uses an <code>enum</code> type named <code>Color</code> with three constant values, <code>Red</code>, <code>Green</code>, and <code>Blue</code>.</p>\n<pre><code class=\"lang-csharp\" name=\"EnumExample\">using System;\nenum Color\n{\n    Red,\n    Green,\n    Blue\n}\nclass EnumExample\n{\n    static void PrintColor(Color color) \n    {\n        switch (color) \n        {\n            case Color.Red:\n                Console.WriteLine(&quot;Red&quot;);\n                break;\n            case Color.Green:\n                Console.WriteLine(&quot;Green&quot;);\n                break;\n            case Color.Blue:\n                Console.WriteLine(&quot;Blue&quot;);\n                break;\n            default:\n                Console.WriteLine(&quot;Unknown color&quot;);\n                break;\n        }\n    }\n    static void Main() \n    {\n        Color c = Color.Red;\n        PrintColor(c);\n        PrintColor(Color.Blue);\n    }\n}\n</code></pre><p>Each <code>enum</code> type has a corresponding integral type called the <strong><em>underlying type</em></strong> of the <code>enum</code> type. An <code>enum</code> type that does not explicitly declare an underlying type has an underlying type of <code>int</code>. An <code>enum</code> typeâ€™s storage format and range of possible values are determined by its underlying type. The set of values that an <code>enum</code> type can take on is not limited by its <code>enum</code> members. In particular, any value of the underlying type of an <code>enum</code> can be cast to the <code>enum</code> type and is a distinct valid value of that <code>enum</code> type.</p>\n<p>The following example declares an <code>enum</code> type named <code>Alignment</code> with an underlying type of <code>sbyte</code>.</p>\n<pre><code class=\"lang-csharp\" name=\"EnumStorage\">enum Alignment: sbyte\n{\n    Left = -1,\n    Center = 0,\n    Right = 1\n}\n</code></pre><p>As shown by the previous example, an <code>enum</code> member declaration can include a constant expression that specifies the value of the member. The constant value for each <code>enum</code> member must be in the range of the underlying type of the <code>enum</code>. When an <code>enum</code> member declaration does not explicitly specify a value, the member is given the value zero (if it is the first member in the <code>enum</code> type) or the value of the textually preceding <code>enum</code> member plus one.</p>\n<p><code>Enum</code> values can be converted to integral values and vice versa using type casts. For example:</p>\n<pre><code class=\"lang-csharp\" name=\"EnumStorage\">int i = (int)Color.Blue;    // int i = 2;\nColor c = (Color)2;         // Color c = Color.Blue;  \n</code></pre><p>The default value of any <code>enum</code> type is the integral value zero converted to the <code>enum</code> type. In cases where variables are automatically initialized to a default value, this is the value given to variables of <code>enum</code> types. In order for the default value of an <code>enum</code> type to be easily available, the literal <code>0</code> implicitly converts to any <code>enum</code> type. Thus, the following is permitted.</p>\n<pre><code class=\"lang-csharp\" name=\"EnumZero\">Color c = 0;\n</code></pre><div class=\"step-by-step\"><p><a href=\"interfaces\" data-linktype=\"relative-path\">Previous</a>\n<a href=\"delegates\" data-linktype=\"relative-path\">Next</a></p>\n</div>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"csharp\">\r\n<meta name=\"ms.assetid\" content=\"7faba1cc-6ea9-4a19-adb9-0335e4b132e5\">\r\n<meta name=\"description\" content=\"Learn about enums, discrete named constants in C#\">\r\n<meta name=\"keywords\" content=\".NET, csharp\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"08/10/2016\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-21 01:42 AM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/tour-of-csharp/enums.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/csharp/tour-of-csharp/enums.md\">\r\n<meta name=\"document_id\" content=\"f8a0bb79-c1d4-304e-43ab-e015d313b4b8\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"C# Enums | Microsoft Docs","ms.devlang":"csharp","ms.assetid":"7faba1cc-6ea9-4a19-adb9-0335e4b132e5","description":"Learn about enums, discrete named constants in C#","keywords":".NET, csharp","ms.topic":"article","ms.date":"08/10/2016","ms.technology":"devlang-csharp","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Bill Wagner","author_email":"wiwagn@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Tour of csharp (#893)","commit_sha":"487f9831526f124ddd60dece21852da8c086b520","commit_date":"2016-08-23 10:20:56 -0400"}],"updated_at":"2017-03-21 01:42 AM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/21/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/tour-of-csharp/enums.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/csharp/tour-of-csharp/enums.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/tour-of-csharp/enums.md","document_id":"f8a0bb79-c1d4-304e-43ab-e015d313b4b8","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/tour-of-csharp/enums","toc_asset_id":"articles/csharp/tour-of-csharp/toc.json","toc_rel":"toc.json","_op_ogTitle":"C# Enums","_op_displayDate":"2016-8-10","_op_displayDate_source":"2016-08-10T00:00:00Z","_op_wordCount":431,"_op_rawTitle":"<h1 id=\"enums\" sourcefile=\"docs/csharp/tour-of-csharp/enums.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Enums</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/tour-of-csharp/enums","fileRelativePath":"articles/csharp/tour-of-csharp/enums.html"},"themesRelativePathToOutputRoot":"_themes/"}