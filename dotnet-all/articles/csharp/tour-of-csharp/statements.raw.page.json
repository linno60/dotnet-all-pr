{"content":"<div><div class=\"content\">\n<p>The actions of a program are expressed using <em>statements</em>. C# supports several different kinds of statements, a number of which are defined in terms of embedded statements.</p>\n<p>A <em>block</em> permits multiple statements to be written in contexts where a single statement is allowed. A block consists of a list of statements written between the delimiters <code>{</code> and <code>}</code>.</p>\n<p><em>Declaration statements</em> are used to declare local variables and constants.</p>\n<p><em>Expression statements</em> are used to evaluate expressions. Expressions that can be used as statements include method invocations, object allocations using the <code>new</code> operator, assignments using <code>=</code> and the compound assignment operators, increment and decrement operations using the <code>++</code> and <code>--</code> operators and <code>await</code> expressions.</p>\n<p><em>Selection statements</em> are used to select one of a number of possible statements for execution based on the value of some expression. In this group are the <code>if</code> and <code>switch</code> statements.</p>\n<p><em>Iteration statements</em> are used to execute repeatedly an embedded statement. In this group are the <code>while</code>, <code>do</code>, <code>for</code>, and <code>foreach</code> statements.</p>\n<p><em>Jump statements</em> are used to transfer control. In this group are the <code>break</code>, <code>continue</code>, <code>goto</code>, <code>throw</code>, <code>return</code>, and <code>yield</code> statements.</p>\n<p>The <code>try</code>...<code>catch</code> statement is used to catch exceptions that occur during execution of a block, and the <code>try</code>...<code>finally</code> statement is used to specify finalization code that is always executed, whether an exception occurred or not.</p>\n<p>The <code>checked</code> and <code>unchecked</code> statements are used to control the overflow-checking context for integral-type arithmetic operations and conversions.</p>\n<p>The <code>lock</code> statement is used to obtain the mutual-exclusion lock for a given object, execute a statement, and then release the lock.</p>\n<p>The <code>using</code> statement is used to obtain a resource, execute a statement, and then dispose of that resource.</p>\n<p>The following lists the kinds of statements that can be used, and provides an example for each.</p>\n<ul>\n<li><p>Local variable declaration:</p>\n<pre><code class=\"lang-csharp\" name=\"Declarations\">static void Declarations(string[] args)\n{\n    int a;\n    int b = 2, c = 3;\n    a = 1;\n    Console.WriteLine(a + b + c);\n}\n</code></pre></li>\n<li><p>Local constant declaration:</p>\n<pre><code class=\"lang-csharp\" name=\"ConstantDeclarations\">static void ConstantDeclarations(string[] args)\n{\n    const float pi = 3.1415927f;\n    const int r = 25;\n    Console.WriteLine(pi * r * r);\n}\n</code></pre></li>\n<li><p>Expression statement:</p>\n<pre><code class=\"lang-csharp\" name=\"Expressions\">static void Expressions(string[] args)\n{\n    int i;\n    i = 123;                // Expression statement\n    Console.WriteLine(i);   // Expression statement\n    i++;                    // Expression statement\n    Console.WriteLine(i);   // Expression statement\n}\n</code></pre></li>\n<li><p><code>if</code> statement:</p>\n<pre><code class=\"lang-csharp\" name=\"IfStatement\">static void IfStatement(string[] args)\n{\n    if (args.Length == 0)\n    {\n        Console.WriteLine(&quot;No arguments&quot;);\n    }\n    else \n    {\n        Console.WriteLine(&quot;One or more arguments&quot;);\n    }\n}\n</code></pre></li>\n<li><p><code>switch</code> statement:</p>\n<pre><code class=\"lang-csharp\" name=\"SwitchStatement\">static void SwitchStatement(string[] args)\n{\n    int n = args.Length;\n    switch (n) \n    {\n        case 0:\n            Console.WriteLine(&quot;No arguments&quot;);\n            break;\n        case 1:\n            Console.WriteLine(&quot;One argument&quot;);\n            break;\n        default:\n        Console.WriteLine($&quot;{n} arguments&quot;);\n        break;\n    }\n}\n</code></pre></li>\n<li><p><code>while</code> statement:</p>\n<pre><code class=\"lang-csharp\" name=\"WhileStatement\">static void WhileStatement(string[] args)\n{\n    int i = 0;\n    while (i &lt; args.Length) \n    {\n        Console.WriteLine(args[i]);\n        i++;\n    }\n}\n</code></pre></li>\n<li><p><code>do</code> statement:</p>\n<pre><code class=\"lang-csharp\" name=\"DoStatement\">static void DoStatement(string[] args)\n{\n    string s;\n    do \n    {\n        s = Console.ReadLine();\n        if (string.IsNullOrEmpty(s)) \n            Console.WriteLine(s);\n    } while (!string.IsNullOrEmpty(s));\n}\n</code></pre></li>\n<li><p><code>for</code> statement:</p>\n<pre><code class=\"lang-csharp\" name=\"ForStatement\">static void ForStatement(string[] args)\n{\n    for (int i = 0; i &lt; args.Length; i++) \n    {\n        Console.WriteLine(args[i]);\n    }\n}\n</code></pre></li>\n<li><p><code>foreach</code> statement:</p>\n<pre><code class=\"lang-csharp\" name=\"ForEachStatement\">static void ForEachStatement(string[] args)\n{\n    foreach (string s in args) \n    {\n        Console.WriteLine(s);\n    }\n}\n</code></pre></li>\n<li><p><code>break</code> statement:</p>\n<pre><code class=\"lang-csharp\" name=\"BreakStatement\">static void BreakStatement(string[] args)\n{\n    while (true) \n    {\n        string s = Console.ReadLine();\n        if (string.IsNullOrEmpty(s)) \n            break;\n        Console.WriteLine(s);\n    }\n}\n</code></pre></li>\n<li><p><code>continue</code> statement:</p>\n<pre><code class=\"lang-csharp\" name=\"ContinueStatement\">static void ContinueStatement(string[] args)\n{\n    for (int i = 0; i &lt; args.Length; i++) \n    {\n        if (args[i].StartsWith(&quot;/&quot;)) \n            continue;\n        Console.WriteLine(args[i]);\n    }\n}\n</code></pre></li>\n<li><p><code>goto</code> statement:</p>\n<pre><code class=\"lang-csharp\" name=\"GotoStatement\">static void GoToStatement(string[] args)\n{\n    int i = 0;\n    goto check;\n    loop:\n    Console.WriteLine(args[i++]);\n    check:\n    if (i &lt; args.Length) \n        goto loop;\n}\n</code></pre></li>\n<li><p><code>return</code> statement:</p>\n<pre><code class=\"lang-csharp\" name=\"ReturnStatement\">static int Add(int a, int b) \n{\n    return a + b;\n}\nstatic void ReturnStatement(string[] args)\n{\n   Console.WriteLine(Add(1, 2));\n   return;\n}\n</code></pre></li>\n<li><p><code>yield</code> statement:</p>\n<pre><code class=\"lang-csharp\" name=\"YieldStatement\">static IEnumerable&lt;int&gt; Range(int from, int to) \n{\n    for (int i = from; i &lt; to; i++) \n    {\n        yield return i;\n    }\n    yield break;\n}\nstatic void YieldStatement(string[] args)\n{\n    foreach (int i in Range(-10,10)) \n    {\n        Console.WriteLine(i);\n    }\n}\n</code></pre></li>\n<li><p><code>throw</code> statements and <code>try</code> statements:</p>\n<pre><code class=\"lang-csharp\" name=\"TryThrow\">static double Divide(double x, double y) \n{\n    if (y == 0) \n        throw new DivideByZeroException();\n    return x / y;\n}\nstatic void TryCatch(string[] args) \n{\n    try \n    {\n        if (args.Length != 2) \n        {\n            throw new InvalidOperationException(&quot;Two numbers required&quot;);\n        }\n        double x = double.Parse(args[0]);\n        double y = double.Parse(args[1]);\n        Console.WriteLine(Divide(x, y));\n    }\n    catch (InvalidOperationException e) \n    {\n        Console.WriteLine(e.Message);\n    }\n    finally \n    {\n        Console.WriteLine(&quot;Good bye!&quot;);\n    }\n}\n</code></pre></li>\n<li><p><code>checked</code> and <code>unchecked</code> statements:</p>\n<pre><code class=\"lang-csharp\" name=\"CheckedUncheckedStatement\">static void CheckedUnchecked(string[] args) \n{\n    int x = int.MaxValue;\n    unchecked \n    {\n        Console.WriteLine(x + 1);  // Overflow\n    }\n    checked \n    {\n        Console.WriteLine(x + 1);  // Exception\n    }     \n}\n</code></pre></li>\n<li><p><code>lock</code> statement:</p>\n<pre><code class=\"lang-csharp\" name=\"LockStatement\">class Account\n{\n    decimal balance;\n    private readonly object sync = new object();\n    public void Withdraw(decimal amount) \n    {\n        lock (sync) \n        {\n            if (amount &gt; balance) \n            {\n                throw new Exception(\n                    &quot;Insufficient funds&quot;);\n            }\n            balance -= amount;\n        }\n    }\n}\n</code></pre></li>\n<li><p><code>using</code> statement:</p>\n<pre><code class=\"lang-csharp\" name=\"UsingStatement\">static void UsingStatement(string[] args) \n{\n    using (TextWriter w = File.CreateText(&quot;test.txt&quot;)) \n    {\n        w.WriteLine(&quot;Line one&quot;);\n        w.WriteLine(&quot;Line two&quot;);\n        w.WriteLine(&quot;Line three&quot;);\n    }\n}\n</code></pre></li>\n</ul>\n<div class=\"step-by-step\"><p><a href=\"expressions\" data-linktype=\"relative-path\">Previous</a>\n<a href=\"classes-and-objects\" data-linktype=\"relative-path\">Next</a></p>\n</div>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"csharp\">\r\n<meta name=\"ms.assetid\" content=\"5409c379-5622-4fae-88b5-1654276ea8d4\">\r\n<meta name=\"description\" content=\"You create the actions of a C# program using statements\">\r\n<meta name=\"keywords\" content=\".NET, csharp, statements, syntax\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"11/06/2016\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/d55bd0671c05c738e8df78f95552b8dce6af03a4/docs/csharp/tour-of-csharp/statements.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/tour-of-csharp/statements.md\">\r\n<meta name=\"document_id\" content=\"5f2f7383-1992-d146-862e-2f613819f18e\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"C# Statements | Microsoft Docs","ms.devlang":"csharp","ms.assetid":"5409c379-5622-4fae-88b5-1654276ea8d4","description":"You create the actions of a C# program using statements","keywords":".NET, csharp, statements, syntax","ms.topic":"article","ms.date":"11/06/2016","ms.technology":"devlang-csharp","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Bill Wagner","author_email":"wiwagn@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Fix date format to be mm/dd/yyyy (#1360)","commit_sha":"d55bd0671c05c738e8df78f95552b8dce6af03a4","commit_date":"2016-12-27 12:57:27 -0500"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Bill Wagner","author_email":"wiwagn@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":"respond to remaining feedback on 1077","commit_sha":"b1015d35ff7ea0a8d83dc4700b5faf2c08d0ba0d","commit_date":"2016-11-07 15:29:41 -0800"},{"author_name":"Bader Nasser","author_email":"badersur@users.noreply.github.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":"Change the format","commit_sha":"38a918711759f4256a5e8728d1fc62286538dc70","commit_date":"2016-11-07 15:29:41 -0800"},{"author_name":"Bill Wagner","author_email":"wiwagn@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Tour of csharp (#893)","commit_sha":"487f9831526f124ddd60dece21852da8c086b520","commit_date":"2016-08-23 10:20:56 -0400"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"},{"profile_url":"https://github.com/badersur","display_name":"Bader Nasser","id":"1686391"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/d55bd0671c05c738e8df78f95552b8dce6af03a4/docs/csharp/tour-of-csharp/statements.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/tour-of-csharp/statements.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/tour-of-csharp/statements.md","document_id":"5f2f7383-1992-d146-862e-2f613819f18e","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/tour-of-csharp/statements","toc_asset_id":"articles/csharp/tour-of-csharp/toc.json","toc_rel":"toc.json","_op_ogTitle":"C# Statements","_op_displayDate":"2016-11-6","_op_displayDate_source":"2016-11-06T00:00:00Z","_op_wordCount":790,"_op_rawTitle":"<h1 id=\"statements\" sourcefile=\"docs/csharp/tour-of-csharp/statements.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Statements</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/tour-of-csharp/statements","fileRelativePath":"articles/csharp/tour-of-csharp/statements.html"},"themesRelativePathToOutputRoot":"_themes/"}