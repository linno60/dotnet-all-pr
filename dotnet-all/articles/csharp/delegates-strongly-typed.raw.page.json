{"content":"<div><div class=\"content\">\n<p><a href=\"delegate-class\" data-linktype=\"relative-path\">Previous</a></p>\n<p>In the previous article, you saw that you create specific delegate\ntypes using the <code>delegate</code> keyword. </p>\n<p>The abstract Delegate class provide the infrastructure for loose coupling\nand invocation. Concrete Delegate types become much more useful by embracing\nand enforcing type safety for the methods that are added to the invocation\nlist for a delegate object. When you use the <code>delegate</code> keyword and define\na concrete delegate type, the compiler generates those methods.</p>\n<p>In practice, this would lead to creating new delegate types\nwhenever you need a different method signature. This work could get tedious\nafter a time. Every new feature requires new delegate types.</p>\n<p>Thankfully, this isn&#39;t necessary. The .NET Core framework contains several\ntypes that you can reuse whenever you need delegate types. These are\n<a href=\"programming-guide/generics/index\" data-linktype=\"relative-path\">generic</a> definitions so you can declare customizations\nwhen you need new method declarations. </p>\n<p>The first of these types is the <a class=\"xref\" href=\"../../api/system.action\" data-linktype=\"relative-path\">Action</a> type, and several variations:</p>\n<pre class=\"loading\"><code class=\"lang-cs\">public delegate void Action();\npublic delegate void Action&lt;in T&gt;(T arg);\npublic delegate void Action&lt;in T1, in T2&gt;(T1 arg1, T2 arg2);\n// Other variations removed for brevity.\n</code></pre><p>The <code>in</code> modifier on the generic type argument is covered in the article\non covariance.</p>\n<p>There are variations of the <code>Action</code> delegate that contain up to\n16 arguments such as <a class=\"xref\" href=\"../../api/system.action-16\" data-linktype=\"relative-path\">Action&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16&gt;</a> .\nIt&#39;s important that these definitions use different generic arguments for each of the\ndelegate arguments: That gives you maximum flexibility. The method arguments need not be, but may be, the same type.</p>\n<p>Use one of the <code>Action</code> types for any delegate type that has a void return type.</p>\n<p>The framework also includes several generic delegate types that you can use for\ndelegate types that return values:</p>\n<pre class=\"loading\"><code class=\"lang-cs\">public delegate TResult Func&lt;out TResult&gt;();\npublic delegate TResult Func&lt;in T1, out TResult&gt;(T1 arg);\npublic delegate TResult Func&lt;in T1, in T2, out TResult&gt;(T1 arg1, T2 arg2);\n// Other variations removed for brevity\n</code></pre><p>The <code>out</code> modifier on the result generic type argument is covered in the\narticle on covariance.</p>\n<p>There are variations of the <code>Func</code> delegate with up to\n16 input arguments such as <a class=\"xref\" href=\"../../api/system.func-17\" data-linktype=\"relative-path\">Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,T9,T10,T11,T12,T13,T14,T15,T16,TResult&gt;</a> .\nThe type of the result is always the last type parameter in all the <code>Func</code>\ndeclarations, by convention.</p>\n<p>Use one of the <code>Func</code> types for any delegate type that returns a value.</p>\n<p>There&#39;s also a specialized\n<a class=\"xref\" href=\"../../api/system.predicate-1\" data-linktype=\"relative-path\">Predicate&lt;T&gt;</a> \ntype for a delegate that returns a test on a single value:</p>\n<pre class=\"loading\"><code class=\"lang-cs\">public delegate bool Predicate&lt;in T&gt;(T obj);\n</code></pre><p>You may notice that for any <code>Predicate</code> type, a structurally equivalent <code>Func</code>\ntype exists For example:</p>\n<pre class=\"loading\"><code class=\"lang-cs\">Func&lt;string, bool&gt; TestForString;\nPredicate&lt;string&gt; AnotherTestForString;\n</code></pre><p>You might think these two types are equivalent. They are not.\nThese two variables cannot be used interchangeably. A variable of one type cannot\nbe assigned the other type. The C# type system uses the names of the defined types,\nnot the structure.</p>\n<p>All these delegate type definitions in the .NET Core Library should mean that\nyou do not need to define a new delegate type for any new feature you create\nthat requires delegates. These generic definitions should provide all the\ndelegate types you need under most situations. You can simply instantiate\none of these types with the required type parameters. In the case of algorithms\nthat can be made generic, these delegates can be used as generic types. </p>\n<p>This should save time, and minimize the number of new types that you need\nto create in order to work with delegates.</p>\n<p>In the next article, you&#39;ll see several common patterns for working\nwith delegates in practice.</p>\n<p><a href=\"delegates-patterns\" data-linktype=\"relative-path\">Next</a></p>\n</div></div>","outputRootRelativePath":"../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-all/api/toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"csharp\">\r\n<meta name=\"ms.assetid\" content=\"564a683d-352b-4e57-8bac-b466529daf6b\">\r\n<meta name=\"description\" content=\"Strongly Typed Delegates\">\r\n<meta name=\"keywords\" content=\".NET, .NET Core\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"06/20/2016\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/delegates-strongly-typed.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/delegates-strongly-typed.md\">\r\n<meta name=\"document_id\" content=\"645aa6a4-641e-919b-77b5-3acee3878e3d\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Strongly Typed Delegates | Microsoft Docs","ms.devlang":"csharp","ms.assetid":"564a683d-352b-4e57-8bac-b466529daf6b","description":"Strongly Typed Delegates","keywords":".NET, .NET Core","ms.topic":"article","ms.date":"06/20/2016","ms.technology":"devlang-csharp","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Bill Wagner","author_email":"wiwagn@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"remove 'wrench' articles that have been ported (#1298)","commit_sha":"61844748621d9536134e3efcb4ac866c3e7bdc45","commit_date":"2016-12-02 08:23:44 -0500"},{"author_name":"Maira Wenzel","author_email":"mairaw@users.noreply.github.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Broken link fixes and other issues (#724)","commit_sha":"cfe65fcba1b3fdc09ffcac704a760d8ce29ea60b","commit_date":"2016-06-30 23:16:40 -0700"},{"author_name":"brady gaster","author_email":"bradyg@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"repaired api links","commit_sha":"c695f3019daaa241c77a4d276672bec25657cd80","commit_date":"2016-06-26 09:29:21 -0700"},{"author_name":"Bill Wagner","author_email":"wiwagn@microsoft.com","committer_name":"Rich Lander","comitter_email":"rlander@microsoft.com","message":"Promote csharp from languages (#644)","commit_sha":"2d44b7e04c0fe2ca136ba6dfa9fc3a4368365ec8","commit_date":"2016-06-26 08:30:56 -0700"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"},{"profile_url":"https://github.com/bradygaster","display_name":"brady gaster","id":"486363"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/delegates-strongly-typed.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/delegates-strongly-typed.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/delegates-strongly-typed.md","document_id":"645aa6a4-641e-919b-77b5-3acee3878e3d","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/delegates-strongly-typed","toc_asset_id":"articles/toc.json","toc_rel":"../toc.json","_op_ogTitle":"Strongly Typed Delegates","_op_displayDate":"2016-6-20","_op_displayDate_source":"2016-06-20T00:00:00Z","_op_wordCount":568,"_op_rawTitle":"<h1 id=\"strongly-typed-delegates\" sourcefile=\"docs/csharp/delegates-strongly-typed.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Strongly Typed Delegates</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/csharp/delegates-strongly-typed","fileRelativePath":"articles/csharp/delegates-strongly-typed.html"},"themesRelativePathToOutputRoot":"_themes/"}