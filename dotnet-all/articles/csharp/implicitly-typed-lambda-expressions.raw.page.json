{"content":"<div><div class=\"content\">\n<p>I&#39;m not using <code>var</code> to declare this expression tree. You can&#39;t use\nan implicitly typed variable declaration to declare a lambda expression.\nIt creates a circular logic problem for the compiler. The <code>var</code> declaration\ntells the compiler to figure out the type of the variable from the type\nof expression on the right hand side of the assignment operator. A lambda\nexpression does not have a compile time type, but is convertible to any\nmatching delegate or expression type. When you assign a lambda expression\nto a variable of a delegate or expression type, you tell the compiler to\ntry and convert the lambda expression into an expression or delegate that\nmatches the signature of the &#39;assigned to&#39; variable. The compiler must\ntry to make the thing on the right hand side of the assignment match\nthe type on the left hand side of the assignment. </p>\n<p>Both sides of the assignment can&#39;t be telling the compiler to look at the\nobject on the other side of the assignment operator and see if my type\nmatches.</p>\n<p>You can get even more details on why the C# language specifies that behavior\nby reading <a href=\"http://download.microsoft.com/download/5/4/B/54B83DFE-D7AA-4155-9687-B0CF58FF65D7/type-inference.pdf\" data-linktype=\"external\">this article</a> (PDF Download)</p>\n</div></div>","outputRootRelativePath":"../../","pageMetadata":"<meta name=\"author\" content=\"BillWagner\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.devlang\" content=\"csharp\">\r\n<meta name=\"ms.assetid\" content=\"a3851da9-e018-4389-9922-233db7d0f841\">\r\n<meta name=\"description\" content=\"Implicitly typed lambda expressions\">\r\n<meta name=\"keywords\" content=\".NET, .NET Core\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"06/20/2016\">\r\n<meta name=\"ms.technology\" content=\"devlang-csharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/implicitly-typed-lambda-expressions.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/implicitly-typed-lambda-expressions.md\">\r\n<meta name=\"document_id\" content=\"dfe45b25-af80-5352-e715-80f85311b34d\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../toc2.json\">\r\n","rawMetadata":{"author":"BillWagner","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"Implicitly typed lambda expressions | Microsoft Docs","ms.devlang":"csharp","ms.assetid":"a3851da9-e018-4389-9922-233db7d0f841","description":"Implicitly typed lambda expressions","keywords":".NET, .NET Core","ms.topic":"article","ms.date":"06/20/2016","ms.technology":"devlang-csharp","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Bill Wagner","author_email":"wiwagn@microsoft.com","committer_name":"Rich Lander","comitter_email":"rlander@microsoft.com","message":"Promote csharp from languages (#644)","commit_sha":"2d44b7e04c0fe2ca136ba6dfa9fc3a4368365ec8","commit_date":"2016-06-26 08:30:56 -0700"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},"contributors":[{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/csharp/implicitly-typed-lambda-expressions.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/csharp/implicitly-typed-lambda-expressions.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/csharp/implicitly-typed-lambda-expressions.md","document_id":"dfe45b25-af80-5352-e715-80f85311b34d","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/implicitly-typed-lambda-expressions","toc_asset_id":"articles/toc.json","toc_rel":"../toc.json","_op_ogTitle":"Implicitly typed lambda expressions","_op_displayDate":"2016-6-20","_op_displayDate_source":"2016-06-20T00:00:00Z","_op_wordCount":195,"_op_rawTitle":"<h1 id=\"implicitly-typed-lambda-expressions\" sourcefile=\"docs/csharp/implicitly-typed-lambda-expressions.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Implicitly typed lambda expressions</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/csharp/implicitly-typed-lambda-expressions","fileRelativePath":"articles/csharp/implicitly-typed-lambda-expressions.html"},"themesRelativePathToOutputRoot":"_themes/"}