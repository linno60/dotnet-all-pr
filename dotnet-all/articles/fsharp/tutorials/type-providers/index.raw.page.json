{"content":"<div><div class=\"content\">\n<div class=\"NOTE\"><h5>Note</h5><p>This guide was written from F# 3.0 and will be updated.  See <a href=\"http://fsharp.github.io/FSharp.Data/\" data-linktype=\"external\">FSharp.Data</a> for up-to-date, cross-platform type providers.</p>\n</div>\n<p>An F# type provider is a component that provides types, properties, and methods for use in your program. Type providers are a significant part of F# 3.0 support for information-rich programming. The key to information-rich programming is to eliminate barriers to working with diverse information sources found on the Internet and in modern enterprise environments. One significant barrier to including a source of information into a program is the need to represent that information as types, properties, and methods for use in a programming language environment. Writing these types manually is very time-consuming and difficult to maintain. A common alternative is to use a code generator which adds files to your project; however, the conventional types of code generation do not integrate well into exploratory modes of programming supported by F# because the generated code must be replaced each time a service reference is adjusted.</p>\n<p>The types provided by F# type providers are usually based on external information sources. For example, an F# type provider for SQL will provide the types, properties, and methods you need to work directly with the tables of any SQL database you have access to. Similarly, a type provider for WSDL web services will provide the types, properties, and methods you need to work directly with any WSDL web service.</p>\n<p>The set of types, properties, and methods provided by an F# type provider can depend on parameters given in program code. For example, a type provider can provide different types depending on a connection string or a service URL. In this way, the information space available by means of a connection string or URL is directly integrated into your program. A type provider can also ensure that groups of types are only expanded on demand; that is, they are expanded if the types are actually referenced by your program. This allows for the direct, on-demand integration of large-scale information spaces such as online data markets in a strongly typed way.</p>\n<p>F# contains several built-in type providers for commonly used Internet and enterprise data services. These type providers give simple and regular access to SQL relational databases and network-based OData and WSDL services and support the use of F# LINQ queries against these data sources.</p>\n<p>Where necessary, you can create your own custom type providers, or reference type providers that have been created by others. For example, assume your organization has a data service providing a large and growing number of named data sets, each with its own stable data schema. You may choose to create a type provider that reads the schemas and presents the latest available data sets to the programmer in a strongly typed way.</p>\n<h2 id=\"related-topics\">Related Topics</h2>\n<table>\n<thead>\n<tr>\n<th>Title</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"accessing-a-sql-database\" data-linktype=\"relative-path\">Walkthrough: Accessing a SQL Database by Using Type Providers</a></td>\n<td>Explains how to use the SqlDataConnection type provider to access the tables and stored procedures of a SQL database based on a connection string for a direct connection to a database. The access uses a LINQ to SQL mapping.</td>\n</tr>\n<tr>\n<td><a href=\"accessing-a-sql-database-entities\" data-linktype=\"relative-path\">Walkthrough: Accessing a SQL Database by Using Type Providers and Entities</a></td>\n<td>Explains how to use the SqlEntityConnection type provider to access the tables and stored procedures of a SQL database, based on a connection string for a direct connection to a database. The access uses a LINQ to Entities mapping. This method works with any database but the example demonstrated is SQL Server.</td>\n</tr>\n<tr>\n<td><a href=\"accessing-an-odata-service\" data-linktype=\"relative-path\">Walkthrough: Accessing an OData Service by Using Type Providers</a></td>\n<td>Explains how to use the ODataService type provider to access an OData service in a strongly typed way based on a service URL.</td>\n</tr>\n<tr>\n<td><a href=\"accessing-a-web-service\" data-linktype=\"relative-path\">Walkthrough: Accessing a Web Service by Using Type Providers</a></td>\n<td>Explains how to use the WsdlService type provider to access a WSDL web service in a strongly typed way based on a service URL.</td>\n</tr>\n<tr>\n<td><a href=\"generating-fsharp-types-from-dbml\" data-linktype=\"relative-path\">Walkthrough: Generating F&#35; Types from a DBML File</a></td>\n<td>Explains how to use the DbmlFile type provider to access the tables and stored procedures of a SQLdatabase, based on a DBML file giving a Linq to SQL database schema specification.</td>\n</tr>\n<tr>\n<td><a href=\"generating-fsharp-types-from-edmx\" data-linktype=\"relative-path\">Walkthrough: Generating F&#35; Types from an EDMX Schema File</a></td>\n<td>Explains how to use the EdmxFile type provider to access the tables and stored procedures of a SQL database, based on an EDMX file giving an Entity Framework schema specification.</td>\n</tr>\n<tr>\n<td><a href=\"creating-a-type-provider\" data-linktype=\"relative-path\">Tutorial: Creating a Type Provider</a></td>\n<td>Provides information on writing your own custom type providers.</td>\n</tr>\n<tr>\n<td><a href=\"type-provider-security\" data-linktype=\"relative-path\">Type Provider Security</a></td>\n<td>Provides information about security considerations when developing type providers.</td>\n</tr>\n<tr>\n<td><a href=\"troubleshooting-type-providers\" data-linktype=\"relative-path\">Troubleshooting Type Providers</a></td>\n<td>Provides information about common problems that can arise when working with type providers and includes suggestions for solutions.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"see-also\">See Also</h2>\n<p><a href=\"../../language-reference/index\" data-linktype=\"relative-path\">F# Language Reference</a></p>\n<p><a href=\"../../index\" data-linktype=\"relative-path\">Visual F#</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"cartermp\">\r\n<meta name=\"ms.author\" content=\"phcart\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"ms.devlang\" content=\"fsharp\">\r\n<meta name=\"ms.assetid\" content=\"25697ef6-465e-4248-9de5-1d199d4a8b59\">\r\n<meta name=\"description\" content=\"Type Providers\">\r\n<meta name=\"keywords\" content=\"visual f#, f#, functional programming\">\r\n<meta name=\"ms.topic\" content=\"language-reference\">\r\n<meta name=\"ms.date\" content=\"05/16/2016\">\r\n<meta name=\"ms.technology\" content=\"devlang-fsharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/fsharp/tutorials/type-providers/index.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/fsharp/tutorials/type-providers/index.md\">\r\n<meta name=\"document_id\" content=\"5b558e7b-8e8d-79f3-902d-acef30de56cf\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../../toc2.json\">\r\n","rawMetadata":{"author":"cartermp","ms.author":"phcart","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","uhfHeaderId":"MSDocsHeader-DotNet","title":"Type Providers | Microsoft Docs","ms.devlang":"fsharp","ms.assetid":"25697ef6-465e-4248-9de5-1d199d4a8b59","description":"Type Providers","keywords":"visual f#, f#, functional programming","ms.topic":"language-reference","ms.date":"05/16/2016","ms.technology":"devlang-fsharp","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"F# Docs: Update intro, move files, rename language reference for better URLS (#902)","commit_sha":"70a10b9c3e21291c96d927d13f8710d9e0738d4c","commit_date":"2016-08-13 11:22:39 -0700"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Add Visual F# Conceptual Content (#900)","commit_sha":"c27bed7dbad6b24c55734fcab0333bd3a1de85d6","commit_date":"2016-08-12 17:06:05 -0700"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/cartermp","display_name":"Phillip Carter","id":"6309070"},"contributors":[{"profile_url":"https://github.com/cartermp","display_name":"Phillip Carter"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/fsharp/tutorials/type-providers/index.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/fsharp/tutorials/type-providers/index.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/fsharp/tutorials/type-providers/index.md","document_id":"5b558e7b-8e8d-79f3-902d-acef30de56cf","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/fsharp/tutorials/type-providers/index","toc_asset_id":"articles/toc.json","toc_rel":"../../../toc.json","_op_ogTitle":"Type Providers","_op_displayDate":"2016-5-16","_op_displayDate_source":"2016-05-16T00:00:00Z","_op_wordCount":773,"_op_rawTitle":"<h1 id=\"type-providers\" sourcefile=\"docs/fsharp/tutorials/type-providers/index.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Type Providers</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/fsharp/tutorials/type-providers/index","fileRelativePath":"articles/fsharp/tutorials/type-providers/index.html"},"themesRelativePathToOutputRoot":"_themes/"}