{"content":"<div><div class=\"content\">\n<div class=\"NOTE\"><h5>Note</h5><p>This guide was written for F# 3.0 and will be updated.  See <a href=\"http://fsharp.github.io/FSharp.Data/\" data-linktype=\"external\">FSharp.Data</a> for up-to-date, cross-platform type providers.</p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p>The API reference links will take you to MSDN.  The docs.microsoft.com API reference is not complete.</p>\n</div>\n<p>OData, meaning Open Data Protocol, is a protocol for transferring data over the Internet. Many data providers expose access to their data by publishing an OData web service. You can access data from any OData source in F# 3.0 using data types that are automatically generated by the <code>ODataService</code> type provider. For more information about OData, see <a href=\"https://msdn.microsoft.com/library/da3380cc-f6da-4c6c-bdb2-bb86afa59d62\" data-linktype=\"external\">https://msdn.microsoft.com/library/da3380cc-f6da-4c6c-bdb2-bb86afa59d62</a>.</p>\n<p>This walkthrough shows you how to use the F# ODataService type provider to generate client types for an OData service and query data feeds that the service provides.</p>\n<p>This walkthrough illustrates the following tasks, which you should perform in this order for the walkthrough to succeed:</p>\n<ul>\n<li><p>Configuring a client project for an OData service\n<br></p>\n</li>\n<li><p>Accessing OData types\n<br></p>\n</li>\n<li><p>Querying an OData service\n<br></p>\n</li>\n<li><p>Verifying the OData requests\n<br></p>\n</li>\n</ul>\n<h2 id=\"configuring-a-client-project-for-an-odata-service\">Configuring a client project for an OData service</h2>\n<p>In this step, you set up a project to use an OData type provider.</p>\n<h4 id=\"to-configure-a-client-project-for-an-odata-service\">To configure a client project for an OData service</h4>\n<ul>\n<li><p>Open an F# Console Application project, and then add a reference to the <code>System.Data.Services.Client</code> Framework assembly.\n<br></p>\n</li>\n<li><p>Under <code>Extensions</code>, add a reference to the <code>FSharp.Data.TypeProviders</code> assembly.\n<br></p>\n</li>\n</ul>\n<h2 id=\"accessing-odata-types\">Accessing OData types</h2>\n<p>In this step, you create a type provider that provides access to the types and data for an OData service.</p>\n<h4 id=\"to-access-odata-types\">To access OData types</h4>\n<ul>\n<li>In the Code Editor, open an F# source file, and enter the following code.\n<br></li>\n</ul>\n<pre class=\"loading\"><code class=\"lang-fsharp\">open Microsoft.FSharp.Data.TypeProviders\n\n\ntype Northwind = ODataService&lt;&quot;http://services.odata.org/Northwind/Northwind.svc/&quot;&gt;\n\nlet db = Northwind.GetDataContext()\nlet fullContext = Northwind.ServiceTypes.NorthwindEntities()\n</code></pre><p>In this example, you have invoked the F# type provider and instructed it to create a set of types that are based on the OData URI that you specified. Two objects are available that contain information about the data; one is a simplified data context, <code>db</code> in the example. This object contains only the data types that are associated with the database, which include types for tables or feeds. The other object, <code>fullContext</code> in this example, is an instance of <code>System.Data.Linq.DataContext</code> and contains many additional properties, methods, and events.\n<br></p>\n<h2 id=\"querying-an-odata-service\">Querying an OData service</h2>\n<p>In this step, you use F# query expressions to query the OData service.</p>\n<h4 id=\"to-query-an-odata-service\">To query an OData service</h4>\n<ol>\n<li><p>Now that you&#39;ve set up the type provider, you can query an OData service.\n<br>  OData supports only a subset of the available query operations. The following operations and their corresponding keywords are supported:\n<br></p>\n<ul>\n<li><p>projection (<code>select</code>)\n<br></p>\n</li>\n<li><p>filtering (<code>where</code>, by using string and date operations)\n<br></p>\n</li>\n<li><p>paging (<code>skip</code>, <code>take</code>)\n<br></p>\n</li>\n<li><p>ordering (<code>orderBy</code>, <code>thenBy</code>)\n<br></p>\n</li>\n<li><p><code>AddQueryOption</code> and <code>Expand</code>, which are OData-specific operations\n<br></p>\n</li>\n</ul>\n<p>For more information, see <a href=\"https://msdn.microsoft.com/library/ee622463.aspx\" data-linktype=\"external\">LINQ Considerations &#40;WCF Data Services&#41;</a>.\n<br>  If you want all of the entries in a feed or table, use the simplest form of the query expression, as in the following code:\n<br></p>\n</li>\n</ol>\n<pre class=\"loading\"><code class=\"lang-fsharp\">query {\n  for customer in db.Customers do\n  select customer\n} |&gt; Seq.iter (fun customer -&gt;\n                  printfn &quot;ID: %s\\nCompany: %s&quot; customer.CustomerID customer.CompanyName\n                  printfn &quot;Contact: %s\\nAddress: %s&quot; customer.ContactName customer.Address\n                  printfn &quot;         %s, %s %s&quot; customer.City customer.Region customer.PostalCode\n                  printfn &quot;%s\\n&quot; customer.Phone)\n</code></pre><ol>\n<li>Specify the fields or columns that you want by using a tuple after the select keyword.\n<br></li>\n</ol>\n<pre class=\"loading\"><code class=\"lang-fsharp\">  query { \n    for cat in db.Categories do\n    select (cat.CategoryID, cat.CategoryName, cat.Description)\n  } |&gt; Seq.iter (fun (id, name, description) -&gt;\n                    printfn &quot;ID: %d\\nCategory: %s\\nDescription: %s\\n&quot; id name description)\n</code></pre><ol>\n<li>Specify conditions by using a <code>where</code> clause.\n<br></li>\n</ol>\n<pre class=\"loading\"><code class=\"lang-fsharp\">query {\n  for employee in db.Employees do\n  where (employee.EmployeeID = 9)\n  select employee\n} |&gt; Seq.iter (fun employee -&gt;\n                  printfn &quot;Name: %s ID: %d&quot; (employee.FirstName + &quot; &quot; + employee.LastName) (employee.EmployeeID))\n</code></pre><ol>\n<li>Specify a substring condition to the query by using the <code>System.String.Contains(System.String)</code> method. The following query returns all products that have &quot;Chef&quot; in their names. Also notice the use of <code>System.Nullable&lt;&#39;T&gt;.GetValueOrDefault()</code>. The <code>UnitPrice</code> is a nullable value, so you must either get the value by using the <code>Value</code> property, or you must call <code>System.Nullable&lt;&#39;T&gt;.GetValueOrDefault()</code>.\n<br></li>\n</ol>\n<pre class=\"loading\"><code class=\"lang-fsharp\">query { \n  for product in db.Products do\n  where (product.ProductName.Contains(&quot;Chef&quot;))\n  select product\n} |&gt; Seq.iter (fun product -&gt;\n                  printfn &quot;ID: %d Product: %s&quot; product.ProductID product.ProductName\n                  printfn &quot;Price: %M\\n&quot; (product.UnitPrice.GetValueOrDefault()))\n</code></pre><ol>\n<li>Use the <code>System.String.EndsWith(System.String)</code> method to specify that a string ends with a certain substring.\n<br></li>\n</ol>\n<pre class=\"loading\"><code class=\"lang-fsharp\">query {\n  for product in db.Products do\n  where (product.ProductName.EndsWith(&quot;u&quot;))\n  select product\n} |&gt; Seq.iter (fun product -&gt;\n                  printfn &quot;ID: %d Product: %s&quot; product.ProductID product.ProductName\n                  printfn &quot;Price: %M\\n&quot; (product.UnitPrice.GetValueOrDefault()))\n</code></pre><ol>\n<li>Combine conditions in a where clause by using the <code>&amp;&amp;</code> operator.\n<br></li>\n</ol>\n<pre class=\"loading\"><code class=\"lang-fsharp\">// Open this module to use the nullable operators ?&gt; and ?&lt;.\nopen Microsoft.FSharp.Linq.NullableOperators\n\nlet salesIn1997 = query { \n  for sales in db.Category_Sales_for_1997 do\n  where (sales.CategorySales ?&gt; 50000.00M &amp;&amp; sales.CategorySales ?&lt; 60000.0M)\n  select sales }\n\nsalesIn1997\n|&gt; Seq.iter (fun sales -&gt;\n                printfn &quot;Category: %s Sales: %M&quot; sales.CategoryName (sales.CategorySales.GetValueOrDefault()))\n</code></pre><p>The operators <code>?&gt;</code> and <code>?&lt;</code> are nullable operators. You can use a full set of nullable equality and comparison operators. For more information, see <a href=\"https://msdn.microsoft.com/visualfsharpdocs/conceptual/linq.nullableoperators-module-%5bfsharp%5d\" data-linktype=\"external\">Linq.NullableOperators Module</a>.\n<br></p>\n<ol>\n<li>Use the <code>sortBy</code> query operator to specify ordering, and use <code>thenBy</code> to specify another level of ordering. Notice also the use of a tuple in the select part of the query. Therefore, the query has a tuple as an element type.\n<br></li>\n</ol>\n<pre class=\"loading\"><code class=\"lang-fsharp\">printfn &quot;Freight for some orders: &quot;\n\nquery { \n  for order in db.Orders do\n  sortBy (order.OrderDate.Value)\n  thenBy (order.OrderID)\n  select (order.OrderDate, order.OrderID, order.Customer.CompanyName)\n} |&gt; Seq.iter (fun (orderDate, orderID, company) -&gt;\n                  printfn &quot;OrderDate: %s&quot; (orderDate.GetValueOrDefault().ToString())\n                  printfn &quot;OrderID: %d Company: %s\\n&quot; orderID company)\n</code></pre><ol>\n<li>Ignore a specified number of records by using the skip operator, and use the take operator to specify a number of records to return. In this way, you can implement paging on data feeds.\n<br></li>\n</ol>\n<pre class=\"loading\"><code class=\"lang-fsharp\">printfn &quot;Get the first page of 2 employees.&quot;\n\nquery { \n  for employee in db.Employees do\n  take 2\n  select employee\n} |&gt; Seq.iter (fun employee -&gt;\n                  printfn &quot;Name: %s ID: %d&quot; (employee.FirstName + &quot; &quot; + employee.LastName) (employee.EmployeeID)) \n\nprintfn &quot;Get the next 2 employees.&quot;\n\nquery { \n  for employee in db.Employees do\n  skip 2\n  take 2\n  select employee\n} |&gt; Seq.iter (fun employee -&gt;\n                  printfn &quot;Name: %s ID: %d&quot; (employee.FirstName + &quot; &quot; + employee.LastName) (employee.EmployeeID))\n</code></pre><h2 id=\"verifying-the-odata-request\">Verifying the OData request</h2>\n<p>Every OData query is translated into a specific OData request URI. You can verify that URI, perhaps for debugging purposes, by adding an event handler to the <code>SendingRequest</code> event on the full data context object.</p>\n<h4 id=\"to-verify-the-odata-request\">To verify the OData request</h4>\n<ul>\n<li>To verify the OData request URI, use the following code:\n<br></li>\n</ul>\n<pre class=\"loading\"><code class=\"lang-fsharp\">// The DataContext property returns the full data context.\ndb.DataContext.SendingRequest.Add (fun eventArgs -&gt; printfn &quot;Requesting %A&quot; eventArgs.Request.RequestUri)\n</code></pre><p>The output of the previous code is:\n<br><code>requesting http://services.odata.org/Northwind/Northwind.svc/Orders()?$orderby=ShippedDate&amp;amp;$select=OrderID,ShippedDate</code></p>\n<h2 id=\"see-also\">See Also</h2>\n<p><a href=\"../../language-reference/query-expressions\" data-linktype=\"relative-path\">Query Expressions</a></p>\n<p><a href=\"https://msdn.microsoft.com/library/ee622463.aspx\" data-linktype=\"external\">LINQ Considerations (WCF Data Services)</a></p>\n<p><a href=\"https://msdn.microsoft.com/visualfsharpdocs/conceptual/odataservice-type-provider-%5bfsharp%5d\" data-linktype=\"external\">ODataService Type Provider (F#)</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"cartermp\">\r\n<meta name=\"ms.author\" content=\"phcart\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"ms.devlang\" content=\"fsharp\">\r\n<meta name=\"ms.assetid\" content=\"0adae84c-b0fa-455f-994b-274ecdc6df30\">\r\n<meta name=\"description\" content=\"Walkthrough: Accessing an OData Service by Using Type Providers (F#)\">\r\n<meta name=\"keywords\" content=\"visual f#, f#, functional programming\">\r\n<meta name=\"ms.topic\" content=\"language-reference\">\r\n<meta name=\"ms.date\" content=\"05/16/2016\">\r\n<meta name=\"ms.technology\" content=\"devlang-fsharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/fsharp/tutorials/type-providers/accessing-an-odata-service.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/fsharp/tutorials/type-providers/accessing-an-odata-service.md\">\r\n<meta name=\"document_id\" content=\"2f04fdd3-bf63-4373-2e57-ba1fc59c3b26\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../../toc2.json\">\r\n","rawMetadata":{"author":"cartermp","ms.author":"phcart","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","uhfHeaderId":"MSDocsHeader-DotNet","title":"Walkthrough: Accessing an OData Service by Using Type Providers (F#) | Microsoft Docs","ms.devlang":"fsharp","ms.assetid":"0adae84c-b0fa-455f-994b-274ecdc6df30","description":"Walkthrough: Accessing an OData Service by Using Type Providers (F#)","keywords":"visual f#, f#, functional programming","ms.topic":"language-reference","ms.date":"05/16/2016","ms.technology":"devlang-fsharp","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"fixed absolute and msdn links (#1001)","commit_sha":"de0dab146fc811e895dc32f98f877db5e757f82b","commit_date":"2016-09-06 10:59:39 -0700"},{"author_name":"Petr Onderka","author_email":"gsvick@gmail.com","committer_name":"Maira Wenzel","comitter_email":"mairaw@microsoft.com","message":"Improve titles of some F# articles (#1003)","commit_sha":"d18cfd736f1dbd61ab9e209de4aaa878a88162cd","commit_date":"2016-09-03 11:22:59 -0700"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"F# Docs: Update intro, move files, rename language reference for better URLS (#902)","commit_sha":"70a10b9c3e21291c96d927d13f8710d9e0738d4c","commit_date":"2016-08-13 11:22:39 -0700"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Add Visual F# Conceptual Content (#900)","commit_sha":"c27bed7dbad6b24c55734fcab0333bd3a1de85d6","commit_date":"2016-08-12 17:06:05 -0700"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/cartermp","display_name":"Phillip Carter","id":"6309070"},"contributors":[{"profile_url":"https://github.com/cartermp","display_name":"Phillip Carter"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"},{"profile_url":"https://github.com/svick","display_name":"Petr Onderka","id":"287848"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/fsharp/tutorials/type-providers/accessing-an-odata-service.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/fsharp/tutorials/type-providers/accessing-an-odata-service.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/fsharp/tutorials/type-providers/accessing-an-odata-service.md","document_id":"2f04fdd3-bf63-4373-2e57-ba1fc59c3b26","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/fsharp/tutorials/type-providers/accessing-an-odata-service","toc_asset_id":"articles/toc.json","toc_rel":"../../../toc.json","_op_ogTitle":"Walkthrough: Accessing an OData Service by Using Type Providers (F#)","_op_displayDate":"2016-5-16","_op_displayDate_source":"2016-05-16T00:00:00Z","_op_wordCount":1080,"_op_rawTitle":"<h1 id=\"walkthrough-accessing-an-odata-service-by-using-type-providers\" sourcefile=\"docs/fsharp/tutorials/type-providers/accessing-an-odata-service.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Walkthrough: Accessing an OData Service by Using Type Providers</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/fsharp/tutorials/type-providers/accessing-an-odata-service","fileRelativePath":"articles/fsharp/tutorials/type-providers/accessing-an-odata-service.html"},"themesRelativePathToOutputRoot":"_themes/"}