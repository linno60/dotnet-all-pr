{"content":"<div><div class=\"content\">\n<p>You can write F# in <a href=\"https://code.visualstudio.com\" data-linktype=\"external\">Visual Studio Code</a> with the <a href=\"https://marketplace.visualstudio.com/items?itemName=Ionide.Ionide-fsharp\" data-linktype=\"external\">Ionide plugin</a>, to get a great cross-platform, lightweight IDE experience with IntelliSense and basic code refactorings.  Visit <a href=\"http://ionide.io\" data-linktype=\"external\">Ionide.io</a> to learn more about the plugin suite.</p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>F# 4.0 or higher must be installed on your machine to use Ionide.</p>\n<p>You must also have <a href=\"https://git-scm.com/download\" data-linktype=\"external\">git installed</a> and available on your PATH to make use of project templates in Ionide.  You can verify that it is installed correctly by typing <code>git</code> at a command prompt.and pressing <strong>Enter</strong>.</p>\n<h3 id=\"windows\">Windows</h3>\n<p>If you&#39;re on Windows, you have two options for installing F#.</p>\n<p>If you&#39;ve already installed Visual Studio and don&#39;t have F#, you can <a href=\"getting-started-visual-studio#installing-f\" data-linktype=\"relative-path\">Install the Visual F# Tools</a>.  This will install all the necessary components to write, compile, and execute F# code.</p>\n<p>If you prefer not to install Visual Studio, use the following instructions:</p>\n<ol>\n<li><p>Install <a href=\"https://www.microsoft.com/en-US/download/details.aspx?id=30653\" data-linktype=\"external\">.NET Framework 4.5 or higher</a> if you&#39;re running Windows 7.  If you&#39;re using Windows 8 or higher, you do not need to do this.</p>\n</li>\n<li><p>Install the Windows SDK for your OS:</p>\n<ul>\n<li><a href=\"https://dev.windows.com/en-US/downloads/windows-10-sdk\" data-linktype=\"external\">Windows 10 SDK</a></li>\n<li><a href=\"http://msdn.microsoft.com/windows/desktop/bg162891\" data-linktype=\"external\">Windows 8.1 SDK</a></li>\n<li><a href=\"http://msdn.microsoft.com/windows/hardware/hh852363.aspx\" data-linktype=\"external\">Windows 8 SDK</a></li>\n<li><a href=\"http://www.microsoft.com/download/details.aspx?id=8279\" data-linktype=\"external\">Windows 7 SDK</a></li>\n</ul>\n</li>\n<li><p>Install the <a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=48159\" data-linktype=\"external\">Microsoft Build Tools 2015</a>.  You may also need to install <a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=40760\" data-linktype=\"external\">Microsoft Build Tools 2013</a>.</p>\n</li>\n<li><p>Install the <a href=\"https://www.microsoft.com/en-us/download/details.aspx?id=48179\" data-linktype=\"external\">Visual F# Tools</a>.</p>\n</li>\n</ol>\n<p>On 64-bit Windows, the compiler and tools are located here:</p>\n<pre class=\"loading\"><code>C:\\Program Files (x86)\\Microsoft SDKs\\F#\\4.0\\Framework\\v4.0\\fsc.exe\nC:\\Program Files (x86)\\Microsoft SDKs\\F#\\4.0\\Framework\\v4.0\\fsi.exe\nC:\\Program Files (x86)\\Microsoft SDKs\\F#\\4.0\\Framework\\v4.0\\fsiAnyCpu.exe\n</code></pre><p>On 32-bit Windows, the compiler tools are located here:</p>\n<pre class=\"loading\"><code>C:\\Program Files\\Microsoft SDKs\\F#\\4.0\\Framework\\v4.0\\fsc.exe\nC:\\Program Files\\Microsoft SDKs\\F#\\4.0\\Framework\\v4.0\\fsi.exe\nC:\\Program Files\\Microsoft SDKs\\F#\\4.0\\Framework\\v4.0\\fsiAnyCpu.exe\n</code></pre><p>Ionide automatically detects the compiler and tools, but if it doesn&#39;t for some reason (for example, the Visual F# Tools were installed to a different directory), you can manually add the containing folder (<code>...\\Microsoft SDKs\\F#\\4.0</code>) to your PATH.</p>\n<h3 id=\"macos\">macOS</h3>\n<p>On macOS, Ionide uses <a href=\"http://www.mono-project.com\" data-linktype=\"external\">Mono</a>.  The easiest way to install Mono on macOS is via Homebrew.  Simply type the following into your terminal:</p>\n<pre class=\"loading\"><code>brew install mono\n</code></pre><h3 id=\"linux\">Linux</h3>\n<p>On Linux, Ionide also uses <a href=\"http://www.mono-project.com\" data-linktype=\"external\">Mono</a>.  If you&#39;re on Debian or Ubuntu, you can use the following:</p>\n<pre class=\"loading\"><code>sudo apt-get update\nsudo apt-get install mono-complete fsharp\n</code></pre><h2 id=\"installing-visual-studio-code-and-the-ionide-plugin\">Installing Visual Studio Code and the Ionide plugin</h2>\n<p>You can install Visual Studio Code from the <a href=\"https://code.visualstudio.com\" data-linktype=\"external\">code.visualstudio.com</a> website.  After that, there are two ways to find the Ionide plugin:</p>\n<ol>\n<li><p>Use the Command Palette (Ctrl+P on Windows, ⌘+P on macOS, Ctrl+Shift+P on Linux) and type the following:</p>\n<pre class=\"loading\"><code> &gt;ext install Ionide\n</code></pre></li>\n<li><p>Click the Extensions icon and search for &quot;Ionide&quot;:</p>\n<p> <img src=\"media/getting-started-vscode/vscode-ext.png\" alt=\"\" data-linktype=\"relative-path\"></p>\n</li>\n</ol>\n<p>The only plugin required for F# support in Visual Studio Code is <a href=\"https://marketplace.visualstudio.com/items?itemName=Ionide.Ionide-fsharp\" data-linktype=\"external\">Ionide-fsharp</a>.  However, you can also install <a href=\"https://marketplace.visualstudio.com/items?itemName=Ionide.Ionide-FAKE\" data-linktype=\"external\">Ionide-FAKE</a> and to get <a href=\"http://fsharp.github.io/FAKE/\" data-linktype=\"external\">FAKE</a> support and <a href=\"https://marketplace.visualstudio.com/items?itemName=Ionide.Ionide-Paket\" data-linktype=\"external\">Ionide-Paket</a> to get <a href=\"https://fsprojects.github.io/Paket/\" data-linktype=\"external\">Paket</a> support.  FAKE and Paket are additonal F# community tools for building projects and managing dependencies, respectively.</p>\n<h2 id=\"creating-your-first-project-with-ionide\">Creating your first project with Ionide</h2>\n<p>To create a new F# project, open Visual Studio Code in a new folder (you can name it whatever you like).</p>\n<p><img src=\"media/getting-started-vscode/vscode-open-dir.png\" alt=\"\" data-linktype=\"relative-path\"></p>\n<p>Next, open the Command Palette (Ctrl+P on Windows, ⌘+P on macOS, Ctrl+Shift+P on Linux) and type the following:</p>\n<pre class=\"loading\"><code>&gt;f#: New Project\n</code></pre><p>This is powered by the <a href=\"https://github.com/fsharp-editing/Forge\" data-linktype=\"external\">FORGE</a> project.  You should see something like this:</p>\n<p><img src=\"media/getting-started-vscode/vscode-new-proj.png\" alt=\"\" data-linktype=\"relative-path\"></p>\n<div class=\"NOTE\"><h5>Note</h5><p>If you don&#39;t see the above, try refreshing templates by running the following command in the Command Palette: <code>&gt;F#: Refresh Project Templates</code>.</p>\n</div>\n<p>Select &quot;F#: New Project&quot; by hitting <strong>Enter</strong>, which will take you to this step:</p>\n<p><img src=\"media/getting-started-vscode/vscode-proj-type.png\" alt=\"\" data-linktype=\"relative-path\"></p>\n<p>This will select a template for a specific type of project.  There are quite a few options here, such as an <a href=\"http://fslab.org\" data-linktype=\"external\">FsLab</a> template for Data Science or <a href=\"https://suave.io\" data-linktype=\"external\">Suave</a> template for Web Programming.  This article uses the <code>classlib</code> template, so highlight that and hit <strong>Enter</strong>.  You will then reach the following step:</p>\n<p><img src=\"media/getting-started-vscode/vscode-new-dir.png\" alt=\"\" data-linktype=\"relative-path\"></p>\n<p>This lets you create the project in a different directory, if you like.  Leave it blank for now.  It will create the project in the current directory.  Once you press <strong>Enter</strong>, you will reach the following step:</p>\n<p><img src=\"media/getting-started-vscode/vscode-proj-name.png\" alt=\"\" data-linktype=\"relative-path\"></p>\n<p>This lets you name your project.  F# uses <a href=\"http://c2.com/cgi/wiki?PascalCase\" data-linktype=\"external\">Pascal case</a> for project names.  This article uses <code>ClassLibrarySample</code> as the name.  Once you&#39;ve entered the name you want for your project, hit <strong>Enter</strong>.</p>\n<p>If you followed the previous step steps, you should get the Visual Studio Code Workspace on the left-hand side to look something like this:</p>\n<p><img src=\"media/getting-started-vscode/vscode-new-proj-explorer.png\" alt=\"\" data-linktype=\"relative-path\"></p>\n<p>This template generates a few things you&#39;ll find useful:</p>\n<ol>\n<li>The F# project itself, underneath the <code>ClassLibraryDemo</code> folder.</li>\n<li>The correct directory structure for adding packages via <a href=\"http://fsprojects.github.io/Paket/\" data-linktype=\"external\"><code>Paket</code></a>.</li>\n<li>A cross-platform build script with <a href=\"http://fsharp.github.io/FAKE/\" data-linktype=\"external\"><code>FAKE</code></a>.</li>\n<li>The <code>paket.exe</code> executable which can fetch packages and resolve dependencies for you.</li>\n<li>A <code>.gitignore</code> file if you wish to add this project to Git-based source control.</li>\n</ol>\n<h2 id=\"writing-some-code\">Writing some code</h2>\n<p>Open the <em>ClassLibraryDemo</em> folder.  You should see the following files:</p>\n<ol>\n<li><code>ClassLibraryDemo.fs</code>, an F# implementation file with a class defined.</li>\n<li><code>CassLibraryDemo.fsproj</code>, an F# project file used to build this project.</li>\n<li><code>Script.fsx</code>, an F# script file which loads the source file.</li>\n<li><code>paket.references</code>, a Paket file which specifies the project dependencies.</li>\n</ol>\n<p>Open <code>Script.fsx</code>, and add the following code at the end of it:</p>\n<pre><code class=\"lang-fsharp\" name=\"ToPigLatin\">let toPigLatin (word: string) =\n    let isVowel (c: char) =\n        match c with\n        | &#39;a&#39; | &#39;e&#39; | &#39;i&#39; |&#39;o&#39; |&#39;u&#39;\n        | &#39;A&#39; | &#39;E&#39; | &#39;I&#39; | &#39;O&#39; | &#39;U&#39; -&gt; true\n        |_ -&gt; false\n    \n    if isVowel word.[0] then\n        word + &quot;yay&quot;\n    else\n        word.[1..] + string(word.[0]) + &quot;ay&quot;\n</code></pre><p>This function converts a word to a form of <a href=\"https://en.wikipedia.org/wiki/Pig_Latin\" data-linktype=\"external\">Pig Latin</a>.  The next step is to evaluate it using F# Interactive (FSI).</p>\n<p>Highlight the entire function (it should be 11 lines long).  Once it is highlighted, hold the <strong>Alt</strong> key and hit <strong>Enter</strong>.  You&#39;ll notice a window pop up below, and it should show something like this:</p>\n<p><img src=\"media/getting-started-vscode/vscode-fsi.png\" alt=\"\" data-linktype=\"relative-path\"></p>\n<p>This did three things:</p>\n<ol>\n<li>It started the FSI process.</li>\n<li>It sent the code you highlighted over the FSI process.</li>\n<li>The FSI process evaluated the code you sent over.</li>\n</ol>\n<p>Because what you sent over was a <a href=\"../../language-reference/functions/index\" data-linktype=\"relative-path\">function</a>, you can now call that function with FSI!  In the interactive window, type the following:</p>\n<pre class=\"loading\"><code class=\"lang-fsharp\">toPigLatin &quot;banana&quot;;;\n</code></pre><p>You should see the following result:</p>\n<pre class=\"loading\"><code class=\"lang-fsharp\">val it : string = &quot;ananabay&quot;\n</code></pre><p>Now, let&#39;s try with a vowel as the first letter. Enter the following:</p>\n<pre class=\"loading\"><code class=\"lang-fsharp\">toPigLatin &quot;apple&quot;;;\n</code></pre><p>You should see the following result:</p>\n<pre class=\"loading\"><code class=\"lang-fsharp\">val it : string = &quot;appleyay&quot;\n</code></pre><p>The function appears to be working as expected.  Congratulations, you just wrote your first F# function in Visual Studio Code and evaluated it with FSI!</p>\n<div class=\"NOTE\"><h5>Note</h5><p>As you may have noticed, the lines in FSI are terminated with <code>;;</code>.  This is because FSI allows you to enter multiple lines.  The <code>;;</code> at the end lets FSI know when the code is finished.</p>\n</div>\n<h2 id=\"explaining-the-code\">Explaining the code</h2>\n<p>If you&#39;re not sure about what the code is actually doing, here&#39;s a step-by-step.</p>\n<p>As you can see, <code>toPigLatin</code> is a function which takes a word as its input and converts it to a Pig-Latin representation of that word.  The rules for this are as follows:</p>\n<p>If the first character in a word starts with a vowel, add &quot;yay&quot; to the end of the word.  If it doesn&#39;t start with a vowel, move that first character to the end of the word and add &quot;ay&quot; to it.</p>\n<p>You may have noticed the following in FSI:</p>\n<pre class=\"loading\"><code>val toPigLatin : word:string -&gt; string\n</code></pre><p>This states that <code>toPigLatin</code> is a function which takes in a <code>string</code> as input (called <code>word</code>), and returns another <code>string</code>.  This is known as the <a href=\"https://fsharpforfunandprofit.com/posts/function-signatures/\" data-linktype=\"external\">type signature of the function</a>, a fundamental piece of F# that&#39;s key to understanding F# code.  You&#39;ll also notice this if you hover over the function in Visual Studio Code.</p>\n<p>In the body of the function, you&#39;ll notice two distinct parts:</p>\n<ol>\n<li><p>An inner function, called <code>isVowel</code>, which determines if a given character (<code>c</code>) is a vowel by checking if it matches one of the provided patterns via <a href=\"../../language-reference/pattern-matching\" data-linktype=\"relative-path\">Pattern Matching</a>:</p>\n<pre><code class=\"lang-fsharp\" name=\"ToPigLatin\">let isVowel (c: char) =\n    match c with\n    | &#39;a&#39; | &#39;e&#39; | &#39;i&#39; |&#39;o&#39; |&#39;u&#39;\n    | &#39;A&#39; | &#39;E&#39; | &#39;I&#39; | &#39;O&#39; | &#39;U&#39; -&gt; true\n    |_ -&gt; false\n</code></pre></li>\n<li><p>An <a href=\"../../language-reference/conditional-expressions-if-then-else\" data-linktype=\"relative-path\"><code>if..then..else</code></a> expression which checks if the first character is a vowel, and constructs a return value out of the input characters based on if the first character was a vowel or not:</p>\n<pre><code class=\"lang-fsharp\" name=\"ToPigLatin\">if isVowel word.[0] then\n    word + &quot;yay&quot;\nelse\n    word.[1..] + string(word.[0]) + &quot;ay&quot;\n</code></pre></li>\n</ol>\n<p>The flow of <code>toPigLatin</code> is thus:</p>\n<p>Check if the first character of the input word is a vowel.  If it is, attach &quot;yay&quot; to the end of the word.  Otherwise, move that first character to the end of the word and add &quot;ay&quot; to it.</p>\n<p>There&#39;s one final thing to notice about this: there&#39;s no explicit instruction to return from the function, unlike many other languages out there.  This is because F# is Expression-based, and the last expression in the body of a function is the return value.  Because <code>if..then..else</code> is itself an expression, the body of the <code>then</code> block or the body of the <code>else</code> block will be returned depending on the input value.</p>\n<h2 id=\"moving-your-script-code-into-the-implementation-file\">Moving your script code into the implementation file</h2>\n<p>The previous sections in this article demonstrated a common first step in writing F# code: writing an initial function and executing it interactively with FSI.  This is known as REPL-driven development, where REPL stands for &quot;Read-Evaluate-Print Loop&quot;.  It&#39;s a great way to experiment with functionality until you have something working.</p>\n<p>The next step in REPL-driven development is to move working code into an F# implementation file.  It can then be compiled by the F# compiler into an assembly which can be executed.</p>\n<p>To begin, open <code>ClassLibraryDemo.fs</code>.  You&#39;ll notice that some code is already in there.  Go ahead and delete the class definition, but make sure to leave the <a href=\"../../language-reference/namespaces\" data-linktype=\"relative-path\"><code>namespace</code></a> declaration at the top.</p>\n<p>Next, create a new <a href=\"../../language-reference/modules\" data-linktype=\"relative-path\"><code>module</code></a> called <code>PigLatin</code> and copy the <code>toPigLatin</code> function into it as such:</p>\n<pre><code class=\"lang-fsharp\" name=\"ToPigLatin\">namespace ClassLibraryDemo\n\nmodule PigLatin =\n    let toPigLatin (word: string) =\n        let isVowel (c: char) =\n            match c with\n            | &#39;a&#39; | &#39;e&#39; | &#39;i&#39; |&#39;o&#39; |&#39;u&#39;\n            | &#39;A&#39; | &#39;E&#39; | &#39;I&#39; | &#39;O&#39; | &#39;U&#39; -&gt; true\n            |_ -&gt; false\n        \n        if isVowel word.[0] then\n            word + &quot;yay&quot;\n        else\n            word.[1..] + string(word.[0]) + &quot;ay&quot;\n</code></pre><p>This is one of the many ways you can organize functions in F# code, and a common approach if you also want to call your code from C# or Visual Basic projects.</p>\n<p>Next, open the <code>Script.fsx</code> file again, and delete the entire <code>toPigLatin</code> function, but make sure to keep the following two lines in the file:</p>\n<pre class=\"loading\"><code>#load &quot;ClassLibraryDemo.fs&quot;\nopen ClassLibraryDemo\n</code></pre><p>The first line is needed for FSI scripting to load <code>ClassLibraryDemo.fs</code>.  The second line is a convenience: omitting it is optional, but you will need to type <code>open ClassLibraryDemo</code> in an FSI window if you wish to bring the <code>ToPigLatin</code> module into scope.</p>\n<p>Next, call the function with the <code>PigLatin</code> module that you defined earlier:</p>\n<pre class=\"loading\"><code>&gt; PigLatin.toPigLatin &quot;banana&quot;;;\nval it : string = &quot;ananabay&quot;\n&gt; PigLatin.toPigLatin &quot;apple&quot;;;\nval it : string = &quot;appleyay&quot;\n</code></pre><p>Success!  You get the same results as before, but now loaded from an F# implementation file.  The major difference here is that F# source files are compiled into assemblies which can be executed anywhere, not just in FSI.</p>\n<h2 id=\"summary\">Summary</h2>\n<p>In this article, you&#39;ve learned:</p>\n<ol>\n<li>How to set up Visual Studio Code with Ionide.</li>\n<li>How to create your first F# project with Ionide.</li>\n<li>How to use F# Scripting to write your first F# function in Ionide and then execute it in FSI.</li>\n<li>How to migrate your script code to F# source and then call that code from FSI.</li>\n</ol>\n<p>You&#39;re now equipped to write much more F# code using Visual Studio Code and Ionide.</p>\n<h2 id=\"troubleshooting\">Troubleshooting</h2>\n<p>Here are a few ways you can troubleshoot certain problems that you might run into:</p>\n<ol>\n<li>To get the code editing features of Ionide, your F# files need to be saved to disk and inside of a folder that is open in the Visual Studio Code workspace.</li>\n<li>If you&#39;ve made changes to your system or installed Ionide prerequisites with Visual Studio Code open, restart Visual Studio Code.</li>\n<li>Check that you can use the F# compiler and F# interactive from the command line without a fully-qualified path.  You can do so by typing <code>fsc</code> in a command line for the F# compiler, and <code>fsi</code> or <code>fsharpi</code> for the Visual F# tools on Windows and Mono on Mac/Linux, respectively.</li>\n<li>If you have invalid characters in your project directories, Ionide might not work.  Rename your project directories if this is the case.</li>\n<li>If none of the Ionide commands are working, check your <a href=\"https://code.visualstudio.com/docs/customization/keybindings#_customizing-shortcuts\" data-linktype=\"external\">Visual Studio Code keybindings</a> to see if you&#39;re overriding them by accident.</li>\n<li>If Ionide is broken on your machine and none of the above has fixed your problem, try removing the <code>ionide-fsharp</code> directory on your machine and reinstall the plugin suite.</li>\n</ol>\n<p>Ionide is an open source project built and maintained by members of the F# community.  Please report issues and feel free to contribute at the <a href=\"https://github.com/ionide/ionide-vscode-fsharp\" data-linktype=\"external\">Ionide-Vscode-Fsharp GitHub repository</a>.</p>\n<p>If you have an issue to report, please follow <a href=\"https://github.com/ionide/ionide-vscode-fsharp#how-to-get-logs-for-debugging--issue-reporting\" data-linktype=\"external\">the instructions for getting logs to use when reporting an issue</a>.</p>\n<p>You can also ask for further help from the Ionide developers and F# community in the <a href=\"https://gitter.im/ionide/ionide-project\" data-linktype=\"external\">Ionide Gitter channel</a>.</p>\n<h2 id=\"next-steps\">Next steps</h2>\n<p>To learn more about F# and the features of the language, check out <a href=\"../../tour\" data-linktype=\"relative-path\">Tour of F#</a>.</p>\n<h2 id=\"see-also\">See also</h2>\n<p><a href=\"../../tour\" data-linktype=\"relative-path\">Tour of F#</a></p>\n<p><a href=\"../../language-reference/index\" data-linktype=\"relative-path\">F# Language Reference</a></p>\n<p><a href=\"../../language-reference/functions/index\" data-linktype=\"relative-path\">Functions</a></p>\n<p><a href=\"../../language-reference/modules\" data-linktype=\"relative-path\">Modules</a></p>\n<p><a href=\"../../language-reference/namespaces\" data-linktype=\"relative-path\">Namespaces</a></p>\n<p><a href=\"https://github.com/ionide/ionide-vscode-fsharp\" data-linktype=\"external\">Ionide-Vscode-Fsharp</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"cartermp\">\r\n<meta name=\"ms.author\" content=\"phcart\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"fsharp\">\r\n<meta name=\"ms.assetid\" content=\"49775139-082e-442f-b5a2-dd402399b5d2\">\r\n<meta name=\"description\" content=\"Learn how to use F# with Visual Studio Code and the Ionide plugin suite.\">\r\n<meta name=\"keywords\" content=\"visual f#, f#, functional programming, .NET, Visual Studio Code, vscode, Ionide\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"09/28/2016\">\r\n<meta name=\"ms.technology\" content=\"devlang-fsharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/d3fdf46c825d04d29da3e3fafac667eacf01e02e/docs/fsharp/tutorials/getting-started/getting-started-vscode.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/fsharp/tutorials/getting-started/getting-started-vscode.md\">\r\n<meta name=\"document_id\" content=\"4f8bbbc2-fd31-bb2d-5053-099341a1280d\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../../toc2.json\">\r\n","rawMetadata":{"author":"cartermp","ms.author":"phcart","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Getting Started with F# in Visual Studio Code with Ionide | Microsoft Docs","ms.devlang":"fsharp","ms.assetid":"49775139-082e-442f-b5a2-dd402399b5d2","description":"Learn how to use F# with Visual Studio Code and the Ionide plugin suite.","keywords":"visual f#, f#, functional programming, .NET, Visual Studio Code, vscode, Ionide","ms.topic":"article","ms.date":"09/28/2016","ms.technology":"devlang-fsharp","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"tompratt-AQ","author_email":"v-thprat@microsoft.com","committer_name":"Phillip Carter","comitter_email":"phillip.carter@outlook.com","message":"Fixed instances of e.g. and i.e. (#1701)","commit_sha":"d3fdf46c825d04d29da3e3fafac667eacf01e02e","commit_date":"2017-03-10 09:04:31 -0800"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Update F# Getting Started in VS for VS 2017 (#1547)","commit_sha":"a46a16be3f2d0157fbacec962038acb1e9434120","commit_date":"2017-02-23 20:53:05 -0800"},{"author_name":"Carl Patenaude Poulin","author_email":"carl.patenaudepoulin@mail.mcgill.ca","committer_name":"Phillip Carter","comitter_email":"phillip.carter@outlook.com","message":"Getting Started with F# in Visual Studio Code with Ionide: add visual aid for an often missed step (#1457)","commit_sha":"cf8d957c38329dc9207b54015f0778bc1bcfe26c","commit_date":"2017-01-25 08:42:31 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Petr Onderka","author_email":"gsvick@gmail.com","committer_name":"Maira Wenzel","comitter_email":"mairaw@microsoft.com","message":"Fixing broken links (#1276)","commit_sha":"048197e9d58ab8126adc14a98a0225debdab79bb","commit_date":"2016-11-22 12:04:31 -0800"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Fix heading in F# vscode article (#1229)","commit_sha":"7da17654166b711e399396bc08b8350a76e648b5","commit_date":"2016-11-12 15:06:04 -0800"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Add git to prerequisites for getting started with F# on vscode article (#1180)","commit_sha":"2d25ccc39d5ac37026807f73016e10b236e99b8f","commit_date":"2016-11-12 14:41:32 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"fixed broken anchors (#1194)","commit_sha":"b20713600d7c3ddc31be5885733a1e8910ede8c6","commit_date":"2016-11-02 20:45:13 -0700"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Fix title and metadata (#1149)","commit_sha":"21063bb4bc4828ec3f60be2726e1b5bf8f0150d0","commit_date":"2016-10-13 11:07:26 -0700"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Getting Started with F# in Visual Studio Code with Ionide (#1089)","commit_sha":"d4b07e92140a429e226f6e974434de5ef4925d68","commit_date":"2016-10-12 15:59:25 -0700"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"F# Docs: Update intro, move files, rename language reference for better URLS (#902)","commit_sha":"70a10b9c3e21291c96d927d13f8710d9e0738d4c","commit_date":"2016-08-13 11:22:39 -0700"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/cartermp","display_name":"Phillip Carter","id":"6309070"},"contributors":[{"profile_url":"https://github.com/cartermp","display_name":"Phillip Carter"},{"profile_url":"https://github.com/tompratt-AQ","display_name":"tompratt-AQ","id":"26311438"},{"profile_url":"https://github.com/lilred","display_name":"Carl Patenaude Poulin","id":"1834919"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"},{"profile_url":"https://github.com/svick","display_name":"Petr Onderka","id":"287848"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/d3fdf46c825d04d29da3e3fafac667eacf01e02e/docs/fsharp/tutorials/getting-started/getting-started-vscode.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/fsharp/tutorials/getting-started/getting-started-vscode.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/fsharp/tutorials/getting-started/getting-started-vscode.md","document_id":"4f8bbbc2-fd31-bb2d-5053-099341a1280d","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/fsharp/tutorials/getting-started/getting-started-vscode","toc_asset_id":"articles/toc.json","toc_rel":"../../../toc.json","_op_ogTitle":"Getting Started with F# in Visual Studio Code with Ionide","_op_displayDate":"2016-9-28","_op_displayDate_source":"2016-09-28T00:00:00Z","_op_wordCount":2167,"_op_rawTitle":"<h1 id=\"getting-started-with-f-in-visual-studio-code-with-ionide\" sourcefile=\"docs/fsharp/tutorials/getting-started/getting-started-vscode.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Getting Started with F# in Visual Studio Code with Ionide</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/fsharp/tutorials/getting-started/getting-started-vscode","fileRelativePath":"articles/fsharp/tutorials/getting-started/getting-started-vscode.html"},"themesRelativePathToOutputRoot":"_themes/"}