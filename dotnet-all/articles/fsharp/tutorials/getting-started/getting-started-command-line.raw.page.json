{"content":"<div><div class=\"content\">\n<p>This article covers how you can get started with using F# on .NET Core. It will go through building a multi-project solution with a Class Library that is called by a Console Application.</p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>To begin, you must install the <a href=\"https://dot.net/core\" data-linktype=\"external\">.NET Core SDK 1.0 or later)</a>. There is no need to uninstall a previous version of the .NET Core SDK, as it supports side-by-side installations.</p>\n<p>This article assumes that you know how to use a command line and have a preferred text editor. If you don&#39;t already use it, <a href=\"https://code.visualstudio.com\" data-linktype=\"external\">Visual Studio Code</a> is a great option as a text editor for F#. To get awesome features like IntelliSense, better syntax highlighting, and more, you can download the <a href=\"https://marketplace.visualstudio.com/items?itemName=Ionide.Ionide-fsharp\" data-linktype=\"external\">Ionide Extension</a>.</p>\n<h2 id=\"building-a-simple-multi-project-solution\">Building a Simple Multi-project Solution</h2>\n<p>Open a command prompt/terminal and use the <code>dotnet new</code> command to create new solution file called <code>FSNetCore</code>:</p>\n<pre class=\"loading\"><code>dotnet new sln -o FSNetCore\n</code></pre><p>The folowing directory structure is produced as a result of the command completing:</p>\n<pre class=\"loading\"><code>FSNetCore\n    ├── FSNetCore.sln\n</code></pre><p>Change directories to <em>FSNetCore</em> and start adding projects to the solution folder.</p>\n<h3 id=\"writing-a-class-library\">Writing a Class library</h3>\n<p>Use the <code>dotnet new</code> command, create a Class Library project in the <strong>src</strong> folder named Library. </p>\n<pre class=\"loading\"><code class=\"lang-bash\">dotnet new classlib -lang F# -o src/Library \n</code></pre><p>The folowing directory structure is produced as a result of the command completing:</p>\n<pre class=\"loading\"><code>└── FSNetCore\n    ├── FSNetCore.sln\n    └── src\n        └── Library\n            ├── Library.fs\n            └── Library.fsproj\n</code></pre><p>Replace the contents of <code>Library.fs</code> with the following:</p>\n<pre class=\"loading\"><code class=\"lang-fsharp\">module Library\n\nopen Newtonsoft.Json\n\nlet getJsonNetJson value = \n    sprintf &quot;I used to be %s but now I&#39;m %s thanks to JSON.NET!&quot; value  (JsonConvert.SerializeObject(value))\n</code></pre><p>Add the Newtonsoft.Json NuGet package to the Library project.</p>\n<pre class=\"loading\"><code class=\"lang-bash\">dotnet add package Newtonsoft.Json\n</code></pre><p>Add the <code>Library</code> project to the <code>FSNetCore</code> solution using the <code>dotnet sln add</code> command:</p>\n<pre class=\"loading\"><code class=\"lang-bash\">dotnet sln add src/Library/Library.fsproj\n</code></pre><p>Restore the NuGet dependencies, <code>dotnet restore</code> and run <code>dotnet build</code> to build the project.</p>\n<h3 id=\"writing-a-console-application-which-consumes-the-class-library\">Writing a Console Application which Consumes the Class Library</h3>\n<p>Use the <code>dotnet new</code> command, create a Console app in the <strong>src</strong> folder named App. </p>\n<pre class=\"loading\"><code class=\"lang-bash\">dotnet new console -lang F# -o src/App \n</code></pre><p>The folowing directory structure is produced as a result of the command completing:</p>\n<pre class=\"loading\"><code>└── FSNetCore\n    ├── FSNetCore.sln\n    └── src\n        ├── App\n        │   ├── App.fsproj\n        │   ├── Program.fs\n        └── Library\n            ├── Library.fs\n            └── Library.fsproj\n</code></pre><p>Change <code>Program.fs</code> to:</p>\n<pre class=\"loading\"><code class=\"lang-fsharp\">open System\nopen Library\n\n[&lt;EntryPoint&gt;]\nlet main argv = \n    printfn &quot;Nice command-line arguments! Here&#39;s what JSON.NET has to say about them:&quot;\n\n    argv\n    |&gt; Array.map getJsonNetJson\n    |&gt; Array.iter (printfn &quot;%s&quot;)\n\n    0 // return an integer exit code\n</code></pre><p>Change directories to the <em>App</em> console project and add a reference to the <code>Library</code> project using <code>dotnet add reference</code>.</p>\n<pre class=\"loading\"><code class=\"lang-bash\">dotnet add reference ../Library/Library.fsproj\n</code></pre><p>Add the <code>Library</code> project to the <code>FSNetCore</code> solution using the <code>dotnet sln add</code> command:</p>\n<pre class=\"loading\"><code class=\"lang-bash\">dotnet sln add src/App/App.fsproj\n</code></pre><p>Restore the NuGet dependencies, <code>dotnet restore</code> and run <code>dotnet build</code> to build the project.</p>\n<p>Run the project passing <code>Hello World</code> as arguments.</p>\n<pre class=\"loading\"><code class=\"lang-bash\">dotnet run Hello World\n</code></pre><p>You should see the following results:</p>\n<pre class=\"loading\"><code>Nice command-line arguments! Here&#39;s what JSON.NET has to say about them:\n\nI used to be Hello but now I&#39;m &quot;&quot;Hello&quot;&quot; thanks to JSON.NET!\nI used to be World but now I&#39;m &quot;&quot;World&quot;&quot; thanks to JSON.NET!\n</code></pre></div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"cartermp\">\r\n<meta name=\"ms.author\" content=\"phcart\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"fsharp\">\r\n<meta name=\"ms.assetid\" content=\"615db1ec-6ef3-4de2-bae6-4586affa9771\">\r\n<meta name=\"description\" content=\"Learn how to use F# with the cross-platform .NET CLI.\">\r\n<meta name=\"keywords\" content=\"visual f#, f#, functional programming, .NET, .NET Core\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"03/06/2017\">\r\n<meta name=\"ms.technology\" content=\"devlang-fsharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/ec84fd6081aac95599ea9bf575e778e60e565dde/docs/fsharp/tutorials/getting-started/getting-started-command-line.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/fsharp/tutorials/getting-started/getting-started-command-line.md\">\r\n<meta name=\"document_id\" content=\"2b550526-b9a4-fd24-dbd7-79329d2e17c7\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../../toc2.json\">\r\n","rawMetadata":{"author":"cartermp","ms.author":"phcart","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Getting started with F# with command-line tools | Microsoft Docs","ms.devlang":"fsharp","ms.assetid":"615db1ec-6ef3-4de2-bae6-4586affa9771","description":"Learn how to use F# with the cross-platform .NET CLI.","keywords":"visual f#, f#, functional programming, .NET, .NET Core","ms.topic":"article","ms.date":"03/06/2017","ms.technology":"devlang-fsharp","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"changing sdk name","commit_sha":"ec84fd6081aac95599ea9bf575e778e60e565dde","commit_date":"2017-03-07 11:26:53 -0800"},{"author_name":"Luke Latham","author_email":"GuardRex@users.noreply.github.com","committer_name":"Maira Wenzel","comitter_email":"mairaw@microsoft.com","message":"dotnet new updates for MSBuild/csproj (#1649)","commit_sha":"abd4eadaede26fe144b5d8f249dd9b334e5a567f","commit_date":"2017-03-07 01:09:15 -0800"},{"author_name":"Shayne Boyer","author_email":"spboyer@live.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Update fsharp/tutorials/getting-started-command-line (#1521)","commit_sha":"390dd25716a5565704c00d87b02c7e777c7307cc","commit_date":"2017-02-16 21:25:11 -0500"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Fix title and metadata (#1149)","commit_sha":"21063bb4bc4828ec3f60be2726e1b5bf8f0150d0","commit_date":"2016-10-13 11:07:26 -0700"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Update Getting Started with F# with Cross Platform Tools to latest SDK (#1026)","commit_sha":"2dc076d4a056cb2c45e48e9875c8fa551ab68f37","commit_date":"2016-09-15 14:25:57 -0700"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Update Getting Started with F# in Visual Studio (#1015)","commit_sha":"b88193ae9be9cf55f7ef5758e172869bb7d91d57","commit_date":"2016-09-09 16:25:50 -0700"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/cartermp","display_name":"Phillip Carter","id":"6309070"},"contributors":[{"profile_url":"https://github.com/cartermp","display_name":"Phillip Carter"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"},{"profile_url":"https://github.com/GuardRex","display_name":"Luke Latham","id":"1622880"},{"profile_url":"https://github.com/spboyer","display_name":"Shayne Boyer","id":"7681382"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/ec84fd6081aac95599ea9bf575e778e60e565dde/docs/fsharp/tutorials/getting-started/getting-started-command-line.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/fsharp/tutorials/getting-started/getting-started-command-line.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/fsharp/tutorials/getting-started/getting-started-command-line.md","document_id":"2b550526-b9a4-fd24-dbd7-79329d2e17c7","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/fsharp/tutorials/getting-started/getting-started-command-line","toc_asset_id":"articles/toc.json","toc_rel":"../../../toc.json","_op_ogTitle":"Getting started with F# with command-line tools","_op_displayDate":"2017-3-6","_op_displayDate_source":"2017-03-06T00:00:00Z","_op_wordCount":513,"_op_rawTitle":"<h1 id=\"getting-started-with-f-with-command-line-tools\" sourcefile=\"docs/fsharp/tutorials/getting-started/getting-started-command-line.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Getting started with F# with command-line tools</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/fsharp/tutorials/getting-started/getting-started-command-line","fileRelativePath":"articles/fsharp/tutorials/getting-started/getting-started-command-line.html"},"themesRelativePathToOutputRoot":"_themes/"}