{"content":"<div><div class=\"content\">\n<p>Azure File storage is a service that offers file shares in the cloud using the standard <a href=\"https://msdn.microsoft.com/library/windows/desktop/aa365233.aspx\" data-linktype=\"external\">Server Message Block (SMB) Protocol</a>. Both SMB 2.1 and SMB 3.0 are supported. With Azure File storage, you can migrate legacy applications that rely on file shares to Azure quickly and without costly rewrites. Applications running in Azure virtual machines or cloud services or from on-premises clients can mount a file share in the cloud, just as a desktop application mounts a typical SMB share. Any number of application components can then mount and access the File storage share simultaneously.</p>\n<p>For a conceptual overview of file storage, please see <a href=\"https://docs.microsoft.com/azure/storage/storage-dotnet-how-to-use-files\" data-linktype=\"external\">the .NET guide for file storage</a>.</p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>To use this guide, you must first <a href=\"https://docs.microsoft.com/azure/storage/storage-create-storage-account\" data-linktype=\"external\">create an Azure storage account</a>.\nYou&#39;ll also need your storage access key for this account.</p>\n<h2 id=\"create-an-f-script-and-start-f-interactive\">Create an F# Script and Start F# Interactive</h2>\n<p>The samples in this article can be used in either an F# application or an F# script. To create an F# script, create a file with the <code>.fsx</code> extension, for example <code>files.fsx</code>, in your F# development environment.</p>\n<p>Next, use a <a href=\"package-management\" data-linktype=\"relative-path\">package manager</a> such as <a href=\"https://fsprojects.github.io/Paket/\" data-linktype=\"external\">Paket</a> or <a href=\"https://www.nuget.org/\" data-linktype=\"external\">NuGet</a> to install the <code>WindowsAzure.Storage</code> package and reference <code>WindowsAzure.Storage.dll</code> in your script using a <code>#r</code> directive.</p>\n<h3 id=\"add-namespace-declarations\">Add namespace declarations</h3>\n<p>Add the following <code>open</code> statements to the top of the <code>files.fsx</code> file:</p>\n<pre><code class=\"lang-fsharp\" name=\"FileStorage\">open System\nopen System.IO\nopen Microsoft.Azure // Namespace for CloudConfigurationManager\nopen Microsoft.WindowsAzure.Storage // Namespace for CloudStorageAccount\nopen Microsoft.WindowsAzure.Storage.File // Namespace for File storage types\n</code></pre><h3 id=\"get-your-connection-string\">Get your connection string</h3>\n<p>You&#39;ll need an Azure Storage connection string for this tutorial. For more information about connection strings, see <a href=\"https://docs.microsoft.com/azure/storage/storage-configure-connection-string\" data-linktype=\"external\">Configure Storage Connection Strings</a>.</p>\n<p>For the tutorial, you&#39;ll enter your connection string in your script, like this:</p>\n<pre><code class=\"lang-fsharp\" name=\"FileStorage\">let storageConnString = &quot;...&quot; // fill this in from your storage account\n</code></pre><p>However, this is <strong>not recommended</strong> for real projects. Your storage account key is similar to the root password for your storage account. Always be careful to protect your storage account key. Avoid distributing it to other users, hard-coding it, or saving it in a plain-text file that is accessible to others. You can regenerate your key using the Azure Portal if you believe it may have been compromised.</p>\n<p>For real applications, the best way to maintain your storage connection string is in a configuration file. To fetch the connection string from a configuration file, you can do this:</p>\n<pre><code class=\"lang-fsharp\" name=\"FileStorage\">// Parse the connection string and return a reference to the storage account.\nlet storageConnString = \n    CloudConfigurationManager.GetSetting(&quot;StorageConnectionString&quot;)\n</code></pre><p>Using Azure Configuration Manager is optional. You can also use an API such as the .NET Framework&#39;s <code>ConfigurationManager</code> type.</p>\n<h3 id=\"parse-the-connection-string\">Parse the connection string</h3>\n<p>To parse the connection string, use:</p>\n<pre><code class=\"lang-fsharp\" name=\"FileStorage\">// Parse the connection string and return a reference to the storage account.\nlet storageAccount = CloudStorageAccount.Parse(storageConnString)\n</code></pre><p>This will return a <code>CloudStorageAccount</code>.</p>\n<h3 id=\"create-the-file-service-client\">Create the File service client</h3>\n<p>The <code>CloudFileClient</code> type enables you to programmatically use files stored in File storage. Here&#39;s one way to create the service client:</p>\n<pre><code class=\"lang-fsharp\" name=\"FileStorage\">let fileClient = storageAccount.CreateCloudFileClient()\n</code></pre><p>Now you are ready to write code that reads data from and writes data to File storage.</p>\n<h2 id=\"create-a-file-share\">Create a file share</h2>\n<p>This example shows how to create a file share if it does not already exist:</p>\n<pre><code class=\"lang-fsharp\" name=\"FileStorage\">let share = fileClient.GetShareReference(&quot;myfiles&quot;)\nshare.CreateIfNotExists()\n</code></pre><h2 id=\"create-a-root-directory-and-a-subdirectory\">Create a root directory and a subdirectory</h2>\n<p>Here, you get the root directory and get a sub-directory of the root. You create both if they don&#39;t already exist.</p>\n<pre><code class=\"lang-fsharp\" name=\"FileStorage\">let rootDir = share.GetRootDirectoryReference()\nlet subDir = rootDir.GetDirectoryReference(&quot;myLogs&quot;)\nsubDir.CreateIfNotExists()\n</code></pre><h2 id=\"upload-text-as-a-file\">Upload text as a file</h2>\n<p>This example shows how to upload text as a file.</p>\n<pre><code class=\"lang-fsharp\" name=\"FileStorage\">let file = subDir.GetFileReference(&quot;log.txt&quot;)\nfile.UploadText(&quot;This is the content of the log file&quot;)\n</code></pre><h3 id=\"download-a-file-to-a-local-copy-of-the-file\">Download a file to a local copy of the file</h3>\n<p>Here you download the file just created, appending the contents to a local file.</p>\n<pre><code class=\"lang-fsharp\" name=\"FileStorage\">file.DownloadToFile(&quot;log.txt&quot;, FileMode.Append)\n</code></pre><h3 id=\"set-the-maximum-size-for-a-file-share\">Set the maximum size for a file share</h3>\n<p>The example below shows how to check the current usage for a share and how to set the quota for the share. <code>FetchAttributes</code> must be called to populate a share&#39;s <code>Properties</code>, and <code>SetProperties</code> to propagate local changes to Azure File storage.</p>\n<pre><code class=\"lang-fsharp\" name=\"FileStorage\">// stats.Usage is current usage in GB\nlet stats = share.GetStats()\nshare.FetchAttributes()\n\n// Set the quota to 10 GB plus current usage\nshare.Properties.Quota &lt;- stats.Usage + 10 |&gt; Nullable\nshare.SetProperties()\n\n// Remove the quota\nshare.Properties.Quota &lt;- Nullable()\nshare.SetProperties()\n</code></pre><h3 id=\"generate-a-shared-access-signature-for-a-file-or-file-share\">Generate a shared access signature for a file or file share</h3>\n<p>You can generate a shared access signature (SAS) for a file share or for an individual file. You can also create a shared access policy on a file share to manage shared access signatures. Creating a shared access policy is recommended, as it provides a means of revoking the SAS if it should be compromised.</p>\n<p>Here, you create a shared access policy on a share, and then use that policy to provide the constraints for a SAS on a file in the share.</p>\n<pre><code class=\"lang-fsharp\" name=\"FileStorage\">// Create a 24-hour read/write policy.\nlet policy = \n    SharedAccessFilePolicy\n       (SharedAccessExpiryTime = (DateTimeOffset.UtcNow.AddHours(24.) |&gt; Nullable),\n        Permissions = (SharedAccessFilePermissions.Read ||| SharedAccessFilePermissions.Write))\n\n\n// Set the policy on the share.\nlet permissions = share.GetPermissions()\npermissions.SharedAccessPolicies.Add(&quot;policyName&quot;, policy)\nshare.SetPermissions(permissions)\n\nlet sasToken = file.GetSharedAccessSignature(policy)\nlet sasUri = Uri(file.StorageUri.PrimaryUri.ToString() + sasToken)\n\nlet fileSas = CloudFile(sasUri)\nfileSas.UploadText(&quot;This write operation is authenticated via SAS&quot;)\n</code></pre><p>For more information about creating and using shared access signatures, see <a href=\"https://azure.microsoft.com/en-gb/documentation/articles/storage-dotnet-shared-access-signature-part-1/\" data-linktype=\"external\">Using Shared Access Signatures (SAS)</a> and <a href=\"https://azure.microsoft.com/en-gb/documentation/articles/storage-dotnet-shared-access-signature-part-2/\" data-linktype=\"external\">Create and use a SAS with Blob storage</a>.</p>\n<h3 id=\"copy-files\">Copy files</h3>\n<p>You can copy a file to another file or to a blob, or a blob to a file. If you are copying a blob to a file, or a file to a blob, you <em>must</em> use a shared access signature (SAS) to authenticate the source object, even if you are copying within the same storage account.</p>\n<h3 id=\"copy-a-file-to-another-file\">Copy a file to another file</h3>\n<p>Here, you copy a file to another file in the same share. Because this copy operation copies between files in the same storage account, you can use Shared Key authentication to perform the copy.</p>\n<pre><code class=\"lang-fsharp\" name=\"FileStorage\">let destFile = subDir.GetFileReference(&quot;log_copy.txt&quot;)\ndestFile.StartCopy(file)\n</code></pre><h3 id=\"copy-a-file-to-a-blob\">Copy a file to a blob</h3>\n<p>Here, you create a file and copy it to a blob within the same storage account. You create a SAS for the source file, which the service uses to authenticate access to the source file during the copy operation.</p>\n<pre><code class=\"lang-fsharp\" name=\"FileStorage\">// Get a reference to the blob to which the file will be copied.\nlet blobClient = storageAccount.CreateCloudBlobClient()\nlet container = blobClient.GetContainerReference(&quot;myContainer&quot;)\ncontainer.CreateIfNotExists()\nlet destBlob = container.GetBlockBlobReference(&quot;log_blob.txt&quot;)\n\nlet filePolicy = \n    SharedAccessFilePolicy\n        (Permissions = SharedAccessFilePermissions.Read,\n         SharedAccessExpiryTime = (DateTimeOffset.UtcNow.AddHours(24.) |&gt; Nullable))\n\nlet fileSas2 = file.GetSharedAccessSignature(filePolicy)\nlet sasUri2 = Uri(file.StorageUri.PrimaryUri.ToString() + fileSas2)\ndestBlob.StartCopy(sasUri2)\n</code></pre><p>You can copy a blob to a file in the same way. If the source object is a blob, then create a SAS to authenticate access to that blob during the copy operation.</p>\n<h2 id=\"troubleshooting-file-storage-using-metrics\">Troubleshooting File storage using metrics</h2>\n<p>Azure Storage Analytics supports metrics for File storage. With metrics data, you can trace requests and diagnose issues.</p>\n<p>You can enable metrics for File storage from the <a href=\"https://portal.azure.com\" data-linktype=\"external\">Azure Portal</a>, or you can do it from F# like this:</p>\n<pre><code class=\"lang-fsharp\" name=\"FileStorage\">open Microsoft.WindowsAzure.Storage.File.Protocol\nopen Microsoft.WindowsAzure.Storage.Shared.Protocol\n\nlet props =\n    FileServiceProperties(\n       (HourMetrics = MetricsProperties(\n            MetricsLevel = MetricsLevel.ServiceAndApi,\n            RetentionDays = (14 |&gt; Nullable),\n            Version = &quot;1.0&quot;),\n        MinuteMetrics = MetricsProperties(\n            MetricsLevel = MetricsLevel.ServiceAndApi,\n            RetentionDays = (7 |&gt; Nullable),\n            Version = &quot;1.0&quot;))\n\nfileClient.SetServiceProperties(props)\n</code></pre><h2 id=\"next-steps\">Next steps</h2>\n<p>See these links for more information about Azure File storage.</p>\n<h3 id=\"conceptual-articles-and-videos\">Conceptual articles and videos</h3>\n<ul>\n<li><a href=\"https://azure.microsoft.com/documentation/videos/azurecon-2015-azure-files-storage-a-frictionless-cloud-smb-file-system-for-windows-and-linux/\" data-linktype=\"external\">Azure Files Storage: a frictionless cloud SMB file system for Windows and Linux</a></li>\n<li><a href=\"https://azure.microsoft.com/en-gb/documentation/articles/storage-how-to-use-files-linux/\" data-linktype=\"external\">How to use Azure File Storage with Linux</a></li>\n</ul>\n<h3 id=\"tooling-support-for-file-storage\">Tooling support for File storage</h3>\n<ul>\n<li><a href=\"https://azure.microsoft.com/en-gb/documentation/articles/storage-powershell-guide-full/\" data-linktype=\"external\">Using Azure PowerShell with Azure Storage</a></li>\n<li><a href=\"https://azure.microsoft.com/en-gb/documentation/articles/storage-use-azcopy/\" data-linktype=\"external\">How to use AzCopy with Microsoft Azure Storage</a></li>\n<li><a href=\"https://azure.microsoft.com/en-gb/documentation/articles/storage-azure-cli/#create-and-manage-file-shares\" data-linktype=\"external\">Using the Azure CLI with Azure Storage</a></li>\n</ul>\n<h3 id=\"reference\">Reference</h3>\n<ul>\n<li><a href=\"https://msdn.microsoft.com/library/azure/mt347887.aspx\" data-linktype=\"external\">Storage Client Library for .NET reference</a></li>\n<li><a href=\"http://msdn.microsoft.com/library/azure/dn167006.aspx\" data-linktype=\"external\">File Service REST API reference</a></li>\n</ul>\n<h3 id=\"blog-posts\">Blog posts</h3>\n<ul>\n<li><a href=\"https://azure.microsoft.com/blog/azure-file-storage-now-generally-available/\" data-linktype=\"external\">Azure File storage is now generally available</a></li>\n<li><a href=\"https://azure.microsoft.com/blog/inside-azure-file-storage/\" data-linktype=\"external\">Inside Azure File Storage</a> </li>\n<li><a href=\"http://blogs.msdn.com/b/windowsazurestorage/archive/2014/05/12/introducing-microsoft-azure-file-service.aspx\" data-linktype=\"external\">Introducing Microsoft Azure File Service</a></li>\n<li><a href=\"http://blogs.msdn.com/b/windowsazurestorage/archive/2014/05/27/persisting-connections-to-microsoft-azure-files.aspx\" data-linktype=\"external\">Persisting connections to Microsoft Azure Files</a></li>\n</ul>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"sylvanc\">\r\n<meta name=\"ms.author\" content=\"phcart\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"fsharp\">\r\n<meta name=\"ms.assetid\" content=\"5c26a0aa-186e-476c-9f87-e0191754579e\">\r\n<meta name=\"description\" content=\"Store file data in the cloud with Azure File storage, and mount your cloud file share from an Azure virtual machine (VM) or from an on-premises application running Windows.\">\r\n<meta name=\"keywords\" content=\"visual f#, f#, functional programming, .NET, .NET Core, Azure\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"09/20/2016\">\r\n<meta name=\"ms.technology\" content=\"devlang-fsharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/fsharp/using-fsharp-on-azure/file-storage.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/fsharp/using-fsharp-on-azure/file-storage.md\">\r\n<meta name=\"document_id\" content=\"4ac4f2b1-cd44-05b9-cf4b-276ed52bbf4b\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../toc2.json\">\r\n","rawMetadata":{"author":"sylvanc","ms.author":"phcart","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Get started with Azure File storage using F# | Microsoft Docs","ms.devlang":"fsharp","ms.assetid":"5c26a0aa-186e-476c-9f87-e0191754579e","description":"Store file data in the cloud with Azure File storage, and mount your cloud file share from an Azure virtual machine (VM) or from an on-premises application running Windows.","keywords":"visual f#, f#, functional programming, .NET, .NET Core, Azure","ms.topic":"article","ms.date":"09/20/2016","ms.technology":"devlang-fsharp","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Absolute urls and other fixes (#1281)","commit_sha":"f7dffe4885b331cec8d37f3cc5c9163f69c3b4c9","commit_date":"2016-11-22 12:57:26 -0800"},{"author_name":"Sylvan Clebsch","author_email":"sylvan.clebsch@gmail.com","committer_name":"Phillip Carter","comitter_email":"phillip.carter@outlook.com","message":"F# Azure storage docs (#1079)","commit_sha":"d1d0aa55980c280485fcf6c4b5e4507b034c65fc","commit_date":"2016-10-11 22:43:31 -0700"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/sylvanc","display_name":"Sylvan Clebsch","id":"2785007"},"contributors":[{"profile_url":"https://github.com/sylvanc","display_name":"Sylvan Clebsch"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/fsharp/using-fsharp-on-azure/file-storage.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/fsharp/using-fsharp-on-azure/file-storage.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/fsharp/using-fsharp-on-azure/file-storage.md","document_id":"4ac4f2b1-cd44-05b9-cf4b-276ed52bbf4b","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/fsharp/using-fsharp-on-azure/file-storage","toc_asset_id":"articles/toc.json","toc_rel":"../../toc.json","_op_ogTitle":"Get started with Azure File storage using F#","_op_displayDate":"2016-9-20","_op_displayDate_source":"2016-09-20T00:00:00Z","_op_wordCount":1291,"_op_rawTitle":"<h1 id=\"get-started-with-azure-file-storage-using-f\" sourcefile=\"docs/fsharp/using-fsharp-on-azure/file-storage.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Get started with Azure File storage using F#</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/fsharp/using-fsharp-on-azure/file-storage","fileRelativePath":"articles/fsharp/using-fsharp-on-azure/file-storage.html"},"themesRelativePathToOutputRoot":"_themes/"}