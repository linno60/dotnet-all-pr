{"content":"<div><div class=\"content\">\n<div class=\"NOTE\"><h5>Note</h5><p>The API reference links in this article will take you to MSDN.  The docs.microsoft.com API reference is not complete.</p>\n</div>\n<p>This topic provides a table that shows how to specify the type of a literal in F#.</p>\n<h2 id=\"literal-types\">Literal Types</h2>\n<p>The following table shows the literal types in F#. Characters that represent digits in hexadecimal notation are not case-sensitive; characters that identify the type are case-sensitive.</p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Description</th>\n<th>Suffix or prefix</th>\n<th>Examples</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sbyte</td>\n<td>signed 8-bit integer</td>\n<td>y</td>\n<td><code>86y</code><br><br><code>0b00000101y</code></td>\n</tr>\n<tr>\n<td>byte</td>\n<td>unsigned 8-bit natural number</td>\n<td>uy</td>\n<td><code>86uy</code><br><br><code>0b00000101uy</code></td>\n</tr>\n<tr>\n<td>int16</td>\n<td>signed 16-bit integer</td>\n<td>s</td>\n<td><code>86s</code></td>\n</tr>\n<tr>\n<td>uint16</td>\n<td>unsigned 16-bit natural number</td>\n<td>us</td>\n<td><code>86us</code></td>\n</tr>\n<tr>\n<td>int<br><br>int32</td>\n<td>signed 32-bit integer</td>\n<td>l or none</td>\n<td><code>86</code><br><br><code>86l</code></td>\n</tr>\n<tr>\n<td>uint<br><br>uint32</td>\n<td>unsigned 32-bit natural number</td>\n<td>u or ul</td>\n<td><code>86u</code><br><br><code>86ul</code></td>\n</tr>\n<tr>\n<td>unativeint</td>\n<td>native pointer as an unsigned natural number</td>\n<td>un</td>\n<td><code>0x00002D3Fun</code></td>\n</tr>\n<tr>\n<td>int64</td>\n<td>signed 64-bit integer</td>\n<td>L</td>\n<td><code>86L</code></td>\n</tr>\n<tr>\n<td>uint64</td>\n<td>unsigned 64-bit natural number</td>\n<td>UL</td>\n<td><code>86UL</code></td>\n</tr>\n<tr>\n<td>single, float32</td>\n<td>32-bit floating point number</td>\n<td>F or f</td>\n<td><code>4.14F</code> or <code>4.14f</code></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>lf</td>\n<td><code>0x00000000lf</code></td>\n</tr>\n<tr>\n<td>float; double</td>\n<td>64-bit floating point number</td>\n<td>none</td>\n<td><code>4.14</code> or <code>2.3E+32</code> or <code>2.3e+32</code></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>LF</td>\n<td><code>0x0000000000000000LF</code></td>\n</tr>\n<tr>\n<td>bigint</td>\n<td>integer not limited to 64-bit representation</td>\n<td>I</td>\n<td><code>9999999999999999999999999999I</code></td>\n</tr>\n<tr>\n<td>decimal</td>\n<td>fractional number represented as a fixed point or rational number</td>\n<td>M or m</td>\n<td><code>0.7833M</code> or <code>0.7833m</code></td>\n</tr>\n<tr>\n<td>Char</td>\n<td>Unicode character</td>\n<td>none</td>\n<td><code>&#39;a&#39;</code></td>\n</tr>\n<tr>\n<td>String</td>\n<td>Unicode string</td>\n<td>none</td>\n<td><code>&quot;text\\n&quot;</code><br><br>or<br><br><code>@&quot;c:\\filename&quot;</code><br><br>or<br><br><code>&quot;&quot;&quot;&lt;book title=&quot;Paradise Lost&quot;&gt;&quot;&quot;&quot;</code><br><br>or<br><br><code>&quot;string1&quot; + &quot;string2&quot;</code><br><br>See also <a href=\"strings\" data-linktype=\"relative-path\">Strings</a>.</td>\n</tr>\n<tr>\n<td>byte</td>\n<td>ASCII character</td>\n<td>B</td>\n<td><code>&#39;a&#39;B</code></td>\n</tr>\n<tr>\n<td>byte[]</td>\n<td>ASCII string</td>\n<td>B</td>\n<td><code>&quot;text&quot;B</code></td>\n</tr>\n<tr>\n<td>String or byte[]</td>\n<td>verbatim string</td>\n<td>@ prefix</td>\n<td><code>@&quot;\\\\server\\share&quot;</code> (Unicode)<br><br><code>@&quot;\\\\server\\share&quot;B</code> (ASCII)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"remarks\">Remarks</h2>\n<p>Unicode strings can contain explicit encodings that you can specify by using <code>\\u</code> followed by a 16-bit hexadecimal code or UTF-32 encodings that you can specify by using <code>\\U</code> followed by a 32-bit hexadecimal code that represents a Unicode surrogate pair.</p>\n<p>As of F# 3.1, you can use the <code>+</code> sign to combine string literals. You can also use the bitwise or (<code>|||</code>) operator to combine enum flags. For example, the following code is legal in F# 3.1:</p>\n<pre class=\"loading\"><code class=\"lang-fsharp\">[&lt;Literal&gt;]\nlet literal1 = &quot;a&quot; + &quot;b&quot;\n\n[&lt;Literal&gt;]\nlet fileLocation =   __SOURCE_DIRECTORY__ + &quot;/&quot; + __SOURCE_FILE__\n\n[&lt;Literal&gt;]\nlet literal2 = 1 ||| 64\n\n[&lt;Literal&gt;]\nlet literal3 = System.IO.FileAccess.Read ||| System.IO.FileAccess.Write\n</code></pre><p>The use of other bitwise operators isn&#39;t allowed.</p>\n<h2 id=\"named-literals\">Named Literals</h2>\n<p>Values that are intended to be constants can be marked with the <a href=\"https://msdn.microsoft.com/library/465f36ce-d146-41c0-b425-679c509cd285\" data-linktype=\"external\">Literal</a> attribute. This attribute has the effect of causing a value to be compiled as a constant.</p>\n<p>In pattern matching expressions, identifiers that begin with lowercase characters are always treated as variables to be bound, rather than as literals, so you should generally use initial capitals when you define literals.</p>\n<h2 id=\"integers-in-other-bases\">Integers In Other Bases</h2>\n<p>Signed 32-bit integers can also be specified in hexadecimal, octal, or binary using a <code>0x</code>, <code>0o</code> or <code>0b</code> prefix respectively.</p>\n<pre class=\"loading\"><code>let numbers = (0x9F, 0o77, 0b1010)\n// Result: numbers : int * int * int = (159, 63, 10)\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p><a href=\"https://msdn.microsoft.com/visualfsharpdocs/conceptual/core.literalattribute-class-%5bfsharp%5d\" data-linktype=\"external\">Core.LiteralAttribute Class</a></p>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"cartermp\">\r\n<meta name=\"ms.author\" content=\"phcart\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"fsharp\">\r\n<meta name=\"ms.assetid\" content=\"4b1d6e9d-f933-4cd4-966d-d643152c27e4\">\r\n<meta name=\"description\" content=\"Literals (F#)\">\r\n<meta name=\"keywords\" content=\"visual f#, f#, functional programming\">\r\n<meta name=\"ms.topic\" content=\"language-reference\">\r\n<meta name=\"ms.date\" content=\"05/16/2016\">\r\n<meta name=\"ms.technology\" content=\"devlang-fsharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-21 01:42 AM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/065b1c1c775b45abaa546dca3b44d838371f82d6/docs/fsharp/language-reference/literals.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/fsharp/language-reference/literals.md\">\r\n<meta name=\"document_id\" content=\"121edc58-aad0-40fd-ec8a-3dca775052e6\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../toc2.json\">\r\n","rawMetadata":{"author":"cartermp","ms.author":"phcart","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Literals (F#) | Microsoft Docs","ms.devlang":"fsharp","ms.assetid":"4b1d6e9d-f933-4cd4-966d-d643152c27e4","description":"Literals (F#)","keywords":"visual f#, f#, functional programming","ms.topic":"language-reference","ms.date":"05/16/2016","ms.technology":"devlang-fsharp","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"David Tchepak","author_email":"tchepak@gmail.com","committer_name":"Phillip Carter","comitter_email":"phillip.carter@outlook.com","message":"Include hex, oct & bin values in literals.md (#1554)","commit_sha":"065b1c1c775b45abaa546dca3b44d838371f82d6","commit_date":"2017-02-14 09:40:36 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"fixed absolute and msdn links (#1001)","commit_sha":"de0dab146fc811e895dc32f98f877db5e757f82b","commit_date":"2016-09-06 10:59:39 -0700"},{"author_name":"Jared Hester","author_email":"jared.hester@gmail.com","committer_name":"Phillip Carter","comitter_email":"phillip.carter@outlook.com","message":"Update literals.md (#927)","commit_sha":"9c9274f4e0848a3464aebbefbda3e149d6d9a700","commit_date":"2016-08-19 09:40:36 -0700"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"F# Docs: Update intro, move files, rename language reference for better URLS (#902)","commit_sha":"70a10b9c3e21291c96d927d13f8710d9e0738d4c","commit_date":"2016-08-13 11:22:39 -0700"}],"updated_at":"2017-03-21 01:42 AM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/cartermp","display_name":"Phillip Carter","id":"6309070"},"contributors":[{"profile_url":"https://github.com/cartermp","display_name":"Phillip Carter"},{"profile_url":"https://github.com/dtchepak","display_name":"David Tchepak","id":"70105"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"},{"profile_url":"https://github.com/cloudRoutine","display_name":"Jared Hester","id":"680051"}],"update_at":"3/21/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/065b1c1c775b45abaa546dca3b44d838371f82d6/docs/fsharp/language-reference/literals.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/fsharp/language-reference/literals.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/fsharp/language-reference/literals.md","document_id":"121edc58-aad0-40fd-ec8a-3dca775052e6","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/fsharp/language-reference/literals","toc_asset_id":"articles/toc.json","toc_rel":"../../toc.json","_op_ogTitle":"Literals (F#)","_op_displayDate":"2016-5-16","_op_displayDate_source":"2016-05-16T00:00:00Z","_op_wordCount":462,"_op_rawTitle":"<h1 id=\"literals\" sourcefile=\"docs/fsharp/language-reference/literals.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Literals</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/fsharp/language-reference/literals","fileRelativePath":"articles/fsharp/language-reference/literals.html"},"themesRelativePathToOutputRoot":"_themes/"}