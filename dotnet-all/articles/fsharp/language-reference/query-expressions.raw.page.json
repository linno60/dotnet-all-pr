{"content":"<div><div class=\"content\">\n<div class=\"NOTE\"><h5>Note</h5><p>The API reference links in this article will take you to MSDN.  The docs.microsoft.com API reference is not complete.</p>\n</div>\n<p>Query expressions enable you to query a data source and put the data in a desired form. Query expressions provide support for LINQ in F#.</p>\n<h2 id=\"syntax\">Syntax</h2>\n<pre class=\"loading\"><code class=\"lang-fsharp\">query { expression }\n</code></pre><h2 id=\"remarks\">Remarks</h2>\n<p>Query expressions are a type of computation expression similar to sequence expressions. Just as you specify a sequence by providing code in a sequence expression, you specify a set of data by providing code in a query expression. In a sequence expression, the <code>yield</code> keyword identifies data to be returned as part of the resulting sequence. In query expressions, the <code>select</code> keyword performs the same function. In addition to the <code>select</code> keyword, F# also supports a number of query operators that are much like the parts of a SQL SELECT statement. Here is an example of a simple query expression, along with code that connects to the Northwind OData source.</p>\n<pre class=\"loading\"><code class=\"lang-fsharp\">// Use the OData type provider to create types that can be used to access the Northwind database.\n// Add References to FSharp.Data.TypeProviders and System.Data.Services.Client\nopen Microsoft.FSharp.Data.TypeProviders\n\ntype Northwind = ODataService&lt;&quot;http://services.odata.org/Northwind/Northwind.svc&quot;&gt;\nlet db = Northwind.GetDataContext()\n\n// A query expression.\nlet query1 =\n    query {\n        for customer in db.Customers do\n            select customer\n    }\n\n// Print results\nquery1\n|&gt; Seq.iter (fun customer -&gt; printfn &quot;Company: %s Contact: %s&quot; customer.CompanyName customer.ContactName)\n</code></pre><p>In the previous code example, the query expression is in curly braces. The meaning of the code in the expression is, return every customer in the Customers table in the database in the query results. Query expressions return a type that implements <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb351562(v=vs.110).aspx\" data-linktype=\"external\">IQueryable&lt;T&gt;</a> and <a class=\"xref\" href=\"../../../api/system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>, and so they can be iterated using the <a href=\"https://msdn.microsoft.com/library/54e8f059-ca52-4632-9ae9-49685ee9b684\" data-linktype=\"external\">Seq module</a> as the example shows.</p>\n<p>Every computation expression type is built from a builder class. The builder class for the query computation expression is <code>QueryBuilder</code>. For more information, see <a href=\"computation-expressions\" data-linktype=\"relative-path\">Computation Expressions</a> and <a href=\"https://msdn.microsoft.com/visualfsharpdocs/conceptual/linq.querybuilder-class-%5bfsharp%5d\" data-linktype=\"external\">Linq.QueryBuilder Class</a>.</p>\n<h2 id=\"query-operators\">Query Operators</h2>\n<p>Query operators enable you to specify the details of the query, such as to put criteria on records to be returned, or specify the sorting order of results. The query source must support the query operator. If you attempt to use an unsupported query operator, <code>System.NotSupportedException</code> will be thrown.</p>\n<p>Only expressions that can be translated to SQL are allowed in query expressions. For example, no function calls are allowed in the expressions when you use the <code>where</code> query operator.</p>\n<p>Table 1 shows available query operators. In addition, see Table2, which compares SQL queries and the equivalent F# query expressions later in this topic. Some query operators aren&#39;t supported by some type providers. In particular, the OData type provider is limited in the query operators that it supports due to limitations in OData. For more information, see <a href=\"https://msdn.microsoft.com/library/bac609dd-9d12-4bf9-a662-24bdf4faa43e\" data-linktype=\"external\">ODataService Type Provider (F#)</a>.</p>\n<p>This table assumes a database in the following form:</p>\n<p><img src=\"../media/studentcoursedb.png\" alt=\"Sample Database Diagram\" data-linktype=\"relative-path\"></p>\n<p>The code in the tables that follow also assumes the following database connection code. Projects should add references to System.Data,  System.Data.Linq, and FSharp.Data.TypeProviders assemblies. The code that creates this database is included at the end of this topic.</p>\n<pre class=\"loading\"><code class=\"lang-fsharp\">open System\nopen Microsoft.FSharp.Data.TypeProviders\nopen System.Data.Linq.SqlClient\nopen System.Linq\nopen Microsoft.FSharp.Linq\n\ntype schema = SqlDataConnection&lt; @&quot;Data Source=SERVER\\INSTANCE;Initial Catalog=MyDatabase;Integrated Security=SSPI;&quot; &gt;\n\nlet db = schema.GetDataContext()\n\n// Needed for some query operator examples:\nlet data = [ 1; 5; 7; 11; 18; 21]\n</code></pre><h3 id=\"table-1-query-operators\">Table 1. Query Operators</h3>\n<table style=\"width:100%\">\n  <tr>\n    <th>Operator</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n  <td><code>contains</code></td>\n<td>Determines whether the selected elements include a specified element.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    select student.Age.Value\n    contains 11\n}\n</code></pre>\n\n</td>\n</tr>\n\n\n<tr>\n  <td><code>count</code></td><td>Returns the number of selected elements.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    select student\n    count\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>last</code></td><td>Selects the last element of those selected so far.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for number in data do\n    last\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>lastOrDefault</code></td><td>Selects the last element of those selected so far, or a default value if no element is found.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for number in data do\n    where (number < 0)=\"\" lastordefault=\"\" }=\"\"></code></pre>\n\n</td></tr><tr>\n<td><code>exactlyOne</code></td><td>Selects the single, specific element selected so far. If multiple elements are present, an exception is thrown.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    where (student.StudentID = 1)\n    select student\n    exactlyOne\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>exactlyOneOrDefault</code></td><td>Selects the single, specific element of those selected so far, or a default value if that element is not found.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    where (student.StudentID = 1)\n    select student\n    exactlyOneOrDefault\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>headOrDefault</code></td><td>Selects the first element of those selected so far, or a default value if the sequence contains no elements.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    select student\n    headOrDefault\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>select</code></td><td>Projects each of the elements selected so far.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    select student\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>where</code></td><td>Selects elements based on a specified predicate.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    where (student.StudentID > 4)\n    select student\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>minBy</code></td><td>Selects a value for each element selected so far and returns the minimum resulting value.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    minBy student.StudentID\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>maxBy</code></td><td>Selects a value for each element selected so far and returns the maximum resulting value.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    maxBy student.StudentID\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>groupBy</code></td><td>Groups the elements selected so far according to a specified key selector.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    groupBy student.Age into g\n    select (g.Key, g.Count())\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>sortBy</code></td><td>Sorts the elements selected so far in ascending order by the given sorting key.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    sortBy student.Name\n    select student\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>sortByDescending</code></td><td>Sorts the elements selected so far in descending order by the given sorting key.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    sortByDescending student.Name\n    select student\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>thenBy</code></td><td>Performs a subsequent ordering of the elements selected so far in ascending order by the given sorting key. This operator may only be used after a <code>sortBy</code>, <code>sortByDescending</code>, <code>thenBy</code>, or <code>thenByDescending</code>.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    where student.Age.HasValue\n    sortBy student.Age.Value\n    thenBy student.Name\n    select student\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>thenByDescending</code></td><td>Performs a subsequent ordering of the elements selected so far in descending order by the given sorting key. This operator may only be used after a <code>sortBy</code>, <code>sortByDescending</code>, <code>thenBy</code>, or <code>thenByDescending</code>.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    where student.Age.HasValue\n    sortBy student.Age.Value\n    thenByDescending student.Name\n    select student\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>groupValBy</code></td><td>Selects a value for each element selected so far and groups the elements by the given key.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    groupValBy student.Name student.Age into g\n    select (g, g.Key, g.Count())\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>join</code></td><td>Correlates two sets of selected values based on matching keys. Note that the order of the keys around the = sign in a join expression is significant. In all joins, if the line is split after the <code>-&amp;gt;</code> symbol, the indentation must be indented at least as far as the keyword <code>for</code>.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    join selection in db.CourseSelection\n        on (student.StudentID = selection.StudentID)\n    select (student, selection)\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>groupJoin</code></td><td>Correlates two sets of selected values based on matching keys and groups the results. Note that the order of the keys around the = sign in a join expression is significant.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    groupJoin courseSelection in db.CourseSelection\n        on (student.StudentID = courseSelection.StudentID) into g\n    for courseSelection in g do\n    join course in db.Course\n        on (courseSelection.CourseID = course.CourseID)\n    select (student.Name, course.CourseName)\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>leftOuterJoin</code></td><td>Correlates two sets of selected values based on matching keys and groups the results. If any group is empty, a group with a single default value is used instead. Note that the order of the keys around the = sign in a join expression is significant.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    leftOuterJoin selection in db.CourseSelection\n        on (student.StudentID = selection.StudentID) into result\n    for selection in result.DefaultIfEmpty() do\n    select (student, selection)\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>sumByNullable</code></td><td>Selects a nullable value for each element selected so far and returns the sum of these values. If any nullable does not have a value, it is ignored.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    sumByNullable student.Age\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>minByNullable</code></td><td>Selects a nullable value for each element selected so far and returns the minimum of these values. If any nullable does not have a value, it is ignored.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    minByNullable student.Age\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>maxByNullable</code></td><td>Selects a nullable value for each element selected so far and returns the maximum of these values. If any nullable does not have a value, it is ignored.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    maxByNullable student.Age\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>averageByNullable</code></td><td>Selects a nullable value for each element selected so far and returns the average of these values. If any nullable does not have a value, it is ignored.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    averageByNullable (Nullable.float student.Age)\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>averageBy</code></td><td>Selects a value for each element selected so far and returns the average of these values.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    averageBy (float student.StudentID)\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>distinct</code></td><td>Selects distinct elements from the elements selected so far.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    join selection in db.CourseSelection\n        on (student.StudentID = selection.StudentID)\n    distinct       \n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>exists</code></td><td>Determines whether any element selected so far satisfies a condition.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    where\n        (query {\n            for courseSelection in db.CourseSelection do\n            exists (courseSelection.StudentID = student.StudentID) })\n    select student\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>find</code></td><td>Selects the first element selected so far that satisfies a specified condition.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    find (student.Name = \"Abercrombie, Kim\")\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>all</code></td><td>Determines whether all elements selected so far satisfy a condition.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    all (SqlMethods.Like(student.Name, \"%,%\"))\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>head</code></td><td>Selects the first element from those selected so far.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    head\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>nth</code></td><td>Selects the element at a specified index amongst those selected so far.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for numbers in data do\n    nth 3\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>skip</code></td><td>Bypasses a specified number of the elements selected so far and then selects the remaining elements.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    skip 1\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>skipWhile</code></td><td>Bypasses elements in a sequence as long as a specified condition is true and then selects the remaining elements.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for number in data do\n    skipWhile (number < 3)=\"\" select=\"\" student=\"\" }=\"\"></code></pre>\n\n</td></tr><tr>\n<td><code>sumBy</code></td><td>Selects a value for each element selected so far and returns the sum of these values.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    sumBy student.StudentID\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>take</code></td><td>Selects a specified number of contiguous elements from those selected so far.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    select student\n    take 2\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>takeWhile</code></td><td>Selects elements from a sequence as long as a specified condition is true, and then skips the remaining elements.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for number in data do\n    takeWhile (number < 10)=\"\" }=\"\"></code></pre>\n\n</td></tr><tr>\n<td><code>sortByNullable</code></td><td>Sorts the elements selected so far in ascending order by the given nullable sorting key.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    sortByNullable student.Age\n    select student\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>sortByNullableDescending</code></td><td>Sorts the elements selected so far in descending order by the given nullable sorting key.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    sortByNullableDescending student.Age\n    select student\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>thenByNullable</code></td><td>Performs a subsequent ordering of the elements selected so far in ascending order by the given nullable sorting key. This operator may only be used immediately after a <code>sortBy</code>, <code>sortByDescending</code>, <code>thenBy</code>, or <code>thenByDescending</code>, or their nullable variants.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    sortBy student.Name\n    thenByNullable student.Age\n    select student\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>thenByNullableDescending</code></td><td>Performs a subsequent ordering of the elements selected so far in descending order by the given nullable sorting key. This operator may only be used immediately after a <code>sortBy</code>, <code>sortByDescending</code>, <code>thenBy</code>, or <code>thenByDescending</code>, or their nullable variants.<br><br>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    sortBy student.Name\n    thenByNullableDescending student.Age\n    select student\n}\n</code></pre>\n\n</td></tr>\n</table>\n\n<h2 id=\"comparison-of-transact-sql-and-f-query-expressions\">Comparison of Transact-SQL and F# Query Expressions</h2>\n<p>The following table shows some common Transact-SQL queries and their equivalents in F#. The code in this table also assumes the same database as the previous table and the same initial code to set up the type provider.</p>\n<h3 id=\"table-2-transact-sql-and-f-query-expressions\">Table 2. Transact-SQL and F# Query Expressions</h3>\n<table style=\"width:100%\">\n  <tr>\n    <th>Transact-SQL (not case sensitive)</th>\n    <th>F# Query Expression (case sensitive)</th>\n  </tr>\n<tr><td>\nSelect all fields from table.<br>\n\n<pre><code class=\"lang-sql\">SELECT * FROM Student\n</code></pre>\n\n</td><td>\n<pre><code class=\"lang-fsharp\">// All students.\nquery {\n    for student in db.Student do\n    select student\n}\n</code></pre>\n\n</td></tr>\n<tr><td>\nCount records in a table.<br>\n\n<pre><code class=\"lang-sql\">SELECT COUNT( * ) FROM Student\n</code></pre>\n\n</td><td>\n\n<pre><code class=\"lang-fsharp\">// Count of students.\nquery {\n    for student in db.Student do       \n    count\n}\n</code></pre>\n\n</td></tr><tr>\n<td><code>EXISTS</code>\n<br>\n\n<pre><code class=\"lang-sql\">SELECT * FROM Student\nWHERE EXISTS\n  (SELECT * FROM CourseSelection\n   WHERE CourseSelection.StudentID = Student.StudentID)\n</code></pre>\n</td>\n\n<td>\n\n<pre><code class=\"lang-fsharp\">// Find students who have signed up at least one course.\nquery {\n    for student in db.Student do\n    where\n        (query {\n            for courseSelection in db.CourseSelection do\n            exists (courseSelection.StudentID = student.StudentID) })\n    select student\n}\n</code></pre>\n\n</td></tr><tr>\n<td>Grouping<br>\n\n<pre><code class=\"lang-sql\">SELECT Student.Age, COUNT( * ) FROM Student\nGROUP BY Student.Age\n</code></pre>\n\n</td><td>\n\n<pre><code class=\"lang-fsharp\">// Group by age and count.\nquery {\n    for n in db.Student do\n    groupBy n.Age into g\n    select (g.Key, g.Count())\n}\n// OR\nquery {\n    for n in db.Student do\n    groupValBy n.Age n.Age into g\n    select (g.Key, g.Count())\n}\n</code></pre>\n</td></tr><tr><td>\nGrouping with condition.<br>\n\n<pre><code class=\"lang-sql\">SELECT Student.Age, COUNT( * )\nFROM Student\nGROUP BY Student.Age\nHAVING student.Age > 10\n</code></pre>\n\n</td><td>\n\n<pre><code class=\"lang-fsharp\">// Group students by age where age > 10.\nquery {\n    for student in db.Student do\n    groupBy student.Age into g\n    where (g.Key.HasValue && g.Key.Value > 10)\n    select (g.Key, g.Count())\n}\n</code></pre>\n\n</td></tr><tr><td>\nGrouping with count condition.<br>\n\n<pre><code class=\"lang-sql\">SELECT Student.Age, COUNT( * )\nFROM Student\nGROUP BY Student.Age\nHAVING COUNT( * ) > 1\n</code></pre>\n\n</td><td>\n\n<pre><code class=\"lang-fsharp\">// Group students by age and count number of students\n// at each age with more than 1 student.\nquery {\n    for student in db.Student do\n    groupBy student.Age into group\n    where (group.Count() > 1)\n    select (group.Key, group.Count())\n}\n</code></pre>\n\n</td></tr><tr><td>\nGrouping, counting, and summing.<br>\n\n<pre><code class=\"lang-sql\">SELECT Student.Age, COUNT( * ), SUM(Student.Age) as total\nFROM Student\nGROUP BY Student.Age\n</code></pre>\n\n</td><td>\n\n<pre><code class=\"lang-fsharp\">// Group students by age and sum ages.\nquery {\n    for student in db.Student do\n    groupBy student.Age into g       \n    let total =\n        query {\n            for student in g do\n            sumByNullable student.Age\n        }\n    select (g.Key, g.Count(), total)\n}\n</code></pre>\n\n</td></tr><tr><td>\nGrouping, counting, and ordering by count.<br>\n\n<pre><code class=\"lang-sql\">SELECT Student.Age, COUNT( * ) as myCount\nFROM Student\nGROUP BY Student.Age\nHAVING COUNT( * ) > 1\nORDER BY COUNT( * ) DESC\n</code></pre>\n\n</td><td>\n\n<pre><code class=\"lang-fsharp\">// Group students by age, count number of students\n// at each age, and display all with count > 1\n// in descending order of count.\nquery {\n    for student in db.Student do\n    groupBy student.Age into g\n    where (g.Count() > 1)       \n    sortByDescending (g.Count())\n    select (g.Key, g.Count())\n}\n</code></pre>\n\n</td></tr><tr><td>\n<code>IN</code> a set of specified values<br>\n\n<pre><code class=\"lang-sql\">SELECT *\nFROM Student\nWHERE Student.StudentID IN (1, 2, 5, 10)\n</code></pre>\n\n</td><td>\n\n<pre><code class=\"lang-fsharp\">// Select students where studentID is one of a given list.\nlet idQuery =\n    query {\n        for id in [1; 2; 5; 10] do\n        select id\n    }\nquery {\n    for student in db.Student do\n    where (idQuery.Contains(student.StudentID))\n    select student\n}\n</code></pre>\n\n</td></tr><tr><td>\n<code>LIKE</code> and <code>TOP</code>.<br>\n\n<pre><code class=\"lang-sql\">-- '_e%' matches strings where the second character is 'e'\nSELECT TOP 2 * FROM Student\nWHERE Student.Name LIKE '_e%'\n</code></pre>\n\n</td><td>\n<pre><code class=\"lang-fsharp\">// Look for students with Name match _e% pattern and take first two.\nquery {\n    for student in db.Student do\n    where (SqlMethods.Like( student.Name, \"_e%\") )\n    select student\n    take 2\n}\n</code></pre>\n\n</td></tr><tr><td>\n<code>LIKE</code> with pattern match set.<br>\n\n<pre><code class=\"lang-sql\">-- '[abc]%' matches strings where the first character is\n-- 'a', 'b', 'c', 'A', 'B', or 'C'\nSELECT * FROM Student\nWHERE Student.Name LIKE '[abc]%'\n</code></pre>\n</td><td>\n\n<pre><code class=\"lang-fsharp\">query {\n    for student in db.Student do\n    where (SqlMethods.Like( student.Name, \"[abc]%\") )\n    select student \n}\n</code></pre>\n\n</td></tr><tr><td>\n<code>LIKE</code> with set exclusion pattern.<br>\n\n<pre><code class=\"lang-sql\">-- '[^abc]%' matches strings where the first character is\n-- not 'a', 'b', 'c', 'A', 'B', or 'C'\nSELECT * FROM Student\nWHERE Student.Name LIKE '[^abc]%'\n</code></pre>\n\n</td><td>\n\n<pre><code class=\"lang-fsharp\">// Look for students with name matching [^abc]%% pattern.\nquery {\n    for student in db.Student do\n    where (SqlMethods.Like( student.Name, \"[^abc]%\") )\n    select student\n}\n</code></pre>\n\n</td></tr><tr><td>\n<code>LIKE</code> on one field, but select a different field.<br>\n\n<pre><code class=\"lang-sql\">SELECT StudentID AS ID FROM Student\nWHERE Student.Name LIKE '[^abc]%'\n</code></pre>\n\n</td><td>\n\n<pre><code class=\"lang-fsharp\">query {\n    for n in db.Student do\n    where (SqlMethods.Like( n.Name, \"[^abc]%\") )\n    select n.StudentID   \n}\n</code></pre>\n\n</td></tr><tr><td><code>LIKE</code>, with substring search.<br>\n\n<pre><code class=\"lang-sql\">SELECT * FROM Student\nWHERE Student.Name like '%A%'\n</code></pre>\n\n</td><td>\n\n<pre><code class=\"lang-fsharp\">// Using Contains as a query filter.\nquery {\n    for student in db.Student do\n    where (student.Name.Contains(\"a\"))\n    select student\n}\n</code></pre>\n\n</td></tr><tr><td>\nSimple <code>JOIN</code> with two tables.<br>\n\n<pre><code class=\"lang-sql\">SELECT * FROM Student\nJOIN CourseSelection\nON Student.StudentID = CourseSelection.StudentID\n</code></pre>\n\n</td><td>\n\n<pre><code class=\"lang-fsharp\">// Join Student and CourseSelection tables.\nquery {\n    for student in db.Student do\n    join selection in db.CourseSelection\n        on (student.StudentID = selection.StudentID)\n    select (student, selection)\n}\n</code></pre>\n\n</td></tr><tr><td><code>LEFT JOIN</code> with two tables.<br>\n\n<pre><code class=\"lang-sql\">SELECT * FROM Student\nLEFT JOIN CourseSelection\nON Student.StudentID = CourseSelection.StudentID\n</code></pre>\n\n</td><td>\n\n<pre><code class=\"lang-fsharp\">//Left Join Student and CourseSelection tables.\nquery {\n    for student in db.Student do\n    leftOuterJoin selection in db.CourseSelection\n        on (student.StudentID = selection.StudentID) into result\n    for selection in result.DefaultIfEmpty() do\n    select (student, selection)\n}\n</code></pre>\n\n</td></tr><tr><td><code>JOIN</code> with <code>COUNT</code><br>\n\n<pre><code class=\"lang-sql\">SELECT COUNT( * ) FROM Student\nJOIN CourseSelection\nON Student.StudentID = CourseSelection.StudentID\n</code></pre>\n\n</td><td>\n\n<pre><code class=\"lang-fsharp\">// Join with count.\nquery {\n    for n in db.Student do\n    join e in db.CourseSelection\n        on (n.StudentID = e.StudentID)\n    count\n}\n</code></pre>\n\n</td></tr><tr><td><code>DISTINCT</code><br>\n\n<pre><code class=\"lang-sql\">SELECT DISTINCT StudentID FROM CourseSelection\n</code></pre>\n\n</td><td>\n\n<pre><code class=\"lang-fsharp\">// Join with distinct.\nquery {\n    for student in db.Student do\n    join selection in db.CourseSelection\n        on (student.StudentID = selection.StudentID)\n    distinct\n}\n</code></pre>\n\n</td></tr><tr><td>Distinct count.<br>\n\n<pre><code class=\"lang-sql\">SELECT DISTINCT COUNT(StudentID) FROM CourseSelection\n</code></pre>\n\n</td><td>\n\n<pre><code class=\"lang-fsharp\">// Join with distinct and count.\nquery {\n    for n in db.Student do\n    join e in db.CourseSelection\n        on (n.StudentID = e.StudentID)\n    distinct\n    count\n}\n</code></pre>\n\n</td></tr><tr><td><code>BETWEEN</code><br>\n\n<pre><code class=\"lang-sql\">SELECT * FROM Student\nWHERE Student.Age BETWEEN 10 AND 15\n</code></pre>\n\n</td><td>\n\n<pre><code class=\"lang-fsharp\">// Selecting students with ages between 10 and 15.\nquery {\n    for student in db.Student do\n    where (student.Age ?>= 10 && student.Age ?< 15)=\"\" select=\"\" student=\"\" }=\"\"></code></pre>\n\n</td></tr><tr><td><code>OR</code><br>\n\n<pre><code class=\"lang-sql\">SELECT * FROM Student\nWHERE Student.Age = 11 OR Student.Age = 12\n</code></pre>\n\n</td><td>\n\n<pre><code class=\"lang-fsharp\">// Selecting students with age that's either 11 or 12.\nquery {\n    for student in db.Student do\n    where (student.Age.Value = 11 &#124;&#124; student.Age.Value = 12)\n    select student\n}\n</code></pre>\n\n</td></tr><tr><td><code>OR</code> with ordering<br>\n\n<pre><code class=\"lang-sql\">SELECT * FROM Student\nWHERE Student.Age = 12 OR Student.Age = 13\nORDER BY Student.Age DESC\n</code></pre>\n\n</td><td>\n\n<pre><code class=\"lang-fsharp\">// Selecting students in a certain age range and sorting.\nquery {\n    for n in db.Student do\n    where (n.Age.Value = 12 &#124;&#124; n.Age.Value = 13)\n    sortByNullableDescending n.Age\n    select n\n}\n</code></pre>\n\n</td></tr><tr><td><code>TOP</code>, <code>OR</code>, and ordering.<br>\n\n<pre><code class=\"lang-sql\">SELECT TOP 2 student.Name FROM Student\nWHERE Student.Age = 11 OR Student.Age = 12\nORDER BY Student.Name DESC\n</code></pre>\n\n</td><td>\n\n<pre><code class=\"lang-fsharp\">// Selecting students with certain ages,\n// taking account of the possibility of nulls.\nquery {\n    for student in db.Student do\n    where\n        ((student.Age.HasValue && student.Age.Value = 11) &#124;&#124;\n         (student.Age.HasValue && student.Age.Value = 12))\n    sortByDescending student.Name\n    select student.Name\n    take 2\n}\n</code></pre>\n\n</td></tr><tr><td><code>UNION</code> of two queries.<br>\n\n<pre><code class=\"lang-sql\">SELECT * FROM Student\nUNION\nSELECT * FROM lastStudent\n</code></pre>\n\n</td><td>\n\n<pre><code class=\"lang-fsharp\">\nlet query1 =\n    query {\n        for n in db.Student do\n        select (n.Name, n.Age)\n    }\n\nlet query2 =\n    query {\n        for n in db.LastStudent do\n        select (n.Name, n.Age)\n    }\n\nquery2.Union (query1)\n</code></pre>\n\n</td></tr><tr><td>Intersection of two queries.<br>\n\n<pre><code class=\"lang-sql\">SELECT * FROM Student\nINTERSECT\nSELECT * FROM LastStudent\n</code></pre>\n</td><td>\n\n<pre><code class=\"lang-fsharp\">\nlet query1 =\n    query {\n        for n in db.Student do\n        select (n.Name, n.Age)\n    }\n\nlet query2 =\n    query {\n        for n in db.LastStudent do\n        select (n.Name, n.Age)\n    }\n\nquery1.Intersect(query2)\n</code></pre>\n\n</td></tr><tr><td><code>CASE</code> condition.<br>\n\n<pre><code class=\"lang-sql\">SELECT student.StudentID,\nCASE Student.Age\n  WHEN -1 THEN 100\n  ELSE Student.Age\nEND,\nStudent.Age\nFROM Student\n</code></pre>\n\n</td><td>\n<pre><code class=\"lang-fsharp\">// Using if statement to alter results for special value.\nquery {\n    for student in db.Student do\n    select\n        (if student.Age.HasValue && student.Age.Value = -1 then\n             (student.StudentID, System.Nullable<int>(100), student.Age)\n         else (student.StudentID, student.Age, student.Age))\n}\n</int></code></pre>\n\n</td></tr><tr><td>Multiple cases.<br>\n\n<pre><code class=\"lang-sql\">SELECT Student.StudentID,\nCASE Student.Age\n  WHEN -1 THEN 100\n  WHEN 0 THEN 1000\n  ELSE Student.Age\nEND,\nStudent.Age\nFROM Student\n</code></pre>\n\n</td><td>\n\n<pre><code class=\"lang-fsharp\">// Using if statement to alter results for special values.\nquery {\n    for student in db.Student do\n    select\n        (if student.Age.HasValue && student.Age.Value = -1 then\n             (student.StudentID, System.Nullable<int>(100), student.Age)\n         elif student.Age.HasValue && student.Age.Value = 0 then\n             (student.StudentID, System.Nullable<int>(1000), student.Age)\n         else (student.StudentID, student.Age, student.Age))\n}\n</int></int></code></pre>\n\n</td></tr><tr><td>Multiple tables.<br>\n\n<pre><code class=\"lang-sql\">SELECT * FROM Student, Course\n</code></pre>\n\n</td><td>\n\n<pre><code class=\"lang-fsharp\">// Multiple table select.\nquery {\n    for student in db.Student do\n    for course in db.Course do\n    select (student, course)\n}\n</code></pre>\n\n</td></tr><tr><td>Multiple joins.<br>\n\n<pre><code class=\"lang-sql\">SELECT Student.Name, Course.CourseName\nFROM Student\nJOIN CourseSelection\nON CourseSelection.StudentID = Student.StudentID\nJOIN Course\nON Course.CourseID = CourseSelection.CourseID\n</code></pre>\n\n</td><td>\n\n<pre><code class=\"lang-fsharp\">// Multiple joins.\nquery {\n    for student in db.Student do\n    join courseSelection in db.CourseSelection\n        on (student.StudentID = courseSelection.StudentID)\n    join course in db.Course\n        on (courseSelection.CourseID = course.CourseID)\n    select (student.Name, course.CourseName)\n}\n</code></pre>\n\n</td></tr><tr><td>Multiple left outer joins.<br>\n\n<pre><code class=\"lang-sql\">SELECT Student.Name, Course.CourseName\nFROM Student\nLEFT OUTER JOIN CourseSelection\nON CourseSelection.StudentID = Student.StudentID\nLEFT OUTER JOIN Course\nON Course.CourseID = CourseSelection.CourseID\n</code></pre>\n\n</td><td>\n\n<pre><code class=\"lang-fsharp\">// Using leftOuterJoin with multiple joins.\nquery {\n    for student in db.Student do\n    leftOuterJoin courseSelection in db.CourseSelection\n        on (student.StudentID = courseSelection.StudentID) into g1\n    for courseSelection in g1.DefaultIfEmpty() do\n    leftOuterJoin course in db.Course\n        on (courseSelection.CourseID = course.CourseID) into g2\n    for course in g2.DefaultIfEmpty() do\n    select (student.Name, course.CourseName)\n}\n</code></pre>\n\n</td></tr></table>\n\n<p>The following code can be used to create the sample database for these examples.</p>\n<pre><code class=\"lang-sql\">SET ANSI_NULLS ON\nGO\nSET QUOTED_IDENTIFIER ON\nGO\n\nUSE [master];\nGO\n\nIF EXISTS (SELECT * FROM sys.databases WHERE name = 'MyDatabase')\nDROP DATABASE MyDatabase;\nGO\n\n-- Create the MyDatabase database.\nCREATE DATABASE MyDatabase COLLATE SQL_Latin1_General_CP1_CI_AS;\nGO\n\n-- Specify a simple recovery model\n-- to keep the log growth to a minimum.\nALTER DATABASE MyDatabase\nSET RECOVERY SIMPLE;\nGO\n\nUSE MyDatabase;\nGO\n\nCREATE TABLE [dbo].[Course] (\n[CourseID]   INT           NOT NULL,\n[CourseName] NVARCHAR (50) NOT NULL,\nPRIMARY KEY CLUSTERED ([CourseID] ASC)\n);\n\nCREATE TABLE [dbo].[Student] (\n[StudentID] INT           NOT NULL,\n[Name]      NVARCHAR (50) NOT NULL,\n[Age]       INT           NULL,\nPRIMARY KEY CLUSTERED ([StudentID] ASC)\n);\n\nCREATE TABLE [dbo].[CourseSelection] (\n[ID]        INT NOT NULL,\n[StudentID] INT NOT NULL,\n[CourseID]  INT NOT NULL,\nPRIMARY KEY CLUSTERED ([ID] ASC),\nCONSTRAINT [FK_CourseSelection_ToTable] FOREIGN KEY ([StudentID]) REFERENCES [dbo].[Student] ([StudentID]) ON DELETE NO ACTION ON UPDATE NO ACTION,\nCONSTRAINT [FK_CourseSelection_Course_1] FOREIGN KEY ([CourseID]) REFERENCES [dbo].[Course] ([CourseID]) ON DELETE NO ACTION ON UPDATE NO ACTION\n);\n\nCREATE TABLE [dbo].[LastStudent] (\n[StudentID] INT           NOT NULL,\n[Name]      NVARCHAR (50) NOT NULL,\n[Age]       INT           NULL,\nPRIMARY KEY CLUSTERED ([StudentID] ASC)\n);\n\n-- Insert data into the tables.\nUSE MyDatabase\nINSERT INTO Course (CourseID, CourseName)\nVALUES(1, 'Algebra I');\nINSERT INTO Course (CourseID, CourseName)\nVALUES(2, 'Trigonometry');\nINSERT INTO Course (CourseID, CourseName)\nVALUES(3, 'Algebra II');\nINSERT INTO Course (CourseID, CourseName)\nVALUES(4, 'History');\nINSERT INTO Course (CourseID, CourseName)\nVALUES(5, 'English');\nINSERT INTO Course (CourseID, CourseName)\nVALUES(6, 'French');\nINSERT INTO Course (CourseID, CourseName)\nVALUES(7, 'Chinese');\n\nINSERT INTO Student (StudentID, Name, Age)\nVALUES(1, 'Abercrombie, Kim', 10);\nINSERT INTO Student (StudentID, Name, Age)\nVALUES(2, 'Abolrous, Hazen', 14);\nINSERT INTO Student (StudentID, Name, Age)\nVALUES(3, 'Hance, Jim', 12);\nINSERT INTO Student (StudentID, Name, Age)\nVALUES(4, 'Adams, Terry', 12);\nINSERT INTO Student (StudentID, Name, Age)\nVALUES(5, 'Hansen, Claus', 11);\nINSERT INTO Student (StudentID, Name, Age)\nVALUES(6, 'Penor, Lori', 13);\nINSERT INTO Student (StudentID, Name, Age)\nVALUES(7, 'Perham, Tom', 12);\nINSERT INTO Student (StudentID, Name, Age)\nVALUES(8, 'Peng, Yun-Feng', NULL);\n\nINSERT INTO CourseSelection (ID, StudentID, CourseID)\nVALUES(1, 1, 2);\nINSERT INTO CourseSelection (ID, StudentID, CourseID)\nVALUES(2, 1, 3);\nINSERT INTO CourseSelection (ID, StudentID, CourseID)\nVALUES(3, 1, 5);\nINSERT INTO CourseSelection (ID, StudentID, CourseID)\nVALUES(4, 2, 2);\nINSERT INTO CourseSelection (ID, StudentID, CourseID)\nVALUES(5, 2, 5);\nINSERT INTO CourseSelection (ID, StudentID, CourseID)\nVALUES(6, 2, 6);\nINSERT INTO CourseSelection (ID, StudentID, CourseID)\nVALUES(7, 2, 3);\nINSERT INTO CourseSelection (ID, StudentID, CourseID)\nVALUES(8, 3, 2);\nINSERT INTO CourseSelection (ID, StudentID, CourseID)\nVALUES(9, 3, 1);\nINSERT INTO CourseSelection (ID, StudentID, CourseID)\nVALUES(10, 4, 2);\nINSERT INTO CourseSelection (ID, StudentID, CourseID)\nVALUES(11, 4, 5);\nINSERT INTO CourseSelection (ID, StudentID, CourseID)\nVALUES(12, 4, 2);\nINSERT INTO CourseSelection (ID, StudentID, CourseID)\nVALUES(13, 5, 3);\nINSERT INTO CourseSelection (ID, StudentID, CourseID)\nVALUES(14, 5, 2);\nINSERT INTO CourseSelection (ID, StudentID, CourseID)\nVALUES(15, 7, 3);\n</code></pre>\n\n<p>The following code contains  the sample code that appears in this topic.</p>\n<pre class=\"loading\"><code class=\"lang-fsharp\">#if INTERACTIVE\n#r &quot;FSharp.Data.TypeProviders.dll&quot;\n#r &quot;System.Data.dll&quot;\n#r &quot;System.Data.Linq.dll&quot;\n#endif\nopen System\nopen Microsoft.FSharp.Data.TypeProviders\nopen System.Data.Linq.SqlClient\nopen System.Linq\n\ntype schema = SqlDataConnection&lt;&quot;Data Source=SERVER\\INSTANCE;Initial Catalog=MyDatabase;Integrated Security=SSPI;&quot;&gt;\n\nlet db = schema.GetDataContext()\n\nlet data = [1; 5; 7; 11; 18; 21]\n\ntype Nullable&lt;&#39;T when &#39;T : ( new : unit -&gt; &#39;T) and &#39;T : struct and &#39;T :&gt; ValueType &gt; with\n    member this.Print() =\n        if this.HasValue then this.Value.ToString()\n        else &quot;NULL&quot;\n\nprintfn &quot;\\ncontains query operator&quot;\nquery {\n    for student in db.Student do\n    select student.Age.Value\n    contains 11\n}\n|&gt; printfn &quot;Is at least one student age 11? %b&quot;\n\nprintfn &quot;\\ncount query operator&quot;\nquery {\n    for student in db.Student do\n    select student\n    count\n}\n|&gt; printfn &quot;Number of students: %d&quot;\n\nprintfn &quot;\\nlast query operator.&quot;\nlet num =\n    query {\n        for number in data do\n        sortBy number\n        last\n    }\nprintfn &quot;Last number: %d&quot; num\n\n\nopen Microsoft.FSharp.Linq\n\nprintfn &quot;\\nlastOrDefault query operator.&quot;\nquery {\n    for number in data do\n    sortBy number\n    lastOrDefault\n}\n|&gt; printfn &quot;lastOrDefault: %d&quot;\n\nprintfn &quot;\\nexactlyOne query operator.&quot;\nlet student2 =\n    query {\n        for student in db.Student do\n        where (student.StudentID = 1)\n        select student\n        exactlyOne\n    }\nprintfn &quot;Student with StudentID = 1 is %s&quot; student2.Name\n\nprintfn &quot;\\nexactlyOneOrDefault query operator.&quot;\nlet student3 =\n    query {\n        for student in db.Student do\n        where (student.StudentID = 1)\n        select student\n        exactlyOneOrDefault\n    }\nprintfn &quot;Student with StudentID = 1 is %s&quot; student3.Name\n\nprintfn &quot;\\nheadOrDefault query operator.&quot;\nlet student4 =\n    query {\n        for student in db.Student do\n        select student\n        headOrDefault\n    }\nprintfn &quot;head student is %s&quot; student4.Name\n\nprintfn &quot;\\nselect query operator.&quot;\nquery {\n    for student in db.Student do\n    select student\n}\n|&gt; Seq.iter (fun student -&gt; printfn &quot;StudentID, Name: %d %s&quot; student.StudentID student.Name)\n\nprintfn &quot;\\nwhere query operator.&quot;\nquery {\n    for student in db.Student do\n    where (student.StudentID &gt; 4)\n    select student\n}\n|&gt; Seq.iter (fun student -&gt; printfn &quot;StudentID, Name: %d %s&quot; student.StudentID student.Name)\n\nprintfn &quot;\\nminBy query operator.&quot;\nlet student5 =\n    query {\n        for student in db.Student do\n        minBy student.StudentID\n    }\n\nprintfn &quot;\\nmaxBy query operator.&quot;\nlet student6 =\n    query {\n        for student in db.Student do\n        maxBy student.StudentID\n    }\n\nprintfn &quot;\\ngroupBy query operator.&quot;\nquery {\n    for student in db.Student do\n    groupBy student.Age into g\n    select (g.Key, g.Count())\n}\n|&gt; Seq.iter (fun (age, count) -&gt; printfn &quot;Age: %s Count at that age: %d&quot; (age.Print()) count)\n\nprintfn &quot;\\nsortBy query operator.&quot;\nquery {\n    for student in db.Student do\n    sortBy student.Name\n    select student\n}\n|&gt; Seq.iter (fun student -&gt; printfn &quot;StudentID, Name: %d %s&quot; student.StudentID student.Name)\n\nprintfn &quot;\\nsortByDescending query operator.&quot;\nquery {\n    for student in db.Student do\n    sortByDescending student.Name\n    select student\n}\n|&gt; Seq.iter (fun student -&gt; printfn &quot;StudentID, Name: %d %s&quot; student.StudentID student.Name)\n\nprintfn &quot;\\nthenBy query operator.&quot;\nquery {\n    for student in db.Student do\n    where student.Age.HasValue\n    sortBy student.Age.Value\n    thenBy student.Name\n    select student\n}\n|&gt; Seq.iter (fun student -&gt; printfn &quot;StudentID, Name: %d %s&quot; student.Age.Value student.Name)\n\nprintfn &quot;\\nthenByDescending query operator.&quot;\nquery {\n    for student in db.Student do\n    where student.Age.HasValue\n    sortBy student.Age.Value\n    thenByDescending student.Name\n    select student\n}\n|&gt; Seq.iter (fun student -&gt; printfn &quot;StudentID, Name: %d %s&quot; student.Age.Value student.Name)\n\nprintfn &quot;\\ngroupValBy query operator.&quot;\nquery {\n    for student in db.Student do\n    groupValBy student.Name student.Age into g\n    select (g, g.Key, g.Count())\n}\n|&gt; Seq.iter (fun (group, age, count) -&gt;\n    printfn &quot;Age: %s Count at that age: %d&quot; (age.Print()) count\n    group |&gt; Seq.iter (fun name -&gt; printfn &quot;Name: %s&quot; name))\n\nprintfn &quot;\\n sumByNullable query operator&quot;\nquery {\n    for student in db.Student do\n    sumByNullable student.Age\n}\n|&gt; (fun sum -&gt; printfn &quot;Sum of ages: %s&quot; (sum.Print()))\n\nprintfn &quot;\\n minByNullable&quot;\nquery {\n    for student in db.Student do\n    minByNullable student.Age\n}\n|&gt; (fun age -&gt; printfn &quot;Minimum age: %s&quot; (age.Print()))\n\nprintfn &quot;\\n maxByNullable&quot;\nquery {\n    for student in db.Student do\n    maxByNullable student.Age\n}\n|&gt; (fun age -&gt; printfn &quot;Maximum age: %s&quot; (age.Print()))\n\nprintfn &quot;\\n averageBy&quot;\nquery {\n    for student in db.Student do\n    averageBy (float student.StudentID)\n}\n|&gt; printfn &quot;Average student ID: %f&quot;\n\nprintfn &quot;\\n averageByNullable&quot;\nquery {\n    for student in db.Student do\n    averageByNullable (Nullable.float student.Age)\n}\n|&gt; (fun avg -&gt; printfn &quot;Average age: %s&quot; (avg.Print()))\n\nprintfn &quot;\\n find query operator&quot;\nquery {\n    for student in db.Student do\n    find (student.Name = &quot;Abercrombie, Kim&quot;)\n}\n|&gt; (fun student -&gt; printfn &quot;Found a match with StudentID = %d&quot; student.StudentID)\n\nprintfn &quot;\\n all query operator&quot;\nquery {\n    for student in db.Student do\n    all (SqlMethods.Like(student.Name, &quot;%,%&quot;))\n}\n|&gt; printfn &quot;Do all students have a comma in the name? %b&quot;\n\nprintfn &quot;\\n head query operator&quot;\nquery {\n    for student in db.Student do\n    head\n}\n|&gt; (fun student -&gt; printfn &quot;Found the head student with StudentID = %d&quot; student.StudentID)\n\nprintfn &quot;\\n nth query operator&quot;\nquery {\n    for numbers in data do\n    nth 3\n}\n|&gt; printfn &quot;Third number is %d&quot;\n\nprintfn &quot;\\n skip query operator&quot;\nquery {\n    for student in db.Student do\n    skip 1\n}\n|&gt; Seq.iter (fun student -&gt; printfn &quot;StudentID = %d&quot; student.StudentID)\n\nprintfn &quot;\\n skipWhile query operator&quot;\nquery {\n    for number in data do\n    skipWhile (number &lt; 3)\n    select number\n}\n|&gt; Seq.iter (fun number -&gt; printfn &quot;Number = %d&quot; number)\n\n\nprintfn &quot;\\n sumBy query operator&quot;\nquery {\n    for student in db.Student do\n    sumBy student.StudentID\n}\n|&gt; printfn &quot;Sum of student IDs: %d&quot;\n\nprintfn &quot;\\n take query operator&quot;\nquery {\n    for student in db.Student do\n    select student\n    take 2\n}\n|&gt; Seq.iter (fun student -&gt; printfn &quot;StudentID = %d&quot; student.StudentID)\n\nprintfn &quot;\\n takeWhile query operator&quot;\nquery {\n    for number in data do\n    takeWhile (number &lt; 10)\n}\n|&gt; Seq.iter (fun number -&gt; printfn &quot;Number = %d&quot; number)\n\nprintfn &quot;\\n sortByNullable query operator&quot;\nquery {\n    for student in db.Student do\n    sortByNullable student.Age\n    select student\n}\n|&gt; Seq.iter (fun student -&gt;\n    printfn &quot;StudentID, Name, Age: %d %s %s&quot; student.StudentID student.Name (student.Age.Print()))\n\nprintfn &quot;\\n sortByNullableDescending query operator&quot;\nquery {\n    for student in db.Student do\n    sortByNullableDescending student.Age\n    select student\n}\n|&gt; Seq.iter (fun student -&gt;\n    printfn &quot;StudentID, Name, Age: %d %s %s&quot; student.StudentID student.Name (student.Age.Print()))\n\nprintfn &quot;\\n thenByNullable query operator&quot;\nquery {\n    for student in db.Student do\n    sortBy student.Name\n    thenByNullable student.Age\n    select student\n}\n|&gt; Seq.iter (fun student -&gt;\n    printfn &quot;StudentID, Name, Age: %d %s %s&quot; student.StudentID student.Name (student.Age.Print()))\n\nprintfn &quot;\\n thenByNullableDescending query operator&quot;\nquery {\n    for student in db.Student do\n    sortBy student.Name\n    thenByNullableDescending student.Age\n    select student\n}\n|&gt; Seq.iter (fun student -&gt;\n    printfn &quot;StudentID, Name, Age: %d %s %s&quot; student.StudentID student.Name (student.Age.Print()))\n\nprintfn &quot;All students: &quot;\nquery {\n    for student in db.Student do\n    select student\n}\n|&gt; Seq.iter (fun student -&gt; printfn &quot;%s %d %s&quot; student.Name student.StudentID (student.Age.Print()))\n\nprintfn &quot;\\nCount of students: &quot;\nquery {\n    for student in db.Student do\n    count\n}\n|&gt; (fun count -&gt; printfn &quot;Student count: %d&quot; count)\n\nprintfn &quot;\\nExists.&quot;\nquery {\n    for student in db.Student do\n    where\n        (query {\n            for courseSelection in db.CourseSelection do\n            exists (courseSelection.StudentID = student.StudentID) })\n    select student\n}\n|&gt; Seq.iter (fun student -&gt; printfn &quot;%A&quot; student.Name)\n\nprintfn &quot;\\n Group by age and count&quot;\nquery {\n    for n in db.Student do\n    groupBy n.Age into g\n    select (g.Key, g.Count())\n}\n|&gt; Seq.iter (fun (age, count) -&gt; printfn &quot;%s %d&quot; (age.Print()) count)\n\nprintfn &quot;\\n Group value by age.&quot;\nquery {\n    for n in db.Student do\n    groupValBy n.Age n.Age into g\n    select (g.Key, g.Count())\n}\n|&gt; Seq.iter (fun (age, count) -&gt; printfn &quot;%s %d&quot; (age.Print()) count)\n\nprintfn &quot;\\nGroup students by age where age &gt; 10.&quot;\nquery {\n    for student in db.Student do\n    groupBy student.Age into g\n    where (g.Key.HasValue &amp;&amp; g.Key.Value &gt; 10)\n    select (g, g.Key)\n}\n|&gt; Seq.iter (fun (students, age) -&gt;\n    printfn &quot;Age: %s&quot; (age.Value.ToString())\n    students\n    |&gt; Seq.iter (fun student -&gt; printfn &quot;%s&quot; student.Name))\n\nprintfn &quot;\\nGroup students by age and print counts of number of students at each age with more than 1 student.&quot;\nquery {\n    for student in db.Student do\n    groupBy student.Age into group\n    where (group.Count() &gt; 1)\n    select (group.Key, group.Count())\n}\n|&gt; Seq.iter (fun (age, ageCount) -&gt;\n    printfn &quot;Age: %s Count: %d&quot; (age.Print()) ageCount)\n\nprintfn &quot;\\nGroup students by age and sum ages.&quot;\nquery {\n    for student in db.Student do\n    groupBy student.Age into g\n    let total = query { for student in g do sumByNullable student.Age }\n    select (g.Key, g.Count(), total)\n}\n|&gt; Seq.iter (fun (age, count, total) -&gt;\n    printfn &quot;Age: %d&quot; (age.GetValueOrDefault())\n    printfn &quot;Count: %d&quot; count\n    printfn &quot;Total years: %s&quot; (total.ToString()))\n\nprintfn &quot;\\nGroup students by age and count number of students at each age, and display all with count &gt; 1 in descending order of count.&quot;\nquery {\n    for student in db.Student do\n    groupBy student.Age into g\n    where (g.Count() &gt; 1)\n    sortByDescending (g.Count())\n    select (g.Key, g.Count())\n}\n|&gt; Seq.iter (fun (age, myCount) -&gt;\n    printfn &quot;Age: %s&quot; (age.Print())\n    printfn &quot;Count: %d&quot; myCount)\n\nprintfn &quot;\\n Select students from a set of IDs&quot;\nlet idList = [1; 2; 5; 10]\nlet idQuery =\n    query { for id in idList do select id }\nquery {\n    for student in db.Student do\n    where (idQuery.Contains(student.StudentID))\n    select student\n}\n|&gt; Seq.iter (fun student -&gt;\n    printfn &quot;Name: %s&quot; student.Name)\n\nprintfn &quot;\\nLook for students with Name match _e%% pattern and take first two.&quot;\nquery {\n    for student in db.Student do\n    where (SqlMethods.Like( student.Name, &quot;_e%&quot;) )\n    select student\n    take 2\n}\n|&gt; Seq.iter (fun student -&gt; printfn &quot;%s&quot; student.Name)\n\nprintfn &quot;\\nLook for students with Name matching [abc]%% pattern.&quot;\nquery {\n    for student in db.Student do\n    where (SqlMethods.Like( student.Name, &quot;[abc]%&quot;) )\n    select student\n}\n|&gt; Seq.iter (fun student -&gt; printfn &quot;%s&quot; student.Name)\n\nprintfn &quot;\\nLook for students with name matching [^abc]%% pattern.&quot;\nquery {\n    for student in db.Student do\n    where (SqlMethods.Like( student.Name, &quot;[^abc]%&quot;) )\n    select student\n}\n|&gt; Seq.iter (fun student -&gt; printfn &quot;%s&quot; student.Name)\n\nprintfn &quot;\\nLook for students with name matching [^abc]%% pattern and select ID.&quot;\nquery {\n    for n in db.Student do\n    where (SqlMethods.Like( n.Name, &quot;[^abc]%&quot;) )\n    select n.StudentID\n}\n|&gt; Seq.iter (fun id -&gt; printfn &quot;%d&quot; id)\n\nprintfn &quot;\\n Using Contains as a query filter.&quot;\nquery {\n    for student in db.Student do\n    where (student.Name.Contains(&quot;a&quot;))\n    select student\n}\n|&gt; Seq.iter (fun student -&gt; printfn &quot;%s&quot; student.Name)\n\nprintfn &quot;\\nSearching for names from a list.&quot;\nlet names = [|&quot;a&quot;;&quot;b&quot;;&quot;c&quot;|]\nquery {\n    for student in db.Student do\n    if names.Contains (student.Name) then select student\n}\n|&gt; Seq.iter (fun student -&gt; printfn &quot;%s&quot; student.Name)\n\nprintfn &quot;\\nJoin Student and CourseSelection tables.&quot;\nquery {\n    for student in db.Student do\n    join selection in db.CourseSelection\n        on (student.StudentID = selection.StudentID)\n    select (student, selection)\n}\n|&gt; Seq.iter (fun (student, selection) -&gt; printfn &quot;%d %s %d&quot; student.StudentID student.Name selection.CourseID)\n\nprintfn &quot;\\nLeft Join Student and CourseSelection tables.&quot;\nquery {\n    for student in db.Student do\n    leftOuterJoin selection in db.CourseSelection\n        on (student.StudentID = selection.StudentID) into result\n    for selection in result.DefaultIfEmpty() do\n    select (student, selection)\n}\n|&gt; Seq.iter (fun (student, selection) -&gt;\n    let selectionID, studentID, courseID =\n        match selection with\n        | null -&gt; &quot;NULL&quot;, &quot;NULL&quot;, &quot;NULL&quot;\n        | sel -&gt; (sel.ID.ToString(), sel.StudentID.ToString(), sel.CourseID.ToString())\n    printfn &quot;%d %s %d %s %s %s&quot; student.StudentID student.Name (student.Age.GetValueOrDefault()) selectionID studentID courseID)\n\nprintfn &quot;\\nJoin with count&quot;\nquery {\n    for n in db.Student do\n    join e in db.CourseSelection\n        on (n.StudentID = e.StudentID)\n    count\n}\n|&gt; printfn &quot;%d&quot;\n\nprintfn &quot;\\n Join with distinct.&quot;\nquery {\n    for student in db.Student do\n    join selection in db.CourseSelection\n        on (student.StudentID = selection.StudentID)\n    distinct\n}\n|&gt; Seq.iter (fun (student, selection) -&gt; printfn &quot;%s %d&quot; student.Name selection.CourseID)\n\nprintfn &quot;\\n Join with distinct and count.&quot;\nquery {\n    for n in db.Student do\n    join e in db.CourseSelection\n        on (n.StudentID = e.StudentID)\n    distinct\n    count\n}\n|&gt; printfn &quot;%d&quot;\n\nprintfn &quot;\\n Selecting students with age between 10 and 15.&quot;\nquery {\n    for student in db.Student do\n    where (student.Age.Value &gt;= 10 &amp;&amp; student.Age.Value &lt; 15)\n    select student\n}\n|&gt; Seq.iter (fun student -&gt; printfn &quot;%s&quot; student.Name)\n\nprintfn &quot;\\n Selecting students with age either 11 or 12.&quot;\nquery {\n    for student in db.Student do\n    where (student.Age.Value = 11 || student.Age.Value = 12)\n    select student\n}\n|&gt; Seq.iter (fun student -&gt; printfn &quot;%s&quot; student.Name)\n\nprintfn &quot;\\n Selecting students in a certain age range and sorting.&quot;\nquery {\n    for n in db.Student do\n    where (n.Age.Value = 12 || n.Age.Value = 13)\n    sortByNullableDescending n.Age\n    select n\n}\n|&gt; Seq.iter (fun student -&gt; printfn &quot;%s %s&quot; student.Name (student.Age.Print()))\n\nprintfn &quot;\\n Selecting students with certain ages, taking account of possibility of nulls.&quot;\nquery {\n    for student in db.Student do\n    where\n        ((student.Age.HasValue &amp;&amp; student.Age.Value = 11) ||\n         (student.Age.HasValue &amp;&amp; student.Age.Value = 12))\n    sortByDescending student.Name\n    select student.Name\n    take 2\n}\n|&gt; Seq.iter (fun name -&gt; printfn &quot;%s&quot; name)\n\nprintfn &quot;\\n Union of two queries.&quot;\nmodule Queries =\n    let query1 = query {\n        for n in db.Student do\n        select (n.Name, n.Age)\n    }\n\n    let query2 = query {\n        for n in db.LastStudent do\n        select (n.Name, n.Age)\n    }\n\n    query2.Union (query1)\n    |&gt; Seq.iter (fun (name, age) -&gt; printfn &quot;%s %s&quot; name (age.Print()))\n\nprintfn &quot;\\n Intersect of two queries.&quot;\nmodule Queries2 =\n    let query1 = query {\n        for n in db.Student do\n        select (n.Name, n.Age)\n    }\n\n    let query2 = query {\n        for n in db.LastStudent do\n        select (n.Name, n.Age)\n    }\n\n    query1.Intersect(query2)\n    |&gt; Seq.iter (fun (name, age) -&gt; printfn &quot;%s %s&quot; name (age.Print()))\n\nprintfn &quot;\\n Using if statement to alter results for special value.&quot;\nquery {\n    for student in db.Student do\n    select\n        (if student.Age.HasValue &amp;&amp; student.Age.Value = -1 then\n            (student.StudentID, System.Nullable&lt;int&gt;(100), student.Age)\n         else (student.StudentID, student.Age, student.Age))\n}\n|&gt; Seq.iter (fun (id, value, age) -&gt; printfn &quot;%d %s %s&quot; id (value.Print()) (age.Print()))\n\nprintfn &quot;\\n Using if statement to alter results special values.&quot;\nquery {\n    for student in db.Student do\n    select\n        (if student.Age.HasValue &amp;&amp; student.Age.Value = -1 then\n            (student.StudentID, System.Nullable&lt;int&gt;(100), student.Age)\n         elif student.Age.HasValue &amp;&amp; student.Age.Value = 0 then\n            (student.StudentID, System.Nullable&lt;int&gt;(100), student.Age)\n         else (student.StudentID, student.Age, student.Age))\n}\n|&gt; Seq.iter (fun (id, value, age) -&gt; printfn &quot;%d %s %s&quot; id (value.Print()) (age.Print()))\n\nprintfn &quot;\\n Multiple table select.&quot;\nquery {\n    for student in db.Student do\n    for course in db.Course do\n    select (student, course)\n}\n|&gt; Seq.iteri (fun index (student, course) -&gt;\n    if index = 0 then\n        printfn &quot;StudentID Name Age CourseID CourseName&quot;\n    printfn &quot;%d %s %s %d %s&quot; student.StudentID student.Name (student.Age.Print()) course.CourseID course.CourseName)\n\nprintfn &quot;\\nMultiple Joins&quot;\nquery {\n    for student in db.Student do\n    join courseSelection in db.CourseSelection\n        on (student.StudentID = courseSelection.StudentID)\n    join course in db.Course\n        on (courseSelection.CourseID = course.CourseID)\n    select (student.Name, course.CourseName)\n}\n|&gt; Seq.iter (fun (studentName, courseName) -&gt; printfn &quot;%s %s&quot; studentName courseName)\n\nprintfn &quot;\\nMultiple Left Outer Joins&quot;\nquery {\n    for student in db.Student do\n    leftOuterJoin courseSelection in db.CourseSelection\n        on (student.StudentID = courseSelection.StudentID) into g1\n    for courseSelection in g1.DefaultIfEmpty() do\n    leftOuterJoin course in db.Course\n        on (courseSelection.CourseID = course.CourseID) into g2\n    for course in g2.DefaultIfEmpty() do\n    select (student.Name, course.CourseName)\n}\n|&gt; Seq.iter (fun (studentName, courseName) -&gt; printfn &quot;%s %s&quot; studentName courseName)\n</code></pre><p>And here is the full output when this code is run in F# Interactive.</p>\n<pre class=\"loading\"><code>--&gt; Referenced &#39;C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\FSharp\\3.0\\Runtime\\v4.0\\Type Providers\\FSharp.Data.TypeProviders.dll&#39;\n\n\n--&gt; Referenced &#39;C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\System.Data.dll&#39;\n\n\n--&gt; Referenced &#39;C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\System.Data.Linq.dll&#39;\n\n\ncontains query operator\nBinding session to &#39;C:\\Users\\ghogen\\AppData\\Local\\Temp\\tmp5E3C.dll&#39;...\nBinding session to &#39;C:\\Users\\ghogen\\AppData\\Local\\Temp\\tmp611A.dll&#39;...\nIs at least one student age 11? true\n\ncount query operator\nNumber of students: 8\n\nlast query operator.\nLast number: 21\n\nlastOrDefault query operator.\nlastOrDefault: 21\n\nexactlyOne query operator.\nStudent with StudentID = 1 is Abercrombie, Kim\n\nexactlyOneOrDefault query operator.\nStudent with StudentID = 1 is Abercrombie, Kim\n\nheadOrDefault query operator.\nhead student is Abercrombie, Kim\n\nselect query operator.\nStudentID, Name: 1 Abercrombie, Kim\nStudentID, Name: 2 Abolrous, Hazen\nStudentID, Name: 3 Hance, Jim\nStudentID, Name: 4 Adams, Terry\nStudentID, Name: 5 Hansen, Claus\nStudentID, Name: 6 Penor, Lori\nStudentID, Name: 7 Perham, Tom\nStudentID, Name: 8 Peng, Yun-Feng\n\nwhere query operator.\nStudentID, Name: 5 Hansen, Claus\nStudentID, Name: 6 Penor, Lori\nStudentID, Name: 7 Perham, Tom\nStudentID, Name: 8 Peng, Yun-Feng\n\nminBy query operator.\n\nmaxBy query operator.\n\ngroupBy query operator.\nAge: NULL Count at that age: 1\nAge: 10 Count at that age: 1\nAge: 11 Count at that age: 1\nAge: 12 Count at that age: 3\nAge: 13 Count at that age: 1\nAge: 14 Count at that age: 1\n\nsortBy query operator.\nStudentID, Name: 1 Abercrombie, Kim\nStudentID, Name: 2 Abolrous, Hazen\nStudentID, Name: 4 Adams, Terry\nStudentID, Name: 3 Hance, Jim\nStudentID, Name: 5 Hansen, Claus\nStudentID, Name: 8 Peng, Yun-Feng\nStudentID, Name: 6 Penor, Lori\nStudentID, Name: 7 Perham, Tom\n\nsortByDescending query operator.\nStudentID, Name: 7 Perham, Tom\nStudentID, Name: 6 Penor, Lori\nStudentID, Name: 8 Peng, Yun-Feng\nStudentID, Name: 5 Hansen, Claus\nStudentID, Name: 3 Hance, Jim\nStudentID, Name: 4 Adams, Terry\nStudentID, Name: 2 Abolrous, Hazen\nStudentID, Name: 1 Abercrombie, Kim\n\nthenBy query operator.\nStudentID, Name: 10 Abercrombie, Kim\nStudentID, Name: 11 Hansen, Claus\nStudentID, Name: 12 Adams, Terry\nStudentID, Name: 12 Hance, Jim\nStudentID, Name: 12 Perham, Tom\nStudentID, Name: 13 Penor, Lori\nStudentID, Name: 14 Abolrous, Hazen\n\nthenByDescending query operator.\nStudentID, Name: 10 Abercrombie, Kim\nStudentID, Name: 11 Hansen, Claus\nStudentID, Name: 12 Perham, Tom\nStudentID, Name: 12 Hance, Jim\nStudentID, Name: 12 Adams, Terry\nStudentID, Name: 13 Penor, Lori\nStudentID, Name: 14 Abolrous, Hazen\n\ngroupValBy query operator.\nAge: NULL Count at that age: 1\nName: Peng, Yun-Feng\nAge: 10 Count at that age: 1\nName: Abercrombie, Kim\nAge: 11 Count at that age: 1\nName: Hansen, Claus\nAge: 12 Count at that age: 3\nName: Hance, Jim\nName: Adams, Terry\nName: Perham, Tom\nAge: 13 Count at that age: 1\nName: Penor, Lori\nAge: 14 Count at that age: 1\nName: Abolrous, Hazen\n\nsumByNullable query operator\nSum of ages: 84\n\nminByNullable\nMinimum age: 10\n\nmaxByNullable\nMaximum age: 14\n\naverageBy\nAverage student ID: 4.500000\n\naverageByNullable\nAverage age: 12\n\nfind query operator\nFound a match with StudentID = 1\n\nall query operator\nDo all students have a comma in the name? true\n\nhead query operator\nFound the head student with StudentID = 1\n\nnth query operator\nThird number is 11\n\nskip query operator\nStudentID = 2\nStudentID = 3\nStudentID = 4\nStudentID = 5\nStudentID = 6\nStudentID = 7\nStudentID = 8\n\nskipWhile query operator\nNumber = 5\nNumber = 7\nNumber = 11\nNumber = 18\nNumber = 21\n\nsumBy query operator\nSum of student IDs: 36\n\ntake query operator\nStudentID = 1\nStudentID = 2\n\ntakeWhile query operator\nNumber = 1\nNumber = 5\nNumber = 7\n\nsortByNullable query operator\nStudentID, Name, Age: 8 Peng, Yun-Feng NULL\nStudentID, Name, Age: 1 Abercrombie, Kim 10\nStudentID, Name, Age: 5 Hansen, Claus 11\nStudentID, Name, Age: 7 Perham, Tom 12\nStudentID, Name, Age: 3 Hance, Jim 12\nStudentID, Name, Age: 4 Adams, Terry 12\nStudentID, Name, Age: 6 Penor, Lori 13\nStudentID, Name, Age: 2 Abolrous, Hazen 14\n\nsortByNullableDescending query operator\nStudentID, Name, Age: 2 Abolrous, Hazen 14\nStudentID, Name, Age: 6 Penor, Lori 13\nStudentID, Name, Age: 7 Perham, Tom 12\nStudentID, Name, Age: 3 Hance, Jim 12\nStudentID, Name, Age: 4 Adams, Terry 12\nStudentID, Name, Age: 5 Hansen, Claus 11\nStudentID, Name, Age: 1 Abercrombie, Kim 10\nStudentID, Name, Age: 8 Peng, Yun-Feng NULL\n\nthenByNullable query operator\nStudentID, Name, Age: 1 Abercrombie, Kim 10\nStudentID, Name, Age: 2 Abolrous, Hazen 14\nStudentID, Name, Age: 4 Adams, Terry 12\nStudentID, Name, Age: 3 Hance, Jim 12\nStudentID, Name, Age: 5 Hansen, Claus 11\nStudentID, Name, Age: 8 Peng, Yun-Feng NULL\nStudentID, Name, Age: 6 Penor, Lori 13\nStudentID, Name, Age: 7 Perham, Tom 12\n\nthenByNullableDescending query operator\nStudentID, Name, Age: 1 Abercrombie, Kim 10\nStudentID, Name, Age: 2 Abolrous, Hazen 14\nStudentID, Name, Age: 4 Adams, Terry 12\nStudentID, Name, Age: 3 Hance, Jim 12\nStudentID, Name, Age: 5 Hansen, Claus 11\nStudentID, Name, Age: 8 Peng, Yun-Feng NULL\nStudentID, Name, Age: 6 Penor, Lori 13\nStudentID, Name, Age: 7 Perham, Tom 12\nAll students:\nAbercrombie, Kim 1 10\nAbolrous, Hazen 2 14\nHance, Jim 3 12\nAdams, Terry 4 12\nHansen, Claus 5 11\nPenor, Lori 6 13\nPerham, Tom 7 12\nPeng, Yun-Feng 8 NULL\n\nCount of students:\nStudent count: 8\n\nExists.\n&quot;Abercrombie, Kim&quot;\n&quot;Abolrous, Hazen&quot;\n&quot;Hance, Jim&quot;\n&quot;Adams, Terry&quot;\n&quot;Hansen, Claus&quot;\n&quot;Perham, Tom&quot;\n\nGroup by age and count\nNULL 1\n10 1\n11 1\n12 3\n13 1\n14 1\n\nGroup value by age.\nNULL 1\n10 1\n11 1\n12 3\n13 1\n14 1\n\nGroup students by age where age &gt; 10.\nAge: 11\nHansen, Claus\nAge: 12\nHance, Jim\nAdams, Terry\nPerham, Tom\nAge: 13\nPenor, Lori\nAge: 14\nAbolrous, Hazen\n\nGroup students by age and print counts of number of students at each age with more than 1 student.\nAge: 12 Count: 3\n\nGroup students by age and sum ages.\nAge: 0\nCount: 1\nTotal years:\nAge: 10\nCount: 1\nTotal years: 10\nAge: 11\nCount: 1\nTotal years: 11\nAge: 12\nCount: 3\nTotal years: 36\nAge: 13\nCount: 1\nTotal years: 13\nAge: 14\nCount: 1\nTotal years: 14\n\nGroup students by age and count number of students at each age, and display all with count &gt; 1 in descending order of count.\nAge: 12\nCount: 3\n\nSelect students from a set of IDs\nName: Abercrombie, Kim\nName: Abolrous, Hazen\nName: Hansen, Claus\n\nLook for students with Name match _e% pattern and take first two.\nPenor, Lori\nPerham, Tom\n\nLook for students with Name matching [abc]% pattern.\nAbercrombie, Kim\nAbolrous, Hazen\nAdams, Terry\n\nLook for students with name matching [^abc]% pattern.\nHance, Jim\nHansen, Claus\nPenor, Lori\nPerham, Tom\nPeng, Yun-Feng\n\nLook for students with name matching [^abc]% pattern and select ID.\n3\n5\n6\n7\n8\n\nUsing Contains as a query filter.\nAbercrombie, Kim\nAbolrous, Hazen\nHance, Jim\nAdams, Terry\nHansen, Claus\nPerham, Tom\n\nSearching for names from a list.\n\nJoin Student and CourseSelection tables.\n2 Abolrous, Hazen 2\n3 Hance, Jim 3\n5 Hansen, Claus 5\n2 Abolrous, Hazen 2\n5 Hansen, Claus 5\n6 Penor, Lori 6\n3 Hance, Jim 3\n2 Abolrous, Hazen 2\n1 Abercrombie, Kim 1\n2 Abolrous, Hazen 2\n5 Hansen, Claus 5\n2 Abolrous, Hazen 2\n3 Hance, Jim 3\n2 Abolrous, Hazen 2\n3 Hance, Jim 3\n\nLeft Join Student and CourseSelection tables.\n1 Abercrombie, Kim 10 9 3 1\n2 Abolrous, Hazen 14 1 1 2\n2 Abolrous, Hazen 14 4 2 2\n2 Abolrous, Hazen 14 8 3 2\n2 Abolrous, Hazen 14 10 4 2\n2 Abolrous, Hazen 14 12 4 2\n2 Abolrous, Hazen 14 14 5 2\n3 Hance, Jim 12 2 1 3\n3 Hance, Jim 12 7 2 3\n3 Hance, Jim 12 13 5 3\n3 Hance, Jim 12 15 7 3\n4 Adams, Terry 12 NULL NULL NULL\n5 Hansen, Claus 11 3 1 5\n5 Hansen, Claus 11 5 2 5\n5 Hansen, Claus 11 11 4 5\n6 Penor, Lori 13 6 2 6\n7 Perham, Tom 12 NULL NULL NULL\n8 Peng, Yun-Feng 0 NULL NULL NULL\n\nJoin with count\n15\n\nJoin with distinct.\nAbercrombie, Kim 2\nAbercrombie, Kim 3\nAbercrombie, Kim 5\nAbolrous, Hazen 2\nAbolrous, Hazen 5\nAbolrous, Hazen 6\nAbolrous, Hazen 3\nHance, Jim 2\nHance, Jim 1\nAdams, Terry 2\nAdams, Terry 5\nAdams, Terry 2\nHansen, Claus 3\nHansen, Claus 2\nPerham, Tom 3\n\nJoin with distinct and count.\n15\n\nSelecting students with age between 10 and 15.\nAbercrombie, Kim\nAbolrous, Hazen\nHance, Jim\nAdams, Terry\nHansen, Claus\nPenor, Lori\nPerham, Tom\n\nSelecting students with age either 11 or 12.\nHance, Jim\nAdams, Terry\nHansen, Claus\nPerham, Tom\n\nSelecting students in a certain age range and sorting.\nPenor, Lori 13\nPerham, Tom 12\nHance, Jim 12\nAdams, Terry 12\n\nSelecting students with certain ages, taking account of possibility of nulls.\nHance, Jim\nAdams, Terry\n\nUnion of two queries.\nAbercrombie, Kim 10\nAbolrous, Hazen 14\nHance, Jim 12\nAdams, Terry 12\nHansen, Claus 11\nPenor, Lori 13\nPerham, Tom 12\nPeng, Yun-Feng NULL\n\nIntersect of two queries.\n\nUsing if statement to alter results for special value.\n1 10 10\n2 14 14\n3 12 12\n4 12 12\n5 11 11\n6 13 13\n7 12 12\n8 NULL NULL\n\nUsing if statement to alter results special values.\n1 10 10\n2 14 14\n3 12 12\n4 12 12\n5 11 11\n6 13 13\n7 12 12\n8 NULL NULL\n\nMultiple table select.\nStudentID Name Age CourseID CourseName\n1 Abercrombie, Kim 10 1 Algebra I\n2 Abolrous, Hazen 14 1 Algebra I\n3 Hance, Jim 12 1 Algebra I\n4 Adams, Terry 12 1 Algebra I\n5 Hansen, Claus 11 1 Algebra I\n6 Penor, Lori 13 1 Algebra I\n7 Perham, Tom 12 1 Algebra I\n8 Peng, Yun-Feng NULL 1 Algebra I\n1 Abercrombie, Kim 10 2 Trigonometry\n2 Abolrous, Hazen 14 2 Trigonometry\n3 Hance, Jim 12 2 Trigonometry\n4 Adams, Terry 12 2 Trigonometry\n5 Hansen, Claus 11 2 Trigonometry\n6 Penor, Lori 13 2 Trigonometry\n7 Perham, Tom 12 2 Trigonometry\n8 Peng, Yun-Feng NULL 2 Trigonometry\n1 Abercrombie, Kim 10 3 Algebra II\n2 Abolrous, Hazen 14 3 Algebra II\n3 Hance, Jim 12 3 Algebra II\n4 Adams, Terry 12 3 Algebra II\n5 Hansen, Claus 11 3 Algebra II\n6 Penor, Lori 13 3 Algebra II\n7 Perham, Tom 12 3 Algebra II\n8 Peng, Yun-Feng NULL 3 Algebra II\n1 Abercrombie, Kim 10 4 History\n2 Abolrous, Hazen 14 4 History\n3 Hance, Jim 12 4 History\n4 Adams, Terry 12 4 History\n5 Hansen, Claus 11 4 History\n6 Penor, Lori 13 4 History\n7 Perham, Tom 12 4 History\n8 Peng, Yun-Feng NULL 4 History\n1 Abercrombie, Kim 10 5 English\n2 Abolrous, Hazen 14 5 English\n3 Hance, Jim 12 5 English\n4 Adams, Terry 12 5 English\n5 Hansen, Claus 11 5 English\n6 Penor, Lori 13 5 English\n7 Perham, Tom 12 5 English\n8 Peng, Yun-Feng NULL 5 English\n1 Abercrombie, Kim 10 6 French\n2 Abolrous, Hazen 14 6 French\n3 Hance, Jim 12 6 French\n4 Adams, Terry 12 6 French\n5 Hansen, Claus 11 6 French\n6 Penor, Lori 13 6 French\n7 Perham, Tom 12 6 French\n8 Peng, Yun-Feng NULL 6 French\n1 Abercrombie, Kim 10 7 Chinese\n2 Abolrous, Hazen 14 7 Chinese\n3 Hance, Jim 12 7 Chinese\n4 Adams, Terry 12 7 Chinese\n5 Hansen, Claus 11 7 Chinese\n6 Penor, Lori 13 7 Chinese\n7 Perham, Tom 12 7 Chinese\n8 Peng, Yun-Feng NULL 7 Chinese\n\nMultiple Joins\nAbercrombie, Kim Trigonometry\nAbercrombie, Kim Algebra II\nAbercrombie, Kim English\nAbolrous, Hazen Trigonometry\nAbolrous, Hazen English\nAbolrous, Hazen French\nAbolrous, Hazen Algebra II\nHance, Jim Trigonometry\nHance, Jim Algebra I\nAdams, Terry Trigonometry\nAdams, Terry English\nAdams, Terry Trigonometry\nHansen, Claus Algebra II\nHansen, Claus Trigonometry\nPerham, Tom Algebra II\n\nMultiple Left Outer Joins\nAbercrombie, Kim Trigonometry\nAbercrombie, Kim Algebra II\nAbercrombie, Kim English\nAbolrous, Hazen Trigonometry\nAbolrous, Hazen English\nAbolrous, Hazen French\nAbolrous, Hazen Algebra II\nHance, Jim Trigonometry\nHance, Jim Algebra I\nAdams, Terry Trigonometry\nAdams, Terry English\nAdams, Terry Trigonometry\nHansen, Claus Algebra II\nHansen, Claus Trigonometry\nPenor, Lori\nPerham, Tom Algebra II\nPeng, Yun-Feng\n\ntype schema\nval db : schema.ServiceTypes.SimpleDataContextTypes.MyDatabase1\nval student : System.Data.Linq.Table&lt;schema.ServiceTypes.Student&gt;\nval data : int list = [1; 5; 7; 11; 18; 21]\ntype Nullable&lt;&#39;T\n                when &#39;T : (new : unit -&gt;  &#39;T) and &#39;T : struct and\n                     &#39;T :&gt; System.ValueType&gt; with\n  member Print : unit -&gt; string\nval num : int = 21\nval student2 : schema.ServiceTypes.Student\nval student3 : schema.ServiceTypes.Student\nval student4 : schema.ServiceTypes.Student\nval student5 : int = 1\nval student6 : int = 8\nval idList : int list = [1; 2; 5; 10]\nval idQuery : seq&lt;int&gt;\nval names : string [] = [|&quot;a&quot;; &quot;b&quot;; &quot;c&quot;|]\nmodule Queries = begin\n  val query1 : System.Linq.IQueryable&lt;string * System.Nullable&lt;int&gt;&gt;\n  val query2 : System.Linq.IQueryable&lt;string * System.Nullable&lt;int&gt;&gt;\nend\nmodule Queries2 = begin\n  val query1 : System.Linq.IQueryable&lt;string * System.Nullable&lt;int&gt;&gt;\n  val query2 : System.Linq.IQueryable&lt;string * System.Nullable&lt;int&gt;&gt;\nend\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p><a href=\"index\" data-linktype=\"relative-path\">F# Language Reference</a></p>\n<p><a href=\"https://msdn.microsoft.com/visualfsharpdocs/conceptual/linq.querybuilder-class-%5bfsharp%5d\" data-linktype=\"external\">Linq.QueryBuilder Class</a></p>\n<p><a href=\"computation-expressions\" data-linktype=\"relative-path\">Computation Expressions</a></p>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"cartermp\">\r\n<meta name=\"ms.author\" content=\"phcart\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"fsharp\">\r\n<meta name=\"ms.assetid\" content=\"35df2d80-e6d2-4873-b2de-9b45b9e9e650\">\r\n<meta name=\"description\" content=\"Query Expressions (F#)\">\r\n<meta name=\"keywords\" content=\"visual f#, f#, functional programming\">\r\n<meta name=\"ms.topic\" content=\"language-reference\">\r\n<meta name=\"ms.date\" content=\"05/16/2016\">\r\n<meta name=\"ms.technology\" content=\"devlang-fsharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-21 01:42 AM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/fsharp/language-reference/query-expressions.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/fsharp/language-reference/query-expressions.md\">\r\n<meta name=\"document_id\" content=\"25a239d8-cba3-4baf-053e-7879a161f808\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../toc2.json\">\r\n","rawMetadata":{"author":"cartermp","ms.author":"phcart","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Query Expressions (F#) | Microsoft Docs","ms.devlang":"fsharp","ms.assetid":"35df2d80-e6d2-4873-b2de-9b45b9e9e650","description":"Query Expressions (F#)","keywords":"visual f#, f#, functional programming","ms.topic":"language-reference","ms.date":"05/16/2016","ms.technology":"devlang-fsharp","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Paulina Cortes","author_email":"Pacort@users.noreply.github.com","committer_name":"Maira Wenzel","comitter_email":"mairaw@microsoft.com","message":"added missing links (#1295)","commit_sha":"da9846abe5c01f16e0d2d2e9262279882e5d6d7a","commit_date":"2016-12-01 15:09:31 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"fixed absolute and msdn links (#1001)","commit_sha":"de0dab146fc811e895dc32f98f877db5e757f82b","commit_date":"2016-09-06 10:59:39 -0700"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"F# Docs: Update intro, move files, rename language reference for better URLS (#902)","commit_sha":"70a10b9c3e21291c96d927d13f8710d9e0738d4c","commit_date":"2016-08-13 11:22:39 -0700"}],"updated_at":"2017-03-21 01:42 AM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/cartermp","display_name":"Phillip Carter","id":"6309070"},"contributors":[{"profile_url":"https://github.com/cartermp","display_name":"Phillip Carter"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"},{"profile_url":"https://github.com/Pacort","display_name":"Paulina Cortes","id":"11066073"}],"update_at":"3/21/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/fsharp/language-reference/query-expressions.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/fsharp/language-reference/query-expressions.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/fsharp/language-reference/query-expressions.md","document_id":"25a239d8-cba3-4baf-053e-7879a161f808","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/fsharp/language-reference/query-expressions","toc_asset_id":"articles/toc.json","toc_rel":"../../toc.json","_op_ogTitle":"Query Expressions (F#)","_op_displayDate":"2016-5-16","_op_displayDate_source":"2016-05-16T00:00:00Z","_op_wordCount":8251,"_op_rawTitle":"<h1 id=\"query-expressions\" sourcefile=\"docs/fsharp/language-reference/query-expressions.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Query Expressions</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/fsharp/language-reference/query-expressions","fileRelativePath":"articles/fsharp/language-reference/query-expressions.html"},"themesRelativePathToOutputRoot":"_themes/"}