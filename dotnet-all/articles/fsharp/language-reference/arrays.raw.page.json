{"content":"<div><div class=\"content\">\n<div class=\"NOTE\"><h5>Note</h5><p>The API reference link will take you to MSDN.  The docs.microsoft.com API reference is not complete.</p>\n</div>\n<p>Arrays are fixed-size, zero-based, mutable collections of consecutive data elements that are all of the same type.</p>\n<h2 id=\"creating-arrays\">Creating Arrays</h2>\n<p>You can create arrays in several ways. You can create a small array by listing consecutive values between <code>[|</code> and <code>|]</code> and separated by semicolons, as shown in the following examples.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">let array1 = [| 1; 2; 3 |]\n</code></pre><p>You can also put each element on a separate line, in which case the semicolon separator is optional.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">let array1 =\n    [|\n        1\n        2\n        3\n     |]\n</code></pre><p>The type of the array elements is inferred from the literals used and must be consistent. The following code causes an error because 1.0 is a float and 2 and 3 are integers.</p>\n<pre class=\"loading\"><code class=\"lang-fsharp\">// Causes an error.\n// let array2 = [| 1.0; 2; 3 |]\n</code></pre><p>You can also use sequence expressions to create arrays. Following is an example that creates an array of squares of integers from 1 to 10.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">let array3 = [| for i in 1 .. 10 -&gt; i * i |]\n</code></pre><p>To create an array in which all the elements are initialized to zero, use <code>Array.zeroCreate</code>.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">let arrayOfTenZeroes : int array = Array.zeroCreate 10\n</code></pre><h2 id=\"accessing-elements\">Accessing Elements</h2>\n<p>You can access array elements by using a dot operator (<code>.</code>) and brackets (<code>[</code> and <code>]</code>).</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">array1.[0]\n</code></pre><p>Array indexes start at 0.</p>\n<p>You can also access array elements by using slice notation, which enables you to specify a subrange of the array. Examples of slice notation follow.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">// Accesses elements from 0 to 2.\n\narray1.[0..2]\n\n// Accesses elements from the beginning of the array to 2.\n\narray1.[..2]\n\n// Accesses elements from 2 to the end of the array.\n\narray1.[2..]\n</code></pre><p>When slice notation is used, a new copy of the array is created.</p>\n<h2 id=\"array-types-and-modules\">Array Types and Modules</h2>\n<p>The type of all F# arrays is the .NET Framework type <a href=\"https://msdn.microsoft.com/library/system.array.aspx\" data-linktype=\"external\">System.Array</a>. Therefore, F# arrays support all the functionality available in <a href=\"https://msdn.microsoft.com/library/system.array.aspx\" data-linktype=\"external\">System.Array</a>.</p>\n<p>The library module <a href=\"https://msdn.microsoft.com/library/0cda8040-9396-40dd-8dcd-cf48542165a1\" data-linktype=\"external\"><code>Microsoft.FSharp.Collections.Array</code></a> supports operations on one-dimensional arrays. The modules <code>Array2D</code>, <code>Array3D</code>, and <code>Array4D</code> contain functions that support operations on arrays of two, three, and four dimensions, respectively. You can create arrays of rank greater than four by using <a href=\"https://msdn.microsoft.com/library/system.array.aspx\" data-linktype=\"external\">System.Array</a>.</p>\n<h3 id=\"simple-functions\">Simple Functions</h3>\n<p><a href=\"https://msdn.microsoft.com/library/dd93e85d-7e80-4d76-8de0-b6d45bcf07bc\" data-linktype=\"external\"><code>Array.get</code></a> gets an element. <a href=\"https://msdn.microsoft.com/library/0d775b6a-4a8f-4bd1-83e5-843b3251725f\" data-linktype=\"external\"><code>Array.length</code></a> gives the length of an array. <a href=\"https://msdn.microsoft.com/library/847edc0d-4dc5-4a39-98c7-d4320c60e790\" data-linktype=\"external\"><code>Array.set</code></a> sets an element to a specified value. The following code example illustrates the use of these functions.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">let array1 = Array.create 10 &quot;&quot;\nfor i in 0 .. array1.Length - 1 do\n    Array.set array1 i (i.ToString())\nfor i in 0 .. array1.Length - 1 do\n    printf &quot;%s &quot; (Array.get array1 i)\n</code></pre><p>The output is as follows.</p>\n<pre class=\"loading\"><code>0 1 2 3 4 5 6 7 8 9\n</code></pre><h3 id=\"functions-that-create-arrays\">Functions That Create Arrays</h3>\n<p>Several functions create arrays without requiring an existing array. <a href=\"https://msdn.microsoft.com/library/c3694b92-1c16-4c54-9bf2-fe398fadce32\" data-linktype=\"external\"><code>Array.empty</code></a> creates a new array that does not contain any elements. <a href=\"https://msdn.microsoft.com/library/e848c8d6-1142-4080-9727-8dacc26066be\" data-linktype=\"external\"><code>Array.create</code></a> creates an array of a specified size and sets all the elements to provided values. <a href=\"https://msdn.microsoft.com/library/ee898089-63b0-40aa-910c-5ae7e32f6665\" data-linktype=\"external\"><code>Array.init</code></a> creates an array, given a dimension and a function to generate the elements. <a href=\"https://msdn.microsoft.com/library/fa5b8e7a-1b5b-411c-8622-b58d7a14d3b2\" data-linktype=\"external\"><code>Array.zeroCreate</code></a> creates an array in which all the elements are initialized to the zero value for the array&#39;s type. The following code demonstrates these functions.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">let myEmptyArray = Array.empty\nprintfn &quot;Length of empty array: %d&quot; myEmptyArray.Length\n\n\n\nprintfn &quot;Array of floats set to 5.0: %A&quot; (Array.create 10 5.0)\n\n\nprintfn &quot;Array of squares: %A&quot; (Array.init 10 (fun index -&gt; index * index))\n\nlet (myZeroArray : float array) = Array.zeroCreate 10\n</code></pre><p>The output is as follows.</p>\n<pre class=\"loading\"><code>Length of empty array: 0\nArea of floats set to 5.0: [|5.0; 5.0; 5.0; 5.0; 5.0; 5.0; 5.0; 5.0; 5.0; 5.0|]\nArray of squares: [|0; 1; 4; 9; 16; 25; 36; 49; 64; 81|]\n</code></pre><p><a href=\"https://msdn.microsoft.com/library/9d0202f1-1ea0-475e-9d66-4f8ccc3c5b5f\" data-linktype=\"external\"><code>Array.copy</code></a> creates a new array that contains elements that are copied from an existing array. Note that the copy is a shallow copy, which means that if the element type is a reference type, only the reference is copied, not the underlying object. The following code example illustrates this.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">open System.Text\n\nlet firstArray : StringBuilder array = Array.init 3 (fun index -&gt; new StringBuilder(&quot;&quot;))\nlet secondArray = Array.copy firstArray\n// Reset an element of the first array to a new value.\nfirstArray.[0] &lt;- new StringBuilder(&quot;Test1&quot;)\n// Change an element of the first array.\nfirstArray.[1].Insert(0, &quot;Test2&quot;) |&gt; ignore\nprintfn &quot;%A&quot; firstArray\nprintfn &quot;%A&quot; secondArray\n</code></pre><p>The output of the preceding code is as follows:</p>\n<pre class=\"loading\"><code>[|Test1; Test2; |]\n[|; Test2; |]\n</code></pre><p>The string <code>Test1</code> appears only in the first array because the operation of creating a new element overwrites the reference in <code>firstArray</code> but does not affect the original reference to an empty string that is still present in <code>secondArray</code>. The string <code>Test2</code> appears in both arrays because the <code>Insert</code> operation on the <a href=\"https://msdn.microsoft.com/library/system.text.stringbuilder.aspx\" data-linktype=\"external\">System.Text.StringBuilder</a> type affects the underlying <a href=\"https://msdn.microsoft.com/library/system.text.stringbuilder.aspx\" data-linktype=\"external\">System.Text.StringBuilder</a> object, which is referenced in both arrays.</p>\n<p><a href=\"https://msdn.microsoft.com/library/40fb12ba-41d7-4ef0-b33a-56727deeef9d\" data-linktype=\"external\"><code>Array.sub</code></a> generates a new array from a subrange of an array. You specify the subrange by providing the starting index and the length. The following code demonstrates the use of <code>Array.sub</code>.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">let a1 = [| 0 .. 99 |]\nlet a2 = Array.sub a1 5 10\nprintfn &quot;%A&quot; a2\n</code></pre><p>The output shows that the subarray starts at element 5 and contains 10 elements.</p>\n<pre class=\"loading\"><code>[|5; 6; 7; 8; 9; 10; 11; 12; 13; 14|]\n</code></pre><p><a href=\"https://msdn.microsoft.com/library/08836310-5036-4474-b9a2-2c73e2293911\" data-linktype=\"external\"><code>Array.append</code></a> creates a new array by combining two existing arrays.</p>\n<p>The following code demonstrates <strong>Array.append</strong>.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">printfn &quot;%A&quot; (Array.append [| 1; 2; 3|] [| 4; 5; 6|])\n</code></pre><p>The output of the preceding code is as follows.</p>\n<pre class=\"loading\"><code>[|1; 2; 3; 4; 5; 6|]\n</code></pre><p><a href=\"https://msdn.microsoft.com/library/f5c8a5e2-637f-44d4-b35c-be96a6618b09\" data-linktype=\"external\"><code>Array.choose</code></a> selects elements of an array to include in a new array. The following code demonstrates <code>Array.choose</code>. Note that the element type of the array does not have to match the type of the value returned in the option type. In this example, the element type is <code>int</code> and the option is the result of a polynomial function, <code>elem*elem - 1</code>, as a floating point number.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">printfn &quot;%A&quot; (Array.choose (fun elem -&gt; if elem % 2 = 0 then\n                                            Some(float (elem*elem - 1))\n                                        else\n                                            None) [| 1 .. 10 |])\n</code></pre><p>The output of the preceding code is as follows.</p>\n<pre class=\"loading\"><code>[|3.0; 15.0; 35.0; 63.0; 99.0|]\n</code></pre><p><a href=\"https://msdn.microsoft.com/library/c3b60c3b-9455-48c9-bc2b-e88f0434342a\" data-linktype=\"external\"><code>Array.collect</code></a> runs a specified function on each array element of an existing array and then collects the elements generated by the function and combines them into a new array. The following code demonstrates <code>Array.collect</code>.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">printfn &quot;%A&quot; (Array.collect (fun elem -&gt; [| 0 .. elem |]) [| 1; 5; 10|])\n</code></pre><p>The output of the preceding code is as follows.</p>\n<pre class=\"loading\"><code>[|0; 1; 0; 1; 2; 3; 4; 5; 0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10|]\n</code></pre><p><a href=\"https://msdn.microsoft.com/library/f7219b79-1ec8-4a25-96b1-edbedb358302\" data-linktype=\"external\"><code>Array.concat</code></a> takes a sequence of arrays and combines them into a single array. The following code demonstrates <code>Array.concat</code>.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">Array.concat [ [|0..3|] ; [|4|] ]\n//output [|0; 1; 2; 3; 4|]\n\nArray.concat [| [|0..3|] ; [|4|] |]\n//output [|0; 1; 2; 3; 4|]\n</code></pre><p>The output of the preceding code is as follows.</p>\n<pre class=\"loading\"><code>[|(1, 1, 1); (1, 2, 2); (1, 3, 3); (2, 1, 2); (2, 2, 4); (2, 3, 6); (3, 1, 3);\n(3, 2, 6); (3, 3, 9)|]\n</code></pre><p><a href=\"https://msdn.microsoft.com/library/b885b214-47fc-4639-9664-b8c183a39ede\" data-linktype=\"external\"><code>Array.filter</code></a> takes a Boolean condition function and generates a new array that contains only those elements from the input array for which the condition is true. The following code demonstrates <code>Array.filter</code>.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">printfn &quot;%A&quot; (Array.filter (fun elem -&gt; elem % 2 = 0) [| 1 .. 10|])\n</code></pre><p>The output of the preceding code is as follows.</p>\n<pre class=\"loading\"><code>[|2; 4; 6; 8; 10|]\n</code></pre><p><a href=\"https://msdn.microsoft.com/library/1bbf822c-763b-4794-af21-97d2e48ef709\" data-linktype=\"external\"><code>Array.rev</code></a> generates a new array by reversing the order of an existing array. The following code demonstrates <code>Array.rev</code>.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">let stringReverse (s: string) =\n    System.String(Array.rev (s.ToCharArray()))\n\nprintfn &quot;%A&quot; (stringReverse(&quot;!dlrow olleH&quot;))\n</code></pre><p>The output of the preceding code is as follows.</p>\n<pre class=\"loading\"><code>&quot;Hello world!&quot;\n</code></pre><p>You can easily combine functions in the array module that transform arrays by using the pipeline operator (<code>|&gt;</code>), as shown in the following example.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">[| 1 .. 10 |]\n|&gt; Array.filter (fun elem -&gt; elem % 2 = 0)\n|&gt; Array.choose (fun elem -&gt; if (elem &lt;&gt; 8) then Some(elem*elem) else None)\n|&gt; Array.rev\n|&gt; printfn &quot;%A&quot;\n</code></pre><p>The output is</p>\n<pre class=\"loading\"><code>[|100; 36; 16; 4|]\n</code></pre><h3 id=\"multidimensional-arrays\">Multidimensional Arrays</h3>\n<p>A multidimensional array can be created, but there is no syntax for writing a multidimensional array literal. Use the operator <a href=\"https://msdn.microsoft.com/library/1d52503d-2990-49fc-8fd3-6b0e508aa236\" data-linktype=\"external\"><code>array2D</code></a> to create an array from a sequence of sequences of array elements. The sequences can be array or list literals. For example, the following code creates a two-dimensional array.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">let my2DArray = array2D [ [ 1; 0]; [0; 1] ]\n</code></pre><p>You can also use the function <a href=\"https://msdn.microsoft.com/library/9de07e95-bc21-4927-b5b4-08fdec882c7b\" data-linktype=\"external\"><code>Array2D.init</code></a> to initialize arrays of two dimensions, and similar functions are available for arrays of three and four dimensions. These functions take a function that is used to create the elements. To create a two-dimensional array that contains elements set to an initial value instead of specifying a function, use the <a href=\"https://msdn.microsoft.com/library/36c9d980-b241-4a20-bc64-bcfa0205d804\" data-linktype=\"external\"><code>Array2D.create</code></a> function, which is also available for arrays up to four dimensions. The following code example first shows how to create an array of arrays that contain the desired elements, and then uses <code>Array2D.init</code> to generate the desired two-dimensional array.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">let arrayOfArrays = [| [| 1.0; 0.0 |]; [|0.0; 1.0 |] |]\nlet twoDimensionalArray = Array2D.init 2 2 (fun i j -&gt; arrayOfArrays.[i].[j])\n</code></pre><p>Array indexing and slicing syntax is supported for arrays up to rank 4. When you specify an index in multiple dimensions, you use commas to separate the indexes, as illustrated in the following code example.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">twoDimensionalArray.[0, 1] &lt;- 1.0\n</code></pre><p>The type of a two-dimensional array is written out as <code>&lt;type&gt;[,]</code> (for example, <code>int[,]</code>, <code>double[,]</code>), and the type of a three-dimensional array is written as <code>&lt;type&gt;[,,]</code>, and so on for arrays of higher dimensions.</p>\n<p>Only a subset of the functions available for one-dimensional arrays is also available for multidimensional arrays. For more information, see <a href=\"https://msdn.microsoft.com/visualfsharpdocs/conceptual/collections.array-module-%5bfsharp%5d\" data-linktype=\"external\"><code>Collections.Array Module</code></a>, <a href=\"https://msdn.microsoft.com/visualfsharpdocs/conceptual/collections.array2d-module-%5bfsharp%5d\" data-linktype=\"external\"><code>Collections.Array2D Module</code></a>, <a href=\"https://msdn.microsoft.com/visualfsharpdocs/conceptual/collections.array3d-module-%5bfsharp%5d\" data-linktype=\"external\"><code>Collections.Array3D Module</code></a>, and <a href=\"https://msdn.microsoft.com/visualfsharpdocs/conceptual/collections.array4d-module-%5bfsharp%5d\" data-linktype=\"external\"><code>Collections.Array4D Module</code></a>.</p>\n<h3 id=\"array-slicing-and-multidimensional-arrays\">Array Slicing and Multidimensional Arrays</h3>\n<p>In a two-dimensional array (a matrix), you can extract a sub-matrix by specifying ranges and using a wildcard (<code>*</code>) character to specify whole rows or columns.</p>\n<pre class=\"loading\"><code class=\"lang-fsharp\">/ Get rows 1 to N from an NxM matrix (returns a matrix):\nmatrix.[1.., *]\n\n// Get rows 1 to 3 from a matrix (returns a matrix):\nmatrix.[1..3, *]\n\n// Get columns 1 to 3 from a matrix (returns a matrix):\nmatrix.[*, 1..3]\n\n// Get a 3x3 submatrix:\nmatrix.[1..3, 1..3]\n</code></pre><p>As of F# 3.1, you can decompose a multidimensional array into subarrays of the same or lower dimension. For example, you can obtain a vector from a matrix by specifying a single row or column.</p>\n<pre class=\"loading\"><code class=\"lang-fsharp\">// Get row 3 from a matrix as a vector:\nmatrix.[3, *]\n\n// Get column 3 from a matrix as a vector:\nmatrix.[*, 3]\n</code></pre><p>You can use this slicing syntax for types that implement the element access operators and overloaded <code>GetSlice</code> methods. For example, the following code creates a Matrix type that wraps the F# 2D array, implements an Item property to provide support for array indexing, and implements three versions of <code>GetSlice</code>. If you can use this code as a template for your matrix types, you can use all the slicing operations that this section describes.</p>\n<pre class=\"loading\"><code class=\"lang-fsharp\">type Matrix&lt;&#39;T&gt;(N: int, M: int) =\n    let internalArray = Array2D.zeroCreate&lt;&#39;T&gt; N M\n\n    member this.Item\n        with get(a: int, b: int) = internalArray.[a, b]\n        and set(a: int, b: int) (value:&#39;T) = internalArray.[a, b] &lt;- value\n\n    member this.GetSlice(rowStart: int option, rowFinish : int option, colStart: int option, colFinish : int option) =\n        let rowStart = \n            match rowStart with\n            | Some(v) -&gt; v\n            | None -&gt; 0\n        let rowFinish =\n            match rowFinish with\n            | Some(v) -&gt; v\n            | None -&gt; internalArray.GetLength(0) - 1\n        let colStart = \n            match colStart with\n            | Some(v) -&gt; v\n            | None -&gt; 0\n        let colFinish = \n            match colFinish with\n            | Some(v) -&gt; v\n            | None -&gt; internalArray.GetLength(1) - 1\n        internalArray.[rowStart..rowFinish, colStart..colFinish]\n\n    member this.GetSlice(row: int, colStart: int option, colFinish: int option) =\n        let colStart = \n            match colStart with\n            | Some(v) -&gt; v\n            | None -&gt; 0\n        let colFinish = \n            match colFinish with\n            | Some(v) -&gt; v\n            | None -&gt; internalArray.GetLength(1) - 1\n        internalArray.[row, colStart..colFinish]\n\n    member this.GetSlice(rowStart: int option, rowFinish: int option, col: int) =\n        let rowStart = \n            match rowStart with\n            | Some(v) -&gt; v\n            | None -&gt; 0\n        let rowFinish = \n            match rowFinish with\n            | Some(v) -&gt; v\n            | None -&gt; internalArray.GetLength(0) - 1\n        internalArray.[rowStart..rowFinish, col]\n\nmodule test =\n    let generateTestMatrix x y =\n        let matrix = new Matrix&lt;float&gt;(3, 3)\n        for i in 0..2 do\n            for j in 0..2 do\n                matrix.[i, j] &lt;- float(i) * x - float(j) * y\n        matrix\n\n    let test1 = generateTestMatrix 2.3 1.1\n    let submatrix = test1.[0..1, 0..1]\n    printfn &quot;%A&quot; submatrix\n\n    let firstRow = test1.[0,*]\n    let secondRow = test1.[1,*]\n    let firstCol = test1.[*,0]\n    printfn &quot;%A&quot; firstCol\n</code></pre><h3 id=\"boolean-functions-on-arrays\">Boolean Functions on Arrays</h3>\n<p>The functions <a href=\"https://msdn.microsoft.com/library/8e47ad6c-c065-4876-8cb4-ec960ec3e5c9\" data-linktype=\"external\"><code>Array.exists</code></a> and <a href=\"https://msdn.microsoft.com/library/2e384a6a-f99d-4e23-b677-250ffbc1dd8e\" data-linktype=\"external\"><code>Array.exists2</code></a> test elements in either one or two arrays, respectively. These functions take a test function and return <code>true</code> if there is an element (or element pair for <code>Array.exists2</code>) that satisfies the condition.</p>\n<p>The following code demonstrates the use of <code>Array.exists</code> and <code>Array.exists2</code>. In these examples, new functions are created by applying only one of the arguments, in these cases, the function argument.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">let allNegative = Array.exists (fun elem -&gt; abs (elem) = elem) &gt;&gt; not\nprintfn &quot;%A&quot; (allNegative [| -1; -2; -3 |])\nprintfn &quot;%A&quot; (allNegative [| -10; -1; 5 |])\nprintfn &quot;%A&quot; (allNegative [| 0 |])\n\n\nlet haveEqualElement = Array.exists2 (fun elem1 elem2 -&gt; elem1 = elem2)\nprintfn &quot;%A&quot; (haveEqualElement [| 1; 2; 3 |] [| 3; 2; 1|])\n</code></pre><p>The output of the preceding code is as follows.</p>\n<pre class=\"loading\"><code>true\nfalse\nfalse\ntrue\n</code></pre><p>Similarly, the function <a href=\"https://msdn.microsoft.com/library/d88f2cd0-fa7f-45cf-ac15-31eae9086cc4\" data-linktype=\"external\"><code>Array.forall</code></a> tests an array to determine whether every element satisfies a Boolean condition. The variation <a href=\"https://msdn.microsoft.com/library/c68f61a1-030c-4024-b705-c4768b6c96b9\" data-linktype=\"external\"><code>Array.forall2</code></a> does the same thing by using a Boolean function that involves elements of two arrays of equal length. The following code illustrates the use of these functions.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">let allPositive = Array.forall (fun elem -&gt; elem &gt; 0)\nprintfn &quot;%A&quot; (allPositive [| 0; 1; 2; 3 |])\nprintfn &quot;%A&quot; (allPositive [| 1; 2; 3 |])\n\n\nlet allEqual = Array.forall2 (fun elem1 elem2 -&gt; elem1 = elem2)\nprintfn &quot;%A&quot; (allEqual [| 1; 2 |] [| 1; 2 |])\nprintfn &quot;%A&quot; (allEqual [| 1; 2 |] [| 2; 1 |])\n</code></pre><p>The output for these examples is as follows.</p>\n<pre class=\"loading\"><code>false\ntrue\ntrue\nfalse\n</code></pre><h3 id=\"searching-arrays\">Searching Arrays</h3>\n<p><a href=\"https://msdn.microsoft.com/library/db6d920a-de19-4520-85a4-d83de77c1b33\" data-linktype=\"external\"><code>Array.find</code></a> takes a Boolean function and returns the first element for which the function returns <code>true</code>, or raises a <a href=\"https://msdn.microsoft.com/library/system.collections.generic.keynotfoundexception.aspx\" data-linktype=\"external\"><code>System.Collections.Generic.KeyNotFoundException</code></a> if no element that satisfies the condition is found. <a href=\"https://msdn.microsoft.com/library/5ae3a8f9-7b8f-44ea-a740-d5700f4d899f\" data-linktype=\"external\"><code>Array.findIndex</code></a> is like <code>Array.find</code>, except that it returns the index of the element instead of the element itself.</p>\n<p>The following code uses <code>Array.find</code> and <code>Array.findIndex</code> to locate a number that is both a perfect square and perfect cube.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">let arrayA = [| 2 .. 100 |]\nlet delta = 1.0e-10\nlet isPerfectSquare (x:int) =\n    let y = sqrt (float x)\n    abs(y - round y) &lt; delta\nlet isPerfectCube (x:int) =\n    let y = System.Math.Pow(float x, 1.0/3.0)\n    abs(y - round y) &lt; delta\nlet element = Array.find (fun elem -&gt; isPerfectSquare elem &amp;&amp; isPerfectCube elem) arrayA\nlet index = Array.findIndex (fun elem -&gt; isPerfectSquare elem &amp;&amp; isPerfectCube elem) arrayA\nprintfn &quot;The first element that is both a square and a cube is %d and its index is %d.&quot; element index\n</code></pre><p>The output is as follows.</p>\n<pre class=\"loading\"><code>The first element that is both a square and a cube is 64 and its index is 62.\n</code></pre><p><a href=\"https://msdn.microsoft.com/library/7bd65f6c-df77-454c-ac3a-6f7baecec9d9\" data-linktype=\"external\"><code>Array.tryFind</code></a> is like <code>Array.find</code>, except that its result is an option type, and it returns <code>None</code> if no element is found. <code>Array.tryFind</code> should be used instead of <code>Array.find</code> when you do not know whether a matching element is in the array. Similarly, <a href=\"https://msdn.microsoft.com/library/da82f7fe-95e9-4fd5-a924-cd3c9d10618a\" data-linktype=\"external\"><code>Array.tryFindIndex</code></a> is like <a href=\"https://msdn.microsoft.com/library/5ae3a8f9-7b8f-44ea-a740-d5700f4d899f\" data-linktype=\"external\"><code>Array.findIndex</code></a> except that the option type is the return value. If no element is found, the option is <code>None</code>.</p>\n<p>The following code demonstrates the use of <code>Array.tryFind</code>. This code depends on the previous code.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">let delta = 1.0e-10\nlet isPerfectSquare (x:int) =\n    let y = sqrt (float x)\n    abs(y - round y) &lt; delta\nlet isPerfectCube (x:int) =\n    let y = System.Math.Pow(float x, 1.0/3.0)\n    abs(y - round y) &lt; delta\nlet lookForCubeAndSquare array1 =\n    let result = Array.tryFind (fun elem -&gt; isPerfectSquare elem &amp;&amp; isPerfectCube elem) array1\n    match result with\n    | Some x -&gt; printfn &quot;Found an element: %d&quot; x\n    | None -&gt; printfn &quot;Failed to find a matching element.&quot;\n\nlookForCubeAndSquare [| 1 .. 10 |]\nlookForCubeAndSquare [| 100 .. 1000 |]\nlookForCubeAndSquare [| 2 .. 50 |]\n</code></pre><p>The output is as follows.</p>\n<pre class=\"loading\"><code>Found an element: 1\nFound an element: 729\n</code></pre><p>Use <a href=\"https://msdn.microsoft.com/library/72d45f85-037b-43a9-97fd-17239f72713e\" data-linktype=\"external\"><code>Array.tryPick</code></a> when you need to transform an element in addition to finding it. The result is the first element for which the function returns the transformed element as an option value, or <code>None</code> if no such element is found.</p>\n<p>The following code shows the use of <code>Array.tryPick</code>. In this case, instead of a lambda expression, several local helper functions are defined to simplify the code.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">let findPerfectSquareAndCube array1 =\n    let delta = 1.0e-10\n    let isPerfectSquare (x:int) =\n        let y = sqrt (float x)\n        abs(y - round y) &lt; delta\n    let isPerfectCube (x:int) =\n        let y = System.Math.Pow(float x, 1.0/3.0)\n        abs(y - round y) &lt; delta\n    // intFunction : (float -&gt; float) -&gt; int -&gt; int\n    // Allows the use of a floating point function with integers.\n    let intFunction function1 number = int (round (function1 (float number)))\n    let cubeRoot x = System.Math.Pow(x, 1.0/3.0)\n    // testElement: int -&gt; (int * int * int) option\n    // Test an element to see whether it is a perfect square and a perfect\n    // cube, and, if so, return the element, square root, and cube root\n    // as an option value. Otherwise, return None.\n    let testElement elem =\n        if isPerfectSquare elem &amp;&amp; isPerfectCube elem then\n            Some(elem, intFunction sqrt elem, intFunction cubeRoot elem)\n        else None\n    match Array.tryPick testElement array1 with\n    | Some (n, sqrt, cuberoot) -&gt; printfn &quot;Found an element %d with square root %d and cube root %d.&quot; n sqrt cuberoot\n    | None -&gt; printfn &quot;Did not find an element that is both a perfect square and a perfect cube.&quot;\n\nfindPerfectSquareAndCube [| 1 .. 10 |]\nfindPerfectSquareAndCube [| 2 .. 100 |]\nfindPerfectSquareAndCube [| 100 .. 1000 |]\nfindPerfectSquareAndCube [| 1000 .. 10000 |]\nfindPerfectSquareAndCube [| 2 .. 50 |]\n</code></pre><p>The output is as follows.</p>\n<pre class=\"loading\"><code>Found an element 1 with square root 1 and cube root 1.\nFound an element 64 with square root 8 and cube root 4.\nFound an element 729 with square root 27 and cube root 9.\nFound an element 4096 with square root 64 and cube root 16.\n</code></pre><h3 id=\"performing-computations-on-arrays\">Performing Computations on Arrays</h3>\n<p>The <a href=\"https://msdn.microsoft.com/library/7029f2b9-91ea-41cb-be1b-466a5a0db20e\" data-linktype=\"external\"><code>Array.average</code></a> function returns the average of each element in an array. It is limited to element types that support exact division by an integer, which includes floating point types but not integral types. The <a href=\"https://msdn.microsoft.com/library/e9d64609-06a3-48f0-bc07-226ab0f85c54\" data-linktype=\"external\"><code>Array.averageBy</code></a> function returns the average of the results of calling a function on each element. For an array of integral type, you can use <code>Array.averageBy</code> and have the function convert each element to a floating point type for the computation.</p>\n<p>Use <a href=\"https://msdn.microsoft.com/library/f03fbda0-fce6-40e2-a85d-79c9d81f710b\" data-linktype=\"external\"><code>Array.max</code></a> or <a href=\"https://msdn.microsoft.com/library/d6b3da5f-bac0-4355-9846-4b72d95bc3fd\" data-linktype=\"external\"><code>Array.min</code></a> to get the maximum or minimum element, if the element type supports it. Similarly, <a href=\"https://msdn.microsoft.com/library/18dbe7c5-482e-4766-8e01-12a76f847045\" data-linktype=\"external\"><code>Array.maxBy</code></a> and <a href=\"https://msdn.microsoft.com/library/24091583-be78-4cc9-9fab-de6d7506af4f\" data-linktype=\"external\"><code>Array.minBy</code></a> allow a function to be executed first, perhaps to transform to a type that supports comparison.</p>\n<p><a href=\"https://msdn.microsoft.com/library/4ffdb8c8-cd94-4b0b-9e5c-a7c9c17963c2\" data-linktype=\"external\"><code>Array.sum</code></a> adds the elements of an array, and <a href=\"https://msdn.microsoft.com/library/41698ba6-1adc-4169-8cc5-7a0e3f8de56b\" data-linktype=\"external\"><code>Array.sumBy</code></a> calls a function on each element and adds the results together.</p>\n<p>To execute a function on each element in an array without storing the return values, use <a href=\"https://msdn.microsoft.com/library/94eba0f1-ecd7-459f-b89f-ed2a2923e516\" data-linktype=\"external\"><code>Array.iter</code></a>. For a function involving two arrays of equal length, use <a href=\"https://msdn.microsoft.com/library/018aa9b9-f186-4142-be8a-a62462794fdc\" data-linktype=\"external\"><code>Array.iter2</code></a>. If you also need to keep an array of the results of the function, use <a href=\"https://msdn.microsoft.com/library/38cbe824-0480-47be-85fd-df3afdd97a45\" data-linktype=\"external\"><code>Array.map</code></a> or <a href=\"https://msdn.microsoft.com/library/bb7aafe8-4a1f-45b9-92fc-1af9eafbea5c\" data-linktype=\"external\"><code>Array.map2</code></a>, which operates on two arrays at a time.</p>\n<p>The variations <a href=\"https://msdn.microsoft.com/library/8bbe2ed4-ada7-4906-ac3e-cb09f9db6486\" data-linktype=\"external\"><code>Array.iteri</code></a> and <a href=\"https://msdn.microsoft.com/library/c041b91f-6080-45b7-867b-2ed983a90405\" data-linktype=\"external\"><code>Array.iteri2</code></a> allow the index of the element to be involved in the computation; the same is true for <a href=\"https://msdn.microsoft.com/library/f7e45994-b0a1-49e6-8fb5-5641cea8fde4\" data-linktype=\"external\"><code>Array.mapi</code></a> and <a href=\"https://msdn.microsoft.com/library/5edb33d2-47da-44e1-9290-40c00c47d5b0\" data-linktype=\"external\"><code>Array.mapi2</code></a>.</p>\n<p>The functions <a href=\"https://msdn.microsoft.com/library/5ed9dd3b-3694-4567-94d0-fd9a24474e09\" data-linktype=\"external\"><code>Array.fold</code></a>, <a href=\"https://msdn.microsoft.com/library/1121a453-dead-4711-a0ca-cc147752989c\" data-linktype=\"external\"><code>Array.foldBack</code></a>, <a href=\"https://msdn.microsoft.com/library/fd62a985-89fe-4f49-a9d4-0c808ac6749d\" data-linktype=\"external\"><code>Array.reduce</code></a>, <a href=\"https://msdn.microsoft.com/library/4fdd4cbe-2238-4c5c-b286-597a7e9036f9\" data-linktype=\"external\"><code>Array.reduceBack</code></a>, <a href=\"https://msdn.microsoft.com/library/f6893608-9146-450d-9ebb-a0016803fbb0\" data-linktype=\"external\"><code>Array.scan</code></a>, and <a href=\"https://msdn.microsoft.com/library/7610f406-7a5c-41db-a0ca-8e2a2a4826ad\" data-linktype=\"external\"><code>Array.scanBack</code></a> execute algorithms that involve all the elements of an array. Similarly, the variations <a href=\"https://msdn.microsoft.com/library/5c845087-d041-476e-8cc4-53ae6849ef79\" data-linktype=\"external\"><code>Array.fold2</code></a> and <a href=\"https://msdn.microsoft.com/library/aa51b405-df20-4c51-9998-a6530f7db862\" data-linktype=\"external\"><code>Array.foldBack2</code></a> perform computations on two arrays.</p>\n<p>These functions for performing computations correspond to the functions of the same name in the <a href=\"https://msdn.microsoft.com/library/a2264ba3-2d45-40dd-9040-4f7aa2ad9788\" data-linktype=\"external\">List module</a>. For usage examples, see <a href=\"lists\" data-linktype=\"relative-path\">Lists</a>.</p>\n<h3 id=\"modifying-arrays\">Modifying Arrays</h3>\n<p><a href=\"https://msdn.microsoft.com/library/847edc0d-4dc5-4a39-98c7-d4320c60e790\" data-linktype=\"external\"><code>Array.set</code></a> sets an element to a specified value. <a href=\"https://msdn.microsoft.com/library/c83c9886-81d9-44f9-a195-61c7b87f7df2\" data-linktype=\"external\"><code>Array.fill</code></a> sets a range of elements in an array to a specified value. The following code provides an example of <code>Array.fill</code>.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">let arrayFill1 = [| 1 .. 25 |]\nArray.fill arrayFill1 2 20 0\nprintfn &quot;%A&quot; arrayFill1\n</code></pre><p>The output is as follows.</p>\n<pre class=\"loading\"><code>[|1; 2; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 0; 23; 24; 25|]\n</code></pre><p>You can use <a href=\"https://msdn.microsoft.com/library/675e13e4-7fb9-4e0d-a5be-a112830de667\" data-linktype=\"external\"><code>Array.blit</code></a> to copy a subsection of one array to another array.</p>\n<h3 id=\"converting-to-and-from-other-types\">Converting to and from Other Types</h3>\n<p><a href=\"https://msdn.microsoft.com/library/e7225239-f561-45a4-b0b5-69a1cdcae78b\" data-linktype=\"external\"><code>Array.ofList</code></a> creates an array from a list. <a href=\"https://msdn.microsoft.com/library/6bedf5e0-4b22-46da-b09c-6aa09eff220c\" data-linktype=\"external\"><code>Array.ofSeq</code></a> creates an array from a sequence. <a href=\"https://msdn.microsoft.com/library/4deff724-0be4-4688-92e7-9d67a1097786\" data-linktype=\"external\"><code>Array.toList</code></a> and <a href=\"https://msdn.microsoft.com/library/ac28dbab-406c-4fe0-ab08-c1ce5e247af4\" data-linktype=\"external\"><code>Array.toSeq</code></a> convert to these other collection types from the array type.</p>\n<h3 id=\"sorting-arrays\">Sorting Arrays</h3>\n<p>Use <a href=\"https://msdn.microsoft.com/library/c6679075-e7eb-463c-9be5-c89be140c312\" data-linktype=\"external\"><code>Array.sort</code></a> to sort an array by using the generic comparison function. Use <a href=\"https://msdn.microsoft.com/library/144498dc-091d-4575-a229-c0bcbd61426b\" data-linktype=\"external\"><code>Array.sortBy</code></a> to specify a function that generates a value, referred to as a <em>key</em>, to sort by using the generic comparison function on the key. Use <a href=\"https://msdn.microsoft.com/library/699d3638-4244-4f42-8496-45f53d43ce95\" data-linktype=\"external\"><code>Array.sortWith</code></a> if you want to provide a custom comparison function. <code>Array.sort</code>, <code>Array.sortBy</code>, and <code>Array.sortWith</code> all return the sorted array as a new array. The variations <a href=\"https://msdn.microsoft.com/library/36f39947-8a88-4823-9e9b-e9d838d292e0\" data-linktype=\"external\"><code>Array.sortInPlace</code></a>, <a href=\"https://msdn.microsoft.com/library/7fb9d2dd-d461-4c67-8b43-b5c59fc12c3f\" data-linktype=\"external\"><code>Array.sortInPlaceBy</code></a>, and <a href=\"https://msdn.microsoft.com/library/454f9e11-972d-47a6-a854-8031cb0c7b0b\" data-linktype=\"external\"><code>Array.sortInPlaceWith</code></a> modify the existing array instead of returning a new one.</p>\n<h3 id=\"arrays-and-tuples\">Arrays and Tuples</h3>\n<p>The functions <a href=\"https://msdn.microsoft.com/library/23e086b8-b266-4db2-8b68-e88e6a8e2187\" data-linktype=\"external\"><code>Array.zip</code></a> and <a href=\"https://msdn.microsoft.com/library/a529b47c-2e2b-4f79-ad44-c578432d2f48\" data-linktype=\"external\"><code>Array.unzip</code></a> convert arrays of tuple pairs to tuples of arrays and vice versa. <a href=\"https://msdn.microsoft.com/library/1745744a-d2ca-4c3e-b825-3f15d9f4000d\" data-linktype=\"external\"><code>Array.zip3</code></a> and <a href=\"https://msdn.microsoft.com/library/bc3e6db0-f334-444f-8c30-813942880677\" data-linktype=\"external\"><code>Array.unzip3</code></a> are similar except that they work with tuples of three elements or tuples of three arrays.</p>\n<h2 id=\"parallel-computations-on-arrays\">Parallel Computations on Arrays</h2>\n<p>The module <a href=\"https://msdn.microsoft.com/library/60f30b77-5af4-4050-9a5c-bcdb3f5cbb09\" data-linktype=\"external\"><code>Array.Parallel</code></a> contains functions for performing parallel computations on arrays. This module is not available in applications that target versions of the .NET Framework prior to version 4.</p>\n<h2 id=\"see-also\">See Also</h2>\n<p><a href=\"index\" data-linktype=\"relative-path\">F# Language Reference</a></p>\n<p><a href=\"fsharp-types\" data-linktype=\"relative-path\">F#; Types</a></p>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"cartermp\">\r\n<meta name=\"ms.author\" content=\"phcart\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"fsharp\">\r\n<meta name=\"ms.assetid\" content=\"61fa9084-abdc-4cf5-8213-91ec1211866b\">\r\n<meta name=\"description\" content=\"Arrays (F#)\">\r\n<meta name=\"keywords\" content=\"visual f#, f#, functional programming\">\r\n<meta name=\"ms.topic\" content=\"language-reference\">\r\n<meta name=\"ms.date\" content=\"05/16/2016\">\r\n<meta name=\"ms.technology\" content=\"devlang-fsharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/fsharp/language-reference/arrays.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/fsharp/language-reference/arrays.md\">\r\n<meta name=\"document_id\" content=\"57dc8513-81e6-9e94-9008-c90d750f54ee\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../toc2.json\">\r\n","rawMetadata":{"author":"cartermp","ms.author":"phcart","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Arrays (F#) | Microsoft Docs","ms.devlang":"fsharp","ms.assetid":"61fa9084-abdc-4cf5-8213-91ec1211866b","description":"Arrays (F#)","keywords":"visual f#, f#, functional programming","ms.topic":"language-reference","ms.date":"05/16/2016","ms.technology":"devlang-fsharp","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"fixed absolute and msdn links (#1001)","commit_sha":"de0dab146fc811e895dc32f98f877db5e757f82b","commit_date":"2016-09-06 10:59:39 -0700"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Tour of F# (#908)","commit_sha":"b07269aaa2cc042b1843207d7a31437034833cc6","commit_date":"2016-08-18 12:48:30 -0700"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Move snippets to snippets folder, now with some F# (#904)","commit_sha":"37fe2b89d590509e8eb14342da988f15862a9e2b","commit_date":"2016-08-13 16:40:56 -0700"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Reorganize F# snippets (#903)","commit_sha":"6ea1cf8f3779532a9ed8fbdac32592fbb809443c","commit_date":"2016-08-13 15:14:41 -0700"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"F# Docs: Update intro, move files, rename language reference for better URLS (#902)","commit_sha":"70a10b9c3e21291c96d927d13f8710d9e0738d4c","commit_date":"2016-08-13 11:22:39 -0700"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/cartermp","display_name":"Phillip Carter","id":"6309070"},"contributors":[{"profile_url":"https://github.com/cartermp","display_name":"Phillip Carter"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/fsharp/language-reference/arrays.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/fsharp/language-reference/arrays.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/fsharp/language-reference/arrays.md","document_id":"57dc8513-81e6-9e94-9008-c90d750f54ee","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/fsharp/language-reference/arrays","toc_asset_id":"articles/toc.json","toc_rel":"../../toc.json","_op_ogTitle":"Arrays (F#)","_op_displayDate":"2016-5-16","_op_displayDate_source":"2016-05-16T00:00:00Z","_op_wordCount":3572,"_op_rawTitle":"<h1 id=\"arrays\" sourcefile=\"docs/fsharp/language-reference/arrays.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Arrays</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/fsharp/language-reference/arrays","fileRelativePath":"articles/fsharp/language-reference/arrays.html"},"themesRelativePathToOutputRoot":"_themes/"}