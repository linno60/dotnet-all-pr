{"content":"<div><div class=\"content\">\n<p>The <code>val</code> keyword is used to declare a location to store a value in a class or structure type, without initializing it. Storage locations declared in this manner are called <em>explicit fields</em>. Another use of the <code>val</code> keyword is in conjunction with the <code>member</code> keyword to declare an auto-implemented property. For more information on auto-implemented properties, see <a href=\"properties\" data-linktype=\"relative-path\">Properties</a>.</p>\n<h2 id=\"syntax\">Syntax</h2>\n<pre class=\"loading\"><code class=\"lang-fsharp\">val [ mutable ] [ access-modifier ] field-name : type-name\n</code></pre><h2 id=\"remarks\">Remarks</h2>\n<p>The usual way to define fields in a class or structure type is to use a <code>let</code> binding. However, <code>let</code> bindings must be initialized as part of the class constructor, which is not always possible, necessary, or desirable. You can use the <code>val</code> keyword when you want a field that is uninitialized.</p>\n<p>Explicit fields can be static or non-static. The <em>access-modifier</em> can be <code>public</code>, <code>private</code>, or <code>internal</code>. By default, explicit fields are public. This differs from <code>let</code> bindings in classes, which are always private.</p>\n<p>The <a href=\"https://msdn.microsoft.com/library/a3a3307b-8c05-441e-b109-245511614d58\" data-linktype=\"external\">DefaultValue</a> attribute is required on explicit fields in class types that have a primary constructor. This attribute specifies that the field is initialized to zero. The type of the field must support zero-initialization. A type supports zero-initialization if it is one of the following:</p>\n<ul>\n<li><p>A primitive type that has a zero value.</p>\n</li>\n<li><p>A type that supports a null value, either as a normal value, as an abnormal value, or as a representation of a value. This includes classes, tuples, records, functions, interfaces, .NET reference types, the <code>unit</code> type, and discriminated union types.</p>\n</li>\n<li><p>A .NET value type.</p>\n</li>\n<li><p>A structure whose fields all support a default zero value.</p>\n</li>\n</ul>\n<p>For example, an immutable field called <code>someField</code> has a backing field in the .NET compiled representation with the name <code>someField@</code>, and you access the stored value using a property named <code>someField</code>.</p>\n<p>For a mutable field, the .NET compiled representation is a .NET field.</p>\n<div class=\"WARNING\"><h5>Warning</h5><p><code>Note</code> The .NET Framework namespace <code>System.ComponentModel</code> contains an attribute that has the same name. For information about this attribute, see <code>System.ComponentModel.DefaultValueAttribute</code>.</p>\n</div>\n<p>The following code shows the use of explicit fields and, for comparison, a <code>let</code> binding in a class that has a primary constructor. Note that the <code>let</code>-bound field <code>myInt1</code> is private. When the <code>let</code>-bound field <code>myInt1</code> is referenced from a member method, the self identifier <code>this</code> is not required. But when you are referencing the explicit fields <code>myInt2</code> and <code>myString</code>, the self identifier is required.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">type MyType() =\n    let mutable myInt1 = 10\n    [&lt;DefaultValue&gt;] val mutable myInt2 : int\n    [&lt;DefaultValue&gt;] val mutable myString : string\n    member this.SetValsAndPrint( i: int, str: string) =\n       myInt1 &lt;- i\n       this.myInt2 &lt;- i + 1\n       this.myString &lt;- str\n       printfn &quot;%d %d %s&quot; myInt1 (this.myInt2) (this.myString)\n\nlet myObject = new MyType()\nmyObject.SetValsAndPrint(11, &quot;abc&quot;)\n// The following line is not allowed because let bindings are private.\n// myObject.myInt1 &lt;- 20\nmyObject.myInt2 &lt;- 30\nmyObject.myString &lt;- &quot;def&quot;\n\nprintfn &quot;%d %s&quot; (myObject.myInt2) (myObject.myString)\n</code></pre><p>The output is as follows:</p>\n<pre class=\"loading\"><code>11 12 abc\n30 def\n</code></pre><p>The following code shows the use of explicit fields in a class that does not have a primary constructor. In this case, the <code>DefaultValue</code> attribute is not required, but all the fields must be initialized in the constructors that are defined for the type.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">type MyClass =\n    val a : int\n    val b : int\n    // The following version of the constructor is an error\n    // because b is not initialized.\n    // new (a0, b0) = { a = a0; }\n    // The following version is acceptable because all fields are initialized.\n    new(a0, b0) = { a = a0; b = b0; }\n\nlet myClassObj = new MyClass(35, 22)\nprintfn &quot;%d %d&quot; (myClassObj.a) (myClassObj.b)\n</code></pre><p>The output is <code>35 22</code>.</p>\n<p>The following code shows the use of explicit fields in a structure. Because a structure is a value type, it automatically has a default constructor that sets the values of its fields to zero. Therefore, the <code>DefaultValue</code> attribute is not required.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">type MyStruct =\n    struct\n        val mutable myInt : int\n        val mutable myString : string\n    end\n\nlet mutable myStructObj = new MyStruct()\nmyStructObj.myInt &lt;- 11\nmyStructObj.myString &lt;- &quot;xyz&quot;\n\nprintfn &quot;%d %s&quot; (myStructObj.myInt) (myStructObj.myString)\n</code></pre><p>The output is <code>11 xyz</code>.</p>\n<p>Explicit fields are not intended for routine use. In general, when possible you should use a <code>let</code> binding in a class instead of an explicit field. Explicit fields are useful in certain interoperability scenarios, such as when you need to define a structure that will be used in a platform invoke call to a native API, or in COM interop scenarios. For more information, see <a href=\"../functions/external-functions\" data-linktype=\"relative-path\">External Functions</a>. Another situation in which an explicit field might be necessary is when you are working with an F# code generator which emits classes without a primary constructor. Explicit fields are also useful for thread-static variables or similar constructs. For more information, see <code>System.ThreadStaticAttribute</code>.</p>\n<p>When the keywords <code>member val</code> appear together in a type definition, it is a definition of an automatically implemented property. For more information, see <a href=\"properties\" data-linktype=\"relative-path\">Properties</a>.</p>\n<h2 id=\"see-also\">See Also</h2>\n<p><a href=\"properties\" data-linktype=\"relative-path\">Properties</a></p>\n<p><a href=\"index\" data-linktype=\"relative-path\">Members</a></p>\n<p><a href=\"let-bindings-in-classes\" data-linktype=\"relative-path\"><code>let</code> Bindings in Classes</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"cartermp\">\r\n<meta name=\"ms.author\" content=\"phcart\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"fsharp\">\r\n<meta name=\"ms.assetid\" content=\"3bdbc745-436b-407f-bf54-5d11ca829cd0\">\r\n<meta name=\"description\" content=\"Explicit Fields: The val Keyword (F#)\">\r\n<meta name=\"keywords\" content=\"visual f#, f#, functional programming\">\r\n<meta name=\"ms.topic\" content=\"language-reference\">\r\n<meta name=\"ms.date\" content=\"05/16/2016\">\r\n<meta name=\"ms.technology\" content=\"devlang-fsharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/fsharp/language-reference/members/explicit-fields-the-val-keyword.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/fsharp/language-reference/members/explicit-fields-the-val-keyword.md\">\r\n<meta name=\"document_id\" content=\"50db2ab0-931c-5bf2-5dc1-4f03e1b898ad\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../../toc2.json\">\r\n","rawMetadata":{"author":"cartermp","ms.author":"phcart","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Explicit Fields: The val Keyword (F#) | Microsoft Docs","ms.devlang":"fsharp","ms.assetid":"3bdbc745-436b-407f-bf54-5d11ca829cd0","description":"Explicit Fields: The val Keyword (F#)","keywords":"visual f#, f#, functional programming","ms.topic":"language-reference","ms.date":"05/16/2016","ms.technology":"devlang-fsharp","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Petr Onderka","author_email":"gsvick@gmail.com","committer_name":"Maira Wenzel","comitter_email":"mairaw@microsoft.com","message":"Improve titles of some F# articles (#1003)","commit_sha":"d18cfd736f1dbd61ab9e209de4aaa878a88162cd","commit_date":"2016-09-03 11:22:59 -0700"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Move snippets to snippets folder, now with some F# (#904)","commit_sha":"37fe2b89d590509e8eb14342da988f15862a9e2b","commit_date":"2016-08-13 16:40:56 -0700"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Reorganize F# snippets (#903)","commit_sha":"6ea1cf8f3779532a9ed8fbdac32592fbb809443c","commit_date":"2016-08-13 15:14:41 -0700"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"F# Docs: Update intro, move files, rename language reference for better URLS (#902)","commit_sha":"70a10b9c3e21291c96d927d13f8710d9e0738d4c","commit_date":"2016-08-13 11:22:39 -0700"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/cartermp","display_name":"Phillip Carter","id":"6309070"},"contributors":[{"profile_url":"https://github.com/cartermp","display_name":"Phillip Carter"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"},{"profile_url":"https://github.com/svick","display_name":"Petr Onderka","id":"287848"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/fsharp/language-reference/members/explicit-fields-the-val-keyword.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/fsharp/language-reference/members/explicit-fields-the-val-keyword.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/fsharp/language-reference/members/explicit-fields-the-val-keyword.md","document_id":"50db2ab0-931c-5bf2-5dc1-4f03e1b898ad","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/fsharp/language-reference/members/explicit-fields-the-val-keyword","toc_asset_id":"articles/toc.json","toc_rel":"../../../toc.json","_op_ogTitle":"Explicit Fields: The val Keyword (F#)","_op_displayDate":"2016-5-16","_op_displayDate_source":"2016-05-16T00:00:00Z","_op_wordCount":811,"_op_rawTitle":"<h1 id=\"explicit-fields-the-val-keyword\" sourcefile=\"docs/fsharp/language-reference/members/explicit-fields-the-val-keyword.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Explicit Fields: The val Keyword</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/fsharp/language-reference/members/explicit-fields-the-val-keyword","fileRelativePath":"articles/fsharp/language-reference/members/explicit-fields-the-val-keyword.html"},"themesRelativePathToOutputRoot":"_themes/"}