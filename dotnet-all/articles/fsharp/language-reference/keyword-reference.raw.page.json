{"content":"<div><div class=\"content\">\n<p>This topic contains links to information about all F# language keywords.</p>\n<h2 id=\"f-keyword-table\">F# Keyword Table</h2>\n<p>The following table shows all F# keywords in alphabetical order, together with brief descriptions and links to relevant topics that contain more information.</p>\n<table>\n<thead>\n<tr>\n<th>Keyword</th>\n<th>Link</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>abstract</code></td>\n<td><a href=\"members/index\" data-linktype=\"relative-path\">Members</a><br><br><a href=\"abstract-classes\" data-linktype=\"relative-path\">Abstract Classes</a></td>\n<td>Indicates a method that either has no implementation in the type in which it is declared or that is virtual and has a default implementation.</td>\n</tr>\n<tr>\n<td><code>and</code></td>\n<td><a href=\"functions/let-bindings\" data-linktype=\"relative-path\"><code>let</code> Bindings</a><br><br><a href=\"members/index\" data-linktype=\"relative-path\">Members</a><br><br><a href=\"generics/constraints\" data-linktype=\"relative-path\">Constraints</a></td>\n<td>Used in mutually recursive bindings, in property declarations, and with multiple constraints on generic parameters.</td>\n</tr>\n<tr>\n<td><code>as</code></td>\n<td><a href=\"classes\" data-linktype=\"relative-path\">Classes</a><br><br><a href=\"pattern-matching\" data-linktype=\"relative-path\">Pattern Matching</a></td>\n<td>Used to give the current class object an object name. Also used to give a name to a whole pattern within a pattern match.</td>\n</tr>\n<tr>\n<td><code>assert</code></td>\n<td><a href=\"assertions\" data-linktype=\"relative-path\">Assertions</a></td>\n<td>Used to verify code during debugging.</td>\n</tr>\n<tr>\n<td><code>base</code></td>\n<td><a href=\"classes\" data-linktype=\"relative-path\">Classes</a><br><br><a href=\"inheritance\" data-linktype=\"relative-path\">Inheritance</a></td>\n<td>Used as the name of the base class object.</td>\n</tr>\n<tr>\n<td><code>begin</code></td>\n<td><a href=\"verbose-syntax\" data-linktype=\"relative-path\">Verbose Syntax</a></td>\n<td>In verbose syntax, indicates the start of a code block.</td>\n</tr>\n<tr>\n<td><code>class</code></td>\n<td><a href=\"classes\" data-linktype=\"relative-path\">Classes</a></td>\n<td>In verbose syntax, indicates the start of a class definition.</td>\n</tr>\n<tr>\n<td><code>default</code></td>\n<td><a href=\"members/index\" data-linktype=\"relative-path\">Members</a></td>\n<td>Indicates an implementation of an abstract method; used together with an abstract method declaration to create a virtual method.</td>\n</tr>\n<tr>\n<td><code>delegate</code></td>\n<td><a href=\"delegates\" data-linktype=\"relative-path\">Delegates</a></td>\n<td>Used to declare a delegate.</td>\n</tr>\n<tr>\n<td><code>do</code></td>\n<td><a href=\"functions/do-bindings\" data-linktype=\"relative-path\">do Bindings</a><br><br><a href=\"loops-for-to-expression\" data-linktype=\"relative-path\">Loops: <code>for...to</code> Expression</a><br><br><a href=\"loops-for-in-expression\" data-linktype=\"relative-path\">Loops: <code>for...in</code> Expression</a><br><br><a href=\"loops-while-do-expression\" data-linktype=\"relative-path\">Loops: <code>while...do</code> Expression</a></td>\n<td>Used in looping constructs or to execute imperative code.</td>\n</tr>\n<tr>\n<td><code>done</code></td>\n<td><a href=\"verbose-syntax\" data-linktype=\"relative-path\">Verbose Syntax</a></td>\n<td>In verbose syntax, indicates the end of a block of code in a looping expression.</td>\n</tr>\n<tr>\n<td><code>downcast</code></td>\n<td><a href=\"casting-and-conversions\" data-linktype=\"relative-path\">Casting and Conversions</a></td>\n<td>Used to convert to a type that is lower in the inheritance chain.</td>\n</tr>\n<tr>\n<td><code>downto</code></td>\n<td><a href=\"loops-for-to-expression\" data-linktype=\"relative-path\">Loops: <code>for...to</code> Expression</a></td>\n<td>In a <code>for</code> expression, used when counting in reverse.</td>\n</tr>\n<tr>\n<td><code>elif</code></td>\n<td><a href=\"conditional-expressions-if-then-else\" data-linktype=\"relative-path\">Conditional Expressions: <code>if...then...else</code></a></td>\n<td>Used in conditional branching. A short form of <code>else if</code>.</td>\n</tr>\n<tr>\n<td><code>else</code></td>\n<td><a href=\"conditional-expressions-if-then-else\" data-linktype=\"relative-path\">Conditional Expressions: <code>if...then...else</code></a></td>\n<td>Used in conditional branching.</td>\n</tr>\n<tr>\n<td><code>end</code></td>\n<td><a href=\"structures\" data-linktype=\"relative-path\">Structures</a><br><br><a href=\"discriminated-unions\" data-linktype=\"relative-path\">Discriminated Unions</a><br><br><a href=\"records\" data-linktype=\"relative-path\">Records</a><br><br><a href=\"type-extensions\" data-linktype=\"relative-path\">Type Extensions</a><br><br><a href=\"verbose-syntax\" data-linktype=\"relative-path\">Verbose Syntax</a></td>\n<td>In type definitions and type extensions, indicates the end of a section of member definitions.<br><br>In verbose syntax, used to specify the end of a code block that starts with the <code>begin</code> keyword.</td>\n</tr>\n<tr>\n<td><code>exception</code></td>\n<td><a href=\"exception-handling/index\" data-linktype=\"relative-path\">Exception Handling</a><br><br><a href=\"exception-handling/exception-types\" data-linktype=\"relative-path\">Exception Types</a></td>\n<td>Used to declare an exception type.</td>\n</tr>\n<tr>\n<td><code>extern</code></td>\n<td><a href=\"functions/external-functions\" data-linktype=\"relative-path\">External Functions</a></td>\n<td>Indicates that a declared program element is defined in another binary or assembly.</td>\n</tr>\n<tr>\n<td><code>false</code></td>\n<td><a href=\"primitive-types\" data-linktype=\"relative-path\">Primitive Types</a></td>\n<td>Used as a Boolean literal.</td>\n</tr>\n<tr>\n<td><code>finally</code></td>\n<td><a href=\"exception-handling/the-try-finally-expression\" data-linktype=\"relative-path\">Exceptions: The <code>try...finally</code> Expression</a></td>\n<td>Used together with <code>try</code> to introduce a block of code that executes regardless of whether an exception occurs.</td>\n</tr>\n<tr>\n<td><code>for</code></td>\n<td><a href=\"loops-for-to-expression\" data-linktype=\"relative-path\">Loops: <code>for...to</code> Expression</a><br><br><a href=\"loops-for-in-expression\" data-linktype=\"relative-path\">Loops: for...in Expression</a></td>\n<td>Used in looping constructs.</td>\n</tr>\n<tr>\n<td><code>fun</code></td>\n<td><a href=\"functions/lambda-expressions-the-fun-keyword\" data-linktype=\"relative-path\">Lambda Expressions: The <code>fun</code> Keyword</a></td>\n<td>Used in lambda expressions, also known as anonymous functions.</td>\n</tr>\n<tr>\n<td><code>function</code></td>\n<td><a href=\"match-expressions\" data-linktype=\"relative-path\">Match Expressions</a><br><br><a href=\"functions/lambda-expressions-the-fun-keyword\" data-linktype=\"relative-path\">Lambda Expressions: The fun Keyword</a></td>\n<td>Used as a shorter alternative to the <code>fun</code> keyword and a <code>match</code> expression in a lambda expression that has pattern matching on a single argument.</td>\n</tr>\n<tr>\n<td><code>global</code></td>\n<td><a href=\"namespaces\" data-linktype=\"relative-path\">Namespaces</a></td>\n<td>Used to reference the top-level .NET namespace.</td>\n</tr>\n<tr>\n<td><code>if</code></td>\n<td><a href=\"conditional-expressions-if-then-else\" data-linktype=\"relative-path\">Conditional Expressions: <code>if...then...else</code></a></td>\n<td>Used in conditional branching constructs.</td>\n</tr>\n<tr>\n<td><code>in</code></td>\n<td><a href=\"loops-for-in-expression\" data-linktype=\"relative-path\">Loops: for...in Expression</a><br><br><a href=\"verbose-syntax\" data-linktype=\"relative-path\">Verbose Syntax</a></td>\n<td>Used for sequence expressions and, in verbose syntax, to separate expressions from bindings.</td>\n</tr>\n<tr>\n<td><code>inherit</code></td>\n<td><a href=\"inheritance\" data-linktype=\"relative-path\">Inheritance</a></td>\n<td>Used to specify a base class or base interface.</td>\n</tr>\n<tr>\n<td><code>inline</code></td>\n<td><a href=\"functions/index\" data-linktype=\"relative-path\">Functions</a><br><br><a href=\"functions/inline-functions\" data-linktype=\"relative-path\">Inline Functions</a></td>\n<td>Used to indicate a function that should be integrated directly into the caller&#39;s code.</td>\n</tr>\n<tr>\n<td><code>interface</code></td>\n<td><a href=\"interfaces\" data-linktype=\"relative-path\">Interfaces</a></td>\n<td>Used to declare and implement interfaces.</td>\n</tr>\n<tr>\n<td><code>internal</code></td>\n<td><a href=\"access-control\" data-linktype=\"relative-path\">Access Control</a></td>\n<td>Used to specify that a member is visible inside an assembly but not outside it.</td>\n</tr>\n<tr>\n<td><code>lazy</code></td>\n<td><a href=\"lazy-computations\" data-linktype=\"relative-path\">Lazy Computations</a></td>\n<td>Used to specify a computation that is to be performed only when a result is needed.</td>\n</tr>\n<tr>\n<td><code>let</code></td>\n<td><a href=\"functions/let-bindings\" data-linktype=\"relative-path\"><code>let</code> Bindings</a></td>\n<td>Used to associate, or bind, a name to a value or function.</td>\n</tr>\n<tr>\n<td><code>let!</code></td>\n<td><a href=\"asynchronous-workflows\" data-linktype=\"relative-path\">Asynchronous Workflows</a><br><br><a href=\"computation-expressions\" data-linktype=\"relative-path\">Computation Expressions</a></td>\n<td>Used in asynchronous workflows to bind a name to the result of an asynchronous computation, or, in other computation expressions, used to bind a name to a result, which is of the computation type.</td>\n</tr>\n<tr>\n<td><code>match</code></td>\n<td><a href=\"match-expressions\" data-linktype=\"relative-path\">Match Expressions</a></td>\n<td>Used to branch by comparing a value to a pattern.</td>\n</tr>\n<tr>\n<td><code>member</code></td>\n<td><a href=\"members/index\" data-linktype=\"relative-path\">Members</a></td>\n<td>Used to declare a property or method in an object type.</td>\n</tr>\n<tr>\n<td><code>module</code></td>\n<td><a href=\"modules\" data-linktype=\"relative-path\">Modules</a></td>\n<td>Used to associate a name with a group of related types, values, and functions, to logically separate it from other code.</td>\n</tr>\n<tr>\n<td><code>mutable</code></td>\n<td><a href=\"functions/let-bindings\" data-linktype=\"relative-path\">let Bindings</a></td>\n<td>Used to declare a variable, that is, a value that can be changed.</td>\n</tr>\n<tr>\n<td><code>namespace</code></td>\n<td><a href=\"namespaces\" data-linktype=\"relative-path\">Namespaces</a></td>\n<td>Used to associate a name with a group of related types and modules, to logically separate it from other code.</td>\n</tr>\n<tr>\n<td><code>new</code></td>\n<td><a href=\"members/constructors\" data-linktype=\"relative-path\">Constructors</a><br><br><a href=\"generics/constraints\" data-linktype=\"relative-path\">Constraints</a></td>\n<td>Used to declare, define, or invoke a constructor that creates or that can create an object.<br><br>Also used in generic parameter constraints to indicate that a type must have a certain constructor.</td>\n</tr>\n<tr>\n<td><code>not</code></td>\n<td><a href=\"symbol-and-operator-reference/index\" data-linktype=\"relative-path\">Symbol and Operator Reference</a><br><br><a href=\"generics/constraints\" data-linktype=\"relative-path\">Constraints</a></td>\n<td>Not actually a keyword. However, <code>not struct</code> in combination is used as a generic parameter constraint.</td>\n</tr>\n<tr>\n<td><code>null</code></td>\n<td><a href=\"values/null-values\" data-linktype=\"relative-path\">Null Values</a><br><br><a href=\"generics/constraints\" data-linktype=\"relative-path\">Constraints</a></td>\n<td>Indicates the absence of an object.<br><br>Also used in generic parameter constraints.</td>\n</tr>\n<tr>\n<td><code>of</code></td>\n<td><a href=\"discriminated-unions\" data-linktype=\"relative-path\">Discriminated Unions</a><br><br><a href=\"delegates\" data-linktype=\"relative-path\">Delegates</a><br><br><a href=\"exception-handling/exception-types\" data-linktype=\"relative-path\">Exception Types</a></td>\n<td>Used in discriminated unions to indicate the type of categories of values, and in delegate and exception declarations.</td>\n</tr>\n<tr>\n<td><code>open</code></td>\n<td><a href=\"import-declarations-the-open-keyword\" data-linktype=\"relative-path\">Import Declarations: The <code>open</code> Keyword</a></td>\n<td>Used to make the contents of a namespace or module available without qualification.</td>\n</tr>\n<tr>\n<td><code>or</code></td>\n<td><a href=\"symbol-and-operator-reference/index\" data-linktype=\"relative-path\">Symbol and Operator Reference</a><br><br><a href=\"generics/constraints\" data-linktype=\"relative-path\">Constraints</a></td>\n<td>Used with Boolean conditions as a Boolean <code>or</code> operator. Equivalent to `</td>\n</tr>\n<tr>\n<td><code>override</code></td>\n<td><a href=\"members/index\" data-linktype=\"relative-path\">Members</a></td>\n<td>Used to implement a version of an abstract or virtual method that differs from the base version.</td>\n</tr>\n<tr>\n<td><code>private</code></td>\n<td><a href=\"access-control\" data-linktype=\"relative-path\">Access Control</a></td>\n<td>Restricts access to a member to code in the same type or module.</td>\n</tr>\n<tr>\n<td><code>public</code></td>\n<td><a href=\"access-control\" data-linktype=\"relative-path\">Access Control</a></td>\n<td>Allows access to a member from outside the type.</td>\n</tr>\n<tr>\n<td><code>rec</code></td>\n<td><a href=\"functions/index\" data-linktype=\"relative-path\">Functions</a></td>\n<td>Used to indicate that a function is recursive.</td>\n</tr>\n<tr>\n<td><code>return</code></td>\n<td><a href=\"asynchronous-workflows\" data-linktype=\"relative-path\">Asynchronous Workflows</a><br><br><a href=\"computation-expressions\" data-linktype=\"relative-path\">Computation Expressions</a></td>\n<td>Used to indicate a value to provide as the result of a computation expression.</td>\n</tr>\n<tr>\n<td><code>return!</code></td>\n<td><a href=\"computation-expressions\" data-linktype=\"relative-path\">Computation Expressions</a><br><br><a href=\"asynchronous-workflows\" data-linktype=\"relative-path\">Asynchronous Workflows</a></td>\n<td>Used to indicate a computation expression that, when evaluated, provides the result of the containing computation expression.</td>\n</tr>\n<tr>\n<td><code>select</code></td>\n<td><a href=\"query-expressions\" data-linktype=\"relative-path\">Query Expressions</a></td>\n<td>Used in query expressions to specify what fields or columns to extract. Note that this is a contextual keyword, which means that it is not actually a reserved word and it only acts like a keyword in appropriate context.</td>\n</tr>\n<tr>\n<td><code>static</code></td>\n<td><a href=\"members/index\" data-linktype=\"relative-path\">Members</a></td>\n<td>Used to indicate a method or property that can be called without an instance of a type, or a value member that is shared among all instances of a type.</td>\n</tr>\n<tr>\n<td><code>struct</code></td>\n<td><a href=\"structures\" data-linktype=\"relative-path\">Structures</a><br><br><a href=\"generics/constraints\" data-linktype=\"relative-path\">Constraints</a></td>\n<td>Used to declare a structure type.<br><br>Also used in generic parameter constraints.<br><br>Used for OCaml compatibility in module definitions.</td>\n</tr>\n<tr>\n<td><code>then</code></td>\n<td><a href=\"conditional-expressions-if-then-else\" data-linktype=\"relative-path\">Conditional Expressions: <code>if...then...else</code></a><br><br><a href=\"members/constructors\" data-linktype=\"relative-path\">Constructors</a></td>\n<td>Used in conditional expressions.<br><br>Also used to perform side effects after object construction.</td>\n</tr>\n<tr>\n<td><code>to</code></td>\n<td><a href=\"loops-for-to-expression\" data-linktype=\"relative-path\">Loops: <code>for...to</code> Expression</a></td>\n<td>Used in <code>for</code> loops to indicate a range.</td>\n</tr>\n<tr>\n<td><code>true</code></td>\n<td><a href=\"primitive-types\" data-linktype=\"relative-path\">Primitive Types</a></td>\n<td>Used as a Boolean literal.</td>\n</tr>\n<tr>\n<td><code>try</code></td>\n<td><a href=\"exception-handling/the-try-with-expression\" data-linktype=\"relative-path\">Exceptions: The try...with Expression</a><br><br><a href=\"exception-handling/the-try-finally-expression\" data-linktype=\"relative-path\">Exceptions: The try...finally Expression</a></td>\n<td>Used to introduce a block of code that might generate an exception. Used together with <code>with</code> or <code>finally</code>.</td>\n</tr>\n<tr>\n<td><code>type</code></td>\n<td><a href=\"fsharp-types\" data-linktype=\"relative-path\">F# Types</a><br><br><a href=\"classes\" data-linktype=\"relative-path\">Classes</a><br><br><a href=\"records\" data-linktype=\"relative-path\">Records</a><br><br><a href=\"structures\" data-linktype=\"relative-path\">Structures</a><br><br><a href=\"enumerations\" data-linktype=\"relative-path\">Enumerations</a><br><br><a href=\"discriminated-unions\" data-linktype=\"relative-path\">Discriminated Unions</a><br><br><a href=\"type-abbreviations\" data-linktype=\"relative-path\">Type Abbreviations</a><br><br><a href=\"units-of-measure\" data-linktype=\"relative-path\">Units of Measure</a></td>\n<td>Used to declare a class, record, structure, discriminated union, enumeration type, unit of measure, or type abbreviation.</td>\n</tr>\n<tr>\n<td><code>upcast</code></td>\n<td><a href=\"casting-and-conversions\" data-linktype=\"relative-path\">Casting and Conversions</a></td>\n<td>Used to convert to a type that is higher in the inheritance chain.</td>\n</tr>\n<tr>\n<td><code>use</code></td>\n<td><a href=\"resource-management-the-use-keyword\" data-linktype=\"relative-path\">Resource Management: The <code>use</code> Keyword</a></td>\n<td>Used instead of <code>let</code> for values that require <code>Dispose</code> to be called to free resources.</td>\n</tr>\n<tr>\n<td><code>use!</code></td>\n<td><a href=\"computation-expressions\" data-linktype=\"relative-path\">Computation Expressions</a><br><br><a href=\"asynchronous-workflows\" data-linktype=\"relative-path\">Asynchronous Workflows</a></td>\n<td>Used instead of <code>let!</code> in asynchronous workflows and other computation expressions for values that require <code>Dispose</code> to be called to free resources.</td>\n</tr>\n<tr>\n<td><code>val</code></td>\n<td><a href=\"members/explicit-fields-the-val-keyword\" data-linktype=\"relative-path\">Explicit Fields: The <code>val</code> Keyword</a><br><br><a href=\"signatures\" data-linktype=\"relative-path\">Signatures</a><br><br><a href=\"members/index\" data-linktype=\"relative-path\">Members</a></td>\n<td>Used in a signature to indicate a value, or in a type to declare a member, in limited situations.</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td><a href=\"primitive-types\" data-linktype=\"relative-path\">Primitive Types</a></td>\n<td>Indicates the .NET <code>void</code> type. Used when interoperating with other .NET languages.</td>\n</tr>\n<tr>\n<td><code>when</code></td>\n<td><a href=\"generics/constraints\" data-linktype=\"relative-path\">Constraints</a></td>\n<td>Used for Boolean conditions (<em>when guards</em>) on pattern matches and to introduce a constraint clause for a generic type parameter.</td>\n</tr>\n<tr>\n<td><code>while</code></td>\n<td><a href=\"loops-while-do-expression\" data-linktype=\"relative-path\">Loops: <code>while...do</code> Expression</a></td>\n<td>Introduces a looping construct.</td>\n</tr>\n<tr>\n<td><code>with</code></td>\n<td><a href=\"match-expressions\" data-linktype=\"relative-path\">Match Expressions</a><br><br><a href=\"object-expressions\" data-linktype=\"relative-path\">Object Expressions</a><br><br><a href=\"copy-and-update-record-expressions\" data-linktype=\"relative-path\">Copy and Update Record Expressions</a><br><br><a href=\"type-extensions\" data-linktype=\"relative-path\">Type Extensions</a><br><br><a href=\"exception-handling/the-try-with-expression\" data-linktype=\"relative-path\">Exceptions: The <code>try...with</code> Expression</a></td>\n<td>Used together with the <code>match</code> keyword in pattern matching expressions. Also used in object expressions, record copying expressions, and type extensions to introduce member definitions, and to introduce exception handlers.</td>\n</tr>\n<tr>\n<td><code>yield</code></td>\n<td><a href=\"sequences\" data-linktype=\"relative-path\">Sequences</a></td>\n<td>Used in a sequence expression to produce a value for a sequence.</td>\n</tr>\n<tr>\n<td><code>yield!</code></td>\n<td><a href=\"computation-expressions\" data-linktype=\"relative-path\">Computation Expressions</a><br><br><a href=\"asynchronous-workflows\" data-linktype=\"relative-path\">Asynchronous Workflows</a></td>\n<td>Used in a computation expression to append the result of a given computation expression to a collection of results for the containing computation expression.</td>\n</tr>\n</tbody>\n</table>\n<p>The following tokens are reserved in F# because they are keywords in the OCaml language:</p>\n<ul>\n<li><code>asr</code></li>\n<li><code>land</code></li>\n<li><code>lor</code></li>\n<li><code>lsl</code></li>\n<li><code>lsr</code></li>\n<li><code>lxor</code></li>\n<li><code>mod</code></li>\n<li><code>sig</code></li>\n</ul>\n<p>If you use the <code>--mlcompatibility</code> compiler option, the above keywords are available for use as identifiers.</p>\n<p>The following tokens are reserved as keywords for future expansion of the F# language:</p>\n<ul>\n<li><code>atomic</code></li>\n<li><code>break</code></li>\n<li><code>checked</code></li>\n<li><code>component</code></li>\n<li><code>const</code></li>\n<li><code>constraint</code></li>\n<li><code>constructor</code></li>\n<li><code>continue</code></li>\n<li><code>eager</code></li>\n<li><code>event</code></li>\n<li><code>external</code></li>\n<li><code>fixed</code></li>\n<li><code>functor</code></li>\n<li><code>include</code></li>\n<li><code>method</code></li>\n<li><code>mixin</code></li>\n<li><code>object</code></li>\n<li><code>parallel</code></li>\n<li><code>process</code></li>\n<li><code>protected</code></li>\n<li><code>pure</code></li>\n<li><code>sealed</code></li>\n<li><code>tailcall</code></li>\n<li><code>trait</code></li>\n<li><code>virtual</code></li>\n<li><code>volatile</code></li>\n</ul>\n<h2 id=\"see-also\">See Also</h2>\n<p><a href=\"index\" data-linktype=\"relative-path\">F# Language Reference</a></p>\n<p><a href=\"symbol-and-operator-reference/index\" data-linktype=\"relative-path\">Symbol and Operator Reference</a></p>\n<p><a href=\"compiler-options\" data-linktype=\"relative-path\">Compiler Options</a></p>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"cartermp\">\r\n<meta name=\"ms.author\" content=\"phcart\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"fsharp\">\r\n<meta name=\"ms.assetid\" content=\"5795ce1f-11bf-4798-9f1f-6e44ffa1477e\">\r\n<meta name=\"description\" content=\"Keyword Reference (F#)\">\r\n<meta name=\"keywords\" content=\"visual f#, f#, functional programming\">\r\n<meta name=\"ms.topic\" content=\"language-reference\">\r\n<meta name=\"ms.date\" content=\"05/16/2016\">\r\n<meta name=\"ms.technology\" content=\"devlang-fsharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-21 01:42 AM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/fsharp/language-reference/keyword-reference.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/fsharp/language-reference/keyword-reference.md\">\r\n<meta name=\"document_id\" content=\"ad1cc613-2f7c-19c5-f43e-936fd95d3d73\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../toc2.json\">\r\n","rawMetadata":{"author":"cartermp","ms.author":"phcart","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Keyword Reference (F#) | Microsoft Docs","ms.devlang":"fsharp","ms.assetid":"5795ce1f-11bf-4798-9f1f-6e44ffa1477e","description":"Keyword Reference (F#)","keywords":"visual f#, f#, functional programming","ms.topic":"language-reference","ms.date":"05/16/2016","ms.technology":"devlang-fsharp","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Replace table with list for keywords (#1131)","commit_sha":"888e6946780685bf80e2e525b3b93ecb19c8ba68","commit_date":"2016-10-10 13:45:07 -0700"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"F# Docs: Update intro, move files, rename language reference for better URLS (#902)","commit_sha":"70a10b9c3e21291c96d927d13f8710d9e0738d4c","commit_date":"2016-08-13 11:22:39 -0700"}],"updated_at":"2017-03-21 01:42 AM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/cartermp","display_name":"Phillip Carter","id":"6309070"},"contributors":[{"profile_url":"https://github.com/cartermp","display_name":"Phillip Carter"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/21/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/fsharp/language-reference/keyword-reference.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/fsharp/language-reference/keyword-reference.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/fsharp/language-reference/keyword-reference.md","document_id":"ad1cc613-2f7c-19c5-f43e-936fd95d3d73","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/fsharp/language-reference/keyword-reference","toc_asset_id":"articles/toc.json","toc_rel":"../../toc.json","_op_ogTitle":"Keyword Reference (F#)","_op_displayDate":"2016-5-16","_op_displayDate_source":"2016-05-16T00:00:00Z","_op_wordCount":1426,"_op_rawTitle":"<h1 id=\"keyword-reference\" sourcefile=\"docs/fsharp/language-reference/keyword-reference.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Keyword Reference</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/fsharp/language-reference/keyword-reference","fileRelativePath":"articles/fsharp/language-reference/keyword-reference.html"},"themesRelativePathToOutputRoot":"_themes/"}