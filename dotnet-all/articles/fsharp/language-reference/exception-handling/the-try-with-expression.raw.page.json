{"content":"<div><div class=\"content\">\n<p>This topic describes the <code>try...with</code> expression, the expression that is used for exception handling in the F# language.</p>\n<h2 id=\"syntax\">Syntax</h2>\n<pre class=\"loading\"><code class=\"lang-fsharp\">try\n    expression1\nwith\n| pattern1 -&gt; expression2\n| pattern2 -&gt; expression3\n...\n</code></pre><h2 id=\"remarks\">Remarks</h2>\n<p>The <code>try...with</code> expression is used to handle exceptions in F#. It is similar to the <code>try...catch</code> statement in C#. In the preceding syntax, the code in <em>expression1</em> might generate an exception. The <code>try...with</code> expression returns a value. If no exception is thrown, the whole expression returns the value of <em>expression1</em>. If an exception is thrown, each <em>pattern</em> is compared in turn with the exception, and for the first matching pattern, the corresponding <em>expression</em>, known as the <em>exception handler</em>, for that branch is executed, and the overall expression returns the value of the expression in that exception handler. If no pattern matches, the exception propagates up the call stack until a matching handler is found. The types of the values returned from each expression in the exception handlers must match the type returned from the expression in the <code>try</code> block.</p>\n<p>Frequently, the fact that an error occurred also means that there is no valid value that can be returned from the expressions in each exception handler. A frequent pattern is to have the type of the expression be an option type. The following code example illustrates this pattern.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">let divide1 x y =\n   try\n      Some (x / y)\n   with\n      | :? System.DivideByZeroException -&gt; printfn &quot;Division by zero!&quot;; None\n\nlet result1 = divide1 100 0\n</code></pre><p>Exceptions can be .NET exceptions, or they can be F# exceptions. You can define F# exceptions by using the <code>exception</code> keyword.</p>\n<p>You can use a variety of patterns to filter on the exception type and other conditions; the options are summarized in the following table.</p>\n<table>\n<thead>\n<tr>\n<th>Pattern</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>:? <em>exception-type</em></td>\n<td>Matches the specified .NET exception type.</td>\n</tr>\n<tr>\n<td>:? <em>exception-type</em> as <em>identifier</em></td>\n<td>Matches the specified .NET exception type, but gives the exception a named value.</td>\n</tr>\n<tr>\n<td><em>exception-name</em>(<em>arguments</em>)</td>\n<td>Matches an F# exception type and binds the arguments.</td>\n</tr>\n<tr>\n<td><em>identifier</em></td>\n<td>Matches any exception and binds the name to the exception object. Equivalent to <strong>:? System.Exception as</strong><em>identifier</em></td>\n</tr>\n<tr>\n<td><em>identifier</em> when <em>condition</em></td>\n<td>Matches any exception if the condition is true.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"examples\">Examples</h2>\n<p>The following code examples illustrate the use of the various exception handler patterns.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">// This example shows the use of the as keyword to assign a name to a\n// .NET exception.\nlet divide2 x y =\n  try\n    Some( x / y )\n  with\n    | :? System.DivideByZeroException as ex -&gt; printfn &quot;Exception! %s &quot; (ex.Message); None\n\n// This version shows the use of a condition to branch to multiple paths\n// with the same exception.\nlet divide3 x y flag =\n  try\n     x / y\n  with\n     | ex when flag -&gt; printfn &quot;TRUE: %s&quot; (ex.ToString()); 0\n     | ex when not flag -&gt; printfn &quot;FALSE: %s&quot; (ex.ToString()); 1\n\nlet result2 = divide3 100 0 true\n\n// This version shows the use of F# exceptions.\nexception Error1 of string\nexception Error2 of string * int\n\nlet function1 x y =\n   try\n      if x = y then raise (Error1(&quot;x&quot;))\n      else raise (Error2(&quot;x&quot;, 10))\n   with\n      | Error1(str) -&gt; printfn &quot;Error1 %s&quot; str\n      | Error2(str, i) -&gt; printfn &quot;Error2 %s %d&quot; str i\n\nfunction1 10 10\nfunction1 9 2\n</code></pre><div class=\"NOTE\"><h5>Note</h5><p>The <code>try...with</code> construct is a separate expression from the <code>try...finally</code> expression. Therefore, if your code requires both a <code>with</code> block and a <code>finally</code> block, you will have to nest the two expressions.</p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p>You can use <code>try...with</code> in asynchronous workflows and other computation expressions, in which case a customized version of the <code>try...with</code> expression is used. For more information, see <a href=\"../asynchronous-workflows\" data-linktype=\"relative-path\">Asynchronous Workflows</a>, and <a href=\"../computation-expressions\" data-linktype=\"relative-path\">Computation Expressions</a>.</p>\n</div>\n<h2 id=\"see-also\">See Also</h2>\n<p><a href=\"index\" data-linktype=\"relative-path\">Exception Handling</a></p>\n<p><a href=\"exception-types\" data-linktype=\"relative-path\">Exception Types</a></p>\n<p><a href=\"the-try-finally-expression\" data-linktype=\"relative-path\">Exceptions: The <code>try...finally</code> Expression</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"cartermp\">\r\n<meta name=\"ms.author\" content=\"phcart\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc.json\">\r\n<meta name=\"ms.devlang\" content=\"fsharp\">\r\n<meta name=\"ms.assetid\" content=\"36721076-95cd-4636-ae43-79dd512bee6c\">\r\n<meta name=\"description\" content=\"Exceptions: The try...with Expression (F#)\">\r\n<meta name=\"keywords\" content=\"visual f#, f#, functional programming\">\r\n<meta name=\"ms.topic\" content=\"language-reference\">\r\n<meta name=\"ms.date\" content=\"05/16/2016\">\r\n<meta name=\"ms.technology\" content=\"devlang-fsharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-21 01:42 AM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/fsharp/language-reference/exception-handling/the-try-with-expression.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/fsharp/language-reference/exception-handling/the-try-with-expression.md\">\r\n<meta name=\"document_id\" content=\"64eb4fe4-bbf8-e999-b565-731114467c13\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../../toc.json\">\r\n","rawMetadata":{"author":"cartermp","ms.author":"phcart","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Exceptions: The try...with Expression (F#) | Microsoft Docs","ms.devlang":"fsharp","ms.assetid":"36721076-95cd-4636-ae43-79dd512bee6c","description":"Exceptions: The try...with Expression (F#)","keywords":"visual f#, f#, functional programming","ms.topic":"language-reference","ms.date":"05/16/2016","ms.technology":"devlang-fsharp","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Petr Onderka","author_email":"gsvick@gmail.com","committer_name":"Maira Wenzel","comitter_email":"mairaw@microsoft.com","message":"Improve titles of some F# articles (#1003)","commit_sha":"d18cfd736f1dbd61ab9e209de4aaa878a88162cd","commit_date":"2016-09-03 11:22:59 -0700"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Move snippets to snippets folder, now with some F# (#904)","commit_sha":"37fe2b89d590509e8eb14342da988f15862a9e2b","commit_date":"2016-08-13 16:40:56 -0700"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Reorganize F# snippets (#903)","commit_sha":"6ea1cf8f3779532a9ed8fbdac32592fbb809443c","commit_date":"2016-08-13 15:14:41 -0700"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"F# Docs: Update intro, move files, rename language reference for better URLS (#902)","commit_sha":"70a10b9c3e21291c96d927d13f8710d9e0738d4c","commit_date":"2016-08-13 11:22:39 -0700"}],"updated_at":"2017-03-21 01:42 AM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/cartermp","display_name":"Phillip Carter","id":"6309070"},"contributors":[{"profile_url":"https://github.com/cartermp","display_name":"Phillip Carter"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"},{"profile_url":"https://github.com/svick","display_name":"Petr Onderka","id":"287848"}],"update_at":"3/21/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/fsharp/language-reference/exception-handling/the-try-with-expression.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/fsharp/language-reference/exception-handling/the-try-with-expression.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/fsharp/language-reference/exception-handling/the-try-with-expression.md","document_id":"64eb4fe4-bbf8-e999-b565-731114467c13","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/fsharp/language-reference/exception-handling/the-try-with-expression","toc_asset_id":"articles/toc.json","toc_rel":"../../../toc.json","_op_ogTitle":"Exceptions: The try...with Expression (F#)","_op_displayDate":"2016-5-16","_op_displayDate_source":"2016-05-16T00:00:00Z","_op_wordCount":601,"_op_rawTitle":"<h1 id=\"exceptions-the-trywith-expression\" sourcefile=\"docs/fsharp/language-reference/exception-handling/the-try-with-expression.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Exceptions: The try...with Expression</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/fsharp/language-reference/exception-handling/the-try-with-expression","fileRelativePath":"articles/fsharp/language-reference/exception-handling/the-try-with-expression.html"},"themesRelativePathToOutputRoot":"_themes/"}