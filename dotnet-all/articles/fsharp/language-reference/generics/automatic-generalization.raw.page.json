{"content":"<div><div class=\"content\">\n<p>F# uses type inference to evaluate the types of functions and expressions. This topic describes how F# automatically generalizes the arguments and types of functions so that they work with multiple types when this is possible.</p>\n<h2 id=\"automatic-generalization-1\">Automatic Generalization</h2>\n<p>The F# compiler, when it performs type inference on a function, determines whether a given parameter can be generic. The compiler examines each parameter and determines whether the function has a dependency on the specific type of that parameter. If it does not, the type is inferred to be generic.</p>\n<p>The following code example illustrates a function that the compiler infers to be generic.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">let max a b = if a &gt; b then a else b\n</code></pre><p>The type is inferred to be <code>&#39;a -&gt; &#39;a -&gt; &#39;a</code>.</p>\n<p>The type indicates that this is a function that takes two arguments of the same unknown type and returns a value of that same type. One of the reasons that the previous function can be generic is that the greater-than operator (<code>&gt;</code>) is itself generic. The greater-than operator has the signature <code>&#39;a -&gt; &#39;a -&gt; bool</code>. Not all operators are generic, and if the code in a function uses a parameter type together with a non-generic function or operator, that parameter type cannot be generalized.</p>\n<p>Because <code>max</code> is generic, it can be used with types such as <code>int</code>, <code>float</code>, and so on, as shown in the following examples.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">let biggestFloat = max 2.0 3.0\nlet biggestInt = max 2 3\n</code></pre><p>However, the two arguments must be of the same type. The signature is <code>&#39;a -&gt; &#39;a -&gt; &#39;a</code>, not <code>&#39;a -&gt; &#39;b -&gt; &#39;a</code>. Therefore, the following code produces an error because the types do not match.</p>\n<pre class=\"loading\"><code class=\"lang-fsharp\">// Error: type mismatch.\nlet biggestIntFloat = max 2.0 3\n</code></pre><p>The <code>max</code> function also works with any type that supports the greater-than operator. Therefore, you could also use it on a string, as shown in the following code.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">let testString = max &quot;cab&quot; &quot;cat&quot;\n</code></pre><h2 id=\"value-restriction\">Value Restriction</h2>\n<p>The compiler performs automatic generalization only on complete function definitions that have explicit arguments, and on simple immutable values.</p>\n<p>This means that the compiler issues an error if you try to compile code that is not sufficiently constrained to be a specific type, but is also not generalizable. The error message for this problem refers to this restriction on automatic generalization for values as the <em>value restriction</em>.</p>\n<p>Typically, the value restriction error occurs either when you want a construct to be generic but the compiler has insufficient information to generalize it, or when you unintentionally omit sufficient type information in a nongeneric construct. The solution to the value restriction error is to provide more explicit information to more fully constrain the type inference problem, in one of the following ways:</p>\n<ul>\n<li><p>Constrain a type to be nongeneric by adding an explicit type annotation to a value or parameter.</p>\n</li>\n<li><p>If the problem is using a nongeneralizable construct to define a generic function, such as a function composition or incompletely applied curried function arguments, try to rewrite the function as an ordinary function definition.</p>\n</li>\n<li><p>If the problem is an expression that is too complex to be generalized, make it into a function by adding an extra, unused parameter.</p>\n</li>\n<li><p>Add explicit generic type parameters. This option is rarely used.</p>\n</li>\n<li><p>The following code examples illustrate each of these scenarios.</p>\n</li>\n</ul>\n<p>Case 1: Too complex an expression. In this example, the list <code>counter</code> is intended to be <code>int option ref</code>, but it is not defined as a simple immutable value.</p>\n<pre class=\"loading\"><code class=\"lang-fsharp\">let counter = ref None\n// Adding a type annotation fixes the problem:\nlet counter : int option ref = ref None\n</code></pre><p>Case 2: Using a nongeneralizable construct to define a generic function. In this example, the construct is nongeneralizable because it involves partial application of function arguments.</p>\n<pre class=\"loading\"><code class=\"lang-fsharp\">let maxhash = max &lt;&lt; hash\n// The following is acceptable because the argument for maxhash is explicit:\nlet maxhash obj = (max &lt;&lt; hash) obj\n</code></pre><p>Case 3: Adding an extra, unused parameter. Because this expression is not simple enough for generalization, the compiler issues the value restriction error.</p>\n<pre class=\"loading\"><code class=\"lang-fsharp\">let emptyList10 = Array.create 10 []\n// Adding an extra (unused) parameter makes it a function, which is generalizable.\nlet emptyList10 () = Array.create 10 []\n</code></pre><p>Case 4: Adding type parameters.</p>\n<pre class=\"loading\"><code class=\"lang-fsharp\">let arrayOf10Lists = Array.create 10 []\n// Adding a type parameter and type annotation lets you write a generic value.\nlet arrayOf10Lists&lt;&#39;T&gt; = Array.create 10 ([]:&#39;T list)\n</code></pre><p>In the last case, the value becomes a type function, which may be used to create values of many different types, for example as follows:</p>\n<pre class=\"loading\"><code class=\"lang-fsharp\">let intLists = arrayOf10Lists&lt;int&gt;\nlet floatLists = arrayOf10Lists&lt;float&gt;\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p><a href=\"../type-inference\" data-linktype=\"relative-path\">Type Inference</a></p>\n<p><a href=\"index\" data-linktype=\"relative-path\">Generics</a></p>\n<p><a href=\"statically-resolved-type-parameters\" data-linktype=\"relative-path\">Statically Resolved Type Parameters</a></p>\n<p><a href=\"constraints\" data-linktype=\"relative-path\">Constraints</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"cartermp\">\r\n<meta name=\"ms.author\" content=\"phcart\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.devlang\" content=\"fsharp\">\r\n<meta name=\"ms.assetid\" content=\"14a3554c-3fad-4eba-a93d-8ba07d1245b4\">\r\n<meta name=\"description\" content=\"Automatic Generalization (F#)\">\r\n<meta name=\"keywords\" content=\"visual f#, f#, functional programming\">\r\n<meta name=\"ms.topic\" content=\"language-reference\">\r\n<meta name=\"ms.date\" content=\"05/16/2016\">\r\n<meta name=\"ms.technology\" content=\"devlang-fsharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/fsharp/language-reference/generics/automatic-generalization.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/fsharp/language-reference/generics/automatic-generalization.md\">\r\n<meta name=\"document_id\" content=\"219357e4-8a63-6759-9eac-36d6e98e6ec8\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../../toc2.json\">\r\n","rawMetadata":{"author":"cartermp","ms.author":"phcart","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"Automatic Generalization (F#) | Microsoft Docs","ms.devlang":"fsharp","ms.assetid":"14a3554c-3fad-4eba-a93d-8ba07d1245b4","description":"Automatic Generalization (F#)","keywords":"visual f#, f#, functional programming","ms.topic":"language-reference","ms.date":"05/16/2016","ms.technology":"devlang-fsharp","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Move snippets to snippets folder, now with some F# (#904)","commit_sha":"37fe2b89d590509e8eb14342da988f15862a9e2b","commit_date":"2016-08-13 16:40:56 -0700"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Reorganize F# snippets (#903)","commit_sha":"6ea1cf8f3779532a9ed8fbdac32592fbb809443c","commit_date":"2016-08-13 15:14:41 -0700"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"F# Docs: Update intro, move files, rename language reference for better URLS (#902)","commit_sha":"70a10b9c3e21291c96d927d13f8710d9e0738d4c","commit_date":"2016-08-13 11:22:39 -0700"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/cartermp","display_name":"Phillip Carter","id":"6309070"},"contributors":[{"profile_url":"https://github.com/cartermp","display_name":"Phillip Carter"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/fsharp/language-reference/generics/automatic-generalization.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/fsharp/language-reference/generics/automatic-generalization.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/fsharp/language-reference/generics/automatic-generalization.md","document_id":"219357e4-8a63-6759-9eac-36d6e98e6ec8","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/fsharp/language-reference/generics/automatic-generalization","toc_asset_id":"articles/toc.json","toc_rel":"../../../toc.json","_op_ogTitle":"Automatic Generalization (F#)","_op_displayDate":"2016-5-16","_op_displayDate_source":"2016-05-16T00:00:00Z","_op_wordCount":775,"_op_rawTitle":"<h1 id=\"automatic-generalization\" sourcefile=\"docs/fsharp/language-reference/generics/automatic-generalization.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Automatic Generalization</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/fsharp/language-reference/generics/automatic-generalization","fileRelativePath":"articles/fsharp/language-reference/generics/automatic-generalization.html"},"themesRelativePathToOutputRoot":"_themes/"}