{"content":"<div><div class=\"content\">\n<p>Floating point and signed integer values in F# can have associated units of measure, which are typically used to indicate length, volume, mass, and so on. By using quantities with units, you enable the compiler to verify that arithmetic relationships have the correct units, which helps prevent programming errors.</p>\n<h2 id=\"syntax\">Syntax</h2>\n<pre class=\"loading\"><code class=\"lang-fsharp\">[&lt;Measure&gt;] type unit-name [ = measure ]\n</code></pre><h2 id=\"remarks\">Remarks</h2>\n<p>The previous syntax defines <em>unit-name</em> as a unit of measure. The optional part is used to define a new measure in terms of previously defined units. For example, the following line defines the measure <code>cm</code> (centimeter).</p>\n<pre class=\"loading\"><code class=\"lang-fsharp\">[&lt;Measure&gt;] type cm\n</code></pre><p>The following line defines the measure <code>ml</code> (milliliter) as a cubic centimeter (<code>cm^3</code>).</p>\n<pre class=\"loading\"><code class=\"lang-fsharp\">[&lt;Measure&gt;] type ml = cm^3\n</code></pre><p>In the previous syntax, <em>measure</em> is a formula that involves units. In formulas that involve units, integral powers are supported (positive and negative), spaces between units indicate a product of the two units, <code>*</code> also indicates a product of units, and <code>/</code> indicates a quotient of units. For a reciprocal unit, you can either use a negative integer power or a <code>/</code> that indicates a separation between the numerator and denominator of a unit formula. Multiple units in the denominator should be surrounded by parentheses. Units separated by spaces after a <code>/</code> are interpreted as being part of the denominator, but any units following a <code>*</code> are interpreted as being part of the numerator.</p>\n<p>You can use 1 in unit expressions, either alone to indicate a dimensionless quantity, or together with other units, such as in the numerator. For example, the units for a rate would be written as <code>1/s</code>, where <code>s</code> indicates seconds. Parentheses are not used in unit formulas. You do not specify numeric conversion constants in the unit formulas; however, you can define conversion constants with units separately and use them in unit-checked computations.</p>\n<p>Unit formulas that mean the same thing can be written in various equivalent ways. Therefore, the compiler converts unit formulas into a consistent form, which converts negative powers to reciprocals, groups units into a single numerator and a denominator, and alphabetizes the units in the numerator and denominator.</p>\n<p>For example, the unit formulas <code>kg m s^-2</code> and <code>m /s s * kg</code> are both converted to <code>kg m/s^2</code>.</p>\n<p>You use units of measure in floating point expressions. Using floating point numbers together with associated units of measure adds another level of type safety and helps avoid the unit mismatch errors that can occur in formulas when you use weakly typed floating point numbers. If you write a floating point expression that uses units, the units in the expression must match.</p>\n<p>You can annotate literals with a unit formula in angle brackets, as shown in the following examples.</p>\n<pre class=\"loading\"><code class=\"lang-fsharp\">1.0&lt;cm&gt;\n55.0&lt;miles/hour&gt;\n</code></pre><p>You do not put a space between the number and the angle bracket; however, you can include a literal suffix such as <code>f</code>, as in the following example.</p>\n<pre class=\"loading\"><code class=\"lang-fsharp\">// The f indicates single-precision floating point.\n55.0f&lt;miles/hour&gt;\n</code></pre><p>Such an annotation changes the type of the literal from its primitive type (such as <code>float</code>) to a dimensioned type, such as <code>float&lt;cm&gt;</code> or, in this case, <code>float&lt;miles/hour&gt;</code>. A unit annotation of <code>&lt;1&gt;</code> indicates a dimensionless quantity, and its type is equivalent to the primitive type without a unit parameter.</p>\n<p>The type of a unit of measure is a floating point or signed integral type together with an extra unit annotation, indicated in brackets. Thus, when you write the type of a conversion from <code>g</code> (grams) to <code>kg</code> (kilograms), you describe the types as follows.</p>\n<pre class=\"loading\"><code class=\"lang-fsharp\">let convertg2kg (x : float&lt;g&gt;) = x / 1000.0&lt;g/kg&gt;\n</code></pre><p>Units of measure are used for compile-time unit checking but are not persisted in the run-time environment. Therefore, they do not affect performance.</p>\n<p>Units of measure can be applied to any type, not just floating point types; however, only floating point types, signed integral types, and decimal types support dimensioned quantities. Therefore, it only makes sense to use units of measure on the primitive types and on aggregates that contain these primitive types.</p>\n<p>The following example illustrates the use of units of measure.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">// Mass, grams.\n[&lt;Measure&gt;] type g\n// Mass, kilograms.\n[&lt;Measure&gt;] type kg\n// Weight, pounds.\n[&lt;Measure&gt;] type lb\n\n// Distance, meters.\n[&lt;Measure&gt;] type m\n// Distance, cm\n[&lt;Measure&gt;] type cm\n\n// Distance, inches.\n[&lt;Measure&gt;] type inch\n// Distance, feet\n[&lt;Measure&gt;] type ft\n\n// Time, seconds.\n[&lt;Measure&gt;] type s\n\n// Force, Newtons.\n[&lt;Measure&gt;] type N = kg m / s\n\n// Pressure, bar.\n[&lt;Measure&gt;] type bar\n// Pressure, Pascals\n[&lt;Measure&gt;] type Pa = N / m^2\n\n// Volume, milliliters.\n[&lt;Measure&gt;] type ml\n// Volume, liters.\n[&lt;Measure&gt;] type L\n\n// Define conversion constants.\nlet gramsPerKilogram : float&lt;g kg^-1&gt; = 1000.0&lt;g/kg&gt;\nlet cmPerMeter : float&lt;cm/m&gt; = 100.0&lt;cm/m&gt;\nlet cmPerInch : float&lt;cm/inch&gt; = 2.54&lt;cm/inch&gt;\n\nlet mlPerCubicCentimeter : float&lt;ml/cm^3&gt; = 1.0&lt;ml/cm^3&gt;\nlet mlPerLiter : float&lt;ml/L&gt; = 1000.0&lt;ml/L&gt;\n\n// Define conversion functions.\nlet convertGramsToKilograms (x : float&lt;g&gt;) = x / gramsPerKilogram\nlet convertCentimetersToInches (x : float&lt;cm&gt;) = x / cmPerInch\n</code></pre><p>The following code example illustrates how to convert from a dimensionless floating point number to a dimensioned floating point value. You just multiply by 1.0, applying the dimensions to the 1.0. You can abstract this into a function like <code>degreesFahrenheit</code>.</p>\n<p>Also, when you pass dimensioned values to functions that expect dimensionless floating point numbers, you must cancel out the units or cast to <code>float</code> by using the <code>float</code> operator. In this example, you divide by <code>1.0&lt;degC&gt;</code> for the arguments to <code>printf</code> because <code>printf</code> expects dimensionless quantities.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">[&lt;Measure&gt;] type degC // temperature, Celsius/Centigrade\n[&lt;Measure&gt;] type degF // temperature, Fahrenheit\n\nlet convertCtoF ( temp : float&lt;degC&gt; ) = 9.0&lt;degF&gt; / 5.0&lt;degC&gt; * temp + 32.0&lt;degF&gt;\nlet convertFtoC ( temp: float&lt;degF&gt; ) = 5.0&lt;degC&gt; / 9.0&lt;degF&gt; * ( temp - 32.0&lt;degF&gt;)\n\n// Define conversion functions from dimensionless floating point values.\nlet degreesFahrenheit temp = temp * 1.0&lt;degF&gt;\nlet degreesCelsius temp = temp * 1.0&lt;degC&gt;\n\nprintfn &quot;Enter a temperature in degrees Fahrenheit.&quot;\nlet input = System.Console.ReadLine()\nlet parsedOk, floatValue = System.Double.TryParse(input)\nif parsedOk\n   then\n      printfn &quot;That temperature in Celsius is %8.2f degrees C.&quot; ((convertFtoC (degreesFahrenheit floatValue))/(1.0&lt;degC&gt;))\n   else\n      printfn &quot;Error parsing input.&quot;\n</code></pre><p>The following example session shows the outputs from and inputs to this code.</p>\n<pre class=\"loading\"><code>Enter a temperature in degrees Fahrenheit.\n90\nThat temperature in degrees Celsius is    32.22.\n</code></pre><h2 id=\"using-generic-units\">Using Generic Units</h2>\n<p>You can write generic functions that operate on data that has an associated unit of measure. You do this by specifying a type together with a generic unit as a type parameter, as shown in the following code example.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">// Distance, meters.\n[&lt;Measure&gt;] type m\n// Time, seconds.\n[&lt;Measure&gt;] type s\n\nlet genericSumUnits ( x : float&lt;&#39;u&gt;) (y: float&lt;&#39;u&gt;) = x + y\n\nlet v1 = 3.1&lt;m/s&gt;\nlet v2 = 2.7&lt;m/s&gt;\nlet x1 = 1.2&lt;m&gt;\nlet t1 = 1.0&lt;s&gt;\n\n// OK: a function that has unit consistency checking.\nlet result1 = genericSumUnits v1 v2\n// Error reported: mismatched units.\n// Uncomment to see error.\n// let result2 = genericSumUnits v1 x1\n</code></pre><h2 id=\"creating-aggregate-types-with-generic-units\">Creating Aggregate Types with Generic Units</h2>\n<p>The following code shows how to create an aggregate type that consists of individual floating point values that have units that are generic. This enables a single type to be created that works with a variety of units. Also, generic units preserve type safety by ensuring that a generic type that has one set of units is a different type than the same generic type with a different set of units. The basis of this technique is that the <code>Measure</code> attribute can be applied to the type parameter.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\"> // Distance, meters.\n[&lt;Measure&gt;] type m\n// Time, seconds.\n[&lt;Measure&gt;] type s\n\n// Define a vector together with a measure type parameter.\n// Note the attribute applied to the type parameter.\ntype vector3D&lt;[&lt;Measure&gt;] &#39;u&gt; = { x : float&lt;&#39;u&gt;; y : float&lt;&#39;u&gt;; z : float&lt;&#39;u&gt;}\n\n// Create instances that have two different measures.\n// Create a position vector.\nlet xvec : vector3D&lt;m&gt; = { x = 0.0&lt;m&gt;; y = 0.0&lt;m&gt;; z = 0.0&lt;m&gt; }\n// Create a velocity vector.\nlet v1vec : vector3D&lt;m/s&gt; = { x = 1.0&lt;m/s&gt;; y = -1.0&lt;m/s&gt;; z = 0.0&lt;m/s&gt; }\n</code></pre><h2 id=\"units-at-runtime\">Units at Runtime</h2>\n<p>Units of measure are used for static type checking. When floating point values are compiled, the units of measure are eliminated, so the units are lost at run time. Therefore, any attempt to implement functionality that depends on checking the units at run time is not possible. For example, implementing a <code>ToString</code> function to print out the units is not possible.</p>\n<h2 id=\"conversions\">Conversions</h2>\n<p>To convert a type that has units (for example, <code>float&lt;&#39;u&gt;</code>) to a type that does not have units, you can use the standard conversion function. For example, you can use <code>float</code> to convert to a <code>float</code> value that does not have units, as shown in the following code.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">[&lt;Measure&gt;]\ntype cm\nlet length = 12.0&lt;cm&gt;\nlet x = float length\n</code></pre><p>To convert a unitless value to a value that has units, you can multiply by a 1 or 1.0 value that is annotated with the appropriate units. However, for writing interoperability layers, there are also some explicit functions that you can use to convert unitless values to values with units. These are in the <a href=\"https://msdn.microsoft.com/library/69d08ac5-5d51-4c20-bf1e-850fd312ece3\" data-linktype=\"external\">Microsoft.FSharp.Core.LanguagePrimitives</a> module. For example, to convert from a unitless <code>float</code> to a <code>float&lt;cm&gt;</code>, use <a href=\"https://msdn.microsoft.com/library/69520bc7-d67b-46b8-9004-7cac9646b8d9\" data-linktype=\"external\">FloatWithMeasure</a>, as shown in the following code.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">open Microsoft.FSharp.Core\nlet height:float&lt;cm&gt; = LanguagePrimitives.FloatWithMeasure x\n</code></pre><h2 id=\"units-of-measure-in-the-f-power-pack\">Units of Measure in the F# Power Pack</h2>\n<p>A unit library is available in the F# PowerPack. The unit library includes SI units and physical constants.</p>\n<h2 id=\"see-also\">See Also</h2>\n<p><a href=\"index\" data-linktype=\"relative-path\">F# Language Reference</a></p>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"cartermp\">\r\n<meta name=\"ms.author\" content=\"phcart\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"fsharp\">\r\n<meta name=\"ms.assetid\" content=\"cb2eb658-df6c-422e-afad-97422609c773\">\r\n<meta name=\"description\" content=\"Units of Measure (F#)\">\r\n<meta name=\"keywords\" content=\"visual f#, f#, functional programming\">\r\n<meta name=\"ms.topic\" content=\"language-reference\">\r\n<meta name=\"ms.date\" content=\"05/16/2016\">\r\n<meta name=\"ms.technology\" content=\"devlang-fsharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/fsharp/language-reference/units-of-measure.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/fsharp/language-reference/units-of-measure.md\">\r\n<meta name=\"document_id\" content=\"97e555a8-086f-da1e-e75b-ef650b9f0dd6\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../toc2.json\">\r\n","rawMetadata":{"author":"cartermp","ms.author":"phcart","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Units of Measure (F#) | Microsoft Docs","ms.devlang":"fsharp","ms.assetid":"cb2eb658-df6c-422e-afad-97422609c773","description":"Units of Measure (F#)","keywords":"visual f#, f#, functional programming","ms.topic":"language-reference","ms.date":"05/16/2016","ms.technology":"devlang-fsharp","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Move snippets to snippets folder, now with some F# (#904)","commit_sha":"37fe2b89d590509e8eb14342da988f15862a9e2b","commit_date":"2016-08-13 16:40:56 -0700"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Reorganize F# snippets (#903)","commit_sha":"6ea1cf8f3779532a9ed8fbdac32592fbb809443c","commit_date":"2016-08-13 15:14:41 -0700"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"F# Docs: Update intro, move files, rename language reference for better URLS (#902)","commit_sha":"70a10b9c3e21291c96d927d13f8710d9e0738d4c","commit_date":"2016-08-13 11:22:39 -0700"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/cartermp","display_name":"Phillip Carter","id":"6309070"},"contributors":[{"profile_url":"https://github.com/cartermp","display_name":"Phillip Carter"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/fsharp/language-reference/units-of-measure.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/fsharp/language-reference/units-of-measure.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/fsharp/language-reference/units-of-measure.md","document_id":"97e555a8-086f-da1e-e75b-ef650b9f0dd6","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/fsharp/language-reference/units-of-measure","toc_asset_id":"articles/toc.json","toc_rel":"../../toc.json","_op_ogTitle":"Units of Measure (F#)","_op_displayDate":"2016-5-16","_op_displayDate_source":"2016-05-16T00:00:00Z","_op_wordCount":1550,"_op_rawTitle":"<h1 id=\"units-of-measure\" sourcefile=\"docs/fsharp/language-reference/units-of-measure.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Units of Measure</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/fsharp/language-reference/units-of-measure","fileRelativePath":"articles/fsharp/language-reference/units-of-measure.html"},"themesRelativePathToOutputRoot":"_themes/"}