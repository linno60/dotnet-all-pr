{"content":"<div><div class=\"content\">\n<div class=\"NOTE\"><h5>Note</h5><p>The API reference links in this article will take you to MSDN.  The docs.microsoft.com API reference is not complete.</p>\n</div>\n<p>This topic includes a table of symbols and operators that are used in the F# language.</p>\n<h2 id=\"table-of-symbols-and-operators\">Table of Symbols and Operators</h2>\n<p>The following table describes symbols used in the F# language, provides links to topics that provide more information, and provides a brief description of some of the uses of the symbol. Symbols are ordered according to the ASCII character set ordering.</p>\n<table>\n<thead>\n<tr>\n<th>Symbol or operator</th>\n<th>Links</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>!</code></td>\n<td><a href=\"../reference-cells\" data-linktype=\"relative-path\">Reference Cells</a><br><br><a href=\"../computation-expressions\" data-linktype=\"relative-path\">Computation Expressions</a></td>\n<td><ul><li>Dereferences a reference cell.<br></li><li>After a keyword, indicates a modified version of the keyword&#39;s behavior as controlled by a workflow.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>!=</code></td>\n<td>Not applicable.</td>\n<td><ul><li>Not used in F#. Use <code>&lt;&gt;</code> for inequality operations.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&quot;</code></td>\n<td><a href=\"../literals\" data-linktype=\"relative-path\">Literals</a><br><br><a href=\"../strings\" data-linktype=\"relative-path\">Strings</a></td>\n<td><ul><li>Delimits a text string.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&quot;&quot;&quot;</code></td>\n<td><a href=\"../strings\" data-linktype=\"relative-path\">Strings</a></td>\n<td>Delimits a verbatim text string. Differs from <code>@&quot;...&quot;</code> in that a you can indicate a quotation mark character by using a single quote in the string.</td>\n</tr>\n<tr>\n<td><code>#</code></td>\n<td><a href=\"../compiler-directives\" data-linktype=\"relative-path\">Compiler Directives</a><br><br><a href=\"../flexible-types\" data-linktype=\"relative-path\">Flexible Types</a></td>\n<td><ul><li>Prefixes a preprocessor or compiler directive, such as <code>#light</code>.<br></li><li>When used with a type, indicates a <em>flexible type</em>, which refers to a type or any one of its derived types.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>$</code></td>\n<td>No more information available.</td>\n<td><ul><li>Used internally for certain compiler-generated variable and function names.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>%</code></td>\n<td><a href=\"arithmetic-operators\" data-linktype=\"relative-path\">Arithmetic Operators</a><br><br><a href=\"../code-quotations\" data-linktype=\"relative-path\">Code Quotations</a></td>\n<td><ul><li>Computes the integer modulus.<br></li><li>Used for splicing expressions into typed code quotations.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>%%</code></td>\n<td><a href=\"../code-quotations\" data-linktype=\"relative-path\">Code Quotations</a></td>\n<td><ul><li>Used for splicing expressions into untyped code quotations.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>%?</code></td>\n<td><a href=\"nullable-operators\" data-linktype=\"relative-path\">Nullable Operators</a></td>\n<td><ul><li>Computes the integer modulus, when the right side is a nullable type.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&amp;</code></td>\n<td><a href=\"../match-expressions\" data-linktype=\"relative-path\">Match Expressions</a></td>\n<td><ul><li>Computes the address of a mutable value, for use when interoperating with other languages.<br></li><li>Used in AND patterns.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&amp;&amp;</code></td>\n<td><a href=\"boolean-operators\" data-linktype=\"relative-path\">Boolean Operators</a></td>\n<td><ul><li>Computes the Boolean AND operation.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&amp;&amp;&amp;</code></td>\n<td><a href=\"bitwise-operators\" data-linktype=\"relative-path\">Bitwise Operators</a></td>\n<td><ul><li>Computes the bitwise AND operation.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&#39;</code></td>\n<td><a href=\"../literals\" data-linktype=\"relative-path\">Literals</a><br><br><a href=\"../generics/automatic-generalization\" data-linktype=\"relative-path\">Automatic Generalization</a></td>\n<td><ul><li>Delimits a single-character literal.<br></li><li>Indicates a generic type parameter.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&#96;&#96;...&#96;&#96;</code></td>\n<td>No more information available.</td>\n<td><ul><li>Delimits an identifier that would otherwise not be a legal identifier, such as a language keyword.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>( )</code></td>\n<td><a href=\"../unit-type\" data-linktype=\"relative-path\">Unit Type</a></td>\n<td><ul><li>Represents the single value of the unit type.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>(...)</code></td>\n<td><a href=\"../tuples\" data-linktype=\"relative-path\">Tuples</a><br><br><a href=\"../operator-overloading\" data-linktype=\"relative-path\">Operator Overloading</a></td>\n<td><ul><li>Indicates the order in which expressions are evaluated.<br></li><li>Delimits a tuple.<br></li><li>Used in operator definitions.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>(*...*)</code></td>\n<td></td>\n<td><ul><li>Delimits a comment that could span multiple lines.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>(&#124;...&#124;)</code></td>\n<td><a href=\"../active-patterns\" data-linktype=\"relative-path\">Active Patterns</a></td>\n<td><ul><li>Delimits an active pattern. Also called <em>banana clips</em>.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>*</code></td>\n<td><a href=\"arithmetic-operators\" data-linktype=\"relative-path\">Arithmetic Operators</a><br><br><a href=\"../tuples\" data-linktype=\"relative-path\">Tuples</a><br><br><a href=\"../units-of-measure\" data-linktype=\"relative-path\">Units of Measure</a></td>\n<td><ul><li>When used as a binary operator, multiplies the left and right sides.<br></li><li>In types, indicates pairing in a tuple.<br></li><li>Used in units of measure types.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>*?</code></td>\n<td><a href=\"nullable-operators\" data-linktype=\"relative-path\">Nullable Operators</a></td>\n<td><ul><li>Multiplies the left and right sides, when the right side is a nullable type.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>**</code></td>\n<td><a href=\"arithmetic-operators\" data-linktype=\"relative-path\">Arithmetic Operators</a></td>\n<td><ul><li>Computes the exponentiation operation (<code>x ** y</code> means <code>x</code> to the power of <code>y</code>).<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>+</code></td>\n<td><a href=\"arithmetic-operators\" data-linktype=\"relative-path\">Arithmetic Operators</a></td>\n<td><ul><li>When used as a binary operator, adds the left and right sides.<br></li><li>When used as a unary operator, indicates a positive quantity. (Formally, it produces the same value with the sign unchanged.)<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>+?</code></td>\n<td><a href=\"nullable-operators\" data-linktype=\"relative-path\">Nullable Operators</a></td>\n<td><ul><li>Adds the left and right sides, when the right side is a nullable type.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>,</code></td>\n<td><a href=\"../tuples\" data-linktype=\"relative-path\">Tuples</a></td>\n<td><ul><li>Separates the elements of a tuple, or type parameters.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>-</code></td>\n<td><a href=\"arithmetic-operators\" data-linktype=\"relative-path\">Arithmetic Operators</a></td>\n<td><ul><li>When used as a binary operator, subtracts the right side from the left side.<br></li><li>When used as a unary operator, performs a negation operation.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>-</code></td>\n<td><a href=\"nullable-operators\" data-linktype=\"relative-path\">Nullable Operators</a></td>\n<td><ul><li>Subtracts the right side from the left side, when the right side is a nullable type.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>-&gt;</code></td>\n<td><a href=\"../functions/index\" data-linktype=\"relative-path\">Functions</a><br><br><a href=\"../match-expressions\" data-linktype=\"relative-path\">Match Expressions</a></td>\n<td><ul><li>In function types, delimits arguments and return values.<br></li><li>Yields an expression (in sequence expressions); equivalent to the <code>yield</code> keyword.<br></li><li>Used in match expressions<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>.</code></td>\n<td><a href=\"../members/index\" data-linktype=\"relative-path\">Members</a><br><br><a href=\"../primitive-types\" data-linktype=\"relative-path\">Primitive Types</a></td>\n<td><ul><li>Accesses a member, and separates individual names in a fully qualified name.<br></li><li>Specifies a decimal point in floating point numbers.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>..</code></td>\n<td><a href=\"../loops-for-in-expression\" data-linktype=\"relative-path\">Loops: <code>for...in</code> Expression</a></td>\n<td><ul><li>Specifies a range.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>.. ..</code></td>\n<td><a href=\"../loops-for-in-expression\" data-linktype=\"relative-path\">Loops: <code>for...in</code> Expression</a></td>\n<td><ul><li>Specifies a range together with an increment.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>.[...]</code></td>\n<td><a href=\"../arrays\" data-linktype=\"relative-path\">Arrays</a></td>\n<td><ul><li>Accesses an array element.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>/</code></td>\n<td><a href=\"arithmetic-operators\" data-linktype=\"relative-path\">Arithmetic Operators</a><br><br><a href=\"../units-of-measure\" data-linktype=\"relative-path\">Units of Measure</a></td>\n<td><ul><li>Divides the left side (numerator) by the right side (denominator).<br></li><li>Used in units of measure types.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>/?</code></td>\n<td><a href=\"nullable-operators\" data-linktype=\"relative-path\">Nullable Operators</a></td>\n<td><ul><li>Divides the left side by the right side, when the right side is a nullable type.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>//</code></td>\n<td></td>\n<td><ul><li>Indicates the beginning of a single-line comment.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>///</code></td>\n<td><a href=\"../xml-documentation\" data-linktype=\"relative-path\">XML Documentation</a></td>\n<td><ul><li>Indicates an XML comment.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>:</code></td>\n<td><a href=\"../functions/index\" data-linktype=\"relative-path\">Functions</a></td>\n<td><ul><li>In a type annotation, separates a parameter or member name from its type.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>::</code></td>\n<td><a href=\"../lists\" data-linktype=\"relative-path\">Lists</a><br><br><a href=\"../match-expressions\" data-linktype=\"relative-path\">Match Expressions</a></td>\n<td><ul><li>Creates a list. The element on the left side is prepended to the list on the right side.<br></li><li>Used in pattern matching to separate the parts of a list.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>:=</code></td>\n<td><a href=\"../reference-cells\" data-linktype=\"relative-path\">Reference Cells</a></td>\n<td><ul><li>Assigns a value to a reference cell.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>:&gt;</code></td>\n<td><a href=\"../casting-and-conversions\" data-linktype=\"relative-path\">Casting and Conversions</a></td>\n<td><ul><li>Converts a type to type that is higher in the hierarchy.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>:?</code></td>\n<td><a href=\"../match-expressions\" data-linktype=\"relative-path\">Match Expressions</a></td>\n<td><ul><li>Returns <code>true</code> if the value matches the specified type; otherwise, returns <code>false</code> (type test operator).<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>:?&gt;</code></td>\n<td><a href=\"../casting-and-conversions\" data-linktype=\"relative-path\">Casting and Conversions</a></td>\n<td><ul><li>Converts a type to a type that is lower in the hierarchy.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>;</code></td>\n<td><a href=\"../verbose-syntax\" data-linktype=\"relative-path\">Verbose Syntax</a><br><br><a href=\"../lists\" data-linktype=\"relative-path\">Lists</a><br><br><a href=\"../records\" data-linktype=\"relative-path\">Records</a></td>\n<td><ul><li>Separates expressions (used mostly in verbose syntax).<br></li><li>Separates elements of a list.<br></li><li>Separates fields of a record.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&lt;</code></td>\n<td><a href=\"arithmetic-operators\" data-linktype=\"relative-path\">Arithmetic Operators</a></td>\n<td><ul><li>Computes the less-than operation.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&lt;?</code></td>\n<td><a href=\"nullable-operators\" data-linktype=\"relative-path\">Nullable Operators</a></td>\n<td>Computes the less than operation, when the right side is a nullable type.</td>\n</tr>\n<tr>\n<td><code>&lt;&lt;</code></td>\n<td><a href=\"../functions/index\" data-linktype=\"relative-path\">Functions</a></td>\n<td><ul><li>Composes two functions in reverse order; the second one is executed first (backward composition operator).<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&lt;&lt;&lt;</code></td>\n<td><a href=\"bitwise-operators\" data-linktype=\"relative-path\">Bitwise Operators</a></td>\n<td><ul><li>Shifts bits in the quantity on the left side to the left by the number of bits specified on the right side.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&lt;-</code></td>\n<td><a href=\"../values/index\" data-linktype=\"relative-path\">Values</a></td>\n<td><ul><li>Assigns a value to a variable.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&lt;...&gt;</code></td>\n<td><a href=\"../generics/automatic-generalization\" data-linktype=\"relative-path\">Automatic Generalization</a></td>\n<td><ul><li>Delimits type parameters.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&lt;&gt;</code></td>\n<td><a href=\"arithmetic-operators\" data-linktype=\"relative-path\">Arithmetic Operators</a></td>\n<td><ul><li>Returns <code>true</code> if the left side is not equal to the right side; otherwise, returns false.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&lt;&gt;?</code></td>\n<td><a href=\"nullable-operators\" data-linktype=\"relative-path\">Nullable Operators</a></td>\n<td><ul><li>Computes the &quot;not equal&quot; operation when the right side is a nullable type.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&lt;=</code></td>\n<td><a href=\"arithmetic-operators\" data-linktype=\"relative-path\">Arithmetic Operators</a></td>\n<td><ul><li>Returns <code>true</code> if the left side is less than or equal to the right side; otherwise, returns <code>false</code>.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&lt;=?</code></td>\n<td><a href=\"nullable-operators\" data-linktype=\"relative-path\">Nullable Operators</a></td>\n<td><ul><li>Computes the &quot;less than or equal to&quot; operation when the right side is a nullable type.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&lt;&#124;</code></td>\n<td><a href=\"../functions/index\" data-linktype=\"relative-path\">Functions</a></td>\n<td><ul><li>Passes the result of the expression on the right side to the function on left side (backward pipe operator).<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&lt;&#124;&#124;</code></td>\n<td><a href=\"https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.%5b-%5bhh-%5d%5b%27t1%2c%27t2%2c%27u%5d-function-%5bfsharp%5d\" data-linktype=\"external\">Operators.&#40; &#60;&#124;&#124; &#41;&#60;&#39;T1,&#39;T2,&#39;U&#62; Function</a></td>\n<td><ul><li>Passes the tuple of two arguments on the right side to the function on left side.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&lt;&#124;&#124;&#124;</code></td>\n<td><a href=\"https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.%5b-%5bhhh-%5d%5b%27t1%2c%27t2%2c%27t3%2c%27u%5d-function-%5bfsharp%5d\" data-linktype=\"external\">Operators.&#40; &#60;&#124;&#124;&#124; &#41;&#60;&#39;T1,&#39;T2,&#39;T3,&#39;U&#62; Function</a></td>\n<td><ul><li>Passes the tuple of three arguments on the right side to the function on left side.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&lt;@...@&gt;</code></td>\n<td><a href=\"../code-quotations\" data-linktype=\"relative-path\">Code Quotations</a></td>\n<td><ul><li>Delimits a typed code quotation.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&lt;@@...@@&gt;</code></td>\n<td><a href=\"../code-quotations\" data-linktype=\"relative-path\">Code Quotations</a></td>\n<td><ul><li>Delimits an untyped code quotation.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>=</code></td>\n<td><a href=\"arithmetic-operators\" data-linktype=\"relative-path\">Arithmetic Operators</a></td>\n<td><ul><li>Returns <code>true</code> if the left side is equal to the right side; otherwise, returns <code>false</code>.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>=?</code></td>\n<td><a href=\"nullable-operators\" data-linktype=\"relative-path\">Nullable Operators</a></td>\n<td><ul><li>Computes the &quot;equal&quot; operation when the right side is a nullable type.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>==</code></td>\n<td>Not applicable.</td>\n<td><ul><li>Not used in F#. Use <code>=</code> for equality operations.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&gt;</code></td>\n<td><a href=\"arithmetic-operators\" data-linktype=\"relative-path\">Arithmetic Operators</a></td>\n<td><ul><li>Returns <code>true</code> if the left side is greater than the right side; otherwise, returns <code>false</code>.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&gt;?</code></td>\n<td><a href=\"nullable-operators\" data-linktype=\"relative-path\">Nullable Operators</a></td>\n<td><ul><li>Computes the &quot;greather than&quot; operation when the right side is a nullable type.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&gt;&gt;</code></td>\n<td><a href=\"../functions/index\" data-linktype=\"relative-path\">Functions</a></td>\n<td><ul><li>Composes two functions (forward composition operator).<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&gt;&gt;&gt;</code></td>\n<td><a href=\"bitwise-operators\" data-linktype=\"relative-path\">Bitwise Operators</a></td>\n<td><ul><li>Shifts bits in the quantity on the left side to the right by the number of places specified on the right side.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&gt;=</code></td>\n<td><a href=\"arithmetic-operators\" data-linktype=\"relative-path\">Arithmetic Operators</a></td>\n<td><ul><li>Returns <code>true</code> if the right side is greater than or equal to the left side; otherwise, returns <code>false</code>.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&gt;=?</code></td>\n<td><a href=\"nullable-operators\" data-linktype=\"relative-path\">Nullable Operators</a></td>\n<td><ul><li>Computes the &quot;greater than or equal&quot; operation when the right side is a nullable type.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>?</code></td>\n<td><a href=\"../parameters-and-arguments\" data-linktype=\"relative-path\">Parameters and Arguments</a></td>\n<td><ul><li>Specifies an optional argument.<br></li><li>Used as an operator for dynamic method and property calls. You must provide your own implementation.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>? ... &lt;- ...</code></td>\n<td>No more information available.</td>\n<td><ul><li>Used as an operator for setting dynamic properties. You must provide your own implementation.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>?&gt;=</code>, <code>?&gt;</code>, <code>?&lt;=</code>, <code>?&lt;</code>, <code>?=</code>, <code>?&lt;&gt;</code>, <code>?+</code>, <code>?-</code>, <code>?*</code>, <code>?/</code></td>\n<td><a href=\"nullable-operators\" data-linktype=\"relative-path\">Nullable Operators</a></td>\n<td><ul><li>Equivalent to the corresponding operators without the ? prefix, where a nullable type is on the left.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&gt;=?</code>, <code>&gt;?</code>, <code>&lt;=?</code>, <code>&lt;?</code>, <code>=?</code>, <code>&lt;&gt;?</code>, <code>+?</code>, <code>-?</code>, <code>*?</code>, <code>/?</code></td>\n<td><a href=\"nullable-operators\" data-linktype=\"relative-path\">Nullable Operators</a></td>\n<td><ul><li>Equivalent to the corresponding operators without the ? suffix, where a nullable type is on the right.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>?&gt;=?</code>, <code>?&gt;?</code>, <code>?&lt;=?</code>, <code>?&lt;?</code>, <code>?=?</code>, <code>?&lt;&gt;?</code>, <code>?+?</code>, <code>?-?</code>, <code>?*?</code>, <code>?/?</code></td>\n<td><a href=\"nullable-operators\" data-linktype=\"relative-path\">Nullable Operators</a></td>\n<td><ul><li>Equivalent to the corresponding operators without the surrounding question marks, where both sides are nullable types.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>@</code></td>\n<td><a href=\"../lists\" data-linktype=\"relative-path\">Lists</a><br><br><a href=\"../strings\" data-linktype=\"relative-path\">Strings</a></td>\n<td><ul><li>Concatenates two lists.<br></li><li>When placed before a string literal, indicates that the string is to be interpreted verbatim, with no interpretation of escape characters.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>[...]</code></td>\n<td><a href=\"../lists\" data-linktype=\"relative-path\">Lists</a></td>\n<td><ul><li>Delimits the elements of a list.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>[&#124;...&#124;]</code></td>\n<td><a href=\"../arrays\" data-linktype=\"relative-path\">Arrays</a></td>\n<td><ul><li>Delimits the elements of an array.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>[&lt;...&gt;]</code></td>\n<td><a href=\"../attributes\" data-linktype=\"relative-path\">Attributes</a></td>\n<td><ul><li>Delimits an attribute.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>\\</code></td>\n<td><a href=\"../strings\" data-linktype=\"relative-path\">Strings</a></td>\n<td><ul><li>Escapes the next character; used in character and string literals.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>^</code></td>\n<td><a href=\"../generics/statically-resolved-type-parameters\" data-linktype=\"relative-path\">Statically Resolved Type Parameters</a><br><br><a href=\"../strings\" data-linktype=\"relative-path\">Strings</a></td>\n<td><ul><li>Specifies type parameters that must be resolved at compile time, not at runtime.<br></li><li>Concatenates strings.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>^^^</code></td>\n<td><a href=\"bitwise-operators\" data-linktype=\"relative-path\">Bitwise Operators</a></td>\n<td><ul><li>Computes the bitwise exclusive OR operation.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>_</code></td>\n<td><a href=\"../match-expressions\" data-linktype=\"relative-path\">Match Expressions</a><br><br><a href=\"../generics/index\" data-linktype=\"relative-path\">Generics</a></td>\n<td><ul><li>Indicates a wildcard pattern.<br></li><li>Specifies an anonymous generic parameter.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&#96;</code></td>\n<td><a href=\"../generics/automatic-generalization\" data-linktype=\"relative-path\">Automatic Generalization</a></td>\n<td><ul><li>Used internally to indicate a generic type parameter.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>{...}</code></td>\n<td><a href=\"../sequences\" data-linktype=\"relative-path\">Sequences</a><br><br><a href=\"../records\" data-linktype=\"relative-path\">Records</a></td>\n<td><ul><li>Delimits sequence expressions and computation expressions.<br></li><li>Used in record definitions.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&#124;</code></td>\n<td><a href=\"../match-expressions\" data-linktype=\"relative-path\">Match Expressions</a></td>\n<td><ul><li>Delimits individual match cases, individual discriminated union cases, and enumeration values.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&#124;&#124;</code></td>\n<td><a href=\"boolean-operators\" data-linktype=\"relative-path\">Boolean Operators</a></td>\n<td><ul><li>Computes the Boolean OR operation.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&#124;&#124;&#124;</code></td>\n<td><a href=\"bitwise-operators\" data-linktype=\"relative-path\">Bitwise Operators</a></td>\n<td><ul><li>Computes the bitwise OR operation.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&#124;&gt;</code></td>\n<td><a href=\"../functions/index\" data-linktype=\"relative-path\">Functions</a></td>\n<td><ul><li>Passes the result of the left side to the function on the right side (forward pipe operator).<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&#124;&#124;&gt;</code></td>\n<td><a href=\"https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.%5b-hh%5d-%5d%5b%27t1%2c%27t2%2c%27u%5d-function-%5bfsharp%5d\" data-linktype=\"external\">Operators.&#40; &#124;&#124;&#62; &#41;&#60;&#39;T1,&#39;T2,&#39;U&#62; Function</a></td>\n<td><ul><li>Passes the tuple of two arguments on the left side to the function on the right side.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>&#124;&#124;&#124;&gt;</code></td>\n<td><a href=\"https://msdn.microsoft.com/visualfsharpdocs/conceptual/operators.%5b-hhh%5d-%5d%5b%27t1%2c%27t2%2c%27t3%2c%27u%5d-function-%5bfsharp%5d\" data-linktype=\"external\">Operators.&#40; &#124;&#124;&#124;&#62; &#41;&#60;&#39;T1,&#39;T2,&#39;T3,&#39;U&#62; Function</a></td>\n<td><ul><li>Passes the tuple of three arguments on the left side to the function on the right side.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>~~</code></td>\n<td><a href=\"../operator-overloading\" data-linktype=\"relative-path\">Operator Overloading</a></td>\n<td><ul><li>Used to declare an overload for the unary negation operator.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>~~~</code></td>\n<td><a href=\"bitwise-operators\" data-linktype=\"relative-path\">Bitwise Operators</a></td>\n<td><ul><li>Computes the bitwise NOT operation.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>~-</code></td>\n<td><a href=\"../operator-overloading\" data-linktype=\"relative-path\">Operator Overloading</a></td>\n<td><ul><li>Used to declare an overload for the unary minus operator.<br></li><ul></ul></ul></td>\n</tr>\n<tr>\n<td><code>~+</code></td>\n<td><a href=\"../operator-overloading\" data-linktype=\"relative-path\">Operator Overloading</a></td>\n<td><ul><li>Used to declare an overload for the unary plus operator.<br></li><ul></ul></ul></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"operator-precedence\">Operator Precedence</h2>\n<p>The following table shows the order of precedence of operators and other expression keywords in the F# language, in order from lowest precedence to the highest precedence. Also listed is the associativity, if applicable.</p>\n<table>\n<thead>\n<tr>\n<th>Operator</th>\n<th>Associativity</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>as</code></td>\n<td>Right</td>\n</tr>\n<tr>\n<td><code>when</code></td>\n<td>Right</td>\n</tr>\n<tr>\n<td><code>&#124;</code> (pipe)</td>\n<td>Left</td>\n</tr>\n<tr>\n<td><code>;</code></td>\n<td>Right</td>\n</tr>\n<tr>\n<td><code>let</code></td>\n<td>Nonassociative</td>\n</tr>\n<tr>\n<td><code>function</code>, <code>fun</code>, <code>match</code>, <code>try</code></td>\n<td>Nonassociative</td>\n</tr>\n<tr>\n<td><code>if</code></td>\n<td>Nonassociative</td>\n</tr>\n<tr>\n<td><code>-&gt;</code></td>\n<td>Right</td>\n</tr>\n<tr>\n<td><code>:=</code></td>\n<td>Right</td>\n</tr>\n<tr>\n<td><code>,</code></td>\n<td>Nonassociative</td>\n</tr>\n<tr>\n<td><code>or</code>, <code>&#124;&#124;</code></td>\n<td>Left</td>\n</tr>\n<tr>\n<td><code>&amp;</code>, <code>&amp;&amp;</code></td>\n<td>Left</td>\n</tr>\n<tr>\n<td><code>:&gt;</code>, <code>:?&gt;</code></td>\n<td>Right</td>\n</tr>\n<tr>\n<td><code>!=</code><em>op</em>, <code>&lt;</code><em>op</em>, <code>&gt;</code><em>op</em>, <code>=</code>, <code>&#124;</code><em>op</em>, <code>&amp;</code><em>op</em>, <code>&amp;</code><br><br>(including <code>&lt;&lt;&lt;</code>, <code>&gt;&gt;&gt;</code>, <code>&#124;&#124;&#124;</code>, <code>&amp;&amp;&amp;</code>)</td>\n<td>Left</td>\n</tr>\n<tr>\n<td><code>^</code><em>op</em><br><br>(including <code>^^^</code>)</td>\n<td>Right</td>\n</tr>\n<tr>\n<td><code>::</code></td>\n<td>Right</td>\n</tr>\n<tr>\n<td><code>:?</code></td>\n<td>Not associative</td>\n</tr>\n<tr>\n<td><code>-</code><em>op</em>, <code>+</code><em>op</em></td>\n<td>Applies to infix uses of these symbols</td>\n</tr>\n<tr>\n<td><code>*</code><em>op</em>, <code>/</code><em>op</em>, <code>%</code><em>op</em></td>\n<td>Left</td>\n</tr>\n<tr>\n<td><code>**</code><em>op</em></td>\n<td>Right</td>\n</tr>\n<tr>\n<td><code>f x</code> (function application)</td>\n<td>Left</td>\n</tr>\n<tr>\n<td><code>&#124;</code> (pattern match)</td>\n<td>Right</td>\n</tr>\n<tr>\n<td>prefix operators (<code>+</code><em>op</em>, <code>-</code><em>op</em>, <code>%</code>, <code>%%</code>, <code>&amp;</code>, <code>&amp;&amp;</code>, <code>!</code><em>op</em>, <code>~</code><em>op</em>)</td>\n<td>Left</td>\n</tr>\n<tr>\n<td><code>.</code></td>\n<td>Left</td>\n</tr>\n<tr>\n<td><code>f(x)</code></td>\n<td>Left</td>\n</tr>\n<tr>\n<td><code>f&lt;</code><em>types</em><code>&gt;</code></td>\n<td>Left</td>\n</tr>\n</tbody>\n</table>\n<p>F# supports custom operator overloading. This means that you can define your own operators. In the previous table, <em>op</em> can be any valid (possibly empty) sequence of operator characters, either built-in or user-defined. Thus, you can use this table to determine what sequence of characters to use for a custom operator to achieve the desired level of precedence. Leading <code>.</code> characters are ignored when the compiler determines precedence.</p>\n<h2 id=\"see-also\">See Also</h2>\n<p><a href=\"../index\" data-linktype=\"relative-path\">F# Language Reference</a></p>\n<p><a href=\"../operator-overloading\" data-linktype=\"relative-path\">Operator Overloading</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"cartermp\">\r\n<meta name=\"ms.author\" content=\"phcart\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc.json\">\r\n<meta name=\"ms.devlang\" content=\"fsharp\">\r\n<meta name=\"ms.assetid\" content=\"ab453800-d4d0-4a11-9d55-2b358d56af27\">\r\n<meta name=\"description\" content=\"Symbol and Operator Reference (F#)\">\r\n<meta name=\"keywords\" content=\"visual f#, f#, functional programming\">\r\n<meta name=\"ms.topic\" content=\"language-reference\">\r\n<meta name=\"ms.date\" content=\"05/16/2016\">\r\n<meta name=\"ms.technology\" content=\"devlang-fsharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-21 01:42 AM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/6d24730110cf966bf51a9528b99a7044ce574692/docs/fsharp/language-reference/symbol-and-operator-reference/index.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/fsharp/language-reference/symbol-and-operator-reference/index.md\">\r\n<meta name=\"document_id\" content=\"205eca43-248f-bc08-e8a8-5e21a6163a0a\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../../toc.json\">\r\n","rawMetadata":{"author":"cartermp","ms.author":"phcart","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Symbol and Operator Reference (F#) | Microsoft Docs","ms.devlang":"fsharp","ms.assetid":"ab453800-d4d0-4a11-9d55-2b358d56af27","description":"Symbol and Operator Reference (F#)","keywords":"visual f#, f#, functional programming","ms.topic":"language-reference","ms.date":"05/16/2016","ms.technology":"devlang-fsharp","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Edward Brey","author_email":"edward@breyfamily.net","committer_name":"Phillip Carter","comitter_email":"phillip.carter@outlook.com","message":"Removed incorrect semocolons from operators (#1338)","commit_sha":"6d24730110cf966bf51a9528b99a7044ce574692","commit_date":"2016-12-17 08:35:22 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"fixed absolute and msdn links (#1001)","commit_sha":"de0dab146fc811e895dc32f98f877db5e757f82b","commit_date":"2016-09-06 10:59:39 -0700"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"F# Docs: Update intro, move files, rename language reference for better URLS (#902)","commit_sha":"70a10b9c3e21291c96d927d13f8710d9e0738d4c","commit_date":"2016-08-13 11:22:39 -0700"}],"updated_at":"2017-03-21 01:42 AM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/cartermp","display_name":"Phillip Carter","id":"6309070"},"contributors":[{"profile_url":"https://github.com/cartermp","display_name":"Phillip Carter"},{"profile_url":"https://github.com/breyed","display_name":"Edward Brey","id":"1299073"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/21/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/6d24730110cf966bf51a9528b99a7044ce574692/docs/fsharp/language-reference/symbol-and-operator-reference/index.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/fsharp/language-reference/symbol-and-operator-reference/index.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/fsharp/language-reference/symbol-and-operator-reference/index.md","document_id":"205eca43-248f-bc08-e8a8-5e21a6163a0a","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/fsharp/language-reference/symbol-and-operator-reference/index","toc_asset_id":"articles/toc.json","toc_rel":"../../../toc.json","_op_ogTitle":"Symbol and Operator Reference (F#)","_op_displayDate":"2016-5-16","_op_displayDate_source":"2016-05-16T00:00:00Z","_op_wordCount":1791,"_op_rawTitle":"<h1 id=\"symbol-and-operator-reference\" sourcefile=\"docs/fsharp/language-reference/symbol-and-operator-reference/index.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Symbol and Operator Reference</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/fsharp/language-reference/symbol-and-operator-reference/index","fileRelativePath":"articles/fsharp/language-reference/symbol-and-operator-reference/index.html"},"themesRelativePathToOutputRoot":"_themes/"}