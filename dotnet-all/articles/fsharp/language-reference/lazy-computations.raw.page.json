{"content":"<div><div class=\"content\">\n<p><em>Lazy computations</em> are computations that are not evaluated immediately, but are instead evaluated when the result is needed. This can help to improve the performance of your code.</p>\n<h2 id=\"syntax\">Syntax</h2>\n<pre class=\"loading\"><code class=\"lang-fsharp\">let identifier = lazy ( expression )\n</code></pre><h2 id=\"remarks\">Remarks</h2>\n<p>In the previous syntax, <em>expression</em> is code that is evaluated only when a result is required, and <em>identifier</em> is a value that stores the result. The value is of type <a href=\"https://msdn.microsoft.com/library/b29d0af5-6efb-4a55-a278-2662a4ecc489\" data-linktype=\"external\"><code>Lazy&lt;&#39;T&gt;</code></a>, where the actual type that is used for <code>&#39;T</code> is determined from the result of the expression.</p>\n<p>Lazy computations enable you to improve performance by restricting the execution of a computation to only those situations in which a result is needed.</p>\n<p>To force the computation to be performed, you call the method <code>Force</code>. <code>Force</code> causes the execution to be performed only one time. Subsequent calls to <code>Force</code> return the same result, but do not execute any code.</p>\n<p>The following code illustrates the use of lazy computation and the use of <code>Force</code>. In this code, the type of <code>result</code> is <code>Lazy&lt;int&gt;</code>, and the <code>Force</code> method returns an <code>int</code>.</p>\n<pre><code class=\"lang-fsharp\" name=\"Main\">let x = 10\nlet result = lazy (x + 10)\nprintfn &quot;%d&quot; (result.Force())\n</code></pre><p>Lazy evaluation, but not the <code>Lazy</code> type, is also used for sequences. For more information, see <a href=\"sequences\" data-linktype=\"relative-path\">Sequences</a>.</p>\n<h2 id=\"see-also\">See Also</h2>\n<p><a href=\"index\" data-linktype=\"relative-path\">F# Language Reference</a></p>\n<p><a href=\"https://msdn.microsoft.com/library/86671f40-84a0-402a-867d-ae596218d948\" data-linktype=\"external\">LazyExtensions module</a></p>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"cartermp\">\r\n<meta name=\"ms.author\" content=\"phcart\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"fsharp\">\r\n<meta name=\"ms.assetid\" content=\"3499293e-1d53-4b02-b764-f687fbdaa7fe\">\r\n<meta name=\"description\" content=\"Lazy Computations (F#)\">\r\n<meta name=\"keywords\" content=\"visual f#, f#, functional programming\">\r\n<meta name=\"ms.topic\" content=\"language-reference\">\r\n<meta name=\"ms.date\" content=\"05/16/2016\">\r\n<meta name=\"ms.technology\" content=\"devlang-fsharp\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/fsharp/language-reference/lazy-computations.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/fsharp/language-reference/lazy-computations.md\">\r\n<meta name=\"document_id\" content=\"8ad71ddb-c30a-3ba4-c176-d50ebb6da420\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../toc2.json\">\r\n","rawMetadata":{"author":"cartermp","ms.author":"phcart","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Lazy Computations (F#) | Microsoft Docs","ms.devlang":"fsharp","ms.assetid":"3499293e-1d53-4b02-b764-f687fbdaa7fe","description":"Lazy Computations (F#)","keywords":"visual f#, f#, functional programming","ms.topic":"language-reference","ms.date":"05/16/2016","ms.technology":"devlang-fsharp","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Move snippets to snippets folder, now with some F# (#904)","commit_sha":"37fe2b89d590509e8eb14342da988f15862a9e2b","commit_date":"2016-08-13 16:40:56 -0700"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Reorganize F# snippets (#903)","commit_sha":"6ea1cf8f3779532a9ed8fbdac32592fbb809443c","commit_date":"2016-08-13 15:14:41 -0700"},{"author_name":"Phillip Carter","author_email":"phillip.carter@outlook.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"F# Docs: Update intro, move files, rename language reference for better URLS (#902)","commit_sha":"70a10b9c3e21291c96d927d13f8710d9e0738d4c","commit_date":"2016-08-13 11:22:39 -0700"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/cartermp","display_name":"Phillip Carter","id":"6309070"},"contributors":[{"profile_url":"https://github.com/cartermp","display_name":"Phillip Carter"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/fsharp/language-reference/lazy-computations.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/fsharp/language-reference/lazy-computations.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/fsharp/language-reference/lazy-computations.md","document_id":"8ad71ddb-c30a-3ba4-c176-d50ebb6da420","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/fsharp/language-reference/lazy-computations","toc_asset_id":"articles/toc.json","toc_rel":"../../toc.json","_op_ogTitle":"Lazy Computations (F#)","_op_displayDate":"2016-5-16","_op_displayDate_source":"2016-05-16T00:00:00Z","_op_wordCount":211,"_op_rawTitle":"<h1 id=\"lazy-computations\" sourcefile=\"docs/fsharp/language-reference/lazy-computations.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Lazy Computations</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/fsharp/language-reference/lazy-computations","fileRelativePath":"articles/fsharp/language-reference/lazy-computations.html"},"themesRelativePathToOutputRoot":"_themes/"}