{"content":"<div><div class=\"content\">\n<h2 id=\"creating-the-projects\">Creating the projects</h2>\n<p><a href=\"../tutorials/libraries\" data-linktype=\"relative-path\">Writing Libraries with Cross Platform Tools</a>\nhas information on organizing multi-project solutions for both the\nsource and the tests. This article follows those conventions. The\nfinal project structure will be something like this:</p>\n<pre class=\"loading\"><code>/unit-testing-using-mstest\n|__/PrimeService\n   |__Source Files\n   |__PrimeService.csproj\n|__/PrimeService.Tests\n   |__Test Files\n   |__PrimeService.csproj\n</code></pre><h3 id=\"creating-the-source-project\">Creating the source project</h3>\n<p>Open a shell window. \nStart in the <em>unit-testing-using-mstest</em> directory, create the <em>PrimeService</em> directory.\nMake <em>PrimeService</em> the current directory, and run <code>dotnet new classlib</code> to create the source\nproject.</p>\n<p>Rename <em>Class1.cs</em> as <em>PrimeService.cs</em>. To use test-driven development (TDD), you&#39;ll create a failing implementation of the\n<code>PrimeService</code> class:</p>\n<pre class=\"loading\"><code class=\"lang-cs\">using System;\n\nnamespace Prime.Services\n{\n    public class PrimeService\n    {\n        public bool IsPrime(int candidate) \n        {\n            throw new NotImplementedException(&quot;Please create a test first&quot;);\n        } \n    }\n}\n</code></pre><h3 id=\"creating-the-test-project\">Creating the test project</h3>\n<p>Next, change directory back into the <em>unit-testing-using-mstest</em> directory, and create the <em>PrimeServices.Tests</em> directory.\nMake the <em>PrimeService.Tests</em> directory the current directory and create a new project using\n<code>dotnet new mstest</code>. This creates a test project\nthat uses MStest as the test library. </p>\n<p>The generated template configured the test runner\nin the <em>PrimeServiceTests.csproj</em> file:</p>\n<pre class=\"loading\"><code class=\"lang-xml\">&lt;ItemGroup&gt;\n  &lt;PackageReference Include=&quot;Microsoft.NET.Test.Sdk&quot; Version=&quot;15.0.0-preview-20170123-02&quot; /&gt;\n  &lt;PackageReference Include=&quot;MSTest.TestAdapter&quot; Version=&quot;1.1.10-rc2&quot; /&gt;\n  &lt;PackageReference Include=&quot;MSTest.TestFramework&quot; Version=&quot;1.0.8-rc2&quot; /&gt;\n&lt;/ItemGroup&gt;\n</code></pre><p>The test project requires other packages to create and run unit tests.\n<code>dotnet new</code> added the MSTest SDK, the MSTest test framework and the MSTest runner. You need to add the PrimeService\npackage as another dependency to the project. You can do that using the <code>dotnet</code>\nCLI:</p>\n<pre class=\"loading\"><code>dotnet add reference ../PrimeService/PrimeService.csproj\n</code></pre><p>Or, you can manually edit the <em>PrimeService.Tests.csproj</em> file.\nDirectly under the first\n<code>&lt;ItemGroup&gt;</code> node, add another <code>&lt;ItemGroup&gt;</code> node with a reference to \nthe library project:</p>\n<pre class=\"loading\"><code class=\"lang-xml\">  &lt;ItemGroup&gt;\n    &lt;ProjectReference Include=&quot;..\\PrimeService\\PrimeService.csproj&quot; /&gt;\n  &lt;/ItemGroup&gt;\n</code></pre><p>You can see the entire file in the\n<a href=\"https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-mstest/PrimeService.Tests/PrimeService.Tests.csproj\" data-linktype=\"external\">samples repository</a> \non GitHub.</p>\n<p>After this initial structure is in place, you can write your first test.\nOnce you verify that first unit test, everything is configured and should run smoothly\nas you add features and tests.</p>\n<h2 id=\"creating-the-first-test\">Creating the first test</h2>\n<p>Before building the library or the tests, you need to run <code>dotnet restore</code>\nin both the <em>PrimeService</em> and <em>PrimeService.Tests</em> directories. This\ncommand restores all the necessary NuGet packages for each project.</p>\n<p>The TDD approach calls for writing one failing test, then making it pass,\nthen repeating the process. So, let&#39;s write that one failing test. Remove\n<em>UnitTest1.cs</em> from the <em>PrimeService.Tests</em> directory, and create a new\nC# file named <em>PrimeService_IsPrimeShould.cs</em> with the following content:</p>\n<pre class=\"loading\"><code class=\"lang-cs\">using Microsoft.VisualStudio.TestTools.UnitTesting;\nusing Prime.Services;\n\nnamespace Prime.UnitTests.Services\n{\n    [TestClass]\n    public class PrimeService_IsPrimeShould\n    {\n        private readonly PrimeService _primeService;\n        public PrimeService_IsPrimeShould()\n        {\n            _primeService = new PrimeService();\n        }\n\n        [TestMethod]\n        public void ReturnFalseGivenValueOf1()\n        {\n            var result = _primeService.IsPrime(1);\n\n            Assert.IsFalse(result, $&quot;1 should not be prime&quot;);\n        }\n    }\n}\n</code></pre><p>The <code>[TestClass]</code> attributes denotes a class that contains\nunit tests. The <code>[TestMethod]</code> attribute denotes a method as a single test. </p>\n<p>Save this file, then run <code>dotnet build</code> to build the test project.\nIf you have not already built the <code>PrimeService</code> project, the\nbuild system will detect that and build it because it is a\ndependency of the test project.</p>\n<p>Now, execute <code>dotnet test</code> to run the tests from the console.\nThe MSTest test runner has the program entry point to run your\ntests from the Console. <code>dotnet test</code> starts the\ntest runner, and provides a command-line argument to the\ntest runner indicating the assembly that contains your tests.</p>\n<p>Your test fails. You haven&#39;t created the implementation yet.\nWrite the simplest code to make this one test pass:</p>\n<pre class=\"loading\"><code class=\"lang-cs\">public bool IsPrime(int candidate) \n{\n    if(candidate == 1) \n    { \n        return false;\n    } \n    throw new NotImplementedException(&quot;Please create a test first&quot;);\n} \n</code></pre><p>In the <em>PrimeService.Tests</em> directory, run <code>dotnet test</code> again. The \n<code>dotnet test</code> command will first run a build for the Prime.Services\nproject, and then for PrimeService.Tests project. After building both\nprojects, it will run this single test. It passes.</p>\n<h2 id=\"adding-more-features\">Adding more features</h2>\n<p>Now, that you&#39;ve made one test pass, it&#39;s time to write more.\nThere are a few other simple cases for prime numbers: 0, -1. You\ncould add those as new tests, with the <code>[TestMethod]</code> attribute, but that\nquickly becomes tedious. There are other MSTest attributes that enable\nyou to write a suite of similar tests.  A <code>DataTestMethod</code> represents a suite\nof tests that execute the same code, but have different input arguments.\nYou can use the <code>[DataRow]</code> attribute to specify values for those\ninputs. </p>\n<p> Instead of creating new tests, leverage these two attributes\n to create a single data test method that tests some values less than 2,\n which is the lowest prime number:</p>\n<pre><code class=\"lang-csharp\" name=\"Sample_TestCode\" title=\"First tests\">[DataTestMethod]\n[DataRow(-1)]\n[DataRow(0)]\n[DataRow(1)]\npublic void ReturnFalseGivenValuesLessThan2(int value)\n{\n    var result = _primeService.IsPrime(value);\n\n    Assert.IsFalse(result, $&quot;{value} should not be prime&quot;);\n}\n</code></pre><p>Run <code>dotnet test</code> and you&#39;ll see that two of these tests fail.\nYou can make them pass by changing the service. You need to change\nthe <code>if</code> clause at the beginning of the method:</p>\n<pre class=\"loading\"><code class=\"lang-cs\">if(candidate &lt; 2)\n</code></pre><p>Now, these tests all pass.</p>\n<p>You continue to iterate by adding more tests, more theories,\nand more code in the main library. You&#39;ll quickly end up\nwith the\n<a href=\"https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-mstest/PrimeService.Tests/PrimeService_IsPrimeShould.cs\" data-linktype=\"external\">finished version of the tests</a>\nand the\n<a href=\"https://github.com/dotnet/docs/blob/master/samples/core/getting-started/unit-testing-using-mstest/PrimeService/PrimeService.cs\" data-linktype=\"external\">complete implementation of the library</a>.</p>\n<p>You&#39;ve built a small library and a set of unit tests for that library.\nYou&#39;ve structured this solution so that adding new packages and tests\nwill be seamless, and you can concentrate on the problem at hand. The \ntools will run automatically.</p>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"ncarandini\">\r\n<meta name=\"ms.author\" content=\"wiwagn\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-all/api/toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"ed447641-3e85-4e50-b7ed-004630048a3e\">\r\n<meta name=\"description\" content=\"How to use MSTest with .NET Core\">\r\n<meta name=\"keywords\" content=\"MSTest, .NET, .NET Core\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"02/10/2017\">\r\n<meta name=\"ms.prod\" content=\".net-core\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/c2722327c3ca213309cae5e0d0417b0f0e9ea514/docs/core/testing/unit-testing-with-mstest.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/core/testing/unit-testing-with-mstest.md\">\r\n<meta name=\"document_id\" content=\"232f440f-c71d-c97e-dbe1-305b0b6a3d1b\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../toc2.json\">\r\n","rawMetadata":{"author":"ncarandini","ms.author":"wiwagn","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Use MSTest with .NET Core | Microsoft Docs","ms.devlang":"dotnet","ms.assetid":"ed447641-3e85-4e50-b7ed-004630048a3e","description":"How to use MSTest with .NET Core","keywords":"MSTest, .NET, .NET Core","ms.topic":"article","ms.date":"02/10/2017","ms.prod":".net-core","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":":boom: removing preview3 folder (#1650)","commit_sha":"c2722327c3ca213309cae5e0d0417b0f0e9ea514","commit_date":"2017-03-07 03:26:34 -0800"},{"author_name":"Bill Wagner","author_email":"wiwagn@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Update mstest tutorial for csproj (#1531)","commit_sha":"5420b3c8923e7b3581f3d961bf152d1cf92dadab","commit_date":"2017-02-24 18:43:10 -0500"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/ncarandini","display_name":"Nicolò Carandini","id":"139274"},"contributors":[{"profile_url":"https://github.com/ncarandini","display_name":"Nicolò Carandini"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"},{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/c2722327c3ca213309cae5e0d0417b0f0e9ea514/docs/core/testing/unit-testing-with-mstest.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/core/testing/unit-testing-with-mstest.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/core/testing/unit-testing-with-mstest.md","document_id":"232f440f-c71d-c97e-dbe1-305b0b6a3d1b","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/core/testing/unit-testing-with-mstest","toc_asset_id":"articles/toc.json","toc_rel":"../../toc.json","_op_ogTitle":"Use MSTest with .NET Core","_op_displayDate":"2017-2-10","_op_displayDate_source":"2017-02-10T00:00:00Z","_op_wordCount":874,"_op_rawTitle":"<h1 id=\"unit-testing-with-mstest-and-net-core\" sourcefile=\"docs/core/testing/unit-testing-with-mstest.md\" sourcestartlinenumber=\"14\" sourceendlinenumber=\"14\">Unit testing with MSTest and .NET Core</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/core/testing/unit-testing-with-mstest","fileRelativePath":"articles/core/testing/unit-testing-with-mstest.html"},"themesRelativePathToOutputRoot":"_themes/"}