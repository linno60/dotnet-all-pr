{"content":"<div><div class=\"content\">\n<p>This topic will show you how to start developing cross-platforms apps in your machine using the .NET Core CLI tools.</p>\n<p>If you&#39;re unfamiliar with the .NET Core CLI toolset, read the <a href=\"../tools/index\" data-linktype=\"relative-path\">.NET Core SDK overview</a>.</p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<ul>\n<li><a href=\"https://www.microsoft.com/net/download/core\" data-linktype=\"external\">.NET Core SDK 1.0</a>.</li>\n<li>A text editor or code editor of your choice.</li>\n</ul>\n<h2 id=\"hello-console-app\">Hello, Console App!</h2>\n<p>First, navigate to or create a new folder with a name you like. <em>Hello</em> is the name chosen for the sample code, which can be found <a href=\"https://github.com/dotnet/docs/tree/master/samples/core/console-apps/HelloMsBuild\" data-linktype=\"external\">here</a>.</p>\n<p>Open up a command prompt and type the following:</p>\n<pre class=\"loading\"><code>$ dotnet new console\n$ dotnet restore\n$ dotnet run\n</code></pre><p>Let&#39;s do a quick walkthrough:</p>\n<ol>\n<li><code>$ dotnet new console</code></li>\n</ol>\n<p><a href=\"../tools/dotnet-new\" data-linktype=\"relative-path\"><code>dotnet new</code></a> creates an up-to-date <code>Hello.csproj</code> project file with the dependencies necessary to build a console app.  It also creates a <code>Program.cs</code>, a basic file containing the entry point for the application.</p>\n<p><code>Hello.csproj</code>:</p>\n<pre><code name=\"Hello.csproj\">&lt;Project Sdk=&quot;Microsoft.NET.Sdk&quot;&gt;\n\n  &lt;PropertyGroup&gt;\n    &lt;OutputType&gt;Exe&lt;/OutputType&gt;\n    &lt;TargetFramework&gt;netcoreapp1.0&lt;/TargetFramework&gt;\n  &lt;/PropertyGroup&gt;\n\n&lt;/Project&gt;\n</code></pre><p>   The project file specifies everything that&#39;s needed to restore dependencies and build the program.</p>\n<ul>\n<li>The <code>OutputType</code> tag specifies that we&#39;re building an executable, in other words a console application.</li>\n<li><p>The <code>TargetFramework</code> tag specifies what .NET runtime we&#39;re targeting. In an advance scenario, you can specify multiple target frameworks and build to all those in a single operation. In this tutorial, we&#39;ll stick to building only for .NET Core 1.0.</p>\n<p><code>Program.cs</code>:</p>\n</li>\n</ul>\n<pre><code class=\"lang-csharp\" name=\"Program.cs\">using System;\n\nnamespace Hello\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(&quot;Hello World!&quot;);\n        }\n    }\n}\n</code></pre><p>   The program starts by <code>using System</code>, which means &quot;bring everything in the <code>System</code> namespace into scope for this file&quot;. The <code>System</code> namespace includes basic constructs such as <code>string</code>, or numeric types.</p>\n<p>   We then define a namespace called <code>Hello</code>. You can change this to anything you want. A class named <code>Program</code> is defined within that namespace, with a <code>Main</code> method that takes an array of strings as its argument. This array contains the list of arguments passed in when the compiled program is called. As it is, this array is not used: all the program is doing is to write &quot;Hello World!&quot; to the console. Later, we&#39;ll make changes to the code that will make use of this argument.</p>\n<ol>\n<li><p><code>$ dotnet restore</code></p>\n<p><a href=\"../tools/dotnet-restore\" data-linktype=\"relative-path\"><code>dotnet restore</code></a> calls into <a href=\"http://nuget.org\" data-linktype=\"external\">NuGet</a> (.NET package manager) to restore the tree of dependencies. NuGet analyzes the <em>Hello.csproj</em> file, downloads the dependencies stated in the file (or grabs them from a cache on your machine), and writes the <em>obj/project.assets.json</em> file.  The <em>project.assets.json</em> file is necessary to be able to compile and run.</p>\n<p>The <em>project.assets.json</em> file is a persisted and complete set of the graph of NuGet dependencies and other information describing an app.  This file is read by other tools, such as <a href=\"../tools/dotnet-build\" data-linktype=\"relative-path\"><code>dotnet build</code></a> and <a href=\"../tools/dotnet-run\" data-linktype=\"relative-path\"><code>dotnet run</code></a>, enabling them to process the source code with a correct set of NuGet dependencies and binding resolutions.</p>\n</li>\n<li><p><code>$ dotnet run</code></p>\n<p><a href=\"../tools/dotnet-run\" data-linktype=\"relative-path\"><code>dotnet run</code></a> calls <a href=\"../tools/dotnet-build\" data-linktype=\"relative-path\"><code>dotnet build</code></a> to ensure that the build targets have been built, and then calls <code>dotnet &lt;assembly.dll&gt;</code> to run the target application.</p>\n<pre class=\"loading\"><code> $ dotnet run\n Hello World!\n</code></pre><p> Alternatively, you can also execute <a href=\"../tools/dotnet-build\" data-linktype=\"relative-path\"><code>dotnet build</code></a> to compile the code without running the build console applications. This results in a compiled application as a DLL file that can be run with <code>dotnet bin\\Debug\\netcoreapp1.0\\Hello.dll</code> on Windows (use <code>/</code> for non-Windows systems). You may specify also specify arguments to the application as you&#39;ll see later on the topic.</p>\n<pre class=\"loading\"><code> $ dotnet bin\\Debug\\netcoreapp1.0\\Hello.dll\n Hello World!\n</code></pre><p> As an advanced scenario, it&#39;s possible to build the application as a self-contained set of platform-specific files that can be deployed and run to a machine that doesn&#39;t necessarily have .NET Core installed. See <a href=\"../deploying/index\" data-linktype=\"relative-path\">.NET Core Application Deployment</a> for details.</p>\n</li>\n</ol>\n<h3 id=\"augmenting-the-program\">Augmenting the program</h3>\n<p>Let&#39;s change the program a bit. Fibonacci numbers are fun, so let&#39;s add that in addition to use the argument to greet the person running the app.</p>\n<ol>\n<li>Replace the contents of your <em>Program.cs</em>  file with the following code:</li>\n</ol>\n<pre><code class=\"lang-csharp\" name=\"Fibonacci\">using System;\n\nnamespace Hello\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            if (args.Length &gt; 0)\n            {\n                Console.WriteLine($&quot;Hello {args[0]}!&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;Hello!&quot;);\n            }\n\n            Console.WriteLine(&quot;Fibonacci Numbers 1-15:&quot;);\n\n            for (int i = 0; i &lt; 15; i++)\n            {\n                Console.WriteLine($&quot;{i + 1}: {FibonacciNumber(i)}&quot;);\n            }\n        }\n\n        static int FibonacciNumber(int n)\n        {\n            int a = 0;\n            int b = 1;\n            int tmp;\n\n            for (int i = 0; i &lt; n; i++)\n            {\n                tmp = a;\n                a = b;\n                b += tmp;\n            }\n\n            return a;\n        }\n\n    }\n}\n</code></pre><ol>\n<li><p>Execute <a href=\"../tools/dotnet-build\" data-linktype=\"relative-path\"><code>dotnet build</code></a> to compile the changes.</p>\n</li>\n<li><p>Run the program passing a parameter to the app:</p>\n</li>\n</ol>\n<pre class=\"loading\"><code>$ dotnet run -- John\nHello John!\nFibonacci Numbers 1-15:\n1: 0\n2: 1\n3: 1\n4: 2\n5: 3\n6: 5\n7: 8\n8: 13\n9: 21\n10: 34\n11: 55\n12: 89\n13: 144\n14: 233\n15: 377\n</code></pre><p>And that&#39;s it!  You can augment <code>Program.cs</code> any way you like.</p>\n<h2 id=\"working-with-multiple-files\">Working with multiple files</h2>\n<p>Single files are fine for simple one-off programs, but if you&#39;re building a more complex app, you&#39;re probably going to have multiple source files on your project\nLet&#39;s build off of the previous Fibonacci example by caching some Fibonacci values and add some recursive features. </p>\n<ol>\n<li>Add a new file inside the <em>Hello</em> directory named <em>FibonacciGenerator.cs</em> with the following code:</li>\n</ol>\n<pre><code class=\"lang-csharp\" name=\"Fibonacci Generator\">using System;\nusing System.Collections.Generic;\n\nnamespace Hello\n{\n\tpublic class FibonacciGenerator\n\t{\n\t\tprivate Dictionary&lt;int, int&gt; _cache = new Dictionary&lt;int, int&gt;();\n\t\t\n\t\tprivate int Fib(int n) =&gt; n &lt; 2 ? n : FibValue(n - 1) + FibValue(n - 2);\n\t\t\n\t\tprivate int FibValue(int n)\n\t\t{\n\t\t\tif (!_cache.ContainsKey(n))\n\t\t\t{\n\t\t\t\t_cache.Add(n, Fib(n));\n\t\t\t}\n\t\t\t\n\t\t\treturn _cache[n];\n\t\t}\n\t\t\n\t\tpublic IEnumerable&lt;int&gt; Generate(int n)\n\t\t{\n\t\t\tfor (int i = 0; i &lt; n; i++)\n\t\t\t{\n\t\t\t\tyield return FibValue(i);\n\t\t\t}\n\t\t}\n\t}\n}\n</code></pre><ol>\n<li>Change the <code>Main</code> method in your <em>Program.cs</em> file to instantiate the new class and call its method as in the following example:</li>\n</ol>\n<pre><code class=\"lang-csharp\" name=\"New Program.cs\">using System;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        var generator = new FibonacciGenerator();\n        foreach (var digit in generator.Generate(15))\n        {\n            Console.WriteLine(digit);\n        }\n    }\n}\n</code></pre><ol>\n<li><p>Execute <a href=\"../tools/dotnet-build\" data-linktype=\"relative-path\"><code>dotnet build</code></a> to compile the changes.</p>\n</li>\n<li><p>Run your app by executing <a href=\"../tools/dotnet-run\" data-linktype=\"relative-path\"><code>dotnet run</code></a>. The following shows the program output:</p>\n</li>\n</ol>\n<pre class=\"loading\"><code>0\n1\n1\n2\n3\n5\n8\n13\n21\n34\n55\n89\n144\n233\n377\n</code></pre><p>And that&#39;s it! Now, you can start using the basic concepts learned here to create your own programs.</p>\n<p>Note that the commands and steps shown in this tutorial to run your application are used during development time only. Once you&#39;re ready to deploy your app, you&#39;ll want to take a look at the different <a href=\"../deploying/index\" data-linktype=\"relative-path\">deployment strategies</a> for .NET Core apps and the <a href=\"../tools/dotnet-publish\" data-linktype=\"relative-path\"><code>dotnet publish</code></a> command.</p>\n<h2 id=\"see-also\">See also</h2>\n<p><a href=\"testing-with-cli\" data-linktype=\"relative-path\">Organizing and testing projects with the .NET Core CLI tools</a></p>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"cartermp\">\r\n<meta name=\"ms.author\" content=\"mairaw\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet/toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"41632e63-d5c6-4427-a09e-51dc1116d45f\">\r\n<meta name=\"description\" content=\"A step-by-step tutorial showing how to get started with .NET Core on Windows, Linux, or macOS using the .NET Core command-line interface (CLI).\">\r\n<meta name=\"keywords\" content=\".NET Core, CLI\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"03/08/2017\">\r\n<meta name=\"ms.technology\" content=\"dotnet-cli\">\r\n<meta name=\"ms.prod\" content=\".net-core\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/29f283db1876a91ccde27690a7b4320f369f160b/docs/core/tutorials/using-with-xplat-cli.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/core/tutorials/using-with-xplat-cli.md\">\r\n<meta name=\"document_id\" content=\"24883113-ff02-06fc-2f62-42379e8cc522\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../toc2.json\">\r\n","rawMetadata":{"author":"cartermp","ms.author":"mairaw","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Getting started with .NET Core using the CLI | Microsoft Docs","ms.devlang":"dotnet","ms.assetid":"41632e63-d5c6-4427-a09e-51dc1116d45f","description":"A step-by-step tutorial showing how to get started with .NET Core on Windows, Linux, or macOS using the .NET Core command-line interface (CLI).","keywords":".NET Core, CLI","ms.topic":"article","ms.date":"03/08/2017","ms.technology":"dotnet-cli","ms.prod":".net-core","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"fixing sdk version number (#1687)","commit_sha":"29f283db1876a91ccde27690a7b4320f369f160b","commit_date":"2017-03-10 00:02:32 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":":boom: removing preview3 folder (#1650)","commit_sha":"c2722327c3ca213309cae5e0d0417b0f0e9ea514","commit_date":"2017-03-07 03:26:34 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"change version label (#1526)","commit_sha":"796df1549a7553aa93158598d62338c02d4df73e","commit_date":"2017-02-09 23:56:10 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Maira Wenzel","comitter_email":"mairaw@microsoft.com","message":"preparing changes for RC3 release","commit_sha":"d9ef9b8388bc854e087e0beccdb4785ed7e0f804","commit_date":"2017-01-27 11:43:14 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"added links between versions (#1424)","commit_sha":"2ad428dcda9ef213a8487c35a48b33929259abba","commit_date":"2017-01-20 23:55:05 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Bertrand Le Roy","author_email":"beleroy@microsoft.com","committer_name":"Bertrand Le Roy","comitter_email":"beleroy@microsoft.com","message":"Update CLI golden path tutorial for Preview 3.","commit_sha":"37e14d5cdf1593f6a8b1ecee9d9828647b023548","commit_date":"2016-11-15 17:05:00 -0800"},{"author_name":"Bill Wagner","author_email":"wiwagn@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"fix broken-links for app-types document (#1203)","commit_sha":"aeb199a9aeb1584570ad2a2942e2f22c75a59616","commit_date":"2016-11-03 11:48:48 -0700"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":"renamed repo/fixed headings (#1186)","commit_sha":"15c55a87beb64f265a164db918c7721c7690fadf","commit_date":"2016-10-29 15:23:17 -0400"},{"author_name":"Alexlander","author_email":"Alexander_@hotmail.nl","committer_name":"Phillip Carter","comitter_email":"phillip.carter@outlook.com","message":"Grammar error (#1145)","commit_sha":"e18df7b3695f3550af21909d951b54d133f5d5a6","commit_date":"2016-10-13 07:42:55 -0700"},{"author_name":"Bill Wagner","author_email":"wiwagn@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Update ci build for ubuntu (#891)","commit_sha":"ce52ada663c2ed9b8b3d10bc3d4dcb453abb79f7","commit_date":"2016-08-09 16:02:13 -0400"},{"author_name":"Bill Wagner","author_email":"wiwagn@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Update samples still usring rc2 (#801)","commit_sha":"69b9dd581cc765e4865c776fc0fd5b8ae33e5d5c","commit_date":"2016-07-14 16:51:02 -0400"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"addressed feedback and changed language id (#785)","commit_sha":"d2febb103a5444c017c2ef353209d96563839fa4","commit_date":"2016-07-12 09:58:47 -0700"},{"author_name":"Myung Shin Kim","author_email":"options@users.noreply.github.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":"insert step 4 in \"Writing the consoling app\" section (#745)","commit_sha":"ef36fe637ba0ea026c64b650f435ce8e57646cb0","commit_date":"2016-07-07 11:40:07 -0400"},{"author_name":"Bill Wagner","author_email":"wiwagn@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Fix one project mis-match, and be consistent with static using (#719)","commit_sha":"cb49ca79489f26561cd254cc53552df6f1778739","commit_date":"2016-06-30 16:50:43 -0400"},{"author_name":"Maira Wenzel","author_email":"mairaw@users.noreply.github.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Revert \"Bringing back essentials topics\" (#661)","commit_sha":"6d10e1507a2a8040743da29184fa4981ddbf7af3","commit_date":"2016-06-26 17:59:39 -0700"},{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Bringing back essentials topics (#659)","commit_sha":"5f3ebe05f34a44b449412c6334e47a9861b36c79","commit_date":"2016-06-26 17:27:32 -0700"},{"author_name":"Tom Dykstra","author_email":"tdykstra@microsoft.com","committer_name":"Rich Lander","comitter_email":"rlander@microsoft.com","message":"fix broken links (#651)","commit_sha":"62fdb3e60b206728d86220076867eb8fd68af82e","commit_date":"2016-06-26 10:58:55 -0700"},{"author_name":"Tom Dykstra","author_email":"tdykstra@microsoft.com","committer_name":"Rich Lander","comitter_email":"rlander@microsoft.com","message":"coordinate titles between toc and articles for core guide (#640)","commit_sha":"c3b0ba6f62d0a7ee740d3f552e3e405a5e33d985","commit_date":"2016-06-25 15:30:01 -0700"},{"author_name":"Bill Wagner","author_email":"wiwagn@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Update samples and tutorials locations (#633)","commit_sha":"c8ddaf8177cedca1ecfa3256d2b280764f700091","commit_date":"2016-06-25 16:42:16 -0400"},{"author_name":"Petr Onderka","author_email":"gsvick@gmail.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":"Fixed links (#628)","commit_sha":"e69e28b9e7400cc3dfa87faf660c3f2eab0aae90","commit_date":"2016-06-25 08:50:38 -0400"},{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Fixed references to RC2, OS X, and Update 2 (#612)","commit_sha":"093b852fe1ed2307ebce914381fe47388b435c95","commit_date":"2016-06-24 15:07:22 -0700"},{"author_name":"Tom Dykstra","author_email":"tdykstra@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":"toc changes for .net core guide section (#609)","commit_sha":"a77454a141ed46eaeeda25dc723476fdb4e542e9","commit_date":"2016-06-24 15:15:55 -0400"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/cartermp","display_name":"Phillip Carter","id":"6309070"},"contributors":[{"profile_url":"https://github.com/cartermp","display_name":"Phillip Carter"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"},{"profile_url":"https://github.com/bleroy","display_name":"Bertrand Le Roy","id":"1165609"},{"profile_url":"https://github.com/BillWagner","display_name":"Bill Wagner","id":"493969"},{"profile_url":"https://github.com/Alexlander","display_name":"Alexlander","id":"11189629"},{"profile_url":"https://github.com/options","display_name":"Myung Shin Kim","id":"1495689"},{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},{"profile_url":"https://github.com/tdykstra","display_name":"Tom Dykstra","id":"1569635"},{"profile_url":"https://github.com/svick","display_name":"Petr Onderka","id":"287848"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/29f283db1876a91ccde27690a7b4320f369f160b/docs/core/tutorials/using-with-xplat-cli.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/core/tutorials/using-with-xplat-cli.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/core/tutorials/using-with-xplat-cli.md","document_id":"24883113-ff02-06fc-2f62-42379e8cc522","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/core/tutorials/using-with-xplat-cli","toc_asset_id":"articles/toc.json","toc_rel":"../../toc.json","_op_ogTitle":"Getting started with .NET Core using the CLI","_op_displayDate":"2017-3-8","_op_displayDate_source":"2017-03-08T00:00:00Z","_op_wordCount":1079,"_op_rawTitle":"<h1 id=\"getting-started-with-net-core-on-windowslinuxmacos-using-the-command-line\" sourcefile=\"docs/core/tutorials/using-with-xplat-cli.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Getting started with .NET Core on Windows/Linux/macOS using the command line</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/core/tutorials/using-with-xplat-cli","fileRelativePath":"articles/core/tutorials/using-with-xplat-cli.html"},"themesRelativePathToOutputRoot":"_themes/"}