{"content":"<div><div class=\"content\">\n<p>Visual Studio 2017 provides a full-featured development environment for developing .NET Core applications. The procedures in this document describe the steps necessary to build a typical .NET Core solution that includes reusable libraries, testing, and using third-party libraries. </p>\n<h2 id=\"prerequisites\">Prerequisites</h2>\n<p>Follow the instructions on <a href=\"../windows-prerequisites\" data-linktype=\"relative-path\">our prerequisites page</a> to update your environment.</p>\n<h2 id=\"a-solution-using-only-net-core-projects\">A solution using only .NET Core projects</h2>\n<h3 id=\"writing-the-library\">Writing the library</h3>\n<ol>\n<li><p>In Visual Studio, choose <strong>File</strong>, <strong>New</strong>, <strong>Project</strong>. In the <strong>New Project</strong> dialog, expand the <strong>Visual C#</strong> node and choose the <strong>.NET Core</strong> node, and then choose <strong>Class Library (.NET Standard)</strong>. </p>\n</li>\n<li><p>Name the project &quot;Library&quot; and the solution &quot;Golden&quot;. Leave <strong>Create directory for solution</strong> checked. Click <strong>OK</strong>.</p>\n</li>\n<li><p>In Solution Explorer, open the context menu for the <strong>Dependencies</strong> node and choose <strong>Manage NuGet Packages</strong>.</p>\n</li>\n<li><p>Choose &quot;nuget.org&quot; as the <strong>Package source</strong>, and choose the <strong>Browse</strong> tab. Browse for <strong>Newtonsoft.Json</strong>. Click <strong>Install</strong>, and accept the license agreement. The package should now appear under <strong>Dependencies/NuGet</strong> and be automatically restored.</p>\n</li>\n<li><p>Rename the <code>Class1.cs</code> file to <code>Thing.cs</code>. Accept the rename of the class. Add a method: <code>public int Get(int number) =&gt; Newtonsoft.Json.JsonConvert.DeserializeObject&lt;int&gt;($&quot;{number}&quot;);</code></p>\n</li>\n<li><p>On the <strong>Build</strong> menu, choose <strong>Build Solution</strong>.</p>\n<p>The solution should build without error.</p>\n</li>\n</ol>\n<h3 id=\"writing-the-test-project\">Writing the test project</h3>\n<ol>\n<li><p>In Solution Explorer, open the context menu for the <strong>Solution</strong> node and choose <strong>Add</strong>, <strong>New Project</strong>. In the <strong>New Project</strong> dialog, under <strong>Visual C# / .NET Core</strong>, choose <strong>Unit Test Project (.NET Core)</strong>. Name it &quot;TestLibrary&quot; and click OK. </p>\n</li>\n<li><p>In the <strong>TestLibrary</strong> project, open the context menu for the <strong>Dependencies</strong> node and choose <strong>Add Reference</strong>. Click <strong>Projects</strong>, then check the Library project and click OK. This adds a reference to your library from the test project.</p>\n</li>\n<li><p>Rename the <code>UnitTest1.cs</code> file to <code>LibraryTests.cs</code> and accept the class rename. Add <code>using Library;</code> to the top of the file, and replace the <code>TestMethod1</code> method with the following code:</p>\n<pre class=\"loading\"><code class=\"lang-csharp\"> [TestMethod]\n public void ThingGetsObjectValFromNumber()\n {\n     Assert.AreEqual(42, new Thing().Get(42));\n }\n</code></pre><p>You should now be able to build the solution. </p>\n</li>\n<li><p>On the <strong>Test</strong> menu, choose <strong>Windows</strong>, <strong>Test Explorer</strong> in order to get the test explorer window into your workspace. After a few seconds, the <code>ThingGetsObjectValFromNumber</code> test should appear in the test explorer. Choose <strong>Run All</strong>.</p>\n<p>The test should pass.</p>\n</li>\n</ol>\n<h3 id=\"writing-the-console-app\">Writing the console app</h3>\n<ol>\n<li><p>In Solution Explorer, open the context menu for the solution, and add a new <strong>Console App (.NET Core)</strong> project. Name it &quot;App&quot;.</p>\n</li>\n<li><p>In the <strong>App</strong> project, open the context menu for the <strong>Dependencies</strong> node and choose <strong>Add</strong>,  <strong>Reference</strong>. </p>\n</li>\n<li><p>In the <strong>Reference Manager</strong> dialog, check <strong>Library</strong> under the <strong>Projects</strong>, <strong>Solution</strong> node, and then click <strong>OK</strong></p>\n</li>\n<li><p>Open the context menu for the <strong>App</strong> node and choose <strong>Set as StartUp Project</strong>. This ensures that hitting F5 or CTRL+F5 will start the console app.</p>\n</li>\n<li><p>Open the <code>Program.cs</code> file, add a <code>using Library;</code> directive to the top of the file, and then add <code>Console.WriteLine($&quot;The answer is {new Thing().Get(42)}.&quot;);</code> to the <code>Main</code> method.</p>\n</li>\n<li><p>Set a breakpoint after the line that you just added.</p>\n</li>\n<li><p>Press F5 to run the application..</p>\n<p>The application should build without error, and should hit the breakpoint. You should also be able to check that the application output &quot;The answer is 42.&quot;.</p>\n</li>\n</ol>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"bleroy\">\r\n<meta name=\"ms.author\" content=\"mairaw\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet/toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"ba7e082c-a7c8-431e-a342-f67734b660f6\">\r\n<meta name=\"description\" content=\"Building a complete .NET Core solution on Windows, using Visual Studio 2017\">\r\n<meta name=\"keywords\" content=\".NET, .NET Core\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"11/16/2016\">\r\n<meta name=\"ms.prod\" content=\".net-core\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/c2722327c3ca213309cae5e0d0417b0f0e9ea514/docs/core/tutorials/using-on-windows-full-solution.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/core/tutorials/using-on-windows-full-solution.md\">\r\n<meta name=\"document_id\" content=\"8596e7a8-46b3-4953-9908-413175463316\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../toc2.json\">\r\n","rawMetadata":{"author":"bleroy","ms.author":"mairaw","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Building a complete .NET Core solution on Windows, using Visual Studio 2017 | Microsoft Docs","ms.devlang":"dotnet","ms.assetid":"ba7e082c-a7c8-431e-a342-f67734b660f6","description":"Building a complete .NET Core solution on Windows, using Visual Studio 2017","keywords":".NET, .NET Core","ms.topic":"article","ms.date":"11/16/2016","ms.prod":".net-core","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":":boom: removing preview3 folder (#1650)","commit_sha":"c2722327c3ca213309cae5e0d0417b0f0e9ea514","commit_date":"2017-03-07 03:26:34 -0800"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/bleroy","display_name":"Bertrand Le Roy","id":"1165609"},"contributors":[{"profile_url":"https://github.com/bleroy","display_name":"Bertrand Le Roy"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/c2722327c3ca213309cae5e0d0417b0f0e9ea514/docs/core/tutorials/using-on-windows-full-solution.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/core/tutorials/using-on-windows-full-solution.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/core/tutorials/using-on-windows-full-solution.md","document_id":"8596e7a8-46b3-4953-9908-413175463316","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/core/tutorials/using-on-windows-full-solution","toc_asset_id":"articles/toc.json","toc_rel":"../../toc.json","_op_ogTitle":"Building a complete .NET Core solution on Windows, using Visual Studio 2017","_op_displayDate":"2016-11-16","_op_displayDate_source":"2016-11-16T00:00:00Z","_op_wordCount":507,"_op_rawTitle":"<h1 id=\"building-a-complete-net-core-solution-on-windows-using-visual-studio-2017\" sourcefile=\"docs/core/tutorials/using-on-windows-full-solution.md\" sourcestartlinenumber=\"14\" sourceendlinenumber=\"14\">Building a complete .NET Core solution on Windows, using Visual Studio 2017</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/core/tutorials/using-on-windows-full-solution","fileRelativePath":"articles/core/tutorials/using-on-windows-full-solution.html"},"themesRelativePathToOutputRoot":"_themes/"}