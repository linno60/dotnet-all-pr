{"content":"<div><div class=\"content\">\n<p>This tutorial follows <a href=\"using-with-xplat-cli\" data-linktype=\"relative-path\">Getting started with .NET Core on Windows/Linux/macOS using the command line</a> to show how to go beyond simple &quot;hello world&quot; scenarios and pave the way for more advanced and well-organized applications.</p>\n<h2 id=\"using-folders-to-organize-code\">Using folders to organize code</h2>\n<p>Say you wanted to introduce some new types to do work on. You can do this by adding more files and making sure to give them namespaces you can include in your <em>Program.cs</em> file.</p>\n<pre class=\"loading\"><code>/MyProject\n|__Program.cs\n|__AccountInformation.cs\n|__MonthlyReportRecords.cs\n|__MyProject.csproj\n</code></pre><p>This works great when the size of your project is relatively small. However if you have a larger app with many different data types and potentially multiple layers, you may wish to organize things logically. This is where folders come into play. You can either follow along with <a href=\"https://github.com/dotnet/docs/tree/master/samples/core/console-apps/NewTypesMsBuild\" data-linktype=\"external\">the NewTypes sample project</a> that this guide covers, or create your own files and folders.</p>\n<p>To begin, create a new folder under the root of your project. <code>/Model</code> is chosen here.</p>\n<pre class=\"loading\"><code>/NewTypes\n|__/Model\n|__Program.cs\n|__NewTypes.csproj\n</code></pre><p>Now add some new types to the folder:</p>\n<pre class=\"loading\"><code>/NewTypes\n|__/Model\n   |__AccountInformation.cs\n   |__MonthlyReportRecords.cs\n|__Program.cs\n|__NewTypes.csproj\n</code></pre><p>Now, just as if they were files in the same directory, give them all the same namespace so you can include them in your <code>Program.cs</code>.</p>\n<h3 id=\"example-pet-types\">Example: Pet Types</h3>\n<p>This example creates two new types, <code>Dog</code> and <code>Cat</code>, and has them implement a common interface, <code>IPet</code>.</p>\n<p>Folder Structure:</p>\n<pre class=\"loading\"><code>/NewTypes\n|__/Pets\n   |__Dog.cs\n   |__Cat.cs\n   |__IPet.cs\n|__Program.cs\n|__NewTypes.csproj\n</code></pre><p><code>IPet.cs</code>:</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">using System;\n\nnamespace Pets\n{\n    public interface IPet\n    {\n        string TalkToOwner();\n    }\n}\n</code></pre><p><code>Dog.cs</code>:</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">using System;\n\nnamespace Pets\n{\n    public class Dog : IPet\n    {\n        public string TalkToOwner() =&gt; &quot;Woof!&quot;;\n    }\n}\n</code></pre><p><code>Cat.cs</code>:</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">using System;\n\nnamespace Pets\n{\n    public class Cat : IPet\n    {\n        public string TalkToOwner() =&gt; &quot;Meow!&quot;;\n    }\n}\n</code></pre><p><code>Program.cs</code>:</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">using System;\nusing Pets;\nusing System.Collections.Generic;\n\nnamespace ConsoleApplication\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            List&lt;IPet&gt; pets = new List&lt;IPet&gt;\n            {\n                new Dog(),\n                new Cat()  \n            };\n\n            foreach (var pet in pets)\n            {\n                Console.WriteLine(pet.TalkToOwner());\n            }\n        }\n    }\n}\n</code></pre><p><code>NewTypes.csproj</code>:</p>\n<pre class=\"loading\"><code class=\"lang-xml\">&lt;Project ToolsVersion=&quot;15.0&quot; xmlns=&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;&gt;\n  &lt;Import Project=&quot;$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props&quot; /&gt;\n\n  &lt;PropertyGroup&gt;\n    &lt;OutputType&gt;Exe&lt;/OutputType&gt;\n    &lt;TargetFramework&gt;netcoreapp1.0&lt;/TargetFramework&gt;\n  &lt;/PropertyGroup&gt;\n\n  &lt;ItemGroup&gt;\n    &lt;Compile Include=&quot;**\\*.cs&quot; /&gt;\n    &lt;EmbeddedResource Include=&quot;**\\*.resx&quot; /&gt;\n  &lt;/ItemGroup&gt;\n\n  &lt;ItemGroup&gt;\n    &lt;PackageReference Include=&quot;Microsoft.NETCore.App&quot;&gt;\n      &lt;Version&gt;1.0.1&lt;/Version&gt;\n    &lt;/PackageReference&gt;\n    &lt;PackageReference Include=&quot;Microsoft.NET.Sdk&quot;&gt;\n      &lt;Version&gt;1.0.0-alpha-20161104-2&lt;/Version&gt;\n      &lt;PrivateAssets&gt;All&lt;/PrivateAssets&gt;\n    &lt;/PackageReference&gt;\n  &lt;/ItemGroup&gt;\n\n  &lt;Import Project=&quot;$(MSBuildToolsPath)\\Microsoft.CSharp.targets&quot; /&gt;\n&lt;/Project&gt;\n</code></pre><p>And if you run this:</p>\n<pre class=\"loading\"><code>$ dotnet restore\n$ dotnet run\nWoof!\nMeow!\n</code></pre><p>New pet types can be added (such as a <code>Bird</code>), extending this project.</p>\n<h2 id=\"testing-your-console-app\">Testing your Console App</h2>\n<p>You&#39;ll probably be wanting to test your projects at some point. Here&#39;s a good way to do it:</p>\n<ol>\n<li><p>Move any source of your existing project into a new <code>src</code> folder.</p>\n<pre class=\"loading\"><code>/Project\n|__/src\n</code></pre></li>\n<li><p>Create a <code>/test</code> directory, then <code>cd</code> into it.</p>\n<pre class=\"loading\"><code>/Project\n|__/src\n|__/test\n</code></pre></li>\n<li><p>Initialize the directory with a <code>dotnet new xunit</code> command. This assumes xUnit, but you can also use MSTest by replacing <code>xunit</code> with <code>mstest</code>.</p>\n</li>\n</ol>\n<h3 id=\"example-extending-the-newtypes-project\">Example: Extending the NewTypes project</h3>\n<p>Now that the project system is in place, you can create your test project and start writing tests! From here on out, this guide will use and extend <a href=\"https://github.com/dotnet/docs/tree/master/samples/core/console-apps/NewTypesMsBuild\" data-linktype=\"external\">the sample Types project</a>. Additionally, it will use the <a href=\"https://xunit.github.io/\" data-linktype=\"external\">Xunit</a> test framework. Feel free to follow along or create your own multi-project system with tests.</p>\n<p>The whole project structure should look like this:</p>\n<pre class=\"loading\"><code>/NewTypes\n|__/src\n   |__/NewTypes\n      |__/Pets\n         |__Dog.cs\n         |__Cat.cs\n         |__IPet.cs\n      |__Program.cs\n      |__NewTypes.csproj\n|__/test\n   |__NewTypesTests\n      |__PetTests.cs\n      |__NewTypesTests.csproj\n</code></pre><p>There are two new things to make sure you have in your test project:</p>\n<ol>\n<li><p>A correct <em>NewTypesTests.csproj</em> file with the following:</p>\n<ul>\n<li>A reference to <code>xunit</code></li>\n<li>A reference to <code>dotnet-test-xunit</code></li>\n<li>A reference to the namespace corresponding to the code under test</li>\n</ul>\n<p>This can be built by typing <code>dotnet new xunit</code> at a command prompt in the <em>NewTypesTests</em> directory, then adding a project reference to the <code>NewTypes</code> project.</p>\n<p> <code>NewTypesTests/NewTypesTests.csproj</code>:</p>\n<pre class=\"loading\"><code class=\"lang-xml\"> &lt;Project ToolsVersion=&quot;15.0&quot; xmlns=&quot;http://schemas.microsoft.com/developer/msbuild/2003&quot;&gt;\n   &lt;Import Project=&quot;$(MSBuildExtensionsPath)\\$(MSBuildToolsVersion)\\Microsoft.Common.props&quot; /&gt;\n\n   &lt;PropertyGroup&gt;\n     &lt;OutputType&gt;Exe&lt;/OutputType&gt;\n     &lt;TargetFramework&gt;netcoreapp1.0&lt;/TargetFramework&gt;\n   &lt;/PropertyGroup&gt;\n\n   &lt;ItemGroup&gt;\n     &lt;Compile Include=&quot;**\\*.cs&quot; /&gt;\n     &lt;EmbeddedResource Include=&quot;**\\*.resx&quot; /&gt;\n   &lt;/ItemGroup&gt;\n\n   &lt;ItemGroup&gt;\n     &lt;PackageReference Include=&quot;Microsoft.NETCore.App&quot;&gt;\n       &lt;Version&gt;1.0.1&lt;/Version&gt;\n     &lt;/PackageReference&gt;\n     &lt;PackageReference Include=&quot;Microsoft.NET.Sdk&quot;&gt;\n       &lt;Version&gt;1.0.0-alpha-20161104-2&lt;/Version&gt;\n       &lt;PrivateAssets&gt;All&lt;/PrivateAssets&gt;\n     &lt;/PackageReference&gt;\n     &lt;PackageReference Include=&quot;Microsoft.NET.Test.Sdk&quot;&gt;\n       &lt;Version&gt;15.0.0-preview-20161024-02&lt;/Version&gt;\n     &lt;/PackageReference&gt;\n     &lt;PackageReference Include=&quot;xunit&quot;&gt;\n       &lt;Version&gt;2.2.0-beta3-build3402&lt;/Version&gt;\n     &lt;/PackageReference&gt;\n     &lt;PackageReference Include=&quot;xunit.runner.visualstudio&quot;&gt;\n       &lt;Version&gt;2.2.0-beta4-build1188&lt;/Version&gt;\n     &lt;/PackageReference&gt;\n     &lt;ProjectReference Include=&quot;../../src/NewTypes/NewTypes.csproj&quot;/&gt;\n   &lt;/ItemGroup&gt;\n\n   &lt;Import Project=&quot;$(MSBuildToolsPath)\\Microsoft.CSharp.targets&quot; /&gt;\n &lt;/Project&gt;\n</code></pre></li>\n<li><p>An xUnit test class.</p>\n<p> <code>PetTests.cs</code>: </p>\n<pre class=\"loading\"><code class=\"lang-csharp\"> using System;\n using Xunit;\n using Pets;\n public class PetTests\n {\n     [Fact]\n     public void DogTalkToOwnerTest()\n     {\n         string expected = &quot;Woof!&quot;;\n         string actual = new Dog().TalkToOwner();\n\n         Assert.Equal(expected, actual);\n     }\n\n     [Fact]\n     public void CatTalkToOwnerTest()\n     {\n         string expected = &quot;Meow!&quot;;\n         string actual = new Cat().TalkToOwner();\n\n         Assert.Equal(expected, actual);\n     }\n }\n</code></pre></li>\n</ol>\n<p>Now you can run tests! The <a href=\"../tools/dotnet-test\" data-linktype=\"relative-path\"><code>dotnet test</code></a> command runs the test runner you have specified in your project. Make sure you start at the top-level directory.</p>\n<pre class=\"loading\"><code>$ cd test/NewTypesTests\n$ dotnet restore\n$ dotnet test\n</code></pre><p>Output should look like this:</p>\n<pre class=\"loading\"><code>xUnit.net .NET CLI test runner (64-bit win10-x64)\n  Discovering: NewTypesTests\n  Discovered:  NewTypesTests\n  Starting:    NewTypesTests\n  Finished:    NewTypesTests\n=== TEST EXECUTION SUMMARY ===\n   NewTypesTests  Total: 2, Errors: 0, Failed: 0, Skipped: 0, Time: 0.144s\nSUMMARY: Total: 1 targets, Passed: 1, Failed: 0.\n</code></pre></div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"cartermp\">\r\n<meta name=\"ms.author\" content=\"mairaw\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"52ff1be3-d92e-4477-9c84-8c1771e87ab5\">\r\n<meta name=\"description\" content=\"This tutorial explains how to organize and test .NET Core projects from the command line.\">\r\n<meta name=\"keywords\" content=\".NET, .NET Core\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"03/07/2017\">\r\n<meta name=\"ms.technology\" content=\"dotnet-cli\">\r\n<meta name=\"ms.prod\" content=\".net-core\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/c2722327c3ca213309cae5e0d0417b0f0e9ea514/docs/core/tutorials/testing-with-cli.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/core/tutorials/testing-with-cli.md\">\r\n<meta name=\"document_id\" content=\"677f9609-15ee-9de4-fbea-26383f88a713\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../toc2.json\">\r\n","rawMetadata":{"author":"cartermp","ms.author":"mairaw","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Organizing and testing projects with the .NET Core command line | Microsoft Docs","ms.devlang":"dotnet","ms.assetid":"52ff1be3-d92e-4477-9c84-8c1771e87ab5","description":"This tutorial explains how to organize and test .NET Core projects from the command line.","keywords":".NET, .NET Core","ms.topic":"article","ms.date":"03/07/2017","ms.technology":"dotnet-cli","ms.prod":".net-core","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":":boom: removing preview3 folder (#1650)","commit_sha":"c2722327c3ca213309cae5e0d0417b0f0e9ea514","commit_date":"2017-03-07 03:26:34 -0800"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/cartermp","display_name":"Phillip Carter","id":"6309070"},"contributors":[{"profile_url":"https://github.com/cartermp","display_name":"Phillip Carter"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/c2722327c3ca213309cae5e0d0417b0f0e9ea514/docs/core/tutorials/testing-with-cli.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/core/tutorials/testing-with-cli.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/core/tutorials/testing-with-cli.md","document_id":"677f9609-15ee-9de4-fbea-26383f88a713","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/core/tutorials/testing-with-cli","toc_asset_id":"articles/toc.json","toc_rel":"../../toc.json","_op_ogTitle":"Organizing and testing projects with the .NET Core command line","_op_displayDate":"2017-3-7","_op_displayDate_source":"2017-03-07T00:00:00Z","_op_wordCount":774,"_op_rawTitle":"<h1 id=\"organizing-and-testing-projects-with-the-net-core-command-line\" sourcefile=\"docs/core/tutorials/testing-with-cli.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Organizing and testing projects with the .NET Core command line</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/core/tutorials/testing-with-cli","fileRelativePath":"articles/core/tutorials/testing-with-cli.html"},"themesRelativePathToOutputRoot":"_themes/"}