{"content":"<div><div class=\"content\">\n<p>The .NET Core command-line interface (CLI) is a new foundational cross-platform toolchain for developing \n.NET Core applications. It is &quot;foundational&quot; because it is the primary layer on which other, \nhigher-level tools, such as Integrated Development Environments (IDEs), editors and \nbuild orchestrators can build on. </p>\n<p>It is also cross-platform by default and has the same surface area on each of the supported platforms. This means that\nwhen you learn how to use the tooling, you can use it the same way from any of the supported platforms. </p>\n<h2 id=\"installation\">Installation</h2>\n<p>As with any tooling, the first thing is to get the tools to your machine. Depending on your scenario, you can either \nuse the native installers to install the CLI or use the installation shell script.</p>\n<p>The native installers are primarily meant for developer&#39;s machines. The CLI is distributed using each supported platform&#39;s \nnative install mechanism, for instance DEB packages on Ubuntu or MSI bundles on Windows. These installers will install \nand set up the environment as needed for the user to use the CLI immediately after the install. However, they also \nrequire administrative privileges on the machine. You can view the installation instructions on the\n<a href=\"https://aka.ms/dotnetcoregs\" data-linktype=\"external\">.NET Core getting started page</a>.</p>\n<p>Install scripts, on the other hand, do not require administrative privileges. However, they will also not install any \nprerequisites on the machine; you need to install all of the prerequisites manually. The scripts are meant mostly for \nsetting up build servers or when you wish to install the tools without administrative privileges (do note the prerequisites \ncaveat above). You can find more information on the <a href=\"dotnet-install-script\" data-linktype=\"relative-path\">install script reference topic</a>. If you are \ninterested in how to set up CLI on your continuous integration (CI) build server you can take a look at the \n<a href=\"using-ci-with-cli\" data-linktype=\"relative-path\">CLI with CI servers</a> topic. </p>\n<p>By default, the CLI will install in a side-by-side (SxS) manner. This means that multiple versions of the CLI tools \ncan coexist at any given time on a single machine. How the correct version gets used is explained in more detail in \nthe <a href=\"#driver\" data-linktype=\"self-bookmark\">driver</a> section. </p>\n<h3 id=\"what-commands-come-in-the-box\">What commands come in the box?</h3>\n<p>The following commands are installed by default:</p>\n<ul>\n<li><a href=\"dotnet-new\" data-linktype=\"relative-path\">new</a></li>\n<li><a href=\"dotnet-migrate\" data-linktype=\"relative-path\">migrate</a></li>\n<li><a href=\"dotnet-restore\" data-linktype=\"relative-path\">restore</a></li>\n<li><a href=\"dotnet-run\" data-linktype=\"relative-path\">run</a></li>\n<li><a href=\"dotnet-build\" data-linktype=\"relative-path\">build</a></li>\n<li><a href=\"dotnet-test\" data-linktype=\"relative-path\">test</a></li>\n<li><a href=\"dotnet-publish\" data-linktype=\"relative-path\">publish</a></li>\n<li><a href=\"dotnet-pack\" data-linktype=\"relative-path\">pack</a></li>\n</ul>\n<p>There is also a way to import more commands on a per-project basis as well as to add your own commands. This is \nexplained in greater detail in the <a href=\"#extensibility\" data-linktype=\"self-bookmark\">extensibility section</a>. </p>\n<h2 id=\"working-with-the-cli\">Working with the CLI</h2>\n<p>Before we go into any more details, let&#39;s see how working with the CLI looks like from a 10,000-foot view. \nThe following example utilizes several commands from the CLI standard install to initialize a new simple console application, \nrestore the dependencies, build the application and then run it. </p>\n<pre class=\"loading\"><code class=\"lang-console\">dotnet new console\ndotnet restore\ndotnet build --output /stuff\ndotnet /stuff/new.dll\n</code></pre><p>As you can see in the previous example, there is a pattern in the way you use the CLI tools. Within that pattern, we can \nidentify three main pieces of each command:</p>\n<ol>\n<li><a href=\"#driver\" data-linktype=\"self-bookmark\">The driver (&quot;dotnet&quot;)</a></li>\n<li><a href=\"#the-verb\" data-linktype=\"self-bookmark\">The command, or &quot;verb&quot;</a></li>\n<li><a href=\"#the-arguments\" data-linktype=\"self-bookmark\">Command arguments</a></li>\n</ol>\n<h3 id=\"driver\">Driver</h3>\n<p>The driver is named <a href=\"dotnet\" data-linktype=\"relative-path\">dotnet</a>. It is the first part of what you invoke. The driver has two responsibilities:</p>\n<ol>\n<li>Running portable apps</li>\n<li>Executing the verb</li>\n</ol>\n<p>What it does depends on what is specified on the command line. In the first case, you would \nspecify a portable app DLL that <code>dotnet</code> would run similar to this: <code>dotnet /path/to/your.dll</code>. </p>\n<p>In the second case, the driver attempts to invoke the specified command. This starts the CLI command execution \nprocess. First, the driver determines the version of the tooling that you want. You can specify the version in the \n<a href=\"global-json\" data-linktype=\"relative-path\">global.json</a> file using the <code>version</code> property. If that is not available, the driver finds the latest version\nof the tools that is installed on disk and uses that version. Once the version is determined, it executes the \ncommand. </p>\n<h3 id=\"the-verb\">The &quot;verb&quot;</h3>\n<p>The verb is simply a command that performs an action. <code>dotnet build</code> builds your code. <code>dotnet publish</code> publishes \nyour code. The verb is implemented as a console application that is named per convention: <code>dotnet-{verb}</code>. All of the \nlogic is implemented in the console application that represents the verb. </p>\n<h3 id=\"the-arguments\">The arguments</h3>\n<p>The arguments that you pass on the command-line are the arguments to the actual verb/command being invoked. \nFor example, when you type <code>dotnet publish --output publishedapp</code>, the <code>--output</code> argument is passed to the \n<code>publish</code> command. </p>\n<h2 id=\"types-of-application-portability\">Types of application portability</h2>\n<p>CLI enables applications to be portable in two main ways:</p>\n<ol>\n<li>Completely portable applications that can run anywhere .NET Core is installed</li>\n<li>Self-contained deployments</li>\n</ol>\n<p>You can learn more about both of these in the <a href=\"../deploying/index\" data-linktype=\"relative-path\">.NET Core application deployment</a> topic. </p>\n<h2 id=\"migration-from-projectjson\">Migration from project.json</h2>\n<p>If you used Preview 2 tooling and <em>project.json</em> projects, you can consult the <a href=\"dotnet-migrate\" data-linktype=\"relative-path\">dotnet migrate</a> command docs\nto get acquainted with the command and how to migrate your project. </p>\n<div class=\"NOTE\"><h5>Note</h5><p>The <code>dotnet migrate</code> command currently does not migrate pre-preview 2 <em>project.json</em> files. </p>\n</div>\n<h2 id=\"extensibility\">Extensibility</h2>\n<p>Of course, not every tool that you could use in your workflow will be part of the core CLI tools. However, .NET Core \nCLI has an extensibility model that allows you to specify additional tools for your projects. You can find out more \nin the <a href=\"extensibility\" data-linktype=\"relative-path\">.NET Core CLI extensibility model</a> topic.</p>\n<h2 id=\"summary\">Summary</h2>\n<p>This was a short overview of the most important features of the CLI. You can find out more by using the reference and \nconceptual topics on this site. There are also other resources you can use:</p>\n<ul>\n<li><a href=\"https://github.com/dotnet/cli/\" data-linktype=\"external\">dotnet/CLI</a> GitHub repo</li>\n<li><a href=\"https://aka.ms/dotnetcoregs/\" data-linktype=\"external\">Getting started instructions</a></li>\n</ul>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"blackdwarf\">\r\n<meta name=\"ms.author\" content=\"mairaw\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"7c5eee9f-d873-4224-8f5f-ed83df329a59\">\r\n<meta name=\"description\" content=\"An overview of what the Command-Line Interface (CLI) is and its main features\">\r\n<meta name=\"keywords\" content=\"CLI, CLI tools, .NET, .NET Core\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"03/06/2017\">\r\n<meta name=\"ms.technology\" content=\"dotnet-cli\">\r\n<meta name=\"ms.prod\" content=\".net-core\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/c2722327c3ca213309cae5e0d0417b0f0e9ea514/docs/core/tools/index.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/core/tools/index.md\">\r\n<meta name=\"document_id\" content=\"746f9ce4-57d6-72a6-dd00-cd6dcbf57892\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../toc2.json\">\r\n","rawMetadata":{"author":"blackdwarf","ms.author":"mairaw","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":".NET Core Command-Line Interface (CLI) Tools | Microsoft Docs","ms.devlang":"dotnet","ms.assetid":"7c5eee9f-d873-4224-8f5f-ed83df329a59","description":"An overview of what the Command-Line Interface (CLI) is and its main features","keywords":"CLI, CLI tools, .NET, .NET Core","ms.topic":"article","ms.date":"03/06/2017","ms.technology":"dotnet-cli","ms.prod":".net-core","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":":boom: removing preview3 folder (#1650)","commit_sha":"c2722327c3ca213309cae5e0d0417b0f0e9ea514","commit_date":"2017-03-07 03:26:34 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"change version label (#1526)","commit_sha":"796df1549a7553aa93158598d62338c02d4df73e","commit_date":"2017-02-09 23:56:10 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Maira Wenzel","comitter_email":"mairaw@microsoft.com","message":"preparing changes for RC3 release","commit_sha":"d9ef9b8388bc854e087e0beccdb4785ed7e0f804","commit_date":"2017-01-27 11:43:14 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"added links between versions (#1424)","commit_sha":"2ad428dcda9ef213a8487c35a48b33929259abba","commit_date":"2017-01-20 23:55:05 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"fixed broken anchors (#1194)","commit_sha":"b20713600d7c3ddc31be5885733a1e8910ede8c6","commit_date":"2016-11-02 20:45:13 -0700"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Reviewed the CLI topic (#1124)","commit_sha":"218dfe1be8458884bf213661d79d01602f5f444f","commit_date":"2016-10-13 11:47:39 -0700"},{"author_name":"Tom Dykstra","author_email":"tdykstra@microsoft.com","committer_name":"Rich Lander","comitter_email":"rlander@microsoft.com","message":"coordinate titles between toc and articles for core guide (#640)","commit_sha":"c3b0ba6f62d0a7ee740d3f552e3e405a5e33d985","commit_date":"2016-06-25 15:30:01 -0700"},{"author_name":"Petr Onderka","author_email":"gsvick@gmail.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":"Fixed links (#628)","commit_sha":"e69e28b9e7400cc3dfa87faf660c3f2eab0aae90","commit_date":"2016-06-25 08:50:38 -0400"},{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Fixed references to RC2, OS X, and Update 2 (#612)","commit_sha":"093b852fe1ed2307ebce914381fe47388b435c95","commit_date":"2016-06-24 15:07:22 -0700"},{"author_name":"Tom Dykstra","author_email":"tdykstra@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":"toc changes for .net core guide section (#609)","commit_sha":"a77454a141ed46eaeeda25dc723476fdb4e542e9","commit_date":"2016-06-24 15:15:55 -0400"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/blackdwarf","display_name":"blackdwarf","id":"3115004"},"contributors":[{"profile_url":"https://github.com/blackdwarf","display_name":"blackdwarf"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"},{"profile_url":"https://github.com/tdykstra","display_name":"Tom Dykstra","id":"1569635"},{"profile_url":"https://github.com/svick","display_name":"Petr Onderka","id":"287848"},{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/c2722327c3ca213309cae5e0d0417b0f0e9ea514/docs/core/tools/index.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/core/tools/index.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/core/tools/index.md","document_id":"746f9ce4-57d6-72a6-dd00-cd6dcbf57892","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/core/tools/index","toc_asset_id":"articles/toc.json","toc_rel":"../../toc.json","_op_ogTitle":".NET Core Command-Line Interface (CLI) Tools","_op_displayDate":"2017-3-6","_op_displayDate_source":"2017-03-06T00:00:00Z","_op_wordCount":900,"_op_rawTitle":"<h1 id=\"net-core-command-line-interface-tools-net-core-sdk-10-tools\" sourcefile=\"docs/core/tools/index.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">.NET Core command-line interface tools (.NET Core SDK 1.0 Tools)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/core/tools/index","fileRelativePath":"articles/core/tools/index.html"},"themesRelativePathToOutputRoot":"_themes/"}