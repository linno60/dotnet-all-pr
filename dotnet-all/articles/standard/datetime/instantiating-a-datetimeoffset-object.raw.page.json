{"content":"<div><div class=\"content\">\n<p>The <a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">System.DateTimeOffset</a> structure offers a number of ways to create new <a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> values. Many of them correspond directly to the methods available for instantiating new <a class=\"xref\" href=\"../../../api/system.datetime\" data-linktype=\"relative-path\">System.DateTime</a> values, with enhancements that allow you to specify the date and time value&#39;s offset from Coordinated Universal Time (UTC). In particular, you can instantiate a <a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> value in the following ways:</p>\n<ul>\n<li><p>By calling a <a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> constructor.</p>\n</li>\n<li><p>By implicitly converting a value to <a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> value.</p>\n</li>\n<li><p>By parsing the string representation of a date and time.</p>\n</li>\n</ul>\n<h2 id=\"date-and-time-literals\">Date and Time Literals</h2>\n<p>For languages that support it, one of the most common ways to instantiate a <a class=\"xref\" href=\"../../../api/system.datetime\" data-linktype=\"relative-path\">DateTime</a> value is to provide the date and time as a hard-coded literal value. For example, the following Visual Basic code creates a <a class=\"xref\" href=\"../../../api/system.datetime\" data-linktype=\"relative-path\">DateTime</a> object whose value is January 1, 2008, at 10:00 AM.</p>\n<pre class=\"loading\"><code class=\"lang-vb\">Dim literalDate1 As Date = #05/01/2008 8:06:32 AM#\nConsole.WriteLine(literalDate1.ToString())\n&#39; Displays:\n&#39;              5/1/2008 8:06:32 AM\n</code></pre><p><a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> values can also be initialized using date and time literals when using languages that support <a class=\"xref\" href=\"../../../api/system.datetime\" data-linktype=\"relative-path\">DateTime</a> literals. For example, the following Visual Basic code creates a <a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> object.</p>\n<pre class=\"loading\"><code class=\"lang-vb\">Dim literalDate As DateTimeOffset = #05/01/2008 8:06:32 AM#\nConsole.WriteLine(literalDate.ToString())\n&#39; Displays:\n&#39;              5/1/2008 8:06:32 AM -07:00\n</code></pre><p>As the console output shows, the <a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> value created in this way is assigned the offset of the local time zone. This means that a <a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> value assigned using a character literal does not identify a single point of time if the code is run on different computers.</p>\n<h2 id=\"datetimeoffset-constructors\">DateTimeOffset Constructors</h2>\n<p>The <a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">System.DateTimeOffset</a> type defines five constructors. Three of them correspond directly to <a class=\"xref\" href=\"../../../api/system.datetime\" data-linktype=\"relative-path\">DateTime</a> constructors, with an additional parameter of type <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">System.TimeSpan</a> that defines the date and time&#39;s offset from UTC. These allow you to define a <a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> value based on the value of its individual date and time components. For example, the following code uses these three constructors to instantiate <a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> objects with identical values of 7/1/2008 12:05 AM +01:00.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">DateTimeOffset dateAndTime;\n\n// Instantiate date and time using years, months, days, \n// hours, minutes, and seconds\ndateAndTime = new DateTimeOffset(2008, 5, 1, 8, 6, 32, \n                                 new TimeSpan(1, 0, 0));\nConsole.WriteLine(dateAndTime);\n// Instantiate date and time using years, months, days,\n// hours, minutes, seconds, and milliseconds\ndateAndTime = new DateTimeOffset(2008, 5, 1, 8, 6, 32, 545, \n                                 new TimeSpan(1, 0, 0));\nConsole.WriteLine(&quot;{0} {1}&quot;, dateAndTime.ToString(&quot;G&quot;), \n                             dateAndTime.ToString(&quot;zzz&quot;));\n\n// Instantiate date and time using number of ticks\n// 05/01/2008 8:06:32 AM is 633,452,259,920,000,000 ticks\ndateAndTime = new DateTimeOffset(633452259920000000, new TimeSpan(1, 0, 0));  \nConsole.WriteLine(dateAndTime);\n// The example displays the following output to the console:\n//       5/1/2008 8:06:32 AM +01:00\n//       5/1/2008 8:06:32 AM +01:00\n//       5/1/2008 8:06:32 AM +01:00\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim dateAndTime As DateTimeOffset\n\n&#39; Instantiate date and time using years, months, days, \n&#39; hours, minutes, and seconds\ndateAndTime = New DateTimeOffset(2008, 5, 1, 8, 6, 32, _\n                                 New TimeSpan(1, 0, 0))\nConsole.WriteLine(dateAndTime)\n&#39; Instantiate date and time using years, months, days,\n&#39; hours, minutes, seconds, and milliseconds\ndateAndTime = New DateTimeOffset(2008, 5, 1, 8, 6, 32, 545, _\n                                 New TimeSpan(1, 0, 0))\nConsole.WriteLine(&quot;{0} {1}&quot;, dateAndTime.ToString(&quot;G&quot;), _\n                             dateAndTime.ToString(&quot;zzz&quot;))\n\n&#39; Instantiate date and time using Persian calendar with years,\n&#39; months, days, hours, minutes, seconds, and milliseconds\ndateAndTime = New DateTimeOffset(1387, 2, 12, 8, 6, 32, 545, New PersianCalendar, New TimeSpan(1, 0, 0))\n&#39; Note that the console output displays the date in the Gregorian\n&#39; calendar, not the Persian calendar. \nConsole.WriteLine(&quot;{0} {1}&quot;, dateAndTime.ToString(&quot;G&quot;), _\n                             dateAndTime.ToString(&quot;zzz&quot;))\n\n&#39; Instantiate date and time using number of ticks\n&#39; 05/01/2008 8:06:32 AM is 633,452,259,920,000,000 ticks\ndateAndTime = New DateTimeOffset(633452259920000000, New TimeSpan(1, 0, 0))  \nConsole.WriteLine(dateAndTime)\n&#39; The example displays the following output to the console:\n&#39;       5/1/2008 8:06:32 AM +01:00\n&#39;       5/1/2008 8:06:32 AM +01:00\n&#39;       5/1/2008 8:06:32 AM +01:00\n&#39;       5/1/2008 8:06:32 AM +01:00\n</code></pre><p>Note that, when the value of the <a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> object instantiated using a <a class=\"xref\" href=\"../../../api/system.globalization.persiancalendar\" data-linktype=\"relative-path\">PersianCalendar</a> object as one of the arguments to its constructor is displayed to the console, it is expressed as a date in the Gregorian rather than the Persian calendar. </p>\n<p>The other two constructors create a <a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> object from a DateTime value. The first of these has a single parameter, the <a class=\"xref\" href=\"../../../api/system.datetime\" data-linktype=\"relative-path\">DateTime</a> value to convert to a <a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> value. The offset of the resulting <a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> value depends on the <a class=\"xref\" href=\"../../../api/system.datetime#System_DateTime_Kind\" data-linktype=\"relative-path\">Kind</a> property of the constructor&#39;s single <a class=\"xref\" href=\"../../../api/system.datetime\" data-linktype=\"relative-path\">DateTime</a> parameter. If its value is <a class=\"xref\" href=\"../../../api/system.datetimekind#System_DateTimeKind_Utc\" data-linktype=\"relative-path\">DateTimeKind.Utc</a>, the offset is set equal to <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_Zero\" data-linktype=\"relative-path\">TimeSpan.Zero</a>. Otherwise, its offset is set equal to that of the local time zone. The following example illustrates the use of this constructor to instantiate <a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> objects representing UTC and the local time zone:</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">// Declare date; Kind property is DateTimeKind.Unspecified\nDateTime sourceDate = new DateTime(2008, 5, 1, 8, 30, 0);\nDateTimeOffset targetTime;\n\n// Instantiate a DateTimeOffset value from a UTC time \nDateTime utcTime = DateTime.SpecifyKind(sourceDate, DateTimeKind.Utc);\ntargetTime = new DateTimeOffset(utcTime);\nConsole.WriteLine(targetTime);\n// Displays 5/1/2008 8:30:00 AM +00:00\n// Because the Kind property is DateTimeKind.Utc, \n// the offset is TimeSpan.Zero.\n\n// Instantiate a DateTimeOffset value from a UTC time with a zero offset\ntargetTime = new DateTimeOffset(utcTime, TimeSpan.Zero);\nConsole.WriteLine(targetTime);\n// Displays 5/1/2008 8:30:00 AM +00:00\n// Because the Kind property is DateTimeKind.Utc, \n// the call to the constructor succeeds\n\n// Instantiate a DateTimeOffset value from a UTC time with a negative offset\ntry\n{\n   targetTime = new DateTimeOffset(utcTime, new TimeSpan(-2, 0, 0));\n   Console.WriteLine(targetTime);\n}\ncatch (ArgumentException)\n{\n   Console.WriteLine(&quot;Attempt to create DateTimeOffset value from {0} failed.&quot;, \n                      targetTime);\n}   \n// Throws exception and displays the following to the console:\n//   Attempt to create DateTimeOffset value from 5/1/2008 8:30:00 AM +00:00 failed.\n\n// Instantiate a DateTimeOffset value from a local time\nDateTime localTime = DateTime.SpecifyKind(sourceDate, DateTimeKind.Local);\ntargetTime = new DateTimeOffset(localTime);\nConsole.WriteLine(targetTime);\n// Displays 5/1/2008 8:30:00 AM -07:00\n// Because the Kind property is DateTimeKind.Local, \n// the offset is that of the local time zone.\n\n// Instantiate a DateTimeOffset value from an unspecified time\ntargetTime = new DateTimeOffset(sourceDate);\nConsole.WriteLine(targetTime);\n// Displays 5/1/2008 8:30:00 AM -07:00\n// Because the Kind property is DateTimeKind.Unspecified, \n// the offset is that of the local time zone.\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">&#39; Declare date; Kind property is DateTimeKind.Unspecified\nDim sourceDate As Date = #5/1/2008 8:30 AM#\nDim targetTime As DateTimeOffset\n\n&#39; Instantiate a DateTimeOffset value from a UTC time \nDim utcTime As Date = Date.SpecifyKind(sourceDate, DateTimeKind.Utc)\ntargetTime = New DateTimeOffset(utcTime)\nConsole.WriteLine(targetTime)\n&#39; Displays 5/1/2008 8:30:00 AM +00:00\n&#39; Because the Kind property is DateTimeKind.Utc, \n&#39; the offset is TimeSpan.Zero.\n\n\n&#39; Instantiate a DateTimeOffset value from a local time\nDim localTime As Date = Date.SpecifyKind(sourceDate, DateTimeKind.Local)\ntargetTime = New DateTimeOffset(localTime)\nConsole.WriteLine(targetTime)\n&#39; Displays 5/1/2008 8:30:00 AM -07:00\n&#39; Because the Kind property is DateTimeKind.Local, \n&#39; the offset is that of the local time zone.\n\n&#39; Instantiate a DateTimeOffset value from an unspecified time\ntargetTime = New DateTimeOffset(sourceDate)\nConsole.WriteLine(targetTime)\n&#39; Displays 5/1/2008 8:30:00 AM -07:00\n&#39; Because the Kind property is DateTimeKind.Unspecified, \n&#39; the offset is that of the local time zone.\n</code></pre><div class=\"NOTE\"><h5>Note</h5><p>Calling the overload of the <a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> constructor that has a single <a class=\"xref\" href=\"../../../api/system.datetime\" data-linktype=\"relative-path\">DateTime</a> parameter is equivalent to performing an implicit conversion of a <a class=\"xref\" href=\"../../../api/system.datetime\" data-linktype=\"relative-path\">DateTime</a> value to a <a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> value.</p>\n</div>\n<p>The second constructor that creates a <a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> object from a <a class=\"xref\" href=\"../../../api/system.datetime\" data-linktype=\"relative-path\">DateTime</a> value has two parameters: the <a class=\"xref\" href=\"../../../api/system.datetime\" data-linktype=\"relative-path\">DateTime</a> value to convert, and a <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value representing the date and time&#39;s offset from UTC. This offset value must correspond to the <a class=\"xref\" href=\"../../../api/system.datetime#System_DateTime_Kind\" data-linktype=\"relative-path\">Kind</a> property of the constructor&#39;s first parameter or an <a class=\"xref\" href=\"../../../api/system.argumentexception\" data-linktype=\"relative-path\">System.ArgumentException</a> is thrown. If the <a class=\"xref\" href=\"../../../api/system.datetime#System_DateTime_Kind\" data-linktype=\"relative-path\">Kind</a> property of the first parameter is <a class=\"xref\" href=\"../../../api/system.datetimekind#System_DateTimeKind_Utc\" data-linktype=\"relative-path\">DateTimeKind.Utc</a>, the value of the second parameter must be <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_Zero\" data-linktype=\"relative-path\">TimeSpan.Zero</a>. If the <a class=\"xref\" href=\"../../../api/system.datetime#System_DateTime_Kind\" data-linktype=\"relative-path\">Kind</a> property of the first parameter is <a class=\"xref\" href=\"../../../api/system.datetimekind#System_DateTimeKind_Local\" data-linktype=\"relative-path\">DateTimeKind.Local</a>, the value of the second parameter must be the offset of the local system&#39;s time zone. If the <a class=\"xref\" href=\"../../../api/system.datetime#System_DateTime_Kind\" data-linktype=\"relative-path\">Kind</a> property of the first parameter is <a class=\"xref\" href=\"../../../api/system.datetimekind#System_DateTimeKind_Unspecified\" data-linktype=\"relative-path\">DateTimeKind.Unspecified</a>, the offset can be any valid value. The following code illustrates calls to this constructor to convert <a class=\"xref\" href=\"../../../api/system.datetime\" data-linktype=\"relative-path\">DateTime</a> to <a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> values.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">DateTime sourceDate = new DateTime(2008, 5, 1, 8, 30, 0);\nDateTimeOffset targetTime;\n\n// Instantiate a DateTimeOffset value from a UTC time with a zero offset.\nDateTime utcTime = DateTime.SpecifyKind(sourceDate, DateTimeKind.Utc);\ntargetTime = new DateTimeOffset(utcTime, TimeSpan.Zero);\nConsole.WriteLine(targetTime);\n// Displays 5/1/2008 8:30:00 AM +00:00\n// Because the Kind property is DateTimeKind.Utc,  \n// the call to the constructor succeeds\n\n// Instantiate a DateTimeOffset value from a UTC time with a non-zero offset.\ntry\n{\n   targetTime = new DateTimeOffset(utcTime, new TimeSpan(-2, 0, 0));\n   Console.WriteLine(targetTime);\n}\ncatch (ArgumentException)\n{\n   Console.WriteLine(&quot;Attempt to create DateTimeOffset value from {0} failed.&quot;, \n                      utcTime);\n}   \n// Throws exception and displays the following to the console:\n//   Attempt to create DateTimeOffset value from 5/1/2008 8:30:00 AM failed.\n\n// Instantiate a DateTimeOffset value from a local time with \n// the offset of the local time zone\nDateTime localTime = DateTime.SpecifyKind(sourceDate, DateTimeKind.Local);\ntargetTime = new DateTimeOffset(localTime, \n                                TimeZoneInfo.Local.GetUtcOffset(localTime));\nConsole.WriteLine(targetTime);\n// Displays 5/1/2008 8:30:00 AM -07:00\n// Because the Kind property is DateTimeKind.Local and the offset matches\n// that of the local time zone, the call to the constructor succeeds.\n\n// Instantiate a DateTimeOffset value from a local time with a zero offset.\ntry\n{\n   targetTime = new DateTimeOffset(localTime, TimeSpan.Zero);\n   Console.WriteLine(targetTime);\n}\ncatch (ArgumentException)\n{\n   Console.WriteLine(&quot;Attempt to create DateTimeOffset value from {0} failed.&quot;, \n                      localTime);\n}   \n// Throws exception and displays the following to the console:\n//   Attempt to create DateTimeOffset value from 5/1/2008 8:30:00 AM failed.\n\n// Instantiate a DateTimeOffset value with an arbitary time zone. \nstring timeZoneName = &quot;Central Standard Time&quot;;\nTimeSpan offset = TimeZoneInfo.FindSystemTimeZoneById(timeZoneName). \n                         GetUtcOffset(sourceDate); \ntargetTime = new DateTimeOffset(sourceDate, offset);\nConsole.WriteLine(targetTime);\n// Displays 5/1/2008 8:30:00 AM -05:00\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim sourceDate As Date = #5/1/2008 8:30 AM#\nDim targetTime As DateTimeOffset\n\n&#39; Instantiate a DateTimeOffset value from a UTC time with a zero offset.\nDim utcTime As Date = Date.SpecifyKind(sourceDate, DateTimeKind.Utc)\ntargetTime = New DateTimeOffset(utcTime, TimeSpan.Zero)\nConsole.WriteLine(targetTime)\n&#39; Displays 5/1/2008 8:30:00 AM +00:00\n&#39; Because the Kind property is DateTimeKind.Utc,  \n&#39; the call to the constructor succeeds.\n\n&#39; Instantiate a DateTimeOffset value from a UTC time with a non-zero offset.\nTry\n   targetTime = New DateTimeOffset(utcTime, New TimeSpan(-2, 0, 0))\n   Console.WriteLine(targetTime)\nCatch e As ArgumentException\n   Console.WriteLine(&quot;Attempt to create DateTimeOffset value from {0} failed.&quot;, _\n                      utcTime)\nEnd Try   \n&#39; Throws exception and displays the following to the console:\n&#39;   Attempt to create DateTimeOffset value from 5/1/2008 8:30:00 AM failed.\n\n&#39; Instantiate a DateTimeOffset value from a local time with \n&#39; the offset of the local time zone.\nDim localTime As Date = Date.SpecifyKind(sourceDate, DateTimeKind.Local)\ntargetTime = New DateTimeOffset(localTime, _\n                                TimeZoneInfo.Local.GetUtcOffset(localTime))\nConsole.WriteLine(targetTime)\n&#39; Because the Kind property is DateTimeKind.Local and the offset matches\n&#39; that of the local time zone, the call to the constructor succeeds.\n\n&#39; Instantiate a DateTimeOffset value from a local time with a zero offset.\nTry\n   targetTime = New DateTimeOffset(localTime, TimeSpan.Zero)\n   Console.WriteLine(targetTime)\nCatch e As ArgumentException\n   Console.WriteLine(&quot;Attempt to create DateTimeOffset value from {0} failed.&quot;, _\n                      localTime)\nEnd Try   \n&#39; Throws exception and displays the following to the console:\n&#39;   Attempt to create DateTimeOffset value from 5/1/2008 8:30:00 AM failed.\n\n&#39; Instantiate a DateTimeOffset value with an arbitary time zone. \nDim timeZoneName As String = &quot;Central Standard Time&quot;\nDim offset As TimeSpan = TimeZoneInfo.FindSystemTimeZoneById(timeZoneName). _\n                         GetUtcOffset(sourceDate) \ntargetTime = New DateTimeOffset(sourceDate, offset)\nConsole.WriteLine(targetTime)\n&#39; Displays 5/1/2008 8:30:00 AM -05:00\n</code></pre><h2 id=\"implicit-type-conversion\">Implicit Type Conversion</h2>\n<p>The <a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">System.DateTimeOffset</a> type supports one implicit type conversion: from a <a class=\"xref\" href=\"../../../api/system.datetime\" data-linktype=\"relative-path\">System.DateTime</a> value to a <a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> value. (An implicit type conversion is a conversion from one type to another that does not require an explicit cast (in C#) or conversion (in Visual Basic) and that does not lose information. It makes code like the following possible.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">DateTimeOffset targetTime;\n\n// The Kind property of sourceDate is DateTimeKind.Unspecified\nDateTime sourceDate = new DateTime(2008, 5, 1, 8, 30, 0);\ntargetTime = sourceDate;\nConsole.WriteLine(targetTime);   \n// Displays 5/1/2008 8:30:00 AM -07:00\n\n// define a UTC time (Kind property is DateTimeKind.Utc)\nDateTime utcTime = DateTime.SpecifyKind(sourceDate, DateTimeKind.Utc);\ntargetTime = utcTime;\nConsole.WriteLine(targetTime);   \n// Displays 5/1/2008 8:30:00 AM +00:00\n\n// Define a local time (Kind property is DateTimeKind.Local)\nDateTime localTime = DateTime.SpecifyKind(sourceDate, DateTimeKind.Local);\ntargetTime = localTime;\nConsole.WriteLine(targetTime);      \n// Displays 5/1/2008 8:30:00 AM -07:00\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim targetTime As DateTimeOffset\n\n&#39; The Kind property of sourceDate is DateTimeKind.Unspecified\nDim sourceDate As Date = #5/1/2008 8:30 AM#\ntargetTime = sourceDate\nConsole.WriteLine(targetTime)   \n&#39; Displays 5/1/2008 8:30:00 AM -07:00\n\n&#39; define a UTC time (Kind property is DateTimeKind.Utc)\nDim utcTime As Date = Date.SpecifyKind(sourceDate, DateTimeKind.Utc)\ntargetTime = utcTime\nConsole.WriteLine(targetTime)   \n&#39; Displays 5/1/2008 8:30:00 AM +00:00\n\n&#39; Define a local time (Kind property is DateTimeKind.Local)\nDim localTime As Date = Date.SpecifyKind(sourceDate, DateTimeKind.Local)\ntargetTime = localTime\nConsole.WriteLine(targetTime)      \n&#39; Displays 5/1/2008 8:30:00 AM -07:00\n</code></pre><p>The offset of the resulting <a class=\"xref\" href=\"../../../api/system.datetime#System_DateTime_Kind\" data-linktype=\"relative-path\">DateTimeOffset](xref:System.DateTimeOffset) value depends on the DateTime.Kind</a> property value. If its value is <a class=\"xref\" href=\"../../../api/system.datetimekind#System_DateTimeKind_Utc\" data-linktype=\"relative-path\">DateTimeKind.Utc</a>, the offset is set equal to <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_Zero\" data-linktype=\"relative-path\">TimeSpan.Zero</a>. If its value is either <a class=\"xref\" href=\"../../../api/system.datetimekind#System_DateTimeKind_Local\" data-linktype=\"relative-path\">DateTimeKind.Local</a> or <a class=\"xref\" href=\"../../../api/system.datetimekind#System_DateTimeKind_Unspecified\" data-linktype=\"relative-path\">DateTimeKind.Unspecified</a>, the offset is set equal to that of the local time zone.</p>\n<h2 id=\"parsing-the-string-representation-of-a-date-and-time\">Parsing the String Representation of a Date and Time</h2>\n<p>The <a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">System.DateTimeOffset</a> type supports four methods that allow you to convert the string representation of a date and time into a <a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> value:</p>\n<ul>\n<li><p><a class=\"xref\" href=\"../../../api/system.datetimeoffset#System_DateTimeOffset_Parse_System_String_\" data-linktype=\"relative-path\">Parse</a>, which tries to convert the string representation of a date and time to a <a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> value and throws an exception if the conversion fails.</p>\n</li>\n<li><p><a class=\"xref\" href=\"../../../api/system.datetimeoffset#System_DateTimeOffset_TryParse_System_String_System_DateTimeOffset__\" data-linktype=\"relative-path\">TryParse</a>, which tries to convert the string representation of a date and time to a <a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> value and returns <code>false</code> if the conversion fails.</p>\n</li>\n<li><p><a class=\"xref\" href=\"../../../api/system.datetimeoffset#System_DateTimeOffset_ParseExact_System_String_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">ParseExact</a>, which tries to convert the string representation of a date and time in a specified format to a <a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> value. The method throws an exception if the conversion fails.</p>\n</li>\n<li><p><a class=\"xref\" href=\"../../../api/system.datetimeoffset#System_DateTimeOffset_TryParseExact_System_String_System_String_System_IFormatProvider_System_Globalization_DateTimeStyles_System_DateTimeOffset__\" data-linktype=\"relative-path\">TryParseExact</a>, which tries to convert the string representation of a date and time in a specified format to a <a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> value. The method returns <code>false</code> if the conversion fails.</p>\n</li>\n</ul>\n<p>The following example illustrates calls to each of these four string conversion methods to instantiate a <a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> value.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">string timeString; \nDateTimeOffset targetTime;\n\ntimeString = &quot;05/01/2008 8:30 AM +01:00&quot;;\ntry\n{\n   targetTime = DateTimeOffset.Parse(timeString);\n   Console.WriteLine(targetTime);\n}\ncatch (FormatException)\n{\n   Console.WriteLine(&quot;Unable to parse {0}.&quot;, timeString);   \n}   \n\ntimeString = &quot;05/01/2008 8:30 AM&quot;;\nif (DateTimeOffset.TryParse(timeString, out targetTime))\n   Console.WriteLine(targetTime);\nelse\n   Console.WriteLine(&quot;Unable to parse {0}.&quot;, timeString);   \n\ntimeString = &quot;Thursday, 01 May 2008 08:30&quot;;\ntry\n{\n   targetTime = DateTimeOffset.ParseExact(timeString, &quot;f&quot;, \n                CultureInfo.InvariantCulture);\n   Console.WriteLine(targetTime);\n}\ncatch (FormatException)\n{\n   Console.WriteLine(&quot;Unable to parse {0}.&quot;, timeString);   \n}   \n\ntimeString = &quot;Thursday, 01 May 2008 08:30 +02:00&quot;;\nstring formatString; \nformatString = CultureInfo.InvariantCulture.DateTimeFormat.LongDatePattern +\n                &quot; &quot; +\n                CultureInfo.InvariantCulture.DateTimeFormat.ShortTimePattern +\n                &quot; zzz&quot;; \nif (DateTimeOffset.TryParseExact(timeString, \n                                formatString, \n                                CultureInfo.InvariantCulture, \n                                DateTimeStyles.AllowLeadingWhite, \n                                out targetTime))\n   Console.WriteLine(targetTime);\nelse\n   Console.WriteLine(&quot;Unable to parse {0}.&quot;, timeString);\n// The example displays the following output to the console:\n//    5/1/2008 8:30:00 AM +01:00\n//    5/1/2008 8:30:00 AM -07:00\n//    5/1/2008 8:30:00 AM -07:00\n//    5/1/2008 8:30:00 AM +02:00\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim timeString As String \nDim targetTime As DateTimeOffset\n\ntimeString = &quot;05/01/2008 8:30 AM +01:00&quot;\nTry\n   targetTime = DateTimeOffset.Parse(timeString)\n   Console.WriteLine(targetTime)\nCatch e As FormatException\n   Console.WriteLine(&quot;Unable to parse {0}.&quot;, timeString)   \nEnd Try   \n\ntimeString = &quot;05/01/2008 8:30 AM&quot;\nIf DateTimeOffset.TryParse(timeString, targetTime) Then\n   Console.WriteLine(targetTime)\nElse\n   Console.WriteLine(&quot;Unable to parse {0}.&quot;, timeString)   \nEnd If\n\ntimeString = &quot;Thursday, 01 May 2008 08:30&quot;\nTry\n   targetTime = DateTimeOffset.ParseExact(timeString, &quot;f&quot;, _\n                CultureInfo.InvariantCulture)\n   Console.WriteLine(targetTime)\nCatch e As FormatException\n   Console.WriteLine(&quot;Unable to parse {0}.&quot;, timeString)   \nEnd Try   \n\ntimeString = &quot;Thursday, 01 May 2008 08:30 +02:00&quot;\nDim formatString As String \nformatString = CultureInfo.InvariantCulture.DateTimeFormat.LongDatePattern &amp; _\n                &quot; &quot; &amp; _\n                CultureInfo.InvariantCulture.DateTimeFormat.ShortTimePattern &amp; _\n                &quot; zzz&quot; \nIf DateTimeOffset.TryParseExact(timeString, _\n                                formatString, _\n                                CultureInfo.InvariantCulture, _\n                                DateTimeStyles.AllowLeadingWhite, _\n                                targetTime) Then\n   Console.WriteLine(targetTime)\nElse\n   Console.WriteLine(&quot;Unable to parse {0}.&quot;, timeString)\nEnd If      \n&#39; The example displays the following output to the console:\n&#39;    5/1/2008 8:30:00 AM +01:00\n&#39;    5/1/2008 8:30:00 AM -07:00\n&#39;    5/1/2008 8:30:00 AM -07:00\n&#39;    5/1/2008 8:30:00 AM +02:00\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p><a href=\"index\" data-linktype=\"relative-path\">Dates, times, and time zones</a></p>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"ms.devlang\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"476fe67b-6be4-4435-88ab-ced37304f1d1\">\r\n<meta name=\"description\" content=\"Instantiating a DateTimeOffset object\">\r\n<meta name=\"keywords\" content=\".NET, .NET Core\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"08/15/2016\">\r\n<meta name=\"ms.technology\" content=\"dotnet-standard\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/standard/datetime/instantiating-a-datetimeoffset-object.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/standard/datetime/instantiating-a-datetimeoffset-object.md\">\r\n<meta name=\"document_id\" content=\"1f46dc93-4146-7401-78b1-201f8a90a542\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","uhfHeaderId":"MSDocsHeader-DotNet","title":"Instantiating a DateTimeOffset object | Microsoft Docs","ms.devlang":"dotnet","ms.assetid":"476fe67b-6be4-4435-88ab-ced37304f1d1","description":"Instantiating a DateTimeOffset object","keywords":".NET, .NET Core","ms.topic":"article","ms.date":"08/15/2016","ms.technology":"dotnet-standard","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Porting date and time topics from MSDN (#992)","commit_sha":"c40c28da09e8a122b542463c197196c82c81dd19","commit_date":"2016-09-06 10:55:51 -0700"},{"author_name":"Maira Wenzel","author_email":"mairaw@users.noreply.github.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Revert \"Bringing back essentials topics\" (#661)","commit_sha":"6d10e1507a2a8040743da29184fa4981ddbf7af3","commit_date":"2016-06-26 17:59:39 -0700"},{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Bringing back essentials topics (#659)","commit_sha":"5f3ebe05f34a44b449412c6334e47a9861b36c79","commit_date":"2016-06-26 17:27:32 -0700"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/standard/datetime/instantiating-a-datetimeoffset-object.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/standard/datetime/instantiating-a-datetimeoffset-object.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/standard/datetime/instantiating-a-datetimeoffset-object.md","document_id":"1f46dc93-4146-7401-78b1-201f8a90a542","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/standard/datetime/instantiating-a-datetimeoffset-object","toc_asset_id":"articles/toc.json","toc_rel":"../../toc.json","_op_ogTitle":"Instantiating a DateTimeOffset object","_op_displayDate":"2016-8-15","_op_displayDate_source":"2016-08-15T00:00:00Z","_op_wordCount":2509,"_op_rawTitle":"<h1 id=\"instantiating-a-datetimeoffset-object\" sourcefile=\"docs/standard/datetime/instantiating-a-datetimeoffset-object.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Instantiating a DateTimeOffset object</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/standard/datetime/instantiating-a-datetimeoffset-object","fileRelativePath":"articles/standard/datetime/instantiating-a-datetimeoffset-object.html"},"themesRelativePathToOutputRoot":"_themes/"}