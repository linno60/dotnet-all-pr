{"content":"<div><div class=\"content\">\n<p>The common language runtime&#39;s garbage collector reclaims the memory used by unmanaged objects, but types that use unmanaged resources implement the <a class=\"xref\" href=\"../../../api/system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface to allow this unmanaged memory to be reclaimed. When you finish using an object that implements <a class=\"xref\" href=\"../../../api/system.idisposable\" data-linktype=\"relative-path\">IDisposable</a>, you should call the object&#39;s <a class=\"xref\" href=\"../../../api/system.idisposable#System_IDisposable_Dispose\" data-linktype=\"relative-path\">IDisposable.Dispose</a> implementation. You can do this in one of two ways:</p>\n<ul>\n<li><p>With the C# <code>using</code> statement or the Visual Basic <code>Using</code> statement.</p>\n</li>\n<li><p>By implementing a <code>try/finally</code> block. </p>\n</li>\n</ul>\n<h2 id=\"the-using-statement\">The using statement</h2>\n<p>The <code>using</code> statement in C# and the <code>Using</code> statement in Visual Basic simplify the code that you must write to create and clean up an object. The <code>using</code> statement obtains one or more resources, executes the statements that you specify, and automatically disposes of the object. However, the <code>using</code> statement is useful only for objects that are used within the scope of the method in which they are constructed. </p>\n<p>The following example uses the <code>using</code> statement to create and release a <a class=\"xref\" href=\"../../../api/system.io.streamreader\" data-linktype=\"relative-path\">System.IO.StreamReader</a> object.</p>\n<pre class=\"loading\"><code class=\"lang-cs\">using System;\nusing System.IO;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Char[] buffer = new Char[50];\n      using (StreamReader s = new StreamReader(&quot;File1.txt&quot;)) {\n         int charsRead = 0;\n         while (s.Peek() != -1) {\n            charsRead = s.Read(buffer, 0, buffer.Length);\n            //\n            // Process characters read.\n            //   \n         }\n         s.Close();    \n      }\n\n   }\n}\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Imports System.IO\n\nModule Example\n   Public Sub Main()\n      Dim buffer(49) As Char\n      Using s As New StreamReader(&quot;File1.txt&quot;)\n         Dim charsRead As Integer\n         Do While s.Peek() &lt;&gt; -1\n            charsRead = s.Read(buffer, 0, buffer.Length)         \n            &#39; \n            &#39; Process characters read.\n            &#39;\n         Loop\n         s.Close()\n      End Using\n   End Sub\nEnd Module\n</code></pre><p>Note that although the <a class=\"xref\" href=\"../../../api/system.io.streamreader\" data-linktype=\"relative-path\">StreamReader</a> class implements the <a class=\"xref\" href=\"../../../api/system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface, which indicates that it uses an unmanaged resource, the example doesn&#39;t explicitly call the <a class=\"xref\" href=\"../../../api/system.io.streamreader#System_IO_StreamReader_Dispose_System_Boolean_\" data-linktype=\"relative-path\">StreamReader.Dispose</a> method. When the C# or Visual Basic compiler encounters the <code>using</code> statement, it emits intermediate language (IL) that is equivalent to the following code that explicitly contains a <code>try/finally</code> block. </p>\n<pre class=\"loading\"><code class=\"lang-cs\">using System;\nusing System.IO;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Char[] buffer = new Char[50];\n      {\n         StreamReader s = new StreamReader(&quot;File1.txt&quot;); \n         try {\n            int charsRead = 0;\n            while (s.Peek() != -1) {\n               charsRead = s.Read(buffer, 0, buffer.Length);\n               //\n               // Process characters read.\n               //   \n            }\n            s.Close();\n         }\n         finally {\n            if (s != null)\n               ((IDisposable)s).Dispose();     \n         }       \n      }\n   }\n}\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Imports System.IO\n\nModule Example\n   Public Sub Main()\n      Dim buffer(49) As Char\n&#39;&#39;      Dim s As New StreamReader(&quot;File1.txt&quot;)\nWith s As New StreamReader(&quot;File1.txt&quot;)\n      Try\n         Dim charsRead As Integer\n         Do While s.Peek() &lt;&gt; -1\n            charsRead = s.Read(buffer, 0, buffer.Length)         \n            &#39; \n            &#39; Process characters read.\n            &#39;\n         Loop\n         s.Close()\n      Finally\n         If s IsNot Nothing Then DirectCast(s, IDisposable).Dispose()\n      End Try\nEnd With\n   End Sub\nEnd Module\n</code></pre><p>The C# <code>using</code> statement also allows you to acquire multiple resources in a single statement, which is internally equivalent to nested using statements. The following example instantiates two <a class=\"xref\" href=\"../../../api/system.io.streamreader\" data-linktype=\"relative-path\">StreamReader</a> objects to read the contents of two different files. </p>\n<pre class=\"loading\"><code class=\"lang-cs\">using System;\nusing System.IO;\n\npublic class Example\n{\n   public static void Main()\n   {\n      Char[] buffer1 = new Char[50], buffer2 = new Char[50];\n\n      using (StreamReader version1 = new StreamReader(&quot;file1.txt&quot;),\n                          version2 = new StreamReader(&quot;file2.txt&quot;)) {\n         int charsRead1, charsRead2 = 0;\n         while (version1.Peek() != -1 &amp;&amp; version2.Peek() != -1) {\n            charsRead1 = version1.Read(buffer1, 0, buffer1.Length);\n            charsRead2 = version2.Read(buffer2, 0, buffer2.Length);\n            //\n            // Process characters read.\n            //\n         }\n         version1.Close();\n         version2.Close();\n      }\n   }\n}\n</code></pre><h2 id=\"tryfinally-block\">Try/finally block</h2>\n<p>Instead of wrapping a <code>try/finally</code> block in a <code>using</code> statement, you may choose to implement the <code>try/finally</code> block directly. This may be your personal coding style, or you might want to do this for one of the following reasons: </p>\n<ul>\n<li><p>To include a <code>catch</code> block to handle any exceptions thrown in the <code>try</code> block. Otherwise, any exceptions thrown by the <code>using</code> statement are unhandled, as are any exceptions thrown within the <code>using</code> block if a <code>try/catch</code> block isn&#39;t present. </p>\n</li>\n<li><p>To instantiate an object that implements <a class=\"xref\" href=\"../../../api/system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> whose scope is not local to the block within which it is declared. </p>\n</li>\n</ul>\n<p>The following example is similar to the previous example, except that it uses a <code>try/catch/finally</code> block to instantiate, use, and dispose of a <a class=\"xref\" href=\"../../../api/system.io.streamreader\" data-linktype=\"relative-path\">StreamReader</a> object, and to handle any exceptions thrown by the <a class=\"xref\" href=\"../../../api/system.io.streamreader\" data-linktype=\"relative-path\">StreamReader</a> constructor and its <a class=\"xref\" href=\"../../../api/system.io.streamreader#System_IO_StreamReader_ReadToEnd\" data-linktype=\"relative-path\">ReadToEnd</a> method. Note that the code in the <code>finally</code> block checks that the object that implements <a class=\"xref\" href=\"../../../api/system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> isn&#39;t <code>null</code> before it calls the <a class=\"xref\" href=\"../../../api/system.idisposable#System_IDisposable_Dispose\" data-linktype=\"relative-path\">Dispose</a> method. Failure to do this can result in a <a class=\"xref\" href=\"../../../api/system.nullreferenceexception\" data-linktype=\"relative-path\">NullReferenceException</a> exception at run time. </p>\n<pre class=\"loading\"><code class=\"lang-cs\">using System;\nusing System.Globalization;\nusing System.IO;\n\npublic class Example\n{\n   public static void Main()\n   {\n      StreamReader sr = null;\n      try {\n         sr = new StreamReader(&quot;file1.txt&quot;);\n         String contents = sr.ReadToEnd();\n         sr.Close();\n         Console.WriteLine(&quot;The file has {0} text elements.&quot;, \n                           new StringInfo(contents).LengthInTextElements);    \n      }      \n      catch (FileNotFoundException) {\n         Console.WriteLine(&quot;The file cannot be found.&quot;);\n      }   \n      catch (IOException) {\n         Console.WriteLine(&quot;An I/O error has occurred.&quot;);\n      }\n      catch (OutOfMemoryException) {\n         Console.WriteLine(&quot;There is insufficient memory to read the file.&quot;);   \n      }\n      finally {\n         if (sr != null) sr.Dispose();     \n      }\n   }\n}\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Imports System.Globalization\nImports System.IO\n\nModule Example\n   Public Sub Main()\n      Dim sr As StreamReader = Nothing\n      Try \n         sr = New StreamReader(&quot;file1.txt&quot;)\n         Dim contents As String = sr.ReadToEnd()\n         sr.Close()\n         Console.WriteLine(&quot;The file has {0} text elements.&quot;, \n                           New StringInfo(contents).LengthInTextElements)    \n      Catch e As FileNotFoundException\n         Console.WriteLine(&quot;The file cannot be found.&quot;)\n      Catch e As IOException\n         Console.WriteLine(&quot;An I/O error has occurred.&quot;)\n      Catch e As OutOfMemoryException\n         Console.WriteLine(&quot;There is insufficient memory to read the file.&quot;)   \n      Finally \n         If sr IsNot Nothing Then sr.Dispose()     \n      End Try\n   End Sub\nEnd Module\n</code></pre><p>You can follow this basic pattern if you choose to implement or must implement a <code>try/finally</code> block, because your programming language doesn&#39;t support a <code>using</code> statement but does allow direct calls to the <a class=\"xref\" href=\"../../../api/system.idisposable#System_IDisposable_Dispose\" data-linktype=\"relative-path\">Dispose</a> method. </p>\n<h2 id=\"see-also\">See Also</h2>\n<p><a href=\"unmanaged\" data-linktype=\"relative-path\">Cleaning up unmanaged resources</a></p>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"df780a6e-734e-44b8-9747-9f7783f79e20\">\r\n<meta name=\"description\" content=\"Using objects that implement IDisposable\">\r\n<meta name=\"keywords\" content=\".NET, .NET Core\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"08/19/2016\">\r\n<meta name=\"ms.technology\" content=\"dotnet-standard\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/standard/garbagecollection/using-objects.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/standard/garbagecollection/using-objects.md\">\r\n<meta name=\"document_id\" content=\"44123673-3f49-d691-6de8-49d24ab915c1\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Using objects that implement IDisposable | Microsoft Docs","ms.devlang":"dotnet","ms.assetid":"df780a6e-734e-44b8-9747-9f7783f79e20","description":"Using objects that implement IDisposable","keywords":".NET, .NET Core","ms.topic":"article","ms.date":"08/19/2016","ms.technology":"dotnet-standard","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"fix broken uid links (#985)","commit_sha":"213ce098bcc2b5e31c55e759d895254d5ca33caa","commit_date":"2016-08-30 16:18:59 -0700"},{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Porting from MSDN (#975)","commit_sha":"bb50b160a685d494ba47b3ca583f6fc35fa3ef3e","commit_date":"2016-08-29 12:51:05 -0700"},{"author_name":"Maira Wenzel","author_email":"mairaw@users.noreply.github.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Revert \"Bringing back essentials topics\" (#661)","commit_sha":"6d10e1507a2a8040743da29184fa4981ddbf7af3","commit_date":"2016-06-26 17:59:39 -0700"},{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Bringing back essentials topics (#659)","commit_sha":"5f3ebe05f34a44b449412c6334e47a9861b36c79","commit_date":"2016-06-26 17:27:32 -0700"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/standard/garbagecollection/using-objects.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/standard/garbagecollection/using-objects.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/standard/garbagecollection/using-objects.md","document_id":"44123673-3f49-d691-6de8-49d24ab915c1","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/standard/garbagecollection/using-objects","toc_asset_id":"articles/toc.json","toc_rel":"../../toc.json","_op_ogTitle":"Using objects that implement IDisposable","_op_displayDate":"2016-8-19","_op_displayDate_source":"2016-08-19T00:00:00Z","_op_wordCount":908,"_op_rawTitle":"<h1 id=\"using-objects-that-implement-idisposable\" sourcefile=\"docs/standard/garbagecollection/using-objects.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Using objects that implement IDisposable</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/standard/garbagecollection/using-objects","fileRelativePath":"articles/standard/garbagecollection/using-objects.html"},"themesRelativePathToOutputRoot":"_themes/"}