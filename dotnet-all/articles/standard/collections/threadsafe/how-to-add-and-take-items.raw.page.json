{"content":"<div><div class=\"content\">\n<p>This example shows how to add and remove items from a <a href=\"https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.BlockingCollection-1\" data-linktype=\"external\">BlockingCollection&lt;T&gt;</a> in both a blocking and non-blocking manner. For more information on <code>BlockingCollection&lt;T&gt;</code>, see <a href=\"blockingcollection-overview\" data-linktype=\"relative-path\">BlockingCollection Overview</a>. </p>\n<p>For an example of how to enumerate a <code>BlockingCollection&lt;T&gt;</code> until it is empty and no more elements will be added, see <a href=\"how-to-use-foreach-to-remove\" data-linktype=\"relative-path\">How to: Use ForEach to Remove Items in a BlockingCollection</a>.</p>\n<h2 id=\"example\">Example</h2>\n<pre class=\"loading\"><code class=\"lang-csharp\">using System;\nusing System.Collections.Concurrent;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass Program\n{\n   static void Main()\n   {\n      // Increase or decrease this value as desired.\n      int itemsToAdd = 500;\n\n      // Preserve all the display output for Adds and Takes\n      Console.SetBufferSize(80, (itemsToAdd * 2) + 3);\n\n      // A bounded collection. Increase, decrease, or remove the\n      // maximum capacity argument to see how it impacts behavior.\n      BlockingCollection&lt;int&gt; numbers = new BlockingCollection&lt;int&gt;(50);\n\n\n      // A simple blocking consumer with no cancellation.\n      Task.Run(() =&gt;\n      {\n          int i = -1;\n          while (!numbers.IsCompleted)\n          {\n              try\n              {\n                  i = numbers.Take();\n              }\n              catch (InvalidOperationException)\n              {\n                  Console.WriteLine(&quot;Adding was completed!&quot;);\n                  break;\n              }\n              Console.WriteLine(&quot;Take:{0} &quot;, i);\n\n              // Simulate a slow consumer. This will cause\n              // collection to fill up fast and thus Adds will block.\n              Thread.SpinWait(100000);\n          }\n\n          Console.WriteLine(&quot;\\r\\nNo more items to take. Press the Enter key to exit.&quot;);\n      });\n\n      // A simple blocking producer with no cancellation.\n      Task.Run(() =&gt;\n      {\n          for (int i = 0; i &lt; itemsToAdd; i++) {\n              numbers.Add(i);\n              Console.WriteLine(&quot;Add:{0} Count={1}&quot;, i, numbers.Count);\n          }\n\n          // See documentation for this method.\n          numbers.CompleteAdding();\n      });\n\n      // Keep the console display open in debug mode.\n      Console.ReadLine();\n   }\n}\n</code></pre><h2 id=\"example-1\">Example</h2>\n<p>This second example shows how to add and take items so that the operations will not block. If no item is present, or maximum capacity on a bounded collection has been reached, or the timeout period has elapsed, then the <code>TryAdd</code> or <code>TryTake</code> operation returns false. This allows the thread to do some other useful work for awhile and then try again later to either retrieve a new item, or try to add the same item that could not be added previously. The program also demonstrates how to implement cancellation when accessing a <code>BlockingCollection&lt;T&gt;</code>.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">using System;\nusing System.Collections.Concurrent;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass ProgramWithCancellation\n{\n\n    static int inputs = 2000;\n\n    static void Main()\n    {\n        // The token source for issuing the cancelation request.\n        CancellationTokenSource cts = new CancellationTokenSource();\n\n        // A blocking collection that can hold no more than 100 items at a time.\n        BlockingCollection&lt;int&gt; numberCollection = new BlockingCollection&lt;int&gt;(100);\n\n        // Set console buffer to hold our prodigious output.\n        Console.SetBufferSize(80, 2000);\n\n        // The simplest UI thread ever invented.\n        Task.Run(() =&gt;\n        {\n            if (Console.ReadKey(true).KeyChar == &#39;c&#39;)\n                cts.Cancel();\n        });\n\n        // Start one producer and one consumer.\n        Task t1 = Task.Run(() =&gt; NonBlockingConsumer(numberCollection, cts.Token));\n        Task t2 = Task.Run(() =&gt; NonBlockingProducer(numberCollection, cts.Token));\n\n        // Wait for the tasks to complete execution\n        Task.WaitAll(t1, t2);\n\n        cts.Dispose();\n        Console.WriteLine(&quot;Press the Enter key to exit.&quot;);\n        Console.ReadLine();\n    }\n\n    static void NonBlockingConsumer(BlockingCollection&lt;int&gt; bc, CancellationToken ct)\n    {\n        while (!bc.IsCompleted)\n        {\n            int nextItem = 0;\n            try\n            {\n                if (!bc.TryTake(out nextItem, 0, ct))\n                {\n                    Console.WriteLine(&quot; Take Blocked&quot;);\n                }\n                else\n                {\n                    Console.WriteLine(&quot; Take:{0}&quot;, nextItem);\n                }\n            }\n\n            catch (OperationCanceledException)\n            {\n                Console.WriteLine(&quot;Taking canceled.&quot;);\n                break;\n            }\n\n            // Slow down consumer just a little to cause\n            // collection to fill up faster, and lead to &quot;AddBlocked&quot;\n            Thread.SpinWait(500000);\n        }\n\n        Console.WriteLine(&quot;\\r\\nNo more items to take.&quot;);\n    }\n\n    static void NonBlockingProducer(BlockingCollection&lt;int&gt; bc, CancellationToken ct)\n    {\n        int itemToAdd = 0;\n        bool success = false;\n\n        do\n        {\n            // Cancellation causes OCE. We know how to handle it.\n            try\n            {\n                // A shorter timeout causes more failures.\n                success = bc.TryAdd(itemToAdd, 2, ct);\n            }\n            catch (OperationCanceledException)\n            {\n                Console.WriteLine(&quot;Add loop canceled.&quot;);\n                // Let other threads know we&#39;re done in case\n                // they aren&#39;t monitoring the cancellation token.\n                bc.CompleteAdding();\n                break;\n            }\n\n            if (success)\n            {\n                Console.WriteLine(&quot; Add:{0}&quot;, itemToAdd);\n                itemToAdd++;\n            }\n            else\n            {\n                Console.Write(&quot; AddBlocked:{0} Count = {1}&quot;, itemToAdd.ToString(), bc.Count);\n                // Don&#39;t increment nextItem. Try again on next iteration.\n\n                //Do something else useful instead.\n                UpdateProgress(itemToAdd);\n            }\n\n        } while (itemToAdd &lt; inputs);\n\n        // No lock required here because only one producer.\n        bc.CompleteAdding();\n    }\n\n    static void UpdateProgress(int i)\n    {\n        double percent = ((double)i / inputs) * 100;\n        Console.WriteLine(&quot;Percent complete: {0}&quot;, percent);\n    }\n}\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p><a href=\"https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent\" data-linktype=\"external\">System.Collections.Concurrent</a></p>\n<p><a href=\"blockingcollection-overview\" data-linktype=\"relative-path\">BlockingCollection Overview</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"mairaw\">\r\n<meta name=\"ms.author\" content=\"mairaw\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet/toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"2b9d39ab-0993-4453-b021-b04870098bf7\">\r\n<meta name=\"description\" content=\"How to: Add and Take Items Individually from a BlockingCollection\">\r\n<meta name=\"keywords\" content=\".NET, .NET Core\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"06/20/2016\">\r\n<meta name=\"ms.technology\" content=\"dotnet-standard\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/standard/collections/threadsafe/how-to-add-and-take-items.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/standard/collections/threadsafe/how-to-add-and-take-items.md\">\r\n<meta name=\"document_id\" content=\"f7de9fc1-0cc5-7259-b1db-496a72920a5d\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../../toc2.json\">\r\n","rawMetadata":{"author":"mairaw","ms.author":"mairaw","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"How to: Add and Take Items Individually from a BlockingCollection | Microsoft Docs","ms.devlang":"dotnet","ms.assetid":"2b9d39ab-0993-4453-b021-b04870098bf7","description":"How to: Add and Take Items Individually from a BlockingCollection","keywords":".NET, .NET Core","ms.topic":"article","ms.date":"06/20/2016","ms.technology":"dotnet-standard","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"},{"author_name":"Duncan Mackenzie","author_email":"duncanma@microsoft.com","committer_name":"Maira Wenzel","comitter_email":"mairaw@microsoft.com","message":"Removing colons from the metadata as a test (#748)","commit_sha":"c15f2da15c6448cf1c36dea2d5fd53e734bb6608","commit_date":"2016-07-07 23:26:06 -0700"},{"author_name":"Maira Wenzel","author_email":"mairaw@users.noreply.github.com","committer_name":"Rich Lander","comitter_email":"rlander@microsoft.com","message":"fixed generic links (#658)","commit_sha":"e07788926a995b41571be276379ad9285747951d","commit_date":"2016-06-26 16:20:19 -0700"},{"author_name":"Tom Dykstra","author_email":"tdykstra@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"move files for standard section of toc (#615)","commit_sha":"9cf6022fc910bc5418c03c0fa81d9432d85be3b0","commit_date":"2016-06-24 14:14:05 -0700"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"},"contributors":[{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel"},{"profile_url":"https://github.com/DuncanmaMSFT","display_name":"Duncan Mackenzie","id":"18338424"},{"profile_url":"https://github.com/tdykstra","display_name":"Tom Dykstra","id":"1569635"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/standard/collections/threadsafe/how-to-add-and-take-items.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/standard/collections/threadsafe/how-to-add-and-take-items.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/standard/collections/threadsafe/how-to-add-and-take-items.md","document_id":"f7de9fc1-0cc5-7259-b1db-496a72920a5d","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/standard/collections/threadsafe/how-to-add-and-take-items","toc_asset_id":"articles/toc.json","toc_rel":"../../../toc.json","_op_ogTitle":"How to: Add and Take Items Individually from a BlockingCollection","_op_displayDate":"2016-6-20","_op_displayDate_source":"2016-06-20T00:00:00Z","_op_wordCount":664,"_op_rawTitle":"<h1 id=\"how-to-add-and-take-items-individually-from-a-blockingcollection\" sourcefile=\"docs/standard/collections/threadsafe/how-to-add-and-take-items.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">How to: Add and Take Items Individually from a BlockingCollection</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/standard/collections/threadsafe/how-to-add-and-take-items","fileRelativePath":"articles/standard/collections/threadsafe/how-to-add-and-take-items.html"},"themesRelativePathToOutputRoot":"_themes/"}