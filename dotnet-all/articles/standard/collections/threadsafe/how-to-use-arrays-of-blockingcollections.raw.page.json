{"content":"<div><div class=\"content\">\n<p>The following example shows how to use arrays of <a href=\"https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.BlockingCollection-1\" data-linktype=\"external\">System.Collections.Concurrent.BlockingCollection&lt;T&gt;</a> objects with static methods such as <code>TryAddToAny</code> and <code>TryTakeFromAny</code> to implement fast and flexible data transfer between components. </p>\n<h2 id=\"example\">Example</h2>\n<p>The following example demonstrates a basic pipeline implementation in which each object is concurrently taking data from the input collection, transforming it, and passing it to the output collection.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">using System;\nusing System.Collections.Concurrent;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\n\n\nclass PipeLineDemo\n{\n   public static void Main()\n   {\n      CancellationTokenSource cts = new CancellationTokenSource();\n\n      // Start up a UI thread for cancellation.\n      Task.Run(() =&gt;\n          {\n              if(Console.ReadKey(true).KeyChar == &#39;c&#39;)\n              {\n                  cts.Cancel();\n              }  \n          });\n\n      //Generate some source data.\n      BlockingCollection&lt;int&gt;[] sourceArrays = new BlockingCollection&lt;int&gt;[5];\n      for(int i = 0; i &lt; sourceArrays.Length; i++)\n          sourceArrays[i] = new BlockingCollection&lt;int&gt;(500);\n      Parallel.For(0, sourceArrays.Length * 500, (j) =&gt;\n                          {\n                              int k = BlockingCollection&lt;int&gt;.TryAddToAny(sourceArrays, j);\n                              if(k &gt;=0)\n                                  Console.WriteLine(&quot;added {0} to source data&quot;, j);\n                          });\n\n      foreach (var arr in sourceArrays)\n          arr.CompleteAdding();\n\n      // First filter accepts the ints, keeps back a small percentage\n      // as a processing fee, and converts the results to decimals.\n      var filter1 = new PipelineFilter&lt;int, decimal&gt;\n      (\n          sourceArrays,\n          (n) =&gt; Convert.ToDecimal(n * 0.97),\n          cts.Token,\n          &quot;filter1&quot;\n       );\n\n      // Second filter accepts the decimals and converts them to\n      // System.Strings.\n      var filter2 = new PipelineFilter&lt;decimal, string&gt;\n      (\n          filter1.m_output,\n          (s) =&gt; String.Format(&quot;{0}&quot;, s),\n          cts.Token,\n          &quot;filter2&quot;\n       );\n\n      // Third filter uses the constructor with an Action&lt;T&gt;\n      // that renders its output to the screen,\n      // not a blocking collection.\n      var filter3 = new PipelineFilter&lt;string, string&gt;\n      (\n          filter2.m_output,\n          (s) =&gt; Console.WriteLine(&quot;The final result is {0}&quot;, s),\n          cts.Token,\n          &quot;filter3&quot;\n       );\n\n       // Start up the pipeline!\n      try\n      {\n          Parallel.Invoke(\n                       () =&gt; filter1.Run(),\n                       () =&gt; filter2.Run(),\n                       () =&gt; filter3.Run()\n                   );\n      }\n      catch (AggregateException ae) \n      {\n          foreach(var ex in ae.InnerExceptions)\n              Console.WriteLine(ex.Message + ex.StackTrace);\n      }\n      finally \n      {\n         cts.Dispose();\n      }\n      // You will need to press twice if you ran to the end:\n      // once for the cancellation thread, and once for this thread.\n      Console.WriteLine(&quot;Press any key.&quot;);\n      Console.ReadKey(true);\n  }\n\n   class PipelineFilter&lt;TInput, TOutput&gt;\n   {\n      Func&lt;TInput, TOutput&gt; m_processor = null;\n      public BlockingCollection&lt;TInput&gt;[] m_input;\n      public BlockingCollection&lt;TOutput&gt;[] m_output = null;\n      Action&lt;TInput&gt; m_outputProcessor = null;\n      CancellationToken m_token;\n      public string Name { get; private set; }\n\n      public PipelineFilter(\n          BlockingCollection&lt;TInput&gt;[] input,\n          Func&lt;TInput, TOutput&gt; processor,\n          CancellationToken token,\n          string name)\n          {\n              m_input = input;\n              m_output = new BlockingCollection&lt;TOutput&gt;[5];\n              for (int i = 0; i &lt; m_output.Length; i++)\n              {\n                    m_output[i] = new BlockingCollection&lt;TOutput&gt;(500);\n              }      \n              m_processor = processor;\n              m_token = token;\n              Name = name;\n            }\n\n      // Use this constructor for the final endpoint, which does\n      // something like write to file or screen, instead of\n      // pushing to another pipeline filter.\n      public PipelineFilter(\n          BlockingCollection&lt;TInput&gt;[] input,\n          Action&lt;TInput&gt; renderer,\n          CancellationToken token,\n          string name)\n          {\n              m_input = input;\n              m_outputProcessor = renderer;\n              m_token = token;\n              Name = name;\n          }\n\n      public void Run()\n      {\n          Console.WriteLine(&quot;{0} is running&quot;, this.Name);\n          while (!m_input.All(bc =&gt; bc.IsCompleted) &amp;&amp; !m_token.IsCancellationRequested)\n          {\n              TInput receivedItem;\n              int i = BlockingCollection&lt;TInput&gt;.TryTakeFromAny(\n                  m_input, out receivedItem, 50, m_token);\n              if ( i &gt;= 0)\n              {\n                  if (m_output != null) // we pass data to another blocking collection\n                  {\n                      TOutput outputItem = m_processor(receivedItem);\n                      BlockingCollection&lt;TOutput&gt;.AddToAny(m_output, outputItem);\n                      Console.WriteLine(&quot;{0} sent {1} to next&quot;, this.Name, outputItem);\n                  }\n                  else // we&#39;re an endpoint\n                  {\n                      m_outputProcessor(receivedItem);\n                  }\n              }\n              else\n              {\n                  Console.WriteLine(&quot;Unable to retrieve data from previous filter&quot;);\n              }\n          }\n          if (m_output != null)\n          {\n              foreach (var bc in m_output) bc.CompleteAdding();\n          }\n      }\n   }\n}\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p><a href=\"https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent\" data-linktype=\"external\">System.Collections.Concurrent</a></p>\n<p><a href=\"index\" data-linktype=\"relative-path\">Thread-Safe Collections</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"mairaw\">\r\n<meta name=\"ms.author\" content=\"mairaw\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"278a6566-09ba-4022-8802-e160e75b86af\">\r\n<meta name=\"description\" content=\"How to: Use Arrays of Blocking Collections in a Pipeline\">\r\n<meta name=\"keywords\" content=\".NET, .NET Core\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"06/20/2016\">\r\n<meta name=\"ms.technology\" content=\"dotnet-standard\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-21 01:42 AM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/standard/collections/threadsafe/how-to-use-arrays-of-blockingcollections.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/standard/collections/threadsafe/how-to-use-arrays-of-blockingcollections.md\">\r\n<meta name=\"document_id\" content=\"f04b7be6-5fe7-e412-200d-390b98950890\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../../toc2.json\">\r\n","rawMetadata":{"author":"mairaw","ms.author":"mairaw","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"How to: Use Arrays of Blocking Collections in a Pipeline | Microsoft Docs","ms.devlang":"dotnet","ms.assetid":"278a6566-09ba-4022-8802-e160e75b86af","description":"How to: Use Arrays of Blocking Collections in a Pipeline","keywords":".NET, .NET Core","ms.topic":"article","ms.date":"06/20/2016","ms.technology":"dotnet-standard","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Duncan Mackenzie","author_email":"duncanma@microsoft.com","committer_name":"Maira Wenzel","comitter_email":"mairaw@microsoft.com","message":"Removing colons from the metadata as a test (#748)","commit_sha":"c15f2da15c6448cf1c36dea2d5fd53e734bb6608","commit_date":"2016-07-07 23:26:06 -0700"},{"author_name":"Maira Wenzel","author_email":"mairaw@users.noreply.github.com","committer_name":"Rich Lander","comitter_email":"rlander@microsoft.com","message":"fixed generic links (#658)","commit_sha":"e07788926a995b41571be276379ad9285747951d","commit_date":"2016-06-26 16:20:19 -0700"},{"author_name":"Tom Dykstra","author_email":"tdykstra@microsoft.com","committer_name":"Rich Lander","comitter_email":"rlander@microsoft.com","message":"make index.md for collections and threadsafe folders (#635)","commit_sha":"2229d5a150d7d262b2ea42d0b15d7be0e152de47","commit_date":"2016-06-25 13:37:11 -0700"},{"author_name":"Tom Dykstra","author_email":"tdykstra@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"move files for standard section of toc (#615)","commit_sha":"9cf6022fc910bc5418c03c0fa81d9432d85be3b0","commit_date":"2016-06-24 14:14:05 -0700"}],"updated_at":"2017-03-21 01:42 AM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"},"contributors":[{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel"},{"profile_url":"https://github.com/DuncanmaMSFT","display_name":"Duncan Mackenzie","id":"18338424"},{"profile_url":"https://github.com/tdykstra","display_name":"Tom Dykstra","id":"1569635"}],"update_at":"3/21/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/standard/collections/threadsafe/how-to-use-arrays-of-blockingcollections.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/standard/collections/threadsafe/how-to-use-arrays-of-blockingcollections.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/standard/collections/threadsafe/how-to-use-arrays-of-blockingcollections.md","document_id":"f04b7be6-5fe7-e412-200d-390b98950890","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/standard/collections/threadsafe/how-to-use-arrays-of-blockingcollections","toc_asset_id":"articles/toc.json","toc_rel":"../../../toc.json","_op_ogTitle":"How to: Use Arrays of Blocking Collections in a Pipeline","_op_displayDate":"2016-6-20","_op_displayDate_source":"2016-06-20T00:00:00Z","_op_wordCount":530,"_op_rawTitle":"<h1 id=\"how-to-use-arrays-of-blocking-collections-in-a-pipeline\" sourcefile=\"docs/standard/collections/threadsafe/how-to-use-arrays-of-blockingcollections.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">How to: Use Arrays of Blocking Collections in a Pipeline</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/standard/collections/threadsafe/how-to-use-arrays-of-blockingcollections","fileRelativePath":"articles/standard/collections/threadsafe/how-to-use-arrays-of-blockingcollections.html"},"themesRelativePathToOutputRoot":"_themes/"}