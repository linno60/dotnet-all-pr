{"content":"<div><div class=\"content\">\n<p>You can add leading zeros to an integer by using the &quot;D&quot; <a href=\"standard-numeric\" data-linktype=\"relative-path\">standard numeric format string</a> with a precision specifier. You can add leading zeros to both integer and floating-point numbers by using a <a href=\"custom-numeric\" data-linktype=\"relative-path\">custom numeric format string</a>. This topic shows how to use both methods to pad a number with leading zeros.</p>\n<h2 id=\"to-pad-an-integer-with-leading-zeros-to-a-specific-length\">To pad an integer with leading zeros to a specific length</h2>\n<ol>\n<li><p>Determine the minimum number of digits you want the integer value to display. Include any leading digits in this number.</p>\n</li>\n<li><p>Determine whether you want to display the integer as a decimal value or a hexadecimal value.</p>\n<ul>\n<li><p>To display the integer as a decimal value, call its <code>ToString(String)</code> method, and pass the string &quot;D<em>n</em>&quot; as the value of the format parameter, where <em>n</em> represents the minimum length of the string.</p>\n</li>\n<li><p>To display the integer as a hexadecimal value, call its <code>ToString(String)</code> method and pass the string &quot;X<em>n</em>&quot; as the value of the format parameter, where <em>n</em> represents the minimum length of the string.</p>\n</li>\n</ul>\n<p>You can also use the format string in a method, such as <a class=\"xref\" href=\"../../../api/system.console#System_Console_WriteLine\" data-linktype=\"relative-path\">Console.WriteLine</a> or <a href=\"xref:System.String.Format(System.IFormatProvider,System.String,System.Object)\" data-linktype=\"external\">String.Format</a>, that uses <a href=\"composite-format\" data-linktype=\"relative-path\">composite formatting</a>.  </p>\n</li>\n</ol>\n<p>The following example formats several integer values with leading zeros so that the total length of the formatted number is at least eight characters.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">byte byteValue = 254;\nshort shortValue = 10342;\nint intValue = 1023983;\nlong lngValue = 6985321;               \nulong ulngValue = UInt64.MaxValue;\n\n// Display integer values by calling the ToString method.\nConsole.WriteLine(&quot;{0,22} {1,22}&quot;, byteValue.ToString(&quot;D8&quot;), byteValue.ToString(&quot;X8&quot;));\nConsole.WriteLine(&quot;{0,22} {1,22}&quot;, shortValue.ToString(&quot;D8&quot;), shortValue.ToString(&quot;X8&quot;));\nConsole.WriteLine(&quot;{0,22} {1,22}&quot;, intValue.ToString(&quot;D8&quot;), intValue.ToString(&quot;X8&quot;));\nConsole.WriteLine(&quot;{0,22} {1,22}&quot;, lngValue.ToString(&quot;D8&quot;), lngValue.ToString(&quot;X8&quot;));\nConsole.WriteLine(&quot;{0,22} {1,22}&quot;, ulngValue.ToString(&quot;D8&quot;), ulngValue.ToString(&quot;X8&quot;));\nConsole.WriteLine();\n\n// Display the same integer values by using composite formatting.\nConsole.WriteLine(&quot;{0,22:D8} {0,22:X8}&quot;, byteValue);\nConsole.WriteLine(&quot;{0,22:D8} {0,22:X8}&quot;, shortValue);\nConsole.WriteLine(&quot;{0,22:D8} {0,22:X8}&quot;, intValue);\nConsole.WriteLine(&quot;{0,22:D8} {0,22:X8}&quot;, lngValue);\nConsole.WriteLine(&quot;{0,22:D8} {0,22:X8}&quot;, ulngValue);\n// The example displays the following output:\n//                     00000254               000000FE\n//                     00010342               00002866\n//                     01023983               000F9FEF\n//                     06985321               006A9669\n//         18446744073709551615       FFFFFFFFFFFFFFFF\n//       \n//                     00000254               000000FE\n//                     00010342               00002866\n//                     01023983               000F9FEF\n//                     06985321               006A9669\n//         18446744073709551615       FFFFFFFFFFFFFFFF\n//         18446744073709551615       FFFFFFFFFFFFFFFF\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim byteValue As Byte = 254\nDim shortValue As Short = 10342\nDim intValue As Integer = 1023983\nDim lngValue As Long = 6985321               \nDim ulngValue As ULong = UInt64.MaxValue\n\n&#39; Display integer values by calling the ToString method.\nConsole.WriteLine(&quot;{0,22} {1,22}&quot;, byteValue.ToString(&quot;D8&quot;), byteValue.ToString(&quot;X8&quot;))\nConsole.WriteLine(&quot;{0,22} {1,22}&quot;, shortValue.ToString(&quot;D8&quot;), shortValue.ToString(&quot;X8&quot;))\nConsole.WriteLine(&quot;{0,22} {1,22}&quot;, intValue.ToString(&quot;D8&quot;), intValue.ToString(&quot;X8&quot;))\nConsole.WriteLine(&quot;{0,22} {1,22}&quot;, lngValue.ToString(&quot;D8&quot;), lngValue.ToString(&quot;X8&quot;))\nConsole.WriteLine(&quot;{0,22} {1,22}&quot;, ulngValue.ToString(&quot;D8&quot;), ulngValue.ToString(&quot;X8&quot;))\nConsole.WriteLine()\n\n&#39; Display the same integer values by using composite formatting.\nConsole.WriteLine(&quot;{0,22:D8} {0,22:X8}&quot;, byteValue)\nConsole.WriteLine(&quot;{0,22:D8} {0,22:X8}&quot;, shortValue)\nConsole.WriteLine(&quot;{0,22:D8} {0,22:X8}&quot;, intValue)\nConsole.WriteLine(&quot;{0,22:D8} {0,22:X8}&quot;, lngValue)\nConsole.WriteLine(&quot;{0,22:D8} {0,22:X8}&quot;, ulngValue)\n&#39; The example displays the following output:\n&#39;                     00000254               000000FE\n&#39;                     00010342               00002866\n&#39;                     01023983               000F9FEF\n&#39;                     06985321               006A9669\n&#39;         18446744073709551615       FFFFFFFFFFFFFFFF\n&#39;       \n&#39;                     00000254               000000FE\n&#39;                     00010342               00002866\n&#39;                     01023983               000F9FEF\n&#39;                     06985321               006A9669\n&#39;         18446744073709551615       FFFFFFFFFFFFFFFF\n</code></pre><h2 id=\"to-pad-an-integer-with-a-specific-number-of-leading-zeros\">To pad an integer with a specific number of leading zeros</h2>\n<ol>\n<li><p>Determine how many leading zeros you want the integer value to display.</p>\n</li>\n<li><p>Determine whether you want to display the integer as a decimal value or a hexadecimal value. Formatting it as a decimal value requires that you use the &quot;D&quot; standard format specifier; formatting it as a hexadecimal value requires that you use the &quot;X&quot; standard format specifier.</p>\n</li>\n<li><p>Determine the length of the unpadded numeric string by calling the integer value&#39;s <code>ToString(&quot;D&quot;).Length</code> or <code>ToString(&quot;X&quot;).Length</code> method. </p>\n</li>\n<li><p>Add the number of leading zeros that you want to include in the formatted string to the length of the unpadded numeric string. This defines the total length of the padded string.</p>\n</li>\n<li><p>Call the integer value&#39;s <code>ToString(String)</code> method, and pass the string &quot;D<em>n</em>&quot; for decimal strings and &quot;X<em>n</em>&quot; for hexadecimal strings, where <em>n</em> represents the total length of the padded string. You can also use the &quot;D<em>n</em>&quot; or &quot;X<em>n</em>&quot; format string in a method that supports composite formatting.</p>\n</li>\n</ol>\n<p>The following example pads an integer value with five leading zeros.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">int value = 160934;\nint decimalLength = value.ToString(&quot;D&quot;).Length + 5;\nint hexLength = value.ToString(&quot;X&quot;).Length + 5;\nConsole.WriteLine(value.ToString(&quot;D&quot; + decimalLength.ToString()));\nConsole.WriteLine(value.ToString(&quot;X&quot; + hexLength.ToString()));\n// The example displays the following output:\n//       00000160934\n//       00000274A6\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim value As Integer = 160934\nDim decimalLength As Integer = value.ToString(&quot;D&quot;).Length + 5\nDim hexLength As Integer = value.ToString(&quot;X&quot;).Length + 5\nConsole.WriteLine(value.ToString(&quot;D&quot; + decimalLength.ToString()))\nConsole.WriteLine(value.ToString(&quot;X&quot; + hexLength.ToString()))\n&#39; The example displays the following output:\n&#39;       00000160934\n&#39;       00000274A6 \n</code></pre><h2 id=\"to-pad-a-numeric-value-with-leading-zeros-to-a-specific-length\">To pad a numeric value with leading zeros to a specific length</h2>\n<ol>\n<li><p>Determine how many digits to the left of the decimal you want the string representation of the number to have. Include any leading zeros in this total number of digits.</p>\n</li>\n<li><p>Define a custom numeric format string that uses the zero placeholder (&quot;0&quot;) to represent the minimum number of zeros.</p>\n</li>\n<li><p>Call the number&#39;s <code>ToString(String)</code> method and pass it the custom format string. You can also use the custom format string with a method that supports composite formatting.</p>\n</li>\n</ol>\n<p>The following example formats several numeric values with leading zeros so that the total length of the formatted number is at least eight digits to the left of the decimal.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">string fmt = &quot;00000000.##&quot;;\nint intValue = 1053240;\ndecimal decValue = 103932.52m;\nfloat sngValue = 1549230.10873992f;\ndouble dblValue = 9034521202.93217412;\n\n// Display the numbers using the ToString method.\nConsole.WriteLine(intValue.ToString(fmt));\nConsole.WriteLine(decValue.ToString(fmt));           \nConsole.WriteLine(sngValue.ToString(fmt));\nConsole.WriteLine(dblValue.ToString(fmt));           \nConsole.WriteLine();\n\n// Display the numbers using composite formatting.\nstring formatString = &quot; {0,15:&quot; + fmt + &quot;}&quot;;\nConsole.WriteLine(formatString, intValue);      \nConsole.WriteLine(formatString, decValue);      \nConsole.WriteLine(formatString, sngValue);      \nConsole.WriteLine(formatString, dblValue);      \n// The example displays the following output:\n//       01053240\n//       00103932.52\n//       01549230\n//       9034521202.93\n//       \n//               01053240\n//            00103932.52\n//               01549230\n//          9034521202.93  \n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim fmt As String = &quot;00000000.##&quot;\nDim intValue As Integer = 1053240\nDim decValue As Decimal = 103932.52d\nDim sngValue As Single = 1549230.10873992\nDim dblValue As Double = 9034521202.93217412\n\n&#39; Display the numbers using the ToString method.\nConsole.WriteLine(intValue.ToString(fmt))\nConsole.WriteLine(decValue.ToString(fmt))            \nConsole.WriteLine(sngValue.ToString(fmt))\nConsole.WriteLine(dblValue.ToString(fmt))            \nConsole.WriteLine()\n\n&#39; Display the numbers using composite formatting.\nDim formatString As String = &quot; {0,15:&quot; + fmt + &quot;}&quot;\nConsole.WriteLine(formatString, intValue)      \nConsole.WriteLine(formatString, decValue)      \nConsole.WriteLine(formatString, sngValue)      \nConsole.WriteLine(formatString, dblValue)      \n&#39; The example displays the following output:\n&#39;       01053240\n&#39;       00103932.52\n&#39;       01549230\n&#39;       9034521202.93\n&#39;       \n&#39;               01053240\n&#39;            00103932.52\n&#39;               01549230\n&#39;          9034521202.93\n</code></pre><h2 id=\"to-pad-a-numeric-value-with-a-specific-number-of-leading-zeros\">To pad a numeric value with a specific number of leading zeros</h2>\n<ol>\n<li><p>Determine how many leading zeros you want the numeric value to have.</p>\n</li>\n<li><p>Determine the number of digits to the left of the decimal in the unpadded numeric string. To do this:</p>\n<p> a. Determine whether the string representation of a number includes a decimal point symbol.</p>\n<p> b. If it does include a decimal point symbol, determine the number of characters to the left of the decimal point.       </p>\n<p> -or-</p>\n<p> If it does not include a decimal point symbol, determine the string&#39;s length. </p>\n</li>\n<li><p>Create a custom format string that uses the zero placeholder (&quot;0&quot;) for each of the leading zeros to appear in the string, and that uses either the zero placeholder or the digit placeholder (&quot;#&quot;) to represent each digit in the default string. </p>\n</li>\n<li><p>Supply the custom format string as a parameter either to the number&#39;s ToString(String) method or to a method that supports composite formatting.</p>\n</li>\n</ol>\n<p>The following example pads two <a class=\"xref\" href=\"../../../api/system.double\" data-linktype=\"relative-path\">Double</a> values with five leading zeros.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">double[] dblValues = { 9034521202.93217412, 9034521202 };\nforeach (double dblValue in dblValues)\n{\n   string decSeparator = System.Globalization.NumberFormatInfo.CurrentInfo.NumberDecimalSeparator;\n   string fmt, formatString;\n\n   if (dblValue.ToString().Contains(decSeparator))\n   {\n      int digits = dblValue.ToString().IndexOf(decSeparator);\n      fmt = new String(&#39;0&#39;, 5) + new String(&#39;#&#39;, digits) + &quot;.##&quot;;\n   }\n   else\n   {\n      fmt = new String(&#39;0&#39;, dblValue.ToString().Length);   \n   }\n   formatString = &quot;{0,20:&quot; + fmt + &quot;}&quot;;\n\n   Console.WriteLine(dblValue.ToString(fmt));\n   Console.WriteLine(formatString, dblValue);\n}\n// The example displays the following output:\n//       000009034521202.93\n//         000009034521202.93\n//       9034521202\n//                 9034521202 \n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim dblValues() As Double = { 9034521202.93217412, 9034521202 }\nFor Each dblValue As Double In dblValues\n   Dim decSeparator As String = System.Globalization.NumberFormatInfo.CurrentInfo.NumberDecimalSeparator\n   Dim fmt, formatString As String\n\n   If dblValue.ToString.Contains(decSeparator) Then\n      Dim digits As Integer = dblValue.ToString().IndexOf(decSeparator)\n      fmt = New String(&quot;0&quot;c, 5) + New String(&quot;#&quot;c, digits) + &quot;.##&quot;\n   Else\n      fmt = New String(&quot;0&quot;c, dblValue.ToString.Length)   \n   End If\n   formatString = &quot;{0,20:&quot; + fmt + &quot;}&quot;\n\n   Console.WriteLine(dblValue.ToString(fmt))\n   Console.WriteLine(formatString, dblValue)\nNext\n&#39; The example displays the following output:\n&#39;       000009034521202.93\n&#39;         000009034521202.93\n&#39;       9034521202\n&#39;                 9034521202\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p><a href=\"standard-numeric\" data-linktype=\"relative-path\">Standard numeric format strings</a></p>\n<p><a href=\"custom-numeric\" data-linktype=\"relative-path\">Custom numeric format strings</a></p>\n<p><a href=\"composite-format\" data-linktype=\"relative-path\">Composite formatting</a></p>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc.json\">\r\n<meta name=\"ms.devlang\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"a517c066-b11e-4815-826b-9262611eac40\">\r\n<meta name=\"description\" content=\"How to pad a number with leading zeros\">\r\n<meta name=\"keywords\" content=\".NET, .NET Core\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"07/26/2016\">\r\n<meta name=\"ms.technology\" content=\"dotnet-standard\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-21 01:42 AM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/standard/base-types/pad-number.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/standard/base-types/pad-number.md\">\r\n<meta name=\"document_id\" content=\"9f1944d1-f49d-b94f-8f5b-eee875261ab0\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../toc.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"How to: pad a number with leading zeros | Microsoft Docs","ms.devlang":"dotnet","ms.assetid":"a517c066-b11e-4815-826b-9262611eac40","description":"How to pad a number with leading zeros","keywords":".NET, .NET Core","ms.topic":"article","ms.date":"07/26/2016","ms.technology":"dotnet-standard","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Porting base type docs take 4 (#1053)","commit_sha":"fb00da6505c9edb6a49d2003ae9bcb8e74c11d6c","commit_date":"2016-10-06 10:32:59 -0700"}],"updated_at":"2017-03-21 01:42 AM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/21/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/standard/base-types/pad-number.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/standard/base-types/pad-number.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/standard/base-types/pad-number.md","document_id":"9f1944d1-f49d-b94f-8f5b-eee875261ab0","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/standard/base-types/pad-number","toc_asset_id":"articles/toc.json","toc_rel":"../../toc.json","_op_ogTitle":"How to: pad a number with leading zeros","_op_displayDate":"2016-7-26","_op_displayDate_source":"2016-07-26T00:00:00Z","_op_wordCount":1326,"_op_rawTitle":"<h1 id=\"how-to-pad-a-number-with-leading-zeros\" sourcefile=\"docs/standard/base-types/pad-number.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">How to: pad a number with leading zeros</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/standard/base-types/pad-number","fileRelativePath":"articles/standard/base-types/pad-number.html"},"themesRelativePathToOutputRoot":"_themes/"}