{"content":"<div><div class=\"content\">\n<p>The following example uses some of the methods discussed in the <a href=\"basic-string-operations\" data-linktype=\"relative-path\">Basic string operations</a> topics to construct a class that performs string manipulations in a manner that might be found in a real-world application. The <code>MailToData</code> class stores the name and address of an individual in separate properties and provides a way to combine the <code>City</code>, <code>State</code>, and <code>Zip</code> fields into a single string for display to the user. Furthermore, the class allows the user to enter the city, state, and ZIP Code information as a single string; the application automatically parses the single string and enters the proper information into the corresponding property.</p>\n<p>For simplicity, this example uses a console application with a command-line interface.</p>\n<h2 id=\"example\">Example</h2>\n<pre class=\"loading\"><code class=\"lang-csharp\">using System;\n\nclass MainClass\n{\n   static void Main()\n   {\n      MailToData MyData = new MailToData();\n\n      Console.Write(&quot;Enter Your Name: &quot;);\n      MyData.Name = Console.ReadLine();\n      Console.Write(&quot;Enter Your Address: &quot;);\n      MyData.Address = Console.ReadLine();\n      Console.Write(&quot;Enter Your City, State, and ZIP Code separated by spaces: &quot;);\n      MyData.CityStateZip = Console.ReadLine();\n      Console.WriteLine();\n\n      if (MyData.Validated) {\n         Console.WriteLine(&quot;Name: {0}&quot;, MyData.Name);\n         Console.WriteLine(&quot;Address: {0}&quot;, MyData.Address);\n         Console.WriteLine(&quot;City: {0}&quot;, MyData.City);\n         Console.WriteLine(&quot;State: {0}&quot;, MyData.State);\n         Console.WriteLine(&quot;Zip: {0}&quot;, MyData.Zip);\n\n         Console.WriteLine(&quot;\\nThe following address will be used:&quot;);\n         Console.WriteLine(MyData.Address);\n         Console.WriteLine(MyData.CityStateZip);\n      }\n   }\n}\n\npublic class MailToData\n{\n   string name = &quot;&quot;;\n   string address = &quot;&quot;; \n   string citystatezip = &quot;&quot;;\n   string city = &quot;&quot;; \n   string state = &quot;&quot;; \n   string zip = &quot;&quot;;\n   bool parseSucceeded = false;\n\n   public string Name\n   {\n      get{return name;}\n      set{name = value;}\n   }\n\n   public string Address\n   {\n      get{return address;}\n      set{address = value;}\n   }\n\n   public string CityStateZip\n   {\n      get { \n         return String.Format(&quot;{0}, {1} {2}&quot;, city, state, zip); \n      }\n      set {\n         citystatezip = value.Trim();\n         ParseCityStateZip();\n      }\n   }\n\n   public string City\n   {\n      get{return city;}\n      set{city = value;}\n   }\n\n   public string State\n   {\n      get{return state;}\n      set{state = value;}\n   }\n\n   public string Zip\n   {\n      get{return zip;}\n      set{zip = value;}\n   }\n\n   public bool Validated\n   {\n      get { return parseSucceeded; }\n   }\n\n   private void ParseCityStateZip()\n   {  \n      string msg = &quot;&quot;;\n      const string msgEnd = &quot;\\nYou must enter spaces between city, state, and zip code.\\n&quot;;\n\n      // Throw a FormatException if the user did not enter the necessary spaces\n      // between elements. \n      try\n      {\n         // City may consist of multiple words, so we&#39;ll have to parse the \n         // string from right to left starting with the zip code.\n         int zipIndex = citystatezip.LastIndexOf(&quot; &quot;);\n         if (zipIndex == -1) { \n            msg = &quot;\\nCannot identify a zip code.&quot; + msgEnd;\n            throw new FormatException(msg);\n         }\n         zip = citystatezip.Substring(zipIndex + 1);        \n\n         int stateIndex = citystatezip.LastIndexOf(&quot; &quot;, zipIndex - 1);\n         if (stateIndex == -1) {  \n            msg = &quot;\\nCannot identify a state.&quot; + msgEnd;\n            throw new FormatException(msg);\n         }\n         state = citystatezip.Substring(stateIndex + 1, zipIndex - stateIndex - 1);        \n         state = state.ToUpper();\n\n         city = citystatezip.Substring(0, stateIndex);\n         if (city.Length == 0) {\n            msg = &quot;\\nCannot identify a city.&quot; + msgEnd;\n            throw new FormatException(msg);\n         }\n         parseSucceeded = true;\n      }\n      catch (FormatException ex)\n      {\n         Console.WriteLine(ex.Message);\n      } \n   }\n\n   private string ReturnCityStateZip()\n    {\n        // Make state uppercase.\n        state = state.ToUpper();\n\n        // Put the value of city, state, and zip together in the proper manner.\n        string MyCityStateZip = String.Concat(city, &quot;, &quot;, state, &quot; &quot;, zip);\n\n        return MyCityStateZip;\n    }\n}\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Class MainClass\n   Public Shared Sub Main()\n      Dim MyData As New MailToData()\n\n      Console.Write(&quot;Enter Your Name: &quot;)\n      MyData.Name = Console.ReadLine()\n      Console.Write(&quot;Enter Your Address: &quot;)\n      MyData.Address = Console.ReadLine()\n      Console.Write(&quot;Enter Your City, State, and ZIP Code separated by spaces: &quot;)\n      MyData.CityStateZip = Console.ReadLine()\n      Console.WriteLine()\n\n      If MyData.Validated Then\n         Console.WriteLine(&quot;Name: {0}&quot;, MyData.Name)\n         Console.WriteLine(&quot;Address: {0}&quot;, MyData.Address)\n         Console.WriteLine(&quot;City: {0}&quot;, MyData.City)\n         Console.WriteLine(&quot;State: {0}&quot;, MyData.State)\n         Console.WriteLine(&quot;ZIP Code: {0}&quot;, MyData.Zip)\n\n         Console.WriteLine(&quot;The following address will be used:&quot;)\n         Console.WriteLine(MyData.Address)\n         Console.WriteLine(MyData.CityStateZip)\n      End If\n   End Sub\nEnd Class\n\nPublic Class MailToData\n   Private strName As String = &quot;&quot;\n   Private strAddress As String = &quot;&quot;\n   Private strCityStateZip As String = &quot;&quot;\n   Private strCity As String = &quot;&quot;\n   Private strState As String = &quot;&quot;\n   Private strZip As String = &quot;&quot;\n   Private parseSucceeded As Boolean = False\n\n   Public Property Name() As String\n      Get\n         Return strName\n      End Get\n      Set\n         strName = value\n      End Set\n   End Property \n\n   Public Property Address() As String\n      Get\n         Return strAddress\n      End Get\n      Set\n         strAddress = value\n      End Set\n   End Property \n\n   Public Property CityStateZip() As String\n      Get\n         Return String.Format(&quot;{0}, {1} {2}&quot;, strCity, strState, strZip)\n      End Get\n      Set\n         strCityStateZip = value.Trim()\n         ParseCityStateZip()\n      End Set\n   End Property\n\n   Public Property City() As String\n      Get\n         Return strCity\n      End Get\n      Set\n         strCity = value\n      End Set\n   End Property \n\n   Public Property State() As String\n      Get\n         Return strState\n      End Get\n      Set\n         strState = value\n      End Set\n   End Property \n\n   Public Property Zip() As String\n      Get\n         Return strZip\n      End Get\n      Set\n         strZip = value\n      End Set\n   End Property\n\n   Public ReadOnly Property Validated As Boolean\n      Get\n         Return parseSucceeded \n      End Get\n   End Property \n\n   Private Sub ParseCityStateZip()\n      Dim msg As String = Nothing\n      Const msgEnd As String = vbCrLf + \n                               &quot;You must enter spaces between city, state, and zip code.&quot; +\n                               vbCrLf\n\n      &#39; Throw a FormatException if the user did not enter the necessary spaces\n      &#39; between elements. \n      Try\n         &#39; City may consist of multiple words, so we&#39;ll have to parse the \n         &#39; string from right to left starting with the zip code.\n         Dim zipIndex As Integer = strCityStateZip.LastIndexOf(&quot; &quot;)\n         If zipIndex = -1 Then \n            msg = vbCrLf + &quot;Cannot identify a zip code.&quot; + msgEnd\n            Throw New FormatException(msg)\n         End If\n         strZip = strCityStateZip.Substring(zipIndex + 1)        \n\n         Dim stateIndex As Integer = strCityStateZip.LastIndexOf(&quot; &quot;, zipIndex - 1)\n         If stateIndex = -1 Then  \n            msg = vbCrLf + &quot;Cannot identify a state.&quot; + msgEnd\n            Throw New FormatException(msg)\n         End If\n         strState = strCityStateZip.Substring(stateIndex + 1, zipIndex - stateIndex - 1)        \n         strState = strState.ToUpper()\n\n         strCity = strCityStateZip.Substring(0, stateIndex)\n         If strCity.Length = 0 Then\n            msg = vbCrLf + &quot;Cannot identify a city.&quot; + msgEnd\n            Throw New FormatException(msg)\n         End If\n         parseSucceeded = True\n      Catch ex As FormatException\n         Console.WriteLine(ex.Message)  \n      End Try\n   End Sub\nEnd Class\n</code></pre><p>When the preceding code is executed, the user is asked to enter his or her name and address. The application places the information in the appropriate properties and displays the information back to the user, creating a single string that displays the city, state, and ZIP Code information.</p>\n<h2 id=\"see-also\">See Also</h2>\n<p><a href=\"basic-string-operations\" data-linktype=\"relative-path\">Basic string operations</a></p>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"141d5c94-08db-469c-8a33-708c0d3bba42\">\r\n<meta name=\"description\" content=\"How to perform basic string manipulations\">\r\n<meta name=\"keywords\" content=\".NET, .NET Core\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"07/26/2016\">\r\n<meta name=\"ms.technology\" content=\"dotnet-standard\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/standard/base-types/basic-manipulations.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/standard/base-types/basic-manipulations.md\">\r\n<meta name=\"document_id\" content=\"2bc46d9b-a973-a879-7b92-a8ebc687ca30\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"How to: perform basic string manipulations | Microsoft Docs","ms.devlang":"dotnet","ms.assetid":"141d5c94-08db-469c-8a33-708c0d3bba42","description":"How to perform basic string manipulations","keywords":".NET, .NET Core","ms.topic":"article","ms.date":"07/26/2016","ms.technology":"dotnet-standard","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Porting base type docs take 4 (#1053)","commit_sha":"fb00da6505c9edb6a49d2003ae9bcb8e74c11d6c","commit_date":"2016-10-06 10:32:59 -0700"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/standard/base-types/basic-manipulations.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/standard/base-types/basic-manipulations.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/standard/base-types/basic-manipulations.md","document_id":"2bc46d9b-a973-a879-7b92-a8ebc687ca30","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/standard/base-types/basic-manipulations","toc_asset_id":"articles/toc.json","toc_rel":"../../toc.json","_op_ogTitle":"How to: perform basic string manipulations","_op_displayDate":"2016-7-26","_op_displayDate_source":"2016-07-26T00:00:00Z","_op_wordCount":985,"_op_rawTitle":"<h1 id=\"how-to-perform-basic-string-manipulations\" sourcefile=\"docs/standard/base-types/basic-manipulations.md\" sourcestartlinenumber=\"14\" sourceendlinenumber=\"14\">How to: perform basic string manipulations</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/standard/base-types/basic-manipulations","fileRelativePath":"articles/standard/base-types/basic-manipulations.html"},"themesRelativePathToOutputRoot":"_themes/"}