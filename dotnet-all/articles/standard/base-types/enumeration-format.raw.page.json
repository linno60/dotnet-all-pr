{"content":"<div><div class=\"content\">\n<p>You can use the <a class=\"xref\" href=\"../../../api/system.enum#System_Enum_ToString\" data-linktype=\"relative-path\">Enum.ToString</a> method to create a new string object that represents the numeric, hexadecimal, or string value of an enumeration member. This method takes one of the enumeration formatting strings to specify the value that you want returned.</p>\n<p>The following sections list the enumeration formatting strings and the values they return. These format specifiers are not case-sensitive.</p>\n<h2 id=\"the-g-or-g-format-strings\">The G or g Format Strings</h2>\n<p>The G or g format strings display the enumeration entry as a string value, if possible, and otherwise displays the integer value of the current instance. If the enumeration is defined with the <code>Flags</code> attribute set, the string values of each valid entry are concatenated together, separated by commas. If the <code>Flags</code> attribute is not set, an invalid value is displayed as a numeric entry. The following example illustrates the G format specifier.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">Console.WriteLine(ConsoleColor.Red.ToString(&quot;G&quot;));         // Displays Red\nFileAttributes attributes = FileAttributes.Hidden |\n                            FileAttributes.Archive;\nConsole.WriteLine(attributes.ToString(&quot;G&quot;));   // Displays Hidden, Archive\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Console.WriteLine(ConsoleColor.Red.ToString(&quot;G&quot;))           &#39; Displays Red\nDim attributes As FileAttributes = FileAttributes.Hidden Or _\n                                   FileAttributes.Archive\nConsole.WriteLine(attributes.ToString(&quot;G&quot;))     &#39; Displays Hidden, Archive\n</code></pre><h2 id=\"the-f-or-f-format-strings\">The F or f Format Strings</h2>\n<p>The F or f format strings display the enumeration entry as a string value, if possible. If the value can be completely displayed as a summation of the entries in the enumeration (even if the <code>Flags</code> attribute is not present), the string values of each valid entry are concatenated together, separated by commas. If the value cannot be completely determined by the enumeration entries, then the value is formatted as the integer value. The following example illustrates the F format specifier.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">Console.WriteLine(ConsoleColor.Blue.ToString(&quot;F&quot;));       // Displays Blue\nFileAttributes attributes = FileAttributes.Hidden | \n                            FileAttributes.Archive;\nConsole.WriteLine(attributes.ToString(&quot;F&quot;));   // Displays Hidden, Archive\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Console.WriteLine(ConsoleColor.Blue.ToString(&quot;F&quot;))         &#39; Displays Blue\nDim attributes As FileAttributes = FileAttributes.Hidden Or _\n                                   FileAttributes.Archive\nConsole.WriteLine(attributes.ToString(&quot;F&quot;))     &#39; Displays Hidden, Archive\n</code></pre><h2 id=\"the-d-or-d-format-strings\">The D or d Format Strings</h2>\n<p>The D or d format strings display the enumeration entry as an integer value in the shortest representation possible. The following example illustrates the D format specifier.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">Console.WriteLine(ConsoleColor.Cyan.ToString(&quot;D&quot;));         // Displays 11\nFileAttributes attributes = FileAttributes.Hidden |\n                            FileAttributes.Archive;\nConsole.WriteLine(attributes.ToString(&quot;D&quot;));                // Displays 34\n````\n\n```vb\nConsole.WriteLine(ConsoleColor.Cyan.ToString(&quot;D&quot;))           &#39; Displays 11\nDim attributes As FileAttributes = FileAttributes.Hidden Or _\n                                   FileAttributes.Archive\nConsole.WriteLine(attributes.ToString(&quot;D&quot;))                  &#39; Displays 34 \n</code></pre><h2 id=\"the-x-or-x-format-strings\">The X or x Format Strings</h2>\n<p>The X or x format strings display the enumeration entry as a hexadecimal value. The value is represented with leading zeros as necessary, to ensure that the value is a minimum eight digits in length. The following example illustrates the X format specifier.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">Console.WriteLine(ConsoleColor.Cyan.ToString(&quot;X&quot;));   // Displays 0000000B\nFileAttributes attributes = FileAttributes.Hidden |\n                            FileAttributes.Archive;\nConsole.WriteLine(attributes.ToString(&quot;X&quot;));          // Displays 00000022\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Console.WriteLine(ConsoleColor.Cyan.ToString(&quot;X&quot;))     &#39; Displays 0000000B\nDim attributes As FileAttributes = FileAttributes.Hidden Or _\n                                   FileAttributes.Archive\nConsole.WriteLine(attributes.ToString(&quot;X&quot;))            &#39; Displays 00000022 \n</code></pre><h2 id=\"example\">Example</h2>\n<p>The following example defines an enumeration called <code>Colors</code> that consists of three entries: <code>Red</code>, <code>Blue</code>, and <code>Green</code>.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\"> public enum Color {Red = 1, Blue = 2, Green = 3}\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Public Enum Color\n   Red = 1\n   Blue = 2\n   Green = 3\nEnd Enum\n</code></pre><p>After the enumeration is defined, an instance can be declared in the following manner.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">Color myColor = Color.Green;\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim myColor As Color = Color.Green\n</code></pre><p>The <code>Color.ToString(System.String)</code> method can then be used to display the enumeration value in different ways, depending on the format specifier passed to it.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">Console.WriteLine(&quot;The value of myColor is {0}.&quot;, \n                  myColor.ToString(&quot;G&quot;));\nConsole.WriteLine(&quot;The value of myColor is {0}.&quot;, \n                  myColor.ToString(&quot;F&quot;));\nConsole.WriteLine(&quot;The value of myColor is {0}.&quot;, \n                  myColor.ToString(&quot;D&quot;));\nConsole.WriteLine(&quot;The value of myColor is 0x{0}.&quot;, \n                  myColor.ToString(&quot;X&quot;));\n// The example displays the following output to the console:\n//       The value of myColor is Green.\n//       The value of myColor is Green.\n//       The value of myColor is 3.\n//       The value of myColor is 0x00000003.\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Console.WriteLine(&quot;The value of myColor is {0}.&quot;, _\n                  myColor.ToString(&quot;G&quot;))\nConsole.WriteLine(&quot;The value of myColor is {0}.&quot;, _\n                  myColor.ToString(&quot;F&quot;))\nConsole.WriteLine(&quot;The value of myColor is {0}.&quot;, _\n                  myColor.ToString(&quot;D&quot;))\nConsole.WriteLine(&quot;The value of myColor is 0x{0}.&quot;, _\n                  myColor.ToString(&quot;X&quot;))\n&#39; The example displays the following output to the console:\n&#39;       The value of myColor is Green.\n&#39;       The value of myColor is Green.\n&#39;       The value of myColor is 3.\n&#39;       The value of myColor is 0x00000003. \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p><a href=\"formatting-types\" data-linktype=\"relative-path\">Formatting types</a></p>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"4d581898-99bc-42c3-816c-d8238f45096f\">\r\n<meta name=\"description\" content=\"Enumeration format strings\">\r\n<meta name=\"keywords\" content=\".NET, .NET Core\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"07/25/2016\">\r\n<meta name=\"ms.technology\" content=\"dotnet-standard\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/standard/base-types/enumeration-format.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/standard/base-types/enumeration-format.md\">\r\n<meta name=\"document_id\" content=\"55b4abe2-9bde-5b6c-3744-528a31b9b0c2\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Enumeration format strings | Microsoft Docs","ms.devlang":"dotnet","ms.assetid":"4d581898-99bc-42c3-816c-d8238f45096f","description":"Enumeration format strings","keywords":".NET, .NET Core","ms.topic":"article","ms.date":"07/25/2016","ms.technology":"dotnet-standard","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Porting base type docs take 4 (#1053)","commit_sha":"fb00da6505c9edb6a49d2003ae9bcb8e74c11d6c","commit_date":"2016-10-06 10:32:59 -0700"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/standard/base-types/enumeration-format.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/standard/base-types/enumeration-format.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/standard/base-types/enumeration-format.md","document_id":"55b4abe2-9bde-5b6c-3744-528a31b9b0c2","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/standard/base-types/enumeration-format","toc_asset_id":"articles/toc.json","toc_rel":"../../toc.json","_op_ogTitle":"Enumeration format strings","_op_displayDate":"2016-7-25","_op_displayDate_source":"2016-07-25T00:00:00Z","_op_wordCount":669,"_op_rawTitle":"<h1 id=\"enumeration-format-strings\" sourcefile=\"docs/standard/base-types/enumeration-format.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Enumeration format strings</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/standard/base-types/enumeration-format","fileRelativePath":"articles/standard/base-types/enumeration-format.html"},"themesRelativePathToOutputRoot":"_themes/"}