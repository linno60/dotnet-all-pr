{"content":"<div><div class=\"content\">\n<p>Regular expressions provide a powerful, flexible, and efficient method for processing text. The extensive pattern-matching notation of regular expressions enables you to quickly parse large amounts of text to find specific character patterns; to validate text to ensure that it matches a predefined pattern (such as an e-mail address); to extract, edit, replace, or delete text substrings; and to add the extracted strings to a collection in order to generate a report. For many applications that deal with strings or that parse large blocks of text, regular expressions are an indispensable tool.</p>\n<h2 id=\"how-regular-expressions-work\">How Regular Expressions Work</h2>\n<p>The centerpiece of text processing with regular expressions is the regular expression engine, which is represented by the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/system.text.regularexpressions.regex(v=vs.110).aspx\" data-linktype=\"external\">System.Text.RegularExpressions.Regex</a> object in .NET. At a minimum, processing text using regular expressions requires that the regular expression engine be provided with the following two items of information:</p>\n<ul>\n<li><p>The regular expression pattern to identify in the text. </p>\n<p>In .NET, regular expression patterns are defined by a special syntax or language, which is compatible with Perl 5 regular expressions and adds some additional features such as right-to-left matching. For more information, see <a href=\"quick-ref\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a>.</p>\n</li>\n<li><p>The text to parse for the regular expression pattern.</p>\n</li>\n</ul>\n<p>The methods of the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/system.text.regularexpressions.regex(v=vs.110).aspx\" data-linktype=\"external\">Regex</a> class let you perform the following operations:</p>\n<ul>\n<li><p>Determine whether the regular expression pattern occurs in the input text by calling the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/3y21t6y4(v=vs.110).aspx\" data-linktype=\"external\">Regex.IsMatch</a> method. For an example that uses the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/3y21t6y4(v=vs.110).aspx\" data-linktype=\"external\">IsMatch</a> method for validating text, see <a href=\"verify-format\" data-linktype=\"relative-path\">How to: Verify that Strings Are in Valid Email Format</a>.</p>\n</li>\n<li><p>Retrieve one or all occurrences of text that matches the regular expression pattern by calling the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/twcw2f1c(v=vs.110).aspx\" data-linktype=\"external\">Regex.Match</a> or <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/e7sf90t3(v=vs.110).aspx\" data-linktype=\"external\">Regex.Matches</a> method. The former method returns a <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/system.text.regularexpressions.match(v=vs.110).aspx\" data-linktype=\"external\">System.Text.RegularExpressions.Match</a> object that provides information about the matching text. The latter returns a <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/system.text.regularexpressions.matchcollection(v=vs.110).aspx\" data-linktype=\"external\">MatchCollection</a> object that contains one <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/system.text.regularexpressions.match(v=vs.110).aspx\" data-linktype=\"external\">System.Text.RegularExpressions.Match</a> object for each match found in the parsed text. </p>\n</li>\n<li><p>Replace text that matches the regular expression pattern by calling the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/xwewhkd1(v=vs.110).aspx\" data-linktype=\"external\">Regex.Replace</a> method. For examples that use the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/xwewhkd1(v=vs.110).aspx\" data-linktype=\"external\">Replace</a> method to change date formats and remove invalid characters from a string, see <a href=\"strip-characters\" data-linktype=\"relative-path\">How to: Strip Invalid Characters from a String</a> and <a href=\"changing-formats\" data-linktype=\"relative-path\">Regular Expression Example: Changing Date Formats</a>.</p>\n</li>\n</ul>\n<p>For an overview of the regular expression object model, see <a href=\"object-model\" data-linktype=\"relative-path\">The Regular Expression Object Model</a>.</p>\n<p>For more information about the regular expression language, see <a href=\"quick-ref\" data-linktype=\"relative-path\">Regular Expression Language - Quick Reference</a>.</p>\n<h2 id=\"regular-expression-examples\">Regular Expression Examples</h2>\n<p>The <a class=\"xref\" href=\"../../../api/system.string\" data-linktype=\"relative-path\">String</a> class includes a number of string search and replacement methods that you can use when you want to locate literal strings in a larger string. Regular expressions are most useful either when you want to locate one of several substrings in a larger string, or when you want to identify patterns in a string, as the following examples illustrate. </p>\n<h3 id=\"example-1-replacing-substrings\">Example 1: Replacing Substrings</h3>\n<p>Assume that a mailing list contains names that sometimes include a title (Mr., Mrs., Miss, or Ms.) along with a first and last name. If you do not want to include the titles when you generate envelope labels from the list, you can use a regular expression to remove the titles, as the following example illustrates.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string pattern = &quot;(Mr\\\\.? |Mrs\\\\.? |Miss |Ms\\\\.? )&quot;;\n      string[] names = { &quot;Mr. Henry Hunt&quot;, &quot;Ms. Sara Samuels&quot;, \n                         &quot;Abraham Adams&quot;, &quot;Ms. Nicole Norris&quot; };\n      foreach (string name in names)\n         Console.WriteLine(Regex.Replace(name, pattern, String.Empty));\n   }\n}\n// The example displays the following output:\n//    Henry Hunt\n//    Sara Samuels\n//    Abraham Adams\n//    Nicole Norris\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim pattern As String = &quot;(Mr\\.? |Mrs\\.? |Miss |Ms\\.? )&quot;\n      Dim names() As String = { &quot;Mr. Henry Hunt&quot;, &quot;Ms. Sara Samuels&quot;, _\n                                &quot;Abraham Adams&quot;, &quot;Ms. Nicole Norris&quot; }\n      For Each name As String In names\n         Console.WriteLine(Regex.Replace(name, pattern, String.Empty))\n      Next                                \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Henry Hunt\n&#39;    Sara Samuels\n&#39;    Abraham Adams\n&#39;    Nicole Norris\n</code></pre><p>The regular expression pattern <code>(Mr\\.? |Mrs\\.? |Miss |Ms\\.? )</code> matches any occurrence of &quot;Mr &quot;, &quot;Mr. &quot;, &quot;Mrs &quot;, &quot;Mrs. &quot;, &quot;Miss &quot;, &quot;Ms or &quot;Ms. &quot;. The call to the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/xwewhkd1(v=vs.110).aspx\" data-linktype=\"external\">Regex.Replace</a> method replaces the matched string with <a class=\"xref\" href=\"../../../api/system.string#System_String_Empty\" data-linktype=\"relative-path\">String.Empty</a>; in other words, it removes it from the original string.</p>\n<h3 id=\"example-2-identifying-duplicated-words\">Example 2: Identifying Duplicated Words</h3>\n<p>Accidentally duplicating words is a common error that writers make. A regular expression can be used to identify duplicated words, as the following example shows.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Class1\n{\n   public static void Main()\n   {\n      string pattern = @&quot;\\b(\\w+?)\\s\\1\\b&quot;;\n      string input = &quot;This this is a nice day. What about this? This tastes good. I saw a a dog.&quot;;\n      foreach (Match match in Regex.Matches(input, pattern, RegexOptions.IgnoreCase))\n         Console.WriteLine(&quot;{0} (duplicates &#39;{1}&#39;) at position {2}&quot;, \n                           match.Value, match.Groups[1].Value, match.Index);\n   }\n}\n// The example displays the following output:\n//       This this (duplicates &#39;This)&#39; at position 0\n//       a a (duplicates &#39;a)&#39; at position 66\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Imports System.Text.RegularExpressions\n\nModule modMain\n   Public Sub Main()\n      Dim pattern As String = &quot;\\b(\\w+?)\\s\\1\\b&quot;\n      Dim input As String = &quot;This this is a nice day. What about this? This tastes good. I saw a a dog.&quot;\n      For Each match As Match In Regex.Matches(input, pattern, RegexOptions.IgnoreCase)\n         Console.WriteLine(&quot;{0} (duplicates &#39;{1}&#39;) at position {2}&quot;, _\n                           match.Value, match.Groups(1).Value, match.Index)\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       This this (duplicates &#39;This)&#39; at position 0\n&#39;       a a (duplicates &#39;a)&#39; at position 66\n</code></pre><p>The regular expression pattern <code>\\b(\\w+?)\\s\\1\\b</code> can be interpreted as follows:</p>\n<table>\n<thead>\n<tr>\n<th>Syntax</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\b</code></td>\n<td>Start at a word boundary.</td>\n</tr>\n<tr>\n<td><code>(\\w+?)</code></td>\n<td>Match one or more word characters, but as few characters as possible. Together, they form a group that can be referred to as <code>\\1</code>.</td>\n</tr>\n<tr>\n<td><code>\\s</code></td>\n<td>Match a white-space character.</td>\n</tr>\n<tr>\n<td><code>\\1</code></td>\n<td>Match the substring that is equal to the group named <code>\\1</code>.</td>\n</tr>\n<tr>\n<td><code>\\b</code></td>\n<td>Match a word boundary.</td>\n</tr>\n</tbody>\n</table>\n<p>The <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/b49yw9s8(v=vs.110).aspx\" data-linktype=\"external\">Regex.Matches</a> method is called with regular expression options set to <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/system.text.regularexpressions.regexoptions(v=vs.110).aspx\" data-linktype=\"external\">RegexOptions.IgnoreCase</a>. Therefore, the match operation is case-insensitive, and the example identifies the substring &quot;This this&quot; as a duplication.</p>\n<p>Note that the input string includes the substring &quot;this? This&quot;. However, because of the intervening punctuation mark, it is not identified as a duplication.</p>\n<h3 id=\"example-3-dynamically-building-a-culture-sensitive-regular-expression\">Example 3: Dynamically Building a Culture-Sensitive Regular Expression</h3>\n<p>The following example illustrates the power of regular expressions combined with the flexibility offered by .NET&#39;s globalization features. It uses the <a class=\"xref\" href=\"../../../api/system.globalization.numberformatinfo\" data-linktype=\"relative-path\">NumberFormatInfo</a> object to determine the format of currency values in the system&#39;s current culture. It then uses that information to dynamically construct a regular expression that extracts currency values from the text. For each match, it extracts the subgroup that contains the numeric string only, converts it to a <a class=\"xref\" href=\"../../../api/system.decimal\" data-linktype=\"relative-path\">Decimal</a> value, and calculates a running total. </p>\n<pre class=\"loading\"><code class=\"lang-csharp\">using System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Define text to be parsed.\n      string input = &quot;Office expenses on 2/13/2008:\\n&quot; + \n                     &quot;Paper (500 sheets)                      $3.95\\n&quot; + \n                     &quot;Pencils (box of 10)                     $1.00\\n&quot; + \n                     &quot;Pens (box of 10)                        $4.49\\n&quot; + \n                     &quot;Erasers                                 $2.19\\n&quot; + \n                     &quot;Ink jet printer                        $69.95\\n\\n&quot; + \n                     &quot;Total Expenses                        $ 81.58\\n&quot;; \n\n      // Get current culture&#39;s NumberFormatInfo object.\n      NumberFormatInfo nfi = CultureInfo.CurrentCulture.NumberFormat;\n      // Assign needed property values to variables.\n      string currencySymbol = nfi.CurrencySymbol;\n      bool symbolPrecedesIfPositive = nfi.CurrencyPositivePattern % 2 == 0;\n      string groupSeparator = nfi.CurrencyGroupSeparator;\n      string decimalSeparator = nfi.CurrencyDecimalSeparator;\n\n      // Form regular expression pattern.\n      string pattern = Regex.Escape( symbolPrecedesIfPositive ? currencySymbol : &quot;&quot;) + \n                       @&quot;\\s*[-+]?&quot; + &quot;([0-9]{0,3}(&quot; + groupSeparator + &quot;[0-9]{3})*(&quot; + \n                       Regex.Escape(decimalSeparator) + &quot;[0-9]+)?)&quot; + \n                       (! symbolPrecedesIfPositive ? currencySymbol : &quot;&quot;); \n      Console.WriteLine( &quot;The regular expression pattern is:&quot;);\n      Console.WriteLine(&quot;   &quot; + pattern);      \n\n      // Get text that matches regular expression pattern.\n      MatchCollection matches = Regex.Matches(input, pattern, \n                                              RegexOptions.IgnorePatternWhitespace);               \n      Console.WriteLine(&quot;Found {0} matches.&quot;, matches.Count); \n\n      // Get numeric string, convert it to a value, and add it to List object.\n      List&lt;decimal&gt; expenses = new List&lt;Decimal&gt;();\n\n      foreach (Match match in matches)\n         expenses.Add(Decimal.Parse(match.Groups[1].Value));      \n\n      // Determine whether total is present and if present, whether it is correct.\n      decimal total = 0;\n      foreach (decimal value in expenses)\n         total += value;\n\n      if (total / 2 == expenses[expenses.Count - 1]) \n         Console.WriteLine(&quot;The expenses total {0:C2}.&quot;, expenses[expenses.Count - 1]);\n      else\n         Console.WriteLine(&quot;The expenses total {0:C2}.&quot;, total);\n   }  \n}\n// The example displays the following output:\n//       The regular expression pattern is:\n//          \\$\\s*[-+]?([0-9]{0,3}(,[0-9]{3})*(\\.[0-9]+)?)\n//       Found 6 matches.\n//       The expenses total $81.58.\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Imports System.Collections.Generic\nImports System.Globalization\nImports System.Text.RegularExpressions\n\nPublic Module Example\n   Public Sub Main()\n      &#39; Define text to be parsed.\n      Dim input As String = &quot;Office expenses on 2/13/2008:&quot; + vbCrLf + _\n                            &quot;Paper (500 sheets)                      $3.95&quot; + vbCrLf + _\n                            &quot;Pencils (box of 10)                     $1.00&quot; + vbCrLf + _\n                            &quot;Pens (box of 10)                        $4.49&quot; + vbCrLf + _\n                            &quot;Erasers                                 $2.19&quot; + vbCrLf + _\n                            &quot;Ink jet printer                        $69.95&quot; + vbCrLf + vbCrLf + _\n                            &quot;Total Expenses                        $ 81.58&quot; + vbCrLf\n      &#39; Get current culture&#39;s NumberFormatInfo object.\n      Dim nfi As NumberFormatInfo = CultureInfo.CurrentCulture.NumberFormat\n      &#39; Assign needed property values to variables.\n      Dim currencySymbol As String = nfi.CurrencySymbol\n      Dim symbolPrecedesIfPositive As Boolean = CBool(nfi.CurrencyPositivePattern Mod 2 = 0)\n      Dim groupSeparator As String = nfi.CurrencyGroupSeparator\n      Dim decimalSeparator As String = nfi.CurrencyDecimalSeparator\n\n      &#39; Form regular expression pattern.\n      Dim pattern As String = Regex.Escape(CStr(IIf(symbolPrecedesIfPositive, currencySymbol, &quot;&quot;))) + _\n                              &quot;\\s*[-+]?&quot; + &quot;([0-9]{0,3}(&quot; + groupSeparator + &quot;[0-9]{3})*(&quot; + _\n                              Regex.Escape(decimalSeparator) + &quot;[0-9]+)?)&quot; + _\n                              CStr(IIf(Not symbolPrecedesIfPositive, currencySymbol, &quot;&quot;)) \n      Console.WriteLine(&quot;The regular expression pattern is: &quot;)\n      Console.WriteLine(&quot;   &quot; + pattern)      \n\n      &#39; Get text that matches regular expression pattern.\n      Dim matches As MatchCollection = Regex.Matches(input, pattern, RegexOptions.IgnorePatternWhitespace)               \n      Console.WriteLine(&quot;Found {0} matches. &quot;, matches.Count)\n\n      &#39; Get numeric string, convert it to a value, and add it to List object.\n      Dim expenses As New List(Of Decimal)\n\n      For Each match As Match In matches\n         expenses.Add(Decimal.Parse(match.Groups.Item(1).Value))      \n      Next\n\n      &#39; Determine whether total is present and if present, whether it is correct.\n      Dim total As Decimal\n      For Each value As Decimal In expenses\n         total += value\n      Next\n\n      If total / 2 = expenses(expenses.Count - 1) Then\n         Console.WriteLine(&quot;The expenses total {0:C2}.&quot;, expenses(expenses.Count - 1))\n      Else\n         Console.WriteLine(&quot;The expenses total {0:C2}.&quot;, total)\n      End If   \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       The regular expression pattern is:\n&#39;          \\$\\s*[-+]?([0-9]{0,3}(,[0-9]{3})*(\\.[0-9]+)?)\n&#39;       Found 6 matches.\n&#39;       The expenses total $81.58.\n</code></pre><p>On a computer whose current culture is English - United States (en-US), the example dynamically builds the regular expression <code>\\$\\s*[-+]?([0-9]{0,3}(,[0-9]{3})*(\\.[0-9]+)?)</code>. This regular expression pattern can be interpreted as follows:</p>\n<table>\n<thead>\n<tr>\n<th>Syntax</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\$</code></td>\n<td>Look for a single occurrence of the dollar symbol ($) in the input string. The regular expression pattern string includes a backslash to indicate that the dollar symbol is to be interpreted literally rather than as a regular expression anchor. (The $ symbol alone would indicate that the regular expression engine should try to begin its match at the end of a string.) To ensure that the current culture&#39;s currency symbol is not misinterpreted as a regular expression symbol, the example calls the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/958t715c(v=vs.110).aspx\" data-linktype=\"external\">Escape</a> method to escape the character.</td>\n</tr>\n<tr>\n<td><code>\\s*</code></td>\n<td>Look for zero or more occurrences of a white-space character.</td>\n</tr>\n<tr>\n<td><code>[-+]?</code></td>\n<td>Look for zero or one occurrence of either a positive sign or a negative sign.</td>\n</tr>\n<tr>\n<td><code>([0-9]{0,3}(,[0-9]{3})*(\\.[0-9]+)?)</code></td>\n<td>The outer parentheses around this expression define it as a capturing group or a subexpression. If a match is found, information about this part of the matching string can be retrieved from the second <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/system.text.regularexpressions.group(v=vs.110).aspx\" data-linktype=\"external\">Group</a> object in the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/system.text.regularexpressions.groupcollection(v=vs.110).aspx\" data-linktype=\"external\">GroupCollection</a> object returned by the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/t5s1172t(v=vs.110).aspx\" data-linktype=\"external\">Match.Groups</a> property. (The first element in the collection represents the entire match.)</td>\n</tr>\n<tr>\n<td><code>[0-9]{0,3}</code></td>\n<td>Look for zero to three occurrences of the decimal digits 0 through 9.</td>\n</tr>\n<tr>\n<td><code>(,[0-9]{3})*</code></td>\n<td>Look for zero or more occurrences of a group separator followed by three decimal digits.</td>\n</tr>\n<tr>\n<td><code>\\.</code></td>\n<td>Look for a single occurrence of the decimal separator.</td>\n</tr>\n<tr>\n<td><code>[0-9]+</code></td>\n<td>Look for one or more decimal digits.</td>\n</tr>\n<tr>\n<td><code>(\\.[0-9]+)?</code></td>\n<td>Look for zero or one occurrence of the decimal separator followed by at least one decimal digit.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"related-topics\">Related Topics</h2>\n<table>\n<thead>\n<tr>\n<th>Title</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"quick-ref\" data-linktype=\"relative-path\">Regular expression language - quick reference</a></td>\n<td>Provides information on the set of characters, operators, and constructs that you can use to define regular expressions.</td>\n</tr>\n<tr>\n<td><a href=\"object-model\" data-linktype=\"relative-path\">The regular expression object model</a></td>\n<td>Provides information and code examples that illustrate how to use the regular expression classes.</td>\n</tr>\n<tr>\n<td><a href=\"regex-behavior\" data-linktype=\"relative-path\">Details of regular expression behavior</a></td>\n<td>Provides information about the capabilities and behavior of .NETregular expressions.</td>\n</tr>\n<tr>\n<td><a href=\"regex-examples\" data-linktype=\"relative-path\">Regular expression examples</a></td>\n<td>Provides code examples that illustrate typical uses of regular expressions.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"reference\">Reference</h2>\n<p><a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/system.text.regularexpressions(v=vs.110).aspx\" data-linktype=\"external\">System.Text.RegularExpressions</a></p>\n<p><a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/system.text.regularexpressions.regex(v=vs.110).aspx\" data-linktype=\"external\">System.Text.RegularExpressions.Regex</a></p>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"d1a640cf-09ca-48f7-800c-a627a6d549c9\">\r\n<meta name=\"description\" content=\"Regular expressions in .NET\">\r\n<meta name=\"keywords\" content=\".NET, .NET Core\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"07/26/2016\">\r\n<meta name=\"ms.technology\" content=\"dotnet-standard\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-21 01:42 AM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/standard/base-types/regular-expressions.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/standard/base-types/regular-expressions.md\">\r\n<meta name=\"document_id\" content=\"36b944e8-8416-d4de-63f4-4852b6f552bb\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Regular expressions in .NET | Microsoft Docs","ms.devlang":"dotnet","ms.assetid":"d1a640cf-09ca-48f7-800c-a627a6d549c9","description":"Regular expressions in .NET","keywords":".NET, .NET Core","ms.topic":"article","ms.date":"07/26/2016","ms.technology":"dotnet-standard","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Porting base type docs take 4 (#1053)","commit_sha":"fb00da6505c9edb6a49d2003ae9bcb8e74c11d6c","commit_date":"2016-10-06 10:32:59 -0700"}],"updated_at":"2017-03-21 01:42 AM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/21/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/standard/base-types/regular-expressions.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/standard/base-types/regular-expressions.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/standard/base-types/regular-expressions.md","document_id":"36b944e8-8416-d4de-63f4-4852b6f552bb","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/standard/base-types/regular-expressions","toc_asset_id":"articles/toc.json","toc_rel":"../../toc.json","_op_ogTitle":"Regular expressions in .NET","_op_displayDate":"2016-7-26","_op_displayDate_source":"2016-07-26T00:00:00Z","_op_wordCount":1979,"_op_rawTitle":"<h1 id=\"regular-expressions-in-net\" sourcefile=\"docs/standard/base-types/regular-expressions.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Regular expressions in .NET</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/standard/base-types/regular-expressions","fileRelativePath":"articles/standard/base-types/regular-expressions.html"},"themesRelativePathToOutputRoot":"_themes/"}