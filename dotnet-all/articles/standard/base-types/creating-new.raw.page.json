{"content":"<div><div class=\"content\">\n<p>.NET  allows strings to be created using simple assignment, and also overloads a class constructor to support string creation using a number of different parameters. .NET also provides several methods in the <a class=\"xref\" href=\"../../../api/system.string\" data-linktype=\"relative-path\">System.String</a> class that create new string objects by combining several strings, arrays of strings, or objects. </p>\n<h2 id=\"creating-strings-using-assignment\">Creating Strings Using Assignment</h2>\n<p>The easiest way to create a new <a class=\"xref\" href=\"../../../api/system.string\" data-linktype=\"relative-path\">String</a> object is simply to assign a string literal to a <a class=\"xref\" href=\"../../../api/system.string\" data-linktype=\"relative-path\">String</a> object. </p>\n<h2 id=\"creating-strings-using-a-class-constructor\">Creating Strings Using a Class Constructor</h2>\n<p>You can use overloads of the <a class=\"xref\" href=\"../../../api/system.string\" data-linktype=\"relative-path\">String</a> class constructor to create strings from character arrays. You can also create a new string by duplicating a particular character a specified number of times. </p>\n<h2 id=\"methods-that-return-strings\">Methods that Return Strings</h2>\n<p>The following table lists several useful methods that return new string objects.</p>\n<table>\n<thead>\n<tr>\n<th>Method name</th>\n<th>Use</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"../../../api/system.string#System_String_Format_System_String_System_Object_\" data-linktype=\"relative-path\">String.Format</a></td>\n<td>Builds a formatted string from a set of input objects.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"../../../api/system.string#System_String_Concat_System_String_System_String_\" data-linktype=\"relative-path\">String.Concat</a></td>\n<td>Builds strings from two or more strings.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"../../../api/system.string#System_String_Join_System_String_System_String___\" data-linktype=\"relative-path\">String.Join</a></td>\n<td>Builds a new string by combining an array of strings.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"../../../api/system.string#System_String_Insert_System_Int32_System_String_\" data-linktype=\"relative-path\">String.Insert</a></td>\n<td>Builds a new string by inserting a string into the specified index of an existing string.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"../../../api/system.string#System_String_CopyTo_System_Int32_System_Char___System_Int32_System_Int32_\" data-linktype=\"relative-path\">String.CopyTo</a></td>\n<td>Copies specified characters in a string into a specified position in an array of characters.</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"format\">Format</h3>\n<p>You can use the <code>String.Format</code> method to create formatted strings and concatenate strings representing multiple objects. This method automatically converts any passed object into a string. For example, if your application must display an <a class=\"xref\" href=\"../../../api/system.int32\" data-linktype=\"relative-path\">Int32</a> value and a <a class=\"xref\" href=\"../../../api/system.datetime\" data-linktype=\"relative-path\">DateTime</a> value to the user, you can easily construct a string to represent these values using the <code>Format</code> method. For information about formatting conventions used with this method, see the section on <a href=\"composite-format\" data-linktype=\"relative-path\">composite formatting</a>.</p>\n<p>The following example uses the <code>Format</code> method to create a string that uses an integer variable.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">int numberOfFleas = 12;\nstring miscInfo = String.Format(&quot;Your dog has {0} fleas. &quot; +\n                                &quot;It is time to get a flea collar. &quot; + \n                                &quot;The current universal date is: {1:u}.&quot;, \n                                numberOfFleas, DateTime.Now);\nConsole.WriteLine(miscInfo);\n// The example displays the following output:\n//       Your dog has 12 fleas. It is time to get a flea collar. \n//       The current universal date is: 2008-03-28 13:31:40Z.\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim numberOfFleas As Integer = 12\nDim miscInfo As String = String.Format(&quot;Your dog has {0} fleas. &quot; &amp; _\n                                       &quot;It is time to get a flea collar. &quot; &amp; _ \n                                       &quot;The current universal date is: {1:u}.&quot;, _ \n                                       numberOfFleas, Date.Now)\nConsole.WriteLine(miscInfo)\n&#39; The example displays the following output:\n&#39;       Your dog has 12 fleas. It is time to get a flea collar. \n&#39;       The current universal date is: 2008-03-28 13:31:40Z.\n</code></pre><p>In this example, <a class=\"xref\" href=\"../../../api/system.datetime#System_DateTime_Now\" data-linktype=\"relative-path\">DateTime.Now</a> displays the current date and time in a manner specified by the culture associated with the current thread.</p>\n<h3 id=\"concat\">Concat</h3>\n<p>The <code>String.Concat</code> method can be used to easily create a new string object from two or more existing objects. It provides a language-independent way to concatenate strings. This method accepts any class that derives from <code>System.Object</code>. The following example creates a string from two existing string objects and a separating character.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">string helloString1 = &quot;Hello&quot;;\nstring helloString2 = &quot;World!&quot;;\nConsole.WriteLine(String.Concat(helloString1, &#39; &#39;, helloString2));\n// The example displays the following output:\n//      Hello World!\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim helloString1 As String = &quot;Hello&quot;\nDim helloString2 As String = &quot;World!&quot;\nConsole.WriteLine(String.Concat(helloString1, &quot; &quot;c, helloString2))\n&#39; The example displays the following output:\n&#39;      Hello World!\n</code></pre><h3 id=\"join\">Join</h3>\n<p>The <code>String.Join</code> method creates a new string from an array of strings and a separator string. This method is useful if you want to concatenate multiple strings together, making a list perhaps separated by a comma.</p>\n<p>The following example uses a space to bind a string array.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">string[] words = {&quot;Hello&quot;, &quot;and&quot;, &quot;welcome&quot;, &quot;to&quot;, &quot;my&quot; , &quot;world!&quot;};\nConsole.WriteLine(String.Join(&quot; &quot;, words));\n// The example displays the following output:\n//      Hello and welcome to my world!\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim words() As String = {&quot;Hello&quot;, &quot;and&quot;, &quot;welcome&quot;, &quot;to&quot;, &quot;my&quot; , &quot;world!&quot;}\nConsole.WriteLine(String.Join(&quot; &quot;, words))\n&#39; The example displays the following output:\n&#39;      Hello and welcome to my world!\n</code></pre><h3 id=\"insert\">Insert</h3>\n<p>The <code>String.Insert</code> method creates a new string by inserting a string into a specified position in another string. This method uses a zero-based index. The following example inserts a string into the fifth index position of <code>MyString</code> and creates a new string with this value.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">string sentence = &quot;Once a time.&quot;;   \n Console.WriteLine(sentence.Insert(4, &quot; upon&quot;));\n // The example displays the following output:\n //      Once upon a time.\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim sentence As String = &quot;Once a time.&quot;   \n Console.WriteLine(sentence.Insert(4, &quot; upon&quot;))\n &#39; The example displays the \n</code></pre><h3 id=\"copyto\">CopyTo</h3>\n<p>The <code>String.CopyTo</code> method copies portions of a string into an array of characters. You can specify both the beginning index of the string and the number of characters to be copied. This method takes the source index, an array of characters, the destination index, and the number of characters to copy. All indexes are zero-based.</p>\n<p>The following example uses the <code>CopyTo</code> method to copy the characters of the word &quot;Hello&quot; from a string object to the first index position of an array of characters.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">string greeting = &quot;Hello World!&quot;;\nchar[] charArray = {&#39;W&#39;,&#39;h&#39;,&#39;e&#39;,&#39;r&#39;,&#39;e&#39;};\nConsole.WriteLine(&quot;The original character array: {0}&quot;, new string(charArray));\ngreeting.CopyTo(0, charArray,0 ,5);\nConsole.WriteLine(&quot;The new character array: {0}&quot;, new string(charArray));\n// The example displays the following output:\n//       The original character array: Where\n//       The new character array: Hello\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim greeting As String = &quot;Hello World!&quot;\nDim charArray() As Char = {&quot;W&quot;c, &quot;h&quot;c, &quot;e&quot;c, &quot;r&quot;c, &quot;e&quot;c}\nConsole.WriteLine(&quot;The original character array: {0}&quot;, New String(charArray))\ngreeting.CopyTo(0, charArray,0 ,5)\nConsole.WriteLine(&quot;The new character array: {0}&quot;, New String(charArray))\n&#39; The example displays the following output:\n&#39;       The original character array: Where\n&#39;       The new character array: Hello\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p><a href=\"basic-string-operations\" data-linktype=\"relative-path\">Basic string operations</a></p>\n<p><a href=\"composite-format\" data-linktype=\"relative-path\">Composite formatting</a></p>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"639397c7-e694-43e0-845b-1681c62bd9fd\">\r\n<meta name=\"description\" content=\"Creating new strings\">\r\n<meta name=\"keywords\" content=\".NET, .NET Core\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"07/26/2016\">\r\n<meta name=\"ms.technology\" content=\"dotnet-standard\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/standard/base-types/creating-new.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/standard/base-types/creating-new.md\">\r\n<meta name=\"document_id\" content=\"616b954e-841c-1d40-45fa-52f194184c1a\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Creating new strings | Microsoft Docs","ms.devlang":"dotnet","ms.assetid":"639397c7-e694-43e0-845b-1681c62bd9fd","description":"Creating new strings","keywords":".NET, .NET Core","ms.topic":"article","ms.date":"07/26/2016","ms.technology":"dotnet-standard","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Porting base type docs take 4 (#1053)","commit_sha":"fb00da6505c9edb6a49d2003ae9bcb8e74c11d6c","commit_date":"2016-10-06 10:32:59 -0700"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/standard/base-types/creating-new.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/standard/base-types/creating-new.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/standard/base-types/creating-new.md","document_id":"616b954e-841c-1d40-45fa-52f194184c1a","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/standard/base-types/creating-new","toc_asset_id":"articles/toc.json","toc_rel":"../../toc.json","_op_ogTitle":"Creating new strings","_op_displayDate":"2016-7-26","_op_displayDate_source":"2016-07-26T00:00:00Z","_op_wordCount":909,"_op_rawTitle":"<h1 id=\"creating-new-strings\" sourcefile=\"docs/standard/base-types/creating-new.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Creating new strings</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/standard/base-types/creating-new","fileRelativePath":"articles/standard/base-types/creating-new.html"},"themesRelativePathToOutputRoot":"_themes/"}