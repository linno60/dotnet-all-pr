{"content":"<div><div class=\"content\">\n<p>In addition to numeric and <a class=\"xref\" href=\"../../../api/system.datetime\" data-linktype=\"relative-path\">DateTime</a> strings, you can also parse strings that represent the types <a class=\"xref\" href=\"../../../api/system.char\" data-linktype=\"relative-path\">Char</a>, <a class=\"xref\" href=\"../../../api/system.boolean\" data-linktype=\"relative-path\">Boolean</a>, and <a class=\"xref\" href=\"../../../api/system.enum\" data-linktype=\"relative-path\">Enum</a> into data types.</p>\n<h2 id=\"char\">Char</h2>\n<p>The static parse method associated with the <a class=\"xref\" href=\"../../../api/system.char\" data-linktype=\"relative-path\">Char</a> data type is useful for converting a string that contains a single character into its Unicode value. The following code example parses a string into a Unicode character.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">string MyString1 = &quot;A&quot;;\nchar MyChar = Char.Parse(MyString1);\n// MyChar now contains a Unicode &quot;A&quot; character.\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim MyString1 As String = &quot;A&quot;\nDim MyChar As Char = Char.Parse(MyString1)\n&#39; MyChar now contains a Unicode &quot;A&quot; character.\n</code></pre><h2 id=\"boolean\">Boolean</h2>\n<p>The <a class=\"xref\" href=\"../../../api/system.boolean\" data-linktype=\"relative-path\">Boolean</a> data type contains a <a class=\"xref\" href=\"../../../api/system.boolean#System_Boolean_Parse_System_String_\" data-linktype=\"relative-path\">Parse</a> method that you can use to convert a string that represents a <code>Boolean</code> value into an actual <code>Boolean</code> type. This method is not case-sensitive and can successfully parse a string containing &quot;True&quot; or &quot;False.&quot; The <code>Parse</code> method associated with the <code>Boolean</code> type can also parse strings that are surrounded by white spaces. If any other string is passed, a <a class=\"xref\" href=\"../../../api/system.formatexception\" data-linktype=\"relative-path\">FormatException</a> is thrown.</p>\n<p>The following code example uses the <code>Parse</code> method to convert a string into a <code>Boolean</code> value.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">string MyString2 = &quot;True&quot;;\nbool MyBool = bool.Parse(MyString2);\n// MyBool now contains a True Boolean value.\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim MyString1 As String = &quot;A&quot;\nDim MyChar As Char = Char.Parse(MyString1)\n&#39; MyChar now contains a Unicode &quot;A&quot; character.\n</code></pre><h2 id=\"enumeration\">Enumeration</h2>\n<p>You can use the static <a class=\"xref\" href=\"../../../api/system.enum#System_Enum_Parse_System_Type_System_String_\" data-linktype=\"relative-path\">Parse</a> method to initialize an enumeration type to the value of a string. This method accepts the enumeration type you are parsing, the string to parse, and an optional <code>Boolean</code> flag indicating whether or not the parse is case-sensitive. The string you are parsing can contain several values separated by commas, which can be preceded or followed by one or more empty spaces (also called white spaces). When the string contains multiple values, the value of the returned object is the value of all specified values combined with a bitwise OR operation.</p>\n<p>The following example uses the <code>Parse</code> method to convert a string representation into an enumeration value. The <a class=\"xref\" href=\"../../../api/system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a> enumeration is initialized to Thursday from a string.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">string MyString3 = &quot;Thursday&quot;;\nDayOfWeek MyDays = (DayOfWeek)Enum.Parse(typeof(DayOfWeek), MyString3);\nConsole.WriteLine(MyDays);\n// The result is Thursday.\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim MyString3 As String = &quot;Thursday&quot;\nDim MyDays As DayOfWeek = CType([Enum].Parse(GetType(DayOfWeek), MyString3), DayOfWeek)\nConsole.WriteLine(&quot;{0:G}&quot;, MyDays)\n&#39; The result is Thursday.\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p><a href=\"parsing-strings\" data-linktype=\"relative-path\">Parsing strings in .NET</a></p>\n<p><a href=\"formatting-types\" data-linktype=\"relative-path\">Formatting types in .NET</a></p>\n<p><a href=\"type-conversion\" data-linktype=\"relative-path\">Type conversion in .NET</a></p>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-all/api/toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"67670b10-3df4-45ea-8908-5ba3f056887c\">\r\n<meta name=\"description\" content=\"Parsing other strings in .NET\">\r\n<meta name=\"keywords\" content=\".NET, .NET Core\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"07/29/2016\">\r\n<meta name=\"ms.technology\" content=\"dotnet-standard\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/standard/base-types/parsing-other.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/standard/base-types/parsing-other.md\">\r\n<meta name=\"document_id\" content=\"b6a71898-7c43-07ec-465a-e249cbfc26ca\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Parsing other strings in .NET | Microsoft Docs","ms.devlang":"dotnet","ms.assetid":"67670b10-3df4-45ea-8908-5ba3f056887c","description":"Parsing other strings in .NET","keywords":".NET, .NET Core","ms.topic":"article","ms.date":"07/29/2016","ms.technology":"dotnet-standard","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Porting base type docs take 4 (#1053)","commit_sha":"fb00da6505c9edb6a49d2003ae9bcb8e74c11d6c","commit_date":"2016-10-06 10:32:59 -0700"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/standard/base-types/parsing-other.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/standard/base-types/parsing-other.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/standard/base-types/parsing-other.md","document_id":"b6a71898-7c43-07ec-465a-e249cbfc26ca","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/standard/base-types/parsing-other","toc_asset_id":"articles/toc.json","toc_rel":"../../toc.json","_op_ogTitle":"Parsing other strings in .NET","_op_displayDate":"2016-7-29","_op_displayDate_source":"2016-07-29T00:00:00Z","_op_wordCount":392,"_op_rawTitle":"<h1 id=\"parsing-other-strings-in-net\" sourcefile=\"docs/standard/base-types/parsing-other.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Parsing other strings in .NET</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/standard/base-types/parsing-other","fileRelativePath":"articles/standard/base-types/parsing-other.html"},"themesRelativePathToOutputRoot":"_themes/"}