{"content":"<div><div class=\"content\">\n<p>.NET makes it easy to determine the ordinal day of the week for a particular date, and to display the localized weekday name for a particular date. An enumerated value that indicates the day of the week corresponding to a particular date is available from the <a class=\"xref\" href=\"../../../api/system.datetime#System_DateTime_DayOfWeek\" data-linktype=\"relative-path\">Datetime.DayOfWeek</a> or <a class=\"xref\" href=\"../../../api/system.datetimeoffset#System_DateTimeOffset_DayOfWeek\" data-linktype=\"relative-path\">DateTimeOffset.DayOfWeek</a> property. In contrast, retrieving the weekday name is a formatting operation that can be performed by calling a formatting method, such as a date and time value&#39;s <code>ToString</code> method or the <a class=\"xref\" href=\"../../../api/system.string#System_String_Format_System_IFormatProvider_System_String_System_Object_\" data-linktype=\"relative-path\">String.Format</a> method. This topic shows how to perform these formatting operations.</p>\n<h2 id=\"to-extract-a-number-indicating-the-day-of-the-week-from-a-specific-date\">To extract a number indicating the day of the week from a specific date</h2>\n<ol>\n<li><p>If you are working with the string representation of a date, convert it to a <a class=\"xref\" href=\"../../../api/system.datetime\" data-linktype=\"relative-path\">DateTime</a> or a <a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> value by using the static <a class=\"xref\" href=\"../../../api/system.datetime#System_DateTime_Parse_System_String_\" data-linktype=\"relative-path\">DateTime.Parse</a> or <a class=\"xref\" href=\"../../../api/system.datetimeoffset#System_DateTimeOffset_Parse_System_String_\" data-linktype=\"relative-path\">DateTimeOffset.Parse</a> method.</p>\n</li>\n<li><p>Use the <a class=\"xref\" href=\"../../../api/system.datetime#System_DateTime_DayOfWeek\" data-linktype=\"relative-path\">Datetime.DayOfWeek</a> or <a class=\"xref\" href=\"../../../api/system.datetimeoffset#System_DateTimeOffset_DayOfWeek\" data-linktype=\"relative-path\">DateTimeOffset.DayOfWeek</a> property to retrieve a <a class=\"xref\" href=\"../../../api/system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a> value that indicates the day of the week.</p>\n</li>\n<li><p>If necessary, cast the <a class=\"xref\" href=\"../../../api/system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a> value to an integer. </p>\n</li>\n</ol>\n<p>The following example displays an integer that represents the day of the week of a specific date. </p>\n<pre class=\"loading\"><code class=\"lang-csharp\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      DateTime dateValue = new DateTime(2008, 6, 11);\n      Console.WriteLine((int) dateValue.DayOfWeek);      \n   }\n}\n// The example displays the following output:\n//       3\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Module Example\n   Public Sub Main()\n      Dim dateValue As Date = #6/11/2008#\n      Console.WriteLine(dateValue.DayOfWeek)           \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    3\n</code></pre><h2 id=\"to-extract-the-abbreviated-weekday-name-from-a-specific-date\">To extract the abbreviated weekday name from a specific date</h2>\n<ol>\n<li><p>If you are working with the string representation of a date, convert it to a <a class=\"xref\" href=\"../../../api/system.datetime\" data-linktype=\"relative-path\">DateTime</a> or a <a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> value by using the static <a class=\"xref\" href=\"../../../api/system.datetime#System_DateTime_Parse_System_String_\" data-linktype=\"relative-path\">DateTime.Parse</a> or <a class=\"xref\" href=\"../../../api/system.datetimeoffset#System_DateTimeOffset_Parse_System_String_\" data-linktype=\"relative-path\">DateTimeOffset.Parse</a> method.</p>\n</li>\n<li><p>You can extract the abbreviated weekday name of the current culture or of a specific culture:</p>\n<p> a. To extract the abbreviated weekday name for the current culture, call the date and time value&#39;s [DateTime.ToString(String)](xref:System.DateTimeSystem.DateTime.ToString(System.String) or <a class=\"xref\" href=\"../../../api/system.datetimeoffset#System_DateTimeOffset_ToString_System_String_\" data-linktype=\"relative-path\">DateTimeOffset.ToString(String)</a> instance method, and pass the string &quot;ddd&quot; as the <em>format</em> parameter. The following example illustrates the call to the <code>ToString(String)</code> method.</p>\n</li>\n</ol>\n<pre class=\"loading\"><code class=\"lang-csharp\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n  DateTime dateValue = new DateTime(2008, 6, 11);\n  Console.WriteLine(dateValue.ToString(&quot;ddd&quot;));   \n   }\n}\n// The example displays the following output:\n//       Wed\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Module Example\n   Public Sub Main()\n  Dim dateValue As Date = #6/11/2008#\n      Console.WriteLine(dateValue.ToString(&quot;ddd&quot;))    \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Wed\n</code></pre><pre class=\"loading\"><code>b. To extract the abbreviated weekday name for a specific culture, call the date and time value’s [DateTime.ToString(String, IFormatProvider)](xref:System.DateTime.ToString(System.String,System.IFormatProvider)) or [DateTimeOffset.ToString(String, IFormatProvider)](xref:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)) instance method. Pass the string &quot;ddd&quot; as the *format* parameter. Pass either a [CultureInfo](xref:System.Globalization.CultureInfo) or a [DateTimeFormatInfo](xref:System.Globalization.DateTimeFormatInfo) object that represents the culture whose weekday name you want to retrieve as the *provider* parameter. The following code illustrates a call to the [ToString(String, IFormatProvider)](xref:System.DateTime.ToString(System.String,System.IFormatProvider)) method using a [CultureInfo](xref:System.Globalization.CultureInfo) object that represents the fr-FR culture.\n</code></pre><pre class=\"loading\"><code class=\"lang-csharp\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n    public static void Main()\n    {\n        DateTime dateValue = new DateTime(2008, 6, 11);\n        Console.WriteLine(dateValue.ToString(&quot;ddd&quot;, \n                            new CultureInfo(&quot;fr-FR&quot;)));    \n    }\n}\n// The example displays the following output:\n//       mer. \n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim dateValue As Date = #6/11/2008#\n      Console.WriteLine(dateValue.ToString(&quot;ddd&quot;, \n                        New CultureInfo(&quot;fr-FR&quot;)))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       mer.\n</code></pre><h2 id=\"to-extract-the-full-weekday-name-from-a-specific-date\">To extract the full weekday name from a specific date</h2>\n<ol>\n<li><p>If you are working with the string representation of a date, convert it to a <a class=\"xref\" href=\"../../../api/system.datetime\" data-linktype=\"relative-path\">DateTime</a> or a <a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> value by using the static <a class=\"xref\" href=\"../../../api/system.datetime#System_DateTime_Parse_System_String_\" data-linktype=\"relative-path\">DateTime.Parse</a> or <a class=\"xref\" href=\"../../../api/system.datetimeoffset#System_DateTimeOffset_Parse_System_String_\" data-linktype=\"relative-path\">DateTimeOffset.Parse</a> method.</p>\n</li>\n<li><p>You can extract the abbreviated weekday name of the current culture or of a specific culture:</p>\n<p> a. To extract the abbreviated weekday name for the current culture, call the date and time value&#39;s [DateTime.ToString(String)](xref:System.DateTimeSystem.DateTime.ToString(System.String) or <a class=\"xref\" href=\"../../../api/system.datetimeoffset#System_DateTimeOffset_ToString_System_String_\" data-linktype=\"relative-path\">DateTimeOffset.ToString(String)</a> instance method, and pass the string &quot;dddd&quot; as the <em>format</em> parameter. The following example illustrates the call to the <code>ToString(String)</code> method.</p>\n</li>\n</ol>\n<pre class=\"loading\"><code class=\"lang-csharp\">using System;\n\npublic class Example\n{\n    public static void Main()\n    {\n        DateTime dateValue = new DateTime(2008, 6, 11);\n        Console.WriteLine(dateValue.ToString(&quot;dddd&quot;));    \n    }\n}\n// The example displays the following output:\n//       Wednesday\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Module Example\n   Public Sub Main()\n      Dim dateValue As Date = #6/11/2008#\n      Console.WriteLine(dateValue.ToString(&quot;dddd&quot;))\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Wednesday\n</code></pre><pre class=\"loading\"><code>b. To extract the weekday name for a specific culture, call the date and time value’s [DateTime.ToString(String, IFormatProvider)](xref:System.DateTime.ToString(System.String,System.IFormatProvider)) or [DateTimeOffset.ToString(String, IFormatProvider)](xref:System.DateTimeOffset.ToString(System.String,System.IFormatProvider)) instance method. Pass the string &quot;dddd&quot; as the *format* parameter. Pass either a [CultureInfo](xref:System.Globalization.CultureInfo) or a [DateTimeFormatInfo](xref:System.Globalization.DateTimeFormatInfo) object that represents the culture whose weekday name you want to retrieve as the *provider* parameter. The following code illustrates a call to the [ToString(String, IFormatProvider)](xref:System.DateTime.ToString(System.String,System.IFormatProvider)) method using a [CultureInfo](xref:System.Globalization.CultureInfo) object that represents the es-ES  culture.\n</code></pre><pre class=\"loading\"><code class=\"lang-csharp\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n    public static void Main()\n    {\n        DateTime dateValue = new DateTime(2008, 6, 11);\n        Console.WriteLine(dateValue.ToString(&quot;dddd&quot;, \n                            new CultureInfo(&quot;es-ES&quot;)));    \n    }\n}\n// The example displays the following output:\n//       miércoles.\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim dateValue As Date = #6/11/2008#\n      Console.WriteLine(dateValue.ToString(&quot;dddd&quot;, _\n                        New CultureInfo(&quot;es-ES&quot;))) \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       miércoles.\n</code></pre><h2 id=\"example\">Example</h2>\n<p>The example illustrates calls to the <a class=\"xref\" href=\"../../../api/system.datetime#System_DateTime_DayOfWeek\" data-linktype=\"relative-path\">Datetime.DayOfWeek</a> and <a class=\"xref\" href=\"../../../api/system.datetimeoffset#System_DateTimeOffset_DayOfWeek\" data-linktype=\"relative-path\">DateTimeOffset.DayOfWeek</a> properties and the [DateTime.ToString(String)](xref:System.DateTime.ToString(System.String) or <a class=\"xref\" href=\"../../../api/system.datetimeoffset#System_DateTimeOffset_ToString_System_String_\" data-linktype=\"relative-path\">DateTimeOffset.ToString(String)</a> methods to retrieve the number that represents the day of the week, the abbreviated weekday name, and the full weekday name for a particular date. </p>\n<pre class=\"loading\"><code class=\"lang-csharp\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string dateString = &quot;6/11/2007&quot;;\n      DateTime dateValue;\n      DateTimeOffset dateOffsetValue;\n\n      try\n      {\n         DateTimeFormatInfo dateTimeFormats;\n         // Convert date representation to a date value\n         dateValue = DateTime.Parse(dateString, CultureInfo.InvariantCulture);\n         dateOffsetValue = new DateTimeOffset(dateValue, \n                                      TimeZoneInfo.Local.GetUtcOffset(dateValue));         \n\n         // Convert date representation to a number indicating the day of week\n         Console.WriteLine((int) dateValue.DayOfWeek);\n         Console.WriteLine((int) dateOffsetValue.DayOfWeek);\n\n         // Display abbreviated weekday name using current culture\n         Console.WriteLine(dateValue.ToString(&quot;ddd&quot;));\n         Console.WriteLine(dateOffsetValue.ToString(&quot;ddd&quot;));\n\n         // Display full weekday name using current culture\n         Console.WriteLine(dateValue.ToString(&quot;dddd&quot;));\n         Console.WriteLine(dateOffsetValue.ToString(&quot;dddd&quot;));\n\n         // Display abbreviated weekday name for de-DE culture\n         Console.WriteLine(dateValue.ToString(&quot;ddd&quot;, new CultureInfo(&quot;de-DE&quot;)));\n         Console.WriteLine(dateOffsetValue.ToString(&quot;ddd&quot;, \n                                                     new CultureInfo(&quot;de-DE&quot;)));\n\n         // Display abbreviated weekday name with de-DE DateTimeFormatInfo object\n         dateTimeFormats = new CultureInfo(&quot;de-DE&quot;).DateTimeFormat;\n         Console.WriteLine(dateValue.ToString(&quot;ddd&quot;, dateTimeFormats));\n         Console.WriteLine(dateOffsetValue.ToString(&quot;ddd&quot;, dateTimeFormats));\n\n         // Display full weekday name for fr-FR culture\n         Console.WriteLine(dateValue.ToString(&quot;ddd&quot;, new CultureInfo(&quot;fr-FR&quot;)));\n         Console.WriteLine(dateOffsetValue.ToString(&quot;ddd&quot;, \n                                                    new CultureInfo(&quot;fr-FR&quot;)));\n\n         // Display abbreviated weekday name with fr-FR DateTimeFormatInfo object\n         dateTimeFormats = new CultureInfo(&quot;fr-FR&quot;).DateTimeFormat;\n         Console.WriteLine(dateValue.ToString(&quot;dddd&quot;, dateTimeFormats));\n         Console.WriteLine(dateOffsetValue.ToString(&quot;dddd&quot;, dateTimeFormats));\n      }\n      catch (FormatException)\n      {\n         Console.WriteLine(&quot;Unable to convert {0} to a date.&quot;, dateString);\n      }\n   }\n}\n// The example displays the following output:\n//       1\n//       1\n//       Mon\n//       Mon\n//       Monday\n//       Monday\n//       Mo\n//       Mo\n//       Mo\n//       Mo\n//       lun.\n//       lun.\n//       lundi\n//       lundi\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim dateString As String = &quot;6/11/2007&quot;\n      Dim dateValue As Date\n      Dim dateOffsetValue As DateTimeOffset\n\n      Try\n         Dim dateTimeFormats As DateTimeFormatInfo\n         &#39; Convert date representation to a date value\n         dateValue = Date.Parse(dateString, CultureInfo.InvariantCulture)\n         dateOffsetValue = New DateTimeOffset(dateValue, _\n                                     TimeZoneInfo.Local.GetUtcOffset(dateValue))            \n         &#39; Convert date representation to a number indicating the day of week\n         Console.WriteLine(dateValue.DayOfWeek)\n         Console.WriteLine(dateOffsetValue.DayOfWeek)\n\n         &#39; Display abbreviated weekday name using current culture\n         Console.WriteLine(dateValue.ToString(&quot;ddd&quot;))\n         Console.WriteLine(dateOffsetValue.ToString(&quot;ddd&quot;))\n\n         &#39; Display full weekday name using current culture\n         Console.WriteLine(dateValue.ToString(&quot;dddd&quot;))\n         Console.WriteLine(dateOffsetValue.ToString(&quot;dddd&quot;))\n\n         &#39; Display abbreviated weekday name for de-DE culture\n         Console.WriteLine(dateValue.ToString(&quot;ddd&quot;, New CultureInfo(&quot;de-DE&quot;)))\n         Console.WriteLine(dateOffsetValue.ToString(&quot;ddd&quot;, _\n                                                    New CultureInfo(&quot;de-DE&quot;)))\n\n         &#39; Display abbreviated weekday name with de-DE DateTimeFormatInfo object\n         dateTimeFormats = New CultureInfo(&quot;de-DE&quot;).DateTimeFormat\n         Console.WriteLine(dateValue.ToString(&quot;ddd&quot;, dateTimeFormats))\n         Console.WriteLine(dateOffsetValue.ToString(&quot;ddd&quot;, dateTimeFormats))\n\n         &#39; Display full weekday name for fr-FR culture\n         Console.WriteLine(dateValue.ToString(&quot;ddd&quot;, New CultureInfo(&quot;fr-FR&quot;)))\n         Console.WriteLine(dateOffsetValue.ToString(&quot;ddd&quot;, _\n                                                    New CultureInfo(&quot;fr-FR&quot;)))\n\n         &#39; Display abbreviated weekday name with fr-FR DateTimeFormatInfo object\n         dateTimeFormats = New CultureInfo(&quot;fr-FR&quot;).DateTimeFormat\n         Console.WriteLine(dateValue.ToString(&quot;dddd&quot;, dateTimeFormats))\n         Console.WriteLine(dateOffsetValue.ToString(&quot;dddd&quot;, dateTimeFormats))\n      Catch e As FormatException\n         Console.WriteLine(&quot;Unable to convert {0} to a date.&quot;, dateString)\n      End Try\n   End Sub\nEnd Module\n&#39; The example displays the following output to the console:\n&#39;       1\n&#39;       1\n&#39;       Mon\n&#39;       Mon\n&#39;       Monday\n&#39;       Monday\n&#39;       Mo\n&#39;       Mo\n&#39;       Mo\n&#39;       Mo\n&#39;       lun.\n&#39;       lun.\n&#39;       lundi\n&#39;       lundi\n</code></pre><p>Individual languages may provide functionality that duplicates or supplements the functionality provided by .NET. For example, Visual Basic includes two such functions:</p>\n<ul>\n<li><p><code>Weekday</code>, which returns a number that indicates the day of the week of a particular date. It considers the ordinal value of the first day of the week to be one, whereas the <a class=\"xref\" href=\"../../../api/system.datetime#System_DateTime_DayOfWeek\" data-linktype=\"relative-path\">Datetime.DayOfWeek</a> property considers it to be zero.</p>\n</li>\n<li><p><code>WeekdayName</code>, which returns the name of the week in the current culture that corresponds to a particular weekday number.</p>\n</li>\n</ul>\n<p>The following example illustrates the use of the Visual Basic <code>Weekday</code> and <code>WeekdayName</code> functions.</p>\n<pre class=\"loading\"><code class=\"lang-vb\">Imports System.Globalization\nImports System.Threading\n\nModule Example\n   Public Sub Main()\n      Dim dateValue As Date = #6/11/2008#\n\n      &#39; Get weekday number using Visual Basic Weekday function\n      Console.WriteLine(Weekday(dateValue))                 &#39; Displays 4\n      &#39; Compare with .NET DateTime.DayOfWeek property\n      Console.WriteLine(dateValue.DayOfWeek)                &#39; Displays 3\n\n      &#39; Get weekday name using Weekday and WeekdayName functions\n      Console.WriteLine(WeekdayName(Weekday(dateValue)))    &#39; Displays Wednesday\n\n      &#39; Change culture to de-DE\n      Dim originalCulture As CultureInfo = Thread.CurrentThread.CurrentCulture\n      Thread.CurrentThread.CurrentCulture = New CultureInfo(&quot;de-DE&quot;)\n      &#39; Get weekday name using Weekday and WeekdayName functions\n      Console.WriteLine(WeekdayName(Weekday(dateValue)))   &#39; Displays Donnerstag\n\n      &#39; Restore original culture\n      Thread.CurrentThread.CurrentCulture = originalCulture   \n   End Sub\nEnd Module\n</code></pre><p>You can also use the value returned by the <a class=\"xref\" href=\"../../../api/system.datetime#System_DateTime_DayOfWeek\" data-linktype=\"relative-path\">Datetime.DayOfWeek</a> property to retrieve the weekday name of a particular date. This requires only a call to the <a class=\"xref\" href=\"../../../api/system.enum#System_Enum_ToString_System_String_\" data-linktype=\"relative-path\">Enum.ToString</a> method on the <a class=\"xref\" href=\"../../../api/system.dayofweek\" data-linktype=\"relative-path\">DayOfWeek</a> value returned by the property. However, this technique does not produce a localized weekday name for the current culture, as the following example illustrates. </p>\n<pre class=\"loading\"><code class=\"lang-csharp\">using System;\nusing System.Globalization;\nusing System.Threading;\n\npublic class Example\n{\n   public static void Main()\n   {\n      // Change current culture to fr-FR\n      CultureInfo originalCulture = Thread.CurrentThread.CurrentCulture;\n      Thread.CurrentThread.CurrentCulture = new CultureInfo(&quot;fr-FR&quot;);\n\n      DateTime dateValue = new DateTime(2008, 6, 11);\n      // Display the DayOfWeek string representation\n      Console.WriteLine(dateValue.DayOfWeek.ToString());   \n      // Restore original current culture\n      Thread.CurrentThread.CurrentCulture = originalCulture;\n   }\n}\n// The example displays the following output:\n//       Wednesday\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim dateString As String = &quot;6/11/2007&quot;\n      Dim dateValue As Date\n      Dim dateOffsetValue As DateTimeOffset\n\n      Try\n         Dim dateTimeFormats As DateTimeFormatInfo\n         &#39; Convert date representation to a date value\n         dateValue = Date.Parse(dateString, CultureInfo.InvariantCulture)\n         dateOffsetValue = New DateTimeOffset(dateValue, _\n                                     TimeZoneInfo.Local.GetUtcOffset(dateValue))            \n         &#39; Convert date representation to a number indicating the day of week\n         Console.WriteLine(dateValue.DayOfWeek)\n         Console.WriteLine(dateOffsetValue.DayOfWeek)\n\n         &#39; Display abbreviated weekday name using current culture\n         Console.WriteLine(dateValue.ToString(&quot;ddd&quot;))\n         Console.WriteLine(dateOffsetValue.ToString(&quot;ddd&quot;))\n\n         &#39; Display full weekday name using current culture\n         Console.WriteLine(dateValue.ToString(&quot;dddd&quot;))\n         Console.WriteLine(dateOffsetValue.ToString(&quot;dddd&quot;))\n\n         &#39; Display abbreviated weekday name for de-DE culture\n         Console.WriteLine(dateValue.ToString(&quot;ddd&quot;, New CultureInfo(&quot;de-DE&quot;)))\n         Console.WriteLine(dateOffsetValue.ToString(&quot;ddd&quot;, _\n                                                    New CultureInfo(&quot;de-DE&quot;)))\n\n         &#39; Display abbreviated weekday name with de-DE DateTimeFormatInfo object\n         dateTimeFormats = New CultureInfo(&quot;de-DE&quot;).DateTimeFormat\n         Console.WriteLine(dateValue.ToString(&quot;ddd&quot;, dateTimeFormats))\n         Console.WriteLine(dateOffsetValue.ToString(&quot;ddd&quot;, dateTimeFormats))\n\n         &#39; Display full weekday name for fr-FR culture\n         Console.WriteLine(dateValue.ToString(&quot;ddd&quot;, New CultureInfo(&quot;fr-FR&quot;)))\n         Console.WriteLine(dateOffsetValue.ToString(&quot;ddd&quot;, _\n                                                    New CultureInfo(&quot;fr-FR&quot;)))\n\n         &#39; Display abbreviated weekday name with fr-FR DateTimeFormatInfo object\n         dateTimeFormats = New CultureInfo(&quot;fr-FR&quot;).DateTimeFormat\n         Console.WriteLine(dateValue.ToString(&quot;dddd&quot;, dateTimeFormats))\n         Console.WriteLine(dateOffsetValue.ToString(&quot;dddd&quot;, dateTimeFormats))\n      Catch e As FormatException\n         Console.WriteLine(&quot;Unable to convert {0} to a date.&quot;, dateString)\n      End Try\n   End Sub\nEnd Module\n&#39; The example displays the following output to the console:\n&#39;       1\n&#39;       1\n&#39;       Mon\n&#39;       Mon\n&#39;       Monday\n&#39;       Monday\n&#39;       Mo\n&#39;       Mo\n&#39;       Mo\n&#39;       Mo\n&#39;       lun.\n&#39;       lun.\n&#39;       lundi\n&#39;       lundi\n</code></pre><h2 id=\"see-also\">See also</h2>\n<p><a href=\"performing-formatting-operations\" data-linktype=\"relative-path\">Performing formatting operations</a></p>\n<p><a href=\"standard-datetime\" data-linktype=\"relative-path\">Standard date and time format strings</a></p>\n<p><a href=\"custom-datetime\" data-linktype=\"relative-path\">Custom date and time format strings</a></p>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"88a8f8b9-f5c9-4503-b968-84468b52bb8e\">\r\n<meta name=\"description\" content=\"How to extract the day of the week from a specific date\">\r\n<meta name=\"keywords\" content=\".NET, .NET Core\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"07/26/2016\">\r\n<meta name=\"ms.technology\" content=\"dotnet-standard\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/standard/base-types/extract-day.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/standard/base-types/extract-day.md\">\r\n<meta name=\"document_id\" content=\"bea374c5-e78b-fa21-e03e-eb8e110afb6f\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"How to: extract the day of the week from a specific date | Microsoft Docs","ms.devlang":"dotnet","ms.assetid":"88a8f8b9-f5c9-4503-b968-84468b52bb8e","description":"How to extract the day of the week from a specific date","keywords":".NET, .NET Core","ms.topic":"article","ms.date":"07/26/2016","ms.technology":"dotnet-standard","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"fixed broken anchors (#1194)","commit_sha":"b20713600d7c3ddc31be5885733a1e8910ede8c6","commit_date":"2016-11-02 20:45:13 -0700"},{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Porting base type docs take 4 (#1053)","commit_sha":"fb00da6505c9edb6a49d2003ae9bcb8e74c11d6c","commit_date":"2016-10-06 10:32:59 -0700"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/standard/base-types/extract-day.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/standard/base-types/extract-day.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/standard/base-types/extract-day.md","document_id":"bea374c5-e78b-fa21-e03e-eb8e110afb6f","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/standard/base-types/extract-day","toc_asset_id":"articles/toc.json","toc_rel":"../../toc.json","_op_ogTitle":"How to: extract the day of the week from a specific date","_op_displayDate":"2016-7-26","_op_displayDate_source":"2016-07-26T00:00:00Z","_op_wordCount":1750,"_op_rawTitle":"<h1 id=\"how-to-extract-the-day-of-the-week-from-a-specific-date\" sourcefile=\"docs/standard/base-types/extract-day.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">How to: extract the day of the week from a specific date</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/standard/base-types/extract-day","fileRelativePath":"articles/standard/base-types/extract-day.html"},"themesRelativePathToOutputRoot":"_themes/"}