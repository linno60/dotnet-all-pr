{"content":"<div><div class=\"content\">\n<p>The default date and time formatting methods, such as <a class=\"xref\" href=\"../../../api/system.datetime#System_DateTime_ToString\" data-linktype=\"relative-path\">DateTime.ToString()</a>, include the hours, minutes, and seconds of a time value but exclude its milliseconds component. This topic shows how to include a date and time&#39;s millisecond component in formatted date and time strings.</p>\n<h2 id=\"to-display-the-millisecond-component-of-a-datetime-value\">To display the millisecond component of a DateTime value</h2>\n<ol>\n<li><p>If you are working with the string representation of a date, convert it to a <a class=\"xref\" href=\"../../../api/system.datetime\" data-linktype=\"relative-path\">DateTime</a> or a <a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> value by using the static <a class=\"xref\" href=\"../../../api/system.datetime#System_DateTime_Parse_System_String_\" data-linktype=\"relative-path\">DateTime.Parse(String)</a> or <a class=\"xref\" href=\"../../../api/system.datetimeoffset#System_DateTimeOffset_Parse_System_String_\" data-linktype=\"relative-path\">DateTimeOffset.Parse(String)</a> method.</p>\n</li>\n<li><p>To extract the string representation of a time&#39;s millisecond component, call the date and time value&#39;s <a class=\"xref\" href=\"../../../api/system.datetime#System_DateTime_ToString_System_String_\" data-linktype=\"relative-path\">DateTime.ToString(String)</a> or <a class=\"xref\" href=\"../../../api/system.datetimeoffset#System_DateTimeOffset_ToString_System_String_\" data-linktype=\"relative-path\">DateTimeOffset.ToString</a> method, and pass the <code>fff</code> or <code>FFF</code> custom format pattern either alone or with other custom format specifiers as the format parameter.</p>\n</li>\n</ol>\n<h2 id=\"example\">Example</h2>\n<p>The example displays the millisecond component of a <a class=\"xref\" href=\"../../../api/system.datetime\" data-linktype=\"relative-path\">DateTime</a> and a <a class=\"xref\" href=\"../../../api/system.datetimeoffset\" data-linktype=\"relative-path\">DateTimeOffset</a> value to the console, both alone and included in a longer date and time string. </p>\n<pre class=\"loading\"><code class=\"lang-csharp\">using System;\nusing System.Globalization;\nusing System.Text.RegularExpressions;\n\npublic class MillisecondDisplay\n{\n   public static void Main()\n   {\n      string dateString = &quot;7/16/2008 8:32:45.126 AM&quot;;\n\n      try\n      {\n         DateTime dateValue = DateTime.Parse(dateString);\n         DateTimeOffset dateOffsetValue = DateTimeOffset.Parse(dateString);\n\n         // Display Millisecond component alone.\n         Console.WriteLine(&quot;Millisecond component only: {0}&quot;, \n                           dateValue.ToString(&quot;fff&quot;));\n         Console.WriteLine(&quot;Millisecond component only: {0}&quot;, \n                           dateOffsetValue.ToString(&quot;fff&quot;));\n\n         // Display Millisecond component with full date and time.\n         Console.WriteLine(&quot;Date and Time with Milliseconds: {0}&quot;, \n                           dateValue.ToString(&quot;MM/dd/yyyy hh:mm:ss.fff tt&quot;));                        \n         Console.WriteLine(&quot;Date and Time with Milliseconds: {0}&quot;, \n                           dateOffsetValue.ToString(&quot;MM/dd/yyyy hh:mm:ss.fff tt&quot;));\n\n         // Append millisecond pattern to current culture&#39;s full date time pattern\n         string fullPattern = DateTimeFormatInfo.CurrentInfo.FullDateTimePattern;\n         fullPattern = Regex.Replace(fullPattern, &quot;(:ss|:s)&quot;, &quot;$1.fff&quot;);\n\n         // Display Millisecond component with modified full date and time pattern.\n         Console.WriteLine(&quot;Modified full date time pattern: {0}&quot;, \n                           dateValue.ToString(fullPattern));\n         Console.WriteLine(&quot;Modified full date time pattern: {0}&quot;,\n                           dateOffsetValue.ToString(fullPattern));\n      }\n      catch (FormatException)\n      {\n         Console.WriteLine(&quot;Unable to convert {0} to a date.&quot;, dateString);\n      }\n   }\n}\n// The example displays the following output if the current culture is en-US:\n//    Millisecond component only: 126\n//    Millisecond component only: 126\n//    Date and Time with Milliseconds: 07/16/2008 08:32:45.126 AM\n//    Date and Time with Milliseconds: 07/16/2008 08:32:45.126 AM\n//    Modified full date time pattern: Wednesday, July 16, 2008 8:32:45.126 AM\n//    Modified full date time pattern: Wednesday, July 16, 2008 8:32:45.126 AM\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Imports System.Globalization\nImports System.Text.REgularExpressions\n\nModule MillisecondDisplay\n   Public Sub Main()\n\n      Dim dateString As String = &quot;7/16/2008 8:32:45.126 AM&quot;\n\n      Try\n         Dim dateValue As Date = Date.Parse(dateString)\n         Dim dateOffsetValue As DateTimeOffset = DateTimeOffset.Parse(dateString)\n\n         &#39; Display Millisecond component alone.\n         Console.WriteLine(&quot;Millisecond component only: {0}&quot;, _\n                           dateValue.ToString(&quot;fff&quot;))\n         Console.WriteLine(&quot;Millisecond component only: {0}&quot;, _\n                           dateOffsetValue.ToString(&quot;fff&quot;))\n\n         &#39; Display Millisecond component with full date and time.\n         Console.WriteLine(&quot;Date and Time with Milliseconds: {0}&quot;, _\n                           dateValue.ToString(&quot;MM/dd/yyyy hh:mm:ss.fff tt&quot;))                        \n         Console.WriteLine(&quot;Date and Time with Milliseconds: {0}&quot;, _\n                           dateOffsetValue.ToString(&quot;MM/dd/yyyy hh:mm:ss.fff tt&quot;))\n\n         &#39; Append millisecond pattern to current culture&#39;s full date time pattern\n         Dim fullPattern As String = DateTimeFormatInfo.CurrentInfo.FullDateTimePattern\n         fullPattern = Regex.Replace(fullPattern, &quot;(:ss|:s)&quot;, &quot;$1.fff&quot;)\n\n         &#39; Display Millisecond component with modified full date and time pattern.\n         Console.WriteLine(&quot;Modified full date time pattern: {0}&quot;, _\n                           dateValue.ToString(fullPattern))                        \n         Console.WriteLine(&quot;Modified full date time pattern: {0}&quot;, _\n                           dateOffsetValue.ToString(fullPattern))\n      Catch e As FormatException\n         Console.WriteLine(&quot;Unable to convert {0} to a date.&quot;, dateString)      \n      End Try\n   End Sub\nEnd Module\n&#39; The example displays the following output if the current culture is en-US:\n&#39;    Millisecond component only: 126\n&#39;    Millisecond component only: 126\n&#39;    Date and Time with Milliseconds: 07/16/2008 08:32:45.126 AM\n&#39;    Date and Time with Milliseconds: 07/16/2008 08:32:45.126 AM\n&#39;    Modified full date time pattern: Wednesday, July 16, 2008 8:32:45.126 AM\n&#39;    Modified full date time pattern: Wednesday, July 16, 2008 8:32:45.126 AM\n</code></pre><p>The <code>fff</code> format pattern includes any trailing zeros in the millisecond value. The <code>FFF</code> format pattern suppresses them. The difference is illustrated in the following example.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">DateTime dateValue = new DateTime(2008, 7, 16, 8, 32, 45, 180); \nConsole.WriteLine(dateValue.ToString(&quot;fff&quot;));    \nConsole.WriteLine(dateValue.ToString(&quot;FFF&quot;));\n// The example displays the following output to the console:\n//    180\n//    18 \n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim dateValue As New Date(2008, 7, 16, 8, 32, 45, 180) \nConsole.WriteLIne(dateValue.ToString(&quot;fff&quot;))    \nConsole.WriteLine(dateValue.ToString(&quot;FFF&quot;))\n&#39; The example displays the following output to the console:\n&#39;    180\n&#39;    18\n</code></pre><p>A problem with defining a complete custom format specifier that includes the millisecond component of a date and time is that it defines a hard-coded format that may not correspond to the arrangement of time elements in the application&#39;s current culture. A better alternative is to retrieve one of the date and time display patterns defined by the current culture&#39;s <a class=\"xref\" href=\"../../../api/system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object and modify it to include milliseconds. The example also illustrates this approach. It retrieves the current culture&#39;s full date and time pattern from the <a class=\"xref\" href=\"../../../api/system.globalization.datetimeformatinfo#System_Globalization_DateTimeFormatInfo_FullDateTimePattern\" data-linktype=\"relative-path\">DateTimeFormatInfo.FullDateTimePattern</a> property, and then inserts the custom pattern <code>.ffff</code> after its seconds pattern. Note that the example uses a regular expression to perform this operation in a single method call.</p>\n<p>You can also use a custom format specifier to display a fractional part of seconds other than milliseconds. For example, the <code>f</code> or <code>F</code> custom format specifier displays tenths of a second, the <code>ff</code> or <code>FF</code> custom format specifier displays hundredths of a second, and the <code>ffff</code> or <code>FFFF</code> custom format specifier displays ten thousandths of a second. Fractional parts of a millisecond are truncated instead of rounded in the returned string. These format specifiers are used in the following example.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">DateTime dateValue = new DateTime(2008, 7, 16, 8, 32, 45, 180); \nConsole.WriteLine(&quot;{0} seconds&quot;, dateValue.ToString(&quot;s.f&quot;));\nConsole.WriteLine(&quot;{0} seconds&quot;, dateValue.ToString(&quot;s.ff&quot;));      \nConsole.WriteLine(&quot;{0} seconds&quot;, dateValue.ToString(&quot;s.ffff&quot;));\n// The example displays the following output to the console:\n//    45.1 seconds\n//    45.18 seconds\n//    45.1800 seconds\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim dateValue As New DateTime(2008, 7, 16, 8, 32, 45, 180) \nConsole.WriteLine(&quot;{0} seconds&quot;, dateValue.ToString(&quot;s.f&quot;))\nConsole.WriteLine(&quot;{0} seconds&quot;, dateValue.ToString(&quot;s.ff&quot;))      \nConsole.WriteLine(&quot;{0} seconds&quot;, dateValue.ToString(&quot;s.ffff&quot;))\n&#39; The example displays the following output to the console:\n&#39;    45.1 seconds\n&#39;    45.18 seconds\n&#39;    45.1800 seconds\n</code></pre><div class=\"NOTE\"><h5>Note</h5><p>It is possible to display very small fractional units of a second, such as ten thousandths of a second or hundred-thousandths of a second. However, these values may not be meaningful. The precision of date and time values depends on the resolution of the system clock.</p>\n</div>\n<h2 id=\"see-also\">See Also</h2>\n<p><a class=\"xref\" href=\"../../../api/system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">System.Globalization.DateTimeFormatInfo</a></p>\n<p><a href=\"custom-datetime\" data-linktype=\"relative-path\">Custom date and time format strings</a></p>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet/toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"78599e33-1c3f-4335-b320-751e35906338\">\r\n<meta name=\"description\" content=\"How to display milliseconds in date and time values\">\r\n<meta name=\"keywords\" content=\".NET, .NET Core\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"07/26/2016\">\r\n<meta name=\"ms.technology\" content=\"dotnet-standard\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/standard/base-types/display-milliseconds.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/standard/base-types/display-milliseconds.md\">\r\n<meta name=\"document_id\" content=\"f7aa73d8-e2a3-dde2-be9d-5fcfa31d68d1\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"How to: display milliseconds in date and time values | Microsoft Docs","ms.devlang":"dotnet","ms.assetid":"78599e33-1c3f-4335-b320-751e35906338","description":"How to display milliseconds in date and time values","keywords":".NET, .NET Core","ms.topic":"article","ms.date":"07/26/2016","ms.technology":"dotnet-standard","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Porting base type docs take 4 (#1053)","commit_sha":"fb00da6505c9edb6a49d2003ae9bcb8e74c11d6c","commit_date":"2016-10-06 10:32:59 -0700"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/standard/base-types/display-milliseconds.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/standard/base-types/display-milliseconds.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/standard/base-types/display-milliseconds.md","document_id":"f7aa73d8-e2a3-dde2-be9d-5fcfa31d68d1","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/standard/base-types/display-milliseconds","toc_asset_id":"articles/toc.json","toc_rel":"../../toc.json","_op_ogTitle":"How to: display milliseconds in date and time values","_op_displayDate":"2016-7-26","_op_displayDate_source":"2016-07-26T00:00:00Z","_op_wordCount":966,"_op_rawTitle":"<h1 id=\"how-to-display-milliseconds-in-date-and-time-values\" sourcefile=\"docs/standard/base-types/display-milliseconds.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">How to: display milliseconds in date and time values</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/standard/base-types/display-milliseconds","fileRelativePath":"articles/standard/base-types/display-milliseconds.html"},"themesRelativePathToOutputRoot":"_themes/"}