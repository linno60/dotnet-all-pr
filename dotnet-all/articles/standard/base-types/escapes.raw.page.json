{"content":"<div><div class=\"content\">\n<p>The backslash () in a regular expression indicates one of the following: </p>\n<ul>\n<li><p>The character that follows it is a special character, as shown in the table in the following section. For example, <strong>\\b</strong> is an anchor that indicates that a regular expression match should begin on a word boundary, <strong>\\t</strong> represents a tab, and <strong>\\x020</strong> represents a space.</p>\n</li>\n<li><p>A character that otherwise would be interpreted as an unescaped language construct should be interpreted literally. For example, a brace (<strong>{</strong>) begins the definition of a quantifier, but a backslash followed by a brace (<strong>{</strong>) indicates that the regular expression engine should match the brace. Similarly, a single backslash marks the beginning of an escaped language construct, but two backslashes (<strong>\\</strong>) indicate that the regular expression engine should match the backslash.</p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p>Character escapes are recognized in regular expression patterns but not in replacement patterns. </p>\n</div>\n<h2 id=\"character-escapes-in-net\">Character Escapes in .NET</h2>\n<p>The following table lists the character escapes supported by regular expressions in .NET.</p>\n<table>\n<thead>\n<tr>\n<th>Character or sequence</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>All characters except for the following: <strong>. $ ^ { [ ( &#124; ) * + ? \\</strong></td>\n<td>Characters other than those listed in the <strong>Character or sequence</strong> column have no special meaning in regular expressions; they match themselves. The characters included in the <strong>Character or sequence</strong> column are special regular expression language elements. To match them in a regular expression, they must be escaped or included in a positive character group. For example, the regular expression <code>\\$\\d+ or [$]\\d+</code> matches &quot;$1200&quot;.</td>\n</tr>\n<tr>\n<td><strong>\\a</strong></td>\n<td>Matches a bell (alarm) character, <strong>\\u0007</strong>.</td>\n</tr>\n<tr>\n<td><strong>\\b</strong></td>\n<td>In a <strong>[</strong><em>character</em><em><em>group</em><em>_]</em></em> character class, matches a backspace, <strong>\\u0008</strong>. (See <a href=\"classes\" data-linktype=\"relative-path\">Character classes in regular expressions</a>.) Outside a character class, <strong>\\b</strong> is an anchor that matches a word boundary. (See <a href=\"anchors\" data-linktype=\"relative-path\">Anchors in regular expressions</a>.)</td>\n</tr>\n<tr>\n<td><strong>\\t</strong></td>\n<td>Matches a tab, <strong>\\u0009</strong>.</td>\n</tr>\n<tr>\n<td><strong>\\r</strong></td>\n<td>Matches a carriage return, <strong>\\u000D</strong>. Note that <strong>\\r</strong> is not equivalent to the newline character, <strong>\\n</strong>.</td>\n</tr>\n<tr>\n<td><strong>\\v</strong></td>\n<td>Matches a vertical tab, <strong>\\u000B</strong>.</td>\n</tr>\n<tr>\n<td><strong>\\f</strong></td>\n<td>Matches a form feed, <strong>\\u000C</strong>.</td>\n</tr>\n<tr>\n<td><strong>\\n</strong></td>\n<td>Matches a new line, <strong>\\u000A</strong>.</td>\n</tr>\n<tr>\n<td><strong>\\e</strong></td>\n<td>Matches an escape, <strong>\\u001B</strong>.</td>\n</tr>\n<tr>\n<td><strong>\\</strong><em>nnn</em></td>\n<td>Matches an ASCII character, where nnn consists of two or three digits that represent the octal character code. For example, <code>\\040</code> represents a space character. This construct is interpreted as a backreference if it has only one digit (for example, <code>\\2</code>) or if it corresponds to the number of a capturing group. (See <a href=\"backreference\" data-linktype=\"relative-path\">Backreference constructs in regular expressions</a>.)</td>\n</tr>\n<tr>\n<td><strong>\\x</strong><em>nn</em></td>\n<td>Matches an ASCII character, where <em>nn</em> is a two-digit hexadecimal character code.</td>\n</tr>\n<tr>\n<td><strong>\\c</strong><em>X</em></td>\n<td>Matches an ASCII control character, where <em>X</em> is the letter of the control character. For example, <code>\\cC</code> is CTRL-C.</td>\n</tr>\n<tr>\n<td><strong>\\u</strong><em>nnnn</em></td>\n<td>Matches a UTF-16 code unit whose value is <em>nnnn</em> hexadecimal. <strong>Note</strong> The Perl 5 character escape that is used to specify Unicode is not supported by .NET. The Perl 5 character escape has the form <strong>\\x{####…}</strong>, where <strong>####…</strong> is a series of hexadecimal digits. Instead, use <strong>\\u</strong><em>nnnn</em>.</td>\n</tr>\n<tr>\n<td><strong>\\</strong></td>\n<td>When followed by a character that is not recognized as an escaped character, matches that character. For example, <code>\\*</code> matches an asterisk (*) and is the same as <code>\\x2A</code>.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"example\">Example</h2>\n<p>The following example illustrates the use of character escapes in a regular expression. It parses a string that contains the names of the world&#39;s largest cities and their populations in 2009. Each city name is separated from its population by a tab (<strong>\\t</strong>) or a vertical bar (| or <code>\\u007c</code>). Individual cities and their populations are separated from each other by a carriage return and line feed. </p>\n<pre class=\"loading\"><code class=\"lang-csharp\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string delimited = @&quot;\\G(.+)[\\t\\u007c](.+)\\r?\\n&quot;;\n      string input = &quot;Mumbai, India|13,922,125\\t\\n&quot; + \n                            &quot;Shanghai, China\\t13,831,900\\n&quot; + \n                            &quot;Karachi, Pakistan|12,991,000\\n&quot; + \n                            &quot;Delhi, India\\t12,259,230\\n&quot; + \n                            &quot;Istanbul, Turkey|11,372,613\\n&quot;;\n      Console.WriteLine(&quot;Population of the World&#39;s Largest Cities, 2009&quot;);\n      Console.WriteLine();\n      Console.WriteLine(&quot;{0,-20} {1,10}&quot;, &quot;City&quot;, &quot;Population&quot;);\n      Console.WriteLine();\n      foreach (Match match in Regex.Matches(input, delimited))\n         Console.WriteLine(&quot;{0,-20} {1,10}&quot;, match.Groups[1].Value, \n                                            match.Groups[2].Value);\n   }\n}\n// The example displyas the following output:\n//       Population of the World&#39;s Largest Cities, 2009\n//       \n//       City                 Population\n//       \n//       Mumbai, India        13,922,125\n//       Shanghai, China      13,831,900\n//       Karachi, Pakistan    12,991,000\n//       Delhi, India         12,259,230\n//       Istanbul, Turkey     11,372,613\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim delimited As String = &quot;\\G(.+)[\\t\\u007c](.+)\\r?\\n&quot;\n      Dim input As String = &quot;Mumbai, India|13,922,125&quot; + vbCrLf + _\n                            &quot;Shanghai, China&quot; + vbTab + &quot;13,831,900&quot; + vbCrLf + _\n                            &quot;Karachi, Pakistan|12,991,000&quot; + vbCrLf + _\n                            &quot;Delhi, India&quot; + vbTab + &quot;12,259,230&quot; + vbCrLf + _\n                            &quot;Istanbul, Turkey|11,372,613&quot; + vbCrLf\n      Console.WriteLine(&quot;Population of the World&#39;s Largest Cities, 2009&quot;)\n      Console.WriteLine()\n      Console.WriteLine(&quot;{0,-20} {1,10}&quot;, &quot;City&quot;, &quot;Population&quot;)\n      Console.WriteLine()\n      For Each match As Match In Regex.Matches(input, delimited)\n         Console.WriteLine(&quot;{0,-20} {1,10}&quot;, match.Groups(1).Value, _\n                                            match.Groups(2).Value)\n      Next                         \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Population of the World&#39;s Largest Cities, 2009\n&#39;       \n&#39;       City                 Population\n&#39;       \n&#39;       Mumbai, India        13,922,125\n&#39;       Shanghai, China      13,831,900\n&#39;       Karachi, Pakistan    12,991,000\n&#39;       Delhi, India         12,259,230\n&#39;       Istanbul, Turkey     11,372,613\n</code></pre><p>The regular expression <code>\\G(.+)[\\t|\\u007c](.+)\\r?\\n</code> is interpreted as shown in the following table.</p>\n<table>\n<thead>\n<tr>\n<th>Pattern</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\G</code></td>\n<td>Begin the match where the last match ended.</td>\n</tr>\n<tr>\n<td><code>(.+)</code></td>\n<td>Match any character one or more times. This is the first capturing group.</td>\n</tr>\n<tr>\n<td><code>[\\t\\u007c]</code></td>\n<td>Match a tab (<strong>\\t</strong>) or a vertical bar (&#124;).</td>\n</tr>\n<tr>\n<td><code>(.+)</code></td>\n<td>Match any character one or more times. This is the second capturing group.</td>\n</tr>\n<tr>\n<td><code>\\r?\\n</code></td>\n<td>Match zero or one occurrence of a carriage return followed by a new line.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"see-also\">See Also</h2>\n<p><a href=\"quick-ref\" data-linktype=\"relative-path\">Regular expression language - quick reference</a></p>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"41d35531-2af9-47d4-9780-fbc1e682fbc2\">\r\n<meta name=\"description\" content=\"Character escapes in regular expressions\">\r\n<meta name=\"keywords\" content=\".NET, .NET Core\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"07/29/2016\">\r\n<meta name=\"ms.technology\" content=\"dotnet-standard\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/standard/base-types/escapes.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/standard/base-types/escapes.md\">\r\n<meta name=\"document_id\" content=\"86af8d92-3357-95ee-ce9b-e15637649549\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Character escapes in regular expressions | Microsoft Docs","ms.devlang":"dotnet","ms.assetid":"41d35531-2af9-47d4-9780-fbc1e682fbc2","description":"Character escapes in regular expressions","keywords":".NET, .NET Core","ms.topic":"article","ms.date":"07/29/2016","ms.technology":"dotnet-standard","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"fixed broken anchors (#1194)","commit_sha":"b20713600d7c3ddc31be5885733a1e8910ede8c6","commit_date":"2016-11-02 20:45:13 -0700"},{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Porting base type docs take 4 (#1053)","commit_sha":"fb00da6505c9edb6a49d2003ae9bcb8e74c11d6c","commit_date":"2016-10-06 10:32:59 -0700"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/standard/base-types/escapes.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/standard/base-types/escapes.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/standard/base-types/escapes.md","document_id":"86af8d92-3357-95ee-ce9b-e15637649549","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/standard/base-types/escapes","toc_asset_id":"articles/toc.json","toc_rel":"../../toc.json","_op_ogTitle":"Character escapes in regular expressions","_op_displayDate":"2016-7-29","_op_displayDate_source":"2016-07-29T00:00:00Z","_op_wordCount":879,"_op_rawTitle":"<h1 id=\"character-escapes-in-regular-expressions\" sourcefile=\"docs/standard/base-types/escapes.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Character escapes in regular expressions</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/standard/base-types/escapes","fileRelativePath":"articles/standard/base-types/escapes.html"},"themesRelativePathToOutputRoot":"_themes/"}