{"content":"<div><div class=\"content\">\n<p>A <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> format string defines the string representation of a <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value that results from a formatting operation. A custom format string consists of one or more custom <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> format specifiers along with any number of literal characters. Any string that is not a <a href=\"standard-timespan\" data-linktype=\"relative-path\">standard TimeSpan</a> format string is interpreted as a custom <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> format string.</p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p>The custom <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> format specifiers do not include placeholder separator symbols, such as the symbols that separate days from hours, hours from minutes, or seconds from fractional seconds. Instead, these symbols must be included in the custom format string as string literals. For example, <code>&quot;dd\\.hh\\:mm&quot;</code> defines a period (.) as the separator between days and hours, and a colon (:) as the separator between hours and minutes. </p>\n</div>\n<blockquote><p>Custom <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> format specifiers also do not include a sign symbol that enables you to differentiate between negative and positive time intervals. To include a sign symbol, you have to construct a format string by using conditional logic. The <a href=\"#other-characters\" data-linktype=\"self-bookmark\">Other characters</a> section includes an example. </p>\n</blockquote>\n<p>The string representations of <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> values are produced by calls to the overloads of the <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> <code>ToString</code> method, as well as by methods that support composite formatting, such as <a class=\"xref\" href=\"../../../api/system.string#System_String_Format_System_IFormatProvider_System_String_System_Object_\" data-linktype=\"relative-path\">String.Format</a>. For more information, see <a href=\"formatting-types\" data-linktype=\"relative-path\">Formatting types</a> and <a href=\"composite-format\" data-linktype=\"relative-path\">Composite formatting</a>. The following example illustrates the use of standard format strings in formatting operations.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      TimeSpan duration = new TimeSpan(1, 12, 23, 62);\n\n      string output = null;\n      output = &quot;Time of Travel: &quot; + duration.ToString(&quot;%d&quot;) + &quot; days&quot;;\n      Console.WriteLine(output);\n      output = &quot;Time of Travel: &quot; + duration.ToString(xref:&quot;dd\\.hh\\:mm\\:ss&quot;); \n      Console.WriteLine(output);\n\n      Console.WriteLine(&quot;Time of Travel: {0:%d} day(s)&quot;, duration);\n      Console.WriteLine(&quot;Time of Travel: {0:dd\\\\.hh\\\\:mm\\\\:ss} days&quot;, duration);\n   }\n}\n// The example displays the following output:\n//       Time of Travel: 1 days\n//       Time of Travel: 01.12:24:02\n//       Time of Travel: 1 day(s)\n//       Time of Travel: 01.12:24:02 days\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Module Example\n   Public Sub Main()\n      Dim duration As New TimeSpan(1, 12, 23, 62)\n\n      Dim output As String = Nothing\n      output = &quot;Time of Travel: &quot; + duration.ToString(&quot;%d&quot;) + &quot; days&quot;\n      Console.WriteLine(output)\n      output = &quot;Time of Travel: &quot; + duration.ToString(&quot;dd\\.hh\\:mm\\:ss&quot;) \n      Console.WriteLine(output)\n\n      Console.WriteLine(&quot;Time of Travel: {0:%d} day(s)&quot;, duration)\n      Console.WriteLine(&quot;Time of Travel: {0:dd\\.hh\\:mm\\:ss} days&quot;, duration)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Time of Travel: 1 days\n&#39;       Time of Travel: 01.12:24:02\n&#39;       Time of Travel: 1 day(s)\n&#39;       Time of Travel: 01.12:24:02 days\n</code></pre><p>Custom <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> format strings are also used by the <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_ParseExact_System_String_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">TimeSpan.ParseExact</a> and <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_TryParseExact_System_String_System_String_System_IFormatProvider_System_Globalization_TimeSpanStyles_System_TimeSpan__\" data-linktype=\"relative-path\">TimeSpan.TryParseExact</a> methods to define the required format of input strings for parsing operations. (Parsing converts the string representation of a value to that value.) The following example illustrates the use of standard format strings in parsing operations.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string value = null;\n      TimeSpan interval;\n\n      value = &quot;6&quot;;\n      if (TimeSpan.TryParseExact(value, &quot;%d&quot;, null, out interval))\n         Console.WriteLine(&quot;{0} --&gt; {1}&quot;, value, interval.ToString(&quot;c&quot;));\n      else\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;&quot;, value);\n\n      value = &quot;16:32.05&quot;;\n      if (TimeSpan.TryParseExact(value, @&quot;mm\\:ss\\.ff&quot;, null, out interval))\n         Console.WriteLine(&quot;{0} --&gt; {1}&quot;, value, interval.ToString(&quot;c&quot;));\n      else\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;&quot;, value);\n\n      value= &quot;12.035&quot;;\n      if (TimeSpan.TryParseExact(value, &quot;ss\\\\.fff&quot;, null, out interval))\n         Console.WriteLine(&quot;{0} --&gt; {1}&quot;, value, interval.ToString(&quot;c&quot;));\n      else\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;&quot;, value);\n   }\n}\n// The example displays the following output:\n//       6 --&gt; 6.00:00:00\n//       16:32.05 --&gt; 00:16:32.0500000\n//       12.035 --&gt; 00:00:12.0350000\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Module Example\n   Public Sub Main()\n      Dim value As String = Nothing\n      Dim interval As TimeSpan\n\n      value = &quot;6&quot;\n      If TimeSpan.TryParseExact(value, &quot;%d&quot;, Nothing, interval) Then\n         Console.WriteLine(&quot;{0} --&gt; {1}&quot;, value, interval.ToString(&quot;c&quot;))\n      Else\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;&quot;, value)\n      End If\n\n      value = &quot;16:32.05&quot;\n      If TimeSpan.TryParseExact(value, &quot;mm\\:ss\\.ff&quot;, Nothing, interval) Then\n         Console.WriteLine(&quot;{0} --&gt; {1}&quot;, value, interval.ToString(&quot;c&quot;))\n      Else\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;&quot;, value)\n      End If\n\n      value= &quot;12.035&quot;\n      If TimeSpan.TryParseExact(value, &quot;ss\\.fff&quot;, Nothing, interval) Then\n         Console.WriteLine(&quot;{0} --&gt; {1}&quot;, value, interval.ToString(&quot;c&quot;))\n      Else\n         Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;&quot;, value)\n      End If\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       6 --&gt; 6.00:00:00\n&#39;       16:32.05 --&gt; 00:16:32.0500000\n&#39;       12.035 --&gt; 00:00:12.0350000\n</code></pre><p>The following table describes the custom date and time format specifiers.</p>\n<table>\n<thead>\n<tr>\n<th>Format specifier</th>\n<th>Description</th>\n<th>Examples</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&quot;d&quot;, &quot;%d&quot;</td>\n<td>The number of whole days in the time interval.</td>\n<td><code>new TimeSpan(6, 14, 32, 17, 685):</code> <code>%d --&gt; &quot;6&quot;</code>;  <code>d\\.hh\\:mm --&gt; &quot;6.14:32&quot;</code></td>\n</tr>\n<tr>\n<td>&quot;dd&quot;, &quot;dddddddd&quot;</td>\n<td>The number of whole days in the time interval, padded with leading zeros as needed.</td>\n<td><code>new TimeSpan(6, 14, 32, 17, 685):</code> <code>ddd --&gt; &quot;006&quot;</code>; <code>dd\\.hh\\:mm --&gt; &quot;06.14:32&quot;</code></td>\n</tr>\n<tr>\n<td>&quot;h&quot;, &quot;%h&quot;</td>\n<td>The number of whole hours in the time interval that are not counted as part of days. Single-digit hours do not have a leading zero.</td>\n<td><code>new TimeSpan(6, 14, 32, 17, 685):</code> <code>%h --&gt; &quot;14&quot;</code>; <code>hh\\:mm --&gt; &quot;14:32&quot;</code></td>\n</tr>\n<tr>\n<td>&quot;hh&quot;</td>\n<td>The number of whole hours in the time interval that are not counted as part of days. Single-digit hours have a leading zero.</td>\n<td><code>new TimeSpan(6, 14, 32, 17, 685):</code> <code>hh --&gt; &quot;14&quot;</code>  <code>new TimeSpan(6, 8, 32, 17, 685):</code> <code>hh --&gt; 08</code></td>\n</tr>\n<tr>\n<td>&quot;m&quot;, &quot;%m&quot;</td>\n<td>The number of whole minutes in the time interval that are not included as part of hours or days. Single-digit minutes do not have a leading zero.</td>\n<td><code>new TimeSpan(6, 14, 8, 17, 685):</code> <code>%m --&gt; &quot;8&quot;</code>; <code>h\\:m --&gt; &quot;14:8&quot;</code></td>\n</tr>\n<tr>\n<td>&quot;mm&quot;</td>\n<td>The number of whole minutes in the time interval that are not included as part of hours or days. Single-digit minutes have a leading zero.</td>\n<td><code>new TimeSpan(6, 14, 8, 17, 685):</code> <code>mm --&gt; &quot;08&quot;</code> <code>new TimeSpan(6, 8, 5, 17, 685):</code> <code>d\\.hh\\:mm\\:ss --&gt; 6.08:05:17</code></td>\n</tr>\n<tr>\n<td>&quot;s&quot;, &quot;%s&quot;</td>\n<td>The number of whole seconds in the time interval that are not included as part of hours, days, or minutes. Single-digit seconds do not have a leading zero.</td>\n<td><code>TimeSpan.FromSeconds(12.965):</code> <code>%s --&gt; 12</code>; <code>s\\.fff --&gt; 12.965</code></td>\n</tr>\n<tr>\n<td>&quot;ss&quot;</td>\n<td>The number of whole seconds in the time interval that are not included as part of hours, days, or minutes. Single-digit seconds have a leading zero.</td>\n<td><code>TimeSpan.FromSeconds(6.965):</code> <code>ss --&gt; 06</code>; <code>ss\\.fff --&gt; 06.965</code></td>\n</tr>\n<tr>\n<td>&quot;f&quot;, &quot;%f&quot;</td>\n<td>The tenths of a second in a time interval.</td>\n<td><code>TimeSpan.FromSeconds(6.895):</code> <code>f --&gt; 8</code>; <code>ss\\.f --&gt; 06.8</code></td>\n</tr>\n<tr>\n<td>&quot;ff&quot;</td>\n<td>The hundredths of a second in a time interval.</td>\n<td><code>TimeSpan.FromSeconds(6.895):</code> <code>ff --&gt; 89</code>; <code>ss\\.ff --&gt; 06.89</code></td>\n</tr>\n<tr>\n<td>&quot;fff&quot;</td>\n<td>The milliseconds in a time interval.</td>\n<td><code>TimeSpan.FromSeconds(6.895):</code> <code>fff --&gt; 895</code>; <code>ss\\.fff --&gt; 06.895</code></td>\n</tr>\n<tr>\n<td>&quot;ffff&quot;</td>\n<td>The ten-thousandths of a second in a time interval.</td>\n<td><code>TimeSpan.Parse(&quot;0:0:6.8954321&quot;):</code> <code>ffff --&gt; 8954</code>; <code>ss\\.ffff --&gt; 06.8954</code></td>\n</tr>\n<tr>\n<td>&quot;fffff&quot;</td>\n<td>The hundred-thousandths of a second in a time interval.</td>\n<td><code>TimeSpan.Parse(&quot;0:0:6.8954321&quot;):</code> <code>ffff --&gt; 89543</code>; <code>ss\\.ffff --&gt; 06.89543</code></td>\n</tr>\n<tr>\n<td>&quot;ffffff&quot;</td>\n<td>The millionths of a second in a time interval.</td>\n<td><code>TimeSpan.Parse(&quot;0:0:6.8954321&quot;):</code> <code>ffff --&gt; 895432</code>; <code>ss\\.ffff --&gt; 06.895432</code></td>\n</tr>\n<tr>\n<td>&quot;fffffff&quot;</td>\n<td>The ten-millionths of a second (or the fractional ticks) in a time interval.</td>\n<td><code>TimeSpan.Parse(&quot;0:0:6.8954321&quot;):</code> <code>ffff --&gt; 8954321</code>; <code>ss\\.ffff --&gt; 06.8954321</code></td>\n</tr>\n<tr>\n<td>&quot;F&quot;, &quot;%F&quot;</td>\n<td>The tenths of a second in a time interval. Nothing is displayed if the digit is zero.</td>\n<td><code>TimeSpan.Parse(&quot;00:00:06.32&quot;):</code> <code>%F: 3</code>  <code>TimeSpan.Parse(&quot;0:0:3.091&quot;):</code> <code>ss\\.F: 03.</code></td>\n</tr>\n<tr>\n<td>&quot;FF&quot;</td>\n<td>The hundredths of a second in a time interval. Any fractional trailing zeros or two zero digits are not included.</td>\n<td><code>TimeSpan.Parse(&quot;00:00:06.3291791&quot;):</code> <code>FFFFFF: 32</code>  <code>TimeSpan.Parse(&quot;0:0:3.1900000&quot;):</code> <code>ss\\.FFFFFF: 03.1</code></td>\n</tr>\n<tr>\n<td>&quot;FFF&quot;</td>\n<td>The milliseconds in a time interval. Any fractional trailing zeros are not included.</td>\n<td><code>TimeSpan.Parse(&quot;00:00:06.3291791&quot;):</code> <code>FFFFFF: 329</code>  <code>TimeSpan.Parse(&quot;0:0:3.1900000&quot;):</code> <code>ss\\.FFFFFF: 03.1</code></td>\n</tr>\n<tr>\n<td>&quot;FFFF&quot;</td>\n<td>The ten-thousandths of a second in a time interval. Any fractional trailing zeros are not included.</td>\n<td><code>TimeSpan.Parse(&quot;00:00:06.3291791&quot;):</code> <code>FFFFFF: 3291</code>  <code>TimeSpan.Parse(&quot;0:0:3.1900000&quot;):</code> <code>ss\\.FFFFFF: 03.1</code></td>\n</tr>\n<tr>\n<td>&quot;FFFFF&quot;</td>\n<td>The hundred-thousandths of a second in a time interval. Any fractional trailing zeros are not included.</td>\n<td><code>TimeSpan.Parse(&quot;00:00:06.3291791&quot;):</code> <code>FFFFFF: 32917</code>  <code>TimeSpan.Parse(&quot;0:0:3.1900000&quot;):</code> <code>ss\\.FFFFFF: 03.1</code></td>\n</tr>\n<tr>\n<td>&quot;FFFFFF&quot;</td>\n<td>The millionths of a second in a time interval. Any fractional trailing zeros are not displayed.</td>\n<td><code>TimeSpan.Parse(&quot;00:00:06.3291791&quot;):</code> <code>FFFFFF: 329179</code>  <code>TimeSpan.Parse(&quot;0:0:3.1900000&quot;):</code> <code>ss\\.FFFFFF: 03.1</code></td>\n</tr>\n<tr>\n<td>&quot;FFFFFFF&quot;</td>\n<td>The ten-millions of a second in a time interval. Any fractional trailing zeros or seven zeros are not displayed.</td>\n<td><code>TimeSpan.Parse(&quot;00:00:06.3291791&quot;):</code> <code>FFFFFF: 3291791</code>  <code>TimeSpan.Parse(&quot;0:0:3.1900000&quot;):</code> <code>ss\\.FFFFFF: 03.19</code></td>\n</tr>\n<tr>\n<td>&#39;string&#39;</td>\n<td>Literal string delimiter</td>\n<td><code>new TimeSpan(14, 32, 17):</code> <code>hh&#39;:&#39;mm&#39;:&#39;ss --&gt; &quot;14:32:17&quot;</code></td>\n</tr>\n<tr>\n<td>\\</td>\n<td>The escape character.</td>\n<td><code>new TimeSpan(14, 32, 17):</code> <code>hh\\:mm\\:ss --&gt; &quot;14:32:17&quot;</code></td>\n</tr>\n<tr>\n<td>Any other character</td>\n<td>Any other unescaped character is interpreted as a custom format specifier.</td>\n<td><code>new TimeSpan(14, 32, 17):</code> <code>hh\\:mm\\:ss --&gt; &quot;14:32:17&quot;</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"the-d-custom-format-specifier\">The &quot;d&quot; custom format specifier</h2>\n<p>The &quot;d&quot; custom format specifier outputs the value of the <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_Days\" data-linktype=\"relative-path\">TimeSpan.Days</a> property, which represents the number of whole days in the time interval. It outputs the full number of days in a <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value, even if the value has more than one digit. If the value of the <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_Days\" data-linktype=\"relative-path\">TimeSpan.Days</a> property is zero, the specifier outputs &quot;0&quot;.</p>\n<p>If the &quot;d&quot; custom format specifier is used alone, specify &quot;%d&quot; so that it is not misinterpreted as a standard format string. The following example provides an illustration.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">TimeSpan ts1 = new TimeSpan(16, 4, 3, 17, 250);\nConsole.WriteLine(ts1.ToString(&quot;%d&quot;));\n// Displays 16\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim ts As New TimeSpan(16, 4, 3, 17, 250)\nConsole.WriteLine(ts.ToString(&quot;%d&quot;))\n&#39; Displays 16 \n</code></pre><p>The following example illustrates the use of the &quot;d&quot; custom format specifier.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">TimeSpan ts2 = new TimeSpan(4, 3, 17);\nConsole.WriteLine(ts2.ToString(xref:&quot;d\\.hh\\:mm\\:ss&quot;));\n\nTimeSpan ts3 = new TimeSpan(3, 4, 3, 17);\nConsole.WriteLine(ts3.ToString(xref:&quot;d\\.hh\\:mm\\:ss&quot;));\n// The example displays the following output:\n//       0.04:03:17\n//       3.04:03:17\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim ts2 As New TimeSpan(4, 3, 17)\nConsole.WriteLine(ts2.ToString(&quot;d\\.hh\\:mm\\:ss&quot;))\n\nDim ts3 As New TimeSpan(3, 4, 3, 17)\nConsole.WriteLine(ts3.ToString(&quot;d\\.hh\\:mm\\:ss&quot;))\n&#39; The example displays the following output:\n&#39;       0.04:03:17\n&#39;       3.04:03:17\n</code></pre><h2 id=\"the-dd-dddddddd-custom-format-specifiers\">The &quot;dd&quot;-&quot;dddddddd&quot; custom format specifiers</h2>\n<p>The &quot;dd&quot;, &quot;ddd&quot;, &quot;dddd&quot;, &quot;ddddd&quot;, &quot;dddddd&quot;, &quot;ddddddd&quot;, and &quot;dddddddd&quot; custom format specifiers output the value of the <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_Days\" data-linktype=\"relative-path\">TimeSpan.Days</a> property, which represents the number of whole days in the time interval. </p>\n<p>The output string includes a minimum number of digits specified by the number of &quot;d&quot; characters in the format specifier, and it is padded with leading zeros as needed. If the digits in the number of days exceed the number of &quot;d&quot; characters in the format specifier, the full number of days is output in the result string.</p>\n<p>The following example uses these format specifiers to display the string representation of two <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> values. The value of the days component of the first time interval is zero; the value of the days component of the second is 365.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">TimeSpan ts1 = new TimeSpan(0, 23, 17, 47);\nTimeSpan ts2 = new TimeSpan(365, 21, 19, 45);\n\nfor (int ctr = 2; ctr &lt;= 8; ctr++)\n{\n   string fmt = new String(&#39;d&#39;, ctr) + @&quot;\\.hh\\:mm\\:ss&quot;;\n   Console.WriteLine(&quot;{0} --&gt; {1:&quot; + fmt + &quot;}&quot;, fmt, ts1);  \n   Console.WriteLine(&quot;{0} --&gt; {1:&quot; + fmt + &quot;}&quot;, fmt, ts2);\n   Console.WriteLine();\n}  \n// The example displays the following output:\n//       dd\\.hh\\:mm\\:ss --&gt; 00.23:17:47\n//       dd\\.hh\\:mm\\:ss --&gt; 365.21:19:45\n//       \n//       ddd\\.hh\\:mm\\:ss --&gt; 000.23:17:47\n//       ddd\\.hh\\:mm\\:ss --&gt; 365.21:19:45\n//       \n//       dddd\\.hh\\:mm\\:ss --&gt; 0000.23:17:47\n//       dddd\\.hh\\:mm\\:ss --&gt; 0365.21:19:45\n//       \n//       ddddd\\.hh\\:mm\\:ss --&gt; 00000.23:17:47\n//       ddddd\\.hh\\:mm\\:ss --&gt; 00365.21:19:45\n//       \n//       dddddd\\.hh\\:mm\\:ss --&gt; 000000.23:17:47\n//       dddddd\\.hh\\:mm\\:ss --&gt; 000365.21:19:45\n//       \n//       ddddddd\\.hh\\:mm\\:ss --&gt; 0000000.23:17:47\n//       ddddddd\\.hh\\:mm\\:ss --&gt; 0000365.21:19:45\n//       \n//       dddddddd\\.hh\\:mm\\:ss --&gt; 00000000.23:17:47\n//       dddddddd\\.hh\\:mm\\:ss --&gt; 00000365.21:19:45\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim ts1 As New TimeSpan(0, 23, 17, 47)\nDim ts2 As New TimeSpan(365, 21, 19, 45)\n\nFor ctr As Integer = 2 To 8\n   Dim fmt As String = New String(&quot;d&quot;c, ctr) + &quot;\\.hh\\:mm\\:ss&quot;\n   Console.WriteLine(&quot;{0} --&gt; {1:&quot; + fmt + &quot;}&quot;, fmt, ts1) \n   Console.WriteLine(&quot;{0} --&gt; {1:&quot; + fmt + &quot;}&quot;, fmt, ts2)\n   Console.WriteLine()\nNext  \n&#39; The example displays the following output:\n&#39;       dd\\.hh\\:mm\\:ss --&gt; 00.23:17:47\n&#39;       dd\\.hh\\:mm\\:ss --&gt; 365.21:19:45\n&#39;       \n&#39;       ddd\\.hh\\:mm\\:ss --&gt; 000.23:17:47\n&#39;       ddd\\.hh\\:mm\\:ss --&gt; 365.21:19:45\n&#39;       \n&#39;       dddd\\.hh\\:mm\\:ss --&gt; 0000.23:17:47\n&#39;       dddd\\.hh\\:mm\\:ss --&gt; 0365.21:19:45\n&#39;       \n&#39;       ddddd\\.hh\\:mm\\:ss --&gt; 00000.23:17:47\n&#39;       ddddd\\.hh\\:mm\\:ss --&gt; 00365.21:19:45\n&#39;       \n&#39;       dddddd\\.hh\\:mm\\:ss --&gt; 000000.23:17:47\n&#39;       dddddd\\.hh\\:mm\\:ss --&gt; 000365.21:19:45\n&#39;       \n&#39;       ddddddd\\.hh\\:mm\\:ss --&gt; 0000000.23:17:47\n&#39;       ddddddd\\.hh\\:mm\\:ss --&gt; 0000365.21:19:45\n&#39;       \n&#39;       dddddddd\\.hh\\:mm\\:ss --&gt; 00000000.23:17:47\n&#39;       dddddddd\\.hh\\:mm\\:ss --&gt; 00000365.21:19:45\n</code></pre><h2 id=\"the-h-custom-format-specifier\">The &quot;h&quot; custom format specifier</h2>\n<p>The &quot;h&quot; custom format specifier outputs the value of the <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_Hours\" data-linktype=\"relative-path\">TimeSpan.Hours</a> property, which represents the number of whole hours in the time interval that is not counted as part of its day component. It returns a one-digit string value if the value of the <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_Hours\" data-linktype=\"relative-path\">TimeSpan.Hours</a> property is 0 through 9, and it returns a two-digit string value if the value of the <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_Hours\" data-linktype=\"relative-path\">TimeSpan.Hours</a> property ranges from 10 to 23.</p>\n<p>If the &quot;h&quot; custom format specifier is used alone, specify &quot;%h&quot; so that it is not misinterpreted as a standard format string. The following example provides an illustration.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">TimeSpan ts = new TimeSpan(3, 42, 0);\nConsole.WriteLine(&quot;{0:%h} hours {0:%m} minutes&quot;, ts);\n// The example displays the following output:\n//       3 hours 42 minutes\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim ts As New TimeSpan(3, 42, 0)\nConsole.WriteLine(&quot;{0:%h} hours {0:%m} minutes&quot;, ts)\n&#39; The example displays the following output:\n&#39;       3 hours 42 minutes\n</code></pre><p>Ordinarily, in a parsing operation, an input string that includes only a single number is interpreted as the number of days. You can use the &quot;%h&quot; custom format specifier instead to interpret the numeric string as the number of hours. The following example provides an illustration.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">string value = &quot;8&quot;;\nTimeSpan interval;\nif (TimeSpan.TryParseExact(value, &quot;%h&quot;, null, out interval))\n   Console.WriteLine(interval.ToString(&quot;c&quot;));\nelse\n   Console.WriteLine(&quot;Unable to convert &#39;{0}&#39; to a time interval&quot;, \n                     value);   \n// The example displays the following output:\n//       08:00:00\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim value As String = &quot;8&quot;\nDim interval As TimeSpan\nIf TimeSpan.TryParseExact(value, &quot;%h&quot;, Nothing, interval) Then\n   Console.WriteLine(interval.ToString(&quot;c&quot;))\nElse\n   Console.WriteLine(&quot;Unable to convert &#39;{0}&#39; to a time interval&quot;, \n                     value)   \nEnd If   \n&#39; The example displays the following output:\n&#39;       08:00:00\n</code></pre><p>The following example illustrates the use of the &quot;h&quot; custom format specifier.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">TimeSpan ts1 = new TimeSpan(14, 3, 17);\nConsole.WriteLine(ts1.ToString(xref:&quot;d\\.h\\:mm\\:ss&quot;));\n\nTimeSpan ts2 = new TimeSpan(3, 4, 3, 17);\nConsole.WriteLine(ts2.ToString(xref:&quot;d\\.h\\:mm\\:ss&quot;));\n// The example displays the following output:\n//       0.14:03:17\n//       3.4:03:17\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim ts1 As New TimeSpan(14, 3, 17)\nConsole.WriteLine(ts1.ToString(&quot;d\\.h\\:mm\\:ss&quot;))\n\nDim ts2 As New TimeSpan(3, 4, 3, 17)\nConsole.WriteLine(ts2.ToString(&quot;d\\.h\\:mm\\:ss&quot;))\n&#39; The example displays the following output:\n&#39;       0.14:03:17\n&#39;       3.4:03:17\n</code></pre><h2 id=\"the-hh-custom-format-specifier\">The &quot;hh&quot; custom format specifier</h2>\n<p>The &quot;hh&quot; custom format specifier outputs the value of the <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_Hours\" data-linktype=\"relative-path\">TimeSpan.Hours</a> property, which represents the number of whole hours in the time interval that is not counted as part of its day component. For values from 0 through 9, the output string includes a leading zero. </p>\n<p>Ordinarily, in a parsing operation, an input string that includes only a single number is interpreted as the number of days. You can use the &quot;hh&quot; custom format specifier instead to interpret the numeric string as the number of hours. The following example provides an illustration.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">string value = &quot;08&quot;;\nTimeSpan interval;\nif (TimeSpan.TryParseExact(value, &quot;hh&quot;, null, out interval))\n   Console.WriteLine(interval.ToString(&quot;c&quot;));\nelse\n   Console.WriteLine(&quot;Unable to convert &#39;{0}&#39; to a time interval&quot;, \n                     value);   \n// The example displays the following output:\n//       08:00:00 \n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim value As String = &quot;08&quot;\nDim interval As TimeSpan\nIf TimeSpan.TryParseExact(value, &quot;hh&quot;, Nothing, interval) Then\n   Console.WriteLine(interval.ToString(&quot;c&quot;))\nElse\n   Console.WriteLine(&quot;Unable to convert &#39;{0}&#39; to a time interval&quot;, \n                     value)   \nEnd If   \n&#39; The example displays the following output:\n&#39;       08:00:00\n</code></pre><p>The following example illustrates the use of the &quot;hh&quot; custom format specifier.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">TimeSpan ts1 = new TimeSpan(14, 3, 17);\nConsole.WriteLine(ts1.ToString(xref:&quot;d\\.hh\\:mm\\:ss&quot;));\n\nTimeSpan ts2 = new TimeSpan(3, 4, 3, 17);\nConsole.WriteLine(ts2.ToString(xref:&quot;d\\.hh\\:mm\\:ss&quot;));\n// The example displays the following output:\n//       0.14:03:17\n//       3.04:03:17\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim ts1 As New TimeSpan(14, 3, 17)\nConsole.WriteLine(ts1.ToString(&quot;d\\.hh\\:mm\\:ss&quot;))\n\nDim ts2 As New TimeSpan(3, 4, 3, 17)\nConsole.WriteLine(ts2.ToString(&quot;d\\.hh\\:mm\\:ss&quot;))\n&#39; The example displays the following output:\n&#39;       0.14:03:17\n&#39;       3.04:03:17\n</code></pre><h2 id=\"the-m-custom-format-specifier\">The &quot;m&quot; custom format specifier</h2>\n<p>The &quot;m&quot; custom format specifier outputs the value of the <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_Minutes\" data-linktype=\"relative-path\">TimeSpan.Minutes</a> property, which represents the number of whole minutes in the time interval that is not counted as part of its day component. It returns a one-digit string value if the value of the <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_Minutes\" data-linktype=\"relative-path\">TimeSpan.Minutes</a> property is 0 through 9, and it returns a two-digit string value if the value of the <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_Minutes\" data-linktype=\"relative-path\">TimeSpan.Minutes</a> property ranges from 10 to 59.</p>\n<p>If the &quot;m&quot; custom format specifier is used alone, specify &quot;%m&quot; so that it is not misinterpreted as a standard format string. The following example provides an illustration.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">TimeSpan ts = new TimeSpan(3, 42, 0);\nConsole.WriteLine(&quot;{0:%h} hours {0:%m} minutes&quot;, ts);\n// The example displays the following output:\n//       3 hours 42 minutes\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim ts As New TimeSpan(3, 42, 0)\nConsole.WriteLine(&quot;{0:%h} hours {0:%m} minutes&quot;, ts)\n&#39; The example displays the following output:\n&#39;       3 hours 42 minutes\n</code></pre><p>Ordinarily, in a parsing operation, an input string that includes only a single number is interpreted as the number of days. You can use the &quot;%m&quot; custom format specifier instead to interpret the numeric string as the number of minutes. The following example provides an illustration.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">string value = &quot;3&quot;;\nTimeSpan interval;\nif (TimeSpan.TryParseExact(value, &quot;%m&quot;, null, out interval))\n   Console.WriteLine(interval.ToString(&quot;c&quot;));\nelse\n   Console.WriteLine(&quot;Unable to convert &#39;{0}&#39; to a time interval&quot;, \n                     value);   \n// The example displays the following output:\n//       00:03:00\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim value As String = &quot;3&quot;\nDim interval As TimeSpan\nIf TimeSpan.TryParseExact(value, &quot;%m&quot;, Nothing, interval) Then\n   Console.WriteLine(interval.ToString(&quot;c&quot;))\nElse\n   Console.WriteLine(&quot;Unable to convert &#39;{0}&#39; to a time interval&quot;, \n                     value)   \nEnd If   \n&#39; The example displays the following output:\n&#39;       00:03:00                              \n</code></pre><p>The following example illustrates the use of the &quot;m&quot; custom format specifier.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">TimeSpan ts1 = new TimeSpan(0, 6, 32);\nConsole.WriteLine(&quot;{0:m\\\\:ss} minutes&quot;, ts1);\n\nTimeSpan ts2 = new TimeSpan(3, 4, 3, 17);\nConsole.WriteLine(&quot;Elapsed time: {0:m\\\\:ss}&quot;, ts2);\n// The example displays the following output:\n//       6:32 minutes\n//       Elapsed time: 18:44\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim ts1 As New TimeSpan(0, 6, 32)\nConsole.WriteLine(&quot;{0:m\\:ss} minutes&quot;, ts1)\n\nDim ts2 As New TimeSpan(0, 18, 44)\nConsole.WriteLine(&quot;Elapsed time: {0:m\\:ss}&quot;, ts2)\n&#39; The example displays the following output:\n&#39;       6:32 minutes\n&#39;       Elapsed time: 18:44\n</code></pre><h2 id=\"the-mm-custom-format-specifier\">The &quot;mm&quot; custom format specifier</h2>\n<p>The &quot;mm&quot; custom format specifier outputs the value of the <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_Minutes\" data-linktype=\"relative-path\">TimeSpan.Minutes</a> property, which represents the number of whole minutes in the time interval that is not included as part of its hours or days component. For values from 0 through 9, the output string includes a leading zero. </p>\n<p>Ordinarily, in a parsing operation, an input string that includes only a single number is interpreted as the number of days. You can use the &quot;mm&quot; custom format specifier instead to interpret the numeric string as the number of minutes. The following example provides an illustration.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">string value = &quot;07&quot;;\nTimeSpan interval;\nif (TimeSpan.TryParseExact(value, &quot;mm&quot;, null, out interval))\n   Console.WriteLine(interval.ToString(&quot;c&quot;));\nelse\n   Console.WriteLine(&quot;Unable to convert &#39;{0}&#39; to a time interval&quot;, \n                     value);   \n// The example displays the following output:\n//       00:07:00\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim value As String = &quot;05&quot;\nDim interval As TimeSpan\nIf TimeSpan.TryParseExact(value, &quot;mm&quot;, Nothing, interval) Then\n   Console.WriteLine(interval.ToString(&quot;c&quot;))\nElse\n   Console.WriteLine(&quot;Unable to convert &#39;{0}&#39; to a time interval&quot;, \n                     value)   \nEnd If   \n&#39; The example displays the following output:\n&#39;       00:05:00\n</code></pre><p>The following example illustrates the use of the &quot;mm&quot; custom format specifier.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">TimeSpan departTime = new TimeSpan(11, 12, 00);\nTimeSpan arriveTime = new TimeSpan(16, 28, 00);\nConsole.WriteLine(&quot;Travel time: {0:hh\\\\:mm}&quot;, \n                  arriveTime - departTime);\n// The example displays the following output:\n//       Travel time: 05:16\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim departTime As New TimeSpan(11, 12, 00)\nDim arriveTime As New TimeSpan(16, 28, 00)\nConsole.WriteLine(&quot;Travel time: {0:hh\\:mm}&quot;, \n                  arriveTime - departTime)\n&#39; The example displays the following output:\n&#39;       Travel time: 05:16\n</code></pre><h2 id=\"the-s-custom-format-specifier\">The &quot;s&quot; custom format specifier</h2>\n<p>The &quot;s&quot; custom format specifier outputs the value of the <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_Seconds\" data-linktype=\"relative-path\">TimeSpan.Seconds</a> property, which represents the number of whole seconds in the time interval that is not included as part of its hours, days, or minutes component. It returns a one-digit string value if the value of the <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_Seconds\" data-linktype=\"relative-path\">TimeSpan.Seconds</a> property is 0 through 9, and it returns a two-digit string value if the value of the <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_Seconds\" data-linktype=\"relative-path\">TimeSpan.Seconds</a> property ranges from 10 to 59. </p>\n<p>If the &quot;s&quot; custom format specifier is used alone, specify &quot;%s&quot; so that it is not misinterpreted as a standard format string. The following example provides an illustration.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">TimeSpan ts = TimeSpan.FromSeconds(12.465);\nConsole.WriteLine(ts.ToString(&quot;%s&quot;));\n// The example displays the following output:\n//       12\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim ts As TimeSpan = TimeSpan.FromSeconds(12.465)\nConsole.WriteLine(ts.ToString(&quot;%s&quot;))\n&#39; The example displays the following output:\n&#39;       12\n</code></pre><p>Ordinarily, in a parsing operation, an input string that includes only a single number is interpreted as the number of days. You can use the &quot;%s&quot; custom format specifier instead to interpret the numeric string as the number of seconds. The following example provides an illustration.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">string value = &quot;9&quot;;\nTimeSpan interval;\nif (TimeSpan.TryParseExact(value, &quot;%s&quot;, null, out interval))\n   Console.WriteLine(interval.ToString(&quot;c&quot;));\nelse\n   Console.WriteLine(&quot;Unable to convert &#39;{0}&#39; to a time interval&quot;, \n                     value);   \n// The example displays the following output:\n//       00:00:09\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim value As String = &quot;9&quot;\nDim interval As TimeSpan\nIf TimeSpan.TryParseExact(value, &quot;%s&quot;, Nothing, interval) Then\n   Console.WriteLine(interval.ToString(&quot;c&quot;))\nElse\n   Console.WriteLine(&quot;Unable to convert &#39;{0}&#39; to a time interval&quot;, \n                     value)   \nEnd If   \n&#39; The example displays the following output:\n&#39;       00:00:09\n</code></pre><p>The following example illustrates the use of the &quot;s&quot; custom format specifier.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">TimeSpan startTime = new TimeSpan(0, 12, 30, 15, 0);\nTimeSpan endTime = new TimeSpan(0, 12, 30, 21, 3);\nConsole.WriteLine(xref:&quot;Elapsed Time: {0:s\\:fff} seconds&quot;, \n                  endTime - startTime);\n// The example displays the following output:\n//       Elapsed Time: 6:003 seconds      \n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim startTime As New TimeSpan(0, 12, 30, 15, 0)\nDim endTime As New TimeSpan(0, 12, 30, 21, 3)\nConsole.WriteLine(&quot;Elapsed Time: {0:s\\:fff} seconds&quot;, \n                  endTime - startTime)\n&#39; The example displays the following output:\n&#39;       Elapsed Time: 6:003 seconds\n</code></pre><h2 id=\"the-ss-custom-format-specifier\">The &quot;ss&quot; custom format specifier</h2>\n<p>The &quot;ss&quot; custom format specifier outputs the value of the <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_Seconds\" data-linktype=\"relative-path\">TimeSpan.Seconds</a> property, which represents the number of whole seconds in the time interval that is not included as part of its hours, days, or minutes component. For values from 0 through 9, the output string includes a leading zero. </p>\n<p>Ordinarily, in a parsing operation, an input string that includes only a single number is interpreted as the number of days. You can use the &quot;ss&quot; custom format specifier instead to interpret the numeric string as the number of seconds. The following example provides an illustration.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">string[] values = { &quot;49&quot;, &quot;9&quot;, &quot;06&quot; };\nTimeSpan interval;\nforeach (string value in values)\n{\n   if (TimeSpan.TryParseExact(value, &quot;ss&quot;, null, out interval))\n      Console.WriteLine(interval.ToString(&quot;c&quot;));\n   else\n      Console.WriteLine(&quot;Unable to convert &#39;{0}&#39; to a time interval&quot;, \n                        value);   \n}\n// The example displays the following output:\n//       00:00:49\n//       Unable to convert &#39;9&#39; to a time interval\n//       00:00:06\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim values() As String = { &quot;49&quot;, &quot;9&quot;, &quot;06&quot; }\nDim interval As TimeSpan\nFor Each value As String In values\n   If TimeSpan.TryParseExact(value, &quot;ss&quot;, Nothing, interval) Then\n      Console.WriteLine(interval.ToString(&quot;c&quot;))\n   Else\n      Console.WriteLine(&quot;Unable to convert &#39;{0}&#39; to a time interval&quot;, \n                        value)   \n   End If   \nNext   \n&#39; The example displays the following output:\n&#39;       00:00:49\n&#39;       Unable to convert &#39;9&#39; to a time interval\n&#39;       00:00:06\n</code></pre><p>The following example illustrates the use of the &quot;ss&quot; custom format specifier.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">TimeSpan interval1 = TimeSpan.FromSeconds(12.60);\nConsole.WriteLine(interval1.ToString(xref:&quot;ss\\.fff&quot;));\n\nTimeSpan interval2 = TimeSpan.FromSeconds(6.485);\nConsole.WriteLine(interval2.ToString(xref:&quot;ss\\.fff&quot;));\n// The example displays the following output:\n//       12.600\n//       06.485\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim interval1 As TimeSpan = TimeSpan.FromSeconds(12.60)\nConsole.WriteLine(interval1.ToString(&quot;ss\\.fff&quot;))\nDim interval2 As TimeSpan = TimeSpan.FromSeconds(6.485)\nConsole.WriteLine(interval2.ToString(&quot;ss\\.fff&quot;))\n&#39; The example displays the following output:\n&#39;       12.600\n&#39;       06.485\n</code></pre><h2 id=\"the-f-custom-format-specifier\">The &quot;f&quot; custom format specifier</h2>\n<p>The &quot;f&quot; custom format specifier outputs the tenths of a second in a time interval. In a formatting operation, any remaining fractional digits are truncated. In a parsing operation that calls the <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_ParseExact_System_String_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">TimeSpan.ParseExact</a> or <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_TryParseExact_System_String_System_String_System_IFormatProvider_System_Globalization_TimeSpanStyles_System_TimeSpan__\" data-linktype=\"relative-path\">TimeSpan.TryParseExact</a> method, the input string must contain exactly one fractional digit. </p>\n<p>If the &quot;f&quot; custom format specifier is used alone, specify &quot;%f&quot; so that it is not misinterpreted as a standard format string.</p>\n<p>The following example uses the &quot;f&quot; custom format specifier to display the tenths of a second in a <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value. &quot;f&quot; is used first as the only format specifier, and then combined with the &quot;s&quot; specifier in a custom format string.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">TimeSpan ts = new TimeSpan(1003498765432);\nstring fmt;\nConsole.WriteLine(ts.ToString(&quot;c&quot;));\nConsole.WriteLine();\n\nfor (int ctr = 1; ctr &lt;= 7; ctr++) {\n   fmt = new String(&#39;f&#39;, ctr);\n   if (fmt.Length == 1) fmt = &quot;%&quot; + fmt;\n   Console.WriteLine(&quot;{0,10}: {1:&quot; + fmt + &quot;}&quot;, fmt, ts);\n} \nConsole.WriteLine();\n\nfor (int ctr = 1; ctr &lt;= 7; ctr++) {\n   fmt = new String(&#39;f&#39;, ctr);\n   Console.WriteLine(&quot;{0,10}: {1:s\\\\.&quot; + fmt + &quot;}&quot;, &quot;s\\\\.&quot; + fmt, ts);\n}\n// The example displays the following output:\n//               %f: 8\n//               ff: 87\n//              fff: 876\n//             ffff: 8765\n//            fffff: 87654\n//           ffffff: 876543\n//          fffffff: 8765432\n//       \n//              s\\.f: 29.8\n//             s\\.ff: 29.87\n//            s\\.fff: 29.876\n//           s\\.ffff: 29.8765\n//          s\\.fffff: 29.87654\n//         s\\.ffffff: 29.876543\n//        s\\.fffffff: 29.8765432\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim ts As New TimeSpan(1003498765432)\nDim fmt As String\nConsole.WriteLine(ts.ToString(&quot;c&quot;))\nConsole.WriteLine()\n\nFor ctr = 1 To 7\n   fmt = New String(&quot;f&quot;c, ctr)\n   If fmt.Length = 1 Then fmt = &quot;%&quot; + fmt\n   Console.WriteLine(&quot;{0,10}: {1:&quot; + fmt + &quot;}&quot;, fmt, ts)\nNext \nConsole.WriteLine()\n\nFor ctr = 1 To 7\n   fmt = New String(&quot;f&quot;c, ctr)\n   Console.WriteLine(&quot;{0,10}: {1:s\\.&quot; + fmt + &quot;}&quot;, &quot;s\\.&quot; + fmt, ts)\nNext\n&#39; The example displays the following output:\n&#39;            %f: 8\n&#39;            ff: 87\n&#39;           fff: 876\n&#39;          ffff: 8765\n&#39;         fffff: 87654\n&#39;        ffffff: 876543\n&#39;       fffffff: 8765432\n&#39;    \n&#39;           s\\.f: 29.8\n&#39;          s\\.ff: 29.87\n&#39;         s\\.fff: 29.876\n&#39;        s\\.ffff: 29.8765\n&#39;       s\\.fffff: 29.87654\n&#39;      s\\.ffffff: 29.876543\n&#39;     s\\.fffffff: 29.8765432\n</code></pre><h2 id=\"the-ff-custom-format-specifier\">The &quot;ff&quot; custom format specifier</h2>\n<p>The &quot;ff&quot; custom format specifier outputs the hundredths of a second in a time interval. In a formatting operation, any remaining fractional digits are truncated. In a parsing operation that calls the <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_ParseExact_System_String_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">TimeSpan.ParseExact</a> or <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_TryParseExact_System_String_System_String_System_IFormatProvider_System_Globalization_TimeSpanStyles_System_TimeSpan__\" data-linktype=\"relative-path\">TimeSpan.TryParseExact</a> method, the input string must contain exactly two fractional digits. </p>\n<p>The following example uses the &quot;ff&quot; custom format specifier to display the hundredths of a second in a <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value. &quot;ff&quot; is used first as the only format specifier, and then combined with the &quot;s&quot; specifier in a custom format string.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">TimeSpan ts = new TimeSpan(1003498765432);\nstring fmt;\nConsole.WriteLine(ts.ToString(&quot;c&quot;));\nConsole.WriteLine();\n\nfor (int ctr = 1; ctr &lt;= 7; ctr++) {\n   fmt = new String(&#39;f&#39;, ctr);\n   if (fmt.Length == 1) fmt = &quot;%&quot; + fmt;\n   Console.WriteLine(&quot;{0,10}: {1:&quot; + fmt + &quot;}&quot;, fmt, ts);\n} \nConsole.WriteLine();\n\nfor (int ctr = 1; ctr &lt;= 7; ctr++) {\n   fmt = new String(&#39;f&#39;, ctr);\n   Console.WriteLine(&quot;{0,10}: {1:s\\\\.&quot; + fmt + &quot;}&quot;, &quot;s\\\\.&quot; + fmt, ts);\n}\n// The example displays the following output:\n//               %f: 8\n//               ff: 87\n//              fff: 876\n//             ffff: 8765\n//            fffff: 87654\n//           ffffff: 876543\n//          fffffff: 8765432\n//       \n//              s\\.f: 29.8\n//             s\\.ff: 29.87\n//            s\\.fff: 29.876\n//           s\\.ffff: 29.8765\n//          s\\.fffff: 29.87654\n//         s\\.ffffff: 29.876543\n//        s\\.fffffff: 29.8765432\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim ts As New TimeSpan(1003498765432)\nDim fmt As String\nConsole.WriteLine(ts.ToString(&quot;c&quot;))\nConsole.WriteLine()\n\nFor ctr = 1 To 7\n   fmt = New String(&quot;f&quot;c, ctr)\n   If fmt.Length = 1 Then fmt = &quot;%&quot; + fmt\n   Console.WriteLine(&quot;{0,10}: {1:&quot; + fmt + &quot;}&quot;, fmt, ts)\nNext \nConsole.WriteLine()\n\nFor ctr = 1 To 7\n   fmt = New String(&quot;f&quot;c, ctr)\n   Console.WriteLine(&quot;{0,10}: {1:s\\.&quot; + fmt + &quot;}&quot;, &quot;s\\.&quot; + fmt, ts)\nNext\n&#39; The example displays the following output:\n&#39;            %f: 8\n&#39;            ff: 87\n&#39;           fff: 876\n&#39;          ffff: 8765\n&#39;         fffff: 87654\n&#39;        ffffff: 876543\n&#39;       fffffff: 8765432\n&#39;    \n&#39;           s\\.f: 29.8\n&#39;          s\\.ff: 29.87\n&#39;         s\\.fff: 29.876\n&#39;        s\\.ffff: 29.8765\n&#39;       s\\.fffff: 29.87654\n&#39;      s\\.ffffff: 29.876543\n&#39;     s\\.fffffff: 29.8765432\n</code></pre><h2 id=\"the-fff-custom-format-specifier\">The &quot;fff&quot; custom format specifier</h2>\n<p>The &quot;fff&quot; custom format specifier (with three &quot;f&quot; characters) outputs the milliseconds in a time interval. In a formatting operation, any remaining fractional digits are truncated. In a parsing operation that calls the <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_ParseExact_System_String_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">TimeSpan.ParseExact</a> or <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_TryParseExact_System_String_System_String_System_IFormatProvider_System_Globalization_TimeSpanStyles_System_TimeSpan__\" data-linktype=\"relative-path\">TimeSpan.TryParseExact</a> method, the input string must contain exactly three fractional digits. </p>\n<p>The following example uses the &quot;fff&quot; custom format specifier to display the milliseconds in a <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value. &quot;fff&quot; is used first as the only format specifier, and then combined with the &quot;s&quot; specifier in a custom format string.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">TimeSpan ts = new TimeSpan(1003498765432);\nstring fmt;\nConsole.WriteLine(ts.ToString(&quot;c&quot;));\nConsole.WriteLine();\n\nfor (int ctr = 1; ctr &lt;= 7; ctr++) {\n   fmt = new String(&#39;f&#39;, ctr);\n   if (fmt.Length == 1) fmt = &quot;%&quot; + fmt;\n   Console.WriteLine(&quot;{0,10}: {1:&quot; + fmt + &quot;}&quot;, fmt, ts);\n} \nConsole.WriteLine();\n\nfor (int ctr = 1; ctr &lt;= 7; ctr++) {\n   fmt = new String(&#39;f&#39;, ctr);\n   Console.WriteLine(&quot;{0,10}: {1:s\\\\.&quot; + fmt + &quot;}&quot;, &quot;s\\\\.&quot; + fmt, ts);\n}\n// The example displays the following output:\n//               %f: 8\n//               ff: 87\n//              fff: 876\n//             ffff: 8765\n//            fffff: 87654\n//           ffffff: 876543\n//          fffffff: 8765432\n//       \n//              s\\.f: 29.8\n//             s\\.ff: 29.87\n//            s\\.fff: 29.876\n//           s\\.ffff: 29.8765\n//          s\\.fffff: 29.87654\n//         s\\.ffffff: 29.876543\n//        s\\.fffffff: 29.8765432\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim ts As New TimeSpan(1003498765432)\nDim fmt As String\nConsole.WriteLine(ts.ToString(&quot;c&quot;))\nConsole.WriteLine()\n\nFor ctr = 1 To 7\n   fmt = New String(&quot;f&quot;c, ctr)\n   If fmt.Length = 1 Then fmt = &quot;%&quot; + fmt\n   Console.WriteLine(&quot;{0,10}: {1:&quot; + fmt + &quot;}&quot;, fmt, ts)\nNext \nConsole.WriteLine()\n\nFor ctr = 1 To 7\n   fmt = New String(&quot;f&quot;c, ctr)\n   Console.WriteLine(&quot;{0,10}: {1:s\\.&quot; + fmt + &quot;}&quot;, &quot;s\\.&quot; + fmt, ts)\nNext\n&#39; The example displays the following output:\n&#39;            %f: 8\n&#39;            ff: 87\n&#39;           fff: 876\n&#39;          ffff: 8765\n&#39;         fffff: 87654\n&#39;        ffffff: 876543\n&#39;       fffffff: 8765432\n&#39;    \n&#39;           s\\.f: 29.8\n&#39;          s\\.ff: 29.87\n&#39;         s\\.fff: 29.876\n&#39;        s\\.ffff: 29.8765\n&#39;       s\\.fffff: 29.87654\n&#39;      s\\.ffffff: 29.876543\n&#39;     s\\.fffffff: 29.8765432\n</code></pre><h2 id=\"the-ffff-custom-format-specifier\">The &quot;ffff&quot; custom format specifier</h2>\n<p>The &quot;ffff&quot; custom format specifier (with four &quot;f&quot; characters) outputs the ten-thousandths of a second in a time interval. In a formatting operation, any remaining fractional digits are truncated. In a parsing operation that calls the <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_ParseExact_System_String_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">TimeSpan.ParseExact</a> or <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_TryParseExact_System_String_System_String_System_IFormatProvider_System_Globalization_TimeSpanStyles_System_TimeSpan__\" data-linktype=\"relative-path\">TimeSpan.TryParseExact</a> method, the input string must contain exactly four fractional digits. </p>\n<p>The following example uses the &quot;ffff&quot; custom format specifier to display the ten-thousandths of a second in a <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value. &quot;ffff&quot; is used first as the only format specifier, and then combined with the &quot;s&quot; specifier in a custom format string.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">TimeSpan ts = new TimeSpan(1003498765432);\nstring fmt;\nConsole.WriteLine(ts.ToString(&quot;c&quot;));\nConsole.WriteLine();\n\nfor (int ctr = 1; ctr &lt;= 7; ctr++) {\n   fmt = new String(&#39;f&#39;, ctr);\n   if (fmt.Length == 1) fmt = &quot;%&quot; + fmt;\n   Console.WriteLine(&quot;{0,10}: {1:&quot; + fmt + &quot;}&quot;, fmt, ts);\n} \nConsole.WriteLine();\n\nfor (int ctr = 1; ctr &lt;= 7; ctr++) {\n   fmt = new String(&#39;f&#39;, ctr);\n   Console.WriteLine(&quot;{0,10}: {1:s\\\\.&quot; + fmt + &quot;}&quot;, &quot;s\\\\.&quot; + fmt, ts);\n}\n// The example displays the following output:\n//               %f: 8\n//               ff: 87\n//              fff: 876\n//             ffff: 8765\n//            fffff: 87654\n//           ffffff: 876543\n//          fffffff: 8765432\n//       \n//              s\\.f: 29.8\n//             s\\.ff: 29.87\n//            s\\.fff: 29.876\n//           s\\.ffff: 29.8765\n//          s\\.fffff: 29.87654\n//         s\\.ffffff: 29.876543\n//        s\\.fffffff: 29.8765432\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim ts As New TimeSpan(1003498765432)\nDim fmt As String\nConsole.WriteLine(ts.ToString(&quot;c&quot;))\nConsole.WriteLine()\n\nFor ctr = 1 To 7\n   fmt = New String(&quot;f&quot;c, ctr)\n   If fmt.Length = 1 Then fmt = &quot;%&quot; + fmt\n   Console.WriteLine(&quot;{0,10}: {1:&quot; + fmt + &quot;}&quot;, fmt, ts)\nNext \nConsole.WriteLine()\n\nFor ctr = 1 To 7\n   fmt = New String(&quot;f&quot;c, ctr)\n   Console.WriteLine(&quot;{0,10}: {1:s\\.&quot; + fmt + &quot;}&quot;, &quot;s\\.&quot; + fmt, ts)\nNext\n&#39; The example displays the following output:\n&#39;            %f: 8\n&#39;            ff: 87\n&#39;           fff: 876\n&#39;          ffff: 8765\n&#39;         fffff: 87654\n&#39;        ffffff: 876543\n&#39;       fffffff: 8765432\n&#39;    \n&#39;           s\\.f: 29.8\n&#39;          s\\.ff: 29.87\n&#39;         s\\.fff: 29.876\n&#39;        s\\.ffff: 29.8765\n&#39;       s\\.fffff: 29.87654\n&#39;      s\\.ffffff: 29.876543\n&#39;     s\\.fffffff: 29.8765432\n</code></pre><h2 id=\"the-fffff-custom-format-specifier\">The &quot;fffff&quot; custom format specifier</h2>\n<p>The &quot;fffff&quot; custom format specifier (with five &quot;f&quot; characters) outputs the hundred-thousandths of a second in a time interval. In a formatting operation, any remaining fractional digits are truncated. In a parsing operation that calls the <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_ParseExact_System_String_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">TimeSpan.ParseExact</a> or <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_TryParseExact_System_String_System_String_System_IFormatProvider_System_Globalization_TimeSpanStyles_System_TimeSpan__\" data-linktype=\"relative-path\">TimeSpan.TryParseExact</a> method, the input string must contain exactly five fractional digits. </p>\n<p>The following example uses the &quot;fffff&quot; custom format specifier to display the hundred-thousandths of a second in a <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value. &quot;fffff&quot; is used first as the only format specifier, and then combined with the &quot;s&quot; specifier in a custom format string.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">TimeSpan ts = new TimeSpan(1003498765432);\nstring fmt;\nConsole.WriteLine(ts.ToString(&quot;c&quot;));\nConsole.WriteLine();\n\nfor (int ctr = 1; ctr &lt;= 7; ctr++) {\n   fmt = new String(&#39;f&#39;, ctr);\n   if (fmt.Length == 1) fmt = &quot;%&quot; + fmt;\n   Console.WriteLine(&quot;{0,10}: {1:&quot; + fmt + &quot;}&quot;, fmt, ts);\n} \nConsole.WriteLine();\n\nfor (int ctr = 1; ctr &lt;= 7; ctr++) {\n   fmt = new String(&#39;f&#39;, ctr);\n   Console.WriteLine(&quot;{0,10}: {1:s\\\\.&quot; + fmt + &quot;}&quot;, &quot;s\\\\.&quot; + fmt, ts);\n}\n// The example displays the following output:\n//               %f: 8\n//               ff: 87\n//              fff: 876\n//             ffff: 8765\n//            fffff: 87654\n//           ffffff: 876543\n//          fffffff: 8765432\n//       \n//              s\\.f: 29.8\n//             s\\.ff: 29.87\n//            s\\.fff: 29.876\n//           s\\.ffff: 29.8765\n//          s\\.fffff: 29.87654\n//         s\\.ffffff: 29.876543\n//        s\\.fffffff: 29.8765432 \n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim ts As New TimeSpan(1003498765432)\nDim fmt As String\nConsole.WriteLine(ts.ToString(&quot;c&quot;))\nConsole.WriteLine()\n\nFor ctr = 1 To 7\n   fmt = New String(&quot;f&quot;c, ctr)\n   If fmt.Length = 1 Then fmt = &quot;%&quot; + fmt\n   Console.WriteLine(&quot;{0,10}: {1:&quot; + fmt + &quot;}&quot;, fmt, ts)\nNext \nConsole.WriteLine()\n\nFor ctr = 1 To 7\n   fmt = New String(&quot;f&quot;c, ctr)\n   Console.WriteLine(&quot;{0,10}: {1:s\\.&quot; + fmt + &quot;}&quot;, &quot;s\\.&quot; + fmt, ts)\nNext\n&#39; The example displays the following output:\n&#39;            %f: 8\n&#39;            ff: 87\n&#39;           fff: 876\n&#39;          ffff: 8765\n&#39;         fffff: 87654\n&#39;        ffffff: 876543\n&#39;       fffffff: 8765432\n&#39;    \n&#39;           s\\.f: 29.8\n&#39;          s\\.ff: 29.87\n&#39;         s\\.fff: 29.876\n&#39;        s\\.ffff: 29.8765\n&#39;       s\\.fffff: 29.87654\n&#39;      s\\.ffffff: 29.876543\n&#39;     s\\.fffffff: 29.8765432\n</code></pre><h2 id=\"the-ffffff-custom-format-specifier\">The &quot;ffffff&quot; custom format specifier</h2>\n<p>The &quot;ffffff&quot; custom format specifier (with six &quot;f&quot; characters) outputs the millionths of a second in a time interval. In a formatting operation, any remaining fractional digits are truncated. In a parsing operation that calls the <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_ParseExact_System_String_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">TimeSpan.ParseExact</a> or <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_TryParseExact_System_String_System_String_System_IFormatProvider_System_Globalization_TimeSpanStyles_System_TimeSpan__\" data-linktype=\"relative-path\">TimeSpan.TryParseExact</a> method, the input string must contain exactly six fractional digits. </p>\n<p>The following example uses the &quot;ffffff&quot; custom format specifier to display the millionths of a second in a <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value. It is used first as the only format specifier, and then combined with the &quot;s&quot; specifier in a custom format string.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">TimeSpan ts = new TimeSpan(1003498765432);\nstring fmt;\nConsole.WriteLine(ts.ToString(&quot;c&quot;));\nConsole.WriteLine();\n\nfor (int ctr = 1; ctr &lt;= 7; ctr++) {\n   fmt = new String(&#39;f&#39;, ctr);\n   if (fmt.Length == 1) fmt = &quot;%&quot; + fmt;\n   Console.WriteLine(&quot;{0,10}: {1:&quot; + fmt + &quot;}&quot;, fmt, ts);\n} \nConsole.WriteLine();\n\nfor (int ctr = 1; ctr &lt;= 7; ctr++) {\n   fmt = new String(&#39;f&#39;, ctr);\n   Console.WriteLine(&quot;{0,10}: {1:s\\\\.&quot; + fmt + &quot;}&quot;, &quot;s\\\\.&quot; + fmt, ts);\n}\n// The example displays the following output:\n//               %f: 8\n//               ff: 87\n//              fff: 876\n//             ffff: 8765\n//            fffff: 87654\n//           ffffff: 876543\n//          fffffff: 8765432\n//       \n//              s\\.f: 29.8\n//             s\\.ff: 29.87\n//            s\\.fff: 29.876\n//           s\\.ffff: 29.8765\n//          s\\.fffff: 29.87654\n//         s\\.ffffff: 29.876543\n//        s\\.fffffff: 29.8765432 \n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim ts As New TimeSpan(1003498765432)\nDim fmt As String\nConsole.WriteLine(ts.ToString(&quot;c&quot;))\nConsole.WriteLine()\n\nFor ctr = 1 To 7\n   fmt = New String(&quot;f&quot;c, ctr)\n   If fmt.Length = 1 Then fmt = &quot;%&quot; + fmt\n   Console.WriteLine(&quot;{0,10}: {1:&quot; + fmt + &quot;}&quot;, fmt, ts)\nNext \nConsole.WriteLine()\n\nFor ctr = 1 To 7\n   fmt = New String(&quot;f&quot;c, ctr)\n   Console.WriteLine(&quot;{0,10}: {1:s\\.&quot; + fmt + &quot;}&quot;, &quot;s\\.&quot; + fmt, ts)\nNext\n&#39; The example displays the following output:\n&#39;            %f: 8\n&#39;            ff: 87\n&#39;           fff: 876\n&#39;          ffff: 8765\n&#39;         fffff: 87654\n&#39;        ffffff: 876543\n&#39;       fffffff: 8765432\n&#39;    \n&#39;           s\\.f: 29.8\n&#39;          s\\.ff: 29.87\n&#39;         s\\.fff: 29.876\n&#39;        s\\.ffff: 29.8765\n&#39;       s\\.fffff: 29.87654\n&#39;      s\\.ffffff: 29.876543\n&#39;     s\\.fffffff: 29.8765432\n</code></pre><h2 id=\"the-fffffff-custom-format-specifier\">The &quot;fffffff&quot; custom format specifier</h2>\n<p>The &quot;fffffff&quot; custom format specifier (with seven &quot;f&quot; characters) outputs the ten-millionths of a second (or the fractional number of ticks) in a time interval. In a parsing operation that calls the <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_ParseExact_System_String_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">TimeSpan.ParseExact</a> or <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_TryParseExact_System_String_System_String_System_IFormatProvider_System_Globalization_TimeSpanStyles_System_TimeSpan__\" data-linktype=\"relative-path\">TimeSpan.TryParseExact</a> method, the input string must contain exactly seven fractional digits. </p>\n<p>The following example uses the &quot;fffffff&quot; custom format specifier to display the fractional number of ticks in a <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value. It is used first as the only format specifier, and then combined with the &quot;s&quot; specifier in a custom format string.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">TimeSpan ts = new TimeSpan(1003498765432);\nstring fmt;\nConsole.WriteLine(ts.ToString(&quot;c&quot;));\nConsole.WriteLine();\n\nfor (int ctr = 1; ctr &lt;= 7; ctr++) {\n   fmt = new String(&#39;f&#39;, ctr);\n   if (fmt.Length == 1) fmt = &quot;%&quot; + fmt;\n   Console.WriteLine(&quot;{0,10}: {1:&quot; + fmt + &quot;}&quot;, fmt, ts);\n} \nConsole.WriteLine();\n\nfor (int ctr = 1; ctr &lt;= 7; ctr++) {\n   fmt = new String(&#39;f&#39;, ctr);\n   Console.WriteLine(&quot;{0,10}: {1:s\\\\.&quot; + fmt + &quot;}&quot;, &quot;s\\\\.&quot; + fmt, ts);\n}\n// The example displays the following output:\n//               %f: 8\n//               ff: 87\n//              fff: 876\n//             ffff: 8765\n//            fffff: 87654\n//           ffffff: 876543\n//          fffffff: 8765432\n//       \n//              s\\.f: 29.8\n//             s\\.ff: 29.87\n//            s\\.fff: 29.876\n//           s\\.ffff: 29.8765\n//          s\\.fffff: 29.87654\n//         s\\.ffffff: 29.876543\n//        s\\.fffffff: 29.8765432 \n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim ts As New TimeSpan(1003498765432)\nDim fmt As String\nConsole.WriteLine(ts.ToString(&quot;c&quot;))\nConsole.WriteLine()\n\nFor ctr = 1 To 7\n   fmt = New String(&quot;f&quot;c, ctr)\n   If fmt.Length = 1 Then fmt = &quot;%&quot; + fmt\n   Console.WriteLine(&quot;{0,10}: {1:&quot; + fmt + &quot;}&quot;, fmt, ts)\nNext \nConsole.WriteLine()\n\nFor ctr = 1 To 7\n   fmt = New String(&quot;f&quot;c, ctr)\n   Console.WriteLine(&quot;{0,10}: {1:s\\.&quot; + fmt + &quot;}&quot;, &quot;s\\.&quot; + fmt, ts)\nNext\n&#39; The example displays the following output:\n&#39;            %f: 8\n&#39;            ff: 87\n&#39;           fff: 876\n&#39;          ffff: 8765\n&#39;         fffff: 87654\n&#39;        ffffff: 876543\n&#39;       fffffff: 8765432\n&#39;    \n&#39;           s\\.f: 29.8\n&#39;          s\\.ff: 29.87\n&#39;         s\\.fff: 29.876\n&#39;        s\\.ffff: 29.8765\n&#39;       s\\.fffff: 29.87654\n&#39;      s\\.ffffff: 29.876543\n&#39;     s\\.fffffff: 29.8765432\n</code></pre><h2 id=\"the-f-custom-format-specifier-1\">The &quot;F&quot; custom format specifier</h2>\n<p>The &quot;F&quot; custom format specifier outputs the tenths of a second in a time interval. In a formatting operation, any remaining fractional digits are truncated. If the value of the time interval&#39;s tenths of a second is zero, it is not included in the result string. In a parsing operation that calls the <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_ParseExact_System_String_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">TimeSpan.ParseExact</a> or <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_TryParseExact_System_String_System_String_System_IFormatProvider_System_Globalization_TimeSpanStyles_System_TimeSpan__\" data-linktype=\"relative-path\">TimeSpan.TryParseExact</a> method, the presence of the tenths of a second digit is optional.</p>\n<p>If the &quot;F&quot; custom format specifier is used alone, specify &quot;%F&quot; so that it is not misinterpreted as a standard format string.</p>\n<p>The following example uses the &quot;F&quot; custom format specifier to display the tenths of a second in a <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value. It also uses this custom format specifier in a parsing operation.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">Console.WriteLine(&quot;Formatting:&quot;);\nTimeSpan ts1 = TimeSpan.Parse(&quot;0:0:3.669&quot;);\nConsole.WriteLine(&quot;{0} (&#39;%F&#39;) --&gt; {0:%F}&quot;, ts1);\n\nTimeSpan ts2 = TimeSpan.Parse(&quot;0:0:3.091&quot;);\nConsole.WriteLine(&quot;{0} (&#39;ss\\\\.F&#39;) --&gt; {0:ss\\\\.F}&quot;, ts2);\nConsole.WriteLine();\n\nConsole.WriteLine(&quot;Parsing:&quot;);\nstring[] inputs = { &quot;0:0:03.&quot;, &quot;0:0:03.1&quot;, &quot;0:0:03.12&quot; };\nstring fmt = @&quot;h\\:m\\:ss\\.F&quot;;\nTimeSpan ts3;\n\nforeach (string input in inputs) {\n   if (TimeSpan.TryParseExact(input, fmt, null, out ts3))\n      Console.WriteLine(&quot;{0} (&#39;{1}&#39;) --&gt; {2}&quot;, input, fmt, ts3);\n   else\n      Console.WriteLine(&quot;Cannot parse {0} with &#39;{1}&#39;.&quot;, \n                        input, fmt);\n}                        \n// The example displays the following output:\n//       Formatting:\n//       00:00:03.6690000 (&#39;%F&#39;) --&gt; 6\n//       00:00:03.0910000 (&#39;ss\\.F&#39;) --&gt; 03.\n//       \n//       Parsing:\n//       0:0:03. (&#39;h\\:m\\:ss\\.F&#39;) --&gt; 00:00:03\n//       0:0:03.1 (&#39;h\\:m\\:ss\\.F&#39;) --&gt; 00:00:03.1000000\n//       Cannot parse 0:0:03.12 with &#39;h\\:m\\:ss\\.F&#39;.\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Console.WriteLine(&quot;Formatting:&quot;)\nDim ts1 As TimeSpan = TimeSpan.Parse(&quot;0:0:3.669&quot;)\nConsole.WriteLine(&quot;{0} (&#39;%F&#39;) --&gt; {0:%F}&quot;, ts1)\n\nDim ts2 As TimeSpan = TimeSpan.Parse(&quot;0:0:3.091&quot;)\nConsole.WriteLine(&quot;{0} (&#39;ss\\.F&#39;) --&gt; {0:ss\\.F}&quot;, ts2)\nConsole.WriteLine()\n\nConsole.WriteLine(&quot;Parsing:&quot;)\nDim inputs() As String = { &quot;0:0:03.&quot;, &quot;0:0:03.1&quot;, &quot;0:0:03.12&quot; }\nDim fmt As String = &quot;h\\:m\\:ss\\.F&quot;\nDim ts3 As TimeSpan\n\nFor Each input As String In inputs\n   If TimeSpan.TryParseExact(input, fmt, Nothing, ts3)\n      Console.WriteLine(&quot;{0} (&#39;{1}&#39;) --&gt; {2}&quot;, input, fmt, ts3)\n   Else\n      Console.WriteLine(&quot;Cannot parse {0} with &#39;{1}&#39;.&quot;, \n                        input, fmt)\n   End If  \nNext\n&#39; The example displays the following output:\n&#39;       Formatting:\n&#39;       00:00:03.6690000 (&#39;%F&#39;) --&gt; 6\n&#39;       00:00:03.0910000 (&#39;ss\\.F&#39;) --&gt; 03.\n&#39;       \n&#39;       Parsing:\n&#39;       0:0:03. (&#39;h\\:m\\:ss\\.F&#39;) --&gt; 00:00:03\n&#39;       0:0:03.1 (&#39;h\\:m\\:ss\\.F&#39;) --&gt; 00:00:03.1000000\n&#39;       Cannot parse 0:0:03.12 with &#39;h\\:m\\:ss\\.F&#39;.\n</code></pre><h2 id=\"the-ff-custom-format-specifier-1\">The &quot;FF&quot; custom format specifier</h2>\n<p>The &quot;FF&quot; custom format specifier outputs the hundredths of a second in a time interval. In a formatting operation, any remaining fractional digits are truncated. If there are any trailing fractional zeros, they are not included in the result string. In a parsing operation that calls the <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_ParseExact_System_String_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">TimeSpan.ParseExact</a> or <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_TryParseExact_System_String_System_String_System_IFormatProvider_System_Globalization_TimeSpanStyles_System_TimeSpan__\" data-linktype=\"relative-path\">TimeSpan.TryParseExact</a> method, the presence of the tenths and hundredths of a second digit is optional.</p>\n<p>The following example uses the &quot;FF&quot; custom format specifier to display the hundredths of a second in a <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value. It also uses this custom format specifier in a parsing operation.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">Console.WriteLine(&quot;Formatting:&quot;);\nTimeSpan ts1 = TimeSpan.Parse(&quot;0:0:3.697&quot;);\nConsole.WriteLine(&quot;{0} (&#39;FF&#39;) --&gt; {0:FF}&quot;, ts1);\n\nTimeSpan ts2 = TimeSpan.Parse(&quot;0:0:3.809&quot;);\nConsole.WriteLine(&quot;{0} (&#39;ss\\\\.FF&#39;) --&gt; {0:ss\\\\.FF}&quot;, ts2);\nConsole.WriteLine();\n\nConsole.WriteLine(&quot;Parsing:&quot;);\nstring[] inputs = { &quot;0:0:03.&quot;, &quot;0:0:03.1&quot;, &quot;0:0:03.127&quot; };\nstring fmt = @&quot;h\\:m\\:ss\\.FF&quot;;\nTimeSpan ts3;\n\nforeach (string input in inputs) {\n   if (TimeSpan.TryParseExact(input, fmt, null, out ts3))\n      Console.WriteLine(&quot;{0} (&#39;{1}&#39;) --&gt; {2}&quot;, input, fmt, ts3);\n   else\n      Console.WriteLine(&quot;Cannot parse {0} with &#39;{1}&#39;.&quot;, \n                        input, fmt);\n}\n// The example displays the following output:\n//       Formatting:\n//       00:00:03.6970000 (&#39;FF&#39;) --&gt; 69\n//       00:00:03.8090000 (&#39;ss\\.FF&#39;) --&gt; 03.8\n//       \n//       Parsing:\n//       0:0:03. (&#39;h\\:m\\:ss\\.FF&#39;) --&gt; 00:00:03\n//       0:0:03.1 (&#39;h\\:m\\:ss\\.FF&#39;) --&gt; 00:00:03.1000000\n//       Cannot parse 0:0:03.127 with &#39;h\\:m\\:ss\\.FF&#39;. \n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Console.WriteLine(&quot;Formatting:&quot;)\nDim ts1 As TimeSpan = TimeSpan.Parse(&quot;0:0:3.697&quot;)\nConsole.WriteLine(&quot;{0} (&#39;FF&#39;) --&gt; {0:FF}&quot;, ts1)\n\nDim ts2 As TimeSpan = TimeSpan.Parse(&quot;0:0:3.809&quot;)\nConsole.WriteLine(&quot;{0} (&#39;ss\\.FF&#39;) --&gt; {0:ss\\.FF}&quot;, ts2)\nConsole.WriteLine()\n\nConsole.WriteLine(&quot;Parsing:&quot;)\nDim inputs() As String = { &quot;0:0:03.&quot;, &quot;0:0:03.1&quot;, &quot;0:0:03.127&quot; }\nDim fmt As String = &quot;h\\:m\\:ss\\.FF&quot;\nDim ts3 As TimeSpan\n\nFor Each input As String In inputs\n   If TimeSpan.TryParseExact(input, fmt, Nothing, ts3)\n      Console.WriteLine(&quot;{0} (&#39;{1}&#39;) --&gt; {2}&quot;, input, fmt, ts3)\n   Else\n      Console.WriteLine(&quot;Cannot parse {0} with &#39;{1}&#39;.&quot;, \n                        input, fmt)\n   End If  \nNext\n&#39; The example displays the following output:\n&#39;       Formatting:\n&#39;       00:00:03.6970000 (&#39;FF&#39;) --&gt; 69\n&#39;       00:00:03.8090000 (&#39;ss\\.FF&#39;) --&gt; 03.8\n&#39;       \n&#39;       Parsing:\n&#39;       0:0:03. (&#39;h\\:m\\:ss\\.FF&#39;) --&gt; 00:00:03\n&#39;       0:0:03.1 (&#39;h\\:m\\:ss\\.FF&#39;) --&gt; 00:00:03.1000000\n&#39;       Cannot parse 0:0:03.127 with &#39;h\\:m\\:ss\\.FF&#39;.\n</code></pre><h2 id=\"the-fff-custom-format-specifier-1\">The &quot;FFF&quot; custom format specifier</h2>\n<p>The &quot;FFF&quot; custom format specifier (with three &quot;F&quot; characters) outputs the milliseconds in a time interval. In a formatting operation, any remaining fractional digits are truncated. If there are any trailing fractional zeros, they are not included in the result string. In a parsing operation that calls the <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_ParseExact_System_String_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">TimeSpan.ParseExact</a> or <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_TryParseExact_System_String_System_String_System_IFormatProvider_System_Globalization_TimeSpanStyles_System_TimeSpan__\" data-linktype=\"relative-path\">TimeSpan.TryParseExact</a> method, the presence of the tenths, hundredths, and thousandths of a second digit is optional.</p>\n<p>The following example uses the &quot;FFF&quot; custom format specifier to display the thousandths of a second in a <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value. It also uses this custom format specifier in a parsing operation.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">Console.WriteLine(&quot;Formatting:&quot;);\nTimeSpan ts1 = TimeSpan.Parse(&quot;0:0:3.6974&quot;);\nConsole.WriteLine(&quot;{0} (&#39;FFF&#39;) --&gt; {0:FFF}&quot;, ts1);\n\nTimeSpan ts2 = TimeSpan.Parse(&quot;0:0:3.8009&quot;);\nConsole.WriteLine(&quot;{0} (&#39;ss\\\\.FFF&#39;) --&gt; {0:ss\\\\.FFF}&quot;, ts2);\nConsole.WriteLine();\n\nConsole.WriteLine(&quot;Parsing:&quot;);\nstring[] inputs = { &quot;0:0:03.&quot;, &quot;0:0:03.12&quot;, &quot;0:0:03.1279&quot; };\nstring fmt = @&quot;h\\:m\\:ss\\.FFF&quot;;\nTimeSpan ts3;\n\nforeach (string input in inputs) {\n   if (TimeSpan.TryParseExact(input, fmt, null, out ts3))\n      Console.WriteLine(&quot;{0} (&#39;{1}&#39;) --&gt; {2}&quot;, input, fmt, ts3);\n   else\n      Console.WriteLine(&quot;Cannot parse {0} with &#39;{1}&#39;.&quot;, \n                        input, fmt);\n}\n// The example displays the following output:\n//       Formatting:\n//       00:00:03.6974000 (&#39;FFF&#39;) --&gt; 697\n//       00:00:03.8009000 (&#39;ss\\.FFF&#39;) --&gt; 03.8\n//       \n//       Parsing:\n//       0:0:03. (&#39;h\\:m\\:ss\\.FFF&#39;) --&gt; 00:00:03\n//       0:0:03.12 (&#39;h\\:m\\:ss\\.FFF&#39;) --&gt; 00:00:03.1200000\n//       Cannot parse 0:0:03.1279 with &#39;h\\:m\\:ss\\.FFF&#39;.  \n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Console.WriteLine(&quot;Formatting:&quot;)\nDim ts1 As TimeSpan = TimeSpan.Parse(&quot;0:0:3.6974&quot;)\nConsole.WriteLine(&quot;{0} (&#39;FFF&#39;) --&gt; {0:FFF}&quot;, ts1)\n\nDim ts2 As TimeSpan = TimeSpan.Parse(&quot;0:0:3.8009&quot;)\nConsole.WriteLine(&quot;{0} (&#39;ss\\.FFF&#39;) --&gt; {0:ss\\.FFF}&quot;, ts2)\nConsole.WriteLine()\n\nConsole.WriteLine(&quot;Parsing:&quot;)\nDim inputs() As String = { &quot;0:0:03.&quot;, &quot;0:0:03.12&quot;, &quot;0:0:03.1279&quot; }\nDim fmt As String = &quot;h\\:m\\:ss\\.FFF&quot;\nDim ts3 As TimeSpan\n\nFor Each input As String In inputs\n   If TimeSpan.TryParseExact(input, fmt, Nothing, ts3)\n      Console.WriteLine(&quot;{0} (&#39;{1}&#39;) --&gt; {2}&quot;, input, fmt, ts3)\n   Else\n      Console.WriteLine(&quot;Cannot parse {0} with &#39;{1}&#39;.&quot;, \n                        input, fmt)\n   End If  \nNext\n&#39; The example displays the following output:\n&#39;       Formatting:\n&#39;       00:00:03.6974000 (&#39;FFF&#39;) --&gt; 697\n&#39;       00:00:03.8009000 (&#39;ss\\.FFF&#39;) --&gt; 03.8\n&#39;       \n&#39;       Parsing:\n&#39;       0:0:03. (&#39;h\\:m\\:ss\\.FFF&#39;) --&gt; 00:00:03\n&#39;       0:0:03.12 (&#39;h\\:m\\:ss\\.FFF&#39;) --&gt; 00:00:03.1200000\n&#39;       Cannot parse 0:0:03.1279 with &#39;h\\:m\\:ss\\.FFF&#39;.\n</code></pre><h2 id=\"the-ffff-custom-format-specifier-1\">The &quot;FFFF&quot; custom format specifier</h2>\n<p>The &quot;FFFF&quot; custom format specifier (with four &quot;F&quot; characters) outputs the ten-thousandths of a second in a time interval. In a formatting operation, any remaining fractional digits are truncated. If there are any trailing fractional zeros, they are not included in the result string. In a parsing operation that calls the <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_ParseExact_System_String_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">TimeSpan.ParseExact</a> or <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_TryParseExact_System_String_System_String_System_IFormatProvider_System_Globalization_TimeSpanStyles_System_TimeSpan__\" data-linktype=\"relative-path\">TimeSpan.TryParseExact</a> method, the presence of the tenths, hundredths, thousandths, and ten-thousandths of a second digit is optional.</p>\n<p>The following example uses the &quot;FFFF&quot; custom format specifier to display the ten-thousandths of a second in a <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value. It also uses the &quot;FFFF&quot; custom format specifier in a parsing operation.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">Console.WriteLine(&quot;Formatting:&quot;);\nTimeSpan ts1 = TimeSpan.Parse(&quot;0:0:3.69749&quot;);\nConsole.WriteLine(&quot;{0} (&#39;FFFF&#39;) --&gt; {0:FFFF}&quot;, ts1);\n\nTimeSpan ts2 = TimeSpan.Parse(&quot;0:0:3.80009&quot;);\nConsole.WriteLine(&quot;{0} (&#39;ss\\\\.FFFF&#39;) --&gt; {0:ss\\\\.FFFF}&quot;, ts2);\nConsole.WriteLine();\n\nConsole.WriteLine(&quot;Parsing:&quot;);\nstring[] inputs = { &quot;0:0:03.&quot;, &quot;0:0:03.12&quot;, &quot;0:0:03.12795&quot; };\nstring fmt = @&quot;h\\:m\\:ss\\.FFFF&quot;;\nTimeSpan ts3;\n\nforeach (string input in inputs) {\n   if (TimeSpan.TryParseExact(input, fmt, null, out ts3))\n      Console.WriteLine(&quot;{0} (&#39;{1}&#39;) --&gt; {2}&quot;, input, fmt, ts3);\n   else\n      Console.WriteLine(&quot;Cannot parse {0} with &#39;{1}&#39;.&quot;, \n                        input, fmt);\n}\n// The example displays the following output:\n//       Formatting:\n//       00:00:03.6974900 (&#39;FFFF&#39;) --&gt; 6974\n//       00:00:03.8000900 (&#39;ss\\.FFFF&#39;) --&gt; 03.8\n//       \n//       Parsing:\n//       0:0:03. (&#39;h\\:m\\:ss\\.FFFF&#39;) --&gt; 00:00:03\n//       0:0:03.12 (&#39;h\\:m\\:ss\\.FFFF&#39;) --&gt; 00:00:03.1200000\n//       Cannot parse 0:0:03.12795 with &#39;h\\:m\\:ss\\.FFFF&#39;.\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Console.WriteLine(&quot;Formatting:&quot;)\nDim ts1 As TimeSpan = TimeSpan.Parse(&quot;0:0:3.69749&quot;)\nConsole.WriteLine(&quot;{0} (&#39;FFFF&#39;) --&gt; {0:FFFF}&quot;, ts1)\n\nDim ts2 As TimeSpan = TimeSpan.Parse(&quot;0:0:3.80009&quot;)\nConsole.WriteLine(&quot;{0} (&#39;ss\\.FFFF&#39;) --&gt; {0:ss\\.FFFF}&quot;, ts2)\nConsole.WriteLine()\n\nConsole.WriteLine(&quot;Parsing:&quot;)\nDim inputs() As String = { &quot;0:0:03.&quot;, &quot;0:0:03.12&quot;, &quot;0:0:03.12795&quot; }\nDim fmt As String = &quot;h\\:m\\:ss\\.FFFF&quot;\nDim ts3 As TimeSpan\n\nFor Each input As String In inputs\n   If TimeSpan.TryParseExact(input, fmt, Nothing, ts3)\n      Console.WriteLine(&quot;{0} (&#39;{1}&#39;) --&gt; {2}&quot;, input, fmt, ts3)\n   Else\n      Console.WriteLine(&quot;Cannot parse {0} with &#39;{1}&#39;.&quot;, \n                        input, fmt)\n   End If  \nNext\n&#39; The example displays the following output:\n&#39;       Formatting:\n&#39;       00:00:03.6974900 (&#39;FFFF&#39;) --&gt; 6974\n&#39;       00:00:03.8000900 (&#39;ss\\.FFFF&#39;) --&gt; 03.8\n&#39;       \n&#39;       Parsing:\n&#39;       0:0:03. (&#39;h\\:m\\:ss\\.FFFF&#39;) --&gt; 00:00:03\n&#39;       0:0:03.12 (&#39;h\\:m\\:ss\\.FFFF&#39;) --&gt; 00:00:03.1200000\n&#39;       Cannot parse 0:0:03.12795 with &#39;h\\:m\\:ss\\.FFFF&#39;.\n</code></pre><h2 id=\"the-fffff-custom-format-specifier-1\">The &quot;FFFFF&quot; custom format specifier</h2>\n<p>The &quot;FFFFF&quot; custom format specifier (with five &quot;F&quot; characters) outputs the hundred-thousandths of a second in a time interval. In a formatting operation, any remaining fractional digits are truncated. If there are any trailing fractional zeros, they are not included in the result string. In a parsing operation that calls the <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_ParseExact_System_String_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">TimeSpan.ParseExact</a> or <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_TryParseExact_System_String_System_String_System_IFormatProvider_System_Globalization_TimeSpanStyles_System_TimeSpan__\" data-linktype=\"relative-path\">TimeSpan.TryParseExact</a> method, the presence of the tenths, hundredths, thousandths, ten-thousandths, and hundred-thousandths of a second digit is optional.</p>\n<p>The following example uses the &quot;FFFFF&quot; custom format specifier to display the hundred-thousandths of a second in a <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value. It also uses the &quot;FFFFF&quot; custom format specifier in a parsing operation.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">Console.WriteLine(&quot;Formatting:&quot;);\nTimeSpan ts1 = TimeSpan.Parse(&quot;0:0:3.697497&quot;);\nConsole.WriteLine(&quot;{0} (&#39;FFFFF&#39;) --&gt; {0:FFFFF}&quot;, ts1);\n\nTimeSpan ts2 = TimeSpan.Parse(&quot;0:0:3.800009&quot;);\nConsole.WriteLine(&quot;{0} (&#39;ss\\\\.FFFFF&#39;) --&gt; {0:ss\\\\.FFFFF}&quot;, ts2);\nConsole.WriteLine();\n\nConsole.WriteLine(&quot;Parsing:&quot;);\nstring[] inputs = { &quot;0:0:03.&quot;, &quot;0:0:03.12&quot;, &quot;0:0:03.127956&quot; };\nstring fmt = @&quot;h\\:m\\:ss\\.FFFFF&quot;;\nTimeSpan ts3;\n\nforeach (string input in inputs) {\n   if (TimeSpan.TryParseExact(input, fmt, null, out ts3))\n      Console.WriteLine(&quot;{0} (&#39;{1}&#39;) --&gt; {2}&quot;, input, fmt, ts3);\n   else\n      Console.WriteLine(&quot;Cannot parse {0} with &#39;{1}&#39;.&quot;, \n                        input, fmt);\n}                       \n// The example displays the following output:\n//       Formatting:\n//       00:00:03.6974970 (&#39;FFFFF&#39;) --&gt; 69749\n//       00:00:03.8000090 (&#39;ss\\.FFFFF&#39;) --&gt; 03.8\n//       \n//       Parsing:\n//       0:0:03. (&#39;h\\:m\\:ss\\.FFFF&#39;) --&gt; 00:00:03\n//       0:0:03.12 (&#39;h\\:m\\:ss\\.FFFF&#39;) --&gt; 00:00:03.1200000\n//       Cannot parse 0:0:03.127956 with &#39;h\\:m\\:ss\\.FFFF&#39;. \n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Console.WriteLine(&quot;Formatting:&quot;)\nDim ts1 As TimeSpan = TimeSpan.Parse(&quot;0:0:3.697497&quot;)\nConsole.WriteLine(&quot;{0} (&#39;FFFFF&#39;) --&gt; {0:FFFFF}&quot;, ts1)\n\nDim ts2 As TimeSpan = TimeSpan.Parse(&quot;0:0:3.800009&quot;)\nConsole.WriteLine(&quot;{0} (&#39;ss\\.FFFFF&#39;) --&gt; {0:ss\\.FFFFF}&quot;, ts2)\nConsole.WriteLine()\n\nConsole.WriteLine(&quot;Parsing:&quot;)\nDim inputs() As String = { &quot;0:0:03.&quot;, &quot;0:0:03.12&quot;, &quot;0:0:03.127956&quot; }\nDim fmt As String = &quot;h\\:m\\:ss\\.FFFFF&quot;\nDim ts3 As TimeSpan\n\nFor Each input As String In inputs\n   If TimeSpan.TryParseExact(input, fmt, Nothing, ts3)\n      Console.WriteLine(&quot;{0} (&#39;{1}&#39;) --&gt; {2}&quot;, input, fmt, ts3)\n   Else\n      Console.WriteLine(&quot;Cannot parse {0} with &#39;{1}&#39;.&quot;, \n                        input, fmt)\n   End If  \nNext\n&#39; The example displays the following output:\n&#39;       Formatting:\n&#39;       00:00:03.6974970 (&#39;FFFFF&#39;) --&gt; 69749\n&#39;       00:00:03.8000090 (&#39;ss\\.FFFFF&#39;) --&gt; 03.8\n&#39;       \n&#39;       Parsing:\n&#39;       0:0:03. (&#39;h\\:m\\:ss\\.FFFF&#39;) --&gt; 00:00:03\n&#39;       0:0:03.12 (&#39;h\\:m\\:ss\\.FFFF&#39;) --&gt; 00:00:03.1200000\n&#39;       Cannot parse 0:0:03.127956 with &#39;h\\:m\\:ss\\.FFFF&#39;.\n</code></pre><h2 id=\"the-ffffff-custom-format-specifier-1\">The &quot;FFFFFF&quot; custom format specifier</h2>\n<p>The &quot;FFFFFF&quot; custom format specifier (with six &quot;F&quot; characters) outputs the millionths of a second in a time interval. In a formatting operation, any remaining fractional digits are truncated. If there are any trailing fractional zeros, they are not included in the result string. In a parsing operation that calls the <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_ParseExact_System_String_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">TimeSpan.ParseExact</a> or <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_TryParseExact_System_String_System_String_System_IFormatProvider_System_Globalization_TimeSpanStyles_System_TimeSpan__\" data-linktype=\"relative-path\">TimeSpan.TryParseExact</a> method, the presence of the tenths, hundredths, thousandths, ten-thousandths, hundred-thousandths, and millionths of a second digit is optional.</p>\n<p>The following example uses the &quot;FFFFFF&quot; custom format specifier to display the millionths of a second in a <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value. It also uses this custom format specifier in a parsing operation.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">Console.WriteLine(&quot;Formatting:&quot;);\nTimeSpan ts1 = TimeSpan.Parse(&quot;0:0:3.6974974&quot;);\nConsole.WriteLine(&quot;{0} (&#39;FFFFFF&#39;) --&gt; {0:FFFFFF}&quot;, ts1);\n\nTimeSpan ts2 = TimeSpan.Parse(&quot;0:0:3.8000009&quot;);\nConsole.WriteLine(&quot;{0} (&#39;ss\\\\.FFFFFF&#39;) --&gt; {0:ss\\\\.FFFFFF}&quot;, ts2);\nConsole.WriteLine();\n\nConsole.WriteLine(&quot;Parsing:&quot;);\nstring[] inputs = { &quot;0:0:03.&quot;, &quot;0:0:03.12&quot;, &quot;0:0:03.1279569&quot; };\nstring fmt = @&quot;h\\:m\\:ss\\.FFFFFF&quot;;\nTimeSpan ts3;\n\nforeach (string input in inputs) {\n   if (TimeSpan.TryParseExact(input, fmt, null, out ts3))\n      Console.WriteLine(&quot;{0} (&#39;{1}&#39;) --&gt; {2}&quot;, input, fmt, ts3);\n   else\n      Console.WriteLine(&quot;Cannot parse {0} with &#39;{1}&#39;.&quot;, \n                        input, fmt);\n}                       \n// The example displays the following output:\n//       Formatting:\n//       00:00:03.6974974 (&#39;FFFFFF&#39;) --&gt; 697497\n//       00:00:03.8000009 (&#39;ss\\.FFFFFF&#39;) --&gt; 03.8\n//       \n//       Parsing:\n//       0:0:03. (&#39;h\\:m\\:ss\\.FFFFFF&#39;) --&gt; 00:00:03\n//       0:0:03.12 (&#39;h\\:m\\:ss\\.FFFFFF&#39;) --&gt; 00:00:03.1200000\n//       Cannot parse 0:0:03.1279569 with &#39;h\\:m\\:ss\\.FFFFFF&#39;.\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Console.WriteLine(&quot;Formatting:&quot;)\nDim ts1 As TimeSpan = TimeSpan.Parse(&quot;0:0:3.6974974&quot;)\nConsole.WriteLine(&quot;{0} (&#39;FFFFFF&#39;) --&gt; {0:FFFFFF}&quot;, ts1)\n\nDim ts2 As TimeSpan = TimeSpan.Parse(&quot;0:0:3.8000009&quot;)\nConsole.WriteLine(&quot;{0} (&#39;ss\\.FFFFFF&#39;) --&gt; {0:ss\\.FFFFFF}&quot;, ts2)\nConsole.WriteLine()\n\nConsole.WriteLine(&quot;Parsing:&quot;)\nDim inputs() As String = { &quot;0:0:03.&quot;, &quot;0:0:03.12&quot;, &quot;0:0:03.1279569&quot; }\nDim fmt As String = &quot;h\\:m\\:ss\\.FFFFFF&quot;\nDim ts3 As TimeSpan\n\nFor Each input As String In inputs\n   If TimeSpan.TryParseExact(input, fmt, Nothing, ts3)\n      Console.WriteLine(&quot;{0} (&#39;{1}&#39;) --&gt; {2}&quot;, input, fmt, ts3)\n   Else\n      Console.WriteLine(&quot;Cannot parse {0} with &#39;{1}&#39;.&quot;, \n                        input, fmt)\n   End If  \nNext\n&#39; The example displays the following output:\n&#39;       Formatting:\n&#39;       00:00:03.6974974 (&#39;FFFFFF&#39;) --&gt; 697497\n&#39;       00:00:03.8000009 (&#39;ss\\.FFFFFF&#39;) --&gt; 03.8\n&#39;       \n&#39;       Parsing:\n&#39;       0:0:03. (&#39;h\\:m\\:ss\\.FFFFFF&#39;) --&gt; 00:00:03\n&#39;       0:0:03.12 (&#39;h\\:m\\:ss\\.FFFFFF&#39;) --&gt; 00:00:03.1200000\n&#39;       Cannot parse 0:0:03.1279569 with &#39;h\\:m\\:ss\\.FFFFFF&#39;\n</code></pre><h2 id=\"the-fffffff-custom-format-specifier-1\">The &quot;FFFFFFF&quot; custom format specifier</h2>\n<p>The &quot;FFFFFFF&quot; custom format specifier (with seven &quot;F&quot; characters) outputs the ten-millionths of a second (or the fractional number of ticks) in a time interval. If there are any trailing fractional zeros, they are not included in the result string. In a parsing operation that calls the <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_ParseExact_System_String_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">TimeSpan.ParseExact</a> or <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_TryParseExact_System_String_System_String_System_IFormatProvider_System_Globalization_TimeSpanStyles_System_TimeSpan__\" data-linktype=\"relative-path\">TimeSpan.TryParseExact</a> method, the presence of the seven fractional digits in the input string is optional.</p>\n<p>The following example uses the &quot;FFFFFFF&quot; custom format specifier to display the fractional parts of a second in a <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value. It also uses this custom format specifier in a parsing operation.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">Console.WriteLine(&quot;Formatting:&quot;);\nTimeSpan ts1 = TimeSpan.Parse(&quot;0:0:3.6974974&quot;);\nConsole.WriteLine(&quot;{0} (&#39;FFFFFFF&#39;) --&gt; {0:FFFFFFF}&quot;, ts1);\n\nTimeSpan ts2 = TimeSpan.Parse(&quot;0:0:3.9500000&quot;);\nConsole.WriteLine(&quot;{0} (&#39;ss\\\\.FFFFFFF&#39;) --&gt; {0:ss\\\\.FFFFFFF}&quot;, ts2);\nConsole.WriteLine();\n\nConsole.WriteLine(&quot;Parsing:&quot;);\nstring[] inputs = { &quot;0:0:03.&quot;, &quot;0:0:03.12&quot;, &quot;0:0:03.1279569&quot; };\nstring fmt = @&quot;h\\:m\\:ss\\.FFFFFFF&quot;;\nTimeSpan ts3;\n\nforeach (string input in inputs) {\n   if (TimeSpan.TryParseExact(input, fmt, null, out ts3))\n      Console.WriteLine(&quot;{0} (&#39;{1}&#39;) --&gt; {2}&quot;, input, fmt, ts3);\n   else\n      Console.WriteLine(&quot;Cannot parse {0} with &#39;{1}&#39;.&quot;, \n                        input, fmt);\n}\n// The example displays the following output:\n//    Formatting:\n//    00:00:03.6974974 (&#39;FFFFFFF&#39;) --&gt; 6974974\n//    00:00:03.9500000 (&#39;ss\\.FFFFFFF&#39;) --&gt; 03.95\n//    \n//    Parsing:\n//    0:0:03. (&#39;h\\:m\\:ss\\.FFFFFFF&#39;) --&gt; 00:00:03\n//    0:0:03.12 (&#39;h\\:m\\:ss\\.FFFFFFF&#39;) --&gt; 00:00:03.1200000\n//    0:0:03.1279569 (&#39;h\\:m\\:ss\\.FFFFFFF&#39;) --&gt; 00:00:03.1279569 \n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Console.WriteLine(&quot;Formatting:&quot;)\nDim ts1 As TimeSpan = TimeSpan.Parse(&quot;0:0:3.6974974&quot;)\nConsole.WriteLine(&quot;{0} (&#39;FFFFFFF&#39;) --&gt; {0:FFFFFFF}&quot;, ts1)\n\nDim ts2 As TimeSpan = TimeSpan.Parse(&quot;0:0:3.9500000&quot;)\nConsole.WriteLine(&quot;{0} (&#39;ss\\.FFFFFFF&#39;) --&gt; {0:ss\\.FFFFFFF}&quot;, ts2)\nConsole.WriteLine()\n\nConsole.WriteLine(&quot;Parsing:&quot;)\nDim inputs() As String = { &quot;0:0:03.&quot;, &quot;0:0:03.12&quot;, &quot;0:0:03.1279569&quot; }\nDim fmt As String = &quot;h\\:m\\:ss\\.FFFFFFF&quot;\nDim ts3 As TimeSpan\n\nFor Each input As String In inputs\n   If TimeSpan.TryParseExact(input, fmt, Nothing, ts3)\n      Console.WriteLine(&quot;{0} (&#39;{1}&#39;) --&gt; {2}&quot;, input, fmt, ts3)\n   Else\n      Console.WriteLine(&quot;Cannot parse {0} with &#39;{1}&#39;.&quot;, \n                        input, fmt)\n   End If  \nNext\n&#39; The example displays the following output:\n&#39;    Formatting:\n&#39;    00:00:03.6974974 (&#39;FFFFFFF&#39;) --&gt; 6974974\n&#39;    00:00:03.9500000 (&#39;ss\\.FFFFFFF&#39;) --&gt; 03.95\n&#39;    \n&#39;    Parsing:\n&#39;    0:0:03. (&#39;h\\:m\\:ss\\.FFFFFFF&#39;) --&gt; 00:00:03\n&#39;    0:0:03.12 (&#39;h\\:m\\:ss\\.FFFFFFF&#39;) --&gt; 00:00:03.1200000\n&#39;    0:0:03.1279569 (&#39;h\\:m\\:ss\\.FFFFFFF&#39;) --&gt; 00:00:03.1279569  \n</code></pre><h2 id=\"other-characters\">Other Characters</h2>\n<p>Any other unescaped character in a format string, including a white-space character, is interpreted as a custom format specifier. In most cases, the presence of any other unescaped character results in a <a class=\"xref\" href=\"../../../api/system.formatexception\" data-linktype=\"relative-path\">FormatException</a>. </p>\n<p>There are two ways to include a literal character in a format string:</p>\n<ul>\n<li><p>Enclose it in single quotation marks (the literal string delimiter). </p>\n</li>\n<li><p>Precede it with a backslash (&quot;\\&quot;), which is interpreted as an escape character. This means that, in C#, the format string must either be @-quoted, or the literal character must be preceded by an additional backslash.</p>\n<p>In some cases, you may have to use conditional logic to include an escaped literal in a format string. The following example uses conditional logic to include a sign symbol for negative time intervals. </p>\n</li>\n</ul>\n<pre class=\"loading\"><code class=\"lang-csharp\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      TimeSpan result = new DateTime(2010, 01, 01) - DateTime.Now; \n      String fmt = (result &lt; TimeSpan.Zero ?  &quot;\\\\-&quot; : &quot;&quot;) + &quot;dd\\\\.hh\\\\:mm&quot;;\n\n      Console.WriteLine(result.ToString(fmt));\n      Console.WriteLine(&quot;Interval: {0:&quot; + fmt + &quot;}&quot;, result);\n   }\n}\n// The example displays output like the following:\n//       -1291.10:54\n//       Interval: -1291.10:54\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Module Example\n   Public Sub Main()\n      Dim result As TimeSpan = New DateTime(2010, 01, 01) - Date.Now \n      Dim fmt As String = If(result &lt; TimeSpan.Zero, &quot;\\-&quot;, &quot;&quot;) + &quot;dd\\.hh\\:mm&quot;\n\n      Console.WriteLine(result.ToString(fmt))\n      Console.WriteLine(&quot;Interval: {0:&quot; + fmt + &quot;}&quot;, result)\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       -1291.10:54\n&#39;       Interval: -1291.10:54\n</code></pre><p>.NET does not define a grammar for separators in time intervals. This means that the separators between days and hours, hours and minutes, minutes and seconds, and seconds and fractions of a second must all be treated as character literals in a format string.</p>\n<p>The following example uses both the escape character and the single quote to define a custom format string that includes the word &quot;minutes&quot; in the output string. </p>\n<pre class=\"loading\"><code class=\"lang-csharp\">TimeSpan interval = new TimeSpan(0, 32, 45);\n// Escape literal characters in a format string.\nstring fmt = @&quot;mm\\:ss\\ \\m\\i\\n\\u\\t\\e\\s&quot;;\nConsole.WriteLine(interval.ToString(fmt));\n// Delimit literal characters in a format string with the &#39; symbol.\nfmt = &quot;mm&#39;:&#39;ss&#39; minutes&#39;&quot;;      \nConsole.WriteLine(interval.ToString(fmt));\n// The example displays the following output: \n//       32:45 minutes      \n//       32:45 minutes\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim interval As New TimeSpan(0, 32, 45)\n&#39; Escape literal characters in a format string.\nDim fmt As String = &quot;mm\\:ss\\ \\m\\i\\n\\u\\t\\e\\s&quot;\nConsole.WriteLine(interval.ToString(fmt))\n&#39; Delimit literal characters in a format string with the &#39; symbol.\nfmt = &quot;mm&#39;:&#39;ss&#39; minutes&#39;&quot;\nConsole.WriteLine(interval.ToString(fmt))\n&#39; The example displays the following output: \n&#39;       32:45 minutes      \n&#39;       32:45 minutes\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p><a href=\"formatting-types\" data-linktype=\"relative-path\">Formatting types</a></p>\n<p><a href=\"standard-timespan\" data-linktype=\"relative-path\">Standard TimeSpan format strings</a>  </p>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet/toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"e79745eb-6ebd-4e62-85c4-4f2830c27285\">\r\n<meta name=\"description\" content=\"Custom TimeSpan format strings\">\r\n<meta name=\"keywords\" content=\".NET, .NET Core\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"07/25/2016\">\r\n<meta name=\"ms.technology\" content=\"dotnet-standard\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/standard/base-types/custom-timespan.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/standard/base-types/custom-timespan.md\">\r\n<meta name=\"document_id\" content=\"a0760276-9a4d-7017-1bb8-e5bf4bc0c337\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Custom TimeSpan format strings | Microsoft Docs","ms.devlang":"dotnet","ms.assetid":"e79745eb-6ebd-4e62-85c4-4f2830c27285","description":"Custom TimeSpan format strings","keywords":".NET, .NET Core","ms.topic":"article","ms.date":"07/25/2016","ms.technology":"dotnet-standard","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"fixed broken anchors (#1194)","commit_sha":"b20713600d7c3ddc31be5885733a1e8910ede8c6","commit_date":"2016-11-02 20:45:13 -0700"},{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Porting base type docs take 4 (#1053)","commit_sha":"fb00da6505c9edb6a49d2003ae9bcb8e74c11d6c","commit_date":"2016-10-06 10:32:59 -0700"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/standard/base-types/custom-timespan.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/standard/base-types/custom-timespan.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/standard/base-types/custom-timespan.md","document_id":"a0760276-9a4d-7017-1bb8-e5bf4bc0c337","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/standard/base-types/custom-timespan","toc_asset_id":"articles/toc.json","toc_rel":"../../toc.json","_op_ogTitle":"Custom TimeSpan format strings","_op_displayDate":"2016-7-25","_op_displayDate_source":"2016-07-25T00:00:00Z","_op_wordCount":8574,"_op_rawTitle":"<h1 id=\"custom-timespan-format-strings\" sourcefile=\"docs/standard/base-types/custom-timespan.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Custom TimeSpan format strings</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/standard/base-types/custom-timespan","fileRelativePath":"articles/standard/base-types/custom-timespan.html"},"themesRelativePathToOutputRoot":"_themes/"}