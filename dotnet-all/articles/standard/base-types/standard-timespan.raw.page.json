{"content":"<div><div class=\"content\">\n<p>A standard <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> format string uses a single format specifier to define the text representation of a <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value that results from a formatting operation. Any format string that contains more than one character, including white space, is interpreted as a custom <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> format string. For more information, see <a href=\"custom-timespan\" data-linktype=\"relative-path\">Custom TimeSpan Format Strings</a>.</p>\n<p>The string representations of <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> values are produced by calls to the overloads of the <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_ToString\" data-linktype=\"relative-path\">TimeSpan.ToString</a> method, as well as by methods that support composite formatting, such as <a class=\"xref\" href=\"../../../api/system.string#System_String_Format_System_IFormatProvider_System_String_System_Object_\" data-linktype=\"relative-path\">String.Format</a>. For more information, see <a href=\"formatting-types\" data-linktype=\"relative-path\">Formatting Types</a> and <a href=\"composite-format\" data-linktype=\"relative-path\">Composite Formatting</a>. The following example illustrates the use of standard format strings in formatting operations</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      TimeSpan duration = new TimeSpan(1, 12, 23, 62);\n      string output = &quot;Time of Travel: &quot; + duration.ToString(&quot;c&quot;);\n      Console.WriteLine(output);\n\n      Console.WriteLine(&quot;Time of Travel: {0:c}&quot;, duration); \n   }\n}\n// The example displays the following output:\n//       Time of Travel: 1.12:24:02\n//       Time of Travel: 1.12:24:02\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Module Example\n   Public Sub Main()\n      Dim duration As New TimeSpan(1, 12, 23, 62)\n      Dim output As String = &quot;Time of Travel: &quot; + duration.ToString(&quot;c&quot;)\n      Console.WriteLine(output)\n\n      Console.WriteLine(&quot;Time of Travel: {0:c}&quot;, duration) \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Time of Travel: 1.12:24:02\n&#39;       Time of Travel: 1.12:24:02\n</code></pre><p>Standard <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> format strings are also used by the <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_ParseExact_System_String_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">TimeSpan.ParseExact</a> and <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_TryParseExact_System_String_System_String_System_IFormatProvider_System_Globalization_TimeSpanStyles_System_TimeSpan__\" data-linktype=\"relative-path\">TimeSpan.TryParseExact</a> methods to define the required format of input strings for parsing operations. (Parsing converts the string representation of a value to that value.) The following example illustrates the use of standard format strings in parsing operations.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string value = &quot;1.03:14:56.1667&quot;;\n      TimeSpan interval;\n      try {\n         interval = TimeSpan.ParseExact(value, &quot;c&quot;, null);\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}&quot;, value, interval);\n      }   \n      catch (FormatException) {\n         Console.WriteLine(&quot;{0}: Bad Format&quot;, value);\n      }   \n      catch (OverflowException) {\n         Console.WriteLine(&quot;{0}: Out of Range&quot;, value);\n      }\n\n      if (TimeSpan.TryParseExact(value, &quot;c&quot;, null, out interval))\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}&quot;, value, interval);\n      else\n         Console.WriteLine(&quot;Unable to convert {0} to a time interval.&quot;, \n                           value);\n   }\n}\n// The example displays the following output:\n//       Converted &#39;1.03:14:56.1667&#39; to 1.03:14:56.1667000\n//       Converted &#39;1.03:14:56.1667&#39; to 1.03:14:56.1667000\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Module Example\n   Public Sub Main()\n      Dim value As String = &quot;1.03:14:56.1667&quot;\n      Dim interval As TimeSpan\n      Try\n         interval = TimeSpan.ParseExact(value, &quot;c&quot;, Nothing)\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}&quot;, value, interval)\n      Catch e As FormatException\n         Console.WriteLine(&quot;{0}: Bad Format&quot;, value)\n      Catch e As OverflowException\n         Console.WriteLine(&quot;{0}: Out of Range&quot;, value)\n      End Try\n\n      If TimeSpan.TryParseExact(value, &quot;c&quot;, Nothing, interval) Then\n         Console.WriteLine(&quot;Converted &#39;{0}&#39; to {1}&quot;, value, interval)\n      Else\n         Console.WriteLine(&quot;Unable to convert {0} to a time interval.&quot;, \n                           value)\n      End If                \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Converted &#39;1.03:14:56.1667&#39; to 1.03:14:56.1667000\n&#39;       Converted &#39;1.03:14:56.1667&#39; to 1.03:14:56.1667000\n</code></pre><p>The following table lists the standard time interval format specifiers.</p>\n<table>\n<thead>\n<tr>\n<th>Format specifier</th>\n<th>Name</th>\n<th>Description</th>\n<th>Examples</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&quot;c&quot;</td>\n<td>Constant (invariant) format</td>\n<td>This specifier is not culture-sensitive. It takes the form [-][d’.’]hh’:’mm’:’ss[‘.’fffffff]. (The &quot;t&quot; and &quot;T&quot; format strings produce the same results.)</td>\n<td><code>TimeSpan.Zero -&gt; 00:00:00</code>; <code>New TimeSpan(0, 0, 30, 0) -&gt; 00:30:00</code>; <code>New TimeSpan(3, 17, 25, 30, 500) -&gt; 3.17:25:30.5000000</code></td>\n</tr>\n<tr>\n<td>&quot;g&quot;</td>\n<td>General short format</td>\n<td>This specifier outputs only what is needed. It is culture-sensitive and takes the form [-][d’:’]h’:’mm’:’ss[.FFFFFFF].</td>\n<td><code>New TimeSpan(1, 3, 16, 50, 500) -&gt; 1:3:16:50.5 (en-US)</code>; <code>New TimeSpan(1, 3, 16, 50, 500) -&gt; 1:3:16:50,5 (fr-FR)</code>; <code>New TimeSpan(1, 3, 16, 50, 599) -&gt; 1:3:16:50.599 (en-US)</code>; <code>New TimeSpan(1, 3, 16, 50, 599) -&gt; 1:3:16:50,599 (fr-FR)</code></td>\n</tr>\n<tr>\n<td>&quot;G&quot;</td>\n<td>General long format</td>\n<td>This specifier always outputs days and seven fractional digits. It is culture-sensitive and takes the form [-]d’:’hh’:’mm’:’ss.fffffff.</td>\n<td><code>New TimeSpan(18, 30, 0) -&gt; 0:18:30:00.0000000 (en-US)</code>; <code>New TimeSpan(18, 30, 0) -&gt; 0:18:30:00,0000000 (fr-FR)</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"the-constant-c-format-specifier\">The Constant (&quot;c&quot;) Format Specifier</h2>\n<p>The &quot;c&quot; format specifier returns the string representation of a <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value in the following form:</p>\n<p>[-][<em>d</em>.]<em>hh</em>:<em>mm</em>:<em>ss</em>[.<em>fffffff</em>]</p>\n<p>Elements in square brackets ([ and ]) are optional. The period (.) and colon (:) are literal symbols. The following table describes the remaining elements. </p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-</td>\n<td>An optional negative sign, which indicates a negative time interval.</td>\n</tr>\n<tr>\n<td><em>d</em></td>\n<td>The optional number of days, with no leading zeros.</td>\n</tr>\n<tr>\n<td><em>hh</em></td>\n<td>The number of hours, which ranges from &quot;00&quot; to &quot;23&quot;.</td>\n</tr>\n<tr>\n<td><em>mm</em></td>\n<td>The number of minutes, which ranges from &quot;00&quot; to &quot;59&quot;.</td>\n</tr>\n<tr>\n<td><em>ss</em></td>\n<td>The number of seconds, which ranges from &quot;0&quot; to &quot;59&quot;.</td>\n</tr>\n<tr>\n<td><em>fffffff</em></td>\n<td>The optional fractional portion of a second. Its value can range from &quot;0000001&quot; (one tick, or one ten-millionth of a second) to &quot;9999999&quot; (9,999,999 ten-millionths of a second, or one second less one tick).</td>\n</tr>\n</tbody>\n</table>\n<p>Unlike the &quot;g&quot; and &quot;G&quot; format specifiers, the &quot;c&quot; format specifier is not culture-sensitive. It produces the string representation of a <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value that is invariant and that is common to all previous versions of the .NET Framework before the .NET Framework 4. &quot;c&quot; is the default <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> format string; the <a class=\"xref\" href=\"../../../api/system.timespan#System_TimeSpan_ToString\" data-linktype=\"relative-path\">TimeSpan.ToString</a> method formats a time interval value by using the &quot;c&quot; format string.</p>\n<div class=\"NOTE\"><h5>Note</h5><p><a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> also supports the &quot;t&quot; and &quot;T&quot; standard format strings, which are identical in behavior to the &quot;c&quot; standard format string.</p>\n</div>\n<p>The following example instantiates two <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects, uses them to perform arithmetic operations, and displays the result. In each case, it uses composite formatting to display the <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value by using the &quot;c&quot; format specifier.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n      TimeSpan interval1, interval2;\n      interval1 = new TimeSpan(7, 45, 16);\n      interval2 = new TimeSpan(18, 12, 38);\n\n      Console.WriteLine(&quot;{0:c} - {1:c} = {2:c}&quot;, interval1, \n                        interval2, interval1 - interval2);\n      Console.WriteLine(&quot;{0:c} + {1:c} = {2:c}&quot;, interval1, \n                        interval2, interval1 + interval2);\n\n      interval1 = new TimeSpan(0, 0, 1, 14, 365);\n      interval2 = TimeSpan.FromTicks(2143756);  \n      Console.WriteLine(&quot;{0:c} + {1:c} = {2:c}&quot;, interval1, \n                        interval2, interval1 + interval2);\n   }\n}\n// The example displays the following output:\n//       07:45:16 - 18:12:38 = -10:27:22\n//       07:45:16 + 18:12:38 = 1.01:57:54\n//       00:01:14.3650000 + 00:00:00.2143756 = 00:01:14.5793756\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Module Example\n   Public Sub Main()\n      Dim interval1, interval2 As TimeSpan\n      interval1 = New TimeSpan(7, 45, 16)\n      interval2 = New TimeSpan(18, 12, 38)\n\n      Console.WriteLine(&quot;{0:c} - {1:c} = {2:c}&quot;, interval1, \n                        interval2, interval1 - interval2)\n      Console.WriteLine(&quot;{0:c} + {1:c} = {2:c}&quot;, interval1, \n                        interval2, interval1 + interval2)\n\n      interval1 = New TimeSpan(0, 0, 1, 14, 365)\n      interval2 = TimeSpan.FromTicks(2143756)      \n      Console.WriteLine(&quot;{0:c} + {1:c} = {2:c}&quot;, interval1, \n                        interval2, interval1 + interval2)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       07:45:16 - 18:12:38 = -10:27:22\n&#39;       07:45:16 + 18:12:38 = 1.01:57:54\n&#39;       00:01:14.3650000 + 00:00:00.2143756 = 00:01:14.5793756\n</code></pre><h2 id=\"the-general-short-g-format-specifier\">The General Short (&quot;g&quot;) Format Specifier</h2>\n<p>The &quot;g&quot; <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> format specifier returns the string representation of a <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value in a compact form by including only the elements that are necessary. It has the following form:</p>\n<p>[-][<em>d</em>:]<em>h</em>:<em>mm</em>:<em>ss</em>[.<em>FFFFFFF</em>]</p>\n<p>Elements in square brackets ([ and ]) are optional. The colon (:) is a literal symbol. The following table describes the remaining elements.</p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-</td>\n<td>An optional negative sign, which indicates a negative time interval.</td>\n</tr>\n<tr>\n<td><em>d</em></td>\n<td>The optional number of days, with no leading zeros.</td>\n</tr>\n<tr>\n<td><em>hh</em></td>\n<td>The number of hours, which ranges from &quot;0&quot; to &quot;23&quot;, with no leading zeros.</td>\n</tr>\n<tr>\n<td><em>mm</em></td>\n<td>The number of minutes, which ranges from &quot;00&quot; to &quot;59&quot;.</td>\n</tr>\n<tr>\n<td><em>ss</em></td>\n<td>The number of seconds, which ranges from &quot;0&quot; to &quot;59&quot;.</td>\n</tr>\n<tr>\n<td>.</td>\n<td>The fractional seconds separator.</td>\n</tr>\n<tr>\n<td><em>FFFFFFF</em></td>\n<td>The fractional seconds. As few digits as possible are displayed.</td>\n</tr>\n</tbody>\n</table>\n<p>Like the &quot;G&quot; format specifier, the &quot;g&quot; format specifier is localized. Its fractional seconds separator is based on the current culture.</p>\n<p>The following example instantiates two <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects, uses them to perform arithmetic operations, and displays the result. In each case, it uses composite formatting to display the <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value by using the &quot;g&quot; format specifier. In addition, it formats the <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value by using the formatting conventions of the current system culture (which, in this case, is English - United States or en-US) and the French - France (fr-FR) culture.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      TimeSpan interval1, interval2;\n      interval1 = new TimeSpan(7, 45, 16);\n      interval2 = new TimeSpan(18, 12, 38);\n\n      Console.WriteLine(&quot;{0:g} - {1:g} = {2:g}&quot;, interval1, \n                        interval2, interval1 - interval2);\n      Console.WriteLine(String.Format(new CultureInfo(&quot;fr-FR&quot;), \n                        &quot;{0:g} + {1:g} = {2:g}&quot;, interval1, \n                        interval2, interval1 + interval2));\n\n      interval1 = new TimeSpan(0, 0, 1, 14, 36);\n      interval2 = TimeSpan.FromTicks(2143756);      \n      Console.WriteLine(&quot;{0:g} + {1:g} = {2:g}&quot;, interval1, \n                        interval2, interval1 + interval2);\n   }\n}\n// The example displays the following output:\n//       7:45:16 - 18:12:38 = -10:27:22\n//       7:45:16 + 18:12:38 = 1:1:57:54\n//       0:01:14.036 + 0:00:00.2143756 = 0:01:14.2503756\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim interval1, interval2 As TimeSpan\n      interval1 = New TimeSpan(7, 45, 16)\n      interval2 = New TimeSpan(18, 12, 38)\n\n      Console.WriteLine(&quot;{0:g} - {1:g} = {2:g}&quot;, interval1, \n                        interval2, interval1 - interval2)\n      Console.WriteLine(String.Format(New CultureInfo(&quot;fr-FR&quot;), \n                        &quot;{0:g} + {1:g} = {2:g}&quot;, interval1, \n                        interval2, interval1 + interval2))\n\n      interval1 = New TimeSpan(0, 0, 1, 14, 36)\n      interval2 = TimeSpan.FromTicks(2143756)      \n      Console.WriteLine(&quot;{0:g} + {1:g} = {2:g}&quot;, interval1, \n                        interval2, interval1 + interval2)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       7:45:16 - 18:12:38 = -10:27:22\n&#39;       7:45:16 + 18:12:38 = 1:1:57:54\n&#39;       0:01:14.036 + 0:00:00.2143756 = 0:01:14.2503756\n</code></pre><h2 id=\"the-general-long-g-format-specifier\">The General Long (&quot;G&quot;) Format Specifier</h2>\n<p>The &quot;G&quot; <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> format specifier returns the string representation of a <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value in a long form that always includes both days and fractional seconds. The string that results from the &quot;G&quot; standard format specifier has the following form:</p>\n<p>[-]<em>d</em>:<em>hh</em>:<em>mm</em>:<em>ss</em>.<em>fffffff</em></p>\n<p>Elements in square brackets ([ and ]) are optional. The colon (:) is a literal symbol. The following table describes the remaining elements.</p>\n<table>\n<thead>\n<tr>\n<th>Element</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-</td>\n<td>An optional negative sign, which indicates a negative time interval.</td>\n</tr>\n<tr>\n<td><em>d</em></td>\n<td>The optional number of days, with no leading zeros.</td>\n</tr>\n<tr>\n<td><em>hh</em></td>\n<td>The number of hours, which ranges from &quot;0&quot; to &quot;23&quot;.</td>\n</tr>\n<tr>\n<td><em>mm</em></td>\n<td>The number of minutes, which ranges from &quot;00&quot; to &quot;59&quot;.</td>\n</tr>\n<tr>\n<td><em>ss</em></td>\n<td>The number of seconds, which ranges from &quot;0&quot; to &quot;59&quot;.</td>\n</tr>\n<tr>\n<td>.</td>\n<td>The fractional seconds separator.</td>\n</tr>\n<tr>\n<td><em>fffffff</em></td>\n<td>The fractional seconds.</td>\n</tr>\n</tbody>\n</table>\n<p>Like the &quot;G&quot; format specifier, the &quot;g&quot; format specifier is localized. Its fractional seconds separator is based on the current culture.</p>\n<p>The following example instantiates two <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> objects, uses them to perform arithmetic operations, and displays the result. In each case, it uses composite formatting to display the <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value by using the &quot;G&quot; format specifier. In addition, it formats the <a class=\"xref\" href=\"../../../api/system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value by using the formatting conventions of the current system culture (which, in this case, is English - United States or en-US) and the French - France (fr-FR) culture. </p>\n<pre class=\"loading\"><code class=\"lang-csharp\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      TimeSpan interval1, interval2;\n      interval1 = new TimeSpan(7, 45, 16);\n      interval2 = new TimeSpan(18, 12, 38);\n\n      Console.WriteLine(&quot;{0:G} - {1:G} = {2:G}&quot;, interval1, \n                        interval2, interval1 - interval2);\n      Console.WriteLine(String.Format(new CultureInfo(&quot;fr-FR&quot;), \n                        &quot;{0:G} + {1:G} = {2:G}&quot;, interval1, \n                        interval2, interval1 + interval2));\n\n      interval1 = new TimeSpan(0, 0, 1, 14, 36);\n      interval2 = TimeSpan.FromTicks(2143756);      \n      Console.WriteLine(&quot;{0:G} + {1:G} = {2:G}&quot;, interval1, \n                        interval2, interval1 + interval2);\n   }\n}\n// The example displays the following output:\n//       0:07:45:16.0000000 - 0:18:12:38.0000000 = -0:10:27:22.0000000\n//       0:07:45:16,0000000 + 0:18:12:38,0000000 = 1:01:57:54,0000000\n//       0:00:01:14.0360000 + 0:00:00:00.2143756 = 0:00:01:14.2503756\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim interval1, interval2 As TimeSpan\n      interval1 = New TimeSpan(7, 45, 16)\n      interval2 = New TimeSpan(18, 12, 38)\n\n      Console.WriteLine(&quot;{0:G} - {1:G} = {2:G}&quot;, interval1, \n                        interval2, interval1 - interval2)\n      Console.WriteLine(String.Format(New CultureInfo(&quot;fr-FR&quot;), \n                        &quot;{0:G} + {1:G} = {2:G}&quot;, interval1, \n                        interval2, interval1 + interval2))\n\n      interval1 = New TimeSpan(0, 0, 1, 14, 36)\n      interval2 = TimeSpan.FromTicks(2143756)      \n      Console.WriteLine(&quot;{0:G} + {1:G} = {2:G}&quot;, interval1, \n                        interval2, interval1 + interval2)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       0:07:45:16.0000000 - 0:18:12:38.0000000 = -0:10:27:22.0000000\n&#39;       0:07:45:16,0000000 + 0:18:12:38,0000000 = 1:01:57:54,0000000\n&#39;       0:00:01:14.0360000 + 0:00:00:00.2143756 = 0:00:01:14.2503756\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p><a href=\"formatting-types\" data-linktype=\"relative-path\">Formatting types</a></p>\n<p><a href=\"composite-format\" data-linktype=\"relative-path\">Composite formatting</a></p>\n<p><a href=\"parsing-strings\" data-linktype=\"relative-path\">Parsing strings</a></p>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.devlang\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"4e0f02f1-4abd-47b5-8995-5c3ff45b0ce1\">\r\n<meta name=\"description\" content=\"Standard TimeSpan format strings\">\r\n<meta name=\"keywords\" content=\".NET, .NET Core\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"07/26/2016\">\r\n<meta name=\"ms.technology\" content=\"dotnet-standard\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/standard/base-types/standard-timespan.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/standard/base-types/standard-timespan.md\">\r\n<meta name=\"document_id\" content=\"78013fba-86c5-fe95-63ef-1e6d372e3a3b\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Standard TimeSpan format strings | Microsoft Docs","ms.devlang":"dotnet","ms.assetid":"4e0f02f1-4abd-47b5-8995-5c3ff45b0ce1","description":"Standard TimeSpan format strings","keywords":".NET, .NET Core","ms.topic":"article","ms.date":"07/26/2016","ms.technology":"dotnet-standard","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Porting base type docs take 4 (#1053)","commit_sha":"fb00da6505c9edb6a49d2003ae9bcb8e74c11d6c","commit_date":"2016-10-06 10:32:59 -0700"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/standard/base-types/standard-timespan.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/standard/base-types/standard-timespan.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/standard/base-types/standard-timespan.md","document_id":"78013fba-86c5-fe95-63ef-1e6d372e3a3b","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/standard/base-types/standard-timespan","toc_asset_id":"articles/toc.json","toc_rel":"../../toc.json","_op_ogTitle":"Standard TimeSpan format strings","_op_displayDate":"2016-7-26","_op_displayDate_source":"2016-07-26T00:00:00Z","_op_wordCount":1876,"_op_rawTitle":"<h1 id=\"standard-timespan-format-strings\" sourcefile=\"docs/standard/base-types/standard-timespan.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Standard TimeSpan format strings</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/standard/base-types/standard-timespan","fileRelativePath":"articles/standard/base-types/standard-timespan.html"},"themesRelativePathToOutputRoot":"_themes/"}