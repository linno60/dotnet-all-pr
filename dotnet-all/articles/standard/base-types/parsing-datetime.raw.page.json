{"content":"<div><div class=\"content\">\n<p>Parsing methods convert the string representation of a date and time to an equivalent <a class=\"xref\" href=\"../../../api/system.datetime\" data-linktype=\"relative-path\">DateTime</a> object. The <a class=\"xref\" href=\"../../../api/system.datetime#System_DateTime_Parse_System_String_\" data-linktype=\"relative-path\">Parse</a> and <a class=\"xref\" href=\"../../../api/system.datetime#System_DateTime_TryParse_System_String_System_DateTime__\" data-linktype=\"relative-path\">TryParse</a> methods convert any of several common representations of a date and time. The <a class=\"xref\" href=\"../../../api/system.datetime#System_DateTime_ParseExact_System_String_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">ParseExact</a> and <a class=\"xref\" href=\"../../../api/system.datetime#System_DateTime_TryParseExact_System_String_System_String_System_IFormatProvider_System_Globalization_DateTimeStyles_System_DateTime__\" data-linktype=\"relative-path\">TryParseExact</a> methods convert a string representation that conforms to the pattern specified by a date and time format string. (See the topics on <a href=\"standard-datetime\" data-linktype=\"relative-path\">standard date and time format strings</a> and <a href=\"custom-datetime\" data-linktype=\"relative-path\">custom date and time format strings</a>.) </p>\n<p>Parsing is influenced by the properties of a format provider that supplies information such as the strings used for date and time separators, and the names of months, days, and eras. The format provider is the current <a class=\"xref\" href=\"../../../api/system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object, which is provided implicitly by the current thread culture or explicitly by the <a class=\"xref\" href=\"../../../api/system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> parameter of a parsing method. For the <a class=\"xref\" href=\"../../../api/system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> parameter, specify a <a class=\"xref\" href=\"../../../api/system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object, which represents a culture, or a <a class=\"xref\" href=\"../../../api/system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object. </p>\n<p>The string representation of a date to be parsed must include the month and at least a day or year. The string representation of a time must include the hour and at least minutes or the AM/PM designator. However, parsing supplies default values for omitted components if possible. A missing date defaults to the current date, a missing year defaults to the current year, a missing day of the month defaults to the first day of the month, and a missing time defaults to midnight. </p>\n<p>If the string representation specifies only a time, parsing returns a <a class=\"xref\" href=\"../../../api/system.datetime\" data-linktype=\"relative-path\">DateTime</a> object with its <a class=\"xref\" href=\"../../../api/system.datetime#System_DateTime_Year\" data-linktype=\"relative-path\">Year</a>, <a class=\"xref\" href=\"../../../api/system.datetime#System_DateTime_Month\" data-linktype=\"relative-path\">Month</a>, and <a class=\"xref\" href=\"../../../api/system.datetime#System_DateTime_Day\" data-linktype=\"relative-path\">Day</a> properties set to the corresponding values of the <a class=\"xref\" href=\"../../../api/system.datetime#System_DateTime_Today\" data-linktype=\"relative-path\">Today</a> property. However, if the <a class=\"xref\" href=\"../../../api/system.globalization.datetimestyles#System_Globalization_DateTimeStyles_NoCurrentDateDefault\" data-linktype=\"relative-path\">DateTimeStyles.NoCurrentDateDefault</a> constant is specified in the parsing method, the resulting year, month, and day properties are set to the value 1.</p>\n<p>In addition to a date and a time component, the string representation of a date and time can include an offset that indicates how much the time differs from Coordinated Universal Time (UTC). For example, the string &quot;2/14/2007 5:32:00 -7:00&quot; defines a time that is seven hours earlier than UTC. If an offset is omitted from the string representation of a time, parsing returns a <a class=\"xref\" href=\"../../../api/system.datetime\" data-linktype=\"relative-path\">DateTime</a> object with its <a class=\"xref\" href=\"../../../api/system.datetime#System_DateTime_Kind\" data-linktype=\"relative-path\">Kind</a> property set to <a class=\"xref\" href=\"../../../api/system.datetimekind#System_DateTimeKind_Unspecified\" data-linktype=\"relative-path\">DateTimeKind.Unspecified</a>. If an offset is specified, parsing returns a <a class=\"xref\" href=\"../../../api/system.datetime\" data-linktype=\"relative-path\">DateTime</a> object with its <a class=\"xref\" href=\"../../../api/system.datetime#System_DateTime_Kind\" data-linktype=\"relative-path\">Kind</a> property set to <a class=\"xref\" href=\"../../../api/system.datetimekind#System_DateTimeKind_Local\" data-linktype=\"relative-path\">Local</a> and its value adjusted to the local time zone of your machine. You can modify this behavior by using a <a class=\"xref\" href=\"../../../api/system.globalization.datetimestyles\" data-linktype=\"relative-path\">DateTimeStyles</a> constant with the parsing method.</p>\n<p>The format provider is also used to interpret an ambiguous numeric date. For example, it is not clear which components of the date represented by the string &quot;02/03/04&quot; are the month, day, and year. In this case, the components are interpreted according to the order of similar date formats in the format provider. </p>\n<h2 id=\"parse\">Parse</h2>\n<p>The following code example illustrates the use of the <code>Parse</code> method to convert a string into a <code>DateTime</code>. This example uses the culture associated with the current thread to perform the parse. If the <a class=\"xref\" href=\"../../../api/system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> associated with the current culture cannot parse the input string, a <a class=\"xref\" href=\"../../../api/system.formatexception\" data-linktype=\"relative-path\">FormatException</a> is thrown.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">string MyString = &quot;Jan 1, 2009&quot;;\nDateTime MyDateTime = DateTime.Parse(MyString);\nConsole.WriteLine(MyDateTime);\n// Displays the following output on a system whose culture is en-US:\n//       1/1/2009 12:00:00 AM\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Dim MyString As String = &quot;Jan 1, 2009&quot;\nDim MyDateTime As DateTime = DateTime.Parse(MyString)\nConsole.WriteLine(MyDateTime)\n&#39; Displays the following output on a system whose culture is en-US:\n&#39;       1/1/2009 12:00:00 AM\n</code></pre><p>You can also specify a <code>CultureInfo</code> set to one of the cultures defined by that object, or you can specify one of the standard <a class=\"xref\" href=\"../../../api/system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> objects returned by the <a class=\"xref\" href=\"../../../api/system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat\" data-linktype=\"relative-path\">CultureInfo.DateTimeFormat</a> property. The following code example uses a format provider to parse a German string into a <code>DateTime</code>. A <code>CultureInfo</code> representing the de-DE culture is defined and passed with the string being parsed to ensure successful parsing of this particular string. This precludes whatever setting is in the <code>CurrentCulture</code> of the <code>CurrentThread</code>.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      CultureInfo MyCultureInfo = new CultureInfo(&quot;de-DE&quot;);\n      string MyString = &quot;12 Juni 2008&quot;;\n      DateTime MyDateTime = DateTime.Parse(MyString, MyCultureInfo);\n      Console.WriteLine(MyDateTime);\n   }\n}\n// The example displays the following output:\n//       6/12/2008 12:00:00 AM\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim MyCultureInfo As CultureInfo = new CultureInfo(&quot;de-DE&quot;)\n      Dim MyString As String = &quot;12 Juni 2008&quot;\n      Dim MyDateTime As DateTime = DateTime.Parse(MyString, MyCultureInfo)\n      Console.WriteLine(MyDateTime)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       6/12/2008 12:00:00 AM\n</code></pre><p>However, although you can use overloads of the <a class=\"xref\" href=\"../../../api/system.datetime#System_DateTime_Parse_System_String_\" data-linktype=\"relative-path\">Parse</a> method to specify custom format providers, the method does not support the use of non-standard format providers. To parse a date and time expressed in a non-standard format, use the <a class=\"xref\" href=\"../../../api/system.datetime#System_DateTime_ParseExact_System_String_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">ParseExact</a> method instead.</p>\n<p>The following code example uses the <a class=\"xref\" href=\"../../../api/system.globalization.datetimestyles\" data-linktype=\"relative-path\">DateTimeStyles</a> enumeration to specify that the current date and time information should not be added to the <code>DateTime</code> for fields that the string does not define.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      CultureInfo MyCultureInfo = new CultureInfo(&quot;de-DE&quot;);\n      string MyString = &quot;12 Juni 2008&quot;;\n      DateTime MyDateTime = DateTime.Parse(MyString, MyCultureInfo, \n                                           DateTimeStyles.NoCurrentDateDefault);\n      Console.WriteLine(MyDateTime);\n   }\n}\n// The example displays the following output if the current culture is en-US:\n//      6/12/2008 12:00:00 AM\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim MyCultureInfo As CultureInfo = new CultureInfo(&quot;de-DE&quot;)\n      Dim MyString As String = &quot;12 Juni 2008&quot;\n      Dim MyDateTime As DateTime = DateTime.Parse(MyString, MyCultureInfo)\n      Console.WriteLine(MyDateTime)\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       6/12/2008 12:00:00 AM\n</code></pre><h2 id=\"parseexact\">ParseExact</h2>\n<p>The [DateTime.ParseExact]((xref:System.DateTime.ParseExact(System.String,System.String,System.IFormatProvider)) method converts a string that conforms to a specified string pattern to a <code>DateTime</code> object. When a string that is not of the form specified is passed to this method, a <a class=\"xref\" href=\"../../../api/system.formatexception\" data-linktype=\"relative-path\">FormatException</a> is thrown. You can specify one of the standard date and time format specifiers or a limited combination of the custom date and time format specifiers. Using the custom format specifiers, it is possible for you to construct a custom recognition string. For an explanation of the specifiers, see the topics on <a href=\"standard-datetime\" data-linktype=\"relative-path\">standard date and time format strings</a> and <a href=\"custom-datetime\" data-linktype=\"relative-path\">custom date and time format strings</a>. </p>\n<p>Each overload of the <a class=\"xref\" href=\"../../../api/system.datetime#System_DateTime_ParseExact_System_String_System_String_System_IFormatProvider_\" data-linktype=\"relative-path\">ParseExact</a> method also has an <a class=\"xref\" href=\"../../../api/system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> parameter that typically provides culture-specific information about the formatting of the string. Typically, this <a class=\"xref\" href=\"../../../api/system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> object is a <a class=\"xref\" href=\"../../../api/system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a> object that represents a standard culture or a <a class=\"xref\" href=\"../../../api/system.globalization.datetimeformatinfo\" data-linktype=\"relative-path\">DateTimeFormatInfo</a> object that is returned by the <a class=\"xref\" href=\"../../../api/system.globalization.cultureinfo#System_Globalization_CultureInfo_DateTimeFormat\" data-linktype=\"relative-path\">CultureInfo.DateTimeFormat</a> property. However, unlike the other date and time parsing functions, this method also supports an <a class=\"xref\" href=\"../../../api/system.iformatprovider\" data-linktype=\"relative-path\">IFormatProvider</a> that defines a non-standard date and time format. </p>\n<p>In the following code example, the <code>ParseExact</code> method is passed a string object to parse, followed by a format specifier, followed by a <code>CultureInfo</code> object. This <code>ParseExact</code> method can only parse strings that exhibit the long date pattern in the en-US culture.</p>\n<pre class=\"loading\"><code class=\"lang-csharp\">using System;\nusing System.Globalization;\n\npublic class Example\n{\n   public static void Main()\n   {\n      CultureInfo MyCultureInfo = new CultureInfo(&quot;en-US&quot;);\n      string[] MyString = {&quot; Friday, April 10, 2009&quot;, &quot;Friday, April 10, 2009&quot;};\n      foreach (string dateString in MyString)\n      {\n         try {\n            DateTime MyDateTime = DateTime.ParseExact(dateString, &quot;D&quot;, MyCultureInfo);\n            Console.WriteLine(MyDateTime);\n         }\n         catch (FormatException) {\n            Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;&quot;, dateString);\n         }\n      }\n   }\n}\n// The example displays the following output:\n//       Unable to parse &#39; Friday, April 10, 2009&#39;\n//       4/10/2009 12:00:00 AM\n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Imports System.Globalization\n\nModule Example\n   Public Sub Main()\n      Dim MyCultureInfo As CultureInfo = new CultureInfo(&quot;en-US&quot;)\n      Dim MyString() As String = {&quot; Friday, April 10, 2009&quot;, &quot;Friday, April 10, 2009&quot;}\n      For Each dateString As String In MyString\n         Try\n            Dim MyDateTime As DateTime = DateTime.ParseExact(dateString, &quot;D&quot;, _\n                                                             MyCultureInfo)\n            Console.WriteLine(MyDateTime)\n         Catch e As FormatException\n            Console.WriteLine(&quot;Unable to parse &#39;{0}&#39;&quot;, dateString)\n         End Try\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;       Unable to parse &#39; Friday, April 10, 2009&#39;\n&#39;       4/10/2009 12:00:00 AM\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p><a href=\"parsing-strings\" data-linktype=\"relative-path\">Parsing strings in .NET</a></p>\n<p><a href=\"formatting-types\" data-linktype=\"relative-path\">Formatting types in .NET</a></p>\n<p><a href=\"type-conversion\" data-linktype=\"relative-path\">Type conversion in .NET</a></p>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.devlang\" content=\"dotnet\">\r\n<meta name=\"ms.assetid\" content=\"e61514cd-5329-4eb8-b122-482fffb54ab7\">\r\n<meta name=\"description\" content=\"Parsing date and time strings in .NET\">\r\n<meta name=\"keywords\" content=\".NET, .NET Core\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"07/29/2016\">\r\n<meta name=\"ms.technology\" content=\"dotnet-standard\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/standard/base-types/parsing-datetime.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/standard/base-types/parsing-datetime.md\">\r\n<meta name=\"document_id\" content=\"c5760963-7617-3006-72b6-0b85aa7fcdbf\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"Parsing date and time strings in .NET | Microsoft Docs","ms.devlang":"dotnet","ms.assetid":"e61514cd-5329-4eb8-b122-482fffb54ab7","description":"Parsing date and time strings in .NET","keywords":".NET, .NET Core","ms.topic":"article","ms.date":"07/29/2016","ms.technology":"dotnet-standard","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Porting base type docs take 4 (#1053)","commit_sha":"fb00da6505c9edb6a49d2003ae9bcb8e74c11d6c","commit_date":"2016-10-06 10:32:59 -0700"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/standard/base-types/parsing-datetime.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/standard/base-types/parsing-datetime.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/standard/base-types/parsing-datetime.md","document_id":"c5760963-7617-3006-72b6-0b85aa7fcdbf","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/standard/base-types/parsing-datetime","toc_asset_id":"articles/toc.json","toc_rel":"../../toc.json","_op_ogTitle":"Parsing date and time strings in .NET","_op_displayDate":"2016-7-29","_op_displayDate_source":"2016-07-29T00:00:00Z","_op_wordCount":1284,"_op_rawTitle":"<h1 id=\"parsing-date-and-time-strings-in-net\" sourcefile=\"docs/standard/base-types/parsing-datetime.md\" sourcestartlinenumber=\"15\" sourceendlinenumber=\"15\">Parsing date and time strings in .NET</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/standard/base-types/parsing-datetime","fileRelativePath":"articles/standard/base-types/parsing-datetime.html"},"themesRelativePathToOutputRoot":"_themes/"}