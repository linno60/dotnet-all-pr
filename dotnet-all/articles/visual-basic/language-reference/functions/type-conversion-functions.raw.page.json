{"content":"<div><div class=\"content\">\n<p>These functions are compiled inline, meaning the conversion code is part of the code that evaluates the expression. Sometimes there is no call to a procedure to accomplish the conversion, which improves performance. Each function coerces an expression to a specific data type.  </p>\n<h2 id=\"syntax\">Syntax</h2>\n<pre class=\"loading\"><code>CBool(expression)  \nCByte(expression)  \nCChar(expression)  \nCDate(expression)  \nCDbl(expression)  \nCDec(expression)  \nCInt(expression)  \nCLng(expression)  \nCObj(expression)  \nCSByte(expression)  \nCShort(expression)  \nCSng(expression)  \nCStr(expression)  \nCUInt(expression)  \nCULng(expression)  \nCUShort(expression)  \n</code></pre><h2 id=\"part\">Part</h2>\n<p> <code>expression</code><br> Required. Any expression of the source data type.  </p>\n<h2 id=\"return-value-data-type\">Return Value Data Type</h2>\n<p> The function name determines the data type of the value it returns, as shown in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Function name</th>\n<th>Return data type</th>\n<th>Range for <code>expression</code> argument</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>CBool</code></td>\n<td><a href=\"../data-types/boolean-data-type\" data-linktype=\"relative-path\">Boolean Data Type</a></td>\n<td>Any valid <code>Char</code> or <code>String</code> or numeric expression.</td>\n</tr>\n<tr>\n<td><code>CByte</code></td>\n<td><a href=\"../data-types/byte-data-type\" data-linktype=\"relative-path\">Byte Data Type</a></td>\n<td>0 through 255 (unsigned); fractional parts are rounded.<sup>1</sup></td>\n</tr>\n<tr>\n<td><code>CChar</code></td>\n<td><a href=\"../data-types/char-data-type\" data-linktype=\"relative-path\">Char Data Type</a></td>\n<td>Any valid <code>Char</code> or <code>String</code> expression; only first character of a <code>String</code> is converted; value can be 0 through 65535 (unsigned).</td>\n</tr>\n<tr>\n<td><code>CDate</code></td>\n<td><a href=\"../data-types/date-data-type\" data-linktype=\"relative-path\">Date Data Type</a></td>\n<td>Any valid representation of a date and time.</td>\n</tr>\n<tr>\n<td><code>CDbl</code></td>\n<td><a href=\"../data-types/double-data-type\" data-linktype=\"relative-path\">Double Data Type</a></td>\n<td>-1.79769313486231570E+308 through -4.94065645841246544E-324 for negative values; 4.94065645841246544E-324 through 1.79769313486231570E+308 for positive values.</td>\n</tr>\n<tr>\n<td><code>CDec</code></td>\n<td><a href=\"../data-types/decimal-data-type\" data-linktype=\"relative-path\">Decimal Data Type</a></td>\n<td>+/-79,228,162,514,264,337,593,543,950,335 for zero-scaled numbers, that is, numbers with no decimal places. For numbers with 28 decimal places, the range is +/-7.9228162514264337593543950335. The smallest possible non-zero number is 0.0000000000000000000000000001 (+/-1E-28).</td>\n</tr>\n<tr>\n<td><code>CInt</code></td>\n<td><a href=\"../data-types/integer-data-type\" data-linktype=\"relative-path\">Integer Data Type</a></td>\n<td>-2,147,483,648 through 2,147,483,647; fractional parts are rounded.<sup>1</sup></td>\n</tr>\n<tr>\n<td><code>CLng</code></td>\n<td><a href=\"../data-types/long-data-type\" data-linktype=\"relative-path\">Long Data Type</a></td>\n<td>-9,223,372,036,854,775,808 through 9,223,372,036,854,775,807; fractional parts are rounded.<sup>1</sup></td>\n</tr>\n<tr>\n<td><code>CObj</code></td>\n<td><a href=\"../data-types/object-data-type\" data-linktype=\"relative-path\">Object Data Type</a></td>\n<td>Any valid expression.</td>\n</tr>\n<tr>\n<td><code>CSByte</code></td>\n<td><a href=\"../data-types/sbyte-data-type\" data-linktype=\"relative-path\">SByte Data Type</a></td>\n<td>-128 through 127; fractional parts are rounded.<sup>1</sup></td>\n</tr>\n<tr>\n<td><code>CShort</code></td>\n<td><a href=\"../data-types/short-data-type\" data-linktype=\"relative-path\">Short Data Type</a></td>\n<td>-32,768 through 32,767; fractional parts are rounded.<sup>1</sup></td>\n</tr>\n<tr>\n<td><code>CSng</code></td>\n<td><a href=\"../data-types/single-data-type\" data-linktype=\"relative-path\">Single Data Type</a></td>\n<td>-3.402823E+38 through -1.401298E-45 for negative values; 1.401298E-45 through 3.402823E+38 for positive values.</td>\n</tr>\n<tr>\n<td><code>CStr</code></td>\n<td><a href=\"../data-types/string-data-type\" data-linktype=\"relative-path\">String Data Type</a></td>\n<td>Returns for <code>CStr</code> depend on the <code>expression</code> argument. See <a href=\"return-values-for-the-cstr-function\" data-linktype=\"relative-path\">Return Values for the CStr Function</a>.</td>\n</tr>\n<tr>\n<td><code>CUInt</code></td>\n<td><a href=\"../data-types/uinteger-data-type\" data-linktype=\"relative-path\">UInteger Data Type</a></td>\n<td>0 through 4,294,967,295 (unsigned); fractional parts are rounded.<sup>1</sup></td>\n</tr>\n<tr>\n<td><code>CULng</code></td>\n<td><a href=\"../data-types/ulong-data-type\" data-linktype=\"relative-path\">ULong Data Type</a></td>\n<td>0 through 18,446,744,073,709,551,615 (unsigned); fractional parts are rounded.<sup>1</sup></td>\n</tr>\n<tr>\n<td><code>CUShort</code></td>\n<td><a href=\"../data-types/ushort-data-type\" data-linktype=\"relative-path\">UShort Data Type</a></td>\n<td>0 through 65,535 (unsigned); fractional parts are rounded.<sup>1</sup></td>\n</tr>\n</tbody>\n</table>\n<p> <sup>1</sup> Fractional parts can be subject to a special type of rounding called <em>banker&#39;s rounding</em>. See &quot;Remarks&quot; for more information.  </p>\n<h2 id=\"remarks\">Remarks</h2>\n<p> As a rule, you should use the Visual Basic type conversion functions in preference to the .NET Framework methods such as <code>ToString()</code>, either on the <a class=\"xref\" href=\"../../../../api/system.convert\" data-linktype=\"relative-path\">Convert</a> class or on an individual type structure or class. The Visual Basic functions are designed for optimal interaction with Visual Basic code, and they also make your source code shorter and easier to read. In addition, the .NET Framework conversion methods do not always produce the same results as the Visual Basic functions, for example when converting <code>Boolean</code> to <code>Integer</code>. For more information, see <a href=\"../../programming-guide/language-features/data-types/troubleshooting-data-types\" data-linktype=\"relative-path\">Troubleshooting Data Types</a>.  </p>\n<h2 id=\"behavior\">Behavior</h2>\n<ul>\n<li><p><strong>Coercion.</strong> In general, you can use the data type conversion functions to coerce the result of an operation to a particular data type rather than the default data type. For example, use <code>CDec</code> to force decimal arithmetic in cases where single-precision, double-precision, or integer arithmetic would normally take place.  </p>\n</li>\n<li><p><strong>Failed Conversions.</strong> If the <code>expression</code> passed to the function is outside the range of the data type to which it is to be converted, an <a class=\"xref\" href=\"../../../../api/system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> occurs.  </p>\n</li>\n<li><p><strong>Fractional Parts.</strong> When you convert a nonintegral value to an integral type, the integer conversion functions (<code>CByte</code>, <code>CInt</code>, <code>CLng</code>, <code>CSByte</code>, <code>CShort</code>, <code>CUInt</code>, <code>CULng</code>, and <code>CUShort</code>) remove the fractional part and round the value to the closest integer.  </p>\n<p> If the fractional part is exactly 0.5, the integer conversion functions round it to the nearest even integer. For example, 0.5 rounds to 0, and 1.5 and 2.5 both round to 2. This is sometimes called <em>banker&#39;s rounding</em>, and its purpose is to compensate for a bias that could accumulate when adding many such numbers together.  </p>\n<p> <code>CInt</code> and <code>CLng</code> differ from the <a class=\"xref\" href=\"../../../../api/microsoft.visualbasic.conversion#Microsoft_VisualBasic_Conversion_Int_\" data-linktype=\"relative-path\">Int</a> and <a class=\"xref\" href=\"../../../../api/microsoft.visualbasic.conversion#Microsoft_VisualBasic_Conversion_Fix_\" data-linktype=\"relative-path\">Fix</a> functions, which truncate, rather than round, the fractional part of a number. Also, <code>Fix</code> and <code>Int</code> always return a value of the same data type as you pass in.  </p>\n</li>\n<li><p><strong>Date/Time Conversions.</strong> Use the <a class=\"xref\" href=\"../../../../api/microsoft.visualbasic.information#Microsoft_VisualBasic_Information_IsDate_\" data-linktype=\"relative-path\">IsDate</a> function to determine if a value can be converted to a date and time. <code>CDate</code> recognizes date literals and time literals but not numeric values. To convert a Visual Basic 6.0 <code>Date</code> value to a <code>Date</code> value in Visual Basic 2005 or later versions, you can use the <a class=\"xref\" href=\"../../../../api/system.datetime#System_DateTime_FromOADate_\" data-linktype=\"relative-path\">FromOADate</a> method.  </p>\n</li>\n<li><p><strong>Neutral Date/Time Values.</strong> The <a href=\"../data-types/date-data-type\" data-linktype=\"relative-path\">Date Data Type</a> always contains both date and time information. For purposes of type conversion, Visual Basic considers 1/1/0001 (January 1 of the year 1) to be a <em>neutral value</em> for the date, and 00:00:00 (midnight) to be a neutral value for the time. If you convert a <code>Date</code> value to a string, <code>CStr</code> does not include neutral values in the resulting string. For example, if you convert <code>#January 1, 0001 9:30:00#</code> to a string, the result is &quot;9:30:00 AM&quot;; the date information is suppressed. However, the date information is still present in the original <code>Date</code> value and can be recovered with functions such as <a class=\"xref\" href=\"../../../../api/microsoft.visualbasic.dateandtime#Microsoft_VisualBasic_DateAndTime_DatePart_\" data-linktype=\"relative-path\">DatePart</a> function.  </p>\n</li>\n<li><p><strong>Culture Sensitivity.</strong> The type conversion functions involving strings perform conversions based on the current culture settings for the application. For example, <code>CDate</code> recognizes date formats according to the locale setting of your system. You must provide the day, month, and year in the correct order for your locale, or the date might not be interpreted correctly. A long date format is not recognized if it contains a day-of-the-week string, such as &quot;Wednesday&quot;.  </p>\n<p> If you need to convert to or from a string representation of a value in a format other than the one specified by your locale, you cannot use the Visual Basic type conversion functions. To do this, use the <code>ToString(IFormatProvider)</code> and <code>Parse(String, IFormatProvider)</code> methods of that value&#39;s type. For example, use <a class=\"xref\" href=\"../../../../api/system.double#System_Double_Parse_\" data-linktype=\"relative-path\">Parse</a> when converting a string to a <code>Double</code>, and use <a class=\"xref\" href=\"../../../../api/system.double#System_Double_ToString_\" data-linktype=\"relative-path\">ToString</a> when converting a value of type <code>Double</code> to a string.  </p>\n</li>\n</ul>\n<h2 id=\"ctype-function\">CType Function</h2>\n<p> The <a href=\"ctype-function\" data-linktype=\"relative-path\">CType Function</a> takes a second argument, <code>typename</code>, and coerces <code>expression</code> to <code>typename</code>, where <code>typename</code> can be any data type, structure, class, or interface to which there exists a valid conversion.  </p>\n<p> For a comparison of <code>CType</code> with the other type conversion keywords, see <a href=\"../operators/directcast-operator\" data-linktype=\"relative-path\">DirectCast Operator</a> and <a href=\"../operators/trycast-operator\" data-linktype=\"relative-path\">TryCast Operator</a>.  </p>\n<h2 id=\"cbool-example\">CBool Example</h2>\n<p> The following example uses the <code>CBool</code> function to convert expressions to <code>Boolean</code> values. If an expression evaluates to a nonzero value, <code>CBool</code> returns <code>True</code>; otherwise, it returns <code>False</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrFunctions#1\">Dim a, b, c As Integer\nDim check As Boolean\na = 5\nb = 5\n&#39; The following line of code sets check to True.\ncheck = CBool(a = b)\nc = 0\n&#39; The following line of code sets check to False.\ncheck = CBool(c)\n</code></pre><h2 id=\"cbyte-example\">CByte Example</h2>\n<p> The following example uses the <code>CByte</code> function to convert an expression to a <code>Byte</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrFunctions#2\">Dim aDouble As Double\nDim aByte As Byte\naDouble = 125.5678\n&#39; The following line of code sets aByte to 126.\naByte = CByte(aDouble)\n</code></pre><h2 id=\"cchar-example\">CChar Example</h2>\n<p> The following example uses the <code>CChar</code> function to convert the first character of a <code>String</code> expression to a <code>Char</code> type.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrFunctions#3\">Dim aString As String\nDim aChar As Char\n&#39; CChar converts only the first character of the string.\naString = &quot;BCD&quot;\n&#39; The following line of code sets aChar to &quot;B&quot;.\naChar = CChar(aString)\n</code></pre><p> The input argument to <code>CChar</code> must be of data type <code>Char</code> or <code>String</code>. You cannot use <code>CChar</code> to convert a number to a character, because <code>CChar</code> cannot accept a numeric data type. The following example obtains a number representing a code point (character code) and converts it to the corresponding character. It uses the <a class=\"xref\" href=\"../../../../api/microsoft.visualbasic.interaction#Microsoft_VisualBasic_Interaction_InputBox_\" data-linktype=\"relative-path\">InputBox</a> function to obtain the string of digits, <code>CInt</code> to convert the string to type <code>Integer</code>, and <code>ChrW</code> to convert the number to type <code>Char</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrFunctions#4\">Dim someDigits As String\nDim codePoint As Integer\nDim thisChar As Char\nsomeDigits = InputBox(&quot;Enter code point of character:&quot;)\ncodePoint = CInt(someDigits)\n&#39; The following line of code sets thisChar to the Char value of codePoint.\nthisChar = ChrW(codePoint)\n</code></pre><h2 id=\"cdate-example\">CDate Example</h2>\n<p> The following example uses the <code>CDate</code> function to convert strings to <code>Date</code> values. In general, hard-coding dates and times as strings (as shown in this example) is not recommended. Use date literals and time literals, such as #Feb 12, 1969# and #4:45:23 PM#, instead.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrFunctions#5\">Dim aDateString, aTimeString As String\nDim aDate, aTime As Date\naDateString = &quot;February 12, 1969&quot;\naTimeString = &quot;4:35:47 PM&quot;\n&#39; The following line of code sets aDate to a Date value.\naDate = CDate(aDateString)\n&#39; The following line of code sets aTime to Date value.\naTime = CDate(aTimeString)\n</code></pre><h2 id=\"cdbl-example\">CDbl Example</h2>\n<pre><code class=\"lang-vb\" name=\"VbVbalrFunctions#6\">Dim aDec As Decimal\nDim aDbl As Double\n&#39; The following line of code uses the literal type character D to make aDec a Decimal.\naDec = 234.456784D\n&#39; The following line of code sets aDbl to 1.9225456288E+1.\naDbl = CDbl(aDec * 8.2D * 0.01D)\n</code></pre><h2 id=\"cdec-example\">CDec Example</h2>\n<p> The following example uses the <code>CDec</code> function to convert a numeric value to <code>Decimal</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrFunctions#7\">Dim aDouble As Double\nDim aDecimal As Decimal\naDouble = 10000000.0587\n&#39; The following line of code sets aDecimal to 10000000.0587.\naDecimal = CDec(aDouble)\n</code></pre><h2 id=\"cint-example\">CInt Example</h2>\n<p> The following example uses the <code>CInt</code> function to convert a value to <code>Integer</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrFunctions#8\">Dim aDbl As Double\nDim anInt As Integer\naDbl = 2345.5678\n&#39; The following line of code sets anInt to 2346.\nanInt = CInt(aDbl)\n</code></pre><h2 id=\"clng-example\">CLng Example</h2>\n<p> The following example uses the <code>CLng</code> function to convert values to <code>Long</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrFunctions#9\">Dim aDbl1, aDbl2 As Double\nDim aLng1, aLng2 As Long\naDbl1 = 25427.45\naDbl2 = 25427.55\n&#39; The following line of code sets aLng1 to 25427.\naLng1 = CLng(aDbl1)\n&#39; The following line of code sets aLng2 to 25428.\naLng2 = CLng(aDbl2)\n</code></pre><h2 id=\"cobj-example\">CObj Example</h2>\n<p> The following example uses the <code>CObj</code> function to convert a numeric value to <code>Object</code>. The <code>Object</code> variable itself contains only a four-byte pointer, which points to the <code>Double</code> value assigned to it.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrFunctions#10\">Dim aDouble As Double\nDim anObject As Object\naDouble = 2.7182818284\n&#39; The following line of code sets anObject to a pointer to aDouble.\nanObject = CObj(aDouble)\n</code></pre><h2 id=\"csbyte-example\">CSByte Example</h2>\n<p> The following example uses the <code>CSByte</code> function to convert a numeric value to <code>SByte</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrFunctions#11\">Dim aDouble As Double\nDim anSByte As SByte\naDouble = 39.501\n&#39; The following line of code sets anSByte to 40.\nanSByte = CSByte(aDouble)\n</code></pre><h2 id=\"cshort-example\">CShort Example</h2>\n<p> The following example uses the <code>CShort</code> function to convert a numeric value to <code>Short</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrFunctions#12\">Dim aByte As Byte\nDim aShort As Short\naByte = 100\n&#39; The following line of code sets aShort to 100.\naShort = CShort(aByte)\n</code></pre><h2 id=\"csng-example\">CSng Example</h2>\n<p> The following example uses the <code>CSng</code> function to convert values to <code>Single</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrFunctions#13\">Dim aDouble1, aDouble2 As Double\nDim aSingle1, aSingle2 As Single\naDouble1 = 75.3421105\naDouble2 = 75.3421567\n&#39; The following line of code sets aSingle1 to 75.34211.\naSingle1 = CSng(aDouble1)\n&#39; The following line of code sets aSingle2 to 75.34216.\naSingle2 = CSng(aDouble2)\n</code></pre><h2 id=\"cstr-example\">CStr Example</h2>\n<p> The following example uses the <code>CStr</code> function to convert a numeric value to <code>String</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrFunctions#14\">Dim aDouble As Double\nDim aString As String\naDouble = 437.324\n&#39; The following line of code sets aString to &quot;437.324&quot;.\naString = CStr(aDouble)\n</code></pre><p> The following example uses the <code>CStr</code> function to convert <code>Date</code> values to <code>String</code> values.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrFunctions#15\">Dim aDate As Date\nDim aString As String\n&#39; The following line of code generates a COMPILER ERROR because of invalid format.\n&#39; aDate = #February 12, 1969 00:00:00#\n&#39; Date literals must be in the format #m/d/yyyy# or they are invalid.\n&#39; The following line of code sets the time component of aDate to midnight.\naDate = #2/12/1969#\n&#39; The following conversion suppresses the neutral time value of 00:00:00.\n&#39; The following line of code sets aString to &quot;2/12/1969&quot;.\naString = CStr(aDate)\n&#39; The following line of code sets the time component of aDate to one second past midnight.\naDate = #2/12/1969 12:00:01 AM#\n&#39; The time component becomes part of the converted value.\n&#39; The following line of code sets aString to &quot;2/12/1969 12:00:01 AM&quot;.\naString = CStr(aDate)\n</code></pre><p> <code>CStr</code> always renders a <code>Date</code> value in the standard short format for the current locale, for example, &quot;6/15/2003 4:35:47 PM&quot;. However, <code>CStr</code> suppresses the <em>neutral values</em> of 1/1/0001 for the date and 00:00:00 for the time.  </p>\n<p> For more detail on the values returned by <code>CStr</code>, see <a href=\"return-values-for-the-cstr-function\" data-linktype=\"relative-path\">Return Values for the CStr Function</a>.  </p>\n<h2 id=\"cuint-example\">CUInt Example</h2>\n<p> The following example uses the <code>CUInt</code> function to convert a numeric value to <code>UInteger</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrFunctions#16\">Dim aDouble As Double\nDim aUInteger As UInteger\naDouble = 39.501\n&#39; The following line of code sets aUInteger to 40.\naUInteger = CUInt(aDouble)\n</code></pre><h2 id=\"culng-example\">CULng Example</h2>\n<p> The following example uses the <code>CULng</code> function to convert a numeric value to <code>ULong</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrFunctions#17\">Dim aDouble As Double\nDim aULong As ULong\naDouble = 39.501\n&#39; The following line of code sets aULong to 40.\naULong = CULng(aDouble)\n</code></pre><h2 id=\"cushort-example\">CUShort Example</h2>\n<p> The following example uses the <code>CUShort</code> function to convert a numeric value to <code>UShort</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrFunctions#18\">Dim aDouble As Double\nDim aUShort As UShort\naDouble = 39.501\n&#39; The following line of code sets aUShort to 40.\naUShort = CUShort(aDouble)\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../api/microsoft.visualbasic.strings#Microsoft_VisualBasic_Strings_Asc_\" data-linktype=\"relative-path\">Asc</a><br> <a class=\"xref\" href=\"../../../../api/microsoft.visualbasic.strings#Microsoft_VisualBasic_Strings_AscW_\" data-linktype=\"relative-path\">AscW</a><br> <a class=\"xref\" href=\"../../../../api/microsoft.visualbasic.strings#Microsoft_VisualBasic_Strings_Chr_\" data-linktype=\"relative-path\">Chr</a><br> <a class=\"xref\" href=\"../../../../api/microsoft.visualbasic.strings#Microsoft_VisualBasic_Strings_ChrW_\" data-linktype=\"relative-path\">ChrW</a><br> <a class=\"xref\" href=\"../../../../api/microsoft.visualbasic.conversion#Microsoft_VisualBasic_Conversion_Int_\" data-linktype=\"relative-path\">Int</a><br> <a class=\"xref\" href=\"../../../../api/microsoft.visualbasic.conversion#Microsoft_VisualBasic_Conversion_Fix_\" data-linktype=\"relative-path\">Fix</a><br> <a class=\"xref\" href=\"../../../../api/microsoft.visualbasic.strings#Microsoft_VisualBasic_Strings_Format_\" data-linktype=\"relative-path\">Format</a><br> <a class=\"xref\" href=\"../../../../api/microsoft.visualbasic.conversion#Microsoft_VisualBasic_Conversion_Hex_\" data-linktype=\"relative-path\">Hex</a><br> <a class=\"xref\" href=\"../../../../api/microsoft.visualbasic.conversion#Microsoft_VisualBasic_Conversion_Oct_\" data-linktype=\"relative-path\">Oct</a><br> <a class=\"xref\" href=\"../../../../api/microsoft.visualbasic.conversion#Microsoft_VisualBasic_Conversion_Str_\" data-linktype=\"relative-path\">Str</a><br> <a class=\"xref\" href=\"../../../../api/microsoft.visualbasic.conversion#Microsoft_VisualBasic_Conversion_Val_\" data-linktype=\"relative-path\">Val</a><br> <a href=\"conversion-functions\" data-linktype=\"relative-path\">Conversion Functions</a><br> <a href=\"../../programming-guide/language-features/data-types/type-conversions\" data-linktype=\"relative-path\">Type Conversions in Visual Basic</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"d9d8d165-f967-44ff-a6cd-598e4740a99e\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"22\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/functions/type-conversion-functions.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/functions/type-conversion-functions.md\">\r\n<meta name=\"document_id\" content=\"d2b98653-4b0c-196a-77cb-cb898ccd2a22\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Type Conversion Functions (Visual Basic) | Microsoft Docs","ms.suite":"","ms.assetid":"d9d8d165-f967-44ff-a6cd-598e4740a99e","f1_keywords":["vb.CUShort","vb.csng","vb.CDate","CByte","CSng","vb.CDec","CBool","CStr","vb.CULng","CDec","CVErr","CDbl","CShort","vb.CObj","vb.CVErr","CULng","vb.cdbl","vb.cbool","CObj","CDate","CLng","vb.cstr","vb.cbyte","vb.clng","vb.CChar","CUShort","vb.CUInt","vb.cint","vb.CShort","CInt","CUInt","CChar"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":22,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["CDate function","CByte function","Integer data type, converting","string conversion, conversion functions","fractions","data types [Visual Basic], converting","text, converting","CDec function","Char data type, converting","type conversion, functions for","Single data type, converting","numbers, rounding","rounding numbers, type conversion","CUShort function","Long data type, converting","return values, data types","single-precision numbers, converting","data type conversion, functions for","CStr function","times, converting","CSng function","conversions, type conversion functions","CBool function","CDbl function","CUInt function","Currency data type, conversion functions","numbers, converting","Double data type, converting","CLng function","CSByte function","double-precision numbers","Decimal data type, converting","Boolean data type, converting","integers, type conversion functions","dates, converting","CULng function","CInt function","Date data type, converting","Byte data type, converting","String data type, converting","CChar function","banker's rounding","Short data type, converting","rounding numbers, banker's rounding","type conversion, Visual Basic vs. .NET Framework"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/functions/type-conversion-functions.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/functions/type-conversion-functions.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/language-reference/functions/type-conversion-functions.md","document_id":"d2b98653-4b0c-196a-77cb-cb898ccd2a22","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/language-reference/functions/type-conversion-functions","toc_asset_id":"articles/toc.json","toc_rel":"../../../toc.json","_op_ogTitle":"Type Conversion Functions (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":2134,"_op_rawTitle":"<h1 id=\"type-conversion-functions-visual-basic\" sourcefile=\"docs/visual-basic/language-reference/functions/type-conversion-functions.md\" sourcestartlinenumber=\"113\" sourceendlinenumber=\"113\">Type Conversion Functions (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/language-reference/functions/type-conversion-functions","fileRelativePath":"articles/visual-basic/language-reference/functions/type-conversion-functions.html"},"themesRelativePathToOutputRoot":"_themes/"}