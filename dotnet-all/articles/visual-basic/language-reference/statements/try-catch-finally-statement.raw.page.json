{"content":"<div><div class=\"content\">\n<p>Provides a way to handle some or all possible errors that may occur in a given block of code, while still running code.  </p>\n<h2 id=\"syntax\">Syntax</h2>\n<pre class=\"loading\"><code>Try  \n    [ tryStatements ]  \n    [ Exit Try ]  \n[ Catch [ exception [ As type ] ] [ When expression ]  \n    [ catchStatements ]  \n    [ Exit Try ] ]  \n[ Catch ... ]  \n[ Finally  \n    [ finallyStatements ] ]  \nEnd Try  \n</code></pre><h2 id=\"parts\">Parts</h2>\n<table>\n<thead>\n<tr>\n<th>Term</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>tryStatements</code></td>\n<td>Optional. Statement(s) where an error can occur. Can be a compound statement.</td>\n</tr>\n<tr>\n<td><code>Catch</code></td>\n<td>Optional. Multiple <code>Catch</code> blocks permitted. If an exception occurs when processing the <code>Try</code> block, each <code>Catch</code> statement is examined in textual order to determine whether it handles the exception, with <code>exception</code> representing the exception that has been thrown.</td>\n</tr>\n<tr>\n<td><code>exception</code></td>\n<td>Optional. Any variable name. The initial value of <code>exception</code> is the value of the thrown error. Used with <code>Catch</code> to specify the error caught. If omitted, the <code>Catch</code> statement catches any exception.</td>\n</tr>\n<tr>\n<td><code>type</code></td>\n<td>Optional. Specifies the type of class filter. If the value of <code>exception</code> is of the type specified by <code>type</code> or of a derived type, the identifier becomes bound to the exception object.</td>\n</tr>\n<tr>\n<td><code>When</code></td>\n<td>Optional. A <code>Catch</code> statement with a <code>When</code> clause catches exceptions only when <code>expression</code> evaluates to <code>True</code>. A <code>When</code> clause is applied only after checking the type of the exception, and <code>expression</code> may refer to the identifier representing the exception.</td>\n</tr>\n<tr>\n<td><code>expression</code></td>\n<td>Optional. Must be implicitly convertible to <code>Boolean</code>. Any expression that describes a generic filter. Typically used to filter by error number. Used with <code>When</code> keyword to specify circumstances under which the error is caught.</td>\n</tr>\n<tr>\n<td><code>catchStatements</code></td>\n<td>Optional. Statement(s) to handle errors that occur in the associated <code>Try</code> block. Can be a compound statement.</td>\n</tr>\n<tr>\n<td><code>Exit Try</code></td>\n<td>Optional. Keyword that breaks out of the <code>Try...Catch...Finally</code> structure. Execution resumes with the code immediately following the <code>End Try</code> statement. The <code>Finally</code> statement will still be executed. Not allowed in <code>Finally</code> blocks.</td>\n</tr>\n<tr>\n<td><code>Finally</code></td>\n<td>Optional. A <code>Finally</code> block is always executed when execution leaves any part of the <code>Try...Catch</code> statement.</td>\n</tr>\n<tr>\n<td><code>finallyStatements</code></td>\n<td>Optional. Statement(s) that are executed after all other error processing has occurred.</td>\n</tr>\n<tr>\n<td><code>End Try</code></td>\n<td>Terminates the <code>Try...Catch...Finally</code> structure.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"remarks\">Remarks</h2>\n<p> If you expect that a particular exception might occur during a particular section of code, put the code in a <code>Try</code> block and use a <code>Catch</code> block to retain control and handle the exception if it occurs.  </p>\n<p> A <code>Try…Catch</code> statement consists of a <code>Try</code> block followed by one or more <code>Catch</code> clauses, which specify handlers for various exceptions. When an exception is thrown in a <code>Try</code> block, Visual Basic looks for the <code>Catch</code> statement that handles the exception. If a matching <code>Catch</code> statement is not found, Visual Basic examines the method that called the current method, and so on up the call stack. If no <code>Catch</code> block is found, Visual Basic displays an unhandled exception message to the user and stops execution of the program.  </p>\n<p> You can use more than one <code>Catch</code> statement in a <code>Try…Catch</code> statement. If you do this, the order of the <code>Catch</code> clauses is significant because they are examined in order. Catch the more specific exceptions before the less specific ones.  </p>\n<p> The following <code>Catch</code> statement conditions are the least specific, and will catch all exceptions that derive from the <a class=\"xref\" href=\"../../../../api/system.exception\" data-linktype=\"relative-path\">Exception</a> class. You should ordinarily use one of these variations as the last <code>Catch</code> block in the <code>Try...Catch...Finally</code> structure, after catching all the specific exceptions you expect. Control flow can never reach a <code>Catch</code> block that follows either of these variations.  </p>\n<ul>\n<li><p>The <code>type</code> is <code>Exception</code>, for example: <code>Catch ex As Exception</code>  </p>\n</li>\n<li><p>The statement has no <code>exception</code> variable, for example: <code>Catch</code>  </p>\n</li>\n</ul>\n<p> When a <code>Try…Catch…Finally</code> statement is nested in another <code>Try</code> block, Visual Basic first examines each <code>Catch</code> statement in the innermost <code>Try</code> block. If no matching <code>Catch</code> statement is found, the search proceeds to the <code>Catch</code> statements of the outer <code>Try…Catch…Finally</code> block.  </p>\n<p> Local variables from a <code>Try</code> block are not available in a <code>Catch</code> block because they are separate blocks. If you want to use a variable in more than one block, declare the variable outside the <code>Try...Catch...Finally</code> structure.  </p>\n<div class=\"TIP\"><h5>Tip</h5><p> The <code>Try…Catch…Finally</code> statement is available as an IntelliSense code snippet. In the Code Snippets Manager, expand <strong>Code Patterns - If, For Each, Try Catch, Property, etc</strong>, and then <strong>Error Handling (Exceptions)</strong>. For more information, see <a href=\"https://docs.microsoft.com/visualstudio/ide/code-snippets\" data-linktype=\"external\">Code Snippets</a>.  </p>\n</div>\n<h2 id=\"finally-block\">Finally Block</h2>\n<p> If you have one or more statements that must run before you exit the <code>Try</code> structure, use a <code>Finally</code> block. Control passes to the <code>Finally</code> block just before it passes out of the <code>Try…Catch</code> structure. This is true even if an exception occurs anywhere inside the <code>Try</code> structure.  </p>\n<p> A <code>Finally</code> block is useful for running any code that must execute even if there is an exception. Control is passed to the <code>Finally</code> block regardless of how the <code>Try...Catch</code> block exits.  </p>\n<p> The code in a <code>Finally</code> block runs even if your code encounters a <code>Return</code> statement in a <code>Try</code> or <code>Catch</code> block. Control does not pass from a <code>Try</code> or <code>Catch</code> block to the corresponding <code>Finally</code> block in the following cases:  </p>\n<ul>\n<li><p>An <a href=\"end-statement\" data-linktype=\"relative-path\">End Statement</a> is encountered in the <code>Try</code> or <code>Catch</code> block.  </p>\n</li>\n<li><p>A <a class=\"xref\" href=\"../../../../api/system.stackoverflowexception\" data-linktype=\"relative-path\">StackOverflowException</a> is thrown in the <code>Try</code> or <code>Catch</code> block.  </p>\n</li>\n</ul>\n<p> It is not valid to explicitly transfer execution into a <code>Finally</code> block. Transferring execution out of a <code>Finally</code> block is not valid, except through an exception.  </p>\n<p> If a <code>Try</code> statement does not contain at least one <code>Catch</code> block, it must contain a <code>Finally</code> block.  </p>\n<div class=\"TIP\"><h5>Tip</h5><p> If you do not have to catch specific exceptions, the <code>Using</code> statement behaves like a <code>Try…Finally</code> block, and guarantees disposal of the resources, regardless of how you exit the block. This is true even with an unhandled exception. For more information, see <a href=\"using-statement\" data-linktype=\"relative-path\">Using Statement</a>.  </p>\n</div>\n<h2 id=\"exception-argument\">Exception Argument</h2>\n<p> The <code>Catch</code> block <code>exception</code> argument is an instance of the <a class=\"xref\" href=\"../../../../api/system.exception\" data-linktype=\"relative-path\">Exception</a> class or a class that derives from the <code>Exception</code> class. The <code>Exception</code> class instance corresponds to the error that occurred in the <code>Try</code> block.  </p>\n<p> The properties of the <code>Exception</code> object help to identify the cause and location of an exception. For example, the <a class=\"xref\" href=\"../../../../api/system.exception#System_Exception_StackTrace_\" data-linktype=\"relative-path\">StackTrace</a> property lists the called methods that led to the exception, helping you find where the error occurred in the code. <a class=\"xref\" href=\"../../../../api/system.exception#System_Exception_Message_\" data-linktype=\"relative-path\">Message</a> returns a message that describes the exception. <a class=\"xref\" href=\"../../../../api/system.exception#System_Exception_HelpLink_\" data-linktype=\"relative-path\">HelpLink</a> returns a link to an associated Help file. <a class=\"xref\" href=\"../../../../api/system.exception#System_Exception_InnerException_\" data-linktype=\"relative-path\">InnerException</a> returns the <code>Exception</code> object that caused the current exception, or it returns <code>Nothing</code> if there is no original <code>Exception</code>.  </p>\n<h2 id=\"considerations-when-using-a-trycatch-statement\">Considerations When Using a Try…Catch Statement</h2>\n<p> Use a <code>Try…Catch</code> statement only to signal the occurrence of unusual or unanticipated program events. Reasons for this include the following:  </p>\n<ul>\n<li><p>Catching exceptions at runtime creates additional overhead, and is likely to be slower than pre-checking to avoid exceptions.  </p>\n</li>\n<li><p>If a <code>Catch</code> block is not handled correctly, the exception might not be reported correctly to users.  </p>\n</li>\n<li><p>Exception handling makes a program more complex.  </p>\n</li>\n</ul>\n<p> You do not always need a <code>Try…Catch</code> statement to check for a condition that is likely to occur. The following example checks whether a file exists before trying to open it. This reduces the need for catching an exception thrown by the <a class=\"xref\" href=\"../../../../api/system.io.file#System_IO_File_OpenText_\" data-linktype=\"relative-path\">OpenText</a> method.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStatements#94\">Private Sub TextFileExample(ByVal filePath As String)\n\n    &#39; Verify that the file exists.\n    If System.IO.File.Exists(filePath) = False Then\n        Console.Write(&quot;File Not Found: &quot; &amp; filePath)\n    Else\n        &#39; Open the text file and display its contents.\n        Dim sr As System.IO.StreamReader =\n            System.IO.File.OpenText(filePath)\n\n        Console.Write(sr.ReadToEnd)\n\n        sr.Close()\n    End If\nEnd Sub\n</code></pre><p> Ensure that code in <code>Catch</code> blocks can properly report exceptions to users, whether through thread-safe logging or appropriate messages. Otherwise, exceptions might remain unknown.  </p>\n<h2 id=\"async-methods\">Async Methods</h2>\n<p> If you mark a method with the <a href=\"../modifiers/async\" data-linktype=\"relative-path\">Async</a> modifier, you can use the <a href=\"../operators/await-operator\" data-linktype=\"relative-path\">Await</a> operator in the method. A statement with the <code>Await</code> operator suspends execution of the method until the awaited task completes. The task represents ongoing work. When the task that&#39;s associated with the <code>Await</code> operator finishes, execution resumes in the same method. For more information, see <a href=\"../../programming-guide/concepts/async/control-flow-in-async-programs\" data-linktype=\"relative-path\">Control Flow in Async Programs</a>.  </p>\n<p> A task returned by an Async method may end in a faulted state, indicating that it completed due to an unhandled exception. A task may also end in a canceled state, which results in an <code>OperationCanceledException</code> being thrown out of the await expression. To catch either type of exception, place the <code>Await</code> expression that&#39;s associated with the task in a <code>Try</code> block, and catch the exception in the <code>Catch</code> block. An example is provided later in this topic.  </p>\n<p> A task can be in a faulted state because multiple exceptions were responsible for its faulting. For example, the task might be the result of a call to <a class=\"xref\" href=\"../../../../api/system.threading.tasks.task#System_Threading_Tasks_Task_WhenAll_\" data-linktype=\"relative-path\">WhenAll</a>. When you await such a task, the caught exception is only one of the exceptions, and you can&#39;t predict which exception will be caught. An example is provided later in this topic.  </p>\n<p> An <code>Await</code> expression can&#39;t be inside a <code>Catch</code> block or <code>Finally</code> block.  </p>\n<h2 id=\"iterators\">Iterators</h2>\n<p> An iterator function or <code>Get</code> accessor performs a custom iteration over a collection. An iterator uses a <a href=\"yield-statement\" data-linktype=\"relative-path\">Yield</a> statement to return each element of the collection one at a time. You call an iterator function by using a <a href=\"for-each-next-statement\" data-linktype=\"relative-path\">For Each...Next Statement</a>.  </p>\n<p> A <code>Yield</code> statement can be inside a <code>Try</code> block. A <code>Try</code> block that contains a <code>Yield</code> statement can have <code>Catch</code> blocks, and can have a <code>Finally</code> block. See the &quot;Try Blocks in Visual Basic&quot; section of <a href=\"http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7\" data-linktype=\"external\">Iterators</a> for an example.  </p>\n<p> A <code>Yield</code> statement cannot be inside a <code>Catch</code> block or a <code>Finally</code> block.  </p>\n<p> If the <code>For Each</code> body (outside of the iterator function) throws an exception, a <code>Catch</code> block in the iterator function is not executed, but a <code>Finally</code> block in the iterator function is executed. A <code>Catch</code> block inside an iterator function catches only exceptions that occur inside the iterator function.  </p>\n<h2 id=\"partial-trust-situations\">Partial-Trust Situations</h2>\n<p> In partial-trust situations, such as an application hosted on a network share, <code>Try...Catch...Finally</code> does not catch security exceptions that occur before the method that contains the call is invoked. The following example, when you put it on a server share and run from there, produces the error &quot;System.Security.SecurityException: Request Failed.&quot; For more information about security exceptions, see the <a class=\"xref\" href=\"../../../../api/system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> class.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStatements#85\">Try\n    Process.Start(&quot;http://www.microsoft.com&quot;)\nCatch ex As Exception\n    MsgBox(&quot;Can&#39;t load Web page&quot; &amp; vbCrLf &amp; ex.Message)\nEnd Try\n</code></pre><p> In such a partial-trust situation, you have to put the <code>Process.Start</code> statement in a separate <code>Sub</code>. The initial call to the <code>Sub</code> will fail. This enables <code>Try...Catch</code> to catch it before the <code>Sub</code> that contains <code>Process.Start</code> is started and the security exception produced.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following example illustrates the structure of the <code>Try...Catch...Finally</code> statement.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStatements#86\">Public Sub TryExample()\n    &#39; Declare variables.\n    Dim x As Integer = 5\n    Dim y As Integer = 0\n\n    &#39; Set up structured error handling.\n    Try\n        &#39; Cause a &quot;Divide by Zero&quot; exception.\n        x = x \\ y\n\n        &#39; This statement does not execute because program\n        &#39; control passes to the Catch block when the\n        &#39; exception occurs.\n        MessageBox.Show(&quot;end of Try block&quot;)\n    Catch ex As Exception\n        &#39; Show the exception&#39;s message.\n        MessageBox.Show(ex.Message)\n\n        &#39; Show the stack trace, which is a list of methods\n        &#39; that are currently executing.\n        MessageBox.Show(&quot;Stack Trace: &quot; &amp; vbCrLf &amp; ex.StackTrace)\n    Finally\n        &#39; This line executes whether or not the exception occurs.\n        MessageBox.Show(&quot;in Finally block&quot;)\n    End Try\nEnd Sub\n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> In the following example, the <code>CreateException</code> method throws a <code>NullReferenceException</code>. The code that generates the exception is not in a <code>Try</code> block. Therefore, the <code>CreateException</code> method does not handle the exception. The <code>RunSample</code> method does handle the exception because the call to the <code>CreateException</code> method is in a <code>Try</code> block.  </p>\n<p> The example includes <code>Catch</code> statements for several types of exceptions, ordered from the most specific to the most general.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStatements#91\">Public Sub RunSample()\n    Try\n        CreateException()\n    Catch ex As System.IO.IOException\n        &#39; Code that reacts to IOException.\n    Catch ex As NullReferenceException\n        MessageBox.Show(&quot;NullReferenceException: &quot; &amp; ex.Message)\n        MessageBox.Show(&quot;Stack Trace: &quot; &amp; vbCrLf &amp; ex.StackTrace)\n    Catch ex As Exception\n        &#39; Code that reacts to any other exception.\n    End Try\nEnd Sub\n\nPrivate Sub CreateException()\n    &#39; This code throws a NullReferenceException.\n    Dim obj = Nothing\n    Dim prop = obj.Name\n\n    &#39; This code also throws a NullReferenceException.\n    &#39;Throw New NullReferenceException(&quot;Something happened.&quot;)\nEnd Sub\n</code></pre><h2 id=\"example-2\">Example</h2>\n<p> The following example shows how to use a <code>Catch When</code> statement to filter on a conditional expression. If the conditional expression evaluates to <code>True</code>, the code in the <code>Catch</code> block runs.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStatements#92\">Private Sub WhenExample()\n    Dim i As Integer = 5\n\n    Try\n        Throw New ArgumentException()\n    Catch e As OverflowException When i = 5\n        Console.WriteLine(&quot;First handler&quot;)\n    Catch e As ArgumentException When i = 4\n        Console.WriteLine(&quot;Second handler&quot;)\n    Catch When i = 5\n        Console.WriteLine(&quot;Third handler&quot;)\n    End Try\nEnd Sub\n&#39; Output: Third handler\n</code></pre><h2 id=\"example-3\">Example</h2>\n<p> The following example has a <code>Try…Catch</code> statement that is contained in a <code>Try</code> block. The inner <code>Catch</code> block throws an exception that has its <code>InnerException</code> property set to the original exception. The outer <code>Catch</code> block reports its own exception and the inner exception.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStatements#93\">Private Sub InnerExceptionExample()\n    Try\n        Try\n            &#39; Set a reference to a StringBuilder.\n            &#39; The exception below does not occur if the commented\n            &#39; out statement is used instead.\n            Dim sb As System.Text.StringBuilder\n            &#39;Dim sb As New System.Text.StringBuilder\n\n            &#39; Cause a NullReferenceException.\n            sb.Append(&quot;text&quot;)\n        Catch ex As Exception\n            &#39; Throw a new exception that has the inner exception\n            &#39; set to the original exception.\n            Throw New ApplicationException(&quot;Something happened :(&quot;, ex)\n        End Try\n    Catch ex2 As Exception\n        &#39; Show the exception.\n        Console.WriteLine(&quot;Exception: &quot; &amp; ex2.Message)\n        Console.WriteLine(ex2.StackTrace)\n\n        &#39; Show the inner exception, if one is present.\n        If ex2.InnerException IsNot Nothing Then\n            Console.WriteLine(&quot;Inner Exception: &quot; &amp; ex2.InnerException.Message)\n            Console.WriteLine(ex2.StackTrace)\n        End If\n    End Try\nEnd Sub\n</code></pre><h2 id=\"example-4\">Example</h2>\n<p> The following example illustrates exception handling for async methods. To catch an exception that applies to an async task, the <code>Await</code> expression is in a <code>Try</code> block of the caller, and the exception is caught in the <code>Catch</code> block.  </p>\n<p> Uncomment the <code>Throw New Exception</code> line in the example to demonstrate exception handling. The exception is caught in the <code>Catch</code> block, the task&#39;s <code>IsFaulted</code> property is set to <code>True</code>, and the task&#39;s <code>Exception.InnerException</code> property is set to the exception.  </p>\n<p> Uncomment the <code>Throw New OperationCancelledException</code> line to demonstrate what happens when you cancel an asynchronous process. The exception is caught in the <code>Catch</code> block, and the task&#39;s <code>IsCanceled</code> property is set to <code>True</code>. However, under some conditions that don&#39;t apply to this example, <code>IsFaulted</code> is set to <code>True</code> and <code>IsCanceled</code> is set to <code>False</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"csAsyncExceptions#1\">Public Async Function DoSomethingAsync() As Task\n    Dim theTask As Task(Of String) = DelayAsync()\n\n    Try\n        Dim result As String = Await theTask\n        Debug.WriteLine(&quot;Result: &quot; &amp; result)\n    Catch ex As Exception\n        Debug.WriteLine(&quot;Exception Message: &quot; &amp; ex.Message)\n    End Try\n\n    Debug.WriteLine(&quot;Task IsCanceled: &quot; &amp; theTask.IsCanceled)\n    Debug.WriteLine(&quot;Task IsFaulted:  &quot; &amp; theTask.IsFaulted)\n    If theTask.Exception IsNot Nothing Then\n        Debug.WriteLine(&quot;Task Exception Message: &quot; &amp;\n            theTask.Exception.Message)\n        Debug.WriteLine(&quot;Task Inner Exception Message: &quot; &amp;\n            theTask.Exception.InnerException.Message)\n    End If\nEnd Function\n\nPrivate Async Function DelayAsync() As Task(Of String)\n    Await Task.Delay(100)\n\n    &#39; Uncomment each of the following lines to\n    &#39; demonstrate exception handling.\n\n    &#39;Throw New OperationCanceledException(&quot;canceled&quot;)\n    &#39;Throw New Exception(&quot;Something happened.&quot;)\n    Return &quot;Done&quot;\nEnd Function\n\n\n&#39; Output when no exception is thrown in the awaited method:\n&#39;   Result: Done\n&#39;   Task IsCanceled: False\n&#39;   Task IsFaulted:  False\n\n&#39; Output when an Exception is thrown in the awaited method:\n&#39;   Exception Message: Something happened.\n&#39;   Task IsCanceled: False\n&#39;   Task IsFaulted:  True\n&#39;   Task Exception Message: One or more errors occurred.\n&#39;   Task Inner Exception Message: Something happened.\n\n&#39; Output when an OperationCanceledException or TaskCanceledException\n&#39; is thrown in the awaited method:\n&#39;   Exception Message: canceled\n&#39;   Task IsCanceled: True\n&#39;   Task IsFaulted:  False\n</code></pre><h2 id=\"example-5\">Example</h2>\n<p> The following example illustrates exception handling where multiple tasks can result in multiple exceptions. The <code>Try</code> block has the <code>Await</code> expression for the task that <a class=\"xref\" href=\"../../../../api/system.threading.tasks.task#System_Threading_Tasks_Task_WhenAll_\" data-linktype=\"relative-path\">WhenAll</a> returned. The task is complete when the three tasks to which <a class=\"xref\" href=\"../../../../api/system.threading.tasks.task#System_Threading_Tasks_Task_WhenAll_\" data-linktype=\"relative-path\">WhenAll</a> is applied are complete.  </p>\n<p> Each of the three tasks causes an exception. The <code>Catch</code> block iterates through the exceptions, which are found in the <code>Exception.InnerExceptions</code> property of the task that <code>Task.WhenAll</code> returned.  </p>\n<pre><code class=\"lang-vb\" name=\"csAsyncExceptions#3\">Public Async Function DoMultipleAsync() As Task\n    Dim theTask1 As Task = ExcAsync(info:=&quot;First Task&quot;)\n    Dim theTask2 As Task = ExcAsync(info:=&quot;Second Task&quot;)\n    Dim theTask3 As Task = ExcAsync(info:=&quot;Third Task&quot;)\n\n    Dim allTasks As Task = Task.WhenAll(theTask1, theTask2, theTask3)\n\n    Try\n        Await allTasks\n    Catch ex As Exception\n        Debug.WriteLine(&quot;Exception: &quot; &amp; ex.Message)\n        Debug.WriteLine(&quot;Task IsFaulted: &quot; &amp; allTasks.IsFaulted)\n        For Each inEx In allTasks.Exception.InnerExceptions\n            Debug.WriteLine(&quot;Task Inner Exception: &quot; + inEx.Message)\n        Next\n    End Try\nEnd Function\n\nPrivate Async Function ExcAsync(info As String) As Task\n    Await Task.Delay(100)\n\n    Throw New Exception(&quot;Error-&quot; &amp; info)\nEnd Function\n\n&#39; Output:\n&#39;   Exception: Error-First Task\n&#39;   Task IsFaulted: True\n&#39;   Task Inner Exception: Error-First Task\n&#39;   Task Inner Exception: Error-Second Task\n&#39;   Task Inner Exception: Error-Third Task\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../api/microsoft.visualbasic.information#Microsoft_VisualBasic_Information_Err_\" data-linktype=\"relative-path\">Err</a><br> <a class=\"xref\" href=\"../../../../api/system.exception\" data-linktype=\"relative-path\">Exception</a><br> <a href=\"exit-statement\" data-linktype=\"relative-path\">Exit Statement</a><br> <a href=\"on-error-statement\" data-linktype=\"relative-path\">On Error Statement</a><br> <a href=\"https://docs.microsoft.com/visualstudio/ide/best-practices-for-using-code-snippets\" data-linktype=\"external\">Best Practices for Using Code Snippets</a><br> <a href=\"https://msdn.microsoft.com/library/dd997415\" data-linktype=\"external\">Exception Handling</a><br> <a href=\"throw-statement\" data-linktype=\"relative-path\">Throw Statement</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"d6488026-ccb3-42b8-a810-0d97b9d6472b\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"69\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md\">\r\n<meta name=\"document_id\" content=\"4f69f441-303a-006f-12b1-15b700a066cd\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"Try...Catch...Finally Statement (Visual Basic) | Microsoft Docs","ms.suite":"","ms.assetid":"d6488026-ccb3-42b8-a810-0d97b9d6472b","f1_keywords":["vb.Try...Catch...Finally","vb.when","vb.Finally","vb.Catch","vb.Try"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":69,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["Try...Catch...Finally statements","Try statement","try-catch exception handling, Try...Catch...Finally statements","error handling, while running code","Try statement, Try...Catch...Finally","Finally keyword [Visual Basic], Try...Catch...Finally","Catch statement","When keyword","Visual Basic code, handling errors while running","structured exception handling, Try...Catch...Finally statements"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Absolute urls and other fixes (#1281)","commit_sha":"f7dffe4885b331cec8d37f3cc5c9163f69c3b4c9","commit_date":"2016-11-22 12:57:26 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md","document_id":"4f69f441-303a-006f-12b1-15b700a066cd","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/language-reference/statements/try-catch-finally-statement","toc_asset_id":"articles/toc.json","toc_rel":"../../../toc.json","_op_ogTitle":"Try...Catch...Finally Statement (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":2707,"_op_rawTitle":"<h1 id=\"trycatchfinally-statement-visual-basic\" sourcefile=\"docs/visual-basic/language-reference/statements/try-catch-finally-statement.md\" sourcestartlinenumber=\"51\" sourceendlinenumber=\"51\">Try...Catch...Finally Statement (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/language-reference/statements/try-catch-finally-statement","fileRelativePath":"articles/visual-basic/language-reference/statements/try-catch-finally-statement.html"},"themesRelativePathToOutputRoot":"_themes/"}