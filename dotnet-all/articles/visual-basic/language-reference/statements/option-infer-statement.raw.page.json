{"content":"<div><div class=\"content\">\n<p>Enables the use of local type inference in declaring variables.  </p>\n<h2 id=\"syntax\">Syntax</h2>\n<pre class=\"loading\"><code>Option Infer { On | Off }  \n</code></pre><h2 id=\"parts\">Parts</h2>\n<table>\n<thead>\n<tr>\n<th>Term</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>On</code></td>\n<td>Optional. Enables local type inference.</td>\n</tr>\n<tr>\n<td><code>Off</code></td>\n<td>Optional. Disables local type inference.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"remarks\">Remarks</h2>\n<p> To set <code>Option Infer</code> in a file, type <code>Option Infer On</code> or <code>Option Infer Off</code> at the top of the file, before any other source code. If the value set for <code>Option Infer</code> in a file conflicts with the value set in the IDE or on the command line, the value in the file has precedence.  </p>\n<p> When you set <code>Option Infer</code> to <code>On</code>, you can declare local variables without explicitly stating a data type. The compiler infers the data type of a variable from the type of its initialization expression.  </p>\n<p> In the following illustration, <code>Option Infer</code> is turned on. The variable in the declaration <code>Dim someVar = 2</code> is declared as an integer by type inference.  </p>\n<p> <img src=\"media/optioninferasinteger.png\" alt=\"IntelliSense view of the declaration.\" title=\"optionInferAsInteger\" data-linktype=\"relative-path\"><br>IntelliSense when Option Infer is on  </p>\n<p> In the following illustration, <code>Option Infer</code> is turned off. The variable in the declaration <code>Dim someVar = 2</code> is declared as an <code>Object</code> by type inference. In this example, the <strong>Option Strict</strong> setting is set to <strong>Off</strong> on the <a href=\"https://docs.microsoft.com/visualstudio/ide/reference/compile-page-project-designer-visual-basic\" data-linktype=\"external\">Compile Page, Project Designer (Visual Basic)</a>.  </p>\n<p> <img src=\"media/optioninferasobject.png\" alt=\"IntelliSense view of the declaration.\" title=\"optionInferAsObject\" data-linktype=\"relative-path\"><br>IntelliSense when Option Infer is off  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When a variable is declared as an <code>Object</code>, the run-time type can change while the program is running. Visual Basic performs operations called <em>boxing</em> and <em>unboxing</em> to convert between an <code>Object</code> and a value type, which makes execution slower. For information about boxing and unboxing, see the <a href=\"../../reference/language-specification\" data-linktype=\"relative-path\">Visual Basic Language Specification</a>.  </p>\n</div>\n<p> Type inference applies at the procedure level, and does not apply outside a procedure in a class, structure, module, or interface.  </p>\n<p> For additional information, see <a href=\"../../programming-guide/language-features/variables/local-type-inference\" data-linktype=\"relative-path\">Local Type Inference</a>.  </p>\n<h2 id=\"when-an-option-infer-statement-is-not-present\">When an Option Infer Statement Is Not Present</h2>\n<p> If the source code does not contain an <code>Option Infer</code> statement, the <strong>Option Infer</strong> setting on the <a href=\"https://docs.microsoft.com/visualstudio/ide/reference/compile-page-project-designer-visual-basic\" data-linktype=\"external\">Compile Page, Project Designer (Visual Basic)</a> is used. If the command-line compiler is used, the <a href=\"../../reference/command-line-compiler/optioninfer\" data-linktype=\"relative-path\">/optioninfer</a> compiler option is used.  </p>\n<h4 id=\"to-set-option-infer-in-the-ide\">To set Option Infer in the IDE</h4>\n<ol>\n<li><p>In <strong>Solution Explorer</strong>, select a project. On the <strong>Project</strong> menu, click <strong>Properties</strong>. For more information, see <a href=\"http://msdn.microsoft.com/en-us/983f3c18-832f-4666-afec-74b716ff3e0e\" data-linktype=\"external\">NIB: Managing Project Properties with the Project Designer</a>.  </p>\n</li>\n<li><p>Click the <strong>Compile</strong> tab.  </p>\n</li>\n<li><p>Set the value in the <strong>Option infer</strong> box.  </p>\n<p>When you create a new project, the <strong>Option Infer</strong> setting on the <strong>Compile</strong> tab is set to the <strong>Option Infer</strong> setting in the <strong>VB Defaults</strong> dialog box. To access the <strong>VB Defaults</strong> dialog box, on the <strong>Tools</strong> menu, click <strong>Options</strong>. In the <strong>Options</strong> dialog box, expand <strong>Projects and Solutions</strong>, and then click <strong>VB Defaults</strong>. The initial default setting in <strong>VB Defaults</strong> is <code>On</code>.  </p>\n</li>\n</ol>\n<h4 id=\"to-set-option-infer-on-the-command-line\">To set Option Infer on the command line</h4>\n<ul>\n<li>Include the <a href=\"../../reference/command-line-compiler/optioninfer\" data-linktype=\"relative-path\">/optioninfer</a> compiler option in the <strong>vbc</strong> command.  </li>\n</ul>\n<h2 id=\"default-data-types-and-values\">Default Data Types and Values</h2>\n<p> The following table describes the results of various combinations of specifying the data type and initializer in a <code>Dim</code> statement.  </p>\n<table>\n<thead>\n<tr>\n<th>Data type specified?</th>\n<th>Initializer specified?</th>\n<th>Example</th>\n<th>Result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>No</td>\n<td>No</td>\n<td><code>Dim qty</code></td>\n<td>If <code>Option Strict</code> is off (the default), the variable is set to <code>Nothing</code>.<br><br> If <code>Option Strict</code> is on, a compile-time error occurs.</td>\n</tr>\n<tr>\n<td>No</td>\n<td>Yes</td>\n<td><code>Dim qty = 5</code></td>\n<td>If <code>Option Infer</code> is on (the default), the variable takes the data type of the initializer. See <a href=\"../../programming-guide/language-features/variables/local-type-inference\" data-linktype=\"relative-path\">Local Type Inference</a>.<br><br> If <code>Option Infer</code> is off and <code>Option Strict</code> is off, the variable takes the data type of <code>Object</code>.<br><br> If <code>Option Infer</code> is off and <code>Option Strict</code> is on, a compile-time error occurs.</td>\n</tr>\n<tr>\n<td>Yes</td>\n<td>No</td>\n<td><code>Dim qty As Integer</code></td>\n<td>The variable is initialized to the default value for the data type. For more information, see <a href=\"dim-statement\" data-linktype=\"relative-path\">Dim Statement</a>.</td>\n</tr>\n<tr>\n<td>Yes</td>\n<td>Yes</td>\n<td><code>Dim qty  As Integer = 5</code></td>\n<td>If the data type of the initializer is not convertible to the specified data type, a compile-time error occurs.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"example\">Example</h2>\n<p> The following examples demonstrate how the <code>Option Infer</code> statement enables local type inference.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrTypeInference#6\">        &#39; Enable Option Infer before trying these examples.\n\n        &#39; Variable num is an Integer.\n        Dim num = 5\n\n        &#39; Variable dbl is a Double.\n        Dim dbl = 4.113\n\n        &#39; Variable str is a String.\n        Dim str = &quot;abc&quot;\n\n        &#39; Variable pList is an array of Process objects.\n        Dim pList = Process.GetProcesses()\n\n        &#39; Variable i is an Integer.\n        For i = 1 To 10\n            Console.WriteLine(i)\n        Next\n\n        &#39; Variable item is a string.\n        Dim lst As New List(Of String) From {&quot;abc&quot;, &quot;def&quot;, &quot;ghi&quot;}\n\n        For Each item In lst\n            Console.WriteLine(item)\n        Next\n\n        &#39; Variable namedCust is an instance of the Customer class.\n        Dim namedCust = New Customer With {.Name = &quot;Blue Yonder Airlines&quot;,\n                                           .City = &quot;Snoqualmie&quot;}\n\n        &#39; Variable product is an instance of an anonymous type.\n        Dim product = New With {Key .Name = &quot;paperclips&quot;, .Price = 1.29}\n\n        &#39; If customers is a collection of Customer objects in the following \n        &#39; query, the inferred type of cust is Customer, and the inferred type\n        &#39; of custs is IEnumerable(Of Customer).\n        Dim custs = From cust In customers \n                    Where cust.City = &quot;Seattle&quot; \n                    Select cust.Name, cust.ID\n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> The following example demonstrates that the run-time type can differ when a variable is identified as an <code>Object</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrTypeInference#11\">        &#39; Disable Option Infer when trying this example.\n\n        Dim someVar = 5\n        Console.WriteLine(someVar.GetType.ToString)\n\n        &#39; If Option Infer is instead enabled, the following\n        &#39; statement causes a run-time error. This is because\n        &#39; someVar was implicitly defined as an integer.\n        someVar = &quot;abc&quot;\n        Console.WriteLine(someVar.GetType.ToString)\n\n        &#39; Output:\n        &#39;  System.Int32\n        &#39;  System.String\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"dim-statement\" data-linktype=\"relative-path\">Dim Statement</a><br> <a href=\"../../programming-guide/language-features/variables/local-type-inference\" data-linktype=\"relative-path\">Local Type Inference</a><br> <a href=\"option-compare-statement\" data-linktype=\"relative-path\">Option Compare Statement</a><br> <a href=\"option-explicit-statement\" data-linktype=\"relative-path\">Option Explicit Statement</a><br> <a href=\"option-strict-statement\" data-linktype=\"relative-path\">Option Strict Statement</a><br> <a href=\"https://docs.microsoft.com/visualstudio/ide/reference/visual-basic-defaults-projects-options-dialog-box\" data-linktype=\"external\">Visual Basic Defaults, Projects, Options Dialog Box</a><br> <a href=\"../../reference/command-line-compiler/optioninfer\" data-linktype=\"relative-path\">/optioninfer</a><br> <a href=\"../../../csharp/programming-guide/types/boxing-and-unboxing\" data-linktype=\"relative-path\">Boxing and Unboxing</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"4ad3e6e9-8f5b-4209-a248-de22ef6e4652\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"72\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/statements/option-infer-statement.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/statements/option-infer-statement.md\">\r\n<meta name=\"document_id\" content=\"0f9bd372-09b2-a9ce-48c7-eb89dfad5510\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Option Infer Statement | Microsoft Docs","ms.suite":"","ms.assetid":"4ad3e6e9-8f5b-4209-a248-de22ef6e4652","f1_keywords":["vb.OptionInfer","vb.Infer"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":72,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["variables [Visual Basic], declaring","Option Infer statement","Infer keyword","declaring variables, inferred","inferred variable declaration"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Absolute urls and other fixes (#1281)","commit_sha":"f7dffe4885b331cec8d37f3cc5c9163f69c3b4c9","commit_date":"2016-11-22 12:57:26 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/statements/option-infer-statement.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/statements/option-infer-statement.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/language-reference/statements/option-infer-statement.md","document_id":"0f9bd372-09b2-a9ce-48c7-eb89dfad5510","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/language-reference/statements/option-infer-statement","toc_asset_id":"articles/toc.json","toc_rel":"../../../toc.json","_op_ogTitle":"Option Infer Statement","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":910,"_op_rawTitle":"<h1 id=\"option-infer-statement\" sourcefile=\"docs/visual-basic/language-reference/statements/option-infer-statement.md\" sourcestartlinenumber=\"43\" sourceendlinenumber=\"43\">Option Infer Statement</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/language-reference/statements/option-infer-statement","fileRelativePath":"articles/visual-basic/language-reference/statements/option-infer-statement.html"},"themesRelativePathToOutputRoot":"_themes/"}