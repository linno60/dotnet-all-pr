{"content":"<div><div class=\"content\">\n<p>Repeats a block of statements while a <code>Boolean</code> condition is <code>True</code> or until the condition becomes <code>True</code>.  </p>\n<h2 id=\"syntax\">Syntax</h2>\n<pre class=\"loading\"><code>Do { While | Until } condition  \n    [ statements ]  \n    [ Continue Do ]  \n    [ statements ]  \n    [ Exit Do ]  \n    [ statements ]  \nLoop  \n-or-  \nDo  \n    [ statements ]  \n    [ Continue Do ]  \n    [ statements ]  \n    [ Exit Do ]  \n    [ statements ]  \nLoop { While | Until } condition  \n</code></pre><h2 id=\"parts\">Parts</h2>\n<table>\n<thead>\n<tr>\n<th>Term</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Do</code></td>\n<td>Required. Starts the definition of the <code>Do</code> loop.</td>\n</tr>\n<tr>\n<td><code>While</code></td>\n<td>Required unless <code>Until</code> is used. Repeat the loop until <code>condition</code> is <code>False</code>.</td>\n</tr>\n<tr>\n<td><code>Until</code></td>\n<td>Required unless <code>While</code> is used. Repeat the loop until <code>condition</code> is <code>True</code>.</td>\n</tr>\n<tr>\n<td><code>condition</code></td>\n<td>Optional. <code>Boolean</code> expression. If <code>condition</code> is <code>Nothing</code>, Visual Basic treats it as <code>False</code>.</td>\n</tr>\n<tr>\n<td><code>statements</code></td>\n<td>Optional. One or more statements that are repeated while, or until, <code>condition</code> is <code>True</code>.</td>\n</tr>\n<tr>\n<td><code>Continue Do</code></td>\n<td>Optional. Transfers control to the next iteration of the <code>Do</code> loop.</td>\n</tr>\n<tr>\n<td><code>Exit Do</code></td>\n<td>Optional. Transfers control out of the <code>Do</code> loop.</td>\n</tr>\n<tr>\n<td><code>Loop</code></td>\n<td>Required. Terminates the definition of the <code>Do</code> loop.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"remarks\">Remarks</h2>\n<p> Use a <code>Do...Loop</code> structure when you want to repeat a set of statements an indefinite number of times, until a condition is satisfied. If you want to repeat the statements a set number of times, the <a href=\"for-next-statement\" data-linktype=\"relative-path\">For...Next Statement</a> is usually a better choice.  </p>\n<p> You can use either <code>While</code> or <code>Until</code> to specify <code>condition</code>, but not both.  </p>\n<p> You can test <code>condition</code> only one time, at either the start or the end of the loop. If you test <code>condition</code> at the start of the loop (in the <code>Do</code> statement), the loop might not run even one time. If you test at the end of the loop (in the <code>Loop</code> statement), the loop always runs at least one time.  </p>\n<p> The condition usually results from a comparison of two values, but it can be any expression that evaluates to a <a href=\"../data-types/boolean-data-type\" data-linktype=\"relative-path\">Boolean Data Type</a> value (<code>True</code> or <code>False</code>). This includes values of other data types, such as numeric types, that have been converted to <code>Boolean</code>.  </p>\n<p> You can nest <code>Do</code> loops by putting one loop within another. You can also nest different kinds of control structures within each other. For more information, see <a href=\"../../programming-guide/language-features/control-flow/nested-control-structures\" data-linktype=\"relative-path\">Nested Control Structures</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>Do...Loop</code> structure gives you more flexibility than the <a href=\"while-end-while-statement\" data-linktype=\"relative-path\">While...End While Statement</a> because it enables you to decide whether to end the loop when <code>condition</code> stops being <code>True</code> or when it first becomes <code>True</code>. It also enables you to test <code>condition</code> at either the start or the end of the loop.  </p>\n</div>\n<h2 id=\"exit-do\">Exit Do</h2>\n<p> The <a href=\"exit-statement\" data-linktype=\"relative-path\">Exit Do</a> statement can provide an alternative way to exit a <code>Do…Loop</code>. <code>Exit Do</code> transfers control immediately to the statement that follows the <code>Loop</code> statement.  </p>\n<p> <code>Exit Do</code> is often used after some condition is evaluated, for example in an <code>If...Then...Else</code> structure. You might want to exit a loop if you detect a condition that makes it unnecessary or impossible to continue iterating, such as an erroneous value or a termination request. One use of <code>Exit Do</code> is to test for a condition that could cause an <em>endless loop</em>, which is a loop that could run a large or even infinite number of times. You can use <code>Exit Do</code> to escape the loop.  </p>\n<p> You can include any number of <code>Exit Do</code> statements anywhere in a <code>Do…Loop</code>.  </p>\n<p> When used within nested <code>Do</code> loops, <code>Exit Do</code> transfers control out of the innermost loop and into the next higher level of nesting.  </p>\n<h2 id=\"example\">Example</h2>\n<p> In the following example, the statements in the loop continue to run until the <code>index</code> variable is greater than 10. The <code>Until</code> clause is at the end of the loop.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStatements#131\">        Dim index As Integer = 0\n        Do\n            Debug.Write(index.ToString &amp; &quot; &quot;)\n            index += 1\n        Loop Until index &gt; 10\n\n        Debug.WriteLine(&quot;&quot;)\n        &#39; Output: 0 1 2 3 4 5 6 7 8 9 10 \n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> The following example uses a <code>While</code> clause instead of an <code>Until</code> clause, and <code>condition</code> is tested at the start of the loop instead of at the end.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStatements#132\">        Dim index As Integer = 0\n        Do While index &lt;= 10\n            Debug.Write(index.ToString &amp; &quot; &quot;)\n            index += 1\n        Loop\n\n        Debug.WriteLine(&quot;&quot;)\n        &#39; Output: 0 1 2 3 4 5 6 7 8 9 10 \n</code></pre><h2 id=\"example-2\">Example</h2>\n<p> In the following example, <code>condition</code> stops the loop when the <code>index</code> variable is greater than 100. The <code>If</code> statement in the loop, however, causes the <code>Exit Do</code> statement to stop the loop when the index variable is greater than 10.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStatements#133\">        Dim index As Integer = 0\n        Do While index &lt;= 100\n            If index &gt; 10 Then\n                Exit Do\n            End If\n\n            Debug.Write(index.ToString &amp; &quot; &quot;)\n            index += 1\n        Loop\n\n        Debug.WriteLine(&quot;&quot;)\n        &#39; Output: 0 1 2 3 4 5 6 7 8 9 10 \n</code></pre><h2 id=\"example-3\">Example</h2>\n<p> The following example reads all lines in a text file. The <a class=\"xref\" href=\"../../../../api/system.io.file#System_IO_File_OpenText_\" data-linktype=\"relative-path\">OpenText</a> method opens the file and returns a <a class=\"xref\" href=\"../../../../api/system.io.streamreader\" data-linktype=\"relative-path\">StreamReader</a> that reads the characters. In the <code>Do...Loop</code> condition, the <a class=\"xref\" href=\"../../../../api/system.io.streamreader#System_IO_StreamReader_Peek_\" data-linktype=\"relative-path\">Peek</a> method of the <code>StreamReader</code> determines whether there are any additional characters.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStatements#134\">    Private Sub ShowText(ByVal textFilePath As String)\n        If System.IO.File.Exists(textFilePath) = False Then\n            Debug.WriteLine(&quot;File Not Found: &quot; &amp; textFilePath)\n        Else\n            Dim sr As System.IO.StreamReader = System.IO.File.OpenText(textFilePath)\n\n            Do While sr.Peek() &gt;= 0\n                Debug.WriteLine(sr.ReadLine())\n            Loop\n\n            sr.Close()\n        End If\n    End Sub\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../../programming-guide/language-features/control-flow/loop-structures\" data-linktype=\"relative-path\">Loop Structures</a><br> <a href=\"for-next-statement\" data-linktype=\"relative-path\">For...Next Statement</a><br> <a href=\"../data-types/boolean-data-type\" data-linktype=\"relative-path\">Boolean Data Type</a><br> <a href=\"../../programming-guide/language-features/control-flow/nested-control-structures\" data-linktype=\"relative-path\">Nested Control Structures</a><br> <a href=\"exit-statement\" data-linktype=\"relative-path\">Exit Statement</a><br> <a href=\"while-end-while-statement\" data-linktype=\"relative-path\">While...End While Statement</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"892f9096-b3e2-4aee-834d-83bc4e2c379d\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"37\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/statements/do-loop-statement.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/statements/do-loop-statement.md\">\r\n<meta name=\"document_id\" content=\"7a1b9b1a-86cd-038e-2cd9-25e7367dc00c\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Do...Loop Statement (Visual Basic) | Microsoft Docs","ms.suite":"","ms.assetid":"892f9096-b3e2-4aee-834d-83bc4e2c379d","f1_keywords":["vb.Do","vb.Loop","vb.Until"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":37,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["conditional statements, Do…Loop","while statement, Do...Loop","execution, conditional","Do loops","Until keyword, Do...Loop statement","Do...Loop statement","instructions, repeating","Do statement","Exit statement, in Do...Loop statements","loop structures, Do…Loop statements","do-while statements","loops, exiting","Loop keyword, Do...Loop statement"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/statements/do-loop-statement.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/statements/do-loop-statement.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/language-reference/statements/do-loop-statement.md","document_id":"7a1b9b1a-86cd-038e-2cd9-25e7367dc00c","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/language-reference/statements/do-loop-statement","toc_asset_id":"articles/toc.json","toc_rel":"../../../toc.json","_op_ogTitle":"Do...Loop Statement (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":842,"_op_rawTitle":"<h1 id=\"doloop-statement-visual-basic\" sourcefile=\"docs/visual-basic/language-reference/statements/do-loop-statement.md\" sourcestartlinenumber=\"52\" sourceendlinenumber=\"52\">Do...Loop Statement (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/language-reference/statements/do-loop-statement","fileRelativePath":"articles/visual-basic/language-reference/statements/do-loop-statement.html"},"themesRelativePathToOutputRoot":"_themes/"}