{"content":"<div><div class=\"content\">\n<p>Specifies the <em>type parameters</em> for a <em>generic</em> programming element. Multiple parameters are separated by commas. Following is the syntax for one type parameter.  </p>\n<h2 id=\"syntax\">Syntax</h2>\n<pre class=\"loading\"><code>\n[genericmodifier] typename [ As constraintlist ]  \n</code></pre><h2 id=\"parts\">Parts</h2>\n<table>\n<thead>\n<tr>\n<th>Term</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>genericmodifier</code></td>\n<td>Optional. Can be used only in generic interfaces and delegates. You can declare a type covariant by using the <a href=\"../modifiers/out-generic-modifier\" data-linktype=\"relative-path\">Out</a> keyword or contravariant by using the <a href=\"../modifiers/in-generic-modifier\" data-linktype=\"relative-path\">In</a> keyword. See <a href=\"http://msdn.microsoft.com/library/a58cc086-276f-4f91-a366-85b7f95f38b8\" data-linktype=\"external\">Covariance and Contravariance</a>.</td>\n</tr>\n<tr>\n<td><code>typename</code></td>\n<td>Required. Name of the type parameter. This is a placeholder, to be replaced by a defined type supplied by the corresponding type argument.</td>\n</tr>\n<tr>\n<td><code>constraintlist</code></td>\n<td>Optional. List of requirements that constrain the data type that can be supplied for <code>typename</code>. If you have multiple constraints, enclose them in curly braces (<code>{ }</code>) and separate them with commas. You must introduce the constraint list with the <a href=\"as-clause\" data-linktype=\"relative-path\">As</a> keyword. You use <code>As</code> only once, at the beginning of the list.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"remarks\">Remarks</h2>\n<p> Every generic programming element must take at least one type parameter. A type parameter is a placeholder for a specific type (a <em>constructed element</em>) that client code specifies when it creates an instance of the generic type. You can define a generic class, structure, interface, procedure, or delegate.  </p>\n<p> For more information on when to define a generic type, see <a href=\"../../programming-guide/language-features/data-types/generic-types\" data-linktype=\"relative-path\">Generic Types in Visual Basic</a>. For more information on type parameter names, see <a href=\"../../programming-guide/language-features/declared-elements/declared-element-names\" data-linktype=\"relative-path\">Declared Element Names</a>.  </p>\n<h2 id=\"rules\">Rules</h2>\n<ul>\n<li><p><strong>Parentheses.</strong> If you supply a type parameter list, you must enclose it in parentheses, and you must introduce the list with the <a href=\"of-clause\" data-linktype=\"relative-path\">Of</a> keyword. You use <code>Of</code> only once, at the beginning of the list.  </p>\n</li>\n<li><p><strong>Constraints.</strong> A list of <em>constraints</em> on a type parameter can include the following items in any combination:  </p>\n<ul>\n<li><p>Any number of interfaces. The supplied type must implement every interface in this list.  </p>\n</li>\n<li><p>At most one class. The supplied type must inherit from that class.  </p>\n</li>\n<li><p>The <code>New</code> keyword. The supplied type must expose a parameterless constructor that your generic type can access. This is useful if you constrain a type parameter by one or more interfaces. A type that implements interfaces does not necessarily expose a constructor, and depending on the access level of a constructor, the code within the generic type might not be able to access it.  </p>\n</li>\n<li><p>Either the <code>Class</code> keyword or the <code>Structure</code> keyword. The <code>Class</code> keyword constrains a generic type parameter to require that any type argument passed to it be a reference type, for example a string, array, or delegate, or an object created from a class. The <code>Structure</code> keyword constrains a generic type parameter to require that any type argument passed to it be a value type, for example a structure, enumeration, or elementary data type. You cannot include both <code>Class</code> and <code>Structure</code> in the same <code>constraintlist</code>.  </p>\n<p>The supplied type must satisfy every requirement you include in <code>constraintlist</code>.  </p>\n<p>Constraints on each type parameter are independent of constraints on other type parameters.  </p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"behavior\">Behavior</h2>\n<ul>\n<li><p><strong>Compile-Time Substitution.</strong> When you create a constructed type from a generic programming element, you supply a defined type for each type parameter. The Visual Basic compiler substitutes that supplied type for every occurrence of <code>typename</code> within the generic element.  </p>\n</li>\n<li><p><strong>Absence of Constraints.</strong> If you do not specify any constraints on a type parameter, your code is limited to the operations and members supported by the <a href=\"../data-types/object-data-type\" data-linktype=\"relative-path\">Object Data Type</a> for that type parameter.  </p>\n</li>\n</ul>\n<h2 id=\"example\">Example</h2>\n<p> The following example shows a skeleton definition of a generic dictionary class, including a skeleton function to add a new entry to the dictionary.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStatements#3\">    Public Class dictionary(Of entryType, keyType As {IComparable, IFormattable, New})\n        Public Sub add(ByVal et As entryType, ByVal kt As keyType)\n            Dim dk As keyType\n            If kt.CompareTo(dk) = 0 Then\n            End If\n        End Sub\n    End Class\n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> Because <code>dictionary</code> is generic, the code that uses it can create a variety of objects from it, each having the same functionality but acting on a different data type. The following example shows a line of code that creates a <code>dictionary</code> object with <code>String</code> entries and <code>Integer</code> keys.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStatements#4\">    Dim dictInt As New dictionary(Of String, Integer)\n</code></pre><h2 id=\"example-2\">Example</h2>\n<p> The following example shows the equivalent skeleton definition generated by the preceding example.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStatements#5\">    Public Class dictionary\n        Public Sub add(ByVal et As String, ByVal kt As Integer)\n            Dim dk As Integer\n            If kt.CompareTo(dk) = 0 Then\n            End If\n        End Sub\n    End Class\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"of-clause\" data-linktype=\"relative-path\">Of</a><br> <a href=\"../operators/new-operator\" data-linktype=\"relative-path\">New Operator</a><br> <a href=\"../../programming-guide/language-features/declared-elements/access-levels\" data-linktype=\"relative-path\">Access Levels in Visual Basic</a><br> <a href=\"../data-types/object-data-type\" data-linktype=\"relative-path\">Object Data Type</a><br> <a href=\"function-statement\" data-linktype=\"relative-path\">Function Statement</a><br> <a href=\"structure-statement\" data-linktype=\"relative-path\">Structure Statement</a><br> <a href=\"sub-statement\" data-linktype=\"relative-path\">Sub Statement</a><br> <a href=\"../../programming-guide/language-features/data-types/how-to-use-a-generic-class\" data-linktype=\"relative-path\">How to: Use a Generic Class</a><br> <a href=\"http://msdn.microsoft.com/library/a58cc086-276f-4f91-a366-85b7f95f38b8\" data-linktype=\"external\">Covariance and Contravariance</a><br> <a href=\"../modifiers/in-generic-modifier\" data-linktype=\"relative-path\">In</a><br> <a href=\"../modifiers/out-generic-modifier\" data-linktype=\"relative-path\">Out</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"56db947a-2ae8-40f2-a70a-960764e9d0db\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"33\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/statements/type-list.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/statements/type-list.md\">\r\n<meta name=\"document_id\" content=\"4306832d-f516-cfdd-d90f-6e98eb5f88b9\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Type List (Visual Basic) | Microsoft Docs","ms.suite":"","ms.assetid":"56db947a-2ae8-40f2-a70a-960764e9d0db","f1_keywords":["StructureConstraint","vb.StructureConstraint","ClassConstraint","vb.ClassConstraint"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":33,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["class constraint","constraints, Visual Basic generic types","generic parameters","generics [Visual Basic], constraints","generics [Visual Basic], type list","structure constraint","constraints, in type parameters","generics [Visual Basic], generic types","parameters, type","constraints, Structure keyword","type parameters, constraints","types [Visual Basic], generic","parameters, generic","generics [Visual Basic], type parameters","type parameters","constraints, Class keyword"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/statements/type-list.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/statements/type-list.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/language-reference/statements/type-list.md","document_id":"4306832d-f516-cfdd-d90f-6e98eb5f88b9","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/language-reference/statements/type-list","toc_asset_id":"articles/toc.json","toc_rel":"../../../toc.json","_op_ogTitle":"Type List (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":729,"_op_rawTitle":"<h1 id=\"type-list-visual-basic\" sourcefile=\"docs/visual-basic/language-reference/statements/type-list.md\" sourcestartlinenumber=\"56\" sourceendlinenumber=\"56\">Type List (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/language-reference/statements/type-list","fileRelativePath":"articles/visual-basic/language-reference/statements/type-list.html"},"themesRelativePathToOutputRoot":"_themes/"}