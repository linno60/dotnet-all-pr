{"content":"<div><div class=\"content\">\n<p>Runs a series of statements as long as a given condition is <code>True</code>.  </p>\n<h2 id=\"syntax\">Syntax</h2>\n<pre class=\"loading\"><code>While condition  \n    [ statements ]  \n    [ Continue While ]  \n    [ statements ]  \n    [ Exit While ]  \n    [ statements ]  \nEnd While  \n</code></pre><h2 id=\"parts\">Parts</h2>\n<table>\n<thead>\n<tr>\n<th>Term</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>condition</code></td>\n<td>Required. <code>Boolean</code> expression. If <code>condition</code> is <code>Nothing</code>, Visual Basic treats it as <code>False</code>.</td>\n</tr>\n<tr>\n<td><code>statements</code></td>\n<td>Optional. One or more statements following <code>While</code>, which run every time <code>condition</code> is <code>True</code>.</td>\n</tr>\n<tr>\n<td><code>Continue While</code></td>\n<td>Optional. Transfers control to the next iteration of the <code>While</code> block.</td>\n</tr>\n<tr>\n<td><code>Exit While</code></td>\n<td>Optional. Transfers control out of the <code>While</code> block.</td>\n</tr>\n<tr>\n<td><code>End While</code></td>\n<td>Required. Terminates the definition of the <code>While</code> block.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"remarks\">Remarks</h2>\n<p> Use a <code>While...End While</code> structure when you want to repeat a set of statements an indefinite number of times, as long as a condition remains <code>True</code>. If you want more flexibility with where you test the condition or what result you test it for, you might prefer the <a href=\"do-loop-statement\" data-linktype=\"relative-path\">Do...Loop Statement</a>. If you want to repeat the statements a set number of times, the <a href=\"for-next-statement\" data-linktype=\"relative-path\">For...Next Statement</a> is usually a better choice.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>While</code> keyword is also used in the <a href=\"do-loop-statement\" data-linktype=\"relative-path\">Do...Loop Statement</a>, the <a href=\"../queries/skip-while-clause\" data-linktype=\"relative-path\">Skip While Clause</a> and the <a href=\"../queries/take-while-clause\" data-linktype=\"relative-path\">Take While Clause</a>.  </p>\n</div>\n<p> If <code>condition</code> is <code>True</code>, all of the <code>statements</code> run until the <code>End While</code> statement is encountered. Control then returns to the <code>While</code> statement, and <code>condition</code> is again checked. If <code>condition</code> is still <code>True</code>, the process is repeated. If it’s <code>False</code>, control passes to the statement that follows the <code>End While</code> statement.  </p>\n<p> The <code>While</code> statement always checks the condition before it starts the loop. Looping continues while the condition remains <code>True</code>. If <code>condition</code> is <code>False</code> when you first enter the loop, it doesn’t run even once.  </p>\n<p> The <code>condition</code> usually results from a comparison of two values, but it can be any expression that evaluates to a <a href=\"../data-types/boolean-data-type\" data-linktype=\"relative-path\">Boolean Data Type</a> value (<code>True</code> or <code>False</code>). This expression can include a value of another data type, such as a numeric type, that has been converted to <code>Boolean</code>.  </p>\n<p> You can nest <code>While</code> loops by placing one loop within another. You can also nest different kinds of control structures within one another. For more information, see <a href=\"../../programming-guide/language-features/control-flow/nested-control-structures\" data-linktype=\"relative-path\">Nested Control Structures</a>.  </p>\n<h2 id=\"exit-while\">Exit While</h2>\n<p> The <a href=\"exit-statement\" data-linktype=\"relative-path\">Exit While</a> statement can provide another way to exit a <code>While</code> loop. <code>Exit While</code> immediately transfers control to the statement that follows the <code>End While</code> statement.  </p>\n<p> You typically use <code>Exit While</code> after some condition is evaluated (for example, in an <code>If...Then...Else</code> structure). You might want to exit a loop if you detect a condition that makes it unnecessary or impossible to continue iterating, such as an erroneous value or a termination request. You can use <code>Exit While</code> when you test for a condition that could cause an <em>endless loop</em>, which is a loop that could run an extremely large or even infinite number of times. You can then use <code>Exit While</code> to escape the loop.  </p>\n<p> You can place any number of <code>Exit While</code> statements anywhere in the <code>While</code> loop.  </p>\n<p> When used within nested <code>While</code> loops, <code>Exit While</code> transfers control out of the innermost loop and into the next higher level of nesting.  </p>\n<p> The <code>Continue While</code> statement immediately transfers control to the next iteration of the loop. For more information, see <a href=\"continue-statement\" data-linktype=\"relative-path\">Continue Statement</a>.  </p>\n<h2 id=\"example\">Example</h2>\n<p> In the following example, the statements in the loop continue to run until the <code>index</code> variable is greater than 10.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStatements#171\">        Dim index As Integer = 0\n        While index &lt;= 10\n            Debug.Write(index.ToString &amp; &quot; &quot;)\n            index += 1\n        End While\n\n        Debug.WriteLine(&quot;&quot;)\n        &#39; Output: 0 1 2 3 4 5 6 7 8 9 10 \n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> The following example illustrates the use of the <code>Continue While</code> and <code>Exit While</code> statements.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStatements#172\">        Dim index As Integer = 0\n        While index &lt; 100000\n            index += 1\n\n            &#39; If index is between 5 and 7, continue\n            &#39; with the next iteration.\n            If index &gt;= 5 And index &lt;= 8 Then\n                Continue While\n            End If\n\n            &#39; Display the index.\n            Debug.Write(index.ToString &amp; &quot; &quot;)\n\n            &#39; If index is 10, exit the loop.\n            If index = 10 Then\n                Exit While\n            End If\n        End While\n\n        Debug.WriteLine(&quot;&quot;)\n        &#39; Output: 1 2 3 4 9 10\n</code></pre><h2 id=\"example-2\">Example</h2>\n<p> The following example reads all lines in a text file. The <a class=\"xref\" href=\"../../../../api/system.io.file#System_IO_File_OpenText_\" data-linktype=\"relative-path\">OpenText</a> method opens the file and returns a <a class=\"xref\" href=\"../../../../api/system.io.streamreader\" data-linktype=\"relative-path\">StreamReader</a> that reads the characters. In the <code>While</code> condition, the <a class=\"xref\" href=\"../../../../api/system.io.streamreader#System_IO_StreamReader_Peek_\" data-linktype=\"relative-path\">Peek</a> method of the <code>StreamReader</code> determines whether the file contains additional characters.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStatements#173\">    Private Sub ShowText(ByVal textFilePath As String)\n        If System.IO.File.Exists(textFilePath) = False Then\n            Debug.WriteLine(&quot;File Not Found: &quot; &amp; textFilePath)\n        Else\n            Dim sr As System.IO.StreamReader = System.IO.File.OpenText(textFilePath)\n\n            While sr.Peek() &gt;= 0\n                Debug.WriteLine(sr.ReadLine())\n            End While\n\n            sr.Close()\n        End If\n    End Sub\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../../programming-guide/language-features/control-flow/loop-structures\" data-linktype=\"relative-path\">Loop Structures</a><br> <a href=\"do-loop-statement\" data-linktype=\"relative-path\">Do...Loop Statement</a><br> <a href=\"for-next-statement\" data-linktype=\"relative-path\">For...Next Statement</a><br> <a href=\"../data-types/boolean-data-type\" data-linktype=\"relative-path\">Boolean Data Type</a><br> <a href=\"../../programming-guide/language-features/control-flow/nested-control-structures\" data-linktype=\"relative-path\">Nested Control Structures</a><br> <a href=\"exit-statement\" data-linktype=\"relative-path\">Exit Statement</a><br> <a href=\"continue-statement\" data-linktype=\"relative-path\">Continue Statement</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet/toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"b931d1ce-e8ed-44d8-a13d-92a4f5458a1e\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"22\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/statements/while-end-while-statement.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/statements/while-end-while-statement.md\">\r\n<meta name=\"document_id\" content=\"2dc0ab45-b4e0-4ff8-e237-a1ee0ad97718\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"While...End While Statement (Visual Basic) | Microsoft Docs","ms.suite":"","ms.assetid":"b931d1ce-e8ed-44d8-a13d-92a4f5458a1e","f1_keywords":["vb.While","vb.While...EndWhile"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":22,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["While statement, While...End While","While statement","While...End While statements"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/statements/while-end-while-statement.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/statements/while-end-while-statement.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/language-reference/statements/while-end-while-statement.md","document_id":"2dc0ab45-b4e0-4ff8-e237-a1ee0ad97718","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/language-reference/statements/while-end-while-statement","toc_asset_id":"articles/toc.json","toc_rel":"../../../toc.json","_op_ogTitle":"While...End While Statement (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":757,"_op_rawTitle":"<h1 id=\"whileend-while-statement-visual-basic\" sourcefile=\"docs/visual-basic/language-reference/statements/while-end-while-statement.md\" sourcestartlinenumber=\"41\" sourceendlinenumber=\"41\">While...End While Statement (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/language-reference/statements/while-end-while-statement","fileRelativePath":"articles/visual-basic/language-reference/statements/while-end-while-statement.html"},"themesRelativePathToOutputRoot":"_themes/"}