{"content":"<div><div class=\"content\">\n<p>Declares the beginning of a <code>Using</code> block and optionally acquires the system resources that the block controls.  </p>\n<h2 id=\"syntax\">Syntax</h2>\n<pre class=\"loading\"><code>Using { resourcelist | resourceexpression }  \n    [ statements ]  \nEnd Using  \n</code></pre><h2 id=\"parts\">Parts</h2>\n<table>\n<thead>\n<tr>\n<th>Term</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>resourcelist</code></td>\n<td>Required if you do not supply <code>resourceexpression</code>. List of one or more system resources that this <code>Using</code> block controls, separated by commas.</td>\n</tr>\n<tr>\n<td><code>resourceexpression</code></td>\n<td>Required if you do not supply <code>resourcelist</code>. Reference variable or expression referring to a system resource to be controlled by this <code>Using</code> block.</td>\n</tr>\n<tr>\n<td><code>statements</code></td>\n<td>Optional. Block of statements that the <code>Using</code> block runs.</td>\n</tr>\n<tr>\n<td><code>End Using</code></td>\n<td>Required. Terminates the definition of the <code>Using</code> block and disposes of all the resources that it controls.</td>\n</tr>\n</tbody>\n</table>\n<p> Each resource in the <code>resourcelist</code> part has the following syntax and parts:  </p>\n<p> <code>resourcename As New resourcetype [ ( [ arglist ] ) ]</code>  </p>\n<p> -or-  </p>\n<p> <code>resourcename As resourcetype = resourceexpression</code>  </p>\n<h2 id=\"resourcelist-parts\">resourcelist Parts</h2>\n<table>\n<thead>\n<tr>\n<th>Term</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>resourcename</code></td>\n<td>Required. Reference variable that refers to a system resource that the <code>Using</code> block controls.</td>\n</tr>\n<tr>\n<td><code>New</code></td>\n<td>Required if the <code>Using</code> statement acquires the resource. If you have already acquired the resource, use the second syntax alternative.</td>\n</tr>\n<tr>\n<td><code>resourcetype</code></td>\n<td>Required. The class of the resource. The class must implement the <a class=\"xref\" href=\"../../../../api/system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface.</td>\n</tr>\n<tr>\n<td><code>arglist</code></td>\n<td>Optional. List of arguments you are passing to the constructor to create an instance of <code>resourcetype</code>. See <a href=\"parameter-list\" data-linktype=\"relative-path\">Parameter List</a>.</td>\n</tr>\n<tr>\n<td><code>resourceexpression</code></td>\n<td>Required. Variable or expression referring to a system resource satisfying the requirements of <code>resourcetype</code>. If you use the second syntax alternative, you must acquire the resource before passing control to the <code>Using</code> statement.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"remarks\">Remarks</h2>\n<p> Sometimes your code requires an unmanaged resource, such as a file handle, a COM wrapper, or a SQL connection. A <code>Using</code> block guarantees the disposal of one or more such resources when your code is finished with them. This makes them available for other code to use.  </p>\n<p> Managed resources are disposed of by the .NET Framework garbage collector (GC) without any extra coding on your part. You do not need a <code>Using</code> block for managed resources. However, you can still use a <code>Using</code> block to force the disposal of a managed resource instead of waiting for the garbage collector.  </p>\n<p> A <code>Using</code> block has three parts: acquisition, usage, and disposal.  </p>\n<ul>\n<li><p><em>Acquisition</em> means creating a variable and initializing it to refer to the system resource. The <code>Using</code> statement can acquire one or more resources, or you can acquire exactly one resource before entering the block and supply it to the <code>Using</code> statement. If you supply <code>resourceexpression</code>, you must acquire the resource before passing control to the <code>Using</code> statement.  </p>\n</li>\n<li><p><em>Usage</em> means accessing the resources and performing actions with them. The statements between <code>Using</code> and <code>End Using</code> represent the usage of the resources.  </p>\n</li>\n<li><p><em>Disposal</em> means calling the <a class=\"xref\" href=\"../../../../api/system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method on the object in <code>resourcename</code>. This allows the object to cleanly terminate its resources. The <code>End Using</code> statement disposes of the resources under the <code>Using</code> block&#39;s control.  </p>\n</li>\n</ul>\n<h2 id=\"behavior\">Behavior</h2>\n<p> A <code>Using</code> block behaves like a <code>Try</code>...<code>Finally</code> construction in which the <code>Try</code> block uses the resources and the <code>Finally</code> block disposes of them. Because of this, the <code>Using</code> block guarantees disposal of the resources, no matter how you exit the block. This is true even in the case of an unhandled exception, except for a <a class=\"xref\" href=\"../../../../api/system.stackoverflowexception\" data-linktype=\"relative-path\">StackOverflowException</a>.  </p>\n<p> The scope of every resource variable acquired by the <code>Using</code> statement is limited to the <code>Using</code> block.  </p>\n<p> If you specify more than one system resource in the <code>Using</code> statement, the effect is the same as if you nested <code>Using</code> blocks one within another.  </p>\n<p> If <code>resourcename</code> is <code>Nothing</code>, no call to <a class=\"xref\" href=\"../../../../api/system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> is made, and no exception is thrown.  </p>\n<h2 id=\"structured-exception-handling-within-a-using-block\">Structured Exception Handling Within a Using Block</h2>\n<p> If you need to handle an exception that might occur within the <code>Using</code> block, you can add a complete <code>Try</code>...<code>Finally</code> construction to it. If you need to handle the case where the <code>Using</code> statement is not successful in acquiring a resource, you can test to see if <code>resourcename</code> is <code>Nothing</code>.  </p>\n<h2 id=\"structured-exception-handling-instead-of-a-using-block\">Structured Exception Handling Instead of a Using Block</h2>\n<p> If you need finer control over the acquisition of the resources, or you need additional code in the <code>Finally</code> block, you can rewrite the <code>Using</code> block as a <code>Try</code>...<code>Finally</code> construction. The following example shows skeleton <code>Try</code> and <code>Using</code> constructions that are equivalent in the acquisition and disposal of <code>resource</code>.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Using resource As New resourceType   \n    &#39; Insert code to work with resource.  \nEnd Using  \n\n&#39; For the acquisition and disposal of resource, the following  \n&#39; Try construction is equivalent to the Using block.  \nDim resource As New resourceType  \nTry   \n    &#39; Insert code to work with resource.  \nFinally   \n    If resource IsNot Nothing Then  \n        resource.Dispose()   \n    End If  \nEnd Try   \n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> The code inside the <code>Using</code> block should not assign the object in <code>resourcename</code> to another variable. When you exit the <code>Using</code> block, the resource is disposed, and the other variable cannot access the resource to which it points.  </p>\n</div>\n<h2 id=\"example\">Example</h2>\n<p> The following example creates a file that is named log.txt and writes two lines of text to the file. The example also reads that same file and displays the lines of text.  </p>\n<p> Because the <a class=\"xref\" href=\"../../../../api/system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> and <a class=\"xref\" href=\"../../../../api/system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> classes implement the <a class=\"xref\" href=\"../../../../api/system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface, the code can use <code>Using</code> statements to ensure that the file is correctly closed after the write and read operations.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStatements#50\">    Private Sub WriteFile()\n        Using writer As System.IO.TextWriter = System.IO.File.CreateText(&quot;log.txt&quot;)\n            writer.WriteLine(&quot;This is line one.&quot;)\n            writer.WriteLine(&quot;This is line two.&quot;)\n        End Using\n    End Sub\n\n    Private Sub ReadFile()\n        Using reader As System.IO.TextReader = System.IO.File.OpenText(&quot;log.txt&quot;)\n            Dim line As String\n\n            line = reader.ReadLine()\n            Do Until line Is Nothing\n                Console.WriteLine(line)\n                line = reader.ReadLine()\n            Loop\n        End Using\n    End Sub\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../api/system.idisposable\" data-linktype=\"relative-path\">IDisposable</a><br> <a href=\"try-catch-finally-statement\" data-linktype=\"relative-path\">Try...Catch...Finally Statement</a><br> <a href=\"../../programming-guide/language-features/control-flow/how-to-dispose-of-a-system-resource\" data-linktype=\"relative-path\">How to: Dispose of a System Resource</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-all/api/toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"665d1580-dd54-4e96-a9a9-6be2a68948f1\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"36\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/statements/using-statement.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/statements/using-statement.md\">\r\n<meta name=\"document_id\" content=\"6b47b932-d6f1-eec0-abcf-c79fddc7d10f\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Using Statement (Visual Basic) | Microsoft Docs","ms.suite":"","ms.assetid":"665d1580-dd54-4e96-a9a9-6be2a68948f1","f1_keywords":["vb.using"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":36,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["resource disposal","Try...Catch...Finally statements, equivalent to Using statement","resources [Visual Basic], disposing","Using statement"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/statements/using-statement.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/statements/using-statement.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/language-reference/statements/using-statement.md","document_id":"6b47b932-d6f1-eec0-abcf-c79fddc7d10f","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/language-reference/statements/using-statement","toc_asset_id":"articles/toc.json","toc_rel":"../../../toc.json","_op_ogTitle":"Using Statement (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":906,"_op_rawTitle":"<h1 id=\"using-statement-visual-basic\" sourcefile=\"docs/visual-basic/language-reference/statements/using-statement.md\" sourcestartlinenumber=\"41\" sourceendlinenumber=\"41\">Using Statement (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/language-reference/statements/using-statement","fileRelativePath":"articles/visual-basic/language-reference/statements/using-statement.html"},"themesRelativePathToOutputRoot":"_themes/"}