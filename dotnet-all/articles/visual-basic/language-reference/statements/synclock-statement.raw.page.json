{"content":"<div><div class=\"content\">\n<p>Acquires an exclusive lock for a statement block before executing the block.  </p>\n<h2 id=\"syntax\">Syntax</h2>\n<pre class=\"loading\"><code>SyncLock lockobject  \n    [ block ]  \nEnd SyncLock  \n</code></pre><h2 id=\"parts\">Parts</h2>\n<p> <code>lockobject</code><br> Required. Expression that evaluates to an object reference.  </p>\n<p> <code>block</code><br> Optional. Block of statements that are to execute when the lock is acquired.  </p>\n<p> <code>End SyncLock</code><br> Terminates a <code>SyncLock</code> block.  </p>\n<h2 id=\"remarks\">Remarks</h2>\n<p> The <code>SyncLock</code> statement ensures that multiple threads do not execute the statement block at the same time. <code>SyncLock</code> prevents each thread from entering the block until no other thread is executing it.  </p>\n<p> The most common use of <code>SyncLock</code> is to protect data from being updated by more than one thread simultaneously. If the statements that manipulate the data must go to completion without interruption, put them inside a <code>SyncLock</code> block.  </p>\n<p> A statement block protected by an exclusive lock is sometimes called a <em>critical section</em>.  </p>\n<h2 id=\"rules\">Rules</h2>\n<ul>\n<li><p>Branching. You cannot branch into a <code>SyncLock</code> block from outside the block.  </p>\n</li>\n<li><p>Lock Object Value. The value of <code>lockobject</code> cannot be <code>Nothing</code>. You must create the lock object before you use it in a <code>SyncLock</code> statement.  </p>\n<p> You cannot change the value of <code>lockobject</code> while executing a <code>SyncLock</code> block. The mechanism requires that the lock object remain unchanged.  </p>\n</li>\n<li><p>You can&#39;t use the <a href=\"../operators/await-operator\" data-linktype=\"relative-path\">Await</a> operator in a <code>SyncLock</code> block.  </p>\n</li>\n</ul>\n<h2 id=\"behavior\">Behavior</h2>\n<ul>\n<li><p>Mechanism. When a thread reaches the <code>SyncLock</code> statement, it evaluates the <code>lockobject</code> expression and suspends execution until it acquires an exclusive lock on the object returned by the expression. When another thread reaches the <code>SyncLock</code> statement, it does not acquire a lock until the first thread executes the <code>End SyncLock</code> statement.  </p>\n</li>\n<li><p>Protected Data. If <code>lockobject</code> is a <code>Shared</code> variable, the exclusive lock prevents a thread in any instance of the class from executing the <code>SyncLock</code> block while any other thread is executing it. This protects data that is shared among all the instances.  </p>\n<p> If <code>lockobject</code> is an instance variable (not <code>Shared</code>), the lock prevents a thread running in the current instance from executing the <code>SyncLock</code> block at the same time as another thread in the same instance. This protects data maintained by the individual instance.  </p>\n</li>\n<li><p>Acquisition and Release. A <code>SyncLock</code> block behaves like a <code>Try...Finally</code> construction in which the <code>Try</code> block acquires an exclusive lock on <code>lockobject</code> and the <code>Finally</code> block releases it. Because of this, the <code>SyncLock</code> block guarantees release of the lock, no matter how you exit the block. This is true even in the case of an unhandled exception.  </p>\n</li>\n<li><p>Framework Calls. The <code>SyncLock</code> block acquires and releases the exclusive lock by calling the <code>Enter</code> and <code>Exit</code> methods of the <code>Monitor</code> class in the <a class=\"xref\" href=\"../../../../api/system.threading\" data-linktype=\"relative-path\">System.Threading</a> namespace.  </p>\n</li>\n</ul>\n<h2 id=\"programming-practices\">Programming Practices</h2>\n<p> The <code>lockobject</code> expression should always evaluate to an object that belongs exclusively to your class. You should declare a <code>Private</code> object variable to protect data belonging to the current instance, or a <code>Private Shared</code> object variable to protect data common to all instances.  </p>\n<p> You should not use the <code>Me</code> keyword to provide a lock object for instance data. If code external to your class has a reference to an instance of your class, it could use that reference as a lock object for a <code>SyncLock</code> block completely different from yours, protecting different data. In this way, your class and the other class could block each other from executing their unrelated <code>SyncLock</code> blocks. Similarly locking on a string can be problematic since any other code in the process using the same string will share the same lock.  </p>\n<p> You should also not use the <code>Me.GetType</code> method to provide a lock object for shared data. This is because <code>GetType</code> always returns the same <code>Type</code> object for a given class name. External code could call <code>GetType</code> on your class and obtain the same lock object you are using. This would result in the two classes blocking each other from their <code>SyncLock</code> blocks.  </p>\n<h2 id=\"examples\">Examples</h2>\n<h3 id=\"description\">Description</h3>\n<p> The following example shows a class that maintains a simple list of messages. It holds the messages in an array and the last used element of that array in a variable. The <code>addAnotherMessage</code> procedure increments the last element and stores the new message. Those two operations are protected by the <code>SyncLock</code> and <code>End SyncLock</code> statements, because once the last element has been incremented, the new message must be stored before any other thread can increment the last element again.  </p>\n<p> If the <code>simpleMessageList</code> class shared one list of messages among all its instances, the variables <code>messagesList</code> and <code>messagesLast</code> would be declared as <code>Shared</code>. In this case, the variable <code>messagesLock</code> should also be <code>Shared</code>, so that there would be a single lock object used by every instance.  </p>\n<h3 id=\"code\">Code</h3>\n<pre><code class=\"lang-vb\" name=\"VbVbalrThreading#1\">Class simpleMessageList\n    Public messagesList() As String = New String(50) {}\n    Public messagesLast As Integer = -1\n    Private messagesLock As New Object\n    Public Sub addAnotherMessage(ByVal newMessage As String)\n        SyncLock messagesLock\n            messagesLast += 1\n            If messagesLast &lt; messagesList.Length Then\n                messagesList(messagesLast) = newMessage\n            End If\n        End SyncLock\n    End Sub\nEnd Class\n</code></pre><h3 id=\"description-1\">Description</h3>\n<p> The following example uses threads and <code>SyncLock</code>. As long as the <code>SyncLock</code> statement is present, the statement block is a critical section and <code>balance</code> never becomes a negative number. You can comment out the <code>SyncLock</code> and <code>End SyncLock</code> statements to see the effect of leaving out the <code>SyncLock</code> keyword.  </p>\n<h3 id=\"code-1\">Code</h3>\n<pre><code class=\"lang-vb\" name=\"VbVbalrThreading#21\">Imports System.Threading\n\nModule Module1\n\n    Class Account\n        Dim thisLock As New Object\n        Dim balance As Integer\n\n        Dim r As New Random()\n\n        Public Sub New(ByVal initial As Integer)\n            balance = initial\n        End Sub\n\n        Public Function Withdraw(ByVal amount As Integer) As Integer\n            &#39; This condition will never be true unless the SyncLock statement\n            &#39; is commented out:\n            If balance &lt; 0 Then\n                Throw New Exception(&quot;Negative Balance&quot;)\n            End If\n\n            &#39; Comment out the SyncLock and End SyncLock lines to see\n            &#39; the effect of leaving out the SyncLock keyword.\n            SyncLock thisLock\n                If balance &gt;= amount Then\n                    Console.WriteLine(&quot;Balance before Withdrawal :  &quot; &amp; balance)\n                    Console.WriteLine(&quot;Amount to Withdraw        : -&quot; &amp; amount)\n                    balance = balance - amount\n                    Console.WriteLine(&quot;Balance after Withdrawal  :  &quot; &amp; balance)\n                    Return amount\n                Else\n                    &#39; Transaction rejected.\n                    Return 0\n                End If\n            End SyncLock\n        End Function\n\n        Public Sub DoTransactions()\n            For i As Integer = 0 To 99\n                Withdraw(r.Next(1, 100))\n            Next\n        End Sub\n    End Class\n\n    Sub Main()\n        Dim threads(10) As Thread\n        Dim acc As New Account(1000)\n\n        For i As Integer = 0 To 9\n            Dim t As New Thread(New ThreadStart(AddressOf acc.DoTransactions))\n            threads(i) = t\n        Next\n\n        For i As Integer = 0 To 9\n            threads(i).Start()\n        Next\n    End Sub\n\nEnd Module\n</code></pre><h3 id=\"comments\">Comments</h3>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../api/system.threading\" data-linktype=\"relative-path\">System.Threading</a><br> <a class=\"xref\" href=\"../../../../api/system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a><br> <a href=\"http://msdn.microsoft.com/library/413e1f28-a2c5-4eec-8338-aa43e7982ff4\" data-linktype=\"external\">Thread Synchronization</a><br> <a href=\"http://msdn.microsoft.com/library/552f6c68-dbdb-4327-ae36-32cf9063d88c\" data-linktype=\"external\">Threading</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"14501703-298f-4d43-b139-c4b6366af176\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"17\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/statements/synclock-statement.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/statements/synclock-statement.md\">\r\n<meta name=\"document_id\" content=\"b64d23dc-1c22-aba9-d38d-2afa39527721\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","uhfHeaderId":"MSDocsHeader-DotNet","title":"SyncLock Statement | Microsoft Docs","ms.suite":"","ms.assetid":"14501703-298f-4d43-b139-c4b6366af176","f1_keywords":["vb.SyncLock","SyncLock"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":17,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["threading [Visual Basic], locks","SyncLock statement","locks, threads"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/statements/synclock-statement.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/statements/synclock-statement.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/language-reference/statements/synclock-statement.md","document_id":"b64d23dc-1c22-aba9-d38d-2afa39527721","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/language-reference/statements/synclock-statement","toc_asset_id":"articles/toc.json","toc_rel":"../../../toc.json","_op_ogTitle":"SyncLock Statement","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":1043,"_op_rawTitle":"<h1 id=\"synclock-statement\" sourcefile=\"docs/visual-basic/language-reference/statements/synclock-statement.md\" sourcestartlinenumber=\"41\" sourceendlinenumber=\"41\">SyncLock Statement</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/language-reference/statements/synclock-statement","fileRelativePath":"articles/visual-basic/language-reference/statements/synclock-statement.html"},"themesRelativePathToOutputRoot":"_themes/"}