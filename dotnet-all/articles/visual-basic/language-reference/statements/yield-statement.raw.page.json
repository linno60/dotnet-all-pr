{"content":"<div><div class=\"content\">\n<p>Sends the next element of a collection to a <code>For Each...Next</code> statement.  </p>\n<h2 id=\"syntax\">Syntax</h2>\n<pre class=\"loading\"><code>Yield expression  \n</code></pre><h4 id=\"parameters\">Parameters</h4>\n<table>\n<thead>\n<tr>\n<th>Term</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>expression</code></td>\n<td>Required. An expression that is implicitly convertible to the type of the iterator function or <code>Get</code> accessor that contains the <code>Yield</code> statement.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"remarks\">Remarks</h2>\n<p> The <code>Yield</code> statement returns one element of a collection at a time. The <code>Yield</code> statement is included in an iterator function or <code>Get</code> accessor, which perform custom iterations over a collection.  </p>\n<p> You consume an iterator function by using a <a href=\"for-each-next-statement\" data-linktype=\"relative-path\">For Each...Next Statement</a> or a LINQ query. Each iteration of the <code>For Each</code> loop calls the iterator function. When a <code>Yield</code> statement is reached in the iterator function, <code>expression</code> is returned, and the current location in code is retained. Execution is restarted from that location the next time that the iterator function is called.  </p>\n<p> An implicit conversion must exist from the type of <code>expression</code> in the <code>Yield</code> statement to the return type of the iterator.  </p>\n<p> You can use an <code>Exit Function</code> or <code>Return</code> statement to end the iteration.  </p>\n<p> &quot;Yield&quot; is not a reserved word and has special meaning only when it is used in an <code>Iterator</code> function or <code>Get</code> accessor.  </p>\n<p> For more information about iterator functions and <code>Get</code> accessors, see <a href=\"http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7\" data-linktype=\"external\">Iterators</a>.  </p>\n<h2 id=\"iterator-functions-and-get-accessors\">Iterator Functions and Get Accessors</h2>\n<p> The declaration of an iterator function or <code>Get</code> accessor must meet the following requirements:  </p>\n<ul>\n<li><p>It must include an <a href=\"../modifiers/iterator\" data-linktype=\"relative-path\">Iterator</a> modifier.  </p>\n</li>\n<li><p>The return type must be <a class=\"xref\" href=\"../../../../api/system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a>, <a class=\"xref\" href=\"../../../../api/system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>, <a class=\"xref\" href=\"../../../../api/system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a>, or <a class=\"xref\" href=\"../../../../api/system.collections.generic.ienumerator-1\" data-linktype=\"relative-path\">IEnumerator&lt;T&gt;</a>.  </p>\n</li>\n<li><p>It cannot have any <code>ByRef</code> parameters.  </p>\n<p>An iterator function cannot occur in an event, instance constructor, static constructor, or static destructor.  </p>\n<p>An iterator function can be an anonymous function. For more information, see <a href=\"http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7\" data-linktype=\"external\">Iterators</a>.  </p>\n</li>\n</ul>\n<h2 id=\"exception-handling\">Exception Handling</h2>\n<p> A <code>Yield</code> statement can be inside a <code>Try</code> block of a <a href=\"try-catch-finally-statement\" data-linktype=\"relative-path\">Try...Catch...Finally Statement</a>. A <code>Try</code> block that has a <code>Yield</code> statement can have <code>Catch</code> blocks, and can have a <code>Finally</code> block.  </p>\n<p> A <code>Yield</code> statement cannot be inside a <code>Catch</code> block or a <code>Finally</code> block.  </p>\n<p> If the <code>For Each</code> body (outside of the iterator function) throws an exception, a <code>Catch</code> block in the iterator function is not executed, but a <code>Finally</code> block in the iterator function is executed. A <code>Catch</code> block inside an iterator function catches only exceptions that occur inside the iterator function.  </p>\n<h2 id=\"technical-implementation\">Technical Implementation</h2>\n<p> The following code returns an <code>IEnumerable (Of String)</code> from an iterator function and then iterates through the elements of the <code>IEnumerable (Of String)</code>.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Dim elements As IEnumerable(Of String) = MyIteratorFunction()  \n    …  \nFor Each element As String In elements  \nNext  \n</code></pre><p> The call to <code>MyIteratorFunction</code> doesn&#39;t execute the body of the function. Instead the call returns an <code>IEnumerable(Of String)</code> into the <code>elements</code> variable.  </p>\n<p> On an iteration of the <code>For Each</code> loop, the <a class=\"xref\" href=\"../../../../api/system.collections.ienumerator#System_Collections_IEnumerator_MoveNext_\" data-linktype=\"relative-path\">MoveNext</a> method is called for <code>elements</code>. This call executes the body of <code>MyIteratorFunction</code> until the next <code>Yield</code> statement is reached. The <code>Yield</code> statement returns an expression that determines not only the value of the <code>element</code> variable for consumption by the loop body but also the <a class=\"xref\" href=\"../../../../api/system.collections.generic.ienumerator-1#System_Collections_Generic_IEnumerator_1_Current_\" data-linktype=\"relative-path\">Current</a> property of elements, which is an <code>IEnumerable (Of String)</code>.  </p>\n<p> On each subsequent iteration of the <code>For Each</code> loop, the execution of the iterator body continues from where it left off, again stopping when it reaches a <code>Yield</code> statement. The <code>For Each</code> loop completes when the end of the iterator function or a <code>Return</code> or <code>Exit Function</code> statement is reached.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following example has a <code>Yield</code> statement that is inside a <a href=\"for-next-statement\" data-linktype=\"relative-path\">For…Next</a> loop. Each iteration of the <a href=\"for-each-next-statement\" data-linktype=\"relative-path\">For Each</a> statement body in <code>Main</code> creates a call to the <code>Power</code> iterator function. Each call to the iterator function proceeds to the next execution of the <code>Yield</code> statement, which occurs during the next iteration of the <code>For…Next</code> loop.  </p>\n<p> The return type of the iterator method is <a class=\"xref\" href=\"../../../../api/system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>, an iterator interface type. When the iterator method is called, it returns an enumerable object that contains the powers of a number.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStatements#98\">    Sub Main()\n        For Each number In Power(2, 8)\n            Console.Write(number &amp; &quot; &quot;)\n        Next\n        &#39; Output: 2 4 8 16 32 64 128 256\n        Console.ReadKey()\n    End Sub\n\n    Private Iterator Function Power(\n    ByVal base As Integer, ByVal highExponent As Integer) _\n    As System.Collections.Generic.IEnumerable(Of Integer)\n\n        Dim result = 1\n\n        For counter = 1 To highExponent\n            result = result * base\n            Yield result\n        Next\n    End Function\n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> The following example demonstrates a <code>Get</code> accessor that is an iterator. The property declaration includes an <code>Iterator</code> modifier.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStatements#99\">    Sub Main()\n        Dim theGalaxies As New Galaxies\n        For Each theGalaxy In theGalaxies.NextGalaxy\n            With theGalaxy\n                Console.WriteLine(.Name &amp; &quot;  &quot; &amp; .MegaLightYears)\n            End With\n        Next\n        Console.ReadKey()\n    End Sub\n\n    Public Class Galaxies\n        Public ReadOnly Iterator Property NextGalaxy _\n        As System.Collections.Generic.IEnumerable(Of Galaxy)\n            Get\n                Yield New Galaxy With {.Name = &quot;Tadpole&quot;, .MegaLightYears = 400}\n                Yield New Galaxy With {.Name = &quot;Pinwheel&quot;, .MegaLightYears = 25}\n                Yield New Galaxy With {.Name = &quot;Milky Way&quot;, .MegaLightYears = 0}\n                Yield New Galaxy With {.Name = &quot;Andromeda&quot;, .MegaLightYears = 3}\n            End Get\n        End Property\n    End Class\n\n    Public Class Galaxy\n        Public Property Name As String\n        Public Property MegaLightYears As Integer\n    End Class\n</code></pre><p> For additional examples, see <a href=\"http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7\" data-linktype=\"external\">Iterators</a>.  </p>\n<h2 id=\"requirements\">Requirements</h2>\n<p> Visual Studio 2012  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"http://msdn.microsoft.com/library/f45331db-d595-46ec-9142-551d3d1eb1a7\" data-linktype=\"external\">Iterators</a><br> <a href=\"index\" data-linktype=\"relative-path\">Statements</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"f33126c5-d7c4-43e2-8e36-4ae3f0703d97\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"22\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-21 01:42 AM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/statements/yield-statement.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/visual-basic/language-reference/statements/yield-statement.md\">\r\n<meta name=\"document_id\" content=\"bca0d3bd-243d-eb0e-c343-19a028c9f141\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../../toc.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Yield Statement (Visual Basic) | Microsoft Docs","ms.suite":"","ms.assetid":"f33126c5-d7c4-43e2-8e36-4ae3f0703d97","f1_keywords":["vb.Yield"],"translation.priority.ht":["de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","ru-ru","zh-cn","zh-tw"],"caps.latest.revision":22,"ms.topic":"article","helpviewer_keywords":["iterators, Yield statement [Visual Basic]","iterators [Visual Basic]","Yield statement [Visual Basic]"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-21 01:42 AM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/21/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/statements/yield-statement.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/visual-basic/language-reference/statements/yield-statement.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/language-reference/statements/yield-statement.md","document_id":"bca0d3bd-243d-eb0e-c343-19a028c9f141","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/language-reference/statements/yield-statement","toc_asset_id":"articles/toc.json","toc_rel":"../../../toc.json","_op_ogTitle":"Yield Statement (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":819,"_op_rawTitle":"<h1 id=\"yield-statement-visual-basic\" sourcefile=\"docs/visual-basic/language-reference/statements/yield-statement.md\" sourcestartlinenumber=\"39\" sourceendlinenumber=\"39\">Yield Statement (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/language-reference/statements/yield-statement","fileRelativePath":"articles/visual-basic/language-reference/statements/yield-statement.html"},"themesRelativePathToOutputRoot":"_themes/"}