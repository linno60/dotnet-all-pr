{"content":"<div><div class=\"content\">\n<p>Repeats a group of statements a specified number of times.  </p>\n<h2 id=\"syntax\">Syntax</h2>\n<pre class=\"loading\"><code>For counter [ As datatype ] = start To end [ Step step ]  \n    [ statements ]  \n    [ Continue For ]  \n    [ statements ]  \n    [ Exit For ]  \n    [ statements ]  \nNext [ counter ]  \n</code></pre><h2 id=\"parts\">Parts</h2>\n<table>\n<thead>\n<tr>\n<th>Part</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>counter</code></td>\n<td>Required in the <code>For</code> statement. Numeric variable. The control variable for the loop. For more information, see <a href=\"#BKMK_Counter\" data-linktype=\"self-bookmark\">Counter Argument</a> later in this topic.</td>\n</tr>\n<tr>\n<td><code>datatype</code></td>\n<td>Optional. Data type of <code>counter</code>. For more information, see <a href=\"#BKMK_Counter\" data-linktype=\"self-bookmark\">Counter Argument</a> later in this topic.</td>\n</tr>\n<tr>\n<td><code>start</code></td>\n<td>Required. Numeric expression. The initial value of <code>counter</code>.</td>\n</tr>\n<tr>\n<td><code>end</code></td>\n<td>Required. Numeric expression. The final value of <code>counter</code>.</td>\n</tr>\n<tr>\n<td><code>step</code></td>\n<td>Optional. Numeric expression. The amount by which <code>counter</code> is incremented each time through the loop.</td>\n</tr>\n<tr>\n<td><code>statements</code></td>\n<td>Optional. One or more statements between <code>For</code> and <code>Next</code> that run the specified number of times.</td>\n</tr>\n<tr>\n<td><code>Continue For</code></td>\n<td>Optional. Transfers control to the next loop iteration.</td>\n</tr>\n<tr>\n<td><code>Exit For</code></td>\n<td>Optional. Transfers control out of the <code>For</code> loop.</td>\n</tr>\n<tr>\n<td><code>Next</code></td>\n<td>Required. Terminates the definition of the <code>For</code> loop.</td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>To</code> keyword is used in this statement to specify the range for the counter. You can also use this keyword in the <a href=\"select-case-statement\" data-linktype=\"relative-path\">Select...Case Statement</a> and in array declarations. For more information about array declarations, see <a href=\"dim-statement\" data-linktype=\"relative-path\">Dim Statement</a>.  </p>\n</div>\n<h2 id=\"simple-examples\">Simple Examples</h2>\n<p> You use a <code>For</code>...<code>Next</code> structure when you want to repeat a set of statements a set number of times.  </p>\n<p> In the following example, the <code>index</code> variable starts with a value of 1 and is incremented with each iteration of the loop, ending after the value of <code>index</code> reaches 5.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStatements#111\">        For index As Integer = 1 To 5\n            Debug.Write(index.ToString &amp; &quot; &quot;)\n        Next\n        Debug.WriteLine(&quot;&quot;)\n        &#39; Output: 1 2 3 4 5\n</code></pre><p> In the following example, the <code>number</code> variable starts at 2 and is reduced by 0.25 on each iteration of the loop, ending after the value of <code>number</code> reaches 0. The <code>Step</code> argument of <code>-.25</code> reduces the value by 0.25 on each iteration of the loop.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStatements#112\">        For number As Double = 2 To 0 Step -0.25\n            Debug.Write(number.ToString &amp; &quot; &quot;)\n        Next\n        Debug.WriteLine(&quot;&quot;)\n        &#39; Output: 2 1.75 1.5 1.25 1 0.75 0.5 0.25 0 \n</code></pre><div class=\"TIP\"><h5>Tip</h5><p> A <a href=\"while-end-while-statement\" data-linktype=\"relative-path\">While...End While Statement</a> or <a href=\"do-loop-statement\" data-linktype=\"relative-path\">Do...Loop Statement</a> works well when you don&#39;t know in advance how many times to run the statements in the loop. However, when you expect to run the loop a specific number of times, a <code>For</code>...<code>Next</code> loop is a better choice. You determine the number of iterations when you first enter the loop.  </p>\n</div>\n<h2 id=\"nesting-loops\">Nesting Loops</h2>\n<p> You can nest <code>For</code> loops by putting one loop within another. The following example demonstrates nested <code>For</code>...<code>Next</code> structures that have different step values. The outer loop creates a string for every iteration of the loop. The inner loop decrements a loop counter variable for every iteration of the loop.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStatements#113\">        For indexA = 1 To 3\n            &#39; Create a new StringBuilder, which is used\n            &#39; to efficiently build strings.\n            Dim sb As New System.Text.StringBuilder()\n\n            &#39; Append to the StringBuilder every third number\n            &#39; from 20 to 1 descending.\n            For indexB = 20 To 1 Step -3\n                sb.Append(indexB.ToString)\n                sb.Append(&quot; &quot;)\n            Next indexB\n\n            &#39; Display the line.\n            Debug.WriteLine(sb.ToString)\n        Next indexA\n        &#39; Output:\n        &#39;  20 17 14 11 8 5 2\n        &#39;  20 17 14 11 8 5 2\n        &#39;  20 17 14 11 8 5 2\n</code></pre><p> When nesting loops, each loop must have a unique <code>counter</code> variable.  </p>\n<p> You can also nest different kinds control structures within each other. For more information, see <a href=\"../../programming-guide/language-features/control-flow/nested-control-structures\" data-linktype=\"relative-path\">Nested Control Structures</a>.  </p>\n<h2 id=\"exit-for-and-continue-for\">Exit For and Continue For</h2>\n<p> The <code>Exit For</code> statement immediately exits the <code>For</code>…<code>Next</code> loop and transfers control to the statement that follows the <code>Next</code> statement.  </p>\n<p> The <code>Continue For</code> statement transfers control immediately to the next iteration of the loop. For more information, see <a href=\"continue-statement\" data-linktype=\"relative-path\">Continue Statement</a>.  </p>\n<p> The following example illustrates the use of the <code>Continue For</code> and <code>Exit For</code> statements.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStatements#115\">        For index As Integer = 1 To 100000\n            &#39; If index is between 5 and 7, continue\n            &#39; with the next iteration.\n            If index &gt;= 5 And index &lt;= 8 Then\n                Continue For\n            End If\n\n            &#39; Display the index.\n            Debug.Write(index.ToString &amp; &quot; &quot;)\n\n            &#39; If index is 10, exit the loop.\n            If index = 10 Then\n                Exit For\n            End If\n        Next\n        Debug.WriteLine(&quot;&quot;)\n        &#39; Output: 1 2 3 4 9 10\n</code></pre><p> You can put any number of <code>Exit For</code> statements in a <code>For</code>…<code>Next</code> loop. When used within nested <code>For</code>…<code>Next</code> loops, <code>Exit For</code> exits the innermost loop and transfers control to the next higher level of nesting.  </p>\n<p> <code>Exit For</code> is often used after you evaluate some condition (for example, in an <code>If</code>...<code>Then</code>...<code>Else</code> structure). You might want to use <code>Exit For</code> for the following conditions:  </p>\n<ul>\n<li><p>Continuing to iterate is unnecessary or impossible. An erroneous value or a termination request might create this condition.  </p>\n</li>\n<li><p>A <code>Try</code>...<code>Catch</code>...<code>Finally</code> statement catches an exception. You might use <code>Exit For</code> at the end of the <code>Finally</code> block.  </p>\n</li>\n<li><p>You have an endless loop, which is a loop that could run a large or even infinite number of times. If you detect such a condition, you can use <code>Exit For</code> to escape the loop. For more information, see <a href=\"do-loop-statement\" data-linktype=\"relative-path\">Do...Loop Statement</a>.  </p>\n</li>\n</ul>\n<h2 id=\"technical-implementation\">Technical Implementation</h2>\n<p> When a <code>For</code>...<code>Next</code> loop starts, Visual Basic evaluates <code>start</code>, <code>end</code>, and <code>step</code>. Visual Basic evaluates these values only at this time and then assigns <code>start</code> to <code>counter</code>. Before the statement block runs, Visual Basic compares <code>counter</code> to <code>end</code>. If <code>counter</code> is already larger than the <code>end</code> value (or smaller if <code>step</code> is negative), the <code>For</code> loop ends and control passes to the statement that follows the <code>Next</code> statement. Otherwise, the statement block runs.  </p>\n<p> Each time Visual Basic encounters the <code>Next</code> statement, it increments <code>counter</code> by <code>step</code> and returns to the <code>For</code> statement. Again it compares <code>counter</code> to <code>end</code>, and again it either runs the block or exits the loop, depending on the result. This process continues until <code>counter</code> passes <code>end</code> or an <code>Exit For</code> statement is encountered.  </p>\n<p> The loop doesn&#39;t stop until <code>counter</code> has passed <code>end</code>. If <code>counter</code> is equal to <code>end</code>, the loop continues. The comparison that determines whether to run the block is <code>counter</code> &lt;= <code>end</code> if <code>step</code> is positive and <code>counter</code> &gt;= <code>end</code> if <code>step</code> is negative.  </p>\n<p> If you change the value of <code>counter</code> while inside a loop, your code might be more difficult to read and debug. Changing the value of <code>start</code>, <code>end</code>, or <code>step</code> doesn&#39;t affect the iteration values that were determined when the loop was first entered.  </p>\n<p> If you nest loops, the compiler signals an error if it encounters the <code>Next</code> statement of an outer nesting level before the <code>Next</code> statement of an inner level. However, the compiler can detect this overlapping error only if you specify <code>counter</code> in every <code>Next</code> statement.  </p>\n<h3 id=\"step-argument\">Step Argument</h3>\n<p> The value of <code>step</code> can be either positive or negative. This parameter determines loop processing according to the following table:  </p>\n<table>\n<thead>\n<tr>\n<th><strong>Step value</strong></th>\n<th><strong>Loop executes if</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Positive or zero</td>\n<td><code>counter</code> &lt;= <code>end</code></td>\n</tr>\n<tr>\n<td>Negative</td>\n<td><code>counter</code> &gt;= <code>end</code></td>\n</tr>\n</tbody>\n</table>\n<p> The default value of <code>step</code> is 1.  </p>\n<h3 id=\"a-namebkmkcountera-counter-argument\"><a name=\"BKMK_Counter\"></a> Counter Argument</h3>\n<p> The following table indicates whether <code>counter</code> defines a new local variable that’s scoped to the entire <code>For…Next</code> loop. This determination depends on whether <code>datatype</code> is present and whether <code>counter</code> is already defined.  </p>\n<table>\n<thead>\n<tr>\n<th>Is <code>datatype</code> present?</th>\n<th>Is <code>counter</code> already defined?</th>\n<th>Result (whether <code>counter</code> defines a new local variable that’s scoped to the entire <code>For...Next</code> loop)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>No</td>\n<td>Yes</td>\n<td>No, because <code>counter</code> is already defined. If the scope of <code>counter</code> isn&#39;t local to the procedure, a compile-time warning occurs.</td>\n</tr>\n<tr>\n<td>No</td>\n<td>No</td>\n<td>Yes. The data type is inferred from the <code>start</code>, <code>end</code>, and <code>step</code> expressions. For information about type inference, see <a href=\"option-infer-statement\" data-linktype=\"relative-path\">Option Infer Statement</a> and <a href=\"../../programming-guide/language-features/variables/local-type-inference\" data-linktype=\"relative-path\">Local Type Inference</a>.</td>\n</tr>\n<tr>\n<td>Yes</td>\n<td>Yes</td>\n<td>Yes, but only if the existing <code>counter</code> variable is defined outside the procedure. That variable remains separate. If the scope of the existing <code>counter</code> variable is local to the procedure, a compile-time error occurs.</td>\n</tr>\n<tr>\n<td>Yes</td>\n<td>No</td>\n<td>Yes.</td>\n</tr>\n</tbody>\n</table>\n<p> The data type of <code>counter</code> determines the type of the iteration, which must be one of the following types:  </p>\n<ul>\n<li><p>A <code>Byte</code>, <code>SByte</code>, <code>UShort</code>, <code>Short</code>, <code>UInteger</code>, <code>Integer</code>, <code>ULong</code>, <code>Long</code>, <code>Decimal</code>, <code>Single</code>, or <code>Double</code>.  </p>\n</li>\n<li><p>An enumeration that you declare by using an <a href=\"enum-statement\" data-linktype=\"relative-path\">Enum Statement</a>.  </p>\n</li>\n<li><p>An <code>Object</code>.  </p>\n</li>\n<li><p>A type <code>T</code> that has the following operators, where <code>B</code> is a type that can be used in a <code>Boolean</code> expression.  </p>\n<p> <code>Public Shared Operator &gt;= (op1 As T, op2 As T) As B</code>  </p>\n<p> <code>Public Shared Operator &lt;= (op1 As T, op2 As T) As B</code>  </p>\n<p> <code>Public Shared Operator - (op1 As T, op2 As T) As T</code>  </p>\n<p> <code>Public Shared Operator + (op1 As T, op2 As T) As T</code>  </p>\n<p>You can optionally specify the <code>counter</code> variable in the <code>Next</code> statement. This syntax improves the readability of your program, especially if you have nested <code>For</code> loops. You must specify the variable that appears in the corresponding <code>For</code> statement.  </p>\n<p>The <code>start</code>, <code>end</code>, and <code>step</code> expressions can evaluate to any data type that widens to the type of <code>counter</code>. If you use a user-defined type for <code>counter</code>, you might have to define the <code>CType</code> conversion operator to convert the types of <code>start</code>, <code>end</code>, or <code>step</code> to the type of <code>counter</code>.  </p>\n</li>\n</ul>\n<h2 id=\"example\">Example</h2>\n<p> The following example removes all elements from a generic list. Instead of a <a href=\"for-each-next-statement\" data-linktype=\"relative-path\">For Each...Next Statement</a>, the example shows a <code>For</code>...<code>Next</code> statement that iterates in descending order. The example uses this technique because the <code>removeAt</code> method causes elements after the removed element to have a lower index value.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStatements#114\">        Dim lst As New List(Of Integer) From {10, 20, 30, 40}\n\n        For index As Integer = lst.Count - 1 To 0 Step -1\n            lst.RemoveAt(index)\n        Next\n\n        Debug.WriteLine(lst.Count.ToString)\n        &#39; Output: 0\n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> The following example iterates through an enumeration that&#39;s declared by using an <a href=\"enum-statement\" data-linktype=\"relative-path\">Enum Statement</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStatements#116\">    Public Enum Mammals\n        Buffalo\n        Gazelle\n        Mongoose\n        Rhinoceros\n        Whale\n    End Enum\n\n\n    Public Sub ListSomeMammals()\n        For mammal As Mammals = Mammals.Gazelle To Mammals.Rhinoceros\n            Debug.Write(mammal.ToString &amp; &quot; &quot;)\n        Next\n        Debug.WriteLine(&quot;&quot;)\n        &#39; Output: Gazelle Mongoose Rhinoceros\n    End Sub\n</code></pre><h2 id=\"example-2\">Example</h2>\n<p> In the following example, the statement parameters use a class that has operator overloads for the <code>+</code>, <code>-</code>, <code>&gt;=</code>, and <code>&lt;=</code> operators.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrStatements#117\">    Private Class Distance\n        Public Property Number() As Double\n\n        Public Sub New(ByVal number As Double)\n            Me.Number = number\n        End Sub\n\n        &#39; Define operator overloads to support For...Next statements.\n        Public Shared Operator +(ByVal op1 As Distance, ByVal op2 As Distance) As Distance\n            Return New Distance(op1.Number + op2.Number)\n        End Operator\n\n        Public Shared Operator -(ByVal op1 As Distance, ByVal op2 As Distance) As Distance\n            Return New Distance(op1.Number - op2.Number)\n        End Operator\n\n        Public Shared Operator &gt;=(ByVal op1 As Distance, ByVal op2 As Distance) As Boolean\n            Return (op1.Number &gt;= op2.Number)\n        End Operator\n\n        Public Shared Operator &lt;=(ByVal op1 As Distance, ByVal op2 As Distance) As Boolean\n            Return (op1.Number &lt;= op2.Number)\n        End Operator\n    End Class\n\n\n    Public Sub ListDistances()\n        Dim distFrom As New Distance(10)\n        Dim distTo As New Distance(25)\n        Dim distStep As New Distance(4)\n\n        For dist As Distance = distFrom To distTo Step distStep\n            Debug.Write(dist.Number.ToString &amp; &quot; &quot;)\n        Next\n        Debug.WriteLine(&quot;&quot;)\n\n        &#39; Output: 10 14 18 22 \n    End Sub\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../api/system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a><br> <a href=\"../../programming-guide/language-features/control-flow/loop-structures\" data-linktype=\"relative-path\">Loop Structures</a><br> <a href=\"while-end-while-statement\" data-linktype=\"relative-path\">While...End While Statement</a><br> <a href=\"do-loop-statement\" data-linktype=\"relative-path\">Do...Loop Statement</a><br> <a href=\"../../programming-guide/language-features/control-flow/nested-control-structures\" data-linktype=\"relative-path\">Nested Control Structures</a><br> <a href=\"exit-statement\" data-linktype=\"relative-path\">Exit Statement</a><br> <a href=\"http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b\" data-linktype=\"external\">Collections</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"f5fc0d51-67ce-4c36-9f09-31c9a91c94e9\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"64\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/statements/for-next-statement.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/statements/for-next-statement.md\">\r\n<meta name=\"document_id\" content=\"2dc73b54-db0f-9c7f-b495-ad741984edba\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"For...Next Statement (Visual Basic) | Microsoft Docs","ms.suite":"","ms.assetid":"f5fc0d51-67ce-4c36-9f09-31c9a91c94e9","f1_keywords":["vb.Step","vb.Next","vb.To","vb.for"],"translation.priority.ht":["de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","ru-ru","zh-cn","zh-tw"],"caps.latest.revision":64,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["infinite loops","Next keyword, For...Next statements","For keyword [Visual Basic], For...Next statements","Step keyword, For...Next statements","operator overloading, For...Next statement","To keyword, For...Next statements","endless loops","loops, endless","instructions, repeating","Next statement, For...Next","For...Next statements","loop structures, For...Next","loops, infinite","Exit statement, For...Next statements","For statement"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/statements/for-next-statement.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/statements/for-next-statement.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/language-reference/statements/for-next-statement.md","document_id":"2dc73b54-db0f-9c7f-b495-ad741984edba","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/language-reference/statements/for-next-statement","toc_asset_id":"articles/toc.json","toc_rel":"../../../toc.json","_op_ogTitle":"For...Next Statement (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":1802,"_op_rawTitle":"<h1 id=\"fornext-statement-visual-basic\" sourcefile=\"docs/visual-basic/language-reference/statements/for-next-statement.md\" sourcestartlinenumber=\"56\" sourceendlinenumber=\"56\">For...Next Statement (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/language-reference/statements/for-next-statement","fileRelativePath":"articles/visual-basic/language-reference/statements/for-next-statement.html"},"themesRelativePathToOutputRoot":"_themes/"}