{"content":"<div><div class=\"content\">\n<p>The <code>Async</code> modifier indicates that the method or <a href=\"../../programming-guide/language-features/procedures/lambda-expressions\" data-linktype=\"relative-path\">lambda expression</a> that it modifies is asynchronous. Such methods are referred to as <em>async methods</em>.  </p>\n<p> An async method provides a convenient way to do potentially long-running work without blocking the caller&#39;s thread. The caller of an async method can resume its work without waiting for the async method to finish.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>Async</code> and <code>Await</code> keywords were introduced in Visual Studio 2012. For an introduction to async programming, see <a href=\"../../programming-guide/concepts/async/index\" data-linktype=\"relative-path\">Asynchronous Programming with Async and Await</a>.  </p>\n</div>\n<p> The following example shows the structure of an async method. By convention, async method names end in &quot;Async.&quot;  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">\nPublic Async Function ExampleMethodAsync() As Task(Of Integer)  \n    &#39; . . .  \n\n    &#39; At the Await expression, execution in this method is suspended and,  \n    &#39; if AwaitedProcessAsync has not already finished, control returns  \n    &#39; to the caller of ExampleMethodAsync. When the awaited task is   \n    &#39; completed, this method resumes execution.   \n    Dim exampleInt As Integer = Await AwaitedProcessAsync()  \n\n    &#39; . . .  \n\n    &#39; The return statement completes the task. Any method that is   \n    &#39; awaiting ExampleMethodAsync can now get the integer result.  \n    Return exampleInt  \nEnd Function  \n</code></pre><p> Typically, a method modified by the <code>Async</code> keyword contains at least one <a href=\"async\" data-linktype=\"relative-path\">Await</a> expression or statement. The method runs synchronously until it reaches the first <code>Await</code>, at which point it suspends until the awaited task completes. In the meantime, control is returned to the caller of the method. If the method doesn’t contain an <code>Await</code> expression or statement, the method isn’t suspended and executes as a synchronous method does. A compiler warning alerts you to any async methods that don&#39;t contain <code>Await</code> because that situation might indicate an error. For more information, see the <a href=\"../error-messages/because-this-call-is-not-awaited-the-current-method-continues-to-run\" data-linktype=\"relative-path\">compiler error</a>.  </p>\n<p> The <code>Async</code> keyword is an unreserved keyword. It is a keyword when it modifies a method or a lambda expression. In all other contexts, it is interpreted as an identifier.  </p>\n<h2 id=\"return-types\">Return Types</h2>\n<p> An async method is either a <a href=\"../../programming-guide/language-features/procedures/sub-procedures\" data-linktype=\"relative-path\">Sub</a> procedure, or a <a href=\"../../programming-guide/language-features/procedures/function-procedures\" data-linktype=\"relative-path\">Function</a> procedure that has a return type of <a class=\"xref\" href=\"../../../../api/system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> or <a class=\"xref\" href=\"../../../../api/system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a>. The method cannot declare any <a href=\"byref\" data-linktype=\"relative-path\">ByRef</a> parameters.  </p>\n<p> You specify <code>Task(Of TResult)</code> for the return type of an async method if the <a href=\"../statements/return-statement\" data-linktype=\"relative-path\">Return</a> statement of the method has an operand of type TResult. You use <code>Task</code> if no meaningful value is returned when the method is completed. That is, a call to the method returns a <code>Task</code>, but when the <code>Task</code> is completed, any <code>Await</code> statement that&#39;s awaiting the <code>Task</code> doesn’t produce a result value.  </p>\n<p> Async subroutines are used primarily to define event handlers where a <code>Sub</code> procedure is required. The caller of an async subroutine can&#39;t await it and can&#39;t catch exceptions that the method throws.  </p>\n<p> For more information and examples, see <a href=\"../../programming-guide/concepts/async/async-return-types\" data-linktype=\"relative-path\">Async Return Types</a>.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following examples show an async event handler, an async lambda expression, and an async method. For a full example that uses these elements, see <a href=\"../../programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await\" data-linktype=\"relative-path\">Walkthrough: Accessing the Web by Using Async and Await</a>. You can download the walkthrough code from <a href=\"http://go.microsoft.com/fwlink/?LinkId=255191\" data-linktype=\"external\">Developer Code Samples</a>.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">\n&#39; An event handler must be a Sub procedure.  \nAsync Sub button1_Click(sender As Object, e As RoutedEventArgs) Handles button1.Click  \n    textBox1.Clear()  \n    &#39; SumPageSizesAsync is a method that returns a Task.  \n    Await SumPageSizesAsync()  \n    textBox1.Text = vbCrLf &amp; &quot;Control returned to button1_Click.&quot;  \nEnd Sub  \n\n&#39; The following async lambda expression creates an equivalent anonymous  \n&#39; event handler.  \nAddHandler button1.Click, Async Sub(sender, e)  \n                              textBox1.Clear()  \n                              &#39; SumPageSizesAsync is a method that returns a Task.  \n                              Await SumPageSizesAsync()  \n                              textBox1.Text = vbCrLf &amp; &quot;Control returned to button1_Click.&quot;  \n                          End Sub  \n\n&#39; The following async method returns a Task(Of T).  \n&#39; A typical call awaits the Byte array result:  \n&#39;      Dim result As Byte() = Await GetURLContents(&quot;http://msdn.com&quot;)  \nPrivate Async Function GetURLContentsAsync(url As String) As Task(Of Byte())  \n\n    &#39; The downloaded resource ends up in the variable named content.  \n    Dim content = New MemoryStream()  \n\n    &#39; Initialize an HttpWebRequest for the current URL.  \n    Dim webReq = CType(WebRequest.Create(url), HttpWebRequest)  \n\n    &#39; Send the request to the Internet resource and wait for  \n    &#39; the response.  \n    Using response As WebResponse = Await webReq.GetResponseAsync()  \n        &#39; Get the data stream that is associated with the specified URL.  \n        Using responseStream As Stream = response.GetResponseStream()  \n            &#39; Read the bytes in responseStream and copy them to content.    \n            &#39; CopyToAsync returns a Task, not a Task&lt;T&gt;.  \n            Await responseStream.CopyToAsync(content)  \n        End Using  \n    End Using  \n\n    &#39; Return the result as a byte array.  \n    Return content.ToArray()  \nEnd Function  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../api/system.runtime.compilerservices.asyncstatemachineattribute\" data-linktype=\"relative-path\">AsyncStateMachineAttribute</a><br> <a href=\"../operators/await-operator\" data-linktype=\"relative-path\">Await Operator</a><br> <a href=\"../../programming-guide/concepts/async/index\" data-linktype=\"relative-path\">Asynchronous Programming with Async and Await</a><br> <a href=\"../../programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await\" data-linktype=\"relative-path\">Walkthrough: Accessing the Web by Using Async and Await</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"1be8b4b5-9689-41b5-bd33-b906bfd53bc5\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"37\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/0a5d76c154aeb9b749c9c3fc5ad0962e93754a62/docs/visual-basic/language-reference/modifiers/async.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/modifiers/async.md\">\r\n<meta name=\"document_id\" content=\"8c67cdf3-b014-c725-2253-3c41e0a00801\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Async (Visual Basic) | Microsoft Docs","ms.suite":"","ms.assetid":"1be8b4b5-9689-41b5-bd33-b906bfd53bc5","f1_keywords":["vb.Async"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":37,"ms.topic":"article","helpviewer_keywords":["Async [Visual Basic]","Async keyword [Visual Basic]"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Reorganizing the VB TOC (#1348)","commit_sha":"0a5d76c154aeb9b749c9c3fc5ad0962e93754a62","commit_date":"2017-02-14 10:22:48 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/0a5d76c154aeb9b749c9c3fc5ad0962e93754a62/docs/visual-basic/language-reference/modifiers/async.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/modifiers/async.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/language-reference/modifiers/async.md","document_id":"8c67cdf3-b014-c725-2253-3c41e0a00801","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/language-reference/modifiers/async","toc_asset_id":"articles/toc.json","toc_rel":"../../../toc.json","_op_ogTitle":"Async (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":726,"_op_rawTitle":"<h1 id=\"async-visual-basic\" sourcefile=\"docs/visual-basic/language-reference/modifiers/async.md\" sourcestartlinenumber=\"37\" sourceendlinenumber=\"37\">Async (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/language-reference/modifiers/async","fileRelativePath":"articles/visual-basic/language-reference/modifiers/async.html"},"themesRelativePathToOutputRoot":"_themes/"}