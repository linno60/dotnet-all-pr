{"content":"<div><div class=\"content\">\n<p>Bypasses a specified number of elements in a collection and then returns the remaining elements.  </p>\n<h2 id=\"syntax\">Syntax</h2>\n<pre class=\"loading\"><code>Skip count  \n</code></pre><h2 id=\"parts\">Parts</h2>\n<p> <code>count</code><br> Required. A value or an expression that evaluates to the number of elements of the sequence to skip.  </p>\n<h2 id=\"remarks\">Remarks</h2>\n<p> The <code>Skip</code> clause causes a query to bypass elements at the beginning of a results list and return the remaining elements. The number of elements to skip is identified by the <code>count</code> parameter.  </p>\n<p> You can use the <code>Skip</code> clause with the <code>Take</code> clause to return a range of data from any segment of a query. To do this, pass the index of the first element of the range to the <code>Skip</code> clause and the size of the range to the <code>Take</code> clause.  </p>\n<p> When you use the <code>Skip</code> clause in a query, you may also need to ensure that the results are returned in an order that will enable the <code>Skip</code> clause to bypass the intended results. For more information about ordering query results, see <a href=\"order-by-clause\" data-linktype=\"relative-path\">Order By Clause</a>.  </p>\n<p> You can use the <code>SkipWhile</code> clause to specify that only certain elements are ignored, depending on a supplied condition.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following code example uses the <code>Skip</code> clause together with the <code>Take</code> clause to return data from a query in pages. The <code>GetCustomers</code> function uses the <code>Skip</code> clause to bypass the customers in the list until the supplied starting index value, and uses the <code>Take</code> clause to return a page of customers starting from that index value.  </p>\n<pre><code class=\"lang-vb\" name=\"VbSimpleQuerySamples#1\">  Public Sub PagingSample()\n    Dim pageNumber As Integer = 0\n    Dim pageSize As Integer = 10\n\n    Dim customersPage = GetCustomers(pageNumber * pageSize, pageSize)\n\n    Do While customersPage IsNot Nothing\n      Console.WriteLine(vbCrLf &amp; &quot;Page: &quot; &amp; pageNumber + 1 &amp; vbCrLf)\n\n      For Each cust In customersPage\n        Console.WriteLine(cust.CustomerID &amp; &quot;, &quot; &amp; cust.CompanyName)\n      Next\n\n      Console.WriteLine(vbCrLf)\n\n      pageNumber += 1\n      customersPage = GetCustomers(pageNumber * pageSize, pageSize)\n    Loop\n  End Sub\n\n  Public Function GetCustomers(ByVal startIndex As Integer,\n                               ByVal pageSize As Integer) As List(Of Customer)\n\n    Dim customers = GetCustomerList()\n\n    Dim returnCustomers = From cust In customers\n                          Skip startIndex Take pageSize\n\n    If returnCustomers.Count = 0 Then Return Nothing\n\n    Return returnCustomers\n  End Function\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../../programming-guide/language-features/linq/introduction-to-linq\" data-linktype=\"relative-path\">Introduction to LINQ in Visual Basic</a><br> <a href=\"queries\" data-linktype=\"relative-path\">Queries</a><br> <a href=\"select-clause\" data-linktype=\"relative-path\">Select Clause</a><br> <a href=\"from-clause\" data-linktype=\"relative-path\">From Clause</a><br> <a href=\"order-by-clause\" data-linktype=\"relative-path\">Order By Clause</a><br> <a href=\"skip-while-clause\" data-linktype=\"relative-path\">Skip While Clause</a><br> <a href=\"take-clause\" data-linktype=\"relative-path\">Take Clause</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-all/api/toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"f00eb172-3907-4c43-9745-d8546ab86234\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"17\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/queries/skip-clause.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/queries/skip-clause.md\">\r\n<meta name=\"document_id\" content=\"ced03034-5b54-817b-cf0d-8ad5e515793e\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Skip Clause (Visual Basic) | Microsoft Docs","ms.suite":"","ms.assetid":"f00eb172-3907-4c43-9745-d8546ab86234","f1_keywords":["vb.QuerySkip"],"translation.priority.ht":["de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","ru-ru","zh-cn","zh-tw"],"caps.latest.revision":17,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["queries [Visual Basic], Skip","Skip statement","Skip clause"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/queries/skip-clause.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/queries/skip-clause.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/language-reference/queries/skip-clause.md","document_id":"ced03034-5b54-817b-cf0d-8ad5e515793e","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/language-reference/queries/skip-clause","toc_asset_id":"articles/toc.json","toc_rel":"../../../toc.json","_op_ogTitle":"Skip Clause (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":365,"_op_rawTitle":"<h1 id=\"skip-clause-visual-basic\" sourcefile=\"docs/visual-basic/language-reference/queries/skip-clause.md\" sourcestartlinenumber=\"41\" sourceendlinenumber=\"41\">Skip Clause (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/language-reference/queries/skip-clause","fileRelativePath":"articles/visual-basic/language-reference/queries/skip-clause.html"},"themesRelativePathToOutputRoot":"_themes/"}