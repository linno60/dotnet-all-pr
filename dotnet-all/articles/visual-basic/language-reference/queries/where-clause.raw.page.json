{"content":"<div><div class=\"content\">\n<p>Specifies the filtering condition for a query.  </p>\n<h2 id=\"syntax\">Syntax</h2>\n<pre class=\"loading\"><code>Where condition  \n</code></pre><h2 id=\"parts\">Parts</h2>\n<p> <code>condition</code><br> Required. An expression that determines whether the values for the current item in the collection are included in the output collection. The expression must evaluate to a <code>Boolean</code> value or the equivalent of a <code>Boolean</code> value. If the condition evaluates to <code>True</code>, the element is included in the query result; otherwise, the element is excluded from the query result.  </p>\n<h2 id=\"remarks\">Remarks</h2>\n<p> The <code>Where</code> clause enables you to filter query data by selecting only elements that meet certain criteria. Elements whose values cause the <code>Where</code> clause to evaluate to <code>True</code> are included in the query result; other elements are excluded. The expression that is used in a <code>Where</code> clause must evaluate to a <code>Boolean</code> or the equivalent of a <code>Boolean</code>, such as an Integer that evaluates to <code>False</code> when its value is zero. You can combine multiple expressions in a <code>Where</code> clause by using logical operators such as <code>And</code>, <code>Or</code>, <code>AndAlso</code>, <code>OrElse</code>, <code>Is</code>, and <code>IsNot</code>.  </p>\n<p> By default, query expressions are not evaluated until they are accessedâ€”for example, when they are data-bound or iterated through in a <code>For</code> loop. As a result, the <code>Where</code> clause is not evaluated until the query is accessed. If you have values external to the query that are used in the <code>Where</code> clause, ensure that the appropriate value is used in the <code>Where</code> clause at the time the query is executed. For more information about query execution, see <a href=\"../../programming-guide/concepts/linq/writing-your-first-linq-query\" data-linktype=\"relative-path\">Writing Your First LINQ Query</a>.  </p>\n<p> You can call functions within a <code>Where</code> clause to perform a calculation or operation on a value from the current element in the collection. Calling a function in a <code>Where</code> clause can cause the query to be executed immediately when it is defined instead of when it is accessed. For more information about query execution, see <a href=\"../../programming-guide/concepts/linq/writing-your-first-linq-query\" data-linktype=\"relative-path\">Writing Your First LINQ Query</a>.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following query expression uses a <code>From</code> clause to declare a range variable <code>cust</code> for each <code>Customer</code> object in the <code>customers</code> collection. The <code>Where</code> clause uses the range variable to restrict the output to customers from the specified region. The <code>For Each</code> loop displays the company name for each customer in the query result.  </p>\n<pre><code class=\"lang-vb\" name=\"VbSimpleQuerySamples#23\">  Sub DisplayCustomersForRegion(ByVal customers As List(Of Customer),\n                                ByVal region As String)\n\n    Dim customersForRegion = From cust In customers\n                             Where cust.Region = region\n\n    For Each cust In customersForRegion\n      Console.WriteLine(cust.CompanyName)\n    Next\n  End Sub\n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> The following example uses <code>And</code> and <code>Or</code> logical operators in the <code>Where</code> clause.  </p>\n<pre><code class=\"lang-vb\" name=\"VbSimpleQuerySamples#31\">    Private Sub DisplayElements()\n        Dim elements As List(Of Element) = BuildList()\n\n        &#39; Get a list of elements that have an atomic number from 12 to 14,\n        &#39; or that have a name that ends in &quot;r&quot;.\n        Dim subset = From theElement In elements\n            Where (theElement.AtomicNumber &gt;= 12 And theElement.AtomicNumber &lt; 15) _\n            Or theElement.Name.EndsWith(&quot;r&quot;)\n            Order By theElement.Name\n\n        For Each theElement In subset\n            Console.WriteLine(theElement.Name &amp; &quot; &quot; &amp; theElement.AtomicNumber)\n        Next\n\n        &#39; Output:\n        &#39;  Aluminum 13\n        &#39;  Magnesium 12\n        &#39;  Silicon 14\n        &#39;  Sulfur 16\n    End Sub\n\n    Private Function BuildList() As List(Of Element)\n        Return New List(Of Element) From\n            {\n                {New Element With {.Name = &quot;Sodium&quot;, .AtomicNumber = 11}},\n                {New Element With {.Name = &quot;Magnesium&quot;, .AtomicNumber = 12}},\n                {New Element With {.Name = &quot;Aluminum&quot;, .AtomicNumber = 13}},\n                {New Element With {.Name = &quot;Silicon&quot;, .AtomicNumber = 14}},\n                {New Element With {.Name = &quot;Phosphorous&quot;, .AtomicNumber = 15}},\n                {New Element With {.Name = &quot;Sulfur&quot;, .AtomicNumber = 16}}\n            }\n    End Function\n\n    Public Class Element\n        Public Property Name As String\n        Public Property AtomicNumber As Integer\n    End Class\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../../programming-guide/language-features/linq/introduction-to-linq\" data-linktype=\"relative-path\">Introduction to LINQ in Visual Basic</a><br> <a href=\"queries\" data-linktype=\"relative-path\">Queries</a><br> <a href=\"from-clause\" data-linktype=\"relative-path\">From Clause</a><br> <a href=\"select-clause\" data-linktype=\"relative-path\">Select Clause</a><br> <a href=\"../statements/for-each-next-statement\" data-linktype=\"relative-path\">For Each...Next Statement</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"48b5c2c5-3181-429c-8545-894296798c89\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"18\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/queries/where-clause.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/queries/where-clause.md\">\r\n<meta name=\"document_id\" content=\"c61af186-7cca-271e-d0e3-ebb0c98d39b9\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Where Clause (Visual Basic) | Microsoft Docs","ms.suite":"","ms.assetid":"48b5c2c5-3181-429c-8545-894296798c89","f1_keywords":["vb.QueryWhere"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":18,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["Where statement","queries [Visual Basic], Where","Where clause"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/queries/where-clause.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/queries/where-clause.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/language-reference/queries/where-clause.md","document_id":"c61af186-7cca-271e-d0e3-ebb0c98d39b9","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/language-reference/queries/where-clause","toc_asset_id":"articles/toc.json","toc_rel":"../../../toc.json","_op_ogTitle":"Where Clause (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":591,"_op_rawTitle":"<h1 id=\"where-clause-visual-basic\" sourcefile=\"docs/visual-basic/language-reference/queries/where-clause.md\" sourcestartlinenumber=\"40\" sourceendlinenumber=\"40\">Where Clause (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/language-reference/queries/where-clause","fileRelativePath":"articles/visual-basic/language-reference/queries/where-clause.html"},"themesRelativePathToOutputRoot":"_themes/"}