{"content":"<div><div class=\"content\">\n<p>The following are the comparison operators defined in Visual Basic.  </p>\n<p> <code>&lt;</code> operator  </p>\n<p> <code>&lt;=</code> operator  </p>\n<p> <code>&gt;</code> operator  </p>\n<p> <code>&gt;=</code> operator  </p>\n<p> <code>=</code> operator  </p>\n<p> <code>&lt;&gt;</code> operator  </p>\n<p> <a href=\"is-operator\" data-linktype=\"relative-path\">Is Operator</a>  </p>\n<p> <a href=\"isnot-operator\" data-linktype=\"relative-path\">IsNot Operator</a>  </p>\n<p> <a href=\"like-operator\" data-linktype=\"relative-path\">Like Operator</a>  </p>\n<p> These operators compare two expressions to determine whether or not they are equal, and if not, how they differ. <code>Is</code>, <code>IsNot</code>, and <code>Like</code> are discussed in detail on separate Help pages. The relational comparison operators are discussed in detail on this page.  </p>\n<h2 id=\"syntax\">Syntax</h2>\n<pre class=\"loading\"><code>\n      result = expression1 comparisonoperator expression2  \nresult = object1 [Is | IsNot] object2  \nresult = string Like pattern  \n</code></pre><h2 id=\"parts\">Parts</h2>\n<p> <code>result</code><br> Required. A <code>Boolean</code> value representing the result of the comparison.  </p>\n<p> <code>expression</code><br> Required. Any expression.  </p>\n<p> <code>comparisonoperator</code><br> Required. Any relational comparison operator.  </p>\n<p> <code>object1</code>, <code>object2</code><br> Required. Any reference object names.  </p>\n<p> <code>string</code><br> Required. Any <code>String</code> expression.  </p>\n<p> <code>pattern</code><br> Required. Any <code>String</code> expression or range of characters.  </p>\n<h2 id=\"remarks\">Remarks</h2>\n<p> The following table contains a list of the relational comparison operators and the conditions that determine whether <code>result</code> is <code>True</code> or <code>False</code>.  </p>\n<table>\n<thead>\n<tr>\n<th>Operator</th>\n<th><code>True</code> if</th>\n<th><code>False</code> if</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&lt;</code> (Less than)</td>\n<td><code>expression1</code> &lt; <code>expression2</code></td>\n<td><code>expression1</code> &gt;= <code>expression2</code></td>\n</tr>\n<tr>\n<td><code>&lt;=</code> (Less than or equal to)</td>\n<td><code>expression1</code> &lt;= <code>expression2</code></td>\n<td><code>expression1</code> &gt; <code>expression2</code></td>\n</tr>\n<tr>\n<td><code>&gt;</code> (Greater than)</td>\n<td><code>expression1</code> &gt; <code>expression2</code></td>\n<td><code>expression1</code> &lt;= <code>expression2</code></td>\n</tr>\n<tr>\n<td><code>&gt;=</code> (Greater than or equal to)</td>\n<td><code>expression1</code> &gt;= <code>expression2</code></td>\n<td><code>expression1</code> &lt; <code>expression2</code></td>\n</tr>\n<tr>\n<td><code>=</code> (Equal to)</td>\n<td><code>expression1</code> = <code>expression2</code></td>\n<td><code>expression1</code> &lt;&gt; <code>expression2</code></td>\n</tr>\n<tr>\n<td><code>&lt;&gt;</code> (Not equal to)</td>\n<td><code>expression1</code> &lt;&gt; <code>expression2</code></td>\n<td><code>expression1</code> = <code>expression2</code></td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a href=\"assignment-operator\" data-linktype=\"relative-path\">= Operator</a> is also used as an assignment operator.  </p>\n</div>\n<p> The <code>Is</code> operator, the <code>IsNot</code> operator, and the <code>Like</code> operator have specific comparison functionalities that differ from the operators in the preceding table.  </p>\n<h2 id=\"comparing-numbers\">Comparing Numbers</h2>\n<p> When you compare an expression of type <code>Single</code> to one of type <code>Double</code>, the <code>Single</code> expression is converted to <code>Double</code>. This behavior is opposite to the behavior found in Visual Basic 6.  </p>\n<p> Similarly, when you compare an expression of type <code>Decimal</code> to an expression of type <code>Single</code> or <code>Double</code>, the <code>Decimal</code> expression is converted to <code>Single</code> or <code>Double</code>. For <code>Decimal</code> expressions, any fractional value less than 1E-28 might be lost. Such fractional value loss may cause two values to compare as equal when they are not. For this reason, you should take care when using equality (<code>=</code>) to compare two floating-point variables. It is safer to test whether the absolute value of the difference between the two numbers is less than a small acceptable tolerance.  </p>\n<h3 id=\"floating-point-imprecision\">Floating-point Imprecision</h3>\n<p> When you work with floating-point numbers, keep in mind that they do not always have a precise representation in memory. This could lead to unexpected results from certain operations, such as value comparison and the <a href=\"mod-operator\" data-linktype=\"relative-path\">Mod Operator</a>. For more information, see <a href=\"../../programming-guide/language-features/data-types/troubleshooting-data-types\" data-linktype=\"relative-path\">Troubleshooting Data Types</a>.  </p>\n<h2 id=\"comparing-strings\">Comparing Strings</h2>\n<p> When you compare strings, the string expressions are evaluated based on their alphabetical sort order, which depends on the <code>Option Compare</code> setting.  </p>\n<p> <code>Option Compare Binary</code> bases string comparisons on a sort order derived from the internal binary representations of the characters. The sort order is determined by the code page. The following example shows a typical binary sort order.  </p>\n<p> <code>A &lt; B &lt; E &lt; Z &lt; a &lt; b &lt; e &lt; z &lt; À &lt; Ê &lt; Ø &lt; à &lt; ê &lt; ø</code>  </p>\n<p> <code>Option Compare Text</code> bases string comparisons on a case-insensitive, textual sort order determined by your application&#39;s locale. When you set <code>Option Compare Text</code> and sort the characters in the preceding example, the following text sort order applies:  </p>\n<p> <code>(A=a) &lt; (À= à) &lt; (B=b) &lt; (E=e) &lt; (Ê= ê) &lt; (Ø = ø) &lt; (Z=z)</code>  </p>\n<h3 id=\"locale-dependence\">Locale Dependence</h3>\n<p> When you set <code>Option Compare Text</code>, the result of a string comparison can depend on the locale in which the application is running. Two characters might compare as equal in one locale but not in another. If you are using a string comparison to make important decisions, such as whether to accept an attempt to log on, you should be alert to locale sensitivity. Consider either setting <code>Option Compare Binary</code> or calling the <a class=\"xref\" href=\"../../../../api/microsoft.visualbasic.strings#Microsoft_VisualBasic_Strings_StrComp_\" data-linktype=\"relative-path\">StrComp</a>, which takes the locale into account.  </p>\n<h2 id=\"typeless-programming-with-relational-comparison-operators\">Typeless Programming with Relational Comparison Operators</h2>\n<p> The use of relational comparison operators with <code>Object</code> expressions is not allowed under <code>Option Strict On</code>. When <code>Option Strict</code> is <code>Off</code>, and either <code>expression1</code> or <code>expression2</code> is an <code>Object</code> expression, the run-time types determine how they are compared. The following table shows how the expressions are compared and the result from the comparison, depending on the runtime type of the operands.  </p>\n<table>\n<thead>\n<tr>\n<th>If operands are</th>\n<th>Comparison is</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Both <code>String</code></td>\n<td>Sort comparison based on string sorting characteristics.</td>\n</tr>\n<tr>\n<td>Both numeric</td>\n<td>Objects converted to <code>Double</code>, numeric comparison.</td>\n</tr>\n<tr>\n<td>One numeric and one <code>String</code></td>\n<td>The <code>String</code> is converted to a <code>Double</code> and numeric comparison is performed. If the <code>String</code> cannot be converted to <code>Double</code>, an <a class=\"xref\" href=\"../../../../api/system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a> is thrown.</td>\n</tr>\n<tr>\n<td>Either or both are reference types other than <code>String</code></td>\n<td>An <a class=\"xref\" href=\"../../../../api/system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a> is thrown.</td>\n</tr>\n</tbody>\n</table>\n<p> Numeric comparisons treat <code>Nothing</code> as 0. String comparisons treat <code>Nothing</code> as <code>&quot;&quot;</code> (an empty string).  </p>\n<h2 id=\"overloading\">Overloading</h2>\n<p> The relational comparison operators (<code>&lt;</code>. <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>, <code>=</code>, <code>&lt;&gt;</code>) can be <em>overloaded</em>, which means that a class or structure can redefine their behavior when an operand has the type of that class or structure. If your code uses any of these operators on such a class or structure, be sure you understand the redefined behavior. For more information, see <a href=\"../../programming-guide/language-features/procedures/operator-procedures\" data-linktype=\"relative-path\">Operator Procedures</a>.  </p>\n<p> Notice that the <a href=\"assignment-operator\" data-linktype=\"relative-path\">= Operator</a> can be overloaded only as a relational comparison operator, not as an assignment operator.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following example shows various uses of relational comparison operators, which you use to compare expressions. Relational comparison operators return a <code>Boolean</code> result that represents whether or not the stated expression evaluates to <code>True</code>. When you apply the <code>&gt;</code> and <code>&lt;</code> operators to strings, the comparison is made using the normal alphabetical sorting order of the strings. This order can be dependent on your locale setting. Whether the sort is case-sensitive or not depends on the <a href=\"../statements/option-compare-statement\" data-linktype=\"relative-path\">Option Compare</a> setting.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrOperators#1\">Dim x As testClass\nDim y As New testClass()\nx = y\nIf x Is y Then\n    &#39; Insert code to run if x and y point to the same instance.\nEnd If\n</code></pre><p> In the preceding example, the first comparison returns <code>False</code> and the remaining comparisons return <code>True</code>.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../api/system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a><br> <a href=\"assignment-operator\" data-linktype=\"relative-path\">= Operator</a><br> <a href=\"operator-precedence\" data-linktype=\"relative-path\">Operator Precedence in Visual Basic</a><br> <a href=\"operators-listed-by-functionality\" data-linktype=\"relative-path\">Operators Listed by Functionality</a><br> <a href=\"../../programming-guide/language-features/data-types/troubleshooting-data-types\" data-linktype=\"relative-path\">Troubleshooting Data Types</a><br> <a href=\"../../programming-guide/language-features/operators-and-expressions/comparison-operators\" data-linktype=\"relative-path\">Comparison Operators in Visual Basic</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"d6cb12a8-e52e-46a7-8aaf-f804d634a825\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"20\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/operators/comparison-operators.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/operators/comparison-operators.md\">\r\n<meta name=\"document_id\" content=\"ccfc44e0-b049-59f4-0e0a-a87abff95633\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"Comparison Operators (Visual Basic) | Microsoft Docs","ms.suite":"","ms.assetid":"d6cb12a8-e52e-46a7-8aaf-f804d634a825","f1_keywords":["vb.<>","vb.>=","vb.<=","vb.>","vb.<"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":20,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["greater than or equal to operator [Visual Basic]",">= operator [Visual Basic]","= operator [Visual Basic]","< operator [Visual Basic]","less than operator [Visual Basic]","relational operators, syntax","Like operator [Visual Basic]","<> operator [Visual Basic]","> operator [Visual Basic]","equal operator [Visual Basic]","less than or equal to operator [Visual Basic]","symbols, operators","greater than operator [Visual Basic]","comparing values [Visual Basic]","operators [Visual Basic], relational","string comparison [Visual Basic]","not equal to comparison operator [Visual Basic]","<= operator [Visual Basic]","operators [Visual Basic], comparison","Is operator [Visual Basic]","comparison operators, Visual Basicl"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/operators/comparison-operators.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/operators/comparison-operators.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/language-reference/operators/comparison-operators.md","document_id":"ccfc44e0-b049-59f4-0e0a-a87abff95633","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/language-reference/operators/comparison-operators","toc_asset_id":"articles/toc.json","toc_rel":"../../../toc.json","_op_ogTitle":"Comparison Operators (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":1025,"_op_rawTitle":"<h1 id=\"comparison-operators-visual-basic\" sourcefile=\"docs/visual-basic/language-reference/operators/comparison-operators.md\" sourcestartlinenumber=\"62\" sourceendlinenumber=\"62\">Comparison Operators (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/language-reference/operators/comparison-operators","fileRelativePath":"articles/visual-basic/language-reference/operators/comparison-operators.html"},"themesRelativePathToOutputRoot":"_themes/"}