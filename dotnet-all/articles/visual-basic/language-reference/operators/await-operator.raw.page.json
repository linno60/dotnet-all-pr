{"content":"<div><div class=\"content\">\n<p>You apply the <code>Await</code> operator to an operand in an asynchronous method or lambda expression to suspend execution of the method until the awaited task completes. The task represents ongoing work.  </p>\n<p> The method in which <code>Await</code> is used must have an <a href=\"../modifiers/async\" data-linktype=\"relative-path\">Async</a> modifier. Such a method, defined by using the <code>Async</code> modifier, and usually containing one or more <code>Await</code> expressions, is referred to as an <em>async method</em>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>Async</code> and <code>Await</code> keywords were introduced in Visual Studio 2012. For an introduction to async programming, see <a href=\"../../programming-guide/concepts/async/index\" data-linktype=\"relative-path\">Asynchronous Programming with Async and Await</a>.  </p>\n</div>\n<p> Typically, the task to which you apply the <code>Await</code> operator is the return value from a call to a method that implements the <a href=\"http://go.microsoft.com/fwlink/?LinkId=204847\" data-linktype=\"external\">Task-Based Asynchronous Pattern</a>, that is, a <a class=\"xref\" href=\"../../../../api/system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> or a <a class=\"xref\" href=\"../../../../api/system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a>.  </p>\n<p> In the following code, the <a class=\"xref\" href=\"../../../../api/system.net.http.httpclient\" data-linktype=\"relative-path\">HttpClient</a> method <a class=\"xref\" href=\"../../../../api/system.net.http.httpclient#System_Net_Http_HttpClient_GetByteArrayAsync_\" data-linktype=\"relative-path\">GetByteArrayAsync</a> returns <code>getContentsTask</code>, a <code>Task(Of Byte())</code>. The task is a promise to produce the actual byte array when the operation is complete. The <code>Await</code> operator is applied to <code>getContentsTask</code> to suspend execution in <code>SumPageSizesAsync</code> until <code>getContentsTask</code> is complete. In the meantime, control is returned to the caller of <code>SumPageSizesAsync</code>. When <code>getContentsTask</code> is finished, the <code>Await</code> expression evaluates to a byte array.  </p>\n<p><codecontentplaceholder>0</codecontentplaceholder>  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> For the complete example, see <a href=\"../../programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await\" data-linktype=\"relative-path\">Walkthrough: Accessing the Web by Using Async and Await</a>. You can download the sample from <a href=\"http://go.microsoft.com/fwlink/?LinkID=255191&amp;clcid=0x409\" data-linktype=\"external\">Developer Code Samples</a> on the Microsoft website. The example is in the AsyncWalkthrough_HttpClient project.  </p>\n</div>\n<p> If <code>Await</code> is applied to the result of a method call that returns a <code>Task(Of TResult)</code>, the type of the <code>Await</code> expression is TResult. If <code>Await</code> is applied to the result of a method call that returns a <code>Task</code>, the <code>Await</code> expression doesn&#39;t return a value. The following example illustrates the difference.  </p>\n<p><codecontentplaceholder>1</codecontentplaceholder><br> An <code>Await</code> expression or statement does not block the thread on which it is executing. Instead, it causes the compiler to sign up the rest of the async method, after the <code>Await</code> expression, as a continuation on the awaited task. Control then returns to the caller of the async method. When the task completes, it invokes its continuation, and execution of the async method resumes where it left off.  </p>\n<p> An <code>Await</code> expression can occur only in the body of an immediately enclosing method or lambda expression that is marked by an <code>Async</code> modifier. The term <em>Await</em> serves as a keyword only in that context. Elsewhere, it is interpreted as an identifier. Within the async method or lambda expression, an <code>Await</code> expression cannot occur in a query expression, in the <code>catch</code> or <code>finally</code> block of a <a href=\"../statements/try-catch-finally-statement\" data-linktype=\"relative-path\">Try…Catch…Finally</a> statement, in the loop control variable expression of a <code>For</code> or <code>For Each</code> loop, or in the body of a <a href=\"../statements/synclock-statement\" data-linktype=\"relative-path\">SyncLock</a> statement.  </p>\n<h2 id=\"exceptions\">Exceptions</h2>\n<p> Most async methods return a <a class=\"xref\" href=\"../../../../api/system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> or <a class=\"xref\" href=\"../../../../api/system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a>. The properties of the returned task carry information about its status and history, such as whether the task is complete, whether the async method caused an exception or was canceled, and what the final result is. The <code>Await</code> operator accesses those properties.  </p>\n<p> If you await a task-returning async method that causes an exception, the  <code>Await</code> operator rethrows the exception.  </p>\n<p> If you await a task-returning async method that is canceled, the <code>Await</code> operator rethrows an <a class=\"xref\" href=\"../../../../api/system.operationcanceledexception\" data-linktype=\"relative-path\">OperationCanceledException</a>.  </p>\n<p> A single task that is in a faulted state can reflect multiple exceptions.  For example, the task might be the result of a call to <a class=\"xref\" href=\"../../../../api/system.threading.tasks.task#System_Threading_Tasks_Task_WhenAll_\" data-linktype=\"relative-path\">WhenAll</a>. When you await such a task, the await operation rethrows only one of the exceptions. However, you can&#39;t predict which of the exceptions is rethrown.  </p>\n<p> For examples of error handling in async methods, see <a href=\"../statements/try-catch-finally-statement\" data-linktype=\"relative-path\">Try...Catch...Finally Statement</a>.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following Windows Forms example illustrates the use of <code>Await</code> in an async method, <code>WaitAsynchronouslyAsync</code>. Contrast the behavior of that method with the behavior of <code>WaitSynchronously</code>. Without an <code>Await</code> operator, <code>WaitSynchronously</code> runs synchronously despite the use of the <code>Async</code> modifier in its definition and a call to <a class=\"xref\" href=\"../../../../api/system.threading.thread#System_Threading_Thread_Sleep_\" data-linktype=\"relative-path\">Sleep</a> in its body.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Private Async Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click  \n    &#39; Call the method that runs asynchronously.  \n    Dim result As String = Await WaitAsynchronouslyAsync()  \n\n    &#39; Call the method that runs synchronously.  \n    &#39;Dim result As String = Await WaitSynchronously()  \n\n    &#39; Display the result.  \n    TextBox1.Text &amp;= result  \nEnd Sub  \n\n&#39; The following method runs asynchronously. The UI thread is not  \n&#39; blocked during the delay. You can move or resize the Form1 window   \n&#39; while Task.Delay is running.  \nPublic Async Function WaitAsynchronouslyAsync() As Task(Of String)  \n    Await Task.Delay(10000)  \n    Return &quot;Finished&quot;  \nEnd Function  \n\n&#39; The following method runs synchronously, despite the use of Async.  \n&#39; You cannot move or resize the Form1 window while Thread.Sleep  \n&#39; is running because the UI thread is blocked.  \nPublic Async Function WaitSynchronously() As Task(Of String)  \n    &#39; Import System.Threading for the Sleep method.  \n    Thread.Sleep(10000)  \n    Return &quot;Finished&quot;  \nEnd Function  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../../programming-guide/concepts/async/index\" data-linktype=\"relative-path\">Asynchronous Programming with Async and Await</a><br> <a href=\"../../programming-guide/concepts/async/walkthrough-accessing-the-web-by-using-async-and-await\" data-linktype=\"relative-path\">Walkthrough: Accessing the Web by Using Async and Await</a><br> <a href=\"../modifiers/async\" data-linktype=\"relative-path\">Async</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"6b1ce283-e92b-4ba7-b081-7be7b3d37af9\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"30\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/0a5d76c154aeb9b749c9c3fc5ad0962e93754a62/docs/visual-basic/language-reference/operators/await-operator.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/operators/await-operator.md\">\r\n<meta name=\"document_id\" content=\"0883e51f-9d28-5a02-d9ee-17d5c0ec2329\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"Await Operator (Visual Basic) | Microsoft Docs","ms.suite":"","ms.assetid":"6b1ce283-e92b-4ba7-b081-7be7b3d37af9","f1_keywords":["vb.Await"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":30,"ms.topic":"article","helpviewer_keywords":["Await operator [Visual Basic]","Await [Visual Basic]"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Reorganizing the VB TOC (#1348)","commit_sha":"0a5d76c154aeb9b749c9c3fc5ad0962e93754a62","commit_date":"2017-02-14 10:22:48 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/0a5d76c154aeb9b749c9c3fc5ad0962e93754a62/docs/visual-basic/language-reference/operators/await-operator.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/operators/await-operator.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/language-reference/operators/await-operator.md","document_id":"0883e51f-9d28-5a02-d9ee-17d5c0ec2329","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/language-reference/operators/await-operator","toc_asset_id":"articles/toc.json","toc_rel":"../../../toc.json","_op_ogTitle":"Await Operator (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":787,"_op_rawTitle":"<h1 id=\"await-operator-visual-basic\" sourcefile=\"docs/visual-basic/language-reference/operators/await-operator.md\" sourcestartlinenumber=\"37\" sourceendlinenumber=\"37\">Await Operator (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/language-reference/operators/await-operator","fileRelativePath":"articles/visual-basic/language-reference/operators/await-operator.html"},"themesRelativePathToOutputRoot":"_themes/"}