{"content":"<div><div class=\"content\">\n<p>Compares a string against a pattern.  </p>\n<h2 id=\"syntax\">Syntax</h2>\n<pre class=\"loading\"><code>\nresult = string Like pattern  \n</code></pre><h2 id=\"parts\">Parts</h2>\n<p> <code>result</code><br> Required. Any <code>Boolean</code> variable. The result is a <code>Boolean</code> value indicating whether or not the <code>string</code> satisfies the <code>pattern</code>.  </p>\n<p> <code>string</code><br> Required. Any <code>String</code> expression.  </p>\n<p> <code>pattern</code><br> Required. Any <code>String</code> expression conforming to the pattern-matching conventions described in &quot;Remarks.&quot;  </p>\n<h2 id=\"remarks\">Remarks</h2>\n<p> If the value in <code>string</code> satisfies the pattern contained in <code>pattern</code>, <code>result</code> is <code>True</code>. If the string does not satisfy the pattern, <code>result</code> is <code>False</code>. If both <code>string</code> and <code>pattern</code> are empty strings, the result is <code>True</code>.  </p>\n<h2 id=\"comparison-method\">Comparison Method</h2>\n<p> The behavior of the <code>Like</code> operator depends on the <a href=\"../statements/option-compare-statement\" data-linktype=\"relative-path\">Option Compare Statement</a>. The default string comparison method for each source file is <code>Option Compare Binary</code>.  </p>\n<h2 id=\"pattern-options\">Pattern Options</h2>\n<p> Built-in pattern matching provides a versatile tool for string comparisons. The pattern-matching features allow you to match each character in <code>string</code> against a specific character, a wildcard character, a character list, or a character range. The following table shows the characters allowed in <code>pattern</code> and what they match.  </p>\n<table>\n<thead>\n<tr>\n<th>Characters in <code>pattern</code></th>\n<th>Matches in <code>string</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>?</code></td>\n<td>Any single character</td>\n</tr>\n<tr>\n<td><code>*</code></td>\n<td>Zero or more characters</td>\n</tr>\n<tr>\n<td><code>#</code></td>\n<td>Any single digit (0–9)</td>\n</tr>\n<tr>\n<td><code>[</code> <code>charlist</code> <code>]</code></td>\n<td>Any single character in <code>charlist</code></td>\n</tr>\n<tr>\n<td><code>[!</code> <code>charlist</code> <code>]</code></td>\n<td>Any single character not in <code>charlist</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"character-lists\">Character Lists</h2>\n<p> A group of one or more characters (<code>charlist</code>) enclosed in brackets (<code>[ ]</code>) can be used to match any single character in <code>string</code> and can include almost any character code, including digits.  </p>\n<p> An exclamation point (<code>!</code>) at the beginning of <code>charlist</code> means that a match is made if any character except the characters in <code>charlist</code> is found in <code>string</code>. When used outside brackets, the exclamation point matches itself.  </p>\n<h2 id=\"special-characters\">Special Characters</h2>\n<p> To match the special characters left bracket (<code>[</code>), question mark (<code>?</code>), number sign (<code>#</code>), and asterisk (<code>*</code>), enclose them in brackets. The right bracket (<code>]</code>) cannot be used within a group to match itself, but it can be used outside a group as an individual character.  </p>\n<p> The character sequence <code>[]</code> is considered a zero-length string (<code>&quot;&quot;</code>). However, it cannot be part of a character list enclosed in brackets. If you want to check whether a position in <code>string</code> contains one of a group of characters or no character at all, you can use <code>Like</code> twice. For an example, see <a href=\"../../programming-guide/language-features/operators-and-expressions/how-to-match-a-string-against-a-pattern\" data-linktype=\"relative-path\">How to: Match a String against a Pattern</a>.  </p>\n<h2 id=\"character-ranges\">Character Ranges</h2>\n<p> By using a hyphen (<code>–</code>) to separate the lower and upper bounds of the range, <code>charlist</code> can specify a range of characters. For example, <code>[A–Z]</code> results in a match if the corresponding character position in <code>string</code> contains any character within the range <code>A</code>–<code>Z</code>, and <code>[!H–L]</code> results in a match if the corresponding character position contains any character outside the range <code>H</code>–<code>L</code>.  </p>\n<p> When you specify a range of characters, they must appear in ascending sort order, that is, from lowest to highest. Thus, <code>[A–Z]</code> is a valid pattern, but <code>[Z–A]</code> is not.  </p>\n<h3 id=\"multiple-character-ranges\">Multiple Character Ranges</h3>\n<p> To specify multiple ranges for the same character position, put them within the same brackets without delimiters. For example, <code>[A–CX–Z]</code> results in a match if the corresponding character position in <code>string</code> contains any character within either the range <code>A</code>–<code>C</code> or the range <code>X</code>–<code>Z</code>.  </p>\n<h3 id=\"usage-of-the-hyphen\">Usage of the Hyphen</h3>\n<p> A hyphen (<code>–</code>) can appear either at the beginning (after an exclamation point, if any) or at the end of <code>charlist</code> to match itself. In any other location, the hyphen identifies a range of characters delimited by the characters on either side of the hyphen.  </p>\n<h2 id=\"collating-sequence\">Collating Sequence</h2>\n<p> The meaning of a specified range depends on the character ordering at run time, as determined by <code>Option``Compare</code> and the locale setting of the system the code is running on. With <code>Option``Compare``Binary</code>, the range <code>[A–E]</code> matches <code>A</code>, <code>B</code>, <code>C</code>, <code>D</code>, and <code>E</code>. With <code>Option``Compare``Text</code>, <code>[A–E]</code> matches <code>A</code>, <code>a</code>, <code>À</code>, <code>à</code>, <code>B</code>, <code>b</code>, <code>C</code>, <code>c</code>, <code>D</code>, <code>d</code>, <code>E</code>, and <code>e</code>. The range does not match <code>Ê</code> or <code>ê</code> because accented characters collate after unaccented characters in the sort order.  </p>\n<h2 id=\"digraph-characters\">Digraph Characters</h2>\n<p> In some languages, there are alphabetic characters that represent two separate characters. For example, several languages use the character <code>æ</code> to represent the characters <code>a</code> and <code>e</code> when they appear together. The <code>Like</code> operator recognizes that the single digraph character and the two individual characters are equivalent.  </p>\n<p> When a language that uses a digraph character is specified in the system locale settings, an occurrence of the single digraph character in either <code>pattern</code> or <code>string</code> matches the equivalent two-character sequence in the other string. Similarly, a digraph character in <code>pattern</code> enclosed in brackets (by itself, in a list, or in a range) matches the equivalent two-character sequence in <code>string</code>.  </p>\n<h2 id=\"overloading\">Overloading</h2>\n<p> The <code>Like</code> operator can be <em>overloaded</em>, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see <a href=\"../../programming-guide/language-features/procedures/operator-procedures\" data-linktype=\"relative-path\">Operator Procedures</a>.  </p>\n<h2 id=\"example\">Example</h2>\n<p> This example uses the <code>Like</code> operator to compare strings to various patterns. The results go into a <code>Boolean</code> variable indicating whether each string satisfies the pattern.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrOperators#30\">        Dim testCheck As Boolean\n        &#39; The following statement returns True (does &quot;F&quot; satisfy &quot;F&quot;?)\n        testCheck = &quot;F&quot; Like &quot;F&quot;\n        &#39; The following statement returns False for Option Compare Binary\n        &#39;    and True for Option Compare Text (does &quot;F&quot; satisfy &quot;f&quot;?)\n        testCheck = &quot;F&quot; Like &quot;f&quot;\n        &#39; The following statement returns False (does &quot;F&quot; satisfy &quot;FFF&quot;?)\n        testCheck = &quot;F&quot; Like &quot;FFF&quot;\n        &#39; The following statement returns True (does &quot;aBBBa&quot; have an &quot;a&quot; at the\n        &#39;    beginning, an &quot;a&quot; at the end, and any number of characters in \n        &#39;    between?)\n        testCheck = &quot;aBBBa&quot; Like &quot;a*a&quot;\n        &#39; The following statement returns True (does &quot;F&quot; occur in the set of\n        &#39;    characters from &quot;A&quot; through &quot;Z&quot;?)\n        testCheck = &quot;F&quot; Like &quot;[A-Z]&quot;\n        &#39; The following statement returns False (does &quot;F&quot; NOT occur in the \n        &#39;    set of characters from &quot;A&quot; through &quot;Z&quot;?)\n        testCheck = &quot;F&quot; Like &quot;[!A-Z]&quot;\n        &#39; The following statement returns True (does &quot;a2a&quot; begin and end with\n        &#39;    an &quot;a&quot; and have any single-digit number in between?)\n        testCheck = &quot;a2a&quot; Like &quot;a#a&quot;\n        &#39; The following statement returns True (does &quot;aM5b&quot; begin with an &quot;a&quot;,\n        &#39;    followed by any character from the set &quot;L&quot; through &quot;P&quot;, followed\n        &#39;    by any single-digit number, and end with any character NOT in\n        &#39;    the character set &quot;c&quot; through &quot;e&quot;?)\n        testCheck = &quot;aM5b&quot; Like &quot;a[L-P]#[!c-e]&quot;\n        &#39; The following statement returns True (does &quot;BAT123khg&quot; begin with a\n        &#39;    &quot;B&quot;, followed by any single character, followed by a &quot;T&quot;, and end\n        &#39;    with zero or more characters of any type?)\n        testCheck = &quot;BAT123khg&quot; Like &quot;B?T*&quot;\n        &#39; The following statement returns False (does &quot;CAT123khg&quot;?) begin with\n        &#39;    a &quot;B&quot;, followed by any single character, followed by a &quot;T&quot;, and\n        &#39;    end with zero or more characters of any type?)\n        testCheck = &quot;CAT123khg&quot; Like &quot;B?T*&quot;\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../api/microsoft.visualbasic.strings#Microsoft_VisualBasic_Strings_InStr_\" data-linktype=\"relative-path\">InStr</a><br> <a class=\"xref\" href=\"../../../../api/microsoft.visualbasic.strings#Microsoft_VisualBasic_Strings_StrComp_\" data-linktype=\"relative-path\">StrComp</a><br> <a href=\"comparison-operators\" data-linktype=\"relative-path\">Comparison Operators</a><br> <a href=\"operator-precedence\" data-linktype=\"relative-path\">Operator Precedence in Visual Basic</a><br> <a href=\"operators-listed-by-functionality\" data-linktype=\"relative-path\">Operators Listed by Functionality</a><br> <a href=\"../statements/option-compare-statement\" data-linktype=\"relative-path\">Option Compare Statement</a><br> <a href=\"../../programming-guide/language-features/operators-and-expressions/index\" data-linktype=\"relative-path\">Operators and Expressions</a><br> <a href=\"../../programming-guide/language-features/operators-and-expressions/how-to-match-a-string-against-a-pattern\" data-linktype=\"relative-path\">How to: Match a String against a Pattern</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"966283ec-80e2-4294-baa8-c75baff804f9\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"18\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/operators/like-operator.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/operators/like-operator.md\">\r\n<meta name=\"document_id\" content=\"e7776c53-831a-57e7-3ba2-869e8c11f108\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Like Operator (Visual Basic) | Microsoft Docs","ms.suite":"","ms.assetid":"966283ec-80e2-4294-baa8-c75baff804f9","f1_keywords":["Like","vb.Like"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":18,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["similar to","pattern matching","Like operator [Visual Basic]","? symbol, wildcard character","string comparison [Visual Basic], Like operator","strings [Visual Basic], comparing","comparison operators","symbols, wildcard","wildcards, Like operator","strings [Visual Basic], matching","string comparison [Visual Basic], sorting data","data [Visual Basic], sorting","text [Visual Basic], comparing","operators [Visual Basic], pattern-matching","data [Visual Basic], string comparisons","string comparison [Visual Basic], Like operators"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/operators/like-operator.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/operators/like-operator.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/language-reference/operators/like-operator.md","document_id":"e7776c53-831a-57e7-3ba2-869e8c11f108","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/language-reference/operators/like-operator","toc_asset_id":"articles/toc.json","toc_rel":"../../../toc.json","_op_ogTitle":"Like Operator (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":1153,"_op_rawTitle":"<h1 id=\"like-operator-visual-basic\" sourcefile=\"docs/visual-basic/language-reference/operators/like-operator.md\" sourcestartlinenumber=\"54\" sourceendlinenumber=\"54\">Like Operator (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/language-reference/operators/like-operator","fileRelativePath":"articles/visual-basic/language-reference/operators/like-operator.html"},"themesRelativePathToOutputRoot":"_themes/"}