{"content":"<div><div class=\"content\">\n<p>Declares the parameters and code that define a function lambda expression.  </p>\n<h2 id=\"syntax\">Syntax</h2>\n<pre class=\"loading\"><code>Function ( [ parameterlist ] ) expression  \n- or -  \nFunction ( [ parameterlist ] )  \n  [ statements ]  \nEnd Function  \n</code></pre><h2 id=\"parts\">Parts</h2>\n<table>\n<thead>\n<tr>\n<th>Term</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>parameterlist</code></td>\n<td>Optional. A list of local variable names that represent the parameters of this procedure. The parentheses must be present even when the list is empty. See <a href=\"../statements/parameter-list\" data-linktype=\"relative-path\">Parameter List</a>.</td>\n</tr>\n<tr>\n<td><code>expression</code></td>\n<td>Required. A single expression. The type of the expression is the return type of the function.</td>\n</tr>\n<tr>\n<td><code>statements</code></td>\n<td>Required. A list of statements that returns a value by using the <code>Return</code> statement. (See <a href=\"../statements/return-statement\" data-linktype=\"relative-path\">Return Statement</a>.) The type of the value returned is the return type of the function.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"remarks\">Remarks</h2>\n<p> A <em>lambda expression</em> is a function without a name that calculates and returns a value. You can use a lambda expression anywhere you can use a delegate type, except as an argument to <code>RemoveHandler</code>. For more information about delegates, and the use of lambda expressions with delegates, see <a href=\"../statements/delegate-statement\" data-linktype=\"relative-path\">Delegate Statement</a> and <a href=\"../../programming-guide/language-features/delegates/relaxed-delegate-conversion\" data-linktype=\"relative-path\">Relaxed Delegate Conversion</a>.  </p>\n<h2 id=\"lambda-expression-syntax\">Lambda Expression Syntax</h2>\n<p> The syntax of a lambda expression resembles that of a standard function. The differences are as follows:  </p>\n<ul>\n<li><p>A lambda expression does not have a name.  </p>\n</li>\n<li><p>Lambda expressions cannot have modifiers, such as <code>Overloads</code> or <code>Overrides</code>.  </p>\n</li>\n<li><p>Lambda expressions do not use an <code>As</code> clause to designate the return type of the function. Instead, the type is inferred from the value that the body of a single-line lambda expression evaluates to, or the return value of a multiline lambda expression. For example, if the body of a single-line lambda expression is <code>Where cust.City = &quot;London&quot;</code>, its return type is <code>Boolean</code>.  </p>\n</li>\n<li><p>The body of a single-line lambda expression must be an expression, not a statement. The body can consist of a call to a function procedure, but not a call to a sub procedure.  </p>\n</li>\n<li><p>Either all parameters must have specified data types or all must be inferred.  </p>\n</li>\n<li><p>Optional and Paramarray parameters are not permitted.  </p>\n</li>\n<li><p>Generic parameters are not permitted.  </p>\n</li>\n</ul>\n<h2 id=\"example\">Example</h2>\n<p> The following examples show two ways to create simple lambda expressions. The first uses a <code>Dim</code> to provide a name for the function. To call the function, you send in a value for the parameter.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrLambdas#1\">        Dim add1 = Function(num As Integer) num + 1\n</code></pre><pre><code class=\"lang-vb\" name=\"VbVbalrLambdas#2\">        &#39; The following line prints 6.\n        Console.WriteLine(add1(5))\n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> Alternatively, you can declare and run the function at the same time.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrLambdas#3\">        Console.WriteLine((Function(num As Integer) num + 1)(5))\n</code></pre><h2 id=\"example-2\">Example</h2>\n<p> Following is an example of a lambda expression that increments its argument and returns the value. The example shows both the single-line and multiline lambda expression syntax for a function. For more examples, see <a href=\"../../programming-guide/language-features/procedures/lambda-expressions\" data-linktype=\"relative-path\">Lambda Expressions</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrLambdas#14\">        Dim increment1 = Function(x) x + 1\n        Dim increment2 = Function(x)\n                             Return x + 2\n                         End Function\n\n        &#39; Write the value 2.\n        Console.WriteLine(increment1(1))\n\n        &#39; Write the value 4.\n        Console.WriteLine(increment2(2))\n</code></pre><h2 id=\"example-3\">Example</h2>\n<p> Lambda expressions underlie many of the query operators in Language-Integrated Query (LINQ), and can be used explicitly in method-based queries. The following example shows a typical LINQ query, followed by the translation of the query into method format.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Dim londonCusts = From cust In db.Customers  \n                       Where cust.City = &quot;London&quot;  \n                       Select cust  \n\n&#39; This query is compiled to the following code:  \nDim londonCusts = db.Customers.  \n                  Where(Function(cust) cust.City = &quot;London&quot;).  \n                  Select(Function(cust) cust)  \n</code></pre><p> For more information about query methods, see <a href=\"../queries/queries\" data-linktype=\"relative-path\">Queries</a>. For more information about standard query operators, see <a href=\"http://msdn.microsoft.com/library/24cda21e-8af8-4632-b519-c404a839b9b2\" data-linktype=\"external\">Standard Query Operators Overview</a>.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../statements/function-statement\" data-linktype=\"relative-path\">Function Statement</a><br> <a href=\"../../programming-guide/language-features/procedures/lambda-expressions\" data-linktype=\"relative-path\">Lambda Expressions</a><br> <a href=\"../../programming-guide/language-features/operators-and-expressions/index\" data-linktype=\"relative-path\">Operators and Expressions</a><br> <a href=\"../../programming-guide/language-features/statements\" data-linktype=\"relative-path\">Statements</a><br> <a href=\"../../programming-guide/language-features/operators-and-expressions/value-comparisons\" data-linktype=\"relative-path\">Value Comparisons</a><br> <a href=\"../../programming-guide/language-features/operators-and-expressions/boolean-expressions\" data-linktype=\"relative-path\">Boolean Expressions</a><br> <a href=\"if-operator\" data-linktype=\"relative-path\">If Operator</a><br> <a href=\"../../programming-guide/language-features/delegates/relaxed-delegate-conversion\" data-linktype=\"relative-path\">Relaxed Delegate Conversion</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"e8a47a45-4b8a-4f45-a623-7653625dffbc\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"18\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/operators/function-expression.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/operators/function-expression.md\">\r\n<meta name=\"document_id\" content=\"5362fdac-a37f-54e5-2911-996c30197af2\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Function Expression (Visual Basic) | Microsoft Docs","ms.suite":"","ms.assetid":"e8a47a45-4b8a-4f45-a623-7653625dffbc","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":18,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["Function expression [Visual Basic]","functions [Visual Basic], function expressions","lambda expressions [Visual Basic], function expression"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/operators/function-expression.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/operators/function-expression.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/language-reference/operators/function-expression.md","document_id":"5362fdac-a37f-54e5-2911-996c30197af2","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/language-reference/operators/function-expression","toc_asset_id":"articles/toc.json","toc_rel":"../../../toc.json","_op_ogTitle":"Function Expression (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":564,"_op_rawTitle":"<h1 id=\"function-expression-visual-basic\" sourcefile=\"docs/visual-basic/language-reference/operators/function-expression.md\" sourcestartlinenumber=\"38\" sourceendlinenumber=\"38\">Function Expression (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/language-reference/operators/function-expression","fileRelativePath":"articles/visual-basic/language-reference/operators/function-expression.html"},"themesRelativePathToOutputRoot":"_themes/"}