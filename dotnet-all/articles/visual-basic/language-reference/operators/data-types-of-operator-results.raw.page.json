{"content":"<div><div class=\"content\">\n<p>Visual Basic determines the result data type of an operation based on the data types of the operands. In some cases this might be a data type with a greater range than that of either operand.  </p>\n<h2 id=\"data-type-ranges\">Data Type Ranges</h2>\n<p> The ranges of the relevant data types, in order from smallest to largest, are as follows:  </p>\n<ul>\n<li><p><a href=\"../data-types/boolean-data-type\" data-linktype=\"relative-path\">Boolean</a> — two possible values  </p>\n</li>\n<li><p><a href=\"../data-types/sbyte-data-type\" data-linktype=\"relative-path\">SByte</a>, <a href=\"../data-types/byte-data-type\" data-linktype=\"relative-path\">Byte</a> — 256 possible integral values  </p>\n</li>\n<li><p><a href=\"../data-types/short-data-type\" data-linktype=\"relative-path\">Short</a>, <a href=\"../data-types/ushort-data-type\" data-linktype=\"relative-path\">UShort</a> — 65,536 (6.5...E+4) possible integral values  </p>\n</li>\n<li><p><a href=\"../data-types/integer-data-type\" data-linktype=\"relative-path\">Integer</a>, <a href=\"../data-types/uinteger-data-type\" data-linktype=\"relative-path\">UInteger</a> — 4,294,967,296 (4.2...E+9) possible integral values  </p>\n</li>\n<li><p><a href=\"../data-types/long-data-type\" data-linktype=\"relative-path\">Long</a>, <a href=\"../data-types/ulong-data-type\" data-linktype=\"relative-path\">ULong</a> — 18,446,744,073,709,551,615 (1.8...E+19) possible integral values  </p>\n</li>\n<li><p><a href=\"../data-types/decimal-data-type\" data-linktype=\"relative-path\">Decimal</a> — 1.5...E+29 possible integral values, maximum range 7.9...E+28 (absolute value)  </p>\n</li>\n<li><p><a href=\"../data-types/single-data-type\" data-linktype=\"relative-path\">Single</a> — maximum range 3.4...E+38 (absolute value)  </p>\n</li>\n<li><p><a href=\"../data-types/double-data-type\" data-linktype=\"relative-path\">Double</a> — maximum range 1.7...E+308 (absolute value)  </p>\n<p>For more information on Visual Basic data types, see <a href=\"../data-types/data-type-summary\" data-linktype=\"relative-path\">Data Types</a>.  </p>\n<p>If an operand evaluates to <a href=\"../nothing\" data-linktype=\"relative-path\">Nothing</a>, the Visual Basic arithmetic operators treat it as zero.  </p>\n</li>\n</ul>\n<h2 id=\"decimal-arithmetic\">Decimal Arithmetic</h2>\n<p> Note that the <a href=\"../data-types/decimal-data-type\" data-linktype=\"relative-path\">Decimal</a> data type is neither floating-point nor integer.  </p>\n<p> If either operand of a <code>+</code>, <code>–</code>, <code>*</code>, <code>/</code>, or <code>Mod</code> operation is <code>Decimal</code> and the other is not <code>Single</code> or <code>Double</code>, Visual Basic widens the other operand to <code>Decimal</code>. It performs the operation in <code>Decimal</code>, and the result data type is <code>Decimal</code>.  </p>\n<h2 id=\"floating-point-arithmetic\">Floating-Point Arithmetic</h2>\n<p> Visual Basic performs most floating-point arithmetic in <a href=\"../data-types/double-data-type\" data-linktype=\"relative-path\">Double</a>, which is the most efficient data type for such operations. However, if one operand is <a href=\"../data-types/single-data-type\" data-linktype=\"relative-path\">Single</a> and the other is not <code>Double</code>, Visual Basic performs the operation in <code>Single</code>. It widens each operand as necessary to the appropriate data type before the operation, and the result has that data type.  </p>\n<h3 id=\"-and--operators\">/ and ^ Operators</h3>\n<p> The <code>/</code> operator is defined only for the <a href=\"../data-types/decimal-data-type\" data-linktype=\"relative-path\">Decimal</a>, <a href=\"../data-types/single-data-type\" data-linktype=\"relative-path\">Single</a>, and <a href=\"../data-types/double-data-type\" data-linktype=\"relative-path\">Double</a> data types. Visual Basic widens each operand as necessary to the appropriate data type before the operation, and the result has that data type.  </p>\n<p> The following table shows the result data types for the <code>/</code> operator. Note that this table is symmetric; for a given combination of operand data types, the result data type is the same regardless of the order of the operands.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td><code>Decimal</code></td>\n<td><code>Single</code></td>\n<td><code>Double</code></td>\n<td>Any integer type</td>\n</tr>\n<tr>\n<td><code>Decimal</code></td>\n<td>Decimal</td>\n<td>Single</td>\n<td>Double</td>\n<td>Decimal</td>\n</tr>\n<tr>\n<td><code>Single</code></td>\n<td>Single</td>\n<td>Single</td>\n<td>Double</td>\n<td>Single</td>\n</tr>\n<tr>\n<td><code>Double</code></td>\n<td>Double</td>\n<td>Double</td>\n<td>Double</td>\n<td>Double</td>\n</tr>\n<tr>\n<td>Any integer type</td>\n<td>Decimal</td>\n<td>Single</td>\n<td>Double</td>\n<td>Double</td>\n</tr>\n</tbody>\n</table>\n<p> The <code>^</code> operator is defined only for the <code>Double</code> data type. Visual Basic widens each operand as necessary to <code>Double</code> before the operation, and the result data type is always <code>Double</code>.  </p>\n<h2 id=\"integer-arithmetic\">Integer Arithmetic</h2>\n<p> The result data type of an integer operation depends on the data types of the operands. In general, Visual Basic uses the following policies for determining the result data type:  </p>\n<ul>\n<li><p>If both operands of a binary operator have the same data type, the result has that data type. An exception is <code>Boolean</code>, which is forced to <code>Short</code>.  </p>\n</li>\n<li><p>If an unsigned operand participates with a signed operand, the result has a signed type with at least as large a range as either operand.  </p>\n</li>\n<li><p>Otherwise, the result usually has the larger of the two operand data types.  </p>\n<p>Note that the result data type might not be the same as either operand data type.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> The result data type is not always large enough to hold all possible values resulting from the operation. An <a class=\"xref\" href=\"../../../../api/system.overflowexception\" data-linktype=\"relative-path\">OverflowException</a> exception can occur if the value is too large for the result data type.  </p>\n</div>\n<h3 id=\"unary--and--operators\">Unary + and – Operators</h3>\n<p> The following table shows the result data types for the two unary operators, <code>+</code> and <code>–</code>.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td><code>Boolean</code></td>\n<td><code>SByte</code></td>\n<td><code>Byte</code></td>\n<td><code>Short</code></td>\n<td><code>UShort</code></td>\n<td><code>Integer</code></td>\n<td><code>UInteger</code></td>\n<td><code>Long</code></td>\n<td><code>ULong</code></td>\n</tr>\n<tr>\n<td>Unary <code>+</code></td>\n<td>Short</td>\n<td>SByte</td>\n<td>Byte</td>\n<td>Short</td>\n<td>UShort</td>\n<td>Integer</td>\n<td>UInteger</td>\n<td>Long</td>\n<td>ULong</td>\n</tr>\n<tr>\n<td>Unary <code>–</code></td>\n<td>Short</td>\n<td>SByte</td>\n<td>Short</td>\n<td>Short</td>\n<td>Integer</td>\n<td>Integer</td>\n<td>Long</td>\n<td>Long</td>\n<td>Decimal</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"-and--operators-1\">&lt;&lt; and &gt;&gt; Operators</h3>\n<p> The following table shows the result data types for the two bit-shift operators, <code>&lt;&lt;</code> and <code>&gt;&gt;</code>. Visual Basic treats each bit-shift operator as a unary operator on its left operand (the bit pattern to be shifted).  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td><code>Boolean</code></td>\n<td><code>SByte</code></td>\n<td><code>Byte</code></td>\n<td><code>Short</code></td>\n<td><code>UShort</code></td>\n<td><code>Integer</code></td>\n<td><code>UInteger</code></td>\n<td><code>Long</code></td>\n<td><code>ULong</code></td>\n</tr>\n<tr>\n<td><code>&lt;&lt;</code>, <code>&gt;&gt;</code></td>\n<td>Short</td>\n<td>SByte</td>\n<td>Byte</td>\n<td>Short</td>\n<td>UShort</td>\n<td>Integer</td>\n<td>UInteger</td>\n<td>Long</td>\n<td>ULong</td>\n</tr>\n</tbody>\n</table>\n<p> If the left operand is <code>Decimal</code>, <code>Single</code>, <code>Double</code>, or <code>String</code>, Visual Basic attempts to convert it to <code>Long</code> before the operation, and the result data type is <code>Long</code>. The right operand (the number of bit positions to shift) must be <code>Integer</code> or a type that widens to <code>Integer</code>.  </p>\n<h3 id=\"binary----and-mod-operators\">Binary +, –, *, and Mod Operators</h3>\n<p> The following table shows the result data types for the binary <code>+</code> and <code>–</code> operators and the <code>*</code> and <code>Mod</code> operators. Note that this table is symmetric; for a given combination of operand data types, the result data type is the same regardless of the order of the operands.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td><code>Boolean</code></td>\n<td><code>SByte</code></td>\n<td><code>Byte</code></td>\n<td><code>Short</code></td>\n<td><code>UShort</code></td>\n<td><code>Integer</code></td>\n<td><code>UInteger</code></td>\n<td><code>Long</code></td>\n<td><code>ULong</code></td>\n</tr>\n<tr>\n<td><code>Boolean</code></td>\n<td>Short</td>\n<td>SByte</td>\n<td>Short</td>\n<td>Short</td>\n<td>Integer</td>\n<td>Integer</td>\n<td>Long</td>\n<td>Long</td>\n<td>Decimal</td>\n</tr>\n<tr>\n<td><code>SByte</code></td>\n<td>SByte</td>\n<td>SByte</td>\n<td>Short</td>\n<td>Short</td>\n<td>Integer</td>\n<td>Integer</td>\n<td>Long</td>\n<td>Long</td>\n<td>Decimal</td>\n</tr>\n<tr>\n<td><code>Byte</code></td>\n<td>Short</td>\n<td>Short</td>\n<td>Byte</td>\n<td>Short</td>\n<td>UShort</td>\n<td>Integer</td>\n<td>UInteger</td>\n<td>Long</td>\n<td>ULong</td>\n</tr>\n<tr>\n<td><code>Short</code></td>\n<td>Short</td>\n<td>Short</td>\n<td>Short</td>\n<td>Short</td>\n<td>Integer</td>\n<td>Integer</td>\n<td>Long</td>\n<td>Long</td>\n<td>Decimal</td>\n</tr>\n<tr>\n<td><code>UShort</code></td>\n<td>Integer</td>\n<td>Integer</td>\n<td>UShort</td>\n<td>Integer</td>\n<td>UShort</td>\n<td>Integer</td>\n<td>UInteger</td>\n<td>Long</td>\n<td>ULong</td>\n</tr>\n<tr>\n<td><code>Integer</code></td>\n<td>Integer</td>\n<td>Integer</td>\n<td>Integer</td>\n<td>Integer</td>\n<td>Integer</td>\n<td>Integer</td>\n<td>Long</td>\n<td>Long</td>\n<td>Decimal</td>\n</tr>\n<tr>\n<td><code>UInteger</code></td>\n<td>Long</td>\n<td>Long</td>\n<td>UInteger</td>\n<td>Long</td>\n<td>UInteger</td>\n<td>Long</td>\n<td>UInteger</td>\n<td>Long</td>\n<td>ULong</td>\n</tr>\n<tr>\n<td><code>Long</code></td>\n<td>Long</td>\n<td>Long</td>\n<td>Long</td>\n<td>Long</td>\n<td>Long</td>\n<td>Long</td>\n<td>Long</td>\n<td>Long</td>\n<td>Decimal</td>\n</tr>\n<tr>\n<td><code>ULong</code></td>\n<td>Decimal</td>\n<td>Decimal</td>\n<td>ULong</td>\n<td>Decimal</td>\n<td>ULong</td>\n<td>Decimal</td>\n<td>ULong</td>\n<td>Decimal</td>\n<td>ULong</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"-operator\">\\ Operator</h3>\n<p> The following table shows the result data types for the <code>\\</code> operator. Note that this table is symmetric; for a given combination of operand data types, the result data type is the same regardless of the order of the operands.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td><code>Boolean</code></td>\n<td><code>SByte</code></td>\n<td><code>Byte</code></td>\n<td><code>Short</code></td>\n<td><code>UShort</code></td>\n<td><code>Integer</code></td>\n<td><code>UInteger</code></td>\n<td><code>Long</code></td>\n<td><code>ULong</code></td>\n</tr>\n<tr>\n<td><code>Boolean</code></td>\n<td>Short</td>\n<td>SByte</td>\n<td>Short</td>\n<td>Short</td>\n<td>Integer</td>\n<td>Integer</td>\n<td>Long</td>\n<td>Long</td>\n<td>Long</td>\n</tr>\n<tr>\n<td><code>SByte</code></td>\n<td>SByte</td>\n<td>SByte</td>\n<td>Short</td>\n<td>Short</td>\n<td>Integer</td>\n<td>Integer</td>\n<td>Long</td>\n<td>Long</td>\n<td>Long</td>\n</tr>\n<tr>\n<td><code>Byte</code></td>\n<td>Short</td>\n<td>Short</td>\n<td>Byte</td>\n<td>Short</td>\n<td>UShort</td>\n<td>Integer</td>\n<td>UInteger</td>\n<td>Long</td>\n<td>ULong</td>\n</tr>\n<tr>\n<td><code>Short</code></td>\n<td>Short</td>\n<td>Short</td>\n<td>Short</td>\n<td>Short</td>\n<td>Integer</td>\n<td>Integer</td>\n<td>Long</td>\n<td>Long</td>\n<td>Long</td>\n</tr>\n<tr>\n<td><code>UShort</code></td>\n<td>Integer</td>\n<td>Integer</td>\n<td>UShort</td>\n<td>Integer</td>\n<td>UShort</td>\n<td>Integer</td>\n<td>UInteger</td>\n<td>Long</td>\n<td>ULong</td>\n</tr>\n<tr>\n<td><code>Integer</code></td>\n<td>Integer</td>\n<td>Integer</td>\n<td>Integer</td>\n<td>Integer</td>\n<td>Integer</td>\n<td>Integer</td>\n<td>Long</td>\n<td>Long</td>\n<td>Long</td>\n</tr>\n<tr>\n<td><code>UInteger</code></td>\n<td>Long</td>\n<td>Long</td>\n<td>UInteger</td>\n<td>Long</td>\n<td>UInteger</td>\n<td>Long</td>\n<td>UInteger</td>\n<td>Long</td>\n<td>ULong</td>\n</tr>\n<tr>\n<td><code>Long</code></td>\n<td>Long</td>\n<td>Long</td>\n<td>Long</td>\n<td>Long</td>\n<td>Long</td>\n<td>Long</td>\n<td>Long</td>\n<td>Long</td>\n<td>Long</td>\n</tr>\n<tr>\n<td><code>ULong</code></td>\n<td>Long</td>\n<td>Long</td>\n<td>ULong</td>\n<td>Long</td>\n<td>ULong</td>\n<td>Long</td>\n<td>ULong</td>\n<td>Long</td>\n<td>ULong</td>\n</tr>\n</tbody>\n</table>\n<p> If either operand of the <code>\\</code> operator is <a href=\"../data-types/decimal-data-type\" data-linktype=\"relative-path\">Decimal</a>, <a href=\"../data-types/single-data-type\" data-linktype=\"relative-path\">Single</a>, or <a href=\"../data-types/double-data-type\" data-linktype=\"relative-path\">Double</a>, Visual Basic attempts to convert it to <a href=\"../data-types/long-data-type\" data-linktype=\"relative-path\">Long</a> before the operation, and the result data type is <code>Long</code>.  </p>\n<h2 id=\"relational-and-bitwise-comparisons\">Relational and Bitwise Comparisons</h2>\n<p> The result data type of a relational operation (<code>=</code>, <code>&lt;&gt;</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>) is always <code>Boolean</code><a href=\"../data-types/boolean-data-type\" data-linktype=\"relative-path\">Boolean Data Type</a>. The same is true for logical operations (<code>And</code>, <code>AndAlso</code>, <code>Not</code>, <code>Or</code>, <code>OrElse</code>, <code>Xor</code>) on <code>Boolean</code> operands.  </p>\n<p> The result data type of a bitwise logical operation depends on the data types of the operands. Note that <code>AndAlso</code> and <code>OrElse</code> are defined only for <code>Boolean</code>, and Visual Basic converts each operand as necessary to <code>Boolean</code> before performing the operation.  </p>\n<h3 id=\"-----and--operators\">=, &lt;&gt;, &lt;, &gt;, &lt;=, and &gt;= Operators</h3>\n<p> If both operands are <code>Boolean</code>, Visual Basic considers <code>True</code> to be less than <code>False</code>. If a numeric type is compared with a <code>String</code>, Visual Basic attempts to convert the <code>String</code> to <code>Double</code> before the operation. A <code>Char</code> or <code>Date</code> operand can be compared only with another operand of the same data type. The result data type is always <code>Boolean</code>.  </p>\n<h3 id=\"bitwise-not-operator\">Bitwise Not Operator</h3>\n<p> The following table shows the result data types for the bitwise <code>Not</code> operator.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td><code>Boolean</code></td>\n<td><code>SByte</code></td>\n<td><code>Byte</code></td>\n<td><code>Short</code></td>\n<td><code>UShort</code></td>\n<td><code>Integer</code></td>\n<td><code>UInteger</code></td>\n<td><code>Long</code></td>\n<td><code>ULong</code></td>\n</tr>\n<tr>\n<td><code>Not</code></td>\n<td>Boolean</td>\n<td>SByte</td>\n<td>Byte</td>\n<td>Short</td>\n<td>UShort</td>\n<td>Integer</td>\n<td>UInteger</td>\n<td>Long</td>\n<td>ULong</td>\n</tr>\n</tbody>\n</table>\n<p> If the operand is <code>Decimal</code>, <code>Single</code>, <code>Double</code>, or <code>String</code>, Visual Basic attempts to convert it to <code>Long</code> before the operation, and the result data type is <code>Long</code>.  </p>\n<h3 id=\"bitwise-and-or-and-xor-operators\">Bitwise And, Or, and Xor Operators</h3>\n<p> The following table shows the result data types for the bitwise <code>And</code>, <code>Or</code>, and <code>Xor</code> operators. Note that this table is symmetric; for a given combination of operand data types, the result data type is the same regardless of the order of the operands.  </p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td><code>Boolean</code></td>\n<td><code>SByte</code></td>\n<td><code>Byte</code></td>\n<td><code>Short</code></td>\n<td><code>UShort</code></td>\n<td><code>Integer</code></td>\n<td><code>UInteger</code></td>\n<td><code>Long</code></td>\n<td><code>ULong</code></td>\n</tr>\n<tr>\n<td><code>Boolean</code></td>\n<td>Boolean</td>\n<td>SByte</td>\n<td>Short</td>\n<td>Short</td>\n<td>Integer</td>\n<td>Integer</td>\n<td>Long</td>\n<td>Long</td>\n<td>Long</td>\n</tr>\n<tr>\n<td><code>SByte</code></td>\n<td>SByte</td>\n<td>SByte</td>\n<td>Short</td>\n<td>Short</td>\n<td>Integer</td>\n<td>Integer</td>\n<td>Long</td>\n<td>Long</td>\n<td>Long</td>\n</tr>\n<tr>\n<td><code>Byte</code></td>\n<td>Short</td>\n<td>Short</td>\n<td>Byte</td>\n<td>Short</td>\n<td>UShort</td>\n<td>Integer</td>\n<td>UInteger</td>\n<td>Long</td>\n<td>ULong</td>\n</tr>\n<tr>\n<td><code>Short</code></td>\n<td>Short</td>\n<td>Short</td>\n<td>Short</td>\n<td>Short</td>\n<td>Integer</td>\n<td>Integer</td>\n<td>Long</td>\n<td>Long</td>\n<td>Long</td>\n</tr>\n<tr>\n<td><code>UShort</code></td>\n<td>Integer</td>\n<td>Integer</td>\n<td>UShort</td>\n<td>Integer</td>\n<td>UShort</td>\n<td>Integer</td>\n<td>UInteger</td>\n<td>Long</td>\n<td>ULong</td>\n</tr>\n<tr>\n<td><code>Integer</code></td>\n<td>Integer</td>\n<td>Integer</td>\n<td>Integer</td>\n<td>Integer</td>\n<td>Integer</td>\n<td>Integer</td>\n<td>Long</td>\n<td>Long</td>\n<td>Long</td>\n</tr>\n<tr>\n<td><code>UInteger</code></td>\n<td>Long</td>\n<td>Long</td>\n<td>UInteger</td>\n<td>Long</td>\n<td>UInteger</td>\n<td>Long</td>\n<td>UInteger</td>\n<td>Long</td>\n<td>ULong</td>\n</tr>\n<tr>\n<td><code>Long</code></td>\n<td>Long</td>\n<td>Long</td>\n<td>Long</td>\n<td>Long</td>\n<td>Long</td>\n<td>Long</td>\n<td>Long</td>\n<td>Long</td>\n<td>Long</td>\n</tr>\n<tr>\n<td><code>ULong</code></td>\n<td>Long</td>\n<td>Long</td>\n<td>ULong</td>\n<td>Long</td>\n<td>ULong</td>\n<td>Long</td>\n<td>ULong</td>\n<td>Long</td>\n<td>ULong</td>\n</tr>\n</tbody>\n</table>\n<p> If an operand is <code>Decimal</code>, <code>Single</code>, <code>Double</code>, or <code>String</code>, Visual Basic attempts to convert it to <code>Long</code> before the operation, and the result data type is the same as if that operand had already been <code>Long</code>.  </p>\n<h2 id=\"miscellaneous-operators\">Miscellaneous Operators</h2>\n<p> The <code>&amp;</code> operator is defined only for concatenation of <code>String</code> operands. Visual Basic converts each operand as necessary to <code>String</code> before the operation, and the result data type is always <code>String</code>. For the purposes of the <code>&amp;</code> operator, all conversions to <code>String</code> are considered to be widening, even if <code>Option Strict</code> is <code>On</code>.  </p>\n<p> The <code>Is</code> and <code>IsNot</code> operators require both operands to be of a reference type. The <code>TypeOf</code>...<code>Is</code> expression requires the first operand to be of a reference type and the second operand to be the name of a data type. In all these cases the result data type is <code>Boolean</code>.  </p>\n<p> The <code>Like</code> operator is defined only for pattern matching of <code>String</code> operands. Visual Basic attempts to convert each operand as necessary to <code>String</code> before the operation. The result data type is always <code>Boolean</code>.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../data-types/data-type-summary\" data-linktype=\"relative-path\">Data Types</a><br> <a href=\"../../programming-guide/language-features/operators-and-expressions/index\" data-linktype=\"relative-path\">Operators and Expressions</a><br> <a href=\"../../programming-guide/language-features/operators-and-expressions/arithmetic-operators\" data-linktype=\"relative-path\">Arithmetic Operators in Visual Basic</a><br> <a href=\"../../programming-guide/language-features/operators-and-expressions/comparison-operators\" data-linktype=\"relative-path\">Comparison Operators in Visual Basic</a><br> <a href=\"index\" data-linktype=\"relative-path\">Operators</a><br> <a href=\"operator-precedence\" data-linktype=\"relative-path\">Operator Precedence in Visual Basic</a><br> <a href=\"operators-listed-by-functionality\" data-linktype=\"relative-path\">Operators Listed by Functionality</a><br> <a href=\"arithmetic-operators\" data-linktype=\"relative-path\">Arithmetic Operators</a><br> <a href=\"comparison-operators\" data-linktype=\"relative-path\">Comparison Operators</a><br> <a href=\"../statements/option-strict-statement\" data-linktype=\"relative-path\">Option Strict Statement</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"9d524533-e1a1-4aa8-b1b8-622068173d06\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"27\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/operators/data-types-of-operator-results.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/operators/data-types-of-operator-results.md\">\r\n<meta name=\"document_id\" content=\"820316c4-e018-99d3-5557-916839f46938\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Data Types of Operator Results (Visual Basic) | Microsoft Docs","ms.suite":"","ms.assetid":"9d524533-e1a1-4aa8-b1b8-622068173d06","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":27,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["data types [Visual Basic], operator result data types","result data types","operator result data types","operators [Visual Basic], data types","data types [Visual Basic], ranges","operators [Visual Basic], result data types"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/operators/data-types-of-operator-results.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/operators/data-types-of-operator-results.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/language-reference/operators/data-types-of-operator-results.md","document_id":"820316c4-e018-99d3-5557-916839f46938","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/language-reference/operators/data-types-of-operator-results","toc_asset_id":"articles/toc.json","toc_rel":"../../../toc.json","_op_ogTitle":"Data Types of Operator Results (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":1597,"_op_rawTitle":"<h1 id=\"data-types-of-operator-results-visual-basic\" sourcefile=\"docs/visual-basic/language-reference/operators/data-types-of-operator-results.md\" sourcestartlinenumber=\"41\" sourceendlinenumber=\"41\">Data Types of Operator Results (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/language-reference/operators/data-types-of-operator-results","fileRelativePath":"articles/visual-basic/language-reference/operators/data-types-of-operator-results.html"},"themesRelativePathToOutputRoot":"_themes/"}