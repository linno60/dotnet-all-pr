{"content":"<div><div class=\"content\">\n<p>Adds two numbers or returns the positive value of a numeric expression. Can also be used to concatenate two string expressions.  </p>\n<h2 id=\"syntax\">Syntax</h2>\n<pre class=\"loading\"><code>\n      expression1 + expression2  \n- or -  \n+ expression1  \n</code></pre><h2 id=\"parts\">Parts</h2>\n<table>\n<thead>\n<tr>\n<th>Term</th>\n<th>Definition</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>expression1</code></td>\n<td>Required. Any numeric or string expression.</td>\n</tr>\n<tr>\n<td><code>expression2</code></td>\n<td>Required unless the <code>+</code> operator is calculating a negative value. Any numeric or string expression.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"result\">Result</h2>\n<p> If <code>expression1</code> and <code>expression2</code> are both numeric, the result is their arithmetic sum.  </p>\n<p> If <code>expression2</code> is absent, the <code>+</code> operator is the <em>unary</em> identity operator for the unchanged value of an expression. In this sense, the operation consists of retaining the sign of <code>expression1</code>, so the result is negative if <code>expression1</code> is negative.  </p>\n<p> If <code>expression1</code> and <code>expression2</code> are both strings, the result is the concatenation of their values.  </p>\n<p> If <code>expression1</code> and <code>expression2</code> are of mixed types, the action taken depends on their types, their contents, and the setting of the <a href=\"../statements/option-strict-statement\" data-linktype=\"relative-path\">Option Strict Statement</a>. For more information, see the tables in &quot;Remarks.&quot;  </p>\n<h2 id=\"supported-types\">Supported Types</h2>\n<p> All numeric types, including the unsigned and floating-point types and <code>Decimal</code>, and <code>String</code>.  </p>\n<h2 id=\"remarks\">Remarks</h2>\n<p> In general, <code>+</code> performs arithmetic addition when possible, and concatenates only when both expressions are strings.  </p>\n<p> If neither expression is an <code>Object</code>, Visual Basic takes the following actions.  </p>\n<table>\n<thead>\n<tr>\n<th>Data types of expressions</th>\n<th>Action by compiler</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Both expressions are numeric data types (<code>SByte</code>, <code>Byte</code>, <code>Short</code>, <code>UShort</code>, <code>Integer</code>, <code>UInteger</code>, <code>Long</code>, <code>ULong</code>, <code>Decimal</code>, <code>Single</code>, or <code>Double</code>)</td>\n<td>Add. The result data type is a numeric type appropriate for the data types of <code>expression1</code> and <code>expression2</code>. See the &quot;Integer Arithmetic&quot; tables in <a href=\"data-types-of-operator-results\" data-linktype=\"relative-path\">Data Types of Operator Results</a>.</td>\n</tr>\n<tr>\n<td>Both expressions are of type <code>String</code></td>\n<td>Concatenate.</td>\n</tr>\n<tr>\n<td>One expression is a numeric data type and the other is a string</td>\n<td>If <code>Option Strict</code> is <code>On</code>, then generate a compiler error.<br><br> If <code>Option Strict</code> is <code>Off</code>, then implicitly convert the <code>String</code> to <code>Double</code> and add.<br><br> If the <code>String</code> cannot be converted to <code>Double</code>, then throw an <a class=\"xref\" href=\"../../../../api/system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a> exception.</td>\n</tr>\n<tr>\n<td>One expression is a numeric data type, and the other is <a href=\"../nothing\" data-linktype=\"relative-path\">Nothing</a></td>\n<td>Add, with <code>Nothing</code> valued as zero.</td>\n</tr>\n<tr>\n<td>One expression is a string, and the other is <code>Nothing</code></td>\n<td>Concatenate, with <code>Nothing</code> valued as &quot;&quot;.</td>\n</tr>\n</tbody>\n</table>\n<p> If one expression is an <code>Object</code> expression, Visual Basic takes the following actions.  </p>\n<table>\n<thead>\n<tr>\n<th>Data types of expressions</th>\n<th>Action by compiler</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Object</code> expression holds a numeric value and the other is a numeric data type</td>\n<td>If <code>Option Strict</code> is <code>On</code>, then generate a compiler error.<br><br> If <code>Option Strict</code> is <code>Off</code>, then add.</td>\n</tr>\n<tr>\n<td><code>Object</code> expression holds a numeric value and the other is of type <code>String</code></td>\n<td>If <code>Option Strict</code> is <code>On</code>, then generate a compiler error.<br><br> If <code>Option Strict</code> is <code>Off</code>, then implicitly convert the <code>String</code> to <code>Double</code> and add.<br><br> If the <code>String</code> cannot be converted to <code>Double</code>, then throw an <a class=\"xref\" href=\"../../../../api/system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a> exception.</td>\n</tr>\n<tr>\n<td><code>Object</code> expression holds a string and the other is a numeric data type</td>\n<td>If <code>Option Strict</code> is <code>On</code>, then generate a compiler error.<br><br> If <code>Option Strict</code> is <code>Off</code>, then implicitly convert the string <code>Object</code> to <code>Double</code> and add.<br><br> If the string <code>Object</code> cannot be converted to <code>Double</code>, then throw an <a class=\"xref\" href=\"../../../../api/system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a> exception.</td>\n</tr>\n<tr>\n<td><code>Object</code> expression holds a string and the other is of type <code>String</code></td>\n<td>If <code>Option Strict</code> is <code>On</code>, then generate a compiler error.<br><br> If <code>Option Strict</code> is <code>Off</code>, then implicitly convert <code>Object</code> to <code>String</code> and concatenate.</td>\n</tr>\n</tbody>\n</table>\n<p> If both expressions are <code>Object</code> expressions, Visual Basic takes the following actions (<code>Option Strict Off</code> only).  </p>\n<table>\n<thead>\n<tr>\n<th>Data types of expressions</th>\n<th>Action by compiler</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Both <code>Object</code> expressions hold numeric values</td>\n<td>Add.</td>\n</tr>\n<tr>\n<td>Both <code>Object</code> expressions are of type <code>String</code></td>\n<td>Concatenate.</td>\n</tr>\n<tr>\n<td>One <code>Object</code> expression holds a numeric value and the other holds a string</td>\n<td>Implicitly convert the string <code>Object</code> to <code>Double</code> and add.<br><br> If the string <code>Object</code> cannot be converted to a numeric value, then throw an <a class=\"xref\" href=\"../../../../api/system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a> exception.</td>\n</tr>\n</tbody>\n</table>\n<p> If either <code>Object</code> expression evaluates to <a href=\"../nothing\" data-linktype=\"relative-path\">Nothing</a> or <a class=\"xref\" href=\"../../../../api/system.dbnull\" data-linktype=\"relative-path\">DBNull</a>, the <code>+</code> operator treats it as a <code>String</code> with a value of &quot;&quot;.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When you use the <code>+</code> operator, you might not be able to determine whether addition or string concatenation will occur. Use the <code>&amp;</code> operator for concatenation to eliminate ambiguity and to provide self-documenting code.  </p>\n</div>\n<h2 id=\"overloading\">Overloading</h2>\n<p> The <code>+</code> operator can be <em>overloaded</em>, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see <a href=\"../../programming-guide/language-features/procedures/operator-procedures\" data-linktype=\"relative-path\">Operator Procedures</a>.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following example uses the <code>+</code> operator to add numbers. If the operands are both numeric, Visual Basic computes the arithmetic result. The arithmetic result represents the sum of the two operands.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrOperators#6\">        Dim sumNumber As Integer\n        sumNumber = 2 + 2\n        sumNumber = 4257.04 + 98112\n        &#39; The preceding statements set sumNumber to 4 and 102369.\n</code></pre><p> You can also use the <code>+</code> operator to concatenate strings. If the operands are both strings, Visual Basic concatenates them. The concatenation result represents a single string consisting of the contents of the two operands one after the other.  </p>\n<p> If the operands are of mixed types, the result depends on the setting of the <a href=\"../statements/option-strict-statement\" data-linktype=\"relative-path\">Option Strict Statement</a>. The following example illustrates the result when <code>Option Strict</code> is <code>On</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrOperators#53\">Option Strict On\n</code></pre><pre><code class=\"lang-vb\" name=\"VbVbalrOperators#50\">  Dim var1 As String = &quot;34&quot;\n  Dim var2 As Integer = 6\n  Dim concatenatedNumber As Integer = var1 + var2\n</code></pre><pre><code class=\"lang-vb\" name=\"VbVbalrOperators#51\">  &#39; The preceding statement generates a COMPILER ERROR. \n</code></pre><p> The following example illustrates the result when <code>Option Strict</code> is <code>Off</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrOperators#54\">Option Strict Off\n</code></pre><pre><code class=\"lang-vb\" name=\"VbVbalrOperators#50\">  Dim var1 As String = &quot;34&quot;\n  Dim var2 As Integer = 6\n  Dim concatenatedNumber As Integer = var1 + var2\n</code></pre><pre><code class=\"lang-vb\" name=\"VbVbalrOperators#52\">  &#39; The preceding statement returns 40 after the string in var1 is\n  &#39; converted to a numeric value. This might be an unexpected result.\n  &#39; We do not recommend use of Option Strict Off for these operations.\n</code></pre><p> To eliminate ambiguity, you should use the <code>&amp;</code> operator instead of <code>+</code> for concatenation.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"concatenation-operator\" data-linktype=\"relative-path\">&amp; Operator</a><br> <a href=\"concatenation-operators\" data-linktype=\"relative-path\">Concatenation Operators</a><br> <a href=\"arithmetic-operators\" data-linktype=\"relative-path\">Arithmetic Operators</a><br> <a href=\"operators-listed-by-functionality\" data-linktype=\"relative-path\">Operators Listed by Functionality</a><br> <a href=\"operator-precedence\" data-linktype=\"relative-path\">Operator Precedence in Visual Basic</a><br> <a href=\"../../programming-guide/language-features/operators-and-expressions/arithmetic-operators\" data-linktype=\"relative-path\">Arithmetic Operators in Visual Basic</a><br> <a href=\"../statements/option-strict-statement\" data-linktype=\"relative-path\">Option Strict Statement</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"5694778f-0a2c-4539-8009-f66f318fb46d\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"26\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/operators/addition-operator.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/operators/addition-operator.md\">\r\n<meta name=\"document_id\" content=\"cbd0554b-6302-6c02-8218-c7dd08a68ba0\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"+ Operator (Visual Basic) | Microsoft Docs","ms.suite":"","ms.assetid":"5694778f-0a2c-4539-8009-f66f318fb46d","f1_keywords":["vb.+"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":26,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["arithmetic operators, addition","+ operator","concatenation operators, syntax","strings [Visual Basic], concatenating","sum operator"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/operators/addition-operator.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/operators/addition-operator.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/language-reference/operators/addition-operator.md","document_id":"cbd0554b-6302-6c02-8218-c7dd08a68ba0","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/language-reference/operators/addition-operator","toc_asset_id":"articles/toc.json","toc_rel":"../../../toc.json","_op_ogTitle":"+ Operator (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":983,"_op_rawTitle":"<h1 id=\"-operator-visual-basic\" sourcefile=\"docs/visual-basic/language-reference/operators/addition-operator.md\" sourcestartlinenumber=\"42\" sourceendlinenumber=\"42\">+ Operator (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/language-reference/operators/addition-operator","fileRelativePath":"articles/visual-basic/language-reference/operators/addition-operator.html"},"themesRelativePathToOutputRoot":"_themes/"}