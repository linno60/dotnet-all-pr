{"content":"<div><div class=\"content\">\n<p>Raises a number to the power of another number.  </p>\n<h2 id=\"syntax\">Syntax</h2>\n<pre class=\"loading\"><code>\nnumber ^ exponent  \n</code></pre><h2 id=\"parts\">Parts</h2>\n<p> <code>number</code><br> Required. Any numeric expression.  </p>\n<p> <code>exponent</code><br> Required. Any numeric expression.  </p>\n<h2 id=\"result\">Result</h2>\n<p> The result is <code>number</code> raised to the power of <code>exponent</code>, always as a <code>Double</code> value.  </p>\n<h2 id=\"supported-types\">Supported Types</h2>\n<p> <code>Double</code>. Operands of any different type are converted to <code>Double</code>.  </p>\n<h2 id=\"remarks\">Remarks</h2>\n<p> Visual Basic always performs exponentiation in the <a href=\"../data-types/double-data-type\" data-linktype=\"relative-path\">Double Data Type</a>.  </p>\n<p> The value of <code>exponent</code> can be fractional, negative, or both.  </p>\n<p> When more than one exponentiation is performed in a single expression, the <code>^</code> operator is evaluated as it is encountered from left to right.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>^</code> operator can be <em>overloaded</em>, which means that a class or structure can redefine its behavior when an operand has the type of that class or structure. If your code uses this operator on such a class or structure, be sure you understand its redefined behavior. For more information, see <a href=\"../../programming-guide/language-features/procedures/operator-procedures\" data-linktype=\"relative-path\">Operator Procedures</a>.  </p>\n</div>\n<h2 id=\"example\">Example</h2>\n<p> The following example uses the <code>^</code> operator to raise a number to the power of an exponent. The result is the first operand raised to the power of the second.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrOperators#20\">Dim exp1, exp2, exp3, exp4, exp5, exp6 As Double\nexp1 = 2 ^ 2\nexp2 = 3 ^ 3 ^ 3\nexp3 = (-5) ^ 3\nexp4 = (-5) ^ 4\nexp5 = 8 ^ (1.0 / 3.0)\nexp6 = 8 ^ (-1.0 / 3.0)\n</code></pre><p> The preceding example produces the following results:  </p>\n<p> <code>exp1</code> is set to 4 (2 squared).  </p>\n<p> <code>exp2</code> is set to 19683 (3 cubed, then that value cubed).  </p>\n<p> <code>exp3</code> is set to -125 (-5 cubed).  </p>\n<p> <code>exp4</code> is set to 625 (-5 to the fourth power).  </p>\n<p> <code>exp5</code> is set to 2 (cube root of 8).  </p>\n<p> <code>exp6</code> is set to 0.5 (1.0 divided by the cube root of 8).  </p>\n<p> Note the importance of the parentheses in the expressions in the preceding example. Because of <em>operator precedence</em>, Visual Basic normally performs the <code>^</code> operator before any others, even the unary <code>–</code> operator. If <code>exp4</code> and <code>exp6</code> had been calculated without parentheses, they would have produced the following results:  </p>\n<p> <code>exp4 = -5 ^ 4</code> would be calculated as –(5 to the fourth power), which would result in -625.  </p>\n<p> <code>exp6 = 8 ^ -1.0 / 3.0</code> would be calculated as (8 to the –1 power, or 0.125) divided by 3.0, which would result in 0.041666666666666666666666666666667.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"exponentiation-assignment-operator\" data-linktype=\"relative-path\">^= Operator</a><br> <a href=\"arithmetic-operators\" data-linktype=\"relative-path\">Arithmetic Operators</a><br> <a href=\"operator-precedence\" data-linktype=\"relative-path\">Operator Precedence in Visual Basic</a><br> <a href=\"operators-listed-by-functionality\" data-linktype=\"relative-path\">Operators Listed by Functionality</a><br> <a href=\"../../programming-guide/language-features/operators-and-expressions/arithmetic-operators\" data-linktype=\"relative-path\">Arithmetic Operators in Visual Basic</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"d89a1ca8-83da-4784-a87b-a9d7dceb3f62\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"14\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/operators/exponentiation-operator.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/operators/exponentiation-operator.md\">\r\n<meta name=\"document_id\" content=\"0f1998b1-da6e-aac8-45e0-f2f89ed1d046\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../../toc1.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"^ Operator (Visual Basic) | Microsoft Docs","ms.suite":"","ms.assetid":"d89a1ca8-83da-4784-a87b-a9d7dceb3f62","f1_keywords":["vb.^"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":14,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["raising numbers to powers","^ operator [Visual Basic], exponention","square operator","^ operator [Visual Basic]","exponentiation operator [Visual Basic]","exponent","numbers, rasing","powers","arithmetic operators, exponentiation"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/operators/exponentiation-operator.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/operators/exponentiation-operator.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/language-reference/operators/exponentiation-operator.md","document_id":"0f1998b1-da6e-aac8-45e0-f2f89ed1d046","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/language-reference/operators/exponentiation-operator","toc_asset_id":"articles/toc.json","toc_rel":"../../../toc.json","_op_ogTitle":"^ Operator (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":404,"_op_rawTitle":"<h1 id=\"-operator-visual-basic\" sourcefile=\"docs/visual-basic/language-reference/operators/exponentiation-operator.md\" sourcestartlinenumber=\"46\" sourceendlinenumber=\"46\">^ Operator (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/language-reference/operators/exponentiation-operator","fileRelativePath":"articles/visual-basic/language-reference/operators/exponentiation-operator.html"},"themesRelativePathToOutputRoot":"_themes/"}