{"content":"<div><div class=\"content\">\n<p>Holds signed 128-bit (16-byte) values representing 96-bit (12-byte) integer numbers scaled by a variable power of 10. The scaling factor specifies the number of digits to the right of the decimal point; it ranges from 0 through 28. With a scale of 0 (no decimal places), the largest possible value is +/-79,228,162,514,264,337,593,543,950,335 (+/-7.9228162514264337593543950335E+28). With 28 decimal places, the largest value is +/-7.9228162514264337593543950335, and the smallest nonzero value is +/-0.0000000000000000000000000001 (+/-1E-28).  </p>\n<h2 id=\"remarks\">Remarks</h2>\n<p> The <code>Decimal</code> data type provides the greatest number of significant digits for a number. It supports up to 29 significant digits and can represent values in excess of 7.9228 x 10^28. It is particularly suitable for calculations, such as financial, that require a large number of digits but cannot tolerate rounding errors.  </p>\n<p> The default value of <code>Decimal</code> is 0.  </p>\n<h2 id=\"programming-tips\">Programming Tips</h2>\n<ul>\n<li><p><strong>Precision.</strong> <code>Decimal</code> is not a floating-point data type. The <code>Decimal</code> structure holds a binary integer value, together with a sign bit and an integer scaling factor that specifies what portion of the value is a decimal fraction. Because of this, <code>Decimal</code> numbers have a more precise representation in memory than floating-point types (<code>Single</code> and <code>Double</code>).  </p>\n</li>\n<li><p><strong>Performance.</strong> The <code>Decimal</code> data type is the slowest of all the numeric types. You should weigh the importance of precision against performance before choosing a data type.  </p>\n</li>\n<li><p><strong>Widening.</strong> The <code>Decimal</code> data type widens to <code>Single</code> or <code>Double</code>. This means you can convert <code>Decimal</code> to either of these types without encountering a <a class=\"xref\" href=\"../../../../api/system.overflowexception\" data-linktype=\"relative-path\">System.OverflowException</a> error.  </p>\n</li>\n<li><p><strong>Trailing Zeros.</strong> Visual Basic does not store trailing zeros in a <code>Decimal</code> literal. However, a <code>Decimal</code> variable preserves any trailing zeros acquired computationally. The following example illustrates this.  </p>\n<pre class=\"loading\"><code>Dim d1, d2, d3, d4 As Decimal  \nd1 = 2.375D  \nd2 = 1.625D  \nd3 = d1 + d2  \nd4 = 4.000D  \nMsgBox(&quot;d1 = &quot; &amp; CStr(d1) &amp; &quot;, d2 = &quot; &amp; CStr(d2) &amp;  \n      &quot;, d3 = &quot; &amp; CStr(d3) &amp; &quot;, d4 = &quot; &amp; CStr(d4))  \n</code></pre><p> The output of <code>MsgBox</code> in the preceding example is as follows:  </p>\n<p> d1 = 2.375, d2 = 1.625, d3 = 4.000, d4 = 4  </p>\n</li>\n<li><p><strong>Type Characters.</strong> Appending the literal type character <code>D</code> to a literal forces it to the <code>Decimal</code> data type. Appending the identifier type character <code>@</code> to any identifier forces it to <code>Decimal</code>.  </p>\n</li>\n<li><p><strong>Framework Type.</strong> The corresponding type in the .NET Framework is the <a class=\"xref\" href=\"../../../../api/system.decimal\" data-linktype=\"relative-path\">System.Decimal</a> structure.  </p>\n</li>\n</ul>\n<h2 id=\"range\">Range</h2>\n<p> You might need to use the <code>D</code> type character to assign a large value to a <code>Decimal</code> variable or constant. This requirement is because the compiler interprets a literal as <code>Long</code> unless a literal type character follows the literal, as the following example shows.  </p>\n<pre class=\"loading\"><code>Dim bigDec1 As Decimal = 9223372036854775807   &#39; No overflow.  \nDim bigDec2 As Decimal = 9223372036854775808   &#39; Overflow.  \nDim bigDec3 As Decimal = 9223372036854775808D  &#39; No overflow.  \n</code></pre><p> The declaration for <code>bigDec1</code> doesn&#39;t produce an overflow because the value that&#39;s assigned to it falls within the range for <code>Long</code>. The <code>Long</code> value can be assigned to the <code>Decimal</code> variable.  </p>\n<p> The declaration for <code>bigDec2</code> generates an overflow error because the value that&#39;s assigned to it is too large for <code>Long</code>. Because the numeric literal can&#39;t first be interpreted as a <code>Long</code>, it can&#39;t be assigned to the <code>Decimal</code> variable.  </p>\n<p> For <code>bigDec3</code>, the literal type character <code>D</code> solves the problem by forcing the compiler to interpret the literal as a <code>Decimal</code> instead of as a <code>Long</code>.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../api/system.decimal\" data-linktype=\"relative-path\">System.Decimal</a><br> <a class=\"xref\" href=\"../../../../api/system.decimal#System_Decimal__ctor_\" data-linktype=\"relative-path\">Decimal</a><br> <a class=\"xref\" href=\"../../../../api/system.math#System_Math_Round_\" data-linktype=\"relative-path\">Round</a><br> <a href=\"data-type-summary\" data-linktype=\"relative-path\">Data Types</a><br> <a href=\"single-data-type\" data-linktype=\"relative-path\">Single Data Type</a><br> <a href=\"double-data-type\" data-linktype=\"relative-path\">Double Data Type</a><br> <a href=\"../functions/type-conversion-functions\" data-linktype=\"relative-path\">Type Conversion Functions</a><br> <a href=\"../keywords/conversion-summary\" data-linktype=\"relative-path\">Conversion Summary</a><br> <a href=\"../../programming-guide/language-features/data-types/efficient-use-of-data-types\" data-linktype=\"relative-path\">Efficient Use of Data Types</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"1d855b45-afe2-45b0-a623-96b6f63a43d5\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"20\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/data-types/decimal-data-type.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/data-types/decimal-data-type.md\">\r\n<meta name=\"document_id\" content=\"2aa845c0-f7ec-eeba-4609-d683f06a4b1e\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Decimal Data Type (Visual Basic) | Microsoft Docs","ms.suite":"","ms.assetid":"1d855b45-afe2-45b0-a623-96b6f63a43d5","f1_keywords":["vb.Decimal"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":20,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["literal type characters, D","trailing zeros","real numbers","trailing 0 characters","Decimal data type","D literal type character","decimals, Decimal data type","0 characters, trailing","data types [Visual Basic], assigning","decimal keyword","numbers, real","variable-precision numbers","zeros, trailing","@ identifier type character","identifier type characters, @"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/data-types/decimal-data-type.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/language-reference/data-types/decimal-data-type.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/language-reference/data-types/decimal-data-type.md","document_id":"2aa845c0-f7ec-eeba-4609-d683f06a4b1e","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/language-reference/data-types/decimal-data-type","toc_asset_id":"articles/toc.json","toc_rel":"../../../toc.json","_op_ogTitle":"Decimal Data Type (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":567,"_op_rawTitle":"<h1 id=\"decimal-data-type-visual-basic\" sourcefile=\"docs/visual-basic/language-reference/data-types/decimal-data-type.md\" sourcestartlinenumber=\"52\" sourceendlinenumber=\"52\">Decimal Data Type (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/language-reference/data-types/decimal-data-type","fileRelativePath":"articles/visual-basic/language-reference/data-types/decimal-data-type.html"},"themesRelativePathToOutputRoot":"_themes/"}