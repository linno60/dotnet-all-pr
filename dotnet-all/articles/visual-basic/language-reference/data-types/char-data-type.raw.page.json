{"content":"<div><div class=\"content\">\n<p>Holds unsigned 16-bit (2-byte) code points ranging in value from 0 through 65535. Each <em>code point</em>, or character code, represents a single Unicode character.  </p>\n<h2 id=\"remarks\">Remarks</h2>\n<p> Use the <code>Char</code> data type when you need to hold only a single character and do not need the overhead of <code>String</code>. In some cases you can use <code>Char()</code>, an array of <code>Char</code> elements, to hold multiple characters.  </p>\n<p> The default value of <code>Char</code> is the character with a code point of 0.  </p>\n<h2 id=\"unicode-characters\">Unicode Characters</h2>\n<p> The first 128 code points (0–127) of Unicode correspond to the letters and symbols on a standard U.S. keyboard. These first 128 code points are the same as those the ASCII character set defines. The second 128 code points (128–255) represent special characters, such as Latin-based alphabet letters, accents, currency symbols, and fractions. Unicode uses the remaining code points (256-65535) for a wide variety of symbols, including worldwide textual characters, diacritics, and mathematical and technical symbols.  </p>\n<p> You can use methods like <a class=\"xref\" href=\"../../../../api/system.char#System_Char_IsDigit_\" data-linktype=\"relative-path\">IsDigit</a> and <a class=\"xref\" href=\"../../../../api/system.char#System_Char_IsPunctuation_\" data-linktype=\"relative-path\">IsPunctuation</a> on a <code>Char</code> variable to determine its Unicode classification.  </p>\n<h2 id=\"type-conversions\">Type Conversions</h2>\n<p> Visual Basic does not convert directly between <code>Char</code> and the numeric types. You can use the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/4h55zayc(v=vs.110).aspx\" data-linktype=\"external\">Asc</a> or <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/54z4cabe(v=vs.110).aspx\" data-linktype=\"external\">AscW</a> function to convert a <code>Char</code> value to an <code>Integer</code> that represents its code point. You can use the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/xwsbf896(v=vs.110).aspx\" data-linktype=\"external\">Chr</a> or <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/x7adayzk(v=vs.110).aspx\" data-linktype=\"external\">ChrW</a> function to convert an <code>Integer</code> value to a <code>Char</code> that has that code point.  </p>\n<p> If the type checking switch (<a href=\"../statements/option-strict-statement\" data-linktype=\"relative-path\">Option Strict Statement</a>) is on, you must append the literal type character to a single-character string literal to identify it as the <code>Char</code> data type. The following example illustrates this.  </p>\n<pre class=\"loading\"><code>Option Strict On  \nDim charVar As Char  \n&#39; The following statement attempts to convert a String literal to Char.  \n&#39; Because Option Strict is On, it generates a compiler error.  \ncharVar = &quot;Z&quot;  \n&#39; The following statement succeeds because it specifies a Char literal.  \ncharVar = &quot;Z&quot;C  \n</code></pre><h2 id=\"programming-tips\">Programming Tips</h2>\n<ul>\n<li><p><strong>Negative Numbers.</strong> <code>Char</code> is an unsigned type and cannot represent a negative value. In any case, you should not use <code>Char</code> to hold numeric values.  </p>\n</li>\n<li><p><strong>Interop Considerations.</strong> If you interface with components not written for the .NET Framework, for example Automation or COM objects, remember that character types have a different data width (8 bits) in other environments. If you pass an 8-bit argument to such a component, declare it as <code>Byte</code> instead of <code>Char</code> in your new Visual Basic code.  </p>\n</li>\n<li><p><strong>Widening.</strong> The <code>Char</code> data type widens to <code>String</code>. This means you can convert <code>Char</code> to <code>String</code> and will not encounter a <a class=\"xref\" href=\"../../../../api/system.overflowexception\" data-linktype=\"relative-path\">System.OverflowException</a> error.  </p>\n</li>\n<li><p><strong>Type Characters.</strong> Appending the literal type character <code>C</code> to a single-character string literal forces it to the <code>Char</code> data type. <code>Char</code> has no identifier type character.  </p>\n</li>\n<li><p><strong>Framework Type.</strong> The corresponding type in the .NET Framework is the <a class=\"xref\" href=\"../../../../api/system.char\" data-linktype=\"relative-path\">System.Char</a> structure.  </p>\n</li>\n</ul>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../api/system.char\" data-linktype=\"relative-path\">System.Char</a><br> <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/4h55zayc(v=vs.110).aspx\" data-linktype=\"external\">Asc</a><br> <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/54z4cabe(v=vs.110).aspx\" data-linktype=\"external\">AscW</a><br> <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/xwsbf896(v=vs.110).aspx\" data-linktype=\"external\">Chr</a><br> <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/x7adayzk(v=vs.110).aspx\" data-linktype=\"external\">ChrW</a><br> <a href=\"data-type-summary\" data-linktype=\"relative-path\">Data Types</a><br> <a href=\"string-data-type\" data-linktype=\"relative-path\">String Data Type</a><br> <a href=\"../functions/type-conversion-functions\" data-linktype=\"relative-path\">Type Conversion Functions</a><br> <a href=\"../keywords/conversion-summary\" data-linktype=\"relative-path\">Conversion Summary</a><br> <a href=\"../../programming-guide/com-interop/how-to-call-a-windows-function-that-takes-unsigned-types\" data-linktype=\"relative-path\">How to: Call a Windows Function that Takes Unsigned Types</a><br> <a href=\"../../programming-guide/language-features/data-types/efficient-use-of-data-types\" data-linktype=\"relative-path\">Efficient Use of Data Types</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"cd7547a9-7855-4e8e-b216-35d74a362657\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"17\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-21 01:42 AM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/data-types/char-data-type.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/visual-basic/language-reference/data-types/char-data-type.md\">\r\n<meta name=\"document_id\" content=\"455b2399-8b64-8b87-4c12-2f1dd5f0756e\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../../toc.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Char Data Type (Visual Basic) | Microsoft Docs","ms.suite":"","ms.assetid":"cd7547a9-7855-4e8e-b216-35d74a362657","f1_keywords":["vb.Char"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":17,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["literal type characters, C","Char data type","C literal type character","data types [Visual Basic], assigning","Char data type, character literals"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-21 01:42 AM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/21/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/language-reference/data-types/char-data-type.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/visual-basic/language-reference/data-types/char-data-type.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/language-reference/data-types/char-data-type.md","document_id":"455b2399-8b64-8b87-4c12-2f1dd5f0756e","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/language-reference/data-types/char-data-type","toc_asset_id":"articles/toc.json","toc_rel":"../../../toc.json","_op_ogTitle":"Char Data Type (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":474,"_op_rawTitle":"<h1 id=\"char-data-type-visual-basic\" sourcefile=\"docs/visual-basic/language-reference/data-types/char-data-type.md\" sourcestartlinenumber=\"42\" sourceendlinenumber=\"42\">Char Data Type (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/language-reference/data-types/char-data-type","fileRelativePath":"articles/visual-basic/language-reference/data-types/char-data-type.html"},"themesRelativePathToOutputRoot":"_themes/"}