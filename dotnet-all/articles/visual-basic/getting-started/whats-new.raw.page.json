{"content":"<div><div class=\"content\">\n<p>This page lists key feature names for each version of Visual Basic with descriptions of the new and enhanced features in the lastest version of the language.  </p>\n<h2 id=\"previous-versions\">Previous versions</h2>\n<p> Visual Basic / Visual Studio .NET 2002<br> First release  </p>\n<p> Visual Basic / Visual Studio .NET 2003<br> Bit shift operators, loop variable declaration  </p>\n<p> Visual Basic / Visual Studio .NET 2005<br> <code>My</code> type and helper types (access to app, computer, files system, network  </p>\n<p> Visual Basic / Visual Studio .NET 2008<br> Language Integrated Query (LINQ), XML literals, local type inference, object initializers, anonymous types, extension methods, local <code>var</code> type inference, lambda expressions, <code>if</code> operator, partial methods, nullable value types  </p>\n<p> Visual Basic, Visual Studio .NET 2010<br> Auto-implemented properties, collection initializers, implicit line continuation, dynamic, generic co/contra variance, global namespace access  </p>\n<p> Visual Basic / Visual Studio .NET 2012<br> <code>Async</code> / <code>await</code>, iterators, caller info attributes  </p>\n<p> Visual Basic / Visual Studio .NET 2013<br> technology previews of .NET Compiler Platform (“Roslyn”)  </p>\n<p> Visual Basic / Visual Studio .NET 2015<br> Current version, see below  </p>\n<h2 id=\"current-version\">Current version</h2>\n<p> <a href=\"../../csharp/language-reference/keywords/nameof\" data-linktype=\"relative-path\">Nameof</a><br> You can get the unqualified string name of a type or member for use in an error message without hard coding a string.  This allows your code to remain correct when refactoring.  This feature is also useful for hooking up model-view-controller MVC links and firing property changed events.  </p>\n<p> <a href=\"../../csharp/language-reference/keywords/interpolated-strings\" data-linktype=\"relative-path\">String Interpolation</a><br> You can use string interpolation expressions to construct strings.  An interpolated string expression looks like a template string that contains expressions.  An interpolated string is easier to understand with respect to arguments than <a href=\"../../standard/base-types/composite-format\" data-linktype=\"relative-path\">Composite Formatting</a>.  </p>\n<p> <a href=\"../../csharp/language-reference/operators/null-conditional-operators\" data-linktype=\"relative-path\">Null-conditional Member Access and Indexing</a><br> You can test for null in a very light syntactic way before performing a member access (<code>?.</code>) or index (<code>?[]</code>) operation.  These operators help you write less code to handle null checks, especially for descending into data structures.  If the left operand or object reference is null, the operations returns null.  </p>\n<p> <a href=\"../programming-guide/language-features/strings/string-basics\" data-linktype=\"relative-path\">Multi-line String Literals</a><br> String literals can contain newline sequences.  You no longer need the old work around of using <code>&lt;xml&gt;&lt;![CDATA[...text with newlines...]]&gt;&lt;/xml&gt;.Value</code>  </p>\n<p> Comments<br> You can put comments after implicit line continuations, inside initializer expressions, and amongst LINQ expression terms.  </p>\n<p> Smarter Fully-qualified Name Resolution<br> Given code such as <code>Threading.Thread.Sleep(1000)</code>, Visual Basic used to look up the namespace &quot;Threading&quot;, discover it was ambiguous between System.Threading and System.Windows.Threading, and then report an error.  Visual Basic now considers both possible namespaces together.  If you show the completion list, the Visual Studio editor lists members from both types in the completion list.  </p>\n<p> Year-first Date Literals<br> You can have date literals in yyyy-mm-dd format, <code>#2015-03-17 16:10 PM#</code>.  </p>\n<p> Readonly Interface Properties<br> You can implement readonly interface properties using a readwrite property.  The interface guarantees minimum functionality, and it does not stop an implementing class from allowing the property to be set.  </p>\n<p> <a href=\"../language-reference/operators/typeof-operator\" data-linktype=\"relative-path\">TypeOf &lt;expr&gt; IsNot &lt;type&gt;</a><br> For more readability of your code, you can now use <code>TypeOf</code> with <code>IsNot</code>.  </p>\n<p> <a href=\"../language-reference/directives/directives\" data-linktype=\"relative-path\">#Disable Warning &lt;ID&gt; and #Enable Warning &lt;ID&gt;</a><br> You can disable and enable specific warnings for regions within a source file.  </p>\n<p> XML Doc-comment Improvements<br> When writing doc comments, you get smart editor and build support for validating parameter names, proper handling of <code>crefs</code> (generics, operators, etc.), colorizing, and refactoring.  </p>\n<p> <a href=\"../language-reference/modifiers/partial\" data-linktype=\"relative-path\">Partial Module and Interface Definitions</a><br> In addition to classes and structs, you can declare partial modules and interfaces.  </p>\n<p> <a href=\"../language-reference/directives/region-directive\" data-linktype=\"relative-path\">#Region Directives inside Method Bodies</a><br> You can put #Region…#End Region delimiters anywhere in a file, inside functions, and even spanning across function bodies.  </p>\n<p> <a href=\"../language-reference/modifiers/overrides\" data-linktype=\"relative-path\">Overrides Definitions are Implicitly Overloads</a><br> If you add the <code>Overrides</code> modifier to a definition, the compiler implicitly adds <code>Overloads</code> so that you can type less code in common cases.  </p>\n<p> CObj Allowed in Attributes Arguments<br> The compiler used to give an error that CObj(…) was not a constant when used in attribute constructions.  </p>\n<p> Declaring and Consuming Ambiguous Methods from Different Interfaces<br> Previously the following code yielded errors that prevented you from declaring <code>IMock</code> or from calling <code>GetDetails</code> (if these had been declared in C#):  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Interface ICustomer  \n  Sub GetDetails(x As Integer)  \nEnd Interface  \n\nInterface ITime  \n  Sub GetDetails(x As String)  \nEnd Interface  \n\nInterface IMock : Inherits ICustomer, ITime  \n  Overloads Sub GetDetails(x As Char)  \nEnd Interface  \n\nInterface IMock2 : Inherits ICustomer, ITime  \nEnd Interface  \n</code></pre><p> Now the compiler will use normal overload resolution rules to choose the most appropriate <code>GetDetails</code> to call, and you can declare interface relationships in Visual Basic like those shown in the sample.  </p>\n<h2 id=\"see-also\">See also</h2>\n<p> <a href=\"https://docs.microsoft.com/en-us/visualstudio/ide/whats-new-in-visual-studio\" data-linktype=\"external\">What&#39;s New in Visual Studio 2017</a></p>\n</div></div>","outputRootRelativePath":"../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet/toc2.json\">\r\n<meta name=\"ms.assetid\" content=\"d7e97396-7f42-4873-a81c-4ebcc4b6ca02\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"145\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/getting-started/whats-new.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/getting-started/whats-new.md\">\r\n<meta name=\"document_id\" content=\"0723e06f-ffca-5128-b34f-12940a2c0021\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"What's new for Visual Basic | Microsoft Docs","ms.assetid":"d7e97396-7f42-4873-a81c-4ebcc4b6ca02","f1_keywords":["VB.StartPage.WhatsNew"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":145,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["new features, Visual Basic","what's new [Visual Basic]","Visual Basic, what's new"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Absolute urls and other fixes (#1281)","commit_sha":"f7dffe4885b331cec8d37f3cc5c9163f69c3b4c9","commit_date":"2016-11-22 12:57:26 -0800"},{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Fixes miscellaneous issues in VB content (#1268)","commit_sha":"0ca80554a76b1162be2607a073c5b94e31c7a834","commit_date":"2016-11-22 09:44:20 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/getting-started/whats-new.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/getting-started/whats-new.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/getting-started/whats-new.md","document_id":"0723e06f-ffca-5128-b34f-12940a2c0021","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/getting-started/whats-new","toc_asset_id":"articles/toc.json","toc_rel":"../../toc.json","_op_ogTitle":"What's new for Visual Basic","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":714,"_op_rawTitle":"<h1 id=\"whats-new-for-visual-basic\" sourcefile=\"docs/visual-basic/getting-started/whats-new.md\" sourcestartlinenumber=\"40\" sourceendlinenumber=\"40\">What&#39;s new for Visual Basic</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/getting-started/whats-new","fileRelativePath":"articles/visual-basic/getting-started/whats-new.html"},"themesRelativePathToOutputRoot":"_themes/"}