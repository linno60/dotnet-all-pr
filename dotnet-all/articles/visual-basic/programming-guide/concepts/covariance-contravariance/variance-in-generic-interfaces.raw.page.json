{"content":"<div><div class=\"content\">\n<p>.NET Framework 4 introduced variance support for several existing generic interfaces. Variance support enables implicit conversion of classes that implement these interfaces. The following interfaces are now variant:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"../../../../../api/system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> (T is covariant)  </p>\n</li>\n<li><p><a class=\"xref\" href=\"../../../../../api/system.collections.generic.ienumerator-1\" data-linktype=\"relative-path\">IEnumerator&lt;T&gt;</a> (T is covariant)  </p>\n</li>\n<li><p><a class=\"xref\" href=\"../../../../../api/system.linq.iqueryable-1\" data-linktype=\"relative-path\">IQueryable&lt;T&gt;</a> (T is covariant)  </p>\n</li>\n<li><p><a class=\"xref\" href=\"../../../../../api/system.linq.igrouping-2\" data-linktype=\"relative-path\">IGrouping&lt;TKey,TElement&gt;</a> (<code>TKey</code> and <code>TElement</code> are covariant)  </p>\n</li>\n<li><p><a class=\"xref\" href=\"../../../../../api/system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer&lt;T&gt;</a> (T is contravariant)  </p>\n</li>\n<li><p><a class=\"xref\" href=\"../../../../../api/system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer&lt;T&gt;</a> (T is contravariant)  </p>\n</li>\n<li><p><a class=\"xref\" href=\"../../../../../api/system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a> (T is contravariant)  </p>\n<p>Covariance permits a method to have a more derived return type than that defined by the generic type parameter of the interface. To illustrate the covariance feature, consider these generic interfaces: <code>IEnumerable(Of Object)</code> and <code>IEnumerable(Of String)</code>. The <code>IEnumerable(Of String)</code> interface does not inherit the <code>IEnumerable(Of Object)</code> interface. However, the <code>String</code> type does inherit the <code>Object</code> type, and in some cases you may want to assign objects of these interfaces to each other. This is shown in the following code example.  </p>\n</li>\n</ul>\n<pre class=\"loading\"><code class=\"lang-vb\">Dim strings As IEnumerable(Of String) = New List(Of String)  \nDim objects As IEnumerable(Of Object) = strings  \n</code></pre><p> In earlier versions of the .NET Framework, this code causes a compilation error in Visual Basic with <code>Option Strict On</code>. But now you can use <code>strings</code> instead of <code>objects</code>, as shown in the previous example, because the <a class=\"xref\" href=\"../../../../../api/system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> interface is covariant.  </p>\n<p> Contravariance permits a method to have argument types that are less derived than that specified by the generic parameter of the interface. To illustrate contravariance, assume that you have created a <code>BaseComparer</code> class to compare instances of the <code>BaseClass</code> class. The <code>BaseComparer</code> class implements the <code>IEqualityComparer(Of BaseClass)</code> interface. Because the <a class=\"xref\" href=\"../../../../../api/system.collections.generic.iequalitycomparer-1\" data-linktype=\"relative-path\">IEqualityComparer&lt;T&gt;</a> interface is now contravariant, you can use <code>BaseComparer</code> to compare instances of classes that inherit the <code>BaseClass</code> class. This is shown in the following code example.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">&#39; Simple hierarchy of classes.  \nClass BaseClass  \nEnd Class  \n\nClass DerivedClass  \n    Inherits BaseClass  \nEnd Class  \n\n&#39; Comparer class.  \nClass BaseComparer  \n    Implements IEqualityComparer(Of BaseClass)  \n\n    Public Function Equals1(ByVal x As BaseClass,  \n                            ByVal y As BaseClass) As Boolean _  \n                            Implements IEqualityComparer(Of BaseClass).Equals  \n        Return (x.Equals(y))  \n    End Function  \n\n    Public Function GetHashCode1(ByVal obj As BaseClass) As Integer _  \n        Implements IEqualityComparer(Of BaseClass).GetHashCode  \n        Return obj.GetHashCode  \n    End Function  \nEnd Class  \nSub Test()  \n    Dim baseComparer As IEqualityComparer(Of BaseClass) = New BaseComparer  \n    &#39; Implicit conversion of IEqualityComparer(Of BaseClass) to   \n    &#39; IEqualityComparer(Of DerivedClass).  \n    Dim childComparer As IEqualityComparer(Of DerivedClass) = baseComparer  \nEnd Sub  \n</code></pre><p> For more examples, see <a href=\"using-variance-in-interfaces-for-generic-collections\" data-linktype=\"relative-path\">Using Variance in Interfaces for Generic Collections (Visual Basic)</a>.  </p>\n<p> Variance in generic interfaces is supported for reference types only. Value types do not support variance. For example, <code>IEnumerable(Of Integer)</code> cannot be implicitly converted to <code>IEnumerable(Of Object)</code>, because integers are represented by a value type.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Dim integers As IEnumerable(Of Integer) = New List(Of Integer)  \n&#39; The following statement generates a compiler error  \n&#39; with Option Strict On, because Integer is a value type.  \n&#39; Dim objects As IEnumerable(Of Object) = integers  \n</code></pre><p> It is also important to remember that classes that implement variant interfaces are still invariant. For example, although <a class=\"xref\" href=\"../../../../../api/system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> implements the covariant interface <a class=\"xref\" href=\"../../../../../api/system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>, you cannot implicitly convert <code>List(Of Object)</code> to <code>List(Of String)</code>. This is illustrated in the following code example.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">&#39; The following statement generates a compiler error  \n&#39; because classes are invariant.  \n&#39; Dim list As List(Of Object) = New List(Of String)  \n\n&#39; You can use the interface object instead.  \nDim listObjects As IEnumerable(Of Object) = New List(Of String)  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"using-variance-in-interfaces-for-generic-collections\" data-linktype=\"relative-path\">Using Variance in Interfaces for Generic Collections (Visual Basic)</a><br> <a href=\"creating-variant-generic-interfaces\" data-linktype=\"relative-path\">Creating Variant Generic Interfaces (Visual Basic)</a><br> <a href=\"http://msdn.microsoft.com/library/88bf5b04-d371-4edb-ba38-01ec7cabaacf\" data-linktype=\"external\">Generic Interfaces</a><br> <a href=\"variance-in-delegates\" data-linktype=\"relative-path\">Variance in Delegates (Visual Basic)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.tgt_pltfrm\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"cf4096d0-4bb3-45a9-9a6b-f01e29a60333\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:46 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/401ac8986dee5f9f1504fb6c4e1f627d87f0f236/docs/visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-generic-interfaces.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-generic-interfaces.md\">\r\n<meta name=\"document_id\" content=\"e1f61d36-3f53-e469-1fac-e8877a4c7388\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","uhfHeaderId":"MSDocsHeader-DotNet","title":"Variance in Generic Interfaces (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.tgt_pltfrm":"","ms.assetid":"cf4096d0-4bb3-45a9-9a6b-f01e29a60333","caps.latest.revision":3,"ms.topic":"article","dev_langs":["vb"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"tompratt-AQ","author_email":"v-thprat@microsoft.com","committer_name":"Maira Wenzel","comitter_email":"mairaw@microsoft.com","message":"Added missing samples to migrated topics (#1733)","commit_sha":"401ac8986dee5f9f1504fb6c4e1f627d87f0f236","commit_date":"2017-03-17 01:04:44 -0700"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-04-01 05:46 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/tompratt-AQ","display_name":"tompratt-AQ","id":"26311438"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"4/1/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/401ac8986dee5f9f1504fb6c4e1f627d87f0f236/docs/visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-generic-interfaces.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-generic-interfaces.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-generic-interfaces.md","document_id":"e1f61d36-3f53-e469-1fac-e8877a4c7388","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-generic-interfaces","toc_asset_id":"articles/visual-basic/programming-guide/concepts/covariance-contravariance/toc.json","toc_rel":"toc.json","_op_ogTitle":"Variance in Generic Interfaces (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":540,"_op_rawTitle":"<h1 id=\"variance-in-generic-interfaces-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-generic-interfaces.md\" sourcestartlinenumber=\"25\" sourceendlinenumber=\"25\">Variance in Generic Interfaces (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-generic-interfaces","fileRelativePath":"articles/visual-basic/programming-guide/concepts/covariance-contravariance/variance-in-generic-interfaces.html"},"themesRelativePathToOutputRoot":"_themes/"}