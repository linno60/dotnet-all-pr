{"content":"<div><div class=\"content\">\n<p>A covariant interface allows its methods to return more derived types than those specified in the interface. A contravariant interface allows its methods to accept parameters of less derived types than those specified in the interface.  </p>\n<p> In .NET Framework 4, several existing interfaces became covariant and contravariant. These include <a class=\"xref\" href=\"../../../../../api/system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> and <a class=\"xref\" href=\"../../../../../api/system.icomparable-1\" data-linktype=\"relative-path\">IComparable&lt;T&gt;</a>. This enables you to reuse methods that operate with generic collections of base types for collections of derived types.  </p>\n<p> For a list of variant interfaces in the .NET Framework, see <a href=\"variance-in-generic-interfaces\" data-linktype=\"relative-path\">Variance in Generic Interfaces (Visual Basic)</a>.  </p>\n<h2 id=\"converting-generic-collections\">Converting Generic Collections</h2>\n<p> The following example illustrates the benefits of covariance support in the <a class=\"xref\" href=\"../../../../../api/system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> interface. The <code>PrintFullName</code> method accepts a collection of the <code>IEnumerable(Of Person)</code> type as a parameter. However, you can reuse it for a collection of the <code>IEnumerable(Of Person)</code> type because <code>Employee</code> inherits <code>Person</code>.  </p>\n<p><codecontentplaceholder>0</codecontentplaceholder>  </p>\n<h2 id=\"comparing-generic-collections\">Comparing Generic Collections</h2>\n<p> The following example illustrates the benefits of contravariance support in the <a class=\"xref\" href=\"../../../../../api/system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer&lt;T&gt;</a> interface. The <code>PersonComparer</code> class implements the <code>IComparer(Of Person)</code> interface. However, you can reuse this class to compare a sequence of objects of the <code>Employee</code> type because <code>Employee</code> inherits <code>Person</code>.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">&#39; Simple hierarhcy of classes.  \nPublic Class Person  \n    Public Property FirstName As String  \n    Public Property LastName As String  \nEnd Class  \n\nPublic Class Employee  \n    Inherits Person  \nEnd Class  \n&#39; The custom comparer for the Person type  \n&#39; with standard implementations of Equals()  \n&#39; and GetHashCode() methods.  \nClass PersonComparer  \n    Implements IEqualityComparer(Of Person)  \n\n    Public Function Equals1(  \n        ByVal x As Person,  \n        ByVal y As Person) As Boolean _  \n        Implements IEqualityComparer(Of Person).Equals  \n\n        If x Is y Then Return True  \n        If x Is Nothing OrElse y Is Nothing Then Return False  \n        Return (x.FirstName = y.FirstName) AndAlso  \n            (x.LastName = y.LastName)  \n    End Function  \n    Public Function GetHashCode1(  \n        ByVal person As Person) As Integer _  \n        Implements IEqualityComparer(Of Person).GetHashCode  \n\n        If person Is Nothing Then Return 0  \n        Dim hashFirstName =  \n            If(person.FirstName Is Nothing,  \n            0, person.FirstName.GetHashCode())  \n        Dim hashLastName = person.LastName.GetHashCode()  \n        Return hashFirstName Xor hashLastName  \n    End Function  \nEnd Class  \n\nSub Main()  \n    Dim employees = New List(Of Employee) From {  \n        New Employee With {.FirstName = &quot;Michael&quot;, .LastName = &quot;Alexander&quot;},  \n        New Employee With {.FirstName = &quot;Jeff&quot;, .LastName = &quot;Price&quot;}  \n    }  \n\n    &#39; You can pass PersonComparer,   \n    &#39; which implements IEqualityComparer(Of Person),  \n    &#39; although the method expects IEqualityComparer(Of Employee)  \n\n    Dim noduplicates As IEnumerable(Of Employee) = employees.Distinct(New PersonComparer())  \n\n    For Each employee In noduplicates  \n        Console.WriteLine(employee.FirstName &amp; &quot; &quot; &amp; employee.LastName)  \n    Next  \nEnd Sub  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"variance-in-generic-interfaces\" data-linktype=\"relative-path\">Variance in Generic Interfaces (Visual Basic)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.tgt_pltfrm\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"c867fcea-7462-4995-b9c5-542feec74036\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-in-interfaces-for-generic-collections.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-in-interfaces-for-generic-collections.md\">\r\n<meta name=\"document_id\" content=\"451bcf28-fed1-d95f-fbef-bbdca594c5c5\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Using Variance in Interfaces for Generic Collections (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.tgt_pltfrm":"","ms.assetid":"c867fcea-7462-4995-b9c5-542feec74036","caps.latest.revision":3,"ms.topic":"article","dev_langs":["vb"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-in-interfaces-for-generic-collections.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-in-interfaces-for-generic-collections.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-in-interfaces-for-generic-collections.md","document_id":"451bcf28-fed1-d95f-fbef-bbdca594c5c5","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-in-interfaces-for-generic-collections","toc_asset_id":"articles/visual-basic/programming-guide/concepts/covariance-contravariance/toc.json","toc_rel":"toc.json","_op_ogTitle":"Using Variance in Interfaces for Generic Collections (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":387,"_op_rawTitle":"<h1 id=\"using-variance-in-interfaces-for-generic-collections-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-in-interfaces-for-generic-collections.md\" sourcestartlinenumber=\"25\" sourceendlinenumber=\"25\">Using Variance in Interfaces for Generic Collections (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-in-interfaces-for-generic-collections","fileRelativePath":"articles/visual-basic/programming-guide/concepts/covariance-contravariance/using-variance-in-interfaces-for-generic-collections.html"},"themesRelativePathToOutputRoot":"_themes/"}