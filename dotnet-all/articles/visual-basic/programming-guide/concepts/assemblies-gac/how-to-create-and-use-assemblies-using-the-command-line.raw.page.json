{"content":"<div><div class=\"content\">\n<p>An assembly, or a dynamic linking library (DLL), is linked to your program at run time. To demonstrate building and using a DLL, consider the following scenario:  </p>\n<ul>\n<li><p><code>MathLibrary.DLL</code>: The library file that contains the methods to be called at run time. In this example, the DLL contains two methods, <code>Add</code> and <code>Multiply</code>.  </p>\n</li>\n<li><p><code>Add</code>: The source file that contains the method <code>Add</code>. It returns the sum of its parameters. The class <code>AddClass</code> that contains the method <code>Add</code> is a member of the namespace <code>UtilityMethods</code>.  </p>\n</li>\n<li><p><code>Mult</code>: The source code that contains the method <code>Multiply</code>. It returns the product of its parameters. The class <code>MultiplyClass</code> that contains the method <code>Multiply</code> is also a member of the namespace <code>UtilityMethods</code>.  </p>\n</li>\n<li><p><code>TestCode</code>: The file that contains the <code>Main</code> method. It uses the methods in the DLL file to calculate the sum and the product of the run-time arguments.  </p>\n</li>\n</ul>\n<h2 id=\"example\">Example</h2>\n<pre class=\"loading\"><code class=\"lang-vb\">&#39; File: Add.vb   \nNamespace UtilityMethods  \n    Public Class AddClass  \n        Public Shared Function Add(ByVal i As Long, ByVal j As Long) As Long  \n            Return i + j  \n        End Function  \n    End Class  \nEnd Namespace  \n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">&#39; File: Mult.vb  \nNamespace UtilityMethods  \n    Public Class MultiplyClass  \n        Public Shared Function Multiply(ByVal x As Long, ByVal y As Long) As Long  \n            Return x * y  \n        End Function  \n    End Class  \nEnd Namespace  \n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">&#39; File: TestCode.vb  \n\nImports UtilityMethods  \n\nModule Test  \n\n    Sub Main(ByVal args As String())  \n\n        System.Console.WriteLine(&quot;Calling methods from MathLibrary.DLL:&quot;)  \n\n        If args.Length &lt;&gt; 2 Then  \n            System.Console.WriteLine(&quot;Usage: TestCode &lt;num1&gt; &lt;num2&gt;&quot;)  \n            Return  \n        End If  \n\n        Dim num1 As Long = Long.Parse(args(0))  \n        Dim num2 As Long = Long.Parse(args(1))  \n\n        Dim sum As Long = AddClass.Add(num1, num2)  \n        Dim product As Long = MultiplyClass.Multiply(num1, num2)  \n\n        System.Console.WriteLine(&quot;{0} + {1} = {2}&quot;, num1, num2, sum)  \n        System.Console.WriteLine(&quot;{0} * {1} = {2}&quot;, num1, num2, product)  \n\n    End Sub  \n\nEnd Module  \n\n&#39; Output (assuming 1234 and 5678 are entered as command-line arguments):  \n&#39; Calling methods from MathLibrary.DLL:  \n&#39; 1234 + 5678 = 6912  \n&#39; 1234 * 5678 = 7006652  \n</code></pre><p> This file contains the algorithm that uses the DLL methods, <code>Add</code> and <code>Multiply</code>. It starts with parsing the arguments entered from the command line, <code>num1</code> and <code>num2</code>. Then it calculates the sum by using the <code>Add</code> method on the <code>AddClass</code> class, and the product by using the <code>Multiply</code> method on the <code>MultiplyClass</code> class.  </p>\n<p> Notice that the  <code>Imports</code> statement at the beginning of the file enables you to use the unqualified class names to reference the DLL methods at compile time, as follows:  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">MultiplyClass.Multiply(num1, num2)  \n</code></pre><p> Otherwise, you have to use the fully qualified names, as follows:  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">UtilityMethods.MultiplyClass.Multiply(num1, num2)  \n</code></pre><h2 id=\"execution\">Execution</h2>\n<p> To run the program, enter the name of the EXE file, followed by two numbers, as follows:  </p>\n<p> <code>TestCode 1234 5678</code>  </p>\n<h2 id=\"compiling-the-code\">Compiling the Code</h2>\n<p> To build the file <code>MathLibrary.DLL</code>, compile the two files <code>Add</code> and <code>Mult</code> by using the following command line.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">vbc /target:library /out:MathLibrary.DLL Add.vb Mult.vb  \n</code></pre><p> The <a href=\"../../../reference/command-line-compiler/target\" data-linktype=\"relative-path\">/target (Visual Basic)</a> compiler option tells the compiler to output a DLL instead of an EXE file. The <a href=\"../../../reference/command-line-compiler/out\" data-linktype=\"relative-path\">/out (Visual Basic)</a> compiler option followed by a file name is used to specify the DLL file name. Otherwise, the compiler uses the first file (<code>Add.vb</code>) as the name of the DLL.  </p>\n<p> To build the executable file, <code>TestCode.exe</code>, use the following command line:  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">vbc /out:TestCode.exe /reference:MathLibrary.DLL TestCode.vb  \n</code></pre><p> The <strong>/out</strong> compiler option tells the compiler to output an EXE file and specifies the name of the output file (<code>TestCode.exe</code>). This compiler option is optional. The <a href=\"../../../reference/command-line-compiler/reference\" data-linktype=\"relative-path\">/reference (Visual Basic)</a> compiler option specifies the DLL file or files that this program uses.  </p>\n<p> For more information about building from the command line, see  and <a href=\"../../../reference/command-line-compiler/building-from-the-command-line\" data-linktype=\"relative-path\">Building from the Command Line</a>.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../index\" data-linktype=\"relative-path\">Programming Concepts</a><br> <a href=\"index\" data-linktype=\"relative-path\">Assemblies and the Global Assembly Cache (Visual Basic)</a><br> <a href=\"http://msdn.microsoft.com/library/e08e4c34-0223-45f7-aa55-a3d8dd979b0f\" data-linktype=\"external\">Creating a Class to Hold DLL Functions</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.tgt_pltfrm\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"229ff9fb-1bd1-403b-946b-526104864c60\">\r\n<meta name=\"caps.latest.revision\" content=\"6\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/0a5d76c154aeb9b749c9c3fc5ad0962e93754a62/docs/visual-basic/programming-guide/concepts/assemblies-gac/how-to-create-and-use-assemblies-using-the-command-line.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/assemblies-gac/how-to-create-and-use-assemblies-using-the-command-line.md\">\r\n<meta name=\"document_id\" content=\"92049b2f-7ccd-b484-e63d-dba72cf84db0\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","uhfHeaderId":"MSDocsHeader-DotNet","title":"How to: Create and Use Assemblies Using the Command Line (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.tgt_pltfrm":"","ms.assetid":"229ff9fb-1bd1-403b-946b-526104864c60","caps.latest.revision":6,"ms.topic":"article","dev_langs":["vb"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Reorganizing the VB TOC (#1348)","commit_sha":"0a5d76c154aeb9b749c9c3fc5ad0962e93754a62","commit_date":"2017-02-14 10:22:48 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/0a5d76c154aeb9b749c9c3fc5ad0962e93754a62/docs/visual-basic/programming-guide/concepts/assemblies-gac/how-to-create-and-use-assemblies-using-the-command-line.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/assemblies-gac/how-to-create-and-use-assemblies-using-the-command-line.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/concepts/assemblies-gac/how-to-create-and-use-assemblies-using-the-command-line.md","document_id":"92049b2f-7ccd-b484-e63d-dba72cf84db0","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/concepts/assemblies-gac/how-to-create-and-use-assemblies-using-the-command-line","toc_asset_id":"articles/visual-basic/programming-guide/concepts/assemblies-gac/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Create and Use Assemblies Using the Command Line (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":594,"_op_rawTitle":"<h1 id=\"how-to-create-and-use-assemblies-using-the-command-line-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/concepts/assemblies-gac/how-to-create-and-use-assemblies-using-the-command-line.md\" sourcestartlinenumber=\"25\" sourceendlinenumber=\"25\">How to: Create and Use Assemblies Using the Command Line (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/concepts/assemblies-gac/how-to-create-and-use-assemblies-using-the-command-line","fileRelativePath":"articles/visual-basic/programming-guide/concepts/assemblies-gac/how-to-create-and-use-assemblies-using-the-command-line.html"},"themesRelativePathToOutputRoot":"_themes/"}