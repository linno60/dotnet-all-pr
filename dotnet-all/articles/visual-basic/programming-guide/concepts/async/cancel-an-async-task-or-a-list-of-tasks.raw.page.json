{"content":"<div><div class=\"content\">\n<p>You can set up a button that you can use to cancel an async application if you don&#39;t want to wait for it to finish. By following the examples in this topic, you can add a cancellation button to an application that downloads the contents of one website or a list of websites.  </p>\n<p> The examples use the UI that <a href=\"fine-tuning-your-async-application\" data-linktype=\"relative-path\">Fine-Tuning Your Async Application (Visual Basic)</a> describes.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To run the examples, you must have Visual Studio 2012 or newer and the .NET Framework 4.5 or newer installed on your computer.  </p>\n</div>\n<h2 id=\"a-namebkmkcancelataska-cancel-a-task\"><a name=\"BKMK_CancelaTask\"></a> Cancel a Task</h2>\n<p> The first example associates the <strong>Cancel</strong> button with a single download task. If you choose the button while the application is downloading content, the download is canceled.  </p>\n<h3 id=\"downloading-the-example\">Downloading the Example</h3>\n<p> You can download the complete Windows Presentation Foundation (WPF) project from <a href=\"http://go.microsoft.com/fwlink/?LinkId=255046\" data-linktype=\"external\">Async Sample: Fine Tuning Your Application</a> and then follow these steps.  </p>\n<ol>\n<li><p>Decompress the file that you downloaded, and then start Visual Studio.  </p>\n</li>\n<li><p>On the menu bar, choose <strong>File</strong>, <strong>Open</strong>, <strong>Project/Solution</strong>.  </p>\n</li>\n<li><p>In the <strong>Open Project</strong> dialog box, open the folder that holds the sample code that you decompressed, and then open the solution (.sln) file for AsyncFineTuningVB.  </p>\n</li>\n<li><p>In <strong>Solution Explorer</strong>, open the shortcut menu for the <strong>CancelATask</strong> project, and then choose <strong>Set as StartUp Project</strong>.  </p>\n</li>\n<li><p>Choose the F5 key to run the project.  </p>\n<p> Choose the Ctrl+F5 keys to run the project without debugging it.  </p>\n<p>If you don&#39;t want to download the project, you can review the MainWindow.xaml.vb files at the end of this topic.  </p>\n</li>\n</ol>\n<h3 id=\"building-the-example\">Building the Example</h3>\n<p> The following changes add a <strong>Cancel</strong> button to an application that downloads a website. If you don&#39;t want to download or build the example, you can review the final product in the &quot;Complete Examples&quot; section at the end of this topic. Asterisks mark the changes in the code.  </p>\n<p> To build the example yourself, step by step, follow the instructions in the &quot;Downloading the Example&quot; section, but choose <strong>StarterCode</strong> as the <strong>StartUp Project</strong> instead of <strong>CancelATask</strong>.  </p>\n<p> Then add the following changes to the MainWindow.xaml.vb file of that project.  </p>\n<ol>\n<li><p>Declare a <code>CancellationTokenSource</code> variable, <code>cts</code>, that’s in scope for all methods that access it.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Class MainWindow  \n\n    &#39; ***Declare a System.Threading.CancellationTokenSource.  \n    Dim cts As CancellationTokenSource  \n</code></pre></li>\n<li><p>Add the following event handler for the <strong>Cancel</strong> button. The event handler uses the <a class=\"xref\" href=\"../../../../../api/system.threading.cancellationtokensource#System_Threading_CancellationTokenSource_Cancel_\" data-linktype=\"relative-path\">Cancel</a> method to notify <code>cts</code> when the user requests cancellation.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">&#39; ***Add an event handler for the Cancel button.  \nPrivate Sub cancelButton_Click(sender As Object, e As RoutedEventArgs)  \n\n    If cts IsNot Nothing Then  \n        cts.Cancel()  \n    End If  \nEnd Sub  \n</code></pre></li>\n<li><p>Make the following changes in the event handler for the <strong>Start</strong> button, <code>startButton_Click</code>.  </p>\n<ul>\n<li><p>Instantiate the <code>CancellationTokenSource</code>, <code>cts</code>.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">&#39; ***Instantiate the CancellationTokenSource.  \ncts = New CancellationTokenSource()  \n</code></pre></li>\n<li><p>In the call to <code>AccessTheWebAsync</code>, which downloads the contents of a specified website, send the <a class=\"xref\" href=\"../../../../../api/system.threading.cancellationtokensource#System_Threading_CancellationTokenSource_Token_\" data-linktype=\"relative-path\">Token</a> property of <code>cts</code> as an argument. The <code>Token</code> property propagates the message if cancellation is requested. Add a catch block that displays a message if the user chooses to cancel the download operation. The following code shows the changes.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Try  \n    &#39; ***Send a token to carry the message if cancellation is requested.  \n    Dim contentLength As Integer = Await AccessTheWebAsync(cts.Token)  \n\n    resultsTextBox.Text &amp;=  \n        String.Format(vbCrLf &amp; &quot;Length of the downloaded string: {0}.&quot; &amp; vbCrLf, contentLength)  \n\n    &#39; *** If cancellation is requested, an OperationCanceledException results.  \nCatch ex As OperationCanceledException  \n    resultsTextBox.Text &amp;= vbCrLf &amp; &quot;Download canceled.&quot; &amp; vbCrLf  \n\nCatch ex As Exception  \n    resultsTextBox.Text &amp;= vbCrLf &amp; &quot;Download failed.&quot; &amp; vbCrLf  \nEnd Try  \n</code></pre></li>\n</ul>\n</li>\n<li><p>In <code>AccessTheWebAsync</code>, use the  <a class=\"xref\" href=\"../../../../../api/system.net.http.httpclient#System_Net_Http_HttpClient_GetAsync_System_String_System_Threading_CancellationToken_\" data-linktype=\"relative-path\">System.Net.Http.HttpClient.GetAsync(String,CancellationToken)</a> overload of the <code>GetAsync</code> method in the <a class=\"xref\" href=\"../../../../../api/system.net.http.httpclient\" data-linktype=\"relative-path\">HttpClient</a> type to download the contents of a website. Pass <code>ct</code>, the <a class=\"xref\" href=\"../../../../../api/system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a> parameter of <code>AccessTheWebAsync</code>, as the second argument. The token carries the message if the user chooses the <strong>Cancel</strong> button.  </p>\n<p> The following code shows the changes in <code>AccessTheWebAsync</code>.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">&#39; ***Provide a parameter for the CancellationToken.  \nAsync Function AccessTheWebAsync(ct As CancellationToken) As Task(Of Integer)  \n\n    Dim client As HttpClient = New HttpClient()  \n\n    resultsTextBox.Text &amp;=  \n        String.Format(vbCrLf &amp; &quot;Ready to download.&quot; &amp; vbCrLf)  \n\n    &#39; You might need to slow things down to have a chance to cancel.  \n    Await Task.Delay(250)  \n\n    &#39; GetAsync returns a Task(Of HttpResponseMessage).   \n    &#39; ***The ct argument carries the message if the Cancel button is chosen.  \n    Dim response As HttpResponseMessage = Await client.GetAsync(&quot;http://msdn.microsoft.com/library/dd470362.aspx&quot;, ct)  \n\n    &#39; Retrieve the website contents from the HttpResponseMessage.  \n    Dim urlContents As Byte() = Await response.Content.ReadAsByteArrayAsync()  \n\n    &#39; The result of the method is the length of the downloaded website.  \n    Return urlContents.Length  \nEnd Function  \n</code></pre></li>\n<li><p>If you don’t cancel the program, it produces the following output.  </p>\n<pre class=\"loading\"><code>Ready to download.  \nLength of the downloaded string: 158125.  \n</code></pre><p> If you choose the <strong>Cancel</strong> button before the program finishes downloading the content, the program produces the following output.  </p>\n<pre class=\"loading\"><code>Ready to download.  \nDownload canceled.  \n</code></pre></li>\n</ol>\n<h2 id=\"a-namebkmkcancelalistoftasksa-cancel-a-list-of-tasks\"><a name=\"BKMK_CancelaListofTasks\"></a> Cancel a List of Tasks</h2>\n<p> You can extend the previous example to cancel many tasks by associating the same <code>CancellationTokenSource</code> instance with each task. If you choose the <strong>Cancel</strong> button, you cancel all tasks that aren’t yet complete.  </p>\n<h3 id=\"downloading-the-example-1\">Downloading the Example</h3>\n<p> You can download the complete Windows Presentation Foundation (WPF) project from <a href=\"http://go.microsoft.com/fwlink/?LinkId=255046\" data-linktype=\"external\">Async Sample: Fine Tuning Your Application</a> and then follow these steps.  </p>\n<ol>\n<li><p>Decompress the file that you downloaded, and then start Visual Studio.  </p>\n</li>\n<li><p>On the menu bar, choose <strong>File</strong>, <strong>Open</strong>, <strong>Project/Solution</strong>.  </p>\n</li>\n<li><p>In the <strong>Open Project</strong> dialog box, open the folder that holds the sample code that you decompressed, and then open the solution (.sln) file for AsyncFineTuningVB.  </p>\n</li>\n<li><p>In <strong>Solution Explorer</strong>, open the shortcut menu for the <strong>CancelAListOfTasks</strong> project, and then choose <strong>Set as StartUp Project</strong>.  </p>\n</li>\n<li><p>Choose the F5 key to run the project.  </p>\n<p> Choose the Ctrl+F5 keys to run the project without debugging it.  </p>\n<p>If you don&#39;t want to download the project, you can review the MainWindow.xaml.vb files at the end of this topic.  </p>\n</li>\n</ol>\n<h3 id=\"building-the-example-1\">Building the Example</h3>\n<p> To extend the example yourself, step by step, follow the instructions in the &quot;Downloading the Example&quot; section, but choose <strong>CancelATask</strong> as the <strong>StartUp Project</strong>. Add the following changes to that project. Asterisks mark the changes in the program.  </p>\n<ol>\n<li><p>Add a method to create a list of web addresses.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">&#39; ***Add a method that creates a list of web addresses.  \nPrivate Function SetUpURLList() As List(Of String)  \n\n    Dim urls = New List(Of String) From  \n        {  \n            &quot;http://msdn.microsoft.com&quot;,  \n            &quot;http://msdn.microsoft.com/library/hh290138.aspx&quot;,  \n            &quot;http://msdn.microsoft.com/library/hh290140.aspx&quot;,  \n            &quot;http://msdn.microsoft.com/library/dd470362.aspx&quot;,  \n            &quot;http://msdn.microsoft.com/library/aa578028.aspx&quot;,  \n            &quot;http://msdn.microsoft.com/library/ms404677.aspx&quot;,  \n            &quot;http://msdn.microsoft.com/library/ff730837.aspx&quot;  \n        }  \n    Return urls  \nEnd Function  \n</code></pre></li>\n<li><p>Call the method in <code>AccessTheWebAsync</code>.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">&#39; ***Call SetUpURLList to make a list of web addresses.  \nDim urlList As List(Of String) = SetUpURLList()  \n</code></pre></li>\n<li><p>Add the following loop in <code>AccessTheWebAsync</code> to process each web address in the list.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">&#39; ***Add a loop to process the list of web addresses.  \nFor Each url In urlList  \n    &#39; GetAsync returns a Task(Of HttpResponseMessage).   \n    &#39; Argument ct carries the message if the Cancel button is chosen.   \n    &#39; ***Note that the Cancel button can cancel all remaining downloads.  \n    Dim response As HttpResponseMessage = Await client.GetAsync(url, ct)  \n\n    &#39; Retrieve the website contents from the HttpResponseMessage.  \n    Dim urlContents As Byte() = Await response.Content.ReadAsByteArrayAsync()  \n\n    resultsTextBox.Text &amp;=  \n        String.Format(vbCrLf &amp; &quot;Length of the downloaded string: {0}.&quot; &amp; vbCrLf, urlContents.Length)  \nNext  \n</code></pre></li>\n<li><p>Because <code>AccessTheWebAsync</code> displays the lengths, the method doesn&#39;t need to return anything. Remove the return statement, and change the return type of the method to <a class=\"xref\" href=\"../../../../../api/system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> instead of <a class=\"xref\" href=\"../../../../../api/system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a>.  </p>\n</li>\n</ol>\n<p><codecontentplaceholder>10</codecontentplaceholder><br>     Call the method from <code>startButton_Click</code> by using a statement instead of an expression.  </p>\n<pre class=\"loading\"><code>```vb  \nAwait AccessTheWebAsync(cts.Token)  \n```  \n</code></pre><ol>\n<li><p>If you don’t cancel the program, it produces the following output.  </p>\n<pre class=\"loading\"><code>\nLength of the downloaded string: 35939.  \n\nLength of the downloaded string: 237682.  \n\nLength of the downloaded string: 128607.  \n\nLength of the downloaded string: 158124.  \n\nLength of the downloaded string: 204890.  \n\nLength of the downloaded string: 175488.  \n\nLength of the downloaded string: 145790.  \n\nDownloads complete.  \n</code></pre><p> If you choose the <strong>Cancel</strong> button before the downloads are complete, the output contains the lengths of the downloads that completed before the cancellation.  </p>\n<pre class=\"loading\"><code>Length of the downloaded string: 35939.  \n\nLength of the downloaded string: 237682.  \n\nLength of the downloaded string: 128607.  \n\nDownloads canceled.  \n</code></pre></li>\n</ol>\n<h2 id=\"a-namebkmkcompleteexamplesa-complete-examples\"><a name=\"BKMK_CompleteExamples\"></a> Complete Examples</h2>\n<p> The following sections contain the code for each of the previous examples. Notice that you must add a reference for <a class=\"xref\" href=\"../../../../../api/system.net.http\" data-linktype=\"relative-path\">System.Net.Http</a>.  </p>\n<p> You can download the projects from <a href=\"http://go.microsoft.com/fwlink/?LinkId=255046\" data-linktype=\"external\">Async Sample: Fine Tuning Your Application</a>.  </p>\n<h3 id=\"cancel-a-task-example\">Cancel a Task Example</h3>\n<p> The following code is the complete MainWindow.xaml.vb file for the example that cancels a single task.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">&#39; Add an Imports directive and a reference for System.Net.Http.  \nImports System.Net.Http  \n\n&#39; Add the following Imports directive for System.Threading.  \nImports System.Threading  \n\nClass MainWindow  \n\n    &#39; ***Declare a System.Threading.CancellationTokenSource.  \n    Dim cts As CancellationTokenSource  \n\n    Private Async Sub startButton_Click(sender As Object, e As RoutedEventArgs)  \n        &#39; ***Instantiate the CancellationTokenSource.  \n        cts = New CancellationTokenSource()  \n\n        resultsTextBox.Clear()  \n\n        Try  \n            &#39; ***Send a token to carry the message if cancellation is requested.  \n            Dim contentLength As Integer = Await AccessTheWebAsync(cts.Token)  \n\n            resultsTextBox.Text &amp;=  \n                String.Format(vbCrLf &amp; &quot;Length of the downloaded string: {0}.&quot; &amp; vbCrLf, contentLength)  \n\n            &#39; *** If cancellation is requested, an OperationCanceledException results.  \n        Catch ex As OperationCanceledException  \n            resultsTextBox.Text &amp;= vbCrLf &amp; &quot;Download canceled.&quot; &amp; vbCrLf  \n\n        Catch ex As Exception  \n            resultsTextBox.Text &amp;= vbCrLf &amp; &quot;Download failed.&quot; &amp; vbCrLf  \n        End Try  \n\n        &#39; ***Set the CancellationTokenSource to Nothing when the download is complete.  \n        cts = Nothing  \n    End Sub  \n\n    &#39; ***Add an event handler for the Cancel button.  \n    Private Sub cancelButton_Click(sender As Object, e As RoutedEventArgs)  \n\n        If cts IsNot Nothing Then  \n            cts.Cancel()  \n        End If  \n    End Sub  \n\n    &#39; ***Provide a parameter for the CancellationToken.  \n    Async Function AccessTheWebAsync(ct As CancellationToken) As Task(Of Integer)  \n\n        Dim client As HttpClient = New HttpClient()  \n\n        resultsTextBox.Text &amp;=  \n            String.Format(vbCrLf &amp; &quot;Ready to download.&quot; &amp; vbCrLf)  \n\n        &#39; You might need to slow things down to have a chance to cancel.  \n        Await Task.Delay(250)  \n\n        &#39; GetAsync returns a Task(Of HttpResponseMessage).   \n        &#39; ***The ct argument carries the message if the Cancel button is chosen.  \n        Dim response As HttpResponseMessage = Await client.GetAsync(&quot;http://msdn.microsoft.com/library/dd470362.aspx&quot;, ct)  \n\n        &#39; Retrieve the website contents from the HttpResponseMessage.  \n        Dim urlContents As Byte() = Await response.Content.ReadAsByteArrayAsync()  \n\n        &#39; The result of the method is the length of the downloaded website.  \n        Return urlContents.Length  \n    End Function  \nEnd Class  \n\n&#39; Output for a successful download:  \n\n&#39; Ready to download.  \n\n&#39; Length of the downloaded string: 158125.  \n\n&#39; Or, if you cancel:  \n\n&#39; Ready to download.  \n\n&#39; Download canceled.  \n</code></pre><h3 id=\"cancel-a-list-of-tasks-example\">Cancel a List of Tasks Example</h3>\n<p> The following code is the complete MainWindow.xaml.vb file for the example that cancels a list of tasks.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">&#39; Add an Imports directive and a reference for System.Net.Http.  \nImports System.Net.Http  \n\n&#39; Add the following Imports directive for System.Threading.  \nImports System.Threading  \n\nClass MainWindow  \n\n    &#39; Declare a System.Threading.CancellationTokenSource.  \n    Dim cts As CancellationTokenSource  \n\n    Private Async Sub startButton_Click(sender As Object, e As RoutedEventArgs)  \n\n        &#39; Instantiate the CancellationTokenSource.  \n        cts = New CancellationTokenSource()  \n\n        resultsTextBox.Clear()  \n\n        Try  \n            &#39; ***AccessTheWebAsync returns a Task, not a Task(Of Integer).  \n            Await AccessTheWebAsync(cts.Token)  \n            &#39;  ***Small change in the display lines.  \n            resultsTextBox.Text &amp;= vbCrLf &amp; &quot;Downloads complete.&quot;  \n\n        Catch ex As OperationCanceledException  \n            resultsTextBox.Text &amp;= vbCrLf &amp; &quot;Downloads canceled.&quot; &amp; vbCrLf  \n\n        Catch ex As Exception  \n            resultsTextBox.Text &amp;= vbCrLf &amp; &quot;Downloads failed.&quot; &amp; vbCrLf  \n        End Try  \n\n        &#39; Set the CancellationTokenSource to Nothing when the download is complete.  \n        cts = Nothing  \n    End Sub  \n\n    &#39; Add an event handler for the Cancel button.  \n    Private Sub cancelButton_Click(sender As Object, e As RoutedEventArgs)  \n\n        If cts IsNot Nothing Then  \n            cts.Cancel()  \n        End If  \n    End Sub  \n\n    &#39; Provide a parameter for the CancellationToken.  \n    &#39; ***Change the return type to Task because the method has no return statement.  \n    Async Function AccessTheWebAsync(ct As CancellationToken) As Task  \n\n        Dim client As HttpClient = New HttpClient()  \n\n        &#39; ***Call SetUpURLList to make a list of web addresses.  \n        Dim urlList As List(Of String) = SetUpURLList()  \n\n        &#39; ***Add a loop to process the list of web addresses.  \n        For Each url In urlList  \n            &#39; GetAsync returns a Task(Of HttpResponseMessage).   \n            &#39; Argument ct carries the message if the Cancel button is chosen.   \n            &#39; ***Note that the Cancel button can cancel all remaining downloads.  \n            Dim response As HttpResponseMessage = Await client.GetAsync(url, ct)  \n\n            &#39; Retrieve the website contents from the HttpResponseMessage.  \n            Dim urlContents As Byte() = Await response.Content.ReadAsByteArrayAsync()  \n\n            resultsTextBox.Text &amp;=  \n                String.Format(vbCrLf &amp; &quot;Length of the downloaded string: {0}.&quot; &amp; vbCrLf, urlContents.Length)  \n        Next  \n    End Function  \n\n    &#39; ***Add a method that creates a list of web addresses.  \n    Private Function SetUpURLList() As List(Of String)  \n\n        Dim urls = New List(Of String) From  \n            {  \n                &quot;http://msdn.microsoft.com&quot;,  \n                &quot;http://msdn.microsoft.com/library/hh290138.aspx&quot;,  \n                &quot;http://msdn.microsoft.com/library/hh290140.aspx&quot;,  \n                &quot;http://msdn.microsoft.com/library/dd470362.aspx&quot;,  \n                &quot;http://msdn.microsoft.com/library/aa578028.aspx&quot;,  \n                &quot;http://msdn.microsoft.com/library/ms404677.aspx&quot;,  \n                &quot;http://msdn.microsoft.com/library/ff730837.aspx&quot;  \n            }  \n        Return urls  \n    End Function  \n\nEnd Class  \n\n&#39; Output if you do not choose to cancel:  \n\n&#39; Length of the downloaded string: 35939.  \n\n&#39; Length of the downloaded string: 237682.  \n\n&#39; Length of the downloaded string: 128607.  \n\n&#39; Length of the downloaded string: 158124.  \n\n&#39; Length of the downloaded string: 204890.  \n\n&#39; Length of the downloaded string: 175488.  \n\n&#39; Length of the downloaded string: 145790.  \n\n&#39; Downloads complete.  \n\n&#39;  Sample output if you choose to cancel:  \n\n&#39; Length of the downloaded string: 35939.  \n\n&#39; Length of the downloaded string: 237682.  \n\n&#39; Length of the downloaded string: 128607.  \n\n&#39; Downloads canceled.  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../../api/system.threading.cancellationtokensource\" data-linktype=\"relative-path\">CancellationTokenSource</a><br> <a class=\"xref\" href=\"../../../../../api/system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a><br> <a href=\"index\" data-linktype=\"relative-path\">Asynchronous Programming with Async and Await (Visual Basic)</a><br> <a href=\"fine-tuning-your-async-application\" data-linktype=\"relative-path\">Fine-Tuning Your Async Application (Visual Basic)</a><br> <a href=\"http://go.microsoft.com/fwlink/?LinkId=255046\" data-linktype=\"external\">Async Sample: Fine Tuning Your Application</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.tgt_pltfrm\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"a9ee1b71-5bec-4736-a1e9-448042dd7215\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/0a5d76c154aeb9b749c9c3fc5ad0962e93754a62/docs/visual-basic/programming-guide/concepts/async/cancel-an-async-task-or-a-list-of-tasks.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/async/cancel-an-async-task-or-a-list-of-tasks.md\">\r\n<meta name=\"document_id\" content=\"8d97b48d-7a6c-29ef-5af9-a8095c7faa67\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Cancel an Async Task or a List of Tasks (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.tgt_pltfrm":"","ms.assetid":"a9ee1b71-5bec-4736-a1e9-448042dd7215","caps.latest.revision":3,"ms.topic":"article","dev_langs":["vb"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Reorganizing the VB TOC (#1348)","commit_sha":"0a5d76c154aeb9b749c9c3fc5ad0962e93754a62","commit_date":"2017-02-14 10:22:48 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/0a5d76c154aeb9b749c9c3fc5ad0962e93754a62/docs/visual-basic/programming-guide/concepts/async/cancel-an-async-task-or-a-list-of-tasks.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/async/cancel-an-async-task-or-a-list-of-tasks.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/concepts/async/cancel-an-async-task-or-a-list-of-tasks.md","document_id":"8d97b48d-7a6c-29ef-5af9-a8095c7faa67","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/programming-guide/concepts/async/cancel-an-async-task-or-a-list-of-tasks","toc_asset_id":"articles/visual-basic/programming-guide/concepts/async/toc.json","toc_rel":"toc.json","_op_ogTitle":"Cancel an Async Task or a List of Tasks (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":2081,"_op_rawTitle":"<h1 id=\"cancel-an-async-task-or-a-list-of-tasks-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/concepts/async/cancel-an-async-task-or-a-list-of-tasks.md\" sourcestartlinenumber=\"25\" sourceendlinenumber=\"25\">Cancel an Async Task or a List of Tasks (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/programming-guide/concepts/async/cancel-an-async-task-or-a-list-of-tasks","fileRelativePath":"articles/visual-basic/programming-guide/concepts/async/cancel-an-async-task-or-a-list-of-tasks.html"},"themesRelativePathToOutputRoot":"_themes/"}