{"content":"<div><div class=\"content\">\n<p>By using the <a class=\"xref\" href=\"../../../../../api/system.threading.tasks.task#System_Threading_Tasks_Task_WhenAny_\" data-linktype=\"relative-path\">WhenAny</a> method together with a <a class=\"xref\" href=\"../../../../../api/system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a>, you can cancel all remaining tasks when one task is complete. The <code>WhenAny</code> method takes an argument that’s a collection of tasks. The method starts all the tasks and returns a single task. The single task is complete when any task in the collection is complete.  </p>\n<p> This example demonstrates how to use a cancellation token in conjunction with <code>WhenAny</code> to hold onto the first task to finish from the collection of tasks and to cancel the remaining tasks. Each task downloads the contents of a website. The example displays the length of the contents of the first download to complete and cancels the other downloads.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To run the examples, you must have Visual Studio 2012 or newer and the .NET Framework 4.5 or newer installed on your computer.  </p>\n</div>\n<h2 id=\"downloading-the-example\">Downloading the Example</h2>\n<p> You can download the complete Windows Presentation Foundation (WPF) project from <a href=\"http://go.microsoft.com/fwlink/?LinkId=255046\" data-linktype=\"external\">Async Sample: Fine Tuning Your Application</a> and then follow these steps.  </p>\n<ol>\n<li><p>Decompress the file that you downloaded, and then start Visual Studio.  </p>\n</li>\n<li><p>On the menu bar, choose <strong>File</strong>, <strong>Open</strong>, <strong>Project/Solution</strong>.  </p>\n</li>\n<li><p>In the <strong>Open Project</strong> dialog box, open the folder that holds the sample code that you decompressed, and then open the solution (.sln) file for AsyncFineTuningVB.  </p>\n</li>\n<li><p>In <strong>Solution Explorer</strong>, open the shortcut menu for the <strong>CancelAfterOneTask</strong> project, and then choose <strong>Set as StartUp Project</strong>.  </p>\n</li>\n<li><p>Choose the F5 key to run the project.  </p>\n<p> Choose the Ctrl+F5 keys to run the project without debugging it.  </p>\n</li>\n<li><p>Run the program several times to verify that different downloads finish first.  </p>\n<p>If you don&#39;t want to download the project, you can review the MainWindow.xaml.vb file at the end of this topic.  </p>\n</li>\n</ol>\n<h2 id=\"building-the-example\">Building the Example</h2>\n<p> The example in this topic adds to the project that&#39;s developed in <a href=\"http://msdn.microsoft.com/library/d6e4e801-df64-4705-98fc-df725a577fb0\" data-linktype=\"external\">Cancel an Async Task or a List of Tasks</a> to cancel a list of tasks. The example uses the same UI, although the <strong>Cancel</strong> button isn’t used explicitly.  </p>\n<p> To build the example yourself, step by step, follow the instructions in the &quot;Downloading the Example&quot; section, but choose <strong>CancelAListOfTasks</strong> as the <strong>StartUp Project</strong>. Add the changes in this topic to that project.  </p>\n<p> In the MainWindow.xaml.vb file of the <strong>CancelAListOfTasks</strong> project, start the transition by moving the processing steps for each website from the loop in <code>AccessTheWebAsync</code> to the following async method.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">&#39; ***Bundle the processing steps for a website into one async method.  \nAsync Function ProcessURLAsync(url As String, client As HttpClient, ct As CancellationToken) As Task(Of Integer)  \n\n    &#39; GetAsync returns a Task(Of HttpResponseMessage).   \n    Dim response As HttpResponseMessage = Await client.GetAsync(url, ct)  \n\n    &#39; Retrieve the website contents from the HttpResponseMessage.  \n    Dim urlContents As Byte() = Await response.Content.ReadAsByteArrayAsync()  \n\n    Return urlContents.Length  \nEnd Function  \n</code></pre><p> In <code>AccessTheWebAsync</code>, this example uses a query, the  <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb298736(v=vs.110).aspx\" data-linktype=\"external\">ToArray</a> method, and the <code>WhenAny</code> method to create and start an array of tasks. The application of <code>WhenAny</code> to the array returns a single task that, when awaited, evaluates to the first task to reach completion in the array of tasks.  </p>\n<p> Make the following changes in <code>AccessTheWebAsync</code>. Asterisks mark the changes in the code file.  </p>\n<ol>\n<li><p>Comment out or delete the loop.  </p>\n</li>\n<li><p>Create a query that, when executed, produces a collection of generic tasks. Each call to <code>ProcessURLAsync</code> returns a <a class=\"xref\" href=\"../../../../../api/system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> where <code>TResult</code> is an integer.  </p>\n</li>\n</ol>\n<p><codecontentplaceholder>1</codecontentplaceholder>  </p>\n<ol>\n<li>Call <code>ToArray</code> to execute the query and start the tasks. The application of the <code>WhenAny</code> method in the next step would execute the query and start the tasks without using <code>ToArray</code>, but other methods might not. The safest practice is to force execution of the query explicitly.  </li>\n</ol>\n<p><codecontentplaceholder>2</codecontentplaceholder>  </p>\n<ol>\n<li>Call <code>WhenAny</code> on the collection of tasks. <code>WhenAny</code> returns a <code>Task(Of Task(Of Integer))</code> or <code>Task&lt;Task&lt;int&gt;&gt;</code>.  That is, <code>WhenAny</code> returns a task that evaluates to a single <code>Task(Of Integer)</code> or <code>Task&lt;int&gt;</code> when it’s awaited. That single task is the first task in the collection to finish. The task that finished first is assigned to <code>firstFinishedTask</code>. The type of <code>firstFinishedTask</code> is <a class=\"xref\" href=\"../../../../../api/system.threading.tasks.task-1\" data-linktype=\"relative-path\">Task&lt;TResult&gt;</a> where <code>TResult</code> is an integer because that&#39;s the return type of <code>ProcessURLAsync</code>.  </li>\n</ol>\n<pre class=\"loading\"><code class=\"lang-vb\">&#39; ***Call WhenAny and then await the result. The task that finishes   \n&#39; first is assigned to firstFinishedTask.  \nDim firstFinishedTask As Task(Of Integer) = Await Task.WhenAny(downloadTasks)  \n</code></pre><ol>\n<li>In this example, you’re interested only in the task that finishes first. Therefore, use <a class=\"xref\" href=\"../../../../../api/system.threading.cancellationtokensource#System_Threading_CancellationTokenSource_Cancel_\" data-linktype=\"relative-path\">Cancel</a> to cancel the remaining tasks.  </li>\n</ol>\n<pre class=\"loading\"><code class=\"lang-vb\">&#39; ***Cancel the rest of the downloads. You just want the first one.  \ncts.Cancel()  \n</code></pre><ol>\n<li>Finally, await <code>firstFinishedTask</code> to retrieve the length of the downloaded content.  </li>\n</ol>\n<pre class=\"loading\"><code class=\"lang-vb\">Dim length = Await firstFinishedTask  \nresultsTextBox.Text &amp;= String.Format(vbCrLf &amp; &quot;Length of the downloaded website:  {0}&quot; &amp; vbCrLf, length)  \n</code></pre><p> Run the program several times to verify that different downloads finish first.  </p>\n<h2 id=\"complete-example\">Complete Example</h2>\n<p> The following code is the complete MainWindow.xaml.vb or MainWindow.xaml.cs file for the example. Asterisks mark the elements that were added for this example.  </p>\n<p> Notice that you must add a reference for <a class=\"xref\" href=\"../../../../../api/system.net.http\" data-linktype=\"relative-path\">System.Net.Http</a>.  </p>\n<p> You can download the project from <a href=\"http://go.microsoft.com/fwlink/?LinkId=255046\" data-linktype=\"external\">Async Sample: Fine Tuning Your Application</a>.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">&#39; Add an Imports directive and a reference for System.Net.Http.  \nImports System.Net.Http  \n\n&#39; Add the following Imports directive for System.Threading.  \nImports System.Threading  \n\nClass MainWindow  \n\n    &#39; Declare a System.Threading.CancellationTokenSource.  \n    Dim cts As CancellationTokenSource  \n\n    Private Async Sub startButton_Click(sender As Object, e As RoutedEventArgs)  \n\n        &#39; Instantiate the CancellationTokenSource.  \n        cts = New CancellationTokenSource()  \n\n        resultsTextBox.Clear()  \n\n        Try  \n            Await AccessTheWebAsync(cts.Token)  \n            resultsTextBox.Text &amp;= vbCrLf &amp; &quot;Download complete.&quot;  \n\n        Catch ex As OperationCanceledException  \n            resultsTextBox.Text &amp;= vbCrLf &amp; &quot;Download canceled.&quot; &amp; vbCrLf  \n\n        Catch ex As Exception  \n            resultsTextBox.Text &amp;= vbCrLf &amp; &quot;Download failed.&quot; &amp; vbCrLf  \n        End Try  \n\n        &#39; Set the CancellationTokenSource to Nothing when the download is complete.  \n        cts = Nothing  \n    End Sub  \n\n    &#39; You can still include a Cancel button if you want to.  \n    Private Sub cancelButton_Click(sender As Object, e As RoutedEventArgs)  \n\n        If cts IsNot Nothing Then  \n            cts.Cancel()  \n        End If  \n    End Sub  \n\n    &#39; Provide a parameter for the CancellationToken.  \n    &#39; Change the return type to Task because the method has no return statement.  \n    Async Function AccessTheWebAsync(ct As CancellationToken) As Task  \n\n        Dim client As HttpClient = New HttpClient()  \n\n        &#39; Call SetUpURLList to make a list of web addresses.  \n        Dim urlList As List(Of String) = SetUpURLList()  \n\n        &#39;&#39; Comment out or delete the loop.  \n        &#39;&#39;For Each url In urlList  \n        &#39;&#39;    &#39; GetAsync returns a Task(Of HttpResponseMessage).   \n        &#39;&#39;    &#39; Argument ct carries the message if the Cancel button is chosen.   \n        &#39;&#39;    &#39; Note that the Cancel button can cancel all remaining downloads.  \n        &#39;&#39;    Dim response As HttpResponseMessage = Await client.GetAsync(url, ct)  \n\n        &#39;&#39;    &#39; Retrieve the website contents from the HttpResponseMessage.  \n        &#39;&#39;    Dim urlContents As Byte() = Await response.Content.ReadAsByteArrayAsync()  \n\n        &#39;&#39;    resultsTextBox.Text &amp;=  \n        &#39;&#39;        String.Format(vbCrLf &amp; &quot;Length of the downloaded string: {0}.&quot; &amp; vbCrLf, urlContents.Length)  \n        &#39;&#39;Next  \n\n        &#39; ***Create a query that, when executed, returns a collection of tasks.  \n        Dim downloadTasksQuery As IEnumerable(Of Task(Of Integer)) =  \n            From url In urlList Select ProcessURLAsync(url, client, ct)  \n\n        &#39; ***Use ToArray to execute the query and start the download tasks.   \n        Dim downloadTasks As Task(Of Integer)() = downloadTasksQuery.ToArray()  \n\n        &#39; ***Call WhenAny and then await the result. The task that finishes   \n        &#39; first is assigned to firstFinishedTask.  \n        Dim firstFinishedTask As Task(Of Integer) = Await Task.WhenAny(downloadTasks)  \n\n        &#39; ***Cancel the rest of the downloads. You just want the first one.  \n        cts.Cancel()  \n\n        &#39; ***Await the first completed task and display the results  \n        &#39; Run the program several times to demonstrate that different  \n        &#39; websites can finish first.  \n        Dim length = Await firstFinishedTask  \n        resultsTextBox.Text &amp;= String.Format(vbCrLf &amp; &quot;Length of the downloaded website:  {0}&quot; &amp; vbCrLf, length)  \n    End Function  \n\n    &#39; ***Bundle the processing steps for a website into one async method.  \n    Async Function ProcessURLAsync(url As String, client As HttpClient, ct As CancellationToken) As Task(Of Integer)  \n\n        &#39; GetAsync returns a Task(Of HttpResponseMessage).   \n        Dim response As HttpResponseMessage = Await client.GetAsync(url, ct)  \n\n        &#39; Retrieve the website contents from the HttpResponseMessage.  \n        Dim urlContents As Byte() = Await response.Content.ReadAsByteArrayAsync()  \n\n        Return urlContents.Length  \n    End Function  \n\n    &#39; Add a method that creates a list of web addresses.  \n    Private Function SetUpURLList() As List(Of String)  \n\n        Dim urls = New List(Of String) From  \n            {  \n                &quot;http://msdn.microsoft.com&quot;,  \n                &quot;http://msdn.microsoft.com/library/hh290138.aspx&quot;,  \n                &quot;http://msdn.microsoft.com/library/hh290140.aspx&quot;,  \n                &quot;http://msdn.microsoft.com/library/dd470362.aspx&quot;,  \n                &quot;http://msdn.microsoft.com/library/aa578028.aspx&quot;,  \n                &quot;http://msdn.microsoft.com/library/ms404677.aspx&quot;,  \n                &quot;http://msdn.microsoft.com/library/ff730837.aspx&quot;  \n            }  \n        Return urls  \n    End Function  \n\nEnd Class  \n\n&#39; Sample output:  \n\n&#39; Length of the downloaded website:  158856  \n\n&#39; Download complete.  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../../api/system.threading.tasks.task#System_Threading_Tasks_Task_WhenAny_\" data-linktype=\"relative-path\">WhenAny</a><br> <a href=\"fine-tuning-your-async-application\" data-linktype=\"relative-path\">Fine-Tuning Your Async Application (Visual Basic)</a><br> <a href=\"index\" data-linktype=\"relative-path\">Asynchronous Programming with Async and Await (Visual Basic)</a><br> <a href=\"http://go.microsoft.com/fwlink/?LinkId=255046\" data-linktype=\"external\">Async Sample: Fine Tuning Your Application</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.tgt_pltfrm\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"c928b5a1-622f-4441-8baf-adca1dde197f\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/0a5d76c154aeb9b749c9c3fc5ad0962e93754a62/docs/visual-basic/programming-guide/concepts/async/cancel-remaining-async-tasks-after-one-is-complete.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/async/cancel-remaining-async-tasks-after-one-is-complete.md\">\r\n<meta name=\"document_id\" content=\"1fb56cf8-4297-14a3-fa9e-81f210931a3b\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Cancel Remaining Async Tasks after One Is Complete (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.tgt_pltfrm":"","ms.assetid":"c928b5a1-622f-4441-8baf-adca1dde197f","caps.latest.revision":3,"ms.topic":"article","dev_langs":["vb"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Reorganizing the VB TOC (#1348)","commit_sha":"0a5d76c154aeb9b749c9c3fc5ad0962e93754a62","commit_date":"2017-02-14 10:22:48 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/0a5d76c154aeb9b749c9c3fc5ad0962e93754a62/docs/visual-basic/programming-guide/concepts/async/cancel-remaining-async-tasks-after-one-is-complete.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/async/cancel-remaining-async-tasks-after-one-is-complete.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/concepts/async/cancel-remaining-async-tasks-after-one-is-complete.md","document_id":"1fb56cf8-4297-14a3-fa9e-81f210931a3b","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/concepts/async/cancel-remaining-async-tasks-after-one-is-complete","toc_asset_id":"articles/visual-basic/programming-guide/concepts/async/toc.json","toc_rel":"toc.json","_op_ogTitle":"Cancel Remaining Async Tasks after One Is Complete (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":1328,"_op_rawTitle":"<h1 id=\"cancel-remaining-async-tasks-after-one-is-complete-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/concepts/async/cancel-remaining-async-tasks-after-one-is-complete.md\" sourcestartlinenumber=\"25\" sourceendlinenumber=\"25\">Cancel Remaining Async Tasks after One Is Complete (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/concepts/async/cancel-remaining-async-tasks-after-one-is-complete","fileRelativePath":"articles/visual-basic/programming-guide/concepts/async/cancel-remaining-async-tasks-after-one-is-complete.html"},"themesRelativePathToOutputRoot":"_themes/"}