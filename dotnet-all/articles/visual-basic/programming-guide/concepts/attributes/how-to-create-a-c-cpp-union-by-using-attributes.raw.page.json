{"content":"<div><div class=\"content\">\n<p>By using attributes you can customize how structs are laid out in memory. For example, you can create what is known as a union in C/C++ by using the <code>StructLayout(LayoutKind.Explicit)</code> and <code>FieldOffset</code> attributes.  </p>\n<h2 id=\"example\">Example</h2>\n<p> In this code segment, all of the fields of <code>TestUnion</code> start at the same location in memory.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">&#39; Add an Imports statement for System.Runtime.InteropServices.  \n\n&lt;System.Runtime.InteropServices.StructLayout(   \n      System.Runtime.InteropServices.LayoutKind.Explicit)&gt;   \nStructure TestUnion  \n    &lt;System.Runtime.InteropServices.FieldOffset(0)&gt;   \n    Public i As Integer  \n\n    &lt;System.Runtime.InteropServices.FieldOffset(0)&gt;   \n    Public d As Double  \n\n    &lt;System.Runtime.InteropServices.FieldOffset(0)&gt;   \n    Public c As Char  \n\n    &lt;System.Runtime.InteropServices.FieldOffset(0)&gt;   \n    Public b As Byte  \nEnd Structure  \n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> The following is another example where fields start at different explicitly set locations.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">&#39; Add an Imports statement for System.Runtime.InteropServices.  \n\n &lt;System.Runtime.InteropServices.StructLayout(   \n      System.Runtime.InteropServices.LayoutKind.Explicit)&gt;   \nStructure TestExplicit  \n     &lt;System.Runtime.InteropServices.FieldOffset(0)&gt;   \n     Public lg As Long  \n\n     &lt;System.Runtime.InteropServices.FieldOffset(0)&gt;   \n     Public i1 As Integer  \n\n     &lt;System.Runtime.InteropServices.FieldOffset(4)&gt;   \n     Public i2 As Integer  \n\n     &lt;System.Runtime.InteropServices.FieldOffset(8)&gt;   \n     Public d As Double  \n\n     &lt;System.Runtime.InteropServices.FieldOffset(12)&gt;   \n     Public c As Char  \n\n     &lt;System.Runtime.InteropServices.FieldOffset(14)&gt;   \n     Public b As Byte  \n End Structure  \n</code></pre><p> The two integer fields, <code>i1</code> and <code>i2</code>, share the same memory locations as <code>lg</code>. This sort of control over struct layout is useful when using platform invocation.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../../api/system.reflection\" data-linktype=\"relative-path\">System.Reflection</a><br> <a class=\"xref\" href=\"../../../../../api/system.attribute\" data-linktype=\"relative-path\">Attribute</a><br> <a href=\"../../index\" data-linktype=\"relative-path\">Visual Basic Programming Guide</a><br> <a href=\"https://msdn.microsoft.com/library/5x6cd29c\" data-linktype=\"external\">Attributes</a><br> <a href=\"../reflection\" data-linktype=\"relative-path\">Reflection (Visual Basic)</a><br> <a href=\"../../../language-reference/attributes\" data-linktype=\"relative-path\">Attributes (Visual Basic)</a><br> <a href=\"creating-custom-attributes\" data-linktype=\"relative-path\">Creating Custom Attributes (Visual Basic)</a><br> <a href=\"accessing-attributes-by-using-reflection\" data-linktype=\"relative-path\">Accessing Attributes by Using Reflection (Visual Basic)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.tgt_pltfrm\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"9352a7e4-c0da-4d07-aa14-55ed43736fcb\">\r\n<meta name=\"caps.latest.revision\" content=\"4\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/attributes/how-to-create-a-c-cpp-union-by-using-attributes.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/attributes/how-to-create-a-c-cpp-union-by-using-attributes.md\">\r\n<meta name=\"document_id\" content=\"4bea2c1a-8041-a617-234d-10a2bad9b13d\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"How to: Create a C-C++ Union by Using Attributes (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.tgt_pltfrm":"","ms.assetid":"9352a7e4-c0da-4d07-aa14-55ed43736fcb","caps.latest.revision":4,"ms.topic":"article","dev_langs":["vb"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/attributes/how-to-create-a-c-cpp-union-by-using-attributes.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/attributes/how-to-create-a-c-cpp-union-by-using-attributes.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/concepts/attributes/how-to-create-a-c-cpp-union-by-using-attributes.md","document_id":"4bea2c1a-8041-a617-234d-10a2bad9b13d","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/programming-guide/concepts/attributes/how-to-create-a-c-cpp-union-by-using-attributes","toc_asset_id":"articles/visual-basic/programming-guide/concepts/attributes/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Create a C-C++ Union by Using Attributes (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":193,"_op_rawTitle":"<h1 id=\"how-to-create-a-cc-union-by-using-attributes-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/concepts/attributes/how-to-create-a-c-cpp-union-by-using-attributes.md\" sourcestartlinenumber=\"25\" sourceendlinenumber=\"25\">How to: Create a C/C++ Union by Using Attributes (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/programming-guide/concepts/attributes/how-to-create-a-c-cpp-union-by-using-attributes","fileRelativePath":"articles/visual-basic/programming-guide/concepts/attributes/how-to-create-a-c-cpp-union-by-using-attributes.html"},"themesRelativePathToOutputRoot":"_themes/"}