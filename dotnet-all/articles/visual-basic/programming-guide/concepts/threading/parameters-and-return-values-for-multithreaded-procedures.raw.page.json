{"content":"<div><div class=\"content\">\n<p>Supplying and returning values in a multithreaded application is complicated because the constructor for the thread class must be passed a reference to a procedure that takes no arguments and returns no value. The following sections show some simple ways to supply parameters and return values from procedures on separate threads.  </p>\n<h2 id=\"supplying-parameters-for-multithreaded-procedures\">Supplying Parameters for Multithreaded Procedures</h2>\n<p> The best way to supply parameters for a multithreaded method call is to wrap the target method in a class and define fields for that class that will serve as parameters for the new thread. The advantage of this approach is that you can create a new instance of the class, with its own parameters, every time you want to start a new thread. For example, suppose you have a function that calculates the area of a triangle, as in the following code:  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Function CalcArea(ByVal Base As Double, ByVal Height As Double) As Double  \n    CalcArea = 0.5 * Base * Height  \nEnd Function  \n</code></pre><p> You can write a class that wraps the <code>CalcArea</code> function and creates fields to store input parameters, as follows:  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Class AreaClass  \n    Public Base As Double  \n    Public Height As Double  \n    Public Area As Double  \n    Sub CalcArea()  \n        Area = 0.5 * Base * Height  \n        MessageBox.Show(&quot;The area is: &quot; &amp; Area.ToString)  \n    End Sub  \nEnd Class  \n</code></pre><p> To use the <code>AreaClass</code>, you can create an <code>AreaClass</code> object, and set the <code>Base</code> and <code>Height</code> properties as shown in the following code:  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Protected Sub TestArea()  \n    Dim AreaObject As New AreaClass  \n    Dim Thread As New System.Threading.Thread(  \n                        AddressOf AreaObject.CalcArea)  \n    AreaObject.Base = 30  \n    AreaObject.Height = 40  \n    Thread.Start()  \nEnd Sub  \n</code></pre><p> Notice that the <code>TestArea</code> procedure does not check the value of the <code>Area</code> field after calling the <code>CalcArea</code> method. Because <code>CalcArea</code> runs on a separate thread, the <code>Area</code> field is not guaranteed to be set if you check it immediately after calling <code>Thread.Start</code>. The next section discusses a better way to return values from multithreaded procedures.  </p>\n<h2 id=\"returning-values-from-multithreaded-procedures\">Returning Values from Multithreaded Procedures</h2>\n<p> Returning values from procedures that run on separate threads is complicated by the fact that the procedures cannot be functions and cannot use <code>ByRef</code> arguments. The easiest way to return values is to use the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/system.componentmodel.backgroundworker(v=vs.110).aspx\" data-linktype=\"external\">BackgroundWorker</a> component to manage your threads and raise an event when the task is done, and process the results with an event handler.  </p>\n<p> The following example returns a value by raising an event from a procedure running on a separate thread:  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Private Class AreaClass2  \n    Public Base As Double  \n    Public Height As Double  \n    Function CalcArea() As Double  \n        &#39; Calculate the area of a triangle.  \n        Return 0.5 * Base * Height  \n    End Function  \nEnd Class  \n\nPrivate WithEvents BackgroundWorker1 As New System.ComponentModel.BackgroundWorker  \n\nPrivate Sub TestArea2()  \n    Dim AreaObject2 As New AreaClass2  \n    AreaObject2.Base = 30  \n    AreaObject2.Height = 40  \n\n    &#39; Start the asynchronous operation.  \n    BackgroundWorker1.RunWorkerAsync(AreaObject2)  \nEnd Sub  \n\n&#39; This method runs on the background thread when it starts.  \nPrivate Sub BackgroundWorker1_DoWork(  \n    ByVal sender As Object,   \n    ByVal e As System.ComponentModel.DoWorkEventArgs  \n    ) Handles BackgroundWorker1.DoWork  \n\n    Dim AreaObject2 As AreaClass2 = CType(e.Argument, AreaClass2)  \n    &#39; Return the value through the Result property.  \n    e.Result = AreaObject2.CalcArea()  \nEnd Sub  \n\n&#39; This method runs on the main thread when the background thread finishes.  \nPrivate Sub BackgroundWorker1_RunWorkerCompleted(  \n    ByVal sender As Object,  \n    ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs  \n    ) Handles BackgroundWorker1.RunWorkerCompleted  \n\n    &#39; Access the result through the Result property.  \n    Dim Area As Double = CDbl(e.Result)  \n    MessageBox.Show(&quot;The area is: &quot; &amp; Area.ToString)  \nEnd Sub  \n</code></pre><p> You can provide parameters and return values to thread-pool threads by using the optional <code>ByVal</code> state-object variable of the <a class=\"xref\" href=\"../../../../../api/system.threading.threadpool#System_Threading_ThreadPool_QueueUserWorkItem_\" data-linktype=\"relative-path\">QueueUserWorkItem</a> method. Thread-timer threads also support a state object for this purpose. For information on thread pooling and thread timers, see <a href=\"thread-pooling\" data-linktype=\"relative-path\">Thread Pooling (Visual Basic)</a><a href=\"http://msdn.microsoft.com/library/4b8bb2c8-8ca4-457c-9afd-d11bc9a05701\" data-linktype=\"external\">Thread Pooling</a> and <a href=\"thread-timers\" data-linktype=\"relative-path\">Thread Timers (Visual Basic)</a>.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"walkthrough-multithreading-with-the-backgroundworker-component\" data-linktype=\"relative-path\">Walkthrough: Multithreading with the BackgroundWorker Component (Visual Basic)</a><br> <a href=\"thread-pooling\" data-linktype=\"relative-path\">Thread Pooling (Visual Basic)</a><br> <a href=\"thread-synchronization\" data-linktype=\"relative-path\">Thread Synchronization (Visual Basic)</a><br> <a href=\"../../language-features/events/index\" data-linktype=\"relative-path\">Events</a><br> <a href=\"multithreaded-applications\" data-linktype=\"relative-path\">Multithreaded Applications (Visual Basic)</a><br> <a href=\"../../language-features/delegates/index\" data-linktype=\"relative-path\">Delegates</a><br> <a href=\"http://msdn.microsoft.com/library/2fc31e68-fb71-4544-b654-0ce720478779\" data-linktype=\"external\">Multithreading in Components</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.tgt_pltfrm\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"cbdce172-7ff6-41a9-bb21-53a7c6f538a5\">\r\n<meta name=\"caps.latest.revision\" content=\"4\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-21 01:42 AM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/0a5d76c154aeb9b749c9c3fc5ad0962e93754a62/docs/visual-basic/programming-guide/concepts/threading/parameters-and-return-values-for-multithreaded-procedures.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/visual-basic/programming-guide/concepts/threading/parameters-and-return-values-for-multithreaded-procedures.md\">\r\n<meta name=\"document_id\" content=\"542eb38c-e9cc-2ed8-9acb-c2e0da56d97c\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Parameters and Return Values for Multithreaded Procedures (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.tgt_pltfrm":"","ms.assetid":"cbdce172-7ff6-41a9-bb21-53a7c6f538a5","caps.latest.revision":4,"ms.topic":"article","dev_langs":["vb"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Reorganizing the VB TOC (#1348)","commit_sha":"0a5d76c154aeb9b749c9c3fc5ad0962e93754a62","commit_date":"2017-02-14 10:22:48 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-21 01:42 AM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/21/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/0a5d76c154aeb9b749c9c3fc5ad0962e93754a62/docs/visual-basic/programming-guide/concepts/threading/parameters-and-return-values-for-multithreaded-procedures.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/visual-basic/programming-guide/concepts/threading/parameters-and-return-values-for-multithreaded-procedures.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/concepts/threading/parameters-and-return-values-for-multithreaded-procedures.md","document_id":"542eb38c-e9cc-2ed8-9acb-c2e0da56d97c","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/programming-guide/concepts/threading/parameters-and-return-values-for-multithreaded-procedures","toc_asset_id":"articles/visual-basic/programming-guide/concepts/threading/toc.json","toc_rel":"toc.json","_op_ogTitle":"Parameters and Return Values for Multithreaded Procedures (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":623,"_op_rawTitle":"<h1 id=\"parameters-and-return-values-for-multithreaded-procedures-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/concepts/threading/parameters-and-return-values-for-multithreaded-procedures.md\" sourcestartlinenumber=\"25\" sourceendlinenumber=\"25\">Parameters and Return Values for Multithreaded Procedures (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/programming-guide/concepts/threading/parameters-and-return-values-for-multithreaded-procedures","fileRelativePath":"articles/visual-basic/programming-guide/concepts/threading/parameters-and-return-values-for-multithreaded-procedures.html"},"themesRelativePathToOutputRoot":"_themes/"}