{"content":"<div><div class=\"content\">\n<p>This walkthrough demonstrates how to create a multithreaded Windows Forms application that searches a text file for occurrences of a word. It demonstrates:  </p>\n<ul>\n<li><p>Defining a class with a method that can be called by the <a class=\"xref\" href=\"../../../../../api/system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> component.  </p>\n</li>\n<li><p>Handling events raised by the <a class=\"xref\" href=\"../../../../../api/system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> component.  </p>\n</li>\n<li><p>Starting a <a class=\"xref\" href=\"../../../../../api/system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> component to run a method.  </p>\n</li>\n<li><p>Implementing a <code>Cancel</code> button that stops the <a class=\"xref\" href=\"../../../../../api/system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> component.  </p>\n</li>\n</ul>\n<h3 id=\"to-create-the-user-interface\">To create the user interface</h3>\n<ol>\n<li><p>Open a new Visual Basic Windows Forms Application project, and create a form named <code>Form1</code>.  </p>\n</li>\n<li><p>Add two buttons and four text boxes to <code>Form1</code>.  </p>\n</li>\n<li><p>Name the objects as shown in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Object</th>\n<th>Property</th>\n<th>Setting</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>First button</td>\n<td><code>Name</code>, <code>Text</code></td>\n<td>Start, Start</td>\n</tr>\n<tr>\n<td>Second button</td>\n<td><code>Name</code>, <code>Text</code></td>\n<td>Cancel, Cancel</td>\n</tr>\n<tr>\n<td>First text box</td>\n<td><code>Name</code>, <code>Text</code></td>\n<td>SourceFile, &quot;&quot;</td>\n</tr>\n<tr>\n<td>Second text box</td>\n<td><code>Name</code>, <code>Text</code></td>\n<td>CompareString, &quot;&quot;</td>\n</tr>\n<tr>\n<td>Third text box</td>\n<td><code>Name</code>, <code>Text</code></td>\n<td>WordsCounted, &quot;0&quot;</td>\n</tr>\n<tr>\n<td>Fourth text box</td>\n<td><code>Name</code>, <code>Text</code></td>\n<td>LinesCounted, &quot;0&quot;</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li><p>Add a label next to each text box. Set the <code>Text</code> property for each label as shown in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Object</th>\n<th>Property</th>\n<th>Setting</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>First label</td>\n<td><code>Text</code></td>\n<td>Source File</td>\n</tr>\n<tr>\n<td>Second label</td>\n<td><code>Text</code></td>\n<td>Compare String</td>\n</tr>\n<tr>\n<td>Third label</td>\n<td><code>Text</code></td>\n<td>Matching Words</td>\n</tr>\n<tr>\n<td>Fourth label</td>\n<td><code>Text</code></td>\n<td>Lines Counted</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ol>\n<h3 id=\"to-create-a-backgroundworker-component-and-subscribe-to-its-events\">To create a BackgroundWorker component and subscribe to its events</h3>\n<ol>\n<li><p>Add a <a class=\"xref\" href=\"../../../../../api/system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> component from the <strong>Components</strong> section of the <strong>ToolBox</strong> to the form. It will appear in the form&#39;s component tray.  </p>\n</li>\n<li><p>Set the following properties for the BackgroundWorker1 object.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Setting</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>WorkerReportsProgress</code></td>\n<td>True</td>\n</tr>\n<tr>\n<td><code>WorkerSupportsCancellation</code></td>\n<td>True</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ol>\n<h3 id=\"to-define-the-method-that-will-run-on-a-separate-thread\">To define the method that will run on a separate thread</h3>\n<ol>\n<li><p>From the <strong>Project</strong> menu, choose <strong>Add Class</strong> to add a class to the project. The <strong>Add New Item</strong> dialog box is displayed.  </p>\n</li>\n<li><p>Select <strong>Class</strong> from the templates window and enter <code>Words.vb</code> in the name field.  </p>\n</li>\n<li><p>Click <strong>Add</strong>. The <code>Words</code> class is displayed.  </p>\n</li>\n<li><p>Add the following code to the <code>Words</code> class:  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Public Class Words  \n    &#39; Object to store the current state, for passing to the caller.  \n    Public Class CurrentState  \n        Public LinesCounted As Integer  \n        Public WordsMatched As Integer  \n    End Class  \n\n    Public SourceFile As String  \n    Public CompareString As String  \n    Private WordCount As Integer = 0  \n    Private LinesCounted As Integer = 0  \n\n    Public Sub CountWords(  \n        ByVal worker As System.ComponentModel.BackgroundWorker,  \n        ByVal e As System.ComponentModel.DoWorkEventArgs  \n    )  \n        &#39; Initialize the variables.  \n        Dim state As New CurrentState  \n        Dim line = &quot;&quot;  \n        Dim elapsedTime = 20  \n        Dim lastReportDateTime = Now  \n\n        If CompareString Is Nothing OrElse  \n           CompareString = System.String.Empty Then  \n\n           Throw New Exception(&quot;CompareString not specified.&quot;)  \n        End If  \n\n        Using myStream As New System.IO.StreamReader(SourceFile)  \n\n            &#39; Process lines while there are lines remaining in the file.  \n            Do While Not myStream.EndOfStream  \n                If worker.CancellationPending Then  \n                    e.Cancel = True  \n                    Exit Do  \n                Else  \n                    line = myStream.ReadLine  \n                    WordCount += CountInString(line, CompareString)  \n                    LinesCounted += 1  \n\n                    &#39; Raise an event so the form can monitor progress.  \n                    If Now &gt; lastReportDateTime.AddMilliseconds(elapsedTime) Then  \n                        state.LinesCounted = LinesCounted  \n                        state.WordsMatched = WordCount  \n                        worker.ReportProgress(0, state)  \n                        lastReportDateTime = Now  \n                    End If  \n\n                    &#39; Uncomment for testing.  \n                    &#39;System.Threading.Thread.Sleep(5)  \n                End If  \n            Loop  \n\n            &#39; Report the final count values.  \n            state.LinesCounted = LinesCounted  \n            state.WordsMatched = WordCount  \n            worker.ReportProgress(0, state)  \n        End Using  \n    End Sub  \n\n    Private Function CountInString(  \n        ByVal SourceString As String,  \n        ByVal CompareString As String  \n    ) As Integer  \n        &#39; This function counts the number of times  \n        &#39; a word is found in a line.  \n        If SourceString Is Nothing Then  \n            Return 0  \n        End If  \n\n        Dim EscapedCompareString =  \n            System.Text.RegularExpressions.Regex.Escape(CompareString)  \n\n        &#39; To count all occurrences of the string, even within words, remove  \n        &#39; both instances of &quot;\\b&quot;.  \n        Dim regex As New System.Text.RegularExpressions.Regex(  \n            &quot;\\b&quot; + EscapedCompareString + &quot;\\b&quot;,  \n            System.Text.RegularExpressions.RegexOptions.IgnoreCase)  \n\n        Dim matches As System.Text.RegularExpressions.MatchCollection  \n        matches = regex.Matches(SourceString)  \n        Return matches.Count  \n    End Function  \nEnd Class  \n</code></pre></li>\n</ol>\n<h3 id=\"to-handle-events-from-the-thread\">To handle events from the thread</h3>\n<ul>\n<li><p>Add the following event handlers to your main form:  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Private Sub BackgroundWorker1_RunWorkerCompleted(   \n    ByVal sender As Object,   \n    ByVal e As System.ComponentModel.RunWorkerCompletedEventArgs  \n  ) Handles BackgroundWorker1.RunWorkerCompleted  \n\n    &#39; This event handler is called when the background thread finishes.  \n    &#39; This method runs on the main thread.  \n    If e.Error IsNot Nothing Then  \n        MessageBox.Show(&quot;Error: &quot; &amp; e.Error.Message)  \n    ElseIf e.Cancelled Then  \n        MessageBox.Show(&quot;Word counting canceled.&quot;)  \n    Else  \n        MessageBox.Show(&quot;Finished counting words.&quot;)  \n    End If  \nEnd Sub  \n\nPrivate Sub BackgroundWorker1_ProgressChanged(   \n    ByVal sender As Object,   \n    ByVal e As System.ComponentModel.ProgressChangedEventArgs  \n  ) Handles BackgroundWorker1.ProgressChanged  \n\n    &#39; This method runs on the main thread.  \n    Dim state As Words.CurrentState =   \n        CType(e.UserState, Words.CurrentState)  \n    Me.LinesCounted.Text = state.LinesCounted.ToString  \n    Me.WordsCounted.Text = state.WordsMatched.ToString  \nEnd Sub  \n</code></pre></li>\n</ul>\n<h3 id=\"to-start-and-call-a-new-thread-that-runs-the-wordcount-method\">To start and call a new thread that runs the WordCount method</h3>\n<ol>\n<li><p>Add the following procedures to your program:  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Private Sub BackgroundWorker1_DoWork(   \n    ByVal sender As Object,   \n    ByVal e As System.ComponentModel.DoWorkEventArgs  \n  ) Handles BackgroundWorker1.DoWork  \n\n    &#39; This event handler is where the actual work is done.  \n    &#39; This method runs on the background thread.  \n\n    &#39; Get the BackgroundWorker object that raised this event.  \n    Dim worker As System.ComponentModel.BackgroundWorker  \n    worker = CType(sender, System.ComponentModel.BackgroundWorker)  \n\n    &#39; Get the Words object and call the main method.  \n    Dim WC As Words = CType(e.Argument, Words)  \n    WC.CountWords(worker, e)  \nEnd Sub  \n\nSub StartThread()  \n    &#39; This method runs on the main thread.  \n    Me.WordsCounted.Text = &quot;0&quot;  \n\n    &#39; Initialize the object that the background worker calls.  \n    Dim WC As New Words  \n    WC.CompareString = Me.CompareString.Text  \n    WC.SourceFile = Me.SourceFile.Text  \n\n    &#39; Start the asynchronous operation.  \n    BackgroundWorker1.RunWorkerAsync(WC)  \nEnd Sub  \n</code></pre></li>\n<li><p>Call the <code>StartThread</code> method from the <code>Start</code> button on your form:  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Private Sub Start_Click() Handles Start.Click  \n    StartThread()  \nEnd Sub  \n</code></pre></li>\n</ol>\n<h3 id=\"to-implement-a-cancel-button-that-stops-the-thread\">To implement a Cancel button that stops the thread</h3>\n<ul>\n<li><p>Call the <code>StopThread</code> procedure from the <code>Click</code> event handler for the <code>Cancel</code> button.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Private Sub Cancel_Click() Handles Cancel.Click  \n    &#39; Cancel the asynchronous operation.  \n    Me.BackgroundWorker1.CancelAsync()  \nEnd Sub  \n</code></pre></li>\n</ul>\n<h2 id=\"testing\">Testing</h2>\n<p> You can now test the application to make sure it works correctly.  </p>\n<h4 id=\"to-test-the-application\">To test the application</h4>\n<ol>\n<li><p>Press F5 to run the application.  </p>\n</li>\n<li><p>When the form is displayed, enter the file path for the file you want to test in the <code>sourceFile</code> box. For example, assuming your test file is named Test.txt, enter C:\\Test.txt.  </p>\n</li>\n<li><p>In the second text box, enter a word or phrase for the application to search for in the text file.  </p>\n</li>\n<li><p>Click the <code>Start</code> button. The <code>LinesCounted</code> button should begin incrementing immediately. The application displays the message &quot;Finished Counting&quot; when it is done.  </p>\n</li>\n</ol>\n<h4 id=\"to-test-the-cancel-button\">To test the Cancel button</h4>\n<ol>\n<li><p>Press F5 to start the application, and enter the file name and search word as described in the previous procedure. Make sure that the file you choose is large enough to ensure you will have time to cancel the procedure before it is finished.  </p>\n</li>\n<li><p>Click the <code>Start</code> button to start the application.  </p>\n</li>\n<li><p>Click the <code>Cancel</code> button. The application should stop counting immediately.  </p>\n</li>\n</ol>\n<h2 id=\"next-steps\">Next Steps</h2>\n<p> This application contains some basic error handling. It detects blank search strings. You can make this program more robust by handling other errors, such as exceeding the maximum number of words or lines that can be counted.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"index\" data-linktype=\"relative-path\">Threading (Visual Basic)</a><br> <a href=\"http://msdn.microsoft.com/library/05693b70-3566-4d91-9f2c-c9bc4ccb3001\" data-linktype=\"external\">Walkthrough: Authoring a Simple Multithreaded Component with Visual Basic</a><br> <a href=\"../../../../csharp/programming-guide/events/how-to-subscribe-to-and-unsubscribe-from-events\" data-linktype=\"relative-path\">How to: Subscribe to and Unsubscribe from Events</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.tgt_pltfrm\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"e4cd9b2a-f924-470e-a16e-50274709b40e\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/0a5d76c154aeb9b749c9c3fc5ad0962e93754a62/docs/visual-basic/programming-guide/concepts/threading/walkthrough-multithreading-with-the-backgroundworker-component.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/threading/walkthrough-multithreading-with-the-backgroundworker-component.md\">\r\n<meta name=\"document_id\" content=\"c4b24e1f-3c24-838b-36fa-b10d3ea6f796\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Multithreading with the BackgroundWorker Component (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.tgt_pltfrm":"","ms.assetid":"e4cd9b2a-f924-470e-a16e-50274709b40e","caps.latest.revision":3,"ms.topic":"article","dev_langs":["vb"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Reorganizing the VB TOC (#1348)","commit_sha":"0a5d76c154aeb9b749c9c3fc5ad0962e93754a62","commit_date":"2017-02-14 10:22:48 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/0a5d76c154aeb9b749c9c3fc5ad0962e93754a62/docs/visual-basic/programming-guide/concepts/threading/walkthrough-multithreading-with-the-backgroundworker-component.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/threading/walkthrough-multithreading-with-the-backgroundworker-component.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/concepts/threading/walkthrough-multithreading-with-the-backgroundworker-component.md","document_id":"c4b24e1f-3c24-838b-36fa-b10d3ea6f796","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/concepts/threading/walkthrough-multithreading-with-the-backgroundworker-component","toc_asset_id":"articles/visual-basic/programming-guide/concepts/threading/toc.json","toc_rel":"toc.json","_op_ogTitle":"Multithreading with the BackgroundWorker Component (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":1074,"_op_rawTitle":"<h1 id=\"walkthrough-multithreading-with-the-backgroundworker-component-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/concepts/threading/walkthrough-multithreading-with-the-backgroundworker-component.md\" sourcestartlinenumber=\"25\" sourceendlinenumber=\"25\">Walkthrough: Multithreading with the BackgroundWorker Component (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/concepts/threading/walkthrough-multithreading-with-the-backgroundworker-component","fileRelativePath":"articles/visual-basic/programming-guide/concepts/threading/walkthrough-multithreading-with-the-backgroundworker-component.html"},"themesRelativePathToOutputRoot":"_themes/"}