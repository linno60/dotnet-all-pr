{"content":"<div><div class=\"content\">\n<p>You can analyze the structure and content of expression trees when you debug your applications. To get a quick overview of the expression tree structure, you can use the <code>DebugView</code> property, which is available only in debug mode. For more information about debugging, see <a href=\"https://docs.microsoft.com/visualstudio/debugger/debugging-in-visual-studio\" data-linktype=\"external\">Debugging in Visual Studio</a>.  </p>\n<p> To better represent the content of expression trees, the <code>DebugView</code> property uses Visual Studio visualizers. For more information, see <a href=\"https://docs.microsoft.com/visualstudio/debugger/create-custom-visualizers-of-data\" data-linktype=\"external\">Create Custom Visualizers</a>.  </p>\n<h3 id=\"to-open-a-visualizer-for-an-expression-tree\">To open a visualizer for an expression tree</h3>\n<ol>\n<li><p>Click the magnifying glass icon that appears next to the <code>DebugView</code> property of an expression tree in <strong>DataTips</strong>, a <strong>Watch</strong> window, the <strong>Autos</strong> window, or the <strong>Locals</strong> window.  </p>\n<p> A list of visualizers is displayed.  </p>\n</li>\n<li><p>Click the visualizer you want to use.  </p>\n<p>Each expression type is displayed in the visualizer as described in the following sections.  </p>\n</li>\n</ol>\n<h2 id=\"parameterexpressions\">ParameterExpressions</h2>\n<p> <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/system.linq.expressions.parameterexpression(v=vs.110).aspx\" data-linktype=\"external\">ParameterExpression</a> variable names are displayed with a &quot;$&quot; symbol at the beginning.  </p>\n<p> If a parameter does not have a name, it is assigned an automatically generated name, such as <code>$var1</code> or <code>$var2</code>.  </p>\n<h3 id=\"examples\">Examples</h3>\n<ul>\n<li><p><code>Expression</code>  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Dim numParam As ParameterExpression =   \nExpression.Parameter(GetType(Integer), &quot;num&quot;)  \n</code></pre><p> <code>DebugView</code> property  </p>\n<p> <code>$num</code>  </p>\n</li>\n<li><p><code>Expression</code>  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Dim numParam As ParameterExpression =   \nExpression.Parameter(GetType(Integer))  \n</code></pre><p> <code>DebugView</code> property  </p>\n<p> <code>$var1</code>  </p>\n</li>\n</ul>\n<h2 id=\"constantexpressions\">ConstantExpressions</h2>\n<p> For <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/system.linq.expressions.constantexpression(v=vs.110).aspx\" data-linktype=\"external\">ConstantExpression</a> objects that represent integer values, strings, and <code>null</code>, the value of the constant is displayed.  </p>\n<h3 id=\"examples-1\">Examples</h3>\n<ul>\n<li><p><code>Expression</code>  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Dim num as Integer= 10  \nDim expr As ConstantExpression = Expression.Constant(num)  \n</code></pre><p> <code>DebugView</code> property  </p>\n<p> 10  </p>\n</li>\n<li><p><code>Expression</code>  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Dim num As Double = 10  \nDim expr As ConstantExpression = Expression.Constant(num)  \n</code></pre><p> <code>DebugView</code> property  </p>\n<p> 10D  </p>\n</li>\n</ul>\n<h2 id=\"blockexpression\">BlockExpression</h2>\n<p> If the type of a <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/system.linq.expressions.blockexpression(v=vs.110).aspx\" data-linktype=\"external\">BlockExpression</a> object differs from the type of the last expression in the block, the type is displayed in the <code>DebugInfo</code> property in angle brackets (&lt; and &gt;). Otherwise, the type of the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/system.linq.expressions.blockexpression(v=vs.110).aspx\" data-linktype=\"external\">BlockExpression</a> object is not displayed.  </p>\n<h3 id=\"examples-2\">Examples</h3>\n<ul>\n<li><p><code>Expression</code>  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Dim block As BlockExpression = Expression.Block(Expression.Constant(&quot;test&quot;))  \n</code></pre><p> <code>DebugView</code> property  </p>\n<p> <code>.Block() {</code>  </p>\n<p> <code>&quot;test&quot;</code>  </p>\n<p> <code>}</code>  </p>\n</li>\n<li><p><code>Expression</code>  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Dim block As BlockExpression =   \nExpression.Block(GetType(Object), Expression.Constant(&quot;test&quot;))  \n</code></pre><p> <code>DebugView</code> property  </p>\n<p> <code>.Block&lt;System.Object&gt;() {</code>  </p>\n<p> <code>&quot;test&quot;</code>  </p>\n<p> <code>}</code>  </p>\n</li>\n</ul>\n<h2 id=\"lambdaexpression\">LambdaExpression</h2>\n<p> <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/system.linq.expressions.lambdaexpression(v=vs.110).aspx\" data-linktype=\"external\">LambdaExpression</a> objects are displayed together with their delegate types.  </p>\n<p> If a lambda expression does not have a name, it is assigned an automatically generated name, such as <code>#Lambda1</code> or <code>#Lambda2</code>.  </p>\n<h3 id=\"examples-3\">Examples</h3>\n<ul>\n<li><p><code>Expression</code>  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Dim lambda As LambdaExpression =   \nExpression.Lambda(Of Func(Of Integer))(Expression.Constant(1))  \n</code></pre><p> <code>DebugView</code> property  </p>\n<p> <code>.Lambda #Lambda1&lt;System.Func&#39;1[System.Int32]&gt;() {</code>  </p>\n<p> <code>1</code>  </p>\n<p> <code>}</code>  </p>\n</li>\n<li><p><code>Expression</code>  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Dim lambda As LambdaExpression =   \nExpression.Lambda(Of Func(Of Integer))(Expression.Constant(1), &quot;SampleLamda&quot;, Nothing)  \n</code></pre><p> <code>DebugView</code> property  </p>\n<p> <code>.Lambda SampleLambda&lt;System.Func&#39;1[System.Int32]&gt;() {</code>  </p>\n<p> <code>1</code>  </p>\n<p> <code>}</code>  </p>\n</li>\n</ul>\n<h2 id=\"labelexpression\">LabelExpression</h2>\n<p> If you specify a default value for the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/system.linq.expressions.labelexpression(v=vs.110).aspx\" data-linktype=\"external\">LabelExpression</a> object, this value is displayed before the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/system.linq.expressions.labeltarget(v=vs.110).aspx\" data-linktype=\"external\">LabelTarget</a> object.  </p>\n<p> The <code>.Label</code> token indicates the start of the label. The <code>.LabelTarget</code> token indicates the destination of the target to jump to.  </p>\n<p> If a label does not have a name, it is assigned an automatically generated name, such as <code>#Label1</code> or <code>#Label2</code>.  </p>\n<h3 id=\"examples-4\">Examples</h3>\n<ul>\n<li><p><code>Expression</code>  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Dim target As LabelTarget = Expression.Label(GetType(Integer), &quot;SampleLabel&quot;)  \nDim label1 As BlockExpression = Expression.Block(  \nExpression.Goto(target, Expression.Constant(0)),  \nExpression.Label(target, Expression.Constant(-1)))  \n</code></pre><p> <code>DebugView</code> property  </p>\n<p> <code>.Block() {</code>  </p>\n<p> <code>.Goto SampleLabel { 0 };</code>  </p>\n<p> <code>.Label</code>  </p>\n<p> <code>-1</code>  </p>\n<p> <code>.LabelTarget SampleLabel:</code>  </p>\n<p> <code>}</code>  </p>\n</li>\n<li><p><code>Expression</code>  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Dim target As LabelTarget = Expression.Label()  \nDim block As BlockExpression = Expression.Block(  \nExpression.Goto(target), Expression.Label(target))  \n</code></pre><p> <code>DebugView</code> property  </p>\n<p> <code>.Block() {</code>  </p>\n<p> <code>.Goto #Label1 { };</code>  </p>\n<p> <code>.Label</code>  </p>\n<p> <code>.LabelTarget #Label1:</code>  </p>\n<p> <code>}</code>  </p>\n</li>\n</ul>\n<h2 id=\"checked-operators\">Checked Operators</h2>\n<p> Checked operators are displayed with the &quot;#&quot; symbol in front of the operator. For example, the checked addition operator is displayed as <code>#+</code>.  </p>\n<h3 id=\"examples-5\">Examples</h3>\n<ul>\n<li><p><code>Expression</code>  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Dim expr As Expression = Expression.AddChecked(  \nExpression.Constant(1), Expression.Constant(2))  \n</code></pre><p> <code>DebugView</code> property  </p>\n<p> <code>1 #+ 2</code>  </p>\n</li>\n<li><p><code>Expression</code>  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Dim expr As Expression = Expression.ConvertChecked(  \nExpression.Constant(10.0), GetType(Integer))  \n</code></pre><p> <code>DebugView</code> property  </p>\n<p> <code>#(System.Int32)10D</code>  </p>\n</li>\n</ul>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"index\" data-linktype=\"relative-path\">Expression Trees (Visual Basic)</a><br> <a href=\"https://docs.microsoft.com/visualstudio/debugger/debugging-in-visual-studio\" data-linktype=\"external\">Debugging in Visual Studio</a><br> <a href=\"https://docs.microsoft.com/visualstudio/debugger/create-custom-visualizers-of-data\" data-linktype=\"external\">Create Custom Visualizers</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.tgt_pltfrm\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"492cc28f-b7a2-4c47-b582-b3c437b8a5d5\">\r\n<meta name=\"caps.latest.revision\" content=\"4\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-21 01:42 AM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/expression-trees/debugging-expression-trees-in-visual-studio.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/visual-basic/programming-guide/concepts/expression-trees/debugging-expression-trees-in-visual-studio.md\">\r\n<meta name=\"document_id\" content=\"0a096599-929d-e4b8-2780-24b745fb1225\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Debugging Expression Trees in Visual Studio (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.tgt_pltfrm":"","ms.assetid":"492cc28f-b7a2-4c47-b582-b3c437b8a5d5","caps.latest.revision":4,"ms.topic":"article","dev_langs":["vb"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Absolute urls and other fixes (#1281)","commit_sha":"f7dffe4885b331cec8d37f3cc5c9163f69c3b4c9","commit_date":"2016-11-22 12:57:26 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-21 01:42 AM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/21/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/expression-trees/debugging-expression-trees-in-visual-studio.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/visual-basic/programming-guide/concepts/expression-trees/debugging-expression-trees-in-visual-studio.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/concepts/expression-trees/debugging-expression-trees-in-visual-studio.md","document_id":"0a096599-929d-e4b8-2780-24b745fb1225","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/programming-guide/concepts/expression-trees/debugging-expression-trees-in-visual-studio","toc_asset_id":"articles/visual-basic/programming-guide/concepts/expression-trees/toc.json","toc_rel":"toc.json","_op_ogTitle":"Debugging Expression Trees in Visual Studio (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":553,"_op_rawTitle":"<h1 id=\"debugging-expression-trees-in-visual-studio-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/concepts/expression-trees/debugging-expression-trees-in-visual-studio.md\" sourcestartlinenumber=\"25\" sourceendlinenumber=\"25\">Debugging Expression Trees in Visual Studio (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/programming-guide/concepts/expression-trees/debugging-expression-trees-in-visual-studio","fileRelativePath":"articles/visual-basic/programming-guide/concepts/expression-trees/debugging-expression-trees-in-visual-studio.html"},"themesRelativePathToOutputRoot":"_themes/"}