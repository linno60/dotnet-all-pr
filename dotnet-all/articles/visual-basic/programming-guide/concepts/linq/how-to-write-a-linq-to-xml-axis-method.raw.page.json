{"content":"<div><div class=\"content\">\n<p>You can write your own axis methods to retrieve collections from an XML tree. One of the best ways to do this is to write an extension method that returns a collection of elements or attributes. You can write your extension method to return specific subsets of elements or attributes, based on the requirements of your application.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following example uses two extension methods. The first extension method, <code>GetXPath</code>, operates on <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xobject\" data-linktype=\"relative-path\">XObject</a>, and returns an XPath expression that when evaluated will return the node or attribute. The second extension method, <code>Find</code>, operates on <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>. It returns a collection of <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a> objects and <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> objects that contain some specified text.  </p>\n<p> This example uses the following XML document: <a href=\"sample-xml-file-multiple-purchase-orders-linq-to-xml\" data-linktype=\"relative-path\">Sample XML File: Multiple Purchase Orders (LINQ to XML)</a>.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Imports System.Runtime.CompilerServices  \nImports System.Text  \n\nModule Module1  \n    Sub Main()  \n        Dim purchaseOrders = XElement.Load(&quot;..\\..\\PurchaseOrders.xml&quot;)  \n\n        Dim subset = From xobj In purchaseOrders.Find(&quot;1999&quot;)  \n\n        For Each obj In subset  \n            Console.WriteLine(obj.GetXPath())  \n            If obj.GetType() = GetType(XElement) Then  \n                Console.WriteLine(CType(obj, XElement).Value)  \n            ElseIf obj.GetType() = GetType(XAttribute) Then  \n                Console.WriteLine(CType(obj, XAttribute).Value)  \n            End If  \n        Next  \n    End Sub  \nEnd Module  \n\nPublic Module MyExtensions  \n\n    Private Function GetQName(ByVal xe As XElement) As String  \n        Dim prefix = xe.GetPrefixOfNamespace(xe.Name.Namespace)  \n        If xe.Name.Namespace = XNamespace.None OrElse prefix Is Nothing Then  \n            Return xe.Name.LocalName  \n        Else  \n            Return prefix &amp; &quot;:&quot; &amp; xe.Name.LocalName  \n        End If  \n    End Function  \n\n    Private Function GetQName(ByVal xa As XAttribute) As String  \n        Dim prefix = xa.Parent.GetPrefixOfNamespace(xa.Name.Namespace)  \n        If xa.Name.Namespace = XNamespace.None OrElse prefix Is Nothing Then  \n            Return xa.Name.LocalName  \n        Else  \n            Return prefix &amp; &quot;:&quot; &amp; xa.Name.LocalName  \n        End If  \n    End Function  \n\n    Private Function NameWithPredicate(ByVal el As XElement) As String  \n        If el.Parent IsNot Nothing AndAlso  \n           el.Parent.Elements(el.Name).Count() &lt;&gt; 1 Then  \n            Return GetQName(el) &amp; &quot;[&quot; &amp;  \n                (el.ElementsBeforeSelf(el.Name).Count() + 1) &amp; &quot;]&quot;  \n        Else  \n            Return GetQName(el)  \n        End If  \n    End Function  \n\n    &lt;Extension()&gt;  \n    Public Function StrCat(Of T)(ByVal source As IEnumerable(Of T),  \n                                 ByVal separator As String) As String  \n        Return source.Aggregate(New StringBuilder,  \n                                Function(sb, i) sb.  \n                                    Append(i.ToString()).  \n                                    Append(separator),  \n                                    Function(s) s.ToString())  \n    End Function  \n\n    &lt;Extension()&gt;  \n    Public Function GetXPath(ByVal xobj As XObject) As String  \n\n        If xobj.Parent Is Nothing Then  \n            Dim doc = TryCast(xobj, XDocument)  \n            If doc IsNot Nothing Then Return &quot;.&quot;  \n\n            Dim el = TryCast(xobj, XElement)  \n            If el IsNot Nothing Then Return &quot;/&quot; + NameWithPredicate(el)  \n\n            &#39; the XPath data model does not include white space text nodes  \n            &#39; that are children of a document, so this method returns null.  \n\n            Dim xt = TryCast(xobj, XText)  \n            If xt IsNot Nothing Then Return Nothing  \n\n            Dim com = TryCast(xobj, XComment)  \n            If com IsNot Nothing Then  \n                Return &quot;/&quot; &amp;  \n                    If(com.Document.Nodes().OfType(Of XComment)().Count() &lt;&gt; 1,  \n                       &quot;comment()[&quot; &amp; (com.NodesBeforeSelf().OfType(Of XComment)().Count() + 1) &amp; &quot;]&quot;,  \n                       &quot;comment()&quot;)  \n            End If  \n\n            Dim pi = TryCast(xobj, XProcessingInstruction)  \n            If pi IsNot Nothing Then  \n                Return &quot;/&quot; &amp;  \n                    If(pi.Document.Nodes().OfType(Of XProcessingInstruction)().Count() &lt;&gt; 1,  \n                       &quot;processing-instruction()[&quot; &amp;  \n                           (pi.NodesBeforeSelf().OfType(Of XProcessingInstruction)().Count() + 1) &amp; &quot;]&quot;,  \n                       &quot;processing-instruction()&quot;)  \n            End If  \n            Return Nothing  \n        Else  \n            Dim el = TryCast(xobj, XElement)  \n            If el IsNot Nothing Then  \n                Return &quot;/&quot; &amp;  \n                    el.Ancestors().  \n                    InDocumentOrder().  \n                    Select(Function(e) NameWithPredicate(e)).StrCat(&quot;/&quot;) &amp; NameWithPredicate(el)  \n            End If  \n            Dim at = TryCast(xobj, XAttribute)  \n            If at IsNot Nothing Then  \n                Return &quot;/&quot; &amp;  \n                    at.Parent.  \n                    AncestorsAndSelf().  \n                    InDocumentOrder().  \n                    Select(Function(e) NameWithPredicate(e)).StrCat(&quot;/&quot;) &amp; &quot;@&quot; &amp; GetQName(at)  \n            End If  \n            Dim com = TryCast(xobj, XComment)  \n            If com IsNot Nothing Then  \n                Return &quot;/&quot; &amp;  \n                    com.Parent.  \n                    AncestorsAndSelf().  \n                    InDocumentOrder().  \n                    Select(Function(e) NameWithPredicate(e)).StrCat(&quot;/&quot;) &amp;  \n                        If(com.Parent.Nodes().OfType(Of XComment)().Count() &lt;&gt; 1,  \n                           &quot;comment()[&quot; &amp; (com.NodesBeforeSelf().OfType(Of XComment)().Count() + 1) &amp; &quot;]&quot;,  \n                           &quot;comment()&quot;)  \n            End If  \n\n            Dim cd = TryCast(xobj, XCData)  \n            If cd IsNot Nothing Then  \n                Return &quot;/&quot; &amp;  \n                    cd.Parent.  \n                    AncestorsAndSelf().  \n                    InDocumentOrder().  \n                    Select(Function(e) NameWithPredicate(e)).StrCat(&quot;/&quot;) &amp;  \n                        If(cd.Parent.Nodes().OfType(Of XText)().Count() &lt;&gt; 1,  \n                           &quot;text()[&quot; &amp; (cd.NodesBeforeSelf().OfType(Of XText)().Count() + 1) &amp; &quot;]&quot;,  \n                           &quot;text()&quot;)  \n            End If  \n            Dim tx = TryCast(xobj, XText)  \n            If tx IsNot Nothing Then  \n                Return &quot;/&quot; &amp;  \n                    tx.Parent.  \n                    AncestorsAndSelf().  \n                    InDocumentOrder().  \n                    Select(Function(e) NameWithPredicate(e)).StrCat(&quot;/&quot;) &amp;  \n                        If(tx.Parent.Nodes().OfType(Of XText)().Count() &lt;&gt; 1,  \n                           &quot;text()[&quot; &amp; (tx.NodesBeforeSelf().OfType(Of XText)().Count() + 1) &amp; &quot;]&quot;,  \n                           &quot;text()&quot;)  \n            End If  \n            Dim pi As XProcessingInstruction = TryCast(xobj, XProcessingInstruction)  \n            If pi IsNot Nothing Then  \n                Return &quot;/&quot; &amp;  \n                    pi.Parent.  \n                    AncestorsAndSelf().  \n                    InDocumentOrder().  \n                    Select(Function(e) NameWithPredicate(e)).StrCat(&quot;/&quot;) &amp;  \n                        If(pi.Parent.Nodes().OfType(Of XProcessingInstruction)().Count() &lt;&gt; 1,  \n                           &quot;processing-instruction()[&quot; &amp;  \n                               (pi.NodesBeforeSelf().OfType(Of XProcessingInstruction)().Count() + 1) &amp; &quot;]&quot;,  \n                           &quot;processing-instruction()&quot;)  \n            End If  \n            Return Nothing  \n        End If  \n    End Function  \n\n    &lt;Extension()&gt;  \n    Public Function Find(ByVal source As XElement, ByVal value As String) As IEnumerable(Of XObject)  \n        Dim results = From att In source.Attributes()  \n                      Where att.Value.Contains(value)  \n                      Let a As XObject = att  \n                      Select a  \n\n        If source.Elements().Any Then  \n            For Each result In From child In source.Elements() Select Find(child, value)  \n                results = If(results Is Nothing, result, results.Union(result))  \n            Next  \n        Else  \n            If source.Value.Contains(value) Then  \n                results = If(results Is Nothing,  \n                             New List(Of XObject) From {source},  \n                             results.Union(New List(Of XObject) From {source}))  \n            End If  \n        End If  \n\n        Return results  \n    End Function  \n\nEnd Module  \n</code></pre><p> This code produces the following output:  </p>\n<pre class=\"loading\"><code>/PurchaseOrders/PurchaseOrder[1]/@OrderDate  \n1999-10-20  \n/PurchaseOrders/PurchaseOrder[1]/Items/Item[2]/ShipDate  \n1999-05-21  \n/PurchaseOrders/PurchaseOrder[2]/@OrderDate  \n1999-10-22  \n/PurchaseOrders/PurchaseOrder[3]/@OrderDate  \n1999-10-22  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"advanced-query-techniques-linq-to-xml\" data-linktype=\"relative-path\">Advanced Query Techniques (LINQ to XML) (Visual Basic)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.tgt_pltfrm\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"b676f025-a24c-4076-8713-aa809b2b8ce0\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/linq/how-to-write-a-linq-to-xml-axis-method.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/linq/how-to-write-a-linq-to-xml-axis-method.md\">\r\n<meta name=\"document_id\" content=\"1784180e-6e95-b76c-81bb-3023aaf0b143\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","uhfHeaderId":"MSDocsHeader-DotNet","title":"How to: Write a LINQ to XML Axis Method (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.tgt_pltfrm":"","ms.assetid":"b676f025-a24c-4076-8713-aa809b2b8ce0","caps.latest.revision":3,"ms.topic":"article","dev_langs":["vb"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/linq/how-to-write-a-linq-to-xml-axis-method.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/linq/how-to-write-a-linq-to-xml-axis-method.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/concepts/linq/how-to-write-a-linq-to-xml-axis-method.md","document_id":"1784180e-6e95-b76c-81bb-3023aaf0b143","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/concepts/linq/how-to-write-a-linq-to-xml-axis-method","toc_asset_id":"articles/visual-basic/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Write a LINQ to XML Axis Method (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":730,"_op_rawTitle":"<h1 id=\"how-to-write-a-linq-to-xml-axis-method-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/concepts/linq/how-to-write-a-linq-to-xml-axis-method.md\" sourcestartlinenumber=\"20\" sourceendlinenumber=\"20\">How to: Write a LINQ to XML Axis Method (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/concepts/linq/how-to-write-a-linq-to-xml-axis-method","fileRelativePath":"articles/visual-basic/programming-guide/concepts/linq/how-to-write-a-linq-to-xml-axis-method.html"},"themesRelativePathToOutputRoot":"_themes/"}