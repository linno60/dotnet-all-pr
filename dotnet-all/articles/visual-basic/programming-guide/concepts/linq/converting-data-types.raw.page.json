{"content":"<div><div class=\"content\">\n<p>Conversion methods change the type of input objects.  </p>\n<p> Conversion operations in LINQ queries are useful in a variety of applications. Following are some examples:  </p>\n<ul>\n<li><p>The <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb335435(v=vs.110).aspx\" data-linktype=\"external\">Enumerable.AsEnumerable</a> method can be used to hide a type&#39;s custom implementation of a standard query operator.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb360913(v=vs.110).aspx\" data-linktype=\"external\">Enumerable.OfType</a> method can be used to enable non-parameterized collections for LINQ querying.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb298736(v=vs.110).aspx\" data-linktype=\"external\">Enumerable.ToArray</a>, <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb298836(v=vs.110).aspx\" data-linktype=\"external\">Enumerable.ToDictionary</a>, <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb342261(v=vs.110).aspx\" data-linktype=\"external\">Enumerable.ToList</a>, and <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb353368(v=vs.110).aspx\" data-linktype=\"external\">Enumerable.ToLookup</a> methods can be used to force immediate query execution instead of deferring it until the query is enumerated.  </p>\n</li>\n</ul>\n<h2 id=\"methods\">Methods</h2>\n<p> The following table lists the standard query operator methods that perform data-type conversions.  </p>\n<p> The conversion methods in this table whose names start with &quot;As&quot; change the static type of the source collection but do not enumerate it. The methods whose names start with &quot;To&quot; enumerate the source collection and put the items into the corresponding collection type.  </p>\n<table>\n<thead>\n<tr>\n<th>Method Name</th>\n<th>Description</th>\n<th>Visual Basic Query Expression Syntax</th>\n<th>More Information</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>AsEnumerable</td>\n<td>Returns the input typed as <a class=\"xref\" href=\"../../../../../api/system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>.</td>\n<td>Not applicable.</td>\n<td><a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb335435(v=vs.110).aspx\" data-linktype=\"external\">Enumerable.AsEnumerable</a></td>\n</tr>\n<tr>\n<td>AsQueryable</td>\n<td>Converts a (generic) <a class=\"xref\" href=\"../../../../../api/system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a> to a (generic) <a class=\"xref\" href=\"../../../../../api/system.linq.iqueryable\" data-linktype=\"relative-path\">IQueryable</a>.</td>\n<td>Not applicable.</td>\n<td><a class=\"xref\" href=\"../../../../../api/system.linq.queryable#System_Linq_Queryable_AsQueryable_\" data-linktype=\"relative-path\">AsQueryable</a></td>\n</tr>\n<tr>\n<td>Cast</td>\n<td>Casts the elements of a collection to a specified type.</td>\n<td><code>From … As …</code></td>\n<td><a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb341406(v=vs.110).aspx\" data-linktype=\"external\">Enumerable.Cast</a><br><br> <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb301460(v=vs.110).aspx\" data-linktype=\"external\">Queryable.Cast</a></td>\n</tr>\n<tr>\n<td>OfType</td>\n<td>Filters values, depending on their ability to be cast to a specified type.</td>\n<td>Not applicable.</td>\n<td><a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb360913(v=vs.110).aspx\" data-linktype=\"external\">Enumerable.OfType</a><br><br> <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb344857(v=vs.110).aspx\" data-linktype=\"external\">Queryable.OfType</a></td>\n</tr>\n<tr>\n<td>ToArray</td>\n<td>Converts a collection to an array. This method forces query execution.</td>\n<td>Not applicable.</td>\n<td><a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb298736(v=vs.110).aspx\" data-linktype=\"external\">Enumerable.ToArray</a></td>\n</tr>\n<tr>\n<td>ToDictionary</td>\n<td>Puts elements into a <a class=\"xref\" href=\"../../../../../api/system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a> based on a key selector function. This method forces query execution.</td>\n<td>Not applicable.</td>\n<td><a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb298836(v=vs.110).aspx\" data-linktype=\"external\">Enumerable.ToDictionary</a></td>\n</tr>\n<tr>\n<td>ToList</td>\n<td>Converts a collection to a <a class=\"xref\" href=\"../../../../../api/system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a>. This method forces query execution.</td>\n<td>Not applicable.</td>\n<td><a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb342261(v=vs.110).aspx\" data-linktype=\"external\">Enumerable.ToList</a></td>\n</tr>\n<tr>\n<td>ToLookup</td>\n<td>Puts elements into a <a class=\"xref\" href=\"../../../../../api/system.linq.lookup-2\" data-linktype=\"relative-path\">Lookup&lt;TKey,TElement&gt;</a> (a one-to-many dictionary) based on a key selector function. This method forces query execution.</td>\n<td>Not applicable.</td>\n<td><a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb353368(v=vs.110).aspx\" data-linktype=\"external\">Enumerable.ToLookup</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"query-expression-syntax-example\">Query Expression Syntax Example</h2>\n<p> The following code example uses the <code>From As</code> clause to cast a type to a subtype before accessing a member that is available only on the subtype.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Class Plant  \n    Public Property Name As String  \nEnd Class  \n\nClass CarnivorousPlant  \n    Inherits Plant  \n    Public Property TrapType As String  \nEnd Class  \n\nSub Cast()  \n\n    Dim plants() As Plant = {   \n        New CarnivorousPlant With {.Name = &quot;Venus Fly Trap&quot;, .TrapType = &quot;Snap Trap&quot;},   \n        New CarnivorousPlant With {.Name = &quot;Pitcher Plant&quot;, .TrapType = &quot;Pitfall Trap&quot;},   \n        New CarnivorousPlant With {.Name = &quot;Sundew&quot;, .TrapType = &quot;Flypaper Trap&quot;},   \n        New CarnivorousPlant With {.Name = &quot;Waterwheel Plant&quot;, .TrapType = &quot;Snap Trap&quot;}}  \n\n    Dim query = From plant As CarnivorousPlant In plants   \n                Where plant.TrapType = &quot;Snap Trap&quot;   \n                Select plant  \n\n    Dim sb As New System.Text.StringBuilder()  \n    For Each plant In query  \n        sb.AppendLine(plant.Name)  \n    Next  \n\n    &#39; Display the results.  \n    MsgBox(sb.ToString())  \n\n    &#39; This code produces the following output:  \n\n    &#39; Venus Fly Trap  \n    &#39; Waterwheel Plant  \n\nEnd Sub  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../../api/system.linq\" data-linktype=\"relative-path\">System.Linq</a><br> <a href=\"standard-query-operators-overview\" data-linktype=\"relative-path\">Standard Query Operators Overview (Visual Basic)</a><br> <a href=\"../../../language-reference/queries/from-clause\" data-linktype=\"relative-path\">From Clause</a><br> <a href=\"how-to-query-an-arraylist-with-linq\" data-linktype=\"relative-path\">How to: Query an ArrayList with LINQ (Visual Basic)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet/toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.tgt_pltfrm\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"9b0cf1ab-de48-4c6e-9f00-05b40fade46e\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/linq/converting-data-types.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/linq/converting-data-types.md\">\r\n<meta name=\"document_id\" content=\"38d08e03-3084-87ca-722a-267f86eec8f9\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Converting Data Types (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.tgt_pltfrm":"","ms.assetid":"9b0cf1ab-de48-4c6e-9f00-05b40fade46e","caps.latest.revision":3,"ms.topic":"article","dev_langs":["vb"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/linq/converting-data-types.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/linq/converting-data-types.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/concepts/linq/converting-data-types.md","document_id":"38d08e03-3084-87ca-722a-267f86eec8f9","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/concepts/linq/converting-data-types","toc_asset_id":"articles/visual-basic/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"Converting Data Types (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":425,"_op_rawTitle":"<h1 id=\"converting-data-types-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/concepts/linq/converting-data-types.md\" sourcestartlinenumber=\"25\" sourceendlinenumber=\"25\">Converting Data Types (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/concepts/linq/converting-data-types","fileRelativePath":"articles/visual-basic/programming-guide/concepts/linq/converting-data-types.html"},"themesRelativePathToOutputRoot":"_themes/"}