{"content":"<div><div class=\"content\">\n<p>This example demonstrates three ways to compare two file listings:  </p>\n<ul>\n<li><p>By querying for a Boolean value that specifies whether the two file lists are identical.  </p>\n</li>\n<li><p>By querying for the intersection to retrieve the files that are in both folders.  </p>\n</li>\n<li><p>By querying for the set difference to retrieve the files that are in one folder but not the other.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The techniques shown here can be adapted to compare sequences of objects of any type.  </p>\n</div>\n<p>The <code>FileComparer</code> class shown here demonstrates how to use a custom comparer class together with the Standard Query Operators. The class is not intended for use in real-world scenarios. It just uses the name and length in bytes of each file to determine whether the contents of each folder are identical or not. In a real-world scenario, you should modify this comparer to perform a more rigorous equality check.  </p>\n</li>\n</ul>\n<h2 id=\"example\">Example</h2>\n<pre class=\"loading\"><code class=\"lang-vb\">Module CompareDirs  \n    Public Sub Main()  \n\n        &#39; Create two identical or different temporary folders   \n        &#39; on a local drive and add files to them.  \n        &#39; Then set these file paths accordingly.  \n        Dim pathA As String = &quot;C:\\TestDir&quot;  \n        Dim pathB As String = &quot;C:\\TestDir2&quot;  \n\n        &#39; Take a snapshot of the file system.   \n        Dim dir1 As New System.IO.DirectoryInfo(pathA)  \n        Dim dir2 As New System.IO.DirectoryInfo(pathB)  \n\n        Dim list1 = dir1.GetFiles(&quot;*.*&quot;, System.IO.SearchOption.AllDirectories)  \n        Dim list2 = dir2.GetFiles(&quot;*.*&quot;, System.IO.SearchOption.AllDirectories)  \n\n        &#39; Create the FileCompare object we&#39;ll use in each query  \n        Dim myFileCompare As New FileCompare  \n\n        &#39; This query determines whether the two folders contain  \n        &#39; identical file lists, based on the custom file comparer  \n        &#39; that is defined in the FileCompare class.  \n        &#39; The query executes immediately because it returns a bool.  \n        Dim areIdentical As Boolean = list1.SequenceEqual(list2, myFileCompare)  \n        If areIdentical = True Then  \n            Console.WriteLine(&quot;The two folders are the same.&quot;)  \n        Else  \n            Console.WriteLine(&quot;The two folders are not the same.&quot;)  \n        End If  \n\n        &#39; Find common files in both folders. It produces a sequence and doesn&#39;t execute  \n        &#39; until the foreach statement.  \n        Dim queryCommonFiles = list1.Intersect(list2, myFileCompare)  \n\n        If queryCommonFiles.Count() &gt; 0 Then  \n\n            Console.WriteLine(&quot;The following files are in both folders:&quot;)  \n            For Each fi As System.IO.FileInfo In queryCommonFiles  \n                Console.WriteLine(fi.FullName)  \n            Next  \n        Else  \n            Console.WriteLine(&quot;There are no common files in the two folders.&quot;)  \n        End If  \n\n        &#39; Find the set difference between the two folders.  \n        &#39; For this example we only check one way.  \n        Dim queryDirAOnly = list1.Except(list2, myFileCompare)  \n        Console.WriteLine(&quot;The following files are in dirA but not dirB:&quot;)  \n        For Each fi As System.IO.FileInfo In queryDirAOnly  \n            Console.WriteLine(fi.FullName)  \n        Next  \n\n        &#39; Keep the console window open in debug mode  \n        Console.WriteLine(&quot;Press any key to exit.&quot;)  \n        Console.ReadKey()  \n    End Sub  \n\n    &#39; This implementation defines a very simple comparison  \n    &#39; between two FileInfo objects. It only compares the name  \n    &#39; of the files being compared and their length in bytes.  \n    Public Class FileCompare  \n        Implements System.Collections.Generic.IEqualityComparer(Of System.IO.FileInfo)  \n\n        Public Function Equals1(ByVal x As System.IO.FileInfo, ByVal y As System.IO.FileInfo) _  \n            As Boolean Implements System.Collections.Generic.IEqualityComparer(Of System.IO.FileInfo).Equals  \n\n            If (x.Name = y.Name) And (x.Length = y.Length) Then  \n                Return True  \n            Else  \n                Return False  \n            End If  \n        End Function  \n\n        &#39; Return a hash that reflects the comparison criteria. According to the   \n        &#39; rules for IEqualityComparer(Of T), if Equals is true, then the hash codes must  \n        &#39; also be equal. Because equality as defined here is a simple value equality, not  \n        &#39; reference identity, it is possible that two or more objects will produce the same  \n        &#39; hash code.  \n        Public Function GetHashCode1(ByVal fi As System.IO.FileInfo) _  \n            As Integer Implements System.Collections.Generic.IEqualityComparer(Of System.IO.FileInfo).GetHashCode  \n            Dim s As String = fi.Name &amp; fi.Length  \n            Return s.GetHashCode()  \n        End Function  \n    End Class  \nEnd Module  \n</code></pre><h2 id=\"compiling-the-code\">Compiling the Code</h2>\n<p> Create a project that targets the .NET Framework version 3.5 or higher with a reference to System.Core.dll and a <code>Imports</code> statement for the System.Linq namespace.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"linq-to-objects\" data-linktype=\"relative-path\">LINQ to Objects (Visual Basic)</a><br> <a href=\"linq-and-file-directories\" data-linktype=\"relative-path\">LINQ and File Directories (Visual Basic)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-all/api/toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.tgt_pltfrm\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"903c7e9a-f48d-4a07-a8a8-5450d2646efa\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/linq/how-to-compare-the-contents-of-two-folders-linq.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/linq/how-to-compare-the-contents-of-two-folders-linq.md\">\r\n<meta name=\"document_id\" content=\"9e6e7807-92a5-5130-9595-07c16d7884d6\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"How to: Compare the Contents of Two Folders (LINQ) (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.tgt_pltfrm":"","ms.assetid":"903c7e9a-f48d-4a07-a8a8-5450d2646efa","caps.latest.revision":3,"ms.topic":"article","dev_langs":["vb"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/linq/how-to-compare-the-contents-of-two-folders-linq.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/linq/how-to-compare-the-contents-of-two-folders-linq.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/concepts/linq/how-to-compare-the-contents-of-two-folders-linq.md","document_id":"9e6e7807-92a5-5130-9595-07c16d7884d6","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/programming-guide/concepts/linq/how-to-compare-the-contents-of-two-folders-linq","toc_asset_id":"articles/visual-basic/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Compare the Contents of Two Folders (LINQ) (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":606,"_op_rawTitle":"<h1 id=\"how-to-compare-the-contents-of-two-folders-linq-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/concepts/linq/how-to-compare-the-contents-of-two-folders-linq.md\" sourcestartlinenumber=\"25\" sourceendlinenumber=\"25\">How to: Compare the Contents of Two Folders (LINQ) (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/programming-guide/concepts/linq/how-to-compare-the-contents-of-two-folders-linq","fileRelativePath":"articles/visual-basic/programming-guide/concepts/linq/how-to-compare-the-contents-of-two-folders-linq.html"},"themesRelativePathToOutputRoot":"_themes/"}