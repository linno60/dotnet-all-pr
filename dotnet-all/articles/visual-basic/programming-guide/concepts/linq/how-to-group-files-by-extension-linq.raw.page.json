{"content":"<div><div class=\"content\">\n<p>This example shows how LINQ can be used to perform advanced grouping and sorting operations on lists of files or folders. It also shows how to page output in the console window by using the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb358985(v=vs.110).aspx\" data-linktype=\"external\">Skip</a> and <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb503062(v=vs.110).aspx\" data-linktype=\"external\">Take</a> methods.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following query shows how to group the contents of a specified directory tree by the file name extension.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Module GroupByExtension  \n    Public Sub Main()  \n\n        &#39; Root folder to query, along with all subfolders.  \n        Dim startFolder As String = &quot;C:\\program files\\Microsoft Visual Studio 9.0\\VB\\&quot;  \n\n        &#39; Used in WriteLine() to skip over startfolder in output lines.  \n        Dim rootLength As Integer = startFolder.Length  \n\n        &#39;Take a snapshot of the folder contents  \n        Dim dir As New System.IO.DirectoryInfo(startFolder)  \n        Dim fileList = dir.GetFiles(&quot;*.*&quot;, System.IO.SearchOption.AllDirectories)  \n\n        &#39; Create the query.  \n        Dim queryGroupByExt = From file In fileList _  \n                          Group By file.Extension.ToLower() Into fileGroup = Group _  \n                          Order By ToLower _  \n                          Select fileGroup  \n\n        &#39; Execute the query. By storing the result we can  \n        &#39; page the display with good performance.  \n        Dim groupByExtList = queryGroupByExt.ToList()  \n\n        &#39; Display one group at a time. If the number of   \n        &#39; entries is greater than the number of lines  \n        &#39; in the console window, then page the output.  \n        Dim trimLength = startFolder.Length  \n        PageOutput(groupByExtList, trimLength)  \n\n    End Sub  \n\n    &#39; Pages console diplay for large query results. No more than one group per page.  \n    &#39; This sub specifically works with group queries of FileInfo objects  \n    &#39; but can be modified for any type.  \n    Sub PageOutput(ByVal groupQuery, ByVal charsToSkip)  \n\n        &#39; &quot;3&quot; = 1 line for extension key + 1 for &quot;Press any key&quot; + 1 for input cursor.  \n        Dim numLines As Integer = Console.WindowHeight - 3  \n        &#39; Flag to indicate whether there are more results to diplay  \n        Dim goAgain As Boolean = True  \n\n        For Each fg As IEnumerable(Of System.IO.FileInfo) In groupQuery  \n            &#39; Start a new extension at the top of a page.  \n            Dim currentLine As Integer = 0  \n\n            Do While (currentLine &lt; fg.Count())  \n                Console.Clear()  \n                Console.WriteLine(fg(0).Extension)  \n\n                &#39; Get the next page of results  \n                &#39; No more than one filename per page  \n                Dim resultPage = From file In fg _  \n                                Skip currentLine Take numLines  \n\n                &#39; Execute the query. Trim the display output.  \n                For Each line In resultPage  \n                    Console.WriteLine(vbTab &amp; line.FullName.Substring(charsToSkip))  \n                Next  \n\n                &#39; Advance the current position  \n                currentLine = numLines + currentLine  \n\n                &#39; Give the user a chance to break out of the loop  \n                Console.WriteLine(&quot;Press any key for next page or the &#39;End&#39; key to exit.&quot;)  \n                Dim key As ConsoleKey = Console.ReadKey().Key  \n                If key = ConsoleKey.End Then  \n                    goAgain = False  \n                    Exit For  \n                End If  \n            Loop  \n        Next  \n    End Sub  \nEnd Module  \n</code></pre><p> The output from this program can be long, depending on the details of the local file system and what the <code>startFolder</code> is set to. To enable viewing of all results, this example shows how to page through results. The same techniques can be applied to Windows and Web applications. Notice that because the code pages the items in a group, a nested <code>For Each</code> loop is required. There is also some additional logic to compute the current position in the list, and to enable the user to stop paging and exit the program. In this particular case, the paging query is run against the cached results from the original query. In other contexts, such as LINQ to SQL, such caching is not required.  </p>\n<h2 id=\"compiling-the-code\">Compiling the Code</h2>\n<p> Create a project that targets the .NET Framework version 3.5 or higher with a reference to System.Core.dll and a   <code>Imports</code> statement for the System.Linq namespace.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"linq-to-objects\" data-linktype=\"relative-path\">LINQ to Objects (Visual Basic)</a><br> <a href=\"linq-and-file-directories\" data-linktype=\"relative-path\">LINQ and File Directories (Visual Basic)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.tgt_pltfrm\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"904dc6d7-7162-4655-a7f4-5785d669bc5a\">\r\n<meta name=\"caps.latest.revision\" content=\"4\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/linq/how-to-group-files-by-extension-linq.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/linq/how-to-group-files-by-extension-linq.md\">\r\n<meta name=\"document_id\" content=\"d43f9b1a-9552-b2be-ebc9-0c7d0334644e\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"How to: Group Files by Extension (LINQ) (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.tgt_pltfrm":"","ms.assetid":"904dc6d7-7162-4655-a7f4-5785d669bc5a","caps.latest.revision":4,"ms.topic":"article","dev_langs":["vb"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/linq/how-to-group-files-by-extension-linq.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/linq/how-to-group-files-by-extension-linq.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/concepts/linq/how-to-group-files-by-extension-linq.md","document_id":"d43f9b1a-9552-b2be-ebc9-0c7d0334644e","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/concepts/linq/how-to-group-files-by-extension-linq","toc_asset_id":"articles/visual-basic/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Group Files by Extension (LINQ) (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":580,"_op_rawTitle":"<h1 id=\"how-to-group-files-by-extension-linq-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/concepts/linq/how-to-group-files-by-extension-linq.md\" sourcestartlinenumber=\"25\" sourceendlinenumber=\"25\">How to: Group Files by Extension (LINQ) (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/concepts/linq/how-to-group-files-by-extension-linq","fileRelativePath":"articles/visual-basic/programming-guide/concepts/linq/how-to-group-files-by-extension-linq.html"},"themesRelativePathToOutputRoot":"_themes/"}