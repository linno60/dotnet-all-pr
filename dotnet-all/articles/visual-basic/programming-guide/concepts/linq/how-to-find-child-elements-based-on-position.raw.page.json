{"content":"<div><div class=\"content\">\n<p>Sometimes you want to find elements based on their position. You might want to find the second element, or you might want to find the third through the fifth element.  </p>\n<p> The XPath expression is:  </p>\n<p> <code>Test[position() &gt;= 2 and position() &lt;= 4]</code>  </p>\n<p> There are two approaches to writing this LINQ to XML query in a lazy way. You can use the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb358985(v=vs.110).aspx\" data-linktype=\"external\">Skip</a> and <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb503062(v=vs.110).aspx\" data-linktype=\"external\">Take</a> operators, or you can use the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb301979(v=vs.110).aspx\" data-linktype=\"external\">Where</a> overload that takes an index. When you use the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb301979(v=vs.110).aspx\" data-linktype=\"external\">Where</a> overload, you use a lambda expression that takes two arguments. The following example shows both methods of selecting based on position.  </p>\n<h2 id=\"example\">Example</h2>\n<p> This example finds the second through the fourth <code>Test</code> element. The result is a collection of elements.  </p>\n<p> This example uses the following XML document: <a href=\"sample-xml-file-test-configuration-linq-to-xml\" data-linktype=\"relative-path\">Sample XML File: Test Configuration (LINQ to XML)</a>.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Dim testCfg As XElement = XElement.Load(&quot;TestConfig.xml&quot;)  \n\n&#39; LINQ to XML query  \nDim list1 As IEnumerable(Of XElement) = _  \n    testCfg.Elements(&quot;Test&quot;).Skip(1).Take(3)  \n\n&#39;LINQ to XML query  \nDim list2 As IEnumerable(Of XElement) = _  \n    testCfg.Elements(&quot;Test&quot;). _  \n    Where(Function(ByVal el, ByVal idx) idx &gt;= 1 And idx &lt;= 3)  \n\n&#39; XPath expression  \nDim list3 As IEnumerable(Of XElement) = _  \n    testCfg.XPathSelectElements(&quot;Test[position() &gt;= 2 and position() &lt;= 4]&quot;)  \n\nIf list1.Count() = list2.Count() And _  \n       list1.Count() = list3.Count() And _  \n       list1.Intersect(list2).Count() = list1.Count() And _  \n       list1.Intersect(list3).Count() = list1.Count() Then  \n\n    Console.WriteLine(&quot;Results are identical&quot;)  \nElse  \n    Console.WriteLine(&quot;Results differ&quot;)  \nEnd If  \n\nFor Each el As XElement In list1  \n    Console.WriteLine(el)  \nNext  \n</code></pre><p> This example produces the following output:  </p>\n<pre class=\"loading\"><code>Results are identical  \n&lt;Test TestId=&quot;0002&quot; TestType=&quot;CMD&quot;&gt;  \n  &lt;Name&gt;Find succeeding characters&lt;/Name&gt;  \n  &lt;CommandLine&gt;Examp2.EXE&lt;/CommandLine&gt;  \n  &lt;Input&gt;abc&lt;/Input&gt;  \n  &lt;Output&gt;def&lt;/Output&gt;  \n&lt;/Test&gt;  \n&lt;Test TestId=&quot;0003&quot; TestType=&quot;GUI&quot;&gt;  \n  &lt;Name&gt;Convert multiple numbers to strings&lt;/Name&gt;  \n  &lt;CommandLine&gt;Examp2.EXE /Verbose&lt;/CommandLine&gt;  \n  &lt;Input&gt;123&lt;/Input&gt;  \n  &lt;Output&gt;One Two Three&lt;/Output&gt;  \n&lt;/Test&gt;  \n&lt;Test TestId=&quot;0004&quot; TestType=&quot;GUI&quot;&gt;  \n  &lt;Name&gt;Find correlated key&lt;/Name&gt;  \n  &lt;CommandLine&gt;Examp3.EXE&lt;/CommandLine&gt;  \n  &lt;Input&gt;a1&lt;/Input&gt;  \n  &lt;Output&gt;b1&lt;/Output&gt;  \n&lt;/Test&gt;  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"linq-to-xml-for-xpath-users\" data-linktype=\"relative-path\">LINQ to XML for XPath Users (Visual Basic)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.tgt_pltfrm\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"6831e1db-5e97-444f-a7a1-d0a87104b005\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/linq/how-to-find-child-elements-based-on-position.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/linq/how-to-find-child-elements-based-on-position.md\">\r\n<meta name=\"document_id\" content=\"8a352421-e9bc-9f8f-7ae3-5a5fba08544b\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"How to: Find Child Elements Based on Position (XPath-LINQ to XML) (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.tgt_pltfrm":"","ms.assetid":"6831e1db-5e97-444f-a7a1-d0a87104b005","caps.latest.revision":3,"ms.topic":"article","dev_langs":["vb"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/linq/how-to-find-child-elements-based-on-position.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/linq/how-to-find-child-elements-based-on-position.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/concepts/linq/how-to-find-child-elements-based-on-position.md","document_id":"8a352421-e9bc-9f8f-7ae3-5a5fba08544b","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/concepts/linq/how-to-find-child-elements-based-on-position","toc_asset_id":"articles/visual-basic/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Find Child Elements Based on Position (XPath-LINQ to XML) (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":281,"_op_rawTitle":"<h1 id=\"how-to-find-child-elements-based-on-position-xpath-linq-to-xml-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/concepts/linq/how-to-find-child-elements-based-on-position.md\" sourcestartlinenumber=\"20\" sourceendlinenumber=\"20\">How to: Find Child Elements Based on Position (XPath-LINQ to XML) (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/concepts/linq/how-to-find-child-elements-based-on-position","fileRelativePath":"articles/visual-basic/programming-guide/concepts/linq/how-to-find-child-elements-based-on-position.html"},"themesRelativePathToOutputRoot":"_themes/"}