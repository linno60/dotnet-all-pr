{"content":"<div><div class=\"content\">\n<p>Sometimes it is helpful to list all nodes in a tree. This can be useful when learning exactly how a method or property affects the tree. One approach to listing all nodes in a textual form is to generate an XPath expression that exactly and specifically identifies any node in the tree.  </p>\n<p> It is not particularly helpful to execute XPath expressions using LINQ to XML. XPath expressions have poorer performance than LINQ to XML queries, and LINQ to XML queries are much more powerful. However, as a way to identify nodes in the XML tree, XPath works well.  </p>\n<h2 id=\"example\">Example</h2>\n<p> This example shows an function named <code>GetXPath</code> that generates a specific XPath expression for any node in the XML tree. It generates appropriate XPath expressions even when nodes are in a namespace. The XPath expressions are generated by using namespace prefixes.  </p>\n<p> The example then creates a small XML tree that contains an example of several types of nodes. It then iterates through the descendant nodes and prints the XPath expression for each node.  </p>\n<p> You will notice that the XML declaration is not a node in the tree.  </p>\n<p> The following is an XML file that contains several types of nodes:  </p>\n<pre class=\"loading\"><code class=\"lang-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; standalone=&quot;yes&quot;?&gt;  \n&lt;?target data?&gt;  \n&lt;Root AttName=&quot;An Attribute&quot; xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;  \n  &lt;!--This is a comment--&gt;  \n  &lt;Child&gt;Text&lt;/Child&gt;  \n  &lt;Child&gt;Other Text&lt;/Child&gt;  \n  &lt;ChildWithMixedContent&gt;text&lt;b&gt;BoldText&lt;/b&gt;otherText&lt;/ChildWithMixedContent&gt;  \n  &lt;aw:ElementInNamespace&gt;  \n    &lt;aw:ChildInNamespace /&gt;  \n  &lt;/aw:ElementInNamespace&gt;  \n&lt;/Root&gt;  \n</code></pre><p> The following is the list of nodes in the above XML tree, expressed as XPath expressions:  </p>\n<pre class=\"loading\"><code>/processing-instruction()  \n/Root  \n/Root/@AttName  \n/Root/@xmlns:aw  \n/Root/comment()  \n/Root/Child[1]  \n/Root/Child[1]/text()  \n/Root/Child[2]  \n/Root/Child[2]/text()  \n/Root/ChildWithMixedContent  \n/Root/ChildWithMixedContent/text()[1]  \n/Root/ChildWithMixedContent/b  \n/Root/ChildWithMixedContent/b/text()  \n/Root/ChildWithMixedContent/text()[2]  \n/Root/aw:ElementInNamespace  \n/Root/aw:ElementInNamespace/aw:ChildInNamespace  \n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Module Module1  \n&lt;System.Runtime.CompilerServices.Extension()&gt; _  \n    Private Function StrCat(Of T)(ByVal source As IEnumerable(Of T), _  \n                                  ByVal separator As String) As String  \n        Return _  \n        source.Aggregate(New StringBuilder(), _  \n            Function(sb, i) sb _  \n                .Append(i.ToString()) _  \n                .Append(separator), _  \n                Function(s) s.ToString())  \n    End Function  \n\n    &lt;System.Runtime.CompilerServices.Extension()&gt; _  \n    Public Function GetXPath(ByVal xobj As XObject) As String  \n        Dim retStr As String  \n        If xobj.Parent Is Nothing Then  \n            Dim doc As XDocument = TryCast(xobj, XDocument)  \n            If doc IsNot Nothing Then  \n                Return &quot;.&quot;  \n            End If  \n            Dim el As XElement = TryCast(xobj, XElement)  \n            If el IsNot Nothing Then  \n                Return (&quot;/&quot; &amp; NameWithPredicate(el))  \n            End If  \n\n            &#39; The XPath data model does not include white space text nodes  \n            &#39; that are children of a document, so this method returns null.  \n            Dim xt As XText = TryCast(xobj, XText)  \n            If xt IsNot Nothing Then  \n                Return Nothing  \n            End If  \n            Dim com As XComment = TryCast(xobj, XComment)  \n            If com IsNot Nothing Then  \n                If com.Document().Nodes().OfType(Of XComment)().Count() &lt;&gt; 1 Then  \n                    Return &quot;/comment()[&quot; &amp; (com.NodesBeforeSelf().OfType _  \n                        (Of XComment)().Count() + 1) &amp; &quot;]&quot;  \n                Else  \n                    Return &quot;/comment()&quot;  \n                End If  \n            End If  \n\n            Dim pi As XProcessingInstruction = TryCast(xobj, XProcessingInstruction)  \n            If pi IsNot Nothing Then  \n                If pi.Document.Nodes().OfType(Of XProcessingInstruction)(). _  \n                        Count() &lt;&gt; 1 Then  \n                    Return &quot;/processing-instruction()[&quot; &amp; _  \n                        (pi.NodesBeforeSelf().OfType(Of XProcessingInstruction)() _  \n                        .Count() + 1) &amp; &quot;]&quot;  \n                Else  \n                    Return &quot;/processing-instruction()&quot;  \n                End If  \n            End If  \n        Else  \n            Dim el As XElement = TryCast(xobj, XElement)  \n            If el IsNot Nothing Then  \n                Return &quot;/&quot; &amp; el.Ancestors().InDocumentOrder(). _  \n                    Select(Function(e) NameWithPredicate(e)) _  \n                    .StrCat(&quot;/&quot;) &amp; NameWithPredicate(el)  \n            End If  \n\n            Dim at As XAttribute = TryCast(xobj, XAttribute)  \n            If at IsNot Nothing Then  \n                Return &quot;/&quot; &amp; at.Parent().AncestorsAndSelf().InDocumentOrder(). _  \n                    Select(Function(e) NameWithPredicate(e)).StrCat(&quot;/&quot;) &amp; _  \n                    &quot;@&quot; &amp; GetQName(at)  \n            End If  \n\n            Dim com As XComment = TryCast(xobj, XComment)  \n            If com IsNot Nothing Then  \n                retStr = &quot;/&quot; &amp; com.Parent.AncestorsAndSelf().InDocumentOrder(). _  \n                Select(Function(e) NameWithPredicate(e)).StrCat(&quot;/&quot;) &amp; &quot;comment()&quot;  \n                If com.Parent().Nodes().OfType(Of XComment)().Count() &lt;&gt; 1 Then  \n                    retStr &amp;= &quot;[&quot; &amp; (com.NodesBeforeSelf().OfType(Of XComment)().Count() + 1) &amp; &quot;]&quot;  \n                End If  \n                Return retStr  \n            End If  \n\n            Dim cd As XCData = TryCast(xobj, XCData)  \n            If cd IsNot Nothing Then  \n                retStr = &quot;/&quot; &amp; cd.Parent.AncestorsAndSelf().InDocumentOrder(). _  \n                    Select(Function(e) NameWithPredicate(e)).StrCat(&quot;/&quot;) &amp; &quot;text()&quot;  \n                If cd.Parent.Nodes().OfType(Of XText)().Count() &lt;&gt; 1 Then  \n                    retStr &amp;= &quot;[&quot; &amp; (cd.NodesBeforeSelf().OfType(Of XText)(). _  \n                        Count() + 1) &amp; &quot;]&quot;  \n                End If  \n                Return retStr  \n            End If  \n\n            Dim tx As XText = TryCast(xobj, XText)  \n            If tx IsNot Nothing Then  \n                retStr = &quot;/&quot; &amp; tx.Parent.AncestorsAndSelf().InDocumentOrder(). _  \n                    Select(Function(e) NameWithPredicate(e)).StrCat(&quot;/&quot;) &amp; &quot;text()&quot;  \n                If tx.Parent.Nodes().OfType(Of XText)().Count() &lt;&gt; 1 Then  \n                    retStr &amp;= &quot;[&quot; &amp; (tx.NodesBeforeSelf().OfType(Of XText)(). _  \n                        Count() + 1) &amp; &quot;]&quot;  \n                End If  \n                Return retStr  \n            End If  \n\n            Dim pi As XProcessingInstruction = TryCast(xobj, XProcessingInstruction)  \n            If pi IsNot Nothing Then  \n                retStr = &quot;/&quot; &amp; pi.Parent.AncestorsAndSelf().InDocumentOrder(). _  \n                    Select(Function(e) NameWithPredicate(e)). _  \n                    StrCat(&quot;/&quot;) &amp; &quot;processing-instruction()&quot;  \n                If pi.Parent.Nodes().OfType(Of XProcessingInstruction)().Count() &lt;&gt; 1 Then  \n                    retStr &amp;= &quot;[&quot; &amp; (pi.NodesBeforeSelf().OfType(Of XProcessingInstruction)(). _  \n                        Count() + 1) &amp; &quot;]&quot;  \n                End If  \n            End If  \n        End If  \n        Return Nothing  \n    End Function  \n\n    Private Function GetQName(ByVal xe As XElement) As String  \n        Dim prefix As String = xe.GetPrefixOfNamespace(xe.Name.Namespace)  \n        If xe.Name.Namespace = XNamespace.None Or prefix Is Nothing Then  \n            Return xe.Name.LocalName.ToString()  \n        Else  \n            Return prefix + &quot;:&quot; &amp; xe.Name.LocalName.ToString()  \n        End If  \n    End Function  \n\n    Private Function GetQName(ByVal xa As XAttribute) As String  \n        Dim prefix As String = _  \n            xa.Parent.GetPrefixOfNamespace(xa.Name.Namespace)  \n        If xa.Name.Namespace = XNamespace.None Or prefix Is Nothing Then  \n            Return xa.Name.ToString()  \n        Else  \n            Return prefix + &quot;:&quot; &amp; xa.Name.LocalName  \n        End If  \n    End Function  \n\n    Public Function NameWithPredicate(ByVal el As XElement) As String  \n        If el.Parent IsNot Nothing AndAlso el.Parent.Elements(el.Name).Count() &lt;&gt; 1 Then  \n            Return GetQName(el) + &quot;[&quot; &amp; _  \n                (el.ElementsBeforeSelf(el.Name).Count() + 1) &amp; &quot;]&quot;  \n        Else  \n            Return GetQName(el)  \n        End If  \n    End Function  \n\n    Sub Main()  \n        Dim aw As XNamespace = &quot;http://www.adventure-works.com&quot;  \n        Dim doc As XDocument = _  \n            &lt;?xml version=&#39;1.0&#39; encoding=&quot;utf-8&quot; standalone=&#39;yes&#39;?&gt;  \n            &lt;?target data?&gt;  \n            &lt;Root AttName=&#39;An Attribute&#39; xmlns:aw=&#39;http://www.adventure-works.com&#39;&gt;  \n                &lt;!--This is a comment--&gt;  \n                &lt;Child&gt;Text&lt;/Child&gt;  \n                &lt;Child&gt;Other Text&lt;/Child&gt;  \n                &lt;ChildWithMixedContent&gt;text&lt;b&gt;BoldText&lt;/b&gt;otherText&lt;/ChildWithMixedContent&gt;  \n                &lt;aw:ElementInNamespace&gt;  \n                    &lt;aw:ChildInNamespace/&gt;  \n                &lt;/aw:ElementInNamespace&gt;  \n            &lt;/Root&gt;  \n        doc.Save(&quot;Test.xml&quot;)  \n        Console.WriteLine(File.ReadAllText(&quot;Test.xml&quot;))  \n        Console.WriteLine(&quot;------&quot;)  \n        For Each obj As XObject In doc.DescendantNodes()  \n            Console.WriteLine(obj.GetXPath())  \n            Dim el As XElement = TryCast(obj, XElement)  \n            If el IsNot Nothing Then  \n                For Each at As XAttribute In el.Attributes()  \n                    Console.WriteLine(at.GetXPath())  \n                Next  \n            End If  \n        Next  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre class=\"loading\"><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; standalone=&quot;yes&quot;?&gt;  \n&lt;?target data?&gt;  \n&lt;Root AttName=&quot;An Attribute&quot; xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;  \n  &lt;!--This is a comment--&gt;  \n  &lt;Child&gt;Text&lt;/Child&gt;  \n  &lt;Child&gt;Other Text&lt;/Child&gt;  \n  &lt;ChildWithMixedContent&gt;text&lt;b&gt;BoldText&lt;/b&gt;otherText&lt;/ChildWithMixedContent&gt;  \n  &lt;aw:ElementInNamespace&gt;  \n    &lt;aw:ChildInNamespace /&gt;  \n  &lt;/aw:ElementInNamespace&gt;  \n&lt;/Root&gt;  \n------  \n/processing-instruction()  \n/Root  \n/Root/@AttName  \n/Root/@xmlns:aw  \n/Root/comment()  \n/Root/Child[1]  \n/Root/Child[1]/text()  \n/Root/Child[2]  \n/Root/Child[2]/text()  \n/Root/ChildWithMixedContent  \n/Root/ChildWithMixedContent/text()[1]  \n/Root/ChildWithMixedContent/b  \n/Root/ChildWithMixedContent/b/text()  \n/Root/ChildWithMixedContent/text()[2]  \n/Root/aw:ElementInNamespace  \n/Root/aw:ElementInNamespace/aw:ChildInNamespace  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"advanced-query-techniques-linq-to-xml\" data-linktype=\"relative-path\">Advanced Query Techniques (LINQ to XML) (Visual Basic)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet/toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.tgt_pltfrm\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"e19289c4-26d1-435b-b0db-fb8bc856b753\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/linq/how-to-list-all-nodes-in-a-tree.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/linq/how-to-list-all-nodes-in-a-tree.md\">\r\n<meta name=\"document_id\" content=\"96923d36-2343-ce40-b89e-6df487699fad\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"How to: List All Nodes in a Tree (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.tgt_pltfrm":"","ms.assetid":"e19289c4-26d1-435b-b0db-fb8bc856b753","caps.latest.revision":3,"ms.topic":"article","dev_langs":["vb"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/linq/how-to-list-all-nodes-in-a-tree.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/linq/how-to-list-all-nodes-in-a-tree.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/concepts/linq/how-to-list-all-nodes-in-a-tree.md","document_id":"96923d36-2343-ce40-b89e-6df487699fad","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/concepts/linq/how-to-list-all-nodes-in-a-tree","toc_asset_id":"articles/visual-basic/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: List All Nodes in a Tree (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":936,"_op_rawTitle":"<h1 id=\"how-to-list-all-nodes-in-a-tree-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/concepts/linq/how-to-list-all-nodes-in-a-tree.md\" sourcestartlinenumber=\"20\" sourceendlinenumber=\"20\">How to: List All Nodes in a Tree (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/concepts/linq/how-to-list-all-nodes-in-a-tree","fileRelativePath":"articles/visual-basic/programming-guide/concepts/linq/how-to-list-all-nodes-in-a-tree.html"},"themesRelativePathToOutputRoot":"_themes/"}