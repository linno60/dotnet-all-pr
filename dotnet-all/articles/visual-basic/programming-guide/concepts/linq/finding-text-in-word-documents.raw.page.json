{"content":"<div><div class=\"content\">\n<p>This topic extends the previous queries to do something useful: find all occurrences of a string in the document.  </p>\n<h2 id=\"example\">Example</h2>\n<p> This example processes a WordprocessingML document, to find all the occurences of a specific piece of text in the document. To do this, we use a query that finds the string &quot;Hello&quot;. This example builds on the previous examples in this tutorial. The new query is called out in comments in the code below.  </p>\n<p> For instructions for creating the source document for this example, see <a href=\"creating-the-source-office-open-xml-document\" data-linktype=\"relative-path\">Creating the Source Office Open XML Document (Visual Basic)</a>.  </p>\n<p> This example uses classes found in the WindowsBase assembly. It uses types in the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/system.io.packaging(v=vs.110).aspx\" data-linktype=\"external\">System.IO.Packaging</a> namespace.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Imports &lt;xmlns:w=&quot;http://schemas.openxmlformats.org/wordprocessingml/2006/main&quot;&gt;  \n\nModule Module1  \n    &lt;System.Runtime.CompilerServices.Extension()&gt; _  \n    Public Function StringConcatenate(ByVal source As IEnumerable(Of String)) As String  \n        Dim sb As StringBuilder = New StringBuilder()  \n        For Each s As String In source  \n            sb.Append(s)  \n        Next  \n        Return sb.ToString()  \n    End Function  \n\n    &lt;System.Runtime.CompilerServices.Extension()&gt; _  \n    Public Function StringConcatenate(Of T)(ByVal source As IEnumerable(Of T), _  \n    ByVal func As Func(Of T, String)) As String  \n        Dim sb As StringBuilder = New StringBuilder()  \n        For Each item As T In source  \n            sb.Append(func(item))  \n        Next  \n        Return sb.ToString()  \n    End Function  \n\n    &lt;System.Runtime.CompilerServices.Extension()&gt; _  \n    Public Function StringConcatenate(Of T)(ByVal source As IEnumerable(Of T), _  \n    ByVal separator As String) As String  \n        Dim sb As StringBuilder = New StringBuilder()  \n        For Each s As T In source  \n            sb.Append(s).Append(separator)  \n        Next  \n        Return sb.ToString()  \n    End Function  \n\n    &lt;System.Runtime.CompilerServices.Extension()&gt; _  \n    Public Function StringConcatenate(Of T)(ByVal source As IEnumerable(Of T), _  \n    ByVal func As Func(Of T, String), ByVal separator As String) As String  \n        Dim sb As StringBuilder = New StringBuilder()  \n        For Each item As T In source  \n            sb.Append(func(item)).Append(separator)  \n        Next  \n        Return sb.ToString()  \n    End Function  \n\n    Public Function ParagraphText(ByVal e As XElement) As String  \n        Dim w As XNamespace = e.Name.Namespace  \n        Return (e.&lt;w:r&gt;.&lt;w:t&gt;).StringConcatenate(Function(element) CStr(element))  \n    End Function  \n\n    &#39; Following function is required because VB does not support short circuit evaluation  \n    Private Function GetStyleOfParagraph(ByVal styleNode As XElement, ByVal defaultStyle As String) As String  \n        If (styleNode Is Nothing) Then  \n            Return defaultStyle  \n        Else  \n            Return styleNode.@w:val  \n        End If  \n    End Function  \n\n    Sub Main()  \n        Dim fileName = &quot;SampleDoc.docx&quot;  \n\n        Dim documentRelationshipType = &quot;http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument&quot;  \n        Dim stylesRelationshipType = &quot;http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles&quot;  \n        Dim wordmlNamespace = &quot;http://schemas.openxmlformats.org/wordprocessingml/2006/main&quot;  \n        Dim xDoc As XDocument = Nothing  \n        Dim styleDoc As XDocument = Nothing  \n\n        Using wdPackage As Package = Package.Open(fileName, FileMode.Open, FileAccess.Read)  \n            Dim docPackageRelationship As PackageRelationship = wdPackage.GetRelationshipsByType(documentRelationshipType).FirstOrDefault()  \n            If (docPackageRelationship IsNot Nothing) Then  \n                Dim documentUri As Uri = PackUriHelper.ResolvePartUri(New Uri(&quot;/&quot;, UriKind.Relative), docPackageRelationship.TargetUri)  \n                Dim documentPart As PackagePart = wdPackage.GetPart(documentUri)  \n\n                &#39;  Load the document XML in the part into an XDocument instance.  \n                xDoc = XDocument.Load(XmlReader.Create(documentPart.GetStream()))  \n\n                &#39;  Find the styles part. There will only be one.  \n                Dim styleRelation As PackageRelationship = documentPart.GetRelationshipsByType(stylesRelationshipType).FirstOrDefault()  \n                If (styleRelation IsNot Nothing) Then  \n                    Dim styleUri As Uri = PackUriHelper.ResolvePartUri(documentUri, styleRelation.TargetUri)  \n                    Dim stylePart As PackagePart = wdPackage.GetPart(styleUri)  \n\n                    &#39;  Load the style XML in the part into an XDocument instance.  \n                    styleDoc = XDocument.Load(XmlReader.Create(stylePart.GetStream()))  \n                End If  \n            End If  \n        End Using  \n\n        Dim defaultStyle As String = _  \n            ( _  \n                From style In styleDoc.Root.&lt;w:style&gt; _  \n                Where style.@w:type = &quot;paragraph&quot; And _  \n                      style.@w:default = &quot;1&quot; _  \n                Select style _  \n            ).First().@w:styleId  \n\n        &#39; Find all paragraphs in the document.  \n        Dim paragraphs = _  \n            From para In xDoc.Root.&lt;w:body&gt;...&lt;w:p&gt; _  \n        Let styleNode As XElement = para.&lt;w:pPr&gt;.&lt;w:pStyle&gt;.FirstOrDefault _  \n        Select New With { _  \n            .ParagraphNode = para, _  \n            .StyleName = GetStyleOfParagraph(styleNode, defaultStyle) _  \n        }  \n\n        &#39; Retrieve the text of each paragraph.  \n        Dim paraWithText = _  \n            From para In paragraphs _  \n            Select New With { _  \n                .ParagraphNode = para.ParagraphNode, _  \n                .StyleName = para.StyleName, _  \n                .Text = ParagraphText(para.ParagraphNode) _  \n            }  \n\n        &#39; Following is the new query that retrieves all paragraphs  \n        &#39; that have specific text in them.  \n        Dim helloParagraphs = _  \n            From para In paraWithText _  \n            Where para.Text.Contains(&quot;Hello&quot;) _  \n            Select New With _  \n            { _  \n                .ParagraphNode = para.ParagraphNode, _  \n                .StyleName = para.StyleName, _  \n                .Text = para.Text _  \n            }  \n\n        For Each p In helloParagraphs  \n            Console.WriteLine(&quot;StyleName:{0} &gt;{1}&lt;&quot;, p.StyleName, p.Text)  \n        Next  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre class=\"loading\"><code>StyleName:Code &gt;        Console.WriteLine(&quot;Hello World&quot;)&lt;  \nStyleName:Code &gt;Hello World&lt;  \n</code></pre><p> You can, of course, modify the search so that it searches for lines with a specific style. The following query finds all blank lines that have the Code style:  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Imports System.IO.Packaging  \nImports &lt;xmlns:w=&quot;http://schemas.openxmlformats.org/wordprocessingml/2006/main&quot;&gt;  \n\nModule Module1  \n    &lt;System.Runtime.CompilerServices.Extension()&gt; _  \n    Public Function StringConcatenate(ByVal source As IEnumerable(Of String)) As String  \n        Dim sb As StringBuilder = New StringBuilder()  \n        For Each s As String In source  \n            sb.Append(s)  \n        Next  \n        Return sb.ToString()  \n    End Function  \n\n    &lt;System.Runtime.CompilerServices.Extension()&gt; _  \n    Public Function StringConcatenate(Of T)(ByVal source As IEnumerable(Of T), _  \n    ByVal func As Func(Of T, String)) As String  \n        Dim sb As StringBuilder = New StringBuilder()  \n        For Each item As T In source  \n            sb.Append(func(item))  \n        Next  \n        Return sb.ToString()  \n    End Function  \n\n    &lt;System.Runtime.CompilerServices.Extension()&gt; _  \n    Public Function StringConcatenate(Of T)(ByVal source As IEnumerable(Of T), _  \n    ByVal separator As String) As String  \n        Dim sb As StringBuilder = New StringBuilder()  \n        For Each s As T In source  \n            sb.Append(s).Append(separator)  \n        Next  \n        Return sb.ToString()  \n    End Function  \n\n    &lt;System.Runtime.CompilerServices.Extension()&gt; _  \n    Public Function StringConcatenate(Of T)(ByVal source As IEnumerable(Of T), _  \n    ByVal func As Func(Of T, String), ByVal separator As String) As String  \n        Dim sb As StringBuilder = New StringBuilder()  \n        For Each item As T In source  \n            sb.Append(func(item)).Append(separator)  \n        Next  \n        Return sb.ToString()  \n    End Function  \n\n    Public Function ParagraphText(ByVal e As XElement) As String  \n        Dim w As XNamespace = e.Name.Namespace  \n        Return (e.&lt;w:r&gt;.&lt;w:t&gt;).StringConcatenate(Function(element) CStr(element))  \n    End Function  \n\n    &#39; Following function is required because VB does not support short circuit evaluation  \n    Private Function GetStyleOfParagraph(ByVal styleNode As XElement, ByVal defaultStyle As String) As String  \n        If (styleNode Is Nothing) Then  \n            Return defaultStyle  \n        Else  \n            Return styleNode.@w:val  \n        End If  \n    End Function  \n\n    Sub Main()  \n        Dim fileName = &quot;SampleDoc.docx&quot;  \n\n        Dim documentRelationshipType = &quot;http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument&quot;  \n        Dim stylesRelationshipType = &quot;http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles&quot;  \n        Dim wordmlNamespace = &quot;http://schemas.openxmlformats.org/wordprocessingml/2006/main&quot;  \n        Dim xDoc As XDocument = Nothing  \n        Dim styleDoc As XDocument = Nothing  \n\n        Using wdPackage As Package = Package.Open(fileName, FileMode.Open, FileAccess.Read)  \n            Dim docPackageRelationship As PackageRelationship = wdPackage.GetRelationshipsByType(documentRelationshipType).FirstOrDefault()  \n            If (docPackageRelationship IsNot Nothing) Then  \n                Dim documentUri As Uri = PackUriHelper.ResolvePartUri(New Uri(&quot;/&quot;, UriKind.Relative), docPackageRelationship.TargetUri)  \n                Dim documentPart As PackagePart = wdPackage.GetPart(documentUri)  \n\n                &#39;  Load the document XML in the part into an XDocument instance.  \n                xDoc = XDocument.Load(XmlReader.Create(documentPart.GetStream()))  \n\n                &#39;  Find the styles part. There will only be one.  \n                Dim styleRelation As PackageRelationship = documentPart.GetRelationshipsByType(stylesRelationshipType).FirstOrDefault()  \n                If (styleRelation IsNot Nothing) Then  \n                    Dim styleUri As Uri = PackUriHelper.ResolvePartUri(documentUri, styleRelation.TargetUri)  \n                    Dim stylePart As PackagePart = wdPackage.GetPart(styleUri)  \n\n                    &#39;  Load the style XML in the part into an XDocument instance.  \n                    styleDoc = XDocument.Load(XmlReader.Create(stylePart.GetStream()))  \n                End If  \n            End If  \n        End Using  \n\n        Dim defaultStyle As String = _  \n            ( _  \n                From style In styleDoc.Root.&lt;w:style&gt; _  \n                Where style.@w:type = &quot;paragraph&quot; And _  \n                      style.@w:default = &quot;1&quot; _  \n                Select style _  \n            ).First().@w:styleId  \n\n        &#39; Find all paragraphs in the document.  \n        Dim paragraphs = _  \n            From para In xDoc.Root.&lt;w:body&gt;...&lt;w:p&gt; _  \n        Let styleNode As XElement = para.&lt;w:pPr&gt;.&lt;w:pStyle&gt;.FirstOrDefault _  \n        Select New With { _  \n            .ParagraphNode = para, _  \n            .StyleName = GetStyleOfParagraph(styleNode, defaultStyle) _  \n        }  \n\n        &#39; Retrieve the text of each paragraph.  \n        Dim paraWithText = _  \n            From para In paragraphs _  \n            Select New With { _  \n                .ParagraphNode = para.ParagraphNode, _  \n                .StyleName = para.StyleName, _  \n                .Text = ParagraphText(para.ParagraphNode) _  \n            }  \n\n        &#39; Retrieve all paragraphs that have no text and are styled Code.  \n        Dim blankCodeParagraphs = _  \n            From para In paraWithText _  \n            Where String.IsNullOrEmpty(para.Text) And para.StyleName.Equals(&quot;Code&quot;) _  \n            Select New With _  \n            { _  \n                .ParagraphNode = para.ParagraphNode, _  \n                .StyleName = para.StyleName, _  \n                .Text = para.Text _  \n            }  \n\n        For Each p In blankCodeParagraphs  \n            Console.WriteLine(&quot;StyleName:{0} &gt;{1}&lt;&quot;, p.StyleName, p.Text)  \n        Next  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre class=\"loading\"><code>StyleName:Code &gt;&lt;  \n</code></pre><p> Of course, this example could be enhanced in a number of ways. For example, we could use regular expressions to search for text, we could iterate through all the Word files in a particular directory, and so on.  </p>\n<p> Note that this example performs approximately as well as if it were written as a single query. Because each query is implemented in a lazy, deferred fashion, each query does not yield its results until the query is iterated. For more information about execution and lazy evaluation, see <a href=\"deferred-execution-and-lazy-evaluation-in-linq-to-xml\" data-linktype=\"relative-path\">Deferred Execution and Lazy Evaluation in LINQ to XML (Visual Basic)</a>.  </p>\n<h2 id=\"next-steps\">Next Steps</h2>\n<p> The next section provides more information about WordprocessingML documents:  </p>\n<ul>\n<li><a href=\"details-of-office-open-xml-wordprocessingml-documents\" data-linktype=\"relative-path\">Details of Office Open XML WordprocessingML Documents (Visual Basic)</a>  </li>\n</ul>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"tutorial-manipulating-content-in-a-wordprocessingml-document\" data-linktype=\"relative-path\">Tutorial: Manipulating Content in a WordprocessingML Document (Visual Basic)</a><br> <a href=\"refactoring-using-a-pure-function\" data-linktype=\"relative-path\">Refactoring Using a Pure Function (Visual Basic)</a><br> <a href=\"deferred-execution-and-lazy-evaluation-in-linq-to-xml\" data-linktype=\"relative-path\">Deferred Execution and Lazy Evaluation in LINQ to XML (Visual Basic)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.tgt_pltfrm\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"eea9819b-a78a-4552-bf13-8837fc0e7a37\">\r\n<meta name=\"caps.latest.revision\" content=\"4\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-21 01:42 AM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/linq/finding-text-in-word-documents.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/visual-basic/programming-guide/concepts/linq/finding-text-in-word-documents.md\">\r\n<meta name=\"document_id\" content=\"2a0d2732-4b18-0fc0-4815-813b33712941\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Finding Text in Word Documents (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.tgt_pltfrm":"","ms.assetid":"eea9819b-a78a-4552-bf13-8837fc0e7a37","caps.latest.revision":4,"ms.topic":"article","dev_langs":["vb"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-21 01:42 AM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/21/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/linq/finding-text-in-word-documents.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/visual-basic/programming-guide/concepts/linq/finding-text-in-word-documents.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/concepts/linq/finding-text-in-word-documents.md","document_id":"2a0d2732-4b18-0fc0-4815-813b33712941","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/programming-guide/concepts/linq/finding-text-in-word-documents","toc_asset_id":"articles/visual-basic/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"Finding Text in Word Documents (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":1316,"_op_rawTitle":"<h1 id=\"finding-text-in-word-documents-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/concepts/linq/finding-text-in-word-documents.md\" sourcestartlinenumber=\"20\" sourceendlinenumber=\"20\">Finding Text in Word Documents (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/programming-guide/concepts/linq/finding-text-in-word-documents","fileRelativePath":"articles/visual-basic/programming-guide/concepts/linq/finding-text-in-word-documents.html"},"themesRelativePathToOutputRoot":"_themes/"}