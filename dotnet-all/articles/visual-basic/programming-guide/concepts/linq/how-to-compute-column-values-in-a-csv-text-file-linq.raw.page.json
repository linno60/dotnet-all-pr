{"content":"<div><div class=\"content\">\n<p>This example shows how to perform aggregate computations such as Sum, Average, Min, and Max on the columns of a .csv file. The example principles that are shown here can be applied to other types of structured text.  </p>\n<h3 id=\"to-create-the-source-file\">To create the source file</h3>\n<ol>\n<li><p>Copy the following lines into a file that is named scores.csv and save it in your project folder. Assume that the first column represents a student ID, and subsequent columns represent scores from four exams.  </p>\n<pre class=\"loading\"><code>111, 97, 92, 81, 60  \n112, 75, 84, 91, 39  \n113, 88, 94, 65, 91  \n114, 97, 89, 85, 82  \n115, 35, 72, 91, 70  \n116, 99, 86, 90, 94  \n117, 93, 92, 80, 87  \n118, 92, 90, 83, 78  \n119, 68, 79, 88, 92  \n120, 99, 82, 81, 79  \n121, 96, 85, 91, 60  \n122, 94, 92, 91, 91  \n</code></pre></li>\n</ol>\n<h2 id=\"example\">Example</h2>\n<pre class=\"loading\"><code class=\"lang-vb\">Class SumColumns  \n\n    Public Shared Sub Main()  \n\n        Dim lines As String() = System.IO.File.ReadAllLines(&quot;../../../scores.csv&quot;)  \n\n        &#39; Specifies the column to compute  \n        &#39; This value could be passed in at runtime.  \n        Dim exam = 3  \n\n        &#39; Spreadsheet format:  \n        &#39; Student ID    Exam#1  Exam#2  Exam#3  Exam#4  \n        &#39; 111,          97,     92,     81,     60  \n        &#39; one is added to skip over the first column  \n        &#39; which holds the student ID.  \n        SumColumn(lines, exam + 1)  \n        Console.WriteLine()  \n        MultiColumns(lines)  \n\n        &#39; Keep the console window open in debug mode.  \n        Console.WriteLine(&quot;Press any key to exit...&quot;)  \n        Console.ReadKey()  \n\n    End Sub  \n\n    Shared Sub SumColumn(ByVal lines As IEnumerable(Of String), ByVal col As Integer)  \n\n        &#39; This query performs two steps:  \n        &#39; split the string into a string array  \n        &#39; convert the specified element to  \n        &#39; integer and select it.  \n        Dim columnQuery = From line In lines   \n                           Let x = line.Split(&quot;,&quot;)   \n                           Select Convert.ToInt32(x(col))  \n\n        &#39; Execute and cache the results for performance.  \n        &#39; Only needed with very large files.  \n        Dim results = columnQuery.ToList()  \n\n        &#39; Perform aggregate calculations   \n        &#39; on the column specified by col.  \n        Dim avgScore = Aggregate score In results Into Average(score)  \n        Dim minScore = Aggregate score In results Into Min(score)  \n        Dim maxScore = Aggregate score In results Into Max(score)  \n\n        Console.WriteLine(&quot;Single Column Query:&quot;)  \n        Console.WriteLine(&quot;Exam #{0}: Average:{1:##.##} High Score:{2} Low Score:{3}&quot;,   \n                     col, avgScore, maxScore, minScore)  \n\n    End Sub  \n\n    Shared Sub MultiColumns(ByVal lines As IEnumerable(Of String))  \n\n        Console.WriteLine(&quot;Multi Column Query:&quot;)  \n\n        &#39; Create the query. It will produce nested sequences.   \n        &#39; multiColQuery performs these steps:  \n        &#39; 1) convert the string to a string array  \n        &#39; 2) skip over the &quot;Student ID&quot; column and take the rest  \n        &#39; 3) convert each field to an int and select that   \n        &#39;    entire sequence as one row in the results.  \n        Dim multiColQuery = From line In lines   \n                            Let fields = line.Split(&quot;,&quot;)   \n                            Select From str In fields Skip 1   \n                                        Select Convert.ToInt32(str)  \n\n        Dim results = multiColQuery.ToList()  \n\n        &#39; Find out how many columns we have.  \n        Dim columnCount = results(0).Count()  \n\n        &#39; Perform aggregate calculations on each column.              \n        &#39; One loop for each score column in scores.  \n        &#39; We can use a for loop because we have already  \n        &#39; executed the multiColQuery in the call to ToList.  \n\n        For j As Integer = 0 To columnCount - 1  \n            Dim column = j  \n            Dim res2 = From row In results   \n                       Select row.ElementAt(column)  \n\n            &#39; Perform aggregate calculations   \n            &#39; on the column specified by col.  \n            Dim avgScore = Aggregate score In res2 Into Average(score)  \n            Dim minScore = Aggregate score In res2 Into Min(score)  \n            Dim maxScore = Aggregate score In res2 Into Max(score)  \n\n            &#39; Add 1 to column numbers because exams in this course start with #1  \n            Console.WriteLine(&quot;Exam #{0} Average: {1:##.##} High Score: {2} Low Score: {3}&quot;,   \n                              column + 1, avgScore, maxScore, minScore)  \n\n        Next  \n    End Sub  \n\nEnd Class  \n&#39; Output:  \n&#39; Single Column Query:  \n&#39; Exam #4: Average:76.92 High Score:94 Low Score:39  \n\n&#39; Multi Column Query:  \n&#39; Exam #1 Average: 86.08 High Score: 99 Low Score: 35  \n&#39; Exam #2 Average: 86.42 High Score: 94 Low Score: 72  \n&#39; Exam #3 Average: 84.75 High Score: 91 Low Score: 65  \n&#39; Exam #4 Average: 76.92 High Score: 94 Low Score: 39  \n</code></pre><p> The query works by using the <a class=\"xref\" href=\"../../../../../api/system.string#System_String_Split_\" data-linktype=\"relative-path\">Split</a> method to convert each line of text into an array. Each array element represents a column. Finally, the text in each column is converted to its numeric representation. If your file is a tab-separated file, just update the argument in the <code>Split</code> method to <code>\\t</code>.  </p>\n<h2 id=\"compiling-the-code\">Compiling the Code</h2>\n<p> Create a project that targets the .NET Framework version 3.5 or higher with a reference to System.Core.dll and a <code>Imports</code> statement for the System.Linq namespace.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"linq-and-strings\" data-linktype=\"relative-path\">LINQ and Strings (Visual Basic)</a><br> <a href=\"linq-and-file-directories\" data-linktype=\"relative-path\">LINQ and File Directories (Visual Basic)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.tgt_pltfrm\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"88b2b9f3-c82e-41f3-b1b4-26ede5973a02\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-21 01:42 AM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/linq/how-to-compute-column-values-in-a-csv-text-file-linq.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/visual-basic/programming-guide/concepts/linq/how-to-compute-column-values-in-a-csv-text-file-linq.md\">\r\n<meta name=\"document_id\" content=\"3f532983-5e5b-aca1-4e90-9c06d9108752\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"How to: Compute Column Values in a CSV Text File (LINQ) (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.tgt_pltfrm":"","ms.assetid":"88b2b9f3-c82e-41f3-b1b4-26ede5973a02","caps.latest.revision":3,"ms.topic":"article","dev_langs":["vb"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-21 01:42 AM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/21/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/linq/how-to-compute-column-values-in-a-csv-text-file-linq.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/visual-basic/programming-guide/concepts/linq/how-to-compute-column-values-in-a-csv-text-file-linq.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/concepts/linq/how-to-compute-column-values-in-a-csv-text-file-linq.md","document_id":"3f532983-5e5b-aca1-4e90-9c06d9108752","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/programming-guide/concepts/linq/how-to-compute-column-values-in-a-csv-text-file-linq","toc_asset_id":"articles/visual-basic/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Compute Column Values in a CSV Text File (LINQ) (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":734,"_op_rawTitle":"<h1 id=\"how-to-compute-column-values-in-a-csv-text-file-linq-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/concepts/linq/how-to-compute-column-values-in-a-csv-text-file-linq.md\" sourcestartlinenumber=\"25\" sourceendlinenumber=\"25\">How to: Compute Column Values in a CSV Text File (LINQ) (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/programming-guide/concepts/linq/how-to-compute-column-values-in-a-csv-text-file-linq","fileRelativePath":"articles/visual-basic/programming-guide/concepts/linq/how-to-compute-column-values-in-a-csv-text-file-linq.html"},"themesRelativePathToOutputRoot":"_themes/"}