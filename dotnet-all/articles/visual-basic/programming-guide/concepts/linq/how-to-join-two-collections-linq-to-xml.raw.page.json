{"content":"<div><div class=\"content\">\n<p>An element or attribute in an XML document can sometimes refer to another element or attribute. For example, the <a href=\"sample-xml-file-customers-and-orders-linq-to-xml\" data-linktype=\"relative-path\">Sample XML File: Customers and Orders (LINQ to XML)</a> XML document contains a list of customers and a list of orders. Each <code>Customer</code> element contains a <code>CustomerID</code> attribute. Each <code>Order</code> element contains a <code>CustomerID</code> element. The <code>CustomerID</code> element in each order refers to the <code>CustomerID</code> attribute in a customer.  </p>\n<p> The topic <a href=\"sample-xsd-file-customers-and-orders\" data-linktype=\"relative-path\">Sample XSD File: Customers and Orders</a> contains an XSD that can be used to validate this document. It uses the <code>xs:key</code> and <code>xs:keyref</code> features of XSD to establish that the <code>CustomerID</code> attribute of the <code>Customer</code> element is a key, and to establish a relationship between the <code>CustomerID</code> element in each <code>Order</code> element and the <code>CustomerID</code> attribute in each <code>Customer</code> element.  </p>\n<p> With LINQ to XML, you can take advantage of this relationship by using the <code>Join</code> clause.  </p>\n<p> Note that because there is no index available, such joining will have poor runtime performance.  </p>\n<p> For more detailed information about <code>Join</code>, see <a href=\"join-operations\" data-linktype=\"relative-path\">Join Operations (Visual Basic)</a>.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following example joins the <code>Customer</code> elements to the <code>Order</code> elements, and generates a new XML document that includes the <code>CompanyName</code> element in the orders.  </p>\n<p> Before executing the query, the example validates that the document complies with the schema in <a href=\"sample-xsd-file-customers-and-orders\" data-linktype=\"relative-path\">Sample XSD File: Customers and Orders</a>. This ensures that the join clause will always work.  </p>\n<p> This query first retrieves all <code>Customer</code> elements, and then joins them to the <code>Order</code> elements. It selects only the orders for customers with a <code>CustomerID</code> greater than &quot;K&quot;. It then projects a new <code>Order</code> element that contains the customer information within each order.  </p>\n<p> This example uses the following XML document: <a href=\"sample-xml-file-customers-and-orders-linq-to-xml\" data-linktype=\"relative-path\">Sample XML File: Customers and Orders (LINQ to XML)</a>.  </p>\n<p> This example uses the following XSD schema: <a href=\"sample-xsd-file-customers-and-orders\" data-linktype=\"relative-path\">Sample XSD File: Customers and Orders</a>.  </p>\n<p> Note that joining in this fashion will not perform very well. Joins are performed via a linear search. There are no hash tables or indexes to help with performance.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Public Class Program  \n    Public Shared errors As Boolean = False  \n\n    Public Shared Function LamValidEvent(ByVal o As Object, _  \n                 ByVal e As ValidationEventArgs) As Boolean  \n        Console.WriteLine(&quot;{0}&quot;, e.Message)  \n        errors = True  \n    End Function  \n\n    Shared Sub Main()  \n        Dim schemas As New XmlSchemaSet()  \n        schemas.Add(&quot;&quot;, &quot;CustomersOrders.xsd&quot;)  \n\n        Console.Write(&quot;Attempting to validate, &quot;)  \n        Dim custOrdDoc As XDocument = XDocument.Load(&quot;CustomersOrders.xml&quot;)  \n\n        custOrdDoc.Validate(schemas, Function(o, e) LamValidEvent(0, e))  \n        If errors Then  \n            Console.WriteLine(&quot;custOrdDoc did not validate&quot;)  \n        Else  \n            Console.WriteLine(&quot;custOrdDoc validated&quot;)  \n        End If  \n\n        If Not errors Then  \n            &#39;Join customers and orders, and create a new XML document with  \n            &#39; a different shape.  \n            &#39;The new document contains orders only for customers with a  \n            &#39; CustomerID &gt; &#39;K&#39;.  \n            Dim custOrd As XElement = custOrdDoc.&lt;Root&gt;.FirstOrDefault  \n            Dim newCustOrd As XElement = _  \n                &lt;Root&gt;  \n                    &lt;%= From c In custOrd.&lt;Customers&gt;.&lt;Customer&gt; _  \n                        Join o In custOrd.&lt;Orders&gt;.&lt;Order&gt; _  \n                        On c.@CustomerID Equals o.&lt;CustomerID&gt;.Value _  \n                        Where c.@CustomerID.CompareTo(&quot;K&quot;) &gt; 0 _  \n                        Select _  \n                        &lt;Order&gt;  \n                            &lt;CustomerID&gt;&lt;%= c.@CustomerID %&gt;&lt;/CustomerID&gt;  \n                            &lt;%= c.&lt;CompanyName&gt; %&gt;  \n                            &lt;%= c.&lt;ContactName&gt; %&gt;  \n                            &lt;%= o.&lt;EmployeeID&gt; %&gt;  \n                            &lt;%= o.&lt;OrderDate&gt; %&gt;  \n                        &lt;/Order&gt; _  \n                    %&gt;  \n                &lt;/Root&gt;  \n            Console.WriteLine(newCustOrd)  \n        End If  \n    End Sub  \nEnd Class  \n</code></pre><p> This code produces the following output:  </p>\n<pre class=\"loading\"><code>Attempting to validate, custOrdDoc validated  \n&lt;Root&gt;  \n  &lt;Order&gt;  \n    &lt;CustomerID&gt;LAZYK&lt;/CustomerID&gt;  \n    &lt;CompanyName&gt;Lazy K Kountry Store&lt;/CompanyName&gt;  \n    &lt;ContactName&gt;John Steel&lt;/ContactName&gt;  \n    &lt;EmployeeID&gt;1&lt;/EmployeeID&gt;  \n    &lt;OrderDate&gt;1997-03-21T00:00:00&lt;/OrderDate&gt;  \n  &lt;/Order&gt;  \n  &lt;Order&gt;  \n    &lt;CustomerID&gt;LAZYK&lt;/CustomerID&gt;  \n    &lt;CompanyName&gt;Lazy K Kountry Store&lt;/CompanyName&gt;  \n    &lt;ContactName&gt;John Steel&lt;/ContactName&gt;  \n    &lt;EmployeeID&gt;8&lt;/EmployeeID&gt;  \n    &lt;OrderDate&gt;1997-05-22T00:00:00&lt;/OrderDate&gt;  \n  &lt;/Order&gt;  \n  &lt;Order&gt;  \n    &lt;CustomerID&gt;LETSS&lt;/CustomerID&gt;  \n    &lt;CompanyName&gt;Let&#39;s Stop N Shop&lt;/CompanyName&gt;  \n    &lt;ContactName&gt;Jaime Yorres&lt;/ContactName&gt;  \n    &lt;EmployeeID&gt;1&lt;/EmployeeID&gt;  \n    &lt;OrderDate&gt;1997-06-25T00:00:00&lt;/OrderDate&gt;  \n  &lt;/Order&gt;  \n  &lt;Order&gt;  \n    &lt;CustomerID&gt;LETSS&lt;/CustomerID&gt;  \n    &lt;CompanyName&gt;Let&#39;s Stop N Shop&lt;/CompanyName&gt;  \n    &lt;ContactName&gt;Jaime Yorres&lt;/ContactName&gt;  \n    &lt;EmployeeID&gt;8&lt;/EmployeeID&gt;  \n    &lt;OrderDate&gt;1997-10-27T00:00:00&lt;/OrderDate&gt;  \n  &lt;/Order&gt;  \n  &lt;Order&gt;  \n    &lt;CustomerID&gt;LETSS&lt;/CustomerID&gt;  \n    &lt;CompanyName&gt;Let&#39;s Stop N Shop&lt;/CompanyName&gt;  \n    &lt;ContactName&gt;Jaime Yorres&lt;/ContactName&gt;  \n    &lt;EmployeeID&gt;6&lt;/EmployeeID&gt;  \n    &lt;OrderDate&gt;1997-11-10T00:00:00&lt;/OrderDate&gt;  \n  &lt;/Order&gt;  \n  &lt;Order&gt;  \n    &lt;CustomerID&gt;LETSS&lt;/CustomerID&gt;  \n    &lt;CompanyName&gt;Let&#39;s Stop N Shop&lt;/CompanyName&gt;  \n    &lt;ContactName&gt;Jaime Yorres&lt;/ContactName&gt;  \n    &lt;EmployeeID&gt;4&lt;/EmployeeID&gt;  \n    &lt;OrderDate&gt;1998-02-12T00:00:00&lt;/OrderDate&gt;  \n  &lt;/Order&gt;  \n&lt;/Root&gt;  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"advanced-query-techniques-linq-to-xml\" data-linktype=\"relative-path\">Advanced Query Techniques (LINQ to XML) (Visual Basic)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.tgt_pltfrm\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"5a5758d4-906b-4285-908d-5b930db192e6\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-21 01:42 AM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/linq/how-to-join-two-collections-linq-to-xml.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/visual-basic/programming-guide/concepts/linq/how-to-join-two-collections-linq-to-xml.md\">\r\n<meta name=\"document_id\" content=\"bb48072b-bc89-fc38-0db0-c5ee051daf34\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"How to: Join Two Collections (LINQ to XML) (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.tgt_pltfrm":"","ms.assetid":"5a5758d4-906b-4285-908d-5b930db192e6","caps.latest.revision":3,"ms.topic":"article","dev_langs":["vb"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-21 01:42 AM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/21/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/linq/how-to-join-two-collections-linq-to-xml.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/visual-basic/programming-guide/concepts/linq/how-to-join-two-collections-linq-to-xml.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/concepts/linq/how-to-join-two-collections-linq-to-xml.md","document_id":"bb48072b-bc89-fc38-0db0-c5ee051daf34","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/programming-guide/concepts/linq/how-to-join-two-collections-linq-to-xml","toc_asset_id":"articles/visual-basic/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Join Two Collections (LINQ to XML) (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":582,"_op_rawTitle":"<h1 id=\"how-to-join-two-collections-linq-to-xml-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/concepts/linq/how-to-join-two-collections-linq-to-xml.md\" sourcestartlinenumber=\"20\" sourceendlinenumber=\"20\">How to: Join Two Collections (LINQ to XML) (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/programming-guide/concepts/linq/how-to-join-two-collections-linq-to-xml","fileRelativePath":"articles/visual-basic/programming-guide/concepts/linq/how-to-join-two-collections-linq-to-xml.html"},"themesRelativePathToOutputRoot":"_themes/"}