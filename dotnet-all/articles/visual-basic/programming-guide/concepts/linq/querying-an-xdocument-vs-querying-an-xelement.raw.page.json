{"content":"<div><div class=\"content\">\n<p>When you load a document via <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xdocument#System_Xml_Linq_XDocument_Load_\" data-linktype=\"relative-path\">Load</a>, you will notice that you have to write queries slightly differently than when you load via <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement#System_Xml_Linq_XElement_Load_\" data-linktype=\"relative-path\">Load</a>.  </p>\n<h2 id=\"comparison-of-xdocumentload-and-xelementload\">Comparison of XDocument.Load and XElement.Load</h2>\n<p> When you load an XML document into an <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> via <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement#System_Xml_Linq_XElement_Load_\" data-linktype=\"relative-path\">Load</a>, the <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> at the root of the XML tree contains the root element of the loaded document. However, when you load the same XML document into an <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> via <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xdocument#System_Xml_Linq_XDocument_Load_\" data-linktype=\"relative-path\">Load</a>, the root of the tree is an <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> node, and the root element of the loaded document is the one allowed child <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> node of the <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a>. The LINQ to XML axes operate relative to the root node.  </p>\n<p> This first example loads an XML tree using <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement#System_Xml_Linq_XElement_Load_\" data-linktype=\"relative-path\">Load</a>. It then queries for the child elements of the root of the tree.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">&#39; Create a simple document and  write it to a file  \nFile.WriteAllText(&quot;Test.xml&quot;, &quot;&lt;Root&gt;&quot; + Environment.NewLine + _  \n    &quot;    &lt;Child1&gt;1&lt;/Child1&gt;&quot; + Environment.NewLine + _  \n    &quot;    &lt;Child2&gt;2&lt;/Child2&gt;&quot; + Environment.NewLine + _  \n    &quot;    &lt;Child3&gt;3&lt;/Child3&gt;&quot; + Environment.NewLine + _  \n    &quot;&lt;/Root&gt;&quot;)  \n\nConsole.WriteLine(&quot;Querying tree loaded with XElement.Load&quot;)  \nConsole.WriteLine(&quot;----&quot;)  \nDim doc As XElement = XElement.Load(&quot;Test.xml&quot;)  \nDim childList As IEnumerable(Of XElement) = _  \n        From el In doc.Elements() _  \n        Select el  \nFor Each e As XElement In childList  \n    Console.WriteLine(e)  \nNext  \n</code></pre><p> As expected, this example produces the following output:  </p>\n<pre class=\"loading\"><code>Querying tree loaded with XElement.Load  \n----  \n&lt;Child1&gt;1&lt;/Child1&gt;  \n&lt;Child2&gt;2&lt;/Child2&gt;  \n&lt;Child3&gt;3&lt;/Child3&gt;  \n</code></pre><p> The following example is the same as the one above, with the exception that the XML tree is loaded into an <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xdocument\" data-linktype=\"relative-path\">XDocument</a> instead of an <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">&#39; Create a simple document and  write it to a file  \nFile.WriteAllText(&quot;Test.xml&quot;, &quot;&lt;Root&gt;&quot; + Environment.NewLine + _  \n    &quot;    &lt;Child1&gt;1&lt;/Child1&gt;&quot; + Environment.NewLine + _  \n    &quot;    &lt;Child2&gt;2&lt;/Child2&gt;&quot; + Environment.NewLine + _  \n    &quot;    &lt;Child3&gt;3&lt;/Child3&gt;&quot; + Environment.NewLine + _  \n    &quot;&lt;/Root&gt;&quot;)  \n\nConsole.WriteLine(&quot;Querying tree loaded with XDocument.Load&quot;)  \nConsole.WriteLine(&quot;----&quot;)  \nDim doc As XDocument = XDocument.Load(&quot;Test.xml&quot;)  \nDim childList As IEnumerable(Of XElement) = _  \n        From el In doc.Elements() _  \n        Select el  \nFor Each e As XElement In childList  \n    Console.WriteLine(e)  \nNext  \n</code></pre><p> This example produces the following output:  </p>\n<pre class=\"loading\"><code>Querying tree loaded with XDocument.Load  \n----  \n&lt;Root&gt;  \n  &lt;Child1&gt;1&lt;/Child1&gt;  \n  &lt;Child2&gt;2&lt;/Child2&gt;  \n  &lt;Child3&gt;3&lt;/Child3&gt;  \n&lt;/Root&gt;  \n</code></pre><p> Notice that the same query returned the one <code>Root</code> node instead of the three child nodes.  </p>\n<p> One approach to dealing with this is to use the <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xdocument#System_Xml_Linq_XDocument_Root_\" data-linktype=\"relative-path\">Root</a> property before accessing the axes methods, as follows:  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">&#39; Create a simple document and  write it to a file  \nFile.WriteAllText(&quot;Test.xml&quot;, &quot;&lt;Root&gt;&quot; + Environment.NewLine + _  \n    &quot;    &lt;Child1&gt;1&lt;/Child1&gt;&quot; + Environment.NewLine + _  \n    &quot;    &lt;Child2&gt;2&lt;/Child2&gt;&quot; + Environment.NewLine + _  \n    &quot;    &lt;Child3&gt;3&lt;/Child3&gt;&quot; + Environment.NewLine + _  \n    &quot;&lt;/Root&gt;&quot;)  \n\nConsole.WriteLine(&quot;Querying tree loaded with XDocument.Load&quot;)  \nConsole.WriteLine(&quot;----&quot;)  \nDim doc As XDocument = XDocument.Load(&quot;Test.xml&quot;)  \nDim childList As IEnumerable(Of XElement) = _  \n        From el In doc.Root.Elements() _  \n        Select el  \nFor Each e As XElement In childList  \n    Console.WriteLine(e)  \nNext  \n</code></pre><p> This query now performs in the same way as the query on the tree rooted in <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a>. The example produces the following output:  </p>\n<pre class=\"loading\"><code>Querying tree loaded with XDocument.Load  \n----  \n&lt;Child1&gt;1&lt;/Child1&gt;  \n&lt;Child2&gt;2&lt;/Child2&gt;  \n&lt;Child3&gt;3&lt;/Child3&gt;  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"basic-queries-linq-to-xml\" data-linktype=\"relative-path\">Basic Queries (LINQ to XML) (Visual Basic)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.tgt_pltfrm\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"2d111f84-0ded-4cde-8d93-5440557a726d\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/linq/querying-an-xdocument-vs-querying-an-xelement.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/linq/querying-an-xdocument-vs-querying-an-xelement.md\">\r\n<meta name=\"document_id\" content=\"0d7af4cd-00bc-d4b1-dba4-aefae671b6ae\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Querying an XDocument vs. Querying an XElement (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.tgt_pltfrm":"","ms.assetid":"2d111f84-0ded-4cde-8d93-5440557a726d","caps.latest.revision":3,"ms.topic":"article","dev_langs":["vb"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/linq/querying-an-xdocument-vs-querying-an-xelement.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/linq/querying-an-xdocument-vs-querying-an-xelement.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/concepts/linq/querying-an-xdocument-vs-querying-an-xelement.md","document_id":"0d7af4cd-00bc-d4b1-dba4-aefae671b6ae","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/programming-guide/concepts/linq/querying-an-xdocument-vs-querying-an-xelement","toc_asset_id":"articles/visual-basic/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"Querying an XDocument vs. Querying an XElement (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":464,"_op_rawTitle":"<h1 id=\"querying-an-xdocument-vs-querying-an-xelement-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/concepts/linq/querying-an-xdocument-vs-querying-an-xelement.md\" sourcestartlinenumber=\"20\" sourceendlinenumber=\"20\">Querying an XDocument vs. Querying an XElement (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/programming-guide/concepts/linq/querying-an-xdocument-vs-querying-an-xelement","fileRelativePath":"articles/visual-basic/programming-guide/concepts/linq/querying-an-xdocument-vs-querying-an-xelement.html"},"themesRelativePathToOutputRoot":"_themes/"}