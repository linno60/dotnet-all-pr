{"content":"<div><div class=\"content\">\n<p>Partitioning in LINQ refers to the operation of dividing an input sequence into two sections, without rearranging the elements, and then returning one of the sections.  </p>\n<p> The following illustration shows the results of three different partitioning operations on a sequence of characters. The first operation returns the first three elements in the sequence. The second operation skips the first three elements and returns the remaining elements. The third operation skips the first two elements in the sequence and returns the next three elements.  </p>\n<p> <img src=\"../../../../csharp/programming-guide/concepts/linq/media/linq_partition.png\" alt=\"LINQ Partitioning Operations\" title=\"LINQ_Partition\" data-linktype=\"relative-path\">  </p>\n<p> The standard query operator methods that partition sequences are listed in the following section.  </p>\n<h2 id=\"operators\">Operators</h2>\n<table>\n<thead>\n<tr>\n<th>Operator Name</th>\n<th>Description</th>\n<th>Visual Basic Query Expression Syntax</th>\n<th>More Information</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Skip</td>\n<td>Skips elements up to a specified position in a sequence.</td>\n<td><code>Skip</code></td>\n<td><a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb358985(v=vs.110).aspx\" data-linktype=\"external\">Enumerable.Skip</a><br><br> <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb357513(v=vs.110).aspx\" data-linktype=\"external\">Queryable.Skip</a></td>\n</tr>\n<tr>\n<td>SkipWhile</td>\n<td>Skips elements based on a predicate function until an element does not satisfy the condition.</td>\n<td><code>Skip While</code></td>\n<td><a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb348298(v=vs.110).aspx\" data-linktype=\"external\">Enumerable.SkipWhile</a><br><br> <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb335462(v=vs.110).aspx\" data-linktype=\"external\">Queryable.SkipWhile</a></td>\n</tr>\n<tr>\n<td>Take</td>\n<td>Takes elements up to a specified position in a sequence.</td>\n<td><code>Take</code></td>\n<td><a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb503062(v=vs.110).aspx\" data-linktype=\"external\">Enumerable.Take</a><br><br> <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb300906(v=vs.110).aspx\" data-linktype=\"external\">Queryable.Take</a></td>\n</tr>\n<tr>\n<td>TakeWhile</td>\n<td>Takes elements based on a predicate function until an element does not satisfy the condition.</td>\n<td><code>Take While</code></td>\n<td><a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb348003(v=vs.110).aspx\" data-linktype=\"external\">Enumerable.TakeWhile</a><br><br> <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb360161(v=vs.110).aspx\" data-linktype=\"external\">Queryable.TakeWhile</a></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"query-expression-syntax-examples\">Query Expression Syntax Examples</h2>\n<h3 id=\"skip\">Skip</h3>\n<p> The following code example uses the <code>Skip</code> clause in Visual Basic to skip over the first four strings in an array of strings before returning the remaining strings in the array.  </p>\n<pre><code class=\"lang-vb\" name=\"CsLINQPartitioning#1\">\n        Dim words = {&quot;an&quot;, &quot;apple&quot;, &quot;a&quot;, &quot;day&quot;, &quot;keeps&quot;, &quot;the&quot;, &quot;doctor&quot;, &quot;away&quot;}\n\n        Dim query = From word In words \n                    Skip 4\n\n        Dim sb As New System.Text.StringBuilder()\n        For Each str As String In query\n            sb.AppendLine(str)\n        Next\n\n        &#39; Display the results.\n        MsgBox(sb.ToString())\n\n        &#39; This code produces the following output:\n\n        &#39; keeps\n        &#39; the\n        &#39; doctor\n        &#39; away\n</code></pre><h3 id=\"skipwhile\">SkipWhile</h3>\n<p> The following code example uses the <code>Skip While</code> clause in Visual Basic to skip over the strings in an array while the first letter of the string is &quot;a&quot;. The remaining strings in the array are returned.  </p>\n<pre><code class=\"lang-vb\" name=\"CsLINQPartitioning#2\">\n        Dim words = {&quot;an&quot;, &quot;apple&quot;, &quot;a&quot;, &quot;day&quot;, &quot;keeps&quot;, &quot;the&quot;, &quot;doctor&quot;, &quot;away&quot;}\n\n        Dim query = From word In words \n                    Skip While word.Substring(0, 1) = &quot;a&quot;\n\n        Dim sb As New System.Text.StringBuilder()\n        For Each str As String In query\n            sb.AppendLine(str)\n        Next\n\n        &#39; Display the results.\n        MsgBox(sb.ToString())\n\n        &#39; This code produces the following output:\n\n        &#39; day\n        &#39; keeps\n        &#39; the\n        &#39; doctor\n        &#39; away\n</code></pre><h3 id=\"take\">Take</h3>\n<p> The following code example uses the <code>Take</code> clause in Visual Basic to return the first two strings in an array of strings.  </p>\n<pre><code class=\"lang-vb\" name=\"CsLINQPartitioning#3\">\n        Dim words = {&quot;an&quot;, &quot;apple&quot;, &quot;a&quot;, &quot;day&quot;, &quot;keeps&quot;, &quot;the&quot;, &quot;doctor&quot;, &quot;away&quot;}\n\n        Dim query = From word In words \n                    Take 2\n\n        Dim sb As New System.Text.StringBuilder()\n        For Each str As String In query\n            sb.AppendLine(str)\n        Next\n\n        &#39; Display the results.\n        MsgBox(sb.ToString())\n\n        &#39; This code produces the following output:\n\n        &#39; an\n        &#39; apple\n</code></pre><h3 id=\"takewhile\">TakeWhile</h3>\n<p> The following code example uses the <code>Take While</code> clause in Visual Basic to return strings from an array while the length of the string is five or less.  </p>\n<pre><code class=\"lang-vb\" name=\"CsLINQPartitioning#4\">\n        Dim words = {&quot;an&quot;, &quot;apple&quot;, &quot;a&quot;, &quot;day&quot;, &quot;keeps&quot;, &quot;the&quot;, &quot;doctor&quot;, &quot;away&quot;}\n\n        Dim query = From word In words \n                    Take While word.Length &lt; 6\n\n        Dim sb As New System.Text.StringBuilder()\n        For Each str As String In query\n            sb.AppendLine(str)\n        Next\n\n        &#39; Display the results.\n        MsgBox(sb.ToString())\n\n        &#39; This code produces the following output:\n\n        &#39; an\n        &#39; apple\n        &#39; a\n        &#39; day\n        &#39; keeps\n        &#39; the\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../../api/system.linq\" data-linktype=\"relative-path\">System.Linq</a><br> <a href=\"standard-query-operators-overview\" data-linktype=\"relative-path\">Standard Query Operators Overview (Visual Basic)</a><br> <a href=\"../../../language-reference/queries/skip-clause\" data-linktype=\"relative-path\">Skip Clause</a><br> <a href=\"../../../language-reference/queries/skip-while-clause\" data-linktype=\"relative-path\">Skip While Clause</a><br> <a href=\"../../../language-reference/queries/take-clause\" data-linktype=\"relative-path\">Take Clause</a><br> <a href=\"../../../language-reference/queries/take-while-clause\" data-linktype=\"relative-path\">Take While Clause</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.tgt_pltfrm\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"69c59379-b66e-422c-b324-5b5c07760ef7\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/linq/partitioning-data.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/linq/partitioning-data.md\">\r\n<meta name=\"document_id\" content=\"4f7486e4-8685-ba4e-31d9-ed60ef88fa62\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Partitioning Data (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.tgt_pltfrm":"","ms.assetid":"69c59379-b66e-422c-b324-5b5c07760ef7","caps.latest.revision":3,"ms.topic":"article","dev_langs":["vb"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/linq/partitioning-data.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/linq/partitioning-data.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/concepts/linq/partitioning-data.md","document_id":"4f7486e4-8685-ba4e-31d9-ed60ef88fa62","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/concepts/linq/partitioning-data","toc_asset_id":"articles/visual-basic/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"Partitioning Data (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":537,"_op_rawTitle":"<h1 id=\"partitioning-data-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/concepts/linq/partitioning-data.md\" sourcestartlinenumber=\"25\" sourceendlinenumber=\"25\">Partitioning Data (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/concepts/linq/partitioning-data","fileRelativePath":"articles/visual-basic/programming-guide/concepts/linq/partitioning-data.html"},"themesRelativePathToOutputRoot":"_themes/"}