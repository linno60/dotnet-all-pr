{"content":"<div><div class=\"content\">\n<p>This example builds on the previous example, <a href=\"retrieving-the-text-of-the-paragraphs\" data-linktype=\"relative-path\">Retrieving the Text of the Paragraphs (Visual Basic)</a>, by refactoring the concatenation of strings using a pure function that is implemented as an extension method.  </p>\n<p> The previous example used the <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb336183(v=vs.110).aspx\" data-linktype=\"external\">Aggregate</a> standard query operator to concatenate multiple strings into one string. However, it is more convenient to write an extension method to do this, because the resulting query smaller and more simple.  </p>\n<h2 id=\"example\">Example</h2>\n<p> This example processes a WordprocessingML document, retrieving the paragraphs, the style of each paragraph, and the text of each paragraph. This example builds on the previous examples in this tutorial.  </p>\n<p> The example contains multiple overloads of the <code>StringConcatenate</code> method.  </p>\n<p> You can find instructions for creating the source document for this example in <a href=\"creating-the-source-office-open-xml-document\" data-linktype=\"relative-path\">Creating the Source Office Open XML Document (Visual Basic)</a>.  </p>\n<p> This example uses classes from the WindowsBase assembly. It uses types in the <a class=\"xref\" href=\"../../../../../api/system.io.packaging\" data-linktype=\"relative-path\">System.IO.Packaging</a> namespace.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">&lt;System.Runtime.CompilerServices.Extension()&gt; _  \nPublic Function StringConcatenate(ByVal source As IEnumerable(Of String)) As String  \n    Dim sb As StringBuilder = New StringBuilder()  \n    For Each s As String In source  \n        sb.Append(s)  \n    Next  \n    Return sb.ToString()  \nEnd Function  \n\n&lt;System.Runtime.CompilerServices.Extension()&gt; _  \nPublic Function StringConcatenate(Of T)(ByVal source As IEnumerable(Of T), _  \nByVal func As Func(Of T, String)) As String  \n    Dim sb As StringBuilder = New StringBuilder()  \n    For Each item As T In source  \n        sb.Append(func(item))  \n    Next  \n    Return sb.ToString()  \nEnd Function  \n\n&lt;System.Runtime.CompilerServices.Extension()&gt; _  \nPublic Function StringConcatenate(Of T)(ByVal source As IEnumerable(Of T), _  \nByVal separator As String) As String  \n    Dim sb As StringBuilder = New StringBuilder()  \n    For Each s As T In source  \n        sb.Append(s).Append(separator)  \n    Next  \n    Return sb.ToString()  \nEnd Function  \n\n&lt;System.Runtime.CompilerServices.Extension()&gt; _  \nPublic Function StringConcatenate(Of T)(ByVal source As IEnumerable(Of T), _  \nByVal func As Func(Of T, String), ByVal separator As String) As String  \n    Dim sb As StringBuilder = New StringBuilder()  \n    For Each item As T In source  \n        sb.Append(func(item)).Append(separator)  \n    Next  \n    Return sb.ToString()  \nEnd Function  \n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> There are four overloads of the <code>StringConcatenate</code> method. One overload simply takes a collection of strings and returns a single string. Another overload can take a collection of any type, and a delegate that projects from a singleton of the collection to a string. There are two more overloads that allow you to specify a separator string.  </p>\n<p> The following code uses all four overloads.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Dim numbers As String() = {&quot;one&quot;, &quot;two&quot;, &quot;three&quot;}  \n\nConsole.WriteLine(&quot;{0}&quot;, numbers.StringConcatenate())  \nConsole.WriteLine(&quot;{0}&quot;, numbers.StringConcatenate(&quot;:&quot;))  \n\nDim intNumbers As Integer() = {1, 2, 3}  \nConsole.WriteLine(&quot;{0}&quot;, intNumbers.StringConcatenate(Function(i) i.ToString()))  \nConsole.WriteLine(&quot;{0}&quot;, intNumbers.StringConcatenate(Function(i) i.ToString(), &quot;:&quot;))  \n</code></pre><p> This example produces the following output:  </p>\n<pre class=\"loading\"><code>onetwothree  \none:two:three:  \n123  \n1:2:3:  \n</code></pre><h2 id=\"example-2\">Example</h2>\n<p> Now, the example can be modified to take advantage of the new extension method:  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Imports &lt;xmlns:w=&quot;http://schemas.openxmlformats.org/wordprocessingml/2006/main&quot;&gt;  \n\nModule Module1  \n    &lt;System.Runtime.CompilerServices.Extension()&gt; _  \n    Public Function StringConcatenate(ByVal source As IEnumerable(Of String)) As String  \n        Dim sb As StringBuilder = New StringBuilder()  \n        For Each s As String In source  \n            sb.Append(s)  \n        Next  \n        Return sb.ToString()  \n    End Function  \n\n    &lt;System.Runtime.CompilerServices.Extension()&gt; _  \n    Public Function StringConcatenate(Of T)(ByVal source As IEnumerable(Of T), _  \n    ByVal func As Func(Of T, String)) As String  \n        Dim sb As StringBuilder = New StringBuilder()  \n        For Each item As T In source  \n            sb.Append(func(item))  \n        Next  \n        Return sb.ToString()  \n    End Function  \n\n    &lt;System.Runtime.CompilerServices.Extension()&gt; _  \n    Public Function StringConcatenate(Of T)(ByVal source As IEnumerable(Of T), _  \n    ByVal separator As String) As String  \n        Dim sb As StringBuilder = New StringBuilder()  \n        For Each s As T In source  \n            sb.Append(s).Append(separator)  \n        Next  \n        Return sb.ToString()  \n    End Function  \n\n    &lt;System.Runtime.CompilerServices.Extension()&gt; _  \n    Public Function StringConcatenate(Of T)(ByVal source As IEnumerable(Of T), _  \n    ByVal func As Func(Of T, String), ByVal separator As String) As String  \n        Dim sb As StringBuilder = New StringBuilder()  \n        For Each item As T In source  \n            sb.Append(func(item)).Append(separator)  \n        Next  \n        Return sb.ToString()  \n    End Function  \n\n    &#39; Following function is required because VB does not support short circuit evaluation  \n    Private Function GetStyleOfParagraph(ByVal styleNode As XElement, _  \n                                         ByVal defaultStyle As String) As String  \n        If (styleNode Is Nothing) Then  \n            Return defaultStyle  \n        Else  \n            Return styleNode.@w:val  \n        End If  \n    End Function  \n\n    Sub Main()  \n        Dim fileName = &quot;SampleDoc.docx&quot;  \n\n        Dim documentRelationshipType = _  \n          &quot;http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument&quot;  \n        Dim stylesRelationshipType = _  \n          &quot;http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles&quot;  \n        Dim wordmlNamespace = _  \n          &quot;http://schemas.openxmlformats.org/wordprocessingml/2006/main&quot;  \n\n        Dim xDoc As XDocument = Nothing  \n        Dim styleDoc As XDocument = Nothing  \n        Using wdPackage As Package = Package.Open(fileName, FileMode.Open, FileAccess.Read)  \n            Dim docPackageRelationship As PackageRelationship = _  \n              wdPackage.GetRelationshipsByType(documentRelationshipType).FirstOrDefault()  \n            If (docPackageRelationship IsNot Nothing) Then  \n                Dim documentUri As Uri = PackUriHelper.ResolvePartUri(New Uri(&quot;/&quot;, UriKind.Relative), _  \n                  docPackageRelationship.TargetUri)  \n                Dim documentPart As PackagePart = wdPackage.GetPart(documentUri)  \n\n                &#39;  Load the document XML in the part into an XDocument instance.  \n                xDoc = XDocument.Load(XmlReader.Create(documentPart.GetStream()))  \n\n                &#39;  Find the styles part. There will only be one.  \n                Dim styleRelation As PackageRelationship = _  \n                  documentPart.GetRelationshipsByType(stylesRelationshipType).FirstOrDefault()  \n                If (styleRelation IsNot Nothing) Then  \n                    Dim styleUri As Uri = _  \n                      PackUriHelper.ResolvePartUri(documentUri, styleRelation.TargetUri)  \n                    Dim stylePart As PackagePart = wdPackage.GetPart(styleUri)  \n\n                    &#39;  Load the style XML in the part into an XDocument instance.  \n                    styleDoc = XDocument.Load(XmlReader.Create(stylePart.GetStream()))  \n                End If  \n            End If  \n        End Using  \n\n        Dim defaultStyle As String = _  \n            ( _  \n                From style In styleDoc.Root.&lt;w:style&gt; _  \n                Where style.@w:type = &quot;paragraph&quot; And _  \n                      style.@w:default = &quot;1&quot; _  \n                Select style _  \n            ).First().@w:styleId  \n\n        &#39; Find all paragraphs in the document.  \n        Dim paragraphs = _  \n            From para In xDoc.Root.&lt;w:body&gt;...&lt;w:p&gt; _  \n        Let styleNode As XElement = para.&lt;w:pPr&gt;.&lt;w:pStyle&gt;.FirstOrDefault _  \n        Select New With { _  \n            .ParagraphNode = para, _  \n            .StyleName = GetStyleOfParagraph(styleNode, defaultStyle) _  \n        }  \n\n        &#39; Retrieve the text of each paragraph.  \n        Dim paraWithText = _  \n            From para In paragraphs _  \n            Select New With { _  \n                .ParagraphNode = para.ParagraphNode, _  \n                .StyleName = para.StyleName, _  \n                .Text = para.ParagraphNode.&lt;w:r&gt;.&lt;w:t&gt;.StringConcatenate(Function(e) CStr(e)) _  \n            }  \n\n        For Each p In paraWithText  \n            Console.WriteLine(&quot;StyleName:{0} &gt;{1}&lt;&quot;, p.StyleName, p.Text)  \n        Next  \n\n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output when applied to the document described in <a href=\"creating-the-source-office-open-xml-document\" data-linktype=\"relative-path\">Creating the Source Office Open XML Document (Visual Basic)</a>.  </p>\n<pre class=\"loading\"><code>StyleName:Heading1 &gt;Parsing WordprocessingML with LINQ to XML&lt;  \nStyleName:Normal &gt;&lt;  \nStyleName:Normal &gt;The following example prints to the console.&lt;  \nStyleName:Normal &gt;&lt;  \nStyleName:Code &gt;Imports System&lt;  \nStyleName:Code &gt;&lt;  \nStyleName:Code &gt;Class Program&lt;  \nStyleName:Code &gt;    Public Shared  Sub Main(ByVal args() As String)&lt;  \nStyleName:Code &gt;        Console.WriteLine(&quot;Hello World&quot;)&lt;  \nStyleName:Code &gt;   End Sub&lt;  \nStyleName:Code &gt;End Class&lt;  \nStyleName:Normal &gt;&lt;  \nStyleName:Normal &gt;This example produces the following output:&lt;  \nStyleName:Normal &gt;&lt;  \nStyleName:Code &gt;Hello World&lt;  \n</code></pre><p> Note that this refactoring is a variant of refactoring into a pure function. The next topic will introduce the idea of factoring into pure functions in more detail.  </p>\n<h2 id=\"next-steps\">Next Steps</h2>\n<p> The next example shows how to refactor this code in another way, by using pure functions:  </p>\n<ul>\n<li><a href=\"refactoring-using-a-pure-function\" data-linktype=\"relative-path\">Refactoring Using a Pure Function (Visual Basic)</a>  </li>\n</ul>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"tutorial-manipulating-content-in-a-wordprocessingml-document\" data-linktype=\"relative-path\">Tutorial: Manipulating Content in a WordprocessingML Document (Visual Basic)</a><br> <a href=\"refactoring-into-pure-functions\" data-linktype=\"relative-path\">Refactoring Into Pure Functions (Visual Basic)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.tgt_pltfrm\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"d87ae99a-cfa9-4a31-a5e4-9d6437be6810\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/linq/refactoring-using-an-extension-method.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/linq/refactoring-using-an-extension-method.md\">\r\n<meta name=\"document_id\" content=\"b191ab61-5837-877a-4864-95ecb97d73b5\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Refactoring Using an Extension Method (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.tgt_pltfrm":"","ms.assetid":"d87ae99a-cfa9-4a31-a5e4-9d6437be6810","caps.latest.revision":3,"ms.topic":"article","dev_langs":["vb"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/linq/refactoring-using-an-extension-method.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/linq/refactoring-using-an-extension-method.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/concepts/linq/refactoring-using-an-extension-method.md","document_id":"b191ab61-5837-877a-4864-95ecb97d73b5","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/programming-guide/concepts/linq/refactoring-using-an-extension-method","toc_asset_id":"articles/visual-basic/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"Refactoring Using an Extension Method (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":1012,"_op_rawTitle":"<h1 id=\"refactoring-using-an-extension-method-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/concepts/linq/refactoring-using-an-extension-method.md\" sourcestartlinenumber=\"20\" sourceendlinenumber=\"20\">Refactoring Using an Extension Method (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/programming-guide/concepts/linq/refactoring-using-an-extension-method","fileRelativePath":"articles/visual-basic/programming-guide/concepts/linq/refactoring-using-an-extension-method.html"},"themesRelativePathToOutputRoot":"_themes/"}