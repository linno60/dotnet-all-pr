{"content":"<div><div class=\"content\">\n<p>Annotations can be used to facilitate transforms of an XML tree.  </p>\n<p> Some XML documents are &quot;document centric with mixed content.&quot; With such documents, you don&#39;t necessarily know the shape of child nodes of an element. For instance, a node that contains text may look like this:  </p>\n<pre class=\"loading\"><code class=\"lang-xml\">&lt;text&gt;A phrase with &lt;b&gt;bold&lt;/b&gt; and &lt;i&gt;italic&lt;/i&gt; text.&lt;/text&gt;  \n</code></pre><p> For any given text node, there may be any number of child <code>&lt;b&gt;</code> and <code>&lt;i&gt;</code> elements. This approach extends to a number of other situations: such as, pages that can contain a variety of child elements, such as regular paragraphs, bulleted paragraphs, and bitmaps. Cells in a table may contain text, drop down lists, or bitmaps. One of the primary characteristics of document centric XML is that you do not know which child element any particular element will have.  </p>\n<p> If you want to transform elements in a tree where you don&#39;t necessarily know much about the children of the elements that you want to transform, then this approach that uses annotations is an effective approach.  </p>\n<p> The summary of the approach is:  </p>\n<ul>\n<li><p>First, annotate elements in the tree with a replacement element.  </p>\n</li>\n<li><p>Second, iterate through the entire tree, creating a new tree where you replace each element with its annotation. This example implements the iteration and creation of the new tree in a function named <code>XForm</code>.  </p>\n<p>In detail, the approach consists of:  </p>\n</li>\n<li><p>Execute one or more LINQ to XML queries that return the set of elements that you want to transform from one shape to another. For each element in the query, add a new <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> object as an annotation to the element. This new element will replace the annotated element in the new, transformed tree. This is simple code to write, as demonstrated by the example.  </p>\n</li>\n<li><p>The new element that is added as an annotation can contain new child nodes; it can form a sub-tree with any desired shape.  </p>\n</li>\n<li><p>There is a special rule: If a child node of the new element is in a different namespace, a namespace that is made up for this purpose (in this example, the namespace is <code>http://www.microsoft.com/LinqToXmlTransform/2007</code>), then that child element is not copied to the new tree. Instead, if the namespace is the above mentioned special namespace, and the local name of the element is <code>ApplyTransforms</code>, then the child nodes of the element in the source tree are iterated, and copied to the new tree (with the exception that annotated child elements are themselves transformed according to these rules).  </p>\n</li>\n<li><p>This is somewhat analogous to the specification of transforms in XSL. The query that selects a set of nodes is analogous to the XPath expression for a template. The code to create the new <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> that is saved as an annotation is analogous to the sequence constructor in XSL, and the <code>ApplyTransforms</code> element is analogous in function to the <code>xsl:apply-templates</code> element in XSL.  </p>\n</li>\n<li><p>One advantage to taking this approach - as you formulate queries, you are always writing queries on the unmodified source tree. You need not worry about how modifications to the tree affect the queries that you are writing.  </p>\n</li>\n</ul>\n<h2 id=\"transforming-a-tree\">Transforming a Tree</h2>\n<p> This first example renames all <code>Paragraph</code> nodes to <code>para</code>.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Imports &lt;xmlns:xf=&quot;http://www.microsoft.com/LinqToXmlTransform/2007&quot;&gt;  \n\nModule Module1  \n    Dim at As XName = GetXmlNamespace(xf) + &quot;ApplyTransforms&quot;  \n\n    Sub Main()  \n        Dim root As XElement = _  \n            &lt;Root&gt;  \n                &lt;Paragraph&gt;This is a sentence with &lt;b&gt;bold&lt;/b&gt; and &lt;i&gt;italic&lt;/i&gt; text.&lt;/Paragraph&gt;  \n                &lt;Paragraph&gt;More text.&lt;/Paragraph&gt;  \n            &lt;/Root&gt;  \n\n        &#39; Replace Paragraph with p.  \n        For Each el In root...&lt;Paragraph&gt;  \n            &#39; same idea as xsl:apply-templates  \n            el.AddAnnotation( _  \n                &lt;para&gt;  \n                    &lt;&lt;%= at %&gt;&gt;&lt;/&gt;  \n                &lt;/para&gt;)  \n        Next  \n\n        &#39; The XForm function, shown later in this topic, accomplishes the transform  \n        Dim newRoot As XElement = XForm(root)  \n        Console.WriteLine(newRoot)  \n    End Sub  \nEnd Module  \n</code></pre><p> This example produces the following output:  </p>\n<pre class=\"loading\"><code class=\"lang-xml\">&lt;Root&gt;  \n  &lt;para&gt;This is a sentence with &lt;b&gt;bold&lt;/b&gt; and &lt;i&gt;italic&lt;/i&gt; text.&lt;/para&gt;  \n  &lt;para&gt;More text.&lt;/para&gt;  \n&lt;/Root&gt;  \n</code></pre><h2 id=\"a-more-complicated-transform\">A More Complicated Transform</h2>\n<p> The following example queries the tree and calculates the average and sum of the <code>Data</code> elements, and adds them as new elements to the tree.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Imports &lt;xmlns:xf=&quot;http://www.microsoft.com/LinqToXmlTransform/2007&quot;&gt;  \n\nModule Module1  \n    Dim at As XName = GetXmlNamespace(xf) + &quot;ApplyTransforms&quot;  \n\n    Sub Main()  \n        Dim data As XElement = _  \n            &lt;Root&gt;  \n                &lt;Data&gt;20&lt;/Data&gt;  \n                &lt;Data&gt;10&lt;/Data&gt;  \n                &lt;Data&gt;3&lt;/Data&gt;  \n            &lt;/Root&gt;  \n\n        &#39; While adding annotations, you can query the source tree all you want,  \n        &#39; as the tree is not mutated while annotating.  \n        data.AddAnnotation( _  \n            &lt;Root&gt;  \n                &lt;&lt;%= at %&gt;/&gt;  \n                &lt;Average&gt;  \n                    &lt;%= _  \n                        String.Format(&quot;{0:F4}&quot;, _  \n                        data.Elements(&quot;Data&quot;) _  \n                        .Select(Function(z) CDec(z)).Average()) _  \n                    %&gt;  \n                &lt;/Average&gt;  \n                &lt;Sum&gt;  \n                    &lt;%= _  \n                        data.Elements(&quot;Data&quot;).Select(Function(z) CInt(z)).Sum() _  \n                    %&gt;  \n                &lt;/Sum&gt;  \n            &lt;/Root&gt; _  \n        )  \n\n        Console.WriteLine(&quot;Before Transform&quot;)  \n        Console.WriteLine(&quot;----------------&quot;)  \n        Console.WriteLine(data)  \n        Console.WriteLine(vbNewLine)  \n\n        &#39; The XForm function, shown later in this topic, accomplishes the transform  \n        Dim newData As XElement = XForm(data)  \n\n        Console.WriteLine(&quot;After Transform&quot;)  \n        Console.WriteLine(&quot;----------------&quot;)  \n        Console.WriteLine(newData)  \n    End Sub  \nEnd Module   \n</code></pre><p> This example produces the following output:  </p>\n<pre class=\"loading\"><code>Before Transform  \n----------------  \n&lt;Root&gt;  \n  &lt;Data&gt;20&lt;/Data&gt;  \n  &lt;Data&gt;10&lt;/Data&gt;  \n  &lt;Data&gt;3&lt;/Data&gt;  \n&lt;/Root&gt;  \n\nAfter Transform  \n----------------  \n&lt;Root&gt;  \n  &lt;Data&gt;20&lt;/Data&gt;  \n  &lt;Data&gt;10&lt;/Data&gt;  \n  &lt;Data&gt;3&lt;/Data&gt;  \n  &lt;Average&gt;11.0000&lt;/Average&gt;  \n  &lt;Sum&gt;33&lt;/Sum&gt;  \n&lt;/Root&gt;  \n</code></pre><h2 id=\"effecting-the-transform\">Effecting the Transform</h2>\n<p> A small function, <code>XForm</code>, creates a new transformed tree from the original, annotated tree.  </p>\n<ul>\n<li>The pseudo code for the function is quite simple:  </li>\n</ul>\n<pre class=\"loading\"><code>The function takes an XElement as an argument and returns an XElement.   \nIf an element has an XElement annotation, then  \n    Return a new XElement  \n        The name of the new XElement is the annotation element&#39;s name.  \n        All attributes are copied from the annotation to the new node.  \n        All child nodes are copied from the annotation, with the  \n            exception that the special node xf:ApplyTransforms is  \n            recognized, and the source element&#39;s child nodes are  \n            iterated. If the source child node is not an XElement, it  \n            is copied to the new tree. If the source child is an  \n            XElement, then it is transformed by calling this function  \n            recursively.  \nIf an element is not annotated  \n    Return a new XElement  \n        The name of the new XElement is the source element&#39;s name  \n        All attributes are copied from the source element to the  \n            destination&#39;s element.  \n        All child nodes are copied from the source element.  \n        If the source child node is not an XElement, it is copied to  \n            the new tree. If the source child is an XElement, then it  \n            is transformed by calling this function recursively.  \n</code></pre><p> Following is the implementation of this function:  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">&#39; Build a transformed XML tree per the annotations.  \nFunction XForm(ByVal source As XElement) As XElement  \n    If source.Annotation(Of XElement)() IsNot Nothing Then  \n        Dim anno As XElement = source.Annotation(Of XElement)()  \n        Return _  \n            &lt;&lt;%= anno.Name.ToString() %&gt;&gt;  \n                &lt;%= anno.Attributes() %&gt;  \n                &lt;%= anno.Nodes().Select(Function(n As XNode) _  \n                    GetSubNodes(n, source)) %&gt;  \n            &lt;/&gt;  \n    Else  \n        Return _  \n            &lt;&lt;%= source.Name %&gt;&gt;  \n                &lt;%= source.Attributes() %&gt;  \n                &lt;%= source.Nodes().Select(Function(n) GetExpandedNodes(n)) %&gt;  \n            &lt;/&gt;  \n    End If  \nEnd Function  \n\nPrivate Function GetSubNodes(ByVal n As XNode, ByVal s As XElement) As Object  \n    Dim annoEl As XElement = TryCast(n, XElement)  \n    If annoEl IsNot Nothing Then  \n        If annoEl.Name = at Then  \n            Return s.Nodes().Select(Function(n2 As XNode) GetExpandedNodes(n2))  \n        End If  \n    End If  \n    Return n  \nEnd Function  \n\nPrivate Function GetExpandedNodes(ByVal n2 As XNode) As XNode  \n    Dim e2 As XElement = TryCast(n2, XElement)  \n    If e2 Is Nothing Then  \n        Return n2  \n    Else  \n        Return XForm(e2)  \n    End If  \nEnd Function  \n</code></pre><h2 id=\"complete-example\">Complete Example</h2>\n<p> The following code is a complete example that includes the <code>XForm</code> function. It includes a few of the typical uses of this type of transform:  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Imports System  \nImports System.Collections.Generic  \nImports System.Linq  \nImports System.Text  \nImports System.Xml  \nImports System.Xml.Linq  \n\nImports &lt;xmlns:xf=&quot;http://www.microsoft.com/LinqToXmlTransform/2007&quot;&gt;  \n\nModule Module1  \n    Dim at As XName = GetXmlNamespace(xf) + &quot;ApplyTransforms&quot;  \n\n    &#39; Build a transformed XML tree per the annotations.  \n    Function XForm(ByVal source As XElement) As XElement  \n        If source.Annotation(Of XElement)() IsNot Nothing Then  \n            Dim anno As XElement = source.Annotation(Of XElement)()  \n            Return _  \n                &lt;&lt;%= anno.Name.ToString() %&gt;&gt;  \n                    &lt;%= anno.Attributes() %&gt;  \n                    &lt;%= anno.Nodes().Select(Function(n As XNode) _  \n                        GetSubNodes(n, source)) %&gt;  \n                &lt;/&gt;  \n        Else  \n            Return _  \n                &lt;&lt;%= source.Name %&gt;&gt;  \n                    &lt;%= source.Attributes() %&gt;  \n                    &lt;%= source.Nodes().Select(Function(n) GetExpandedNodes(n)) %&gt;  \n                &lt;/&gt;  \n        End If  \n    End Function  \n\n    Private Function GetSubNodes(ByVal n As XNode, ByVal s As XElement) As Object  \n        Dim annoEl As XElement = TryCast(n, XElement)  \n        If annoEl IsNot Nothing Then  \n            If annoEl.Name = at Then  \n                Return s.Nodes().Select(Function(n2 As XNode) GetExpandedNodes(n2))  \n            End If  \n        End If  \n        Return n  \n    End Function  \n\n    Private Function GetExpandedNodes(ByVal n2 As XNode) As XNode  \n        Dim e2 As XElement = TryCast(n2, XElement)  \n        If e2 Is Nothing Then  \n            Return n2  \n        Else  \n            Return XForm(e2)  \n        End If  \n    End Function  \n\n    Sub Main()  \n        Dim root As XElement = _  \n&lt;Root Att1=&#39;123&#39;&gt;  \n    &lt;!--A comment--&gt;  \n    &lt;Child&gt;1&lt;/Child&gt;  \n    &lt;Child&gt;2&lt;/Child&gt;  \n    &lt;Other&gt;  \n        &lt;GC&gt;3&lt;/GC&gt;  \n        &lt;GC&gt;4&lt;/GC&gt;  \n    &lt;/Other&gt;  \n    &lt;SomeMixedContent&gt;This is &lt;i&gt;an&lt;/i&gt; element that &lt;b&gt;has&lt;/b&gt; some mixed content&lt;/SomeMixedContent&gt;  \n    &lt;AnUnchangedElement&gt;42&lt;/AnUnchangedElement&gt;  \n&lt;/Root&gt;  \n\n        &#39; Each of the following serves the same semantic purpose as  \n        &#39; XSLT templates and sequence constructors.  \n\n        &#39; Replace Child with NewChild.  \n        For Each el In root.&lt;Child&gt;  \n            el.AddAnnotation(&lt;NewChild&gt;&lt;%= CStr(el) %&gt;&lt;/NewChild&gt;)  \n        Next  \n\n        &#39; Replace first GC with GrandChild, add an attribute.  \n        For Each el In root...&lt;GC&gt;.Take(1)  \n            el.AddAnnotation(&lt;GrandChild ANewAttribute=&#39;999&#39;&gt;&lt;%= CStr(el) %&gt;&lt;/GrandChild&gt;)  \n        Next  \n\n        &#39; Replace Other with NewOther, add new child elements around original content.  \n        For Each el In root.&lt;Other&gt;  \n            el.AddAnnotation( _  \n                &lt;NewOther&gt;  \n                    &lt;MyNewChild&gt;1&lt;/MyNewChild&gt;  \n                    &lt;&lt;%= at %&gt;&gt;&lt;/&gt;  \n                    &lt;ChildThatComesAfter/&gt;  \n                &lt;/NewOther&gt;)  \n        Next  \n\n        &#39; Change name of element that has mixed content.  \n        root...&lt;SomeMixedContent&gt;(0).AddAnnotation( _  \n                &lt;MixedContent&gt;&lt;&lt;%= at %&gt;&gt;&lt;/&gt;&lt;/MixedContent&gt;)  \n\n        &#39; Replace &lt;b&gt; with &lt;Bold&gt;.  \n        For Each el In root...&lt;b&gt;  \n            el.AddAnnotation(&lt;Bold&gt;&lt;&lt;%= at %&gt;&gt;&lt;/&gt;&lt;/Bold&gt;)  \n        Next  \n\n        &#39; Replace &lt;i&gt; with &lt;Italic&gt;.  \n        For Each el In root...&lt;i&gt;  \n            el.AddAnnotation(&lt;Italic&gt;&lt;&lt;%= at %&gt;&gt;&lt;/&gt;&lt;/Italic&gt;)  \n        Next  \n\n        Console.WriteLine(&quot;Before Transform&quot;)  \n        Console.WriteLine(&quot;----------------&quot;)  \n        Console.WriteLine(root)  \n        Console.WriteLine(vbNewLine)  \n        Dim newRoot As XElement = XForm(root)  \n\n        Console.WriteLine(&quot;After Transform&quot;)  \n        Console.WriteLine(&quot;----------------&quot;)  \n        Console.WriteLine(newRoot)  \n    End Sub  \nEnd Module   \n</code></pre><p> This example produces the following output:  </p>\n<pre class=\"loading\"><code>Before Transform  \n----------------  \n&lt;Root Att1=&quot;123&quot;&gt;  \n  &lt;!--A comment--&gt;  \n  &lt;Child&gt;1&lt;/Child&gt;  \n  &lt;Child&gt;2&lt;/Child&gt;  \n  &lt;Other&gt;  \n    &lt;GC&gt;3&lt;/GC&gt;  \n    &lt;GC&gt;4&lt;/GC&gt;  \n  &lt;/Other&gt;  \n  &lt;SomeMixedContent&gt;This is &lt;i&gt;an&lt;/i&gt; element that &lt;b&gt;has&lt;/b&gt; some mixed content&lt;/SomeMixedContent&gt;  \n  &lt;AnUnchangedElement&gt;42&lt;/AnUnchangedElement&gt;  \n&lt;/Root&gt;  \n\nAfter Transform  \n----------------  \n&lt;Root Att1=&quot;123&quot;&gt;  \n  &lt;!--A comment--&gt;  \n  &lt;NewChild&gt;1&lt;/NewChild&gt;  \n  &lt;NewChild&gt;2&lt;/NewChild&gt;  \n  &lt;NewOther&gt;  \n    &lt;MyNewChild&gt;1&lt;/MyNewChild&gt;  \n    &lt;GrandChild ANewAttribute=&quot;999&quot;&gt;3&lt;/GrandChild&gt;  \n    &lt;GC&gt;4&lt;/GC&gt;  \n    &lt;ChildThatComesAfter /&gt;  \n  &lt;/NewOther&gt;  \n  &lt;MixedContent&gt;This is &lt;Italic&gt;an&lt;/Italic&gt; element that &lt;Bold&gt;has&lt;/Bold&gt; some mixed content&lt;/MixedContent&gt;  \n  &lt;AnUnchangedElement&gt;42&lt;/AnUnchangedElement&gt;  \n&lt;/Root&gt;  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"advanced-linq-to-xml-programming\" data-linktype=\"relative-path\">Advanced LINQ to XML Programming (Visual Basic)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet/toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.tgt_pltfrm\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"08e91fa2-dac2-4463-9ef1-87b1ac3fa890\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/d3fdf46c825d04d29da3e3fafac667eacf01e02e/docs/visual-basic/programming-guide/concepts/linq/how-to-use-annotation-trees-to-transform-linq-to-xml-trees-in-an-xslt-style.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/linq/how-to-use-annotation-trees-to-transform-linq-to-xml-trees-in-an-xslt-style.md\">\r\n<meta name=\"document_id\" content=\"35f60550-3a67-4d6b-b8f4-bcfe9b788219\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"How to: Use Annotations to Transform LINQ to XML Trees in an XSLT Style (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.tgt_pltfrm":"","ms.assetid":"08e91fa2-dac2-4463-9ef1-87b1ac3fa890","caps.latest.revision":3,"ms.topic":"article","dev_langs":["vb"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"tompratt-AQ","author_email":"v-thprat@microsoft.com","committer_name":"Phillip Carter","comitter_email":"phillip.carter@outlook.com","message":"Fixed instances of e.g. and i.e. (#1701)","commit_sha":"d3fdf46c825d04d29da3e3fafac667eacf01e02e","commit_date":"2017-03-10 09:04:31 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/tompratt-AQ","display_name":"tompratt-AQ","id":"26311438"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/d3fdf46c825d04d29da3e3fafac667eacf01e02e/docs/visual-basic/programming-guide/concepts/linq/how-to-use-annotation-trees-to-transform-linq-to-xml-trees-in-an-xslt-style.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/linq/how-to-use-annotation-trees-to-transform-linq-to-xml-trees-in-an-xslt-style.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/concepts/linq/how-to-use-annotation-trees-to-transform-linq-to-xml-trees-in-an-xslt-style.md","document_id":"35f60550-3a67-4d6b-b8f4-bcfe9b788219","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/concepts/linq/how-to-use-annotation-trees-to-transform-linq-to-xml-trees-in-an-xslt-style","toc_asset_id":"articles/visual-basic/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Use Annotations to Transform LINQ to XML Trees in an XSLT Style (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":1543,"_op_rawTitle":"<h1 id=\"how-to-use-annotations-to-transform-linq-to-xml-trees-in-an-xslt-style-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/concepts/linq/how-to-use-annotation-trees-to-transform-linq-to-xml-trees-in-an-xslt-style.md\" sourcestartlinenumber=\"25\" sourceendlinenumber=\"25\">How to: Use Annotations to Transform LINQ to XML Trees in an XSLT Style (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/concepts/linq/how-to-use-annotation-trees-to-transform-linq-to-xml-trees-in-an-xslt-style","fileRelativePath":"articles/visual-basic/programming-guide/concepts/linq/how-to-use-annotation-trees-to-transform-linq-to-xml-trees-in-an-xslt-style.html"},"themesRelativePathToOutputRoot":"_themes/"}