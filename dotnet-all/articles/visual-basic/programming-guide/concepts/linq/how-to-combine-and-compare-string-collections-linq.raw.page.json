{"content":"<div><div class=\"content\">\n<p>This example shows how to merge files that contain lines of text and then sort the results. Specifically, it shows how to perform a simple concatenation, a union, and an intersection on the two sets of text lines.  </p>\n<h3 id=\"to-set-up-the-project-and-the-text-files\">To set up the project and the text files</h3>\n<ol>\n<li><p>Copy these names into a text file that is named names1.txt and save it in your project folder:  </p>\n<pre class=\"loading\"><code>Bankov, Peter  \nHolm, Michael  \nGarcia, Hugo  \nPotra, Cristina  \nNoriega, Fabricio  \nAw, Kam Foo  \nBeebe, Ann  \nToyoshima, Tim  \nGuy, Wey Yuan  \nGarcia, Debra  \n</code></pre></li>\n<li><p>Copy these names into a text file that is named names2.txt and save it in your project folder. Note that the two files have some names in common.  </p>\n<pre class=\"loading\"><code>Liu, Jinghao  \nBankov, Peter  \nHolm, Michael  \nGarcia, Hugo  \nBeebe, Ann  \nGilchrist, Beth  \nMyrcha, Jacek  \nGiakoumakis, Leo  \nMcLin, Nkenge  \nEl Yassir, Mehdi  \n</code></pre></li>\n</ol>\n<h2 id=\"example\">Example</h2>\n<pre class=\"loading\"><code class=\"lang-vb\">Class ConcatenateStrings  \n    Shared Sub Main()  \n\n        &#39; Create the IEnumerable data sources.  \n        Dim fileA As String() = System.IO.File.ReadAllLines(&quot;../../../names1.txt&quot;)  \n        Dim fileB As String() = System.IO.File.ReadAllLines(&quot;../../../names2.txt&quot;)  \n\n        &#39; Simple concatenation and sort.  \n        Dim concatQuery = fileA.Concat(fileB).OrderBy(Function(name) name)  \n\n        &#39; Pass the query variable to another function for execution  \n        OutputQueryResults(concatQuery, &quot;Simple concatenation and sort. Duplicates are preserved:&quot;)  \n\n        &#39; New query. Concatenate files and remove duplicates  \n        Dim uniqueNamesQuery = fileA.Union(fileB).OrderBy(Function(name) name)  \n        OutputQueryResults(uniqueNamesQuery, &quot;Union removes duplicate names:&quot;)  \n\n        &#39; New query. Find the names that occur in both files.  \n        Dim commonNamesQuery = fileA.Intersect(fileB)  \n        OutputQueryResults(commonNamesQuery, &quot;Merge based on intersect: &quot;)  \n\n        &#39; New query in three steps for better readability   \n        &#39; First filter each list separately  \n\n        Dim nameToSearch As String = &quot;Garcia&quot;  \n        Dim mergeQueryA As IEnumerable(Of String) = From name In fileA   \n                          Let n = name.Split(New Char() {&quot;,&quot;})   \n                          Where n(0) = nameToSearch   \n                          Select name  \n\n        Dim mergeQueryB = From name In fileB   \n                          Let n = name.Split(New Char() {&quot;,&quot;})   \n                          Where n(0) = nameToSearch   \n                          Select name  \n\n        &#39; Create a new query to concatenate and sort results. Duplicates are removed in Union.  \n        &#39; Note that none of the queries actually executed until the call to OutputQueryResults.  \n        Dim mergeSortQuery = mergeQueryA.Union(mergeQueryB).OrderBy(Function(str) str)  \n\n        &#39; Now execute mergeSortQuery  \n        OutputQueryResults(mergeSortQuery, &quot;Concat based on partial name match &quot;&quot;&quot; &amp; nameToSearch &amp; &quot;&quot;&quot; from each list:&quot;)  \n\n        &#39; Keep console window open in debug mode.  \n        Console.WriteLine(&quot;Press any key to exit.&quot;)  \n        Console.ReadKey()  \n\n    End Sub  \n\n    Shared Sub OutputQueryResults(ByVal query As IEnumerable(Of String), ByVal message As String)  \n\n        Console.WriteLine(System.Environment.NewLine &amp; message)  \n        For Each item As String In query  \n            Console.WriteLine(item)  \n        Next  \n        Console.WriteLine(query.Count &amp; &quot; total names in list&quot;)  \n\n    End Sub  \nEnd Class  \n&#39; Output:  \n\n&#39; Simple concatenation and sort. Duplicates are preserved:  \n&#39; Aw, Kam Foo  \n&#39; Bankov, Peter  \n&#39; Bankov, Peter  \n&#39; Beebe, Ann  \n&#39; Beebe, Ann  \n&#39; El Yassir, Mehdi  \n&#39; Garcia, Debra  \n&#39; Garcia, Hugo  \n&#39; Garcia, Hugo  \n&#39; Giakoumakis, Leo  \n&#39; Gilchrist, Beth  \n&#39; Guy, Wey Yuan  \n&#39; Holm, Michael  \n&#39; Holm, Michael  \n&#39; Liu, Jinghao  \n&#39; McLin, Nkenge  \n&#39; Myrcha, Jacek  \n&#39; Noriega, Fabricio  \n&#39; Potra, Cristina  \n&#39; Toyoshima, Tim  \n&#39; 20 total names in list  \n\n&#39; Union removes duplicate names:  \n&#39; Aw, Kam Foo  \n&#39; Bankov, Peter  \n&#39; Beebe, Ann  \n&#39; El Yassir, Mehdi  \n&#39; Garcia, Debra  \n&#39; Garcia, Hugo  \n&#39; Giakoumakis, Leo  \n&#39; Gilchrist, Beth  \n&#39; Guy, Wey Yuan  \n&#39; Holm, Michael  \n&#39; Liu, Jinghao  \n&#39; McLin, Nkenge  \n&#39; Myrcha, Jacek  \n&#39; Noriega, Fabricio  \n&#39; Potra, Cristina  \n&#39; Toyoshima, Tim  \n&#39; 16 total names in list  \n\n&#39; Merge based on intersect:  \n&#39; Bankov, Peter  \n&#39; Holm, Michael  \n&#39; Garcia, Hugo  \n&#39; Beebe, Ann  \n&#39; 4 total names in list  \n\n&#39; Concat based on partial name match &quot;Garcia&quot; from each list:  \n&#39; Garcia, Debra  \n&#39; Garcia, Hugo  \n&#39; 2 total names in list  \n</code></pre><h2 id=\"compiling-the-code\">Compiling the Code</h2>\n<p> Create a project that targets the .NET Framework version 3.5 or higher with a reference to System.Core.dll and a <code>Imports</code> statement for the System.Linq namespace.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"linq-and-strings\" data-linktype=\"relative-path\">LINQ and Strings (Visual Basic)</a><br> <a href=\"linq-and-file-directories\" data-linktype=\"relative-path\">LINQ and File Directories (Visual Basic)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.tgt_pltfrm\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"243cfafc-9eaa-4354-a9df-d329f1d39913\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/linq/how-to-combine-and-compare-string-collections-linq.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/linq/how-to-combine-and-compare-string-collections-linq.md\">\r\n<meta name=\"document_id\" content=\"4382d96f-8828-1b4f-ba3f-9d60490f615b\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc1.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"How to: Combine and Compare String Collections (LINQ) (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.tgt_pltfrm":"","ms.assetid":"243cfafc-9eaa-4354-a9df-d329f1d39913","caps.latest.revision":3,"ms.topic":"article","dev_langs":["vb"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/linq/how-to-combine-and-compare-string-collections-linq.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/linq/how-to-combine-and-compare-string-collections-linq.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/concepts/linq/how-to-combine-and-compare-string-collections-linq.md","document_id":"4382d96f-8828-1b4f-ba3f-9d60490f615b","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/concepts/linq/how-to-combine-and-compare-string-collections-linq","toc_asset_id":"articles/visual-basic/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Combine and Compare String Collections (LINQ) (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":620,"_op_rawTitle":"<h1 id=\"how-to-combine-and-compare-string-collections-linq-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/concepts/linq/how-to-combine-and-compare-string-collections-linq.md\" sourcestartlinenumber=\"25\" sourceendlinenumber=\"25\">How to: Combine and Compare String Collections (LINQ) (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/concepts/linq/how-to-combine-and-compare-string-collections-linq","fileRelativePath":"articles/visual-basic/programming-guide/concepts/linq/how-to-combine-and-compare-string-collections-linq.html"},"themesRelativePathToOutputRoot":"_themes/"}