{"content":"<div><div class=\"content\">\n<p>Sometimes you have to transform large XML files, and write your application so that the memory footprint of the application is predictable. If you try to populate an XML tree with a very large XML file, your memory usage will be proportional to the size of the file (that is, excessive). Therefore, you should use a streaming technique instead.  </p>\n<p> Streaming techniques are best applied in situations where you need to process the source document only once, and you can process the elements in document order. Certain standard query operators, such as <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb343617(v=vs.110).aspx\" data-linktype=\"external\">OrderBy</a>, iterate their source, collect all of the data, sort it, and then finally yield the first item in the sequence. Note that if you use a query operator that materializes its source before yielding the first item, you will not retain a small memory footprint for your application.  </p>\n<p> Even if you use the technique described in <a href=\"how-to-stream-xml-fragments-with-access-to-header-information\" data-linktype=\"relative-path\">How to: Stream XML Fragments with Access to Header Information (Visual Basic)</a>, if you try to assemble an XML tree that contains the transformed document, memory usage will be too great.  </p>\n<p> There are two main approaches. One approach is to use the deferred processing characteristics of <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a>. Another approach is to create an <a class=\"xref\" href=\"../../../../../api/system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>, and use the capabilities of LINQ to XML to write elements to an <a class=\"xref\" href=\"../../../../../api/system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>. This topic demonstrates both approaches.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following example builds on the example in <a href=\"how-to-stream-xml-fragments-with-access-to-header-information\" data-linktype=\"relative-path\">How to: Stream XML Fragments with Access to Header Information (Visual Basic)</a>.  </p>\n<p> This example uses the deferred execution capabilities of <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> to stream the output. This example can transform a very large document while maintaining a small memory footprint.  </p>\n<p> Note that the custom axis (<code>StreamCustomerItem</code>) is specifically written so that it expects a document that has <code>Customer</code>, <code>Name</code>, and <code>Item</code> elements, and that those elements will be arranged as in the following Source.xml document. A more robust implementation, however, would be prepared to parse an invalid document.  </p>\n<p> The following is the source document, Source.xml:  </p>\n<pre class=\"loading\"><code class=\"lang-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;   \n&lt;Root&gt;  \n  &lt;Customer&gt;  \n    &lt;Name&gt;A. Datum Corporation&lt;/Name&gt;  \n    &lt;Item&gt;  \n      &lt;Key&gt;0001&lt;/Key&gt;  \n    &lt;/Item&gt;  \n    &lt;Item&gt;  \n      &lt;Key&gt;0002&lt;/Key&gt;  \n    &lt;/Item&gt;  \n    &lt;Item&gt;  \n      &lt;Key&gt;0003&lt;/Key&gt;  \n    &lt;/Item&gt;  \n    &lt;Item&gt;  \n      &lt;Key&gt;0004&lt;/Key&gt;  \n    &lt;/Item&gt;  \n  &lt;/Customer&gt;  \n  &lt;Customer&gt;  \n    &lt;Name&gt;Fabrikam, Inc.&lt;/Name&gt;  \n    &lt;Item&gt;  \n      &lt;Key&gt;0005&lt;/Key&gt;  \n    &lt;/Item&gt;  \n    &lt;Item&gt;  \n      &lt;Key&gt;0006&lt;/Key&gt;  \n    &lt;/Item&gt;  \n    &lt;Item&gt;  \n      &lt;Key&gt;0007&lt;/Key&gt;  \n    &lt;/Item&gt;  \n    &lt;Item&gt;  \n      &lt;Key&gt;0008&lt;/Key&gt;  \n    &lt;/Item&gt;  \n  &lt;/Customer&gt;  \n  &lt;Customer&gt;  \n    &lt;Name&gt;Southridge Video&lt;/Name&gt;  \n    &lt;Item&gt;  \n      &lt;Key&gt;0009&lt;/Key&gt;  \n    &lt;/Item&gt;  \n    &lt;Item&gt;  \n      &lt;Key&gt;0010&lt;/Key&gt;  \n    &lt;/Item&gt;  \n  &lt;/Customer&gt;  \n&lt;/Root&gt;  \n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">Module Module1  \n    Sub Main()  \n        Dim root = New XStreamingElement(&quot;Root&quot;,  \n            From el In New StreamCustomerItem(&quot;Source.xml&quot;)  \n            Select &lt;Item&gt;  \n                       &lt;Customer&gt;&lt;%= el.Parent.&lt;Name&gt;.Value %&gt;&lt;/Customer&gt;  \n                       &lt;%= el.&lt;Key&gt; %&gt;  \n                   &lt;/Item&gt;  \n            )  \n        root.Save(&quot;Test.xml&quot;)  \n        Console.WriteLine(My.Computer.FileSystem.ReadAllText(&quot;Test.xml&quot;))  \n    End Sub  \nEnd Module  \n\nPublic Class StreamCustomerItem  \n    Implements IEnumerable(Of XElement)  \n\n    Private _uri As String  \n\n    Public Sub New(ByVal uri As String)  \n        _uri = uri  \n    End Sub  \n\n    Public Function GetEnumerator() As IEnumerator(Of XElement) Implements IEnumerable(Of XElement).GetEnumerator  \n        Return New StreamCustomerItemEnumerator(_uri)  \n    End Function  \n\n    Public Function GetEnumerator1() As IEnumerator Implements IEnumerable.GetEnumerator  \n        Return Me.GetEnumerator()  \n    End Function  \nEnd Class  \n\nPublic Class StreamCustomerItemEnumerator  \n    Implements IEnumerator(Of XElement)  \n\n    Private _current As XElement  \n    Private _customerName As String  \n    Private _reader As Xml.XmlReader  \n    Private _uri As String  \n\n    Public Sub New(ByVal uri As String)  \n        _uri = uri  \n        _reader = Xml.XmlReader.Create(_uri)  \n        _reader.MoveToContent()  \n    End Sub  \n\n    Public ReadOnly Property Current As XElement Implements IEnumerator(Of XElement).Current  \n        Get  \n            Return _current  \n        End Get  \n    End Property  \n\n    Public ReadOnly Property Current1 As Object Implements IEnumerator.Current  \n        Get  \n            Return Me.Current  \n        End Get  \n    End Property  \n\n    Public Function MoveNext() As Boolean Implements IEnumerator.MoveNext  \n        Dim item As XElement  \n        Dim name As XElement  \n\n        &#39; Parse the file, save header information when encountered, and return the  \n        &#39; current Item XElement.  \n\n        &#39; loop through Customer elements  \n        While _reader.Read()  \n            If _reader.NodeType = Xml.XmlNodeType.Element Then  \n                Select Case _reader.Name  \n                    Case &quot;Customer&quot;  \n                        &#39; move to Name element  \n                        While _reader.Read()  \n\n                            If _reader.NodeType = Xml.XmlNodeType.Element AndAlso  \n                                _reader.Name = &quot;Name&quot; Then  \n\n                                name = TryCast(XElement.ReadFrom(_reader), XElement)  \n                                _customerName = If(name IsNot Nothing, name.Value, &quot;&quot;)  \n                                Exit While  \n                            End If  \n\n                        End While  \n                    Case &quot;Item&quot;  \n                        item = TryCast(XElement.ReadFrom(_reader), XElement)  \n                        Dim tempRoot = &lt;Root&gt;  \n                                           &lt;Name&gt;&lt;%= _customerName %&gt;&lt;/Name&gt;  \n                                           &lt;%= item %&gt;  \n                                       &lt;/Root&gt;  \n                        _current = item  \n                        Return True  \n                End Select  \n            End If  \n        End While  \n\n        Return False  \n    End Function  \n\n    Public Sub Reset() Implements IEnumerator.Reset  \n        _reader = Xml.XmlReader.Create(_uri)  \n        _reader.MoveToContent()  \n    End Sub  \n\n#Region &quot;IDisposable Support&quot;  \n    Private disposedValue As Boolean &#39; To detect redundant calls  \n\n    &#39; IDisposable  \n    Protected Overridable Sub Dispose(ByVal disposing As Boolean)  \n        If Not Me.disposedValue Then  \n            If disposing Then  \n                _reader.Close()  \n            End If  \n        End If  \n        Me.disposedValue = True  \n    End Sub  \n\n    Public Sub Dispose() Implements IDisposable.Dispose  \n        Dispose(True)  \n        GC.SuppressFinalize(Me)  \n    End Sub  \n#End Region  \n\nEnd Class  \n</code></pre><p> This code produces the following output:  </p>\n<pre class=\"loading\"><code class=\"lang-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;  \n&lt;Root&gt;  \n  &lt;Item&gt;  \n    &lt;Customer&gt;A. Datum Corporation&lt;/Customer&gt;  \n    &lt;Key&gt;0001&lt;/Key&gt;  \n  &lt;/Item&gt;  \n  &lt;Item&gt;  \n    &lt;Customer&gt;A. Datum Corporation&lt;/Customer&gt;  \n    &lt;Key&gt;0002&lt;/Key&gt;  \n  &lt;/Item&gt;  \n  &lt;Item&gt;  \n    &lt;Customer&gt;A. Datum Corporation&lt;/Customer&gt;  \n    &lt;Key&gt;0003&lt;/Key&gt;  \n  &lt;/Item&gt;  \n  &lt;Item&gt;  \n    &lt;Customer&gt;A. Datum Corporation&lt;/Customer&gt;  \n    &lt;Key&gt;0004&lt;/Key&gt;  \n  &lt;/Item&gt;  \n  &lt;Item&gt;  \n    &lt;Customer&gt;Fabrikam, Inc.&lt;/Customer&gt;  \n    &lt;Key&gt;0005&lt;/Key&gt;  \n  &lt;/Item&gt;  \n  &lt;Item&gt;  \n    &lt;Customer&gt;Fabrikam, Inc.&lt;/Customer&gt;  \n    &lt;Key&gt;0006&lt;/Key&gt;  \n  &lt;/Item&gt;  \n  &lt;Item&gt;  \n    &lt;Customer&gt;Fabrikam, Inc.&lt;/Customer&gt;  \n    &lt;Key&gt;0007&lt;/Key&gt;  \n  &lt;/Item&gt;  \n  &lt;Item&gt;  \n    &lt;Customer&gt;Fabrikam, Inc.&lt;/Customer&gt;  \n    &lt;Key&gt;0008&lt;/Key&gt;  \n  &lt;/Item&gt;  \n  &lt;Item&gt;  \n    &lt;Customer&gt;Southridge Video&lt;/Customer&gt;  \n    &lt;Key&gt;0009&lt;/Key&gt;  \n  &lt;/Item&gt;  \n  &lt;Item&gt;  \n    &lt;Customer&gt;Southridge Video&lt;/Customer&gt;  \n    &lt;Key&gt;0010&lt;/Key&gt;  \n  &lt;/Item&gt;  \n&lt;/Root&gt;  \n</code></pre><h2 id=\"example-1\">Example</h2>\n<p> The following example also builds on the example in <a href=\"how-to-stream-xml-fragments-with-access-to-header-information\" data-linktype=\"relative-path\">How to: Stream XML Fragments with Access to Header Information (Visual Basic)</a>.  </p>\n<p> This example uses the capability of LINQ to XML to write elements to an <a class=\"xref\" href=\"../../../../../api/system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>. This example can transform a very large document while maintaining a small memory footprint.  </p>\n<p> Note that the custom axis (<code>StreamCustomerItem</code>) is specifically written so that it expects a document that has <code>Customer</code>, <code>Name</code>, and <code>Item</code> elements, and that those elements will be arranged as in the following Source.xml document. A more robust implementation, however, would either validate the source document with an XSD, or would be prepared to parse an invalid document.  </p>\n<p> This example uses the same source document, Source.xml, as the previous example in this topic. It also produces exactly the same output.  </p>\n<p> Using <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xstreamingelement\" data-linktype=\"relative-path\">XStreamingElement</a> for streaming the output XML is preferred over writing to an <a class=\"xref\" href=\"../../../../../api/system.xml.xmlwriter\" data-linktype=\"relative-path\">XmlWriter</a>.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Module Module1  \n    Sub Main()  \n        Dim srcTree =  \n            From el In New StreamCustomerItem(&quot;Source.xml&quot;)  \n            Select &lt;Item&gt;  \n                       &lt;Customer&gt;&lt;%= el.Parent.&lt;Name&gt;.Value %&gt;&lt;/Customer&gt;  \n                       &lt;%= el.&lt;Key&gt; %&gt;  \n                   &lt;/Item&gt;  \n\n        Dim xws = New Xml.XmlWriterSettings()  \n        xws.OmitXmlDeclaration = True  \n        xws.Indent = True  \n        Using xw = Xml.XmlWriter.Create(&quot;Output.xml&quot;, xws)  \n            xw.WriteStartElement(&quot;Root&quot;)  \n            For Each el In srcTree  \n                el.WriteTo(xw)  \n            Next  \n            xw.WriteEndElement()  \n        End Using  \n\n        Dim s = My.Computer.FileSystem.ReadAllText(&quot;Output.xml&quot;)  \n        Console.WriteLine(s)  \n    End Sub  \nEnd Module  \n\nPublic Class StreamCustomerItem  \n    Implements IEnumerable(Of XElement)  \n\n    Private _uri As String  \n\n    Public Sub New(ByVal uri As String)  \n        _uri = uri  \n    End Sub  \n\n    Public Function GetEnumerator() As IEnumerator(Of XElement) Implements IEnumerable(Of XElement).GetEnumerator  \n        Return New StreamCustomerItemEnumerator(_uri)  \n    End Function  \n\n    Public Function GetEnumerator1() As IEnumerator Implements IEnumerable.GetEnumerator  \n        Return Me.GetEnumerator()  \n    End Function  \nEnd Class  \n\nPublic Class StreamCustomerItemEnumerator  \n    Implements IEnumerator(Of XElement)  \n\n    Private _current As XElement  \n    Private _customerName As String  \n    Private _reader As Xml.XmlReader  \n    Private _uri As String  \n\n    Public Sub New(ByVal uri As String)  \n        _uri = uri  \n        _reader = Xml.XmlReader.Create(_uri)  \n        _reader.MoveToContent()  \n    End Sub  \n\n    Public ReadOnly Property Current As XElement Implements IEnumerator(Of XElement).Current  \n        Get  \n            Return _current  \n        End Get  \n    End Property  \n\n    Public ReadOnly Property Current1 As Object Implements IEnumerator.Current  \n        Get  \n            Return Me.Current  \n        End Get  \n    End Property  \n\n    Public Function MoveNext() As Boolean Implements IEnumerator.MoveNext  \n        Dim item As XElement  \n        Dim name As XElement  \n\n        &#39; Parse the file, save header information when encountered, and return the  \n        &#39; current Item XElement.  \n\n        &#39; loop through Customer elements  \n        While _reader.Read()  \n            If _reader.NodeType = Xml.XmlNodeType.Element Then  \n                Select Case _reader.Name  \n                    Case &quot;Customer&quot;  \n                        &#39; move to Name element  \n                        While _reader.Read()  \n\n                            If _reader.NodeType = Xml.XmlNodeType.Element AndAlso  \n                                _reader.Name = &quot;Name&quot; Then  \n\n                                name = TryCast(XElement.ReadFrom(_reader), XElement)  \n                                _customerName = If(name IsNot Nothing, name.Value, &quot;&quot;)  \n                                Exit While  \n                            End If  \n\n                        End While  \n                    Case &quot;Item&quot;  \n                        item = TryCast(XElement.ReadFrom(_reader), XElement)  \n                        Dim tempRoot = &lt;Root&gt;  \n                                           &lt;Name&gt;&lt;%= _customerName %&gt;&lt;/Name&gt;  \n                                           &lt;%= item %&gt;  \n                                       &lt;/Root&gt;  \n                        _current = item  \n                        Return True  \n                End Select  \n            End If  \n        End While  \n\n        Return False  \n    End Function  \n\n    Public Sub Reset() Implements IEnumerator.Reset  \n        _reader = Xml.XmlReader.Create(_uri)  \n        _reader.MoveToContent()  \n    End Sub  \n\n#Region &quot;IDisposable Support&quot;  \n    Private disposedValue As Boolean &#39; To detect redundant calls  \n\n    &#39; IDisposable  \n    Protected Overridable Sub Dispose(ByVal disposing As Boolean)  \n        If Not Me.disposedValue Then  \n            If disposing Then  \n                _reader.Close()  \n            End If  \n        End If  \n        Me.disposedValue = True  \n    End Sub  \n\n    Public Sub Dispose() Implements IDisposable.Dispose  \n        Dispose(True)  \n        GC.SuppressFinalize(Me)  \n    End Sub  \n#End Region  \n\nEnd Class  \n</code></pre><p> This code produces the following output:  </p>\n<pre class=\"loading\"><code class=\"lang-xml\">&lt;Root&gt;  \n  &lt;Item&gt;  \n    &lt;Customer&gt;A. Datum Corporation&lt;/Customer&gt;  \n    &lt;Key&gt;0001&lt;/Key&gt;  \n  &lt;/Item&gt;  \n  &lt;Item&gt;  \n    &lt;Customer&gt;A. Datum Corporation&lt;/Customer&gt;  \n    &lt;Key&gt;0002&lt;/Key&gt;  \n  &lt;/Item&gt;  \n  &lt;Item&gt;  \n    &lt;Customer&gt;A. Datum Corporation&lt;/Customer&gt;  \n    &lt;Key&gt;0003&lt;/Key&gt;  \n  &lt;/Item&gt;  \n  &lt;Item&gt;  \n    &lt;Customer&gt;A. Datum Corporation&lt;/Customer&gt;  \n    &lt;Key&gt;0004&lt;/Key&gt;  \n  &lt;/Item&gt;  \n  &lt;Item&gt;  \n    &lt;Customer&gt;Fabrikam, Inc.&lt;/Customer&gt;  \n    &lt;Key&gt;0005&lt;/Key&gt;  \n  &lt;/Item&gt;  \n  &lt;Item&gt;  \n    &lt;Customer&gt;Fabrikam, Inc.&lt;/Customer&gt;  \n    &lt;Key&gt;0006&lt;/Key&gt;  \n  &lt;/Item&gt;  \n  &lt;Item&gt;  \n    &lt;Customer&gt;Fabrikam, Inc.&lt;/Customer&gt;  \n    &lt;Key&gt;0007&lt;/Key&gt;  \n  &lt;/Item&gt;  \n  &lt;Item&gt;  \n    &lt;Customer&gt;Fabrikam, Inc.&lt;/Customer&gt;  \n    &lt;Key&gt;0008&lt;/Key&gt;  \n  &lt;/Item&gt;  \n  &lt;Item&gt;  \n    &lt;Customer&gt;Southridge Video&lt;/Customer&gt;  \n    &lt;Key&gt;0009&lt;/Key&gt;  \n  &lt;/Item&gt;  \n  &lt;Item&gt;  \n    &lt;Customer&gt;Southridge Video&lt;/Customer&gt;  \n    &lt;Key&gt;0010&lt;/Key&gt;  \n  &lt;/Item&gt;  \n&lt;/Root&gt;  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"advanced-linq-to-xml-programming\" data-linktype=\"relative-path\">Advanced LINQ to XML Programming (Visual Basic)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.tgt_pltfrm\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"3d954cc9-4b3c-4b47-8132-ff7541cff53b\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/linq/how-to-perform-streaming-transform-of-large-xml-documents.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/linq/how-to-perform-streaming-transform-of-large-xml-documents.md\">\r\n<meta name=\"document_id\" content=\"d3044327-90cc-1d70-4a58-4d7a563572f1\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"How to: Perform Streaming Transform of Large XML Documents (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.tgt_pltfrm":"","ms.assetid":"3d954cc9-4b3c-4b47-8132-ff7541cff53b","caps.latest.revision":3,"ms.topic":"article","dev_langs":["vb"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/linq/how-to-perform-streaming-transform-of-large-xml-documents.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/linq/how-to-perform-streaming-transform-of-large-xml-documents.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/concepts/linq/how-to-perform-streaming-transform-of-large-xml-documents.md","document_id":"d3044327-90cc-1d70-4a58-4d7a563572f1","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/concepts/linq/how-to-perform-streaming-transform-of-large-xml-documents","toc_asset_id":"articles/visual-basic/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Perform Streaming Transform of Large XML Documents (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":1314,"_op_rawTitle":"<h1 id=\"how-to-perform-streaming-transform-of-large-xml-documents-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/concepts/linq/how-to-perform-streaming-transform-of-large-xml-documents.md\" sourcestartlinenumber=\"25\" sourceendlinenumber=\"25\">How to: Perform Streaming Transform of Large XML Documents (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/concepts/linq/how-to-perform-streaming-transform-of-large-xml-documents","fileRelativePath":"articles/visual-basic/programming-guide/concepts/linq/how-to-perform-streaming-transform-of-large-xml-documents.html"},"themesRelativePathToOutputRoot":"_themes/"}