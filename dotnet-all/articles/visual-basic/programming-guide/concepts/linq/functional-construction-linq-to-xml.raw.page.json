{"content":"<div><div class=\"content\">\n<p>LINQ to XML provides a powerful way to create XML elements called <em>functional construction</em>. Functional construction is the ability to create an XML tree in a single statement.  </p>\n<p> There are several key features of the LINQ to XML programming interface that enable functional construction:  </p>\n<ul>\n<li><p>The <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> constructor takes various types of arguments for content. For example, you can pass another <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> object, which becomes a child element. You can pass an <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a> object, which becomes an attribute of the element. Or you can pass any other type of object, which is converted to a string and becomes the text content of the element.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> constructor takes a <code>params</code> array of type <a class=\"xref\" href=\"../../../../../api/system.object\" data-linktype=\"relative-path\">Object</a>, so that you can pass any number of objects to the constructor. This enables you to create an element that has complex content.  </p>\n</li>\n<li><p>If an object implements <a class=\"xref\" href=\"../../../../../api/system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>, the collection in the object is enumerated, and all items in the collection are added. If the collection contains <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> or <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a> objects, each item in the collection is added separately. This is important because it lets you pass the results of a LINQ query to the constructor.  </p>\n</li>\n</ul>\n<p> The following is an example:  </p>\n<p> These features enable you to write code using XML literals to create an XML tree, and also to write code that uses the results of LINQ queries when you create an XML tree:  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Dim srcTree As XElement = _  \n    &lt;Root&gt;  \n        &lt;Element&gt;1&lt;/Element&gt;  \n        &lt;Element&gt;2&lt;/Element&gt;  \n        &lt;Element&gt;3&lt;/Element&gt;  \n        &lt;Element&gt;4&lt;/Element&gt;  \n        &lt;Element&gt;5&lt;/Element&gt;  \n    &lt;/Root&gt;  \nDim xmlTree As XElement = _  \n    &lt;Root&gt;  \n        &lt;Child&gt;1&lt;/Child&gt;  \n        &lt;Child&gt;2&lt;/Child&gt;  \n        &lt;%= From el In srcTree.Elements() _  \n            Where CInt(el) &gt; 2 _  \n            Select el %&gt;  \n    &lt;/Root&gt;  \nConsole.WriteLine(xmlTree)  \n</code></pre><p> This example produces the following output:  </p>\n<pre class=\"loading\"><code class=\"lang-xml\">&lt;Root&gt;  \n  &lt;Child&gt;1&lt;/Child&gt;  \n  &lt;Child&gt;2&lt;/Child&gt;  \n  &lt;Element&gt;3&lt;/Element&gt;  \n  &lt;Element&gt;4&lt;/Element&gt;  \n  &lt;Element&gt;5&lt;/Element&gt;  \n&lt;/Root&gt;  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"creating-xml-trees\" data-linktype=\"relative-path\">Creating XML Trees (Visual Basic)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.tgt_pltfrm\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"feac4273-39ab-43ae-bab7-4059c807a785\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/linq/functional-construction-linq-to-xml.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/linq/functional-construction-linq-to-xml.md\">\r\n<meta name=\"document_id\" content=\"186fe1c0-f353-4b35-c6d6-f78913b5713e\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"Functional Construction (LINQ to XML) (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.tgt_pltfrm":"","ms.assetid":"feac4273-39ab-43ae-bab7-4059c807a785","caps.latest.revision":3,"ms.topic":"article","dev_langs":["vb"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/linq/functional-construction-linq-to-xml.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/linq/functional-construction-linq-to-xml.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/concepts/linq/functional-construction-linq-to-xml.md","document_id":"186fe1c0-f353-4b35-c6d6-f78913b5713e","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/concepts/linq/functional-construction-linq-to-xml","toc_asset_id":"articles/visual-basic/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"Functional Construction (LINQ to XML) (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":277,"_op_rawTitle":"<h1 id=\"functional-construction-linq-to-xml-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/concepts/linq/functional-construction-linq-to-xml.md\" sourcestartlinenumber=\"25\" sourceendlinenumber=\"25\">Functional Construction (LINQ to XML) (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/concepts/linq/functional-construction-linq-to-xml","fileRelativePath":"articles/visual-basic/programming-guide/concepts/linq/functional-construction-linq-to-xml.html"},"themesRelativePathToOutputRoot":"_themes/"}