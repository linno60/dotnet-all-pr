{"content":"<div><div class=\"content\">\n<p>One way to improve performance in LINQ to XML is to pre-atomize <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> objects. Pre-atomization means that you assign a string to an <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> object before you create the XML tree by using the constructors of the <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xelement\" data-linktype=\"relative-path\">XElement</a> and  <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xattribute\" data-linktype=\"relative-path\">XAttribute</a> classes. Then, instead of passing a string to the constructor, which would use the implicit conversion from string to <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a>, you pass the initialized <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> object.  </p>\n<p> This improves performance when you create a large XML tree in which specific names are repeated. To do this, you declare and initialize <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> objects before you construct the XML tree, and then use the <a class=\"xref\" href=\"../../../../../api/system.xml.linq.xname\" data-linktype=\"relative-path\">XName</a> objects instead of specifying strings for the element and attribute names. This technique can yield significant performance gains if you are creating a large number of elements (or attributes) with the same name.  </p>\n<p> You should test pre-atomization with your scenario to decide if you should use it.  </p>\n<h2 id=\"example\">Example</h2>\n<p> The following example demonstrates this.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Dim Root__1 As XName = &quot;Root&quot;  \nDim Data As XName = &quot;Data&quot;  \nDim ID As XName = &quot;ID&quot;  \n\nDim root__2 As New XElement(Root__1, New XElement(Data, New XAttribute(ID, &quot;1&quot;), &quot;4,100,000&quot;), New XElement(Data, New XAttribute(ID, &quot;2&quot;), &quot;3,700,000&quot;), New XElement(Data, New XAttribute(ID, &quot;3&quot;), &quot;1,150,000&quot;))  \n\nConsole.WriteLine(root__2)  \n</code></pre><p> This example produces the following output:  </p>\n<pre class=\"loading\"><code class=\"lang-xml\">&lt;Root&gt;  \n  &lt;Data ID=&quot;1&quot;&gt;4,100,000&lt;/Data&gt;  \n  &lt;Data ID=&quot;2&quot;&gt;3,700,000&lt;/Data&gt;  \n  &lt;Data ID=&quot;3&quot;&gt;1,150,000&lt;/Data&gt;  \n&lt;/Root&gt;  \n</code></pre><p> The following example shows the same technique where the XML document is in a namespace:  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Dim aw As XNamespace = &quot;http://www.adventure-works.com&quot;  \nDim Root__1 As XName = aw + &quot;Root&quot;  \nDim Data As XName = aw + &quot;Data&quot;  \nDim ID As XName = &quot;ID&quot;  \n\nDim root__2 As New XElement(Root__1, New XAttribute(XNamespace.Xmlns + &quot;aw&quot;, aw), New XElement(Data, New XAttribute(ID, &quot;1&quot;), &quot;4,100,000&quot;), New XElement(Data, New XAttribute(ID, &quot;2&quot;), &quot;3,700,000&quot;), New XElement(Data, New XAttribute(ID, &quot;3&quot;), &quot;1,150,000&quot;))  \n\nConsole.WriteLine(root__2)  \n</code></pre><p> This example produces the following output:  </p>\n<pre class=\"loading\"><code class=\"lang-xml\">&lt;aw:Root xmlns:aw=&quot;http://www.adventure-works.com&quot;&gt;  \n  &lt;aw:Data ID=&quot;1&quot;&gt;4,100,000&lt;/aw:Data&gt;  \n  &lt;aw:Data ID=&quot;2&quot;&gt;3,700,000&lt;/aw:Data&gt;  \n  &lt;aw:Data ID=&quot;3&quot;&gt;1,150,000&lt;/aw:Data&gt;  \n&lt;/aw:Root&gt;  \n</code></pre><p> The following example is more similar to what you will likely encounter in the real world. In this example, the content of the element is supplied by a query:  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Dim Root__1 As XName = &quot;Root&quot;  \nDim Data As XName = &quot;Data&quot;  \nDim ID As XName = &quot;ID&quot;  \n\nDim t1 As DateTime = DateTime.Now  \nDim root__2 As New XElement(Root__1, From i In System.Linq.Enumerable.Range(1, 100000)New XElement(Data, New XAttribute(ID, i), i * 5))  \nDim t2 As DateTime = DateTime.Now  \n\nConsole.WriteLine(&quot;Time to construct:{0}&quot;, t2 - t1)  \n</code></pre><p> The previous example performs better than the following example, in which names are not pre-atomized:  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Dim t1 As DateTime = DateTime.Now  \nDim root As New XElement(&quot;Root&quot;, From i In System.Linq.Enumerable.Range(1, 100000)New XElement(&quot;Data&quot;, New XAttribute(&quot;ID&quot;, i), i * 5))  \nDim t2 As DateTime = DateTime.Now  \n\nConsole.WriteLine(&quot;Time to construct:{0}&quot;, t2 - t1)  \n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"performance-linq-to-xml\" data-linktype=\"relative-path\">Performance (LINQ to XML) (Visual Basic)</a><br> <a href=\"atomized-xname-and-xnamespace-objects-linq-to-xml\" data-linktype=\"relative-path\">Atomized XName and XNamespace Objects (LINQ to XML) (Visual Basic)</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.tgt_pltfrm\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"06ea104b-f44c-4bb2-9c34-889ae025c80d\">\r\n<meta name=\"caps.latest.revision\" content=\"3\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/linq/pre-atomization-of-xname-objects-linq-to-xml.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/linq/pre-atomization-of-xname-objects-linq-to-xml.md\">\r\n<meta name=\"document_id\" content=\"7ff947ca-c33f-7cad-19d5-1e6dc6dd0bbd\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Pre-Atomization of XName Objects (LINQ to XML) (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.tgt_pltfrm":"","ms.assetid":"06ea104b-f44c-4bb2-9c34-889ae025c80d","caps.latest.revision":3,"ms.topic":"article","dev_langs":["vb"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/concepts/linq/pre-atomization-of-xname-objects-linq-to-xml.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/concepts/linq/pre-atomization-of-xname-objects-linq-to-xml.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/concepts/linq/pre-atomization-of-xname-objects-linq-to-xml.md","document_id":"7ff947ca-c33f-7cad-19d5-1e6dc6dd0bbd","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/concepts/linq/pre-atomization-of-xname-objects-linq-to-xml","toc_asset_id":"articles/visual-basic/programming-guide/concepts/linq/toc.json","toc_rel":"toc.json","_op_ogTitle":"Pre-Atomization of XName Objects (LINQ to XML) (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":440,"_op_rawTitle":"<h1 id=\"pre-atomization-of-xname-objects-linq-to-xml-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/concepts/linq/pre-atomization-of-xname-objects-linq-to-xml.md\" sourcestartlinenumber=\"20\" sourceendlinenumber=\"20\">Pre-Atomization of XName Objects (LINQ to XML) (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/concepts/linq/pre-atomization-of-xname-objects-linq-to-xml","fileRelativePath":"articles/visual-basic/programming-guide/concepts/linq/pre-atomization-of-xname-objects-linq-to-xml.html"},"themesRelativePathToOutputRoot":"_themes/"}