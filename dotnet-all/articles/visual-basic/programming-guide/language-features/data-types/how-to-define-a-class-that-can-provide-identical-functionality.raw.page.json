{"content":"<div><div class=\"content\">\n<p>You can define a class from which you can create objects that provide identical functionality on different data types. To do this, you specify one or more <em>type parameters</em> in the definition. The class can then serve as a template for objects that use various data types. A class defined in this way is called a <em>generic class</em>.  </p>\n<p> The advantage of defining a generic class is that you define it just once, and your code can use it to create many objects that use a wide variety of data types. This results in better performance than defining the class with the <code>Object</code> type.  </p>\n<p> In addition to classes, you can also define and use generic structures, interfaces, procedures, and delegates.  </p>\n<h3 id=\"to-define-a-class-with-a-type-parameter\">To define a class with a type parameter</h3>\n<ol>\n<li><p>Define the class in the normal way.  </p>\n</li>\n<li><p>Add <code>(Of</code> <em>typeparameter</em><code>)</code> immediately after the class name to specify a type parameter.  </p>\n</li>\n<li><p>If you have more than one type parameter, make a comma-separated list inside the parentheses. Do not repeat the <code>Of</code> keyword.  </p>\n</li>\n<li><p>If your code performs operations on a type parameter other than simple assignment, follow that type parameter with an <code>As</code> clause to add one or more <em>constraints</em>. A constraint guarantees that the type supplied for that type parameter satisfies a requirement such as the following:  </p>\n<ul>\n<li><p>Supports an operation, such as <code>&gt;</code>, that your code performs  </p>\n</li>\n<li><p>Supports a member, such as a method, that your code accesses  </p>\n</li>\n<li><p>Exposes a parameterless constructor  </p>\n<p>If you do not specify any constraints, the only operations and members your code can use are those supported by the <a href=\"../../../language-reference/data-types/object-data-type\" data-linktype=\"relative-path\">Object Data Type</a>. For more information, see <a href=\"../../../language-reference/statements/type-list\" data-linktype=\"relative-path\">Type List</a>.  </p>\n</li>\n</ul>\n</li>\n<li><p>Identify every class member that is to be declared with a supplied type, and declare it <code>As</code> <code>typeparameter</code>. This applies to internal storage, procedure parameters, and return values.  </p>\n</li>\n<li><p>Be sure your code uses only operations and methods that are supported by any data type it can supply to <code>itemType</code>.  </p>\n<p> The following example defines a class that manages a very simple list. It holds the list in the internal array <code>items</code>, and the using code can declare the data type of the list elements. A parameterized constructor allows the using code to set the upper bound of <code>items</code>, and the default constructor sets this to 9 (for a total of 10 items).  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrDataTypes#7\">Public Class simpleList(Of itemType)\n  Private items() As itemType\n  Private top As Integer\n  Private nextp As Integer\n  Public Sub New()\n    Me.New(9)\n  End Sub\n  Public Sub New(ByVal t As Integer)\n    MyBase.New()\n    items = New itemType(t) {}\n    top = t\n    nextp = 0\n  End Sub\n  Public Sub add(ByVal i As itemType)\n    insert(i, nextp)\n  End Sub\n  Public Sub insert(ByVal i As itemType, ByVal p As Integer)\n    If p &gt; nextp OrElse p &lt; 0 Then\n      Throw New System.ArgumentOutOfRangeException(&quot;p&quot;, \n        &quot; less than 0 or beyond next available list position&quot;)\n    ElseIf nextp &gt; top Then\n      Throw New System.ArgumentException(&quot;No room to insert at &quot;, \n        &quot;p&quot;)\n    ElseIf p &lt; nextp Then\n      For j As Integer = nextp To p + 1 Step -1\n        items(j) = items(j - 1)\n      Next j\n    End If\n    items(p) = i\n    nextp += 1\n  End Sub\n  Public Sub remove(ByVal p As Integer)\n    If p &gt;= nextp OrElse p &lt; 0 Then\n        Throw New System.ArgumentOutOfRangeException(&quot;p&quot;, \n            &quot; less than 0 or beyond last list item&quot;)\n    ElseIf nextp = 0 Then\n        Throw New System.ArgumentException(&quot;List empty; cannot remove &quot;, \n            &quot;p&quot;)\n    ElseIf p &lt; nextp - 1 Then\n        For j As Integer = p To nextp - 2\n            items(j) = items(j + 1)\n        Next j\n    End If\n    nextp -= 1\n  End Sub\n  Public ReadOnly Property listLength() As Integer\n    Get\n      Return nextp\n    End Get\n  End Property\n  Public ReadOnly Property listItem(ByVal p As Integer) As itemType\n    Get\n      If p &gt;= nextp OrElse p &lt; 0 Then\n        Throw New System.ArgumentOutOfRangeException(&quot;p&quot;, \n          &quot; less than 0 or beyond last list item&quot;)\n        End If\n      Return items(p)\n    End Get\n  End Property\nEnd Class\n</code></pre><p> You can declare a class from <code>simpleList</code> to hold a list of <code>Integer</code> values, another class to hold a list of <code>String</code> values, and another to hold <code>Date</code> values. Except for the data type of the list members, objects created from all these classes behave identically.  </p>\n<p> The type argument that the using code supplies to <code>itemType</code> can be an intrinsic type such as <code>Boolean</code> or <code>Double</code>, a structure, an enumeration, or any type of class, including one that your application defines.  </p>\n<p> You can test the class <code>simpleList</code> with the following code.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrDataTypes#8\">Public Sub useSimpleList()\n  Dim iList As New simpleList(Of Integer)(2)\n  Dim sList As New simpleList(Of String)(3)\n  Dim dList As New simpleList(Of Date)(2)\n  iList.add(10)\n  iList.add(20)\n  iList.add(30)\n  sList.add(&quot;First&quot;)\n  sList.add(&quot;extra&quot;)\n  sList.add(&quot;Second&quot;)\n  sList.add(&quot;Third&quot;)\n  sList.remove(1)\n  dList.add(#1/1/2003#)\n  dList.add(#3/3/2003#)\n  dList.insert(#2/2/2003#, 1)\n  Dim s = \n    &quot;Simple list of 3 Integer items (reported length &quot; &amp;\n     CStr(iList.listLength) &amp; &quot;):&quot; &amp;\n     vbCrLf &amp; CStr(iList.listItem(0)) &amp;\n     vbCrLf &amp; CStr(iList.listItem(1)) &amp;\n     vbCrLf &amp; CStr(iList.listItem(2)) &amp;\n     vbCrLf &amp;\n     &quot;Simple list of 4 - 1 String items (reported length &quot; &amp;\n     CStr(sList.listLength) &amp; &quot;):&quot; &amp;\n     vbCrLf &amp; CStr(sList.listItem(0)) &amp;\n     vbCrLf &amp; CStr(sList.listItem(1)) &amp;\n     vbCrLf &amp; CStr(sList.listItem(2)) &amp;\n     vbCrLf &amp;\n     &quot;Simple list of 2 + 1 Date items (reported length &quot; &amp;\n     CStr(dList.listLength) &amp; &quot;):&quot; &amp;\n     vbCrLf &amp; CStr(dList.listItem(0)) &amp;\n     vbCrLf &amp; CStr(dList.listItem(1)) &amp;\n     vbCrLf &amp; CStr(dList.listItem(2))\n  MsgBox(s)\nEnd Sub\n</code></pre></li>\n</ol>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"index\" data-linktype=\"relative-path\">Data Types</a><br> <a href=\"generic-types\" data-linktype=\"relative-path\">Generic Types in Visual Basic</a><br> <a href=\"https://msdn.microsoft.com/library/12a7a7h3\" data-linktype=\"external\">Language Independence and Language-Independent Components</a><br> <a href=\"../../../language-reference/statements/of-clause\" data-linktype=\"relative-path\">Of</a><br> <a href=\"../../../language-reference/statements/type-list\" data-linktype=\"relative-path\">Type List</a><br> <a href=\"how-to-use-a-generic-class\" data-linktype=\"relative-path\">How to: Use a Generic Class</a><br> <a href=\"../../../language-reference/data-types/object-data-type\" data-linktype=\"relative-path\">Object Data Type</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"a914adf8-e68f-4819-a6b1-200d1cf1c21c\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"29\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/language-features/data-types/how-to-define-a-class-that-can-provide-identical-functionality.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/language-features/data-types/how-to-define-a-class-that-can-provide-identical-functionality.md\">\r\n<meta name=\"document_id\" content=\"afb9c4b6-a82f-b0b7-7963-483577549155\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"How to: Define a Class That Can Provide Identical Functionality on Different Data Types (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"a914adf8-e68f-4819-a6b1-200d1cf1c21c","translation.priority.ht":["de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","ru-ru","zh-cn","zh-tw"],"caps.latest.revision":29,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["data type arguments, using","type parameters, defining","data type arguments, defining","arguments [Visual Basic], data types","Of keyword, using","constraints, Visual Basic generic types","generic parameters","data type parameters","data type parameters, using","generics [Visual Basic], defining classes with type parameters","data types [Visual Basic], as parameters","data types [Visual Basic], as arguments","parameters, type","type arguments","types [Visual Basic], generic","parameters, generic","type parameters","data type arguments","parameters, data type","generics [Visual Basic], defining generic types","data type parameters, defining","type arguments, defining","arguments [Visual Basic], type"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/language-features/data-types/how-to-define-a-class-that-can-provide-identical-functionality.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/language-features/data-types/how-to-define-a-class-that-can-provide-identical-functionality.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/language-features/data-types/how-to-define-a-class-that-can-provide-identical-functionality.md","document_id":"afb9c4b6-a82f-b0b7-7963-483577549155","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/language-features/data-types/how-to-define-a-class-that-can-provide-identical-functionality","toc_asset_id":"articles/visual-basic/programming-guide/language-features/data-types/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Define a Class That Can Provide Identical Functionality on Different Data Types (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":877,"_op_rawTitle":"<h1 id=\"how-to-define-a-class-that-can-provide-identical-functionality-on-different-data-types-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/language-features/data-types/how-to-define-a-class-that-can-provide-identical-functionality.md\" sourcestartlinenumber=\"59\" sourceendlinenumber=\"59\">How to: Define a Class That Can Provide Identical Functionality on Different Data Types (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/language-features/data-types/how-to-define-a-class-that-can-provide-identical-functionality","fileRelativePath":"articles/visual-basic/programming-guide/language-features/data-types/how-to-define-a-class-that-can-provide-identical-functionality.html"},"themesRelativePathToOutputRoot":"_themes/"}