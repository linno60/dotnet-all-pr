{"content":"<div><div class=\"content\">\n<p>Visual Basic supplies several <em>numeric data types</em> for handling numbers in various representations. <em>Integral</em> types represent only whole numbers (positive, negative, and zero), and <em>nonintegral</em> types represent numbers with both integer and fractional parts.  </p>\n<p> For a table showing a side-by-side comparison of the Visual Basic data types, see <a href=\"../../../language-reference/data-types/data-type-summary\" data-linktype=\"relative-path\">Data Types</a>.  </p>\n<h2 id=\"integral-numeric-types\">Integral Numeric Types</h2>\n<p> <em>Integral data types</em> are those that represent only numbers without fractional parts.  </p>\n<p> The <em>signed</em> integral data types are <a href=\"../../../language-reference/data-types/sbyte-data-type\" data-linktype=\"relative-path\">SByte Data Type</a> (8-bit), <a href=\"../../../language-reference/data-types/short-data-type\" data-linktype=\"relative-path\">Short Data Type</a> (16-bit), <a href=\"../../../language-reference/data-types/integer-data-type\" data-linktype=\"relative-path\">Integer Data Type</a> (32-bit), and <a href=\"../../../language-reference/data-types/long-data-type\" data-linktype=\"relative-path\">Long Data Type</a> (64-bit). If a variable always stores integers rather than fractional numbers, declare it as one of these types.  </p>\n<p> The <em>unsigned</em> integral types are <a href=\"../../../language-reference/data-types/byte-data-type\" data-linktype=\"relative-path\">Byte Data Type</a> (8-bit), <a href=\"../../../language-reference/data-types/ushort-data-type\" data-linktype=\"relative-path\">UShort Data Type</a> (16-bit), <a href=\"../../../language-reference/data-types/uinteger-data-type\" data-linktype=\"relative-path\">UInteger Data Type</a> (32-bit), and <a href=\"../../../language-reference/data-types/ulong-data-type\" data-linktype=\"relative-path\">ULong Data Type</a> (64-bit). If a variable contains binary data, or data of unknown nature, declare it as one of these types.  </p>\n<h3 id=\"performance\">Performance</h3>\n<p> Arithmetic operations are faster with integral types than with other data types. They are fastest with the <code>Integer</code> and <code>UInteger</code> types in Visual Basic.  </p>\n<h3 id=\"large-integers\">Large Integers</h3>\n<p> If you need to hold an integer larger than the <code>Integer</code> data type can hold, you can use the <code>Long</code> data type instead. <code>Long</code> variables can hold numbers from -9,223,372,036,854,775,808 through 9,223,372,036,854,775,807. Operations with <code>Long</code> are slightly slower than with <code>Integer</code>.  </p>\n<p> If you need even larger values, you can use the <a href=\"../../../language-reference/data-types/decimal-data-type\" data-linktype=\"relative-path\">Decimal Data Type</a>. You can hold numbers from -79,228,162,514,264,337,593,543,950,335 through 79,228,162,514,264,337,593,543,950,335 in a <code>Decimal</code> variable if you do not use any decimal places. However, operations with <code>Decimal</code> numbers are considerably slower than with any other numeric data type.  </p>\n<h3 id=\"small-integers\">Small Integers</h3>\n<p> If you do not need the full range of the <code>Integer</code> data type, you can use the <code>Short</code> data type, which can hold integers from -32,768 through 32,767. For the smallest integer range, the <code>SByte</code> data type holds integers from -128 through 127. If you have a very large number of variables that hold small integers, the common language runtime can sometimes store your <code>Short</code> and <code>SByte</code> variables more efficiently and save memory consumption. However, operations with <code>Short</code> and <code>SByte</code> are somewhat slower than with <code>Integer</code>.  </p>\n<h3 id=\"unsigned-integers\">Unsigned Integers</h3>\n<p> If you know that your variable never needs to hold a negative number, you can use the <em>unsigned types</em><code>Byte</code>, <code>UShort</code>, <code>UInteger</code>, and <code>ULong</code>. Each of these data types can hold a positive integer twice as large as its corresponding signed type (<code>SByte</code>, <code>Short</code>, <code>Integer</code>, and <code>Long</code>). In terms of performance, each unsigned type is exactly as efficient as its corresponding signed type. In particular, <code>UInteger</code> shares with <code>Integer</code> the distinction of being the most efficient of all the elementary numeric data types.  </p>\n<h2 id=\"nonintegral-numeric-types\">Nonintegral Numeric Types</h2>\n<p> <em>Nonintegral data types</em> are those that represent numbers with both integer and fractional parts.  </p>\n<p> The nonintegral numeric data types are <code>Decimal</code> (128-bit fixed point), <a href=\"../../../language-reference/data-types/single-data-type\" data-linktype=\"relative-path\">Single Data Type</a> (32-bit floating point), and <a href=\"../../../language-reference/data-types/double-data-type\" data-linktype=\"relative-path\">Double Data Type</a> (64-bit floating point). They are all signed types. If a variable can contain a fraction, declare it as one of these types.  </p>\n<p> <code>Decimal</code> is not a floating-point data type. <code>Decimal</code> numbers have a binary integer value and an integer scaling factor that specifies what portion of the value is a decimal fraction.  </p>\n<p> You can use <code>Decimal</code> variables for money values. The advantage is the precision of the values. The <code>Double</code> data type is faster and requires less memory, but it is subject to rounding errors. The <code>Decimal</code> data type retains complete accuracy to 28 decimal places.  </p>\n<p> Floating-point (<code>Single</code> and <code>Double</code>) numbers have larger ranges than <code>Decimal</code> numbers but can be subject to rounding errors. Floating-point types support fewer significant digits than <code>Decimal</code> but can represent values of greater magnitude.  </p>\n<p> Nonintegral number values can be expressed as mmmEeee, in which mmm is the <em>mantissa</em> (the significant digits) and eee is the <em>exponent</em> (a power of 10). The highest positive values of the nonintegral types are 7.9228162514264337593543950335E+28 for <code>Decimal</code>, 3.4028235E+38 for <code>Single</code>, and 1.79769313486231570E+308 for <code>Double</code>.  </p>\n<h3 id=\"performance-1\">Performance</h3>\n<p> <code>Double</code> is the most efficient of the fractional data types, because the processors on current platforms perform floating-point operations in double precision. However, operations with <code>Double</code> are not as fast as with the integral types such as <code>Integer</code>.  </p>\n<h3 id=\"small-magnitudes\">Small Magnitudes</h3>\n<p> For numbers with the smallest possible magnitude (closest to 0), <code>Double</code> variables can hold numbers as small as -4.94065645841246544E-324 for negative values and 4.94065645841246544E-324 for positive values.  </p>\n<h3 id=\"small-fractional-numbers\">Small Fractional Numbers</h3>\n<p> If you do not need the full range of the <code>Double</code> data type, you can use the <code>Single</code> data type, which can hold floating-point numbers from -3.4028235E+38 through 3.4028235E+38. The smallest magnitudes for <code>Single</code> variables are -1.401298E-45 for negative values and 1.401298E-45 for positive values. If you have a very large number of variables that hold small floating-point numbers, the common language runtime can sometimes store your <code>Single</code> variables more efficiently and save memory consumption.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"elementary-data-types\" data-linktype=\"relative-path\">Elementary Data Types</a><br> <a href=\"character-data-types\" data-linktype=\"relative-path\">Character Data Types</a><br> <a href=\"miscellaneous-data-types\" data-linktype=\"relative-path\">Miscellaneous Data Types</a><br> <a href=\"troubleshooting-data-types\" data-linktype=\"relative-path\">Troubleshooting Data Types</a><br> <a href=\"../../com-interop/how-to-call-a-windows-function-that-takes-unsigned-types\" data-linktype=\"relative-path\">How to: Call a Windows Function that Takes Unsigned Types</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"a27bd4d0-7e14-43eb-9cc4-b42eaab323c9\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"25\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/language-features/data-types/numeric-data-types.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/language-features/data-types/numeric-data-types.md\">\r\n<meta name=\"document_id\" content=\"02bb14e7-8182-3a7e-7b7e-2d9bba2353ea\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc1.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"Numeric Data Types (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"a27bd4d0-7e14-43eb-9cc4-b42eaab323c9","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":25,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["integral types, Visual Basic","Short data type, numeric data types","Double data type, numeric data types","Long data type, Visual Basic numeric data types","numbers, whole","fractions","numbers","whole numbers","integer numbers","numbers, integer","fractional data types","mantissas, of fractional numbers","mantissas","data types [Visual Basic], numeric","Integer data type, numeric data types","exponent, of fractional numbers","integers","numeric data types, Visual Basic","Single data type, numeric types","Decimal data type, numeric data types"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/language-features/data-types/numeric-data-types.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/language-features/data-types/numeric-data-types.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/language-features/data-types/numeric-data-types.md","document_id":"02bb14e7-8182-3a7e-7b7e-2d9bba2353ea","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/language-features/data-types/numeric-data-types","toc_asset_id":"articles/visual-basic/programming-guide/language-features/data-types/toc.json","toc_rel":"toc.json","_op_ogTitle":"Numeric Data Types (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":815,"_op_rawTitle":"<h1 id=\"numeric-data-types-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/language-features/data-types/numeric-data-types.md\" sourcestartlinenumber=\"55\" sourceendlinenumber=\"55\">Numeric Data Types (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/language-features/data-types/numeric-data-types","fileRelativePath":"articles/visual-basic/programming-guide/language-features/data-types/numeric-data-types.html"},"themesRelativePathToOutputRoot":"_themes/"}