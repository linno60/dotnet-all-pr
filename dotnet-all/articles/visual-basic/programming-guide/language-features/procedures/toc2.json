[{"toc_title":"Procedures in Visual Basic","href":"./","children":[{"toc_title":"How to: Create a Procedure","href":"how-to-create-a-procedure"},{"toc_title":"Sub Procedures","href":"sub-procedures","children":[{"toc_title":"How to: Call a Procedure that Does Not Return a Value","href":"how-to-call-a-procedure-that-does-not-return-a-value"},{"toc_title":"How to: Call an Event Handler","href":"how-to-call-an-event-handler"}]},{"toc_title":"Function Procedures","href":"function-procedures","children":[{"toc_title":"How to: Create a Procedure that Returns a Value","href":"how-to-create-a-procedure-that-returns-a-value"},{"toc_title":"How to: Return a Value from a Procedure","href":"how-to-return-a-value-from-a-procedure"},{"toc_title":"How to: Call a Procedure That Returns a Value","href":"how-to-call-a-procedure-that-returns-a-value"}]},{"toc_title":"Property Procedures","href":"property-procedures","children":[{"toc_title":"Auto-Implemented Properties","href":"auto-implemented-properties"},{"toc_title":"Differences Between Properties and Variables","href":"differences-between-properties-and-variables"},{"toc_title":"How to: Create a Property","href":"how-to-create-a-property"},{"toc_title":"How to: Declare a Property with Mixed Access Levels","href":"how-to-declare-a-property-with-mixed-access-levels"},{"toc_title":"How to: Call a Property Procedure","href":"how-to-call-a-property-procedure"},{"toc_title":"How to: Declare and Call a Default Property","href":"how-to-declare-and-call-a-default-property"},{"toc_title":"How to: Put a Value in a Property","href":"how-to-put-a-value-in-a-property"},{"toc_title":"How to: Get a Value from a Property","href":"how-to-get-a-value-from-a-property"}]},{"toc_title":"Operator Procedures","href":"operator-procedures","children":[{"toc_title":"How to: Define an Operator","href":"how-to-define-an-operator"},{"toc_title":"How to: Define a Conversion Operator","href":"how-to-define-a-conversion-operator"},{"toc_title":"How to: Call an Operator Procedure","href":"how-to-call-an-operator-procedure"},{"toc_title":"How to: Use a Class that Defines Operators","href":"how-to-use-a-class-that-defines-operators"}]},{"toc_title":"Procedure Parameters and Arguments","href":"procedure-parameters-and-arguments","children":[{"toc_title":"Differences Between Parameters and Arguments","href":"differences-between-parameters-and-arguments"},{"toc_title":"How to: Define a Parameter for a Procedure","href":"how-to-define-a-parameter-for-a-procedure"},{"toc_title":"How to: Pass Arguments to a Procedure","href":"how-to-pass-arguments-to-a-procedure"},{"toc_title":"Passing Arguments by Value and by Reference","href":"passing-arguments-by-value-and-by-reference","children":[{"toc_title":"Differences Between Modifiable and Nonmodifiable Arguments","href":"differences-between-modifiable-and-nonmodifiable-arguments"},{"toc_title":"Differences Between Passing an Argument By Value and By Reference","href":"differences-between-passing-an-argument-by-value-and-by-reference"},{"toc_title":"How to: Change the Value of a Procedure Argument","href":"how-to-change-the-value-of-a-procedure-argument"},{"toc_title":"How to: Protect a Procedure Argument Against Value Changes","href":"how-to-protect-a-procedure-argument-against-value-changes"},{"toc_title":"How to: Force an Argument to Be Passed by Value","href":"how-to-force-an-argument-to-be-passed-by-value"}]},{"toc_title":"Passing Arguments by Position and by Name","href":"passing-arguments-by-position-and-by-name"},{"toc_title":"Optional Parameters","href":"optional-parameters"},{"toc_title":"Parameter Arrays","href":"parameter-arrays"}]},{"toc_title":"Recursive Procedures","href":"recursive-procedures"},{"toc_title":"Procedure Overloading","href":"procedure-overloading","children":[{"toc_title":"How to: Define Multiple Versions of a Procedure","href":"how-to-define-multiple-versions-of-a-procedure"},{"toc_title":"How to: Call an Overloaded Procedure","href":"how-to-call-an-overloaded-procedure"},{"toc_title":"How to: Overload a Procedure that Takes Optional Parameters","href":"how-to-overload-a-procedure-that-takes-optional-parameters"},{"toc_title":"How to: Overload a Procedure that Takes an Indefinite Number of Parameters","href":"how-to-overload-a-procedure-that-takes-an-indefinite-number-of-parameters"},{"toc_title":"Considerations in Overloading Procedures","href":"considerations-in-overloading-procedures"},{"toc_title":"Overload Resolution","href":"overload-resolution"}]},{"toc_title":"Troubleshooting Procedures","href":"troubleshooting-procedures"},{"toc_title":"Extension Methods","href":"extension-methods","children":[{"toc_title":"How to: Write an Extension Method","href":"how-to-write-an-extension-method"},{"toc_title":"How to: Call an Extension Method","href":"how-to-call-an-extension-method"}]},{"toc_title":"Lambda Expressions","href":"lambda-expressions","children":[{"toc_title":"How to: Create a Lambda Expression","href":"how-to-create-a-lambda-expression"}]},{"toc_title":"Partial Methods","href":"partial-methods"}],"pdf_name":"/articles/visual-basic/programming-guide/language-features/procedures.pdf"}]