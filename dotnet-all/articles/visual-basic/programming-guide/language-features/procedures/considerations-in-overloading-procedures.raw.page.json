{"content":"<div><div class=\"content\">\n<p>When you overload a procedure, you must use a different <em>signature</em> for each overloaded version. This usually means each version must specify a different parameter list. For more information, see &quot;Different Signature&quot; in <a href=\"procedure-overloading\" data-linktype=\"relative-path\">Procedure Overloading</a>.  </p>\n<p> You can overload a <code>Function</code> procedure with a <code>Sub</code> procedure, and vice versa, provided they have different signatures. Two overloads cannot differ only in that one has a return value and the other does not.  </p>\n<p> You can overload a property the same way you overload a procedure, and with the same restrictions. However, you cannot overload a procedure with a property, or vice versa.  </p>\n<h2 id=\"alternatives-to-overloaded-versions\">Alternatives to Overloaded Versions</h2>\n<p> You sometimes have alternatives to overloaded versions, particularly when the presence of arguments is optional or their number is variable.  </p>\n<p> Keep in mind that optional arguments are not necessarily supported by all languages, and parameter arrays are limited to Visual Basic. If you are writing a procedure that is likely to be called from code written in any of several different languages, overloaded versions offer the greatest flexibility.  </p>\n<h3 id=\"overloads-and-optional-arguments\">Overloads and Optional Arguments</h3>\n<p> When the calling code can optionally supply or omit one or more arguments, you can define multiple overloaded versions or use optional parameters.  </p>\n<h4 id=\"when-to-use-overloaded-versions\">When to Use Overloaded Versions</h4>\n<p> You can consider defining a series of overloaded versions in the following cases:  </p>\n<ul>\n<li><p>The logic in the procedure code is significantly different depending on whether the calling code supplies an optional argument or not.  </p>\n</li>\n<li><p>The procedure code cannot reliably test whether the calling code has supplied an optional argument. This is the case, for example, if there is no possible candidate for a default value that the calling code could not be expected to supply.  </p>\n</li>\n</ul>\n<h4 id=\"when-to-use-optional-parameters\">When to Use Optional Parameters</h4>\n<p> You might prefer one or more optional parameters in the following cases:  </p>\n<ul>\n<li>The only required action when the calling code does not supply an optional argument is to set the parameter to a default value. In such a case, the procedure code can be less complicated if you define a single version with one or more <code>Optional</code> parameters.  </li>\n</ul>\n<p> For more information, see <a href=\"optional-parameters\" data-linktype=\"relative-path\">Optional Parameters</a>.  </p>\n<h3 id=\"overloads-and-paramarrays\">Overloads and ParamArrays</h3>\n<p> When the calling code can pass a variable number of arguments, you can define multiple overloaded versions or use a parameter array.  </p>\n<h4 id=\"when-to-use-overloaded-versions-1\">When to Use Overloaded Versions</h4>\n<p> You can consider defining a series of overloaded versions in the following cases:  </p>\n<ul>\n<li><p>You know that the calling code never passes more than a small number of values to the parameter array.  </p>\n</li>\n<li><p>The logic in the procedure code is significantly different depending on how many values the calling code passes.  </p>\n</li>\n<li><p>The calling code can pass values of different data types.  </p>\n</li>\n</ul>\n<h4 id=\"when-to-use-a-parameter-array\">When to Use a Parameter Array</h4>\n<p> You are better served by a <code>ParamArray</code> parameter in the following cases:  </p>\n<ul>\n<li><p>You are not able to predict how many values the calling code can pass to the parameter array, and it could be a large number.  </p>\n</li>\n<li><p>The procedure logic lends itself to iterating through all the values the calling code passes, performing essentially the same operations on every value.  </p>\n</li>\n</ul>\n<p> For more information, see <a href=\"parameter-arrays\" data-linktype=\"relative-path\">Parameter Arrays</a>.  </p>\n<h2 id=\"implicit-overloads-for-optional-parameters\">Implicit Overloads for Optional Parameters</h2>\n<p> A procedure with an <a href=\"../../../language-reference/modifiers/optional\" data-linktype=\"relative-path\">Optional</a> parameter is equivalent to two overloaded procedures, one with the optional parameter and one without it. You cannot overload such a procedure with a parameter list corresponding to either of these. The following declarations illustrate this.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbcnProcedures#58\">Overloads Sub q(ByVal b As Byte, Optional ByVal j As Long = 6)\n</code></pre><pre><code class=\"lang-vb\" name=\"VbVbcnProcedures#60\">&#39; The preceding definition is equivalent to the following two overloads.\n&#39; Overloads Sub q(ByVal b As Byte)\n&#39; Overloads Sub q(ByVal b As Byte, ByVal j As Long)\n</code></pre><pre><code class=\"lang-vb\" name=\"VbVbcnProcedures#61\">&#39; Therefore, the following overload is not valid because the signature is already in use.\n&#39; Overloads Sub q(ByVal c As Byte, ByVal k As Long)\n&#39; The following overload uses a different signature and is valid.\nOverloads Sub q(ByVal b As Byte, ByVal j As Long, ByVal s As Single)\n</code></pre><p> For a procedure with more than one optional parameter, there is a set of implicit overloads, arrived at by logic similar to that in the preceding example.  </p>\n<h2 id=\"implicit-overloads-for-a-paramarray-parameter\">Implicit Overloads for a ParamArray Parameter</h2>\n<p> The compiler considers a procedure with a <a href=\"../../../language-reference/modifiers/paramarray\" data-linktype=\"relative-path\">ParamArray</a> parameter to have an infinite number of overloads, differing from each other in what the calling code passes to the parameter array, as follows:  </p>\n<ul>\n<li><p>One overload for when the calling code does not supply an argument to the <code>ParamArray</code>  </p>\n</li>\n<li><p>One overload for when the calling code supplies a one-dimensional array of the <code>ParamArray</code> element type  </p>\n</li>\n<li><p>For every positive integer, one overload for when the calling code supplies that number of arguments, each of the <code>ParamArray</code> element type  </p>\n</li>\n</ul>\n<p> The following declarations illustrate these implicit overloads.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbcnProcedures#68\">Overloads Sub p(ByVal d As Date, ByVal ParamArray c() As Char)\n</code></pre><pre><code class=\"lang-vb\" name=\"VbVbcnProcedures#70\">&#39; The preceding definition is equivalent to the following overloads.\n&#39; Overloads Sub p(ByVal d As Date)\n&#39; Overloads Sub p(ByVal d As Date, ByVal c() As Char)\n&#39; Overloads Sub p(ByVal d As Date, ByVal c1 As Char)\n&#39; Overloads Sub p(ByVal d As Date, ByVal c1 As Char, ByVal c2 As Char)\n&#39; And so on, with an additional Char argument in each successive overload.\n</code></pre><p> You cannot overload such a procedure with a parameter list that takes a one-dimensional array for the parameter array. However, you can use the signatures of the other implicit overloads. The following declarations illustrate this.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbcnProcedures#71\">&#39; The following overload is not valid because it takes an array for the parameter array.\n&#39; Overloads Sub p(ByVal x As Date, ByVal y() As Char)\n&#39; The following overload takes a single value for the parameter array and is valid.\nOverloads Sub p(ByVal z As Date, ByVal w As Char)\n</code></pre><h2 id=\"typeless-programming-as-an-alternative-to-overloading\">Typeless Programming as an Alternative to Overloading</h2>\n<p> If you want to allow the calling code to pass different data types to a parameter, an alternative approach is typeless programming. You can set the type checking switch to <code>Off</code> with either the <a href=\"../../../language-reference/statements/option-strict-statement\" data-linktype=\"relative-path\">Option Strict Statement</a> or the <a href=\"../../../reference/command-line-compiler/optionstrict\" data-linktype=\"relative-path\">/optionstrict</a> compiler option. Then you do not have to declare the parameter&#39;s data type. However, this approach has the following disadvantages compared to overloading:  </p>\n<ul>\n<li><p>Typeless programming produces less efficient execution code.  </p>\n</li>\n<li><p>The procedure must test for every data type it anticipates being passed.  </p>\n</li>\n<li><p>The compiler cannot signal an error if the calling code passes a data type that the procedure does not support.  </p>\n</li>\n</ul>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"index\" data-linktype=\"relative-path\">Procedures</a><br> <a href=\"procedure-parameters-and-arguments\" data-linktype=\"relative-path\">Procedure Parameters and Arguments</a><br> <a href=\"troubleshooting-procedures\" data-linktype=\"relative-path\">Troubleshooting Procedures</a><br> <a href=\"how-to-define-multiple-versions-of-a-procedure\" data-linktype=\"relative-path\">How to: Define Multiple Versions of a Procedure</a><br> <a href=\"how-to-call-an-overloaded-procedure\" data-linktype=\"relative-path\">How to: Call an Overloaded Procedure</a><br> <a href=\"how-to-overload-a-procedure-that-takes-optional-parameters\" data-linktype=\"relative-path\">How to: Overload a Procedure that Takes Optional Parameters</a><br> <a href=\"how-to-overload-a-procedure-that-takes-an-indefinite-number-of-parameters\" data-linktype=\"relative-path\">How to: Overload a Procedure that Takes an Indefinite Number of Parameters</a><br> <a href=\"overload-resolution\" data-linktype=\"relative-path\">Overload Resolution</a><br> <a href=\"../../../language-reference/modifiers/overloads\" data-linktype=\"relative-path\">Overloads</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"a2001248-10d0-42c5-b0ce-eeedc987319f\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"26\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/language-features/procedures/considerations-in-overloading-procedures.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/language-features/procedures/considerations-in-overloading-procedures.md\">\r\n<meta name=\"document_id\" content=\"87be9f1c-4ddd-e82d-1149-90a04b526959\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"Considerations in Overloading Procedures (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"a2001248-10d0-42c5-b0ce-eeedc987319f","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":26,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["signatures, ParamArray arguments","ParamArray keyword, parameter arrays","ParamArray keyword, arguments and signatures","function overloading, implicit overloads for ParamArray","ParamArray keyword, signatures","Visual Basic code, procedures","arguments [Visual Basic], parameter arrays","procedures, overloading","parameters, lists","function overloading, typeless programming","typeless programming","function overloading, restrictions","arguments [Visual Basic], optional","optional arguments, overloading","signatures, procedure","parameter lists","parameter arrays, overloading arguments","Visual Basic code, parameter lists","procedure overloading, considerations","Option Explicit statement","restrictions, overloading procedures","procedures, parameter lists"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/language-features/procedures/considerations-in-overloading-procedures.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/language-features/procedures/considerations-in-overloading-procedures.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/language-features/procedures/considerations-in-overloading-procedures.md","document_id":"87be9f1c-4ddd-e82d-1149-90a04b526959","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/language-features/procedures/considerations-in-overloading-procedures","toc_asset_id":"articles/visual-basic/programming-guide/language-features/procedures/toc.json","toc_rel":"toc.json","_op_ogTitle":"Considerations in Overloading Procedures (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":1094,"_op_rawTitle":"<h1 id=\"considerations-in-overloading-procedures-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/language-features/procedures/considerations-in-overloading-procedures.md\" sourcestartlinenumber=\"57\" sourceendlinenumber=\"57\">Considerations in Overloading Procedures (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/language-features/procedures/considerations-in-overloading-procedures","fileRelativePath":"articles/visual-basic/programming-guide/language-features/procedures/considerations-in-overloading-procedures.html"},"themesRelativePathToOutputRoot":"_themes/"}