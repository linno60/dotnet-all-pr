{"content":"<div><div class=\"content\">\n<p>Extension methods enable you to add methods to an existing class. The extension method can be called as if it were an instance of that class.  </p>\n<h3 id=\"to-define-an-extension-method\">To define an extension method</h3>\n<ol>\n<li><p>Open a new or existing Visual Basic application in Visual Studio.  </p>\n</li>\n<li><p>At the top of the file in which you want to define an extension method, include the following import statement:  </p>\n<pre class=\"loading\"><code>Imports System.Runtime.CompilerServices  \n</code></pre></li>\n<li><p>Within a module in your new or existing application, begin the method definition with the extension attribute:  </p>\n<pre class=\"loading\"><code>&lt;Extension()&gt;  \n</code></pre></li>\n<li><p>Declare your method in the ordinary way, except that the type of the first parameter must be the data type you want to extend.  </p>\n<pre class=\"loading\"><code>&lt;Extension()&gt;   \nPublic Sub subName (ByVal para1 As ExtendedType, &lt;other parameters&gt;)  \n     &#39; &lt; Body of the method &gt;  \nEnd Sub  \n</code></pre></li>\n</ol>\n<h2 id=\"example\">Example</h2>\n<p> The following example declares an extension method in module <code>StringExtensions</code>. A second module, <code>Module1</code>, imports <code>StringExtensions</code> and calls the method. The extension method must be in scope when it is called. Extension method <code>PrintAndPunctuate</code> extends the <a class=\"xref\" href=\"../../../../../api/system.string\" data-linktype=\"relative-path\">String</a> class with a method that displays the string instance followed by a string of punctuation symbols sent in as a parameter.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">&#39; Declarations will typically be in a separate module.  \nImports System.Runtime.CompilerServices  \n\nModule StringExtensions  \n    &lt;Extension()&gt;   \n    Public Sub PrintAndPunctuate(ByVal aString As String,   \n                                 ByVal punc As String)  \n        Console.WriteLine(aString &amp; punc)  \n    End Sub  \n\nEnd Module  \n</code></pre><pre class=\"loading\"><code class=\"lang-vb\">&#39; Import the module that holds the extension method you want to use,   \n&#39; and call it.  \n\nImports ConsoleApplication2.StringExtensions  \n\nModule Module1  \n\n    Sub Main()  \n        Dim example = &quot;Hello&quot;  \n        example.PrintAndPunctuate(&quot;?&quot;)  \n        example.PrintAndPunctuate(&quot;!!!!&quot;)  \n    End Sub  \n\nEnd Module  \n</code></pre><p> Notice that the method is defined with two parameters and called with only one. The first parameter, <code>aString</code>, in the method definition is bound to <code>example</code>, the instance of <code>String</code> that calls the method. The output of the example is as follows:  </p>\n<p> <code>Hello?</code>  </p>\n<p> <code>Hello!!!!</code>  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../../api/system.runtime.compilerservices.extensionattribute\" data-linktype=\"relative-path\">ExtensionAttribute</a><br> <a href=\"extension-methods\" data-linktype=\"relative-path\">Extension Methods</a><br> <a href=\"../../../language-reference/statements/module-statement\" data-linktype=\"relative-path\">Module Statement</a><br> <a href=\"procedure-parameters-and-arguments\" data-linktype=\"relative-path\">Procedure Parameters and Arguments</a><br> <a href=\"../declared-elements/scope\" data-linktype=\"relative-path\">Scope in Visual Basic</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet/toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"fb2739cc-958d-4ef4-a38b-214a74c93413\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"11\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/language-features/procedures/how-to-write-an-extension-method.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/language-features/procedures/how-to-write-an-extension-method.md\">\r\n<meta name=\"document_id\" content=\"28347574-8cf8-2d83-03d6-4bc3799ed688\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"How to: Write an Extension Method (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"fb2739cc-958d-4ef4-a38b-214a74c93413","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":11,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["extending data types","writing extension methods","extension methods [Visual Basic]"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/language-features/procedures/how-to-write-an-extension-method.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/language-features/procedures/how-to-write-an-extension-method.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/language-features/procedures/how-to-write-an-extension-method.md","document_id":"28347574-8cf8-2d83-03d6-4bc3799ed688","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/language-features/procedures/how-to-write-an-extension-method","toc_asset_id":"articles/visual-basic/programming-guide/language-features/procedures/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Write an Extension Method (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":305,"_op_rawTitle":"<h1 id=\"how-to-write-an-extension-method-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/language-features/procedures/how-to-write-an-extension-method.md\" sourcestartlinenumber=\"38\" sourceendlinenumber=\"38\">How to: Write an Extension Method (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/language-features/procedures/how-to-write-an-extension-method","fileRelativePath":"articles/visual-basic/programming-guide/language-features/procedures/how-to-write-an-extension-method.html"},"themesRelativePathToOutputRoot":"_themes/"}