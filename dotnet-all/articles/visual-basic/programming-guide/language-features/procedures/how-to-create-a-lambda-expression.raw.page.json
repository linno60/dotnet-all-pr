{"content":"<div><div class=\"content\">\n<p>A <em>lambda expression</em> is a function or subroutine that does not have a name. A lambda expression can be used wherever a delegate type is valid.  </p>\n<h3 id=\"to-create-a-single-line-lambda-expression-function\">To create a single-line lambda expression function</h3>\n<ol>\n<li><p>In any situation where a delegate type could be used, type the keyword <code>Function</code>, as in the following example:  </p>\n<p> <code>Dim add1 =</code>   <code>Function</code>  </p>\n</li>\n<li><p>In parentheses, directly after <code>Function</code>, type the parameters of the function. Notice that you do not specify a name after <code>Function</code>.  </p>\n<p> <code>Dim add1 = Function</code>   <code>(num As Integer)</code>  </p>\n</li>\n<li><p>Following the parameter list, type a single expression as the body of the function. The value that the expression evaluates to is the value returned by the function. You do not use an <code>As</code> clause to specify the return type.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrLambdas#1\">        Dim add1 = Function(num As Integer) num + 1\n</code></pre><p> You call the lambda expression by passing in an integer argument.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrLambdas#2\">        &#39; The following line prints 6.\n        Console.WriteLine(add1(5))\n</code></pre></li>\n<li><p>Alternatively, the same result is accomplished by the following example:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrLambdas#3\">        Console.WriteLine((Function(num As Integer) num + 1)(5))\n</code></pre></li>\n</ol>\n<h3 id=\"to-create-a-single-line-lambda-expression-subroutine\">To create a single-line lambda expression subroutine</h3>\n<ol>\n<li><p>In any situation where a delegate type could be used, type the keyword <code>Sub</code>, as shown in the following example.  </p>\n<p> <code>Dim add1 =</code>   <code>Sub</code>  </p>\n</li>\n<li><p>In parentheses, directly after <code>Sub</code>, type the parameters of the subroutine. Notice that you do not specify a name after <code>Sub</code>.  </p>\n<p> <code>Dim add1 = Sub</code>   <code>(msg As String)</code>  </p>\n</li>\n<li><p>Following the parameter list, type a single statement as the body of the subroutine.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrLambdas#17\">        Dim writeMessage = Sub(msg As String) Console.WriteLine(msg)\n</code></pre><p> You call the lambda expression by passing in a string argument.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrLambdas#18\">        &#39; The following line prints &quot;Hello&quot;.\n        writeMessage(&quot;Hello&quot;)\n</code></pre></li>\n</ol>\n<h3 id=\"to-create-a-multiline-lambda-expression-function\">To create a multiline lambda expression function</h3>\n<ol>\n<li><p>In any situation where a delegate type could be used, type the keyword <code>Function</code>, as shown in the following example.  </p>\n<p> <code>Dim add1 =</code>   <code>Function</code>  </p>\n</li>\n<li><p>In parentheses, directly after <code>Function</code>, type the parameters of the function. Notice that you do not specify a name after <code>Function</code>.  </p>\n<p> <code>Dim add1 = Function</code>   <code>(index As Integer)</code>  </p>\n</li>\n<li><p>Press ENTER. The <code>End Function</code> statement is automatically added.  </p>\n</li>\n<li><p>Within the body of the function, add the following code to create an expression and return the value. You do not use an <code>As</code> clause to specify the return type.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrLambdas#19\">        Dim getSortColumn = Function(index As Integer)\n                                Select Case index\n                                    Case 0\n                                        Return &quot;FirstName&quot;\n                                    Case 1\n                                        Return &quot;LastName&quot;\n                                    Case 2\n                                        Return &quot;CompanyName&quot;\n                                    Case Else\n                                        Return &quot;LastName&quot;\n                                End Select\n                            End Function\n</code></pre><p> You call the lambda expression by passing in an integer argument.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrLambdas#20\">        Dim sortColumn = getSortColumn(0)\n</code></pre></li>\n</ol>\n<h3 id=\"to-create-a-multiline-lambda-expression-subroutine\">To create a multiline lambda expression subroutine</h3>\n<ol>\n<li><p>In any situation where a delegate type could be used, type the keyword <code>Sub</code>, as shown in the following example:  </p>\n<p> <code>Dim add1 =</code>   <code>Sub</code>  </p>\n</li>\n<li><p>In parentheses, directly after <code>Sub</code>, type the parameters of the subroutine. Notice that you do not specify a name after <code>Sub</code>.  </p>\n<p> <code>Dim add1 = Sub</code>  <code>(msg As String)</code>  </p>\n</li>\n<li><p>Press ENTER. The <code>End Sub</code> statement is automatically added.  </p>\n</li>\n<li><p>Within the body of the function, add the following code to execute when the subroutine is invoked.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrLambdas#21\">        Dim writeToLog = Sub(msg As String)\n                             Dim log As New EventLog()\n                             log.Source = &quot;Application&quot;\n                             log.WriteEntry(msg)\n                             log.Close()\n                         End Sub\n</code></pre><p> You call the lambda expression by passing in a string argument.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrLambdas#22\">        writeToLog(&quot;Application started.&quot;)\n</code></pre></li>\n</ol>\n<h2 id=\"example\">Example</h2>\n<p> A common use of lambda expressions is to define a function that can be passed in as the argument for a parameter whose type is <code>Delegate</code>. In the following example, the <a class=\"xref\" href=\"../../../../../api/system.diagnostics.process#System_Diagnostics_Process_GetProcesses_\" data-linktype=\"relative-path\">GetProcesses</a> method returns an array of the processes running on the local computer. The <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb301979(v=vs.110).aspx\" data-linktype=\"external\">Where</a> method from the <a class=\"xref\" href=\"../../../../../api/system.linq.enumerable\" data-linktype=\"relative-path\">Enumerable</a> class requires a <code>Boolean</code> delegate as its argument. The lambda expression in the example is used for that purpose. It returns <code>True</code> for each process that has only one thread, and those are selected in <code>filteredList</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrLambdas#10\">    Sub Main()\n\n        &#39; Create an array of running processes.\n        Dim procList As Process() = Diagnostics.Process.GetProcesses\n\n        &#39; Return the processes that have one thread. Notice that the type\n        &#39; of the parameter does not have to be explicitly stated.\n        Dim filteredList = procList.Where(Function(p) p.Threads.Count = 1)\n\n        &#39; Display the name of each selected process.\n        For Each proc In filteredList\n            MsgBox(proc.ProcessName)\n        Next\n\n    End Sub\n</code></pre><p> The previous example is equivalent to the following code, which is written in Language-Integrated Query (LINQ) syntax:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrLambdas#11\">    Sub Main()\n\n        Dim filteredQuery = From proc In Diagnostics.Process.GetProcesses\n                            Where proc.Threads.Count = 1\n                            Select proc\n\n        For Each proc In filteredQuery\n            MsgBox(proc.ProcessName)\n        Next\n    End Sub\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../../api/system.linq.enumerable\" data-linktype=\"relative-path\">Enumerable</a><br> <a href=\"lambda-expressions\" data-linktype=\"relative-path\">Lambda Expressions</a><br> <a href=\"../../../language-reference/statements/function-statement\" data-linktype=\"relative-path\">Function Statement</a><br> <a href=\"../../../language-reference/statements/sub-statement\" data-linktype=\"relative-path\">Sub Statement</a><br> <a href=\"../delegates/index\" data-linktype=\"relative-path\">Delegates</a><br> <a href=\"../delegates/how-to-pass-procedures-to-another-procedure\" data-linktype=\"relative-path\">How to: Pass Procedures to Another Procedure in Visual Basic</a><br> <a href=\"../../../language-reference/statements/delegate-statement\" data-linktype=\"relative-path\">Delegate Statement</a><br> <a href=\"../linq/introduction-to-linq\" data-linktype=\"relative-path\">Introduction to LINQ in Visual Basic</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"3279bd5c-80f7-410a-a7ba-f7085ed36aa5\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"27\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/0a5d76c154aeb9b749c9c3fc5ad0962e93754a62/docs/visual-basic/programming-guide/language-features/procedures/how-to-create-a-lambda-expression.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/language-features/procedures/how-to-create-a-lambda-expression.md\">\r\n<meta name=\"document_id\" content=\"405797bf-5ba5-c7a6-df6e-6a5f9d4c3d02\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"How to: Create a Lambda Expression (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"3279bd5c-80f7-410a-a7ba-f7085ed36aa5","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":27,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["lambda expressions [Visual Basic]","expressions [Visual Basic], lambda"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Reorganizing the VB TOC (#1348)","commit_sha":"0a5d76c154aeb9b749c9c3fc5ad0962e93754a62","commit_date":"2017-02-14 10:22:48 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/0a5d76c154aeb9b749c9c3fc5ad0962e93754a62/docs/visual-basic/programming-guide/language-features/procedures/how-to-create-a-lambda-expression.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/language-features/procedures/how-to-create-a-lambda-expression.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/language-features/procedures/how-to-create-a-lambda-expression.md","document_id":"405797bf-5ba5-c7a6-df6e-6a5f9d4c3d02","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/language-features/procedures/how-to-create-a-lambda-expression","toc_asset_id":"articles/visual-basic/programming-guide/language-features/procedures/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Create a Lambda Expression (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":737,"_op_rawTitle":"<h1 id=\"how-to-create-a-lambda-expression-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/language-features/procedures/how-to-create-a-lambda-expression.md\" sourcestartlinenumber=\"37\" sourceendlinenumber=\"37\">How to: Create a Lambda Expression (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/language-features/procedures/how-to-create-a-lambda-expression","fileRelativePath":"articles/visual-basic/programming-guide/language-features/procedures/how-to-create-a-lambda-expression.html"},"themesRelativePathToOutputRoot":"_themes/"}