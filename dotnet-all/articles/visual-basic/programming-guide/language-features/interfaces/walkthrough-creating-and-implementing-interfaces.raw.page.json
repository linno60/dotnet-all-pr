{"content":"<div><div class=\"content\">\n<p>Interfaces describe the characteristics of properties, methods, and events, but leave the implementation details up to structures or classes.  </p>\n<p> This walkthrough demonstrates how to declare and implement an interface.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This walkthrough doesn&#39;t provide information about how to create a user interface.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p>Your computer might show different names or locations for some of the Visual Studio user interface elements in the following instructions. The Visual Studio edition that you have and the settings that you use determine these elements. For more information, see <a href=\"https://docs.microsoft.com/visualstudio/ide/personalizing-the-visual-studio-ide\" data-linktype=\"external\">Personalizing the IDE</a>.</p>\n</div>\n<h3 id=\"to-define-an-interface\">To define an interface</h3>\n<ol>\n<li><p>Open a new Visual Basic Windows Application project.  </p>\n</li>\n<li><p>Add a new module to the project by clicking <strong>Add Module</strong> on the <strong>Project</strong> menu.  </p>\n</li>\n<li><p>Name the new module <code>Module1.vb</code> and click <strong>Add</strong>. The code for the new module is displayed.  </p>\n</li>\n<li><p>Define an interface named <code>TestInterface</code> within <code>Module1</code> by typing <code>Interface TestInterface</code> between the <code>Module</code> and <code>End Module</code> statements, and then pressing ENTER. The <strong>Code Editor</strong> indents the <code>Interface</code> keyword and adds an <code>End Interface</code> statement to form a code block.  </p>\n</li>\n<li><p>Define a property, method, and event for the interface by placing the following code between the <code>Interface</code> and <code>End Interface</code> statements:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrOOP#98\">            Property Prop1() As Integer\n            Sub Method1(ByVal X As Integer)\n            Event Event1()\n</code></pre></li>\n</ol>\n<h2 id=\"implementation\">Implementation</h2>\n<p> You may notice that the syntax used to declare interface members is different from the syntax used to declare class members. This difference reflects the fact that interfaces cannot contain implementation code.  </p>\n<h4 id=\"to-implement-the-interface\">To implement the interface</h4>\n<ol>\n<li><p>Add a class named <code>ImplementationClass</code> by adding the following statement to <code>Module1</code>, after the <code>End Interface</code> statement but before the <code>End Module</code> statement, and then pressing ENTER:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrOOP#99\">            Class ImplementationClass\n</code></pre><p> If you are working within the integrated development environment, the <strong>Code Editor</strong> supplies a matching <code>End Class</code> statement when you press ENTER.  </p>\n</li>\n<li><p>Add the following <code>Implements</code> statement to <code>ImplementationClass</code>, which names the interface the class implements:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrOOP#100\">                Implements TestInterface\n</code></pre><p> When listed separately from other items at the top of a class or structure, the <code>Implements</code> statement indicates that the class or structure implements an interface.  </p>\n<p> If you are working within the integrated development environment, the <strong>Code Editor</strong> implements the class members required by <code>TestInterface</code> when you press ENTER, and you can skip the next step.  </p>\n</li>\n<li><p>If you are not working within the integrated development environment, you must implement all the members of the interface <code>MyInterface</code>. Add the following code to <code>ImplementationClass</code> to implement <code>Event1</code>, <code>Method1</code>, and <code>Prop1</code>:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrOOP#101\">                Event Event1() Implements TestInterface.Event1\n\n                Public Sub Method1(ByVal X As Integer) Implements TestInterface.Method1\n                End Sub\n\n                Public Property Prop1() As Integer Implements TestInterface.Prop1\n                    Get\n                    End Get\n                    Set(ByVal value As Integer)\n                    End Set\n                End Property\n</code></pre><p> The <code>Implements</code> statement names the interface and interface member being implemented.  </p>\n</li>\n<li><p>Complete the definition of <code>Prop1</code> by adding a private field to the class that stored the property value:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrOOP#102\">            &#39; Holds the value of the property.\n            Private pval As Integer\n</code></pre><p> Return the value of the <code>pval</code> from the property get accessor.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrOOP#103\">                    Return pval\n</code></pre><p> Set the value of <code>pval</code> in the property set accessor.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrOOP#104\">                    pval = value\n</code></pre></li>\n<li><p>Complete the definition of <code>Method1</code> by adding the following code.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrOOP#105\">                MsgBox(&quot;The X parameter for Method1 is &quot; &amp; X)\n                RaiseEvent Event1()\n</code></pre></li>\n</ol>\n<h4 id=\"to-test-the-implementation-of-the-interface\">To test the implementation of the interface</h4>\n<ol>\n<li><p>Right-click the startup form for your project in the <strong>Solution Explorer</strong>, and click <strong>View Code</strong>. The editor displays the class for your startup form. By default, the startup form is called <code>Form1</code>.  </p>\n</li>\n<li><p>Add the following <code>testInstance</code> field to the <code>Form1</code> class:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrOOP#120\">        Dim WithEvents testInstance As TestInterface\n</code></pre><p> By declaring <code>testInstance</code> as <code>WithEvents</code>, the <code>Form1</code> class can handle its events.  </p>\n</li>\n<li><p>Add the following event handler to the <code>Form1</code> class to handle events raised by <code>testInstance</code>:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrOOP#106\">        Sub EventHandler() Handles testInstance.Event1\n            MsgBox(&quot;The event handler caught the event.&quot;)\n        End Sub\n</code></pre></li>\n<li><p>Add a subroutine named <code>Test</code> to the <code>Form1</code> class to test the implementation class:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrOOP#107\">        Sub Test()\n            &#39;  Create an instance of the class.\n            Dim T As New ImplementationClass\n            &#39; Assign the class instance to the interface.\n            &#39; Calls to the interface members are \n            &#39; executed through the class instance.\n            testInstance = T\n            &#39; Set a property.\n            testInstance.Prop1 = 9\n            &#39; Read the property.\n            MsgBox(&quot;Prop1 was set to &quot; &amp; testInstance.Prop1)\n            &#39;  Test the method and raise an event.\n            testInstance.Method1(5)\n        End Sub\n</code></pre><p> The <code>Test</code> procedure creates an instance of the class that implements <code>MyInterface</code>, assigns that instance to the <code>testInstance</code> field, sets a property, and runs a method through the interface.  </p>\n</li>\n<li><p>Add code to call the <code>Test</code> procedure from the <code>Form1 Load</code> procedure of your startup form:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrOOP#108\">        Private Sub Form1_Load(ByVal sender As System.Object, \n                               ByVal e As System.EventArgs) Handles MyBase.Load\n            Test() &#39; Test the class.\n        End Sub\n</code></pre></li>\n<li><p>Run the <code>Test</code> procedure by pressing F5. The message &quot;Prop1 was set to 9&quot; is displayed. After you click OK, the message &quot;The X parameter for Method1 is 5&quot; is displayed. Click OK, and the message &quot;The event handler caught the event&quot; is displayed.  </p>\n</li>\n</ol>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../../../language-reference/statements/implements-statement\" data-linktype=\"relative-path\">Implements Statement</a><br> <a href=\"index\" data-linktype=\"relative-path\">Interfaces</a><br> <a href=\"../../../language-reference/statements/interface-statement\" data-linktype=\"relative-path\">Interface Statement</a><br> <a href=\"../../../language-reference/statements/event-statement\" data-linktype=\"relative-path\">Event Statement</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-all/api/toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"ded82af2-9f52-4232-98ef-fe458180f112\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"22\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/0a5d76c154aeb9b749c9c3fc5ad0962e93754a62/docs/visual-basic/programming-guide/language-features/interfaces/walkthrough-creating-and-implementing-interfaces.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/language-features/interfaces/walkthrough-creating-and-implementing-interfaces.md\">\r\n<meta name=\"document_id\" content=\"441e66bd-47ad-2557-5e99-a4b7d22563e2\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Creating and Implementing Interfaces (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"ded82af2-9f52-4232-98ef-fe458180f112","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":22,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["interfaces, walkthroughs","interfaces, testing","interface implementation, walkthrough","interfaces, creating"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Reorganizing the VB TOC (#1348)","commit_sha":"0a5d76c154aeb9b749c9c3fc5ad0962e93754a62","commit_date":"2017-02-14 10:22:48 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Petr Onderka","author_email":"gsvick@gmail.com","committer_name":"Maira Wenzel","comitter_email":"mairaw@microsoft.com","message":"Fixed included notes (#1275)","commit_sha":"eca9acb54f87a9c5d6ba0f632a222d43318e74c3","commit_date":"2016-11-19 17:12:50 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"},{"profile_url":"https://github.com/svick","display_name":"Petr Onderka","id":"287848"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/0a5d76c154aeb9b749c9c3fc5ad0962e93754a62/docs/visual-basic/programming-guide/language-features/interfaces/walkthrough-creating-and-implementing-interfaces.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/language-features/interfaces/walkthrough-creating-and-implementing-interfaces.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/language-features/interfaces/walkthrough-creating-and-implementing-interfaces.md","document_id":"441e66bd-47ad-2557-5e99-a4b7d22563e2","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/programming-guide/language-features/interfaces/walkthrough-creating-and-implementing-interfaces","toc_asset_id":"articles/toc.json","toc_rel":"../../../../toc.json","_op_ogTitle":"Creating and Implementing Interfaces (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":803,"_op_rawTitle":"<h1 id=\"walkthrough-creating-and-implementing-interfaces-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/language-features/interfaces/walkthrough-creating-and-implementing-interfaces.md\" sourcestartlinenumber=\"39\" sourceendlinenumber=\"39\">Walkthrough: Creating and Implementing Interfaces (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/programming-guide/language-features/interfaces/walkthrough-creating-and-implementing-interfaces","fileRelativePath":"articles/visual-basic/programming-guide/language-features/interfaces/walkthrough-creating-and-implementing-interfaces.html"},"themesRelativePathToOutputRoot":"_themes/"}