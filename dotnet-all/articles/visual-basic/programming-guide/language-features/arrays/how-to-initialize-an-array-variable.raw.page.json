{"content":"<div><div class=\"content\">\n<p>You initialize an array variable by including an array literal in a <code>New</code> clause and specifying the initial values of the array. You can either specify the type or allow it to be inferred from the values in the array literal. For more information about how the type is inferred, see &quot;Populating an Array with Initial Values&quot; in <a href=\"index\" data-linktype=\"relative-path\">Arrays</a>.  </p>\n<h3 id=\"to-initialize-an-array-variable-by-using-an-array-literal\">To initialize an array variable by using an array literal</h3>\n<ul>\n<li><p>Either in the <code>New</code> clause, or when you assign the array value, supply the element values inside braces (<code>{}</code>). The following example shows several ways to declare, create, and initialize a variable to contain an array that has elements of type <code>Char</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrArrays#16\">        &#39; The following five lines of code create the same array.\n        &#39; Preferred syntaxes are on the lines with chars1 and chars2.\n        Dim chars1 = {&quot;%&quot;c, &quot;&amp;&quot;c, &quot;@&quot;c}\n        Dim chars2 As Char() = {&quot;%&quot;c, &quot;&amp;&quot;c, &quot;@&quot;c}\n\n        Dim chars3() As Char = {&quot;%&quot;c, &quot;&amp;&quot;c, &quot;@&quot;c}\n        Dim chars4 As Char() = New Char(2) {&quot;%&quot;c, &quot;&amp;&quot;c, &quot;@&quot;c}\n        Dim chars5() As Char = New Char(2) {&quot;%&quot;c, &quot;&amp;&quot;c, &quot;@&quot;c}\n</code></pre><p> After each statement executes, the array that&#39;s created has a length of 3, with elements at index 0 through index 2 containing the initial values. If you supply both the upper bound and the values, you must include a value for every element from index 0 through the upper bound.  </p>\n<p> Notice that you do not have to specify the index upper bound if you supply element values in an array literal. If no upper bound is specified, the size of the array is inferred based on the number of values in the array literal.  </p>\n</li>\n</ul>\n<h3 id=\"to-initialize-a-multidimensional-array-variable-by-using-array-literals\">To initialize a multidimensional array variable by using array literals</h3>\n<ul>\n<li><p>Nest values inside braces (<code>{}</code>) within braces. Ensure that the nested array literals all infer as arrays of the same type and length. The following code example shows several examples of multidimensional array initialization.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrArrays#17\">        Dim numbers = {{1, 2}, {3, 4}, {5, 6}}\n        Dim customerData = {{&quot;City Power &amp; Light&quot;, &quot;http://www.cpandl.com/&quot;},\n                            {&quot;Wide World Importers&quot;, &quot;http://wideworldimporters.com&quot;},\n                            {&quot;Lucerne Publishing&quot;, &quot;http://www.lucernepublishing.com&quot;}}\n\n        &#39; You can nest array literals to create arrays that have more than two \n        &#39; dimensions.\n        Dim twoSidedCube = {{{1, 2}, {3, 4}}, {{5, 6}, {7, 8}}}\n</code></pre></li>\n<li><p>You can explicitly specify the array bounds, or leave them out and have the compiler infer the array bounds based on the values in the array literal. If you supply both the upper bounds and the values, you must include a value for every element from index 0 through the upper bound in every dimension. The following example shows several ways to declare, create, and initialize a variable to contain a two-dimensional array that has elements of type <code>Short</code>  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrArrays#18\">        &#39; The following five lines of code create the same array.\n        &#39; Preferred syntaxes are on the lines with scores1 and scores2.\n        Dim scores1 = {{10S, 10S, 10S}, {10S, 10S, 10S}}\n        Dim scores2 As Short(,) = {{10, 10, 10}, {10, 10, 10}}\n\n        Dim scores3(,) As Short = {{10, 10, 10}, {10, 10, 10}}\n        Dim scores4 As Short(,) = New Short(1, 2) {{10, 10, 10}, {10, 10, 10}}\n        Dim scores5(,) As Short = New Short(1, 2) {{10, 10, 10}, {10, 10, 10}}\n</code></pre><p> After each statement executes, the created array contains six initialized elements that have indexes <code>(0,0)</code>, <code>(0,1)</code>, <code>(0,2)</code>, <code>(1,0)</code>, <code>(1,1)</code>, and <code>(1,2)</code>. Each array location contains the value <code>10</code>.  </p>\n</li>\n<li><p>The following example iterates through a multidimensional array. In a Windows console application that is written in Visual Basic, paste the code inside the <code>Sub Main()</code> method. The last comments show the output.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrArrays#31\">        Dim numbers = {{1, 2}, {3, 4}, {5, 6}}\n\n        &#39; Iterate through the array.\n        For index0 = 0 To numbers.GetUpperBound(0)\n            For index1 = 0 To numbers.GetUpperBound(1)\n                Debug.Write(numbers(index0, index1).ToString &amp; &quot; &quot;)\n            Next\n            Debug.WriteLine(&quot;&quot;)\n        Next\n        &#39; Output\n        &#39;  1 2\n        &#39;  3 4\n        &#39;  5 6\n</code></pre></li>\n</ul>\n<h3 id=\"to-initialize-a-jagged-array-variable-by-using-array-literals\">To initialize a jagged array variable by using array literals</h3>\n<ul>\n<li><p>Nest object values inside braces (<code>{}</code>). Although you can also nest array literals that specify arrays of different lengths, in the case of a jagged array, make sure that that the nested array literals are enclosed in parentheses (<code>()</code>). The parentheses force the evaluation of the nested array literals, and the resulting arrays are used as the initial values of the jagged array. The following code example shows two examples of jagged array initialization.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrArrays#19\">        &#39; Create a jagged array of arrays that have different lengths.\n        Dim jaggedNumbers = {({1, 2, 3}), ({4, 5}), ({6}), ({7})}\n\n        &#39; Create a jagged array of Byte arrays.\n        Dim images = {New Byte() {}, New Byte() {}, New Byte() {}}\n</code></pre></li>\n<li><p>The following example iterates through a jagged array. In a Windows console application that is written in Visual Basic, paste the code inside the <code>Sub Main()</code> method.  The last comments in the code show the output.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrArrays#32\">        &#39; Create a jagged array of arrays that have different lengths.\n        Dim jaggedNumbers = {({1, 2, 3}), ({4, 5}), ({6}), ({7})}\n\n        For indexA = 0 To jaggedNumbers.Length - 1\n            For indexB = 0 To jaggedNumbers(indexA).Length - 1\n                Debug.Write(jaggedNumbers(indexA)(indexB) &amp; &quot; &quot;)\n            Next\n            Debug.WriteLine(&quot;&quot;)\n        Next\n\n        &#39; Output:\n        &#39;  1 2 3 \n        &#39;  4 5 \n        &#39;  6\n        &#39;  7\n</code></pre></li>\n</ul>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"index\" data-linktype=\"relative-path\">Arrays</a><br> <a href=\"troubleshooting-arrays\" data-linktype=\"relative-path\">Troubleshooting Arrays</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"aadd7a60-7ca4-4608-b986-091f19e7fc10\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"42\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-21 01:42 AM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/language-features/arrays/how-to-initialize-an-array-variable.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/visual-basic/programming-guide/language-features/arrays/how-to-initialize-an-array-variable.md\">\r\n<meta name=\"document_id\" content=\"252b1934-db0b-7be8-3baf-964b02246691\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"How to: Initialize an Array Variable in Visual Basic | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"aadd7a60-7ca4-4608-b986-091f19e7fc10","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":42,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["variables [Visual Basic], initializing","arrays [Visual Basic], variables","arrays [Visual Basic], initializing","arrays [Visual Basic], declaring"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-21 01:42 AM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/21/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/language-features/arrays/how-to-initialize-an-array-variable.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/tianzhXamarin/docs/visual-basic/programming-guide/language-features/arrays/how-to-initialize-an-array-variable.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/language-features/arrays/how-to-initialize-an-array-variable.md","document_id":"252b1934-db0b-7be8-3baf-964b02246691","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/programming-guide/language-features/arrays/how-to-initialize-an-array-variable","toc_asset_id":"articles/visual-basic/programming-guide/language-features/arrays/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Initialize an Array Variable in Visual Basic","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":852,"_op_rawTitle":"<h1 id=\"how-to-initialize-an-array-variable-in-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/language-features/arrays/how-to-initialize-an-array-variable.md\" sourcestartlinenumber=\"39\" sourceendlinenumber=\"39\">How to: Initialize an Array Variable in Visual Basic</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/programming-guide/language-features/arrays/how-to-initialize-an-array-variable","fileRelativePath":"articles/visual-basic/programming-guide/language-features/arrays/how-to-initialize-an-array-variable.html"},"themesRelativePathToOutputRoot":"_themes/"}