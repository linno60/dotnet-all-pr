{"content":"<div><div class=\"content\">\n<p>Anonymous types provide no mechanism for directly specifying the data types of properties. Types of all properties are inferred. In the following example, the types of <code>Name</code> and <code>Price</code> are inferred directly from the values that are used to initialize them.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrAnonymousTypes#1\">        &#39; Variable product is an instance of a simple anonymous type.\n        Dim product = New With {Key .Name = &quot;paperclips&quot;, .Price = 1.29}\n</code></pre><p> Anonymous types can also infer property names and types from other sources. The sections that follow provide a list of the circumstances where inference is possible, and examples of situations where it is not.  </p>\n<h2 id=\"successful-inference\">Successful Inference</h2>\n<h4 id=\"anonymous-types-can-infer-property-names-and-types-from-the-following-sources\">Anonymous types can infer property names and types from the following sources:</h4>\n<ul>\n<li><p>From variable names. Anonymous type <code>anonProduct</code> will have two properties, <code>productName</code> and <code>productPrice</code>. Their data types will be those of the original variables, <code>String</code> and <code>Double</code>, respectively.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrAnonymousTypes#11\">        Dim productName As String = &quot;paperclips&quot;\n        Dim productPrice As Double = 1.29\n        Dim anonProduct = New With {Key productName, Key productPrice}\n\n        &#39; To create uppercase variable names for the new properties,\n        &#39; assign variables productName and productPrice to uppercase identifiers.\n        Dim anonProduct1 = New With {Key .Name = productName, Key .Price = productPrice}\n</code></pre></li>\n<li><p>From property or field names of other objects. For example, consider a <code>car</code> object of a <code>CarClass</code> type that includes <code>Name</code> and <code>ID</code> properties. To create a new anonymous type instance, <code>car1</code>, with <code>Name</code> and <code>ID</code> properties that are initialized with the values from the <code>car</code> object, you can write the following:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrAnonymousTypes#34\">        Dim car1 = New With {Key car.Name, Key car.ID}\n</code></pre><p> The previous declaration is equivalent to the longer line of code that defines anonymous type <code>car2</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrAnonymousTypes#35\">        Dim car2 = New With {Key .Name = car.Name, Key .ID = car.ID}\n</code></pre></li>\n<li><p>From XML member names.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrAnonymousTypes#12\">        Dim books = &lt;Books&gt;\n                        &lt;Book Author=&quot;Jesper Aaberg&quot;&gt;\n                            Advanced Programming Methods\n                        &lt;/Book&gt;\n                    &lt;/Books&gt;\n        Dim anon = New With {books...&lt;Book&gt;}\n</code></pre><p> The resulting type for <code>anon</code> would have one property, <code>Book</code>, of type <a class=\"xref\" href=\"../../../../../api/system.collections.ienumerable\" data-linktype=\"relative-path\">IEnumerable</a>(Of XElement).  </p>\n</li>\n<li><p>From a function that has no parameters, such as <code>SomeFunction</code> in the following example.  </p>\n<p> <code>Dim sc As New SomeClass</code>  </p>\n<p> <code>Dim anon1 = New With {Key sc.SomeFunction()}</code>  </p>\n<p> The variable <code>anon2</code> in the following code is an anonymous type that has one property, a character named <code>First</code>. This code will display a letter &quot;E,&quot; the letter that is returned by function <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb356424(v=vs.110).aspx\" data-linktype=\"external\">First</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrAnonymousTypes#13\">        Dim aString As String = &quot;Example String&quot;\n        Dim anon2 = New With {Key aString.First()}\n        &#39; The variable anon2 has one property, First.\n        Console.WriteLine(anon2.First)\n</code></pre></li>\n</ul>\n<h2 id=\"inference-failures\">Inference Failures</h2>\n<h4 id=\"name-inference-will-fail-in-many-circumstances-including-the-following\">Name inference will fail in many circumstances, including the following:</h4>\n<ul>\n<li><p>The inference derives from the invocation of a method, a constructor, or a parameterized property that requires arguments. The previous declaration of <code>anon1</code> fails if <code>someFunction</code> has one or more arguments.  </p>\n<p> <code>&#39; Not valid.</code>  </p>\n<p> <code>&#39; Dim anon3 = New With {Key sc.someFunction(someArg)}</code>  </p>\n<p> Assignment to a new property name solves the problem.  </p>\n<p> <code>&#39; Valid.</code>  </p>\n<p> <code>Dim anon4 = New With {Key .FunResult = sc.someFunction(someArg)}</code>  </p>\n</li>\n<li><p>The inference derives from a complex expression.  </p>\n<pre class=\"loading\"><code>Dim aString As String = &quot;Act &quot;  \n&#39; Not valid.  \n&#39; Dim label = New With {Key aString &amp; &quot;IV&quot;}  \n</code></pre><p> The error can be resolved by assigning the result of the expression to a property name.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrAnonymousTypes#14\">        &#39; Valid.\n        Dim label1 = New With {Key .someLabel = aString &amp; &quot;IV&quot;}\n</code></pre></li>\n<li><p>Inference for multiple properties produces two or more properties that have the same name. Referring back to declarations in earlier examples, you cannot list both <code>product.Name</code> and <code>car1.Name</code> as properties of the same anonymous type. This is because the inferred identifier for each of these would be <code>Name</code>.  </p>\n<p> <code>&#39; Not valid.</code>  </p>\n<p> <code>&#39; Dim anon5 = New With {Key product.Name, Key car1.Name}</code>  </p>\n<p> The problem can be solved by assigning the values to distinct property names.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrAnonymousTypes#36\">        &#39; Valid.\n        Dim anon6 = New With {Key .ProductName = product.Name, Key .CarName = car1.Name}\n</code></pre><p> Note that changes in case (changes between uppercase and lowercase letters) do not make two names distinct.  </p>\n<p> <code>Dim price = 0</code>  </p>\n<p> <code>&#39; Not valid, because Price and price are the same name.</code>  </p>\n<p> <code>&#39; Dim anon7 = New With {Key product.Price, Key price}</code>  </p>\n</li>\n<li><p>The initial type and value of one property depends on another property that is not yet established. For example, <code>.IDName = .LastName</code> is not valid in an anonymous type declaration unless <code>.LastName</code> is already initialized.  </p>\n<p> <code>&#39; Not valid.</code>  </p>\n<p> <code>&#39; Dim anon8 = New With {Key .IDName = .LastName, Key .LastName = &quot;Jones&quot;}</code>  </p>\n<p> In this example, you can fix the problem by reversing the order in which the properties are declared.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrAnonymousTypes#15\">        &#39; Valid.\n        Dim anon9 = New With {Key .LastName = &quot;Jones&quot;, Key .IDName = .LastName}\n</code></pre></li>\n<li><p>A property name of the anonymous type is the same as the name of a member of <a class=\"xref\" href=\"../../../../../api/system.object\" data-linktype=\"relative-path\">Object</a>. For example, the following declaration fails because <code>Equals</code> is a method of <a class=\"xref\" href=\"../../../../../api/system.object\" data-linktype=\"relative-path\">Object</a>.  </p>\n<p> <code>&#39; Not valid.</code>  </p>\n<p> <code>&#39; Dim relationsLabels1 = New With {Key .Equals = &quot;equals&quot;, Key .Greater = _</code>  </p>\n<p> <code>&#39;                       &quot;greater than&quot;, Key .Less = &quot;less than&quot;}</code>  </p>\n<p> You can fix the problem by changing the property name:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrAnonymousTypes#16\">        &#39; Valid \n        Dim relationsLabels2 = New With {Key .EqualString = &quot;equals&quot;,\n                                         Key .GreaterString = &quot;greater than&quot;,\n                                         Key .LessString = &quot;less than&quot;}\n</code></pre></li>\n</ul>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"object-initializers-named-and-anonymous-types\" data-linktype=\"relative-path\">Object Initializers: Named and Anonymous Types</a><br> <a href=\"../variables/local-type-inference\" data-linktype=\"relative-path\">Local Type Inference</a><br> <a href=\"anonymous-types\" data-linktype=\"relative-path\">Anonymous Types</a><br> <a href=\"../../../language-reference/modifiers/key\" data-linktype=\"relative-path\">Key</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-all/api/toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"7c748b22-913f-4d9d-b747-6b7bf296a0bc\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"19\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"translation.priority.mt\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.mt\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.mt\" content=\"pt-br\">\r\n<meta name=\"translation.priority.mt\" content=\"tr-tr\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/language-features/objects-and-classes/how-to-infer-property-names-and-types-in-anonymous-type-declarations.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/language-features/objects-and-classes/how-to-infer-property-names-and-types-in-anonymous-type-declarations.md\">\r\n<meta name=\"document_id\" content=\"1a510404-d028-9166-25b8-9d62a94cc24a\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"How to: Infer Property Names and Types in Anonymous Type Declarations (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"7c748b22-913f-4d9d-b747-6b7bf296a0bc","translation.priority.ht":["de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","ru-ru","zh-cn","zh-tw"],"caps.latest.revision":19,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["inferring property names [Visual Basic]","anonymous types [Visual Basic], inferring property names and types","inferring property types [Visual Basic]"],"translation.priority.mt":["cs-cz","pl-pl","pt-br","tr-tr"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/language-features/objects-and-classes/how-to-infer-property-names-and-types-in-anonymous-type-declarations.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/language-features/objects-and-classes/how-to-infer-property-names-and-types-in-anonymous-type-declarations.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/language-features/objects-and-classes/how-to-infer-property-names-and-types-in-anonymous-type-declarations.md","document_id":"1a510404-d028-9166-25b8-9d62a94cc24a","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/programming-guide/language-features/objects-and-classes/how-to-infer-property-names-and-types-in-anonymous-type-declarations","toc_asset_id":"articles/visual-basic/programming-guide/language-features/objects-and-classes/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Infer Property Names and Types in Anonymous Type Declarations (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":845,"_op_rawTitle":"<h1 id=\"how-to-infer-property-names-and-types-in-anonymous-type-declarations-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/language-features/objects-and-classes/how-to-infer-property-names-and-types-in-anonymous-type-declarations.md\" sourcestartlinenumber=\"39\" sourceendlinenumber=\"39\">How to: Infer Property Names and Types in Anonymous Type Declarations (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/programming-guide/language-features/objects-and-classes/how-to-infer-property-names-and-types-in-anonymous-type-declarations","fileRelativePath":"articles/visual-basic/programming-guide/language-features/objects-and-classes/how-to-infer-property-names-and-types-in-anonymous-type-declarations.html"},"themesRelativePathToOutputRoot":"_themes/"}