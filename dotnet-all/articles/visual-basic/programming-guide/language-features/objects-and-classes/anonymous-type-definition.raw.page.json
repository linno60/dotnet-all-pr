{"content":"<div><div class=\"content\">\n<p>In response to the declaration of an instance of an anonymous type, the compiler creates a new class definition that contains the specified properties for the type.  </p>\n<h2 id=\"compiler-generated-code\">Compiler-Generated Code</h2>\n<p> For the following definition of <code>product</code>, the compiler creates a new class definition that contains properties <code>Name</code>, <code>Price</code>, and <code>OnHand</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrAnonymousTypes#25\">        &#39; Variable product is an instance of an anonymous type.\n        Dim product = New With {Key .Name = &quot;paperclips&quot;, Key .Price = 1.29, .OnHand = 24}\n</code></pre><p> The class definition contains property definitions similar to the following. Notice that there is no <code>Set</code> method for the key properties. The values of key properties are read-only.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Public Class $Anonymous1  \n    Private _name As String  \n    Private _price As Double  \n    Private _onHand As Integer  \n     Public ReadOnly Property Name() As String  \n        Get  \n            Return _name  \n        End Get  \n    End Property  \n\n    Public ReadOnly Property Price() As Double  \n        Get  \n            Return _price  \n        End Get  \n    End Property  \n\n    Public Property OnHand() As Integer  \n        Get  \n            Return _onHand  \n        End Get  \n        Set(ByVal Value As Integer)  \n            _onHand = Value  \n        End Set  \n    End Property  \n\nEnd Class  \n</code></pre><p> In addition, anonymous type definitions contain a default constructor. Constructors that require parameters are not permitted.  </p>\n<p> If an anonymous type declaration contains at least one key property, the type definition overrides three members inherited from <a class=\"xref\" href=\"../../../../../api/system.object\" data-linktype=\"relative-path\">Object</a>: <a class=\"xref\" href=\"../../../../../api/system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>, <a class=\"xref\" href=\"../../../../../api/system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a>, and <a class=\"xref\" href=\"../../../../../api/system.object#System_Object_ToString_\" data-linktype=\"relative-path\">ToString</a>. If no key properties are declared, only <a class=\"xref\" href=\"../../../../../api/system.object#System_Object_ToString_\" data-linktype=\"relative-path\">ToString</a> is overridden. The overrides provide the following functionality:  </p>\n<ul>\n<li><p><code>Equals</code> returns <code>True</code> if two anonymous type instances are the same instance, or if they meet the following conditions:  </p>\n<ul>\n<li><p>They have the same number of properties.  </p>\n</li>\n<li><p>The properties are declared in the same order, with the same names and the same inferred types. Name comparisons are not case-sensitive.  </p>\n</li>\n<li><p>At least one of the properties is a key property, and the <code>Key</code> keyword is applied to the same properties.  </p>\n</li>\n<li><p>Comparison of each corresponding pair of key properties returns <code>True</code>.  </p>\n<p>For example, in the following examples, <code>Equals</code> returns <code>True</code> only for <code>employee01</code> and <code>employee08</code>. The comment before each line specifies the reason why the new instance does not match <code>employee01</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrAnonymousTypes#24\">        Dim employee01 = New With {Key .Name = &quot;Bob&quot;, Key .Category = 3, .InOffice = False}\n\n        &#39; employee02 has no InOffice property.\n        Dim employee02 = New With {Key .Name = &quot;Bob&quot;, Key .Category = 3}\n\n        &#39; The first property has a different name.\n        Dim employee03 = New With {Key .FirstName = &quot;Bob&quot;, Key .Category = 3, .InOffice = False}\n\n        &#39; Property Category has a different value.\n        Dim employee04 = New With {Key .Name = &quot;Bob&quot;, Key .Category = 2, .InOffice = False}\n\n        &#39; Property Category has a different type.\n        Dim employee05 = New With {Key .Name = &quot;Bob&quot;, Key .Category = 3.2, .InOffice = False}\n\n        &#39; The properties are declared in a different order.\n        Dim employee06 = New With {Key .Category = 3, Key .Name = &quot;Bob&quot;, .InOffice = False}\n\n        &#39; Property Category is not a key property.\n        Dim employee07 = New With {Key .Name = &quot;Bob&quot;, .Category = 3, .InOffice = False}\n\n        &#39; employee01 and employee 08 meet all conditions for equality. Note \n        &#39; that the values of the non-key field need not be the same.\n        Dim employee08 = New With {Key .Name = &quot;Bob&quot;, Key .Category = 2 + 1, .InOffice = True}\n\n        &#39; Equals returns True only for employee01 and employee08.\n        Console.WriteLine(employee01.Equals(employee08))\n</code></pre></li>\n</ul>\n</li>\n<li><p><code>GetHashcode</code> provides an appropriately unique GetHashCode algorithm. The algorithm uses only the key properties to compute the hash code.  </p>\n</li>\n<li><p><code>ToString</code> returns a string of concatenated property values, as shown in the following example. Both key and non-key properties are included.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrAnonymousTypes#29\">        Console.WriteLine(employee01.ToString())\n        Console.WriteLine(employee01)\n        &#39; The preceding statements both display the following:\n        &#39; { Name = Bob, Category = 3, InOffice = False }\n</code></pre><p>Explicitly named properties of an anonymous type cannot conflict with these generated methods. That is, you cannot use <code>.Equals</code>, <code>.GetHashCode</code>, or <code>.ToString</code> to name a property.  </p>\n<p>Anonymous type definitions that include at least one key property also implement the <a class=\"xref\" href=\"../../../../../api/system.iequatable-1\" data-linktype=\"relative-path\">System.IEquatable&lt;T&gt;</a> interface, where <code>T</code> is the type of the anonymous type.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> Anonymous type declarations create the same anonymous type only if they occur in the same assembly, their properties have the same names and the same inferred types, the properties are declared in the same order, and the same properties are marked as key properties.  </p>\n</div>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"anonymous-types\" data-linktype=\"relative-path\">Anonymous Types</a><br> <a href=\"how-to-infer-property-names-and-types-in-anonymous-type-declarations\" data-linktype=\"relative-path\">How to: Infer Property Names and Types in Anonymous Type Declarations</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"7a8a0ddc-55ba-4d67-869e-87a84d938bac\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"21\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/language-features/objects-and-classes/anonymous-type-definition.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/language-features/objects-and-classes/anonymous-type-definition.md\">\r\n<meta name=\"document_id\" content=\"a296a5b8-72fa-d060-1dfa-2b194fa68d99\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Anonymous Type Definition (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"7a8a0ddc-55ba-4d67-869e-87a84d938bac","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":21,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["anonymous types [Visual Basic], type definition"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/language-features/objects-and-classes/anonymous-type-definition.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/language-features/objects-and-classes/anonymous-type-definition.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/language-features/objects-and-classes/anonymous-type-definition.md","document_id":"a296a5b8-72fa-d060-1dfa-2b194fa68d99","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/language-features/objects-and-classes/anonymous-type-definition","toc_asset_id":"articles/visual-basic/programming-guide/language-features/objects-and-classes/toc.json","toc_rel":"toc.json","_op_ogTitle":"Anonymous Type Definition (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":702,"_op_rawTitle":"<h1 id=\"anonymous-type-definition-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/language-features/objects-and-classes/anonymous-type-definition.md\" sourcestartlinenumber=\"36\" sourceendlinenumber=\"36\">Anonymous Type Definition (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/language-features/objects-and-classes/anonymous-type-definition","fileRelativePath":"articles/visual-basic/programming-guide/language-features/objects-and-classes/anonymous-type-definition.html"},"themesRelativePathToOutputRoot":"_themes/"}