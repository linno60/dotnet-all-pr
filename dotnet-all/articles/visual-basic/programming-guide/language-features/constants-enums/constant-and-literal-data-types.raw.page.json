{"content":"<div><div class=\"content\">\n<p>A literal is a value that is expressed as itself rather than as a variable&#39;s value or the result of an expression, such as the number 3 or the string &quot;Hello&quot;. A constant is a meaningful name that takes the place of a literal and retains this same value throughout the program, as opposed to a variable, whose value may change.  </p>\n<p> When <a href=\"../../../language-reference/statements/option-infer-statement\" data-linktype=\"relative-path\">Option Infer</a> is <code>Off</code> and <a href=\"../../../language-reference/statements/option-strict-statement\" data-linktype=\"relative-path\">Option Strict</a> is <code>On</code>, you must declare all constants explicitly with a data type. In the following example, the data type of <code>MyByte</code> is explicitly declared as data type <code>Byte</code>:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrConstants#1\">Option Strict On\n\nPublic Class Sample\n  Public Const MyByte As Byte = 2\nEnd Class\n</code></pre><p> When <code>Option Infer</code> is <code>On</code> or <code>Option Strict</code> is <code>Off</code>, you can declare a constant without specifying a data type with an <code>As</code> clause. The compiler determines the type of the constant from the type of the expression. A numeric integer literal is cast by default to the <code>Integer</code> data type. The default data type for floating-point numbers is <code>Double</code>, and the keywords <code>True</code> and <code>False</code> specify a <code>Boolean</code> constant.  </p>\n<h2 id=\"literals-and-type-coercion\">Literals and Type Coercion</h2>\n<p> In some cases, you might want to force a literal to a particular data type; for example, when assigning a particularly large integral literal value to a variable of type <code>Decimal</code>. The following example produces an error:  </p>\n<pre class=\"loading\"><code>Dim myDecimal as Decimal  \nmyDecimal = 100000000000000000000   &#39; This causes a compiler error.  \n</code></pre><p> The error results from the representation of the literal. The <code>Decimal</code> data type can hold a value this large, but the literal is implicitly represented as a <code>Long</code>, which cannot.  </p>\n<p> You can coerce a literal to a particular data type in two ways: by appending a type character to it, or by placing it within enclosing characters. A type character or enclosing characters must immediately precede and/or follow the literal, with no intervening space or characters of any kind.  </p>\n<p> To make the previous example work, you can append the <code>D</code> type character to the literal, which causes it to be represented as a <code>Decimal</code>:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrConstants#2\">Dim MyDecimal As Decimal = 100000000000000000000D\n</code></pre><p> The following example demonstrates correct usage of type characters and enclosing characters:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrConstants#3\">&#39; Default to Integer.\nPublic Const DefaultInteger As Integer = 100\n\n&#39; Default to Double.\nPublic Const DefaultDouble As Double = 54.3345612\n\n&#39; Force constant to be type Char.\nPublic Const MyCharacter As Char = &quot;a&quot;c\n\n&#39; DateTime constants.\nPublic Const MyDate As DateTime = #1/15/2001#\nPublic Const MyTime As DateTime = #1:15:59 AM#\n\n&#39; Force data type to be Long.\nPublic Const MyLong As Long = 45L\n\n&#39; Force data type to be Single.\nPublic Const MySingle As Single = 45.55!\n</code></pre><p> The following table shows the enclosing characters and type characters available in Visual Basic.  </p>\n<table>\n<thead>\n<tr>\n<th>Data type</th>\n<th>Enclosing character</th>\n<th>Appended type character</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Boolean</code></td>\n<td>(none)</td>\n<td>(none)</td>\n</tr>\n<tr>\n<td><code>Byte</code></td>\n<td>(none)</td>\n<td>(none)</td>\n</tr>\n<tr>\n<td><code>Char</code></td>\n<td>&quot;</td>\n<td>C</td>\n</tr>\n<tr>\n<td><code>Date</code></td>\n<td>#</td>\n<td>(none)</td>\n</tr>\n<tr>\n<td><code>Decimal</code></td>\n<td>(none)</td>\n<td>D or @</td>\n</tr>\n<tr>\n<td><code>Double</code></td>\n<td>(none)</td>\n<td>R or #</td>\n</tr>\n<tr>\n<td><code>Integer</code></td>\n<td>(none)</td>\n<td>I or %</td>\n</tr>\n<tr>\n<td><code>Long</code></td>\n<td>(none)</td>\n<td>L or &amp;</td>\n</tr>\n<tr>\n<td><code>Short</code></td>\n<td>(none)</td>\n<td>S</td>\n</tr>\n<tr>\n<td><code>Single</code></td>\n<td>(none)</td>\n<td>F or !</td>\n</tr>\n<tr>\n<td><code>String</code></td>\n<td>&quot;</td>\n<td>(none)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"user-defined-constants\" data-linktype=\"relative-path\">User-Defined Constants</a><br> <a href=\"how-to-declare-a-constant\" data-linktype=\"relative-path\">How to: Declare A Constant</a><br> <a href=\"constants-overview\" data-linktype=\"relative-path\">Constants Overview</a><br> <a href=\"../../../language-reference/statements/option-strict-statement\" data-linktype=\"relative-path\">Option Strict Statement</a><br> <a href=\"../../../language-reference/statements/option-explicit-statement\" data-linktype=\"relative-path\">Option Explicit Statement</a><br> <a href=\"enumerations-overview\" data-linktype=\"relative-path\">Enumerations Overview</a><br> <a href=\"how-to-declare-enumerations\" data-linktype=\"relative-path\">How to: Declare an Enumeration</a><br> <a href=\"enumerations-and-name-qualification\" data-linktype=\"relative-path\">Enumerations and Name Qualification</a><br> <a href=\"../../../language-reference/data-types/data-type-summary\" data-linktype=\"relative-path\">Data Types</a><br> <a href=\"../../../language-reference/constants-and-enumerations\" data-linktype=\"relative-path\">Constants and Enumerations</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"057206d2-3a5b-40b9-b3af-57446f9b52fa\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"19\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/language-features/constants-enums/constant-and-literal-data-types.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/language-features/constants-enums/constant-and-literal-data-types.md\">\r\n<meta name=\"document_id\" content=\"1c414d74-c4fd-f843-464f-14304e775c1b\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","uhfHeaderId":"MSDocsHeader-DotNet","title":"Constant and Literal Data Types (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"057206d2-3a5b-40b9-b3af-57446f9b52fa","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":19,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["declaring constants, literal data types","data types [Visual Basic], declaring","constants, declaring","explicit declarations","literals, coercing data type","declarations, data types"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/language-features/constants-enums/constant-and-literal-data-types.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/language-features/constants-enums/constant-and-literal-data-types.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/language-features/constants-enums/constant-and-literal-data-types.md","document_id":"1c414d74-c4fd-f843-464f-14304e775c1b","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/language-features/constants-enums/constant-and-literal-data-types","toc_asset_id":"articles/visual-basic/programming-guide/language-features/constants-enums/toc.json","toc_rel":"toc.json","_op_ogTitle":"Constant and Literal Data Types (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":536,"_op_rawTitle":"<h1 id=\"constant-and-literal-data-types-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/language-features/constants-enums/constant-and-literal-data-types.md\" sourcestartlinenumber=\"41\" sourceendlinenumber=\"41\">Constant and Literal Data Types (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/language-features/constants-enums/constant-and-literal-data-types","fileRelativePath":"articles/visual-basic/programming-guide/language-features/constants-enums/constant-and-literal-data-types.html"},"themesRelativePathToOutputRoot":"_themes/"}