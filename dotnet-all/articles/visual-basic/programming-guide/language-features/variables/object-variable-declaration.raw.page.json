{"content":"<div><div class=\"content\">\n<p>You use a normal declaration statement to declare an object variable. For the data type, you specify either <code>Object</code> (that is, the <a href=\"../../../language-reference/data-types/object-data-type\" data-linktype=\"relative-path\">Object Data Type</a>) or a more specific class from which the object is to be created.  </p>\n<p> Declaring a variable as <code>Object</code> is the same as declaring it as <a class=\"xref\" href=\"../../../../../api/system.object\" data-linktype=\"relative-path\">System.Object</a>.  </p>\n<p> When you declare a variable with a specific object class, it can access all the methods and properties exposed by that class and the classes from which it inherits. If you declare the variable with <a class=\"xref\" href=\"../../../../../api/system.object\" data-linktype=\"relative-path\">Object</a>, it can access only the members of the <a class=\"xref\" href=\"../../../../../api/system.object\" data-linktype=\"relative-path\">Object</a> class, unless you turn <code>Option Strict Off</code> to allow late binding.  </p>\n<h2 id=\"declaration-syntax\">Declaration Syntax</h2>\n<p> Use the following syntax to declare an object variable:  </p>\n<pre class=\"loading\"><code>Dim variablename As [New] { objectclass | Object }  \n</code></pre><p> You can also specify <a href=\"../../../language-reference/modifiers/public\" data-linktype=\"relative-path\">Public</a>, <a href=\"../../../language-reference/modifiers/protected\" data-linktype=\"relative-path\">Protected</a>, <a href=\"../../../language-reference/modifiers/friend\" data-linktype=\"relative-path\">Friend</a>, <code>Protected Friend</code>, <a href=\"../../../language-reference/modifiers/private\" data-linktype=\"relative-path\">Private</a>, <a href=\"../../../language-reference/modifiers/shared\" data-linktype=\"relative-path\">Shared</a>, or <a href=\"../../../language-reference/modifiers/static\" data-linktype=\"relative-path\">Static</a> in the declaration. The following example declarations are valid:  </p>\n<pre class=\"loading\"><code>Private objA As Object  \nStatic objB As System.Windows.Forms.Label  \nDim objC As System.OperatingSystem  \n</code></pre><h2 id=\"late-binding-and-early-binding\">Late Binding and Early Binding</h2>\n<p> Sometimes the specific class is unknown until your code runs. In this case, you must declare the object variable with the <code>Object</code> data type. This creates a general reference to any type of object, and the specific class is assigned at run time. This is called <em>late binding</em>. Late binding requires additional execution time. It also limits your code to the methods and properties of the class you have most recently assigned to it. This can cause run-time errors if your code attempts to access members of a different class.  </p>\n<p> When you know the specific class at compile time, you should declare the object variable to be of that class. This is called <em>early binding</em>. Early binding improves performance and guarantees your code access to all the methods and properties of the specific class. In the preceding example declarations, if variable <code>objA</code> uses only objects of class <a class=\"xref\" href=\"../../../../../api/system.windows.forms.label\" data-linktype=\"relative-path\">System.Windows.Forms.Label</a>, you should specify <code>As System.Windows.Forms.Label</code> in its declaration.  </p>\n<h3 id=\"advantages-of-early-binding\">Advantages of Early Binding</h3>\n<p> Declaring an object variable as a specific class gives you several advantages:  </p>\n<ul>\n<li><p>Automatic type checking  </p>\n</li>\n<li><p>Guaranteed access to all members of the specific class  </p>\n</li>\n<li><p>Microsoft IntelliSense support in the Code Editor  </p>\n</li>\n<li><p>Improved readability of your code  </p>\n</li>\n<li><p>Fewer errors in your code  </p>\n</li>\n<li><p>Errors caught at compile time rather than run time  </p>\n</li>\n<li><p>Faster code execution  </p>\n</li>\n</ul>\n<h2 id=\"access-to-object-variable-members\">Access to Object Variable Members</h2>\n<p> When <code>Option Strict</code> is turned <code>On</code>, an object variable can access only the methods and properties of the class with which you declare it. The following example illustrates this.  </p>\n<pre class=\"loading\"><code>&#39; Option statements must precede all other source file lines.  \nOption Strict On  \n&#39; Imports statement must precede all declarations in the source file.  \nImports System.Windows.Forms  \nPublic Sub accessMembers()  \n    Dim p As Object  \n    Dim q As System.Windows.Forms.Label  \n    p = New System.Windows.Forms.Label  \n    q = New System.Windows.Forms.Label  \n    Dim j, k As Integer  \n    &#39; The following statement generates a compiler ERROR.  \n    j = p.Left  \n    &#39; The following statement retrieves the left edge of the label in pixels.  \n    k = q.Left  \nEnd Sub  \n</code></pre><p> In this example, <code>p</code> can use only the members of the <a class=\"xref\" href=\"../../../../../api/system.object\" data-linktype=\"relative-path\">Object</a> class itself, which do not include the <code>Left</code> property. On the other hand, <code>q</code> was declared to be of type <a class=\"xref\" href=\"../../../../../api/system.windows.forms.label\" data-linktype=\"relative-path\">Label</a>, so it can use all the methods and properties of the <a class=\"xref\" href=\"../../../../../api/system.windows.forms.label\" data-linktype=\"relative-path\">Label</a> class in the <a class=\"xref\" href=\"../../../../../api/system.windows.forms\" data-linktype=\"relative-path\">System.Windows.Forms</a> namespace.  </p>\n<h2 id=\"flexibility-of-object-variables\">Flexibility of Object Variables</h2>\n<p> When working with objects in an inheritance hierarchy, you have a choice of which class to use for declaring your object variables. In making this choice, you must balance flexibility of object assignment against access to members of a class. For example, consider the inheritance hierarchy that leads to the <a class=\"xref\" href=\"../../../../../api/system.windows.forms.form\" data-linktype=\"relative-path\">System.Windows.Forms.Form</a> class:  </p>\n <a class=\"xref\" href=\"../../../../../api/system.object\" data-linktype=\"relative-path\">Object</a>  \n\n<p> `` <a class=\"xref\" href=\"../../../../../api/system.componentmodel.component\" data-linktype=\"relative-path\">Component</a>  </p>\n<p> `` <a class=\"xref\" href=\"../../../../../api/system.windows.forms.control\" data-linktype=\"relative-path\">Control</a>  </p>\n<p> `` <a class=\"xref\" href=\"../../../../../api/system.windows.forms.scrollablecontrol\" data-linktype=\"relative-path\">ScrollableControl</a>  </p>\n<p> `` <a class=\"xref\" href=\"../../../../../api/system.windows.forms.containercontrol\" data-linktype=\"relative-path\">ContainerControl</a>  </p>\n<p> `` <a class=\"xref\" href=\"../../../../../api/system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>  </p>\n<p> Suppose your application defines a form class called <code>specialForm</code>, which inherits from class <a class=\"xref\" href=\"../../../../../api/system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>. You can declare an object variable that refers specifically to <code>specialForm</code>, as the following example shows.  </p>\n<p><codecontentplaceholder>3</codecontentplaceholder><br> The declaration in the preceding example limits the variable <code>nextForm</code> to objects of class <code>specialForm</code>, but it also makes all the methods and properties of <code>specialForm</code> available to <code>nextForm</code>, as well as all the members of all the classes from which <code>specialForm</code> inherits.  </p>\n<p> You can make an object variable more general by declaring it to be of type <a class=\"xref\" href=\"../../../../../api/system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>, as the following example shows.  </p>\n<p><codecontentplaceholder>4</codecontentplaceholder><br> The declaration in the preceding example lets you assign any form in your application to <code>anyForm</code>. However, although <code>anyForm</code> can access all the members of class <a class=\"xref\" href=\"../../../../../api/system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>, it cannot use any of the additional methods or properties defined for specific forms such as <code>specialForm</code>.  </p>\n<p> All the members of a base class are available to derived classes, but the additional members of a derived class are unavailable to the base class.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"object-variables\" data-linktype=\"relative-path\">Object Variables</a><br> <a href=\"object-variable-assignment\" data-linktype=\"relative-path\">Object Variable Assignment</a><br> <a href=\"object-variable-values\" data-linktype=\"relative-path\">Object Variable Values</a><br> <a href=\"how-to-declare-an-object-variable-and-assign-an-object-to-it\" data-linktype=\"relative-path\">How to: Declare an Object Variable and Assign an Object to It in Visual Basic</a><br> <a href=\"how-to-access-members-of-an-object\" data-linktype=\"relative-path\">How to: Access Members of an Object</a><br> <a href=\"../../../language-reference/operators/new-operator\" data-linktype=\"relative-path\">New Operator</a><br> <a href=\"../../../language-reference/statements/option-strict-statement\" data-linktype=\"relative-path\">Option Strict Statement</a><br> <a href=\"local-type-inference\" data-linktype=\"relative-path\">Local Type Inference</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-all/api/toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.tgt_pltfrm\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"2a5a41a3-1aa8-4236-b1f0-2382af7bf715\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"33\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/language-features/variables/object-variable-declaration.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/language-features/variables/object-variable-declaration.md\">\r\n<meta name=\"document_id\" content=\"824a2c43-1111-674b-dbaa-4522e54f0dbf\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Object Variable Declaration (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.tgt_pltfrm":"","ms.assetid":"2a5a41a3-1aa8-4236-b1f0-2382af7bf715","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":33,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["early binding","declarations, class","classes [Visual Basic], declaring","binding, late and early","object variables, declaring","variables [Visual Basic], object","declaring variables, object variables","declaring classes","late binding"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/language-features/variables/object-variable-declaration.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/language-features/variables/object-variable-declaration.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/language-features/variables/object-variable-declaration.md","document_id":"824a2c43-1111-674b-dbaa-4522e54f0dbf","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/programming-guide/language-features/variables/object-variable-declaration","toc_asset_id":"articles/visual-basic/programming-guide/language-features/variables/toc.json","toc_rel":"toc.json","_op_ogTitle":"Object Variable Declaration (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":797,"_op_rawTitle":"<h1 id=\"object-variable-declaration-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/language-features/variables/object-variable-declaration.md\" sourcestartlinenumber=\"44\" sourceendlinenumber=\"44\">Object Variable Declaration (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/programming-guide/language-features/variables/object-variable-declaration","fileRelativePath":"articles/visual-basic/programming-guide/language-features/variables/object-variable-declaration.html"},"themesRelativePathToOutputRoot":"_themes/"}