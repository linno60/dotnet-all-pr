{"content":"<div><div class=\"content\">\n<p><em>Collection initializers</em> provide a shortened syntax that enables you to create a collection and populate it with an initial set of values. Collection initializers are useful when you are creating a collection from a set of known values, for example, a list of menu options or categories, an initial set of numeric values, a static list of strings such as day or month names, or geographic locations such as a list of states that is used for validation.  </p>\n<p> For more information about collections, see <a href=\"http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b\" data-linktype=\"external\">Collections</a>.  </p>\n<p> You identify a collection initializer by using the <code>From</code> keyword followed by braces (<code>{}</code>). This is similar to the array literal syntax that is described in <a href=\"../arrays/index\" data-linktype=\"relative-path\">Arrays</a>. The following examples show various ways to use collection initializers to create collections.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCollectionInitializers#1\">        &#39; Create an array of type String().\n        Dim winterMonths = {&quot;December&quot;, &quot;January&quot;, &quot;February&quot;}\n\n        &#39; Create an array of type Integer()\n        Dim numbers = {1, 2, 3, 4, 5}\n\n        &#39; Create a list of menu options. (Requires an extension method\n        &#39; named Add for List(Of MenuOption)\n        Dim menuOptions = New List(Of MenuOption) From {{1, &quot;Home&quot;},\n                                                        {2, &quot;Products&quot;},\n                                                        {3, &quot;News&quot;},\n                                                        {4, &quot;Contact Us&quot;}}\n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> C# also provides collection initializers. C# collection initializers provide the same functionality as Visual Basic collection initializers. For more information about C# collection initializers, see <a href=\"../../../../csharp/programming-guide/classes-and-structs/object-and-collection-initializers\" data-linktype=\"relative-path\">Object and Collection Initializers</a>.  </p>\n</div>\n<h2 id=\"syntax\">Syntax</h2>\n<p> A collection initializer consists of a list of comma-separated values that are enclosed in braces (<code>{}</code>), preceded by the <code>From</code> keyword, as shown in the following code.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCollectionInitializers#2\">        Dim names As New List(Of String) From {&quot;Christa&quot;, &quot;Brian&quot;, &quot;Tim&quot;}\n</code></pre><p> When you create a collection, such as a <a class=\"xref\" href=\"../../../../../api/system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> or a <a class=\"xref\" href=\"../../../../../api/system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a>, you must supply the collection type before the collection initializer, as shown in the following code.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCollectionInitializers#13\">    Public Class AppMenu\n        Public Property Items As List(Of String) =\n            New List(Of String) From {&quot;Home&quot;, &quot;About&quot;, &quot;Contact&quot;}\n    End Class\n</code></pre><div class=\"NOTE\"><h5>Note</h5><p> You cannot combine both a collection initializer and an object initializer to initialize the same collection object. You can use object initializers to initialize objects in a collection initializer.  </p>\n</div>\n<h2 id=\"creating-a-collection-by-using-a-collection-intializer\">Creating a Collection by Using a Collection Intializer</h2>\n<p> When you create a collection by using a collection initializer, each value that is supplied in the collection initializer is passed to the appropriate <code>Add</code> method of the collection. For example, if you create a <a class=\"xref\" href=\"../../../../../api/system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> by using a collection initializer, each string value in the collection initializer is passed to the <a class=\"xref\" href=\"../../../../../api/system.collections.generic.list-1#System_Collections_Generic_List_1_Add_\" data-linktype=\"relative-path\">Add</a> method. If you want to create a collection by using a collection initializer, the specified type must be valid collection type. Examples of valid collection types include classes that implement the <a class=\"xref\" href=\"../../../../../api/system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a> interface or inherit the <a class=\"xref\" href=\"../../../../../api/system.collections.collectionbase\" data-linktype=\"relative-path\">CollectionBase</a> class. The specified type must also expose an <code>Add</code> method that meets the following criteria.  </p>\n<ul>\n<li><p>The <code>Add</code> method must be available from the scope in which the collection initializer is being called. The <code>Add</code> method does not have to be public if you are using the collection initializer in a scenario where non-public methods of the collection can be accessed.  </p>\n</li>\n<li><p>The <code>Add</code> method must be an instance member or <code>Shared</code> member of the collection class, or an extension method.  </p>\n</li>\n<li><p>An <code>Add</code> method must exist that can be matched, based on overload resolution rules, to the types that are supplied in the collection initializer.  </p>\n<p>For example, the following code example shows how to create a <code>List(Of Customer)</code> collection by using a collection initializer. When the code is run, each <code>Customer</code> object is passed to the <code>Add(Customer)</code> method of the generic list.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCollectionInitializers#9\">        Dim customers = New List(Of Customer) From\n            {\n                New Customer(&quot;City Power &amp; Light&quot;, &quot;http://www.cpandl.com/&quot;),\n                New Customer(&quot;Wide World Importers&quot;, &quot;http://www.wideworldimporters.com/&quot;),\n                New Customer(&quot;Lucerne Publishing&quot;, &quot;http://www.lucernepublishing.com/&quot;)\n            }\n</code></pre><p>The following code example shows equivalent code that does not use a collection initializer.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCollectionInitializers#10\">        Dim customers = New List(Of Customer) \n        customers.Add(New Customer(&quot;City Power &amp; Light&quot;, &quot;http://www.cpandl.com/&quot;))\n        customers.Add(New Customer(&quot;Wide World Importers&quot;, &quot;http://www.wideworldimporters.com/&quot;))\n        customers.Add(New Customer(&quot;Lucerne Publishing&quot;, &quot;http://www.lucernepublishing.com/&quot;))\n</code></pre><p>If the collection has an <code>Add</code> method that has parameters that match the constructor for the <code>Customer</code> object, you could nest parameter values for the <code>Add</code> method within collection initializers, as discussed in the next section. If the collection does not have such an <code>Add</code> method, you can create one as an extension method. For an example of how to create an <code>Add</code> method as an extension method for a collection, see <a href=\"how-to-create-an-add-extension-method-used-by-a-collection-initializer\" data-linktype=\"relative-path\">How to: Create an Add Extension Method Used by a Collection Initializer</a>. For an example of how to create a custom collection that can be used with a collection initializer, see <a href=\"how-to-create-a-collection-used-by-a-collection-initializer\" data-linktype=\"relative-path\">How to: Create a Collection Used by a Collection Initializer</a>.  </p>\n</li>\n</ul>\n<h2 id=\"nesting-collection-initializers\">Nesting Collection Initializers</h2>\n<p> You can nest values within a collection initializer to identify a specific overload of an <code>Add</code> method for the collection that is being created. The values passed to the <code>Add</code> method must be separated by commas and enclosed in braces (<code>{}</code>), like you would do in an array literal or collection initializer.  </p>\n<p> When you create a collection by using nested values, each element of the nested value list is passed as an argument to the <code>Add</code> method that matches the element types. For example, the following code example creates a <a class=\"xref\" href=\"../../../../../api/system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a> in which the keys are of type <code>Integer</code> and the values are of type <code>String</code>. Each of the nested value lists is matched to the <a class=\"xref\" href=\"../../../../../api/system.collections.generic.dictionary-2#System_Collections_Generic_Dictionary_2_Add_\" data-linktype=\"relative-path\">Add</a> method for the <code>Dictionary</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCollectionInitializers#5\">        Dim days = New Dictionary(Of Integer, String) From\n            {{0, &quot;Sunday&quot;}, {1, &quot;Monday&quot;}}\n</code></pre><p> The previous code example is equivalent to the following code.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrCollectionInitializers#6\">        Dim days = New Dictionary(Of Integer, String)\n        days.Add(0, &quot;Sunday&quot;)\n        days.Add(1, &quot;Monday&quot;)\n</code></pre><p> Only nested value lists from the first level of nesting are sent to the <code>Add</code> method for the collection type. Deeper levels of nesting are treated as array literals and the nested value lists are not matched to the <code>Add</code> method of any collection.  </p>\n<h2 id=\"related-topics\">Related Topics</h2>\n<table>\n<thead>\n<tr>\n<th>Title</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"how-to-create-an-add-extension-method-used-by-a-collection-initializer\" data-linktype=\"relative-path\">How to: Create an Add Extension Method Used by a Collection Initializer</a></td>\n<td>Shows how to create an extension method called <code>Add</code> that can be used to populate a collection with values from a collection initializer.</td>\n</tr>\n<tr>\n<td><a href=\"how-to-create-a-collection-used-by-a-collection-initializer\" data-linktype=\"relative-path\">How to: Create a Collection Used by a Collection Initializer</a></td>\n<td>Shows how to enable use of a collection initializer by including an <code>Add</code> method in a collection class that implements <code>IEnumerable</code>.</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b\" data-linktype=\"external\">Collections</a><br> <a href=\"../arrays/index\" data-linktype=\"relative-path\">Arrays</a><br> <a href=\"../objects-and-classes/object-initializers-named-and-anonymous-types\" data-linktype=\"relative-path\">Object Initializers: Named and Anonymous Types</a><br> <a href=\"../../../language-reference/operators/new-operator\" data-linktype=\"relative-path\">New Operator</a><br> <a href=\"../procedures/auto-implemented-properties\" data-linktype=\"relative-path\">Auto-Implemented Properties</a><br> <a href=\"../arrays/how-to-initialize-an-array-variable\" data-linktype=\"relative-path\">How to: Initialize an Array Variable in Visual Basic</a><br> <a href=\"../variables/local-type-inference\" data-linktype=\"relative-path\">Local Type Inference</a><br> <a href=\"../objects-and-classes/anonymous-types\" data-linktype=\"relative-path\">Anonymous Types</a><br> <a href=\"../linq/introduction-to-linq\" data-linktype=\"relative-path\">Introduction to LINQ in Visual Basic</a><br> <a href=\"../../concepts/linq/how-to-create-a-list-of-items\" data-linktype=\"relative-path\">How to: Create a List of Items</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"a9290329-77b0-4fdf-ae75-8fc17287f469\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"23\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/language-features/collection-initializers/index.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/language-features/collection-initializers/index.md\">\r\n<meta name=\"document_id\" content=\"243a7fb8-7563-d707-716a-c1dd0d94d735\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Collection Initializers (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"a9290329-77b0-4fdf-ae75-8fc17287f469","f1_keywords":["vb.CollectionInitializer"],"translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":23,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["collection initializers [Visual Basic]"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/language-features/collection-initializers/index.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/language-features/collection-initializers/index.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/language-features/collection-initializers/index.md","document_id":"243a7fb8-7563-d707-716a-c1dd0d94d735","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/language-features/collection-initializers/index","toc_asset_id":"articles/visual-basic/programming-guide/language-features/collection-initializers/toc.json","toc_rel":"toc.json","_op_ogTitle":"Collection Initializers (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":1045,"_op_rawTitle":"<h1 id=\"collection-initializers-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/language-features/collection-initializers/index.md\" sourcestartlinenumber=\"38\" sourceendlinenumber=\"38\">Collection Initializers (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/language-features/collection-initializers/index","fileRelativePath":"articles/visual-basic/programming-guide/language-features/collection-initializers/index.html"},"themesRelativePathToOutputRoot":"_themes/"}