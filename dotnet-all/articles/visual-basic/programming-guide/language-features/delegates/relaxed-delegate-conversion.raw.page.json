{"content":"<div><div class=\"content\">\n<p>Relaxed delegate conversion enables you to assign subs and functions to delegates or handlers even when their signatures are not identical. Therefore, binding to delegates becomes consistent with the binding already allowed for method invocations.  </p>\n<h2 id=\"parameters-and-return-type\">Parameters and Return Type</h2>\n<p> In place of exact signature match, relaxed conversion requires that the following conditions be met when <code>Option Strict</code> is set to <code>On</code>:  </p>\n<ul>\n<li><p>A widening conversion must exist from the data type of each delegate parameter to the data type of the corresponding parameter of the assigned function or <code>Sub</code>. In the following example, the delegate <code>Del1</code> has one parameter, an <code>Integer</code>. Parameter <code>m</code> in the assigned lambda expressions must have a data type for which there is a widening conversion from <code>Integer</code>, such as <code>Long</code> or <code>Double</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrRelaxedDelegates#1\">    &#39; Definition of delegate Del1.\n    Delegate Function Del1(ByVal arg As Integer) As Integer\n</code></pre><pre><code class=\"lang-vb\" name=\"VbVbalrRelaxedDelegates#2\">        &#39; Valid lambda expression assignments with Option Strict on or off:\n\n        &#39; Integer matches Integer.\n        Dim d1 As Del1 = Function(m As Integer) 3\n\n        &#39; Integer widens to Long\n        Dim d2 As Del1 = Function(m As Long) 3\n\n        &#39; Integer widens to Double\n        Dim d3 As Del1 = Function(m As Double) 3\n</code></pre><p> Narrowing conversions are permitted only when <code>Option Strict</code> is set to <code>Off</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrRelaxedDelegates#8\">        &#39; Valid only when Option Strict is off:\n\n        Dim d4 As Del1 = Function(m As String) CInt(m)\n        Dim d5 As Del1 = Function(m As Short) m\n</code></pre></li>\n<li><p>A widening conversion must exist in the opposite direction from the return type of the assigned function or <code>Sub</code> to the return type of the delegate. In the following examples, the body of each assigned lambda expression must evaluate to a data type that widens to <code>Integer</code> because the return type of <code>del1</code> is <code>Integer</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrRelaxedDelegates#3\">        &#39; Valid return types with Option Strict on:\n\n        &#39; Integer matches Integer.\n        Dim d6 As Del1 = Function(m As Integer) m\n\n        &#39; Short widens to Integer.\n        Dim d7 As Del1 = Function(m As Long) CShort(m)\n\n        &#39; Byte widens to Integer.\n        Dim d8 As Del1 = Function(m As Double) CByte(m)\n</code></pre><p>If <code>Option Strict</code> is set to <code>Off</code>, the widening restriction is removed in both directions.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrRelaxedDelegates#4\">        &#39; Valid only when Option Strict is set to Off.\n\n        &#39; Integer does not widen to Short in the parameter.\n        Dim d9 As Del1 = Function(n As Short) n\n\n        &#39; Long does not widen to Integer in the return type.\n        Dim d10 As Del1 = Function(n As Integer) CLng(n)\n</code></pre></li>\n</ul>\n<h2 id=\"omitting-parameter-specifications\">Omitting Parameter Specifications</h2>\n<p> Relaxed delegates also allow you to completely omit parameter specifications in the assigned method:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrRelaxedDelegates#5\">    &#39; Definition of delegate Del2, which has two parameters.\n    Delegate Function Del2(ByVal arg1 As Integer, ByVal arg2 As String) As Integer\n</code></pre><pre><code class=\"lang-vb\" name=\"VbVbalrRelaxedDelegates#6\">        &#39; The assigned lambda expression specifies no parameters, even though\n        &#39; Del2 has two parameters. Because the assigned function in this \n        &#39; example is a lambda expression, Option Strict can be on or off.\n        &#39; Compare the declaration of d16, where a standard function is assigned.\n        Dim d11 As Del2 = Function() 3\n\n        &#39; The parameters are still there, however, as defined in the delegate.\n        Console.WriteLine(d11(5, &quot;five&quot;))\n\n        &#39; Not valid.\n        &#39; Console.WriteLine(d11())\n        &#39; Console.WriteLine(d11(5))\n</code></pre><p> Note that you cannot specify some parameters and omit others.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrRelaxedDelegates#15\">        &#39; Not valid.\n        &#39;Dim d12 As Del2 = Function(p As Integer) p\n</code></pre><p> The ability to omit parameters is helpful in a situation such as defining an event handler, where several complex parameters are involved. The arguments to some event handlers are not used. Instead, the handler directly accesses the state of the control on which the event is registered, and ignores the arguments. Relaxed delegates allow you to omit the arguments in such declarations when no ambiguities result. In the following example, the fully specified method <code>OnClick</code> can be rewritten as <code>RelaxedOnClick</code>.  </p>\n<pre class=\"loading\"><code class=\"lang-vb\">Sub OnClick(ByVal sender As Object, ByVal e As EventArgs) Handles b.Click  \n    MessageBox.Show(&quot;Hello World from&quot; + b.Text)  \nEnd Sub  \n\nSub RelaxedOnClick() Handles b.Click  \n    MessageBox.Show(&quot;Hello World from&quot; + b.Text)  \nEnd Sub  \n</code></pre><h2 id=\"addressof-examples\">AddressOf Examples</h2>\n<p> Lambda expressions are used in the previous examples to make the type relationships easy to see. However, the same relaxations are permitted for delegate assignments that use <code>AddressOf</code>, <code>Handles</code>, or <code>AddHandler</code>.  </p>\n<p> In the following example, functions <code>f1</code>, <code>f2</code>, <code>f3</code>, and <code>f4</code> can all be assigned to <code>Del1</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrRelaxedDelegates#1\">    &#39; Definition of delegate Del1.\n    Delegate Function Del1(ByVal arg As Integer) As Integer\n</code></pre><pre><code class=\"lang-vb\" name=\"VbVbalrRelaxedDelegates#7\">    &#39; Definitions of f1, f2, f3, and f4.\n    Function f1(ByVal m As Integer) As Integer\n    End Function\n\n    Function f2(ByVal m As Long) As Integer\n    End Function\n\n    Function f3(ByVal m As Integer) As Short\n    End Function\n\n    Function f4() As Integer\n    End Function\n</code></pre><pre><code class=\"lang-vb\" name=\"VbVbalrRelaxedDelegates#9\">        &#39; Assignments to function delegate Del1.\n\n        &#39; Valid AddressOf assignments with Option Strict on or off:\n\n        &#39; Integer parameters of delegate and function match.\n        Dim d13 As Del1 = AddressOf f1\n\n        &#39; Integer delegate parameter widens to Long.\n        Dim d14 As Del1 = AddressOf f2\n\n        &#39; Short return in f3 widens to Integer.\n        Dim d15 As Del1 = AddressOf f3\n</code></pre><p> The following example is valid only when <code>Option Strict</code> is set to <code>Off</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrRelaxedDelegates#14\">        &#39; If Option Strict is Off, parameter specifications for f4 can be omitted.\n        Dim d16 As Del1 = AddressOf f4\n\n        &#39; Function d16 still requires a single argument, however, as specified\n        &#39; by Del1.\n        Console.WriteLine(d16(5))\n\n        &#39; Not valid.\n        &#39;Console.WriteLine(d16())\n        &#39;Console.WriteLine(d16(5, 3))\n</code></pre><h2 id=\"dropping-function-returns\">Dropping Function Returns</h2>\n<p> Relaxed delegate conversion enables you to assign a function to a <code>Sub</code> delegate, effectively ignoring the return value of the function. However, you cannot assign a <code>Sub</code> to a function delegate. In the following example, the address of function <code>doubler</code> is assigned to <code>Sub</code> delegate <code>Del3</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrRelaxedDelegates#10\">    &#39; Definition of Sub delegate Del3.\n    Delegate Sub Del3(ByVal arg1 As Integer)\n\n    &#39; Definition of function doubler, which both displays and returns the\n    &#39; value of its integer parameter.\n    Function doubler(ByVal p As Integer) As Integer\n        Dim times2 = 2 * p\n        Console.WriteLine(&quot;Value of p: &quot; &amp; p)\n        Console.WriteLine(&quot;Double p:   &quot; &amp; times2)\n        Return times2\n    End Function\n</code></pre><pre><code class=\"lang-vb\" name=\"VbVbalrRelaxedDelegates#11\">        &#39; You can assign the function to the Sub delegate:\n        Dim d17 As Del3 = AddressOf doubler\n\n        &#39; You can then call d17 like a regular Sub procedure.\n        d17(5)\n\n        &#39; You cannot call d17 as a function. It is a Sub, and has no \n        &#39; return value.\n        &#39; Not valid.\n        &#39;Console.WriteLine(d17(5))\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../procedures/lambda-expressions\" data-linktype=\"relative-path\">Lambda Expressions</a><br> <a href=\"../data-types/widening-and-narrowing-conversions\" data-linktype=\"relative-path\">Widening and Narrowing Conversions</a><br> <a href=\"index\" data-linktype=\"relative-path\">Delegates</a><br> <a href=\"how-to-pass-procedures-to-another-procedure\" data-linktype=\"relative-path\">How to: Pass Procedures to Another Procedure in Visual Basic</a><br> <a href=\"../variables/local-type-inference\" data-linktype=\"relative-path\">Local Type Inference</a><br> <a href=\"../../../language-reference/statements/option-strict-statement\" data-linktype=\"relative-path\">Option Strict Statement</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-internal/toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"64f371d0-5416-4f65-b23b-adcbf556e81c\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"19\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/0a5d76c154aeb9b749c9c3fc5ad0962e93754a62/docs/visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md\">\r\n<meta name=\"document_id\" content=\"340aa16c-04dd-0c60-2176-b4792b215b58\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Relaxed Delegate Conversion (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"64f371d0-5416-4f65-b23b-adcbf556e81c","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":19,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["relaxed delegate conversion [Visual Basic]","delegates [Visual Basic], relaxed conversion","conversions, relaxed delegate"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Reorganizing the VB TOC (#1348)","commit_sha":"0a5d76c154aeb9b749c9c3fc5ad0962e93754a62","commit_date":"2017-02-14 10:22:48 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/0a5d76c154aeb9b749c9c3fc5ad0962e93754a62/docs/visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md","document_id":"340aa16c-04dd-0c60-2176-b4792b215b58","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion","toc_asset_id":"articles/visual-basic/programming-guide/language-features/delegates/toc.json","toc_rel":"toc.json","_op_ogTitle":"Relaxed Delegate Conversion (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":1039,"_op_rawTitle":"<h1 id=\"relaxed-delegate-conversion-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.md\" sourcestartlinenumber=\"38\" sourceendlinenumber=\"38\">Relaxed Delegate Conversion (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion","fileRelativePath":"articles/visual-basic/programming-guide/language-features/delegates/relaxed-delegate-conversion.html"},"themesRelativePathToOutputRoot":"_themes/"}