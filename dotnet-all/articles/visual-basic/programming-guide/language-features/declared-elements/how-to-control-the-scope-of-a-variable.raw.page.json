{"content":"<div><div class=\"content\">\n<p>Normally, a variable is in <em>scope</em>, or visible for reference, throughout the region in which you declare it. In some cases, the variable&#39;s <em>access level</em> can influence its scope.  </p>\n<p> For more information, see <a href=\"scope\" data-linktype=\"relative-path\">Scope in Visual Basic</a>.  </p>\n<h2 id=\"scope-at-block-or-procedure-level\">Scope at Block or Procedure Level</h2>\n<h4 id=\"to-make-a-variable-visible-only-within-a-block\">To make a variable visible only within a block</h4>\n<ul>\n<li><p>Place the <a href=\"../../../language-reference/statements/dim-statement\" data-linktype=\"relative-path\">Dim Statement</a> for the variable between the initiating and terminating declaration statements of that block, for example between the <code>For</code> and <code>Next</code> statements of a <code>For</code> loop.  </p>\n<p> You can refer to the variable only from within the block.  </p>\n</li>\n</ul>\n<h4 id=\"to-make-a-variable-visible-only-within-a-procedure\">To make a variable visible only within a procedure</h4>\n<ul>\n<li><p>Place the <code>Dim</code> statement for the variable inside the procedure but outside any block (such as a <code>With</code>...<code>End With</code> block).  </p>\n<p> You can refer to the variable only from within the procedure, including inside any block contained in the procedure.  </p>\n</li>\n</ul>\n<h2 id=\"scope-at-module-or-namespace-level\">Scope at Module or Namespace Level</h2>\n<p> For convenience, the single term <em>module level</em> applies equally to modules, classes, and structures. The access level of a module level variable determines its scope. The namespace that contains the module, class, or structure also influences the scope.  </p>\n<h4 id=\"to-make-a-variable-visible-throughout-a-module-class-or-structure\">To make a variable visible throughout a module, class, or structure</h4>\n<ol>\n<li><p>Place the <code>Dim</code> statement for the variable inside the module, class, or structure, but outside any procedure.  </p>\n</li>\n<li><p>Include the <a href=\"../../../language-reference/modifiers/private\" data-linktype=\"relative-path\">Private</a> keyword in the <code>Dim</code> statement.  </p>\n</li>\n<li><p>You can refer to the variable from anywhere within the module, class, or structure, but not from outside it.  </p>\n</li>\n</ol>\n<h4 id=\"to-make-a-variable-visible-throughout-a-namespace\">To make a variable visible throughout a namespace</h4>\n<ol>\n<li><p>Place the <code>Dim</code> statement for the variable inside the module, class, or structure, but outside any procedure.  </p>\n</li>\n<li><p>Include the <a href=\"../../../language-reference/modifiers/friend\" data-linktype=\"relative-path\">Friend</a> or <a href=\"../../../language-reference/modifiers/public\" data-linktype=\"relative-path\">Public</a> keyword in the <code>Dim</code> statement.  </p>\n</li>\n<li><p>You can refer to the variable from anywhere within the namespace containing the module, class, or structure.  </p>\n</li>\n</ol>\n<h2 id=\"example\">Example</h2>\n<p> The following example declares a variable at module level and limits its visibility to code within the module.  </p>\n<pre class=\"loading\"><code>Module demonstrateScope  \n    Private strMsg As String  \n    Sub initializePrivateVariable()  \n        strMsg = &quot;This variable cannot be used outside this module.&quot;  \n    End Sub  \n    Sub usePrivateVariable()  \n        MsgBox(strMsg)  \n    End Sub  \nEnd Module  \n</code></pre><p> In the preceding example, all the procedures defined in module <code>demonstrateScope</code> can refer to the <code>String</code> variable <code>strMsg</code>. When the <code>usePrivateVariable</code> procedure is called, it displays the contents of the string variable <code>strMsg</code> in a dialog box.  </p>\n<p> With the following alteration to the preceding example, the string variable <code>strMsg</code> can be referred to by code anywhere in the namespace of its declaration.  </p>\n<pre class=\"loading\"><code>Public strMsg As String  \n</code></pre><h2 id=\"robust-programming\">Robust Programming</h2>\n<p> The narrower the scope of a variable, the fewer opportunities you have for accidentally referring to it in place of another variable with the same name. You can also minimize problems of reference matching.  </p>\n<h2 id=\"net-framework-security\">.NET Framework Security</h2>\n<p> The narrower the scope of a variable, the smaller the chances that malicious code can make improper use of it.  </p>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"scope\" data-linktype=\"relative-path\">Scope in Visual Basic</a><br> <a href=\"lifetime\" data-linktype=\"relative-path\">Lifetime in Visual Basic</a><br> <a href=\"access-levels\" data-linktype=\"relative-path\">Access Levels in Visual Basic</a><br> <a href=\"../variables/index\" data-linktype=\"relative-path\">Variables</a><br> <a href=\"../variables/variable-declaration\" data-linktype=\"relative-path\">Variable Declaration</a><br> <a href=\"../../../language-reference/statements/dim-statement\" data-linktype=\"relative-path\">Dim Statement</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"44b7f62a-cb5c-4d50-bce9-60ae68f87072\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"12\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/language-features/declared-elements/how-to-control-the-scope-of-a-variable.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/language-features/declared-elements/how-to-control-the-scope-of-a-variable.md\">\r\n<meta name=\"document_id\" content=\"ab798734-8906-8c0d-5534-8ca503371690\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"How to: Control the Scope of a Variable (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"44b7f62a-cb5c-4d50-bce9-60ae68f87072","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":12,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["variables [Visual Basic], scope","declared elements, scope","visibility, declared elements","variables [Visual Basic], visibility","scope, declared elements","scope, variables","scope, Visual Basic","declared elements, visibility","visibility, variables"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/language-features/declared-elements/how-to-control-the-scope-of-a-variable.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/language-features/declared-elements/how-to-control-the-scope-of-a-variable.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/language-features/declared-elements/how-to-control-the-scope-of-a-variable.md","document_id":"ab798734-8906-8c0d-5534-8ca503371690","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/language-features/declared-elements/how-to-control-the-scope-of-a-variable","toc_asset_id":"articles/visual-basic/programming-guide/language-features/declared-elements/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Control the Scope of a Variable (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":483,"_op_rawTitle":"<h1 id=\"how-to-control-the-scope-of-a-variable-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/language-features/declared-elements/how-to-control-the-scope-of-a-variable.md\" sourcestartlinenumber=\"44\" sourceendlinenumber=\"44\">How to: Control the Scope of a Variable (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/language-features/declared-elements/how-to-control-the-scope-of-a-variable","fileRelativePath":"articles/visual-basic/programming-guide/language-features/declared-elements/how-to-control-the-scope-of-a-variable.html"},"themesRelativePathToOutputRoot":"_themes/"}