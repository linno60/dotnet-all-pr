{"content":"<div><div class=\"content\">\n<p>This is the second of two topics that demonstrate how to work with events. The first topic, <a href=\"walkthrough-declaring-and-raising-events\" data-linktype=\"relative-path\">Walkthrough: Declaring and Raising Events</a>, shows how to declare and raise events. This section uses the form and class from that walkthrough to show how to handle events when they take place.  </p>\n<p> The <code>Widget</code> class example uses traditional event-handling statements. Visual Basic provides other techniques for working with events. As an exercise, you can modify this example to use the <code>AddHandler</code> and <code>Handles</code> statements.  </p>\n<h3 id=\"to-handle-the-percentdone-event-of-the-widget-class\">To handle the PercentDone event of the Widget class</h3>\n<ol>\n<li><p>Place the following code in <code>Form1</code>:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbcnWalkthroughDeclaringAndRaisingEvents#4\">    Private WithEvents mWidget As Widget\n    Private mblnCancel As Boolean\n</code></pre><p> The <code>WithEvents</code> keyword specifies that the variable <code>mWidget</code> is used to handle an object&#39;s events. You specify the kind of object by supplying the name of the class from which the object will be created.  </p>\n<p> The variable <code>mWidget</code> is declared in <code>Form1</code> because <code>WithEvents</code> variables must be class-level. This is true regardless of the type of class you place them in.  </p>\n<p> The variable <code>mblnCancel</code> is used to cancel the <code>LongTask</code> method.  </p>\n</li>\n</ol>\n<h2 id=\"writing-code-to-handle-an-event\">Writing Code to Handle an Event</h2>\n<p> As soon as you declare a variable using <code>WithEvents</code>, the variable name appears in the left drop-down list of the class&#39;s <strong>Code Editor</strong>. When you select <code>mWidget</code>, the <code>Widget</code> class&#39;s events appear in the right drop-down list. Selecting an event displays the corresponding event procedure, with the prefix <code>mWidget</code> and an underscore. All the event procedures associated with a <code>WithEvents</code> variable are given the variable name as a prefix.  </p>\n<h4 id=\"to-handle-an-event\">To handle an event</h4>\n<ol>\n<li><p>Select <code>mWidget</code> from the left drop-down list in the <strong>Code Editor</strong>.  </p>\n</li>\n<li><p>Select the <code>PercentDone</code> event from the right drop-down list. The <strong>Code Editor</strong> opens the <code>mWidget_PercentDone</code> event procedure.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <strong>Code Editor</strong> is useful, but not required, for inserting new event handlers. In this walkthrough, it is more direct to just copy the event handlers directly into your code.  </p>\n</div>\n</li>\n<li><p>Add the following code to the <code>mWidget_PercentDone</code> event handler:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbcnWalkthroughDeclaringAndRaisingEvents#5\">    Private Sub mWidget_PercentDone( \n        ByVal Percent As Single, \n        ByRef Cancel As Boolean \n    ) Handles mWidget.PercentDone\n        lblPercentDone.Text = CInt(100 * Percent) &amp; &quot;%&quot;\n        My.Application.DoEvents()\n        If mblnCancel Then Cancel = True\n    End Sub\n</code></pre><p> Whenever the <code>PercentDone</code> event is raised, the event procedure displays the percent complete in a <code>Label</code> control. The <code>DoEvents</code> method allows the label to repaint, and also gives the user the opportunity to click the <strong>Cancel</strong> button.  </p>\n</li>\n<li><p>Add the following code for the <code>Button2_Click</code> event handler:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbcnWalkthroughDeclaringAndRaisingEvents#6\">    Private Sub Button2_Click( \n        ByVal sender As Object, \n        ByVal e As System.EventArgs \n    ) Handles Button2.Click\n        mblnCancel = True\n    End Sub\n</code></pre><p>If the user clicks the <strong>Cancel</strong> button while <code>LongTask</code> is running, the <code>Button2_Click</code> event is executed as soon as the <code>DoEvents</code> statement allows event processing to occur. The class-level variable <code>mblnCancel</code> is set to <code>True</code>, and the <code>mWidget_PercentDone</code> event then tests it and sets the <code>ByRef Cancel</code> argument to <code>True</code>.  </p>\n</li>\n</ol>\n<h2 id=\"connecting-a-withevents-variable-to-an-object\">Connecting a WithEvents Variable to an Object</h2>\n<p> <code>Form1</code> is now set up to handle a <code>Widget</code> object&#39;s events. All that remains is to find a <code>Widget</code> somewhere.  </p>\n<p> When you declare a variable <code>WithEvents</code> at design time, no object is associated with it. A <code>WithEvents</code> variable is just like any other object variable. You have to create an object and assign a reference to it with the <code>WithEvents</code> variable.  </p>\n<h4 id=\"to-create-an-object-and-assign-a-reference-to-it\">To create an object and assign a reference to it</h4>\n<ol>\n<li><p>Select <strong>(Form1 Events)</strong> from the left drop-down list in the <strong>Code Editor</strong>.  </p>\n</li>\n<li><p>Select the <code>Load</code> event from the right drop-down list. The <strong>Code Editor</strong> opens the <code>Form1_Load</code> event procedure.  </p>\n</li>\n<li><p>Add the following code for the <code>Form1_Load</code> event procedure to create the <code>Widget</code>:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbcnWalkthroughDeclaringAndRaisingEvents#7\">    Private Sub Form1_Load( \n        ByVal sender As System.Object, \n        ByVal e As System.EventArgs \n    ) Handles MyBase.Load\n        mWidget = New Widget\n    End Sub\n</code></pre><p>When this code executes, Visual Basic creates a <code>Widget</code> object and connects its events to the event procedures associated with <code>mWidget</code>. From that point on, whenever the <code>Widget</code> raises its <code>PercentDone</code> event, the <code>mWidget_PercentDone</code> event procedure is executed.  </p>\n</li>\n</ol>\n<h4 id=\"to-call-the-longtask-method\">To call the LongTask method</h4>\n<ul>\n<li><p>Add the following code to the <code>Button1_Click</code> event handler:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbcnWalkthroughDeclaringAndRaisingEvents#8\">    Private Sub Button1_Click( \n        ByVal sender As Object, \n        ByVal e As System.EventArgs \n    ) Handles Button1.Click\n        mblnCancel = False\n        lblPercentDone.Text = &quot;0%&quot;\n        lblPercentDone.Refresh()\n        mWidget.LongTask(12.2, 0.33)\n        If Not mblnCancel Then lblPercentDone.Text = CStr(100) &amp; &quot;%&quot;\n    End Sub\n</code></pre><p>Before the <code>LongTask</code> method is called, the label that displays the percent complete must be initialized, and the class-level <code>Boolean</code> flag for canceling the method must be set to <code>False</code>.  </p>\n<p><code>LongTask</code> is called with a task duration of 12.2 seconds. The <code>PercentDone</code> event is raised once every one-third of a second. Each time the event is raised, the <code>mWidget_PercentDone</code> event procedure is executed.  </p>\n<p>When <code>LongTask</code> is done, <code>mblnCancel</code> is tested to see if <code>LongTask</code> ended normally, or if it stopped because <code>mblnCancel</code> was set to <code>True</code>. The percent complete is updated only in the former case.  </p>\n</li>\n</ul>\n<h4 id=\"to-run-the-program\">To run the program</h4>\n<ol>\n<li><p>Press F5 to put the project in run mode.  </p>\n</li>\n<li><p>Click the <strong>Start Task</strong> button. Each time the <code>PercentDone</code> event is raised, the label is updated with the percentage of the task that is complete.  </p>\n</li>\n<li><p>Click the <strong>Cancel</strong> button to stop the task. Notice that the appearance of the <strong>Cancel</strong> button does not change immediately when you click it. The <code>Click</code> event cannot happen until the <code>My.Application.DoEvents</code> statement allows event processing.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <code>My.Application.DoEvents</code> method does not process events in exactly the same way as the form does. For example, in this walkthrough, you must click the <strong>Cancel</strong> button twice. To allow the form to handle the events directly, you can use multithreading. For more information, see <a href=\"http://msdn.microsoft.com/library/552f6c68-dbdb-4327-ae36-32cf9063d88c\" data-linktype=\"external\">Threading</a>.  </p>\n</div>\n<p>You may find it instructive to run the program with F11 and step through the code a line at a time. You can clearly see how execution enters <code>LongTask</code>, and then briefly re-enters <code>Form1</code> each time the <code>PercentDone</code> event is raised.  </p>\n<p>What would happen if, while execution was back in the code of <code>Form1</code>, the <code>LongTask</code> method were called again? At worst, a stack overflow might occur if <code>LongTask</code> were called every time the event was raised.  </p>\n<p>You can cause the variable <code>mWidget</code> to handle events for a different <code>Widget</code> object by assigning a reference to the new <code>Widget</code> to <code>mWidget</code>. In fact, you can make the code in <code>Button1_Click</code> do this every time you click the button.  </p>\n</li>\n</ol>\n<h4 id=\"to-handle-events-for-a-different-widget\">To handle events for a different widget</h4>\n<ul>\n<li><p>Add the following line of code to the <code>Button1_Click</code> procedure, immediately preceding the line that reads <code>mWidget.LongTask(12.2, 0.33)</code>:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbcnWalkthroughDeclaringAndRaisingEvents#9\">        mWidget = New Widget\n        &#39; Create a new Widget object.\n</code></pre><p>The code above creates a new <code>Widget</code> each time the button is clicked. As soon as the <code>LongTask</code> method completes, the reference to the <code>Widget</code> is released, and the <code>Widget</code> is destroyed.  </p>\n<p>A <code>WithEvents</code> variable can contain only one object reference at a time, so if you assign a different <code>Widget</code> object to <code>mWidget</code>, the previous <code>Widget</code> object&#39;s events will no longer be handled. If <code>mWidget</code> is the only object variable containing a reference to the old <code>Widget</code>, the object is destroyed. If you want to handle events from several <code>Widget</code> objects, use the <code>AddHandler</code> statement to process events from each object separately.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> You can declare as many <code>WithEvents</code> variables as you need, but arrays of <code>WithEvents</code> variables are not supported.  </p>\n</div>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"walkthrough-declaring-and-raising-events\" data-linktype=\"relative-path\">Walkthrough: Declaring and Raising Events</a><br> <a href=\"index\" data-linktype=\"relative-path\">Events</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet/toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"f145b3fc-5ae0-4509-a2aa-1ff6934706bd\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"18\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/0a5d76c154aeb9b749c9c3fc5ad0962e93754a62/docs/visual-basic/programming-guide/language-features/events/walkthrough-handling-events.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/language-features/events/walkthrough-handling-events.md\">\r\n<meta name=\"document_id\" content=\"5867718b-3f2e-180e-cdd0-5f18fd46d8ab\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Handling Events (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"f145b3fc-5ae0-4509-a2aa-1ff6934706bd","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":18,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["event handling [Visual Basic], walkthroughs","walkthroughs [Visual Basic], event handling","variables [Visual Basic], WithEvents","events [Visual Basic], walkthroughs","WithEvents keyword, walkthroughs","event handlers [Visual Basic], walkthroughs"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Reorganizing the VB TOC (#1348)","commit_sha":"0a5d76c154aeb9b749c9c3fc5ad0962e93754a62","commit_date":"2017-02-14 10:22:48 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/0a5d76c154aeb9b749c9c3fc5ad0962e93754a62/docs/visual-basic/programming-guide/language-features/events/walkthrough-handling-events.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/language-features/events/walkthrough-handling-events.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/language-features/events/walkthrough-handling-events.md","document_id":"5867718b-3f2e-180e-cdd0-5f18fd46d8ab","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/language-features/events/walkthrough-handling-events","toc_asset_id":"articles/visual-basic/programming-guide/language-features/events/toc.json","toc_rel":"toc.json","_op_ogTitle":"Handling Events (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":1190,"_op_rawTitle":"<h1 id=\"walkthrough-handling-events-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/language-features/events/walkthrough-handling-events.md\" sourcestartlinenumber=\"41\" sourceendlinenumber=\"41\">Walkthrough: Handling Events (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/language-features/events/walkthrough-handling-events","fileRelativePath":"articles/visual-basic/programming-guide/language-features/events/walkthrough-handling-events.html"},"themesRelativePathToOutputRoot":"_themes/"}