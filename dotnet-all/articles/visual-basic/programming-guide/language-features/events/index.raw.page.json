{"content":"<div><div class=\"content\">\n<p>While you might visualize a Visual Studio project as a series of procedures that execute in a sequence, in reality, most programs are event driven—meaning the flow of execution is determined by external occurrences called <em>events</em>.  </p>\n<p> An event is a signal that informs an application that something important has occurred. For example, when a user clicks a control on a form, the form can raise a <code>Click</code> event and call a procedure that handles the event. Events also allow separate tasks to communicate. Say, for example, that your application performs a sort task separately from the main application. If a user cancels the sort, your application can send a cancel event instructing the sort process to stop.  </p>\n<h2 id=\"event-terms-and-concepts\">Event Terms and Concepts</h2>\n<p> This section describes the terms and concepts used with events in Visual Basic.  </p>\n<h3 id=\"declaring-events\">Declaring Events</h3>\n<p> You declare events within classes, structures, modules, and interfaces using the <code>Event</code> keyword, as in the following example:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrEvents#24\">Event AnEvent(ByVal EventNumber As Integer)\n</code></pre><h3 id=\"raising-events\">Raising Events</h3>\n<p> An event is like a message announcing that something important has occurred. The act of broadcasting the message is called <em>raising</em> the event. In Visual Basic, you raise events with the <code>RaiseEvent</code> statement, as in the following example:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrEvents#25\">RaiseEvent AnEvent(EventNumber)\n</code></pre><p> Events must be raised within the scope of the class, module, or structure where they are declared. For example, a derived class cannot raise events inherited from a base class.  </p>\n<h3 id=\"event-senders\">Event Senders</h3>\n<p> Any object capable of raising an event is an <em>event sender</em>, also known as an <em>event source</em>. Forms, controls, and user-defined objects are examples of event senders.  </p>\n<h3 id=\"event-handlers\">Event Handlers</h3>\n<p> <em>Event handlers</em> are procedures that are called when a corresponding event occurs. You can use any valid subroutine with a matching signature as an event handler. You cannot use a function as an event handler, however, because it cannot return a value to the event source.  </p>\n<p> Visual Basic uses a standard naming convention for event handlers that combines the name of the event sender, an underscore, and the name of the event. For example, the <code>Click</code> event of a button named <code>button1</code> would be named <code>Sub button1_Click</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> We recommend that you use this naming convention when defining event handlers for your own events, but it is not required; you can use any valid subroutine name.  </p>\n</div>\n<h2 id=\"associating-events-with-event-handlers\">Associating Events with Event Handlers</h2>\n<p> Before an event handler becomes usable, you must first associate it with an event by using either the <code>Handles</code> or <code>AddHandler</code> statement.  </p>\n<h3 id=\"withevents-and-the-handles-clause\">WithEvents and the Handles Clause</h3>\n<p> The <code>WithEvents</code> statement and <code>Handles</code> clause provide a declarative way of specifying event handlers. An event raised by an object declared with the <code>WithEvents</code> keyword can be handled by any procedure with a <code>Handles</code> statement for that event, as shown in the following example:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrEvents#1\">&#39; Declare a WithEvents variable.\nDim WithEvents EClass As New EventClass\n\n&#39; Call the method that raises the object&#39;s events.\nSub TestEvents()\n    EClass.RaiseEvents()\nEnd Sub\n\n&#39; Declare an event handler that handles multiple events.\nSub EClass_EventHandler() Handles EClass.XEvent, EClass.YEvent\n    MsgBox(&quot;Received Event.&quot;)\nEnd Sub\n\nClass EventClass\n    Public Event XEvent()\n    Public Event YEvent()\n    &#39; RaiseEvents raises both events.\n    Sub RaiseEvents()\n        RaiseEvent XEvent()\n        RaiseEvent YEvent()\n    End Sub\nEnd Class\n</code></pre><p> The <code>WithEvents</code> statement and the <code>Handles</code> clause are often the best choice for event handlers because the declarative syntax they use makes event handling easier to code, read and debug. However, be aware of the following limitations on the use of <code>WithEvents</code> variables:  </p>\n<ul>\n<li><p>You cannot use a <code>WithEvents</code> variable as an object variable. That is, you cannot declare it as <code>Object</code>—you must specify the class name when you declare the variable.  </p>\n</li>\n<li><p>Because shared eventsare not tied to class instances, you cannot use <code>WithEvents</code> to declaratively handle shared events. Similarly, you cannot use <code>WithEvents</code> or <code>Handles</code> to handle events from a <code>Structure</code>. In both cases, you can use the <code>AddHandler</code> statement to handle those events.  </p>\n</li>\n<li><p>You cannot create arrays of <code>WithEvents</code> variables.  </p>\n</li>\n</ul>\n<p> <code>WithEvents</code> variables allow a single event handler to handle one or more kind of event, or one or more event handlers to handle the same kind of event.  </p>\n<p> Although the <code>Handles</code> clause is the standard way of associating an event with an event handler, it is limited to associating events with event handlers at compile time.  </p>\n<p> In some cases, such as with events associated with forms or controls, Visual Basic automatically stubs out an empty event handler and associates it with an event. For example, when you double-click a command button on a form in design mode, Visual Basic creates an empty event handler and a <code>WithEvents</code> variable for the command button, as in the following code:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrEvents#26\">Friend WithEvents Button1 As System.Windows.Forms.Button\nProtected Sub Button1_Click() Handles Button1.Click\nEnd Sub\n</code></pre><h3 id=\"addhandler-and-removehandler\">AddHandler and RemoveHandler</h3>\n<p> The <code>AddHandler</code> statement is similar to the <code>Handles</code> clause in that both allow you to specify an event handler. However, <code>AddHandler</code>, used with <code>RemoveHandler</code>, provides greater flexibility than the <code>Handles</code> clause, allowing you to dynamically add, remove, and change the event handler associated with an event. If you want to handle shared events or events from a structure, you must use <code>AddHandler</code>.  </p>\n<p> <code>AddHandler</code> takes two arguments: the name of an event from an event sender such as a control, and an expression that evaluates to a delegate. You do not need to explicitly specify the delegate class when using <code>AddHandler</code>, since the <code>AddressOf</code> statement always returns a reference to the delegate. The following example associates an event handler with an event raised by an object:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrEvents#28\">AddHandler Obj.XEvent, AddressOf Me.XEventHandler\n</code></pre><p> <code>RemoveHandler</code>, which disconnects an event from an event handler, uses the same syntax as <code>AddHandler</code>. For example:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrEvents#29\">RemoveHandler Obj.XEvent, AddressOf Me.XEventHandler\n</code></pre><p> In the following example, an event handler is associated with an event, and the event is raised. The event handler catches the event and displays a message.  </p>\n<p> Then the first event handler is removed and a different event handler is associated with the event. When the event is raised again, a different message is displayed.  </p>\n<p> Finally, the second event handler is removed and the event is raised for a third time. Because there is no longer an event handler associated with the event, no action is taken.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrEvents#38\">Module Module1\n\n    Sub Main()\n        Dim c1 As New Class1\n        &#39; Associate an event handler with an event.\n        AddHandler c1.AnEvent, AddressOf EventHandler1\n        &#39; Call a method to raise the event.\n        c1.CauseTheEvent()\n        &#39; Stop handling the event.\n        RemoveHandler c1.AnEvent, AddressOf EventHandler1\n        &#39; Now associate a different event handler with the event.\n        AddHandler c1.AnEvent, AddressOf EventHandler2\n        &#39; Call a method to raise the event.\n        c1.CauseTheEvent()\n        &#39; Stop handling the event.\n        RemoveHandler c1.AnEvent, AddressOf EventHandler2\n        &#39; This event will not be handled.\n        c1.CauseTheEvent()\n    End Sub\n\n    Sub EventHandler1()\n        &#39; Handle the event.\n        MsgBox(&quot;EventHandler1 caught event.&quot;)\n    End Sub\n\n    Sub EventHandler2()\n        &#39; Handle the event.\n        MsgBox(&quot;EventHandler2 caught event.&quot;)\n    End Sub\n\n    Public Class Class1\n        &#39; Declare an event.\n        Public Event AnEvent()\n        Sub CauseTheEvent()\n            &#39; Raise an event.\n            RaiseEvent AnEvent()\n        End Sub\n    End Class\n\nEnd Module\n</code></pre><h2 id=\"handling-events-inherited-from-a-base-class\">Handling Events Inherited from a Base Class</h2>\n<p> <em>Derived classes</em>—classes that inherit characteristics from a base class—can handle events raised by their base class using the <code>Handles``MyBase</code> statement.  </p>\n<h4 id=\"to-handle-events-from-a-base-class\">To handle events from a base class</h4>\n<ul>\n<li><p>Declare an event handler in the derived class by adding a <code>Handles MyBase.</code><em>eventname</em> statement to the declaration line of your event-handler procedure, where <em>eventname</em> is the name of the event in the base class you are handling. For example:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrEvents#12\">Public Class BaseClass\n    Public Event BaseEvent(ByVal i As Integer)\n    &#39; Place methods and properties here.\nEnd Class\n\nPublic Class DerivedClass\n    Inherits BaseClass\n    Sub EventHandler(ByVal x As Integer) Handles MyBase.BaseEvent\n        &#39; Place code to handle events from BaseClass here.\n    End Sub\nEnd Class\n</code></pre></li>\n</ul>\n<h2 id=\"related-sections\">Related Sections</h2>\n<table>\n<thead>\n<tr>\n<th>Title</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"walkthrough-declaring-and-raising-events\" data-linktype=\"relative-path\">Walkthrough: Declaring and Raising Events</a></td>\n<td>Provides a step-by-step description of how to declare and raise events for a class.</td>\n</tr>\n<tr>\n<td><a href=\"walkthrough-handling-events\" data-linktype=\"relative-path\">Walkthrough: Handling Events</a></td>\n<td>Demonstrates how to write an event-handler procedure.</td>\n</tr>\n<tr>\n<td><a href=\"how-to-declare-custom-events-to-avoid-blocking\" data-linktype=\"relative-path\">How to: Declare Custom Events To Avoid Blocking</a></td>\n<td>Demonstrates how to define a custom event that allows its event handlers to be called asynchronously.</td>\n</tr>\n<tr>\n<td><a href=\"how-to-declare-custom-events-to-conserve-memory\" data-linktype=\"relative-path\">How to: Declare Custom Events To Conserve Memory</a></td>\n<td>Demonstrates how to define a custom event that uses memory only when the event is handled.</td>\n</tr>\n<tr>\n<td><a href=\"troubleshooting-inherited-event-handlers\" data-linktype=\"relative-path\">Troubleshooting Inherited Event Handlers in Visual Basic</a></td>\n<td>Lists common issues that arise with event handlers in inherited components.</td>\n</tr>\n<tr>\n<td><a href=\"http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f\" data-linktype=\"external\">Events</a></td>\n<td>Provides an overview of the event model in the .NET Framework.</td>\n</tr>\n<tr>\n<td><a href=\"https://msdn.microsoft.com/library/dacysss4.aspx\" data-linktype=\"external\">Creating Event Handlers in Windows Forms</a></td>\n<td>Describes how to work with events associated with Windows Forms objects.</td>\n</tr>\n<tr>\n<td><a href=\"../delegates/index\" data-linktype=\"relative-path\">Delegates</a></td>\n<td>Provides an overview of delegates in Visual Basic.</td>\n</tr>\n</tbody>\n</table>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"8fb0353a-e41b-4e23-b78f-da65db832f70\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"12\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2017-03-15 06:14 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/0a5d76c154aeb9b749c9c3fc5ad0962e93754a62/docs/visual-basic/programming-guide/language-features/events/index.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/language-features/events/index.md\">\r\n<meta name=\"document_id\" content=\"b08ff96a-7bb6-40ab-52c8-29a7b161e14c\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","title":"Events (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"8fb0353a-e41b-4e23-b78f-da65db832f70","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":12,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["events [Visual Basic], about events","events [Visual Basic]"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Steve Hoag","author_email":"shoag@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Reorganizing the VB TOC (#1348)","commit_sha":"0a5d76c154aeb9b749c9c3fc5ad0962e93754a62","commit_date":"2017-02-14 10:22:48 -0800"}],"updated_at":"2017-03-15 06:14 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"}],"update_at":"3/15/2017"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/0a5d76c154aeb9b749c9c3fc5ad0962e93754a62/docs/visual-basic/programming-guide/language-features/events/index.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/language-features/events/index.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/language-features/events/index.md","document_id":"b08ff96a-7bb6-40ab-52c8-29a7b161e14c","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/language-features/events/index","toc_asset_id":"articles/visual-basic/programming-guide/language-features/events/toc.json","toc_rel":"toc.json","_op_ogTitle":"Events (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":1392,"_op_rawTitle":"<h1 id=\"events-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/language-features/events/index.md\" sourcestartlinenumber=\"37\" sourceendlinenumber=\"37\">Events (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/language-features/events/index","fileRelativePath":"articles/visual-basic/programming-guide/language-features/events/index.html"},"themesRelativePathToOutputRoot":"_themes/"}