{"content":"<div><div class=\"content\">\n<p>The compiler generates an ID string for each construct in your code that is tagged to generate documentation. (For information on how to tag your code, see <a href=\"../../language-reference/xmldoc/recommended-xml-tags-for-documentation-comments\" data-linktype=\"relative-path\">XML Comment Tags</a>.) The ID string uniquely identifies the construct. Programs that process the XML file can use the ID string to identify the corresponding .NET Framework metadata/reflection item.  </p>\n<p> The XML file is not a hierarchical representation of your code; it is a flat list with a generated ID for each element.  </p>\n<p> The compiler observes the following rules when it generates the ID strings:  </p>\n<ul>\n<li><p>No white space is placed in the string.  </p>\n</li>\n<li><p>The first part of the ID string identifies the kind of member being identified, with a single character followed by a colon. The following member types are used.  </p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Character</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>N</td>\n<td>namespace<br><br> You cannot add documentation comments to a namespace, but you can make CREF references to them, where supported.</td>\n</tr>\n<tr>\n<td>T</td>\n<td>type: <code>Class</code>, <code>Module</code>, <code>Interface</code>, <code>Structure</code>, <code>Enum</code>, <code>Delegate</code></td>\n</tr>\n<tr>\n<td>F</td>\n<td>field: <code>Dim</code></td>\n</tr>\n<tr>\n<td>P</td>\n<td>property: <code>Property</code> (including default properties)</td>\n</tr>\n<tr>\n<td>M</td>\n<td>method: <code>Sub</code>, <code>Function</code>, <code>Declare</code>, <code>Operator</code></td>\n</tr>\n<tr>\n<td>E</td>\n<td>event: <code>Event</code></td>\n</tr>\n<tr>\n<td>!</td>\n<td>error string<br><br> The rest of the string provides information about the error. The Visual Basic compiler generates error information for links that cannot be resolved.</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>The second part of the <code>String</code> is the fully qualified name of the item, starting at the root of the namespace. The name of the item, its enclosing type(s), and the namespace are separated by periods. If the name of the item itself contains periods, they are replaced by the number sign (#). It is assumed that no item has a number sign directly in its name. For example, the fully qualified name of the <code>String</code> constructor would be <code>System.String.#ctor</code>.  </p>\n</li>\n<li><p>For properties and methods, if there are arguments to the method, the argument list enclosed in parentheses follows. If there are no arguments, no parentheses are present. The arguments are separated by commas. The encoding of each argument follows directly how it is encoded in a .NET Framework signature.  </p>\n</li>\n</ul>\n<h2 id=\"example\">Example</h2>\n<p> The following code shows how the ID strings for a class and its members are generated.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbcnXmlDocComments#10\">Namespace SampleNamespace\n\n  &#39;&#39;&#39; &lt;summary&gt;Signature is \n  &#39;&#39;&#39; &quot;T:SampleNamespace.SampleClass&quot;\n  &#39;&#39;&#39; &lt;/summary&gt;\n  Public Class SampleClass\n\n    &#39;&#39;&#39; &lt;summary&gt;Signature is \n    &#39;&#39;&#39; &quot;M:SampleNamespace.SampleClass.#ctor&quot;\n    &#39;&#39;&#39; &lt;/summary&gt;\n    Public Sub New()\n    End Sub\n\n    &#39;&#39;&#39; &lt;summary&gt;Signature is \n    &#39;&#39;&#39; &quot;M:SampleNamespace.SampleClass.#ctor(System.Int32)&quot;\n    &#39;&#39;&#39; &lt;/summary&gt;\n    Public Sub New(ByVal i As Integer)\n    End Sub\n\n    &#39;&#39;&#39; &lt;summary&gt;Signature is \n    &#39;&#39;&#39; &quot;F:SampleNamespace.SampleClass.SampleField&quot;\n    &#39;&#39;&#39; &lt;/summary&gt;\n    Public SampleField As String\n\n    &#39;&#39;&#39; &lt;summary&gt;Signature is \n    &#39;&#39;&#39; &quot;F:SampleNamespace.SampleClass.SampleConstant&quot;\n    &#39;&#39;&#39; &lt;/summary&gt;\n    Public Const SampleConstant As Integer = 42\n\n    &#39;&#39;&#39; &lt;summary&gt;Signature is \n    &#39;&#39;&#39; &quot;M:SampleNamespace.SampleClass.SampleFunction&quot;\n    &#39;&#39;&#39; &lt;/summary&gt;\n    Public Function SampleFunction() As Integer\n    End Function\n\n    &#39;&#39;&#39; &lt;summary&gt;Signature is \n    &#39;&#39;&#39; &quot;M:SampleNamespace.SampleClass.\n    &#39;&#39;&#39; SampleFunction(System.Int16[],System.Int32[0:,0:])&quot;\n    &#39;&#39;&#39; &lt;/summary&gt;\n    Public Function SampleFunction( \n        ByVal array1D() As Short, \n        ByVal array2D(,) As Integer) As Integer\n    End Function\n\n    &#39;&#39;&#39; &lt;summary&gt;Signature is \n    &#39;&#39;&#39; &quot;M:SampleNamespace.SampleClass. \n    &#39;&#39;&#39; op_Addition(SampleNamespace.SampleClass,\n    &#39;&#39;&#39;             SampleNamespace.SampleClass)&quot;\n    &#39;&#39;&#39; &lt;/summary&gt;\n    Public Shared Operator +( \n        ByVal operand1 As SampleClass, \n        ByVal operand2 As SampleClass) As SampleClass\n\n      Return Nothing\n    End Operator\n\n    &#39;&#39;&#39; &lt;summary&gt;Signature is \n    &#39;&#39;&#39; &quot;P:SampleNamespace.SampleClass.SampleProperty&quot;\n    &#39;&#39;&#39; &lt;/summary&gt;\n    Public Property SampleProperty() As Integer\n      Get\n      End Get\n      Set(ByVal value As Integer)\n      End Set\n    End Property\n\n    &#39;&#39;&#39; &lt;summary&gt;Signature is\n    &#39;&#39;&#39; &quot;P:SampleNamespace.SampleClass.Item(System.String)&quot;\n    &#39;&#39;&#39; &lt;/summary&gt;\n    Default Public ReadOnly Property Item( \n        ByVal s As String) As Integer\n\n      Get\n      End Get\n    End Property\n\n    &#39;&#39;&#39; &lt;summary&gt;Signature is \n    &#39;&#39;&#39; &quot;T:SampleNamespace.SampleClass.NestedClass&quot;\n    &#39;&#39;&#39; &lt;/summary&gt;\n    Public Class NestedClass\n    End Class\n\n    &#39;&#39;&#39; &lt;summary&gt;Signature is \n    &#39;&#39;&#39; &quot;E:SampleNamespace.SampleClass.SampleEvent(System.Int32)&quot;\n    &#39;&#39;&#39; &lt;/summary&gt;\n    Public Event SampleEvent As SampleDelegate\n\n    &#39;&#39;&#39; &lt;summary&gt;Signature is \n    &#39;&#39;&#39; &quot;T:SampleNamespace.SampleClass.SampleDelegate&quot;\n    &#39;&#39;&#39; &lt;/summary&gt;\n    Public Delegate Sub SampleDelegate(ByVal i As Integer)\n  End Class\nEnd Namespace\n</code></pre><h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"../../reference/command-line-compiler/doc\" data-linktype=\"relative-path\">/doc</a><br> <a href=\"how-to-create-xml-documentation\" data-linktype=\"relative-path\">How to: Create XML Documentation</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"78a15cd0-7708-4e79-85d1-c154b7a14a8c\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"16\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/program-structure/processing-the-xml-file.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/program-structure/processing-the-xml-file.md\">\r\n<meta name=\"document_id\" content=\"f109f9c8-2355-c9bb-1a4b-e0475244c0dc\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"Processing the XML File (Visual Basic) | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"78a15cd0-7708-4e79-85d1-c154b7a14a8c","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":16,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["XML comments, parsing [Visual Basic]"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/program-structure/processing-the-xml-file.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/program-structure/processing-the-xml-file.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/program-structure/processing-the-xml-file.md","document_id":"f109f9c8-2355-c9bb-1a4b-e0475244c0dc","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/programming-guide/program-structure/processing-the-xml-file","toc_asset_id":"articles/visual-basic/programming-guide/program-structure/toc.json","toc_rel":"toc.json","_op_ogTitle":"Processing the XML File (Visual Basic)","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":573,"_op_rawTitle":"<h1 id=\"processing-the-xml-file-visual-basic\" sourcefile=\"docs/visual-basic/programming-guide/program-structure/processing-the-xml-file.md\" sourcestartlinenumber=\"36\" sourceendlinenumber=\"36\">Processing the XML File (Visual Basic)</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/programming-guide/program-structure/processing-the-xml-file","fileRelativePath":"articles/visual-basic/programming-guide/program-structure/processing-the-xml-file.html"},"themesRelativePathToOutputRoot":"_themes/"}