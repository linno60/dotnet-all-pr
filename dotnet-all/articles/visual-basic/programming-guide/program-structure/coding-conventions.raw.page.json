{"content":"<div><div class=\"content\">\n<p>Microsoft develops samples and documentation that follow the guidelines in this topic. If you follow the same coding conventions, you may gain the following benefits:  </p>\n<ul>\n<li><p>Your code will have a consistent look, so that readers can better focus on content, not layout.  </p>\n</li>\n<li><p>Readers understand your code more quickly because they can make assumptions based on previous experience.  </p>\n</li>\n<li><p>You can copy, change, and maintain the code more easily.  </p>\n</li>\n<li><p>You help ensure that your code demonstrates &quot;best practices&quot; for Visual Basic.  </p>\n</li>\n</ul>\n<h2 id=\"naming-conventions\">Naming Conventions</h2>\n<ul>\n<li><p>For information about naming guidelines, see <a href=\"http://msdn.microsoft.com/library/fc076d66-9b5f-42d3-aa65-61d970c794a3\" data-linktype=\"external\">Naming Guidelines</a> topic.  </p>\n</li>\n<li><p>Do not use &quot;My&quot; or &quot;my&quot; as part of a variable name. This practice creates confusion with the <code>My</code> objects.  </p>\n</li>\n<li><p>You do not have to change the names of objects in auto-generated code to make them fit the guidelines.  </p>\n</li>\n</ul>\n<h2 id=\"layout-conventions\">Layout Conventions</h2>\n<ul>\n<li><p>Insert tabs as spaces, and use smart indenting with four-space indents.  </p>\n</li>\n<li><p>Use <strong>Pretty listing (reformatting) of code</strong> to reformat your code in the code editor. For more information, see <a href=\"https://docs.microsoft.com/visualstudio/ide/reference/options-text-editor-basic-visual-basic\" data-linktype=\"external\">Options, Text Editor, Basic (Visual Basic)</a>.  </p>\n</li>\n<li><p>Use only one statement per line. Don&#39;t use the Visual Basic line separator character (:).  </p>\n</li>\n<li><p>Avoid using the explicit line continuation character &quot;_&quot; in favor of implicit line continuation wherever the language allows it.  </p>\n</li>\n<li><p>Use only one declaration per line.  </p>\n</li>\n<li><p>If <strong>Pretty listing (reformatting) of code</strong> doesn&#39;t format continuation lines automatically, manually indent continuation lines one tab stop. However, always left-align items in a list.  </p>\n<pre class=\"loading\"><code>a As Integer,  \nb As Integer  \n</code></pre></li>\n<li><p>Add at least one blank line between method and property definitions.  </p>\n</li>\n</ul>\n<h2 id=\"commenting-conventions\">Commenting Conventions</h2>\n<ul>\n<li><p>Put comments on a separate line instead of at the end of a line of code.  </p>\n</li>\n<li><p>Start comment text with an uppercase letter, and end comment text with a period.  </p>\n</li>\n<li><p>Insert one space between the comment delimiter (&#39;) and the comment text.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrGuidelines#2\">&#39; Here is a comment.\n</code></pre></li>\n<li><p>Do not surround comments with formatted blocks of asterisks.  </p>\n</li>\n</ul>\n<h2 id=\"program-structure\">Program Structure</h2>\n<ul>\n<li><p>When you use the <code>Main</code> method, use the default construct for new console applications, and use <code>My</code> for command-line arguments.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrGuidelines#3\">Sub Main()\n  For Each argument As String In My.Application.CommandLineArgs\n    &#39; Add code here to use the string variable.\n  Next\nEnd Sub\n</code></pre></li>\n</ul>\n<h2 id=\"language-guidelines\">Language Guidelines</h2>\n<h3 id=\"string-data-type\">String Data Type</h3>\n<ul>\n<li><p>To concatenate strings, use an ampersand (&amp;).  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrGuidelines#4\">MsgBox(&quot;hello&quot; &amp; vbCrLf &amp; &quot;goodbye&quot;)\n</code></pre></li>\n<li><p>To append strings in loops, use the <a class=\"xref\" href=\"../../../../api/system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a> object.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrGuidelines#5\">Dim longString As New System.Text.StringBuilder\nFor count As Integer = 1 To 1000\n  longString.Append(count)\nNext\n</code></pre></li>\n</ul>\n<h3 id=\"relaxed-delegates-in-event-handlers\">Relaxed Delegates in Event Handlers</h3>\n<p> Do not explicitly qualify the arguments (Object and EventArgs) to event handlers. If you are not using the event arguments that are passed to an event (for example, sender as Object, e as EventArgs), use relaxed delegates, and leave out the event arguments in your code:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrGuidelines#7\">Public Sub Form1_Load() Handles Form1.Load\nEnd Sub\n</code></pre><h3 id=\"unsigned-data-type\">Unsigned Data Type</h3>\n<ul>\n<li>Use <code>Integer</code> rather than unsigned types, except where they are necessary.  </li>\n</ul>\n<h3 id=\"arrays\">Arrays</h3>\n<ul>\n<li><p>Use the short syntax when you initialize arrays on the declaration line. For example, use the following syntax.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrGuidelines#8\">Dim letters1 As String() = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;}\n</code></pre><p> Do not use the following syntax.  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrGuidelines#9\">Dim letters2() As String = New String() {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;}\n</code></pre></li>\n<li><p>Put the array designator on the type, not on the variable. For example, use the following syntax:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrGuidelines#11\">Dim letters4 As String() = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;}\n</code></pre><p> Do not use the following syntax:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrGuidelines#10\">Dim letters3() As String = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;}\n</code></pre></li>\n<li><p>Use the { } syntax when you declare and initialize arrays of basic data types. For example, use the following syntax:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrGuidelines#12\">Dim letters5() As String = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;}\n</code></pre><p> Do not use the following syntax:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrGuidelines#13\">Dim letters6(2) As String\nletters6(0) = &quot;a&quot;\nletters6(1) = &quot;b&quot;\nletters6(2) = &quot;c&quot;\n</code></pre></li>\n</ul>\n<h3 id=\"use-the-with-keyword\">Use the With Keyword</h3>\n<p> When you make a series of calls to one object, consider using the <code>With</code> keyword:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrGuidelines#15\">With orderLog\n  .Log = &quot;Application&quot;\n  .Source = &quot;Application Name&quot;\n  .MachineName = &quot;Computer Name&quot;\nEnd With\n</code></pre><h3 id=\"use-the-trycatch-and-using-statements-when-you-use-exception-handling\">Use the Try...Catch and Using Statements when you use Exception Handling</h3>\n<p> Do not use <code>On Error Goto</code>.  </p>\n<h3 id=\"use-the-isnot-keyword\">Use the IsNot Keyword</h3>\n<p> Use the <code>IsNot</code> keyword instead of <code>Not...Is Nothing</code>.  </p>\n<h3 id=\"new-keyword\">New Keyword</h3>\n<ul>\n<li><p>Use short instantiation. For example, use the following syntax:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrGuidelines#21\">Dim employees As New List(Of String)\n</code></pre><p> The preceding line is equivalent to this:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrGuidelines#22\">Dim employees2 As List(Of String) = New List(Of String)\n</code></pre></li>\n<li><p>Use object initializers for new objects instead of the parameterless constructor:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrGuidelines#23\">Dim orderLog As New EventLog With { \n    .Log = &quot;Application&quot;, \n    .Source = &quot;Application Name&quot;, \n    .MachineName = &quot;Computer Name&quot;}\n</code></pre></li>\n</ul>\n<h3 id=\"event-handling\">Event Handling</h3>\n<ul>\n<li><p>Use <code>Handles</code> rather than <code>AddHandler</code>:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrGuidelines#24\">Private Sub ToolStripMenuItem1_Click() Handles ToolStripMenuItem1.Click\nEnd Sub\n</code></pre></li>\n<li><p>Use <code>AddressOf</code>, and do not instantiate the delegate explicitly:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrGuidelines#25\">Dim closeItem As New ToolStripMenuItem( \n    &quot;Close&quot;, Nothing, AddressOf ToolStripMenuItem1_Click)\nMe.MainMenuStrip.Items.Add(closeItem)\n</code></pre></li>\n<li><p>When you define an event, use the short syntax, and let the compiler define the delegate:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrGuidelines#26\">Public Event SampleEvent As EventHandler(Of SampleEventArgs)\n&#39; or\nPublic Event SampleEvent(ByVal source As Object, \n                          ByVal e As SampleEventArgs)\n</code></pre></li>\n<li><p>Do not verify whether an event is <code>Nothing</code> (null) before you call the <code>RaiseEvent</code> method. <code>RaiseEvent</code> checks for <code>Nothing</code> before it raises the event.  </p>\n</li>\n</ul>\n<h3 id=\"using-shared-members\">Using Shared Members</h3>\n<p> Call <code>Shared</code> members by using the class name, not from an instance variable.  </p>\n<h3 id=\"use-xml-literals\">Use XML Literals</h3>\n<p> XML literals simplify the most common tasks that you encounter when you work with XML (for example, load, query, and transform). When you develop with XML, follow these guidelines:  </p>\n<ul>\n<li><p>Use XML literals to create XML documents and fragments instead of calling XML APIs directly.  </p>\n</li>\n<li><p>Import XML namespaces at the file or project level to take advantage of the performance optimizations for XML literals.  </p>\n</li>\n<li><p>Use the XML axis properties to access elements and attributes in an XML document.  </p>\n</li>\n<li><p>Use embedded expressions to include values and to create XML from existing values instead of using API calls such as the <code>Add</code> method:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrGuidelines#27\">Private Function GetHtmlDocument( \n    ByVal items As IEnumerable(Of XElement)) As String\n\n  Dim htmlDoc = &lt;html&gt;\n                  &lt;body&gt;\n                    &lt;table border=&quot;0&quot; cellspacing=&quot;2&quot;&gt;\n                      &lt;%= \n                        From item In items \n                        Select &lt;tr&gt;\n                                 &lt;td style=&quot;width:480&quot;&gt;\n                                   &lt;%= item.&lt;title&gt;.Value %&gt;\n                                 &lt;/td&gt;\n                                 &lt;td&gt;&lt;%= item.&lt;pubDate&gt;.Value %&gt;&lt;/td&gt;\n                               &lt;/tr&gt; \n                      %&gt;\n                    &lt;/table&gt;\n                  &lt;/body&gt;\n                &lt;/html&gt;\n\n  Return htmlDoc.ToString()\nEnd Function\n</code></pre></li>\n</ul>\n<h3 id=\"linq-queries\">LINQ Queries</h3>\n<ul>\n<li><p>Use meaningful names for query variables:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrGuidelines#28\">Dim seattleCustomers = From cust In customers \n                       Where cust.City = &quot;Seattle&quot;\n</code></pre></li>\n<li><p>Provide names for elements in a query to make sure that property names of anonymous types are correctly capitalized using Pascal casing:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrGuidelines#29\">Dim customerOrders = From customer In customers \n                     Join order In orders \n                       On customer.CustomerID Equals order.CustomerID \n                     Select Customer = customer, Order = order\n</code></pre></li>\n<li><p>Rename properties when the property names in the result would be ambiguous. For example, if your query returns a customer name and an order ID, rename them instead of leaving them as <code>Name</code> and <code>ID</code> in the result:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrGuidelines#30\">Dim customerOrders2 = From cust In customers \n                      Join ord In orders\n                        On cust.CustomerID Equals ord.CustomerID \n                      Select CustomerName = cust.Name, \n                             OrderID = ord.ID\n</code></pre></li>\n<li><p>Use type inference in the declaration of query variables and range variables:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrGuidelines#31\">Dim customerList = From cust In customers\n</code></pre></li>\n<li><p>Align query clauses under the <code>From</code> statement:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrGuidelines#32\">Dim newyorkCustomers = From cust In customers \n                       Where cust.City = &quot;New York&quot; \n                       Select cust.LastName, cust.CompanyName\n</code></pre></li>\n<li><p>Use <code>Where</code> clauses before other query clauses so that later query clauses operate on the filtered set of data:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrGuidelines#33\">Dim newyorkCustomers2 = From cust In customers \n                        Where cust.City = &quot;New York&quot; \n                        Order By cust.LastName\n</code></pre></li>\n<li><p>Use the <code>Join</code> clause to explicitly define a join operation instead of using the <code>Where</code> clause to implicitly define a join operation:  </p>\n<pre><code class=\"lang-vb\" name=\"VbVbalrGuidelines#34\">Dim customerList2 = From cust In customers \n                    Join order In orders \n                      On cust.CustomerID Equals order.CustomerID \n                    Select cust, order\n</code></pre></li>\n</ul>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a href=\"http://msdn.microsoft.com/library/4f882d94-262b-4494-b0a6-ba9ba1f5f177\" data-linktype=\"external\">Secure Coding Guidelines</a></p>\n</div></div>","outputRootRelativePath":"../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"c1df130b-fec6-49a5-becf-0a7e494a1d0f\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"48\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/program-structure/coding-conventions.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/program-structure/coding-conventions.md\">\r\n<meta name=\"document_id\" content=\"5c3620fc-bedd-6a89-4494-580849c5dc97\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"../../../toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","title":"Visual Basic Coding Conventions | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"c1df130b-fec6-49a5-becf-0a7e494a1d0f","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":48,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["coding conventions, Visual Basic","examples [Visual Basic], coding conventions","Visual Basic code, conventions"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Absolute urls and other fixes (#1281)","commit_sha":"f7dffe4885b331cec8d37f3cc5c9163f69c3b4c9","commit_date":"2016-11-22 12:57:26 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/programming-guide/program-structure/coding-conventions.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/programming-guide/program-structure/coding-conventions.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/programming-guide/program-structure/coding-conventions.md","document_id":"5c3620fc-bedd-6a89-4494-580849c5dc97","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/program-structure/coding-conventions","toc_asset_id":"articles/toc.json","toc_rel":"../../../toc.json","_op_ogTitle":"Visual Basic Coding Conventions","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":1211,"_op_rawTitle":"<h1 id=\"visual-basic-coding-conventions\" sourcefile=\"docs/visual-basic/programming-guide/program-structure/coding-conventions.md\" sourcestartlinenumber=\"38\" sourceendlinenumber=\"38\">Visual Basic Coding Conventions</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/articles/visual-basic/programming-guide/program-structure/coding-conventions","fileRelativePath":"articles/visual-basic/programming-guide/program-structure/coding-conventions.html"},"themesRelativePathToOutputRoot":"_themes/"}