{"content":"<div><div class=\"content\">\n<p>The <a class=\"xref\" href=\"../../../../../api/microsoft.visualbasic.fileio.textfieldparser\" data-linktype=\"relative-path\">TextFieldParser</a> object provides a way to easily and efficiently parse structured text files, such as logs. You can process a file with multiple formats by using the <code>PeekChars</code> method to determine the format of each line as you parse through the file.  </p>\n<h3 id=\"to-parse-a-text-file-with-multiple-formats\">To parse a text file with multiple formats</h3>\n<ol>\n<li><p>Add a text file named testfile.txt to your project. Add the following content to the text file.  </p>\n<pre class=\"loading\"><code>Err  1001 Cannot access resource.  \nErr  2014 Resource not found.  \nAcc  10/03/2009User1      Administrator.  \nErr  0323 Warning: Invalid access attempt.  \nAcc  10/03/2009User2      Standard user.  \nAcc  10/04/2009User2      Standard user.  \n</code></pre></li>\n<li><p>Define the expected format and the format used when an error is reported. The last entry in each array is -1, therefore the last field is assumed to be of variable width. This occurs when the last entry in the array is less than or equal to 0.  </p>\n<pre><code class=\"lang-vb\" name=\"VbFileIORead#4\">        Dim stdFormat As Integer() = {5, 10, 11, -1}\n        Dim errorFormat As Integer() = {5, 5, -1}\n</code></pre></li>\n<li><p>Create a new <a class=\"xref\" href=\"../../../../../api/microsoft.visualbasic.fileio.textfieldparser\" data-linktype=\"relative-path\">TextFieldParser</a> object, defining the width and format.  </p>\n<pre><code class=\"lang-vb\" name=\"VbFileIORead#5\">        Using MyReader As New FileIO.TextFieldParser(&quot;..\\..\\testfile.txt&quot;)\n            MyReader.TextFieldType = FileIO.FieldType.FixedWidth\n            MyReader.FieldWidths = stdFormat\n</code></pre></li>\n<li><p>Loop through the rows, testing for format before reading.  </p>\n<pre><code class=\"lang-vb\" name=\"VbFileIORead#6\">            Dim currentRow As String()\n            While Not MyReader.EndOfData\n                Try\n                    Dim rowType = MyReader.PeekChars(3)\n                    If String.Compare(rowType, &quot;Err&quot;) = 0 Then\n                        &#39; If this line describes an error, the format of the row will be different.\n                        MyReader.SetFieldWidths(errorFormat)\n                    Else\n                        &#39; Otherwise parse the fields normally\n                        MyReader.SetFieldWidths(stdFormat)\n                    End If\n                    currentRow = MyReader.ReadFields\n                    For Each newString In currentRow\n                        Console.Write(newString &amp; &quot;|&quot;)\n                    Next\n                    Console.WriteLine()\n</code></pre></li>\n<li><p>Write errors to the console.  </p>\n<pre><code class=\"lang-vb\" name=\"VbFileIORead#7\">      Catch ex As Microsoft.VisualBasic.\n                    FileIO.MalformedLineException\n         MsgBox(&quot;Line &quot; &amp; ex.Message &amp; &quot; is invalid.&quot;)\n      End Try\n   End While\nEnd Using\n</code></pre></li>\n</ol>\n<h2 id=\"example\">Example</h2>\n<p> Following is the complete example that reads from the file <code>testfile.txt</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"VbFileIORead#8\">        Dim stdFormat As Integer() = {5, 10, 11, -1}\n        Dim errorFormat As Integer() = {5, 5, -1}\n        Using MyReader As New FileIO.TextFieldParser(&quot;..\\..\\testfile.txt&quot;)\n            MyReader.TextFieldType = FileIO.FieldType.FixedWidth\n            MyReader.FieldWidths = stdFormat\n            Dim currentRow As String()\n            While Not MyReader.EndOfData\n                Try\n                    Dim rowType = MyReader.PeekChars(3)\n                    If String.Compare(rowType, &quot;Err&quot;) = 0 Then\n                        &#39; If this line describes an error, the format of the row will be different.\n                        MyReader.SetFieldWidths(errorFormat)\n                    Else\n                        &#39; Otherwise parse the fields normally\n                        MyReader.SetFieldWidths(stdFormat)\n                    End If\n                    currentRow = MyReader.ReadFields\n                    For Each newString In currentRow\n                        Console.Write(newString &amp; &quot;|&quot;)\n                    Next\n                    Console.WriteLine()\n                Catch ex As FileIO.MalformedLineException\n                    MsgBox(&quot;Line &quot; &amp; ex.Message &amp; &quot; is invalid.  Skipping&quot;)\n                End Try\n            End While\n        End Using\n        Console.ReadLine()\n</code></pre><h2 id=\"robust-programming\">Robust Programming</h2>\n<p> The following conditions may cause an exception:  </p>\n<ul>\n<li><p>A row cannot be parsed using the specified format (<a class=\"xref\" href=\"../../../../../api/microsoft.visualbasic.fileio.malformedlineexception\" data-linktype=\"relative-path\">MalformedLineException</a>). The exception message specifies the line causing the exception, while the <a class=\"xref\" href=\"../../../../../api/microsoft.visualbasic.fileio.textfieldparser#Microsoft_VisualBasic_FileIO_TextFieldParser_ErrorLine_\" data-linktype=\"relative-path\">ErrorLine</a> property is assigned to the text contained in the line.  </p>\n</li>\n<li><p>The specified file does not exist (<a class=\"xref\" href=\"../../../../../api/system.io.filenotfoundexception\" data-linktype=\"relative-path\">FileNotFoundException</a>).  </p>\n</li>\n<li><p>A partial-trust situation in which the user does not have sufficient permissions to access the file. (<a class=\"xref\" href=\"../../../../../api/system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a>).  </p>\n</li>\n<li><p>The path is too long (<a class=\"xref\" href=\"../../../../../api/system.io.pathtoolongexception\" data-linktype=\"relative-path\">PathTooLongException</a>).  </p>\n</li>\n<li><p>The user does not have sufficient permissions to access the file (<a class=\"xref\" href=\"../../../../../api/system.unauthorizedaccessexception\" data-linktype=\"relative-path\">UnauthorizedAccessException</a>).  </p>\n</li>\n</ul>\n<h2 id=\"see-also\">See Also</h2>\n<p> <a class=\"xref\" href=\"../../../../../api/microsoft.visualbasic.fileio.textfieldparser\" data-linktype=\"relative-path\">Microsoft.VisualBasic.FileIO.TextFieldParser</a><br> <a class=\"xref\" href=\"../../../../../api/microsoft.visualbasic.fileio.textfieldparser#Microsoft_VisualBasic_FileIO_TextFieldParser_PeekChars_\" data-linktype=\"relative-path\">PeekChars</a><br> <a class=\"xref\" href=\"../../../../../api/microsoft.visualbasic.fileio.malformedlineexception\" data-linktype=\"relative-path\">MalformedLineException</a><br> <a class=\"xref\" href=\"../../../../../api/microsoft.visualbasic.fileio.filesystem#Microsoft_VisualBasic_FileIO_FileSystem_WriteAllText_\" data-linktype=\"relative-path\">WriteAllText</a><br> <a class=\"xref\" href=\"../../../../../api/microsoft.visualbasic.fileio.textfieldparser#Microsoft_VisualBasic_FileIO_TextFieldParser_EndOfData_\" data-linktype=\"relative-path\">EndOfData</a><br> <a class=\"xref\" href=\"../../../../../api/microsoft.visualbasic.fileio.textfieldparser#Microsoft_VisualBasic_FileIO_TextFieldParser_TextFieldType_\" data-linktype=\"relative-path\">TextFieldType</a><br> <a href=\"how-to-read-from-comma-delimited-text-files\" data-linktype=\"relative-path\">How to: Read From Comma-Delimited Text Files</a><br> <a href=\"how-to-read-from-fixed-width-text-files\" data-linktype=\"relative-path\">How to: Read From Fixed-width Text Files</a><br> <a href=\"parsing-text-files-with-the-textfieldparser-object\" data-linktype=\"relative-path\">Parsing Text Files with the TextFieldParser Object</a></p>\n</div></div>","outputRootRelativePath":"../../../../../","pageMetadata":"<meta name=\"author\" content=\"stevehoag\">\r\n<meta name=\"ms.author\" content=\"shoag\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-all/api/toc2.json\">\r\n<meta name=\"ms.suite\" content=\"\">\r\n<meta name=\"ms.custom\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"8d185eb2-79ca-42cd-95a7-d3ff44a5a0f8\">\r\n<meta name=\"translation.priority.ht\" content=\"cs-cz\">\r\n<meta name=\"translation.priority.ht\" content=\"de-de\">\r\n<meta name=\"translation.priority.ht\" content=\"es-es\">\r\n<meta name=\"translation.priority.ht\" content=\"fr-fr\">\r\n<meta name=\"translation.priority.ht\" content=\"it-it\">\r\n<meta name=\"translation.priority.ht\" content=\"ja-jp\">\r\n<meta name=\"translation.priority.ht\" content=\"ko-kr\">\r\n<meta name=\"translation.priority.ht\" content=\"pl-pl\">\r\n<meta name=\"translation.priority.ht\" content=\"pt-br\">\r\n<meta name=\"translation.priority.ht\" content=\"ru-ru\">\r\n<meta name=\"translation.priority.ht\" content=\"tr-tr\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-cn\">\r\n<meta name=\"translation.priority.ht\" content=\"zh-tw\">\r\n<meta name=\"caps.latest.revision\" content=\"17\">\r\n<meta name=\"ms.topic\" content=\"article\">\r\n<meta name=\"ms.date\" content=\"2015-07-20\">\r\n<meta name=\"ms.technology\" content=\"devlang-visual-basic\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"ms.reviewer\" content=\"\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"updated_at\" content=\"2016-12-15 06:00 PM\">\r\n<meta name=\"gitcommit\" content=\"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md\">\r\n<meta name=\"original_content_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md\">\r\n<meta name=\"document_id\" content=\"270fbfde-f505-f584-1170-a9a4b1244677\">\r\n<meta name=\"pagetype\" content=\"Conceptual\">\r\n<meta name=\"toc_rel\" content=\"toc2.json\">\r\n","rawMetadata":{"author":"stevehoag","ms.author":"shoag","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","title":"How to: Read From Text Files with Multiple Formats in Visual Basic | Microsoft Docs","ms.suite":"","ms.custom":"","ms.assetid":"8d185eb2-79ca-42cd-95a7-d3ff44a5a0f8","translation.priority.ht":["cs-cz","de-de","es-es","fr-fr","it-it","ja-jp","ko-kr","pl-pl","pt-br","ru-ru","tr-tr","zh-cn","zh-tw"],"caps.latest.revision":17,"ms.topic":"article","dev_langs":["vb"],"helpviewer_keywords":["TextFieldParser object, reading from a file","TextFieldType enumeration","My.Computer.FileSystem.WriteAllText method, parsing structured text files","WriteAllText method, parsing structured text files","PeekChars method, determining format of text","reading text files, multiple formats","I/O [Visual Basic], reading text files","text files, reading"],"ms.date":"2015-07-20","ms.technology":["devlang-visual-basic"],"ms.prod":".net","ms.reviewer":"","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitCommitHistory":[{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"GitHub","comitter_email":"noreply@github.com","message":"Metadata updates (#1313)","commit_sha":"90fe68f7f3c4b46502b5d3770b1a2d57c6af748a","commit_date":"2016-12-09 12:40:41 -0800"},{"author_name":"Maira Wenzel","author_email":"mairaw@microsoft.com","committer_name":"Bill Wagner","comitter_email":"wiwagn@microsoft.com","message":":books: migration changes (#1235)","commit_sha":"b828bb1d6c8fb750ad9ef34f8a7a1b7d2574f4c6","commit_date":"2016-11-15 15:08:11 -0500"}],"updated_at":"2016-12-15 06:00 PM","_op_gitContributorInformation":{"author":{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag","id":"13489215"},"contributors":[{"profile_url":"https://github.com/stevehoag","display_name":"Steve Hoag"},{"profile_url":"https://github.com/mairaw","display_name":"Maira Wenzel","id":"12971179"}],"update_at":"12/15/2016"},"gitcommit":"https://github.com/dotnet/docs-internal/blob/90fe68f7f3c4b46502b5d3770b1a2d57c6af748a/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md","original_content_git_url":"https://github.com/dotnet/docs-internal/blob/master/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md","open_to_public_contributors":false,"content_git_url":"https://github.com/dotnet/docs/blob/master/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md","document_id":"270fbfde-f505-f584-1170-a9a4b1244677","layout":"Conceptual","pagetype":"Conceptual","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats","toc_asset_id":"articles/visual-basic/developing-apps/programming/drives-directories-files/toc.json","toc_rel":"toc.json","_op_ogTitle":"How to: Read From Text Files with Multiple Formats in Visual Basic","_op_displayDate":null,"_op_displayDate_source":null,"_op_wordCount":486,"_op_rawTitle":"<h1 id=\"how-to-read-from-text-files-with-multiple-formats-in-visual-basic\" sourcefile=\"docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md\" sourcestartlinenumber=\"43\" sourceendlinenumber=\"43\">How to: Read From Text Files with Multiple Formats in Visual Basic</h1>","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/articles/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats","fileRelativePath":"articles/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.html"},"themesRelativePathToOutputRoot":"_themes/"}