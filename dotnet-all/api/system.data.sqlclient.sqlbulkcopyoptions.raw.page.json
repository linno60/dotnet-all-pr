{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">SqlBulkCopyOptions</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Bitwise flag that specifies one or more options to use with an instance of <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a>.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Flags]\npublic enum SqlBulkCopyOptions</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">SqlBulkCopyOptions</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.flagsattribute\" title=\"System.FlagsAttribute\" data-linktype=\"relative-path\">FlagsAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following console application demonstrates how to perform a bulk load that copies the value in the identity column of the source table to the corresponding column in the destination table, instead of generating a new value for each row&#39;s identity column.  </p>\n<p> To see how the option changes the way the bulk load works, run the sample with the <strong>dbo.BulkCopyDemoMatchingColumns</strong> table empty. All rows load from the source. Next, run the sample again without emptying the table. An exception is thrown, and the code writes a message to the console window notifying you that rows were not added because of primary key violations.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This sample will not run unless you have created the work tables as described in <a href=\"../topic/bulk%20copy%20example%20setup\" data-linktype=\"relative-path\">Bulk Copy Example Setup</a>. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT â€¦ SELECT</code> statement to copy the data.  </p>\n</div>\n<pre><code class=\"lang-cs\" name=\"DataWorks SqlBulkCopy.KeepIdentity#1\">using System.Data.SqlClient;\n\nclass Program\n{\n    static void Main()\n    {\n        string connectionString = GetConnectionString();\n        // Open a sourceConnection to the AdventureWorks database.\n        using (SqlConnection sourceConnection =\n                   new SqlConnection(connectionString))\n        {\n            sourceConnection.Open();\n\n            // Perform an initial count on the destination table.\n            SqlCommand commandRowCount = new SqlCommand(\n                &quot;SELECT COUNT(*) FROM &quot; +\n                &quot;dbo.BulkCopyDemoMatchingColumns;&quot;,\n                sourceConnection);\n            long countStart = System.Convert.ToInt32(\n                commandRowCount.ExecuteScalar());\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart);\n\n            // Get data from the source table as a SqlDataReader.\n            SqlCommand commandSourceData = new SqlCommand(\n                &quot;SELECT ProductID, Name, &quot; +\n                &quot;ProductNumber &quot; +\n                &quot;FROM Production.Product;&quot;, sourceConnection);\n            SqlDataReader reader =\n                commandSourceData.ExecuteReader();\n\n            // Create the SqlBulkCopy object using a connection string \n            // and the KeepIdentity option. \n            // In the real world you would not use SqlBulkCopy to move\n            // data from one table to the other in the same database.\n            using (SqlBulkCopy bulkCopy =\n                new SqlBulkCopy(connectionString, SqlBulkCopyOptions.KeepIdentity))\n            {\n                bulkCopy.DestinationTableName =\n                    &quot;dbo.BulkCopyDemoMatchingColumns&quot;;\n\n                try\n                {\n                    // Write from the source to the destination.\n                    bulkCopy.WriteToServer(reader);\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(ex.Message);\n                }\n                finally\n                {\n                    // Close the SqlDataReader. The SqlBulkCopy\n                    // object is automatically closed at the end\n                    // of the using block.\n                    reader.Close();\n                }\n            }\n\n            // Perform a final count on the destination \n            // table to see how many rows were added.\n            long countEnd = System.Convert.ToInt32(\n                commandRowCount.ExecuteScalar());\n            Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd);\n            Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart);\n            Console.WriteLine(&quot;Press Enter to finish.&quot;);\n            Console.ReadLine();\n        }\n    }\n\n    private static string GetConnectionString()\n        // To avoid storing the sourceConnection string in your code, \n        // you can retrieve it from a configuration file. \n    {\n        return &quot;Data Source=(local); &quot; +\n            &quot; Integrated Security=true;&quot; +\n            &quot;Initial Catalog=AdventureWorks;&quot;;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"DataWorks SqlBulkCopy.KeepIdentity#1\">Imports System.Data.SqlClient\n\nModule Module1\n    Sub Main()\n        Dim connectionString As String = GetConnectionString()\n\n        &#39; Open a connection to the AdventureWorks database.\n        Using sourceConnection As SqlConnection = _\n           New SqlConnection(connectionString)\n            sourceConnection.Open()\n\n            &#39; Perform an initial count on the destination table.\n            Dim commandRowCount As New SqlCommand( _\n            &quot;SELECT COUNT(*) FROM dbo.BulkCopyDemoMatchingColumns;&quot;, _\n                sourceConnection)\n            Dim countStart As Long = _\n               System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n            Console.WriteLine(&quot;Starting row count = {0}&quot;, countStart)\n\n            &#39; Get data from the source table as a SqlDataReader.\n            Dim commandSourceData As SqlCommand = New SqlCommand( _\n               &quot;SELECT ProductID, Name, ProductNumber &quot; &amp; _\n               &quot;FROM Production.Product;&quot;, sourceConnection)\n            Dim reader As SqlDataReader = commandSourceData.ExecuteReader\n\n            &#39; Create the SqlBulkCopy object using a connection string \n            &#39; and the KeepIdentity option. \n            &#39; In the real world you would not use SqlBulkCopy to move\n            &#39; data from one table to the other in the same database.\n            Using bulkCopy As SqlBulkCopy = _\n              New SqlBulkCopy(connectionString, SqlBulkCopyOptions.KeepIdentity)\n                bulkCopy.DestinationTableName = &quot;dbo.BulkCopyDemoMatchingColumns&quot;\n\n                Try\n                    &#39; Write from the source to the destination.\n                    bulkCopy.WriteToServer(reader)\n\n                Catch ex As Exception\n                    Console.WriteLine(ex.Message)\n\n                    Finally\n                        &#39; Close the SqlDataReader. The SqlBulkCopy\n                        &#39; object is automatically closed at the end\n                        &#39; of the Using block.\n                        reader.Close()\n                End Try\n            End Using\n\n            &#39; Perform a final count on the destination table\n            &#39; to see how many rows were added.\n            Dim countEnd As Long = _\n                System.Convert.ToInt32(commandRowCount.ExecuteScalar())\n            Console.WriteLine(&quot;Ending row count = {0}&quot;, countEnd)\n            Console.WriteLine(&quot;{0} rows were added.&quot;, countEnd - countStart)\n\n            Console.WriteLine(&quot;Press Enter to finish.&quot;)\n            Console.ReadLine()\n        End Using\n    End Sub\n\n    Private Function GetConnectionString() As String\n        &#39; To avoid storing the sourceConnection string in your code, \n        &#39; you can retrieve it from a configuration file. \n        Return &quot;Data Source=(local);&quot; &amp; _\n            &quot;Integrated Security=true;&quot; &amp; _\n            &quot;Initial Catalog=AdventureWorks;&quot;\n    End Function\nEnd Module\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>You can use the SqlBulkCopyOptions enumeration when you construct a <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> instance to change how the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_WriteToServer_\" data-linktype=\"relative-path\">WriteToServer</a> methods for that instance behave.</p>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Data_SqlClient_SqlBulkCopyOptions_AllowEncryptedValueModifications\">\r\n      \t\t\t<span class=\"lang-csharp\">AllowEncryptedValueModifications</span>\r\n      \t</td>\r\n      \t<td><p>When specified,<strong>AllowEncryptedValueModifications</strong> enables bulk copying of encrypted data between tables or databases, without decrypting the data. Typically, an application would select data from encrypted columns from one table without decrypting the data (the app would connect to the database with the column encryption setting keyword set to disabled) and then would use this option to bulk insert the data, which is still encrypted. For more information, see <a href=\"https://msdn.microsoft.com/library/mt163865.aspx\" data-linktype=\"external\">Always Encrypted</a>.  </p>\n<p> Use caution when specifying <strong>AllowEncryptedValueModifications</strong> as this may lead to corrupting the database because the driver does not check if the data is indeed encrypted, or if it is correctly encrypted using the same encryption type, algorithm and key as the target column.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Data_SqlClient_SqlBulkCopyOptions_CheckConstraints\">\r\n      \t\t\t<span class=\"lang-csharp\">CheckConstraints</span>\r\n      \t</td>\r\n      \t<td><p>Check constraints while data is being inserted. By default, constraints are not checked.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Data_SqlClient_SqlBulkCopyOptions_Default\">\r\n      \t\t\t<span class=\"lang-csharp\">Default</span>\r\n      \t</td>\r\n      \t<td><p>Use the default values for all options.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Data_SqlClient_SqlBulkCopyOptions_FireTriggers\">\r\n      \t\t\t<span class=\"lang-csharp\">FireTriggers</span>\r\n      \t</td>\r\n      \t<td><p>When specified, cause the server to fire the insert triggers for the rows being inserted into the database.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Data_SqlClient_SqlBulkCopyOptions_KeepIdentity\">\r\n      \t\t\t<span class=\"lang-csharp\">KeepIdentity</span>\r\n      \t</td>\r\n      \t<td><p>Preserve source identity values. When not specified, identity values are assigned by the destination.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Data_SqlClient_SqlBulkCopyOptions_KeepNulls\">\r\n      \t\t\t<span class=\"lang-csharp\">KeepNulls</span>\r\n      \t</td>\r\n      \t<td><p>Preserve null values in the destination table regardless of the settings for default values. When not specified, null values are replaced by default values where applicable.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Data_SqlClient_SqlBulkCopyOptions_TableLock\">\r\n      \t\t\t<span class=\"lang-csharp\">TableLock</span>\r\n      \t</td>\r\n      \t<td><p>Obtain a bulk update lock for the duration of the bulk copy operation. When not specified, row locks are used.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Data_SqlClient_SqlBulkCopyOptions_UseInternalTransaction\">\r\n      \t\t\t<span class=\"lang-csharp\">UseInternalTransaction</span>\r\n      \t</td>\r\n      \t<td><p>When specified, each batch of the bulk-copy operation will occur within a transaction. If you indicate this option and also provide a <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction\" data-linktype=\"relative-path\">SqlTransaction</a> object to the constructor, an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> occurs.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Data.SqlClient.SqlBulkCopyOptions.yml\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopyOptions\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopyOptions.AllowEncryptedValueModifications\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopyOptions.Default\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopyOptions.FireTriggers\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopyOptions.KeepIdentity\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopyOptions.KeepNulls\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopyOptions.TableLock\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction\">\r\n<meta name=\"APILocation\" content=\"System.Data.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 05:47 AM\">\r\n<meta name=\"document_id\" content=\"00c85c1d-13d7-8f3a-0709-e1356582f331\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Bitwise flag that specifies one or more options to use with an instance of .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.data.sqlclient/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Data.SqlClient.SqlBulkCopyOptions\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Data.SqlClient.SqlBulkCopyOptions.yml","open_to_public_contributors":false,"api_name":["System.Data.SqlClient.SqlBulkCopyOptions","System.Data.SqlClient.SqlBulkCopyOptions.AllowEncryptedValueModifications","System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints","System.Data.SqlClient.SqlBulkCopyOptions.Default","System.Data.SqlClient.SqlBulkCopyOptions.FireTriggers","System.Data.SqlClient.SqlBulkCopyOptions.KeepIdentity","System.Data.SqlClient.SqlBulkCopyOptions.KeepNulls","System.Data.SqlClient.SqlBulkCopyOptions.TableLock","System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction"],"api_location":["System.Data.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Data.SqlClient.SqlBulkCopyOptions","System::Data::SqlClient::SqlBulkCopyOptions","System.Data.SqlClient.SqlBulkCopyOptions.AllowEncryptedValueModifications","System::Data::SqlClient::SqlBulkCopyOptions::AllowEncryptedValueModifications","System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints","System::Data::SqlClient::SqlBulkCopyOptions::CheckConstraints","System.Data.SqlClient.SqlBulkCopyOptions.Default","System::Data::SqlClient::SqlBulkCopyOptions::Default","System.Data.SqlClient.SqlBulkCopyOptions.FireTriggers","System::Data::SqlClient::SqlBulkCopyOptions::FireTriggers","System.Data.SqlClient.SqlBulkCopyOptions.KeepIdentity","System::Data::SqlClient::SqlBulkCopyOptions::KeepIdentity","System.Data.SqlClient.SqlBulkCopyOptions.KeepNulls","System::Data::SqlClient::SqlBulkCopyOptions::KeepNulls","System.Data.SqlClient.SqlBulkCopyOptions.TableLock","System::Data::SqlClient::SqlBulkCopyOptions::TableLock","System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction","System::Data::SqlClient::SqlBulkCopyOptions::UseInternalTransaction"],"dev_langs":["csharp"],"updated_at":"2017-03-31 05:47 AM","document_id":"00c85c1d-13d7-8f3a-0709-e1356582f331","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Data.SqlClient/SqlBulkCopyOptions.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SqlBulkCopyOptions enum | Microsoft Docs","_op_ogTitle":"SqlBulkCopyOptions enum","description":"Bitwise flag that specifies one or more options to use with an instance of .\n","toc_asset_id":"api/_splitted/System.Data.SqlClient/toc.json","toc_rel":"_splitted/System.Data.SqlClient/toc.json","source_url":"","ms.assetid":"System.Data.SqlClient.SqlBulkCopyOptions","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqlbulkcopyoptions","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.data.sqlclient.sqlbulkcopyoptions","fileRelativePath":"api/System.Data.SqlClient.SqlBulkCopyOptions.html"},"themesRelativePathToOutputRoot":"_themes/"}