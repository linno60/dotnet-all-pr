{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ItemDragEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that will handle the <a class=\"xref\" href=\"system.windows.forms.listview#System_Windows_Forms_ListView_ItemDrag\" data-linktype=\"relative-path\">ItemDrag</a> event of a <a class=\"xref\" href=\"system.windows.forms.listview\" data-linktype=\"relative-path\">ListView</a> or <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void ItemDragEventHandler(object sender, ItemDragEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">ItemDragEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example demonstrates how to enable drag-and-drop operations within a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control. In the example, any node can be dragged to another node that is not a descendant of the dragged node. The dragged node, including all of its descendant nodes, becomes a child of the destination node. When the left mouse button is used, the dragged node is moved to the destination node. When the right mouse button is used, the dragged node is copied to the destination node.  </p>\n<pre><code class=\"lang-cpp\" name=\"TreeViewDragDrop#1\">#using &lt;System.dll&gt;\n#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::Drawing;\nusing namespace System::Windows::Forms;\npublic ref class Form1: public Form\n{\nprivate:\n   TreeView^ treeView1;\n\npublic:\n   Form1()\n   {\n      treeView1 = gcnew TreeView;\n      this-&gt;SuspendLayout();\n      \n      // Initialize treeView1.\n      treeView1-&gt;AllowDrop = true;\n      treeView1-&gt;Dock = DockStyle::Fill;\n      \n      // Add nodes to treeView1.\n      TreeNode^ node;\n      for ( int x = 0; x &lt; 3; ++x )\n      {\n         \n         // Add a root node to treeView1.\n         node = treeView1-&gt;Nodes-&gt;Add( String::Format( &quot;Node{0}&quot;, x * 4 ) );\n         for ( int y = 1; y &lt; 4; ++y )\n         {\n            \n            // Add a child node to the previously added node.\n            node = node-&gt;Nodes-&gt;Add( String::Format( &quot;Node{0}&quot;, x * 4 + y ) );\n\n         }\n      }\n      \n      // Add event handlers for the required drag events.\n      treeView1-&gt;ItemDrag += gcnew ItemDragEventHandler( this, &amp;Form1::treeView1_ItemDrag );\n      treeView1-&gt;DragEnter += gcnew DragEventHandler( this, &amp;Form1::treeView1_DragEnter );\n      treeView1-&gt;DragOver += gcnew DragEventHandler( this, &amp;Form1::treeView1_DragOver );\n      treeView1-&gt;DragDrop += gcnew DragEventHandler( this, &amp;Form1::treeView1_DragDrop );\n      \n      // Initialize the form.\n      this-&gt;ClientSize = System::Drawing::Size( 292, 273 );\n      this-&gt;Controls-&gt;Add( treeView1 );\n      this-&gt;ResumeLayout( false );\n   }\n\nprivate:\n   void treeView1_ItemDrag( Object^ /*sender*/, ItemDragEventArgs^ e )\n   {\n      \n      // Move the dragged node when the left mouse button is used.\n      if ( e-&gt;Button == ::MouseButtons::Left )\n      {\n         DoDragDrop( e-&gt;Item, DragDropEffects::Move );\n      }\n      // Copy the dragged node when the right mouse button is used.\n      else\n      \n      // Copy the dragged node when the right mouse button is used.\n      if ( e-&gt;Button == ::MouseButtons::Right )\n      {\n         DoDragDrop( e-&gt;Item, DragDropEffects::Copy );\n      }\n   }\n\n   // Set the target drop effect to the effect \n   // specified in the ItemDrag event handler.\n   void treeView1_DragEnter( Object^ /*sender*/, DragEventArgs^ e )\n   {\n      e-&gt;Effect = e-&gt;AllowedEffect;\n   }\n\n   // Select the node under the mouse pointer to indicate the \n   // expected drop location.\n   void treeView1_DragOver( Object^ /*sender*/, DragEventArgs^ e )\n   {\n      // Retrieve the client coordinates of the mouse position.\n      Point targetPoint = treeView1-&gt;PointToClient( Point(e-&gt;X,e-&gt;Y) );\n      \n      // Select the node at the mouse position.\n      treeView1-&gt;SelectedNode = treeView1-&gt;GetNodeAt( targetPoint );\n   }\n\n   void treeView1_DragDrop( Object^ /*sender*/, DragEventArgs^ e )\n   {\n      // Retrieve the client coordinates of the drop location.\n      Point targetPoint = treeView1-&gt;PointToClient( Point(e-&gt;X,e-&gt;Y) );\n      \n      // Retrieve the node at the drop location.\n      TreeNode^ targetNode = treeView1-&gt;GetNodeAt( targetPoint );\n      \n      // Retrieve the node that was dragged.\n      TreeNode^ draggedNode = dynamic_cast&lt;TreeNode^&gt;(e-&gt;Data-&gt;GetData( TreeNode::typeid ));\n      \n      // Confirm that the node at the drop location is not \n      // the dragged node or a descendant of the dragged node.\n      if (  !draggedNode-&gt;Equals( targetNode ) &amp;&amp;  !ContainsNode( draggedNode, targetNode ) )\n      {\n         \n         // If it is a move operation, remove the node from its current \n         // location and add it to the node at the drop location.\n         if ( e-&gt;Effect == DragDropEffects::Move )\n         {\n            draggedNode-&gt;Remove();\n            targetNode-&gt;Nodes-&gt;Add( draggedNode );\n         }\n         // If it is a copy operation, clone the dragged node \n         // and add it to the node at the drop location.\n         else\n         \n         // If it is a copy operation, clone the dragged node \n         // and add it to the node at the drop location.\n         if ( e-&gt;Effect == DragDropEffects::Copy )\n         {\n            targetNode-&gt;Nodes-&gt;Add( dynamic_cast&lt;TreeNode^&gt;(draggedNode-&gt;Clone()) );\n         }\n         \n         // Expand the node at the location \n         // to show the dropped node.\n         targetNode-&gt;Expand();\n      }\n   }\n\n   // Determine whether one node is a parent \n   // or ancestor of a second node.\n   bool ContainsNode( TreeNode^ node1, TreeNode^ node2 )\n   {\n      // Check the parent node of the second node.\n      if ( node2-&gt;Parent == nullptr )\n            return false;\n\n      if ( node2-&gt;Parent-&gt;Equals( node1 ) )\n            return true;\n      \n      // If the parent node is not null or equal to the first node, \n      // call the ContainsNode method recursively using the parent of \n      // the second node.\n      return ContainsNode( node1, node2-&gt;Parent );\n   }\n};\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew Form1 );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeViewDragDrop#1\">using System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\npublic class Form1 : Form\n{\n    private TreeView treeView1;\n\n    public Form1()\n    {\n        treeView1 = new TreeView();\n\n        this.SuspendLayout();\n\n        // Initialize treeView1.\n        treeView1.AllowDrop = true;\n        treeView1.Dock = DockStyle.Fill;\n\n        // Add nodes to treeView1.\n        TreeNode node;\n        for (int x = 0; x &lt; 3; ++x)\n        {\n            // Add a root node to treeView1.\n            node = treeView1.Nodes.Add(String.Format(&quot;Node{0}&quot;, x*4));\n            for (int y = 1; y &lt; 4; ++y)\n            {\n                // Add a child node to the previously added node.\n                node = node.Nodes.Add(String.Format(&quot;Node{0}&quot;, x*4 + y));\n            }\n        }\n\n        // Add event handlers for the required drag events.\n        treeView1.ItemDrag += new ItemDragEventHandler(treeView1_ItemDrag);\n        treeView1.DragEnter += new DragEventHandler(treeView1_DragEnter);\n        treeView1.DragOver += new DragEventHandler(treeView1_DragOver);\n        treeView1.DragDrop += new DragEventHandler(treeView1_DragDrop);\n\n        // Initialize the form.\n        this.ClientSize = new Size(292, 273);\n        this.Controls.Add(treeView1);\n\n        this.ResumeLayout(false);\n    }\n\n    [STAThread]\n    static void Main() \n    {\n        Application.Run(new Form1());\n    }\n\n    private void treeView1_ItemDrag(object sender, ItemDragEventArgs e)\n    {\n        // Move the dragged node when the left mouse button is used.\n        if (e.Button == MouseButtons.Left)\n        {\n            DoDragDrop(e.Item, DragDropEffects.Move);\n        }\n\n        // Copy the dragged node when the right mouse button is used.\n        else if (e.Button == MouseButtons.Right)\n        {\n            DoDragDrop(e.Item, DragDropEffects.Copy);\n        }\n    }\n\n    // Set the target drop effect to the effect \n    // specified in the ItemDrag event handler.\n    private void treeView1_DragEnter(object sender, DragEventArgs e)\n    {\n        e.Effect = e.AllowedEffect;\n    }\n\n    // Select the node under the mouse pointer to indicate the \n    // expected drop location.\n    private void treeView1_DragOver(object sender, DragEventArgs e)\n    {\n        // Retrieve the client coordinates of the mouse position.\n        Point targetPoint = treeView1.PointToClient(new Point(e.X, e.Y));\n\n        // Select the node at the mouse position.\n        treeView1.SelectedNode = treeView1.GetNodeAt(targetPoint);\n    }\n\n    private void treeView1_DragDrop(object sender, DragEventArgs e)\n    {\n        // Retrieve the client coordinates of the drop location.\n        Point targetPoint = treeView1.PointToClient(new Point(e.X, e.Y));\n\n        // Retrieve the node at the drop location.\n        TreeNode targetNode = treeView1.GetNodeAt(targetPoint);\n\n        // Retrieve the node that was dragged.\n        TreeNode draggedNode = (TreeNode)e.Data.GetData(typeof(TreeNode));\n\n        // Confirm that the node at the drop location is not \n        // the dragged node or a descendant of the dragged node.\n        if (!draggedNode.Equals(targetNode) &amp;&amp; !ContainsNode(draggedNode, targetNode))\n        {\n            // If it is a move operation, remove the node from its current \n            // location and add it to the node at the drop location.\n            if (e.Effect == DragDropEffects.Move)\n            {\n                draggedNode.Remove();\n                targetNode.Nodes.Add(draggedNode);\n            }\n\n            // If it is a copy operation, clone the dragged node \n            // and add it to the node at the drop location.\n            else if (e.Effect == DragDropEffects.Copy)\n            {\n                targetNode.Nodes.Add((TreeNode)draggedNode.Clone());\n            }\n\n            // Expand the node at the location \n            // to show the dropped node.\n            targetNode.Expand();\n        }\n    }\n\n    // Determine whether one node is a parent \n    // or ancestor of a second node.\n    private bool ContainsNode(TreeNode node1, TreeNode node2)\n    {\n        // Check the parent node of the second node.\n        if (node2.Parent == null) return false;\n        if (node2.Parent.Equals(node1)) return true;\n\n        // If the parent node is not null or equal to the first node, \n        // call the ContainsNode method recursively using the parent of \n        // the second node.\n        return ContainsNode(node1, node2.Parent);\n    }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"TreeViewDragDrop#1\">Imports System\nImports System.Drawing\nImports System.Windows.Forms\n\nPublic Class Form1\n    Inherits Form\n    Private treeView1 As TreeView\n\n    Public Sub New()\n        treeView1 = New TreeView()\n        \n        Me.SuspendLayout()\n        \n        &#39; Initialize treeView1.\n        treeView1.AllowDrop = True\n        treeView1.Dock = DockStyle.Fill\n        \n        &#39; Add nodes to treeView1.\n        Dim node As TreeNode\n        Dim x As Integer\n        For x = 0 To 3\n            &#39; Add a root node to treeView1.\n            node = treeView1.Nodes.Add(String.Format(&quot;Node{0}&quot;, x * 4))\n            Dim y As Integer\n            For y = 1 To 4\n                &#39; Add a child node to the previously added node.\n                node = node.Nodes.Add(String.Format(&quot;Node{0}&quot;, x * 4 + y))\n            Next y\n        Next x\n\n        &#39; Add event handlers for the required drag events.\n        AddHandler treeView1.ItemDrag, AddressOf treeView1_ItemDrag\n        AddHandler treeView1.DragEnter, AddressOf treeView1_DragEnter\n        AddHandler treeView1.DragOver, AddressOf treeView1_DragOver\n        AddHandler treeView1.DragDrop, AddressOf treeView1_DragDrop\n\n        &#39; Initialize the form.\n        Me.ClientSize = New Size(292, 273)\n        Me.Controls.Add(treeView1)\n\n        Me.ResumeLayout(False)\n    End Sub &#39;New\n\n    Shared Sub Main()\n        Application.Run(New Form1)\n    End Sub &#39;Main\n\n    Private Sub treeView1_ItemDrag(ByVal sender As Object, ByVal e As ItemDragEventArgs)\n\n        &#39; Move the dragged node when the left mouse button is used.\n        If e.Button = MouseButtons.Left Then\n            DoDragDrop(e.Item, DragDropEffects.Move)\n\n        &#39; Copy the dragged node when the right mouse button is used.\n        ElseIf e.Button = MouseButtons.Right Then\n            DoDragDrop(e.Item, DragDropEffects.Copy)\n        End If\n    End Sub &#39;treeView1_ItemDrag\n\n    &#39; Set the target drop effect to the effect \n    &#39; specified in the ItemDrag event handler.\n    Private Sub treeView1_DragEnter(ByVal sender As Object, ByVal e As DragEventArgs)\n        e.Effect = e.AllowedEffect\n    End Sub &#39;treeView1_DragEnter\n\n    &#39; Select the node under the mouse pointer to indicate the \n    &#39; expected drop location.\n    Private Sub treeView1_DragOver(ByVal sender As Object, ByVal e As DragEventArgs)\n        &#39; Retrieve the client coordinates of the mouse position.\n        Dim targetPoint As Point = treeView1.PointToClient(new Point(e.X, e.Y))\n\n        &#39; Select the node at the mouse position.\n        treeView1.SelectedNode = treeView1.GetNodeAt(targetPoint)\n    End Sub &#39;treeView1_DragOver\n\n    Private Sub treeView1_DragDrop(ByVal sender As Object, ByVal e As DragEventArgs)\n\n        &#39; Retrieve the client coordinates of the drop location.\n        Dim targetPoint As Point = treeView1.PointToClient(New Point(e.X, e.Y))\n\n        &#39; Retrieve the node at the drop location.\n        Dim targetNode As TreeNode = treeView1.GetNodeAt(targetPoint)\n\n        &#39; Retrieve the node that was dragged.\n        Dim draggedNode As TreeNode = CType(e.Data.GetData(GetType(TreeNode)), TreeNode)\n\n        &#39; Confirm that the node at the drop location is not \n        &#39; the dragged node or a descendant of the dragged node.\n        If Not draggedNode.Equals(targetNode) AndAlso Not ContainsNode(draggedNode, targetNode) Then\n\n            &#39; If it is a move operation, remove the node from its current \n            &#39; location and add it to the node at the drop location.\n            If e.Effect = DragDropEffects.Move Then\n                draggedNode.Remove()\n                targetNode.Nodes.Add(draggedNode)\n\n            &#39; If it is a copy operation, clone the dragged node \n            &#39; and add it to the node at the drop location.\n            ElseIf e.Effect = DragDropEffects.Copy Then\n                targetNode.Nodes.Add(CType(draggedNode.Clone(), TreeNode))\n            End If\n\n            &#39; Expand the node at the location \n            &#39; to show the dropped node.\n            targetNode.Expand()\n        End If\n    End Sub &#39;treeView1_DragDrop\n\n    &#39; Determine whether one node is a parent \n    &#39; or ancestor of a second node.\n    Private Function ContainsNode(ByVal node1 As TreeNode, ByVal node2 As TreeNode) As Boolean\n\n        &#39; Check the parent node of the second node.\n        If node2.Parent Is Nothing Then\n            Return False\n        End If\n        If node2.Parent.Equals(node1) Then\n            Return True\n        End If\n\n        &#39; If the parent node is not null or equal to the first node, \n        &#39; call the ContainsNode method recursively using the parent of \n        &#39; the second node.\n        Return ContainsNode(node1, node2.Parent)\n    End Function &#39;ContainsNode\n\nEnd Class &#39;Form1 \n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>When you create an ItemDragEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event handler delegates, see <a href=\"../topic/handling%20and%20raising%20events\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.ItemDragEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ItemDragEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ItemDragEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ItemDragEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ItemDragEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.ItemDragEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"16d9cfee-78e8-23a1-9001-17ec3264ce5e\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that will handle the  event of a  or  control.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.windows.forms/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.ItemDragEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.ItemDragEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Windows.Forms.ItemDragEventHandler","System.Windows.Forms.ItemDragEventHandler..ctor","System.Windows.Forms.ItemDragEventHandler.Invoke","System.Windows.Forms.ItemDragEventHandler.BeginInvoke","System.Windows.Forms.ItemDragEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.ItemDragEventHandler","System::Windows::Forms::ItemDragEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"16d9cfee-78e8-23a1-9001-17ec3264ce5e","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Windows.Forms/ItemDragEventHandler.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ItemDragEventHandler delegate | Microsoft Docs","_op_ogTitle":"ItemDragEventHandler delegate","description":"Represents the method that will handle the  event of a  or  control.\n","toc_asset_id":"api/_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.ItemDragEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.itemdrageventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.itemdrageventhandler","fileRelativePath":"api/System.Windows.Forms.ItemDragEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}