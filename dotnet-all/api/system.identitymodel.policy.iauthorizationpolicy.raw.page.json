{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">IAuthorizationPolicy</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Defines a set of rules for authorizing a user, given a set of claims.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public interface IAuthorizationPolicy : System.IdentityModel.Policy.IAuthorizationComponent</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<pre><code class=\"lang-cs\" name=\"C_IAuthorizationPolicy#1\">public class MyAuthorizationPolicy : IAuthorizationPolicy\n{\n    string id;\n\n    public MyAuthorizationPolicy()\n    {\n        id =  Guid.NewGuid().ToString();\n    }\n\n    public bool Evaluate(EvaluationContext evaluationContext, ref object state)\n    {\n        bool bRet = false;\n        CustomAuthState customstate = null;\n\n        // If state is null, then this method has not been called before, so \n        // set up a custom state.\n        if (state == null)\n        {\n            customstate = new CustomAuthState();\n            state = customstate;\n        }\n        else\n            customstate = (CustomAuthState)state;\n\n        Console.WriteLine(&quot;Inside MyAuthorizationPolicy::Evaluate&quot;);\n\n        // If claims have not been added yet...\n        if (!customstate.ClaimsAdded)\n        {\n            // Create an empty list of Claims.\n            IList&lt;Claim&gt; claims = new List&lt;Claim&gt;();\n\n            // Iterate through each of the claim sets in the evaluation context.\n            foreach (ClaimSet cs in evaluationContext.ClaimSets)\n                // Look for Name claims in the current claim set.\n                foreach (Claim c in cs.FindClaims(ClaimTypes.Name, Rights.PossessProperty))\n                    // Get the list of operations the given username is allowed to call.\n                    foreach (string s in GetAllowedOpList(c.Resource.ToString()))\n                    {\n                        // Add claims to the list.\n                        claims.Add(new Claim(&quot;http://example.org/claims/allowedoperation&quot;, s, Rights.PossessProperty));\n                        Console.WriteLine(&quot;Claim added {0}&quot;, s);\n                    }\n\n            // Add claims to the evaluation context.\n            evaluationContext.AddClaimSet(this, new DefaultClaimSet(this.Issuer,claims));\n\n            // Record that claims have been added.\n            customstate.ClaimsAdded = true;\n\n            // Return true, which indicates this need not be called again.\n            bRet = true;\n        }\n        else\n        {\n            // This point should not be reached, but just in case...\n            bRet = true;\n        }\n\n\n        return bRet;\n    }\n    public ClaimSet Issuer\n    {\n        get { return ClaimSet.System; }\n    }\n\n    public string Id\n    {\n        get { return id; }\n    }\n\n    // This method returns a collection of action strings that indicate the \n    // operations that the specified username is allowed to call.\n    private IEnumerable&lt;string&gt; GetAllowedOpList(string username)\n    {\n        IList&lt;string&gt; ret = new List&lt;string&gt;();\n    \n        if (username == &quot;test1&quot;)\n        {\n            ret.Add ( &quot;http://Microsoft.ServiceModel.Samples/ICalculator/Add&quot;);\n            ret.Add (&quot;http://Microsoft.ServiceModel.Samples/ICalculator/Multiply&quot;);\n            ret.Add(&quot;http://Microsoft.ServiceModel.Samples/ICalculator/Subtract&quot;);\n        }\n        else if (username == &quot;test2&quot;)\n        {\n            ret.Add ( &quot;http://Microsoft.ServiceModel.Samples/ICalculator/Add&quot;);\n            ret.Add (&quot;http://Microsoft.ServiceModel.Samples/ICalculator/Subtract&quot;);\n        }\n        return ret;\n    }\n\n    // internal class for state\n    class CustomAuthState\n    {\n        bool bClaimsAdded;\n\n        public CustomAuthState()\n        {\n            bClaimsAdded = false;\n        }\n\n        public bool ClaimsAdded { get { return bClaimsAdded; } \n                                  set {  bClaimsAdded = value; } }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"C_IAuthorizationPolicy#1\">Public Class MyAuthorizationPolicy\n    Implements IAuthorizationPolicy\n    Private value_id As String\n\n\n    Public Sub New()\n        value_id = Guid.NewGuid().ToString()\n\n    End Sub \n\n    Public Function Evaluate(ByVal evaluationContext As EvaluationContext, _\n         ByRef state As Object) As Boolean Implements IAuthorizationPolicy.Evaluate\n\n        Dim bRet As Boolean = False\n        Dim customstate As CustomAuthState = Nothing\n\n        &#39; If state is null, then this method has not been called before, so \n        &#39; set up a custom state.\n        If state Is Nothing Then\n            customstate = New CustomAuthState()\n            state = customstate\n        Else\n            customstate = CType(state, CustomAuthState)\n        End If\n        Console.WriteLine(&quot;Inside MyAuthorizationPolicy::Evaluate&quot;)\n\n        &#39; If the claims have not been added yet...\n        If Not customstate.ClaimsAdded Then\n            &#39; Create an empty list of Claims\n            Dim claims As New List(Of Claim)\n\n            &#39; Iterate through each of the claimsets in the evaluation context.\n            Dim cs As ClaimSet\n            For Each cs In evaluationContext.ClaimSets\n                &#39; Look for Name claims in the current claim set.\n                Dim c As Claim\n                For Each c In cs.FindClaims(ClaimTypes.Name, Rights.PossessProperty)\n                    &#39; Get the list of operations the given username is allowed to call.\n                    Dim s As String\n                    For Each s In GetAllowedOpList(c.Resource.ToString())\n\n                        &#39; Add claims to the list\n                        claims.Add(New Claim(&quot;http://example.org/claims/allowedoperation&quot;, _\n                                    s, Rights.PossessProperty))\n                        Console.WriteLine(&quot;Claim added {0}&quot;, s)\n                    Next s\n                Next c\n            Next cs \n            \n            &#39; Add claims to the evaluation context.\n            evaluationContext.AddClaimSet(Me, New DefaultClaimSet(Me.Issuer, claims))\n\n            &#39; Record that claims have been added.\n            customstate.ClaimsAdded = True\n\n            &#39; Return true, which indicates the method need not to be called again.\n            bRet = True\n        Else\n            &#39; Should never get here, but just in case...\n            bRet = True\n        End If\n\n\n        Return bRet\n\n    End Function &#39;Evaluate\n\n    Public ReadOnly Property Issuer() As ClaimSet Implements IAuthorizationPolicy.Issuer\n\n        Get\n            Return ClaimSet.System\n        End Get\n    End Property\n\n    Public ReadOnly Property Id() As String Implements IAuthorizationPolicy.Id\n\n        Get\n            Return value_id\n        End Get\n    End Property\n    &#39; This method returns a collection of action strings that indicate the \n    &#39; operations that the specified username is allowed to call.\n    Private Shared Function GetAllowedOpList(ByVal username As String) As IEnumerable(Of String)\n\n\n        Dim ret As New List(Of String)\n\n        If username = &quot;test1&quot; Then\n            ret.Add(&quot;http://Microsoft.ServiceModel.Samples/ICalculator/Add&quot;)\n            ret.Add(&quot;http://Microsoft.ServiceModel.Samples/ICalculator/Multiply&quot;)\n            ret.Add(&quot;http://Microsoft.ServiceModel.Samples/ICalculator/Subtract&quot;)\n        ElseIf username = &quot;test2&quot; Then\n            ret.Add(&quot;http://Microsoft.ServiceModel.Samples/ICalculator/Add&quot;)\n            ret.Add(&quot;http://Microsoft.ServiceModel.Samples/ICalculator/Subtract&quot;)\n        End If\n        Return ret\n\n    End Function \n\n    &#39; This is an internal class for state.\n    Class CustomAuthState\n        Private bClaimsAdded As Boolean\n\n\n        Public Sub New()\n\n        End Sub \n\n\n        Public Property ClaimsAdded() As Boolean\n            Get\n                Return bClaimsAdded\n            End Get\n            Set(ByVal value As Boolean)\n                bClaimsAdded = value\n            End Set\n        End Property\n    End Class \nEnd Class \n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Implement the IAuthorizationPolicy interface to add or map one set of claims to another. An authorization policy examines a set of claims and adds additional claims based on the current set. For example, an authorization policy might evaluate a claim that contains the date of birth and add a claim that asserts that the user is over 21 years old and add an Over21 claim to the <a class=\"xref\" href=\"system.identitymodel.policy.evaluationcontext\" data-linktype=\"relative-path\">EvaluationContext</a>.  </p>\n<p> Classes that implement the IAuthorizationPolicy interface do not authorize users, but they enable the <a class=\"xref\" href=\"system.servicemodel.serviceauthorizationmanager\" data-linktype=\"relative-path\">ServiceAuthorizationManager</a> class to do so. The <a class=\"xref\" href=\"system.servicemodel.serviceauthorizationmanager\" data-linktype=\"relative-path\">ServiceAuthorizationManager</a> calls the <a class=\"xref\" href=\"system.identitymodel.policy.iauthorizationpolicy#System_IdentityModel_Policy_IAuthorizationPolicy_Evaluate_\" data-linktype=\"relative-path\">Evaluate</a> method for each authorization policy in effect. The <a class=\"xref\" href=\"system.identitymodel.policy.iauthorizationpolicy#System_IdentityModel_Policy_IAuthorizationPolicy_Evaluate_\" data-linktype=\"relative-path\">Evaluate</a> method determines whether additional claims should be added for the user, based on the current context. An authorization policy&#39;s <a class=\"xref\" href=\"system.identitymodel.policy.iauthorizationpolicy#System_IdentityModel_Policy_IAuthorizationPolicy_Evaluate_\" data-linktype=\"relative-path\">Evaluate</a> method may be called multiple times, as claims are added to the <a class=\"xref\" href=\"system.identitymodel.policy.evaluationcontext\" data-linktype=\"relative-path\">EvaluationContext</a> by other authorization policies. When all authorization policies in effect are done, the <a class=\"xref\" href=\"system.servicemodel.serviceauthorizationmanager\" data-linktype=\"relative-path\">ServiceAuthorizationManager</a> class makes authorization decisions based upon the final set of claims. The <a class=\"xref\" href=\"system.servicemodel.serviceauthorizationmanager\" data-linktype=\"relative-path\">ServiceAuthorizationManager</a> class then creates an <a class=\"xref\" href=\"system.identitymodel.policy.authorizationcontext\" data-linktype=\"relative-path\">AuthorizationContext</a> that contains an immutable set of claims that reflects these authorization decisions.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_IdentityModel_Policy_IAuthorizationPolicy_Issuer_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_IdentityModel_Policy_IAuthorizationPolicy_Issuer\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Issuer</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a claim set that represents the issuer of the authorization policy.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.IdentityModel.Claims.ClaimSet Issuer { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.identitymodel.claims.claimset\" data-linktype=\"relative-path\">ClaimSet</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.identitymodel.claims.claimset\" data-linktype=\"relative-path\">ClaimSet</a> that represents the issuer of the authorization policy.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_IdentityModel_Policy_IAuthorizationPolicy_Evaluate_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_IdentityModel_Policy_IAuthorizationPolicy_Evaluate_System_IdentityModel_Policy_EvaluationContext_System_Object__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Evaluate(EvaluationContext, Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Evaluates whether a user meets the requirements for this authorization policy.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool Evaluate (System.IdentityModel.Policy.EvaluationContext evaluationContext, ref object state);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>evaluationContext</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.identitymodel.policy.evaluationcontext\" data-linktype=\"relative-path\">EvaluationContext</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.identitymodel.policy.evaluationcontext\" data-linktype=\"relative-path\">EvaluationContext</a> that contains the claim set that the authorization policy evaluates.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>state</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>, passed by reference that represents the custom state for this authorization policy.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>false</code> if the Evaluate method for this authorization policy must be called if additional claims are added by other authorization policies to <code>evaluationContext</code>; otherwise, <code>true</code> to state no additional evaluation is required by this authorization policy.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> Implementers of the <a class=\"xref\" href=\"system.identitymodel.policy.iauthorizationpolicy\" data-linktype=\"relative-path\">IAuthorizationPolicy</a> interface should expect the Evaluate method to be called multiple times by different threads.  </p>\n</div>\n<p> Implementers of the <a class=\"xref\" href=\"system.identitymodel.policy.iauthorizationpolicy\" data-linktype=\"relative-path\">IAuthorizationPolicy</a> interface can use the <code>state</code> parameter to track state between calls to the Evaluate method. If a state object is set inside a given call to the Evaluate method, the same object instance is passed to each and every subsequent call to the Evaluate method in the current evaluation process.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.IdentityModel.Policy.IAuthorizationPolicy.yml\">\r\n<meta name=\"APIName\" content=\"System.IdentityModel.Policy.IAuthorizationPolicy\">\r\n<meta name=\"APIName\" content=\"System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate\">\r\n<meta name=\"APIName\" content=\"System.IdentityModel.Policy.IAuthorizationPolicy.Issuer\">\r\n<meta name=\"APILocation\" content=\"System.IdentityModel.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:59 PM\">\r\n<meta name=\"document_id\" content=\"aa0844ba-941c-f682-775d-ac397e05c493\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines a set of rules for authorizing a user, given a set of claims.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.identitymodel.policy/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.IdentityModel.Policy.IAuthorizationPolicy\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","uhfHeaderId":"MSDocsHeader-DotNet","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.IdentityModel.Policy.IAuthorizationPolicy.yml","open_to_public_contributors":false,"api_name":["System.IdentityModel.Policy.IAuthorizationPolicy","System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate","System.IdentityModel.Policy.IAuthorizationPolicy.Issuer"],"api_location":["System.IdentityModel.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.IdentityModel.Policy.IAuthorizationPolicy","System::IdentityModel::Policy::IAuthorizationPolicy","System.IdentityModel.Policy.IAuthorizationPolicy.Evaluate","System::IdentityModel::Policy::IAuthorizationPolicy::Evaluate","System.IdentityModel.Policy.IAuthorizationPolicy.Issuer","System::IdentityModel::Policy::IAuthorizationPolicy::Issuer"],"dev_langs":["csharp"],"updated_at":"2017-04-01 05:59 PM","document_id":"aa0844ba-941c-f682-775d-ac397e05c493","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.IdentityModel.Policy/IAuthorizationPolicy.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IAuthorizationPolicy interface | Microsoft Docs","_op_ogTitle":"IAuthorizationPolicy interface","description":"Defines a set of rules for authorizing a user, given a set of claims.\n","toc_asset_id":"api/_splitted/System.IdentityModel.Policy/toc.json","toc_rel":"_splitted/System.IdentityModel.Policy/toc.json","source_url":"","ms.assetid":"System.IdentityModel.Policy.IAuthorizationPolicy","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.identitymodel.policy.iauthorizationpolicy","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.identitymodel.policy.iauthorizationpolicy","fileRelativePath":"api/System.IdentityModel.Policy.IAuthorizationPolicy.html"},"themesRelativePathToOutputRoot":"_themes/"}