{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ConcurrencyMode</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies whether a service class supports single-threaded or multi-threaded modes of operation.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public enum ConcurrencyMode</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">ConcurrencyMode</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates the different between using Single, Reentrant, and Multiple. This sample does not compile without a real implementation behind it, but does demonstrate the kind of threading guarantees that WCF makes and what that means for your operation code.  </p>\n<pre><code class=\"lang-cs\" name=\"C_BestPractices-Concurrency#1\">using System;\nusing System.ServiceModel;\n\n[ServiceContract]\npublic interface IHttpFetcher\n{\n  [OperationContract]\n  string GetWebPage(string address);\n}\n\n// These classes have the invariant that:\n//     this.slow.GetWebPage(this.cachedAddress) == this.cachedWebPage.\n// When you read cached values you can assume they are valid. When\n// you write the cached values, you must guarantee that they are valid.\n// With ConcurrencyMode.Single, WCF does not call again into the object\n// so long as the method is running. After the operation returns the object\n// can be called again, so you must make sure state is consistent before\n// returning.\n[ServiceBehavior(ConcurrencyMode = ConcurrencyMode.Single)]\nclass SingleCachingHttpFetcher : IHttpFetcher\n{\n    string cachedWebPage;\n    string cachedAddress;\n    readonly IHttpFetcher slow;\n\n    public string GetWebPage(string address)\n    {\n        // &lt;-- Can assume cache is valid.\n        if (this.cachedAddress == address)\n        {\n            return this.cachedWebPage;\n        }\n\n        // &lt;-- Cache is no longer valid because we are changing\n        // one of the values.\n        this.cachedAddress = address;\n        string webPage = slow.GetWebPage(address);\n        this.cachedWebPage = webPage;\n        // &lt;-- Cache is valid again here.\n\n        return this.cachedWebPage;\n        // &lt;-- Must guarantee that the cache is valid because we are returning.\n    }\n}\n\n// With ConcurrencyMode.Reentrant, WCF makes sure that only one\n// thread runs in your code at a time. However, when you call out on a\n// channel, the operation can get called again on another thread. Therefore \n// you must confirm that state is consistent both before channel calls and\n// before you return.\n[ServiceBehavior(ConcurrencyMode = ConcurrencyMode.Reentrant)]\nclass ReentrantCachingHttpFetcher : IHttpFetcher\n{\n  string cachedWebPage;\n  string cachedAddress;\n  readonly SlowHttpFetcher slow;\n\n  public ReentrantCachingHttpFetcher()\n  {\n    this.slow = new SlowHttpFetcher();\n  }\n\n  public string GetWebPage(string address)\n  {\n    // &lt;-- Can assume that cache is valid.\n    if (this.cachedAddress == address)\n    {\n        return this.cachedWebPage;\n    }\n\n    // &lt;-- Must guarantee that the cache is valid, because \n    // the operation can be called again before we return.\n    string webPage = slow.GetWebPage(address);\n    // &lt;-- Can assume cache is valid.\n\n    // &lt;-- Cache is no longer valid because we are changing\n    // one of the values.\n    this.cachedAddress = address;\n    this.cachedWebPage = webPage;\n    // &lt;-- Cache is valid again here.\n\n    return this.cachedWebPage;\n    // &lt;-- Must guarantee that cache is valid because we are returning.\n  }\n}\n\n// With ConcurrencyMode.Multiple, threads can call an operation at any time.  \n// It is your responsibility to guard your state with locks. If\n// you always guarantee you leave state consistent when you leave\n// the lock, you can assume it is valid when you enter the lock.\n[ServiceBehavior(ConcurrencyMode = ConcurrencyMode.Multiple)]\nclass MultipleCachingHttpFetcher : IHttpFetcher\n{\n  string cachedWebPage;\n  string cachedAddress;\n  readonly SlowHttpFetcher slow;\n  readonly object ThisLock = new object();\n\n  public MultipleCachingHttpFetcher()\n  {\n    this.slow = new SlowHttpFetcher();\n  }\n\n  public string GetWebPage(string address)\n  {\n    lock (this.ThisLock)\n    {\n      // &lt;-- Can assume cache is valid.\n      if (this.cachedAddress == address)\n      {\n          return this.cachedWebPage;\n          // &lt;-- Must guarantee that cache is valid because \n          // the operation returns and releases the lock.\n      }\n      // &lt;-- Must guarantee that cache is valid here because\n      // the operation releases the lock.\n    }\n\n    string webPage = slow.GetWebPage(address);\n\n    lock (this.ThisLock)\n    {\n      // &lt;-- Can assume cache is valid.\n\n      // &lt;-- Cache is no longer valid because the operation \n      // changes one of the values.\n      this.cachedAddress = address;\n      this.cachedWebPage = webPage;\n      // &lt;-- Cache is valid again here.\n\n      // &lt;-- Must guarantee that cache is valid because\n      // the operation releases the lock.\n    }\n\n    return webPage;\n  }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>ConcurrencyMode is used in conjunction with the <a class=\"xref\" href=\"system.servicemodel.servicebehaviorattribute#System_ServiceModel_ServiceBehaviorAttribute_ConcurrencyMode_\" data-linktype=\"relative-path\">ConcurrencyMode</a> property to specify whether a service class supports single-threaded or multi-threaded modes of operation. A single-threaded operation can be either reentrant or non-reentrant.  </p>\n<p> The following table shows when Windows Communication Foundation (WCF) permits an operation to be invoked while another one is in progress, depending upon the ConcurrencyMode.  </p>\n<table>\n<thead>\n<tr>\n<th>ConcurrencyMode Value</th>\n<th>Can a new operation be invoked?</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Single</td>\n<td>Never.</td>\n</tr>\n<tr>\n<td>Reentrant</td>\n<td>Only while invoking another service or a callback.</td>\n</tr>\n<tr>\n<td>Multiple</td>\n<td>Always.</td>\n</tr>\n</tbody>\n</table>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_ServiceModel_ConcurrencyMode_Multiple\">\r\n      \t\t\t<span class=\"lang-csharp\">Multiple</span>\r\n      \t</td>\r\n      \t<td><p>The service instance is multi-threaded. No synchronization guarantees are made. Because other threads can change your service object at any time, you must handle synchronization and state consistency at all times.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_ServiceModel_ConcurrencyMode_Reentrant\">\r\n      \t\t\t<span class=\"lang-csharp\">Reentrant</span>\r\n      \t</td>\r\n      \t<td><p>The service instance is single-threaded and accepts reentrant calls. The reentrant service accepts calls when you call another service; it is therefore your responsibility to leave your object state consistent before callouts and you must confirm that operation-local data is valid after callouts. Note that the service instance is unlocked only by calling another service over a WCF channel. In this case, the called service can reenter the first service via a callback. If the first service is not reentrant, the sequence of calls results in a deadlock. For details, see <span class=\"xref\">stem.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode*</span>.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_ServiceModel_ConcurrencyMode_Single\">\r\n      \t\t\t<span class=\"lang-csharp\">Single</span>\r\n      \t</td>\r\n      \t<td><p>The service instance is single-threaded and does not accept reentrant calls. If the <span class=\"xref\">stem.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode*</span> property is <a class=\"xref\" href=\"system.servicemodel.instancecontextmode\" data-linktype=\"relative-path\">InstanceContextMode</a>, and additional messages arrive while the instance services a call, these messages must wait until the service is available or until the messages time out.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.ServiceModel.ConcurrencyMode.yml\">\r\n<meta name=\"APIName\" content=\"System.ServiceModel.ConcurrencyMode\">\r\n<meta name=\"APIName\" content=\"System.ServiceModel.ConcurrencyMode.Multiple\">\r\n<meta name=\"APIName\" content=\"System.ServiceModel.ConcurrencyMode.Reentrant\">\r\n<meta name=\"APIName\" content=\"System.ServiceModel.ConcurrencyMode.Single\">\r\n<meta name=\"APILocation\" content=\"System.ServiceModel.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:59 PM\">\r\n<meta name=\"document_id\" content=\"ee39eeab-1f72-cb35-fbaa-c372bd26748b\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies whether a service class supports single-threaded or multi-threaded modes of operation.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.servicemodel/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.ServiceModel.ConcurrencyMode\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","uhfHeaderId":"MSDocsHeader-DotNet","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.ServiceModel.ConcurrencyMode.yml","open_to_public_contributors":false,"api_name":["System.ServiceModel.ConcurrencyMode","System.ServiceModel.ConcurrencyMode.Multiple","System.ServiceModel.ConcurrencyMode.Reentrant","System.ServiceModel.ConcurrencyMode.Single"],"api_location":["System.ServiceModel.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.ServiceModel.ConcurrencyMode","System::ServiceModel::ConcurrencyMode","System.ServiceModel.ConcurrencyMode.Multiple","System::ServiceModel::ConcurrencyMode::Multiple","System.ServiceModel.ConcurrencyMode.Reentrant","System::ServiceModel::ConcurrencyMode::Reentrant","System.ServiceModel.ConcurrencyMode.Single","System::ServiceModel::ConcurrencyMode::Single"],"dev_langs":["csharp"],"updated_at":"2017-04-01 05:59 PM","document_id":"ee39eeab-1f72-cb35-fbaa-c372bd26748b","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.ServiceModel/ConcurrencyMode.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ConcurrencyMode enum | Microsoft Docs","_op_ogTitle":"ConcurrencyMode enum","description":"Specifies whether a service class supports single-threaded or multi-threaded modes of operation.\n","toc_asset_id":"api/_splitted/System.ServiceModel/toc.json","toc_rel":"_splitted/System.ServiceModel/toc.json","source_url":"","ms.assetid":"System.ServiceModel.ConcurrencyMode","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.servicemodel.concurrencymode","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.servicemodel.concurrencymode","fileRelativePath":"api/System.ServiceModel.ConcurrencyMode.html"},"themesRelativePathToOutputRoot":"_themes/"}