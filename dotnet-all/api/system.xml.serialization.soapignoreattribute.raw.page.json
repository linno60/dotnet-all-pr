{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">SoapIgnoreAttribute</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Instructs the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> not to serialize the public field or public read/write property value.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Parameter | System.AttributeTargets.ReturnValue)]\npublic class SoapIgnoreAttribute : Attribute</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a></span></div><span class=\"lang-csharp\">SoapIgnoreAttribute</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_Assembly_System_Type_\" data-linktype=\"relative-path\">GetCustomAttribute(Assembly, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_Assembly_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttribute(Assembly, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_MemberInfo_System_Type_\" data-linktype=\"relative-path\">GetCustomAttribute(MemberInfo, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_MemberInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttribute(MemberInfo, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_Module_System_Type_\" data-linktype=\"relative-path\">GetCustomAttribute(Module, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_Module_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttribute(Module, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_ParameterInfo_System_Type_\" data-linktype=\"relative-path\">GetCustomAttribute(ParameterInfo, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_ParameterInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttribute(ParameterInfo, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_\" data-linktype=\"relative-path\">GetCustomAttributes(Assembly)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Assembly, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_System_Type_\" data-linktype=\"relative-path\">GetCustomAttributes(Assembly, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Assembly, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_\" data-linktype=\"relative-path\">GetCustomAttributes(MemberInfo)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(MemberInfo, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_System_Type_\" data-linktype=\"relative-path\">GetCustomAttributes(MemberInfo, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(MemberInfo, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Module_\" data-linktype=\"relative-path\">GetCustomAttributes(Module)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Module_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Module, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Module_System_Type_\" data-linktype=\"relative-path\">GetCustomAttributes(Module, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Module_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Module, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_\" data-linktype=\"relative-path\">GetCustomAttributes(ParameterInfo)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(ParameterInfo, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_System_Type_\" data-linktype=\"relative-path\">GetCustomAttributes(ParameterInfo, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(ParameterInfo, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefaultAttribute\" data-linktype=\"relative-path\">IsDefaultAttribute()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_Assembly_System_Type_\" data-linktype=\"relative-path\">IsDefined(Assembly, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_Assembly_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(Assembly, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_MemberInfo_System_Type_\" data-linktype=\"relative-path\">IsDefined(MemberInfo, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_MemberInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(MemberInfo, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_Module_System_Type_\" data-linktype=\"relative-path\">IsDefined(Module, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_Module_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(Module, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_ParameterInfo_System_Type_\" data-linktype=\"relative-path\">IsDefined(ParameterInfo, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_ParameterInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(ParameterInfo, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_Match_System_Object_\" data-linktype=\"relative-path\">Match(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_System_Runtime_InteropServices__Attribute_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_System_Runtime_InteropServices__Attribute_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_System_Runtime_InteropServices__Attribute_GetTypeInfoCount_System_UInt32__\" data-linktype=\"relative-path\">_Attribute.GetTypeInfoCount(UInt32)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_System_Runtime_InteropServices__Attribute_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"relative-path\">_Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_TypeId\" data-linktype=\"relative-path\">TypeId</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example serializes a class named <code>Group</code>. The serialization of the <code>GroupName</code> and <code>IgnoreThis</code> fields and the members of the <code>GroupType</code> enumeration are overridden. In the <code>CreateOverrideSerializer</code> method, a <a class=\"xref\" href=\"system.xml.serialization.soapattributeoverrides\" data-linktype=\"relative-path\">SoapAttributeOverrides</a> is created, and for each overridden member or enumeration, a <a class=\"xref\" href=\"system.xml.serialization.soapattributes\" data-linktype=\"relative-path\">SoapAttributes</a> is created with the appropriate property set and added to the <a class=\"xref\" href=\"system.xml.serialization.soapattributeoverrides\" data-linktype=\"relative-path\">SoapAttributeOverrides</a>. An <a class=\"xref\" href=\"system.xml.serialization.xmltypemapping\" data-linktype=\"relative-path\">XmlTypeMapping</a> is created using the <a class=\"xref\" href=\"system.xml.serialization.soapattributeoverrides\" data-linktype=\"relative-path\">SoapAttributeOverrides</a>, and that <a class=\"xref\" href=\"system.xml.serialization.xmltypemapping\" data-linktype=\"relative-path\">XmlTypeMapping</a> is used to create the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> that overrides the default serialization.  </p>\n<pre><code class=\"lang-cpp\" name=\"SoapAttributesOverrides#1\">#using &lt;System.Xml.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Text;\nusing namespace System::Xml;\nusing namespace System::Xml::Serialization;\nusing namespace System::Xml::Schema;\nref class Car;\n\n// SoapInclude allows Vehicle to accept Car type.\n\n[SoapInclude(Car::typeid)]\npublic ref class Vehicle abstract\n{\npublic:\n   String^ licenseNumber;\n   DateTime makeDate;\n};\n\npublic ref class Car: public Vehicle{};\n\npublic enum class GroupType\n{\n   // These enums can be overridden.\n   [SoapEnum(&quot;Small&quot;)]\n   A,\n   [SoapEnum(&quot;Large&quot;)]\n   B\n};\n\npublic ref class Group\n{\npublic:\n\n   [SoapAttributeAttribute(Namespace=&quot;http://www.cpandl.com&quot;)]\n   String^ GroupName;\n\n   [SoapAttributeAttribute(DataType=&quot;base64Binary&quot;)]\n   array&lt;Byte&gt;^GroupNumber;\n\n   [SoapAttributeAttribute(DataType=&quot;date&quot;,AttributeName=&quot;CreationDate&quot;)]\n   DateTime Today;\n\n   [SoapElement(DataType=&quot;nonNegativeInteger&quot;,ElementName=&quot;PosInt&quot;)]\n   String^ PostitiveInt;\n\n   // This is ignored when serialized unless it&#39;s overridden.\n\n   [SoapIgnore]\n   bool IgnoreThis;\n   GroupType Grouptype;\n   Vehicle^ MyVehicle;\n\n   // The SoapInclude allows the method to return a Car.\n\n   [SoapInclude(Car::typeid)]\n   Vehicle^ myCar( String^ licNumber )\n   {\n      Vehicle^ v;\n      if ( licNumber-&gt;Equals( &quot;&quot; ) )\n      {\n         v = gcnew Car;\n         v-&gt;licenseNumber = &quot;!!!!!!&quot;;\n      }\n      else\n      {\n         v = gcnew Car;\n         v-&gt;licenseNumber = licNumber;\n      }\n\n      return v;\n   }\n};\n\npublic ref class Run\n{\npublic:\n   static void main()\n   {\n      Run^ test = gcnew Run;\n      test-&gt;SerializeOriginal( &quot;SoapOriginal.xml&quot; );\n      test-&gt;SerializeOverride( &quot;SoapOverrides.xml&quot; );\n      test-&gt;DeserializeOriginal( &quot;SoapOriginal.xml&quot; );\n      test-&gt;DeserializeOverride( &quot;SoapOverrides.xml&quot; );\n   }\n\n   void SerializeOriginal( String^ filename )\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlTypeMapping^ myMapping = (gcnew SoapReflectionImporter)-&gt;ImportTypeMapping( Group::typeid );\n      XmlSerializer^ mySerializer = gcnew XmlSerializer( myMapping );\n      Group^ myGroup = MakeGroup();\n\n      // Writing the file requires a TextWriter.\n      XmlTextWriter^ writer = gcnew XmlTextWriter( filename,Encoding::UTF8 );\n      writer-&gt;Formatting = Formatting::Indented;\n      writer-&gt;WriteStartElement( &quot;wrapper&quot; );\n\n      // Serialize the class, and close the TextWriter.\n      mySerializer-&gt;Serialize( writer, myGroup );\n      writer-&gt;WriteEndElement();\n      writer-&gt;Close();\n   }\n\n   void SerializeOverride( String^ filename )\n   {\n      // Create an instance of the XmlSerializer class\n      // that overrides the serialization.\n      XmlSerializer^ overRideSerializer = CreateOverrideSerializer();\n      Group^ myGroup = MakeGroup();\n\n      // Writing the file requires a TextWriter.\n      XmlTextWriter^ writer = gcnew XmlTextWriter( filename,Encoding::UTF8 );\n      writer-&gt;Formatting = Formatting::Indented;\n      writer-&gt;WriteStartElement( &quot;wrapper&quot; );\n\n      // Serialize the class, and close the TextWriter.\n      overRideSerializer-&gt;Serialize( writer, myGroup );\n      writer-&gt;WriteEndElement();\n      writer-&gt;Close();\n   }\n\nprivate:\n   Group^ MakeGroup()\n   {\n      // Create an instance of the class that will be serialized.\n      Group^ myGroup = gcnew Group;\n\n      // Set the object properties.\n      myGroup-&gt;GroupName = &quot;.NET&quot;;\n      array&lt;Byte&gt;^hexByte = {Convert::ToByte( 100 ),Convert::ToByte( 50 )};\n      myGroup-&gt;GroupNumber = hexByte;\n      DateTime myDate = DateTime(2002,5,2);\n      myGroup-&gt;Today = myDate;\n      myGroup-&gt;PostitiveInt = &quot;10000&quot;;\n      myGroup-&gt;IgnoreThis = true;\n      myGroup-&gt;Grouptype = GroupType::B;\n      Car^ thisCar = dynamic_cast&lt;Car^&gt;(myGroup-&gt;myCar( &quot;1234566&quot; ));\n      myGroup-&gt;MyVehicle = thisCar;\n      return myGroup;\n   }\n\npublic:\n   void DeserializeOriginal( String^ filename )\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlTypeMapping^ myMapping = (gcnew SoapReflectionImporter)-&gt;ImportTypeMapping( Group::typeid );\n      XmlSerializer^ mySerializer = gcnew XmlSerializer( myMapping );\n\n      // Reading the file requires an  XmlTextReader.\n      XmlTextReader^ reader = gcnew XmlTextReader( filename );\n      reader-&gt;ReadStartElement( &quot;wrapper&quot; );\n\n      // Deserialize and cast the object.\n      Group^ myGroup;\n      myGroup = dynamic_cast&lt;Group^&gt;(mySerializer-&gt;Deserialize( reader ));\n      reader-&gt;ReadEndElement();\n      reader-&gt;Close();\n   }\n\n   void DeserializeOverride( String^ filename )\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlSerializer^ overRideSerializer = CreateOverrideSerializer();\n\n      // Reading the file requires an XmlTextReader.\n      XmlTextReader^ reader = gcnew XmlTextReader( filename );\n      reader-&gt;ReadStartElement( &quot;wrapper&quot; );\n\n      // Deserialize and cast the object.\n      Group^ myGroup;\n      myGroup = dynamic_cast&lt;Group^&gt;(overRideSerializer-&gt;Deserialize( reader ));\n      reader-&gt;ReadEndElement();\n      reader-&gt;Close();\n      ReadGroup( myGroup );\n   }\n\nprivate:\n   void ReadGroup( Group^ myGroup )\n   {\n      Console::WriteLine( myGroup-&gt;GroupName );\n      Console::WriteLine( myGroup-&gt;GroupNumber[ 0 ] );\n      Console::WriteLine( myGroup-&gt;GroupNumber[ 1 ] );\n      Console::WriteLine( myGroup-&gt;Today );\n      Console::WriteLine( myGroup-&gt;PostitiveInt );\n      Console::WriteLine( myGroup-&gt;IgnoreThis );\n      Console::WriteLine();\n   }\n\n   XmlSerializer^ CreateOverrideSerializer()\n   {\n      SoapAttributeOverrides^ mySoapAttributeOverrides = gcnew SoapAttributeOverrides;\n      SoapAttributes^ soapAtts = gcnew SoapAttributes;\n      SoapElementAttribute^ mySoapElement = gcnew SoapElementAttribute;\n      mySoapElement-&gt;ElementName = &quot;xxxx&quot;;\n      soapAtts-&gt;SoapElement = mySoapElement;\n      mySoapAttributeOverrides-&gt;Add( Group::typeid, &quot;PostitiveInt&quot;, soapAtts );\n\n      // Override the IgnoreThis property.\n      SoapIgnoreAttribute^ myIgnore = gcnew SoapIgnoreAttribute;\n      soapAtts = gcnew SoapAttributes;\n      soapAtts-&gt;SoapIgnore = false;\n      mySoapAttributeOverrides-&gt;Add( Group::typeid, &quot;IgnoreThis&quot;, soapAtts );\n\n      // Override the GroupType enumeration. \n      soapAtts = gcnew SoapAttributes;\n      SoapEnumAttribute^ xSoapEnum = gcnew SoapEnumAttribute;\n      xSoapEnum-&gt;Name = &quot;Over1000&quot;;\n      soapAtts-&gt;GroupType::SoapEnum = xSoapEnum;\n\n      // Add the SoapAttributes to the \n      // mySoapAttributeOverridesrides object.\n      mySoapAttributeOverrides-&gt;Add( GroupType::typeid, &quot;A&quot;, soapAtts );\n\n      // Create second enumeration and add it.\n      soapAtts = gcnew SoapAttributes;\n      xSoapEnum = gcnew SoapEnumAttribute;\n      xSoapEnum-&gt;Name = &quot;ZeroTo1000&quot;;\n      soapAtts-&gt;GroupType::SoapEnum = xSoapEnum;\n      mySoapAttributeOverrides-&gt;Add( GroupType::typeid, &quot;B&quot;, soapAtts );\n\n      // Override the Group type.\n      soapAtts = gcnew SoapAttributes;\n      SoapTypeAttribute^ soapType = gcnew SoapTypeAttribute;\n      soapType-&gt;TypeName = &quot;Team&quot;;\n      soapAtts-&gt;SoapType = soapType;\n      mySoapAttributeOverrides-&gt;Add( Group::typeid, soapAtts );\n\n      // Create an XmlTypeMapping that is used to create an instance \n      // of the XmlSerializer. Then return the XmlSerializer object.\n      XmlTypeMapping^ myMapping = (gcnew SoapReflectionImporter( mySoapAttributeOverrides ))-&gt;ImportTypeMapping( Group::typeid );\n      XmlSerializer^ ser = gcnew XmlSerializer( myMapping );\n      return ser;\n   }\n};\n\nint main()\n{\n   Run::main();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"SoapAttributesOverrides#1\">Imports System\nImports System.IO\nImports System.Text\nImports System.Xml\nImports System.Xml.Serialization\nImports System.Xml.Schema\n\nPublic Class Group\n   &lt;SoapAttribute (Namespace:= &quot;http:&#39;www.cpandl.com&quot;)&gt; _\n   Public GroupName As String \n   \n   &lt;SoapAttribute(DataType:= &quot;base64Binary&quot;)&gt; _\n   Public GroupNumber() As Byte\n\n   &lt;SoapAttribute(DataType:= &quot;date&quot;, _\n   AttributeName:= &quot;CreationDate&quot;)&gt; _\n   Public Today As DateTime \n   &lt;SoapElement(DataType:= &quot;nonNegativeInteger&quot;, _\n   ElementName:= &quot;PosInt&quot;)&gt; _\n   Public PostitiveInt As String \n   &#39; This is ignored when serialized unless it&#39;s overridden.\n   &lt;SoapIgnore&gt; _ \n   Public IgnoreThis As Boolean \n   \n   Public Grouptype As GroupType \n\n   Public MyVehicle As Vehicle \n\n   &#39;  The SoapInclude allows the method to return a Car.\n   &lt;SoapInclude(GetType(Car))&gt; _\n   Public Function myCar(licNumber As String ) As Vehicle \n      Dim v As Vehicle \n      if licNumber = &quot;&quot; Then\n         v = New Car()\n         v.licenseNumber = &quot;!!!!!!&quot;\n      else  \n   \t   v = New Car()\n   \t   v.licenseNumber = licNumber\n      End If\n      \n      return v\n   End Function\nEnd Class\n  \n&#39; SoapInclude allows Vehicle to accept Car type.\n&lt;SoapInclude(GetType(Car))&gt; _\nPublic MustInherit  class Vehicle\n   Public licenseNumber As String \n   Public makeDate As DateTime \nEnd Class\n\nPublic Class Car\n   Inherits Vehicle\n\nEnd Class\n\nPublic enum GroupType\n   &#39; These enums can be overridden.\n   &lt;SoapEnum(&quot;Small&quot;)&gt; _\n   A\n   &lt;SoapEnum(&quot;Large&quot;)&gt; _ \n   B\nEnd Enum\n \nPublic Class Run\n\n   Shared Sub Main()\n      Dim test As Run = New Run()\n      test.SerializeOriginal(&quot;SoapOriginal.xml&quot;)\n      test.SerializeOverride(&quot;SoapOverrides.xml&quot;)\n      test.DeserializeOriginal(&quot;SoapOriginal.xml&quot;)\n      test.DeserializeOverride(&quot;SoapOverrides.xml&quot;)\n   End SUb\n   \n   Public Sub SerializeOriginal(filename As String)\n\n      &#39; Create an instance of the XmlSerializer class.\n      Dim myMapping As XmlTypeMapping = _\n      (New SoapReflectionImporter().ImportTypeMapping _\n      (GetType(Group)))\n      Dim mySerializer As XmlSerializer =  _\n      New XmlSerializer(myMapping)\n      \n      Dim myGroup As Group =MakeGroup()\n      &#39; Writing the file requires a TextWriter.\n      Dim writer As XmlTextWriter  = _\n      New XmlTextWriter(filename, Encoding.UTF8)\n      writer.Formatting = Formatting.Indented\n      writer.WriteStartElement(&quot;wrapper&quot;)\n      &#39; Serialize the class, and close the TextWriter.\n      mySerializer.Serialize(writer, myGroup)\n      writer.WriteEndElement()\n      writer.Close()\n   End Sub\n\n   Public Sub SerializeOverride(filename As String)\n      &#39; Create an instance of the XmlSerializer class\n      &#39; that overrides the serialization.\n      Dim overRideSerializer As XmlSerializer = _\n      CreateOverrideSerializer()\n      Dim myGroup As Group =MakeGroup()\n      &#39; Writing the file requires a TextWriter.\n      Dim writer As XmlTextWriter  = _\n      New XmlTextWriter(filename, Encoding.UTF8)\n      writer.Formatting = Formatting.Indented\n      writer.WriteStartElement(&quot;wrapper&quot;)\n      &#39; Serialize the class, and close the TextWriter.\n      overRideSerializer.Serialize(writer, myGroup)\n      writer.WriteEndElement()\n      writer.Close()\n    End Sub\n\n   private Function MakeGroup() As Group \n      &#39; Create an instance of the class that will be serialized.\n      Dim myGroup As Group  = New Group()\n\n      &#39; Set the object properties.\n      myGroup.GroupName = &quot;.NET&quot;\n\n      Dim hexByte()As Byte = new Byte(1){Convert.ToByte(100), _\n      Convert.ToByte(50)}\n      myGroup.GroupNumber = hexByte\n\n      Dim myDate As DateTime  = new DateTime(2002,5,2)\n      myGroup.Today = myDate\n\n      myGroup.PostitiveInt = &quot;10000&quot;\n\tmyGroup.IgnoreThis = true\n\tmyGroup.Grouptype = GroupType.B\n\tDim thisCar As Car \n\tthisCar =CType(myGroup.myCar(&quot;1234566&quot;), Car)\n\tmyGroup.myVehicle=thisCar\n      return myGroup\n   End Function   \t\n\n   Public Sub DeserializeOriginal(filename As String)\n      &#39; Create an instance of the XmlSerializer class.\n      Dim myMapping As XmlTypeMapping = _\n      (New SoapReflectionImporter().ImportTypeMapping _\n      (GetType(Group)))\n      Dim mySerializer As XmlSerializer =  _\n      New XmlSerializer(myMapping)\n\n      &#39; Reading the file requires an  XmlTextReader.\n      Dim reader As XmlTextReader = _\n      New XmlTextReader(filename)\n      reader.ReadStartElement(&quot;wrapper&quot;)\n\n      &#39; Deserialize and cast the object.\n      Dim myGroup As Group  = _\n      CType(mySerializer.Deserialize(reader), Group)\n      reader.ReadEndElement()\n      reader.Close()\n   End Sub\n\n   Public Sub DeserializeOverride(filename As String)\n      &#39; Create an instance of the XmlSerializer class.\n      Dim overRideSerializer As XmlSerializer  = _\n      CreateOverrideSerializer()\n\n      &#39; Reading the file requires an  XmlTextReader.\n      Dim reader As XmlTextReader = _\n      New XmlTextReader(filename)\n      reader.ReadStartElement(&quot;wrapper&quot;)\n\n      &#39; Deserialize and cast the object.\n      Dim myGroup As Group = _\n      CType(overRideSerializer.Deserialize(reader), Group)\n      reader.ReadEndElement()\n      reader.Close()\n      ReadGroup(myGroup)\n   End Sub\n\n   private Sub ReadGroup(myGroup As Group)\n      Console.WriteLine(myGroup.GroupName)\n      Console.WriteLine(myGroup.GroupNumber(0))\n      Console.WriteLine(myGroup.GroupNumber(1))\n      Console.WriteLine(myGroup.Today)\n      Console.WriteLine(myGroup.PostitiveInt)\n      Console.WriteLine(myGroup.IgnoreThis)\n      Console.WriteLine()\n   End Sub\n   \n   Private Function CreateOverrideSerializer() As XmlSerializer\n      Dim soapOver As SoapAttributeOverrides = New SoapAttributeOverrides()\n      Dim soapAtts As SoapAttributes = New SoapAttributes()\n\n      Dim mySoapElement As SoapElementAttribute = New SoapElementAttribute()\n      mySoapElement.ElementName = &quot;xxxx&quot;\n      soapAtts.SoapElement = mySoapElement\n      soapOver.Add(GetType(Group), &quot;PostitiveInt&quot;, soapAtts)\n\n      &#39; Override the IgnoreThis property.\n      Dim myIgnore As SoapIgnoreAttribute  = new SoapIgnoreAttribute()\n      soapAtts = New SoapAttributes()\n      soapAtts.SoapIgnore = false\n      soapOver.Add(GetType(Group), &quot;IgnoreThis&quot;, soapAtts)\n\n      &#39; Override the GroupType enumeration.\n      soapAtts = New SoapAttributes()\n      Dim xSoapEnum As SoapEnumAttribute = new SoapEnumAttribute()\n      xSoapEnum.Name = &quot;Over1000&quot;\n      soapAtts.SoapEnum = xSoapEnum\n      &#39; Add the SoapAttributes to the SoapOverrides object.\n      soapOver.Add(GetType(GroupType), &quot;A&quot;, soapAtts)\n\n      &#39; Create second enumeration and add it.\n      soapAtts = New SoapAttributes()\n      xSoapEnum = New SoapEnumAttribute()\n      xSoapEnum.Name = &quot;ZeroTo1000&quot;\n      soapAtts.SoapEnum = xSoapEnum\n      soapOver.Add(GetType(GroupType), &quot;B&quot;, soapAtts)\n\n      &#39; Override the Group type.\n      soapAtts = New SoapAttributes()\n      Dim soapType As SoapTypeAttribute = New SoapTypeAttribute()\n      soapType.TypeName = &quot;Team&quot;\n      soapAtts.SoapType = soapType\n      soapOver.Add(GetType(Group),soapAtts)\n\t\n      Dim myMapping As XmlTypeMapping = (New SoapReflectionImporter( _\n      soapOver)).ImportTypeMapping(GetType(Group))\n\t\n       Dim ser As XmlSerializer = new XmlSerializer(myMapping)\n      return ser\n   End Function\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"SoapAttributesOverrides#1\">using System;\nusing System.IO;\nusing System.Text;\nusing System.Xml;\nusing System.Xml.Serialization;\nusing System.Xml.Schema;\n\npublic class Group\n{\n   [SoapAttribute (Namespace = &quot;http://www.cpandl.com&quot;)]\n   public string GroupName;\n   \n   [SoapAttribute(DataType = &quot;base64Binary&quot;)]\n   public Byte [] GroupNumber;\n\n   [SoapAttribute(DataType = &quot;date&quot;, AttributeName = &quot;CreationDate&quot;)]\n   public DateTime Today;\n   [SoapElement(DataType = &quot;nonNegativeInteger&quot;, ElementName = &quot;PosInt&quot;)]\n   public string PostitiveInt;\n   // This is ignored when serialized unless it&#39;s overridden.\n   [SoapIgnore] \n   public bool IgnoreThis;\n   \n   public GroupType Grouptype;\n\n   public Vehicle MyVehicle;\n\n   // The SoapInclude allows the method to return a Car.\n   [SoapInclude(typeof(Car))]\n   public Vehicle myCar(string licNumber)\n   {\n      Vehicle v;\n      if(licNumber == &quot;&quot;)\n         {\n            v = new Car();\n   \t    v.licenseNumber = &quot;!!!!!!&quot;;\n   \t }\n      else\n   \t {\n   \t   v = new Car();\n   \t   v.licenseNumber = licNumber;\n   \t }\n      return v;\n   }\n}\n  \n// SoapInclude allows Vehicle to accept Car type.\n[SoapInclude(typeof(Car))]\npublic abstract class Vehicle\n{\n   public string licenseNumber;\n   public DateTime makeDate;\n}\n\npublic class Car: Vehicle\n{\n}\n\npublic enum GroupType\n{\n   // These enums can be overridden.\n   [SoapEnum(&quot;Small&quot;)]\n   A,\n   [SoapEnum(&quot;Large&quot;)]\n   B\n}\n \npublic class Run\n{\n   public static void Main()\n   {\n      Run test = new Run();\n      test.SerializeOriginal(&quot;SoapOriginal.xml&quot;);\n      test.SerializeOverride(&quot;SoapOverrides.xml&quot;);\n      test.DeserializeOriginal(&quot;SoapOriginal.xml&quot;);\n      test.DeserializeOverride(&quot;SoapOverrides.xml&quot;);\n   \n   }\n   public void SerializeOriginal(string filename)\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlTypeMapping myMapping = \n      (new SoapReflectionImporter().ImportTypeMapping(\n      typeof(Group)));\n      XmlSerializer mySerializer =  \n      new XmlSerializer(myMapping);\n      Group myGroup=MakeGroup();\n      // Writing the file requires a TextWriter.\n      XmlTextWriter writer = \n      new XmlTextWriter(filename, Encoding.UTF8);\n      writer.Formatting = Formatting.Indented;\n      writer.WriteStartElement(&quot;wrapper&quot;);\n      // Serialize the class, and close the TextWriter.\n      mySerializer.Serialize(writer, myGroup);\n      writer.WriteEndElement();\n      writer.Close();\n   }\n\n   public void SerializeOverride(string filename)\n   {\n      // Create an instance of the XmlSerializer class\n      // that overrides the serialization.\n      XmlSerializer overRideSerializer = CreateOverrideSerializer();\n      Group myGroup=MakeGroup();\n      // Writing the file requires a TextWriter.\n      XmlTextWriter writer = \n      new XmlTextWriter(filename, Encoding.UTF8);\n      writer.Formatting = Formatting.Indented;\n      writer.WriteStartElement(&quot;wrapper&quot;);\n      // Serialize the class, and close the TextWriter.\n      overRideSerializer.Serialize(writer, myGroup);\n      writer.WriteEndElement();\n      writer.Close();\n\n   }\n\n   private Group MakeGroup(){\n      // Create an instance of the class that will be serialized.\n      Group myGroup = new Group();\n\n      // Set the object properties.\n      myGroup.GroupName = &quot;.NET&quot;;\n\n      Byte [] hexByte = new Byte[2]{Convert.ToByte(100),\n      Convert.ToByte(50)};\n      myGroup.GroupNumber = hexByte;\n\n      DateTime myDate = new DateTime(2002,5,2);\n      myGroup.Today = myDate;\n      myGroup.PostitiveInt= &quot;10000&quot;;\n      myGroup.IgnoreThis=true;\n      myGroup.Grouptype= GroupType.B;\n      Car thisCar =(Car)  myGroup.myCar(&quot;1234566&quot;);\n      myGroup.MyVehicle=thisCar;\n      return myGroup;\n   }   \t\n\n   public void DeserializeOriginal(string filename)\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlTypeMapping myMapping = \n      (new SoapReflectionImporter().ImportTypeMapping(\n      typeof(Group)));\n      XmlSerializer mySerializer =  \n      new XmlSerializer(myMapping);\n\n\n      // Reading the file requires an  XmlTextReader.\n      XmlTextReader reader= \n      new XmlTextReader(filename);\n      reader.ReadStartElement(&quot;wrapper&quot;);\n\n      // Deserialize and cast the object.\n      Group myGroup; \n      myGroup = (Group) mySerializer.Deserialize(reader);\n      reader.ReadEndElement();\n      reader.Close();\n\n   }\n\n   public void DeserializeOverride(string filename)\n   {\n      // Create an instance of the XmlSerializer class.\n      XmlSerializer overRideSerializer = CreateOverrideSerializer();\n\n      // Reading the file requires an  XmlTextReader.\n      XmlTextReader reader= \n      new XmlTextReader(filename);\n      reader.ReadStartElement(&quot;wrapper&quot;);\n\n      // Deserialize and cast the object.\n      Group myGroup; \n      myGroup = (Group) overRideSerializer.Deserialize(reader);\n      reader.ReadEndElement();\n      reader.Close();\n      ReadGroup(myGroup);\n   }\n\n   private void ReadGroup(Group myGroup){\n      Console.WriteLine(myGroup.GroupName);\n      Console.WriteLine(myGroup.GroupNumber[0]);\n      Console.WriteLine(myGroup.GroupNumber[1]);\n      Console.WriteLine(myGroup.Today);\n      Console.WriteLine(myGroup.PostitiveInt);\n      Console.WriteLine(myGroup.IgnoreThis);\n      Console.WriteLine();\n   }\n   private XmlSerializer CreateOverrideSerializer()\n   {\n      SoapAttributeOverrides mySoapAttributeOverrides = \n      new SoapAttributeOverrides();\n      SoapAttributes soapAtts = new SoapAttributes();\n\n      SoapElementAttribute mySoapElement = new SoapElementAttribute();\n      mySoapElement.ElementName = &quot;xxxx&quot;;\n      soapAtts.SoapElement = mySoapElement;\n      mySoapAttributeOverrides.Add(typeof(Group), &quot;PostitiveInt&quot;, \n      soapAtts);\n\n      // Override the IgnoreThis property.\n      SoapIgnoreAttribute myIgnore = new SoapIgnoreAttribute();\n      soapAtts = new SoapAttributes();\n      soapAtts.SoapIgnore = false;      \n      mySoapAttributeOverrides.Add(typeof(Group), &quot;IgnoreThis&quot;, \n      soapAtts);\n\n      // Override the GroupType enumeration.\t\n      soapAtts = new SoapAttributes();\n      SoapEnumAttribute xSoapEnum = new SoapEnumAttribute();\n      xSoapEnum.Name = &quot;Over1000&quot;;\n      soapAtts.SoapEnum = xSoapEnum;\n\n      // Add the SoapAttributes to the \n      // mySoapAttributeOverridesrides object.\n      mySoapAttributeOverrides.Add(typeof(GroupType), &quot;A&quot;, \n      soapAtts);\n\n      // Create second enumeration and add it.\n      soapAtts = new SoapAttributes();\n      xSoapEnum = new SoapEnumAttribute();\n      xSoapEnum.Name = &quot;ZeroTo1000&quot;;\n      soapAtts.SoapEnum = xSoapEnum;\n      mySoapAttributeOverrides.Add(typeof(GroupType), &quot;B&quot;, \n      soapAtts);\n\n      // Override the Group type.\n      soapAtts = new SoapAttributes();\n      SoapTypeAttribute soapType = new SoapTypeAttribute();\n      soapType.TypeName = &quot;Team&quot;;\n      soapAtts.SoapType = soapType;\n      mySoapAttributeOverrides.Add(typeof(Group),soapAtts);\n\n      // Create an XmlTypeMapping that is used to create an instance \n      // of the XmlSerializer. Then return the XmlSerializer object.\n      XmlTypeMapping myMapping = (new SoapReflectionImporter(\n      mySoapAttributeOverrides)).ImportTypeMapping(typeof(Group));\n\t\n      XmlSerializer ser = new XmlSerializer(myMapping);\n      return ser;\n   }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The SoapIgnoreAttribute class belongs to a family of attributes that controls how the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> serializes or deserializes an object as encoded SOAP XML. The resulting XML conforms to section 5 of the World Wide Web Consortium (www.w3.org) document, &quot;Simple Object Access Protocol (SOAP) 1.1&quot;. For a complete list of similar attributes, see <a href=\"../topic/attributes%20that%20control%20encoded%20soap%20serialization\" data-linktype=\"relative-path\">Attributes That Control Encoded SOAP Serialization</a>.  </p>\n<p> To serialize an object as an encoded SOAP message, you must construct the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> using an <a class=\"xref\" href=\"system.xml.serialization.xmltypemapping\" data-linktype=\"relative-path\">XmlTypeMapping</a> created with the <a class=\"xref\" href=\"system.xml.serialization.soapreflectionimporter#System_Xml_Serialization_SoapReflectionImporter_ImportTypeMapping_\" data-linktype=\"relative-path\">ImportTypeMapping</a> method of the <a class=\"xref\" href=\"system.xml.serialization.soapreflectionimporter\" data-linktype=\"relative-path\">SoapReflectionImporter</a> class.  </p>\n<p> Apply the SoapIgnoreAttribute to any class member that you want the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> to ignore when an instance of the class is serialized. For example, you may do this when the member is used to contain metadata about the object being serialized.  </p>\n<p> For more information about using attributes, see <a href=\"../topic/extending%20metadata%20using%20attributes\" data-linktype=\"relative-path\">Attributes</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You can use the word <code>SoapIgnore</code> in your code instead of the longer SoapIgnoreAttribute.</p>\n</div>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Xml_Serialization_SoapIgnoreAttribute__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SoapIgnoreAttribute()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.xml.serialization.soapignoreattribute\" data-linktype=\"relative-path\">SoapIgnoreAttribute</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public SoapIgnoreAttribute ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Xml.Serialization.SoapIgnoreAttribute.yml\">\r\n<meta name=\"APIName\" content=\"System.Xml.Serialization.SoapIgnoreAttribute\">\r\n<meta name=\"APIName\" content=\"System.Xml.Serialization.SoapIgnoreAttribute..ctor\">\r\n<meta name=\"APILocation\" content=\"System.Xml.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"80df08b5-2f06-2218-9612-25dd3a3cb3dc\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Instructs the  not to serialize the public field or public read/write property value.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.xml.serialization/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Xml.Serialization.SoapIgnoreAttribute\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Xml.Serialization.SoapIgnoreAttribute.yml","open_to_public_contributors":false,"api_name":["System.Xml.Serialization.SoapIgnoreAttribute","System.Xml.Serialization.SoapIgnoreAttribute..ctor"],"api_location":["System.Xml.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Xml.Serialization.SoapIgnoreAttribute","System::Xml::Serialization::SoapIgnoreAttribute","System.Xml.Serialization.SoapIgnoreAttribute.#ctor","System::Xml::Serialization::SoapIgnoreAttribute::#ctor"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"80df08b5-2f06-2218-9612-25dd3a3cb3dc","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Xml.Serialization/SoapIgnoreAttribute.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SoapIgnoreAttribute class | Microsoft Docs","_op_ogTitle":"SoapIgnoreAttribute class","description":"Instructs the  not to serialize the public field or public read/write property value.\n","toc_asset_id":"api/_splitted/System.Xml.Serialization/toc.json","toc_rel":"_splitted/System.Xml.Serialization/toc.json","source_url":"","ms.assetid":"System.Xml.Serialization.SoapIgnoreAttribute","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.xml.serialization.soapignoreattribute","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.xml.serialization.soapignoreattribute","fileRelativePath":"api/System.Xml.Serialization.SoapIgnoreAttribute.html"},"themesRelativePathToOutputRoot":"_themes/"}