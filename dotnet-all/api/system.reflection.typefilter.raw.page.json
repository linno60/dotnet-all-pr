{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">TypeFilter</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Filters the classes represented in an array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic delegate bool TypeFilter(Type m, object filterCriteria);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">TypeFilter</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>This example shows how to define a method matching the TypeFilter delegate prototype allowing you to use reflection to filter or return a subset of matching entries.  </p>\n<pre><code class=\"lang-vb\" name=\"Typefilter#1\">Imports System.Reflection\n\n&#39; This interface is defined in this assembly.\nPublic Interface IBookRetailer\n    Sub Purchase()\n    Sub ApplyDiscount()\nEnd Interface\n\n&#39; This interface is also defined in this assembly.\nPublic Interface IMusicRetailer\n    Sub Purchase()\nEnd Interface\n\n&#39; This class implements three interfaces;\n&#39;    Two are defined in this assembly.\n&#39;    One is defined in another assembly.\nPublic Class MyRetailer\n    Implements IBookRetailer, IMusicRetailer, IComparable\n\n    &#39; For demonstration purposes, this method returns nothing.\n    Public Function CompareTo(ByVal obj As Object) As Integer Implements System.IComparable.CompareTo\n        Return Nothing\n    End Function\n\n    &#39; For demonstration purposes only, this method does nothing.\n    Public Sub ApplyDiscount() Implements IBookRetailer.ApplyDiscount\n    End Sub\n\n    &#39; For demonstration purposes only, this method does nothing.\n    Public Sub Purchase() Implements IBookRetailer.Purchase\n    End Sub\n\n    &#39; For demonstration purposes only, this method does nothing.\n    Public Sub Purchase1() Implements IMusicRetailer.Purchase\n    End Sub\nEnd Class\n\nModule Module1\n    Sub Main()\n        &#39; Find the interfaces defined by the MyRetailer class. Each interface found is passed to\n        &#39; the TypeFilter method which checks if the interface is defined in the executing assembly.\n        Dim retailerType As Type = GetType(MyRetailer)\n        Dim interfaces() As Type = _\n            retailerType.FindInterfaces(AddressOf TypeFilter, retailerType.Assembly.GetName().ToString())\n\n        &#39; Show the interfaces that are defined in this assembly that are also implemented by MyRetailer.\n        Console.WriteLine(&quot;MyRetailer implements the following interfaces (defined in this assembly):&quot;)\n        For Each t In interfaces\n            Console.WriteLine(&quot;   {0}&quot;, t.Name)\n        Next\n    End Sub\n\n    &#39; This method is called by the FindInterfaces method. \n    &#39; This method is called once per defined interface.\n    Function TypeFilter(ByVal t As Type, ByVal filterCriteria As Object) As Boolean\n        &#39; Return true if interface is defined in the same \n        &#39; assembly identified by the filterCriteria object.\n        Return t.Assembly.GetName().ToString() = CType(filterCriteria, String)\n    End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;    MyRetailer implements the following interfaces (defined in this assembly):\n&#39;      IBookRetailer\n&#39;      IMusicRetailer\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The <code>TypeFilter</code> delegate is used to filter a list of classes. Specifically, you use it to filter the classes represented in an array of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects. The <a class=\"xref\" href=\"system.type#System_Type_FindInterfaces_\" data-linktype=\"relative-path\">FindInterfaces</a> method uses this delegate to filter the list of interfaces that it returns. Every derived class of <a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a> and <a class=\"xref\" href=\"system.multicastdelegate\" data-linktype=\"relative-path\">MulticastDelegate</a> has a constructor and a <code>DynamicInvoke</code> method. See the Visual C++ code example given in the description for <code>Delegate</code>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Reflection.TypeFilter.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeFilter\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeFilter..ctor\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeFilter.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeFilter.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeFilter.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 05:47 AM\">\r\n<meta name=\"document_id\" content=\"9b4e543a-20af-9542-fa0b-643618e0b738\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Filters the classes represented in an array of  objects.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.reflection/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.TypeFilter\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Reflection.TypeFilter.yml","open_to_public_contributors":false,"api_name":["System.Reflection.TypeFilter","System.Reflection.TypeFilter..ctor","System.Reflection.TypeFilter.Invoke","System.Reflection.TypeFilter.BeginInvoke","System.Reflection.TypeFilter.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.TypeFilter","System::Reflection::TypeFilter"],"dev_langs":["csharp"],"updated_at":"2017-03-31 05:47 AM","document_id":"9b4e543a-20af-9542-fa0b-643618e0b738","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Reflection/TypeFilter.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"TypeFilter delegate | Microsoft Docs","_op_ogTitle":"TypeFilter delegate","description":"Filters the classes represented in an array of  objects.\n","toc_asset_id":"api/_splitted/System.Reflection/toc.json","toc_rel":"_splitted/System.Reflection/toc.json","source_url":"","ms.assetid":"System.Reflection.TypeFilter","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.typefilter","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.typefilter","fileRelativePath":"api/System.Reflection.TypeFilter.html"},"themesRelativePathToOutputRoot":"_themes/"}