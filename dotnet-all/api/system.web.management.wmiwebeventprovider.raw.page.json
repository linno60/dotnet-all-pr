{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">WmiWebEventProvider</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Implements an event provider that maps ASP.NET health-monitoring events to Windows Management Instrumentation (WMI) events.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class WmiWebEventProvider : System.Web.Management.WebEventProvider</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.provider.providerbase\" data-linktype=\"relative-path\">ProviderBase</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.management.webeventprovider\" data-linktype=\"relative-path\">WebEventProvider</a></span></div><span class=\"lang-csharp\">WmiWebEventProvider</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.provider.providerbase#System_Configuration_Provider_ProviderBase_Description\" data-linktype=\"relative-path\">Description</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.provider.providerbase#System_Configuration_Provider_ProviderBase_Name\" data-linktype=\"relative-path\">Name</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example shows how to create a consumer of WMI events issued by ASP.NET health monitoring as a result of Web-application health events.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The WmiWebEventProvider class and the health event types to monitor are already configured by default. The only thing you need to do is to define the rule for all the health events. Remember that the health events are not dispatched to the WmiWebEventProvider provider by default.  </p>\n</div>\n<pre><code class=\"lang-vb\" name=\"System.Web.Management.WmiWebEventProvider#1\">Imports System\nImports System.Management\n\n\n\n&#39; Capture WMI events associated with \n&#39; ASP.NET health monitoring types. \n\nClass SampleWmiWebEventListener\n    \n    &#39;Displays event related information.\n    Shared Sub DisplayEventInformation(ByVal ev _\nAs ManagementBaseObject)\n\n        &#39; It contains the name of the WMI raised \n        &#39; event. This is the name of the \n        &#39; event class as defined in the \n        &#39; Aspnet.mof file.\n        Dim eventTypeName As String\n\n        &#39; Get the name of the WMI raised event.\n        eventTypeName = ev.ClassPath.ToString()\n\n        &#39; Process the raised event.\n        Select Case eventTypeName\n            &#39; Process the heartbeat event.  \n            Case &quot;HeartBeatEvent&quot;\n                Console.WriteLine(&quot;HeartBeat&quot;)\n                Console.WriteLine(vbTab + _\n                &quot;Process: {0}&quot;, ev(&quot;ProcessName&quot;))\n                Console.WriteLine(vbTab + &quot;App: {0}&quot;, _\n                ev(&quot;ApplicationUrl&quot;))\n                Console.WriteLine(vbTab + &quot;WorkingSet: {0}&quot;, _\n                ev(&quot;WorkingSet&quot;))\n                Console.WriteLine(vbTab + &quot;Threads: {0}&quot;, _\n                ev(&quot;ThreadCount&quot;))\n                Console.WriteLine(vbTab + &quot;ManagedHeap: {0}&quot;, _\n                ev(&quot;ManagedHeapSize&quot;))\n                Console.WriteLine(vbTab + &quot;AppDomainCount: {0}&quot;, _\n                ev(&quot;AppDomainCount&quot;))\n\n                &#39; Process the request error event. \n            Case &quot;RequestErrorEvent&quot;\n                Console.WriteLine(&quot;Error&quot;)\n                Console.WriteLine(&quot;Url: {0}&quot;, _\n                ev(&quot;RequestUrl&quot;))\n                Console.WriteLine(&quot;Path: {0}&quot;, _\n                ev(&quot;RequestPath&quot;))\n                Console.WriteLine(&quot;Message: {0}&quot;, _\n                ev(&quot;EventMessage&quot;))\n                Console.WriteLine(&quot;Stack: {0}&quot;, _\n                ev(&quot;StackTrace&quot;))\n                Console.WriteLine(&quot;UserName: {0}&quot;, _\n                ev(&quot;UserName&quot;))\n                Console.WriteLine(&quot;ThreadID: {0}&quot;, _\n                ev(&quot;ThreadAccountName&quot;))\n\n                &#39; Process the application lifetime event. \n            Case &quot;ApplicationLifetimeEvent&quot;\n                Console.WriteLine(&quot;App Lifetime Event {0}&quot;, _\n                ev(&quot;EventMessage&quot;))\n\n\n                &#39; Handle events for which processing is not\n                &#39; provided.\n            Case Else\n                Console.WriteLine(&quot;ASP.NET Event {0}&quot;, _\n                ev(&quot;EventMessage&quot;))\n        End Select\n\n    End Sub &#39;DisplayEventInformation\n\n    &#39; End DisplayEventInformation.\n    &#39; The main entry point for the application.\n    Shared Sub Main(ByVal args() As String)\n        &#39; Get the name of the computer on \n        &#39; which this program runs.\n        &#39; Note. The monitored application must also run \n        &#39; on this computer.\n        Dim machine As String = Environment.MachineName\n\n        &#39; Define the Common Information Model (CIM) path \n        &#39; for WIM monitoring. \n        Dim path As String = _\n        String.Format(&quot;\\\\{0}\\root\\aspnet&quot;, machine)\n\n        &#39; Create a managed object watcher as \n        &#39; defined in System.Management.\n        Dim query As String = &quot;select * from BaseEvent&quot;\n        Dim watcher As New ManagementEventWatcher(query)\n\n        &#39; Set the watcher options.\n        Dim timeInterval As New TimeSpan(0, 1, 30)\n        watcher.Options = _\n        New EventWatcherOptions(Nothing, timeInterval, 1)\n\n        &#39; Set the scope of the WMI events to \n        &#39; watch to be ASP.NET applications.\n        watcher.Scope = _\n        New ManagementScope(New ManagementPath(path))\n\n        &#39; Set the console background.\n        Console.BackgroundColor = ConsoleColor.Blue\n        &#39; Set foreground color.\n        Console.ForegroundColor = ConsoleColor.Yellow\n        &#39; Clear the console.\n        Console.Clear()\n\n        &#39; Loop indefinitely to catch the events.\n        Console.WriteLine( _\n        &quot;Listener started. Enter CntlC to terminate&quot;)\n\n\n        While True\n            Try\n                &#39; Capture the WMI event related to \n                &#39; the Web event.\n                Dim ev As ManagementBaseObject = _\n                watcher.WaitForNextEvent()\n                &#39; Display the Web event information.\n                DisplayEventInformation(ev)\n\n                &#39; Prompt the user.\n                Console.Beep()\n\n            Catch e As Exception\n                Console.WriteLine(&quot;Error: {0}&quot;, e)\n                Exit While\n            End Try\n        End While\n\n    End Sub &#39;Main \nEnd Class &#39;SampleWmiWebEventListener \n\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Web.Management.WmiWebEventProvider#1\">\nusing System;\nusing System.Management;\n\n\nnamespace SamplesAspNet\n{\n    // Capture WMI events associated with \n    // ASP.NET health monitoring types. \n    class SampleWmiWebEventListener\n    {\n        //Displays event related information.\n        static void DisplayEventInformation(\n            ManagementBaseObject ev)\n        {\n\n            // It contains the name of the WMI raised \n            // event. This is the name of the \n            // event class as defined in the \n            // Aspnet.mof file.\n            string eventTypeName;\n\n            // Get the name of the WMI raised event.\n            eventTypeName = ev.ClassPath.ToString();\n\n            // Process the raised event.\n            switch (eventTypeName)\n            {\n                // Process the heartbeat event.  \n                case &quot;HeartBeatEvent&quot;:\n                    Console.WriteLine(&quot;HeartBeat&quot;);\n                    Console.WriteLine(&quot;\\tProcess: {0}&quot;, \n                        ev[&quot;ProcessName&quot;]);\n                    Console.WriteLine(&quot;\\tApp: {0}&quot;, \n                        ev[&quot;ApplicationUrl&quot;]);\n                    Console.WriteLine(&quot;\\tWorkingSet: {0}&quot;, \n                        ev[&quot;WorkingSet&quot;]);\n                    Console.WriteLine(&quot;\\tThreads: {0}&quot;, \n                        ev[&quot;ThreadCount&quot;]);\n                    Console.WriteLine(&quot;\\tManagedHeap: {0}&quot;,\n                        ev[&quot;ManagedHeapSize&quot;]);\n                    Console.WriteLine(&quot;\\tAppDomainCount: {0}&quot;,\n                        ev[&quot;AppDomainCount&quot;]);\n                    break;\n\n                // Process the request error event. \n                case &quot;RequestErrorEvent&quot;:\n                    Console.WriteLine(&quot;Error&quot;);\n                    Console.WriteLine(&quot;Url: {0}&quot;, \n                        ev[&quot;RequestUrl&quot;]);\n                    Console.WriteLine(&quot;Path: {0}&quot;, \n                        ev[&quot;RequestPath&quot;]);\n                    Console.WriteLine(&quot;Message: {0}&quot;, \n                        ev[&quot;EventMessage&quot;]);\n                    Console.WriteLine(&quot;Stack: {0}&quot;, \n                        ev[&quot;StackTrace&quot;]);\n                    Console.WriteLine(&quot;UserName: {0}&quot;, \n                        ev[&quot;UserName&quot;]);\n                    Console.WriteLine(&quot;ThreadID: {0}&quot;, \n                        ev[&quot;ThreadAccountName&quot;]);\n                    break;\n\n                // Process the application lifetime event. \n                case &quot;ApplicationLifetimeEvent&quot;:\n                    Console.WriteLine(&quot;App Lifetime Event {0}&quot;, \n                        ev[&quot;EventMessage&quot;]);\n                   \n                    break;\n\n                // Handle events for which processing is not\n                // provided.\n                default:\n                    Console.WriteLine(&quot;ASP.NET Event {0}&quot;,\n                        ev[&quot;EventMessage&quot;]);\n                    break;\n            }\n        } // End DisplayEventInformation.\n\n        // The main entry point for the application.\n        static void Main(string[] args)\n        {\n            // Get the name of the computer on \n            // which this program runs.\n            // Note. The monitored application must also run \n            // on this computer.\n            string machine = Environment.MachineName;\n\n            // Define the Common Information Model (CIM) path \n            // for WIM monitoring. \n            string path = String.Format(&quot;\\\\\\\\{0}\\\\root\\\\aspnet&quot;, \n                machine);\n\n            // Create a managed object watcher as \n            // defined in System.Management.\n            string query = &quot;select * from BaseEvent&quot;;\n            ManagementEventWatcher watcher =\n                new ManagementEventWatcher(query);\n\n            // Set the watcher options.\n            TimeSpan timeInterval = new TimeSpan(0, 1, 30);\n            watcher.Options = \n                new EventWatcherOptions(null,\n                timeInterval, 1);\n\n            // Set the scope of the WMI events to \n            // watch to be ASP.NET applications.\n            watcher.Scope = \n                new ManagementScope(new ManagementPath(path));\n\n            // Set the console background.\n            Console.BackgroundColor = ConsoleColor.Blue;\n            // Set foreground color.\n            Console.ForegroundColor = ConsoleColor.Yellow;\n            // Clear the console.\n            Console.Clear();\n\n            // Loop indefinitely to catch the events.\n            Console.WriteLine(\n                &quot;Listener started. Enter CntlC to terminate&quot;);\n\n\n            while (true)\n            {\n                try\n                {\n                    // Capture the WMI event related to \n                    // the Web event.\n                    ManagementBaseObject ev = \n                        watcher.WaitForNextEvent();\n                    // Display the Web event information.\n                    DisplayEventInformation(ev);\n\n                    // Prompt the user.\n                    Console.Beep();\n\n                }\n                catch (Exception e)\n                {\n                    Console.WriteLine(&quot;Error: {0}&quot;, e);\n                    break;\n                }\n            }\n\n\n        }\n\n    }\n} \n</code></pre><p> The following example is a configuration file excerpt that shows a <code>&lt;healthMonitoring&gt;</code> configuration section that enables ASP.NET to use the WmiWebEventProvider provider to process all health-monitoring events.  </p>\n<pre><code>&lt;healthMonitoring&gt;  \n  &lt;rules&gt;  \n    &lt;add   \n      name=&quot;Using Wmi&quot;  \n      eventName=&quot;All Events&quot;   \n      provider=&quot;WmiWebEventProvider&quot;   \n      profile=&quot;Critical&quot;/&gt;  \n  &lt;/rules&gt;  \n&lt;/healthMonitoring&gt;  \n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The <a class=\"xref\" href=\"system.web.management\" data-linktype=\"relative-path\">System.Web.Management</a> namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events.  </p>\n<p> ASP.NET uses this class to map health-monitoring events to WMI events. To enable the delivery of ASP.NET health-monitoring events to the WMI subsystem, you must configure the WmiWebEventProvider class by adding the appropriate settings in the <code>&lt;healthMonitoring&gt;</code> section of the configuration file.  </p>\n<p> The information contained in the Aspnet.mof file describes the parameters of the WMI events raised when ASP.NET health-monitoring events are routed to the WmiWebEventProvider class and mapped into WMI events. The Aspnet.mof file is stored in the .NET Framework build directory, for example %windir%\\Microsoft.NET\\Framework\\<em>BuildNumber</em>. For more information about reporting health-monitoring events as WMI events, see <a href=\"http://msdn.microsoft.com/en-us/e57fea2f-610f-4432-9dd6-dd10a6c5bd10\" data-linktype=\"external\">NIB: Using WMI to Deliver ASP.NET Health Monitoring Events</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the <code>&lt;healthMonitoring&gt;</code> configuration section. You can also derive from the health-monitoring types to create your own custom events and providers. For an example of creating a custom provider, see <a href=\"../Topic/How%20to:%20Implement%20the%20Health%20Monitoring%20Custom%20Provider%20Example.md\" data-linktype=\"relative-path\">How to: Implement the Health Monitoring Custom Provider Example</a>.</p>\n</div>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Web_Management_WmiWebEventProvider__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_Management_WmiWebEventProvider__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">WmiWebEventProvider()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.web.management.wmiwebeventprovider\" data-linktype=\"relative-path\">WmiWebEventProvider</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public WmiWebEventProvider ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor is used internally by the ASP.NET health-monitoring system. You will never use it to create an instance of the <a class=\"xref\" href=\"system.web.management.tracewebeventprovider\" data-linktype=\"relative-path\">TraceWebEventProvider</a> class, but you can call this constructor when you implement your own provider type that inherits from this class.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Web_Management_WmiWebEventProvider_Flush_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_Management_WmiWebEventProvider_Flush\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Flush()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Removes all events from the provider&#39;s buffer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override void Flush ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When this method is called, all the events in the provider&#39;s buffer are immediately removed, regardless of how much time has elapsed since the last write or how many events are in the buffer. The time of the last write is reset to the time of the flushing action. Calling this method when the buffering mechanism is not enabled has no effect.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Web_Management_WmiWebEventProvider_Initialize_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_Management_WmiWebEventProvider_Initialize_System_String_System_Collections_Specialized_NameValueCollection_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Initialize(String, NameValueCollection)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Sets the initial values for this object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override void Initialize (string name, System.Collections.Specialized.NameValueCollection config);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>name</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name used in the configuration file to identify this provider.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>config</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.specialized.namevaluecollection\" data-linktype=\"relative-path\">NameValueCollection</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.collections.specialized.namevaluecollection\" data-linktype=\"relative-path\">NameValueCollection</a> object that specifies the attributes assigned for this provider in the configuration file.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>ASP.NET calls the Initialize method after calling the <a class=\"xref\" href=\"system.web.management.wmiwebeventprovider#System_Web_Management_WmiWebEventProvider__ctor_\" data-linktype=\"relative-path\">WmiWebEventProvider</a> constructor. This method is called to initialize the <a class=\"xref\" href=\"system.web.management.wmiwebeventprovider\" data-linktype=\"relative-path\">WmiWebEventProvider</a> class with the configuration settings and name specified in the configuration file.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Web_Management_WmiWebEventProvider_ProcessEvent_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_Management_WmiWebEventProvider_ProcessEvent_System_Web_Management_WebBaseEvent_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ProcessEvent(WebBaseEvent)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Processes the event passed to the provider.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override void ProcessEvent (System.Web.Management.WebBaseEvent eventRaised);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>eventRaised</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.management.webbaseevent\" data-linktype=\"relative-path\">WebBaseEvent</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.web.management.webbaseevent\" data-linktype=\"relative-path\">WebBaseEvent</a> object to process.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.httpexception\" data-linktype=\"relative-path\">HttpException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The event could not be raised.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This is the method that ASP.NET health monitoring calls to start the processing of the event.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Web_Management_WmiWebEventProvider_Shutdown_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_Management_WmiWebEventProvider_Shutdown\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Shutdown()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Performs tasks associated with shutting down the provider.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override void Shutdown ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>ASP.NET calls the <a class=\"xref\" href=\"system.web.management.eventlogwebeventprovider#System_Web_Management_EventLogWebEventProvider_Shutdown_\" data-linktype=\"relative-path\">Shutdown</a> method when the application domain that hosts the Web application terminates. The method is called to perform tasks that will allow the application to end gracefully.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.Management.WmiWebEventProvider.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.Management.WmiWebEventProvider\">\r\n<meta name=\"APIName\" content=\"System.Web.Management.WmiWebEventProvider..ctor\">\r\n<meta name=\"APIName\" content=\"System.Web.Management.WmiWebEventProvider.Flush\">\r\n<meta name=\"APIName\" content=\"System.Web.Management.WmiWebEventProvider.Initialize\">\r\n<meta name=\"APIName\" content=\"System.Web.Management.WmiWebEventProvider.ProcessEvent\">\r\n<meta name=\"APIName\" content=\"System.Web.Management.WmiWebEventProvider.Shutdown\">\r\n<meta name=\"APILocation\" content=\"System.Web.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"ea5ecab4-ecd5-f9dc-56af-d8984f4c8b21\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Implements an event provider that maps ASP.NET health-monitoring events to Windows Management Instrumentation (WMI) events.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.web.management/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.Management.WmiWebEventProvider\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.Management.WmiWebEventProvider.yml","open_to_public_contributors":false,"api_name":["System.Web.Management.WmiWebEventProvider","System.Web.Management.WmiWebEventProvider..ctor","System.Web.Management.WmiWebEventProvider.Flush","System.Web.Management.WmiWebEventProvider.Initialize","System.Web.Management.WmiWebEventProvider.ProcessEvent","System.Web.Management.WmiWebEventProvider.Shutdown"],"api_location":["System.Web.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.Management.WmiWebEventProvider","System::Web::Management::WmiWebEventProvider","System.Web.Management.WmiWebEventProvider.#ctor","System::Web::Management::WmiWebEventProvider::#ctor","System.Web.Management.WmiWebEventProvider.Flush","System::Web::Management::WmiWebEventProvider::Flush","System.Web.Management.WmiWebEventProvider.Initialize","System::Web::Management::WmiWebEventProvider::Initialize","System.Web.Management.WmiWebEventProvider.ProcessEvent","System::Web::Management::WmiWebEventProvider::ProcessEvent","System.Web.Management.WmiWebEventProvider.Shutdown","System::Web::Management::WmiWebEventProvider::Shutdown"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"ea5ecab4-ecd5-f9dc-56af-d8984f4c8b21","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Web.Management/WmiWebEventProvider.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"WmiWebEventProvider class | Microsoft Docs","_op_ogTitle":"WmiWebEventProvider class","description":"Implements an event provider that maps ASP.NET health-monitoring events to Windows Management Instrumentation (WMI) events.\n","toc_asset_id":"api/_splitted/System.Web.Management/toc.json","toc_rel":"_splitted/System.Web.Management/toc.json","source_url":"","ms.assetid":"System.Web.Management.WmiWebEventProvider","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.web.management.wmiwebeventprovider","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.web.management.wmiwebeventprovider","fileRelativePath":"api/System.Web.Management.WmiWebEventProvider.html"},"themesRelativePathToOutputRoot":"_themes/"}