{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">IMethodCallMessage</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Defines the method call message interface.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic interface IMethodCallMessage : System.Runtime.Remoting.Messaging.IMethodMessage</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<pre><code class=\"lang-cs\" name=\"IMethodCallMessage_GetInArg#1\">using System;\nusing System.Collections;\nusing System.Runtime.Remoting;\nusing System.Runtime.Remoting.Proxies;\nusing System.Runtime.Remoting.Messaging;\nusing System.Security.Permissions;\n\nnamespace IMethodCallMessageNS\n{\n   // MyProxy extends the CLR Remoting RealProxy.\n   // In the same class, in the Invoke method, the methods and properties of the \n   // IMethodCallMessage are demonstrated.\n\n   [PermissionSet(SecurityAction.Demand, Name=&quot;FullTrust&quot;)]\n   public class MyProxy : RealProxy\n   {\n      public MyProxy(Type myType) : base(myType)\n      {\n         // This constructor forwards the call to base RealProxy.\n         // RealProxy uses the Type to generate a transparent proxy.\n      }\n\n\n      public override IMessage Invoke(IMessage myIMessage)\n      {\n         Console.WriteLine(&quot;MyProxy.Invoke Start&quot;);\n         Console.WriteLine(&quot;&quot;);\n         ReturnMessage myReturnMessage = null;\n         \n         if (myIMessage is IMethodCallMessage)\n         {\n            Console.WriteLine(&quot;Message is of type &#39;IMethodCallMessage&#39;.&quot;);\n            Console.WriteLine(&quot;&quot;);\n\n            IMethodCallMessage myIMethodCallMessage;\n            myIMethodCallMessage=(IMethodCallMessage)myIMessage;\n            Console.WriteLine(&quot;InArgCount is  : &quot; + \n                              myIMethodCallMessage.InArgCount.ToString());\n         \n            foreach (object myObj in myIMethodCallMessage.InArgs)\n            {\n               Console.WriteLine(&quot;InArgs is : &quot; + myObj.ToString());\n            }\n\n            for(int i=0; i&lt;myIMethodCallMessage.InArgCount; i++)\n            {\n               Console.WriteLine(&quot;GetArgName(&quot; +i.ToString() +&quot;) is : &quot; + \n                                       myIMethodCallMessage.GetArgName(i));\n               Console.WriteLine(&quot;GetInArg(&quot;+i.ToString() +&quot;) is : &quot; +\n                              myIMethodCallMessage.GetInArg(i).ToString());\n            }\n            Console.WriteLine(&quot;&quot;);\n         }\n         else if (myIMessage is IMethodReturnMessage)\n            Console.WriteLine(&quot;Message is of type &#39;IMethodReturnMessage&#39;.&quot;);\n                  \n         // Build Return Message\n         myReturnMessage = new ReturnMessage(5,null,0,null,\n                                       (IMethodCallMessage)myIMessage);\n      \n         Console.WriteLine(&quot;MyProxy.Invoke - Finish&quot;);\n         return myReturnMessage;\n      }\n\n\n   }\n  \n   \n   // The class used to obtain Metadata.\n   [PermissionSet(SecurityAction.Demand, Name=&quot;FullTrust&quot;)]\n   public class MyMarshalByRefClass : MarshalByRefObject\n   {\n      public int MyMethod(string str, double dbl, int i)\n      {\n         Console.WriteLine(&quot;MyMarshalByRefClass.MyMethod {0} {1} {2}&quot;, str, dbl, i);\n         return 0;\n      }\n   }\n   // Main class that drives the whole sample.\n   public class ProxySample\n   {\n      [SecurityPermission(SecurityAction.LinkDemand)]\n      public static void Main()\n      {\n         Console.WriteLine(&quot;Generate a new MyProxy.&quot;);\n         MyProxy myProxy = new MyProxy(typeof(MyMarshalByRefClass));\n\n         Console.WriteLine(&quot;Obtain the transparent proxy from myProxy.&quot;);\n         MyMarshalByRefClass myMarshalByRefClassObj = \n                              (MyMarshalByRefClass)myProxy.GetTransparentProxy();\n\n         Console.WriteLine(&quot;Calling the Proxy.&quot;);\n         object myReturnValue = myMarshalByRefClassObj.MyMethod(&quot;Microsoft&quot;, 1.2, 6);\n         \n         Console.WriteLine(&quot;Sample Done.&quot;);\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"IMethodCallMessage_GetInArg#1\">Imports System\nImports System.Collections\nImports System.Runtime.Remoting\nImports System.Runtime.Remoting.Proxies\nImports System.Runtime.Remoting.Messaging\nImports System.Security.Permissions\n\nNamespace IMethodCallMessageNS\n\n   &#39; MyProxy extends the CLR Remoting RealProxy.\n   &#39; In the same class, in the Invoke method, we demonstrate the\n   &#39; methods and properties of the IMethodCallMessage.\n\n   &lt;PermissionSet(SecurityAction.Demand, Name:=&quot;FullTrust&quot;)&gt; _\n   Public Class MyProxy\n      Inherits RealProxy\n\n      Public Sub New(ByVal myType As Type)\n         &#39; This constructor forwards the call to base RealProxy.\n         &#39; RealProxy uses the Type to generate a transparent proxy.\n         MyBase.New(myType)\n      End Sub &#39;New\n\n      Public Overrides Function Invoke(ByVal myIMessage As IMessage) As IMessage\n         Console.WriteLine(&quot;MyProxy.Invoke Start&quot;)\n         Console.WriteLine(&quot;&quot;)\n\n         If TypeOf myIMessage Is IMethodCallMessage Then\n            Console.WriteLine(&quot;Message is of type &#39;IMethodCallMessage&#39;.&quot;)\n            Console.WriteLine(&quot;&quot;)\n\n            Dim myIMethodCallMessage As IMethodCallMessage\n            myIMethodCallMessage = CType(myIMessage, IMethodCallMessage)\n\n            Console.WriteLine(&quot;InArgCount is : &quot; + myIMethodCallMessage.InArgCount.ToString)\n            Dim myObj As Object\n            For Each myObj In myIMethodCallMessage.InArgs\n               Console.WriteLine(&quot;InArgs is : &quot; + myObj.ToString())\n            Next\n\n            Dim i As Integer\n            For i = 0 To myIMethodCallMessage.InArgCount - 1\n               Console.WriteLine(&quot;GetArgName(&quot; + i.ToString() + &quot;) is : &quot; + myIMethodCallMessage.GetArgName(i))\n               Console.WriteLine(&quot;GetInArg(&quot; + i.ToString() + &quot;) is : &quot; + myIMethodCallMessage.GetInArg(i).ToString)\n            Next i\n\n            Console.WriteLine(&quot;&quot;)\n         ElseIf TypeOf myIMessage Is IMethodReturnMessage Then\n            Console.WriteLine(&quot;Message is of type &#39;IMethodReturnMessage&#39;.&quot;)\n         End If\n\n         &#39; Build Return Message\n         Dim myReturnMessage As New ReturnMessage(5, Nothing, 0, Nothing, _\n                                    CType(myIMessage, IMethodCallMessage))\n\n         Console.WriteLine(&quot;MyProxy.Invoke - Finish&quot;)\n         Return myReturnMessage\n\n      End Function &#39;Invoke\n\n\n\n   End Class &#39;MyProxy\n\n   &#39; The class used to obtain Metadata.\n   &lt;PermissionSet(SecurityAction.Demand, Name:=&quot;FullTrust&quot;)&gt; _\n   Public Class MyMarshalByRefClass\n      Inherits MarshalByRefObject\n\n      Public Function MyMethod(ByVal str As String, ByVal dbl As Double, ByVal i As Integer) As Integer\n         Console.WriteLine(&quot;MyMarshalByRefClass.MyMethod {0} {1} {2}&quot;, str, dbl, i)\n         Return 0\n      End Function &#39;MyMethod\n   End Class &#39;MyMarshalByRefClass\n\n   &#39; Main class that drives the whole sample.\n   Public Class ProxySample\n\n      &lt;SecurityPermission(SecurityAction.LinkDemand)&gt; _\n      Shared Sub Main()\n         Console.WriteLine(&quot;Generate a new MyProxy.&quot;)\n         Dim myProxy As New MyProxy(GetType(MyMarshalByRefClass))\n\n         Console.WriteLine(&quot;Obtain the transparent proxy from myProxy.&quot;)\n         Dim myMarshalByRefClassObj As MyMarshalByRefClass = _\n                        CType(myProxy.GetTransparentProxy(), MyMarshalByRefClass)\n\n         Console.WriteLine(&quot;Calling the Proxy.&quot;)\n         Dim myReturnValue As Object = myMarshalByRefClassObj.MyMethod(&quot;Microsoft&quot;, 1.2, 6)\n\n         Console.WriteLine(&quot;Sample Done.&quot;)\n      End Sub &#39;Main\n   End Class &#39;ProxySample\nEnd Namespace &#39;IMethodCallMessageNS\n</code></pre><pre><code class=\"lang-cpp\" name=\"IMethodCallMessage_GetInArg#1\">using namespace System;\nusing namespace System::Collections;\nusing namespace System::Runtime::Remoting;\nusing namespace System::Runtime::Remoting::Proxies;\nusing namespace System::Runtime::Remoting::Messaging;\n\n// MyProxy extends the CLR Remoting RealProxy.\n// In the same class, in the Invoke method, the methods and properties of the \n// IMethodCallMessage are demonstrated.\n\n[System::Security::Permissions::SecurityPermissionAttribute\n(System::Security::Permissions::SecurityAction::LinkDemand, \nFlags=System::Security::Permissions::SecurityPermissionFlag::Infrastructure)]\n[System::Security::Permissions::SecurityPermissionAttribute\n(System::Security::Permissions::SecurityAction::InheritanceDemand, \nFlags=System::Security::Permissions::SecurityPermissionFlag::Infrastructure)]\n\npublic ref class MyProxy: public RealProxy\n{\npublic:\n   MyProxy( Type^ myType )\n      : RealProxy( myType )\n   {\n      // This constructor forwards the call to base RealProxy.\n      // RealProxy uses the Type to generate a transparent proxy.\n   }\n\n   virtual IMessage^ Invoke( IMessage^ myIMessage ) override\n   {\n      Console::WriteLine( &quot;MyProxy::Invoke Start&quot; );\n      Console::WriteLine( &quot;&quot; );\n      ReturnMessage^ myReturnMessage = nullptr;\n      if ( dynamic_cast&lt;IMethodCallMessage^&gt;(myIMessage) )\n      {\n         Console::WriteLine( &quot;Message is of type &#39;IMethodCallMessage*&#39;.&quot; );\n         Console::WriteLine( &quot;&quot; );\n         IMethodCallMessage^ myIMethodCallMessage;\n         myIMethodCallMessage = dynamic_cast&lt;IMethodCallMessage^&gt;(myIMessage);\n         Console::WriteLine( &quot;InArgCount is  : {0}&quot;, myIMethodCallMessage-&gt;InArgCount );\n         IEnumerator^ myEnum = myIMethodCallMessage-&gt;InArgs-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            Object^ myObj = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n            Console::WriteLine( &quot;InArgs is : {0}&quot;, myObj );\n         }\n\n         for ( int i = 0; i &lt; myIMethodCallMessage-&gt;InArgCount; i++ )\n         {\n            Console::WriteLine( &quot;GetArgName({0}) is : {1}&quot;, i, myIMethodCallMessage-&gt;GetArgName( i ) );\n            Console::WriteLine( &quot;GetInArg({0}) is : {0}&quot;, i, myIMethodCallMessage-&gt;GetInArg( i ) );\n\n         }\n         Console::WriteLine( &quot;&quot; );\n      }\n      else\n      if ( dynamic_cast&lt;IMethodReturnMessage^&gt;(myIMessage) )\n            Console::WriteLine( &quot;Message is of type &#39;IMethodReturnMessage*&#39;.&quot; );\n\n      // Build Return Message \n      myReturnMessage = gcnew ReturnMessage( 5,nullptr,0,nullptr,dynamic_cast&lt;IMethodCallMessage^&gt;(myIMessage) );\n      Console::WriteLine( &quot;MyProxy::Invoke - Finish&quot; );\n      return myReturnMessage;\n   }\n};\n\n// The class used to obtain Metadata.\npublic ref class MyMarshalByRefClass: public MarshalByRefObject\n{\npublic:\n   int MyMethod( String^ str, double dbl, int i )\n   {\n      Console::WriteLine( &quot;MyMarshalByRefClass::MyMethod {0} {1} {2}&quot;, str, dbl, i );\n      return 0;\n   }\n\n};\n\n// Main routine that drives the whole sample.\nint main()\n{\n   Console::WriteLine( &quot;Generate a new MyProxy.&quot; );\n   MyProxy^ myProxy = gcnew MyProxy( MyMarshalByRefClass::typeid );\n   Console::WriteLine( &quot;Obtain the transparent proxy from myProxy.&quot; );\n   MyMarshalByRefClass^ myMarshalByRefClassObj = dynamic_cast&lt;MyMarshalByRefClass^&gt;(myProxy-&gt;GetTransparentProxy());\n   Console::WriteLine( &quot;Calling the Proxy.&quot; );\n   Object^ myReturnValue = myMarshalByRefClassObj-&gt;MyMethod( &quot;Microsoft&quot;, 1.2, 6 );\n   Console::WriteLine( &quot;Sample Done.&quot; );\n   return 0;\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>An IMethodCallMessage is generated as a result of a method called on a remote object, and is used to transport details about the remote method call to the server side.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Runtime_Remoting_Messaging_IMethodCallMessage_InArgCount_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_Remoting_Messaging_IMethodCallMessage_InArgCount\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">InArgCount</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the number of arguments in the call that are not marked as <code>out</code> parameters.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int InArgCount { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of arguments in the call that are not marked as <code>out</code> parameters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><span class=\"xref\">get: System.Security.SecurityCritical</span></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Runtime_Remoting_Messaging_IMethodCallMessage_InArgs_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_Remoting_Messaging_IMethodCallMessage_InArgs\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">InArgs</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets an array of arguments that are not marked as <code>out</code> parameters.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public object[] InArgs { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array of arguments that are not marked as <code>out</code> parameters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><span class=\"xref\">get: System.Security.SecurityCritical</span></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Although the InArgs property is redundant since the same functionality can be achieved with the <a class=\"xref\" href=\"system.runtime.remoting.messaging.imethodcallmessage#System_Runtime_Remoting_Messaging_IMethodCallMessage_InArgCount_\" data-linktype=\"relative-path\">InArgCount</a> and <a class=\"xref\" href=\"system.runtime.remoting.messaging.imethodcallmessage#System_Runtime_Remoting_Messaging_IMethodCallMessage_GetInArg_\" data-linktype=\"relative-path\">GetInArg</a> methods, there might be performance optimization available if the implementer understands when all the arguments will be retrieved.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Runtime_Remoting_Messaging_IMethodCallMessage_GetInArg_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_Remoting_Messaging_IMethodCallMessage_GetInArg_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetInArg(Int32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the specified argument that is not marked as an <code>out</code> parameter.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public object GetInArg (int argNum);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>argNum</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of the requested <code>in</code> argument.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The requested argument that is not marked as an <code>out</code> parameter.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.security.securitycriticalattribute\" title=\"System.Security.SecurityCriticalAttribute\" data-linktype=\"relative-path\">SecurityCriticalAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Runtime_Remoting_Messaging_IMethodCallMessage_GetInArgName_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_Remoting_Messaging_IMethodCallMessage_GetInArgName_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetInArgName(Int32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the name of the specified argument that is not marked as an <code>out</code> parameter.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string GetInArgName (int index);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>index</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of the requested <code>in</code> argument.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The name of a specific argument that is not marked as an <code>out</code> parameter.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.security.securitycriticalattribute\" title=\"System.Security.SecurityCriticalAttribute\" data-linktype=\"relative-path\">SecurityCriticalAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The immediate caller makes the call through a reference to the interface and does not have infrastructure permission.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Runtime.Remoting.Messaging.IMethodCallMessage.yml\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Messaging.IMethodCallMessage\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Messaging.IMethodCallMessage.GetInArg\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Messaging.IMethodCallMessage.GetInArgName\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Messaging.IMethodCallMessage.InArgCount\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.Messaging.IMethodCallMessage.InArgs\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:59 PM\">\r\n<meta name=\"document_id\" content=\"a8cd475e-9ff1-513a-f833-6d9a2885bf4d\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines the method call message interface.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.runtime.remoting.messaging/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Runtime.Remoting.Messaging.IMethodCallMessage\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","uhfHeaderId":"MSDocsHeader-DotNet","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Runtime.Remoting.Messaging.IMethodCallMessage.yml","open_to_public_contributors":false,"api_name":["System.Runtime.Remoting.Messaging.IMethodCallMessage","System.Runtime.Remoting.Messaging.IMethodCallMessage.GetInArg","System.Runtime.Remoting.Messaging.IMethodCallMessage.GetInArgName","System.Runtime.Remoting.Messaging.IMethodCallMessage.InArgCount","System.Runtime.Remoting.Messaging.IMethodCallMessage.InArgs"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Runtime.Remoting.Messaging.IMethodCallMessage","System::Runtime::Remoting::Messaging::IMethodCallMessage","System.Runtime.Remoting.Messaging.IMethodCallMessage.GetInArg","System::Runtime::Remoting::Messaging::IMethodCallMessage::GetInArg","System.Runtime.Remoting.Messaging.IMethodCallMessage.GetInArgName","System::Runtime::Remoting::Messaging::IMethodCallMessage::GetInArgName","System.Runtime.Remoting.Messaging.IMethodCallMessage.InArgCount","System::Runtime::Remoting::Messaging::IMethodCallMessage::InArgCount","System.Runtime.Remoting.Messaging.IMethodCallMessage.InArgs","System::Runtime::Remoting::Messaging::IMethodCallMessage::InArgs"],"dev_langs":["csharp"],"updated_at":"2017-04-01 05:59 PM","document_id":"a8cd475e-9ff1-513a-f833-6d9a2885bf4d","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Runtime.Remoting.Messaging/IMethodCallMessage.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IMethodCallMessage interface | Microsoft Docs","_op_ogTitle":"IMethodCallMessage interface","description":"Defines the method call message interface.\n","toc_asset_id":"api/_splitted/System.Runtime.Remoting.Messaging/toc.json","toc_rel":"_splitted/System.Runtime.Remoting.Messaging/toc.json","source_url":"","ms.assetid":"System.Runtime.Remoting.Messaging.IMethodCallMessage","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.remoting.messaging.imethodcallmessage","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.remoting.messaging.imethodcallmessage","fileRelativePath":"api/System.Runtime.Remoting.Messaging.IMethodCallMessage.html"},"themesRelativePathToOutputRoot":"_themes/"}