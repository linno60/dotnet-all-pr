{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">PeekCompletedEventArgs</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides data for the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> event. When your asynchronous peek operation calls an event handler, an instance of this class is passed to the handler.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class PeekCompletedEventArgs : EventArgs</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></span></div><span class=\"lang-csharp\">PeekCompletedEventArgs</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs#System_EventArgs_Empty\" data-linktype=\"relative-path\">Empty</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example creates an event handler for the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> event and associates it with the event delegate by using the <a class=\"xref\" href=\"system.messaging.peekcompletedeventhandler\" data-linktype=\"relative-path\">PeekCompletedEventHandler</a>. The event handler, <code>MyPeekCompleted</code>, peeks a message and writes its label to the screen.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue.BeginPeek_noparms#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\n\n// This example performs asynchronous peek operation\n// processing.\n//*************************************************\nref class MyNewQueue\n{\npublic:\n\n   // Provides an event handler for the PeekCompleted\n   // event.\n   static void MyPeekCompleted( Object^ source, PeekCompletedEventArgs^ asyncResult )\n   {\n      // Connect to the queue.\n      MessageQueue^ mq = dynamic_cast&lt;MessageQueue^&gt;(source);\n\n      // End the asynchronous peek operation.\n      Message^ m = mq-&gt;EndPeek( asyncResult-&gt;AsyncResult );\n\n      // Display message information on the screen.\n      Console::WriteLine( &quot;Message: {0}&quot;, static_cast&lt;String^&gt;(m-&gt;Body) );\n\n      // Restart the asynchronous peek operation.\n      mq-&gt;BeginPeek();\n      return;\n   }\n};\n\n// Provides an entry point into the application.\n//         \nint main()\n{\n   // Create an instance of MessageQueue. Set its formatter.\n   MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n   array&lt;Type^&gt;^p = gcnew array&lt;Type^&gt;(1);\n   p[ 0 ] = String::typeid;\n   myQueue-&gt;Formatter = gcnew XmlMessageFormatter( p );\n\n   // Add an event handler for the PeekCompleted event.\n   myQueue-&gt;PeekCompleted += gcnew PeekCompletedEventHandler( MyNewQueue::MyPeekCompleted );\n\n   // Begin the asynchronous peek operation.\n   myQueue-&gt;BeginPeek();\n\n   // Do other work on the current thread.\n   return 0;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue.BeginPeek_noparms#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example performs asynchronous peek operation\n\t\t// processing.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create an instance of MessageQueue. Set its formatter.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\t\t\tmyQueue.Formatter = new XmlMessageFormatter(new Type[]\n\t\t\t\t{typeof(String)});\n\n\t\t\t// Add an event handler for the PeekCompleted event.\n\t\t\tmyQueue.PeekCompleted += new \n\t\t\t\tPeekCompletedEventHandler(MyPeekCompleted);\n\t\t\t\n\t\t\t// Begin the asynchronous peek operation.\n\t\t\tmyQueue.BeginPeek();\n\t\t\t\n\t\t\t// Do other work on the current thread.\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Provides an event handler for the PeekCompleted\n\t\t// event.\n\t\t//**************************************************\n\t\t\n\t\tprivate static void MyPeekCompleted(Object source, \n\t\t\tPeekCompletedEventArgs asyncResult)\n\t\t{\n\t\t\t// Connect to the queue.\n\t\t\tMessageQueue mq = (MessageQueue)source;\n\n\t\t\t// End the asynchronous peek operation.\n\t\t\tMessage m = mq.EndPeek(asyncResult.AsyncResult);\n\n\t\t\t// Display message information on the screen.\n\t\t\tConsole.WriteLine(&quot;Message: &quot; + (string)m.Body);\n\n\t\t\t// Restart the asynchronous peek operation.\n\t\t\tmq.BeginPeek();\n\t\t\t\n\t\t\treturn; \n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessageQueue.BeginPeek_noparms#1\">Imports System\nImports System.Messaging\n\n\n\n\n\n&#39; Provides a container class for the example.\nPublic Class MyNewQueue\n\n\n\n        &#39; Provides an entry point into the application.\n        &#39;\t\t \n        &#39; This example performs asynchronous peek operation\n        &#39; processing.\n\n\n        Public Shared Sub Main()\n            &#39; Create an instance of MessageQueue. Set its formatter.\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n            myQueue.Formatter = New XmlMessageFormatter(New Type() _\n                {GetType([String])})\n\n            &#39; Add an event handler for the PeekCompleted event.\n            AddHandler myQueue.PeekCompleted, AddressOf _\n                MyPeekCompleted\n\n            &#39; Begin the asynchronous peek operation.\n            myQueue.BeginPeek()\n\n            &#39; Do other work on the current thread.\n            Return\n        End Sub &#39;Main\n\n\n        &#39;**************************************************\n        &#39; Provides an event handler for the PeekCompleted\n        &#39; event.\n        &#39;**************************************************\n\n        Private Shared Sub MyPeekCompleted(ByVal [source] As _\n            [Object], ByVal asyncResult As PeekCompletedEventArgs)\n\n            &#39; Connect to the queue.\n            Dim mq As MessageQueue = CType([source], MessageQueue)\n\n            &#39; End the asynchronous peek operation.\n            Dim m As Message = mq.EndPeek(asyncResult.AsyncResult)\n\n            &#39; Display message information on the screen.\n            Console.WriteLine((&quot;Message: &quot; + CStr(m.Body)))\n\n            &#39; Restart the asynchronous peek operation.\n            mq.BeginPeek()\n\n            Return\n\n        End Sub &#39;MyPeekCompleted\n\nEnd Class &#39;MyNewQueue\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>When you use event notification to peek (read without removing) messages asynchronously from the queue, you must create a method that handles your message processing. Your code must call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> to begin the asynchronous processing. When a message is peeked, your application is notified through the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> event. An instance of PeekCompletedEventArgs is passed into the event delegate that calls your event handler. The data associated with the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> event is contained in the delegate&#39;s <a class=\"xref\" href=\"system.messaging.receivecompletedeventargs#System_Messaging_ReceiveCompletedEventArgs_AsyncResult_\" data-linktype=\"relative-path\">AsyncResult</a> parameter.  </p>\n<p> There are two ways to provide notification of event completion: event notification and callbacks. PeekCompletedEventArgs is used only with event notification. For information comparing callbacks and event notification, see &quot;Events vs. Callbacks&quot; on MSDN.  </p>\n<p> PeekCompletedEventArgs provides access to the message that initiated the end of the asynchronous peek operation, through the <a class=\"xref\" href=\"system.messaging.peekcompletedeventargs#System_Messaging_PeekCompletedEventArgs_Message_\" data-linktype=\"relative-path\">Message</a> member. This is an alternate access to the message, and behaves much the same as a call to <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EndPeek_\" data-linktype=\"relative-path\">EndPeek</a>.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Messaging_PeekCompletedEventArgs_AsyncResult_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Messaging_PeekCompletedEventArgs_AsyncResult\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AsyncResult</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the result of the asynchronous operation requested.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public IAsyncResult AsyncResult { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> that contains the data associated with the peek operation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>AsyncResult identifies ongoing or completed asynchronous operations. The property contains data that helps determine which of several potential asynchronous operations to complete, and when passed to the event handler, enables <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EndPeek_\" data-linktype=\"relative-path\">EndPeek</a> to access the message associated with the completed operation.  </p>\n<p> When you call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a>, a <a class=\"xref\" href=\"system.iasyncresult\" data-linktype=\"relative-path\">IAsyncResult</a> is returned immediately, even though a message, if one exists, has not yet been retrieved because the operation is not completed. The AsyncResult indicates the state of the asynchronous operation. <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_BeginPeek_\" data-linktype=\"relative-path\">BeginPeek</a> creates the object, which is modified throughout the operation until <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EndPeek_\" data-linktype=\"relative-path\">EndPeek</a> completes it.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Messaging_PeekCompletedEventArgs_Message_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Messaging_PeekCompletedEventArgs_Message\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Message</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the message associated with the asynchronous peek operation.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Messaging.Message Message { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.messaging.message\" data-linktype=\"relative-path\">Message</a> that represents the end result of the asynchronous peek operation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.messagequeueexception\" data-linktype=\"relative-path\">MessageQueueException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The Message could not be retrieved. The time-out on the asynchronous operation might have expired.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Message property provides a means for retrieving the message that initiated the end of the asynchronous peek operation.  </p>\n<p> <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EndPeek_\" data-linktype=\"relative-path\">EndPeek</a> is called the first time the Message property is read, so it is not necessary to call <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_EndPeek_\" data-linktype=\"relative-path\">EndPeek</a> prior to getting the value of this property.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Messaging.PeekCompletedEventArgs.yml\">\r\n<meta name=\"APIName\" content=\"System.Messaging.PeekCompletedEventArgs\">\r\n<meta name=\"APIName\" content=\"System.Messaging.PeekCompletedEventArgs.AsyncResult\">\r\n<meta name=\"APIName\" content=\"System.Messaging.PeekCompletedEventArgs.Message\">\r\n<meta name=\"APILocation\" content=\"System.Messaging.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:59 PM\">\r\n<meta name=\"document_id\" content=\"a634923a-46bf-d182-1422-146ee3ecd1fd\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides data for the  event. When your asynchronous peek operation calls an event handler, an instance of this class is passed to the handler.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.messaging/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Messaging.PeekCompletedEventArgs\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","uhfHeaderId":"MSDocsHeader-DotNet","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Messaging.PeekCompletedEventArgs.yml","open_to_public_contributors":false,"api_name":["System.Messaging.PeekCompletedEventArgs","System.Messaging.PeekCompletedEventArgs.AsyncResult","System.Messaging.PeekCompletedEventArgs.Message"],"api_location":["System.Messaging.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Messaging.PeekCompletedEventArgs","System::Messaging::PeekCompletedEventArgs","System.Messaging.PeekCompletedEventArgs.AsyncResult","System::Messaging::PeekCompletedEventArgs::AsyncResult","System.Messaging.PeekCompletedEventArgs.Message","System::Messaging::PeekCompletedEventArgs::Message"],"dev_langs":["csharp"],"updated_at":"2017-04-01 05:59 PM","document_id":"a634923a-46bf-d182-1422-146ee3ecd1fd","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Messaging/PeekCompletedEventArgs.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"PeekCompletedEventArgs class | Microsoft Docs","_op_ogTitle":"PeekCompletedEventArgs class","description":"Provides data for the  event. When your asynchronous peek operation calls an event handler, an instance of this class is passed to the handler.\n","toc_asset_id":"api/_splitted/System.Messaging/toc.json","toc_rel":"_splitted/System.Messaging/toc.json","source_url":"","ms.assetid":"System.Messaging.PeekCompletedEventArgs","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.messaging.peekcompletedeventargs","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.messaging.peekcompletedeventargs","fileRelativePath":"api/System.Messaging.PeekCompletedEventArgs.html"},"themesRelativePathToOutputRoot":"_themes/"}