{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">RegexOptions</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides enumerated values to use to set regular expression options.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Flags]\npublic enum RegexOptions</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">System.Enum</a></span></div><span class=\"lang-csharp\">RegexOptions</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example defines two regular expressions that identify repeated words in text but that are instantiated using different RegexOptions values. The first regular expression is case-insensitive; case is ignored when determining whether a word is identical to the preceding word. The second regular expression is case-sensitive; a word must match the case of the preceding word exactly to be considered a duplicate.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.RegexOptions#1\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Test\n{\n    public static void Main ()\n    {\n        // Define a case-insensitive regular expression for repeated words.\n        Regex rxInsensitive = new Regex(@&quot;\\b(?&lt;word&gt;\\w+)\\s+(\\k&lt;word&gt;)\\b&quot;,\n          RegexOptions.Compiled | RegexOptions.IgnoreCase);\n        // Define a case-sensitive regular expression for repeated words.\n        Regex rxSensitive = new Regex(@&quot;\\b(?&lt;word&gt;\\w+)\\s+(\\k&lt;word&gt;)\\b&quot;,\n          RegexOptions.Compiled);\n\n        // Define a test string.        \n        string text = &quot;The the quick brown fox  fox jumped over the lazy dog dog.&quot;;\n        \n        // Find matches using case-insensitive regular expression.\n        MatchCollection matches = rxInsensitive.Matches(text);\n\n        // Report the number of matches found.\n        Console.WriteLine(&quot;{0} matches found in:\\n   {1}&quot;, \n                          matches.Count, \n                          text);\n\n        // Report on each match.\n        foreach (Match match in matches)\n        {\n            GroupCollection groups = match.Groups;\n            Console.WriteLine(&quot;&#39;{0}&#39; repeated at positions {1} and {2}&quot;,  \n                              groups[&quot;word&quot;].Value, \n                              groups[0].Index, \n                              groups[1].Index);\n        }\n        Console.WriteLine();\n        \n        // Find matches using case-sensitive regular expression.\n        matches = rxSensitive.Matches(text);\n\n        // Report the number of matches found.\n        Console.WriteLine(&quot;{0} matches found in:\\n   {1}&quot;, \n                          matches.Count, \n                          text);\n\n        // Report on each match.\n        foreach (Match match in matches)\n        {\n            GroupCollection groups = match.Groups;\n            Console.WriteLine(&quot;&#39;{0}&#39; repeated at positions {1} and {2}&quot;,  \n                              groups[&quot;word&quot;].Value, \n                              groups[0].Index, \n                              groups[1].Index);\n        }\n    }\n}\n// The example produces the following output to the console:\n//       3 matches found in:\n//          The the quick brown fox  fox jumped over the lazy dog dog.\n//       &#39;The&#39; repeated at positions 0 and 4\n//       &#39;fox&#39; repeated at positions 20 and 25\n//       &#39;dog&#39; repeated at positions 50 and 54\n//       \n//       2 matches found in:\n//          The the quick brown fox  fox jumped over the lazy dog dog.\n//       &#39;fox&#39; repeated at positions 20 and 25\n//       &#39;dog&#39; repeated at positions 50 and 54\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.RegexOptions#1\">Imports System.Text.RegularExpressions\n\nPublic Module Test\n\n    Public Sub Main()\n        &#39; Define a case-insensitive regular expression for repeated words.\n        Dim rxInsensitive As New Regex(&quot;\\b(?&lt;word&gt;\\w+)\\s+(\\k&lt;word&gt;)\\b&quot;, _\n               RegexOptions.Compiled Or RegexOptions.IgnoreCase)\n        &#39; Define a case-sensitive regular expression for repeated words.\n        Dim rxSensitive As New Regex(&quot;\\b(?&lt;word&gt;\\w+)\\s+(\\k&lt;word&gt;)\\b&quot;, _\n               RegexOptions.Compiled)\n\n        &#39; Define a test string.        \n        Dim text As String = &quot;The the quick brown fox  fox jumped over the lazy dog dog.&quot;\n        \n        &#39; Find matches using case-insensitive regular expression.\n        Dim matches As MatchCollection = rxInsensitive.Matches(text)\n\n        &#39; Report the number of matches found.\n        Console.WriteLine(&quot;{0} matches found in:&quot;, matches.Count)\n        Console.WriteLine(&quot;   {0}&quot;, text)\n\n        &#39; Report on each match.\n        For Each match As Match In matches\n            Dim groups As GroupCollection = match.Groups\n            Console.WriteLine(&quot;&#39;{0}&#39; repeated at positions {1} and {2}&quot;, _ \n                              groups.Item(&quot;word&quot;).Value, _\n                              groups.Item(0).Index, _\n                              groups.Item(1).Index)\n        Next\n        Console.WriteLine()\n        \n        &#39; Find matches using case-sensitive regular expression.\n        matches = rxSensitive.Matches(text)\n\n        &#39; Report the number of matches found.\n        Console.WriteLine(&quot;{0} matches found in:&quot;, matches.Count)\n        Console.WriteLine(&quot;   {0}&quot;, text)\n\n        &#39; Report on each match.\n        For Each match As Match In matches\n            Dim groups As GroupCollection = match.Groups\n            Console.WriteLine(&quot;&#39;{0}&#39; repeated at positions {1} and {2}&quot;, _ \n                              groups.Item(&quot;word&quot;).Value, _\n                              groups.Item(0).Index, _\n                              groups.Item(1).Index)\n        Next\n        Console.WriteLine()\n    End Sub\nEnd Module\n&#39; The example produces the following output to the console:\n&#39;       3 matches found in:\n&#39;          The the quick brown fox  fox jumped over the lazy dog dog.\n&#39;       &#39;The&#39; repeated at positions 0 and 4\n&#39;       &#39;fox&#39; repeated at positions 20 and 25\n&#39;       &#39;dog&#39; repeated at positions 50 and 54\n&#39;       \n&#39;       2 matches found in:\n&#39;          The the quick brown fox  fox jumped over the lazy dog dog.\n&#39;       &#39;fox&#39; repeated at positions 20 and 25\n&#39;       &#39;dog&#39; repeated at positions 50 and 54\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>A RegexOptions value can be provided as a parameter to the following members of the <a class=\"xref\" href=\"system.text.regularexpressions.regex\" data-linktype=\"relative-path\">Regex</a> class:  </p>\n<ul>\n<li><p>The <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex__ctor_System_String_System_Text_RegularExpressions_RegexOptions_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Regex(String,RegexOptions)</a> class constructor.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Split_System_String_System_String_System_Text_RegularExpressions_RegexOptions_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Split(String,String,RegexOptions)</a> method.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_IsMatch_System_String_System_String_System_Text_RegularExpressions_RegexOptions_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.IsMatch(String,String,RegexOptions)</a> method.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Match_System_String_System_String_System_Text_RegularExpressions_RegexOptions_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Match(String,String,RegexOptions)</a> method.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Matches_System_String_System_String_System_Text_RegularExpressions_RegexOptions_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Matches(String,String,RegexOptions)</a> method.  </p>\n</li>\n<li><p>The <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Replace_System_String_System_String_System_String_System_Text_RegularExpressions_RegexOptions_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Replace(String,String,String,RegexOptions)</a> and <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_Replace_System_String_System_String_System_Text_RegularExpressions_MatchEvaluator_System_Text_RegularExpressions_RegexOptions_\" data-linktype=\"relative-path\">System.Text.RegularExpressions.Regex.Replace(String,String,MatchEvaluator,RegexOptions)</a> methods.  </p>\n<p>A RegexOptions value can also be supplied as a parameter to the <a class=\"xref\" href=\"system.text.regularexpressions.regexcompilationinfo#System_Text_RegularExpressions_RegexCompilationInfo__ctor_\" data-linktype=\"relative-path\">RegexCompilationInfo</a> constructor, or it can be assigned directly to the <a class=\"xref\" href=\"system.text.regularexpressions.regexcompilationinfo#System_Text_RegularExpressions_RegexCompilationInfo_Options_\" data-linktype=\"relative-path\">Options</a> property. The resulting <a class=\"xref\" href=\"system.text.regularexpressions.regexcompilationinfo\" data-linktype=\"relative-path\">RegexCompilationInfo</a> object is then used in the call to the <a class=\"xref\" href=\"system.text.regularexpressions.regex#System_Text_RegularExpressions_Regex_CompileToAssembly_\" data-linktype=\"relative-path\">CompileToAssembly</a> method.  </p>\n<p>Several options provided by members of the RegexOptions enumeration (in particular, by its ExplicitCapture, IgnoreCase, Multiline, and Singleline members) can instead be provided by using an inline option character in the regular expression pattern. For details, see <a href=\"../topic/regular%20expression%20options\" data-linktype=\"relative-path\">Regular Expression Options</a>.</p>\n</li>\n</ul>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Text_RegularExpressions_RegexOptions_Compiled\">\r\n      \t\t\t<span class=\"lang-csharp\">Compiled</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the regular expression is compiled to an assembly. This yields faster execution but increases startup time. This value should not be assigned to the <span class=\"xref\">stem.Text.RegularExpressions.RegexCompilationInfo.Options*</span> property when calling the [System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo&lt;xref href=&quot;stem.Text.RegularExpressions.Regex.CompileToAssembly%2A&quot;&gt; method. For more information, see the &quot;Compiled Regular Expressions&quot; section in the <a href=\"../topic/regular%20expression%20options\" data-linktype=\"relative-path\">Regular Expression Options</a> topic.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Text_RegularExpressions_RegexOptions_CultureInvariant\">\r\n      \t\t\t<span class=\"lang-csharp\">CultureInvariant</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that cultural differences in language is ignored. For more information, see the &quot;Comparison Using the Invariant Culture&quot; section in the <a href=\"../topic/regular%20expression%20options\" data-linktype=\"relative-path\">Regular Expression Options</a> topic.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Text_RegularExpressions_RegexOptions_ECMAScript\">\r\n      \t\t\t<span class=\"lang-csharp\">ECMAScript</span>\r\n      \t</td>\r\n      \t<td><p>Enables ECMAScript-compliant behavior for the expression. This value can be used only in conjunction with the IgnoreCase, Multiline, and Compiled values. The use of this value with any other values results in an exception.  </p>\n<p> For more information on the ECMAScript option, see the &quot;ECMAScript Matching Behavior&quot; section in the <a href=\"../topic/regular%20expression%20options\" data-linktype=\"relative-path\">Regular Expression Options</a> topic.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Text_RegularExpressions_RegexOptions_ExplicitCapture\">\r\n      \t\t\t<span class=\"lang-csharp\">ExplicitCapture</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the only valid captures are explicitly named or numbered groups of the form (?<name>…). This allows unnamed parentheses to act as noncapturing groups without the syntactic clumsiness of the expression (?:…). For more information, see the &quot;Explicit Captures Only&quot; section in the <a href=\"../topic/regular%20expression%20options\" data-linktype=\"relative-path\">Regular Expression Options</a> topic.<p>\n</name></td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Text_RegularExpressions_RegexOptions_IgnoreCase\">\r\n      \t\t\t<span class=\"lang-csharp\">IgnoreCase</span>\r\n      \t</td>\r\n      \t<td><p>Specifies case-insensitive matching. For more information, see the &quot;Case-Insensitive Matching &quot; section in the <a href=\"../topic/regular%20expression%20options\" data-linktype=\"relative-path\">Regular Expression Options</a> topic.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Text_RegularExpressions_RegexOptions_IgnorePatternWhitespace\">\r\n      \t\t\t<span class=\"lang-csharp\">IgnorePatternWhitespace</span>\r\n      \t</td>\r\n      \t<td><p>Eliminates unescaped white space from the pattern and enables comments marked with #. However, this value does not affect or eliminate white space in , numeric , or tokens that mark the beginning of individual . For more information, see the &quot;Ignore White Space&quot; section of the <a href=\"../topic/regular%20expression%20options\" data-linktype=\"relative-path\">Regular Expression Options</a> topic.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Text_RegularExpressions_RegexOptions_Multiline\">\r\n      \t\t\t<span class=\"lang-csharp\">Multiline</span>\r\n      \t</td>\r\n      \t<td><p>Multiline mode. Changes the meaning of ^ and $ so they match at the beginning and end, respectively, of any line, and not just the beginning and end of the entire string. For more information, see the &quot;Multiline Mode&quot; section in the <a href=\"../topic/regular%20expression%20options\" data-linktype=\"relative-path\">Regular Expression Options</a> topic.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Text_RegularExpressions_RegexOptions_None\">\r\n      \t\t\t<span class=\"lang-csharp\">None</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that no options are set. For more information about the default behavior of the regular expression engine, see the &quot;Default Options&quot; section in the <a href=\"../topic/regular%20expression%20options\" data-linktype=\"relative-path\">Regular Expression Options</a> topic.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Text_RegularExpressions_RegexOptions_RightToLeft\">\r\n      \t\t\t<span class=\"lang-csharp\">RightToLeft</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the search will be from right to left instead of from left to right. For more information, see the &quot;Right-to-Left Mode&quot; section in the <a href=\"../topic/regular%20expression%20options\" data-linktype=\"relative-path\">Regular Expression Options</a> topic.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Text_RegularExpressions_RegexOptions_Singleline\">\r\n      \t\t\t<span class=\"lang-csharp\">Singleline</span>\r\n      \t</td>\r\n      \t<td><p>Specifies single-line mode. Changes the meaning of the dot (.) so it matches every character (instead of every character except \\n). For more information, see the &quot;Single-line Mode&quot; section in the <a href=\"../topic/regular%20expression%20options\" data-linktype=\"relative-path\">Regular Expression Options</a> topic.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Text.RegularExpressions.RegexOptions.yml\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.RegexOptions\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.RegexOptions.Compiled\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.RegexOptions.CultureInvariant\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.RegexOptions.ECMAScript\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.RegexOptions.ExplicitCapture\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.RegexOptions.IgnoreCase\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.RegexOptions.Multiline\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.RegexOptions.None\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.RegexOptions.RightToLeft\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.RegexOptions.Singleline\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-24 01:41 AM\">\r\n<meta name=\"document_id\" content=\"d48034ff-72b1-0c08-8b65-42b749b6905c\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides enumerated values to use to set regular expression options.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.text.regularexpressions/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Text.RegularExpressions.RegexOptions\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Text.RegularExpressions.RegexOptions.yml","open_to_public_contributors":false,"api_name":["System.Text.RegularExpressions.RegexOptions","System.Text.RegularExpressions.RegexOptions.Compiled","System.Text.RegularExpressions.RegexOptions.CultureInvariant","System.Text.RegularExpressions.RegexOptions.ECMAScript","System.Text.RegularExpressions.RegexOptions.ExplicitCapture","System.Text.RegularExpressions.RegexOptions.IgnoreCase","System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace","System.Text.RegularExpressions.RegexOptions.Multiline","System.Text.RegularExpressions.RegexOptions.None","System.Text.RegularExpressions.RegexOptions.RightToLeft","System.Text.RegularExpressions.RegexOptions.Singleline"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Text.RegularExpressions.RegexOptions","System::Text::RegularExpressions::RegexOptions","System.Text.RegularExpressions.RegexOptions.Compiled","System::Text::RegularExpressions::RegexOptions::Compiled","System.Text.RegularExpressions.RegexOptions.CultureInvariant","System::Text::RegularExpressions::RegexOptions::CultureInvariant","System.Text.RegularExpressions.RegexOptions.ECMAScript","System::Text::RegularExpressions::RegexOptions::ECMAScript","System.Text.RegularExpressions.RegexOptions.ExplicitCapture","System::Text::RegularExpressions::RegexOptions::ExplicitCapture","System.Text.RegularExpressions.RegexOptions.IgnoreCase","System::Text::RegularExpressions::RegexOptions::IgnoreCase","System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace","System::Text::RegularExpressions::RegexOptions::IgnorePatternWhitespace","System.Text.RegularExpressions.RegexOptions.Multiline","System::Text::RegularExpressions::RegexOptions::Multiline","System.Text.RegularExpressions.RegexOptions.None","System::Text::RegularExpressions::RegexOptions::None","System.Text.RegularExpressions.RegexOptions.RightToLeft","System::Text::RegularExpressions::RegexOptions::RightToLeft","System.Text.RegularExpressions.RegexOptions.Singleline","System::Text::RegularExpressions::RegexOptions::Singleline"],"dev_langs":["csharp"],"updated_at":"2017-03-24 01:41 AM","document_id":"d48034ff-72b1-0c08-8b65-42b749b6905c","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/RegexOptions.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"RegexOptions enum | Microsoft Docs","_op_ogTitle":"RegexOptions enum","description":"Provides enumerated values to use to set regular expression options.\n","toc_asset_id":"api/_splitted/System.Text.RegularExpressions/toc.json","toc_rel":"_splitted/System.Text.RegularExpressions/toc.json","source_url":"","ms.assetid":"System.Text.RegularExpressions.RegexOptions","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regexoptions","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.regexoptions","fileRelativePath":"api/System.Text.RegularExpressions.RegexOptions.html"},"themesRelativePathToOutputRoot":"_themes/"}