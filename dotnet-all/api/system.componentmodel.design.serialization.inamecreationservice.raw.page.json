{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">INameCreationService</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides a service that can generate unique names for objects.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public interface INameCreationService</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example code provides an example INameCreationService implementation. The service can create a unique name based on a type that does not match any names in the specified container. It can also validate a specified name string.  </p>\n<pre><code class=\"lang-vb\" name=\"INameCreationServiceExample#1\">Imports System\nImports System.ComponentModel.Design\nImports System.ComponentModel.Design.Serialization\nImports System.Globalization\n\nPublic Class NameCreationService\n    Implements System.ComponentModel.Design.Serialization.INameCreationService\n\n    Public Sub New()\n    End Sub\n\n    &#39; Creates an identifier for a particular data type that does not conflict \n    &#39; with the identifiers of any components in the specified collection\n    Public Function CreateName(ByVal container As System.ComponentModel.IContainer, ByVal dataType As System.Type) As String Implements INameCreationService.CreateName\n        &#39; Create a basic type name string\n        Dim baseName As String = dataType.Name\n        Dim uniqueID As Integer = 1\n\n        Dim unique As Boolean = False\n        &#39; Continue to increment uniqueID numeral until a unique ID is located.\n        While Not unique\n            unique = True\n            &#39; Check each component in the container for a matching \n            &#39; base type name and unique ID.\n            Dim i As Integer\n            For i = 0 To container.Components.Count - 1\n                &#39; Check component name for match with unique ID string.\n                If container.Components(i).Site.Name.StartsWith((baseName + uniqueID.ToString())) Then\n                    &#39; If a match is encountered, set flag to recycle \n                    &#39; collection, increment ID numeral, and restart.\n                    unique = False\n                    uniqueID += 1\n                    Exit For\n                End If\n            Next i\n        End While\n\n        Return baseName + uniqueID.ToString()\n    End Function\n\n    &#39; Returns whether the specified name contains \n    &#39; all valid character types.\n    Public Function IsValidName(ByVal name As String) As Boolean Implements INameCreationService.IsValidName\n        Dim i As Integer\n        For i = 0 To name.Length - 1\n            Dim ch As Char = name.Chars(i)\n            Dim uc As UnicodeCategory = [Char].GetUnicodeCategory(ch)\n            Select Case uc\n                Case UnicodeCategory.UppercaseLetter, UnicodeCategory.LowercaseLetter, UnicodeCategory.TitlecaseLetter, UnicodeCategory.DecimalDigitNumber\n                Case Else\n                    Return False\n            End Select\n        Next i\n        Return True\n    End Function\n\n    &#39; Throws an exception if the specified name does not contain \n    &#39; all valid character types.\n    Public Sub ValidateName(ByVal name As String) Implements INameCreationService.ValidateName\n        Dim i As Integer\n        For i = 0 To name.Length - 1\n            Dim ch As Char = name.Chars(i)\n            Dim uc As UnicodeCategory = [Char].GetUnicodeCategory(ch)\n            Select Case uc\n                Case UnicodeCategory.UppercaseLetter, UnicodeCategory.LowercaseLetter, UnicodeCategory.TitlecaseLetter, UnicodeCategory.DecimalDigitNumber\n                Case Else\n                    Throw New Exception(&quot;The name &#39;&quot; + name + &quot;&#39; is not a valid identifier.&quot;)\n            End Select\n        Next i\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"INameCreationServiceExample#1\">using System;\nusing System.ComponentModel.Design;\nusing System.ComponentModel.Design.Serialization;\nusing System.Globalization;\n\nnamespace NameCreationServiceExample\n{\n    public class NameCreationService : System.ComponentModel.Design.Serialization.INameCreationService\n    {\n        public NameCreationService()\n        {\n        }\n\n        // Creates an identifier for a particular data type that does not conflict \n        // with the identifiers of any components in the specified collection.\n        public string CreateName(System.ComponentModel.IContainer container, System.Type dataType)\n        {\n            // Create a basic type name string.\n            string baseName = dataType.Name;\n            int uniqueID = 1;\n\n            bool unique = false;            \n            // Continue to increment uniqueID numeral until a \n            // unique ID is located.\n            while( !unique )\n            {\n                unique = true;\n                // Check each component in the container for a matching \n                // base type name and unique ID.\n                for(int i=0; i&lt;container.Components.Count; i++)\n                {\n                    // Check component name for match with unique ID string.\n                    if( container.Components[i].Site.Name.StartsWith(baseName+uniqueID.ToString()) )\n                    {\n                        // If a match is encountered, set flag to recycle \n                        // collection, increment ID numeral, and restart.\n                        unique = false;\n                        uniqueID++;\n                        break;\n                    }\n                }\n            }\n            \n            return baseName+uniqueID.ToString();\n        }\n\n        // Returns whether the specified name contains \n        // all valid character types.\n        public bool IsValidName(string name)\n        {            \n            for(int i = 0; i &lt; name.Length; i++)\n            {\n                char ch = name[i];\n                UnicodeCategory uc = Char.GetUnicodeCategory(ch);\n                switch (uc) \n                {\n                    case UnicodeCategory.UppercaseLetter:       \n                    case UnicodeCategory.LowercaseLetter:     \n                    case UnicodeCategory.TitlecaseLetter:                                                  \n                    case UnicodeCategory.DecimalDigitNumber:                         \n                        break;\n                    default:\n                        return false;                \n                }\n            }\n            return true;        \n         }\n\n        // Throws an exception if the specified name does not contain \n        // all valid character types.\n        public void ValidateName(string name)\n        {\n            for(int i = 0; i &lt; name.Length; i++)\n            {\n                char ch = name[i];\n                UnicodeCategory uc = Char.GetUnicodeCategory(ch);\n                switch (uc) \n                {\n                    case UnicodeCategory.UppercaseLetter:       \n                    case UnicodeCategory.LowercaseLetter:     \n                    case UnicodeCategory.TitlecaseLetter:                                                  \n                    case UnicodeCategory.DecimalDigitNumber:                         \n                        break;\n                    default:\n                        throw new Exception(&quot;The name &#39;&quot;+name+&quot;&#39; is not a valid identifier.&quot;);                \n                }\n            }\n        }\n     }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"INameCreationServiceExample#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::ComponentModel::Design;\nusing namespace System::ComponentModel::Design::Serialization;\nusing namespace System::Globalization;\n\nnamespace NameCreationServiceExample\n{\n   public ref class NameCreationService: public System::ComponentModel::Design::Serialization::INameCreationService\n   {\n   public:\n      NameCreationService(){}\n\n      // Creates an identifier for a particular data type that does not conflict \n      // with the identifiers of any components in the specified collection.\n      virtual String^ CreateName( System::ComponentModel::IContainer^ container, System::Type^ dataType )\n      {\n         // Create a basic type name string.\n         String^ baseName = dataType-&gt;Name;\n         int uniqueID = 1;\n         bool unique = false;\n\n         // Continue to increment uniqueID numeral until a \n         // unique ID is located.\n         while (  !unique )\n         {\n            unique = true;\n\n            // Check each component in the container for a matching \n            // base type name and unique ID.\n            for ( int i = 0; i &lt; container-&gt;Components-&gt;Count; i++ )\n            {\n               // Check component name for match with unique ID string.\n               if ( container-&gt;Components[ i ]-&gt;Site-&gt;Name-&gt;StartsWith( String::Concat( baseName, uniqueID ) ) )\n               {\n                  // If a match is encountered, set flag to recycle \n                  // collection, increment ID numeral, and restart.\n                  unique = false;\n                  uniqueID++;\n                  break;\n               }\n            }\n         }\n\n         return String::Concat( baseName, uniqueID );\n      }\n\n      // Returns whether the specified name contains \n      // all valid character types.\n      virtual bool IsValidName( String^ name )\n      {\n         for ( int i = 0; i &lt; name-&gt;Length; i++ )\n         {\n            Char ch = name[ i ];\n            UnicodeCategory uc = Char::GetUnicodeCategory( ch );\n            switch ( uc )\n            {\n               case UnicodeCategory::UppercaseLetter:\n               case UnicodeCategory::LowercaseLetter:\n               case UnicodeCategory::TitlecaseLetter:\n               case UnicodeCategory::DecimalDigitNumber:\n                  break;\n\n               default:\n                  return false;\n            }\n         }\n         return true;\n      }\n\n      // Throws an exception if the specified name does not contain \n      // all valid character types.\n      virtual void ValidateName( String^ name )\n      {\n         for ( int i = 0; i &lt; name-&gt;Length; i++ )\n         {\n            Char ch = name[ i ];\n            UnicodeCategory uc = Char::GetUnicodeCategory( ch );\n            switch ( uc )\n            {\n               case UnicodeCategory::UppercaseLetter:\n               case UnicodeCategory::LowercaseLetter:\n               case UnicodeCategory::TitlecaseLetter:\n               case UnicodeCategory::DecimalDigitNumber:\n                  break;\n\n               default:\n                  throw gcnew Exception( String::Format( &quot;The name &#39;{0}&#39; is not a valid identifier.&quot;, name ) );\n            }\n         }\n      }\n   };\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>A <a class=\"xref\" href=\"system.componentmodel.design.serialization.designerloader\" data-linktype=\"relative-path\">DesignerLoader</a> can implement this service to provide a way for a designer to create new, unique names for objects. If this service is not available, the designer uses a default implementation.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_Design_Serialization_INameCreationService_CreateName_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_Serialization_INameCreationService_CreateName_System_ComponentModel_IContainer_System_Type_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CreateName(IContainer, Type)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Creates a new name that is unique to all components in the specified container.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string CreateName (System.ComponentModel.IContainer container, Type dataType);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>container</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.icontainer\" data-linktype=\"relative-path\">IContainer</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The container where the new object is added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>dataType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The data type of the object that receives the name.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A unique name for the data type.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method returns a name for the new object that is unique within the specified container.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_Design_Serialization_INameCreationService_IsValidName_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_Serialization_INameCreationService_IsValidName_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsValidName(String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value indicating whether the specified name is valid.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsValidName (string name);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>name</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name to validate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the name is valid; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>An implementation of the <a class=\"xref\" href=\"system.componentmodel.design.serialization.inamecreationservice\" data-linktype=\"relative-path\">INameCreationService</a> can have rules that define the parameters for valid names. This method can be implemented to validate a name and enforce those rules.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_Design_Serialization_INameCreationService_ValidateName_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_Serialization_INameCreationService_ValidateName_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ValidateName(String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value indicating whether the specified name is valid.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void ValidateName (string name);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>name</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name to validate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>An implementation of the <a class=\"xref\" href=\"system.componentmodel.design.serialization.inamecreationservice\" data-linktype=\"relative-path\">INameCreationService</a> can have rules that define the parameters for valid names. This method can be implemented to validate a name and enforce those rules.  </p>\n<p> This method is similar to <a class=\"xref\" href=\"system.componentmodel.design.serialization.inamecreationservice#System_ComponentModel_Design_Serialization_INameCreationService_IsValidName_\" data-linktype=\"relative-path\">IsValidName</a>, except that this method throws an exception if the name is invalid. This allows implementers to provide detailed information in the exception message.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.Design.Serialization.INameCreationService.yml\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.Serialization.INameCreationService\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.Serialization.INameCreationService.CreateName\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.Serialization.INameCreationService.IsValidName\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.Serialization.INameCreationService.ValidateName\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:59 PM\">\r\n<meta name=\"document_id\" content=\"97f6f448-db42-61f9-15fe-8236e7d76795\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a service that can generate unique names for objects.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.componentmodel.design.serialization/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.ComponentModel.Design.Serialization.INameCreationService\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","uhfHeaderId":"MSDocsHeader-DotNet","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.Design.Serialization.INameCreationService.yml","open_to_public_contributors":false,"api_name":["System.ComponentModel.Design.Serialization.INameCreationService","System.ComponentModel.Design.Serialization.INameCreationService.CreateName","System.ComponentModel.Design.Serialization.INameCreationService.IsValidName","System.ComponentModel.Design.Serialization.INameCreationService.ValidateName"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.ComponentModel.Design.Serialization.INameCreationService","System::ComponentModel::Design::Serialization::INameCreationService","System.ComponentModel.Design.Serialization.INameCreationService.CreateName","System::ComponentModel::Design::Serialization::INameCreationService::CreateName","System.ComponentModel.Design.Serialization.INameCreationService.IsValidName","System::ComponentModel::Design::Serialization::INameCreationService::IsValidName","System.ComponentModel.Design.Serialization.INameCreationService.ValidateName","System::ComponentModel::Design::Serialization::INameCreationService::ValidateName"],"dev_langs":["csharp"],"updated_at":"2017-04-01 05:59 PM","document_id":"97f6f448-db42-61f9-15fe-8236e7d76795","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.ComponentModel.Design.Serialization/INameCreationService.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"INameCreationService interface | Microsoft Docs","_op_ogTitle":"INameCreationService interface","description":"Provides a service that can generate unique names for objects.\n","toc_asset_id":"api/_splitted/System.ComponentModel.Design.Serialization/toc.json","toc_rel":"_splitted/System.ComponentModel.Design.Serialization/toc.json","source_url":"","ms.assetid":"System.ComponentModel.Design.Serialization.INameCreationService","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.design.serialization.inamecreationservice","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.design.serialization.inamecreationservice","fileRelativePath":"api/System.ComponentModel.Design.Serialization.INameCreationService.html"},"themesRelativePathToOutputRoot":"_themes/"}