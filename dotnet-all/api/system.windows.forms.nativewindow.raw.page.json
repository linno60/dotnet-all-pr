{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">NativeWindow</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides a low-level encapsulation of a window handle and a window procedure.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class NativeWindow : MarshalByRefObject, System.Windows.Forms.IWin32Window</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">System.MarshalByRefObject</a></span></div><span class=\"lang-csharp\">NativeWindow</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates intercepting operating system window messages in a window procedure, and creating a window with a specific operating system window class name. The example creates two classes that inherit from NativeWindow that accomplish this.  </p>\n<p> The <code>MyNativeWindowListener</code> class hooks into the window procedure of the form passed into the constructor, and overrides the <a class=\"xref\" href=\"system.windows.forms.nativewindow#System_Windows_Forms_NativeWindow_WndProc_\" data-linktype=\"relative-path\">WndProc</a> method to intercept the <code>WM_ACTIVATEAPP</code> window message. The class demonstrates the usage of the <a class=\"xref\" href=\"system.windows.forms.nativewindow#System_Windows_Forms_NativeWindow_AssignHandle_\" data-linktype=\"relative-path\">AssignHandle</a> and <a class=\"xref\" href=\"system.windows.forms.nativewindow#System_Windows_Forms_NativeWindow_ReleaseHandle_\" data-linktype=\"relative-path\">ReleaseHandle</a> methods to identify the window handle the NativeWindow will use. The handle is assign based upon the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_HandleCreated\" data-linktype=\"relative-path\">System.Windows.Forms.Control.HandleCreated</a> and <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_HandleDestroyed\" data-linktype=\"relative-path\">System.Windows.Forms.Control.HandleDestroyed</a> events. When the <code>WM_ACTIVATEAPP</code> window message is received, the class calls the <code>form1``ApplicationActivated</code> method.  </p>\n<p> The <code>MyNativeWindow</code> class creates a new window with the <a class=\"xref\" href=\"system.windows.forms.createparams#System_Windows_Forms_CreateParams_ClassName_\" data-linktype=\"relative-path\">ClassName</a> set to <code>BUTTON</code>. The class demonstrates using the <a class=\"xref\" href=\"system.windows.forms.nativewindow#System_Windows_Forms_NativeWindow_CreateHandle_\" data-linktype=\"relative-path\">CreateHandle</a> method and overriding the <a class=\"xref\" href=\"system.windows.forms.nativewindow#System_Windows_Forms_NativeWindow_WndProc_\" data-linktype=\"relative-path\">WndProc</a> method to intercept window messages that are received.  </p>\n<pre><code class=\"lang-cpp\" name=\"NativeWindow#1\">using namespace System;\nusing namespace System::Drawing;\nusing namespace System::Windows::Forms;\nusing namespace System::Runtime::InteropServices;\nref class MyNativeWindowListener;\nref class MyNativeWindow;\n\n// Summary description for Form1.\nref class Form1: public System::Windows::Forms::Form\n{\nprivate:\n   MyNativeWindowListener^ nwl;\n   MyNativeWindow^ nw;\n\ninternal:\n   void ApplicationActived( bool ApplicationActivated )\n   {\n      // The application has been activated or deactivated\n      #if defined(DEBUG)\n      System::Diagnostics::Debug::WriteLine( &quot;Application Active = {0}&quot;, ApplicationActivated.ToString() );\n      #endif\n   }\n\n\npublic:\n   Form1();\n};\n\n// NativeWindow class to listen to operating system messages.\nref class MyNativeWindowListener: public NativeWindow\n{\nprivate:\n\n   // Constant value was found in the S&quot;windows.h&quot; header file.\n   literal int WM_ACTIVATEAPP = 0x001C;\n   Form1^ parent;\n\npublic:\n   MyNativeWindowListener( Form1^ parent )\n   {\n      parent-&gt;HandleCreated += gcnew EventHandler( this, &amp;MyNativeWindowListener::OnHandleCreated );\n      parent-&gt;HandleDestroyed += gcnew EventHandler( this, &amp;MyNativeWindowListener::OnHandleDestroyed );\n      this-&gt;parent = parent;\n   }\n\ninternal:\n\n   // Listen for the control&#39;s window creation and then hook into it.\n   void OnHandleCreated( Object^ sender, EventArgs^ /*e*/ )\n   {\n      // Window is now created, assign handle to NativeWindow.\n      AssignHandle( (dynamic_cast&lt;Form1^&gt;(sender))-&gt;Handle );\n   }\n\n   void OnHandleDestroyed( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      // Window was destroyed, release hook.\n      ReleaseHandle();\n   }\n\nprotected:\n\n   virtual void WndProc( Message %m ) override\n   {\n      // Listen for operating system messages\n      switch ( m.Msg )\n      {\n         case WM_ACTIVATEAPP:\n\n            // Notify the form that this message was received.\n            // Application is activated or deactivated,\n            // based upon the WParam parameter.\n            parent-&gt;ApplicationActived( ((int)m.WParam != 0) );\n            break;\n      }\n      NativeWindow::WndProc( m );\n   }\n\n};\n\n// MyNativeWindow class to create a window given a class name.\nref class MyNativeWindow: public NativeWindow\n{\nprivate:\n\n   // Constant values were found in the S&quot;windows.h&quot; header file.\n   literal int WS_CHILD = 0x40000000,WS_VISIBLE = 0x10000000,WM_ACTIVATEAPP = 0x001C;\n   int windowHandle;\n\npublic:\n   MyNativeWindow( Form^ parent )\n   {\n      CreateParams^ cp = gcnew CreateParams;\n\n      // Fill in the CreateParams details.\n      cp-&gt;Caption = &quot;Click here&quot;;\n      cp-&gt;ClassName = &quot;Button&quot;;\n\n      // Set the position on the form\n      cp-&gt;X = 100;\n      cp-&gt;Y = 100;\n      cp-&gt;Height = 100;\n      cp-&gt;Width = 100;\n\n      // Specify the form as the parent.\n      cp-&gt;Parent = parent-&gt;Handle;\n\n      // Create as a child of the specified parent\n      cp-&gt;Style = WS_CHILD | WS_VISIBLE;\n\n      // Create the actual window\n      this-&gt;CreateHandle( cp );\n   }\n\nprotected:\n\n   // Listen to when the handle changes to keep the variable in sync\n\n   virtual void OnHandleChange() override\n   {\n      windowHandle = (int)this-&gt;Handle;\n   }\n\n   virtual void WndProc( Message % m ) override\n   {\n      // Listen for messages that are sent to the button window. Some messages are sent\n      // to the parent window instead of the button&#39;s window.\n      switch ( m.Msg )\n      {\n         case WM_ACTIVATEAPP:\n            \n            // Do something here in response to messages\n            break;\n      }\n      NativeWindow::WndProc( m );\n   }\n};\n\nForm1::Form1()\n{\n   this-&gt;Size = System::Drawing::Size( 300, 300 );\n   this-&gt;Text = &quot;Form1&quot;;\n   nwl = gcnew MyNativeWindowListener( this );\n   nw = gcnew MyNativeWindow( this );\n}\n\n// The main entry point for the application.\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew Form1 );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"NativeWindow#1\">using System;\nusing System.Drawing;\nusing System.Windows.Forms;\nusing System.Runtime.InteropServices;\n\nnamespace NativeWindowApplication\n{\n\n    // Summary description for Form1.\n    [System.Security.Permissions.PermissionSet(System.Security.Permissions.SecurityAction.Demand, Name = &quot;FullTrust&quot;)]\n    public class Form1 : System.Windows.Forms.Form\n    {\n        private MyNativeWindowListener nwl;\n        private MyNativeWindow nw;\n\n        internal void ApplicationActivated(bool ApplicationActivated)\n        {\n            // The application has been activated or deactivated\n            System.Diagnostics.Debug.WriteLine(&quot;Application Active = &quot; + ApplicationActivated.ToString());\n        }\n\n        private Form1()\n        {\n            this.Size = new System.Drawing.Size(300, 300);\n            this.Text = &quot;Form1&quot;;\n\n            nwl = new MyNativeWindowListener(this);\n            nw = new MyNativeWindow(this);\n\n        }\n\n        // The main entry point for the application.\n        [STAThread]\n        static void Main()\n        {\n            Application.Run(new Form1());\n        }\n    }\n\n    // NativeWindow class to listen to operating system messages.\n    [System.Security.Permissions.PermissionSet(System.Security.Permissions.SecurityAction.Demand, Name = &quot;FullTrust&quot;)]\n    internal class MyNativeWindowListener : NativeWindow\n    {\n\n        // Constant value was found in the &quot;windows.h&quot; header file.\n        private const int WM_ACTIVATEAPP = 0x001C;\n\n        private Form1 parent;\n\n        public MyNativeWindowListener(Form1 parent)\n        {\n\n            parent.HandleCreated += new EventHandler(this.OnHandleCreated);\n            parent.HandleDestroyed += new EventHandler(this.OnHandleDestroyed);\n            this.parent = parent;\n        }\n\n        // Listen for the control&#39;s window creation and then hook into it.\n        internal void OnHandleCreated(object sender, EventArgs e)\n        {\n            // Window is now created, assign handle to NativeWindow.\n            AssignHandle(((Form1)sender).Handle);\n        }\n        internal void OnHandleDestroyed(object sender, EventArgs e)\n        {\n            // Window was destroyed, release hook.\n            ReleaseHandle();\n        }\n        [System.Security.Permissions.PermissionSet(System.Security.Permissions.SecurityAction.Demand, Name = &quot;FullTrust&quot;)]\n        protected override void WndProc(ref Message m)\n        {\n            // Listen for operating system messages\n\n            switch (m.Msg)\n            {\n                case WM_ACTIVATEAPP:\n\n                    // Notify the form that this message was received.\n                    // Application is activated or deactivated, \n                    // based upon the WParam parameter.\n                    parent.ApplicationActivated(((int)m.WParam != 0));\n\n                    break;\n            }\n            base.WndProc(ref m);\n        }\n    }\n\n    // MyNativeWindow class to create a window given a class name.\n    [System.Security.Permissions.PermissionSet(System.Security.Permissions.SecurityAction.Demand, Name = &quot;FullTrust&quot;)]\n    internal class MyNativeWindow : NativeWindow\n    {\n\n        // Constant values were found in the &quot;windows.h&quot; header file.\n        private const int WS_CHILD = 0x40000000,\n                          WS_VISIBLE = 0x10000000,\n                          WM_ACTIVATEAPP = 0x001C;\n\n        private int windowHandle;\n\n        public MyNativeWindow(Form parent)\n        {\n\n            CreateParams cp = new CreateParams();\n\n            // Fill in the CreateParams details.\n            cp.Caption = &quot;Click here&quot;;\n            cp.ClassName = &quot;Button&quot;;\n\n            // Set the position on the form\n            cp.X = 100;\n            cp.Y = 100;\n            cp.Height = 100;\n            cp.Width = 100;\n\n            // Specify the form as the parent.\n            cp.Parent = parent.Handle;\n\n            // Create as a child of the specified parent\n            cp.Style = WS_CHILD | WS_VISIBLE;\n\n            // Create the actual window\n            this.CreateHandle(cp);\n        }\n\n        // Listen to when the handle changes to keep the variable in sync\n        [System.Security.Permissions.PermissionSet(System.Security.Permissions.SecurityAction.Demand, Name = &quot;FullTrust&quot;)]\n        protected override void OnHandleChange()\n        {\n            windowHandle = (int)this.Handle;\n        }\n\n        [System.Security.Permissions.PermissionSet(System.Security.Permissions.SecurityAction.Demand, Name = &quot;FullTrust&quot;)]\n        protected override void WndProc(ref Message m)\n        {\n            // Listen for messages that are sent to the button window. Some messages are sent\n            // to the parent window instead of the button&#39;s window.\n\n            switch (m.Msg)\n            {\n                case WM_ACTIVATEAPP:\n                    // Do something here in response to messages\n                    break;\n            }\n            base.WndProc(ref m);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"NativeWindow#1\">Imports System\nImports System.Drawing\nImports System.Windows.Forms\nImports System.Runtime.InteropServices\n\n&lt;System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.Demand, Name:=&quot;FullTrust&quot;)&gt; _\nPublic Class Form1\n    Inherits System.Windows.Forms.Form\n\n    Private nwl As MyNativeWindowListener\n    Private nw As MyNativeWindow\n\n    Friend Sub ApplicationActivated(ByVal ApplicationActivated As Boolean)\n        &#39; The application has been activated or deactivated\n        System.Diagnostics.Debug.WriteLine(&quot;Application Active = &quot; + ApplicationActivated.ToString())\n    End Sub\n\n    Private Sub New()\n        MyBase.New()\n\n        Me.Size = New System.Drawing.Size(300, 300)\n        Me.Text = &quot;Form1&quot;\n\n        nwl = New MyNativeWindowListener(Me)\n        nw = New MyNativeWindow(Me)\n\n    End Sub\n\n    Public Shared Sub Main()\n        Application.Run(New Form1())\n    End Sub\nEnd Class\n\n&#39; NativeWindow class to listen to operating system messages.\nFriend Class MyNativeWindowListener\n    Inherits NativeWindow\n\n    &#39; Constant value was found in the &quot;windows.h&quot; header file.\n    Private Const WM_ACTIVATEAPP As Integer = &amp;H1C\n\n    Private parent As Form1\n\n    Public Sub New(ByVal parent As Form1)\n\n        AddHandler parent.HandleCreated, AddressOf Me.OnHandleCreated\n        AddHandler parent.HandleDestroyed, AddressOf Me.OnHandleDestroyed\n        Me.parent = parent\n    End Sub\n\n    &#39; Listen for the control&#39;s window creation and hook into it.    \n    Private Sub OnHandleCreated(ByVal sender As Object, ByVal e As EventArgs)\n        &#39; Window is now created, assign handle to NativeWindow.\n        AssignHandle(CType(sender, Form).Handle)\n    End Sub\n\n    Private Sub OnHandleDestroyed(ByVal sender As Object, ByVal e As EventArgs)\n        &#39; Window was destroyed, release hook.\n        ReleaseHandle()\n    End Sub\n\n    &lt;System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.Demand, Name:=&quot;FullTrust&quot;)&gt; _\n        Protected Overrides Sub WndProc(ByRef m As Message)\n        &#39; Listen for operating system messages\n\n        Select Case (m.Msg)\n            Case WM_ACTIVATEAPP\n\n                &#39; Notify the form that this message was received.\n                &#39; Application is activated or deactivated, \n                &#39; based upon the WParam parameter.\n                parent.ApplicationActivated(m.WParam.ToInt32() &lt;&gt; 0)\n\n        End Select\n\n        MyBase.WndProc(m)\n    End Sub\nEnd Class\n\n&#39; MyNativeWindow class to create a window given a class name.\n&lt;System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.Demand, Name:=&quot;FullTrust&quot;)&gt; _\nFriend Class MyNativeWindow\n    Inherits NativeWindow\n\n    &#39; Constant values were found in the &quot;windows.h&quot; header file.\n    Private Const WS_CHILD As Integer = &amp;H40000000, _\n                  WS_VISIBLE As Integer = &amp;H10000000, _\n                  WM_ACTIVATEAPP As Integer = &amp;H1C\n\n    Private windowHandle As Integer\n\n    Public Sub New(ByVal parent As Form)\n\n        Dim cp As CreateParams = New CreateParams()\n\n        &#39; Fill in the CreateParams details.\n        cp.Caption = &quot;Click here&quot;\n        cp.ClassName = &quot;Button&quot;\n\n        &#39; Set the position on the form\n        cp.X = 100\n        cp.Y = 100\n        cp.Height = 100\n        cp.Width = 100\n\n        &#39; Specify the form as the parent.\n        cp.Parent = parent.Handle\n\n        &#39; Create as a child of the specified parent\n        cp.Style = WS_CHILD Or WS_VISIBLE\n\n        &#39; Create the actual window\n        Me.CreateHandle(cp)\n    End Sub\n\n    &#39; Listen to when the handle changes to keep the variable in sync\n    &lt;System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.Demand, Name:=&quot;FullTrust&quot;)&gt; _\n    Protected Overrides Sub OnHandleChange()\n        windowHandle = Me.Handle.ToInt32()\n    End Sub\n\n    &lt;System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.Demand, Name:=&quot;FullTrust&quot;)&gt; _\n        Protected Overrides Sub WndProc(ByRef m As Message)\n        &#39; Listen for messages that are sent to the button window. Some messages are sent\n        &#39; to the parent window instead of the button&#39;s window.\n\n        Select Case (m.Msg)\n            Case WM_ACTIVATEAPP\n                &#39; Do something here in response to messages\n        End Select\n\n        MyBase.WndProc(m)\n    End Sub\n\nEnd Class\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>This class automatically manages window class creation and registration.  </p>\n<p> A window is not eligible for garbage collection when it is associated with a window handle. To ensure proper garbage collection, handles must either be destroyed manually using <a class=\"xref\" href=\"system.windows.forms.nativewindow#System_Windows_Forms_NativeWindow_DestroyHandle_\" data-linktype=\"relative-path\">DestroyHandle</a> or released using <a class=\"xref\" href=\"system.windows.forms.nativewindow#System_Windows_Forms_NativeWindow_ReleaseHandle_\" data-linktype=\"relative-path\">ReleaseHandle</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.windows.forms.nativewindow#System_Windows_Forms_NativeWindow_ReleaseHandle_\" data-linktype=\"relative-path\">ReleaseHandle</a> method is called when the WM_NCDESTROY message is processed. This means there are cases in which when you do not need to manually call <a class=\"xref\" href=\"system.windows.forms.nativewindow#System_Windows_Forms_NativeWindow_ReleaseHandle_\" data-linktype=\"relative-path\">ReleaseHandle</a>, but it is good practice to do so.  </p>\n</div>\n<p> The NativeWindow class provides the following properties and methods to manage handles: <a class=\"xref\" href=\"system.windows.forms.nativewindow#System_Windows_Forms_NativeWindow_Handle_\" data-linktype=\"relative-path\">Handle</a>, <a class=\"xref\" href=\"system.windows.forms.nativewindow#System_Windows_Forms_NativeWindow_CreateHandle_\" data-linktype=\"relative-path\">CreateHandle</a>, <a class=\"xref\" href=\"system.windows.forms.nativewindow#System_Windows_Forms_NativeWindow_AssignHandle_\" data-linktype=\"relative-path\">AssignHandle</a>, <a class=\"xref\" href=\"system.windows.forms.nativewindow#System_Windows_Forms_NativeWindow_DestroyHandle_\" data-linktype=\"relative-path\">DestroyHandle</a>, and <a class=\"xref\" href=\"system.windows.forms.nativewindow#System_Windows_Forms_NativeWindow_ReleaseHandle_\" data-linktype=\"relative-path\">ReleaseHandle</a>.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_NativeWindow__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">NativeWindow()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes an instance of the <a class=\"xref\" href=\"system.windows.forms.nativewindow\" data-linktype=\"relative-path\">NativeWindow</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public NativeWindow ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This is the default NativeWindow constructor provided by the compiler. The <a class=\"xref\" href=\"system.windows.forms.nativewindow\" data-linktype=\"relative-path\">NativeWindow</a> class also has a static constructor that initializes application domain-wide message handlers and hash tables.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_NativeWindow_Handle\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Handle</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the handle for this window.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public IntPtr Handle { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>If successful, an <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> representing the handle to the associated native Win32 window; otherwise, 0 if no handle is associated with the window.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use this method when calling Windows API methods that require a handle for a window or control.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_NativeWindow_AssignHandle_System_IntPtr_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AssignHandle(IntPtr)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Assigns a handle to this window.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void AssignHandle (IntPtr handle);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>handle</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The handle to assign to this window.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>This window already has a handle.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.win32exception\" data-linktype=\"relative-path\">Win32Exception</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The windows procedure for the associated native window could not be retrieved.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.windows.forms.nativewindow#System_Windows_Forms_NativeWindow_WndProc_\" data-linktype=\"relative-path\">WndProc</a> intercepts window messages sent to the <code>handle</code> parameter. Use <a class=\"xref\" href=\"system.windows.forms.nativewindow#System_Windows_Forms_NativeWindow_ReleaseHandle_\" data-linktype=\"relative-path\">ReleaseHandle</a> to reset the handle&#39;s window procedure to the default window procedure.  </p>\n<p> The AssignHandle method calls the <a class=\"xref\" href=\"system.windows.forms.nativewindow#System_Windows_Forms_NativeWindow_OnHandleChange_\" data-linktype=\"relative-path\">OnHandleChange</a> method to indicate that the value of the <a class=\"xref\" href=\"system.windows.forms.nativewindow#System_Windows_Forms_NativeWindow_Handle_\" data-linktype=\"relative-path\">Handle</a> property has changed.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The handle to assign cannot be in a different application process.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_NativeWindow_CreateHandle_System_Windows_Forms_CreateParams_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CreateHandle(CreateParams)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Creates a window and its handle with the specified creation parameters.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual void CreateHandle (System.Windows.Forms.CreateParams cp);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>cp</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.createparams\" data-linktype=\"relative-path\">CreateParams</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.windows.forms.createparams\" data-linktype=\"relative-path\">CreateParams</a> that specifies the creation parameters for this window.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.outofmemoryexception\" data-linktype=\"relative-path\">OutOfMemoryException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The operating system ran out of resources when trying to create the native window.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.win32exception\" data-linktype=\"relative-path\">Win32Exception</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The native Win32 API could not create the specified window.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The handle of the current native window is already assigned; in explanation, the <span class=\"xref\">stem.Windows.Forms.NativeWindow.Handle*</span> property is not equal to <a class=\"xref\" href=\"system.intptr#System_IntPtr_Zero\" data-linktype=\"relative-path\">Zero</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>cp</code> parameter specifies the values that are passed to the native Win32 <code>CreateWindowEx</code> method to create a window and its handle.  </p>\n<p> When the <a class=\"xref\" href=\"system.windows.forms.createparams#System_Windows_Forms_CreateParams_ClassName_\" data-linktype=\"relative-path\">ClassName</a> field is not <code>null</code>, the newly created window handle inherits from the specified class. For example, if <a class=\"xref\" href=\"system.windows.forms.createparams#System_Windows_Forms_CreateParams_ClassName_\" data-linktype=\"relative-path\">ClassName</a> is set to <code>BUTTON</code>, the newly created window is based on the Win32 <code>BUTTON</code> window class. The <a class=\"xref\" href=\"system.windows.forms.createparams#System_Windows_Forms_CreateParams_Param_\" data-linktype=\"relative-path\">Param</a> property of the <a class=\"xref\" href=\"system.windows.forms.createparams#System_Windows_Forms_CreateParams_ClassName_\" data-linktype=\"relative-path\">ClassName</a> object must either be <code>null</code> or reference an instance of a class that was declared as a structure.  </p>\n<p> This code is an excerpt from the example shown in the <a class=\"xref\" href=\"system.windows.forms.nativewindow\" data-linktype=\"relative-path\">NativeWindow</a> class overview. Some code is not shown for the purpose of brevity. See <a class=\"xref\" href=\"system.windows.forms.nativewindow\" data-linktype=\"relative-path\">NativeWindow</a> for the whole code listing.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The class name provided is registered with the operating system.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_NativeWindow_DefWndProc_System_Windows_Forms_Message__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">DefWndProc(Message)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invokes the default window procedure associated with this window.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void DefWndProc (ref System.Windows.Forms.Message m);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>m</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.message\" data-linktype=\"relative-path\">Message</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The message that is currently being processed.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Typically, you only call the DefWndProc method when you are intercepting window messages and would like the default window procedure to handle the message. DefWndProc should not be called to send a window message to the window; call the Win32 <code>SendMessage</code> function instead.  </p>\n<p> It is an error to call DefWndProc when the <a class=\"xref\" href=\"system.windows.forms.nativewindow#System_Windows_Forms_NativeWindow_Handle_\" data-linktype=\"relative-path\">Handle</a> property is 0.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_NativeWindow_DestroyHandle\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">DestroyHandle()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Destroys the window and its handle.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual void DestroyHandle ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method destroys the window associated with the <a class=\"xref\" href=\"system.windows.forms.nativewindow#System_Windows_Forms_NativeWindow_Handle_\" data-linktype=\"relative-path\">Handle</a>, sets the <a class=\"xref\" href=\"system.windows.forms.nativewindow#System_Windows_Forms_NativeWindow_Handle_\" data-linktype=\"relative-path\">Handle</a> property to 0, and calls the <a class=\"xref\" href=\"system.windows.forms.nativewindow#System_Windows_Forms_NativeWindow_OnHandleChange_\" data-linktype=\"relative-path\">OnHandleChange</a> method to reflect the change. Typically, you only call DestroyHandle when you are done with the native window.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.windows.forms.nativewindow\" data-linktype=\"relative-path\">NativeWindow</a> class automatically will destroy the associated window and release its resources in response to a WM_DESTROY message.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_NativeWindow_Finalize\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Finalize()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Releases the resources associated with this window.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">~NativeWindow ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Finalize method removes the Win32 derived class associated with the current <a class=\"xref\" href=\"system.windows.forms.nativewindow\" data-linktype=\"relative-path\">NativeWindow</a> instance, releases the handle, and posts a WM_CLOSE message to the associated window.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_NativeWindow_FromHandle_System_IntPtr_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FromHandle(IntPtr)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Retrieves the window associated with the specified handle.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Windows.Forms.NativeWindow FromHandle (IntPtr handle);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>handle</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A handle to a window.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.nativewindow\" data-linktype=\"relative-path\">NativeWindow</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.forms.nativewindow\" data-linktype=\"relative-path\">NativeWindow</a> associated with the specified handle. This method returns <code>null</code> when the handle does not have an associated window.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If you receive a handle from another method, use this method to retrieve the window associated with the handle. The handle must already be owned by another <a class=\"xref\" href=\"system.windows.forms.nativewindow\" data-linktype=\"relative-path\">NativeWindow</a> in the current process; otherwise, <code>null</code> is returned.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_NativeWindow_OnHandleChange\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnHandleChange()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Specifies a notification method that is called when the handle for a window is changed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnHandleChange ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is invoked when the value of the <a class=\"xref\" href=\"system.windows.forms.nativewindow#System_Windows_Forms_NativeWindow_Handle_\" data-linktype=\"relative-path\">Handle</a> property has changed.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_NativeWindow_OnThreadException_System_Exception_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnThreadException(Exception)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>When overridden in a derived class, manages an unhandled thread exception.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnThreadException (Exception e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a> that specifies the unhandled thread exception.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Typically, <a class=\"xref\" href=\"system.windows.forms.application#System_Windows_Forms_Application_OnThreadException_\" data-linktype=\"relative-path\">OnThreadException</a> handles thread exceptions.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_NativeWindow_ReleaseHandle\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ReleaseHandle()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Releases the handle associated with this window.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual void ReleaseHandle ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method does not destroy the window handle. Instead, it sets the handle&#39;s window procedure to the default window procedure. It sets the <a class=\"xref\" href=\"system.windows.forms.nativewindow#System_Windows_Forms_NativeWindow_Handle_\" data-linktype=\"relative-path\">Handle</a> property to 0 and calls <a class=\"xref\" href=\"system.windows.forms.nativewindow#System_Windows_Forms_NativeWindow_OnHandleChange_\" data-linktype=\"relative-path\">OnHandleChange</a> to reflect the change.  </p>\n<p> A window automatically calls this method if it receives a native Win32 WM_NCDESTROY message, indicating that Windows has destroyed the handle.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_NativeWindow_WndProc_System_Windows_Forms_Message__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">WndProc(Message)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invokes the default window procedure associated with this window.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void WndProc (ref System.Windows.Forms.Message m);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>m</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.message\" data-linktype=\"relative-path\">Message</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.windows.forms.message\" data-linktype=\"relative-path\">Message</a> that is associated with the current Windows message.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is called when a window message is sent to the handle of the window.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.NativeWindow.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.NativeWindow\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.NativeWindow..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.NativeWindow.AssignHandle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.NativeWindow.CreateHandle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.NativeWindow.DefWndProc\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.NativeWindow.DestroyHandle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.NativeWindow.Finalize\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.NativeWindow.FromHandle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.NativeWindow.Handle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.NativeWindow.OnHandleChange\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.NativeWindow.OnThreadException\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.NativeWindow.ReleaseHandle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.NativeWindow.WndProc\">\r\n<meta name=\"APILocation\" content=\"System.Windows.Forms.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-24 01:41 AM\">\r\n<meta name=\"document_id\" content=\"8d6b5fd2-ac41-96db-7e38-8c1fd3e44905\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a low-level encapsulation of a window handle and a window procedure.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.windows.forms/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.NativeWindow\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.NativeWindow.yml","open_to_public_contributors":false,"api_name":["System.Windows.Forms.NativeWindow","System.Windows.Forms.NativeWindow..ctor","System.Windows.Forms.NativeWindow.AssignHandle","System.Windows.Forms.NativeWindow.CreateHandle","System.Windows.Forms.NativeWindow.DefWndProc","System.Windows.Forms.NativeWindow.DestroyHandle","System.Windows.Forms.NativeWindow.Finalize","System.Windows.Forms.NativeWindow.FromHandle","System.Windows.Forms.NativeWindow.Handle","System.Windows.Forms.NativeWindow.OnHandleChange","System.Windows.Forms.NativeWindow.OnThreadException","System.Windows.Forms.NativeWindow.ReleaseHandle","System.Windows.Forms.NativeWindow.WndProc"],"api_location":["System.Windows.Forms.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.NativeWindow","System::Windows::Forms::NativeWindow","System.Windows.Forms.NativeWindow.#ctor","System::Windows::Forms::NativeWindow::#ctor","System.Windows.Forms.NativeWindow.AssignHandle","System::Windows::Forms::NativeWindow::AssignHandle","System.Windows.Forms.NativeWindow.CreateHandle","System::Windows::Forms::NativeWindow::CreateHandle","System.Windows.Forms.NativeWindow.DefWndProc","System::Windows::Forms::NativeWindow::DefWndProc","System.Windows.Forms.NativeWindow.DestroyHandle","System::Windows::Forms::NativeWindow::DestroyHandle","System.Windows.Forms.NativeWindow.Finalize","System::Windows::Forms::NativeWindow::Finalize","System.Windows.Forms.NativeWindow.FromHandle","System::Windows::Forms::NativeWindow::FromHandle","System.Windows.Forms.NativeWindow.Handle","System::Windows::Forms::NativeWindow::Handle","System.Windows.Forms.NativeWindow.OnHandleChange","System::Windows::Forms::NativeWindow::OnHandleChange","System.Windows.Forms.NativeWindow.OnThreadException","System::Windows::Forms::NativeWindow::OnThreadException","System.Windows.Forms.NativeWindow.ReleaseHandle","System::Windows::Forms::NativeWindow::ReleaseHandle","System.Windows.Forms.NativeWindow.WndProc","System::Windows::Forms::NativeWindow::WndProc"],"dev_langs":["csharp"],"updated_at":"2017-03-24 01:41 AM","document_id":"8d6b5fd2-ac41-96db-7e38-8c1fd3e44905","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/NativeWindow.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"NativeWindow class | Microsoft Docs","_op_ogTitle":"NativeWindow class","description":"Provides a low-level encapsulation of a window handle and a window procedure.\n","toc_asset_id":"api/_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.NativeWindow","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.nativewindow","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.nativewindow","fileRelativePath":"api/System.Windows.Forms.NativeWindow.html"},"themesRelativePathToOutputRoot":"_themes/"}