{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ParallelLoopState</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Enables iterations of parallel loops to interact with other iterations. An instance of this class is provided by the <a class=\"xref\" href=\"system.threading.tasks.parallel\" data-linktype=\"relative-path\">Parallel</a> class to each loop; you can not create instances in your code.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Diagnostics.DebuggerDisplay(&quot;ShouldExitCurrentIteration = {ShouldExitCurrentIteration}&quot;)]\npublic class ParallelLoopState</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">ParallelLoopState</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.diagnostics.debuggerdisplayattribute\" title=\"System.Diagnostics.DebuggerDisplayAttribute\" data-linktype=\"relative-path\">DebuggerDisplayAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example executes up to 100 iterations of a loop in parallel. Each iteration pauses for a random interval from 1 to 1,000 milliseconds. A randomly generated value determines on which iteration of the loop the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_Break_\" data-linktype=\"relative-path\">Break</a> method is called. As the output from the example shows, no iterations whose index is greater than the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_LowestBreakIteration_\" data-linktype=\"relative-path\">LowestBreakIteration</a> property value start after the call to the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_Break_\" data-linktype=\"relative-path\">Break</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.ParallelLoopState#2\">using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var rnd = new Random();\n      int breakIndex = rnd.Next(1, 11);\n      Nullable&lt;long&gt; lowest = new Nullable&lt;long&gt;();\n\n      Console.WriteLine(&quot;Will call Break at iteration {0}\\n&quot;,\n                        breakIndex);\n\n      var result = Parallel.For(1, 101, (i, state) =&gt; {\n                                            Console.WriteLine(&quot;Beginning iteration {0}&quot;, i);\n                                            int delay;\n                                            Monitor.Enter(rnd);\n                                               delay = rnd.Next(1, 1001);\n                                            Monitor.Exit(rnd);\n                                            Thread.Sleep(delay);\n                                            \n                                            if (state.ShouldExitCurrentIteration) {\n                                               if (state.LowestBreakIteration &lt; i)\n                                                  return;\n                                            }\n\n                                            if (i == breakIndex) {\n                                               Console.WriteLine(&quot;Break in iteration {0}&quot;, i);\n                                               state.Break();\n                                               if (state.LowestBreakIteration.HasValue)\n                                                  if (lowest &lt; state.LowestBreakIteration)\n                                                     lowest = state.LowestBreakIteration;\n                                                  else\n                                                     lowest = state.LowestBreakIteration;\n                                            }\n\n                                            Console.WriteLine(&quot;Completed iteration {0}&quot;, i);\n                                       });\n         if (lowest.HasValue)\n            Console.WriteLine(&quot;\\nLowest Break Iteration: {0}&quot;, lowest);\n         else\n            Console.WriteLine(&quot;\\nNo lowest break iteration.&quot;);\n   }\n}\n// The example displays output like the following:\n//       Will call Break at iteration 8\n//\n//       Beginning iteration 1\n//       Beginning iteration 13\n//       Beginning iteration 97\n//       Beginning iteration 25\n//       Beginning iteration 49\n//       Beginning iteration 37\n//       Beginning iteration 85\n//       Beginning iteration 73\n//       Beginning iteration 61\n//       Completed iteration 85\n//       Beginning iteration 86\n//       Completed iteration 61\n//       Beginning iteration 62\n//       Completed iteration 86\n//       Beginning iteration 87\n//       Completed iteration 37\n//       Beginning iteration 38\n//       Completed iteration 38\n//       Beginning iteration 39\n//       Completed iteration 25\n//       Beginning iteration 26\n//       Completed iteration 26\n//       Beginning iteration 27\n//       Completed iteration 73\n//       Beginning iteration 74\n//       Completed iteration 62\n//       Beginning iteration 63\n//       Completed iteration 39\n//       Beginning iteration 40\n//       Completed iteration 40\n//       Beginning iteration 41\n//       Completed iteration 13\n//       Beginning iteration 14\n//       Completed iteration 1\n//       Beginning iteration 2\n//       Completed iteration 97\n//       Beginning iteration 98\n//       Completed iteration 49\n//       Beginning iteration 50\n//       Completed iteration 87\n//       Completed iteration 27\n//       Beginning iteration 28\n//       Completed iteration 50\n//       Beginning iteration 51\n//       Beginning iteration 88\n//       Completed iteration 14\n//       Beginning iteration 15\n//       Completed iteration 15\n//       Completed iteration 2\n//       Beginning iteration 3\n//       Beginning iteration 16\n//       Completed iteration 63\n//       Beginning iteration 64\n//       Completed iteration 74\n//       Beginning iteration 75\n//       Completed iteration 41\n//       Beginning iteration 42\n//       Completed iteration 28\n//       Beginning iteration 29\n//       Completed iteration 29\n//       Beginning iteration 30\n//       Completed iteration 98\n//       Beginning iteration 99\n//       Completed iteration 64\n//       Beginning iteration 65\n//       Completed iteration 42\n//       Beginning iteration 43\n//       Completed iteration 88\n//       Beginning iteration 89\n//       Completed iteration 51\n//       Beginning iteration 52\n//       Completed iteration 16\n//       Beginning iteration 17\n//       Completed iteration 43\n//       Beginning iteration 44\n//       Completed iteration 44\n//       Beginning iteration 45\n//       Completed iteration 99\n//       Beginning iteration 4\n//       Completed iteration 3\n//       Beginning iteration 8\n//       Completed iteration 4\n//       Beginning iteration 5\n//       Completed iteration 52\n//       Beginning iteration 53\n//       Completed iteration 75\n//       Beginning iteration 76\n//       Completed iteration 76\n//       Beginning iteration 77\n//       Completed iteration 65\n//       Beginning iteration 66\n//       Completed iteration 5\n//       Beginning iteration 6\n//       Completed iteration 89\n//       Beginning iteration 90\n//       Completed iteration 30\n//       Beginning iteration 31\n//       Break in iteration 8\n//       Completed iteration 8\n//       Completed iteration 6\n//       Beginning iteration 7\n//       Completed iteration 7\n//\n//       Lowest Break Iteration: 8\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.ParallelLoopState#2\">Imports System.Threading\nImports System.Threading.Tasks\n\nModule Example\n   Public Sub Main()\n      Dim rnd As New Random()\n      Dim breakIndex As Integer = rnd.Next(1, 11)\n      Dim lowest As New Nullable(Of Long)()\n\n      Console.WriteLine(&quot;Will call Break at iteration {0}&quot;, breakIndex)\n      Console.WriteLine()\n\n      Dim result = Parallel.For(1, 101, Sub(i, state)\n                                            Console.WriteLine(&quot;Beginning iteration {0}&quot;, i)\n                                            Dim delay As Integer\n                                            Monitor.Enter(rnd)\n                                               delay = rnd.Next(1, 1001)\n                                            Monitor.Exit(rnd)\n                                            Thread.Sleep(delay)\n\n                                            If state.ShouldExitCurrentIteration Then\n                                               If state.LowestBreakIteration &lt; i Then\n                                                  Return\n                                               End If\n                                            End If\n\n                                            If i = breakIndex Then\n                                               Console.WriteLine(&quot;Break in iteration {0}&quot;, i)\n                                               state.Break()\n                                               If state.LowestBreakIteration.HasValue Then\n                                                  If lowest &lt; state.LowestBreakIteration Then\n                                                     lowest = state.LowestBreakIteration\n                                                  Else\n                                                     lowest = state.LowestBreakIteration\n                                                  End If\n                                               End If\n                                            End If\n\n                                            Console.WriteLine(&quot;Completed iteration {0}&quot;, i)\n                                       End Sub )\n         Console.WriteLine()\n         If lowest.HasValue Then\n            Console.WriteLine(&quot;Lowest Break Iteration: {0}&quot;, lowest)\n         Else\n            Console.WriteLine(&quot;No lowest break iteration.&quot;)\n         End If\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       Will call Break at iteration 8\n&#39;\n&#39;       Beginning iteration 1\n&#39;       Beginning iteration 13\n&#39;       Beginning iteration 97\n&#39;       Beginning iteration 25\n&#39;       Beginning iteration 49\n&#39;       Beginning iteration 37\n&#39;       Beginning iteration 85\n&#39;       Beginning iteration 73\n&#39;       Beginning iteration 61\n&#39;       Completed iteration 85\n&#39;       Beginning iteration 86\n&#39;       Completed iteration 61\n&#39;       Beginning iteration 62\n&#39;       Completed iteration 86\n&#39;       Beginning iteration 87\n&#39;       Completed iteration 37\n&#39;       Beginning iteration 38\n&#39;       Completed iteration 38\n&#39;       Beginning iteration 39\n&#39;       Completed iteration 25\n&#39;       Beginning iteration 26\n&#39;       Completed iteration 26\n&#39;       Beginning iteration 27\n&#39;       Completed iteration 73\n&#39;       Beginning iteration 74\n&#39;       Completed iteration 62\n&#39;       Beginning iteration 63\n&#39;       Completed iteration 39\n&#39;       Beginning iteration 40\n&#39;       Completed iteration 40\n&#39;       Beginning iteration 41\n&#39;       Completed iteration 13\n&#39;       Beginning iteration 14\n&#39;       Completed iteration 1\n&#39;       Beginning iteration 2\n&#39;       Completed iteration 97\n&#39;       Beginning iteration 98\n&#39;       Completed iteration 49\n&#39;       Beginning iteration 50\n&#39;       Completed iteration 87\n&#39;       Completed iteration 27\n&#39;       Beginning iteration 28\n&#39;       Completed iteration 50\n&#39;       Beginning iteration 51\n&#39;       Beginning iteration 88\n&#39;       Completed iteration 14\n&#39;       Beginning iteration 15\n&#39;       Completed iteration 15\n&#39;       Completed iteration 2\n&#39;       Beginning iteration 3\n&#39;       Beginning iteration 16\n&#39;       Completed iteration 63\n&#39;       Beginning iteration 64\n&#39;       Completed iteration 74\n&#39;       Beginning iteration 75\n&#39;       Completed iteration 41\n&#39;       Beginning iteration 42\n&#39;       Completed iteration 28\n&#39;       Beginning iteration 29\n&#39;       Completed iteration 29\n&#39;       Beginning iteration 30\n&#39;       Completed iteration 98\n&#39;       Beginning iteration 99\n&#39;       Completed iteration 64\n&#39;       Beginning iteration 65\n&#39;       Completed iteration 42\n&#39;       Beginning iteration 43\n&#39;       Completed iteration 88\n&#39;       Beginning iteration 89\n&#39;       Completed iteration 51\n&#39;       Beginning iteration 52\n&#39;       Completed iteration 16\n&#39;       Beginning iteration 17\n&#39;       Completed iteration 43\n&#39;       Beginning iteration 44\n&#39;       Completed iteration 44\n&#39;       Beginning iteration 45\n&#39;       Completed iteration 99\n&#39;       Beginning iteration 4\n&#39;       Completed iteration 3\n&#39;       Beginning iteration 8\n&#39;       Completed iteration 4\n&#39;       Beginning iteration 5\n&#39;       Completed iteration 52\n&#39;       Beginning iteration 53\n&#39;       Completed iteration 75\n&#39;       Beginning iteration 76\n&#39;       Completed iteration 76\n&#39;       Beginning iteration 77\n&#39;       Completed iteration 65\n&#39;       Beginning iteration 66\n&#39;       Completed iteration 5\n&#39;       Beginning iteration 6\n&#39;       Completed iteration 89\n&#39;       Beginning iteration 90\n&#39;       Completed iteration 30\n&#39;       Beginning iteration 31\n&#39;       Break in iteration 8\n&#39;       Completed iteration 8\n&#39;       Completed iteration 6\n&#39;       Beginning iteration 7\n&#39;       Completed iteration 7\n&#39;\n&#39;       Lowest Break Iteration: 8\n</code></pre><p> Because iterations of the loop are still likely to be executing when the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_Break_\" data-linktype=\"relative-path\">Break</a> method is called, each iteration calls the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_ShouldExitCurrentIteration_\" data-linktype=\"relative-path\">ShouldExitCurrentIteration</a> property to check whether another iteration has called the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_Break_\" data-linktype=\"relative-path\">Break</a> method. If  the property value is <code>true</code>, the iteration checks the value of the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_LowestBreakIteration_\" data-linktype=\"relative-path\">LowestBreakIteration</a> property and, if it is greater than the current iteration&#39;s index value, returns immediately.</p>\n\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Note that you cannot instantiate an instance of this class. It is automatically generated by the compiler as an argument in a call to the <a class=\"xref\" href=\"system.threading.tasks.parallel#System_Threading_Tasks_Parallel_For_\" data-linktype=\"relative-path\">For</a> or <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/ee835497(v=vs.110).aspx\" data-linktype=\"external\">Parallel.ForEach</a> method. The example provides an illustration.  </p>\n<p> Constructs such as <code>for</code> and <code>foreach</code> (in C#) and <code>For</code> and <code>For Each</code> (in Visual Basic) execute sequentially from the lowest index to the highest or from the first object in a set to the last. In contrast, the <a class=\"xref\" href=\"system.threading.tasks.parallel#System_Threading_Tasks_Parallel_For_\" data-linktype=\"relative-path\">For</a> and <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/ee835497(v=vs.110).aspx\" data-linktype=\"external\">Parallel.ForEach</a> methods do not. Because individual iterations of the loop run in parallel, they can begin and end in any order. The ParallelLoopState class allows individual iterations of parallel loops to interact with one another. The ParallelLoopState class allows you to:  </p>\n<ul>\n<li><p>Exit the current iteration and prevent any additional iterations from starting by calling the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_Stop_\" data-linktype=\"relative-path\">Stop</a> method. This does not affect iterations that have already begun execution.  </p>\n</li>\n<li><p>Prevent any iterations with an index greater than the current index from executing by calling the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_Break_\" data-linktype=\"relative-path\">Break</a> method. This does not affect iterations that have already begun execution.  </p>\n</li>\n<li><p>Determine whether an exception has occurred in any loop iteration by retrieving the value of the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_IsExceptional_\" data-linktype=\"relative-path\">IsExceptional</a> property.  </p>\n</li>\n<li><p>Determine whether any iteration of the loop has called the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_Stop_\" data-linktype=\"relative-path\">Stop</a> method by retrieving the value of the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_IsStopped_\" data-linktype=\"relative-path\">IsStopped</a> property. You can use this property to return from iterations of the loop that started before the call to the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_Stop_\" data-linktype=\"relative-path\">Stop</a> method but are still executing.  </p>\n</li>\n<li><p>Determine whether any iteration of the loop has called the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_Break_\" data-linktype=\"relative-path\">Break</a> or <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_Stop_\" data-linktype=\"relative-path\">Stop</a>method or has thrown an exception by retrieving the value of the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_ShouldExitCurrentIteration_\" data-linktype=\"relative-path\">ShouldExitCurrentIteration</a> property.  </p>\n</li>\n<li><p>Exit from a long-running iteration whose index is greater than the index of an iteration in which Break was called by retrieving the value of the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_LowestBreakIteration_\" data-linktype=\"relative-path\">LowestBreakIteration</a> property.</p>\n</li>\n</ul>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Threading_Tasks_ParallelLoopState_IsExceptional_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Tasks_ParallelLoopState_IsExceptional\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsExceptional</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets whether any iteration of the loop has thrown an exception that went unhandled by that iteration.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsExceptional { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if an unhandled exception was thrown; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.diagnostics.debuggerdisplayattribute\" title=\"System.Diagnostics.DebuggerDisplayAttribute\" data-linktype=\"relative-path\">DebuggerDisplayAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Threading_Tasks_ParallelLoopState_IsStopped_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Tasks_ParallelLoopState_IsStopped\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsStopped</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets whether any iteration of the loop has called the <span class=\"xref\">stem.Threading.Tasks.ParallelLoopState.Stop*</span> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsStopped { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if any iteration has stopped the loop by calling the <span class=\"xref\">stem.Threading.Tasks.ParallelLoopState.Stop*</span> method; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.diagnostics.debuggerdisplayattribute\" title=\"System.Diagnostics.DebuggerDisplayAttribute\" data-linktype=\"relative-path\">DebuggerDisplayAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>For long-running iterations of the loop, you can retrieve the value of the IsStopped property to determine whether any iterations of the loop that began execution before the call to the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_Stop_\" data-linktype=\"relative-path\">Stop</a> method are still executing. You can then use the value of the IsStopped property to determine whether they should return immediately or execute normally.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Threading_Tasks_ParallelLoopState_LowestBreakIteration_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Tasks_ParallelLoopState_LowestBreakIteration\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LowestBreakIteration</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the lowest iteration of the loop from which <span class=\"xref\">stem.Threading.Tasks.ParallelLoopState.Break*</span> was called.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Nullable&lt;long&gt; LowestBreakIteration { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.nullable-1\" data-linktype=\"relative-path\">Nullable</a>&lt;<a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The lowest iteration from which <span class=\"xref\">stem.Threading.Tasks.ParallelLoopState.Break*</span> was called. In the case of a <span class=\"xref\">stem.Threading.Tasks.Parallel.ForEach*</span> loop, the value is based on an internally-generated index.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.diagnostics.debuggerdisplayattribute\" title=\"System.Diagnostics.DebuggerDisplayAttribute\" data-linktype=\"relative-path\">DebuggerDisplayAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>It is possible for multiple iterations of a parallel loop to call the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_Break_\" data-linktype=\"relative-path\">Break</a> method. If they do, this value is the smallest index of an iteration that called <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_Break_\" data-linktype=\"relative-path\">Break</a>. If no iteration of the loop called <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_Break_\" data-linktype=\"relative-path\">Break</a>, this property returns <code>null</code>. Note that the property value is unaffected by calls to the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_Stop_\" data-linktype=\"relative-path\">Stop</a> method.  </p>\n<p> In long-running iterations in which all iterations after the iteration that calls the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_Break_\" data-linktype=\"relative-path\">Break</a> method need not run, the LowestBreakIteration property is used to terminate iterations that began execution before the call to the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_Break_\" data-linktype=\"relative-path\">Break</a> method. To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:  </p>\n<ol>\n<li><p>Check whether the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_ShouldExitCurrentIteration_\" data-linktype=\"relative-path\">ShouldExitCurrentIteration</a> property is <code>true</code>.  </p>\n</li>\n<li><p>Exit from the iteration if its index is greater than the LowestBreakIteration property value.  </p>\n<p>The example provides an illustration.</p>\n</li>\n</ol>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Threading_Tasks_ParallelLoopState_ShouldExitCurrentIteration_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Tasks_ParallelLoopState_ShouldExitCurrentIteration\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ShouldExitCurrentIteration</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets whether the current iteration of the loop should exit based on requests made by this or other iterations.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool ShouldExitCurrentIteration { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the current iteration should exit; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.diagnostics.debuggerdisplayattribute\" title=\"System.Diagnostics.DebuggerDisplayAttribute\" data-linktype=\"relative-path\">DebuggerDisplayAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The ShouldExitCurrentIteration property is set to <code>true</code> under any of the following conditions:  </p>\n<ul>\n<li><p>An iteration of the loop calls <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_Break_\" data-linktype=\"relative-path\">Break</a> or <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_Stop_\" data-linktype=\"relative-path\">Stop</a>.  </p>\n</li>\n<li><p>An iteration of the loop throws an exception.  </p>\n</li>\n<li><p>The loop is canceled.  </p>\n<p>When this property is <code>true</code>, the <a class=\"xref\" href=\"system.threading.tasks.parallel\" data-linktype=\"relative-path\">Parallel</a> class will proactively attempt to prohibit additional iterations of the loop from starting execution. However, there may be cases where it is unable to prevent additional iterations from starting.  </p>\n<p>It may also be the case that a long-running iteration has already begun execution. In such cases, iterations may explicitly check the ShouldExitCurrentIteration property and cease execution if the property returns <code>true</code>.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Threading_Tasks_ParallelLoopState_Break_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Tasks_ParallelLoopState_Break\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Break()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Communicates that the <a class=\"xref\" href=\"system.threading.tasks.parallel\" data-linktype=\"relative-path\">Parallel</a> loop should cease execution of iterations beyond the current iteration at the system&#39;s earliest convenience.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Break ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.diagnostics.debuggerdisplayattribute\" title=\"System.Diagnostics.DebuggerDisplayAttribute\" data-linktype=\"relative-path\">DebuggerDisplayAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <span class=\"xref\">stem.Threading.Tasks.ParallelLoopState.Stop*</span> method was previously called. Break and <span class=\"xref\">stem.Threading.Tasks.ParallelLoopState.Stop*</span> may not be used in combination by iterations of the same loop.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Break indicates that no iterations after the current iteration should be run. It effectively cancels any additional iterations of the loop. However, it does not stop any iterations that have already begun execution. For example, if Break is called from the 100th iteration of a parallel loop iterating from 0 to 1,000, all iterations less than 100 should still be run, but the iterations from 101 through to 1000 that have not yet started are not executed.  </p>\n<p> For long-running iterations that may already be executing, Break sets the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_LowestBreakIteration_\" data-linktype=\"relative-path\">LowestBreakIteration</a> property to the current iteration&#39;s index if the current index is less than the current value of <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_LowestBreakIteration_\" data-linktype=\"relative-path\">LowestBreakIteration</a>. To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:  </p>\n<ol>\n<li><p>Check whether the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_ShouldExitCurrentIteration_\" data-linktype=\"relative-path\">ShouldExitCurrentIteration</a> property is <code>true</code>.  </p>\n</li>\n<li><p>Exit from the iteration if its index is greater than the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_LowestBreakIteration_\" data-linktype=\"relative-path\">LowestBreakIteration</a> property value.  </p>\n<p>The example provides an illustration.  </p>\n<p>Break is typically employed in search-based algorithms where an ordering is present in the data source.</p>\n</li>\n</ol>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Threading_Tasks_ParallelLoopState_Stop_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_Tasks_ParallelLoopState_Stop\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Stop()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Communicates that the <a class=\"xref\" href=\"system.threading.tasks.parallel\" data-linktype=\"relative-path\">Parallel</a> loop should cease execution at the system&#39;s earliest convenience.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Stop ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.diagnostics.debuggerdisplayattribute\" title=\"System.Diagnostics.DebuggerDisplayAttribute\" data-linktype=\"relative-path\">DebuggerDisplayAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <span class=\"xref\">stem.Threading.Tasks.ParallelLoopState.Break*</span> method was called previously. <span class=\"xref\">stem.Threading.Tasks.ParallelLoopState.Break*</span> and Stop may not be used in combination by iterations of the same loop.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Calling the Stop method indicates that any iterations of the loop that have not yet started need not be run. It effectively cancels any additional iterations of the loop. However, it does not stop any iterations that have already begun execution.  </p>\n<p> Calling the Stop method causes the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_IsStopped_\" data-linktype=\"relative-path\">IsStopped</a> property to return <code>true</code> for any iteration of the loop that is still executing. This is particularly useful for long-running iterations, which can check the <a class=\"xref\" href=\"system.threading.tasks.parallelloopstate#System_Threading_Tasks_ParallelLoopState_IsStopped_\" data-linktype=\"relative-path\">IsStopped</a> property and exit early if its value is <code>true</code>.  </p>\n<p> Stop is typically employed in search-based algorithms, where once a result is found, no other iterations need be executed.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \t<h2 class=\"accented\">Thread Safety</h2>\r\n  \tA ParallelLoopState instance is meant to be used only within the body of the loop to which an instance was provided.  It is not safe to use a provided ParallelLoopState instance after the associated loop ends, nor is it safe to explicitly hand it off to other threads and have those threads access it at any time.  A different ParallelLoopState instance will be provided to each thread involved in a loop.\r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Threading.Tasks.ParallelLoopState.yml\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.ParallelLoopState\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.ParallelLoopState.Break\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.ParallelLoopState.IsExceptional\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.ParallelLoopState.IsStopped\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.ParallelLoopState.Stop\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:59 PM\">\r\n<meta name=\"document_id\" content=\"6e47f09c-5494-c454-f2a2-b428a7bba351\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Enables iterations of parallel loops to interact with other iterations. An instance of this class is provided by the  class to each loop; you can not create instances in your code.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.threading.tasks/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Threading.Tasks.ParallelLoopState\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","uhfHeaderId":"MSDocsHeader-DotNet","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Threading.Tasks.ParallelLoopState.yml","open_to_public_contributors":false,"api_name":["System.Threading.Tasks.ParallelLoopState","System.Threading.Tasks.ParallelLoopState.Break","System.Threading.Tasks.ParallelLoopState.IsExceptional","System.Threading.Tasks.ParallelLoopState.IsStopped","System.Threading.Tasks.ParallelLoopState.LowestBreakIteration","System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration","System.Threading.Tasks.ParallelLoopState.Stop"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Threading.Tasks.ParallelLoopState","System::Threading::Tasks::ParallelLoopState","System.Threading.Tasks.ParallelLoopState.Break","System::Threading::Tasks::ParallelLoopState::Break","System.Threading.Tasks.ParallelLoopState.IsExceptional","System::Threading::Tasks::ParallelLoopState::IsExceptional","System.Threading.Tasks.ParallelLoopState.IsStopped","System::Threading::Tasks::ParallelLoopState::IsStopped","System.Threading.Tasks.ParallelLoopState.LowestBreakIteration","System::Threading::Tasks::ParallelLoopState::LowestBreakIteration","System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration","System::Threading::Tasks::ParallelLoopState::ShouldExitCurrentIteration","System.Threading.Tasks.ParallelLoopState.Stop","System::Threading::Tasks::ParallelLoopState::Stop"],"dev_langs":["csharp"],"updated_at":"2017-04-01 05:59 PM","document_id":"6e47f09c-5494-c454-f2a2-b428a7bba351","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Threading.Tasks/ParallelLoopState.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ParallelLoopState class | Microsoft Docs","_op_ogTitle":"ParallelLoopState class","description":"Enables iterations of parallel loops to interact with other iterations. An instance of this class is provided by the  class to each loop; you can not create instances in your code.\n","toc_asset_id":"api/_splitted/System.Threading.Tasks/toc.json","toc_rel":"_splitted/System.Threading.Tasks/toc.json","source_url":"","ms.assetid":"System.Threading.Tasks.ParallelLoopState","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.parallelloopstate","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.parallelloopstate","fileRelativePath":"api/System.Threading.Tasks.ParallelLoopState.html"},"themesRelativePathToOutputRoot":"_themes/"}