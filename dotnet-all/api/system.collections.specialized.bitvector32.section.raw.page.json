{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">BitVector32.Section</span>\r\n      Struct\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents a section of the vector that can contain an integer number.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public struct BitVector32.Section</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><span class=\"lang-csharp\">BitVector32.Section</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example uses a <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> as a collection of sections.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Collections.Specialized.BitVector32_Sections#1\">#using &lt;system.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections::Specialized;\n\nint main()\n{\n   // Creates and initializes a BitVector32.\n   BitVector32 myBV(0);\n\n   // Creates four sections in the BitVector32 with maximum values 6, 3, 1, and 15.\n   // mySect3, which uses exactly one bit, can also be used as a bit flag.\n   BitVector32::Section mySect1 = BitVector32::CreateSection( 6 );\n   BitVector32::Section mySect2 = BitVector32::CreateSection( 3, mySect1 );\n   BitVector32::Section mySect3 = BitVector32::CreateSection( 1, mySect2 );\n   BitVector32::Section mySect4 = BitVector32::CreateSection( 15, mySect3 );\n\n   // Displays the values of the sections.\n   Console::WriteLine( &quot;Initial values:&quot; );\n   Console::WriteLine( &quot;\\tmySect1: {0}&quot;, myBV[ mySect1 ] );\n   Console::WriteLine( &quot;\\tmySect2: {0}&quot;, myBV[ mySect2 ] );\n   Console::WriteLine( &quot;\\tmySect3: {0}&quot;, myBV[ mySect3 ] );\n   Console::WriteLine( &quot;\\tmySect4: {0}&quot;, myBV[ mySect4 ] );\n\n   // Sets each section to a new value and displays the value of the BitVector32 at each step.\n   Console::WriteLine( &quot;Changing the values of each section:&quot; );\n   Console::WriteLine( &quot;\\tInitial:    \\t {0}&quot;, myBV );\n   myBV[ mySect1 ] = 5;\n   Console::WriteLine( &quot;\\tmySect1 = 5:\\t {0}&quot;, myBV );\n   myBV[ mySect2 ] = 3;\n   Console::WriteLine( &quot;\\tmySect2 = 3:\\t {0}&quot;, myBV );\n   myBV[ mySect3 ] = 1;\n   Console::WriteLine( &quot;\\tmySect3 = 1:\\t {0}&quot;, myBV );\n   myBV[ mySect4 ] = 9;\n   Console::WriteLine( &quot;\\tmySect4 = 9:\\t {0}&quot;, myBV );\n\n   // Displays the values of the sections.\n   Console::WriteLine( &quot;New values:&quot; );\n   Console::WriteLine( &quot;\\tmySect1: {0}&quot;, myBV[ mySect1 ] );\n   Console::WriteLine( &quot;\\tmySect2: {0}&quot;, myBV[ mySect2 ] );\n   Console::WriteLine( &quot;\\tmySect3: {0}&quot;, myBV[ mySect3 ] );\n   Console::WriteLine( &quot;\\tmySect4: {0}&quot;, myBV[ mySect4 ] );\n}\n\n/*\nThis code produces the following output.\n\nInitial values:\n        mySect1: 0\n        mySect2: 0\n        mySect3: 0\n        mySect4: 0\nChanging the values of each section:\n        Initial:        BitVector32 {00000000000000000000000000000000}\n        mySect1 = 5:    BitVector32 {00000000000000000000000000000101}\n        mySect2 = 3:    BitVector32 {00000000000000000000000000011101}\n        mySect3 = 1:    BitVector32 {00000000000000000000000000111101}\n        mySect4 = 9:    BitVector32 {00000000000000000000001001111101}\nNew values:\n        mySect1: 5\n        mySect2: 3\n        mySect3: 1\n        mySect4: 9\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Collections.Specialized.BitVector32_Sections#1\">using System;\nusing System.Collections.Specialized;\n\n\npublic class SamplesBitVector32  {\n\n   public static void Main()  {\n\n      // Creates and initializes a BitVector32.\n      BitVector32 myBV = new BitVector32( 0 );\n\n      // Creates four sections in the BitVector32 with maximum values 6, 3, 1, and 15.\n      // mySect3, which uses exactly one bit, can also be used as a bit flag.\n      BitVector32.Section mySect1 = BitVector32.CreateSection( 6 );\n      BitVector32.Section mySect2 = BitVector32.CreateSection( 3, mySect1 );\n      BitVector32.Section mySect3 = BitVector32.CreateSection( 1, mySect2 );\n      BitVector32.Section mySect4 = BitVector32.CreateSection( 15, mySect3 );\n\n      // Displays the values of the sections.\n      Console.WriteLine( &quot;Initial values:&quot; );\n      Console.WriteLine( &quot;\\tmySect1: {0}&quot;, myBV[mySect1] );\n      Console.WriteLine( &quot;\\tmySect2: {0}&quot;, myBV[mySect2] );\n      Console.WriteLine( &quot;\\tmySect3: {0}&quot;, myBV[mySect3] );\n      Console.WriteLine( &quot;\\tmySect4: {0}&quot;, myBV[mySect4] );\n\n      // Sets each section to a new value and displays the value of the BitVector32 at each step.\n      Console.WriteLine( &quot;Changing the values of each section:&quot; );\n      Console.WriteLine( &quot;\\tInitial:    \\t{0}&quot;, myBV.ToString() );\n      myBV[mySect1] = 5;\n      Console.WriteLine( &quot;\\tmySect1 = 5:\\t{0}&quot;, myBV.ToString() );\n      myBV[mySect2] = 3;\n      Console.WriteLine( &quot;\\tmySect2 = 3:\\t{0}&quot;, myBV.ToString() );\n      myBV[mySect3] = 1;\n      Console.WriteLine( &quot;\\tmySect3 = 1:\\t{0}&quot;, myBV.ToString() );\n      myBV[mySect4] = 9;\n      Console.WriteLine( &quot;\\tmySect4 = 9:\\t{0}&quot;, myBV.ToString() );\n\n      // Displays the values of the sections.\n      Console.WriteLine( &quot;New values:&quot; );\n      Console.WriteLine( &quot;\\tmySect1: {0}&quot;, myBV[mySect1] );\n      Console.WriteLine( &quot;\\tmySect2: {0}&quot;, myBV[mySect2] );\n      Console.WriteLine( &quot;\\tmySect3: {0}&quot;, myBV[mySect3] );\n      Console.WriteLine( &quot;\\tmySect4: {0}&quot;, myBV[mySect4] );\n\n   }\n\n}\n\n/*\nThis code produces the following output.\n\nInitial values:\n        mySect1: 0\n        mySect2: 0\n        mySect3: 0\n        mySect4: 0\nChanging the values of each section:\n        Initial:        BitVector32{00000000000000000000000000000000}\n        mySect1 = 5:    BitVector32{00000000000000000000000000000101}\n        mySect2 = 3:    BitVector32{00000000000000000000000000011101}\n        mySect3 = 1:    BitVector32{00000000000000000000000000111101}\n        mySect4 = 9:    BitVector32{00000000000000000000001001111101}\nNew values:\n        mySect1: 5\n        mySect2: 3\n        mySect3: 1\n        mySect4: 9\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Specialized.BitVector32_Sections#1\">Imports System\nImports System.Collections.Specialized\n\nPublic Class SamplesBitVector32\n   \n   Public Shared Sub Main()\n      \n      &#39; Creates and initializes a BitVector32.\n      Dim myBV As New BitVector32(0)\n      \n      &#39; Creates four sections in the BitVector32 with maximum values 6, 3, 1, and 15.\n      &#39; mySect3, which uses exactly one bit, can also be used as a bit flag.\n      Dim mySect1 As BitVector32.Section = BitVector32.CreateSection(6)\n      Dim mySect2 As BitVector32.Section = BitVector32.CreateSection(3, mySect1)\n      Dim mySect3 As BitVector32.Section = BitVector32.CreateSection(1, mySect2)\n      Dim mySect4 As BitVector32.Section = BitVector32.CreateSection(15, mySect3)\n      \n      &#39; Displays the values of the sections.\n      Console.WriteLine(&quot;Initial values:&quot;)\n      Console.WriteLine(ControlChars.Tab + &quot;mySect1: {0}&quot;, myBV(mySect1))\n      Console.WriteLine(ControlChars.Tab + &quot;mySect2: {0}&quot;, myBV(mySect2))\n      Console.WriteLine(ControlChars.Tab + &quot;mySect3: {0}&quot;, myBV(mySect3))\n      Console.WriteLine(ControlChars.Tab + &quot;mySect4: {0}&quot;, myBV(mySect4))\n      \n      &#39; Sets each section to a new value and displays the value of the BitVector32 at each step.\n      Console.WriteLine(&quot;Changing the values of each section:&quot;)\n      Console.WriteLine(ControlChars.Tab + &quot;Initial:    &quot; + ControlChars.Tab + &quot;{0}&quot;, myBV.ToString())\n      myBV(mySect1) = 5\n      Console.WriteLine(ControlChars.Tab + &quot;mySect1 = 5:&quot; + ControlChars.Tab + &quot;{0}&quot;, myBV.ToString())\n      myBV(mySect2) = 3\n      Console.WriteLine(ControlChars.Tab + &quot;mySect2 = 3:&quot; + ControlChars.Tab + &quot;{0}&quot;, myBV.ToString())\n      myBV(mySect3) = 1\n      Console.WriteLine(ControlChars.Tab + &quot;mySect3 = 1:&quot; + ControlChars.Tab + &quot;{0}&quot;, myBV.ToString())\n      myBV(mySect4) = 9\n      Console.WriteLine(ControlChars.Tab + &quot;mySect4 = 9:&quot; + ControlChars.Tab + &quot;{0}&quot;, myBV.ToString())\n      \n      &#39; Displays the values of the sections.\n      Console.WriteLine(&quot;New values:&quot;)\n      Console.WriteLine(ControlChars.Tab + &quot;mySect1: {0}&quot;, myBV(mySect1))\n      Console.WriteLine(ControlChars.Tab + &quot;mySect2: {0}&quot;, myBV(mySect2))\n      Console.WriteLine(ControlChars.Tab + &quot;mySect3: {0}&quot;, myBV(mySect3))\n      Console.WriteLine(ControlChars.Tab + &quot;mySect4: {0}&quot;, myBV(mySect4))\n\n   End Sub &#39;Main \n\nEnd Class &#39;SamplesBitVector32\n\n\n&#39; This code produces the following output.\n&#39;\n&#39; Initial values:\n&#39;        mySect1: 0\n&#39;        mySect2: 0\n&#39;        mySect3: 0\n&#39;        mySect4: 0\n&#39; Changing the values of each section:\n&#39;        Initial:        BitVector32{00000000000000000000000000000000}\n&#39;        mySect1 = 5:    BitVector32{00000000000000000000000000000101}\n&#39;        mySect2 = 3:    BitVector32{00000000000000000000000000011101}\n&#39;        mySect3 = 1:    BitVector32{00000000000000000000000000111101}\n&#39;        mySect4 = 9:    BitVector32{00000000000000000000001001111101}\n&#39; New values:\n&#39;        mySect1: 5\n&#39;        mySect2: 3\n&#39;        mySect3: 1\n&#39;        mySect4: 9\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Use <a class=\"xref\" href=\"system.collections.specialized.bitvector32#System_Collections_Specialized_BitVector32_CreateSection_\" data-linktype=\"relative-path\">CreateSection</a> to define a new section. A BitVector32.Section is a window into the <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a> and is composed of the smallest number of consecutive bits that can contain the maximum value specified in <a class=\"xref\" href=\"system.collections.specialized.bitvector32#System_Collections_Specialized_BitVector32_CreateSection_\" data-linktype=\"relative-path\">CreateSection</a>. For example, a section with a maximum value of 1 is composed of only one bit, whereas a section with a maximum value of 5 is composed of three bits. You can create a BitVector32.Section with a maximum value of 1 to serve as a Boolean, thereby allowing you to store integers and Booleans in the same <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a>.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Collections_Specialized_BitVector32_Section_Mask_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_Specialized_BitVector32_Section_Mask\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Mask</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a mask that isolates this section within the <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public short Mask { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A mask that isolates this section within the <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Collections_Specialized_BitVector32_Section_Offset_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_Specialized_BitVector32_Section_Offset\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Offset</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the offset of this section from the start of the <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public short Offset { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The offset of this section from the start of the <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Collections_Specialized_BitVector32_Section_Equals_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_Specialized_BitVector32_Section_Equals_System_Collections_Specialized_BitVector32_Section_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Equals(BitVector32+Section)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether the specified <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32.Section</a> object is the same as the current <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32.Section</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool Equals (System.Collections.Specialized.BitVector32.Section obj);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>obj</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32.Section</a> object to compare with the current <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32.Section</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <code>obj</code> parameter is the same as the current <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32.Section</a> object; otherwise <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Collections_Specialized_BitVector32_Section_Equals_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_Specialized_BitVector32_Section_Equals_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Equals(Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether the specified object is the same as the current <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32.Section</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override bool Equals (object o);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>o</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object to compare with the current <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32.Section</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the specified object is the same as the current <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32.Section</a> object; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method overrides <a class=\"xref\" href=\"system.object#System_Object_Equals_\" data-linktype=\"relative-path\">Equals</a>.  </p>\n<p> Two <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32.Section</a> instances are considered equal if both sections are of the same length and are in the same location within a <a class=\"xref\" href=\"system.collections.specialized.bitvector32\" data-linktype=\"relative-path\">BitVector32</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Collections_Specialized_BitVector32_Section_GetHashCode_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_Specialized_BitVector32_Section_GetHashCode\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetHashCode()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Serves as a hash function for the current <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32.Section</a>, suitable for hashing algorithms and data structures, such as a hash table.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetHashCode ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A hash code for the current <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32.Section</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method overrides <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a>.  </p>\n<p> This method generates the same hash code for two objects that are equal according to the <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section#System_Collections_Specialized_BitVector32_Section_Equals_\" data-linktype=\"relative-path\">Equals</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Collections_Specialized_BitVector32_Section_ToString_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_Specialized_BitVector32_Section_ToString\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToString()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a string that represents the current <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32.Section</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override string ToString ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A string that represents the current <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32.Section</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method overrides <a class=\"xref\" href=\"system.object#System_Object_ToString_\" data-linktype=\"relative-path\">ToString</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Collections_Specialized_BitVector32_Section_ToString_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_Specialized_BitVector32_Section_ToString_System_Collections_Specialized_BitVector32_Section_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToString(BitVector32+Section)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a string that represents the specified <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32.Section</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string ToString (System.Collections.Specialized.BitVector32.Section value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32.Section</a> to represent.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A string that represents the specified <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32.Section</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Operators\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Collections_Specialized_BitVector32_Section_op_Equality_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_Specialized_BitVector32_Section_op_Equality_System_Collections_Specialized_BitVector32_Section_System_Collections_Specialized_BitVector32_Section_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Equality(BitVector32+Section, BitVector32+Section)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether two specified <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32.Section</a> objects are equal.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_Equality (System.Collections.Specialized.BitVector32.Section a, System.Collections.Specialized.BitVector32.Section b);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>a</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32.Section</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>b</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32.Section</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <code>a</code> and <code>b</code> parameters represent the same <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32.Section</a> object, otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Collections_Specialized_BitVector32_Section_op_Inequality_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_Specialized_BitVector32_Section_op_Inequality_System_Collections_Specialized_BitVector32_Section_System_Collections_Specialized_BitVector32_Section_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Inequality(BitVector32+Section, BitVector32+Section)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether two <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32.Section</a> objects have different values.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_Inequality (System.Collections.Specialized.BitVector32.Section a, System.Collections.Specialized.BitVector32.Section b);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>a</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32.Section</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>b</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32.Section</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <code>a</code> and <code>b</code> parameters represent different <a class=\"xref\" href=\"system.collections.specialized.bitvector32.section\" data-linktype=\"relative-path\">BitVector32.Section</a> objects; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Collections.Specialized.BitVector32.Section.yml\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.BitVector32.Section\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.BitVector32.Section.Equals\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.BitVector32.Section.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.BitVector32.Section.Mask\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.BitVector32.Section.Offset\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.BitVector32.Section.op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.BitVector32.Section.op_op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.BitVector32.Section.op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.BitVector32.Section.op_op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Collections.Specialized.BitVector32.Section.ToString\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"516b1f65-2270-e3c5-b8df-5048566b8c74\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a section of the vector that can contain an integer number.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.collections.specialized/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Collections.Specialized.BitVector32.Section\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Collections.Specialized.BitVector32.Section.yml","open_to_public_contributors":false,"api_name":["System.Collections.Specialized.BitVector32.Section","System.Collections.Specialized.BitVector32.Section.Equals","System.Collections.Specialized.BitVector32.Section.GetHashCode","System.Collections.Specialized.BitVector32.Section.Mask","System.Collections.Specialized.BitVector32.Section.Offset","System.Collections.Specialized.BitVector32.Section.op_Equality","System.Collections.Specialized.BitVector32.Section.op_op_Equality","System.Collections.Specialized.BitVector32.Section.op_Inequality","System.Collections.Specialized.BitVector32.Section.op_op_Inequality","System.Collections.Specialized.BitVector32.Section.ToString"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Collections.Specialized.BitVector32.Section","System::Collections::Specialized::BitVector32::Section","System.Collections.Specialized.BitVector32.Section.Equals","System::Collections::Specialized::BitVector32::Section::Equals","System.Collections.Specialized.BitVector32.Section.GetHashCode","System::Collections::Specialized::BitVector32::Section::GetHashCode","System.Collections.Specialized.BitVector32.Section.Mask","System::Collections::Specialized::BitVector32::Section::Mask","System.Collections.Specialized.BitVector32.Section.Offset","System::Collections::Specialized::BitVector32::Section::Offset","System.Collections.Specialized.BitVector32.Section.op_Equality","System::Collections::Specialized::BitVector32::Section::op_Equality","System.Collections.Specialized.BitVector32.Section.op_Inequality","System::Collections::Specialized::BitVector32::Section::op_Inequality","System.Collections.Specialized.BitVector32.Section.ToString","System::Collections::Specialized::BitVector32::Section::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"516b1f65-2270-e3c5-b8df-5048566b8c74","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Collections.Specialized/BitVector32+Section.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"BitVector32.Section struct | Microsoft Docs","_op_ogTitle":"BitVector32.Section struct","description":"Represents a section of the vector that can contain an integer number.\n","toc_asset_id":"api/_splitted/System.Collections.Specialized/toc.json","toc_rel":"_splitted/System.Collections.Specialized/toc.json","source_url":"","ms.assetid":"System.Collections.Specialized.BitVector32.Section","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.collections.specialized.bitvector32.section","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.collections.specialized.bitvector32.section","fileRelativePath":"api/System.Collections.Specialized.BitVector32.Section.html"},"themesRelativePathToOutputRoot":"_themes/"}