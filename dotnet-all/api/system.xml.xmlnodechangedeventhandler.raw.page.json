{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">XmlNodeChangedEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that handles <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_NodeChanged\" data-linktype=\"relative-path\">NodeChanged</a>, <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_NodeChanging\" data-linktype=\"relative-path\">NodeChanging</a>, <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_NodeInserted\" data-linktype=\"relative-path\">NodeInserted</a>, <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_NodeInserting\" data-linktype=\"relative-path\">NodeInserting</a>, <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_NodeRemoved\" data-linktype=\"relative-path\">NodeRemoved</a> and <a class=\"xref\" href=\"system.xml.xmldocument#System_Xml_XmlDocument_NodeRemoving\" data-linktype=\"relative-path\">NodeRemoving</a> events.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void XmlNodeChangedEventHandler(object sender, XmlNodeChangedEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">XmlNodeChangedEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example shows how to handle the <code>NodeChanged</code> and <code>NodeInserted</code> events.  </p>\n<pre><code class=\"lang-cs\" name=\"XmlNodeChangedEventHandler#1\">using System;\nusing System.IO;\nusing System.Xml;\n\nnamespace Microsoft.Samples.Xml\n{\n    public class Sample\n    {\n        private const String filename = &quot;book.xml&quot;;\n\n        public static void Main()\n        {\n            Sample mySample = new Sample();\n            mySample.Run(filename);\n        }\n\n        public void Run(String args)\n        {\n\n            // Create and load the XML document.\n            Console.WriteLine(&quot;Loading file {0} ...&quot;, args);\n            XmlDocument doc = new XmlDocument();\n            doc.Load(args);\n\n            //Create the event handlers.\n            doc.NodeChanged += new XmlNodeChangedEventHandler(this.MyNodeChangedEvent);\n            doc.NodeInserted += new XmlNodeChangedEventHandler(this.MyNodeInsertedEvent);\n\n            // Change the book price.\n            doc.DocumentElement.LastChild.InnerText = &quot;5.95&quot;;\n\n            // Add a new element.\n            XmlElement newElem = doc.CreateElement(&quot;style&quot;);\n            newElem.InnerText = &quot;hardcover&quot;;\n            doc.DocumentElement.AppendChild(newElem);\n\n            Console.WriteLine(&quot;\\r\\nDisplay the modified XML...&quot;);\n            Console.WriteLine(doc.OuterXml);\n\n        }\n\n        // Handle the NodeChanged event.\n        private void MyNodeChangedEvent(Object source, XmlNodeChangedEventArgs args)\n        {\n            Console.Write(&quot;Node Changed Event: &lt;{0}&gt; changed&quot;, args.Node.Name);\n            if (args.Node.Value != null)\n            {\n                Console.WriteLine(&quot; with value  {0}&quot;, args.Node.Value);\n            }\n            else\n                Console.WriteLine(&quot;&quot;);\n        }\n\n        // Handle the NodeInserted event.\n        private void MyNodeInsertedEvent(Object source, XmlNodeChangedEventArgs args)\n        {\n            Console.Write(&quot;Node Inserted Event: &lt;{0}&gt; inserted&quot;, args.Node.Name);\n            if (args.Node.Value != null)\n            {\n                Console.WriteLine(&quot; with value {0}&quot;, args.Node.Value);\n            }\n            else\n                Console.WriteLine(&quot;&quot;);\n        }\n\n    } // End class \n</code></pre><pre><code class=\"lang-cpp\" name=\"XmlNodeChangedEventHandler#1\">#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\npublic ref class Sample\n{\npublic:\n   void Run( String^ args )\n   {\n      // Create and load the XML document.\n      Console::WriteLine( &quot;Loading file {0} ...&quot;, args );\n      XmlDocument^ doc = gcnew XmlDocument;\n      doc-&gt;Load( args );\n      \n      //Create the event handlers.\n      doc-&gt;NodeChanged += gcnew XmlNodeChangedEventHandler( this, &amp;Sample::MyNodeChangedEvent );\n      doc-&gt;NodeInserted += gcnew XmlNodeChangedEventHandler( this, &amp;Sample::MyNodeInsertedEvent );\n      \n      // Change the book price.\n      doc-&gt;DocumentElement-&gt;LastChild-&gt;InnerText = &quot;5.95&quot;;\n      \n      // Add a new element.\n      XmlElement^ newElem = doc-&gt;CreateElement( &quot;style&quot; );\n      newElem-&gt;InnerText = &quot;hardcover&quot;;\n      doc-&gt;DocumentElement-&gt;AppendChild( newElem );\n      Console::WriteLine( &quot;\\r\\nDisplay the modified XML...&quot; );\n      Console::WriteLine( doc-&gt;OuterXml );\n   }\n\n   // Handle the NodeChanged event.\nprivate:\n   void MyNodeChangedEvent( Object^ /*src*/, XmlNodeChangedEventArgs^ args )\n   {\n      Console::Write( &quot;Node Changed Event: &lt;{0}&gt; changed&quot;, args-&gt;Node-&gt;Name );\n      if ( args-&gt;Node-&gt;Value != nullptr )\n      {\n         Console::WriteLine( &quot; with value  {0}&quot;, args-&gt;Node-&gt;Value );\n      }\n      else\n            Console::WriteLine( &quot;&quot; );\n   }\n\n   // Handle the NodeInserted event.\n   void MyNodeInsertedEvent( Object^ /*src*/, XmlNodeChangedEventArgs^ args )\n   {\n      Console::Write( &quot;Node Inserted Event: &lt;{0}&gt; inserted&quot;, args-&gt;Node-&gt;Name );\n      if ( args-&gt;Node-&gt;Value != nullptr )\n      {\n         Console::WriteLine( &quot; with value {0}&quot;, args-&gt;Node-&gt;Value );\n      }\n      else\n            Console::WriteLine( &quot;&quot; );\n   }\n};\n// End class \n\nint main()\n{\n   Sample^ mySample = gcnew Sample;\n   mySample-&gt;Run( &quot;book.xml&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XmlNodeChangedEventHandler#1\">Imports System\nImports System.IO\nImports System.Xml\n\nNamespace Microsoft.Samples.Xml\n\n    Public Class Sample\n\n        Private Const filename As String = &quot;book.xml&quot;\n\n        Public Shared Sub Main()\n\n            Dim mySample As Sample = New Sample()\n            mySample.Run(filename)\n        End Sub\n\n        Public Sub Run(ByVal args As String)\n\n            &#39; Create and load the XML document.\n            Console.WriteLine(&quot;Loading file {0} ...&quot;, args)\n            Dim doc As XmlDocument = New XmlDocument()\n            doc.Load(args)\n\n            &#39;Create the event handlers.\n            AddHandler doc.NodeChanged, AddressOf MyNodeChangedEvent\n            AddHandler doc.NodeInserted, AddressOf MyNodeInsertedEvent\n\n            &#39; Change the book price.\n            doc.DocumentElement.LastChild.InnerText = &quot;5.95&quot;\n\n            &#39; Add a new element.\n            Dim newElem As XmlElement = doc.CreateElement(&quot;style&quot;)\n            newElem.InnerText = &quot;hardcover&quot;\n            doc.DocumentElement.AppendChild(newElem)\n\n            Console.WriteLine()\n            Console.WriteLine(&quot;Display the modified XML...&quot;)\n            Console.WriteLine(doc.OuterXml)\n\n        End Sub\n\n        &#39; Handle the NodeChanged event.\n        Private Sub MyNodeChangedEvent(ByVal source As Object, ByVal args As XmlNodeChangedEventArgs)\n            Console.Write(&quot;Node Changed Event: &lt;{0}&gt; changed&quot;, args.Node.Name)\n            If Not (args.Node.Value Is Nothing) Then\n                Console.WriteLine(&quot; with value  {0}&quot;, args.Node.Value)\n            Else\n                Console.WriteLine(&quot;&quot;)\n            End If\n        End Sub\n\n        &#39; Handle the NodeInserted event.\n        Private Sub MyNodeInsertedEvent(ByVal source As Object, ByVal args As XmlNodeChangedEventArgs)\n            Console.Write(&quot;Node Inserted Event: &lt;{0}&gt; inserted&quot;, args.Node.Name)\n            If Not (args.Node.Value Is Nothing) Then\n                Console.WriteLine(&quot; with value {0}&quot;, args.Node.Value)\n            Else\n                Console.WriteLine(&quot;&quot;)\n            End If\n        End Sub\n\n    End Class\n\nEnd Namespace\n</code></pre><p> The example uses the file <code>book.xml</code> as input.  </p>\n<pre><code class=\"lang-xml\" name=\"XmlNodeChangedEventHandler#2\">&lt;!--sample XML fragment--&gt;\n&lt;book genre=&#39;novel&#39; ISBN=&#39;1-861003-78&#39; misc=&#39;sale-item&#39;&gt;\n  &lt;title&gt;The Handmaid&#39;s Tale&lt;/title&gt;\n  &lt;price&gt;14.95&lt;/price&gt;\n&lt;/book&gt;\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>When you create an <code>XmlNodeChangedEventHandler</code> delegate, you identify the method that handles the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event handler delegates, see <a href=\"../topic/handling%20and%20raising%20events\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Xml.XmlNodeChangedEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeChangedEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeChangedEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeChangedEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeChangedEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Xml.XmlNodeChangedEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"222ceeaa-08ad-04ce-8b22-4d810bc89820\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that handles , , , ,  and  events.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.xml/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Xml.XmlNodeChangedEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Xml.XmlNodeChangedEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Xml.XmlNodeChangedEventHandler","System.Xml.XmlNodeChangedEventHandler..ctor","System.Xml.XmlNodeChangedEventHandler.Invoke","System.Xml.XmlNodeChangedEventHandler.BeginInvoke","System.Xml.XmlNodeChangedEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Xml.XmlNodeChangedEventHandler","System::Xml::XmlNodeChangedEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"222ceeaa-08ad-04ce-8b22-4d810bc89820","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Xml/XmlNodeChangedEventHandler.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"XmlNodeChangedEventHandler delegate | Microsoft Docs","_op_ogTitle":"XmlNodeChangedEventHandler delegate","description":"Represents the method that handles , , , ,  and  events.\n","toc_asset_id":"api/_splitted/System.Xml/toc.json","toc_rel":"_splitted/System.Xml/toc.json","source_url":"","ms.assetid":"System.Xml.XmlNodeChangedEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmlnodechangedeventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.xml.xmlnodechangedeventhandler","fileRelativePath":"api/System.Xml.XmlNodeChangedEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}