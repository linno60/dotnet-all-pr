{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">DetailsViewCommandEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that handles the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview#System_Web_UI_WebControls_DetailsView_ItemCommand\" data-linktype=\"relative-path\">ItemCommand</a> event of a <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview\" data-linktype=\"relative-path\">DetailsView</a> control.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void DetailsViewCommandEventHandler(object sender, DetailsViewCommandEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">DetailsViewCommandEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates how to programmatically add a DetailsViewCommandEventHandler delegate to the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview#System_Web_UI_WebControls_DetailsView_ItemCommand\" data-linktype=\"relative-path\">ItemCommand</a> event of a <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview\" data-linktype=\"relative-path\">DetailsView</a> control. This example uses the single-file coding model.  </p>\n<pre><code class=\"lang-vb\" name=\"DetailsViewCommandEventHandlerCodeInline#1\">\n&lt;%@ page language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n  Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)\n\n    &#39; Create a new DetailsView object.\n    Dim customerDetailsView As New DetailsView()\n\n    &#39; Set the DetailsView object&#39;s properties.\n    customerDetailsView.ID = &quot;CustomerDetailsView&quot;\n    customerDetailsView.DataSourceID = &quot;DetailsViewSource&quot;\n    customerDetailsView.AutoGenerateRows = True\n    customerDetailsView.AllowPaging = True\n    \n    Dim keyArray() As String = {&quot;CustomerID&quot;}\n    customerDetailsView.DataKeyNames = keyArray\n    \n    &#39; Add a button field to the DetailsView control.\n    Dim field As New ButtonField()\n    field.ButtonType = ButtonType.Link\n    field.CausesValidation = False\n    field.Text = &quot;Add to List&quot;\n    field.CommandName = &quot;Add&quot;\n\n    customerDetailsView.Fields.Add(field)\n\n    &#39; Programmatically register the event-handling method\n    &#39; for the ItemDeleting event of a DetailsView control.\n    AddHandler customerDetailsView.ItemCommand, _\n      AddressOf CustomerDetailsView_ItemCommand\n\n    &#39; Add the DetailsView object to the Controls collection\n    &#39; of the PlaceHolder control.\n    DetailsViewPlaceHolder.Controls.Add(customerDetailsView)\n\n  End Sub\n  \n  Sub CustomerDetailsView_ItemCommand(ByVal sender As Object, _\n    ByVal e As DetailsViewCommandEventArgs)\n\n    &#39; Use the CommandName property to determine which button\n    &#39; was clicked. \n    If e.CommandName = &quot;Add&quot; Then\n\n      &#39; Get the DetailsView control that raised the event.\n      Dim customerDetailsView As DetailsView = _\n        CType(e.CommandSource, DetailsView)\n\n      &#39; Add the current customer to the customer list. \n\n      &#39; Get the row that contains the company name. In this\n      &#39; example, the company name is in the second row (index 1)  \n      &#39; of the DetailsView control.\n      Dim row As DetailsViewRow = customerDetailsView.Rows(1)\n\n      &#39; Get the company&#39;s name from the appropriate cell.\n      &#39; In this example, the company name is in the second cell  \n      &#39; (index 1) of the row.\n      Dim name As String = row.Cells(1).Text\n\n      &#39; Create a ListItem object with the company name.\n      Dim item As New ListItem(name)\n\n      &#39; Add the ListItem object to the ListBox, if the \n      &#39; item doesn&#39;t already exist.\n      If Not CustomerListBox.Items.Contains(item) Then\n      \n        CustomerListBox.Items.Add(item)\n        \n      End If\n\n    End If\n\n  End Sub\n  \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DetailsViewCommandEventHandler Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    \n      &lt;h3&gt;DetailsViewCommandEventHandler Example&lt;/h3&gt;\n      \n      &lt;!-- Use a PlaceHolder control as the container for the --&gt;\n      &lt;!-- dynamically generated DetailsView control.         --&gt;       \n      &lt;asp:placeholder id=&quot;DetailsViewPlaceHolder&quot;\n        runat=&quot;server&quot;/&gt;\n      \n      &lt;br/&gt;&lt;br/&gt;\n      \n      Selected Customers:&lt;br/&gt;\n      &lt;asp:listbox id=&quot;CustomerListBox&quot;\n        runat=&quot;server&quot;/&gt;\n      \n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;DetailsViewSource&quot;\n        selectcommand=&quot;Select [CustomerID], [CompanyName], [Address], \n          [City], [PostalCode], [Country] From [Customers]&quot;\n        connectionstring=\n            &quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;  \n  \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DetailsViewCommandEventHandlerCodeInline#1\">\n&lt;%@ page language=&quot;C#&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n  void Page_Load(Object sender, EventArgs e)\n  {\n\n    // Create a new DetailsView object.\n    DetailsView customerDetailsView = new DetailsView();\n\n    // Set the DetailsView object&#39;s properties.\n    customerDetailsView.ID = &quot;CustomerDetailsView&quot;;\n    customerDetailsView.DataSourceID = &quot;DetailsViewSource&quot;;\n    customerDetailsView.AutoGenerateRows = true;\n    customerDetailsView.AllowPaging = true;\n    customerDetailsView.DataKeyNames = new String[1] { &quot;CustomerID&quot; };\n\n    // Add a button field to the DetailsView control.\n    ButtonField field = new ButtonField();\n    field.ButtonType = ButtonType.Link;\n    field.CausesValidation = false;\n    field.Text = &quot;Add to List&quot;;\n    field.CommandName=&quot;Add&quot;;\n\n    customerDetailsView.Fields.Add(field);\n\n    // Programmatically register the event-handling method\n    // for the ItemDeleting event of a DetailsView control.\n    customerDetailsView.ItemCommand \n      += new DetailsViewCommandEventHandler( \n      this.CustomerDetailsView_ItemCommand);\n\n    // Add the DetailsView object to the Controls collection\n    // of the PlaceHolder control.\n    DetailsViewPlaceHolder.Controls.Add(customerDetailsView);\n\n  }\n  \n  void CustomerDetailsView_ItemCommand(Object sender, \n    DetailsViewCommandEventArgs e)\n  {\n\n    // Use the CommandName property to determine which button\n    // was clicked. \n    if (e.CommandName == &quot;Add&quot;)\n    {\n      // Get the DetailsView control that raised the event.\n      DetailsView customerDetailsView = (DetailsView)e.CommandSource;\n\n      // Add the current customer to the customer list. \n\n      // Get the row that contains the company name. In this\n      // example, the company name is in the second row (index 1)  \n      // of the DetailsView control.\n      DetailsViewRow row = customerDetailsView.Rows[1];\n\n      // Get the company&#39;s name from the appropriate cell.\n      // In this example, the company name is in the second cell  \n      // (index 1) of the row.\n      String name = row.Cells[1].Text;\n\n      // Create a ListItem object with the company name.\n      ListItem item = new ListItem(name);\n\n      // Add the ListItem object to the ListBox, if the \n      // item doesn&#39;t already exist.\n      if (!CustomerListBox.Items.Contains(item))\n      {\n        CustomerListBox.Items.Add(item);\n      }\n\n    }\n\n  }\n  \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DetailsViewCommandEventHandler Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    \n      &lt;h3&gt;DetailsViewCommandEventHandler Example&lt;/h3&gt;\n      \n      &lt;!-- Use a PlaceHolder control as the container for the --&gt;\n      &lt;!-- dynamically generated DetailsView control.         --&gt;       \n      &lt;asp:placeholder id=&quot;DetailsViewPlaceHolder&quot;\n        runat=&quot;server&quot;/&gt;\n      \n      &lt;br/&gt;&lt;br/&gt;\n      \n      Selected Customers:&lt;br/&gt;\n      &lt;asp:listbox id=&quot;CustomerListBox&quot;\n        runat=&quot;server&quot;/&gt;\n      \n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;DetailsViewSource&quot;\n        selectcommand=&quot;Select [CustomerID], [CompanyName], [Address], \n          [City], [PostalCode], [Country] From [Customers]&quot;\n        connectionstring=\n            &quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n\n        runat=&quot;server&quot;/&gt;  \n  \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p> The following code example shows a code-behind coding model version of the previous example. For this example to work, you must copy the code below into the associated code-behind file.  </p>\n<pre><code class=\"lang-cs\" name=\"DetailsViewCommandEventHandlerCodeBehind#1\">&lt;%@ Page Language=&quot;C#&quot; AutoEventWireup=&quot;true&quot;  CodeFile=&quot;Default.aspx.cs&quot; Inherits=&quot;_Default&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DetailsViewCommandEventHandler Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;Form1&quot; runat=&quot;server&quot;&gt;\n    \n      &lt;h3&gt;DetailsViewCommandEventHandler Example&lt;/h3&gt;\n      \n      &lt;!-- Use a PlaceHolder control as the container for the --&gt;\n      &lt;!-- dynamically generated DetailsView control.         --&gt;       \n      &lt;asp:placeholder id=&quot;DetailsViewPlaceHolder&quot;\n        runat=&quot;server&quot;/&gt;\n      \n      &lt;br/&gt;&lt;br/&gt;\n      \n      Selected Customers:&lt;br/&gt;\n      &lt;asp:listbox id=&quot;CustomerListBox&quot;\n        runat=&quot;server&quot;/&gt;\n      \n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;DetailsViewSource&quot;\n        selectcommand=&quot;Select [CustomerID], [CompanyName], [Address], \n          [City], [PostalCode], [Country] From [Customers]&quot;\n        connectionstring=&quot;\n          &lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;  \n  \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DetailsViewCommandEventHandlerCodeBehind#1\">&lt;%@ Page Language=&quot;VB&quot; AutoEventWireup=&quot;false&quot; CodeFile=&quot;DefaultVB.aspx.vb&quot; Inherits=&quot;DefaultVB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DetailsViewCommandEventHandler Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;Form1&quot; runat=&quot;server&quot;&gt;\n    \n      &lt;h3&gt;DetailsViewCommandEventHandler Example&lt;/h3&gt;\n      \n      &lt;!-- Use a PlaceHolder control as the container for the --&gt;\n      &lt;!-- dynamically generated DetailsView control.         --&gt;       \n      &lt;asp:placeholder id=&quot;DetailsViewPlaceHolder&quot;\n        runat=&quot;server&quot;/&gt;\n      \n      &lt;br/&gt;&lt;br/&gt;\n      \n      Selected Customers:&lt;br/&gt;\n      &lt;asp:listbox id=&quot;CustomerListBox&quot;\n        runat=&quot;server&quot;/&gt;\n      \n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;DetailsViewSource&quot;\n        selectcommand=&quot;Select [CustomerID], [CompanyName], [Address], [City], [PostalCode], [Country] From [Customers]&quot;\n        connectionstring=&quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;  \n  \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p> The following code example shows the code-behind file for the previous example.  </p>\n<pre><code class=\"lang-vb\" name=\"DetailsViewCommandEventHandlerCodeBehind#2\">Partial Class DefaultVB\n    Inherits System.Web.UI.Page\n\n    Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs) Handles Me.Load\n\n        &#39; Create a new DetailsView object.\n        Dim customerDetailsView As New DetailsView()\n\n        &#39; Set the DetailsView object&#39;s properties.\n        customerDetailsView.ID = &quot;CustomerDetailsView&quot;\n        customerDetailsView.DataSourceID = &quot;DetailsViewSource&quot;\n        customerDetailsView.AutoGenerateRows = True\n        customerDetailsView.AllowPaging = True\n\n        Dim keyArray() As String = {&quot;CustomerID&quot;}\n        customerDetailsView.DataKeyNames = keyArray\n\n        &#39; Add a button field to the DetailsView control.\n        Dim field As New ButtonField()\n        field.ButtonType = ButtonType.Link\n        field.CausesValidation = False\n        field.Text = &quot;Add to List&quot;\n        field.CommandName = &quot;Add&quot;\n\n        customerDetailsView.Fields.Add(field)\n\n        &#39; Programmatically register the event-handling method\n        &#39; for the ItemDeleting event of a DetailsView control.\n        AddHandler customerDetailsView.ItemCommand, AddressOf CustomerDetailsView_ItemCommand\n\n        &#39; Add the DetailsView object to the Controls collection\n        &#39; of the PlaceHolder control.\n        DetailsViewPlaceHolder.Controls.Add(customerDetailsView)\n\n    End Sub\n\n    Sub CustomerDetailsView_ItemCommand(ByVal sender As Object, ByVal e As DetailsViewCommandEventArgs)\n\n        &#39; Use the CommandName property to determine which button\n        &#39; was clicked. \n        If e.CommandName = &quot;Add&quot; Then\n\n            &#39; Get the DetailsView control that raised the event.\n            Dim customerDetailsView As DetailsView = CType(sender, DetailsView)\n\n            &#39; Add the current customer to the customer list. \n\n            &#39; Get the row that contains the company name. In this\n            &#39; example, the company name is in the second row (index 1)  \n            &#39; of the DetailsView control.\n            Dim row As DetailsViewRow = customerDetailsView.Rows(1)\n\n            &#39; Get the company&#39;s name from the appropriate cell.\n            &#39; In this example, the company name is in the second cell  \n            &#39; (index 1) of the row.\n            Dim name As String = row.Cells(1).Text\n\n            &#39; Create a ListItem object with the company name.\n            Dim item As New ListItem(name)\n\n            &#39; Add the ListItem object to the ListBox, if the \n            &#39; item doesn&#39;t already exist.\n            If Not CustomerListBox.Items.Contains(item) Then\n\n                CustomerListBox.Items.Add(item)\n\n            End If\n\n        End If\n\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"DetailsViewCommandEventHandlerCodeBehind#2\">using System;\nusing System.Data;\nusing System.Configuration;\nusing System.Web;\nusing System.Web.Security;\nusing System.Web.UI;\nusing System.Web.UI.WebControls;\nusing System.Web.UI.WebControls.WebParts;\nusing System.Web.UI.HtmlControls;\n\npublic partial class _Default : System.Web.UI.Page \n{\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        // Create a new DetailsView object.\n        DetailsView customerDetailsView = new DetailsView();\n\n        // Set the DetailsView object&#39;s properties.\n        customerDetailsView.ID = &quot;CustomerDetailsView&quot;;\n        customerDetailsView.DataSourceID = &quot;DetailsViewSource&quot;;\n        customerDetailsView.AutoGenerateRows = true;\n        customerDetailsView.AllowPaging = true;\n        customerDetailsView.DataKeyNames = new String[1] { &quot;CustomerID&quot; };\n\n        // Add a button field to the DetailsView control.\n        ButtonField field = new ButtonField();\n        field.ButtonType = ButtonType.Link;\n        field.CausesValidation = false;\n        field.Text = &quot;Add to List&quot;;\n        field.CommandName = &quot;Add&quot;;\n\n        customerDetailsView.Fields.Add(field);\n\n        // Programmatically register the event-handling method\n        // for the ItemDeleting event of a DetailsView control.\n        customerDetailsView.ItemCommand += new DetailsViewCommandEventHandler(this.CustomerDetailsView_ItemCommand);\n\n        // Add the DetailsView object to the Controls collection\n        // of the PlaceHolder control.\n        DetailsViewPlaceHolder.Controls.Add(customerDetailsView);\n    }\n\n    void CustomerDetailsView_ItemCommand(Object sender, DetailsViewCommandEventArgs e)\n    {\n\n        // Use the CommandName property to determine which button\n        // was clicked. \n        if (e.CommandName == &quot;Add&quot;)\n        {\n            // Get the DetailsView control that raised the event.\n            DetailsView customerDetailsView = (DetailsView)sender;\n\n            // Add the current customer to the customer list. \n\n            // Get the row that contains the company name. In this\n            // example, the company name is in the second row (index 1)  \n            // of the DetailsView control.\n            DetailsViewRow row = customerDetailsView.Rows[1];\n\n            // Get the company&#39;s name from the appropriate cell.\n            // In this example, the company name is in the second cell  \n            // (index 1) of the row.\n            String name = row.Cells[1].Text;\n\n            // Create a ListItem object with the company name.\n            ListItem item = new ListItem(name);\n\n            // Add the ListItem object to the ListBox, if the \n            // item doesn&#39;t already exist.\n            if (!CustomerListBox.Items.Contains(item))\n            {\n                CustomerListBox.Items.Add(item);\n            }\n\n        }\n\n    }\n}\n</code></pre><p> The following code example demonstrates how to declaratively add a DetailsViewCommandEventHandler delegate to the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview#System_Web_UI_WebControls_DetailsView_ItemCommand\" data-linktype=\"relative-path\">ItemCommand</a> event of a <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview\" data-linktype=\"relative-path\">DetailsView</a> control.  </p>\n<pre><code class=\"lang-vb\" name=\"DetailsViewItemCommand#1\">\n&lt;%@ Page Language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Sub CustomerDetailView_ItemCommand(ByVal sender As Object, ByVal e As DetailsViewCommandEventArgs)\n    \n        &#39; Use the CommandName property to determine which button\n        &#39; was clicked. \n        If e.CommandName = &quot;Add&quot; Then\n\n            &#39; Add the current store to the contact list. \n     \n            &#39; Get the row that contains the store name. In this\n            &#39; example, the store name is in the second row (index 1)  \n            &#39; of the DetailsView control.\n            Dim row As DetailsViewRow = CustomerDetailView.Rows(1)\n      \n            &#39; Get the store&#39;s name from the appropriate cell.\n            &#39; In this example, the store name is in the second cell  \n            &#39; (index 1) of the row.\n            Dim name As String = row.Cells(1).Text\n\n            &#39; Create a ListItem object with the store&#39;s name.\n            Dim item As New ListItem(name)\n\n            &#39; Add the ListItem object to the ListBox, if the \n            &#39; item doesn&#39;t already exist.\n            If Not ContactListBox.Items.Contains(item) Then\n      \n                ContactListBox.Items.Add(item)\n      \n            End If\n        \n        End If\n    \n    End Sub\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;\n            DetailsView ItemCommand Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;Form1&quot; runat=&quot;server&quot;&gt;\n        &lt;h3&gt;\n            DetailsView ItemCommand Example&lt;/h3&gt;\n        &lt;asp:DetailsView ID=&quot;CustomerDetailView&quot; \n            DataSourceID=&quot;DetailsViewSource&quot;\n            AutoGenerateRows=&quot;false&quot; \n            DataKeyNames=&quot;CustomerID&quot; \n            AllowPaging=&quot;true&quot; \n            OnItemCommand=&quot;CustomerDetailView_ItemCommand&quot;\n            runat=&quot;server&quot;&gt;\n            \n            &lt;FieldHeaderStyle BackColor=&quot;Navy&quot; ForeColor=&quot;White&quot; /&gt;\n            \n            &lt;Fields&gt;\n                &lt;asp:BoundField DataField=&quot;CustomerID&quot; HeaderText=&quot;Store ID&quot; /&gt;\n                &lt;asp:BoundField DataField=&quot;CompanyName&quot; HeaderText=&quot;Store Name&quot; /&gt;\n                &lt;asp:BoundField DataField=&quot;City&quot; HeaderText=&quot;City&quot; /&gt;\n                &lt;asp:ButtonField CommandName=&quot;Add&quot; Text=&quot;Add Contact&quot; /&gt;\n            &lt;/Fields&gt;\n        &lt;/asp:DetailsView&gt;\n        \n        &lt;hr /&gt;\n        \n        Contacts:&lt;br /&gt;\n        &lt;asp:ListBox ID=&quot;ContactListBox&quot; runat=&quot;server&quot; /&gt;\n        &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n        &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n        &lt;!-- expression to retrieve the connection string value   --&gt;\n        &lt;!-- from the web.config file.                            --&gt;\n        &lt;asp:SqlDataSource ID=&quot;DetailsViewSource&quot; runat=&quot;server&quot; \n          ConnectionString=\n            &quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot;\n            InsertCommand=&quot;INSERT INTO [Customers]([CustomerID], [CompanyName], [Address], [City], [PostalCode], [Country]) VALUES (@CustomerID, @CompanyName, @Address, @City, @PostalCode, @Country)&quot;\n          SelectCommand=&quot;Select [CustomerID], [CompanyName], \n            [Address], [City], [PostalCode], [Country] From \n            [Customers]&quot;&gt;\n        &lt;/asp:SqlDataSource&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DetailsViewItemCommand#1\">\n&lt;%@ Page Language=&quot;C#&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n    void CustomerDetailView_ItemCommand(Object sender, DetailsViewCommandEventArgs e)\n    {\n\n        // Use the CommandName property to determine which button\n        // was clicked. \n        if (e.CommandName == &quot;Add&quot;)\n        {\n\n            // Add the current store to the contact list. \n\n            // Get the row that contains the store name. In this\n            // example, the store name is in the second row (index 1)  \n            // of the DetailsView control.\n            DetailsViewRow row = CustomerDetailView.Rows[1];\n\n            // Get the store&#39;s name from the appropriate cell.\n            // In this example, the store name is in the second cell  \n            // (index 1) of the row.\n            String name = row.Cells[1].Text;\n\n            // Create a ListItem object with the store&#39;s name.\n            ListItem item = new ListItem(name);\n\n            // Add the ListItem object to the ListBox, if the \n            // item doesn&#39;t already exist.\n            if (!ContactListBox.Items.Contains(item))\n            {\n                ContactListBox.Items.Add(item);\n            }\n\n        }\n\n    }\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;\n            DetailsView ItemCommand Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;Form1&quot; runat=&quot;server&quot;&gt;\n        &lt;h3&gt;\n            DetailsView ItemCommand Example&lt;/h3&gt;\n        &lt;asp:DetailsView ID=&quot;CustomerDetailView&quot; \n            DataSourceID=&quot;DetailsViewSource&quot;\n            AutoGenerateRows=&quot;false&quot; \n            DataKeyNames=&quot;CustomerID&quot; \n            AllowPaging=&quot;true&quot; \n            OnItemCommand=&quot;CustomerDetailView_ItemCommand&quot;\n            runat=&quot;server&quot;&gt;\n            \n            &lt;FieldHeaderStyle BackColor=&quot;Navy&quot; ForeColor=&quot;White&quot; /&gt;\n            \n            &lt;Fields&gt;\n                &lt;asp:BoundField DataField=&quot;CustomerID&quot; HeaderText=&quot;Store ID&quot; /&gt;\n                &lt;asp:BoundField DataField=&quot;CompanyName&quot; HeaderText=&quot;Store Name&quot; /&gt;\n                &lt;asp:BoundField DataField=&quot;City&quot; HeaderText=&quot;City&quot; /&gt;\n                &lt;asp:ButtonField CommandName=&quot;Add&quot; Text=&quot;Add Contact&quot; /&gt;\n            &lt;/Fields&gt;\n        &lt;/asp:DetailsView&gt;\n        \n        &lt;hr /&gt;\n        \n        Contacts:&lt;br /&gt;\n        &lt;asp:ListBox ID=&quot;ContactListBox&quot; runat=&quot;server&quot; /&gt;\n        &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n        &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n        &lt;!-- expression to retrieve the connection string value   --&gt;\n        &lt;!-- from the web.config file.                            --&gt;\n        &lt;asp:SqlDataSource ID=&quot;DetailsViewSource&quot; runat=&quot;server&quot; \n          ConnectionString=\n            &quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot;\n            InsertCommand=&quot;INSERT INTO [Customers]([CustomerID], [CompanyName], [Address], [City], [PostalCode], [Country]) VALUES (@CustomerID, @CompanyName, @Address, @City, @PostalCode, @Country)&quot;\n          SelectCommand=&quot;Select [CustomerID], [CompanyName], \n            [Address], [City], [PostalCode], [Country] From \n            [Customers]&quot;&gt;\n        &lt;/asp:SqlDataSource&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview\" data-linktype=\"relative-path\">DetailsView</a> control raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview#System_Web_UI_WebControls_DetailsView_ItemCommand\" data-linktype=\"relative-path\">ItemCommand</a> event when a button within a <a class=\"xref\" href=\"system.web.ui.webcontrols.buttonfield\" data-linktype=\"relative-path\">ButtonField</a>, <a class=\"xref\" href=\"system.web.ui.webcontrols.commandfield\" data-linktype=\"relative-path\">CommandField</a>, or <a class=\"xref\" href=\"system.web.ui.webcontrols.templatefield\" data-linktype=\"relative-path\">TemplateField</a> row field is clicked. This allows you to provide an event handler that performs a custom routine whenever this event occurs.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview\" data-linktype=\"relative-path\">DetailsView</a> control also raises other specialized events when certain buttons are clicked (buttons with the <code>CommandName</code> property set to &quot;Delete&quot;, &quot;Insert&quot;, &quot;Page&quot;, or &quot;Update&quot;). When using one of these buttons, you should consider using one of the specialized events provided by the control (such as <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview#System_Web_UI_WebControls_DetailsView_ItemDeleted\" data-linktype=\"relative-path\">ItemDeleted</a> or <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview#System_Web_UI_WebControls_DetailsView_ItemDeleting\" data-linktype=\"relative-path\">ItemDeleting</a>).  </p>\n</div>\n<p> When you create a DetailsViewCommandEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see <a href=\"http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115\" data-linktype=\"external\">NIB: Events and Delegates</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.DetailsViewCommandEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DetailsViewCommandEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DetailsViewCommandEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DetailsViewCommandEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DetailsViewCommandEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DetailsViewCommandEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"45e43eb7-ccc9-779d-2844-fea4323edabd\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that handles the  event of a  control.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.web.ui.webcontrols/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.WebControls.DetailsViewCommandEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.DetailsViewCommandEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Web.UI.WebControls.DetailsViewCommandEventHandler","System.Web.UI.WebControls.DetailsViewCommandEventHandler..ctor","System.Web.UI.WebControls.DetailsViewCommandEventHandler.Invoke","System.Web.UI.WebControls.DetailsViewCommandEventHandler.BeginInvoke","System.Web.UI.WebControls.DetailsViewCommandEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.WebControls.DetailsViewCommandEventHandler","System::Web::UI::WebControls::DetailsViewCommandEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"45e43eb7-ccc9-779d-2844-fea4323edabd","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Web.UI.WebControls/DetailsViewCommandEventHandler.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DetailsViewCommandEventHandler delegate | Microsoft Docs","_op_ogTitle":"DetailsViewCommandEventHandler delegate","description":"Represents the method that handles the  event of a  control.\n","toc_asset_id":"api/_splitted/System.Web.UI.WebControls/toc.json","toc_rel":"_splitted/System.Web.UI.WebControls/toc.json","source_url":"","ms.assetid":"System.Web.UI.WebControls.DetailsViewCommandEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.detailsviewcommandeventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.detailsviewcommandeventhandler","fileRelativePath":"api/System.Web.UI.WebControls.DetailsViewCommandEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}