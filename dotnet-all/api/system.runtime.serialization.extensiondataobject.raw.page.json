{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ExtensionDataObject</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Stores data from a versioned data contract that has been extended by adding new members.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public sealed class ExtensionDataObject</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">ExtensionDataObject</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code serializes an instance of a type (<code>PersonVersion2</code>) that is the second version of the serializable type (<code>Person</code>). The second version contains extra data (<code>ID</code> field) that is not present in the first version. The code then deserializes the XML document into a <code>Person</code> object, then immediately reserializes the object including the extra data. Finally, the code deserializes the new XML into a <code>PersonVersion2</code> object and writes the complete data to the console, proving that the data has made a round trip to and from an older version of the type. Note that the <a class=\"xref\" href=\"system.runtime.serialization.datacontractattribute\" data-linktype=\"relative-path\">DataContractAttribute</a> attribute must be applied with the <a class=\"xref\" href=\"system.runtime.serialization.datacontractattribute#System_Runtime_Serialization_DataContractAttribute_Name_\" data-linktype=\"relative-path\">Name</a> and <a class=\"xref\" href=\"system.runtime.serialization.datacontractattribute#System_Runtime_Serialization_DataContractAttribute_Namespace_\" data-linktype=\"relative-path\">Namespace</a> properties set to the same name and namespace as the original class.  </p>\n<pre><code class=\"lang-vb\" name=\"IUnknownSerializationData#0\">&#39; Implement the IExtensibleDataObject interface \n&#39; to store the extra data for future versions.\n&lt;DataContract(Name := &quot;Person&quot;, [Namespace] := &quot;http://www.cohowinery.com/employees&quot;)&gt;  _\nClass Person\n    Implements IExtensibleDataObject\n    &#39; To implement the IExtensibleDataObject interface,\n    &#39; you must implement the ExtensionData property. The property\n    &#39; holds data from future versions of the class for backward\n    &#39; compatibility.\n    Private extensionDataObject_value As ExtensionDataObject\n    \n    Public Property ExtensionData() As ExtensionDataObject _\n       Implements IExtensibleDataObject.ExtensionData\n        Get\n            Return extensionDataObject_value\n        End Get\n        Set\n            extensionDataObject_value = value\n        End Set\n    End Property\n    &lt;DataMember()&gt;  _\n    Public Name As String\nEnd Class \n\n&#39; The second version of the class adds a new field. The field&#39;s \n&#39; data is stored in the ExtensionDataObject field of\n&#39; the first version (Person). You must also set the Name property \n&#39; of the DataContractAttribute to match the first version. \n&#39; If necessary, also set the Namespace property so that the \n&#39; name of the contracts is the same.\n\n&lt;DataContract(Name := &quot;Person&quot;, [Namespace] := &quot;http://www.cohowinery.com/employees&quot;)&gt;  _\nClass PersonVersion2\n    Implements IExtensibleDataObject\n\n    &#39; Best practice: add an Order number to new members.\n    &lt;DataMember(Order:=2)&gt;  _\n    Public ID As Integer\n    \n    &lt;DataMember()&gt;  _\n    Public Name As String\n    \n    Private extensionDataObject_value As ExtensionDataObject\n    \n    Public Property ExtensionData() As ExtensionDataObject _\n       Implements IExtensibleDataObject.ExtensionData\n        Get\n            Return extensionDataObject_value\n        End Get\n        Set\n            extensionDataObject_value = value\n        End Set\n    End Property\nEnd Class \n\nNotInheritable Public Class Program\n\n    &#39; Private constructor to prevent creation of this class.\n    Private Sub New() \n    \n    End Sub \n    \n    \n    Public Shared Sub Main() \n        Try\n            WriteVersion2(&quot;V2.xml&quot;)\n            WriteToVersion1(&quot;v2.xml&quot;)\n            ReadVersion2(&quot;v2.xml&quot;)\n        Catch exc As SerializationException\n            Console.WriteLine(&quot;{0}: {1}&quot;, exc.Message, exc.StackTrace)\n        Finally\n            Console.ReadLine()\n        End Try\n    \n    End Sub \n    \n    &#39; Create an instance of the version 2.0 class. It has  \n    &#39; extra data (ID field) that version 1.0 does \n    &#39; not understand.\n    Shared Sub WriteVersion2(ByVal path As String) \n        Console.WriteLine(&quot;Creating a version 2 object&quot;)\n        Dim p2 As New PersonVersion2()\n        p2.Name = &quot;Elizabeth&quot;\n        p2.ID = 2006\n        \n        Console.WriteLine(&quot;Object data includes an ID&quot;)\n        Console.WriteLine(vbTab + &quot; Name: {0}&quot;, p2.Name)\n        Console.WriteLine(vbTab + &quot; ID: {0} &quot; + vbLf, p2.ID)\n        &#39; Create an instance of the DataContractSerializer.\n        Dim ser As New DataContractSerializer(GetType(PersonVersion2))\n        \n        Console.WriteLine(&quot;Serializing the v2 object to a file. &quot; + vbLf + vbLf)\n        Dim fs As New FileStream(path, FileMode.Create)\n        ser.WriteObject(fs, p2)\n        fs.Close()\n    End Sub \n    \n    &#39; Deserialize version 2 data to a version 1 object.\n    Shared Sub WriteToVersion1(ByVal path As String) \n        &#39; Create the serializer using the version 1 type.\n        Dim ser As New DataContractSerializer(GetType(Person))\n        \n        Dim fs As New FileStream(path, FileMode.Open)\n        Dim reader As XmlDictionaryReader = _\n            XmlDictionaryReader.CreateTextReader(fs, New XmlDictionaryReaderQuotas())\n        Console.WriteLine(&quot;Deserializing v2 data to v1 object. &quot; + vbLf + vbLf)\n        \n        Dim p1 As Person = CType(ser.ReadObject(reader, False), Person)\n        \n        Console.WriteLine(&quot;V1 data has only a Name field.&quot;)\n        Console.WriteLine(&quot;But the v2 data is stored in the &quot;)\n        Console.WriteLine(&quot;ExtensionData property. &quot; + vbLf + vbLf)\n        Console.WriteLine(vbTab + &quot; Name: {0} &quot; + vbLf, p1.Name)\n        \n        reader.Close()\n        fs.Close()\n        \n        &#39; Change data in the object.\n        p1.Name = &quot;John&quot;\n        Console.WriteLine(&quot;Changed the Name value to &#39;John&#39; &quot;)\n        Console.Write(&quot;and reserializing the object to version 2 &quot; + vbLf + vbLf)\n        &#39; Reserialize the object.\n        fs = New FileStream(path, FileMode.Create)\n        ser.WriteObject(fs, p1)\n        fs.Close()\n    \n    End Sub \n    \n    &#39; Deserialize a version 2.0 object. \n    Public Shared Sub ReadVersion2(ByVal path As String) \n        Dim fs As New FileStream(path, FileMode.Open)\n        Dim ser As New DataContractSerializer(GetType(PersonVersion2))\n        \n        Console.WriteLine(&quot;Deserializing new data to version 2 &quot; + vbLf + vbLf)\n        Dim p2 As PersonVersion2 = CType(ser.ReadObject(fs), PersonVersion2)\n        fs.Close()\n        \n        Console.WriteLine(&quot;The data includes the old ID field value. &quot; + vbLf)\n        Console.WriteLine(vbTab + &quot; (New) Name: {0}&quot;, p2.Name)\n        Console.WriteLine(vbTab + &quot; ID: {0} &quot; + vbLf, p2.ID)\n    \n    End Sub \nEnd Class \n</code></pre><pre><code class=\"lang-cs\" name=\"IUnknownSerializationData#0\">using System;\nusing System.Xml;\nusing System.Runtime.Serialization;\nusing System.IO;\n\n// Implement the IExtensibleDataObject interface \n// to store the extra data for future versions.\n[DataContract(\n    Name = &quot;Person&quot;,\n    Namespace = &quot;http://www.cohowinery.com/employees&quot;)]\nclass Person : IExtensibleDataObject\n{\n    // To implement the IExtensibleDataObject interface,\n    // you must implement the ExtensionData property. The property\n    // holds data from future versions of the class for backward\n    // compatibility.\n    private ExtensionDataObject extensionDataObject_value;\n    public ExtensionDataObject ExtensionData\n    {\n        get\n        {\n            return extensionDataObject_value;\n        }\n        set\n        {\n            extensionDataObject_value = value;\n        }\n    }\n    [DataMember]\n    public string Name;\n}\n\n// The second version of the class adds a new field. The field&#39;s \n// data is stored in the ExtensionDataObject field of\n// the first version (Person). You must also set the Name property \n// of the DataContractAttribute to match the first version. \n// If necessary, also set the Namespace property so that the \n// name of the contracts is the same.\n[DataContract(Name = &quot;Person&quot;,\n    Namespace = &quot;http://www.cohowinery.com/employees&quot;)]\nclass PersonVersion2 : IExtensibleDataObject\n{\n    // Best practice: add an Order number to new members.\n    [DataMember(Order=2)]\n    public int ID;\n\n    [DataMember]\n    public string Name;\n\n    private ExtensionDataObject extensionDataObject_value;\n    public ExtensionDataObject ExtensionData\n    {\n        get\n        {\n            return extensionDataObject_value;\n        }\n        set\n        {\n            extensionDataObject_value = value;\n        }\n    }\n}\npublic sealed class Program\n{\n    private Program()\n    {\n        // Private constructor to prevent creation of this class.\n    }\n\n    public static void Main()\n    {\n        try\n        {\n            WriteVersion2(&quot;V2.xml&quot;);\n            WriteToVersion1(&quot;v2.xml&quot;);\n            ReadVersion2(&quot;v2.xml&quot;);\n        }\n        catch (SerializationException exc)\n        {\n            Console.WriteLine(&quot;{0}: {1}&quot;, exc.Message, exc.StackTrace);\n        }\n        finally\n        {\n            Console.ReadLine();\n        }\n    }\n\n    // Create an instance of the version 2.0 class. It has  \n    // extra data (ID field) that version 1.0 does \n    // not understand.\n    static void WriteVersion2(string path)\n    {\n        Console.WriteLine(&quot;Creating a version 2 object&quot;);\n        PersonVersion2 p2 = new PersonVersion2();\n        p2.Name = &quot;Elizabeth&quot;;\n        p2.ID = 2006;\n\n        Console.WriteLine(&quot;Object data includes an ID&quot;);\n        Console.WriteLine(&quot;\\t Name: {0}&quot;, p2.Name);\n        Console.WriteLine(&quot;\\t ID: {0} \\n&quot;, p2.ID);\n        // Create an instance of the DataContractSerializer.\n        DataContractSerializer ser =\n            new DataContractSerializer(typeof(PersonVersion2));\n\n        Console.WriteLine(&quot;Serializing the v2 object to a file. \\n\\n&quot;);\n        FileStream fs = new FileStream(path, FileMode.Create);\n        ser.WriteObject(fs, p2);\n        fs.Close();\n    }\n\n    // Deserialize version 2 data to a version 1 object.\n    static void WriteToVersion1(string path)\n    {\n        // Create the serializer using the version 1 type.\n        DataContractSerializer ser =\n            new DataContractSerializer(typeof(Person));\n\n        FileStream fs = new FileStream(path, FileMode.Open);\n        XmlDictionaryReader reader =\n           XmlDictionaryReader.CreateTextReader(fs, new XmlDictionaryReaderQuotas());\n        Console.WriteLine\n            (&quot;Deserializing v2 data to v1 object. \\n\\n&quot;);\n\n        Person p1 = (Person)ser.ReadObject(reader, false);\n\n        Console.WriteLine(&quot;V1 data has only a Name field.&quot;);\n        Console.WriteLine(&quot;But the v2 data is stored in the &quot;);\n        Console.WriteLine(&quot;ExtensionData property. \\n\\n&quot;);\n        Console.WriteLine(&quot;\\t Name: {0} \\n&quot;, p1.Name);\n\n        fs.Close();\n\n        // Change data in the object.\n        p1.Name = &quot;John&quot;;\n        Console.WriteLine(&quot;Changed the Name value to &#39;John&#39; &quot;);\n        Console.Write(&quot;and reserializing the object to version 2 \\n\\n&quot;);\n        // Reserialize the object.\n        fs = new FileStream(path, FileMode.Create);\n        ser.WriteObject(fs, p1);\n        fs.Close();\n    }\n\n    // Deserialize a version 2.0 object. \n    public static void ReadVersion2(string path)\n    {\n        FileStream fs = new FileStream(path, FileMode.Open);\n        DataContractSerializer ser = new DataContractSerializer(typeof(PersonVersion2));\n\n        Console.WriteLine(&quot;Deserializing new data to version 2 \\n\\n&quot;);\n        PersonVersion2 p2 = (PersonVersion2)ser.ReadObject(fs);\n        fs.Close();\n\n        Console.WriteLine(&quot;The data includes the old ID field value. \\n&quot;);\n        Console.WriteLine(&quot;\\t (New) Name: {0}&quot;, p2.Name);\n        Console.WriteLine(&quot;\\t ID: {0} \\n&quot;, p2.ID);\n    }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The ExtensionDataObject is the structure that stores extra data encountered by the <a class=\"xref\" href=\"system.runtime.serialization.xmlobjectserializer\" data-linktype=\"relative-path\">XmlObjectSerializer</a> during deserialization operations. The structure is used by serialization to write the extra data into the serialized instance. The structure is returned by the <a class=\"xref\" href=\"system.runtime.serialization.iextensibledataobject#System_Runtime_Serialization_IExtensibleDataObject_ExtensionData_\" data-linktype=\"relative-path\">ExtensionData</a> property of the <a class=\"xref\" href=\"system.runtime.serialization.iextensibledataobject\" data-linktype=\"relative-path\">IExtensibleDataObject</a> interface.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Runtime.Serialization.ExtensionDataObject.yml\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Serialization.ExtensionDataObject\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"18432584-5e2a-6ab5-8bc3-e311d7a2aa83\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Stores data from a versioned data contract that has been extended by adding new members.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.runtime.serialization/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Runtime.Serialization.ExtensionDataObject\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Runtime.Serialization.ExtensionDataObject.yml","open_to_public_contributors":false,"api_name":["System.Runtime.Serialization.ExtensionDataObject"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Runtime.Serialization.ExtensionDataObject","System::Runtime::Serialization::ExtensionDataObject"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"18432584-5e2a-6ab5-8bc3-e311d7a2aa83","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Serialization/ExtensionDataObject.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ExtensionDataObject class | Microsoft Docs","_op_ogTitle":"ExtensionDataObject class","description":"Stores data from a versioned data contract that has been extended by adding new members.\n","toc_asset_id":"api/_splitted/System.Runtime.Serialization/toc.json","toc_rel":"_splitted/System.Runtime.Serialization/toc.json","source_url":"","ms.assetid":"System.Runtime.Serialization.ExtensionDataObject","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.extensiondataobject","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.extensiondataobject","fileRelativePath":"api/System.Runtime.Serialization.ExtensionDataObject.html"},"themesRelativePathToOutputRoot":"_themes/"}