{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">SecurityElement</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the XML object model for encoding security objects. This class cannot be inherited.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class SecurityElement</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">SecurityElement</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example shows the use of members of the SecurityElement class.  </p>\n<pre><code class=\"lang-vb\" name=\"SecurityElementMembers#1\">Imports System\nImports System.Security\nImports System.Collections\n\n\n\nClass SecurityElementMembers\n\n    &lt;STAThread()&gt; _\n    Shared Sub Main(ByVal args() As String)\n        Dim xmlRootElement As New SecurityElement(&quot;RootTag&quot;, &quot;XML security tree&quot;)\n        AddAttribute(xmlRootElement, &quot;creationdate&quot;, DateTime.Now.ToString())\n        AddChildElement(xmlRootElement, &quot;destroytime&quot;, DateTime.Now.AddSeconds(1.0).ToString())\n\n        Dim windowsRoleElement As New SecurityElement(&quot;WindowsMembership.WindowsRole&quot;)\n        windowsRoleElement.AddAttribute(&quot;version&quot;, &quot;1.00&quot;)\n        &#39; Add a child element and a creationdate attribute.\n        AddChildElement(windowsRoleElement, &quot;BabyElement&quot;, &quot;This is a child element&quot;)\n        AddAttribute(windowsRoleElement, &quot;creationdate&quot;, DateTime.Now.ToString())\n\n        xmlRootElement.AddChild(windowsRoleElement)\n        CompareAttributes(xmlRootElement, &quot;creationdate&quot;)\n        ConvertToHashTable(xmlRootElement)\n\n        DisplaySummary(xmlRootElement)\n\n        &#39; Determine if the security element is too old to keep.\n        xmlRootElement = DestroyTree(xmlRootElement)\n        If Not (xmlRootElement Is Nothing) Then\n            Dim elementInXml As String = xmlRootElement.ToString()\n            Console.WriteLine(elementInXml)\n        End If\n\n        Console.WriteLine(&quot;This sample completed successfully; &quot; + &quot;press Enter to exit.&quot;)\n        Console.ReadLine()\n\n    End Sub &#39;Main\n\n\n    &#39; Add an attribute to the specified security element.\n    Private Shared Function AddAttribute(ByVal xmlElement As SecurityElement, ByVal attributeName As String, ByVal attributeValue As String) As SecurityElement\n        If Not (xmlElement Is Nothing) Then\n            &#39; Verify that the attribute name and value are valid XML formats.\n            If SecurityElement.IsValidAttributeName(attributeName) AndAlso SecurityElement.IsValidAttributeValue(attributeValue) Then\n                &#39; Add the attribute to the security element.\n                xmlElement.AddAttribute(attributeName, attributeValue)\n            End If\n        End If\n        Return xmlElement\n\n    End Function &#39;AddAttribute\n\n\n    &#39; Add a child element to the specified security element.\n    Private Shared Function AddChildElement(ByVal parentElement As SecurityElement, ByVal tagName As String, ByVal tagText As String) As SecurityElement\n        If Not (parentElement Is Nothing) Then\n            &#39; Ensure that the tag text is in valid XML format.\n            If Not SecurityElement.IsValidText(tagText) Then\n                &#39; Replace invalid text with valid XML text \n                &#39; to enforce proper XML formatting.\n                tagText = SecurityElement.Escape(tagText)\n            End If\n\n            &#39; Determine whether the tag is in valid XML format.\n            If SecurityElement.IsValidTag(tagName) Then\n                Dim childElement As SecurityElement\n                childElement = parentElement.SearchForChildByTag(tagName)\n                If Not (childElement Is Nothing) Then\n                    Dim elementText As String\n                    elementText = parentElement.SearchForTextOfTag(tagName)\n                    If Not elementText.Equals(tagText) Then\n                        &#39; Add child element to the parent security element.\n                        parentElement.AddChild(New SecurityElement(tagName, tagText))\n                    End If\n                Else\n                    &#39; Add child element to the parent security element.\n                    parentElement.AddChild(New SecurityElement(tagName, tagText))\n                End If\n            End If\n        End If\n        Return parentElement\n\n    End Function &#39;AddChildElement\n\n\n    &#39; Create and display a summary sentence \n    &#39; about the specified security element.\n    Private Shared Sub DisplaySummary(ByVal xmlElement As SecurityElement)\n        &#39; Retrieve tag name for the security element.\n        Dim xmlTreeName As String = xmlElement.Tag.ToString()\n        &#39; Retrieve tag text for the security element.\n        Dim xmlTreeDescription As String = xmlElement.Text\n        &#39; Retrieve value of the creationdate attribute.\n        Dim xmlCreationDate As String = xmlElement.Attribute(&quot;creationdate&quot;)\n        &#39; Retrieve the number of children under the security element.\n        Dim childrenCount As String = xmlElement.Children.Count.ToString()\n        Dim outputMessage As String = &quot;The security XML tree named &quot; + xmlTreeName\n        outputMessage += &quot;(&quot; + xmlTreeDescription + &quot;)&quot;\n        outputMessage += &quot; was created on &quot; + xmlCreationDate + &quot; and &quot;\n        outputMessage += &quot;contains &quot; + childrenCount + &quot; child elements.&quot;\n\n        Console.WriteLine(outputMessage)\n\n    End Sub &#39;DisplaySummary\n\n\n    &#39; Compare the first two occurrences of an attribute \n    &#39; in the specified security element.\n    Private Shared Sub CompareAttributes(ByVal xmlElement As SecurityElement, ByVal attributeName As String)\n        &#39; Create a hash table containing the security element&#39;s attributes.\n        Dim attributeKeys As Hashtable = xmlElement.Attributes\n        Dim attributeValue As String = attributeKeys(attributeName).ToString()\n        Dim xmlChild As SecurityElement\n        For Each xmlChild In xmlElement.Children\n            If attributeValue.Equals(xmlChild.Attribute(attributeName)) Then\n            End If\n        Next xmlChild\n        &#39; The security elements were created at the exact same time.\n    End Sub &#39;CompareAttributes\n\n\n    &#39; Convert the contents of the specified security element \n    &#39; to hash codes stored in a hash table.\n    Private Shared Sub ConvertToHashTable(ByVal xmlElement As SecurityElement)\n        &#39; Create a hash table to hold hash codes of the security elements.\n        Dim xmlAsHash As New Hashtable()\n        Dim rootIndex As Integer = xmlElement.GetHashCode()\n        xmlAsHash.Add(rootIndex, &quot;root&quot;)\n        Dim parentNum As Integer = 0\n\n        Dim xmlParent As SecurityElement\n        For Each xmlParent In xmlElement.Children\n            parentNum += 1\n            xmlAsHash.Add(xmlParent.GetHashCode(), &quot;parent&quot; + parentNum.ToString())\n            If Not (xmlParent.Children Is Nothing) AndAlso xmlParent.Children.Count &gt; 0 Then\n                Dim childNum As Integer = 0\n                Dim xmlChild As SecurityElement\n                For Each xmlChild In xmlParent.Children\n                    childNum += 1\n                    xmlAsHash.Add(xmlChild.GetHashCode(), &quot;child&quot; + childNum.ToString())\n                Next xmlChild\n            End If\n        Next xmlParent\n\n    End Sub &#39;ConvertToHashTable\n\n\n    &#39; Delete the specified security element if the current time is past\n    &#39; the time stored in the destroytime tag.\n    Private Shared Function DestroyTree(ByVal xmlElement As SecurityElement) As SecurityElement\n        Dim localXmlElement As SecurityElement = xmlElement\n        Dim destroyElement As SecurityElement = localXmlElement.SearchForChildByTag(&quot;destroytime&quot;)\n\n        &#39; Verify that a destroytime tag exists.\n        If Not (localXmlElement.SearchForChildByTag(&quot;destroytime&quot;) Is Nothing) Then\n            &#39; Retrieve the destroytime text to get the time \n            &#39; the tree can be destroyed.\n            Dim storedDestroyTime As String = localXmlElement.SearchForTextOfTag(&quot;destroytime&quot;)\n            Dim destroyTime As DateTime = DateTime.Parse(storedDestroyTime)\n            If DateTime.Now &gt; destroyTime Then\n                localXmlElement = Nothing\n                Console.WriteLine(&quot;The XML security tree has been deleted.&quot;)\n            End If\n        End If\n\n        &#39; Verify that xmlElement is of type SecurityElement.\n        If xmlElement.GetType().Equals(GetType(System.Security.SecurityElement)) Then\n            &#39; Determine whether the localXmlElement object \n            &#39; differs from xmlElement.\n            If xmlElement.Equals(localXmlElement) Then\n                &#39; Verify that the tags, attributes and children of the\n                &#39; two security elements are identical.\n                If xmlElement.Equal(localXmlElement) Then\n                    &#39; Return the original security element.\n                    Return xmlElement\n                End If\n            End If\n        End If\n\n        &#39; Return the modified security element.\n        Return localXmlElement\n\n    End Function &#39;DestroyTree\nEnd Class &#39;SecurityElementMembers\n&#39;\n&#39; This sample produces the following output:\n&#39; \n&#39; The security XML tree named RootTag(XML security tree) \n&#39; was created on 2/23/2004 1:23:00 PM and contains 2 child elements.\n&#39;&lt;RootTag creationdate=&quot;2/23/2004 1:23:00 PM&quot;&gt;XML security tree\n&#39;   &lt;destroytime&gt;2/23/2004 1:23:01 PM&lt;/destroytime&gt;\n&#39;   &lt;WindowsMembership.WindowsRole version=&quot;1.00&quot;\n&#39;                                  creationdate=&quot;2/23/2004 1:23:00 PM&quot;&gt;\n&#39;      &lt;BabyElement&gt;This is a child element.&lt;/BabyElement&gt;\n&#39;   &lt;/WindowsMembership.WindowsRole&gt;\n&#39;&lt;/RootTag&gt;\n&#39;\n&#39;This sample completed successfully; press Exit to continue.\n</code></pre><pre><code class=\"lang-cpp\" name=\"SecurityElementMembers#1\">using namespace System;\nusing namespace System::Security;\nusing namespace System::Collections;\nref class SecurityElementMembers\n{\npublic:\n\n   [STAThread]\n   int TestSecurityElementMembers()\n   {\n      SecurityElement^ xmlRootElement = gcnew SecurityElement( L&quot;RootTag&quot;,L&quot;XML security tree&quot; );\n\n      AddAttribute( xmlRootElement, L&quot;creationdate&quot;, DateTime::Now.ToString() );\n      AddChildElement( xmlRootElement, L&quot;destroytime&quot;, DateTime::Now.AddSeconds( 1.0 ).ToString() );\n      \n      SecurityElement^ windowsRoleElement = gcnew SecurityElement( L&quot;WindowsMembership.WindowsRole&quot; );\n\n      windowsRoleElement-&gt;AddAttribute( L&quot;version&quot;, L&quot;1.00&quot; );\n\n      // Add a child element and a creationdate attribute.\n      AddChildElement( windowsRoleElement, L&quot;BabyElement&quot;, L&quot;This is a child element&quot; );\n      AddAttribute( windowsRoleElement, L&quot;creationdate&quot;, DateTime::Now.ToString() );\n      \n      xmlRootElement-&gt;AddChild( windowsRoleElement );\n\n      CompareAttributes( xmlRootElement, L&quot;creationdate&quot; );\n      ConvertToHashTable( xmlRootElement );\n      DisplaySummary( xmlRootElement );\n\n      // Determine if the security element is too old to keep.\n      xmlRootElement = DestroyTree( xmlRootElement );\n      if ( xmlRootElement != nullptr )\n      {\n         String^ elementInXml = xmlRootElement-&gt;ToString();\n\n         Console::WriteLine( elementInXml );\n      }\n\n      Console::WriteLine( L&quot;This sample completed successfully; &quot;\n      L&quot;press Enter to exit.&quot; );\n      Console::ReadLine();\n      return 1;\n   }\n\n\nprivate:\n\n   // Add an attribute to the specified security element.\n   static SecurityElement^ AddAttribute( SecurityElement^ xmlElement, String^ attributeName, String^ attributeValue )\n   {\n      if ( xmlElement != nullptr )\n      {\n         // Verify that the attribute name and value are valid XML formats.\n         if ( SecurityElement::IsValidAttributeName( attributeName ) &amp;&amp;\n                SecurityElement::IsValidAttributeValue( attributeValue ) )\n         {\n            // Add the attribute to the security element.\n            xmlElement-&gt;AddAttribute( attributeName, attributeValue );\n         }\n      }\n\n      return xmlElement;\n   }\n\n\n   // Add a child element to the specified security element.\n   static SecurityElement^ AddChildElement( SecurityElement^ parentElement, String^ tagName, String^ tagText )\n   {\n      if ( parentElement != nullptr )\n      {\n         // Ensure that the tag text is in valid XML format.\n         if (  !SecurityElement::IsValidText( tagText ) )\n         {\n            // Replace invalid text with valid XML text \n            // to enforce proper XML formatting.\n            tagText = SecurityElement::Escape( tagText );\n         }\n\n         // Determine whether the tag is in valid XML format.\n         if ( SecurityElement::IsValidTag( tagName ) )\n         {\n            SecurityElement^ childElement;\n            childElement = parentElement-&gt;SearchForChildByTag( tagName );\n            if ( childElement != nullptr )\n            {\n               String^ elementText;\n               elementText = parentElement-&gt;SearchForTextOfTag( tagName );\n               if (  !elementText-&gt;Equals( tagText ) )\n               {\n                  // Add child element to the parent security element.\n                  parentElement-&gt;AddChild( gcnew SecurityElement( tagName,tagText ) );\n               }\n            }\n            else\n            {\n               // Add child element to the parent security element.\n               parentElement-&gt;AddChild( gcnew SecurityElement( tagName,tagText ) );\n            }\n         }\n      }\n\n      return parentElement;\n   }\n\n\n   // Create and display a summary sentence \n   // about the specified security element.\n   static void DisplaySummary( SecurityElement^ xmlElement )\n   {\n      // Retrieve tag name for the security element.\n      String^ xmlTreeName = xmlElement-&gt;Tag-&gt;ToString();\n      // Retrieve tag text for the security element.\n      String^ xmlTreeDescription = xmlElement-&gt;Text;\n      // Retrieve value of the creationdate attribute.\n      String^ xmlCreationDate = xmlElement-&gt;Attribute(L&quot;creationdate&quot;);\n      // Retrieve the number of children under the security element.\n      String^ childrenCount = xmlElement-&gt;Children-&gt;Count.ToString();\n      String^ outputMessage = String::Format( L&quot;The security XML tree named {0}&quot;, xmlTreeName );\n      outputMessage = String::Concat( outputMessage, String::Format( L&quot;({0})&quot;, xmlTreeDescription ) );\n      outputMessage = String::Concat( outputMessage, String::Format( L&quot; was created on {0} and &quot;, xmlCreationDate ) );\n      outputMessage = String::Concat( outputMessage, String::Format( L&quot;contains {0} child elements.&quot;, childrenCount ) );\n      Console::WriteLine( outputMessage );\n   }\n\n   // Compare the first two occurrences of an attribute \n   // in the specified security element.\n   static void CompareAttributes( SecurityElement^ xmlElement, String^ attributeName )\n   {\n      // Create a hash table containing the security element&#39;s attributes.\n      Hashtable^ attributeKeys = xmlElement-&gt;Attributes;\n      String^ attributeValue = attributeKeys[ attributeName ]-&gt;ToString();\n      IEnumerator^ myEnum = xmlElement-&gt;Children-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         SecurityElement^ xmlChild = safe_cast&lt;SecurityElement^&gt;(myEnum-&gt;Current);\n         if ( attributeValue-&gt;Equals( xmlChild-&gt;Attribute(attributeName) ) )\n         {\n            // The security elements were created at the exact same time.\n         }\n      }\n   }\n\n   // Convert the contents of the specified security element \n   // to hash codes stored in a hash table.\n   static void ConvertToHashTable( SecurityElement^ xmlElement )\n   {\n      // Create a hash table to hold hash codes of the security elements.\n      Hashtable^ xmlAsHash = gcnew Hashtable;\n      int rootIndex = xmlElement-&gt;GetHashCode();\n      xmlAsHash-&gt;Add( rootIndex, L&quot;root&quot; );\n      int parentNum = 0;\n      IEnumerator^ myEnum1 = xmlElement-&gt;Children-&gt;GetEnumerator();\n      while ( myEnum1-&gt;MoveNext() )\n      {\n         SecurityElement^ xmlParent = safe_cast&lt;SecurityElement^&gt;(myEnum1-&gt;Current);\n         parentNum++;\n         xmlAsHash-&gt;Add( xmlParent-&gt;GetHashCode(), String::Format( L&quot;parent{0}&quot;, parentNum ) );\n         if ( (xmlParent-&gt;Children != nullptr) &amp;&amp; (xmlParent-&gt;Children-&gt;Count &gt; 0) )\n         {\n            int childNum = 0;\n            IEnumerator^ myEnum2 = xmlParent-&gt;Children-&gt;GetEnumerator();\n            while ( myEnum2-&gt;MoveNext() )\n            {\n               SecurityElement^ xmlChild = safe_cast&lt;SecurityElement^&gt;(myEnum2-&gt;Current);\n               childNum++;\n               xmlAsHash-&gt;Add( xmlChild-&gt;GetHashCode(), String::Format( L&quot;child{0}&quot;, childNum ) );\n            }\n         }\n      }\n   }\n\n   // Delete the specified security element if the current time is past\n   // the time stored in the destroytime tag.\n   static SecurityElement^ DestroyTree( SecurityElement^ xmlElement )\n   {\n      SecurityElement^ localXmlElement = xmlElement;\n      SecurityElement^ destroyElement = localXmlElement-&gt;SearchForChildByTag( L&quot;destroytime&quot; );\n      \n      // Verify that a destroytime tag exists.\n      if ( localXmlElement-&gt;SearchForChildByTag( L&quot;destroytime&quot; ) != nullptr )\n      {\n         // Retrieve the destroytime text to get the time \n         // the tree can be destroyed.\n         String^ storedDestroyTime = localXmlElement-&gt;SearchForTextOfTag( L&quot;destroytime&quot; );\n         DateTime destroyTime = DateTime::Parse( storedDestroyTime );\n         if ( DateTime::Now &gt; destroyTime )\n         {\n            localXmlElement = nullptr;\n            Console::WriteLine( L&quot;The XML security tree has been deleted.&quot; );\n         }\n      }\n\n      \n      // Verify that xmlElement is of type SecurityElement.\n      if ( xmlElement-&gt;GetType()-&gt;Equals( System::Security::SecurityElement::typeid ) )\n      {\n         // Determine whether the localXmlElement object \n         // differs from xmlElement.\n         if ( xmlElement-&gt;Equals( localXmlElement ) )\n         {\n            // Verify that the tags, attributes and children of the\n            // two security elements are identical.\n            if ( xmlElement-&gt;Equal( localXmlElement ) )\n            {\n               // Return the original security element.\n               return xmlElement;\n            }\n         }\n      }\n\n      // Return the modified security element.\n      return localXmlElement;\n   }\n\n};\n\nint main()\n{\n   SecurityElementMembers^ sem = gcnew SecurityElementMembers;\n   sem-&gt;TestSecurityElementMembers();\n}\n\n//\n// This sample produces the following output:\n// \n// The security XML tree named RootTag(XML security tree) \n// was created on 2/23/2004 1:23:00 PM and contains 2 child elements.\n//&lt;RootTag creationdate=&quot;2/23/2004 1:23:00 PM&quot;&gt;XML security tree\n//   &lt;destroytime&gt;2/23/2004 1:23:01 PM&lt;/destroytime&gt;\n//   &lt;WindowsMembership.WindowsRole version=&quot;1.00&quot;\n//                                  creationdate=&quot;2/23/2004 1:23:00 PM&quot;&gt;\n//      &lt;BabyElement&gt;This is a child element.&lt;/BabyElement&gt;\n//   &lt;/WindowsMembership.WindowsRole&gt;\n//&lt;/RootTag&gt;\n//\n//This sample completed successfully; press Exit to continue.\n</code></pre><pre><code class=\"lang-cs\" name=\"SecurityElementMembers#1\">using System;\nusing System.Security;\nusing System.Collections;\n\nclass SecurityElementMembers\n{\n    [STAThread]\n    static void Main(string[] args)\n    {\n        SecurityElement xmlRootElement = \n            new SecurityElement(&quot;RootTag&quot;, &quot;XML security tree&quot;);\n\n        AddAttribute(xmlRootElement,&quot;creationdate&quot;,DateTime.Now.ToString());\n        AddChildElement(xmlRootElement,&quot;destroytime&quot;,\n            DateTime.Now.AddSeconds(1.0).ToString());\n\n        SecurityElement windowsRoleElement = \n            new SecurityElement(&quot;WindowsMembership.WindowsRole&quot;);\n        \n        windowsRoleElement.AddAttribute(&quot;version&quot;,&quot;1.00&quot;);\n\n        // Add a child element and a creationdate attribute.\n        AddChildElement(windowsRoleElement,&quot;BabyElement&quot;,\n            &quot;This is a child element&quot;);\n        AddAttribute(windowsRoleElement,&quot;creationdate&quot;,\n            DateTime.Now.ToString());\n\n        xmlRootElement.AddChild(windowsRoleElement);\n\n        CompareAttributes(xmlRootElement, &quot;creationdate&quot;);\n        ConvertToHashTable(xmlRootElement);\n\n        DisplaySummary(xmlRootElement);\n\n        // Determine if the security element is too old to keep.\n        xmlRootElement = DestroyTree(xmlRootElement);\n        if (xmlRootElement != null)\n        {\n            string elementInXml = xmlRootElement.ToString();\n            Console.WriteLine(elementInXml);\n        }\n        \n        Console.WriteLine(&quot;This sample completed successfully; &quot; +\n            &quot;press Enter to exit.&quot;);\n        Console.ReadLine();\n    }\n\n    // Add an attribute to the specified security element.\n    private static SecurityElement AddAttribute(\n        SecurityElement xmlElement,\n        string attributeName,\n        string attributeValue)\n    {\n        if (xmlElement != null)\n        {\n            // Verify that the attribute name and value are valid XML formats.\n            if (SecurityElement.IsValidAttributeName(attributeName) &amp;&amp;\n                SecurityElement.IsValidAttributeValue(attributeValue))\n            {\n                // Add the attribute to the security element.\n                xmlElement.AddAttribute(attributeName, attributeValue);\n            }\n        }\n        return xmlElement;\n    }\n\n    // Add a child element to the specified security element.\n    private static SecurityElement AddChildElement(\n        SecurityElement parentElement,\n        string tagName,\n        string tagText)\n    {\n        if (parentElement != null)\n        {\n            // Ensure that the tag text is in valid XML format.\n            if (!SecurityElement.IsValidText(tagText))\n            {\n                // Replace invalid text with valid XML text \n                // to enforce proper XML formatting.\n                tagText = SecurityElement.Escape(tagText);\n            }\n\n            // Determine whether the tag is in valid XML format.\n            if (SecurityElement.IsValidTag(tagName))\n            {\n                SecurityElement childElement;\n                childElement = parentElement.SearchForChildByTag(tagName);\n\n                if (childElement != null)\n                {\n                    String elementText;\n                    elementText = parentElement.SearchForTextOfTag(tagName);\n\n                    if (!elementText.Equals(tagText))\n                    {\n                        // Add child element to the parent security element.\n                        parentElement.AddChild(\n                            new SecurityElement(tagName, tagText));\n                    }\n                }\n                else \n                {\n                    // Add child element to the parent security element.\n                    parentElement.AddChild(\n                        new SecurityElement(tagName, tagText));\n                }\n            }\n        }\n        return parentElement;\n    }\n\n    // Create and display a summary sentence \n    // about the specified security element.\n    private static void DisplaySummary(SecurityElement xmlElement)\n    {\n        // Retrieve tag name for the security element.\n        string xmlTreeName = xmlElement.Tag.ToString();\n\n        // Retrieve tag text for the security element.\n        string xmlTreeDescription = xmlElement.Text;\n        \n        // Retrieve value of the creationdate attribute.\n        string xmlCreationDate = xmlElement.Attribute(&quot;creationdate&quot;);\n        \n        // Retrieve the number of children under the security element.\n        string childrenCount = xmlElement.Children.Count.ToString();\n\n        string outputMessage = &quot;The security XML tree named &quot; + xmlTreeName;\n        outputMessage += &quot;(&quot; + xmlTreeDescription + &quot;)&quot;;\n        outputMessage += &quot; was created on &quot; + xmlCreationDate + &quot; and &quot;;\n        outputMessage += &quot;contains &quot; + childrenCount + &quot; child elements.&quot;;\n\n        Console.WriteLine(outputMessage);\n    }\n\n    // Compare the first two occurrences of an attribute \n    // in the specified security element.\n    private static void CompareAttributes(\n        SecurityElement xmlElement, string attributeName)\n    {\n        // Create a hash table containing the security element&#39;s attributes.\n        Hashtable attributeKeys = xmlElement.Attributes;\n        string attributeValue = attributeKeys[attributeName].ToString();\n\n        foreach(SecurityElement xmlChild in xmlElement.Children)\n        {\n            if (attributeValue.Equals(xmlChild.Attribute(attributeName)))\n            {\n                // The security elements were created at the exact same time.\n            }\n        }\n    }\n\n    // Convert the contents of the specified security element \n    // to hash codes stored in a hash table.\n    private static void ConvertToHashTable(SecurityElement xmlElement)\n    {\n        // Create a hash table to hold hash codes of the security elements.\n        Hashtable xmlAsHash = new Hashtable();\n        int rootIndex = xmlElement.GetHashCode();\n        xmlAsHash.Add(rootIndex, &quot;root&quot;);\n\n        int parentNum = 0;\n\n        foreach(SecurityElement xmlParent in xmlElement.Children)\n        {\n            parentNum++;\n            xmlAsHash.Add(xmlParent.GetHashCode(), &quot;parent&quot; + parentNum);\n            if ((xmlParent.Children != null) &amp;&amp; \n                (xmlParent.Children.Count &gt; 0))\n            {\n                int childNum = 0;\n                foreach(SecurityElement xmlChild in xmlParent.Children)\n                {\n                    childNum++;\n                    xmlAsHash.Add(xmlChild.GetHashCode(), &quot;child&quot; + childNum);\n                }\n            }\n        }\n    }\n\n    // Delete the specified security element if the current time is past\n    // the time stored in the destroytime tag.\n    private static SecurityElement DestroyTree(SecurityElement xmlElement)\n    {\n        SecurityElement localXmlElement = xmlElement;\n        SecurityElement destroyElement = \n            localXmlElement.SearchForChildByTag(&quot;destroytime&quot;);\n\n        // Verify that a destroytime tag exists.\n        if (localXmlElement.SearchForChildByTag(&quot;destroytime&quot;) != null)\n        {\n            // Retrieve the destroytime text to get the time \n            // the tree can be destroyed.\n            string storedDestroyTime =\n                localXmlElement.SearchForTextOfTag(&quot;destroytime&quot;);\n\n            DateTime destroyTime = DateTime.Parse(storedDestroyTime);\n            if (DateTime.Now &gt; destroyTime)\n            {\n                localXmlElement = null;\n                Console.WriteLine(&quot;The XML security tree has been deleted.&quot;);\n            }\n        }\n\n        // Verify that xmlElement is of type SecurityElement.\n        if (xmlElement.GetType().Equals(\n            typeof(System.Security.SecurityElement)))\n        {\n            // Determine whether the localXmlElement object \n            // differs from xmlElement.\n            if (xmlElement.Equals(localXmlElement))\n            {\n                // Verify that the tags, attributes and children of the\n                // two security elements are identical.\n                if (xmlElement.Equal(localXmlElement))\n                {\n                    // Return the original security element.\n                    return xmlElement;\n                }\n            }\n        }\n\n        // Return the modified security element.\n        return localXmlElement;\n    }\n}\n//\n// This sample produces the following output:\n// \n// The security XML tree named RootTag(XML security tree) \n// was created on 2/23/2004 1:23:00 PM and contains 2 child elements.\n//&lt;RootTag creationdate=&quot;2/23/2004 1:23:00 PM&quot;&gt;XML security tree\n//   &lt;destroytime&gt;2/23/2004 1:23:01 PM&lt;/destroytime&gt;\n//   &lt;WindowsMembership.WindowsRole version=&quot;1.00&quot;\n//                                  creationdate=&quot;2/23/2004 1:23:00 PM&quot;&gt;\n//      &lt;BabyElement&gt;This is a child element.&lt;/BabyElement&gt;\n//   &lt;/WindowsMembership.WindowsRole&gt;\n//&lt;/RootTag&gt;\n//\n//This sample completed successfully; press Exit to continue.\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>This class is intended to be a lightweight implementation of a simple XML object model for use within the security system, and not for use as a general XML object model. This documentation assumes a basic knowledge of XML.  </p>\n<p> The simple XML object model for an element consists of the following parts:  </p>\n<ul>\n<li><p>The tag is the element name.  </p>\n</li>\n<li><p>The attributes are zero or more name/value attribute pairs on the element.  </p>\n</li>\n<li><p>The children are zero or more elements nested within <code>&lt;tag&gt;</code> and <code>&lt;/tag&gt;</code>.  </p>\n<p>It is strongly suggested that attribute based XML representation is used to express security elements and their values. This means properties of an element are expressed as attributes and property values are expressed as attribute values. Avoid nesting text within tags. For any <code>&lt;tag&gt;text&lt;/tag&gt;</code> representation a representation of type <code>&lt;tag value=&quot;text&quot;/&gt;</code> is usually available. Using this attribute-based XML representation increases readability and allows easy WMI portability of the resulting XML serialization.  </p>\n<p>An attribute name must be one character or longer, and cannot be <code>null</code>. If element-based value representation is used, elements with a text string that is <code>null</code> are represented in the <code>&lt;tag/&gt;</code> form; otherwise, text is delimited by the <code>&lt;tag&gt;</code> and <code>&lt;/tag&gt;</code> tokens. Both forms can be combined with attributes, which are shown if present.  </p>\n<p>The tags, attributes, and text of elements, if present, are always case-sensitive. The XML form contains quotations and escapes where necessary. String values that include characters invalid for use in XML result in an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. These rules apply to all properties and methods.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> For performance reasons, character validity is only checked when the element is encoded into XML text form, and not on every set of a property or method. Static methods allow explicit checking where needed.</p>\n</div>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_SecurityElement__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_SecurityElement__ctor_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SecurityElement(String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> class with the specified tag.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public SecurityElement (string tag);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>tag</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The tag name of an XML element.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>tag</code> parameter is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>tag</code> parameter is invalid in XML.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <code>tag</code> parameter must consist of a valid XML tag name. Use <a class=\"xref\" href=\"system.security.securityelement#System_Security_SecurityElement_Escape_\" data-linktype=\"relative-path\">Escape</a> to remove invalid characters from the string.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_SecurityElement__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_SecurityElement__ctor_System_String_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SecurityElement(String, String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> class with the specified tag and text.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public SecurityElement (string tag, string text);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>tag</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The tag name of the XML element.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>text</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The text content within the element.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>tag</code> parameter is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>tag</code> parameter or <code>text</code> parameter is invalid in XML.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If the <code>text</code> parameter is <code>null</code> this constructor produces an element identical to the default constructor.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_SecurityElement_Attributes_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_SecurityElement_Attributes\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Attributes</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the attributes of an XML element as name/value pairs.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Collections.Hashtable Attributes { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object for the attribute values of the XML element.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The name or value of the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> object is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The name is not a valid XML attribute name.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Each attribute is stored in the <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a> as a name/value pair.  </p>\n<p> Names and values in attributes should contain only valid XML attribute characters. Use <a class=\"xref\" href=\"system.security.securityelement#System_Security_SecurityElement_Escape_\" data-linktype=\"relative-path\">Escape</a> to remove invalid characters from the string.  </p>\n<p> There is no support for quoted strings, so strings for name/value pairs should not contain quotes or other characters requiring quoting.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_SecurityElement_Children_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_SecurityElement_Children\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Children</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the array of child elements of the XML element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Collections.ArrayList Children { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.arraylist\" data-linktype=\"relative-path\">ArrayList</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The ordered child elements of the XML element as security elements.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A child of the XML parent node is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If a <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> contains both <a class=\"xref\" href=\"system.security.securityelement#System_Security_SecurityElement_Text_\" data-linktype=\"relative-path\">Text</a> and Children, <a class=\"xref\" href=\"system.security.securityelement#System_Security_SecurityElement_Text_\" data-linktype=\"relative-path\">Text</a> will appear first.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_SecurityElement_Tag_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_SecurityElement_Tag\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Tag</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the tag name of an XML element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string Tag { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The tag name of an XML element.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The tag is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The tag is not valid in XML.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>In XML, the tag appears in the script as appears below:  </p>\n<pre><code>&lt;tag attributes&gt;text&lt;/tag&gt;  \n</code></pre><p> If this element has child elements, the children will replace <code>text</code>.  </p>\n<p> Assign only valid XML tag strings to this property. Use <a class=\"xref\" href=\"system.security.securityelement#System_Security_SecurityElement_Escape_\" data-linktype=\"relative-path\">Escape</a> to remove invalid characters from the string.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_SecurityElement_Text_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_SecurityElement_Text\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Text</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the text within an XML element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string Text { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value of the text within an XML element.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The text is not valid in XML.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The text should not contain XML special characters. Use <a class=\"xref\" href=\"system.security.securityelement#System_Security_SecurityElement_Escape_\" data-linktype=\"relative-path\">Escape</a> to remove invalid characters from the string.  </p>\n<p> If a <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> contains both Text and <a class=\"xref\" href=\"system.security.securityelement#System_Security_SecurityElement_Children_\" data-linktype=\"relative-path\">Children</a>, Text will appear first.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_SecurityElement_AddAttribute_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_SecurityElement_AddAttribute_System_String_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AddAttribute(String, String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Adds a name/value attribute to an XML element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void AddAttribute (string name, string value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>name</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of the attribute.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value of the attribute.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>name</code> parameter or <code>value</code> parameter is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>name</code> parameter or <code>value</code> parameter is invalid in XML.  </p>\n<p> -or-  </p>\n<p> An attribute with the name specified by the <code>name</code> parameter already exists.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Names and values in attributes should only contain valid XML attribute characters. XML attribute names must be unique. Use <a class=\"xref\" href=\"system.security.securityelement#System_Security_SecurityElement_Escape_\" data-linktype=\"relative-path\">Escape</a> to remove invalid characters from the string.  </p>\n<p> There is no support for quoted strings, so strings for name/value pairs should not contain quotes or other characters requiring quoting.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_SecurityElement_AddChild_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_SecurityElement_AddChild_System_Security_SecurityElement_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AddChild(SecurityElement)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Adds a child element to the XML element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void AddChild (System.Security.SecurityElement child);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>child</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The child element to add.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>child</code> parameter is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The child element is added following any previously existing child elements.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_SecurityElement_Attribute_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_SecurityElement_Attribute_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Attribute(String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Finds an attribute by name in an XML element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string Attribute (string name);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>name</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of the attribute for which to search.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The value associated with the named attribute, or <code>null</code> if no attribute with <code>name</code> exists.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>name</code> parameter is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>With XML as follows, <code>Attribute(&quot;B&quot;)</code> would return &quot;456&quot;.  </p>\n<pre><code>&lt;thetag A=&quot;123&quot; B=&quot;456&quot; C=&quot;789&quot;&gt;text&lt;/thetag&gt;  \n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_SecurityElement_Copy_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_SecurityElement_Copy\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Copy()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Creates and returns an identical copy of the current <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Security.SecurityElement Copy ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A copy of the current <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The copy includes both the <a class=\"xref\" href=\"system.security.securityelement#System_Security_SecurityElement_Children_\" data-linktype=\"relative-path\">Children</a> and <a class=\"xref\" href=\"system.security.securityelement#System_Security_SecurityElement_Attributes_\" data-linktype=\"relative-path\">Attributes</a> properties.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_SecurityElement_Equal_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_SecurityElement_Equal_System_Security_SecurityElement_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Equal(SecurityElement)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compares two XML element objects for equality.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool Equal (System.Security.SecurityElement other);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>other</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An XML element object to which to compare the current XML element object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the tag, attribute names and values, child elements, and text fields in the current XML element are identical to their counterparts in the <code>other</code> parameter; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If there are child elements, comparison extends recursively to them.  </p>\n<p> There is no support for comparing different XML representations of the same characters.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_SecurityElement_Escape_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_SecurityElement_Escape_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Escape(String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Replaces invalid XML characters in a string with their valid XML equivalent.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string Escape (string str);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>str</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string within which to escape invalid characters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The input string with invalid characters replaced.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use this method to replace invalid characters in a string before using the string in a <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a>. If invalid characters are used in a <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> without being escaped, an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> is thrown.  </p>\n<p> The following table shows the invalid XML characters and their escaped equivalents.  </p>\n<table>\n<thead>\n<tr>\n<th>invalid XML Character</th>\n<th>Replaced With</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&quot;&lt;&quot;</td>\n<td>&quot;&lt;&quot;</td>\n</tr>\n<tr>\n<td>&quot;&gt;&quot;</td>\n<td>&quot;&gt;&quot;</td>\n</tr>\n<tr>\n<td>&quot;\\&quot;&quot;</td>\n<td>&quot;&quot;&quot;</td>\n</tr>\n<tr>\n<td>&quot;\\&#39;&quot;</td>\n<td>&quot;&apos;&quot;</td>\n</tr>\n<tr>\n<td>&quot;&amp;&quot;</td>\n<td>&quot;&amp;&quot;</td>\n</tr>\n</tbody>\n</table>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_SecurityElement_FromString_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_SecurityElement_FromString_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FromString(String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Creates a security element from an XML-encoded string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Security.SecurityElement FromString (string xml);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>xml</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The XML-encoded string from which to create the security element.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a> created from the XML.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.xmlsyntaxexception\" data-linktype=\"relative-path\">XmlSyntaxException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>xml</code> contains one or more single quotation mark characters.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>xml</code> is<code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Do not use single quotation marks in the XML string; instead, use escaped double quotation marks. For example, instead of &quot;<code>&lt;value name=&#39;Company&#39;&gt;Microsoft&lt;/value&gt;&quot;</code> use &quot;<code>&lt;value name=\\&quot;Company\\&quot;&gt;Microsoft&lt;/value&gt;&quot;</code>.  </p>\n<p> Using single quotation marks can result in either an exception being thrown or, in some cases, the single quotation marks being treated as text in the string.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_SecurityElement_IsValidAttributeName_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_SecurityElement_IsValidAttributeName_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsValidAttributeName(String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether a string is a valid attribute name.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool IsValidAttributeName (string name);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>name</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The attribute name to test for validity.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <code>name</code> parameter is a valid XML attribute name; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be used to test an attribute before adding it to a security element.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_SecurityElement_IsValidAttributeValue_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_SecurityElement_IsValidAttributeValue_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsValidAttributeValue(String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether a string is a valid attribute value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool IsValidAttributeValue (string value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The attribute value to test for validity.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <code>value</code> parameter is a valid XML attribute value; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be used to test an attribute before adding it to a security element.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_SecurityElement_IsValidTag_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_SecurityElement_IsValidTag_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsValidTag(String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether a string is a valid tag.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool IsValidTag (string tag);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>tag</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The tag to test for validity.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <code>tag</code> parameter is a valid XML tag; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This can be used to test a <a class=\"xref\" href=\"system.security.securityelement#System_Security_SecurityElement_Tag_\" data-linktype=\"relative-path\">Tag</a> before setting it.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_SecurityElement_IsValidText_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_SecurityElement_IsValidText_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsValidText(String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether a string is valid as text within an XML element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool IsValidText (string text);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>text</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The text to test for validity.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <code>text</code> parameter is a valid XML text element; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be used to test <a class=\"xref\" href=\"system.security.securityelement#System_Security_SecurityElement_Text_\" data-linktype=\"relative-path\">Text</a> before setting it.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_SecurityElement_SearchForChildByTag_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_SecurityElement_SearchForChildByTag_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SearchForChildByTag(String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Finds a child by its tag name.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Security.SecurityElement SearchForChildByTag (string tag);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>tag</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The tag for which to search in child elements.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The first child XML element with the specified tag value, or <code>null</code> if no child element with <code>tag</code> exists.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>tag</code> parameter is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>With XML as follows, <code>SearchForChildByTag(&quot;second&quot;)</code> would return the child element <code>&lt;second&gt;</code>.  </p>\n<pre><code>&lt;thetag A=&quot;123&quot; B=&quot;456&quot; C=&quot;789&quot;&gt; &lt;first&gt;text1&lt;/first&gt;  \n       &lt;second&gt;text2&lt;/second&gt;&lt;/thetag&gt;  \n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_SecurityElement_SearchForTextOfTag_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_SecurityElement_SearchForTextOfTag_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SearchForTextOfTag(String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Finds a child by its tag name and returns the contained text.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string SearchForTextOfTag (string tag);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>tag</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The tag for which to search in child elements.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The text contents of the first child element with the specified tag value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>tag</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is equivalent to the following:  </p>\n<pre><code class=\"lang-vb\" name=\"System.Security.SecurityElement#1\">Public Function SearchForTextOfTag(ByVal tag As String) As String\n    Dim element As SecurityElement = MyClass.SearchForChildByTag(tag)\n    Return element.Text\nEnd Function\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.SecurityElement#1\">String^ SearchForTextOfTag(String^ tag)\n{\n    SecurityElement^ element = this-&gt;SearchForChildByTag(tag);\n    return element-&gt;Text;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.SecurityElement#1\">string SearchForTextOfTag(string tag)\n{\n    SecurityElement element = this.SearchForChildByTag(tag);\n    return element.Text;\n}\n</code></pre><p> With XML as follows, <code>SearchForTextOfTag(&quot;second&quot;)</code> would return &quot;text2&quot;.  </p>\n<pre><code>&lt;thetag A=&quot;123&quot; B=&quot;456&quot; C=&quot;789&quot;&gt; &lt;first&gt;text1&lt;/first&gt;  \n    &lt;second&gt;text2&lt;/second&gt;&lt;/thetag&gt;  \n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_SecurityElement_ToString_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_SecurityElement_ToString\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToString()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Produces a string representation of an XML element and its constituent attributes, child elements, and text.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override string ToString ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The XML element and its contents.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is useful in debugging to see the XML representation of the element.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.SecurityElement.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.AddAttribute\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.AddChild\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.Attribute\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.Attributes\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.Children\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.Copy\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.Equal\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.Escape\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.FromString\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.IsValidAttributeName\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.IsValidAttributeValue\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.IsValidTag\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.IsValidText\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.SearchForChildByTag\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.SearchForTextOfTag\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.Tag\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.Text\">\r\n<meta name=\"APIName\" content=\"System.Security.SecurityElement.ToString\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:59 PM\">\r\n<meta name=\"document_id\" content=\"509eb86a-9d92-e25e-1d49-a21a04cbf3e9\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the XML object model for encoding security objects. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.security/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.SecurityElement\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","uhfHeaderId":"MSDocsHeader-DotNet","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.SecurityElement.yml","open_to_public_contributors":false,"api_name":["System.Security.SecurityElement","System.Security.SecurityElement..ctor","System.Security.SecurityElement.AddAttribute","System.Security.SecurityElement.AddChild","System.Security.SecurityElement.Attribute","System.Security.SecurityElement.Attributes","System.Security.SecurityElement.Children","System.Security.SecurityElement.Copy","System.Security.SecurityElement.Equal","System.Security.SecurityElement.Escape","System.Security.SecurityElement.FromString","System.Security.SecurityElement.IsValidAttributeName","System.Security.SecurityElement.IsValidAttributeValue","System.Security.SecurityElement.IsValidTag","System.Security.SecurityElement.IsValidText","System.Security.SecurityElement.SearchForChildByTag","System.Security.SecurityElement.SearchForTextOfTag","System.Security.SecurityElement.Tag","System.Security.SecurityElement.Text","System.Security.SecurityElement.ToString"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.SecurityElement","System::Security::SecurityElement","System.Security.SecurityElement.#ctor","System::Security::SecurityElement::#ctor","System.Security.SecurityElement.AddAttribute","System::Security::SecurityElement::AddAttribute","System.Security.SecurityElement.AddChild","System::Security::SecurityElement::AddChild","System.Security.SecurityElement.Attribute","System::Security::SecurityElement::Attribute","System.Security.SecurityElement.Attributes","System::Security::SecurityElement::Attributes","System.Security.SecurityElement.Children","System::Security::SecurityElement::Children","System.Security.SecurityElement.Copy","System::Security::SecurityElement::Copy","System.Security.SecurityElement.Equal","System::Security::SecurityElement::Equal","System.Security.SecurityElement.Escape","System::Security::SecurityElement::Escape","System.Security.SecurityElement.FromString","System::Security::SecurityElement::FromString","System.Security.SecurityElement.IsValidAttributeName","System::Security::SecurityElement::IsValidAttributeName","System.Security.SecurityElement.IsValidAttributeValue","System::Security::SecurityElement::IsValidAttributeValue","System.Security.SecurityElement.IsValidTag","System::Security::SecurityElement::IsValidTag","System.Security.SecurityElement.IsValidText","System::Security::SecurityElement::IsValidText","System.Security.SecurityElement.SearchForChildByTag","System::Security::SecurityElement::SearchForChildByTag","System.Security.SecurityElement.SearchForTextOfTag","System::Security::SecurityElement::SearchForTextOfTag","System.Security.SecurityElement.Tag","System::Security::SecurityElement::Tag","System.Security.SecurityElement.Text","System::Security::SecurityElement::Text","System.Security.SecurityElement.ToString","System::Security::SecurityElement::ToString"],"dev_langs":["csharp"],"updated_at":"2017-04-01 05:59 PM","document_id":"509eb86a-9d92-e25e-1d49-a21a04cbf3e9","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Security/SecurityElement.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SecurityElement class | Microsoft Docs","_op_ogTitle":"SecurityElement class","description":"Represents the XML object model for encoding security objects. This class cannot be inherited.\n","toc_asset_id":"api/_splitted/System.Security/toc.json","toc_rel":"_splitted/System.Security/toc.json","source_url":"","ms.assetid":"System.Security.SecurityElement","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.security.securityelement","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.security.securityelement","fileRelativePath":"api/System.Security.SecurityElement.html"},"themesRelativePathToOutputRoot":"_themes/"}