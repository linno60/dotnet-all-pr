{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">Lookup&lt;TKey,TElement&gt;</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents a collection of keys each mapped to one or more values.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class Lookup&lt;TKey,TElement&gt; : System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;, System.Linq.ILookup&lt;TKey,TElement&gt;</code></pre>\r\n  \r\n  \r\n  \r\n  \t\t<h3 class=\"accented\">Type Parameters</h3>\r\n  \t\t<table class=\"nameValue stack\">\r\n  \t\t\t<tr>\r\n  \t\t\t<td>TKey</td>\r\n  \t\t\t<td><p>The type of the keys in the Lookup(TKey,.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t\t<tr>\r\n  \t\t\t<td>TElement</td>\r\n  \t\t\t<td><p>The type of the elements of each <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> value in the Lookup(TKey,.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t</table>\r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">Lookup&lt;TKey,TElement&gt;</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example creates a Lookup(TKey, from a collection of objects. It then enumerates the Lookup(TKey, and outputs each key and each value in the key&#39;s associated collection of values. It also demonstrates how to use the properties <a class=\"xref\" href=\"system.linq.lookup-2#System_Linq_Lookup_2_Count_\" data-linktype=\"relative-path\">Count</a> and <a class=\"xref\" href=\"system.linq.lookup-2#System_Linq_Lookup_2_Item_\" data-linktype=\"relative-path\">Item</a> and the methods <a class=\"xref\" href=\"system.linq.lookup-2#System_Linq_Lookup_2_Contains_\" data-linktype=\"relative-path\">Contains</a> and <a class=\"xref\" href=\"system.linq.lookup-2#System_Linq_Lookup_2_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.Lookup#1\">class Package\n{\n    public string Company;\n    public double Weight;\n    public long TrackingNumber;\n}\n\npublic static void LookupExample()\n{\n    // Create a list of Packages to put into a Lookup data structure.\n    List&lt;Package&gt; packages = new List&lt;Package&gt; { new Package { Company = &quot;Coho Vineyard&quot;, Weight = 25.2, TrackingNumber = 89453312L },\n                                                 new Package { Company = &quot;Lucerne Publishing&quot;, Weight = 18.7, TrackingNumber = 89112755L },\n                                                 new Package { Company = &quot;Wingtip Toys&quot;, Weight = 6.0, TrackingNumber = 299456122L },\n                                                 new Package { Company = &quot;Contoso Pharmaceuticals&quot;, Weight = 9.3, TrackingNumber = 670053128L },\n                                                 new Package { Company = &quot;Wide World Importers&quot;, Weight = 33.8, TrackingNumber = 4665518773L } };\n\n    // Create a Lookup to organize the packages. Use the first character of Company as the key value.\n    // Select Company appended to TrackingNumber for each element value in the Lookup.\n    Lookup&lt;char, string&gt; lookup = (Lookup&lt;char, string&gt;)packages.ToLookup(p =&gt; Convert.ToChar(p.Company.Substring(0, 1)),\n                                                    p =&gt; p.Company + &quot; &quot; + p.TrackingNumber);\n\n    // Iterate through each IGrouping in the Lookup and output the contents.\n    foreach (IGrouping&lt;char, string&gt; packageGroup in lookup)\n    {\n        // Print the key value of the IGrouping.\n        Console.WriteLine(packageGroup.Key);\n        // Iterate through each value in the IGrouping and print its value.\n        foreach (string str in packageGroup)\n            Console.WriteLine(&quot;    {0}&quot;, str);\n    }\n                \n    // This code produces the following output:\n    //\n    // C\n    //     Coho Vineyard 89453312\n    //     Contoso Pharmaceuticals 670053128\n    // L\n    //     Lucerne Publishing 89112755\n    // W\n    //     Wingtip Toys 299456122\n    //     Wide World Importers 4665518773\n\n    // Get the number of key-collection pairs in the Lookup.\n    int count = lookup.Count;\n\n    // Select a collection of Packages by indexing directly into the Lookup.\n    IEnumerable&lt;string&gt; cgroup = lookup[&#39;C&#39;];\n\n    // Output the results.\n    Console.WriteLine(&quot;\\nPackages that have a key of &#39;C&#39;:&quot;);\n    foreach (string str in cgroup)\n        Console.WriteLine(str);\n\n    // This code produces the following output:\n    //\n    // Packages that have a key of &#39;C&#39;\n    // Coho Vineyard 89453312\n    // Contoso Pharmaceuticals 670053128\n\n    // Determine if there is a key with the value &#39;G&#39; in the Lookup.\n    bool hasG = lookup.Contains(&#39;G&#39;);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.Lookup#1\">Structure Package\n    Public Company As String\n    Public Weight As Double\n    Public TrackingNumber As Long\nEnd Structure\n\nSub LookupExample()\n    &#39; Create a list of Packages to put into a Lookup data structure.\n    Dim packages As New System.Collections.Generic.List(Of Package)(New Package() _\n        {New Package With {.Company = &quot;Coho Vineyard&quot;, .Weight = 25.2, .TrackingNumber = 89453312L}, _\n          New Package With {.Company = &quot;Lucerne Publishing&quot;, .Weight = 18.7, .TrackingNumber = 89112755L}, _\n          New Package With {.Company = &quot;Wingtip Toys&quot;, .Weight = 6.0, .TrackingNumber = 299456122L}, _\n          New Package With {.Company = &quot;Contoso Pharmaceuticals&quot;, .Weight = 9.3, .TrackingNumber = 670053128L}, _\n          New Package With {.Company = &quot;Wide World Importers&quot;, .Weight = 33.8, .TrackingNumber = 4665518773L}})\n\n    &#39; Create a Lookup to organize the packages. Use the first character of Company as the key value.\n    &#39; Select Company appended to TrackingNumber for each element value in the Lookup.\n    Dim lookup As ILookup(Of Char, String) = _\n        packages.ToLookup(Function(ByVal p) Convert.ToChar(p.Company.Substring(0, 1)), _\n                          Function(ByVal p) p.Company &amp; &quot; &quot; &amp; p.TrackingNumber)\n\n    Dim output As New System.Text.StringBuilder\n    &#39; Iterate through each IGrouping in the Lookup and output the contents.\n    For Each packageGroup As IGrouping(Of Char, String) In lookup\n        &#39; Print the key value of the IGrouping.\n        output.AppendLine(packageGroup.Key)\n        &#39; Iterate through each value in the IGrouping and print its value.\n        For Each str As String In packageGroup\n            output.AppendLine(String.Format(&quot;    {0}&quot;, str))\n        Next\n    Next\n\n    &#39; Display the output.\n    MsgBox(output.ToString())\n\n    &#39; This code produces the following output:\n    &#39;\n    &#39; C\n    &#39;     Coho Vineyard 89453312\n    &#39;     Contoso Pharmaceuticals 670053128\n    &#39; L\n    &#39;     Lucerne Publishing 89112755\n    &#39; W\n    &#39;     Wingtip Toys 299456122\n    &#39;     Wide World Importers 4665518773\n\n    &#39; Get the number of key-collection pairs in the Lookup.\n    Dim count As Integer = lookup.Count\n\n    &#39; Select a collection of Packages by indexing directly into the Lookup.\n    Dim cgroup As System.Collections.Generic.IEnumerable(Of String) = lookup(&quot;C&quot;c)\n\n    output = New System.Text.StringBuilder\n    &#39; Output the results.\n    output.AppendLine(vbCrLf &amp; &quot;Packages that have a key of &#39;C&#39;:&quot;)\n    For Each str As String In cgroup\n        output.AppendLine(str)\n    Next\n\n    &#39; Display the output.\n    MsgBox(output.ToString())\n\n    &#39; This code produces the following output:\n    &#39;\n    &#39; Packages that have a key of &#39;C&#39;\n    &#39; Coho Vineyard 89453312\n    &#39; Contoso Pharmaceuticals 670053128\n\n    &#39; Determine if there is a key with the value &#39;G&#39; in the Lookup.\n    Dim hasG As Boolean = lookup.Contains(&quot;G&quot;c)\nEnd Sub\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>A Lookup(TKey, resembles a <a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a>. The difference is that a <a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a> maps keys to single values, whereas a Lookup(TKey, maps keys to collections of values.  </p>\n<p> You can create an instance of a Lookup(TKey, by calling <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb353368(v=vs.110).aspx\" data-linktype=\"external\">ToLookup</a> on an object that implements <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> There is no public constructor to create a new instance of a Lookup(TKey,. Additionally, Lookup(TKey, objects are immutable, that is, you cannot add or remove elements or keys from a Lookup(TKey, object after it has been created.</p>\n</div>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Linq_Lookup_2_Count\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Count</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the number of key/value collection pairs in the <span class=\"xref\">stem.Linq.Lookup`2</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int Count { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of key/value collection pairs in the <span class=\"xref\">stem.Linq.Lookup`2</span>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The value of the Count property does not change because items cannot be added to or removed from a <a class=\"xref\" href=\"system.linq.lookup-2\" data-linktype=\"relative-path\">Lookup&lt;TKey,TElement&gt;</a> object after it has been created.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Linq_Lookup_2_Item__0_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Item(TKey)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the collection of values indexed by the specified key.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Collections.Generic.IEnumerable&lt;TElement&gt; this[TKey key] { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>key</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">TKey</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The key of the desired collection of values.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TElement</span>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The collection of values indexed by the specified key.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This indexed property provides the ability to index a specific collection of values in the <a class=\"xref\" href=\"system.linq.lookup-2\" data-linktype=\"relative-path\">Lookup&lt;TKey,TElement&gt;</a> by using the following syntax: <code>myLookup[key]</code> in Visual C# or <code>myLookup(key)</code> in Visual Basic. If the <code>key</code> is not found in the collection, an empty sequence is returned.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Linq_Lookup_2_ApplyResultSelector__1_System_Func__0_System_Collections_Generic_IEnumerable__1____0__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ApplyResultSelector&lt;TResult&gt;(Func&lt;TKey,IEnumerable&lt;TElement&gt;,TResult&gt;)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Applies a transform function to each key and its associated values and returns the results.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Collections.Generic.IEnumerable&lt;TResult&gt; ApplyResultSelector&lt;TResult&gt; (Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt; resultSelector);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>resultSelector</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func</a>&lt;<span class=\"xref\">TKey</span>,<a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TElement</span>&gt;,<span class=\"xref\">TResult</span>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A function to project a result value from each key and its associated values.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TResult</span>&gt;</span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A collection that contains one value for each key/value collection pair in the <span class=\"xref\">stem.Linq.Lookup`2</span>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Linq_Lookup_2_Contains__0_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Contains(TKey)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether a specified key is in the <span class=\"xref\">stem.Linq.Lookup`2</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool Contains (TKey key);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>key</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">TKey</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The key to find in the <span class=\"xref\">stem.Linq.Lookup`2</span>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>key</code> is in the <span class=\"xref\">stem.Linq.Lookup`2</span>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Linq_Lookup_2_GetEnumerator\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetEnumerator()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a generic enumerator that iterates through the <span class=\"xref\">stem.Linq.Lookup`2</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Collections.Generic.IEnumerator&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GetEnumerator ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerator-1\" data-linktype=\"relative-path\">IEnumerator</a>&lt;<a class=\"xref\" href=\"system.linq.igrouping-2\" data-linktype=\"relative-path\">IGrouping</a>&lt;<span class=\"xref\">TKey</span>,<span class=\"xref\">TElement</span>&gt;&gt;</span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An enumerator for the <span class=\"xref\">stem.Linq.Lookup`2</span>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Explicit Interface Implementations\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Linq_Lookup_2_System_Collections_IEnumerable_GetEnumerator\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IEnumerable.GetEnumerator()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns an enumerator that iterates through the <span class=\"xref\">stem.Linq.Lookup`2</span>. This class cannot be inherited.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">System.Collections.IEnumerator IEnumerable.GetEnumerator ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An enumerator for the <span class=\"xref\">stem.Linq.Lookup`2</span>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Linq.Lookup-2.yml\">\r\n<meta name=\"APIName\" content=\"System.Linq.Lookup&lt;TKey,TElement&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Lookup&lt;TKey,TElement&gt;.ApplyResultSelector&lt;TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.Lookup&lt;TKey,TElement&gt;.Contains\">\r\n<meta name=\"APIName\" content=\"System.Linq.Lookup&lt;TKey,TElement&gt;.Count\">\r\n<meta name=\"APIName\" content=\"System.Linq.Lookup&lt;TKey,TElement&gt;.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Linq.Lookup&lt;TKey,TElement&gt;.Item\">\r\n<meta name=\"APIName\" content=\"System.Linq.Lookup&lt;TKey,TElement&gt;.IEnumerable.GetEnumerator\">\r\n<meta name=\"APILocation\" content=\"System.Core.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"601dfc42-9944-5806-2842-848d2cc37b4f\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a collection of keys each mapped to one or more values.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.linq/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Linq.Lookup`2\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Linq.Lookup-2.yml","open_to_public_contributors":false,"api_name":["System.Linq.Lookup<TKey,TElement>","System.Linq.Lookup<TKey,TElement>.ApplyResultSelector<TResult>","System.Linq.Lookup<TKey,TElement>.Contains","System.Linq.Lookup<TKey,TElement>.Count","System.Linq.Lookup<TKey,TElement>.GetEnumerator","System.Linq.Lookup<TKey,TElement>.Item","System.Linq.Lookup<TKey,TElement>.IEnumerable.GetEnumerator"],"api_location":["System.Core.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Linq.Lookup`2","System::Linq::Lookup`2","System.Linq.Lookup`2.ApplyResultSelector``1","System::Linq::Lookup`2::ApplyResultSelector``1","System.Linq.Lookup`2.Contains","System::Linq::Lookup`2::Contains","System.Linq.Lookup`2.Count","System::Linq::Lookup`2::Count","System.Linq.Lookup`2.GetEnumerator","System::Linq::Lookup`2::GetEnumerator","System.Linq.Lookup`2.Item","System::Linq::Lookup`2::Item","System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator","System::Linq::Lookup`2::System#Collections#IEnumerable#GetEnumerator"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"601dfc42-9944-5806-2842-848d2cc37b4f","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Linq/Lookup`2.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Lookup<TKey,TElement> class | Microsoft Docs","_op_ogTitle":"Lookup<TKey,TElement> class","description":"Represents a collection of keys each mapped to one or more values.\n","toc_asset_id":"api/_splitted/System.Linq/toc.json","toc_rel":"_splitted/System.Linq/toc.json","source_url":"","ms.assetid":"System.Linq.Lookup`2","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.linq.lookup-2","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.linq.lookup-2","fileRelativePath":"api/System.Linq.Lookup-2.html"},"themesRelativePathToOutputRoot":"_themes/"}