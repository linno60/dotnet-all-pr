{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">DependentTransaction</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Describes a clone of a transaction providing guarantee that the transaction cannot be committed until the application comes to rest regarding work on the transaction. This class cannot be inherited.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public sealed class DependentTransaction : System.Transactions.Transaction</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transaction\" data-linktype=\"relative-path\">Transaction</a></span></div><span class=\"lang-csharp\">DependentTransaction</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transaction#System_Transactions_Transaction_Clone\" data-linktype=\"relative-path\">Clone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transaction#System_Transactions_Transaction_Current\" data-linktype=\"relative-path\">Current</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transaction#System_Transactions_Transaction_DependentClone_System_Transactions_DependentCloneOption_\" data-linktype=\"relative-path\">DependentClone(DependentCloneOption)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transaction#System_Transactions_Transaction_Dispose\" data-linktype=\"relative-path\">Dispose()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transaction#System_Transactions_Transaction_EnlistDurable_System_Guid_System_Transactions_IEnlistmentNotification_System_Transactions_EnlistmentOptions_\" data-linktype=\"relative-path\">EnlistDurable(Guid, IEnlistmentNotification, EnlistmentOptions)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transaction#System_Transactions_Transaction_EnlistDurable_System_Guid_System_Transactions_ISinglePhaseNotification_System_Transactions_EnlistmentOptions_\" data-linktype=\"relative-path\">EnlistDurable(Guid, ISinglePhaseNotification, EnlistmentOptions)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transaction#System_Transactions_Transaction_EnlistPromotableSinglePhase_System_Transactions_IPromotableSinglePhaseNotification_\" data-linktype=\"relative-path\">EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transaction#System_Transactions_Transaction_EnlistPromotableSinglePhase_System_Transactions_IPromotableSinglePhaseNotification_System_Guid_\" data-linktype=\"relative-path\">EnlistPromotableSinglePhase(IPromotableSinglePhaseNotification, Guid)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transaction#System_Transactions_Transaction_EnlistVolatile_System_Transactions_IEnlistmentNotification_System_Transactions_EnlistmentOptions_\" data-linktype=\"relative-path\">EnlistVolatile(IEnlistmentNotification, EnlistmentOptions)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transaction#System_Transactions_Transaction_EnlistVolatile_System_Transactions_ISinglePhaseNotification_System_Transactions_EnlistmentOptions_\" data-linktype=\"relative-path\">EnlistVolatile(ISinglePhaseNotification, EnlistmentOptions)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transaction#System_Transactions_Transaction_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transaction#System_Transactions_Transaction_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transaction#System_Transactions_Transaction_GetPromotedToken\" data-linktype=\"relative-path\">GetPromotedToken()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transaction#System_Transactions_Transaction_IsolationLevel\" data-linktype=\"relative-path\">IsolationLevel</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transaction#System_Transactions_Transaction_op_Equality_System_Transactions_Transaction_System_Transactions_Transaction_\" data-linktype=\"relative-path\">op_Equality(Transaction, Transaction)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transaction#System_Transactions_Transaction_op_Inequality_System_Transactions_Transaction_System_Transactions_Transaction_\" data-linktype=\"relative-path\">op_Inequality(Transaction, Transaction)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transaction#System_Transactions_Transaction_PromoteAndEnlistDurable_System_Guid_System_Transactions_IPromotableSinglePhaseNotification_System_Transactions_ISinglePhaseNotification_System_Transactions_EnlistmentOptions_\" data-linktype=\"relative-path\">PromoteAndEnlistDurable(Guid, IPromotableSinglePhaseNotification, ISinglePhaseNotification, EnlistmentOptions)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transaction#System_Transactions_Transaction_PromoterType\" data-linktype=\"relative-path\">PromoterType</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transaction#System_Transactions_Transaction_Rollback\" data-linktype=\"relative-path\">Rollback()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transaction#System_Transactions_Transaction_Rollback_System_Exception_\" data-linktype=\"relative-path\">Rollback(Exception)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transaction#System_Transactions_Transaction_SetDistributedTransactionIdentifier_System_Transactions_IPromotableSinglePhaseNotification_System_Guid_\" data-linktype=\"relative-path\">SetDistributedTransactionIdentifier(IPromotableSinglePhaseNotification, Guid)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transaction#System_Transactions_Transaction_System_Runtime_Serialization_ISerializable_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"relative-path\">ISerializable.GetObjectData(SerializationInfo, StreamingContext)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transaction#System_Transactions_Transaction_TransactionCompleted\" data-linktype=\"relative-path\">TransactionCompleted</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transaction#System_Transactions_Transaction_TransactionInformation\" data-linktype=\"relative-path\">TransactionInformation</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example shows you how to create a dependent transaction.  </p>\n<pre><code class=\"lang-vb\" name=\"Tx_DependentTx#1\">Public Shared Sub Main()\n\tTry\n\t\tUsing scope As TransactionScope = New TransactionScope()\n\n\t\t\t&#39;Perform transactional work here.\n\n\t\t\t&#39;Queue work item\n\t\t\tThreadPool.QueueUserWorkItem(AddressOf WorkerThread, Transaction.Current.DependentClone(DependentCloneOption.BlockCommitUntilComplete))\n\n\t\t\t&#39;Display transaction information\n\t\t\tConsole.WriteLine(&quot;Transaction information:&quot;)\n\t\t\tConsole.WriteLine(&quot;ID:             {0}&quot;, Transaction.Current.TransactionInformation.LocalIdentifier)\n\t\t\tConsole.WriteLine(&quot;status:         {0}&quot;, Transaction.Current.TransactionInformation.Status)\n\t\t\tConsole.WriteLine(&quot;isolationlevel: {0}&quot;, Transaction.Current.IsolationLevel)\n\n\t\t\t&#39;Call Complete on the TransactionScope based on console input\n\t\t\tDim c As ConsoleKeyInfo\n\t\t\tWhile (True)\n\n\t\t\t\tConsole.Write(&quot;Complete the transaction scope? [Y|N] &quot;)\n\t\t\t\tc = Console.ReadKey()\n\t\t\t\tConsole.WriteLine()\n\t\t\t\tIf (c.KeyChar = &quot;Y&quot;) Or (c.KeyChar = &quot;y&quot;) Then\n\t\t\t\t\tscope.Complete()\n\t\t\t\t\tExit While\n\t\t\t\tElseIf ((c.KeyChar = &quot;N&quot;) Or (c.KeyChar = &quot;n&quot;)) Then\n\t\t\t\t\tExit While\n\t\t\t\tEnd If\n\t\t\tEnd While\n\t\tEnd Using\n\n\tCatch ex As TransactionException\n\t\tConsole.WriteLine(ex)\n\tCatch\n\t\tConsole.WriteLine(&quot;Cannot complete transaction&quot;)\n\t\tThrow\n\tEnd Try\nEnd Sub\n\nPublic Shared Sub WorkerThread(ByVal myTransaction As Object)\n\n\t&#39;Create a DependentTransaction from the object passed to the WorkerThread\n\tDim dTx As DependentTransaction\n\tdTx = CType(myTransaction, DependentTransaction)\n\n\t&#39;Sleep for 1 second to force the worker thread to delay\n\tThread.Sleep(1000)\n\n\t&#39;Pass the DependentTransaction to the scope, so that work done in the scope becomes part of the transaction passed to the worker thread\n\tUsing ts As TransactionScope = New TransactionScope(dTx)\n\t\t&#39;Perform transactional work here.\n\n\t\t&#39;Call complete on the transaction scope\n\t\tts.Complete()\n\tEnd Using\n\n\t&#39;Call complete on the dependent transaction\n\tdTx.Complete()\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"Tx_DependentTx#1\">static void Main(string[] args)\n{\n\ttry\n\t{\n\t\tusing (TransactionScope scope = new TransactionScope())\n\t\t{\n\t\t\t// Perform transactional work here.\n\n\t\t\t//Queue work item\n\t\t\tThreadPool.QueueUserWorkItem(new WaitCallback(WorkerThread), Transaction.Current.DependentClone(DependentCloneOption.BlockCommitUntilComplete));\n\n\t\t\t//Display transaction information\n\t\t\tConsole.WriteLine(&quot;Transaction information:&quot;);\n\t\t\tConsole.WriteLine(&quot;ID:             {0}&quot;, Transaction.Current.TransactionInformation.LocalIdentifier);\n\t\t\tConsole.WriteLine(&quot;status:         {0}&quot;, Transaction.Current.TransactionInformation.Status);\n\t\t\tConsole.WriteLine(&quot;isolationlevel: {0}&quot;, Transaction.Current.IsolationLevel);\n\n\t\t\t//Call Complete on the TransactionScope based on console input\n\t\t\tConsoleKeyInfo c;\n\t\t\twhile (true)\n\t\t\t{\n                      \t\t\tConsole.Write(&quot;Complete the transaction scope? [Y|N] &quot;);\n\t\t\t\tc = Console.ReadKey();\n\t\t\t\tConsole.WriteLine();\n\n\t\t\t\tif ((c.KeyChar == &#39;Y&#39;) || (c.KeyChar == &#39;y&#39;))\n\t\t\t\t{\n\t\t\t\t\t//Call complete on the scope\n\t\t\t\t\tscope.Complete();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if ((c.KeyChar == &#39;N&#39;) || (c.KeyChar == &#39;n&#39;))\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}\n\tcatch (System.Transactions.TransactionException ex)\n\t{\n\t\tConsole.WriteLine(ex);\n\t}\n\tcatch\n\t{\n\t\tConsole.WriteLine(&quot;Cannot complete transaction&quot;);\n\t\tthrow;\n\t}\n\t\n}\n\nprivate static void WorkerThread(object transaction)\n{\n\t//Create a DependentTransaction from the object passed to the WorkerThread\n\tDependentTransaction dTx = (DependentTransaction)transaction;\n\n\t//Sleep for 1 second to force the worker thread to delay\n\tThread.Sleep(1000);\n\n\t//Pass the DependentTransaction to the scope, so that work done in the scope becomes part of the transaction passed to the worker thread\n\tusing (TransactionScope ts = new TransactionScope(dTx))\n\t{\n\t\t//Perform transactional work here.\n\n\t\t//Call complete on the transaction scope\n\t\tts.Complete();\n\t}\n\n\t//Call complete on the dependent transaction\n\tdTx.Complete();\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The DependentTransaction is a clone of a <a class=\"xref\" href=\"system.transactions.transaction\" data-linktype=\"relative-path\">Transaction</a> object created using the <a class=\"xref\" href=\"system.transactions.transaction#System_Transactions_Transaction_DependentClone_\" data-linktype=\"relative-path\">DependentClone</a> method.  Its sole purpose is to allow the application to come to rest and guarantee that the transaction cannot commit while work is still being performed on the transaction (for example, on a worker thread).  </p>\n<p> When the work done within the cloned transaction is finally complete and ready to be committed, it can inform the creator of the transaction using the <a class=\"xref\" href=\"system.transactions.dependenttransaction#System_Transactions_DependentTransaction_Complete_\" data-linktype=\"relative-path\">Complete</a> method. Thus you can preserve the consistency and correctness of data.  </p>\n<p> The <a class=\"xref\" href=\"system.transactions.dependentcloneoption\" data-linktype=\"relative-path\">DependentCloneOption</a> enumeration is used to determine the behavior on commit.  This behavior control allows an application to come to rest, as well as provides concurrency support. For more information on how this enumeration is used, see <a href=\"http://msdn.microsoft.com/en-us/bdad8468-2a90-4b81-8375-278067120cab\" data-linktype=\"external\">Managing Concurrency with DependentTransaction</a>.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Transactions_DependentTransaction_Complete\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Complete()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Attempts to complete the dependent transaction.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Complete ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.transactions.transactionexception\" data-linktype=\"relative-path\">TransactionException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Any attempt for additional work on the transaction after this method is called. These include invoking methods such as <span class=\"xref\">stem.Transactions.Transaction.EnlistVolatile*</span>, <span class=\"xref\">stem.Transactions.Transaction.EnlistDurable*</span>, <span class=\"xref\">stem.Transactions.Transaction.Clone*</span>, <span class=\"xref\">stem.Transactions.Transaction.DependentClone*</span> , or any serialization operations on the transaction.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Call this method when the dependent clone wants to inform the creator of the transaction that it has finished its work, and the transaction can be committed if the parent is also ready.  </p>\n<p> After this call is invoked, you should not attempt any additional work on the transaction, or an exception is thrown.  </p>\n<p> If the application domain goes down after this method is called, and before the transaction is completed, the transaction might abort.  </p>\n<p> <strong>Note</strong> This method should be called only once during the dependent transaction&#39;s lifetime.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Transactions.DependentTransaction.yml\">\r\n<meta name=\"APIName\" content=\"System.Transactions.DependentTransaction\">\r\n<meta name=\"APIName\" content=\"System.Transactions.DependentTransaction.Complete\">\r\n<meta name=\"APILocation\" content=\"System.Transactions.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"31949b71-a818-0937-6b61-29e46c57130f\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Describes a clone of a transaction providing guarantee that the transaction cannot be committed until the application comes to rest regarding work on the transaction. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.transactions/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Transactions.DependentTransaction\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Transactions.DependentTransaction.yml","open_to_public_contributors":false,"api_name":["System.Transactions.DependentTransaction","System.Transactions.DependentTransaction.Complete"],"api_location":["System.Transactions.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Transactions.DependentTransaction","System::Transactions::DependentTransaction","System.Transactions.DependentTransaction.Complete","System::Transactions::DependentTransaction::Complete"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"31949b71-a818-0937-6b61-29e46c57130f","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Transactions/DependentTransaction.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DependentTransaction class | Microsoft Docs","_op_ogTitle":"DependentTransaction class","description":"Describes a clone of a transaction providing guarantee that the transaction cannot be committed until the application comes to rest regarding work on the transaction. This class cannot be inherited.\n","toc_asset_id":"api/_splitted/System.Transactions/toc.json","toc_rel":"_splitted/System.Transactions/toc.json","source_url":"","ms.assetid":"System.Transactions.DependentTransaction","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.transactions.dependenttransaction","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.transactions.dependenttransaction","fileRelativePath":"api/System.Transactions.DependentTransaction.html"},"themesRelativePathToOutputRoot":"_themes/"}