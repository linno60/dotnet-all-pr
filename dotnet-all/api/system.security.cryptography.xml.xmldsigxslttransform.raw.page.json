{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">XmlDsigXsltTransform</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the XSLT transform for a digital signature as defined by the W3C.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class XmlDsigXsltTransform : System.Security.Cryptography.Xml.Transform</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.transform\" data-linktype=\"relative-path\">Transform</a></span></div><span class=\"lang-csharp\">XmlDsigXsltTransform</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_Algorithm\" data-linktype=\"relative-path\">Algorithm</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_Context\" data-linktype=\"relative-path\">Context</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_GetDigestedOutput_System_Security_Cryptography_HashAlgorithm_\" data-linktype=\"relative-path\">GetDigestedOutput(HashAlgorithm)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_GetXml\" data-linktype=\"relative-path\">GetXml()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_PropagatedNamespaces\" data-linktype=\"relative-path\">PropagatedNamespaces</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_Resolver\" data-linktype=\"relative-path\">Resolver</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>This section contains two code examples. The first code example shows how to sign and verify an XML document using the XmlDsigXsltTransform class with an envelope signature.  The second code example demonstrates how to use members of the XmlDsigXsltTransform class.  </p>\n<p> <strong>Example #1</strong>  </p>\n<pre><code class=\"lang-vb\" name=\"Cryptography.Xml.XmlDsigXsltTransform#1\">&#39;\n&#39; This example signs an XML file using an\n&#39; envelope signature. It then verifies the \n&#39; signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.X509Certificates\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\n\nModule SignVerifyEnvelope\n\n\n    Sub Main(ByVal args() As String)\n        &#39; Generate a signing key.\n        Dim Key As New RSACryptoServiceProvider()\n\n        Dim xsl As String = &quot;&lt;xs:transform xmlns:xs=&#39;http://www.w3.org/1999/XSL/Transform&#39; version=&#39;1.0&#39;&gt; &lt;xs:template match=&#39;/&#39;&gt; &lt;xs:apply-templates/&gt; &lt;/xs:template&gt; &lt;xs:template match=&#39;ElementToTransform&#39;&gt; &lt;transformedElement/&gt; &lt;/xs:template&gt; &lt;/xs:transform&gt;&quot;\n\n        Try\n            &#39; Create an XML file to sign.\n            CreateSomeXml(&quot;Example.xml&quot;)\n            Console.WriteLine(&quot;New XML file created.&quot;)\n\n            &#39; Sign the XML that was just created and save it in a \n            &#39; new file.\n            SignXmlFile(&quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, Key, xsl)\n            Console.WriteLine(&quot;XML file signed.&quot;)\n\n            &#39; Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;)\n            Dim result As Boolean = VerifyXmlFile(&quot;SignedExample.xml&quot;)\n\n            &#39; Display the results of the signature verification to \\\n            &#39; the console.\n            If result Then\n                Console.WriteLine(&quot;The XML signature is valid.&quot;)\n            Else\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n            End If\n        Catch e As CryptographicException\n            Console.WriteLine(e.Message)\n        Finally\n            Key.Clear()\n        End Try\n\n    End Sub\n\n\n    &#39; Sign an XML file and save the signature in a new file.\n    Sub SignXmlFile(ByVal FileName As String, ByVal SignedFileName As String, ByVal Key As RSA, ByVal XSLString As String)\n        &#39; Create a new XML document.\n        Dim doc As New XmlDocument()\n\n        &#39; Format the document to ignore white spaces.\n        doc.PreserveWhitespace = False\n\n        &#39; Load the passed XML file using it&#39;s name.\n        doc.Load(New XmlTextReader(FileName))\n\n        &#39; Create a SignedXml object.\n        Dim signedXml As New SignedXml(doc)\n\n        &#39; Add the key to the SignedXml document. \n        signedXml.SigningKey = Key\n\n        &#39; Create a reference to be signed.\n        Dim reference As New Reference()\n        reference.Uri = &quot;&quot;\n\n        &#39; Add an enveloped transformation to the reference.\n        Dim env As New XmlDsigEnvelopedSignatureTransform()\n        reference.AddTransform(env)\n\n        &#39; Create an XmlDsigXPathTransform object using \n        &#39; the helper method &#39;CreateXPathTransform&#39; defined\n        &#39; later in this sample.\n        Dim XsltTransform As XmlDsigXsltTransform = CreateXsltTransform(XSLString)\n\n        &#39; Add the transform to the reference.\n        reference.AddTransform(XsltTransform)\n\n        &#39; Add the reference to the SignedXml object.\n        signedXml.AddReference(reference)\n\n        &#39; Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        Dim keyInfo As New KeyInfo()\n        keyInfo.AddClause(New RSAKeyValue(CType(Key, RSA)))\n        signedXml.KeyInfo = keyInfo\n\n        &#39; Compute the signature.\n        signedXml.ComputeSignature()\n\n        &#39; Get the XML representation of the signature and save\n        &#39; it to an XmlElement object.\n        Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n\n        &#39; Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, True))\n\n        &#39; Save the signed XML document to a file specified\n        &#39; using the passed string.\n        Dim xmltw As New XmlTextWriter(SignedFileName, New UTF8Encoding(False))\n        doc.WriteTo(xmltw)\n        xmltw.Close()\n\n    End Sub\n\n    &#39; Verify the signature of an XML file and return the result.\n    Function VerifyXmlFile(ByVal Name As String) As [Boolean]\n        &#39; Create a new XML document.\n        Dim xmlDocument As New XmlDocument()\n\n        &#39; Format using white spaces.\n        xmlDocument.PreserveWhitespace = True\n\n        &#39; Load the passed XML file into the document. \n        xmlDocument.Load(Name)\n\n        &#39; Create a new SignedXml object and pass it\n        &#39; the XML document class.\n        Dim signedXml As New SignedXml(xmlDocument)\n\n        &#39; Find the &quot;Signature&quot; node and create a new\n        &#39; XmlNodeList object.\n        Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n\n        &#39; Load the signature node.\n        signedXml.LoadXml(CType(nodeList(0), XmlElement))\n\n        &#39; Check the signature and return the result.\n        Return signedXml.CheckSignature()\n\n    End Function\n\n\n    &#39; Create the XML that represents the transform.\n    Function CreateXsltTransform(ByVal xsl As String) As XmlDsigXsltTransform\n        Dim doc As New XmlDocument()\n        doc.LoadXml(xsl)\n\n        Dim xform As New XmlDsigXsltTransform()\n        xform.LoadInnerXml(doc.ChildNodes)\n\n        Return xform\n\n    End Function\n\n\n    &#39; Create example data to sign.\n    Sub CreateSomeXml(ByVal FileName As String)\n        &#39; Create a new XmlDocument object.\n        Dim document As New XmlDocument()\n\n        &#39; Create a new XmlNode object.\n        Dim node As XmlNode = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyXML&quot;, &quot;Don&#39;t_Sign&quot;)\n\n        &#39; Append the node to the document.\n        document.AppendChild(node)\n\n        &#39; Create a new XmlNode object.\n        Dim subnode As XmlNode = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;ElementToTransform&quot;, &quot;Sign&quot;)\n\n        &#39; Add some text to the node.\n        subnode.InnerText = &quot;Here is some data to sign.&quot;\n\n        &#39; Append the node to the document.\n        document.DocumentElement.AppendChild(subnode)\n\n        &#39; Save the XML document to the file name specified.\n        Dim xmltw As New XmlTextWriter(FileName, New UTF8Encoding(False))\n        document.WriteTo(xmltw)\n        xmltw.Close()\n\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.Xml.XmlDsigXsltTransform#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.X509Certificates;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\npublic class SignVerifyEnvelope\n{\n\n    public static void Main(String[] args)\n    {\n        // Generate a signing key.\n        RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n        string xsl = @&quot;\n    &lt;xs:transform xmlns:xs=&#39;http://www.w3.org/1999/XSL/Transform&#39; version=&#39;1.0&#39;&gt;\n        &lt;xs:template match=&#39;/&#39;&gt;\n            &lt;xs:apply-templates/&gt;\n        &lt;/xs:template&gt;\n        &lt;xs:template match=&#39;ElementToTransform&#39;&gt; \n            &lt;transformedElement/&gt;\n        &lt;/xs:template&gt;\n    &lt;/xs:transform&gt;&quot;;\n\n        try\n        {\n            // Create an XML file to sign.\n            CreateSomeXml(&quot;Example.xml&quot;);\n            Console.WriteLine(&quot;New XML file created.&quot;);\n\n            // Sign the XML that was just created and save it in a \n            // new file.\n            SignXmlFile(&quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, Key, xsl);\n            Console.WriteLine(&quot;XML file signed.&quot;);\n\n            // Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;);\n            bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;);\n\n            // Display the results of the signature verification to \\\n            // the console.\n            if (result)\n            {\n                Console.WriteLine(&quot;The XML signature is valid.&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n            }\n        }\n        catch (CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n        finally\n        {\n            Key.Clear();\n        }\n\n    }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignXmlFile(string FileName, string SignedFileName, RSA Key, string XSLString)\n    {\n        // Create a new XML document.\n        XmlDocument doc = new XmlDocument();\n\n        // Format the document to ignore white spaces.\n        doc.PreserveWhitespace = false;\n\n        // Load the passed XML file using it&#39;s name.\n        doc.Load(new XmlTextReader(FileName));\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml(doc);\n\n        // Add the key to the SignedXml document. \n        signedXml.SigningKey = Key;\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n        reference.Uri = &quot;&quot;;\n\n        // Add an enveloped transformation to the reference.\n        XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();\n        reference.AddTransform(env);\n\n        // Create an XmlDsigXPathTransform object using \n        // the helper method &#39;CreateXPathTransform&#39; defined\n        // later in this sample.\n\n        XmlDsigXsltTransform XsltTransform = CreateXsltTransform(XSLString);\n\n        // Add the transform to the reference.\n        reference.AddTransform(XsltTransform);\n\n        // Add the reference to the SignedXml object.\n        signedXml.AddReference(reference);\n\n        // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        KeyInfo keyInfo = new KeyInfo();\n        keyInfo.AddClause(new RSAKeyValue((RSA)Key));\n        signedXml.KeyInfo = keyInfo;\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false));\n        doc.WriteTo(xmltw);\n        xmltw.Close();\n    }\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyXmlFile(String Name)\n    {\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Format using white spaces.\n        xmlDocument.PreserveWhitespace = true;\n\n        // Load the passed XML file into the document. \n        xmlDocument.Load(Name);\n\n        // Create a new SignedXml object and pass it\n        // the XML document class.\n        SignedXml signedXml = new SignedXml(xmlDocument);\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature();\n\n    }\n\n    // Create the XML that represents the transform.\n    public static XmlDsigXsltTransform CreateXsltTransform(string xsl)\n    {\n        XmlDocument doc = new XmlDocument();\n        doc.LoadXml(xsl);\n\n        XmlDsigXsltTransform xform = new XmlDsigXsltTransform();\n        xform.LoadInnerXml(doc.ChildNodes);\n\n        return xform;\n    }\n\n    // Create example data to sign.\n    public static void CreateSomeXml(string FileName)\n    {\n        // Create a new XmlDocument object.\n        XmlDocument document = new XmlDocument();\n\n        // Create a new XmlNode object.\n        XmlNode node = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyXML&quot;, &quot;Don&#39;t_Sign&quot;);\n\n        // Append the node to the document.\n        document.AppendChild(node);\n\n        // Create a new XmlNode object.\n        XmlNode subnode = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;ElementToTransform&quot;, &quot;Sign&quot;);\n\n        // Add some text to the node.\n        subnode.InnerText = &quot;Here is some data to sign.&quot;;\n\n        // Append the node to the document.\n        document.DocumentElement.AppendChild(subnode);\n\n        // Save the XML document to the file name specified.\n        XmlTextWriter xmltw = new XmlTextWriter(FileName, new UTF8Encoding(false));\n        document.WriteTo(xmltw);\n        xmltw.Close();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Cryptography.Xml.XmlDsigXsltTransform#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\n#using &lt;System.Xml.dll&gt;\n#using &lt;System.Security.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::X509Certificates;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Create the XML that represents the transform.\nstatic XmlDsigXsltTransform^ CreateXsltTransform( String^ xsl )\n{\n   XmlDocument^ doc = gcnew XmlDocument;\n   doc-&gt;LoadXml( xsl );\n   XmlDsigXsltTransform^ xform = gcnew XmlDsigXsltTransform;\n   xform-&gt;LoadInnerXml( doc-&gt;ChildNodes );\n   return xform;\n}\n\n\n// Sign an XML file and save the signature in a new file.\nstatic void SignXmlFile( String^ FileName, String^ SignedFileName, RSA^ Key, String^ XSLString )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   // Format the document to ignore white spaces.\n   doc-&gt;PreserveWhitespace = false;\n   \n   // Load the passed XML file using it&#39;s name.\n   doc-&gt;Load( gcnew XmlTextReader( FileName ) );\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml( doc );\n   \n   // Add the key to the SignedXml document. \n   signedXml-&gt;SigningKey = Key;\n   \n   // Create a reference to be signed.\n   Reference^ reference = gcnew Reference;\n   reference-&gt;Uri = L&quot;&quot;;\n   \n   // Add an enveloped transformation to the reference.\n   XmlDsigEnvelopedSignatureTransform^ env = gcnew XmlDsigEnvelopedSignatureTransform;\n   reference-&gt;AddTransform( env );\n   \n   // Create an XmlDsigXPathTransform object using \n   // the helper method &#39;CreateXPathTransform&#39; defined\n   // later in this sample.\n   XmlDsigXsltTransform^ XsltTransform = CreateXsltTransform( XSLString );\n   \n   // Add the transform to the reference.\n   reference-&gt;AddTransform( XsltTransform );\n   \n   // Add the reference to the SignedXml object.\n   signedXml-&gt;AddReference( reference );\n   \n   // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n   KeyInfo^ keyInfo = gcnew KeyInfo;\n   keyInfo-&gt;AddClause( gcnew RSAKeyValue( dynamic_cast&lt;RSA^&gt;(Key) ) );\n   signedXml-&gt;KeyInfo = keyInfo;\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Append the element to the XML document.\n   doc-&gt;DocumentElement-&gt;AppendChild( doc-&gt;ImportNode( xmlDigitalSignature, true ) );\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( SignedFileName,gcnew UTF8Encoding( false ) );\n   doc-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file and return the result.\nstatic Boolean VerifyXmlFile( String^ Name )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Format using white spaces.\n   xmlDocument-&gt;PreserveWhitespace = true;\n   \n   // Load the passed XML file into the document. \n   xmlDocument-&gt;Load( Name );\n   \n   // Create a new SignedXml object and pass it\n   // the XML document class.\n   SignedXml^ signedXml = gcnew SignedXml( xmlDocument );\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( L&quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( dynamic_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature();\n}\n\n\n// Create example data to sign.\nstatic void CreateSomeXml( String^ FileName )\n{\n   \n   // Create a new XmlDocument object.\n   XmlDocument^ document = gcnew XmlDocument;\n   \n   // Create a new XmlNode object.\n   XmlNode^ node = document-&gt;CreateNode( XmlNodeType::Element, L&quot;&quot;, L&quot;MyXML&quot;, L&quot;Don&#39;t_Sign&quot; );\n   \n   // Append the node to the document.\n   document-&gt;AppendChild( node );\n   \n   // Create a new XmlNode object.\n   XmlNode^ subnode = document-&gt;CreateNode( XmlNodeType::Element, L&quot;&quot;, L&quot;ElementToTransform&quot;, L&quot;Sign&quot; );\n   \n   // Add some text to the node.\n   subnode-&gt;InnerText = L&quot;Here is some data to sign.&quot;;\n   \n   // Append the node to the document.\n   document-&gt;DocumentElement-&gt;AppendChild( subnode );\n   \n   // Save the XML document to the file name specified.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( FileName,gcnew UTF8Encoding( false ) );\n   document-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\nint main()\n{\n   \n   // Generate a signing key.\n   RSACryptoServiceProvider^ Key = gcnew RSACryptoServiceProvider;\n   String^ xsl = L&quot;\\r\\n    &lt;xs:transform xmlns:xs=&#39;http://www.w3.org/1999/XSL/Transform&#39; version=&#39;1.0&#39;&gt;\\r\\n        &lt;xs:template match=&#39;/&#39;&gt;\\r\\n            &lt;xs:apply-templates/&gt;\\r\\n        &lt;/xs:template&gt;\\r\\n        &lt;xs:template match=&#39;ElementToTransform&#39;&gt; \\r\\n            &lt;transformedElement/&gt;\\r\\n        &lt;/xs:template&gt;\\r\\n    &lt;/xs:transform&gt;&quot;;\n   try\n   {\n      \n      // Create an XML file to sign.\n      CreateSomeXml( L&quot;Example.xml&quot; );\n      Console::WriteLine( L&quot;New XML file created.&quot; );\n      \n      // Sign the XML that was just created and save it in a \n      // new file.\n      SignXmlFile( L&quot;Example.xml&quot;, L&quot;SignedExample.xml&quot;, Key, xsl );\n      Console::WriteLine( L&quot;XML file signed.&quot; );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( L&quot;Verifying signature...&quot; );\n      bool result = VerifyXmlFile( L&quot;SignedExample.xml&quot; );\n      \n      // Display the results of the signature verification to \\\n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( L&quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( L&quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n   finally\n   {\n      Key-&gt;Clear();\n   }\n\n   return 1;\n}\n</code></pre><p> <strong>Example #2</strong>  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform#2\">#using &lt;System.Security.dll&gt;\n#using &lt;System.dll&gt;\n#using &lt;System.Xml.dll&gt;\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\n\nref class Class1\n{\npublic:\n   [STAThread]\n   static void Main()\n   {\n      XmlDocument^ productsXml = LoadProducts();\n      XmlNodeList^ xsltNodeList = GetXsltAsNodeList();\n      TransformDoc( productsXml, xsltNodeList );\n      \n      // Use XmlDsigXsltTransform to resolve a Uri.\n      Uri^ baseUri = gcnew Uri( L&quot;http://www.contoso.com&quot; );\n      String^ relativeUri = L&quot;xml&quot;;\n      Uri^ absoluteUri = ResolveUris( baseUri, relativeUri );\n      Console::WriteLine( L&quot;This sample completed successfully; &quot;\n      L&quot;press Enter to exit.&quot; );\n      Console::ReadLine();\n   }\n\nprivate:\n   static void TransformDoc( XmlDocument^ xmlDoc, XmlNodeList^ xsltNodeList )\n   {\n      try\n      {\n         // Construct a new XmlDsigXsltTransform.\n         XmlDsigXsltTransform^ xmlTransform = gcnew XmlDsigXsltTransform;\n\n         // Load the Xslt tranform as a node list.\n         xmlTransform-&gt;LoadInnerXml( xsltNodeList );\n\n         // Load the Xml document to perform the tranform on.\n         XmlNamespaceManager^ namespaceManager;\n         namespaceManager = gcnew XmlNamespaceManager( xmlDoc-&gt;NameTable );\n         XmlNodeList^ productsNodeList;\n         productsNodeList = xmlDoc-&gt;SelectNodes( L&quot;//.&quot;, namespaceManager );\n         xmlTransform-&gt;LoadInput( productsNodeList );\n\n         // Retrieve the output from the transform.\n         Stream^ outputStream = (Stream^)xmlTransform-&gt;GetOutput(\n            System::IO::Stream::typeid );\n\n         // Read the output stream into a stream reader.\n         StreamReader^ streamReader = gcnew StreamReader( outputStream );\n         \n         // Read the stream into a string.\n         String^ outputMessage = streamReader-&gt;ReadToEnd();\n         \n         // Close the streams.\n         outputStream-&gt;Close();\n         streamReader-&gt;Close();\n         \n         // Display to the console the Xml before and after\n         // encryption.\n         Console::WriteLine( L&quot;\\nResult of transformation: {0}&quot;, outputMessage );\n         ShowTransformProperties( xmlTransform );\n      }\n      catch ( Exception^ ex ) \n      {\n         Console::WriteLine( L&quot;Caught exception in TransformDoc method: {0}&quot;, ex );\n      }\n   }\n\n   static XmlNodeList^ GetXsltAsNodeList()\n   {\n      String^ transformXml = L&quot;&lt;xsl:transform version=&#39;1.0&#39; &quot;;\n      transformXml = String::Concat( transformXml,\n         L&quot;xmlns:xsl=&#39;http://www.w3.org/1999/XSL/Transform&#39;&gt;&quot; );\n      transformXml = String::Concat( transformXml,\n         L&quot;&lt;xsl:template match=&#39;products&#39;&gt;&quot; );\n      transformXml = String::Concat( transformXml,\n         L&quot;&lt;table&gt;&lt;tr&gt;&lt;td&gt;ProductId&lt;/td&gt;&lt;td&gt;Name&lt;/td&gt;&lt;/tr&gt;&quot; );\n      transformXml = String::Concat( transformXml,\n         L&quot;&lt;xsl:apply-templates/&gt;&lt;/table&gt;&lt;/xsl:template&gt;&quot; );\n      transformXml = String::Concat( transformXml,\n         L&quot;&lt;xsl:template match=&#39;product&#39;&gt;&lt;tr&gt;&quot; );\n      transformXml = String::Concat( transformXml,\n         L&quot;&lt;xsl:apply-templates/&gt;&lt;/tr&gt;&lt;/xsl:template&gt;&quot; );\n      transformXml = String::Concat( transformXml,\n         L&quot;&lt;xsl:template match=&#39;productid&#39;&gt;&lt;td&gt;&quot; );\n      transformXml = String::Concat( transformXml,\n         L&quot;&lt;xsl:apply-templates/&gt;&lt;/td&gt;&lt;/xsl:template&gt;&quot; );\n      transformXml = String::Concat( transformXml,\n         L&quot;&lt;xsl:template match=&#39;description&#39;&gt;&lt;td&gt;&quot; );\n      transformXml = String::Concat( transformXml,\n         L&quot;&lt;xsl:apply-templates/&gt;&lt;/td&gt;&lt;/xsl:template&gt;&quot; );\n      transformXml = String::Concat( transformXml,\n         L&quot;&lt;/xsl:transform&gt;&quot; );\n      Console::WriteLine( L&quot;\\nCreated the following Xslt tranform:&quot; );\n      Console::WriteLine( transformXml );\n      XmlDocument^ xmlDoc = gcnew XmlDocument;\n      xmlDoc-&gt;LoadXml( transformXml );\n      return xmlDoc-&gt;GetElementsByTagName( L&quot;xsl:transform&quot; );\n   }\n\n   // Encrypt the text in the specified XmlDocument.\n   static void ShowTransformProperties( XmlDsigXsltTransform^ xmlTransform )\n   {\n      String^ classDescription = xmlTransform-&gt;ToString();\n      Console::WriteLine( L&quot;\\n** Summary for {0} **&quot;, classDescription );\n      \n      // Retrieve the XML representation of the current transform.\n      XmlElement^ xmlInTransform = xmlTransform-&gt;GetXml();\n      Console::WriteLine( L&quot;Xml representation of the current transform:\\n{0}&quot;,\n         xmlInTransform-&gt;OuterXml );\n      \n      // Ensure the transform is using the proper algorithm.\n      xmlTransform-&gt;Algorithm = SignedXml::XmlDsigXsltTransformUrl;\n      Console::WriteLine( L&quot;Algorithm used: {0}&quot;, classDescription );\n      \n      // Retrieve the valid input types for the current transform.\n      array&lt;Type^&gt;^validInTypes = xmlTransform-&gt;InputTypes;\n      Console::WriteLine( L&quot;Transform accepts the following inputs:&quot; );\n      for ( int i = 0; i &lt; validInTypes-&gt;Length; i++ )\n      {\n         Console::WriteLine( L&quot;\\t{0}&quot;, validInTypes[ i ] );\n\n      }\n      \n      array&lt;Type^&gt;^validOutTypes = xmlTransform-&gt;OutputTypes;\n      Console::WriteLine( L&quot;Transform outputs in the following types:&quot; );\n      for ( int i = validOutTypes-&gt;Length - 1; i &gt;= 0; i-- )\n      {\n         Console::WriteLine( L&quot;\\t {0}&quot;, validOutTypes[ i ] );\n         if ( validOutTypes[ i ] == Object::typeid )\n         {\n            Object^ outputObject = xmlTransform-&gt;GetOutput();\n         }\n      }\n   }\n\n   // Create an XML document describing various products.\n   static XmlDocument^ LoadProducts()\n   {\n      String^ contosoProducts = L&quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;;\n      contosoProducts = String::Concat( contosoProducts,\n         L&quot;&lt;products&gt;&quot; );\n      contosoProducts = String::Concat( contosoProducts,\n         L&quot;&lt;product&gt;&lt;productid&gt;1&lt;/productid&gt;&quot; );\n      contosoProducts = String::Concat( contosoProducts,\n         L&quot;&lt;description&gt;Widgets&lt;/description&gt;&lt;/product&gt;&quot; );\n      contosoProducts = String::Concat( contosoProducts,\n         L&quot;&lt;product&gt;&lt;productid&gt;2&lt;/productid&gt;&quot; );\n      contosoProducts = String::Concat( contosoProducts,\n         L&quot;&lt;description&gt;Gadgits&lt;/description&gt;&lt;/product&gt;&quot; );\n      contosoProducts = String::Concat( contosoProducts,\n         L&quot;&lt;/products&gt;&quot; );\n      Console::WriteLine(\n         L&quot;\\nCreated the following Xml document for tranformation:&quot; );\n      Console::WriteLine( contosoProducts );\n      XmlDocument^ xmlDoc = gcnew XmlDocument;\n      xmlDoc-&gt;LoadXml( contosoProducts );\n      return xmlDoc;\n   }\n\n   // Resolve the specified base and relative Uri&#39;s .\n   static Uri^ ResolveUris( Uri^ baseUri, String^ relativeUri )\n   {\n      XmlUrlResolver^ xmlResolver = gcnew XmlUrlResolver;\n      xmlResolver-&gt;Credentials =\n         System::Net::CredentialCache::DefaultCredentials;\n\n      XmlDsigXsltTransform^ xmlTransform = gcnew XmlDsigXsltTransform;\n      xmlTransform-&gt;Resolver = xmlResolver;\n\n      Uri^ absoluteUri = xmlResolver-&gt;ResolveUri( baseUri, relativeUri );\n      if ( absoluteUri != nullptr )\n      {\n         Console::WriteLine(\n         L&quot;\\nResolved the base Uri and relative Uri to the following:&quot; );\n         Console::WriteLine( absoluteUri );\n      }\n      else\n      {\n         Console::WriteLine( L&quot;Unable to resolve the base Uri and relative Uri&quot; );\n      }\n\n      return absoluteUri;\n   }\n};\n\nint main()\n{\n   Class1::Main();\n}\n\n//\n// This sample produces the following output:\n//\n// Created the following Xml document for tranformation:\n// &lt;?xml version=&#39;1.0&#39;?&gt;&lt;products&gt;&lt;product&gt;&lt;productid&gt;1&lt;/productid&gt;&lt;descriptio\n// n&gt;Widgets&lt;/description&gt;&lt;/product&gt;&lt;product&gt;&lt;productid&gt;2&lt;/productid&gt;&lt;descript\n// ion&gt;Gadgits&lt;/description&gt;&lt;/product&gt;&lt;/products&gt;\n//\n// Created the following Xslt tranform:\n// &lt;xsl:transform version=&#39;1.0&#39; xmlns:xsl=&#39;http://www.w3.org/1999/XSL/Transfor\n// m&#39;&gt;&lt;xsl:template match=&#39;products&#39;&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;ProductId&lt;/td&gt;&lt;td&gt;Name&lt;/td\n// &gt;&lt;/tr&gt;&lt;xsl:apply-templates/&gt;&lt;/table&gt;&lt;/xsl:template&gt;&lt;xsl:template match=&#39;pro\n// duct&#39;&gt;&lt;tr&gt;&lt;xsl:apply-templates/&gt;&lt;/tr&gt;&lt;/xsl:template&gt;&lt;xsl:emplate match=&#39;pro\n// ductid&#39;&gt;&lt;td&gt;&lt;xsl:apply-templates/&gt;&lt;/td&gt;&lt;/xsl:template&gt;&lt;xsl:template match=&#39;\n// description&#39;&gt;&lt;td&gt;&lt;xsl:apply-templates/&gt;&lt;/td&gt;&lt;/xsl:template&gt;&lt;/xsl:transform&gt;\n//\n// Result of transformation: &lt;table&gt;&lt;tr&gt;&lt;td&gt;ProductId&lt;/td&gt;&lt;td&gt;Name&lt;/td&gt;&lt;/tr&gt;&lt;t\n// r&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Widgets&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Gadgits&lt;/td&gt;&lt;/tr&gt;&lt;/table\n// &gt;\n//\n// ** Summary for System.Security.Cryptography.Xml.XmlDsigXsltTransform **\n// Xml representation of the current transform:\n// &lt;Transform Algorithm=&quot;http://www.w3.org/TR/1999/REC-xslt-19991116&quot; xmlns=&quot;h\n// ttp://www.w3.org/2000/09/xmldsig#&quot;&gt;&lt;xsl:transform version=&quot;1.0&quot; xmlns:xsl=&quot;\n// http://www.w3.org/1999/XSL/Transform&quot;&gt;&lt;xsl:template match=&quot;products&quot;&gt;&lt;table\n//  xmlns=&quot;&quot;&gt;&lt;tr&gt;&lt;td&gt;ProductId&lt;/td&gt;&lt;td&gt;Name&lt;/td&gt;&lt;/tr&gt;&lt;xsl:apply-templates /&gt;&lt;/\n// table&gt;&lt;/xsl:template&gt;&lt;xsl:template match=&quot;product&quot;&gt;&lt;tr xmlns=&quot;&quot;&gt;&lt;xsl:apply-\n// templates /&gt;&lt;/tr&gt;&lt;/xsl:template&gt;&lt;xsl:template match=&quot;productid&quot;&gt;&lt;td xmlns=&quot;\n// &quot;&gt;&lt;xsl:apply-templates /&gt;&lt;/td&gt;&lt;/xsl:template&gt;&lt;xsl:template match=&quot;descripti\n// on&quot;&gt;&lt;td xmlns=&quot;&quot;&gt;&lt;xsl:apply-templates /&gt;&lt;/td&gt;&lt;/xsl:template&gt;&lt;/xsl:transform\n// &gt;&lt;/Transform&gt;\n// Algorithm used: System.Security.Cryptography.Xml.XmlDsigXsltTransform\n// Transform accepts the following inputs:\n// System.IO.Stream\n// System.Xml.XmlDocument\n// System.Xml.XmlNodeList\n// Transform outputs in the following types:\n// System.IO.Stream\n//\n// Resolved the base Uri and relative Uri to the following:\n// http://www.contoso.com/xml\n// This sample completed successfully; press Enter to exit.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform#2\">using System;\nusing System.IO;\nusing System.Xml;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\n\nclass Class1\n{\n    [STAThread]\n    static void Main(string[] args)\n    {\n        XmlDocument productsXml = LoadProducts();\n        XmlNodeList xsltNodeList = GetXsltAsNodeList();\n        TransformDoc(productsXml, xsltNodeList);\n\n        // Use XmlDsigXsltTransform to resolve a Uri.\n        Uri baseUri = new Uri(&quot;http://www.contoso.com&quot;);\n        string relativeUri = &quot;xml&quot;;\n        Uri absoluteUri = ResolveUris(baseUri, relativeUri);\n\n        Console.WriteLine(&quot;This sample completed successfully; &quot; +\n            &quot;press Enter to exit.&quot;);\n        Console.ReadLine();\n    }\n\n    private static void TransformDoc(\n        XmlDocument xmlDoc, \n        XmlNodeList xsltNodeList)\n    {\n        try \n        {\n            // Construct a new XmlDsigXsltTransform.\n            XmlDsigXsltTransform xmlTransform = \n                new XmlDsigXsltTransform();\n\n            // Load the Xslt tranform as a node list.\n            xmlTransform.LoadInnerXml(xsltNodeList);\n\n            // Load the Xml document to perform the tranform on.\n            XmlNamespaceManager namespaceManager;\n            namespaceManager = new XmlNamespaceManager(xmlDoc.NameTable);\n\n            XmlNodeList productsNodeList;\n            productsNodeList = xmlDoc.SelectNodes(&quot;//.&quot;, namespaceManager);\n\n            xmlTransform.LoadInput(productsNodeList);\n\n            // Retrieve the output from the transform.\n            Stream outputStream = (Stream)\n                xmlTransform.GetOutput(typeof(System.IO.Stream));\n\n            // Read the output stream into a stream reader.\n            StreamReader streamReader =\n                new StreamReader(outputStream);\n\n            // Read the stream into a string.\n            string outputMessage = streamReader.ReadToEnd();\n\n            // Close the streams.\n            outputStream.Close();\n            streamReader.Close();\n\n            // Display to the console the Xml before and after\n            // encryption.\n            Console.WriteLine(&quot;\\nResult of transformation: &quot; + outputMessage);\n            ShowTransformProperties(xmlTransform);\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(&quot;Caught exception in TransformDoc method: &quot; + \n                ex.ToString());\n        }\n    }\n    \n    private static XmlNodeList GetXsltAsNodeList()\n    {\n        string transformXml = &quot;&lt;xsl:transform version=&#39;1.0&#39; &quot;;\n        transformXml += &quot;xmlns:xsl=&#39;http://www.w3.org/1999/XSL/Transform&#39;&gt;&quot;;\n        transformXml += &quot;&lt;xsl:template match=&#39;products&#39;&gt;&quot;;\n        transformXml += &quot;&lt;table&gt;&lt;tr&gt;&lt;td&gt;ProductId&lt;/td&gt;&lt;td&gt;Name&lt;/td&gt;&lt;/tr&gt;&quot;;\n        transformXml += &quot;&lt;xsl:apply-templates/&gt;&lt;/table&gt;&lt;/xsl:template&gt;&quot;;\n        transformXml += &quot;&lt;xsl:template match=&#39;product&#39;&gt;&lt;tr&gt;&quot;;\n        transformXml += &quot;&lt;xsl:apply-templates/&gt;&lt;/tr&gt;&lt;/xsl:template&gt;&quot;;\n        transformXml += &quot;&lt;xsl:template match=&#39;productid&#39;&gt;&lt;td&gt;&quot;;\n        transformXml += &quot;&lt;xsl:apply-templates/&gt;&lt;/td&gt;&lt;/xsl:template&gt;&quot;;\n        transformXml += &quot;&lt;xsl:template match=&#39;description&#39;&gt;&lt;td&gt;&quot;;\n        transformXml += &quot;&lt;xsl:apply-templates/&gt;&lt;/td&gt;&lt;/xsl:template&gt;&quot;;\n        transformXml += &quot;&lt;/xsl:transform&gt;&quot;;\n\n        Console.WriteLine(&quot;\\nCreated the following Xslt tranform:&quot;);\n        Console.WriteLine(transformXml);\n\n        XmlDocument xmlDoc = new XmlDocument();\n        xmlDoc.LoadXml(transformXml);\n        return xmlDoc.GetElementsByTagName(&quot;xsl:transform&quot;);\n    }\n\n    // Encrypt the text in the specified XmlDocument.\n    private static void ShowTransformProperties(\n        XmlDsigXsltTransform xmlTransform)\n    {\n        string classDescription = xmlTransform.ToString();\n        Console.WriteLine(&quot;\\n** Summary for &quot; + classDescription + &quot; **&quot;);\n\n        // Retrieve the XML representation of the current transform.\n        XmlElement xmlInTransform = xmlTransform.GetXml();\n        Console.WriteLine(&quot;Xml representation of the current transform:\\n&quot; +\n            xmlInTransform.OuterXml);\n\n        // Ensure the transform is using the proper algorithm.\n        xmlTransform.Algorithm =\n            SignedXml.XmlDsigXsltTransformUrl;\n        Console.WriteLine(&quot;Algorithm used: &quot; + classDescription);\n\n        // Retrieve the valid input types for the current transform.\n        Type[] validInTypes = xmlTransform.InputTypes;\n        Console.WriteLine(&quot;Transform accepts the following inputs:&quot;);\n        for (int i=0; i&lt;validInTypes.Length; i++)\n        {\n            Console.WriteLine(&quot;\\t&quot; + validInTypes[i].ToString());\n        }\n\n        Type[] validOutTypes = xmlTransform.OutputTypes;\n        Console.WriteLine(&quot;Transform outputs in the following types:&quot;);\n        for (int i=validOutTypes.Length-1; i &gt;= 0; i--)\n        {\n            Console.WriteLine(&quot;\\t &quot; + validOutTypes[i].ToString());\n\n            if (validOutTypes[i] == typeof(object))\n            {\n                object outputObject = xmlTransform.GetOutput();\n            }\n        }\n    }\n\n    // Create an XML document describing various products.\n    private static XmlDocument LoadProducts()\n    {\n        string contosoProducts = &quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;;\n        contosoProducts += &quot;&lt;products&gt;&quot;;\n        contosoProducts += &quot;&lt;product&gt;&lt;productid&gt;1&lt;/productid&gt;&quot;;\n        contosoProducts += &quot;&lt;description&gt;Widgets&lt;/description&gt;&lt;/product&gt;&quot;;\n        contosoProducts += &quot;&lt;product&gt;&lt;productid&gt;2&lt;/productid&gt;&quot;;\n        contosoProducts += &quot;&lt;description&gt;Gadgits&lt;/description&gt;&lt;/product&gt;&quot;;\n        contosoProducts += &quot;&lt;/products&gt;&quot;;\n\n        Console.WriteLine(\n            &quot;\\nCreated the following Xml document for tranformation:&quot;);\n        Console.WriteLine(contosoProducts);\n\n        XmlDocument xmlDoc = new XmlDocument();\n        xmlDoc.LoadXml(contosoProducts);\n        return xmlDoc;\n    }\n\n    // Resolve the specified base and relative Uri&#39;s .\n    private static Uri ResolveUris(Uri baseUri, string relativeUri)\n    {\n        XmlUrlResolver xmlResolver = new XmlUrlResolver();\n        xmlResolver.Credentials = \n            System.Net.CredentialCache.DefaultCredentials;\n\n        XmlDsigXsltTransform xmlTransform =\n            new XmlDsigXsltTransform();\n        xmlTransform.Resolver = xmlResolver;\n\n        Uri absoluteUri = xmlResolver.ResolveUri(baseUri, relativeUri);\n        if (absoluteUri != null)\n        {\n            Console.WriteLine(\n                &quot;\\nResolved the base Uri and relative Uri to the following:&quot;);\n            Console.WriteLine(absoluteUri.ToString());\n        }\n        else\n        {\n            Console.WriteLine(\n                &quot;Unable to resolve the base Uri and relative Uri&quot;);\n        }\n        return absoluteUri;\n    }\n}\n//\n// This sample produces the following output:\n//\n// Created the following Xml document for tranformation:\n// &lt;?xml version=&#39;1.0&#39;?&gt;&lt;products&gt;&lt;product&gt;&lt;productid&gt;1&lt;/productid&gt;&lt;descriptio\n// n&gt;Widgets&lt;/description&gt;&lt;/product&gt;&lt;product&gt;&lt;productid&gt;2&lt;/productid&gt;&lt;descript\n// ion&gt;Gadgits&lt;/description&gt;&lt;/product&gt;&lt;/products&gt;\n// \n// Created the following Xslt tranform:\n// &lt;xsl:transform version=&#39;1.0&#39; xmlns:xsl=&#39;http://www.w3.org/1999/XSL/Transfor\n// m&#39;&gt;&lt;xsl:template match=&#39;products&#39;&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;ProductId&lt;/td&gt;&lt;td&gt;Name&lt;/td\n// &gt;&lt;/tr&gt;&lt;xsl:apply-templates/&gt;&lt;/table&gt;&lt;/xsl:template&gt;&lt;xsl:template match=&#39;pro\n// duct&#39;&gt;&lt;tr&gt;&lt;xsl:apply-templates/&gt;&lt;/tr&gt;&lt;/xsl:template&gt;&lt;xsl:emplate match=&#39;pro\n// ductid&#39;&gt;&lt;td&gt;&lt;xsl:apply-templates/&gt;&lt;/td&gt;&lt;/xsl:template&gt;&lt;xsl:template match=&#39;\n// description&#39;&gt;&lt;td&gt;&lt;xsl:apply-templates/&gt;&lt;/td&gt;&lt;/xsl:template&gt;&lt;/xsl:transform&gt;\n// \n// Result of transformation: &lt;table&gt;&lt;tr&gt;&lt;td&gt;ProductId&lt;/td&gt;&lt;td&gt;Name&lt;/td&gt;&lt;/tr&gt;&lt;t\n// r&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Widgets&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Gadgits&lt;/td&gt;&lt;/tr&gt;&lt;/table\n// &gt;\n//\n// ** Summary for System.Security.Cryptography.Xml.XmlDsigXsltTransform **\n// Xml representation of the current transform:\n// &lt;Transform Algorithm=&quot;http://www.w3.org/TR/1999/REC-xslt-19991116&quot; xmlns=&quot;h\n// ttp://www.w3.org/2000/09/xmldsig#&quot;&gt;&lt;xsl:transform version=&quot;1.0&quot; xmlns:xsl=&quot;\n// http://www.w3.org/1999/XSL/Transform&quot;&gt;&lt;xsl:template match=&quot;products&quot;&gt;&lt;table\n//  xmlns=&quot;&quot;&gt;&lt;tr&gt;&lt;td&gt;ProductId&lt;/td&gt;&lt;td&gt;Name&lt;/td&gt;&lt;/tr&gt;&lt;xsl:apply-templates /&gt;&lt;/\n// table&gt;&lt;/xsl:template&gt;&lt;xsl:template match=&quot;product&quot;&gt;&lt;tr xmlns=&quot;&quot;&gt;&lt;xsl:apply-\n// templates /&gt;&lt;/tr&gt;&lt;/xsl:template&gt;&lt;xsl:template match=&quot;productid&quot;&gt;&lt;td xmlns=&quot;\n// &quot;&gt;&lt;xsl:apply-templates /&gt;&lt;/td&gt;&lt;/xsl:template&gt;&lt;xsl:template match=&quot;descripti\n// on&quot;&gt;&lt;td xmlns=&quot;&quot;&gt;&lt;xsl:apply-templates /&gt;&lt;/td&gt;&lt;/xsl:template&gt;&lt;/xsl:transform\n// &gt;&lt;/Transform&gt;\n// Algorithm used: System.Security.Cryptography.Xml.XmlDsigXsltTransform\n// Transform accepts the following inputs:\n// System.IO.Stream\n// System.Xml.XmlDocument\n// System.Xml.XmlNodeList\n// Transform outputs in the following types:\n// System.IO.Stream\n// \n// Resolved the base Uri and relative Uri to the following:\n// http://www.contoso.com/xml\n// This sample completed successfully; press Enter to exit.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform#2\">Imports System\nImports System.IO\nImports System.Xml\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Text\n\nPublic Class Form1\n    Inherits System.Windows.Forms.Form\n\n    &#39; Event handler for Run button.\n    Private Sub Button1_Click( _\n        ByVal sender As System.Object, _\n        ByVal e As System.EventArgs) Handles Button1.Click\n\n        tbxOutput.Cursor = Cursors.WaitCursor\n        tbxOutput.Text = &quot;&quot;\n\n        Dim productsXml As XmlDocument = LoadProducts()\n        Dim xsltNodeList As XmlNodeList = GetXsltAsNodeList()\n        TransformDoc(productsXml, xsltNodeList)\n\n        &#39; Use XmlDsigXsltTransform to resolve a Uri.\n        Dim baseUri As New Uri(&quot;http://www.contoso.com&quot;)\n        Dim relativeUri As String = &quot;xml&quot;\n        Dim absoluteUri As Uri = ResolveUris(baseUri, relativeUri)\n\n        &#39; Align interface and conclude application.\n        WriteLine(vbCrLf + &quot;This sample completed successfully;&quot; + _\n            &quot; press Exit to continue.&quot;)\n\n        &#39; Reset the cursor.\n        tbxOutput.Cursor = Cursors.Default\n    End Sub\n\n    &#39; Create an XML document describing various products.\n    Private Function LoadProducts() As XmlDocument\n        Dim contosoProducts As String = &quot;&lt;?xml version=&#39;1.0&#39;?&gt;&quot;\n        contosoProducts += &quot;&lt;products&gt;&quot;\n        contosoProducts += &quot;&lt;product&gt;&lt;productid&gt;1&lt;/productid&gt;&quot;\n        contosoProducts += &quot;&lt;description&gt;Widgets&lt;/description&gt;&lt;/product&gt;&quot;\n        contosoProducts += &quot;&lt;product&gt;&lt;productid&gt;2&lt;/productid&gt;&quot;\n        contosoProducts += &quot;&lt;description&gt;Gadgits&lt;/description&gt;&lt;/product&gt;&quot;\n        contosoProducts += &quot;&lt;/products&gt;&quot;\n\n        WriteLine(vbCrLf + _\n            &quot;Created the following Xml document for tranformation:&quot;)\n        WriteLine(contosoProducts)\n\n        Dim xmlDoc As New XmlDocument\n        xmlDoc.LoadXml(contosoProducts)\n        Return xmlDoc\n    End Function\n\n    Private Function GetXsltAsNodeList() As XmlNodeList\n        Dim transformXml As String = &quot;&lt;xsl:transform version=&#39;1.0&#39; &quot;\n        transformXml += &quot;xmlns:xsl=&#39;http://www.w3.org/1999/XSL/Transform&#39;&gt;&quot;\n        transformXml += &quot;&lt;xsl:template match=&#39;products&#39;&gt;&quot;\n        transformXml += &quot;&lt;table&gt;&lt;tr&gt;&lt;td&gt;ProductId&lt;/td&gt;&lt;td&gt;Name&lt;/td&gt;&lt;/tr&gt;&quot;\n        transformXml += &quot;&lt;xsl:apply-templates/&gt;&lt;/table&gt;&lt;/xsl:template&gt;&quot;\n        transformXml += &quot;&lt;xsl:template match=&#39;product&#39;&gt;&lt;tr&gt;&quot;\n        transformXml += &quot;&lt;xsl:apply-templates/&gt;&lt;/tr&gt;&lt;/xsl:template&gt;&quot;\n        transformXml += &quot;&lt;xsl:template match=&#39;productid&#39;&gt;&lt;td&gt;&quot;\n        transformXml += &quot;&lt;xsl:apply-templates/&gt;&lt;/td&gt;&lt;/xsl:template&gt;&quot;\n        transformXml += &quot;&lt;xsl:template match=&#39;description&#39;&gt;&lt;td&gt;&quot;\n        transformXml += &quot;&lt;xsl:apply-templates/&gt;&lt;/td&gt;&lt;/xsl:template&gt;&quot;\n        transformXml += &quot;&lt;/xsl:transform&gt;&quot;\n\n        WriteLine(vbCrLf + &quot;Created the following Xslt tranform:&quot;)\n        WriteLine(transformXml)\n\n        Dim xmlDoc As New XmlDocument\n        xmlDoc.LoadXml(transformXml)\n        Return xmlDoc.GetElementsByTagName(&quot;xsl:transform&quot;)\n    End Function\n\n    Private Sub TransformDoc( _\n        ByVal xmlDoc As XmlDocument, _\n        ByVal xsltNodeList As XmlNodeList)\n\n        Try\n            &#39; Construct a new XmlDsigXsltTransform.\n            Dim xmlTransform As New XmlDsigXsltTransform\n\n            &#39; Load the Xslt tranform as a node list.\n            xmlTransform.LoadInnerXml(xsltNodeList)\n\n            &#39; Load the Xml document to perform the tranform on.\n            dim namespaceManager as New XmlNamespaceManager(xmlDoc.NameTable)\n\n            Dim productsNodeList As XmlNodeList\n            productsNodeList = xmlDoc.SelectNodes(&quot;//.&quot;, namespaceManager)\n\n            xmlTransform.LoadInput(productsNodeList)\n\n            &#39; Retrieve the output from the transform.\n            Dim outputStream As Stream\n            outputStream = CType(xmlTransform.GetOutput( _\n                GetType(System.IO.Stream)), _\n                System.IO.Stream)\n\n            &#39; Read the output stream into a stream reader.\n            Dim streamReader As New StreamReader(outputStream)\n\n            &#39; Read the stream into a string.\n            Dim outputMessage As String = streamReader.ReadToEnd()\n\n            &#39; Close the streams.\n            outputStream.Close()\n            streamReader.Close()\n\n            &#39; Display to the console the Xml before and after encryption.\n            WriteLine(vbCrLf + &quot;Result of transformation: &quot; + outputMessage)\n            ShowTransformProperties(xmlTransform)\n        Catch ex As Exception\n            WriteLine(&quot;Caught exception in TransformDoc method: &quot; + _\n                ex.ToString())\n        End Try\n    End Sub\n\n    Private Sub ShowTransformProperties( _\n            ByVal xmlTransform As XmlDsigXsltTransform)\n\n        Dim classDescription As String = xmlTransform.ToString()\n        WriteLine(vbCrLf + &quot;** Summary for &quot; + classDescription + &quot; **&quot;)\n\n        &#39; Retrieve the XML representation of the current transform.\n        Dim xmlInTransform As XmlElement = xmlTransform.GetXml()\n        WriteLine(&quot;Xml representation of the current transform:&quot; + _\n            vbCrLf + xmlInTransform.OuterXml)\n\n        &#39; Ensure the transform is using the proper algorithm.\n        xmlTransform.Algorithm = SignedXml.XmlDsigXsltTransformUrl\n        Console.WriteLine(&quot;Algorithm used: &quot; + classDescription)\n\n        &#39; Retrieve the valid input types for the current transform.\n        Dim validInTypes() As Type = xmlTransform.InputTypes\n        WriteLine(&quot;Transform accepts the following inputs:&quot;)\n        For i As Int16 = 0 To validInTypes.Length - 1 Step 1\n            WriteLine(&quot;   &quot; + validInTypes(i).ToString())\n        Next\n\n        Dim validOutTypes() As Type = xmlTransform.OutputTypes\n        WriteLine(&quot;Transform outputs in the following types:&quot;)\n        For j As Int16 = 0 To validOutTypes.Length - 1 Step 1\n\n            WriteLine(&quot;   &quot; + validOutTypes(j).ToString())\n            If (validOutTypes(j).Equals(GetType(Object))) Then\n                Dim outputObject As Object = xmlTransform.GetOutput()\n            End If\n        Next\n    End Sub\n\n    &#39; Resolve the specified base and relative Uri&#39;s .\n    Private Function ResolveUris( _\n        ByVal baseUri As Uri, _\n        ByVal relativeUri As String) As Uri\n\n        Dim xmlResolver As New XmlUrlResolver\n        xmlResolver.Credentials = _\n            System.Net.CredentialCache.DefaultCredentials\n\n        Dim xmlTransform As New XmlDsigXsltTransform\n        xmlTransform.Resolver = xmlResolver\n\n        Dim absoluteUri As Uri = xmlResolver.ResolveUri(baseUri, relativeUri)\n        If (Not absoluteUri Is Nothing) Then\n            WriteLine(vbCrLf + _\n                &quot;Resolved the base Uri and relative Uri to the following:&quot;)\n            WriteLine(absoluteUri.ToString())\n        Else\n            WriteLine(&quot;Unable to resolve the base Uri and relative Uri&quot;)\n        End If\n        \n        Return absoluteUri\n    End Function\n\n    &#39; Write specified message and carriage return to the output textbox.\n    Private Sub WriteLine(ByVal message As String)\n        tbxOutput.AppendText(message + vbCrLf)\n\n    End Sub\n\n    &#39; Event handler for Exit button.\n    Private Sub Button2_Click( _\n        ByVal sender As System.Object, _\n        ByVal e As System.EventArgs) Handles Button2.Click\n\n        Application.Exit()\n    End Sub\n#Region &quot; Windows Form Designer generated code &quot;\n\n    Public Sub New()\n        MyBase.New()\n\n        &#39;This call is required by the Windows Form Designer.\n        InitializeComponent()\n\n        &#39;Add any initialization after the InitializeComponent() call\n\n    End Sub\n\n    &#39;Form overrides dispose to clean up the component list.\n    Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)\n        If disposing Then\n            If Not (components Is Nothing) Then\n                components.Dispose()\n            End If\n        End If\n        MyBase.Dispose(disposing)\n    End Sub\n\n    &#39;Required by the Windows Form Designer\n    Private components As System.ComponentModel.IContainer\n\n    &#39;NOTE: The following procedure is required by the Windows Form Designer\n    &#39;It can be modified using the Windows Form Designer.  \n    &#39;Do not modify it using the code editor.\n    Friend WithEvents Panel2 As System.Windows.Forms.Panel\n    Friend WithEvents Panel1 As System.Windows.Forms.Panel\n    Friend WithEvents Button1 As System.Windows.Forms.Button\n    Friend WithEvents Button2 As System.Windows.Forms.Button\n    Friend WithEvents tbxOutput As System.Windows.Forms.RichTextBox\n    &lt;System.Diagnostics.DebuggerStepThrough()&gt; _\n    Private Sub InitializeComponent()\n        Me.Panel2 = New System.Windows.Forms.Panel\n        Me.Button1 = New System.Windows.Forms.Button\n        Me.Button2 = New System.Windows.Forms.Button\n        Me.Panel1 = New System.Windows.Forms.Panel\n        Me.tbxOutput = New System.Windows.Forms.RichTextBox\n        Me.Panel2.SuspendLayout()\n        Me.Panel1.SuspendLayout()\n        Me.SuspendLayout()\n        &#39;\n        &#39;Panel2\n        &#39;\n        Me.Panel2.Controls.Add(Me.Button1)\n        Me.Panel2.Controls.Add(Me.Button2)\n        Me.Panel2.Dock = System.Windows.Forms.DockStyle.Bottom\n        Me.Panel2.DockPadding.All = 20\n        Me.Panel2.Location = New System.Drawing.Point(0, 320)\n        Me.Panel2.Name = &quot;Panel2&quot;\n        Me.Panel2.Size = New System.Drawing.Size(616, 64)\n        Me.Panel2.TabIndex = 1\n        &#39;\n        &#39;Button1\n        &#39;\n        Me.Button1.Dock = System.Windows.Forms.DockStyle.Right\n        Me.Button1.Font = New System.Drawing.Font( _\n            &quot;Microsoft Sans Serif&quot;, _\n            9.0!, _\n            System.Drawing.FontStyle.Regular, _\n            System.Drawing.GraphicsUnit.Point, _\n            CType(0, Byte))\n        Me.Button1.Location = New System.Drawing.Point(446, 20)\n        Me.Button1.Name = &quot;Button1&quot;\n        Me.Button1.Size = New System.Drawing.Size(75, 24)\n        Me.Button1.TabIndex = 2\n        Me.Button1.Text = &quot;&amp;Run&quot;\n        &#39;\n        &#39;Button2\n        &#39;\n        Me.Button2.Dock = System.Windows.Forms.DockStyle.Right\n        Me.Button2.Font = New System.Drawing.Font( _\n            &quot;Microsoft Sans Serif&quot;, _\n            9.0!, _\n            System.Drawing.FontStyle.Regular, _\n            System.Drawing.GraphicsUnit.Point, _\n            CType(0, Byte))\n        Me.Button2.Location = New System.Drawing.Point(521, 20)\n        Me.Button2.Name = &quot;Button2&quot;\n        Me.Button2.Size = New System.Drawing.Size(75, 24)\n        Me.Button2.TabIndex = 3\n        Me.Button2.Text = &quot;E&amp;xit&quot;\n        &#39;\n        &#39;Panel1\n        &#39;\n        Me.Panel1.Controls.Add(Me.tbxOutput)\n        Me.Panel1.Dock = System.Windows.Forms.DockStyle.Fill\n        Me.Panel1.DockPadding.All = 20\n        Me.Panel1.Location = New System.Drawing.Point(0, 0)\n        Me.Panel1.Name = &quot;Panel1&quot;\n        Me.Panel1.Size = New System.Drawing.Size(616, 320)\n        Me.Panel1.TabIndex = 2\n        &#39;\n        &#39;tbxOutput\n        &#39;\n        Me.tbxOutput.AccessibleDescription = _\n            &quot;Displays output from application.&quot;\n        Me.tbxOutput.AccessibleName = &quot;Output textbox.&quot;\n        Me.tbxOutput.Dock = System.Windows.Forms.DockStyle.Fill\n        Me.tbxOutput.Location = New System.Drawing.Point(20, 20)\n        Me.tbxOutput.Name = &quot;tbxOutput&quot;\n        Me.tbxOutput.Size = New System.Drawing.Size(576, 280)\n        Me.tbxOutput.TabIndex = 1\n        Me.tbxOutput.Text = &quot;Click the Run button to run the application.&quot;\n        &#39;\n        &#39;Form1\n        &#39;\n        Me.AutoScaleBaseSize = New System.Drawing.Size(6, 15)\n        Me.ClientSize = New System.Drawing.Size(616, 384)\n        Me.Controls.Add(Me.Panel1)\n        Me.Controls.Add(Me.Panel2)\n        Me.Name = &quot;Form1&quot;\n        Me.Text = &quot;XmlDsigXsltTransform&quot;\n        Me.Panel2.ResumeLayout(False)\n        Me.Panel1.ResumeLayout(False)\n        Me.ResumeLayout(False)\n\n    End Sub\n\n#End Region\nEnd Class\n&#39;\n&#39; This sample produces the following output:\n&#39; \n&#39; Created the following Xml document for tranformation:\n&#39; &lt;?xml version=&#39;1.0&#39;?&gt;&lt;products&gt;&lt;product&gt;&lt;productid&gt;1&lt;/productid&gt;&lt;description\n&#39; &gt;Widgets&lt;/description&gt;&lt;/product&gt;&lt;product&gt;&lt;productid&gt;2&lt;/productid&gt;&lt;descriptio\n&#39; n&gt;Gadgits&lt;/description&gt;&lt;/product&gt;&lt;/products&gt;\n&#39; \n&#39; Created the following Xslt tranform:\n&#39; &lt;xsl:transform version=&#39;1.0&#39; xmlns:xsl=&#39;http://www.w3.org/1999/XSL/Transform\n&#39; &#39;&gt;&lt;xsl:template match=&#39;products&#39;&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;ProductId&lt;/td&gt;&lt;td&gt;Name&lt;/td&gt;&lt;\n&#39; /tr&gt;&lt;xsl:apply-templates/&gt;&lt;/table&gt;&lt;/xsl:template&gt;&lt;xsl:template match=&#39;produc\n&#39; t&#39;&gt;&lt;tr&gt;&lt;xsl:apply-templates/&gt;&lt;/tr&gt;&lt;/xsl:template&gt;&lt;xsl:template match=&#39;produc\n&#39; tid&#39;&gt;&lt;td&gt;&lt;xsl:apply-templates/&gt;&lt;/td&gt;&lt;/xsl:template&gt;&lt;xsl:template match=&#39;desc\n&#39; ription&#39;&gt;&lt;td&gt;&lt;xsl:apply-templates/&gt;&lt;/td&gt;&lt;/xsl:template&gt;&lt;/xsl:transform&gt;\n&#39; \n&#39; Result of transformation: &lt;table&gt;&lt;tr&gt;&lt;td&gt;ProductId&lt;/td&gt;&lt;td&gt;Name&lt;/td&gt;&lt;/tr&gt;&lt;tr\n&#39; &gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Widgets&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Gadgits&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;\n&#39; \n&#39; ** Summary for System.Security.Cryptography.Xml.XmlDsigXsltTransform **\n&#39; Xml representation of the current transform:\n&#39; &lt;Transform Algorithm=&quot;http://www.w3.org/TR/1999/REC-xslt-19991116&quot; xmlns=&quot;ht\n&#39; tp://www.w3.org/2000/09/xmldsig#&quot;&gt;&lt;xsl:transform version=&quot;1.0&quot; xmlns:xsl=&quot;ht\n&#39; tp://www.w3.org/1999/XSL/Transform&quot;&gt;&lt;xsl:template match=&quot;products&quot;&gt;&lt;table xm\n&#39; lns=&quot;&quot;&gt;&lt;tr&gt;&lt;td&gt;ProductId&lt;/td&gt;&lt;td&gt;Name&lt;/td&gt;&lt;/tr&gt;&lt;xsl:apply-templates /&gt;&lt;/tabl\n&#39; e&gt;&lt;/xsl:template&gt;&lt;xsl:template match=&quot;product&quot;&gt;&lt;tr xmlns=&quot;&quot;&gt;&lt;xsl:apply-templ\n&#39; ates /&gt;&lt;/tr&gt;&lt;/xsl:template&gt;&lt;xsl:template match=&quot;productid&quot;&gt;&lt;td xmlns=&quot;&quot;&gt;&lt;xsl\n&#39; :apply-templates /&gt;&lt;/td&gt;&lt;/xsl:template&gt;&lt;xsl:template match=&quot;description&quot;&gt;&lt;td\n&#39;  xmlns=&quot;&quot;&gt;&lt;xsl:apply-templates /&gt;&lt;/td&gt;&lt;/xsl:template&gt;&lt;/xsl:transform&gt;&lt;/Trans\n&#39; form&gt;\n&#39; Transform accepts the following inputs:\n&#39;    System.IO.Stream\n&#39;    System.Xml.XmlDocument\n&#39;    System.Xml.XmlNodeList\n&#39; Transform outputs in the following types:\n&#39;    System.IO.Stream\n&#39; \n&#39; Resolved the base Uri and relative Uri to the following:\n&#39; http://www.contoso.com/xml\n&#39; \n&#39; This sample completed successfully; press Exit to continue.\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxpathtransform\" data-linktype=\"relative-path\">XmlDsigXPathTransform</a> class allows you to address an XML document using an XSLT transformation.  This class uses XSLT to transform XML nodes into other XML nodes that you want to sign or encrypt.  </p>\n<p> Use the XmlDsigXsltTransform class to sign or encrypt specific parts of an XML document using an XSLT transformation.  </p>\n<p> The Uniform Resource Identifier (URI) that describes the XmlDsigXsltTransform class is defined by the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml#System_Security_Cryptography_Xml_SignedXml_XmlDsigXsltTransformUrl\" data-linktype=\"relative-path\">XmlDsigXsltTransformUrl</a> field.  </p>\n<p> For more information about the XSLT transform, see Section 6.6.5 of the XMLDSIG specification, which is available from the W3C at www.w3.org/TR/xmldsig-core/.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">XmlDsigXsltTransform()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public XmlDsigXsltTransform ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform__ctor_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">XmlDsigXsltTransform(Boolean)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> class with comments, if specified.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public XmlDsigXsltTransform (bool includeComments);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>includeComments</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to include comments; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform_InputTypes_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform_InputTypes\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">InputTypes</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets an array of types that are valid inputs to the <span class=\"xref\">stem.Security.Cryptography.Xml.XmlDsigXsltTransform.LoadInput*</span> method of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override Type[] InputTypes { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array of valid input types for the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object; you can pass only objects of one of these types to the <span class=\"xref\">stem.Security.Cryptography.Xml.XmlDsigXsltTransform.LoadInput*</span> method of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The valid input types to <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> are <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a>, and <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform_OutputTypes_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform_OutputTypes\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OutputTypes</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets an array of types that are possible outputs from the <span class=\"xref\">stem.Security.Cryptography.Xml.XmlDsigXsltTransform.GetOutput*</span> methods of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override Type[] OutputTypes { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array of valid output types for the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object; only objects of one of these types are returned from the <span class=\"xref\">stem.Security.Cryptography.Xml.XmlDsigXsltTransform.GetOutput*</span> methods of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> is the only valid output type for <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform_GetInnerXml_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform_GetInnerXml\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetInnerXml()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns an XML representation of the parameters of the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object that are suitable to be included as subelements of an XMLDSIG <code>&lt;Transform&gt;</code> element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected override System.Xml.XmlNodeList GetInnerXml ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A list of the XML nodes that represent the transform-specific content needed to describe the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object in an XMLDSIG <code>&lt;Transform&gt;</code> element.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform_GetOutput_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform_GetOutput\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetOutput()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the output of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override object GetOutput ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The output of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The type of the returned object must be <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform_GetOutput_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform_GetOutput_System_Type_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetOutput(Type)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the output of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object of type <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override object GetOutput (Type type);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>type</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The type of the output to return. <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> is the only valid type for this parameter.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The output of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object of type <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>type</code> parameter is not a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The type of the returned object must be <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform_LoadInnerXml_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform_LoadInnerXml_System_Xml_XmlNodeList_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LoadInnerXml(XmlNodeList)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Parses the specified <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> object as transform-specific content of a <code>&lt;Transform&gt;</code> element and configures the internal state of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object to match the <code>&lt;Transform&gt;</code> element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override void LoadInnerXml (System.Xml.XmlNodeList nodeList);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>nodeList</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> object that encapsulates an XSLT style sheet to load into the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object. This style sheet is applied to the document loaded by the <span class=\"xref\">stem.Security.Cryptography.Xml.XmlDsigXsltTransform.LoadInput*</span> method.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>nodeList</code> parameter is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>nodeList</code> parameter does not contain an <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is used to process subelements of a <code>&lt;Transform&gt;</code> element.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform_LoadInput_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_XmlDsigXsltTransform_LoadInput_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LoadInput(Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Loads the specified input into the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override void LoadInput (object obj);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>obj</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The input to load into the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The type of the input object must be one of the types in the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform#System_Security_Cryptography_Xml_XmlDsigXsltTransform_InputTypes_\" data-linktype=\"relative-path\">InputTypes</a> property. The valid input types to <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigxslttransform\" data-linktype=\"relative-path\">XmlDsigXsltTransform</a> are <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a>, and <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.Xml.XmlDsigXsltTransform.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform.GetInnerXml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform.GetOutput\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform.InputTypes\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform.LoadInnerXml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform.LoadInput\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform.OutputTypes\">\r\n<meta name=\"APILocation\" content=\"System.Security.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:59 PM\">\r\n<meta name=\"document_id\" content=\"5b5bc370-ffca-f264-d661-47702359c1ed\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the XSLT transform for a digital signature as defined by the W3C.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.security.cryptography.xml/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.Xml.XmlDsigXsltTransform\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","uhfHeaderId":"MSDocsHeader-DotNet","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.Xml.XmlDsigXsltTransform.yml","open_to_public_contributors":false,"api_name":["System.Security.Cryptography.Xml.XmlDsigXsltTransform","System.Security.Cryptography.Xml.XmlDsigXsltTransform..ctor","System.Security.Cryptography.Xml.XmlDsigXsltTransform.GetInnerXml","System.Security.Cryptography.Xml.XmlDsigXsltTransform.GetOutput","System.Security.Cryptography.Xml.XmlDsigXsltTransform.InputTypes","System.Security.Cryptography.Xml.XmlDsigXsltTransform.LoadInnerXml","System.Security.Cryptography.Xml.XmlDsigXsltTransform.LoadInput","System.Security.Cryptography.Xml.XmlDsigXsltTransform.OutputTypes"],"api_location":["System.Security.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.Xml.XmlDsigXsltTransform","System::Security::Cryptography::Xml::XmlDsigXsltTransform","System.Security.Cryptography.Xml.XmlDsigXsltTransform.#ctor","System::Security::Cryptography::Xml::XmlDsigXsltTransform::#ctor","System.Security.Cryptography.Xml.XmlDsigXsltTransform.GetInnerXml","System::Security::Cryptography::Xml::XmlDsigXsltTransform::GetInnerXml","System.Security.Cryptography.Xml.XmlDsigXsltTransform.GetOutput","System::Security::Cryptography::Xml::XmlDsigXsltTransform::GetOutput","System.Security.Cryptography.Xml.XmlDsigXsltTransform.InputTypes","System::Security::Cryptography::Xml::XmlDsigXsltTransform::InputTypes","System.Security.Cryptography.Xml.XmlDsigXsltTransform.LoadInnerXml","System::Security::Cryptography::Xml::XmlDsigXsltTransform::LoadInnerXml","System.Security.Cryptography.Xml.XmlDsigXsltTransform.LoadInput","System::Security::Cryptography::Xml::XmlDsigXsltTransform::LoadInput","System.Security.Cryptography.Xml.XmlDsigXsltTransform.OutputTypes","System::Security::Cryptography::Xml::XmlDsigXsltTransform::OutputTypes"],"dev_langs":["csharp"],"updated_at":"2017-04-01 05:59 PM","document_id":"5b5bc370-ffca-f264-d661-47702359c1ed","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Security.Cryptography.Xml/XmlDsigXsltTransform.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"XmlDsigXsltTransform class | Microsoft Docs","_op_ogTitle":"XmlDsigXsltTransform class","description":"Represents the XSLT transform for a digital signature as defined by the W3C.\n","toc_asset_id":"api/_splitted/System.Security.Cryptography.Xml/toc.json","toc_rel":"_splitted/System.Security.Cryptography.Xml/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.Xml.XmlDsigXsltTransform","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.xml.xmldsigxslttransform","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.xml.xmldsigxslttransform","fileRelativePath":"api/System.Security.Cryptography.Xml.XmlDsigXsltTransform.html"},"themesRelativePathToOutputRoot":"_themes/"}