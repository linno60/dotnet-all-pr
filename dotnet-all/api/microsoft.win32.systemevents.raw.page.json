{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">SystemEvents</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides access to system event notifications. This class cannot be inherited.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public sealed class SystemEvents</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">SystemEvents</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>This section contains two examples. The first example shows how to use system events in an ordinary application, and the second example shows how to use system events in a Windows service.  </p>\n<p> <strong>Example 1</strong>  </p>\n<p> The following code example registers interest in some system events and then waits for any of those events to occur. The output shown occurs if the user changes the display resolution.  </p>\n<pre><code class=\"lang-cpp\" name=\"SystemEvents#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace Microsoft::Win32;\n\n// This method is called when a user preference changes.\nvoid SystemEvents_UserPreferenceChanging(Object^ sender,\n     UserPreferenceChangingEventArgs^ e)\n {\n     Console::WriteLine(&quot;The user preference is changing. Category={0}&quot;,\n         e-&gt;Category);\n }\n\n// This method is called when the palette changes.\nvoid SystemEvents_PaletteChanged(Object^ sender, EventArgs^ e)\n{\n    Console::WriteLine(&quot;The palette changed.&quot;);\n}\n\n// This method is called when the display settings change.\nvoid SystemEvents_DisplaySettingsChanged(Object^ sender,\n    EventArgs^ e)\n{\n    Console::WriteLine(&quot;The display settings changed.&quot;);\n}\n\nint main()\n{\n    // Set the SystemEvents class to receive event notification\n    // when a user preference changes, the palette changes, or\n    // when display settings change.\n    SystemEvents::UserPreferenceChanging += gcnew\n        UserPreferenceChangingEventHandler(\n        SystemEvents_UserPreferenceChanging);\n    SystemEvents::PaletteChanged += gcnew\n        EventHandler(SystemEvents_PaletteChanged);\n    SystemEvents::DisplaySettingsChanged += gcnew\n        EventHandler(SystemEvents_DisplaySettingsChanged);\n\n    // For demonstration purposes, this application sits idle\n    // waiting for events.\n    Console::WriteLine(&quot;This application is waiting for system events.&quot;);\n    Console::WriteLine(&quot;Press &lt;Enter&gt; to terminate this application.&quot;);\n    Console::ReadLine();\n}\n\n// This code produces the following output.\n//\n//  This app is waiting for system events.\n//  Press &lt;Enter&gt; to terminate this application.\n//  Display Settings changed.\n//  User preference is changing. Category=General\n</code></pre><pre><code class=\"lang-cs\" name=\"SystemEvents#1\">using System;\nusing Microsoft.Win32;\n\npublic sealed class App \n{\n    static void Main() \n    {         \n        // Set the SystemEvents class to receive event notification when a user \n        // preference changes, the palette changes, or when display settings change.\n        SystemEvents.UserPreferenceChanging += new \n            UserPreferenceChangingEventHandler(SystemEvents_UserPreferenceChanging);\n        SystemEvents.PaletteChanged += new \n            EventHandler(SystemEvents_PaletteChanged);\n        SystemEvents.DisplaySettingsChanged += new \n            EventHandler(SystemEvents_DisplaySettingsChanged);        \n\n        // For demonstration purposes, this application sits idle waiting for events.\n        Console.WriteLine(&quot;This application is waiting for system events.&quot;);\n        Console.WriteLine(&quot;Press &lt;Enter&gt; to terminate this application.&quot;);\n        Console.ReadLine();\n    }\n\n    // This method is called when a user preference changes.\n    static void SystemEvents_UserPreferenceChanging(object sender, UserPreferenceChangingEventArgs e) \n    {\n        Console.WriteLine(&quot;The user preference is changing. Category={0}&quot;, e.Category);\n    }\n\n    // This method is called when the palette changes.\n    static void SystemEvents_PaletteChanged(object sender, EventArgs e)\n    {\n        Console.WriteLine(&quot;The palette changed.&quot;);\n    }\n\n    // This method is called when the display settings change.\n    static void SystemEvents_DisplaySettingsChanged(object sender, EventArgs e)\n    {\n        Console.WriteLine(&quot;The display settings changed.&quot;);\n    }\n}\n\n// This code produces the following output.\n// \n//  This app is waiting for system events.\n//  Press &lt;Enter&gt; to terminate this application.\n//  Display Settings changed.\n//  User preference is changing. Category=General\n</code></pre><pre><code class=\"lang-vb\" name=\"SystemEvents#1\">Imports System\nImports Microsoft.Win32\nImports System.Windows.Forms\n\nFriend Class Form1\n    Inherits System.Windows.Forms.Form\n\n\n    Public Sub New()\n        MyBase.New()\n\n        &#39;This call is required by the Windows Form Designer.\n        InitializeComponent()\n\n        &#39;Set the SystemEvents class to receive event notification \n        &#39;when a user preference changes, the palette changes, or \n        &#39;when display settings change.\n        AddHandler SystemEvents.UserPreferenceChanging, _\n        AddressOf SystemEvents_UserPreferenceChanging\n\n        AddHandler SystemEvents.PaletteChanged, _\n        AddressOf SystemEvents_PaletteChanged\n\n        AddHandler SystemEvents.DisplaySettingsChanged, _\n        AddressOf SystemEvents_DisplaySettingsChanged\n\n    End Sub\n\n    &#39;Form overrides dispose to clean up the component list.\n    Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)\n        If disposing Then\n            If (components IsNot Nothing) Then\n                components.Dispose()\n            End If\n        End If\n        MyBase.Dispose(disposing)\n    End Sub\n\n\n    Private components As System.ComponentModel.IContainer\n\n    &lt;System.Diagnostics.DebuggerStepThrough()&gt; Private Sub InitializeComponent()\n\n        Me.SuspendLayout()\n\n        &#39;\n        &#39;Form1\n        &#39;\n        Me.ClientSize = New System.Drawing.Size(648, 398)\n        Me.Name = &quot;Form1&quot;\n        Me.Text = &quot;Form1&quot;\n        Me.ResumeLayout(False)\n\n    End Sub\n\n\n    &#39; This method is called when a user preference changes.\n    Private Sub SystemEvents_UserPreferenceChanging( _\n    ByVal sender As Object, _\n    ByVal e As UserPreferenceChangingEventArgs)\n\n        MessageBox.Show(&quot;UserPreferenceChanging: &quot; &amp; _\n        e.Category.ToString())\n    End Sub\n\n\n    &#39; This method is called when the palette changes.\n    Private Sub SystemEvents_PaletteChanged( _\n    ByVal sender As Object, _\n    ByVal e As EventArgs)\n\n        MessageBox.Show(&quot;PaletteChanged&quot;)\n\n    End Sub\n\n\n    &#39; This method is called when the display settings change.\n    Private Sub SystemEvents_DisplaySettingsChanged( _\n    ByVal sender As Object, _\n    ByVal e As EventArgs)\n\n        MessageBox.Show(&quot;The display settings changed.&quot;)\n\n    End Sub\n\nEnd Class\n</code></pre><p> <strong>Example 2</strong>  </p>\n<p> The following code example demonstrates a very simple Windows service that handles the <a class=\"xref\" href=\"microsoft.win32.systemevents#Microsoft_Win32_SystemEvents_TimeChanged\" data-linktype=\"relative-path\">TimeChanged</a> and <a class=\"xref\" href=\"microsoft.win32.systemevents#Microsoft_Win32_SystemEvents_UserPreferenceChanged\" data-linktype=\"relative-path\">UserPreferenceChanged</a> events. The example includes a service named <code>SimpleService</code>, a form named <code>HiddenForm</code>, and an installer. The form provides the message loop that is required by system events.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Services do not have message loops, unless they are allowed to interact with the desktop. If the message loop is not provided by a hidden form, as in this example, the service must be run under the local system account, and manual intervention is required to enable interaction with the desktop. That is, the administrator must manually check the <strong>Allow service to interact with desktop</strong> check box on the <strong>Log On</strong> tab of the service properties dialog box. In that case, a message loop is automatically provided. This option is available only when the service is run under the local system account. Interaction with the desktop cannot be enabled programmatically.  </p>\n</div>\n<p> The service in this example starts a thread that runs an instance of <code>HiddenForm</code>. The events are hooked up and handled in the form. The events must be hooked up in the load event of the form, to make sure that the form is completely loaded first; otherwise the events will not be raised.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The example provides all the necessary code, including the form initialization code typically generated by Visual Studio designers. If you are developing your service in Visual Studio, you can omit the second partial class and use the <strong>Properties</strong> window to set the height and width of the hidden form to zero, the border style to <a class=\"xref\" href=\"system.windows.forms.formborderstyle\" data-linktype=\"relative-path\">System.Windows.Forms.FormBorderStyle</a>, and the window state to <a class=\"xref\" href=\"system.windows.forms.formwindowstate\" data-linktype=\"relative-path\">System.Windows.Forms.FormWindowState</a>.  </p>\n</div>\n<p> To run the example:  </p>\n<ol>\n<li><p>Compile the code from the command line. The name that you use for the source file is not important.  </p>\n</li>\n<li><p>Install the service from the command line using the <a href=\"../topic/installutil.exe%20(installer%20tool)\" data-linktype=\"relative-path\">Installutil.exe (Installer Tool)</a> utility. For example, <code>InstallUtil example.exe</code> if the source file name is <code>example.cs</code> or <code>example.vb</code>. You must be an administrator to install the service.  </p>\n</li>\n<li><p>Use the Services console to start the service.  </p>\n</li>\n<li><p>Change the system time, or change user preferences, such as mouse properties.  </p>\n</li>\n<li><p>View the messages in the <strong>Application</strong> category of Event Viewer.  </p>\n</li>\n<li><p>Use the Services console to stop the service.  </p>\n</li>\n<li><p>Uninstall the service from the command line by using the <code>/u</code> option. For example, <code>InstallUtil /u example.exe</code>.  </p>\n</li>\n</ol>\n<pre><code class=\"lang-vb\" name=\"ManagedWindowsService#1\">Imports System\nImports System.ServiceProcess\nImports System.Threading\nImports System.Windows.Forms\nImports System.Diagnostics\nImports Microsoft.Win32\nImports System.ComponentModel\nImports System.Configuration.Install\n\nNamespace SimpleServiceVb\n    Public Class SimpleService\n        Inherits ServiceBase\n    \n        Shared Sub Main(ByVal args() As String) \n            ServiceBase.Run(New SimpleService())\n        End Sub\n    \n        Protected Overrides Sub OnStart(ByVal args() As String) \n            EventLog.WriteEntry(&quot;SimpleService&quot;, &quot;Starting SimpleService&quot;)\n            Dim t As New Thread(AddressOf RunMessagePump)\n            t.Start()    \n        End Sub\n    \n        Sub RunMessagePump() \n            EventLog.WriteEntry(&quot;SimpleService.MessagePump&quot;, _\n                &quot;Starting SimpleService Message Pump&quot;)\n            Application.Run(New HiddenForm())\n        End Sub\n    \n        Protected Overrides Sub OnStop() \n            Application.Exit()\n        End Sub\n    End Class \n\n    Partial Class HiddenForm\n        Inherits Form\n\n        Public Sub New() \n            InitializeComponent()\n        End Sub\n    \n        Private Sub HiddenForm_Load(ByVal sender As Object, ByVal e As EventArgs) \n            AddHandler SystemEvents.TimeChanged, AddressOf SystemEvents_TimeChanged\n            AddHandler SystemEvents.UserPreferenceChanged, AddressOf SystemEvents_UPCChanged\n        End Sub \n    \n        Private Sub HiddenForm_FormClosing(ByVal sender As Object, ByVal e As FormClosingEventArgs) \n            RemoveHandler SystemEvents.TimeChanged, New EventHandler(AddressOf SystemEvents_TimeChanged)\n            RemoveHandler SystemEvents.UserPreferenceChanged, _\n                New UserPreferenceChangedEventHandler(AddressOf SystemEvents_UPCChanged)\n        End Sub \n    \n        Private Sub SystemEvents_TimeChanged(ByVal sender As Object, ByVal e As EventArgs) \n            EventLog.WriteEntry(&quot;SimpleService.TimeChanged&quot;, _\n                &quot;Time changed; it is now &quot; &amp; DateTime.Now.ToLongTimeString())\n        End Sub \n    \n        Private Sub SystemEvents_UPCChanged(ByVal sender As Object, ByVal e As UserPreferenceChangedEventArgs) \n            EventLog.WriteEntry(&quot;SimpleService.UserPreferenceChanged&quot;, e.Category.ToString())\n        End Sub \n    End Class\n\n    Partial Class HiddenForm\n\n        Private components As System.ComponentModel.IContainer = Nothing\n    \n        Protected Overrides Sub Dispose(ByVal disposing As Boolean) \n            If disposing AndAlso Not (components Is Nothing) Then\n                components.Dispose()\n            End If\n            MyBase.Dispose(disposing)\n        End Sub\n  \n        Private Sub InitializeComponent() \n            Me.SuspendLayout()\n            Me.AutoScaleDimensions = New System.Drawing.SizeF(6F, 13F)\n            Me.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font\n            Me.ClientSize = New System.Drawing.Size(0, 0)\n            Me.FormBorderStyle = System.Windows.Forms.FormBorderStyle.None\n            Me.Name = &quot;HiddenForm&quot;\n            Me.Text = &quot;HiddenForm&quot;\n            Me.WindowState = System.Windows.Forms.FormWindowState.Minimized\n            AddHandler Me.Load, AddressOf Me.HiddenForm_Load\n            AddHandler Me.FormClosing, AddressOf Me.HiddenForm_FormClosing\n            Me.ResumeLayout(False)\n        End Sub \n    End Class \n\n    &lt;RunInstaller(True)&gt; _\n    Public Class SimpleInstaller\n        Inherits Installer\n\n        Private serviceInstaller As ServiceInstaller\n        Private processInstaller As ServiceProcessInstaller\n    \n        Public Sub New() \n            processInstaller = New ServiceProcessInstaller()\n            serviceInstaller = New ServiceInstaller()\n        \n            &#39; Service will run under system account\n            processInstaller.Account = ServiceAccount.LocalSystem\n        \n            &#39; Service will have Start Type of Manual\n            serviceInstaller.StartType = ServiceStartMode.Automatic\n        \n            serviceInstaller.ServiceName = &quot;Simple Service&quot;\n        \n            Installers.Add(serviceInstaller)\n            Installers.Add(processInstaller)\n        End Sub\n    End Class \nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"ManagedWindowsService#1\">using System;\nusing System.ServiceProcess;\nusing System.Threading;\nusing System.Windows.Forms;\nusing System.Diagnostics;\nusing Microsoft.Win32;\nusing System.ComponentModel;\nusing System.Configuration.Install;\n\nnamespace SimpleServiceCs\n{\n    public class SimpleService : ServiceBase\n    {\n        static void Main(string[] args)\n        {\n            ServiceBase.Run(new SimpleService());\n        }\n\n        protected override void OnStart(string[] args)\n        {\n            EventLog.WriteEntry(&quot;SimpleService&quot;, &quot;Starting SimpleService&quot;);\n            new Thread(RunMessagePump).Start();\n        }\n\n        void RunMessagePump()\n        {\n            EventLog.WriteEntry(&quot;SimpleService.MessagePump&quot;, &quot;Starting SimpleService Message Pump&quot;);\n            Application.Run(new HiddenForm());\n        }\n\n        protected override void OnStop()\n        {\n            Application.Exit();\n        }\n    }\n\n    public partial class HiddenForm : Form\n    {\n        public HiddenForm()\n        {\n            InitializeComponent();\n        }\n\n        private void HiddenForm_Load(object sender, EventArgs e)\n        {\n            SystemEvents.TimeChanged += new EventHandler(SystemEvents_TimeChanged);\n            SystemEvents.UserPreferenceChanged += new UserPreferenceChangedEventHandler(SystemEvents_UPCChanged);\n        }\n\n        private void HiddenForm_FormClosing(object sender, FormClosingEventArgs e)\n        {\n            SystemEvents.TimeChanged -= new EventHandler(SystemEvents_TimeChanged);\n            SystemEvents.UserPreferenceChanged -= new UserPreferenceChangedEventHandler(SystemEvents_UPCChanged);\n        }\n\n        private void SystemEvents_TimeChanged(object sender, EventArgs e)\n        {\n            EventLog.WriteEntry(&quot;SimpleService.TimeChanged&quot;, &quot;Time changed; it is now &quot; +\n                DateTime.Now.ToLongTimeString());\n        }\n\n        private void SystemEvents_UPCChanged(object sender, UserPreferenceChangedEventArgs e)\n        {\n            EventLog.WriteEntry(&quot;SimpleService.UserPreferenceChanged&quot;, e.Category.ToString());\n        }\n    }\n\n    partial class HiddenForm\n    {\n        private System.ComponentModel.IContainer components = null;\n\n        protected override void Dispose(bool disposing)\n        {\n            if (disposing &amp;&amp; (components != null))\n            {\n                components.Dispose();\n            }\n            base.Dispose(disposing);\n        }\n\n        private void InitializeComponent()\n        {\n            this.SuspendLayout();\n            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);\n            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;\n            this.ClientSize = new System.Drawing.Size(0, 0);\n            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.None;\n            this.Name = &quot;HiddenForm&quot;;\n            this.Text = &quot;HiddenForm&quot;;\n            this.WindowState = System.Windows.Forms.FormWindowState.Minimized;\n            this.Load += new System.EventHandler(this.HiddenForm_Load);\n            this.FormClosing += new System.Windows.Forms.FormClosingEventHandler(this.HiddenForm_FormClosing);\n            this.ResumeLayout(false);\n\n        }\n    }\n\n    [RunInstaller(true)]\n    public class SimpleInstaller : Installer\n    {\n        private ServiceInstaller serviceInstaller;\n        private ServiceProcessInstaller processInstaller;\n\n        public SimpleInstaller()\n        {\n            processInstaller = new ServiceProcessInstaller();\n            serviceInstaller = new ServiceInstaller();\n\n            // Service will run under system account\n            processInstaller.Account = ServiceAccount.LocalSystem;\n\n            // Service will have Start Type of Manual\n            serviceInstaller.StartType = ServiceStartMode.Automatic;\n\n            serviceInstaller.ServiceName = &quot;Simple Service&quot;;\n\n            Installers.Add(serviceInstaller);\n            Installers.Add(processInstaller);\n        }\n    }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The SystemEvents class provides the ability to respond to specific types of system events.  </p>\n<p> When a system event is raised, any delegates attached to the event are called using the thread that monitors for system events. Therefore, you should make any calls from your event handlers thread-safe. If you need to call a system event that is not exposed as a member of this class, you can use the <a class=\"xref\" href=\"microsoft.win32.systemevents#Microsoft_Win32_SystemEvents_InvokeOnEventsThread_\" data-linktype=\"relative-path\">InvokeOnEventsThread</a> method.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Do not perform time-consuming processing on the thread that raises a system event handler because it might prevent other applications from functioning.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> Some system events might not be raised on Windows Vista. Be sure to verify that your application works as expected on Windows Vista.</p>\n</div>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_Win32_SystemEvents_CreateTimer_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CreateTimer(Int32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Creates a new window timer associated with the system events window.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static IntPtr CreateTimer (int interval);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>interval</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Specifies the interval between timer notifications, in milliseconds.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The ID of the new timer.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The interval is less than or equal to zero.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.externalexception\" data-linktype=\"relative-path\">ExternalException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The attempt to create a system events window thread did not succeed, or the attempt to create the timer did not succeed.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_Win32_SystemEvents_InvokeOnEventsThread_System_Delegate_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">InvokeOnEventsThread(Delegate)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invokes the specified delegate using the thread that listens for system events.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void InvokeOnEventsThread (Delegate method);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>method</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A delegate to invoke using the thread that listens for system events.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.externalexception\" data-linktype=\"relative-path\">ExternalException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The attempt to create a system events window thread did not succeed.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>You can use this method any time that you need to handle a system event that is not exposed otherwise by the <a class=\"xref\" href=\"microsoft.win32.systemevents\" data-linktype=\"relative-path\">SystemEvents</a> class.  </p>\n<p> When you call this method, the specified delegate will be invoked by the thread that your application is using to process system events.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_Win32_SystemEvents_KillTimer_System_IntPtr_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">KillTimer(IntPtr)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Terminates the timer specified by the given id.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void KillTimer (IntPtr timerId);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>timerId</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The ID of the timer to terminate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.externalexception\" data-linktype=\"relative-path\">ExternalException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The attempt to create a system events window thread did not succeed, or the attempt to terminate the timer did not succeed.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Events\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_Win32_SystemEvents_DisplaySettingsChanged\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">DisplaySettingsChanged</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the user changes the display settings.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static event EventHandler DisplaySettingsChanged;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.externalexception\" data-linktype=\"relative-path\">ExternalException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The attempt to create a system events window thread did not succeed.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"CAUTION\"><h5>Caution</h5><p> Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_Win32_SystemEvents_DisplaySettingsChanging\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">DisplaySettingsChanging</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the display settings are changing.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static event EventHandler DisplaySettingsChanging;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.externalexception\" data-linktype=\"relative-path\">ExternalException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The attempt to create a system events window thread did not succeed.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"CAUTION\"><h5>Caution</h5><p> Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_Win32_SystemEvents_EventsThreadShutdown\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">EventsThreadShutdown</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs before the thread that listens for system events is terminated.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static event EventHandler EventsThreadShutdown;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.externalexception\" data-linktype=\"relative-path\">ExternalException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The attempt to create a system events window thread did not succeed.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event is raised as the thread that listens for system events is about to be terminated. System event delegates are invoked using the thread that listens for system events.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_Win32_SystemEvents_InstalledFontsChanged\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">InstalledFontsChanged</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the user adds fonts to or removes fonts from the system.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static event EventHandler InstalledFontsChanged;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.externalexception\" data-linktype=\"relative-path\">ExternalException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The attempt to create a system events window thread did not succeed.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"CAUTION\"><h5>Caution</h5><p> Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_Win32_SystemEvents_LowMemory\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LowMemory</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the system is running out of available RAM.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static event EventHandler LowMemory;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.externalexception\" data-linktype=\"relative-path\">ExternalException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The attempt to create a system events window thread did not succeed.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event wraps the WM_COMPACTING message. This message is sent to all top-level windows when the system detects more than 12.5 percent of system time over a 30- to 60-second interval is being spent compacting memory. This indicates that system memory is low.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This event is only raised if the message pump is running. In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised. For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <a class=\"xref\" href=\"microsoft.win32.systemevents\" data-linktype=\"relative-path\">SystemEvents</a> class.  </p>\n</div>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_Win32_SystemEvents_PaletteChanged\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PaletteChanged</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the user switches to an application that uses a different palette.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static event EventHandler PaletteChanged;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.externalexception\" data-linktype=\"relative-path\">ExternalException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The attempt to create a system events window thread did not succeed.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> This event is only raised if the message pump is running. In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised. For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <a class=\"xref\" href=\"microsoft.win32.systemevents\" data-linktype=\"relative-path\">SystemEvents</a> class.  </p>\n</div>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_Win32_SystemEvents_PowerModeChanged\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PowerModeChanged</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the user suspends or resumes the system.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static event Microsoft.Win32.PowerModeChangedEventHandler PowerModeChanged;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.externalexception\" data-linktype=\"relative-path\">ExternalException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The attempt to create a system events window thread did not succeed.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> This event is only raised if the message pump is running. In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised. For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <a class=\"xref\" href=\"microsoft.win32.systemevents\" data-linktype=\"relative-path\">SystemEvents</a> class.  </p>\n</div>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_Win32_SystemEvents_SessionEnded\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SessionEnded</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the user is logging off or shutting down the system.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static event Microsoft.Win32.SessionEndedEventHandler SessionEnded;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.externalexception\" data-linktype=\"relative-path\">ExternalException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The attempt to create a system events window thread did not succeed.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> This event is only raised if the message pump is running. In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised. For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <a class=\"xref\" href=\"microsoft.win32.systemevents\" data-linktype=\"relative-path\">SystemEvents</a> class.  </p>\n</div>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_Win32_SystemEvents_SessionEnding\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SessionEnding</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the user is trying to log off or shut down the system.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static event Microsoft.Win32.SessionEndingEventHandler SessionEnding;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.externalexception\" data-linktype=\"relative-path\">ExternalException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The attempt to create a system events window thread did not succeed.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This is a cancelable event. Setting the <a class=\"xref\" href=\"microsoft.win32.sessionendingeventargs#Microsoft_Win32_SessionEndingEventArgs_Cancel_\" data-linktype=\"relative-path\">Cancel</a> property to <code>true</code> will request that the session continues to run. It provides no guarantee that the session will not end.  </p>\n<p> If you are using SessionEnding in a Windows form to detect a system logoff or reboot, there is no deterministic way to decide whether the <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_Closing\" data-linktype=\"relative-path\">Closing</a> event will fire before this event.  </p>\n<p> If you want to perform some special tasks before <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_Closing\" data-linktype=\"relative-path\">Closing</a> is fired, you need to ensure that SessionEnding fires before <a class=\"xref\" href=\"system.windows.forms.form#System_Windows_Forms_Form_Closing\" data-linktype=\"relative-path\">Closing</a>. To do this, you need to trap the <code>WM_QUERYENDSESSION</code> in the form by overriding the <code>WndProc</code> function.  This example demonstrates how to do this.  </p>\n<pre><code class=\"lang-vb#\">Private Shared WM_QUERYENDSESSION As Integer = &amp;H11  \n Private Shared systemShutdown As Boolean = False  \n Protected Overrides Sub WndProc(ByRef m As System.Windows.Forms.Message)  \n     If m.Msg = WM_QUERYENDSESSION Then  \n         MessageBox.Show(&quot;queryendsession: this is a logoff, shutdown, or reboot&quot;)  \n         systemShutdown = True  \n     End If  \n     &#39; If this is WM_QUERYENDSESSION, the closing event should be raised in the base WndProc.  \n     MyBase.WndProc(m)  \n End Sub &#39;WndProc   \n Private Sub Form1_Closing(ByVal sender As System.Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles MyBase.Closing  \n     If (systemShutdown) Then  \n     &#39; Reset the variable because the user might cancel the shutdown.  \n         systemShutdown = False  \n         If (System.Windows.Forms.DialogResult.Yes = _  \n                 MessageBox.Show(&quot;My application&quot;, &quot;Do you want to save your work before logging off?&quot;, MessageBoxButtons.YesNo)) Then  \n                 e.Cancel = True  \n         Else  \n                 e.Cancel = False  \n         End If  \n     End If  \n End Sub  \n</code></pre><pre><code class=\"lang-c#\">private static int WM_QUERYENDSESSION = 0x11;  \nprivate static bool systemShutdown = false;  \nprotected override void WndProc(ref System.Windows.Forms.Message m)  \n{  \n    if (m.Msg==WM_QUERYENDSESSION)  \n    {  \n        MessageBox.Show(&quot;queryendsession: this is a logoff, shutdown, or reboot&quot;);  \n        systemShutdown = true;  \n    }  \n\n    // If this is WM_QUERYENDSESSION, the closing event should be  \n    // raised in the base WndProc.  \n    base.WndProc(ref m);  \n\n} //WndProc   \n\nprivate void Form1_Closing(  \n    System.Object sender,   \n    System.ComponentModel.CancelEventArgs e)  \n{  \n    if (systemShutdown)  \n        // Reset the variable because the user might cancel the   \n        // shutdown.  \n    {  \n        systemShutdown = false;  \n        if (DialogResult.Yes==MessageBox.Show(&quot;My application&quot;,   \n            &quot;Do you want to save your work before logging off?&quot;,   \n            MessageBoxButtons.YesNo))  \n        {  \n            e.Cancel = true;  \n        }  \n        else  \n        {  \n            e.Cancel = false;  \n        }  \n    }  \n}  \n</code></pre><div class=\"IMPORTANT\"><h5>Important</h5><p> Console applications do not raise the SessionEnding event.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> This event is only raised if the message pump is running. In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised. For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <a class=\"xref\" href=\"microsoft.win32.systemevents\" data-linktype=\"relative-path\">SystemEvents</a> class.  </p>\n</div>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_Win32_SystemEvents_SessionSwitch\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SessionSwitch</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the currently logged-in user has changed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static event Microsoft.Win32.SessionSwitchEventHandler SessionSwitch;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.externalexception\" data-linktype=\"relative-path\">ExternalException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The attempt to create a system events window thread did not succeed.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> This event is only raised if the message pump is running. In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised. For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <a class=\"xref\" href=\"microsoft.win32.systemevents\" data-linktype=\"relative-path\">SystemEvents</a> class.  </p>\n</div>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_Win32_SystemEvents_TimeChanged\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TimeChanged</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the user changes the time on the system clock.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static event EventHandler TimeChanged;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.externalexception\" data-linktype=\"relative-path\">ExternalException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The attempt to create a system events window thread did not succeed.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> This event is only raised if the message pump is running. In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised. For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <a class=\"xref\" href=\"microsoft.win32.systemevents\" data-linktype=\"relative-path\">SystemEvents</a> class.  </p>\n</div>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_Win32_SystemEvents_TimerElapsed\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TimerElapsed</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when a windows timer interval has expired.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static event Microsoft.Win32.TimerElapsedEventHandler TimerElapsed;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.externalexception\" data-linktype=\"relative-path\">ExternalException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The attempt to create a system events window thread did not succeed.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> This event is only raised if the message pump is running. In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised. For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <a class=\"xref\" href=\"microsoft.win32.systemevents\" data-linktype=\"relative-path\">SystemEvents</a> class.  </p>\n</div>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_Win32_SystemEvents_UserPreferenceChanged\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">UserPreferenceChanged</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when a user preference has changed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static event Microsoft.Win32.UserPreferenceChangedEventHandler UserPreferenceChanged;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.externalexception\" data-linktype=\"relative-path\">ExternalException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The attempt to create a system events window thread did not succeed.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> This event is only raised if the message pump is running. In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised. For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <a class=\"xref\" href=\"microsoft.win32.systemevents\" data-linktype=\"relative-path\">SystemEvents</a> class.  </p>\n</div>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_Win32_SystemEvents_UserPreferenceChanging\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">UserPreferenceChanging</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when a user preference is changing.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static event Microsoft.Win32.UserPreferenceChangingEventHandler UserPreferenceChanging;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>System event notifications are not supported under the current context. Server processes, for example, might not support global system event notifications.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.externalexception\" data-linktype=\"relative-path\">ExternalException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The attempt to create a system events window thread did not succeed.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> This event is only raised if the message pump is running. In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised. For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <a class=\"xref\" href=\"microsoft.win32.systemevents\" data-linktype=\"relative-path\">SystemEvents</a> class.  </p>\n</div>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/Microsoft.Win32.SystemEvents.yml\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.CreateTimer\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.DisplaySettingsChanged\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.add_DisplaySettingsChanged\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.remove_DisplaySettingsChanged\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.DisplaySettingsChanging\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.add_DisplaySettingsChanging\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.remove_DisplaySettingsChanging\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.EventsThreadShutdown\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.add_EventsThreadShutdown\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.remove_EventsThreadShutdown\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.InstalledFontsChanged\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.add_InstalledFontsChanged\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.remove_InstalledFontsChanged\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.InvokeOnEventsThread\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.KillTimer\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.LowMemory\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.add_LowMemory\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.remove_LowMemory\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.PaletteChanged\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.add_PaletteChanged\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.remove_PaletteChanged\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.PowerModeChanged\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.add_PowerModeChanged\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.remove_PowerModeChanged\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.SessionEnded\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.add_SessionEnded\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.remove_SessionEnded\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.SessionEnding\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.add_SessionEnding\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.remove_SessionEnding\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.SessionSwitch\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.add_SessionSwitch\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.remove_SessionSwitch\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.TimeChanged\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.add_TimeChanged\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.remove_TimeChanged\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.TimerElapsed\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.add_TimerElapsed\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.remove_TimerElapsed\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.UserPreferenceChanged\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.add_UserPreferenceChanged\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.remove_UserPreferenceChanged\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.UserPreferenceChanging\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.add_UserPreferenceChanging\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SystemEvents.remove_UserPreferenceChanging\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"d2b58866-a8b3-3d9e-6639-99cea73b900d\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides access to system event notifications. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/microsoft.win32/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"Microsoft.Win32.SystemEvents\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/Microsoft.Win32.SystemEvents.yml","open_to_public_contributors":false,"api_name":["Microsoft.Win32.SystemEvents","Microsoft.Win32.SystemEvents.CreateTimer","Microsoft.Win32.SystemEvents.DisplaySettingsChanged","Microsoft.Win32.SystemEvents.add_DisplaySettingsChanged","Microsoft.Win32.SystemEvents.remove_DisplaySettingsChanged","Microsoft.Win32.SystemEvents.DisplaySettingsChanging","Microsoft.Win32.SystemEvents.add_DisplaySettingsChanging","Microsoft.Win32.SystemEvents.remove_DisplaySettingsChanging","Microsoft.Win32.SystemEvents.EventsThreadShutdown","Microsoft.Win32.SystemEvents.add_EventsThreadShutdown","Microsoft.Win32.SystemEvents.remove_EventsThreadShutdown","Microsoft.Win32.SystemEvents.InstalledFontsChanged","Microsoft.Win32.SystemEvents.add_InstalledFontsChanged","Microsoft.Win32.SystemEvents.remove_InstalledFontsChanged","Microsoft.Win32.SystemEvents.InvokeOnEventsThread","Microsoft.Win32.SystemEvents.KillTimer","Microsoft.Win32.SystemEvents.LowMemory","Microsoft.Win32.SystemEvents.add_LowMemory","Microsoft.Win32.SystemEvents.remove_LowMemory","Microsoft.Win32.SystemEvents.PaletteChanged","Microsoft.Win32.SystemEvents.add_PaletteChanged","Microsoft.Win32.SystemEvents.remove_PaletteChanged","Microsoft.Win32.SystemEvents.PowerModeChanged","Microsoft.Win32.SystemEvents.add_PowerModeChanged","Microsoft.Win32.SystemEvents.remove_PowerModeChanged","Microsoft.Win32.SystemEvents.SessionEnded","Microsoft.Win32.SystemEvents.add_SessionEnded","Microsoft.Win32.SystemEvents.remove_SessionEnded","Microsoft.Win32.SystemEvents.SessionEnding","Microsoft.Win32.SystemEvents.add_SessionEnding","Microsoft.Win32.SystemEvents.remove_SessionEnding","Microsoft.Win32.SystemEvents.SessionSwitch","Microsoft.Win32.SystemEvents.add_SessionSwitch","Microsoft.Win32.SystemEvents.remove_SessionSwitch","Microsoft.Win32.SystemEvents.TimeChanged","Microsoft.Win32.SystemEvents.add_TimeChanged","Microsoft.Win32.SystemEvents.remove_TimeChanged","Microsoft.Win32.SystemEvents.TimerElapsed","Microsoft.Win32.SystemEvents.add_TimerElapsed","Microsoft.Win32.SystemEvents.remove_TimerElapsed","Microsoft.Win32.SystemEvents.UserPreferenceChanged","Microsoft.Win32.SystemEvents.add_UserPreferenceChanged","Microsoft.Win32.SystemEvents.remove_UserPreferenceChanged","Microsoft.Win32.SystemEvents.UserPreferenceChanging","Microsoft.Win32.SystemEvents.add_UserPreferenceChanging","Microsoft.Win32.SystemEvents.remove_UserPreferenceChanging"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["Microsoft.Win32.SystemEvents","Microsoft::Win32::SystemEvents","Microsoft.Win32.SystemEvents.CreateTimer","Microsoft::Win32::SystemEvents::CreateTimer","Microsoft.Win32.SystemEvents.DisplaySettingsChanged","Microsoft::Win32::SystemEvents::DisplaySettingsChanged","Microsoft.Win32.SystemEvents.DisplaySettingsChanging","Microsoft::Win32::SystemEvents::DisplaySettingsChanging","Microsoft.Win32.SystemEvents.EventsThreadShutdown","Microsoft::Win32::SystemEvents::EventsThreadShutdown","Microsoft.Win32.SystemEvents.InstalledFontsChanged","Microsoft::Win32::SystemEvents::InstalledFontsChanged","Microsoft.Win32.SystemEvents.InvokeOnEventsThread","Microsoft::Win32::SystemEvents::InvokeOnEventsThread","Microsoft.Win32.SystemEvents.KillTimer","Microsoft::Win32::SystemEvents::KillTimer","Microsoft.Win32.SystemEvents.LowMemory","Microsoft::Win32::SystemEvents::LowMemory","Microsoft.Win32.SystemEvents.PaletteChanged","Microsoft::Win32::SystemEvents::PaletteChanged","Microsoft.Win32.SystemEvents.PowerModeChanged","Microsoft::Win32::SystemEvents::PowerModeChanged","Microsoft.Win32.SystemEvents.SessionEnded","Microsoft::Win32::SystemEvents::SessionEnded","Microsoft.Win32.SystemEvents.SessionEnding","Microsoft::Win32::SystemEvents::SessionEnding","Microsoft.Win32.SystemEvents.SessionSwitch","Microsoft::Win32::SystemEvents::SessionSwitch","Microsoft.Win32.SystemEvents.TimeChanged","Microsoft::Win32::SystemEvents::TimeChanged","Microsoft.Win32.SystemEvents.TimerElapsed","Microsoft::Win32::SystemEvents::TimerElapsed","Microsoft.Win32.SystemEvents.UserPreferenceChanged","Microsoft::Win32::SystemEvents::UserPreferenceChanged","Microsoft.Win32.SystemEvents.UserPreferenceChanging","Microsoft::Win32::SystemEvents::UserPreferenceChanging"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"d2b58866-a8b3-3d9e-6639-99cea73b900d","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32/SystemEvents.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SystemEvents class | Microsoft Docs","_op_ogTitle":"SystemEvents class","description":"Provides access to system event notifications. This class cannot be inherited.\n","toc_asset_id":"api/_splitted/Microsoft.Win32/toc.json","toc_rel":"_splitted/Microsoft.Win32/toc.json","source_url":"","ms.assetid":"Microsoft.Win32.SystemEvents","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/microsoft.win32.systemevents","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/microsoft.win32.systemevents","fileRelativePath":"api/Microsoft.Win32.SystemEvents.html"},"themesRelativePathToOutputRoot":"_themes/"}