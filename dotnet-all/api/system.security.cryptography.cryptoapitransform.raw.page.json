{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">CryptoAPITransform</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Performs a cryptographic transformation of data. This class cannot be inherited.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class CryptoAPITransform : System.Security.Cryptography.ICryptoTransform</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">CryptoAPITransform</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates how to use members of the CryptoAPITransform class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.CryptoAPITransform#1\">using System;\nusing System.Security.Cryptography;\nusing System.Collections;\nusing System.Text;\n\nclass Members\n{\n    // Use a public service provider for encryption and decryption.\n    static DESCryptoServiceProvider des = new DESCryptoServiceProvider();\n\n    [STAThread]\n    static void Main(string[] args)\n    {\n        string message = &quot;012345678901234567890&quot;;\n        byte[] sourceBytes = Encoding.ASCII.GetBytes(message);\n        Console.WriteLine(&quot;** Phrase to be encoded: &quot; + message);\n\n        byte[] encodedBytes = EncodeBytes(sourceBytes);\n        Console.WriteLine(&quot;** Phrase after encoding: &quot; +\n            Encoding.ASCII.GetString(encodedBytes));\n\n        byte[] decodedBytes = DecodeBytes(encodedBytes);\n        Console.WriteLine(&quot;** Phrase after decoding: &quot; +\n            Encoding.ASCII.GetString(decodedBytes));\n\n        Console.WriteLine(&quot;Sample ended successfully; &quot; +\n            &quot;press Enter to continue.&quot;);\n        Console.ReadLine();\n    }\n\n    // Encode the specified byte array by using CryptoAPITranform.\n    private static byte[] EncodeBytes(byte[] sourceBytes)\n    {\n        int currentPosition = 0;\n        byte[] targetBytes = new byte[1024];\n        int sourceByteLength = sourceBytes.Length;\n\n        // Create a DES encryptor from this instance to perform encryption.\n        CryptoAPITransform cryptoTransform =\n            (CryptoAPITransform)des.CreateEncryptor();\n\n        // Retrieve the block size to read the bytes.\n        int inputBlockSize = cryptoTransform.InputBlockSize;\n\n        // Retrieve the key handle.\n        IntPtr keyHandle = cryptoTransform.KeyHandle;\n\n        // Retrieve the block size to write the bytes.\n        int outputBlockSize = cryptoTransform.OutputBlockSize;\n\n        try\n        {\n            // Determine if multiple blocks can be transformed.\n            if (cryptoTransform.CanTransformMultipleBlocks)\n            {\n                int numBytesRead = 0;\n                while (sourceByteLength - currentPosition &gt;= inputBlockSize)\n                {\n                    // Transform the bytes from currentPosition in the\n                    // sourceBytes array, writing the bytes to the targetBytes\n                    // array.\n                    numBytesRead = cryptoTransform.TransformBlock(\n                        sourceBytes,\n                        currentPosition,\n                        inputBlockSize,\n                        targetBytes,\n                        currentPosition);\n\n                    // Advance the current position in the sourceBytes array.\n                    currentPosition += numBytesRead;\n                }\n\n                // Transform the final block of bytes.\n                byte[] finalBytes = cryptoTransform.TransformFinalBlock(\n                    sourceBytes,\n                    currentPosition,\n                    sourceByteLength - currentPosition);\n\n                // Copy the contents of the finalBytes array to the\n                // targetBytes array.\n                finalBytes.CopyTo(targetBytes, currentPosition);\n            }\n\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(&quot;Caught unexpected exception:&quot; + ex.ToString());\n        }\n\n        // Determine if the current transform can be reused.\n        if (!cryptoTransform.CanReuseTransform)\n        {\n            // Free up any used resources.\n            cryptoTransform.Clear();\n        }\n\n        // Trim the extra bytes in the array that were not used.\n        return TrimArray(targetBytes);\n    }\n\n    // Decode the specified byte array using CryptoAPITranform.\n    private static byte[] DecodeBytes(byte[] sourceBytes)\n    {\n        byte[] targetBytes = new byte[1024];\n        int currentPosition = 0;\n\n        // Create a DES decryptor from this instance to perform decryption.\n        CryptoAPITransform cryptoTransform =\n            (CryptoAPITransform)des.CreateDecryptor();\n\n        int inputBlockSize = cryptoTransform.InputBlockSize;\n        int sourceByteLength = sourceBytes.Length;\n\n        try\n        {\n            int numBytesRead = 0;\n            while (sourceByteLength - currentPosition &gt;= inputBlockSize)\n            {\n                // Transform the bytes from current position in the \n                // sourceBytes array, writing the bytes to the targetBytes\n                // array.\n                numBytesRead = cryptoTransform.TransformBlock(\n                    sourceBytes,\n                    currentPosition,\n                    inputBlockSize,\n                    targetBytes,\n                    currentPosition);\n\n                // Advance the current position in the source array.\n                currentPosition += numBytesRead;\n            }\n\n            // Transform the final block of bytes.\n            byte[] finalBytes = cryptoTransform.TransformFinalBlock(\n                sourceBytes,\n                currentPosition,\n                sourceByteLength - currentPosition);\n\n            // Copy the contents of the finalBytes array to the targetBytes\n            // array.\n            finalBytes.CopyTo(targetBytes, currentPosition);\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(&quot;Caught unexpected exception:&quot; + ex.ToString());\n        }\n\n        // Strip out the second block of bytes.\n        Array.Copy(targetBytes, (inputBlockSize * 2), targetBytes, inputBlockSize, targetBytes.Length - (inputBlockSize * 2));\n\n        // Trim the extra bytes in the array that were not used.\n        return TrimArray(targetBytes);\n    }\n\n    // Resize the dimensions of the array to a size that contains only valid\n    // bytes.\n    private static byte[] TrimArray(byte[] targetArray)\n    {\n        IEnumerator enum1 = targetArray.GetEnumerator();\n        int i = 0;\n\n        while (enum1.MoveNext())\n        {\n            if (enum1.Current.ToString().Equals(&quot;0&quot;))\n            {\n                break;\n            }\n            i++;\n        }\n\n        // Create a new array with the number of valid bytes.\n        byte[] returnedArray = new byte[i];\n        for (int j = 0; j &lt; i; j++)\n        {\n            returnedArray[j] = targetArray[j];\n        }\n\n        return returnedArray;\n    }\n}\n//\n// This sample produces the following output:\n//\n// ** Phrase to be encoded: 012345678901234567890\n// ** Phrase after encoding: AIGC(+b7X?^djAU?15ve?o\n// ** Phrase after decoding: 012345678901234567890\n// Sample ended successfully; press Enter to continue.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.CryptoAPITransform#1\">Imports System\nImports System.Security.Cryptography\nImports System.Collections\nImports System.Text\n\nPublic Class Form1\n    Inherits System.Windows.Forms.Form\n\n    &#39; Use a public service provider for encryption and decryption.\n    Dim desCSP As New DESCryptoServiceProvider\n\n    &#39; Event handler for Run button.\n    Private Sub Button1_Click( _\n        ByVal sender As System.Object, _\n        ByVal e As System.EventArgs) Handles Button1.Click\n\n        tbxOutput.Cursor = Cursors.WaitCursor\n        tbxOutput.Text = &quot;&quot;\n\n        Dim message As String = &quot;01234567890123456789&quot;\n        Dim sourceBytes() As Byte = Encoding.ASCII.GetBytes(message)\n        tbxOutput.AppendText(&quot;** Phrase to be encoded: &quot; + message + vbCrLf)\n\n        Dim encodedBytes() As Byte = EncodeBytes(sourceBytes)\n        tbxOutput.AppendText(&quot;** Phrase after encoding: &quot; + _\n            Encoding.ASCII.GetString(encodedBytes) + vbCrLf)\n\n        Dim decodedBytes() As Byte = DecodeBytes(encodedBytes)\n        tbxOutput.AppendText(&quot;** Phrase after decoding: &quot; + _\n            Encoding.ASCII.GetString(decodedBytes) + vbCrLf)\n\n        tbxOutput.AppendText(vbCrLf + &quot;Sample ended successfully; &quot; + _\n            &quot;press Enter to continue.&quot;)\n        tbxOutput.Cursor = Cursors.Default\n    End Sub\n\n    &#39; Encode the specified byte array by using CryptoAPITranform.\n    Private Function EncodeBytes(ByVal sourceBytes() As Byte) As Byte()\n        Dim currentPosition As Int16 = 0\n        Dim targetBytes(1024) As Byte\n        Dim sourceByteLength As Integer = sourceBytes.Length\n\n        &#39; Create a DES encryptor from this instance to perform encryption.\n        Dim cryptoTransform As CryptoAPITransform\n        cryptoTransform = CType(desCSP.CreateEncryptor(), CryptoAPITransform)\n\n        &#39; Retrieve the block size to read the bytes.\n        Dim inputBlockSize As Integer = cryptoTransform.InputBlockSize\n\n        &#39; Retrieve the key handle.\n        Dim keyHandle As IntPtr = cryptoTransform.KeyHandle\n\n        &#39; Retrieve the block size to write the bytes.\n        Dim outputBlockSize As Integer = cryptoTransform.OutputBlockSize\n\n        Try\n            &#39; Determine if multiple blocks can be transformed.\n            If (cryptoTransform.CanTransformMultipleBlocks) Then\n                Dim numBytesRead As Int16 = 0\n                While (sourceByteLength - currentPosition &gt;= inputBlockSize)\n                    &#39; Transform the bytes from currentposition in the \n                    &#39; sourceBytes array, writing the bytes to the targetBytes\n                    &#39; array.\n                    numBytesRead = cryptoTransform.TransformBlock( _\n                        sourceBytes, _\n                        currentPosition, _\n                        inputBlockSize, _\n                        targetBytes, _\n                        currentPosition)\n\n                    &#39; Advance the current position in the sourceBytes array.\n                    currentPosition += numBytesRead\n                End While\n\n                &#39; Transform the final block of bytes.\n                Dim finalBytes() As Byte\n                finalBytes = cryptoTransform.TransformFinalBlock( _\n                    sourceBytes, _\n                    currentPosition, _\n                    sourceByteLength - currentPosition)\n\n                &#39; Copy the contents of the finalBytes array to the targetBytes\n                &#39; array.\n                finalBytes.CopyTo(targetBytes, currentPosition)\n            End If\n\n        Catch ex As Exception\n            tbxOutput.AppendText(&quot;Caught unexpected exception:&quot; + _\n                ex.ToString() + vbCrLf)\n\n        End Try\n\n        &#39; Determine if the current transform can be reused.\n        If (Not cryptoTransform.CanReuseTransform) Then\n\n            &#39; Free up any used resources.\n            cryptoTransform.Clear()\n        End If\n\n        &#39; Trim the extra bytes in the array that were not used.\n        Return TrimArray(targetBytes)\n    End Function\n\n    &#39; Decode the specified byte array using CryptoAPITranform.\n    Private Function DecodeBytes(ByVal sourceBytes() As Byte) As Byte()\n\n        Dim currentPosition As Int16 = 0\n        Dim targetBytes(1024) As Byte\n        Dim sourceByteLength As Integer = sourceBytes.Length\n\n        &#39; Create a DES decryptor from this instance to perform decryption.\n        Dim cryptoTransform As CryptoAPITransform\n        cryptoTransform = CType(desCSP.CreateDecryptor(), CryptoAPITransform)\n\n        Dim inputBlockSize As Integer = cryptoTransform.InputBlockSize\n\n        Try\n            &#39; Determine if multiple blocks can be transformed.\n            If (cryptoTransform.CanTransformMultipleBlocks) Then\n\n                Dim numBytesRead As Int16 = 0\n                While (sourceByteLength - currentPosition &gt;= inputBlockSize)\n\n                    &#39; Transform the bytes from currentPosition in the\n                    &#39; sourceBytes array, writing the bytes to the targetBytes\n                    &#39; array.\n                    numBytesRead = cryptoTransform.TransformBlock( _\n                        sourceBytes, _\n                        currentPosition, _\n                        inputBlockSize, _\n                        targetBytes, _\n                        currentPosition)\n\n                    &#39; Advance the current position in the source array.\n                    currentPosition += numBytesRead\n                End While\n\n                &#39; Transform the final block of bytes.\n                Dim finalBytes() As Byte\n                finalBytes = cryptoTransform.TransformFinalBlock( _\n                    sourceBytes, _\n                    currentPosition, _\n                    sourceByteLength - currentPosition)\n\n                &#39; Copy the contents of the finalBytes array to the targetBytes\n                &#39; array.\n                finalBytes.CopyTo(targetBytes, currentPosition)\n            End If\n\n        Catch ex As Exception\n            tbxOutput.AppendText(&quot;Caught unexpected exception:&quot; + _\n                ex.ToString() + vbCrLf)\n\n        End Try\n\n        &#39; Strip out the second block of bytes.\n        Array.Copy(targetBytes, (inputBlockSize * 2), targetBytes, inputBlockSize, targetBytes.Length - (inputBlockSize * 2))\n\n        &#39; Trim the extra bytes in the array that were not used.\n        Return TrimArray(targetBytes)\n    End Function\n\n    &#39; Resize the dimensions of the array to a size that contains only valid\n    &#39; bytes.\n    Private Function TrimArray(ByVal targetArray() As Byte) As Byte()\n\n        Dim enum1 As IEnumerator = targetArray.GetEnumerator()\n        Dim i As Int16 = 0\n\n        While (enum1.MoveNext())\n            If (enum1.Current.ToString().Equals(&quot;0&quot;)) Then\n                Exit While\n            End If\n\n            i += 1\n        End While\n\n        &#39; Create a new array with the number of valid bytes.\n        Dim returnedArray(i - 1) As Byte\n        For j As Int16 = 0 To i - 1 Step 1\n            returnedArray(j) = targetArray(j)\n        Next\n\n        Return returnedArray\n    End Function\n\n\n    &#39; Event handler for Exit button.\n    Private Sub Button2_Click( _\n        ByVal sender As System.Object, _\n        ByVal e As System.EventArgs) Handles Button2.Click\n\n        Application.Exit()\n    End Sub\n#Region &quot; Windows Form Designer generated code &quot;\n\n    Public Sub New()\n        MyBase.New()\n\n        &#39;This call is required by the Windows Form Designer.\n        InitializeComponent()\n\n        &#39;Add any initialization after the InitializeComponent() call\n\n    End Sub\n\n    &#39;Form overrides dispose to clean up the component list.\n    Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)\n        If disposing Then\n            If Not (components Is Nothing) Then\n                components.Dispose()\n            End If\n        End If\n        MyBase.Dispose(disposing)\n    End Sub\n\n    &#39;Required by the Windows Form Designer\n    Private components As System.ComponentModel.IContainer\n\n    &#39;NOTE: The following procedure is required by the Windows Form Designer\n    &#39;It can be modified using the Windows Form Designer.  \n    &#39;Do not modify it using the code editor.\n    Friend WithEvents Panel2 As System.Windows.Forms.Panel\n    Friend WithEvents Panel1 As System.Windows.Forms.Panel\n    Friend WithEvents Button1 As System.Windows.Forms.Button\n    Friend WithEvents Button2 As System.Windows.Forms.Button\n    Friend WithEvents tbxOutput As System.Windows.Forms.RichTextBox\n    &lt;System.Diagnostics.DebuggerStepThrough()&gt; _\n    Private Sub InitializeComponent()\n        Me.Panel2 = New System.Windows.Forms.Panel\n        Me.Button1 = New System.Windows.Forms.Button\n        Me.Button2 = New System.Windows.Forms.Button\n        Me.Panel1 = New System.Windows.Forms.Panel\n        Me.tbxOutput = New System.Windows.Forms.RichTextBox\n        Me.Panel2.SuspendLayout()\n        Me.Panel1.SuspendLayout()\n        Me.SuspendLayout()\n        &#39;\n        &#39;Panel2\n        &#39;\n        Me.Panel2.Controls.Add(Me.Button1)\n        Me.Panel2.Controls.Add(Me.Button2)\n        Me.Panel2.Dock = System.Windows.Forms.DockStyle.Bottom\n        Me.Panel2.DockPadding.All = 20\n        Me.Panel2.Location = New System.Drawing.Point(0, 320)\n        Me.Panel2.Name = &quot;Panel2&quot;\n        Me.Panel2.Size = New System.Drawing.Size(616, 64)\n        Me.Panel2.TabIndex = 1\n        &#39;\n        &#39;Button1\n        &#39;\n        Me.Button1.Dock = System.Windows.Forms.DockStyle.Right\n        Me.Button1.Font = New System.Drawing.Font( _\n            &quot;Microsoft Sans Serif&quot;, _\n            9.0!, _\n            System.Drawing.FontStyle.Regular, _\n            System.Drawing.GraphicsUnit.Point, _\n            CType(0, Byte))\n        Me.Button1.Location = New System.Drawing.Point(446, 20)\n        Me.Button1.Name = &quot;Button1&quot;\n        Me.Button1.Size = New System.Drawing.Size(75, 24)\n        Me.Button1.TabIndex = 2\n        Me.Button1.Text = &quot;&amp;Run&quot;\n        &#39;\n        &#39;Button2\n        &#39;\n        Me.Button2.Dock = System.Windows.Forms.DockStyle.Right\n        Me.Button2.Font = New System.Drawing.Font( _\n            &quot;Microsoft Sans Serif&quot;, _\n            9.0!, _\n            System.Drawing.FontStyle.Regular, _\n            System.Drawing.GraphicsUnit.Point, _\n            CType(0, Byte))\n        Me.Button2.Location = New System.Drawing.Point(521, 20)\n        Me.Button2.Name = &quot;Button2&quot;\n        Me.Button2.Size = New System.Drawing.Size(75, 24)\n        Me.Button2.TabIndex = 3\n        Me.Button2.Text = &quot;E&amp;xit&quot;\n        &#39;\n        &#39;Panel1\n        &#39;\n        Me.Panel1.Controls.Add(Me.tbxOutput)\n        Me.Panel1.Dock = System.Windows.Forms.DockStyle.Fill\n        Me.Panel1.DockPadding.All = 20\n        Me.Panel1.Location = New System.Drawing.Point(0, 0)\n        Me.Panel1.Name = &quot;Panel1&quot;\n        Me.Panel1.Size = New System.Drawing.Size(616, 320)\n        Me.Panel1.TabIndex = 2\n        &#39;\n        &#39;tbxOutput\n        &#39;\n        Me.tbxOutput.AccessibleDescription = _\n            &quot;Displays output from application.&quot;\n        Me.tbxOutput.AccessibleName = &quot;Output textbox.&quot;\n        Me.tbxOutput.Dock = System.Windows.Forms.DockStyle.Fill\n        Me.tbxOutput.Location = New System.Drawing.Point(20, 20)\n        Me.tbxOutput.Name = &quot;tbxOutput&quot;\n        Me.tbxOutput.Size = New System.Drawing.Size(576, 280)\n        Me.tbxOutput.TabIndex = 1\n        Me.tbxOutput.Text = &quot;Click the Run button to run the application.&quot;\n        &#39;\n        &#39;Form1\n        &#39;\n        Me.AutoScaleBaseSize = New System.Drawing.Size(6, 15)\n        Me.ClientSize = New System.Drawing.Size(616, 384)\n        Me.Controls.Add(Me.Panel1)\n        Me.Controls.Add(Me.Panel2)\n        Me.Name = &quot;Form1&quot;\n        Me.Text = &quot;CryptoAPITransform&quot;\n        Me.Panel2.ResumeLayout(False)\n        Me.Panel1.ResumeLayout(False)\n        Me.ResumeLayout(False)\n\n    End Sub\n\n#End Region\nEnd Class\n&#39;\n&#39; This sample produces the following output:\n&#39;\n&#39; ** Phrase to be encoded: 01234567890123456789\n&#39; ** Phrase after encoding: Eaa0$\\iv\\oXgS\n&#39; ** Phrase after decoding: 01234567890123456789\n&#39; \n&#39; Sample ended successfully; press Enter to continue.\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.CryptoAPITransform#1\">using namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Collections;\nusing namespace System::Text;\n\nref class Members\n{\nprivate:\n\n   // Use a public service provider for encryption and decryption.\n   static DESCryptoServiceProvider^ des = gcnew DESCryptoServiceProvider;\n\npublic:\n   [STAThread]\n   static void Main()\n   {\n      String^ message = L&quot;012345678901234567890&quot;;\n      array&lt;Byte&gt;^sourceBytes = Encoding::ASCII-&gt;GetBytes( message );\n      Console::WriteLine( L&quot;** Phrase to be encoded: {0}&quot;, message );\n      array&lt;Byte&gt;^encodedBytes = EncodeBytes( sourceBytes );\n      Console::WriteLine( L&quot;** Phrase after encoding: {0}&quot;,\n         Encoding::ASCII-&gt;GetString( encodedBytes ) );\n      array&lt;Byte&gt;^decodedBytes = DecodeBytes( encodedBytes );\n      Console::WriteLine( L&quot;** Phrase after decoding: {0}&quot;,\n         Encoding::ASCII-&gt;GetString( decodedBytes ) );\n      Console::WriteLine( L&quot;Sample ended successfully; &quot;\n      L&quot;press Enter to continue.&quot; );\n      Console::ReadLine();\n   }\n\nprivate:\n   // Encode the specified byte array by using CryptoAPITranform.\n   static array&lt;Byte&gt;^ EncodeBytes( array&lt;Byte&gt;^sourceBytes )\n   {\n      int currentPosition = 0;\n      array&lt;Byte&gt;^targetBytes = gcnew array&lt;Byte&gt;(1024);\n      int sourceByteLength = sourceBytes-&gt;Length;\n      \n      // Create a DES encryptor from this instance to perform encryption.\n      CryptoAPITransform^ cryptoTransform =\n         static_cast&lt;CryptoAPITransform^&gt;(des-&gt;CreateEncryptor());\n      \n      // Retrieve the block size to read the bytes.\n      int inputBlockSize = cryptoTransform-&gt;InputBlockSize;\n\n      // Retrieve the key handle.\n      IntPtr keyHandle = cryptoTransform-&gt;KeyHandle;\n\n      // Retrieve the block size to write the bytes.\n      int outputBlockSize = cryptoTransform-&gt;OutputBlockSize;\n\n      try\n      {\n         // Determine if multiple blocks can be transformed.\n         if ( cryptoTransform-&gt;CanTransformMultipleBlocks )\n         {\n            int numBytesRead = 0;\n            while ( sourceByteLength - currentPosition &gt;= inputBlockSize )\n            {\n               // Transform the bytes from currentPosition in the\n               // sourceBytes array, writing the bytes to the targetBytes\n               // array.\n               numBytesRead = cryptoTransform-&gt;TransformBlock(\n                  sourceBytes, currentPosition, inputBlockSize,\n                  targetBytes, currentPosition );\n               // Advance the current position in the sourceBytes array.\n               currentPosition += numBytesRead;\n            }\n            \n            // Transform the final block of bytes.\n            array&lt;Byte&gt;^finalBytes = cryptoTransform-&gt;TransformFinalBlock(\n               sourceBytes, currentPosition, sourceByteLength - currentPosition );\n\n            // Copy the contents of the finalBytes array to the\n            // targetBytes array.\n            finalBytes-&gt;CopyTo( targetBytes, currentPosition );\n         }\n      }\n      catch ( Exception^ ex ) \n      {\n         Console::WriteLine( L&quot;Caught unexpected exception:{0}&quot;, ex );\n      }\n      \n      // Determine if the current transform can be reused.\n      if (  !cryptoTransform-&gt;CanReuseTransform )\n      {\n         // Free up any used resources.\n         cryptoTransform-&gt;Clear();\n      }\n\n      // Trim the extra bytes in the array that were not used.\n      return TrimArray( targetBytes );\n   }\n\n   // Decode the specified byte array using CryptoAPITranform.\n   static array&lt;Byte&gt;^ DecodeBytes( array&lt;Byte&gt;^sourceBytes )\n   {\n      array&lt;Byte&gt;^targetBytes = gcnew array&lt;Byte&gt;(1024);\n      int currentPosition = 0;\n      \n      // Create a DES decryptor from this instance to perform decryption.\n      CryptoAPITransform^ cryptoTransform =\n         static_cast&lt;CryptoAPITransform^&gt;(des-&gt;CreateDecryptor());\n      int inputBlockSize = cryptoTransform-&gt;InputBlockSize;\n      int sourceByteLength = sourceBytes-&gt;Length;\n      try\n      {\n         int numBytesRead = 0;\n         while ( sourceByteLength - currentPosition &gt;= inputBlockSize )\n         {\n            // Transform the bytes from currentposition in the \n            // sourceBytes array, writing the bytes to the targetBytes\n            // array.\n            numBytesRead = cryptoTransform-&gt;TransformBlock(\n               sourceBytes, currentPosition, inputBlockSize,\n               targetBytes, currentPosition );\n            \n            // Advance the current position in the source array.\n            currentPosition += numBytesRead;\n         }\n         \n         // Transform the final block of bytes.\n         array&lt;Byte&gt;^finalBytes = cryptoTransform-&gt;TransformFinalBlock(\n            sourceBytes, currentPosition, sourceByteLength - currentPosition );\n         \n         // Copy the contents of the finalBytes array to the targetBytes\n         // array.\n         finalBytes-&gt;CopyTo( targetBytes, currentPosition );\n      }\n      catch ( Exception^ ex ) \n      {\n         Console::WriteLine( L&quot;Caught unexpected exception:{0}&quot;, ex );\n      }\n\n      // Strip out the second block of bytes.\n      Array::Copy(targetBytes, (inputBlockSize * 2), targetBytes, inputBlockSize, targetBytes-&gt;Length - (inputBlockSize * 2));\n\n      \n      // Trim the extra bytes in the array that were not used.\n      return TrimArray( targetBytes );\n   }\n\n   // Resize the dimensions of the array to a size that contains only valid\n   // bytes.\n   static array&lt;Byte&gt;^ TrimArray( array&lt;Byte&gt;^targetArray )\n   {\n      IEnumerator^ enum1 = targetArray-&gt;GetEnumerator();\n      int i = 0;\n      while ( enum1-&gt;MoveNext() )\n      {\n         if ( enum1-&gt;Current-&gt;ToString()-&gt;Equals( L&quot;0&quot; ) )\n         {\n            break;\n         }\n         i++;\n      }\n\n      // Create a new array with the number of valid bytes.\n      array&lt;Byte&gt;^returnedArray = gcnew array&lt;Byte&gt;(i);\n      for ( int j = 0; j &lt; i; j++ )\n      {\n         returnedArray[ j ] = targetArray[ j ];\n      }\n      return returnedArray;\n   }\n};\n\nint main()\n{\n   Members::Main();\n}\n\n//\n// This sample produces the following output:\n//\n// ** Phrase to be encoded: 012345678901234567890\n// ** Phrase after encoding: AIGC(+b7X?^djAU?15ve?o\n// ** Phrase after decoding: 012345678901234567890\n// Sample ended successfully; press Enter to continue.\n</code></pre>\r\n  \r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_CryptoAPITransform_CanReuseTransform\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CanReuseTransform</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value indicating whether the current transform can be reused.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool CanReuseTransform { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Always <code>true</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_CryptoAPITransform_CanTransformMultipleBlocks\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CanTransformMultipleBlocks</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value indicating whether multiple blocks can be transformed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool CanTransformMultipleBlocks { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if multiple blocks can be transformed; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_CryptoAPITransform_InputBlockSize\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">InputBlockSize</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the input block size.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int InputBlockSize { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The input block size in bytes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_CryptoAPITransform_KeyHandle\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">KeyHandle</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the key handle.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public IntPtr KeyHandle { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The key handle.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_CryptoAPITransform_OutputBlockSize\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OutputBlockSize</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the output block size.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int OutputBlockSize { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The output block size in bytes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_CryptoAPITransform_Clear\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Clear()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Releases all resources used by the <a class=\"xref\" href=\"system.security.cryptography.cryptoapitransform\" data-linktype=\"relative-path\">CryptoAPITransform</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Clear ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is a simple call to <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a>.  </p>\n<p> Calling <code>Dispose</code> allows the resources used by the <a class=\"xref\" href=\"system.security.cryptography.cryptoapitransform\" data-linktype=\"relative-path\">CryptoAPITransform</a> to be reallocated for other purposes. For more information about <code>Dispose</code>, see <a href=\"../topic/cleaning%20up%20unmanaged%20resources\" data-linktype=\"relative-path\">Cleaning Up Unmanaged Resources</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_CryptoAPITransform_Dispose\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Dispose()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Releases all resources used by the current instance of the <a class=\"xref\" href=\"system.security.cryptography.cryptoapitransform\" data-linktype=\"relative-path\">CryptoAPITransform</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Dispose ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Call <code>Dispose</code> when you are finished using the <a class=\"xref\" href=\"system.security.cryptography.cryptoapitransform\" data-linktype=\"relative-path\">CryptoAPITransform</a>. The <code>Dispose</code> method leaves the <a class=\"xref\" href=\"system.security.cryptography.cryptoapitransform\" data-linktype=\"relative-path\">CryptoAPITransform</a> in an unusable state. After calling <code>Dispose</code>, you must release all references to the <a class=\"xref\" href=\"system.security.cryptography.cryptoapitransform\" data-linktype=\"relative-path\">CryptoAPITransform</a> so the garbage collector can reclaim the memory that the <a class=\"xref\" href=\"system.security.cryptography.cryptoapitransform\" data-linktype=\"relative-path\">CryptoAPITransform</a> was occupying.  </p>\n<p> For more information, see <a href=\"../topic/cleaning%20up%20unmanaged%20resources\" data-linktype=\"relative-path\">Cleaning Up Unmanaged Resources</a> and <a href=\"../topic/implementing%20a%20dispose%20method\" data-linktype=\"relative-path\">Implementing a Dispose Method</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Always call <code>Dispose</code> before you release your last reference to the <a class=\"xref\" href=\"system.security.cryptography.cryptoapitransform\" data-linktype=\"relative-path\">CryptoAPITransform</a>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <a class=\"xref\" href=\"system.security.cryptography.cryptoapitransform\" data-linktype=\"relative-path\">CryptoAPITransform</a> object&#39;s <code>Finalize</code> method.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_CryptoAPITransform_Reset\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Reset()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Resets the internal state of <a class=\"xref\" href=\"system.security.cryptography.cryptoapitransform\" data-linktype=\"relative-path\">CryptoAPITransform</a> so that it can be used again to do a different encryption or decryption.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Reset ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Reset method is called automatically when you call TransformFinalBlock. The <code>Reset</code> method is not called when, for example, the encrypted input data is garbage and cannot be decrypted. In this case, an exception is thrown and <code>Reset</code> is not called. You can choose to manually call the <code>Reset</code> method in this case.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_CryptoAPITransform_TransformBlock_System_Byte___System_Int32_System_Int32_System_Byte___System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TransformBlock(Byte[], Int32, Int32, Byte[], Int32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Computes the transformation for the specified region of the input byte array and copies the resulting transformation to the specified region of the output byte array.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>inputBuffer</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The input on which to perform the operation on.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>inputOffset</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The offset into the input byte array from which to begin using data from.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>inputCount</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of bytes in the input byte array to use as data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>outputBuffer</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The output to which to write the data to.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>outputOffset</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The offset into the output byte array from which to begin writing data from.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The number of bytes written.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>inputBuffer</code> parameter is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> The <code>outputBuffer</code> parameter is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The length of the input buffer is less than the sum of the input offset and the input count.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>inputOffset</code> is out of range. This parameter requires a non-negative number.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_CryptoAPITransform_TransformFinalBlock_System_Byte___System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TransformFinalBlock(Byte[], Int32, Int32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Computes the transformation for the specified region of the specified byte array.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>inputBuffer</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The input on which to perform the operation on.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>inputOffset</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The offset into the byte array from which to begin using data from.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>inputCount</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of bytes in the byte array to use as data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The computed transformation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>inputBuffer</code> parameter is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>inputOffset</code> parameter is less than zero.  </p>\n<p> -or-  </p>\n<p> The <code>inputCount</code> parameter is less than zero.  </p>\n<p> -or-  </p>\n<p> The length of the input buffer is less than the sum of the input offset and the input count.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.security.cryptography.paddingmode\" data-linktype=\"relative-path\">PaddingMode</a> padding is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>inputOffset</code> parameter is out of range. This parameter requires a non-negative number.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.CryptoAPITransform.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.CryptoAPITransform\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.CryptoAPITransform.CanReuseTransform\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.CryptoAPITransform.CanTransformMultipleBlocks\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.CryptoAPITransform.Clear\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.CryptoAPITransform.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.CryptoAPITransform.InputBlockSize\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.CryptoAPITransform.KeyHandle\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.CryptoAPITransform.OutputBlockSize\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.CryptoAPITransform.Reset\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.CryptoAPITransform.TransformBlock\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.CryptoAPITransform.TransformFinalBlock\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"b10c2653-1f26-548c-ec6f-d74627787453\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Performs a cryptographic transformation of data. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.security.cryptography/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.CryptoAPITransform\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.CryptoAPITransform.yml","open_to_public_contributors":false,"api_name":["System.Security.Cryptography.CryptoAPITransform","System.Security.Cryptography.CryptoAPITransform.CanReuseTransform","System.Security.Cryptography.CryptoAPITransform.CanTransformMultipleBlocks","System.Security.Cryptography.CryptoAPITransform.Clear","System.Security.Cryptography.CryptoAPITransform.Dispose","System.Security.Cryptography.CryptoAPITransform.InputBlockSize","System.Security.Cryptography.CryptoAPITransform.KeyHandle","System.Security.Cryptography.CryptoAPITransform.OutputBlockSize","System.Security.Cryptography.CryptoAPITransform.Reset","System.Security.Cryptography.CryptoAPITransform.TransformBlock","System.Security.Cryptography.CryptoAPITransform.TransformFinalBlock"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.CryptoAPITransform","System::Security::Cryptography::CryptoAPITransform","System.Security.Cryptography.CryptoAPITransform.CanReuseTransform","System::Security::Cryptography::CryptoAPITransform::CanReuseTransform","System.Security.Cryptography.CryptoAPITransform.CanTransformMultipleBlocks","System::Security::Cryptography::CryptoAPITransform::CanTransformMultipleBlocks","System.Security.Cryptography.CryptoAPITransform.Clear","System::Security::Cryptography::CryptoAPITransform::Clear","System.Security.Cryptography.CryptoAPITransform.Dispose","System::Security::Cryptography::CryptoAPITransform::Dispose","System.Security.Cryptography.CryptoAPITransform.InputBlockSize","System::Security::Cryptography::CryptoAPITransform::InputBlockSize","System.Security.Cryptography.CryptoAPITransform.KeyHandle","System::Security::Cryptography::CryptoAPITransform::KeyHandle","System.Security.Cryptography.CryptoAPITransform.OutputBlockSize","System::Security::Cryptography::CryptoAPITransform::OutputBlockSize","System.Security.Cryptography.CryptoAPITransform.Reset","System::Security::Cryptography::CryptoAPITransform::Reset","System.Security.Cryptography.CryptoAPITransform.TransformBlock","System::Security::Cryptography::CryptoAPITransform::TransformBlock","System.Security.Cryptography.CryptoAPITransform.TransformFinalBlock","System::Security::Cryptography::CryptoAPITransform::TransformFinalBlock"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"b10c2653-1f26-548c-ec6f-d74627787453","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Security.Cryptography/CryptoAPITransform.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"CryptoAPITransform class | Microsoft Docs","_op_ogTitle":"CryptoAPITransform class","description":"Performs a cryptographic transformation of data. This class cannot be inherited.\n","toc_asset_id":"api/_splitted/System.Security.Cryptography/toc.json","toc_rel":"_splitted/System.Security.Cryptography/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.CryptoAPITransform","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.cryptoapitransform","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.cryptoapitransform","fileRelativePath":"api/System.Security.Cryptography.CryptoAPITransform.html"},"themesRelativePathToOutputRoot":"_themes/"}