{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">DragEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that will handle the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragDrop\" data-linktype=\"relative-path\">DragDrop</a>, <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragEnter\" data-linktype=\"relative-path\">DragEnter</a>, or <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> event of a <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a>.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void DragEventHandler(object sender, DragEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">System.Delegate</a></span></div><span class=\"lang-csharp\">DragEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example demonstrates a drag-and-drop operation between two <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a> controls. The example calls the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method when the drag action starts. The drag action starts if the mouse has moved more than <a class=\"xref\" href=\"system.windows.forms.systeminformation#System_Windows_Forms_SystemInformation_DragSize_\" data-linktype=\"relative-path\">DragSize</a> from the mouse location during the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">MouseDown</a> event. The <a class=\"xref\" href=\"system.windows.forms.listbox#System_Windows_Forms_ListBox_IndexFromPoint_\" data-linktype=\"relative-path\">IndexFromPoint</a> method is used to determine the index of the item to drag during the <code>MouseDown</code> event.  </p>\n<p> The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, <code>3dwarro.cur</code> and <code>3dwno.cur</code>, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the <code>UseCustomCursorsCheck</code><a class=\"xref\" href=\"system.windows.forms.checkbox\" data-linktype=\"relative-path\">CheckBox</a> is checked. The custom cursors are set in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_GiveFeedback\" data-linktype=\"relative-path\">GiveFeedback</a> event handler.  </p>\n<p> The keyboard state is evaluated in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> event handler for the right <code>ListBox</code>, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the <code>ListBox</code> where the drop would occur is also determined during the <code>DragOver</code> event. If the data to drop is not a <code>String</code>, then the <a class=\"xref\" href=\"system.windows.forms.drageventargs#System_Windows_Forms_DragEventArgs_Effect_\" data-linktype=\"relative-path\">Effect</a> is set to <a class=\"xref\" href=\"system.windows.forms.dragdropeffects\" data-linktype=\"relative-path\">System.Windows.Forms.DragDropEffects</a>. Finally, the status of the drop is displayed in the <code>DropLocationLabel</code><a class=\"xref\" href=\"system.windows.forms.label\" data-linktype=\"relative-path\">Label</a>.  </p>\n<p> The data to drop for the right <code>ListBox</code> is determined in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragDrop\" data-linktype=\"relative-path\">DragDrop</a> event handler and the <code>String</code> value is added at the appropriate place in the <code>ListBox</code>. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_QueryContinueDrag\" data-linktype=\"relative-path\">QueryContinueDrag</a> event handler.  </p>\n<p> This code excerpt demonstrates using the DragEventHandler delegate with the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DragOver\" data-linktype=\"relative-path\">DragOver</a> event. See the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method for the complete code example.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.Control.DoDragDrop#4\">      void ListDragTarget_DragOver( Object^ /*sender*/, System::Windows::Forms::DragEventArgs^ e )\n      {\n         // Determine whether string data exists in the drop data. If not, then\n         // the drop effect reflects that the drop cannot occur.\n         if (  !e-&gt;Data-&gt;GetDataPresent( System::String::typeid ) )\n         {\n            e-&gt;Effect = DragDropEffects::None;\n            DropLocationLabel-&gt;Text = &quot;None - no string data.&quot;;\n            return;\n         }\n\n         // Set the effect based upon the KeyState.\n         if ( (e-&gt;KeyState &amp; (8 + 32)) == (8 + 32) &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Link) == DragDropEffects::Link) )\n         {\n            // KeyState 8 + 32 = CTL + ALT\n            // Link drag-and-drop effect.\n            e-&gt;Effect = DragDropEffects::Link;\n         }\n         else\n         if ( (e-&gt;KeyState &amp; 32) == 32 &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Link) == DragDropEffects::Link) )\n         {\n            // ALT KeyState for link.\n            e-&gt;Effect = DragDropEffects::Link;\n         }\n         else\n         if ( (e-&gt;KeyState &amp; 4) == 4 &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Move) == DragDropEffects::Move) )\n         {\n            // SHIFT KeyState for move.\n            e-&gt;Effect = DragDropEffects::Move;\n         }\n         else\n         if ( (e-&gt;KeyState &amp; 8) == 8 &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Copy) == DragDropEffects::Copy) )\n         {\n            // CTL KeyState for copy.\n            e-&gt;Effect = DragDropEffects::Copy;\n         }\n         else\n         if ( (e-&gt;AllowedEffect &amp; DragDropEffects::Move) == DragDropEffects::Move )\n         {\n            // By default, the drop action should be move, if allowed.\n            e-&gt;Effect = DragDropEffects::Move;\n         }\n         else\n                  e-&gt;Effect = DragDropEffects::None;\n\n\n\n\n\n         \n         // Get the index of the item the mouse is below.\n         // The mouse locations are relative to the screen, so they must be\n         // converted to client coordinates.\n         indexOfItemUnderMouseToDrop = ListDragTarget-&gt;IndexFromPoint( ListDragTarget-&gt;PointToClient( Point(e-&gt;X,e-&gt;Y) ) );\n         \n         // Updates the label text.\n         if ( indexOfItemUnderMouseToDrop != ListBox::NoMatches )\n         {\n            DropLocationLabel-&gt;Text = String::Concat( &quot;Drops before item # &quot;, (indexOfItemUnderMouseToDrop + 1) );\n         }\n         else\n                  DropLocationLabel-&gt;Text = &quot;Drops at the end.&quot;;\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.Control.DoDragDrop#4\">    Private Sub ListDragTarget_DragOver(ByVal sender As Object, ByVal e As DragEventArgs) Handles ListDragTarget.DragOver\n        &#39; Determine whether string data exists in the drop data. If not, then\n        &#39; the drop effect reflects that the drop cannot occur.\n        If Not (e.Data.GetDataPresent(GetType(System.String))) Then\n\n            e.Effect = DragDropEffects.None\n            DropLocationLabel.Text = &quot;None - no string data.&quot;\n            Return\n        End If\n\n        &#39; Set the effect based upon the KeyState.\n        If ((e.KeyState And (8 + 32)) = (8 + 32) And _\n            (e.AllowedEffect And DragDropEffects.Link) = DragDropEffects.Link) Then\n            &#39; KeyState 8 + 32 = CTL + ALT\n\n            &#39; Link drag-and-drop effect.\n            e.Effect = DragDropEffects.Link\n\n        ElseIf ((e.KeyState And 32) = 32 And _\n            (e.AllowedEffect And DragDropEffects.Link) = DragDropEffects.Link) Then\n\n            &#39; ALT KeyState for link.\n            e.Effect = DragDropEffects.Link\n\n        ElseIf ((e.KeyState And 4) = 4 And _\n            (e.AllowedEffect And DragDropEffects.Move) = DragDropEffects.Move) Then\n\n            &#39; SHIFT KeyState for move.\n            e.Effect = DragDropEffects.Move\n\n        ElseIf ((e.KeyState And 8) = 8 And _\n            (e.AllowedEffect And DragDropEffects.Copy) = DragDropEffects.Copy) Then\n\n            &#39; CTL KeyState for copy.\n            e.Effect = DragDropEffects.Copy\n\n        ElseIf ((e.AllowedEffect And DragDropEffects.Move) = DragDropEffects.Move) Then\n\n            &#39; By default, the drop action should be move, if allowed.\n            e.Effect = DragDropEffects.Move\n\n        Else\n            e.Effect = DragDropEffects.None\n        End If\n\n        &#39; Gets the index of the item the mouse is below. \n\n        &#39; The mouse locations are relative to the screen, so they must be \n        &#39; converted to client coordinates.\n\n        indexOfItemUnderMouseToDrop = _\n            ListDragTarget.IndexFromPoint(ListDragTarget.PointToClient(New Point(e.X, e.Y)))\n\n        &#39; Updates the label text.\n        If (indexOfItemUnderMouseToDrop &lt;&gt; ListBox.NoMatches) Then\n\n            DropLocationLabel.Text = &quot;Drops before item #&quot; &amp; (indexOfItemUnderMouseToDrop + 1)\n        Else\n            DropLocationLabel.Text = &quot;Drops at the end.&quot;\n        End If\n\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.Control.DoDragDrop#4\">        private void ListDragTarget_DragOver(object sender, System.Windows.Forms.DragEventArgs e) \n        {\n\n            // Determine whether string data exists in the drop data. If not, then\n            // the drop effect reflects that the drop cannot occur.\n            if (!e.Data.GetDataPresent(typeof(System.String))) {\n\n                e.Effect = DragDropEffects.None;\n                DropLocationLabel.Text = &quot;None - no string data.&quot;;\n                return;\n            }\n\n            // Set the effect based upon the KeyState.\n            if ((e.KeyState &amp; (8+32)) == (8+32) &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Link) == DragDropEffects.Link) {\n                // KeyState 8 + 32 = CTL + ALT\n\n                // Link drag-and-drop effect.\n                e.Effect = DragDropEffects.Link;\n\n            } else if ((e.KeyState &amp; 32) == 32 &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Link) == DragDropEffects.Link) {\n\n                // ALT KeyState for link.\n                e.Effect = DragDropEffects.Link;\n\n            } else if ((e.KeyState &amp; 4) == 4 &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Move) == DragDropEffects.Move) {\n\n                // SHIFT KeyState for move.\n                e.Effect = DragDropEffects.Move;\n\n            } else if ((e.KeyState &amp; 8) == 8 &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Copy) == DragDropEffects.Copy) {\n\n                // CTL KeyState for copy.\n                e.Effect = DragDropEffects.Copy;\n\n            } else if ((e.AllowedEffect &amp; DragDropEffects.Move) == DragDropEffects.Move)  {\n\n                // By default, the drop action should be move, if allowed.\n                e.Effect = DragDropEffects.Move;\n\n            } else\n                e.Effect = DragDropEffects.None;\n                \n            // Get the index of the item the mouse is below. \n\n            // The mouse locations are relative to the screen, so they must be \n            // converted to client coordinates.\n\n            indexOfItemUnderMouseToDrop = \n                ListDragTarget.IndexFromPoint(ListDragTarget.PointToClient(new Point(e.X, e.Y)));\n\n            // Updates the label text.\n            if (indexOfItemUnderMouseToDrop != ListBox.NoMatches){\n\n                DropLocationLabel.Text = &quot;Drops before item #&quot; + (indexOfItemUnderMouseToDrop + 1);\n            } else\n                DropLocationLabel.Text = &quot;Drops at the end.&quot;;\n\n        }\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>When you create a DragEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about handling events with delegates, see <a href=\"../topic/handling%20and%20raising%20events\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.DragEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DragEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DragEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DragEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DragEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DragEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-24 01:41 AM\">\r\n<meta name=\"document_id\" content=\"91885559-37ec-3780-f123-070cf808b410\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that will handle the , , or  event of a .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.windows.forms/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.DragEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.DragEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Windows.Forms.DragEventHandler","System.Windows.Forms.DragEventHandler..ctor","System.Windows.Forms.DragEventHandler.Invoke","System.Windows.Forms.DragEventHandler.BeginInvoke","System.Windows.Forms.DragEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.DragEventHandler","System::Windows::Forms::DragEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-24 01:41 AM","document_id":"91885559-37ec-3780-f123-070cf808b410","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/DragEventHandler.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DragEventHandler delegate | Microsoft Docs","_op_ogTitle":"DragEventHandler delegate","description":"Represents the method that will handle the , , or  event of a .\n","toc_asset_id":"api/_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.DragEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.drageventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.drageventhandler","fileRelativePath":"api/System.Windows.Forms.DragEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}