{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ProtectedConfigurationProvider</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Is the base class to create providers for encrypting and decrypting protected-configuration data.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public abstract class ProtectedConfigurationProvider : System.Configuration.Provider.ProviderBase</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.provider.providerbase\" data-linktype=\"relative-path\">ProviderBase</a></span></div><span class=\"lang-csharp\">ProtectedConfigurationProvider</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.provider.providerbase#System_Configuration_Provider_ProviderBase_Description\" data-linktype=\"relative-path\">Description</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.provider.providerbase#System_Configuration_Provider_ProviderBase_Initialize_System_String_System_Collections_Specialized_NameValueCollection_\" data-linktype=\"relative-path\">Initialize(String, NameValueCollection)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.provider.providerbase#System_Configuration_Provider_ProviderBase_Name\" data-linktype=\"relative-path\">Name</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example shows how to implement a custom ProtectedConfigurationProvider.  </p>\n<p> To be able to configure this provider, as shown in the next configuration excerpt, you must install it in the Global Assembly Cache (GAC). Refer to <a href=\"../topic/implementing%20a%20protected%20configuration%20provider\" data-linktype=\"relative-path\">Implementing a Protected Configuration Provider</a> for more information.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Configuration.ProtectedConfigurationProvider#1\">using System;\nusing System.Xml;\nusing System.Security.Cryptography;\nusing System.IO;\nusing System.Text;\nusing System.Configuration.Provider;\nusing System.Collections.Specialized;\nusing System.Configuration;\n\nnamespace Samples.AspNet\n{\n    // Shows how to create a custom protected configuration\n    // provider.\n    public class TripleDESProtectedConfigurationProvider :\n        ProtectedConfigurationProvider\n    {\n\n        private TripleDESCryptoServiceProvider des =\n            new TripleDESCryptoServiceProvider();\n\n        private string pKeyFilePath;\n        private string pName;\n\n        // Gets the path of the file\n        // containing the key used to\n        // encryption or decryption.\n        public string KeyFilePath\n        {\n            get { return pKeyFilePath; }\n        }\n\n\n        // Gets the provider name.\n        public override string Name\n        {\n            get { return pName; }\n        }\n\n\n        // Performs provider initialization.\n        public override void Initialize(string name,\n            NameValueCollection config)\n        {\n            pName = name;\n            pKeyFilePath = config[&quot;keyContainerName&quot;];\n            ReadKey(KeyFilePath);\n        }\n\n\n        // Performs encryption.\n        public override XmlNode Encrypt(XmlNode node)\n        {\n            string encryptedData = EncryptString(node.OuterXml);\n\n            XmlDocument xmlDoc = new XmlDocument();\n            xmlDoc.PreserveWhitespace = true;\n            xmlDoc.LoadXml(&quot;&lt;EncryptedData&gt;&quot; +\n                encryptedData + &quot;&lt;/EncryptedData&gt;&quot;);\n\n            return xmlDoc.DocumentElement;\n        }\n\n        // Performs decryption.\n        public override XmlNode Decrypt(XmlNode encryptedNode)\n        {\n            string decryptedData =\n                DecryptString(encryptedNode.InnerText);\n\n            XmlDocument xmlDoc = new XmlDocument();\n            xmlDoc.PreserveWhitespace = true;\n            xmlDoc.LoadXml(decryptedData);\n\n            return xmlDoc.DocumentElement;\n        }\n\n        // Encrypts a configuration section and returns \n        // the encrypted XML as a string.\n        private string EncryptString(string encryptValue)\n        {\n            byte[] valBytes =\n                Encoding.Unicode.GetBytes(encryptValue);\n\n            ICryptoTransform transform = des.CreateEncryptor();\n\n            MemoryStream ms = new MemoryStream();\n            CryptoStream cs = new CryptoStream(ms,\n                transform, CryptoStreamMode.Write);\n            cs.Write(valBytes, 0, valBytes.Length);\n            cs.FlushFinalBlock();\n            byte[] returnBytes = ms.ToArray();\n            cs.Close();\n\n            return Convert.ToBase64String(returnBytes);\n        }\n\n\n        // Decrypts an encrypted configuration section and \n        // returns the unencrypted XML as a string.\n        private string DecryptString(string encryptedValue)\n        {\n            byte[] valBytes =\n                Convert.FromBase64String(encryptedValue);\n\n            ICryptoTransform transform = des.CreateDecryptor();\n\n            MemoryStream ms = new MemoryStream();\n            CryptoStream cs = new CryptoStream(ms,\n                transform, CryptoStreamMode.Write);\n            cs.Write(valBytes, 0, valBytes.Length);\n            cs.FlushFinalBlock();\n            byte[] returnBytes = ms.ToArray();\n            cs.Close();\n\n            return Encoding.Unicode.GetString(returnBytes);\n        }\n\n        // Generates a new TripleDES key and vector and \n        // writes them to the supplied file path.\n        public void CreateKey(string filePath)\n        {\n            des.GenerateKey();\n            des.GenerateIV();\n\n            StreamWriter sw = new StreamWriter(filePath, false);\n            sw.WriteLine(ByteToHex(des.Key));\n            sw.WriteLine(ByteToHex(des.IV));\n            sw.Close();\n        }\n\n\n        // Reads in the TripleDES key and vector from \n        // the supplied file path and sets the Key \n        // and IV properties of the \n        // TripleDESCryptoServiceProvider.\n        private void ReadKey(string filePath)\n        {\n            StreamReader sr = new StreamReader(filePath);\n            string keyValue = sr.ReadLine();\n            string ivValue = sr.ReadLine();\n            des.Key = HexToByte(keyValue);\n            des.IV = HexToByte(ivValue);\n        }\n\n\n        // Converts a byte array to a hexadecimal string.\n        private string ByteToHex(byte[] byteArray)\n        {\n            string outString = &quot;&quot;;\n\n            foreach (Byte b in byteArray)\n                outString += b.ToString(&quot;X2&quot;);\n\n            return outString;\n        }\n\n        // Converts a hexadecimal string to a byte array.\n        private byte[] HexToByte(string hexString)\n        {\n            byte[] returnBytes = new byte[hexString.Length / 2];\n            for (int i = 0; i &lt; returnBytes.Length; i++)\n                returnBytes[i] =\n                    Convert.ToByte(hexString.Substring(i * 2, 2), 16);\n            return returnBytes;\n        }\n\n    }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Configuration.ProtectedConfigurationProvider#1\">Imports System\nImports System.Xml\nImports System.Security.Cryptography\nImports System.IO\nImports System.Text\nImports System.Configuration.Provider\nImports System.Collections.Specialized\nImports System.Configuration\n\n\n&#39; Shows how to create a custom protected configuration\n&#39; provider.\nNamespace Samples.AspNet\n\n    Public Class TripleDESProtectedConfigurationProvider\n        Inherits ProtectedConfigurationProvider\n\n        Private des _\n        As New TripleDESCryptoServiceProvider()\n\n        Private pKeyFilePath As String\n        Private pName As String\n\n        &#39; Gets the path of the file\n        &#39; containing the key used to\n        &#39; encrypt/decrypt.\n\n        Public ReadOnly Property KeyFilePath() As String\n            Get\n                Return pKeyFilePath\n            End Get\n        End Property\n\n        &#39; Gets the provider name.\n\n        Public Overrides ReadOnly Property Name() As String\n            Get\n                Return pName\n            End Get\n        End Property\n\n\n        &#39; Performs provider initialization.\n        Public Overrides Sub Initialize( _\n        ByVal name As String, _\n        ByVal config As NameValueCollection)\n            pName = name\n            pKeyFilePath = config(&quot;keyContainerName&quot;)\n            ReadKey(KeyFilePath)\n        End Sub &#39;Initialize\n\n\n        &#39; Performs encryption.\n        Public Overrides Function Encrypt( _\n        ByVal node As XmlNode) As XmlNode\n            Dim encryptedData As String = _\n            EncryptString(node.OuterXml)\n\n            Dim xmlDoc As New XmlDocument()\n            xmlDoc.PreserveWhitespace = True\n            xmlDoc.LoadXml( _\n            (&quot;&lt;EncryptedData&gt;&quot; + encryptedData + _\n            &quot;&lt;/EncryptedData&gt;&quot;))\n\n            Return xmlDoc.DocumentElement\n        End Function &#39;Encrypt\n\n        &#39; Performs decryption.\n        Public Overrides Function Decrypt( _\n        ByVal encryptedNode As XmlNode) As XmlNode\n            Dim decryptedData As String = _\n            DecryptString(encryptedNode.InnerText)\n\n            Dim xmlDoc As New XmlDocument()\n            xmlDoc.PreserveWhitespace = True\n            xmlDoc.LoadXml(decryptedData)\n\n            Return xmlDoc.DocumentElement\n        End Function &#39;Decrypt\n\n\n\n        &#39; Encrypts a configuration section and returns \n        &#39; the encrypted XML as a string.\n        Private Function EncryptString( _\n        ByVal encryptValue As String) As String\n            Dim valBytes As Byte() = _\n            Encoding.Unicode.GetBytes(encryptValue)\n\n            Dim transform As ICryptoTransform = _\n            des.CreateEncryptor()\n\n            Dim ms As New MemoryStream()\n            Dim cs As New CryptoStream(ms, _\n            transform, CryptoStreamMode.Write)\n            cs.Write(valBytes, 0, valBytes.Length)\n            cs.FlushFinalBlock()\n            Dim returnBytes As Byte() = ms.ToArray()\n            cs.Close()\n\n            Return Convert.ToBase64String(returnBytes)\n        End Function &#39;EncryptString\n\n\n\n        &#39; Decrypts an encrypted configuration section and \n        &#39; returns the unencrypted XML as a string.\n        Private Function DecryptString( _\n        ByVal encryptedValue As String) As String\n            Dim valBytes As Byte() = _\n            Convert.FromBase64String(encryptedValue)\n\n            Dim transform As ICryptoTransform = _\n            des.CreateDecryptor()\n\n            Dim ms As New MemoryStream()\n            Dim cs As New CryptoStream(ms, _\n            transform, CryptoStreamMode.Write)\n            cs.Write(valBytes, 0, valBytes.Length)\n            cs.FlushFinalBlock()\n            Dim returnBytes As Byte() = ms.ToArray()\n            cs.Close()\n\n            Return Encoding.Unicode.GetString(returnBytes)\n        End Function &#39;DecryptString\n\n\n        &#39; Generates a new TripleDES key and vector and \n        &#39; writes them to the supplied file path.\n        Public Sub CreateKey(ByVal filePath As String)\n            des.GenerateKey()\n            des.GenerateIV()\n\n            Dim sw As New StreamWriter(filePath, False)\n            sw.WriteLine(ByteToHex(des.Key))\n            sw.WriteLine(ByteToHex(des.IV))\n            sw.Close()\n        End Sub &#39;CreateKey\n\n\n\n        &#39; Reads in the TripleDES key and vector from \n        &#39; the supplied file path and sets the Key \n        &#39; and IV properties of the \n        &#39; TripleDESCryptoServiceProvider.\n        Private Sub ReadKey(ByVal filePath As String)\n            Dim sr As New StreamReader(filePath)\n            Dim keyValue As String = sr.ReadLine()\n            Dim ivValue As String = sr.ReadLine()\n            des.Key = HexToByte(keyValue)\n            des.IV = HexToByte(ivValue)\n        End Sub &#39;ReadKey\n\n\n\n        &#39; Converts a byte array to a hexadecimal string.\n        Private Function ByteToHex( _\n        ByVal byteArray() As Byte) As String\n            Dim outString As String = &quot;&quot;\n\n            Dim b As [Byte]\n            For Each b In byteArray\n                outString += b.ToString(&quot;X2&quot;)\n            Next b\n            Return outString\n        End Function &#39;ByteToHex\n\n\n        &#39; Converts a hexadecimal string to a byte array.\n        Private Function HexToByte(ByVal hexString As String) As Byte()\n            Dim returnBytes(hexString.Length / 2) As Byte\n            Dim i As Integer\n            For i = 0 To returnBytes.Length - 1\n                returnBytes(i) = _\n                Convert.ToByte(hexString.Substring(i * 2, 2), 16)\n            Next i\n            Return returnBytes\n        End Function &#39;HexToByte\n    End Class &#39;TripleDESProtectedConfigurationProvider \n\nEnd Namespace\n</code></pre><p> The following example shows how to use the previous custom ProtectedConfigurationProvider.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Configuration.UsingProtectedConfigurationProvider#11\">Imports System\nImports System.Configuration\n\nNamespace Samples.AspNet\n    &#39; Show how to use a custom protected configuration\n    &#39; provider.\n\n    Public Class TestingProtectedConfigurationProvider\n\n\n        &#39; Protect the connectionStrings section.\n        Private Shared Sub ProtectConfiguration()\n\n            &#39; Get the application configuration file.\n            Dim config _\n            As System.Configuration.Configuration = _\n            ConfigurationManager.OpenExeConfiguration( _\n            ConfigurationUserLevel.None)\n\n            &#39; Define the provider name.\n            Dim provider As String = _\n            &quot;TripleDESProtectedConfigurationProvider&quot;\n\n            &#39; Get the section to protect.\n            Dim connStrings _\n            As ConfigurationSection = config.ConnectionStrings\n\n            If Not (connStrings Is Nothing) Then\n                If Not connStrings.SectionInformation.IsProtected Then\n                    If Not connStrings.ElementInformation.IsLocked Then\n                        &#39; Protect the section.\n                        connStrings.SectionInformation.ProtectSection( _\n                        provider)\n\n                        connStrings.SectionInformation.ForceSave = True\n                        config.Save(ConfigurationSaveMode.Full)\n\n                        Console.WriteLine( _\n                        &quot;Section {0} is now protected by {1}&quot;, _\n                        connStrings.SectionInformation.Name, _\n                        connStrings.SectionInformation.ProtectionProvider.Name)\n\n                    Else\n                        Console.WriteLine( _\n                        &quot;Can&#39;t protect, section {0} is locked&quot;, _\n                        connStrings.SectionInformation.Name)\n                    End If\n                Else\n                    Console.WriteLine( _\n                    &quot;Section {0} is already protected by {1}&quot;, _\n                    connStrings.SectionInformation.Name, _\n                    connStrings.SectionInformation.ProtectionProvider.Name)\n                End If\n\n            Else\n                Console.WriteLine( _\n                &quot;Can&#39;t get the section {0}&quot;, _\n                connStrings.SectionInformation.Name)\n            End If\n        End Sub &#39;ProtectConfiguration\n\n\n        &#39; Unprotect the connectionStrings section.\n        Private Shared Sub UnProtectConfiguration()\n\n            &#39; Get the application configuration file.\n            Dim config _\n            As System.Configuration.Configuration = _\n            ConfigurationManager.OpenExeConfiguration( _\n            ConfigurationUserLevel.None)\n\n            &#39; Get the section to unprotect.\n            Dim connStrings _\n            As ConfigurationSection = config.ConnectionStrings\n\n            If Not (connStrings Is Nothing) Then\n                If connStrings.SectionInformation.IsProtected Then\n                    If Not connStrings.ElementInformation.IsLocked Then\n                        &#39; Unprotect the section.\n                        connStrings.SectionInformation.UnprotectSection()\n\n                        connStrings.SectionInformation.ForceSave = True\n                        config.Save(ConfigurationSaveMode.Full)\n\n                        Console.WriteLine( _\n                        &quot;Section {0} is now unprotected.&quot;, _\n                        connStrings.SectionInformation.Name)\n\n                    Else\n                        Console.WriteLine( _\n                        &quot;Can&#39;t unprotect, section {0} is locked&quot;, _\n                        connStrings.SectionInformation.Name)\n                    End If\n                Else\n                    Console.WriteLine( _\n                    &quot;Section {0} is already unprotected.&quot;, _\n                    connStrings.SectionInformation.Name)\n                End If\n\n            Else\n                Console.WriteLine( _\n                &quot;Can&#39;t get the section {0}&quot;, _\n                connStrings.SectionInformation.Name)\n            End If\n        End Sub &#39;UnProtectConfiguration\n\n\n\n        Public Shared Sub Main(ByVal args() As String)\n\n            Dim selection As String = String.Empty\n\n            If args.Length = 0 Then\n                Console.WriteLine( _\n                &quot;Select createkey, protect or unprotect&quot;)\n                Return\n            End If\n\n            selection = args(0).ToLower()\n\n            Select Case selection\n\n                &#39; Create the key to use during \n                &#39; encryption/decryption.\n                Case &quot;createkey&quot;\n                    Dim keyContainer As String = &quot;pcKey.txt&quot;\n\n                    &#39; Instantiate the custom provider.\n                    Dim provider _\n                    As New TripleDESProtectedConfigurationProvider()\n\n                    &#39; Create the encryption/decryption key.\n                    provider.CreateKey(keyContainer)\n\n                    Console.WriteLine( _\n                    &quot;New TripleDES key created in {0}&quot;, _\n                    keyContainer)\n\n                Case &quot;protect&quot;\n                    ProtectConfiguration()\n\n                Case &quot;unprotect&quot;\n                    UnProtectConfiguration()\n\n                Case Else\n                    Console.WriteLine(&quot;Unknown selection&quot;)\n            End Select\n\n            Console.Read()\n        End Sub &#39;Main \n    End Class &#39;TestingProtectedConfigurationProvider\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Configuration.UsingProtectedConfigurationProvider#11\">using System;\nusing System.Configuration;\nusing Samples.AspNet.Configuration;\n\nnamespace Samples.AspNet.Configuration\n{\n\n    // Show how to use a custom protected configuration\n    // provider.\n    public class TestingProtectedConfigurationProvider\n    {\n\n        // Protect the connectionStrings section.\n        private static void ProtectConfiguration()\n        {\n\n            // Get the application configuration file.\n            System.Configuration.Configuration config =\n                    ConfigurationManager.OpenExeConfiguration(\n                    ConfigurationUserLevel.None);\n\n            // Define the provider name.\n            string provider =\n                &quot;TripleDESProtectedConfigurationProvider&quot;;\n\n            // Get the section to protect.\n            ConfigurationSection connStrings =\n                config.ConnectionStrings;\n\n            if (connStrings != null)\n            {\n                if (!connStrings.SectionInformation.IsProtected)\n                {\n                    if (!connStrings.ElementInformation.IsLocked)\n                    {\n                        // Protect the section.\n                        connStrings.SectionInformation.ProtectSection(provider);\n\n                        connStrings.SectionInformation.ForceSave = true;\n                        config.Save(ConfigurationSaveMode.Full);\n\n                        Console.WriteLine(&quot;Section {0} is now protected by {1}&quot;,\n                            connStrings.SectionInformation.Name,\n                            connStrings.SectionInformation.ProtectionProvider.Name);\n\n                    }\n                    else\n                        Console.WriteLine(\n                             &quot;Can&#39;t protect, section {0} is locked&quot;,\n                             connStrings.SectionInformation.Name);\n                }\n                else\n                    Console.WriteLine(\n                        &quot;Section {0} is already protected by {1}&quot;,\n                        connStrings.SectionInformation.Name,\n                        connStrings.SectionInformation.ProtectionProvider.Name);\n\n            }\n            else\n                Console.WriteLine(&quot;Can&#39;t get the section {0}&quot;,\n                    connStrings.SectionInformation.Name);\n\n        }\n\n        // Unprotect the connectionStrings section.\n        private static void UnProtectConfiguration()\n        {\n\n            // Get the application configuration file.\n            System.Configuration.Configuration config =\n                    ConfigurationManager.OpenExeConfiguration(\n                    ConfigurationUserLevel.None);\n\n            // Get the section to unprotect.\n            ConfigurationSection connStrings =\n                config.ConnectionStrings;\n\n            if (connStrings != null)\n            {\n                if (connStrings.SectionInformation.IsProtected)\n                {\n                    if (!connStrings.ElementInformation.IsLocked)\n                    {\n                        // Unprotect the section.\n                        connStrings.SectionInformation.UnprotectSection();\n\n                        connStrings.SectionInformation.ForceSave = true;\n                        config.Save(ConfigurationSaveMode.Full);\n\n                        Console.WriteLine(&quot;Section {0} is now unprotected.&quot;,\n                            connStrings.SectionInformation.Name);\n\n                    }\n                    else\n                        Console.WriteLine(\n                             &quot;Can&#39;t unprotect, section {0} is locked&quot;,\n                             connStrings.SectionInformation.Name);\n                }\n                else\n                    Console.WriteLine(\n                        &quot;Section {0} is already unprotected.&quot;,\n                        connStrings.SectionInformation.Name);\n\n            }\n            else\n                Console.WriteLine(&quot;Can&#39;t get the section {0}&quot;,\n                    connStrings.SectionInformation.Name);\n\n        }\n\n\n        public static void Main(string[] args)\n        {\n\n            string selection = string.Empty;\n\n            if (args.Length == 0)\n            {\n                Console.WriteLine(\n                    &quot;Select createkey, protect or unprotect&quot;);\n                return;\n            }\n\n            selection = args[0].ToLower();\n\n            switch (selection)\n            {\n\n                // Create the key to use during \n                // encryption/decryption.\n                case &quot;createkey&quot;:\n                    string keyContainer = \n                        &quot;pcKey.txt&quot;;\n\n                    // Instantiate the custom provider.\n                    TripleDESProtectedConfigurationProvider \n                        provider =\n                        new TripleDESProtectedConfigurationProvider();\n\n                    // Create the encryption/decryption key.\n                    provider.CreateKey(keyContainer);\n\n                    Console.WriteLine(\n                        &quot;New TripleDES key created in {0}&quot;,\n                        keyContainer);\n                    break;\n\n                case &quot;protect&quot;:\n                    ProtectConfiguration();\n                    break;\n\n                case &quot;unprotect&quot;:\n                    UnProtectConfiguration();\n                    break;\n\n                default:\n                    Console.WriteLine(&quot;Unknown selection&quot;);\n                    break;\n            }\n\n            Console.Read();\n\n        }\n\n\n    }\n\n}\n</code></pre><p> The following is an excerpt of the configuration file used by the above examples.  </p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;  \n&lt;configuration&gt;  \n\n  &lt;configProtectedData &gt;  \n    &lt;providers&gt;  \n      &lt;clear /&gt;  \n      &lt;add keyContainerName=&quot;pcKey.txt&quot;   \n        name=&quot;TripleDESProtectedConfigurationProvider&quot;  \ntype=&quot;Samples.Aspnet.TripleDESProtectedConfigurationProvider, protectedconfigurationproviderlib, Version=1.0.0.0, Culture=neutral, PublicKeyToken=79e01ae0f5cfc66f, processorArchitecture=MSIL&quot; /&gt;  \n    &lt;/providers&gt;  \n\n  &lt;/configProtectedData &gt;  \n\n  &lt;connectionStrings&gt;  \n    &lt;add name=&quot;NorthwindConnectionString&quot;   \n      connectionString=&quot;Data Source=webnetue2;Initial Catalog=Northwind;User ID=aspnet_test;Password=test&quot;  \nproviderName=&quot;System.Data.SqlClient&quot; /&gt;  \n  &lt;/connectionStrings&gt;  \n\n&lt;/configuration&gt;  \n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>You can encrypt sections of a configuration file to protect sensitive information used by your application. This improves security by making it difficult for unauthorized access even if an attacker gains access to your configuration file.  </p>\n<p> The .NET Framework includes two protected configuration providers that can be used to encrypt sections of a configuration file. The <a class=\"xref\" href=\"system.configuration.rsaprotectedconfigurationprovider\" data-linktype=\"relative-path\">RsaProtectedConfigurationProvider</a> class uses the <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> to encrypt configuration sections. The <a class=\"xref\" href=\"system.configuration.dpapiprotectedconfigurationprovider\" data-linktype=\"relative-path\">DpapiProtectedConfigurationProvider</a> class uses the Windows Data Protection API (DPAPI) to encrypt configuration sections.  </p>\n<p> You might have a requirement to encrypt sensitive information using an algorithm other than the RSA or DPAPI providers. In this case, you can build your own custom protected-configuration provider. The ProtectedConfigurationProvider is an abstract base class that you must inherit from to create your own protected-configuration provider.  </p>\n<p> Whether you use a standard or a custom provider, you must ensure that it is configured with the <code>add</code> element in the <code>providers</code> section of the <code>configProtectedData</code>  configuration section. (See next example.)  </p>\n<p> For details, see <a href=\"../topic/implementing%20a%20protected%20configuration%20provider\" data-linktype=\"relative-path\">Implementing a Protected Configuration Provider</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> When ASP.NET encounters encrypted configuration data, it performs decryption transparently using the configured provider. No action is required on your side other than making sure that you configure the required provider.</p>\n</div>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Configuration_ProtectedConfigurationProvider__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ProtectedConfigurationProvider()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.configuration.protectedconfigurationprovider\" data-linktype=\"relative-path\">ProtectedConfigurationProvider</a> class using default settings.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected ProtectedConfigurationProvider ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Configuration_ProtectedConfigurationProvider_Decrypt_System_Xml_XmlNode_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Decrypt(XmlNode)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Decrypts the passed <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a> object from a configuration file.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public abstract System.Xml.XmlNode Decrypt (System.Xml.XmlNode encryptedNode);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>encryptedNode</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a> object to decrypt.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a> object containing decrypted data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Configuration_ProtectedConfigurationProvider_Encrypt_System_Xml_XmlNode_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Encrypt(XmlNode)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Encrypts the passed <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a> object from a configuration file.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public abstract System.Xml.XmlNode Encrypt (System.Xml.XmlNode node);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>node</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a> object to encrypt.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.xml.xmlnode\" data-linktype=\"relative-path\">XmlNode</a> object containing encrypted data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Configuration.ProtectedConfigurationProvider.yml\">\r\n<meta name=\"APIName\" content=\"System.Configuration.ProtectedConfigurationProvider\">\r\n<meta name=\"APIName\" content=\"System.Configuration.ProtectedConfigurationProvider..ctor\">\r\n<meta name=\"APIName\" content=\"System.Configuration.ProtectedConfigurationProvider.Decrypt\">\r\n<meta name=\"APIName\" content=\"System.Configuration.ProtectedConfigurationProvider.Encrypt\">\r\n<meta name=\"APILocation\" content=\"System.Configuration.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"631980b4-b731-6703-24cc-1b874ca4bdd5\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Is the base class to create providers for encrypting and decrypting protected-configuration data.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.configuration/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Configuration.ProtectedConfigurationProvider\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Configuration.ProtectedConfigurationProvider.yml","open_to_public_contributors":false,"api_name":["System.Configuration.ProtectedConfigurationProvider","System.Configuration.ProtectedConfigurationProvider..ctor","System.Configuration.ProtectedConfigurationProvider.Decrypt","System.Configuration.ProtectedConfigurationProvider.Encrypt"],"api_location":["System.Configuration.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Configuration.ProtectedConfigurationProvider","System::Configuration::ProtectedConfigurationProvider","System.Configuration.ProtectedConfigurationProvider.#ctor","System::Configuration::ProtectedConfigurationProvider::#ctor","System.Configuration.ProtectedConfigurationProvider.Decrypt","System::Configuration::ProtectedConfigurationProvider::Decrypt","System.Configuration.ProtectedConfigurationProvider.Encrypt","System::Configuration::ProtectedConfigurationProvider::Encrypt"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"631980b4-b731-6703-24cc-1b874ca4bdd5","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ProtectedConfigurationProvider.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ProtectedConfigurationProvider class | Microsoft Docs","_op_ogTitle":"ProtectedConfigurationProvider class","description":"Is the base class to create providers for encrypting and decrypting protected-configuration data.\n","toc_asset_id":"api/_splitted/System.Configuration/toc.json","toc_rel":"_splitted/System.Configuration/toc.json","source_url":"","ms.assetid":"System.Configuration.ProtectedConfigurationProvider","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.configuration.protectedconfigurationprovider","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.configuration.protectedconfigurationprovider","fileRelativePath":"api/System.Configuration.ProtectedConfigurationProvider.html"},"themesRelativePathToOutputRoot":"_themes/"}