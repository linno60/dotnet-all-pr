{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">DataGridViewCellEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that will handle <a class=\"xref\" href=\"system.windows.forms.datagridview\" data-linktype=\"relative-path\">DataGridView</a> events related to cell and row operations.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void DataGridViewCellEventHandler(object sender, DataGridViewCellEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">DataGridViewCellEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates using <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellMouseEnter\" data-linktype=\"relative-path\">CellMouseEnter</a> and <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellMouseLeave\" data-linktype=\"relative-path\">CellMouseLeave</a> event handlers to determine whether a cell can be clicked. The example updates each <a class=\"xref\" href=\"system.windows.forms.datagridviewcell#System_Windows_Forms_DataGridViewCell_ToolTipText_\" data-linktype=\"relative-path\">ToolTipText</a> to advertise the current image layout. This code is part of a larger example shown in <a href=\"../Topic/How%20to:%20Work%20with%20Image%20Columns%20in%20the%20Windows%20Forms%20DataGridView%20Control.md\" data-linktype=\"relative-path\">How to: Work with Image Columns in the Windows Forms DataGridView Control</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.DataGridView.ImageColumn_TicTacToe#15\">private void dataGridView1_CellMouseEnter(object sender,\n    DataGridViewCellEventArgs e)\n{\n    Bitmap markingUnderMouse = (Bitmap)dataGridView1.\n           Rows[e.RowIndex].\n           Cells[e.ColumnIndex].Value;\n\n    if (markingUnderMouse == blank)\n    {\n        dataGridView1.Cursor = Cursors.Default;\n    }\n    else if (markingUnderMouse == o || markingUnderMouse == x)\n    {\n        dataGridView1.Cursor = Cursors.No;\n        ToolTip(e, true);\n    }\n}\n\nprivate void ToolTip(DataGridViewCellEventArgs e, bool showTip)\n{\n    DataGridViewImageCell cell = (DataGridViewImageCell)\n        dataGridView1\n        .Rows[e.RowIndex].Cells[e.ColumnIndex];\n    DataGridViewImageColumn imageColumn =\n        (DataGridViewImageColumn)\n        dataGridView1.Columns[cell.ColumnIndex];\n\n    if (showTip) cell.ToolTipText = imageColumn.Description;\n    else { cell.ToolTipText = String.Empty; }\n}\n\nprivate void dataGridView1_CellMouseLeave(object sender,\n    DataGridViewCellEventArgs e)\n{\n    ToolTip(e, false);\n    dataGridView1.Cursor = Cursors.Default;\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.DataGridView.ImageColumn_TicTacToe#15\">void dataGridView1_CellMouseEnter( Object^ sender, DataGridViewCellEventArgs^ e )\n{\n   Bitmap^ markingUnderMouse = dynamic_cast&lt;Bitmap^&gt;(dataGridView1-&gt;Rows[ e-&gt;RowIndex ]-&gt;Cells[ e-&gt;ColumnIndex ]-&gt;Value);\n   if ( markingUnderMouse == blank )\n   {\n      dataGridView1-&gt;Cursor = Cursors::Default;\n   }\n   else\n   if ( markingUnderMouse == o || markingUnderMouse == x )\n   {\n      dataGridView1-&gt;Cursor = Cursors::No;\n      ToolTip(e,true);\n   }\n}\n\nvoid ToolTip( DataGridViewCellEventArgs^ e, bool showTip )\n{\n   DataGridViewImageCell^ cell = dynamic_cast&lt;DataGridViewImageCell^&gt;(dataGridView1-&gt;Rows[ e-&gt;RowIndex ]-&gt;Cells[ e-&gt;ColumnIndex ]);\n   DataGridViewImageColumn^ imageColumn = dynamic_cast&lt;DataGridViewImageColumn^&gt;(dataGridView1-&gt;Columns[ cell-&gt;ColumnIndex ]);\n   if ( showTip )\n         cell-&gt;ToolTipText = imageColumn-&gt;Description;\n   else\n   {\n      cell-&gt;ToolTipText = String::Empty;\n   }\n}\n\nvoid dataGridView1_CellMouseLeave( Object^ sender, DataGridViewCellEventArgs^ e )\n{\n   ToolTip( e, false );\n   dataGridView1-&gt;Cursor = Cursors::Default;\n}\n\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.DataGridView.ImageColumn_TicTacToe#15\">Private Sub dataGridView1_CellMouseEnter(ByVal sender As Object, _\n    ByVal e As DataGridViewCellEventArgs) _\n    Handles dataGridView1.CellMouseEnter\n\n    Dim markingUnderMouse As Bitmap = _\n        CType(dataGridView1.Rows(e.RowIndex). _\n            Cells(e.ColumnIndex).Value, Bitmap)\n\n    If markingUnderMouse Is blank Then\n        dataGridView1.Cursor = Cursors.Default\n    ElseIf markingUnderMouse Is o OrElse markingUnderMouse Is x Then\n        dataGridView1.Cursor = Cursors.No\n        ToolTip(e)\n    End If\nEnd Sub\n\nPrivate Sub ToolTip( _\n    ByVal e As DataGridViewCellEventArgs)\n\n    Dim cell As DataGridViewImageCell = _\n        CType(dataGridView1.Rows(e.RowIndex). _\n        Cells(e.ColumnIndex), DataGridViewImageCell)\n    Dim imageColumn As DataGridViewImageColumn = _\n        CType(dataGridView1.Columns(cell.ColumnIndex), _\n        DataGridViewImageColumn)\n\n    cell.ToolTipText = imageColumn.Description\nEnd Sub\n\nPrivate Sub dataGridView1_CellMouseLeave(ByVal sender As Object, _\n    ByVal e As DataGridViewCellEventArgs) _\n    Handles dataGridView1.CellMouseLeave\n\n    dataGridView1.Cursor = Cursors.Default\nEnd Sub\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>DataGridViewCellEventHandler handles the following <a class=\"xref\" href=\"system.windows.forms.datagridview\" data-linktype=\"relative-path\">DataGridView</a> events:  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellClick\" data-linktype=\"relative-path\">CellClick</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellContentClick\" data-linktype=\"relative-path\">CellContentClick</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellContextMenuStripChanged\" data-linktype=\"relative-path\">CellContextMenuStripChanged</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellEndEdit\" data-linktype=\"relative-path\">CellEndEdit</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellEnter\" data-linktype=\"relative-path\">CellEnter</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellErrorTextChanged\" data-linktype=\"relative-path\">CellErrorTextChanged</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellLeave\" data-linktype=\"relative-path\">CellLeave</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellMouseEnter\" data-linktype=\"relative-path\">CellMouseEnter</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellMouseLeave\" data-linktype=\"relative-path\">CellMouseLeave</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellStyleChanged\" data-linktype=\"relative-path\">CellStyleChanged</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellToolTipTextChanged\" data-linktype=\"relative-path\">CellToolTipTextChanged</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellValidated\" data-linktype=\"relative-path\">CellValidated</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellValueChanged\" data-linktype=\"relative-path\">CellValueChanged</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_RowEnter\" data-linktype=\"relative-path\">RowEnter</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_RowLeave\" data-linktype=\"relative-path\">RowLeave</a>  \n</li>\n<li><a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_RowValidated\" data-linktype=\"relative-path\">RowValidated</a>  \n</li>\n</ul>\n<p> When you create a DataGridViewCellEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see <a href=\"http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115\" data-linktype=\"external\">NIB: Events and Delegates</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.DataGridViewCellEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"ec0f4614-4164-314b-651d-e8cacd49ad20\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that will handle  events related to cell and row operations.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.windows.forms/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.DataGridViewCellEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.DataGridViewCellEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Windows.Forms.DataGridViewCellEventHandler","System.Windows.Forms.DataGridViewCellEventHandler..ctor","System.Windows.Forms.DataGridViewCellEventHandler.Invoke","System.Windows.Forms.DataGridViewCellEventHandler.BeginInvoke","System.Windows.Forms.DataGridViewCellEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.DataGridViewCellEventHandler","System::Windows::Forms::DataGridViewCellEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"ec0f4614-4164-314b-651d-e8cacd49ad20","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Windows.Forms/DataGridViewCellEventHandler.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DataGridViewCellEventHandler delegate | Microsoft Docs","_op_ogTitle":"DataGridViewCellEventHandler delegate","description":"Represents the method that will handle  events related to cell and row operations.\n","toc_asset_id":"api/_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.DataGridViewCellEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.datagridviewcelleventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.datagridviewcelleventhandler","fileRelativePath":"api/System.Windows.Forms.DataGridViewCellEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}