{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ControlParser</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides methods for creating a Web server <a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a> control or <a class=\"xref\" href=\"system.web.ui.itemplate\" data-linktype=\"relative-path\">ITemplate</a> interface from a string of markup that represents a persisted control or template.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public sealed class ControlParser</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">ControlParser</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example shows how to get the HTML markup for a control on a page using the <a class=\"xref\" href=\"system.web.ui.design.controlpersister\" data-linktype=\"relative-path\">ControlPersister</a> class and how to instantiate a control from it using the ControlParser class. The example also shows how to display Microsoft Windows dialog boxes from a designer.  </p>\n<pre><code class=\"lang-cpp\" name=\"ControlParserPersisterExample#1\">#using &lt;System.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.Web.dll&gt;\n#using &lt;System.Design.dll&gt;\n#using &lt;System.Windows.Forms.dll&gt;\n\nusing namespace System;\nusing namespace System::Drawing;\nusing namespace System::Drawing::Design;\nusing namespace System::IO;\nusing namespace System::Web::UI;\nusing namespace System::Web::UI::Design;\nusing namespace System::Web::UI::WebControls;\nusing namespace System::ComponentModel;\nusing namespace System::ComponentModel::Design;\nusing namespace System::Windows::Forms;\nusing namespace System::Windows::Forms::Design;\n\n// Provides a form with a multiline text box display.\nprivate ref class StringDisplayForm: public Form\n{\npublic:\n   StringDisplayForm( String^ displayText )\n   {\n      this-&gt;Size = System::Drawing::Size( 400, 400 );\n      this-&gt;Text = &quot;Control Persistence String&quot;;\n      this-&gt;SuspendLayout();\n      System::Windows::Forms::TextBox^ tbox = gcnew System::Windows::Forms::TextBox;\n      tbox-&gt;Multiline = true;\n      tbox-&gt;Size = System::Drawing::Size( this-&gt;Width - 40, this-&gt;Height - 90 );\n      tbox-&gt;Text = displayText;\n      this-&gt;Controls-&gt;Add( tbox );\n      System::Windows::Forms::Button^ okButton = gcnew System::Windows::Forms::Button;\n      okButton-&gt;Text = &quot;OK&quot;;\n      okButton-&gt;Size = System::Drawing::Size( 80, 24 );\n      okButton-&gt;Location = Point(this-&gt;Width - 100,this-&gt;Height - 60);\n      okButton-&gt;Anchor = AnchorStyles(AnchorStyles::Bottom | AnchorStyles::Right);\n      okButton-&gt;DialogResult = ::DialogResult::OK;\n      this-&gt;Controls-&gt;Add( okButton );\n      this-&gt;ResumeLayout();\n   }\n\n};\n\n// Provides a form with a list for selection.\nprivate ref class ControlSelectionForm: public Form\n{\nprivate:\n   array&lt;System::Web::UI::Control^&gt;^controlArray;\n\npublic:\n   System::Windows::Forms::ListBox^ controlList;\n   ControlSelectionForm( array&lt;System::Web::UI::Control^&gt;^controlArray )\n   {\n      this-&gt;controlArray = controlArray;\n      this-&gt;Size = System::Drawing::Size( 400, 500 );\n      this-&gt;Text = &quot;Control Persister Selection Form&quot;;\n      this-&gt;SuspendLayout();\n      System::Windows::Forms::Label ^ label1 = gcnew System::Windows::Forms::Label;\n      label1-&gt;Text = &quot;Select the control to persist:&quot;;\n      label1-&gt;Size = System::Drawing::Size( 240, 20 );\n      label1-&gt;Location = Point(10,10);\n      this-&gt;Controls-&gt;Add( label1 );\n      controlList = gcnew System::Windows::Forms::ListBox;\n      controlList-&gt;Size = System::Drawing::Size( 370, 400 );\n      controlList-&gt;Location = Point(10,30);\n      controlList-&gt;Anchor = AnchorStyles(AnchorStyles::Left | AnchorStyles::Top | AnchorStyles::Bottom | AnchorStyles::Right);\n      this-&gt;Controls-&gt;Add( controlList );\n      System::Windows::Forms::Button^ okButton = gcnew System::Windows::Forms::Button;\n      okButton-&gt;Text = &quot;OK&quot;;\n      okButton-&gt;Size = System::Drawing::Size( 80, 24 );\n      okButton-&gt;Location = Point(this-&gt;Width - 100,this-&gt;Height - 60);\n      okButton-&gt;Anchor = AnchorStyles(AnchorStyles::Bottom | AnchorStyles::Right);\n      okButton-&gt;DialogResult = ::DialogResult::OK;\n      this-&gt;Controls-&gt;Add( okButton );\n      System::Windows::Forms::Button^ cancelButton = gcnew System::Windows::Forms::Button;\n      cancelButton-&gt;Text = &quot;Cancel&quot;;\n      cancelButton-&gt;Size = System::Drawing::Size( 80, 24 );\n      cancelButton-&gt;Location = Point(this-&gt;Width - 200,this-&gt;Height - 60);\n      cancelButton-&gt;Anchor = AnchorStyles(AnchorStyles::Bottom | AnchorStyles::Right);\n      cancelButton-&gt;DialogResult = ::DialogResult::Cancel;\n      this-&gt;Controls-&gt;Add( cancelButton );\n      for ( int i = 0; i &lt; controlArray-&gt;Length; i++ )\n         controlList-&gt;Items-&gt;Add( controlArray[ i ]-&gt;UniqueID );\n      this-&gt;ResumeLayout();\n   }\n};\n\n// Provides a form with a multiline text box for input.\nprivate ref class StringInputForm: public Form\n{\npublic:\n   System::Windows::Forms::TextBox^ tbox;\n   StringInputForm()\n   {\n      this-&gt;Size = System::Drawing::Size( 400, 400 );\n      this-&gt;Text = &quot;Input Control Persistence String&quot;;\n      this-&gt;SuspendLayout();\n      tbox = gcnew System::Windows::Forms::TextBox;\n      tbox-&gt;Multiline = true;\n      tbox-&gt;Size = System::Drawing::Size( this-&gt;Width - 40, this-&gt;Height - 90 );\n      tbox-&gt;Text = &quot;&quot;;\n      this-&gt;Controls-&gt;Add( tbox );\n      System::Windows::Forms::Button^ okButton = gcnew System::Windows::Forms::Button;\n      okButton-&gt;Text = &quot;OK&quot;;\n      okButton-&gt;Size = System::Drawing::Size( 80, 24 );\n      okButton-&gt;Location = Point(this-&gt;Width - 100,this-&gt;Height - 60);\n      okButton-&gt;Anchor = AnchorStyles(AnchorStyles::Bottom | AnchorStyles::Right);\n      okButton-&gt;DialogResult = ::DialogResult::OK;\n      this-&gt;Controls-&gt;Add( okButton );\n      System::Windows::Forms::Button^ cancelButton = gcnew System::Windows::Forms::Button;\n      cancelButton-&gt;Text = &quot;Cancel&quot;;\n      cancelButton-&gt;Size = System::Drawing::Size( 80, 24 );\n      cancelButton-&gt;Location = Point(this-&gt;Width - 200,this-&gt;Height - 60);\n      cancelButton-&gt;Anchor = AnchorStyles(AnchorStyles::Bottom | AnchorStyles::Right);\n      cancelButton-&gt;DialogResult = ::DialogResult::Cancel;\n      this-&gt;Controls-&gt;Add( cancelButton );\n      this-&gt;ResumeLayout();\n   }\n};\n\n\n// Web control designer provides an interface\n// to use the ControlPersister and ControlParser.\npublic ref class ControlParserPersisterDesigner: public System::Web::UI::Design::ControlDesigner\n{\npublic:\n   ControlParserPersisterDesigner()\n      : ControlDesigner()\n   {}\n\n   property System::ComponentModel::Design::DesignerVerbCollection^ Verbs \n   {\n      // Provides designer verb menu commands to\n      // persist a control and to load a persisted control.\n      [System::Security::Permissions::PermissionSetAttribute(System::Security::Permissions::SecurityAction::Demand, Name=&quot;FullTrust&quot;)]\n      virtual System::ComponentModel::Design::DesignerVerbCollection^ get() override\n      {\n         DesignerVerbCollection^ dvc = gcnew DesignerVerbCollection;\n         dvc-&gt;Add( gcnew DesignerVerb( &quot;Load Persisted Control...&quot;,gcnew EventHandler( this, &amp;ControlParserPersisterDesigner::loadPersistedControl ) ) );\n         dvc-&gt;Add( gcnew DesignerVerb( &quot;Parse and Save Control...&quot;,gcnew EventHandler( this, &amp;ControlParserPersisterDesigner::saveControl ) ) );\n         return dvc;\n      }\n\n   }\n\nprivate:\n\n   // Displays a textbox form to receive an HTML\n   // String* that represents a control, and creates\n   // a toolbox item for the control, if not already\n   // present in the selected toolbox category.\n   void loadPersistedControl( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      // Display a StringInputForm to obtain a persisted control String*.\n      StringInputForm^ inputForm = gcnew StringInputForm;\n      if ( inputForm-&gt;ShowDialog() != DialogResult::OK )\n            return;\n\n      if ( inputForm-&gt;tbox-&gt;Text-&gt;Length &lt; 2 )\n            return;\n\n      // Obtain an IDesignerHost* for the design-mode document.\n\t  IDesignerHost^ host = dynamic_cast&lt;IDesignerHost^&gt;(this-&gt;Component-&gt;Site-&gt;GetService( IDesignerHost::typeid ));\n      \n      // Create a Web control from the persisted control String*.\n      System::Web::UI::Control^ ctrl = ControlParser::ParseControl( host, inputForm-&gt;tbox-&gt;Text-&gt;Trim() );\n\n      // Create a Web control toolbox item for the type of the control\n      WebControlToolboxItem^ item = gcnew WebControlToolboxItem( ctrl-&gt;GetType() );\n      \n      // Add the Web control toolbox item to the toolbox\n      IToolboxService^ toolService = dynamic_cast&lt;IToolboxService^&gt;(this-&gt;Component-&gt;Site-&gt;GetService( IToolboxService::typeid ));\n      if ( toolService != nullptr )\n            toolService-&gt;AddToolboxItem( item );\n      else\n            throw gcnew Exception( &quot;IToolboxService* was not found.&quot; );\n   }\n\n   // Displays a list of controls in the project, if any,\n   // and displays the HTML representing the persisted, selected control.\n   void saveControl( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      // Get the collection of components in the current\n      // design mode document.\n      ComponentCollection^ documentComponents = this-&gt;Component-&gt;Site-&gt;Container-&gt;Components;\n\n      // Filter the components to those that derive from the\n      // System::Web::UI::Control class.\n      // Create an IComponent* array of the maximum possible length needed.\n      array&lt;IComponent^&gt;^filterArray = gcnew array&lt;IComponent^&gt;(documentComponents-&gt;Count);\n\n      // Count the total qualifying components.\n      int total = 0;\n      for ( int i = 0; i &lt; documentComponents-&gt;Count; i++ )\n      {\n         // If the component derives from System::Web::UI::Control,\n         // copy a reference to the control to the filterArray\n         // array and increment the control count.\n         if ( System::Web::UI::Control::typeid-&gt;IsAssignableFrom( documentComponents[i]-&gt;GetType() ) )\n         {\n            if ( (dynamic_cast&lt;System::Web::UI::Control^&gt;(documentComponents[i]))-&gt;UniqueID != nullptr )\n            {\n               filterArray[total] = documentComponents[i];\n               total++;\n            }\n         }\n\n      }\n      if ( total == 0 )\n            throw gcnew Exception( &quot;Document contains no System::Web::UI::Control components.&quot; );\n\n      // Move the components that derive from System::Web::UI::Control to a\n      // new array of the correct size.\n      array&lt;System::Web::UI::Control^&gt;^controlArray = gcnew array&lt;System::Web::UI::Control^&gt;(total);\n      for ( int i = 0; i &lt; total; i++ )\n         controlArray[i] = dynamic_cast&lt;System::Web::UI::Control^&gt;(filterArray[i]);\n\n      // Create a ControlSelectionForm to provide a persistence\n      // configuration interface.\n      ControlSelectionForm^ selectionForm = gcnew ControlSelectionForm( controlArray );\n\n      // Display the form.\n      if ( selectionForm-&gt;ShowDialog() != DialogResult::OK )\n            return;\n\n      // Validate the selection.\n      if ( selectionForm-&gt;controlList-&gt;SelectedIndex == -1 )\n            throw gcnew Exception( &quot;You must select a control to persist.&quot; );\n\n      // Parse the selected control.\n      String^ persistedData = ControlPersister::PersistControl( controlArray[ selectionForm-&gt;controlList-&gt;SelectedIndex ] );\n\n      // Display the control persistence String* in a text box.\n      StringDisplayForm^ displayForm = gcnew StringDisplayForm( persistedData );\n      displayForm-&gt;ShowDialog();\n   }\n};\n\n// Simple text display control hosts the ControlParserPersisterDesigner.\n\n[DesignerAttribute(ControlParserPersisterDesigner::typeid,IDesigner::typeid)]\npublic ref class ControlParserPersisterDesignerControl: public WebControl\n{\nprivate:\n   String^ text;\n\npublic:\n\n   property String^ Text \n   {\n      [Bindable(true),\n      Category(&quot;Appearance&quot;),\n      DefaultValue(&quot;&quot;)]\n      String^ get()\n      {\n         return text;\n      }\n\n      void set( String^ value )\n      {\n         text = value;\n      }\n   }\n   ControlParserPersisterDesignerControl()\n      : WebControl()\n   {\n      text = &quot;Right-click here to access control persistence methods in design mode&quot;;\n   }\n\nprotected:\n   virtual void Render( HtmlTextWriter^ output ) override\n   {\n      output-&gt;Write( Text );\n   }\n};\n</code></pre><pre><code class=\"lang-vb\" name=\"ControlParserPersisterExample#1\">Imports Microsoft.VisualBasic\nImports System\nImports System.Drawing\nImports System.Drawing.Design\nImports System.Web.UI\nImports System.Web.UI.Design\nImports System.Web.UI.WebControls\nImports System.ComponentModel\nImports System.ComponentModel.Design\nImports System.Windows.Forms\nImports System.Windows.Forms.Design\n\nNamespace ControlParserPersisterDesignerControl_VB\n\n    &#39; Web control designer provides an interface \n    &#39;   to use the ControlPersister and ControlParser.\n    &#39; The DesignerActionListCollection must run under &quot;FullTrust&quot;,\n    &#39;   so you must also require your designer to run under &quot;FullTrust&quot;.\n    &lt;System.Security.Permissions.PermissionSetAttribute( _\n        System.Security.Permissions.SecurityAction.InheritanceDemand, _\n        Name:=&quot;FullTrust&quot;)&gt; _\n    &lt;System.Security.Permissions.PermissionSetAttribute( _\n         Security.Permissions.SecurityAction.Demand, _\n         Name:=&quot;FullTrust&quot;)&gt; _\n    Public Class ControlParserPersisterDesigner\n        Inherits System.Web.UI.Design.ControlDesigner\n\n        Private _actLists As DesignerActionListCollection\n\n        Public Sub New()\n        End Sub\n\n        &#39; Creates designer menu commands to persist \n        &#39; a control and to load a persisted control.\n        Public Overrides ReadOnly Property ActionLists() As System.ComponentModel.Design.DesignerActionListCollection\n            Get\n                If IsNothing(_actLists) Then\n                    _actLists = New DesignerActionListCollection()\n                    _actLists.AddRange(MyBase.ActionLists)\n                    _actLists.Add(New ParserActionList(Me))\n                End If\n\n                Return _actLists\n            End Get\n        End Property\n        &#39;Public Overrides ReadOnly Property Verbs() _\n        &#39;As System.ComponentModel.Design.DesignerVerbCollection\n        &#39;    Get\n        &#39;        Dim dvc As New DesignerVerbCollection()\n        &#39;        dvc.Add(New DesignerVerb(&quot;Load Persisted Control...&quot;, _\n        &#39;            New EventHandler(AddressOf Me.loadPersistedControl)))\n        &#39;        dvc.Add(New DesignerVerb(&quot;Parse and Save Control...&quot;, _\n        &#39;            New EventHandler(AddressOf Me.saveControl)))\n        &#39;        Return dvc\n        &#39;    End Get\n        &#39;End Property\n\n        &#39; Displays a textbox form to receive an HTML \n        &#39; string that represents a control, and creates\n        &#39; a toolbox item for the control, if not already\n        &#39; present in the selected toolbox category.\n\n        Private Class ParserActionList\n            Inherits DesignerActionList\n\n            Private _parent As ControlParserPersisterDesigner\n            Private _items As DesignerActionItemCollection\n\n            Public Sub New(ByVal parent As ControlParserPersisterDesigner)\n                MyBase.New(parent.Component)\n                _parent = parent\n            End Sub\n\n            Public Overrides Function GetSortedActionItems() As System.ComponentModel.Design.DesignerActionItemCollection\n                If IsNothing(_items) Then\n                    _items = New DesignerActionItemCollection()\n                    _items.Add(New DesignerActionMethodItem(Me, &quot;saveControl&quot;, &quot;Parse and Save Control...&quot;, True))\n                    _items.Add(New DesignerActionMethodItem(Me, &quot;loadPersistedControl&quot;, &quot;Load Persisted Control...&quot;, True))\n                End If\n                Return _items\n            End Function\n\n            &#39; Displays a list of controls in the project, if any,\n            &#39; and displays the HTML markup for the selected control.       \n            Private Sub saveControl()\n                &#39; Get the collection of components in the current \n                &#39; design mode document.\n                Dim documentComponents As ComponentCollection = _\n                    Me.Component.Site.Container.Components\n\n                &#39; Filter the components to those that derive from the \n                &#39; System.Web.UI.Control class.\n\n                &#39; Create an IComponent array of the maximum possible length needed.\n                Dim filterArray(documentComponents.Count) As IComponent\n\n                &#39; Count the total qualifying components.\n                Dim total As Integer = 0\n                Dim i As Integer\n                For i = 0 To documentComponents.Count - 1\n                    &#39; If the component derives from System.Web.UI.Control, \n                    &#39; copy a reference to the control to the filterArray \n                    &#39; array and increment the control count.\n                    If GetType(System.Web.UI.Control).IsAssignableFrom(CType(documentComponents(i), Object).GetType()) Then\n                        If Not (CType(documentComponents(i), System.Web.UI.Control).UniqueID Is Nothing) Then\n                            filterArray(total) = documentComponents(i)\n                            total += 1\n                        End If\n                    End If\n                Next i\n\n                If total = 0 Then\n                    Throw New Exception( _\n                        &quot;Document contains no System.Web.UI.Control components.&quot;)\n                End If\n\n                &#39; Move the components that derive from System.Web.UI.Control to a \n                &#39; new array of the correct size.\n                Dim controlArray(total - 1) As System.Web.UI.Control\n\n                For i = 0 To total - 1\n                    controlArray(i) = CType(filterArray(i), System.Web.UI.Control)\n                Next i\n\n                &#39; Create a ControlSelectionForm to provide a persistence \n                &#39; configuration interface.\n                Dim selectionForm As New ControlSelectionForm(controlArray)\n\n                &#39; Display the form.\n                If selectionForm.ShowDialog() &lt;&gt; DialogResult.OK Then\n                    Return\n                End If\n\n                &#39; Validate the selection.\n                If selectionForm.controlList.SelectedIndex = -1 Then\n                    Throw New Exception(&quot;You must select a control to persist.&quot;)\n                End If\n\n                &#39; Parse the selected control.\n                Dim persistedData As String = ControlPersister.PersistControl( _\n                    controlArray(selectionForm.controlList.SelectedIndex))\n\n                &#39; Display the control persistence string in a text box.\n                Dim displayForm As New StringDisplayForm(persistedData)\n                displayForm.ShowDialog()\n            End Sub\n\n            &#39; Displays a textbox form to receive an HTML \n            &#39; string that represents a control, and creates\n            &#39; a toolbox item for the control, if not already\n            &#39; present in the selected toolbox category.\n            Private Sub loadPersistedControl()\n                &#39; Display a StringInputForm to obtain a persisted control string.\n                Dim inputForm As New StringInputForm()\n\n                If inputForm.ShowDialog() &lt;&gt; DialogResult.OK Then\n                    Return\n                End If\n                If inputForm.TxBox.Text.Length &lt; 2 Then\n                    Return\n                End If\n                &#39; Obtain an IDesignerHost for the design-mode document.\n                Dim host As IDesignerHost = CType(Me.Component.Site.GetService(GetType(IDesignerHost)), IDesignerHost)\n\n                &#39; Create a Web control from the persisted control string.\n                Dim ctrl As System.Web.UI.Control = ControlParser.ParseControl(host, inputForm.TxBox.Text.Trim())\n\n                &#39; Create a Web control toolbox item for the type of the control.\n                Dim item As New System.Web.UI.Design.WebControlToolboxItem(ctrl.GetType())\n\n                &#39; Add the Web control toolbox item to the toolbox.\n                Dim toolService As IToolboxService = CType(Me.Component.Site.GetService(GetType(IToolboxService)), IToolboxService)\n                If Not (toolService Is Nothing) Then\n                    toolService.AddToolboxItem(item)\n                Else\n                    Throw New Exception(&quot;IToolboxService was not found.&quot;)\n                End If\n            End Sub\n        End Class\n    End Class\n\n    &#39; Simple text display control hosts the ControlParserPersisterDesigner.\n    &lt;DesignerAttribute(GetType(ControlParserPersisterDesigner), _\n        GetType(IDesigner))&gt; _\n    Public Class ControlParserPersisterDesignerControl\n        Inherits System.Web.UI.WebControls.WebControl\n\n        Private _text As String\n\n        &lt;Bindable(True), _\n            Category(&quot;Appearance&quot;), _\n            DefaultValue(&quot;&quot;)&gt; _\n        Public Property [Text]() As String\n            Get\n                Return _text\n            End Get\n            Set(ByVal Value As String)\n                _text = Value\n            End Set\n        End Property\n\n        Public Sub New()\n            [Text] = &quot;Right-click here to access control persistence &quot; &amp; _\n                        &quot;methods in design mode&quot;\n        End Sub\n\n        Protected Overrides Sub Render(ByVal output As HtmlTextWriter)\n            output.Write([Text])\n        End Sub\n    End Class\n\n    &#39; Provides a form with a list for selection.\n    Friend Class ControlSelectionForm\n        Inherits System.Windows.Forms.Form\n        Private controlArray() As System.Web.UI.Control\n        Public controlList As System.Windows.Forms.ListBox\n\n        Public Sub New(ByVal controlArray() As System.Web.UI.Control)\n            Me.controlArray = controlArray\n\n            Me.Size = New Size(400, 500)\n            Me.Text = &quot;Control Persister Selection Form&quot;\n\n            Me.SuspendLayout()\n\n            Dim label1 As New System.Windows.Forms.Label()\n            label1.Text = &quot;Select the control to persist:&quot;\n            label1.Size = New Size(240, 20)\n            label1.Location = New Point(10, 10)\n            Me.Controls.Add(label1)\n\n            controlList = New System.Windows.Forms.ListBox()\n            controlList.Size = New Size(370, 400)\n            controlList.Location = New Point(10, 30)\n            controlList.Anchor = AnchorStyles.Left Or AnchorStyles.Top _\n                    Or AnchorStyles.Bottom Or AnchorStyles.Right\n            Me.Controls.Add(controlList)\n\n            Dim okButton As New System.Windows.Forms.Button()\n            okButton.Text = &quot;OK&quot;\n            okButton.Size = New Size(80, 24)\n            okButton.Location = New Point(Me.Width - 100, Me.Height - 60)\n            okButton.Anchor = AnchorStyles.Bottom Or AnchorStyles.Right\n            okButton.DialogResult = DialogResult.OK\n            Me.Controls.Add(okButton)\n\n            Dim cancelButton As New System.Windows.Forms.Button()\n            cancelButton.Text = &quot;Cancel&quot;\n            cancelButton.Size = New Size(80, 24)\n            cancelButton.Location = New Point(Me.Width - 200, Me.Height - 60)\n            cancelButton.Anchor = AnchorStyles.Bottom Or AnchorStyles.Right\n            cancelButton.DialogResult = DialogResult.Cancel\n            Me.Controls.Add(cancelButton)\n\n            Dim i As Integer\n            For i = 0 To controlArray.Length - 1\n                controlList.Items.Add(controlArray(i).UniqueID)\n            Next i\n            Me.ResumeLayout()\n        End Sub\n    End Class\n\n    &#39; Provides a form with a multiline text box display.\n    Friend Class StringDisplayForm\n        Inherits System.Windows.Forms.Form\n\n        Private tbox As New System.Windows.Forms.TextBox()\n\n        Public Property TxBox() As System.Windows.Forms.TextBox\n            Get\n                Return tbox\n            End Get\n            Set(ByVal value As System.Windows.Forms.TextBox)\n                tbox = value\n            End Set\n        End Property\n\n        Public Sub New(ByVal displayText As String)\n            Me.Size = New Size(400, 300)\n            Me.Text = &quot;Control Persistence String&quot;\n\n            Me.SuspendLayout()\n            Dim tbox As New System.Windows.Forms.TextBox()\n            tbox.Multiline = True\n            tbox.Size = New Size(Me.Width - 40, Me.Height - 90)\n            tbox.Text = displayText\n            Me.Controls.Add(tbox)\n\n            Dim okButton As New System.Windows.Forms.Button()\n            okButton.Text = &quot;OK&quot;\n            okButton.Size = New Size(80, 24)\n            okButton.Location = New Point(Me.Width - 100, Me.Height - 60)\n            okButton.Anchor = AnchorStyles.Bottom Or AnchorStyles.Right\n            okButton.DialogResult = DialogResult.OK\n            Me.Controls.Add(okButton)\n\n            Me.ResumeLayout()\n        End Sub\n    End Class\n\n    &#39; Provides a form with a multiline text box for input.\n    Friend Class StringInputForm\n        Inherits System.Windows.Forms.Form\n        Private tbox As New System.Windows.Forms.TextBox()\n\n        Public Property TxBox() As System.Windows.Forms.TextBox\n            Get\n                Return tbox\n            End Get\n            Set(ByVal value As System.Windows.Forms.TextBox)\n                tbox = value\n            End Set\n        End Property\n\n        Public Sub New()\n            Me.Size = New Size(400, 400)\n            Me.Text = &quot;Input Control Persistence String&quot;\n\n            Me.SuspendLayout()\n            tbox = New System.Windows.Forms.TextBox()\n            tbox.Multiline = True\n            tbox.Size = New Size(Me.Width - 40, Me.Height - 90)\n            tbox.Text = &quot;&quot;\n            Me.Controls.Add(tbox)\n\n            Dim okButton As New System.Windows.Forms.Button()\n            okButton.Text = &quot;OK&quot;\n            okButton.Size = New Size(80, 24)\n            okButton.Location = New Point(Me.Width - 100, Me.Height - 60)\n            okButton.Anchor = AnchorStyles.Bottom Or AnchorStyles.Right\n            okButton.DialogResult = DialogResult.OK\n            Me.Controls.Add(okButton)\n\n            Dim cancelButton As New System.Windows.Forms.Button()\n            cancelButton.Text = &quot;Cancel&quot;\n            cancelButton.Size = New Size(80, 24)\n            cancelButton.Location = New Point(Me.Width - 200, Me.Height - 60)\n            cancelButton.Anchor = AnchorStyles.Bottom Or AnchorStyles.Right\n            cancelButton.DialogResult = DialogResult.Cancel\n            Me.Controls.Add(cancelButton)\n\n            Me.ResumeLayout()\n        End Sub\n    End Class\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"ControlParserPersisterExample#1\">using System;\nusing System.Drawing;\nusing System.Drawing.Design;\nusing System.Web.UI;\nusing System.Web.UI.Design;\nusing System.Web.UI.WebControls;\nusing System.ComponentModel;\nusing System.ComponentModel.Design;\nusing System.Windows.Forms;\nusing System.Windows.Forms.Design;\n\nnamespace ControlParserPersisterDesignerControl_CS\n{\n    // Web control designer provides an interface \n    //   to use the ControlPersister and ControlParser.\n    // The DesignerActionListCollection must run under &quot;FullTrust&quot;,\n    //   so you must also require your designer to run under &quot;FullTrust&quot;.\n    [System.Security.Permissions.PermissionSetAttribute(\n        System.Security.Permissions.SecurityAction.InheritanceDemand, \n        Name = &quot;FullTrust&quot;)]\n    [System.Security.Permissions.PermissionSetAttribute(\n        System.Security.Permissions.SecurityAction.Demand, \n        Name = &quot;FullTrust&quot;)]\n    public class ControlParserPersisterDesigner :\n        System.Web.UI.Design.ControlDesigner\n    {\n        private DesignerActionListCollection _actLists = null;\n\n        public ControlParserPersisterDesigner()\n            : base()\n        {}\n\n        // Creates designer menu commands to persist\n        // a control and to load a persisted control.\n        public override DesignerActionListCollection ActionLists\n        {\n            get\n            {\n                if (_actLists == null)\n                {\n                    _actLists = new DesignerActionListCollection();\n                    _actLists.AddRange(base.ActionLists);\n                    _actLists.Add(new ParserActionList(this));\n                }\n                return _actLists;\n            }\n        }\n\n        // A custom class for the DesignerActionList\n        private class ParserActionList : DesignerActionList\n        {\n            private ControlParserPersisterDesigner _parent;\n            private DesignerActionItemCollection _items;\n\n            public ParserActionList(ControlParserPersisterDesigner parent) : \n                base(parent.Component)\n            {\n                _parent = parent;\n            }\n\n            public override DesignerActionItemCollection GetSortedActionItems()\n            {\n                if (_items == null)\n                {\n                    // Create the collection\n                    _items = new DesignerActionItemCollection();\n\n                    _items.Add(new DesignerActionMethodItem(this, &quot;saveControl&quot;, &quot;Parse and Save Control...&quot;, true));\n                    _items.Add(new DesignerActionMethodItem(this, &quot;loadPersistedControl&quot;, &quot;Load Persisted Control...&quot;, true));\n                }\n                return _items;\n            }\n\n            // Displays a list of controls in the project, if any,\n            // and displays the HTML markup for the selected control.       \n            private void saveControl()\n            {\n                // Get the collection of components in the current \n                // design mode document.\n                ComponentCollection documentComponents =\n                    this.Component.Site.Container.Components;\n\n                // Filter the components to those that derive from the \n                // System.Web.UI.Control class.\n\n                // Create an IComponent array of the maximum possible length needed.\n                IComponent[] filterArray = new IComponent[documentComponents.Count];\n\n                // Count the total qualifying components.\n                int total = 0;\n                for (int i = 0; i &lt; documentComponents.Count; i++)\n                {\n                    // If the component derives from System.Web.UI.Control, \n                    // copy a reference to the control to the filterArray \n                    // array and increment the control count.\n                    if (typeof(System.Web.UI.Control).IsAssignableFrom(\n                        documentComponents[i].GetType()))\n                    {\n                        if (((System.Web.UI.Control)documentComponents[i]).UniqueID\n                            != null)\n                        {\n                            filterArray[total] = documentComponents[i];\n                            total++;\n                        }\n                    }\n                }\n\n                if (total == 0)\n                    throw new Exception(\n                        &quot;Document contains no System.Web.UI.Control components.&quot;);\n\n                // Move the components that derive from System.Web.UI.Control to a \n                // new array of the correct size.\n                System.Web.UI.Control[] controlArray =\n                    new System.Web.UI.Control[total];\n                for (int i = 0; i &lt; total; i++)\n                    controlArray[i] = (System.Web.UI.Control)filterArray[i];\n\n                // Create a ControlSelectionForm to select a control.\n                ControlSelectionForm selectionForm =\n                    new ControlSelectionForm(controlArray);\n\n                // Display the form.\n                if (selectionForm.ShowDialog() != DialogResult.OK)\n                    return;\n\n                // Validate the selection.\n                if (selectionForm.controlList.SelectedIndex == -1)\n                    throw new Exception(&quot;You must select a control to persist.&quot;);\n\n                // Parse the selected control into a persistence string.\n                string persistedData = ControlPersister.PersistControl(\n                    controlArray[selectionForm.controlList.SelectedIndex]);\n\n                // Display the persistence string in a text box.\n                StringDisplayForm displayForm =\n                    new StringDisplayForm(persistedData);\n                displayForm.ShowDialog();\n            }\n\n            // Displays a textbox form to receive an HTML \n            // string that represents a control, and creates\n            // a toolbox item for the control, if not already\n            // present in the selected toolbox category.\n            private void loadPersistedControl()\n            {\n                // Display a StringInputForm to obtain a persisted control string.\n                StringInputForm inputForm = new StringInputForm();\n\n                if (inputForm.ShowDialog() != DialogResult.OK)\n                    return;\n                if (inputForm.TBox.Text.Length &lt; 2)\n                    return;\n\n                // Obtain an IDesignerHost for the design-mode document.\n                IDesignerHost host = (IDesignerHost)\n                    this.Component.Site.GetService(typeof(IDesignerHost));\n\n                // Create a Web control from the HTML markup.\n                System.Web.UI.Control ctrl =\n                    ControlParser.ParseControl(host, inputForm.TBox.Text.Trim());\n\n                // Create a Web control toolbox item for the type of the control\n                System.Web.UI.Design.WebControlToolboxItem item =\n                    new System.Web.UI.Design.WebControlToolboxItem(ctrl.GetType());\n\n                // Add the Web control toolbox item to the toolbox\n                IToolboxService toolService = (IToolboxService)\n                    this.Component.Site.GetService(typeof(IToolboxService));\n                if (toolService != null)\n                    toolService.AddToolboxItem(item);\n                else\n                    throw new Exception(&quot;IToolboxService was not found.&quot;);\n            }\n        }\n    }\n\n    // Simple text display control hosts the ControlParserPersisterDesigner.\n    [DesignerAttribute(typeof(ControlParserPersisterDesigner),\n         typeof(IDesigner))]\n    public class ControlParserPersisterDesignerControl :\n        System.Web.UI.WebControls.WebControl\n    {\n        private string _text;\n\n        [Bindable(true),\n            Category(&quot;Appearance&quot;),\n            DefaultValue(&quot;&quot;)]\n        public string Text\n        {\n            get { return _text; }\n            set { _text = value; }\n        }\n\n        public ControlParserPersisterDesignerControl()\n            : base()\n        {\n            _text = &quot;Right-click here to access control persistence &quot; +\n                &quot;methods in design mode&quot;;\n        }\n\n        protected override void Render(HtmlTextWriter output)\n        {\n            output.Write(Text);\n        }\n    }\n\n    // Provides a form with a list for selection.\n    internal class ControlSelectionForm : Form\n    {\n        private System.Web.UI.Control[] controlArray;\n        public System.Windows.Forms.ListBox controlList;\n\n        public ControlSelectionForm(System.Web.UI.Control[] controlArray)\n        {\n            this.controlArray = controlArray;\n\n            this.Size = new Size(400, 500);\n            this.Text = &quot;Control Selection Form&quot;;\n\n            this.SuspendLayout();\n\n            System.Windows.Forms.Label label1 =\n                new System.Windows.Forms.Label();\n            label1.Text = &quot;Select a control to parse:&quot;;\n            label1.Size = new Size(240, 20);\n            label1.Location = new Point(10, 10);\n            this.Controls.Add(label1);\n\n            controlList = new System.Windows.Forms.ListBox();\n            controlList.Size = new Size(370, 400);\n            controlList.Location = new Point(10, 30);\n            controlList.Anchor = AnchorStyles.Left | AnchorStyles.Top |\n                AnchorStyles.Bottom | AnchorStyles.Right;\n            this.Controls.Add(controlList);\n\n            System.Windows.Forms.Button okButton =\n                new System.Windows.Forms.Button();\n            okButton.Text = &quot;OK&quot;;\n            okButton.Size = new Size(80, 24);\n            okButton.Location =\n                new Point(this.Width - 100, this.Height - 60);\n            okButton.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;\n            okButton.DialogResult = DialogResult.OK;\n            this.Controls.Add(okButton);\n\n            System.Windows.Forms.Button cancelButton =\n                new System.Windows.Forms.Button();\n            cancelButton.Text = &quot;Cancel&quot;;\n            cancelButton.Size = new Size(80, 24);\n            cancelButton.Location =\n                new Point(this.Width - 200, this.Height - 60);\n            cancelButton.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;\n            cancelButton.DialogResult = DialogResult.Cancel;\n            this.Controls.Add(cancelButton);\n\n            for (int i = 0; i &lt; controlArray.Length; i++)\n                controlList.Items.Add(controlArray[i].UniqueID);\n\n            this.ResumeLayout();\n        }\n    }\n\n    // Provides a form with a multiline text box display.\n    internal class StringDisplayForm : Form\n    {\n        private System.Windows.Forms.TextBox tbox = \n            new System.Windows.Forms.TextBox();\n\n        public System.Windows.Forms.TextBox TBox\n        {\n            get { return tbox; }\n            set { tbox = value; }\n        }\n\n        public StringDisplayForm(string displayText)\n        {\n            this.Size = new Size(400, 300);\n            this.Text = &quot;Control Persistence String&quot;;\n\n            this.SuspendLayout();\n            TBox.Multiline = true;\n            TBox.Size = new Size(this.Width - 40, this.Height - 90);\n            TBox.Text = displayText;\n            this.Controls.Add(TBox);\n\n            System.Windows.Forms.Button okButton =\n                new System.Windows.Forms.Button();\n            okButton.Text = &quot;OK&quot;;\n            okButton.Size = new Size(80, 24);\n            okButton.Location =\n                new Point(this.Width - 100, this.Height - 60);\n            okButton.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;\n            okButton.DialogResult = DialogResult.OK;\n            this.Controls.Add(okButton);\n\n            this.ResumeLayout();\n        }\n    }\n\n    // Provides a form with a multiline text box for input.\n    internal class StringInputForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.TextBox tbox = \n            new System.Windows.Forms.TextBox();\n\n        public System.Windows.Forms.TextBox TBox\n        {\n            get { return tbox; }\n        }\n\n        public StringInputForm()\n        {\n            this.Size = new Size(400, 300);\n            this.Text = &quot;Input Control Persistence String&quot;;\n\n            this.SuspendLayout();\n            tbox = new System.Windows.Forms.TextBox();\n            tbox.Multiline = true;\n            tbox.Size = new Size(this.Width - 40, this.Height - 90);\n            tbox.Text = &quot;&quot;;\n            this.Controls.Add(tbox);\n\n            System.Windows.Forms.Button okButton =\n                new System.Windows.Forms.Button();\n            okButton.Text = &quot;OK&quot;;\n            okButton.Size = new Size(80, 24);\n            okButton.Location =\n                new Point(this.Width - 100, this.Height - 60);\n            okButton.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;\n            okButton.DialogResult = DialogResult.OK;\n            this.Controls.Add(okButton);\n\n            System.Windows.Forms.Button cancelButton =\n                new System.Windows.Forms.Button();\n            cancelButton.Text = &quot;Cancel&quot;;\n            cancelButton.Size = new Size(80, 24);\n            cancelButton.Location =\n                new Point(this.Width - 200, this.Height - 60);\n            cancelButton.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;\n            cancelButton.DialogResult = DialogResult.Cancel;\n            this.Controls.Add(cancelButton);\n\n            this.ResumeLayout();\n        }\n    }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The T:System.Web.UI.Design.ControlParser class provides methods that can create a T:System.Web.UI.Control control or T:System.Web.UI.ITemplate interface by parsing a string of markup representing a control or control template.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_Design_ControlParser_ParseControl_System_ComponentModel_Design_IDesignerHost_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ParseControl(IDesignerHost, String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Creates a control from the specified markup using the specified designer host.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Web.UI.Control ParseControl (System.ComponentModel.Design.IDesignerHost designerHost, string controlText);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>designerHost</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.design.idesignerhost\" data-linktype=\"relative-path\">IDesignerHost</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.componentmodel.design.idesignerhost\" data-linktype=\"relative-path\">IDesignerHost</a> instance that is the designer host for the page.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>controlText</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The HTML markup for the control.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a> that <em>controlText</em> represents; otherwise, <code>null</code>, if the parser cannot build the control.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A parameter is not valid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The ParseControl method accesses the string representing the register directives on the ASP.NET Web page using the services of the designer host. Designer host services are acquired through the <a class=\"xref\" href=\"system.web.ui.design.webformsrootdesigner#System_Web_UI_Design_WebFormsRootDesigner_ReferenceManager_\" data-linktype=\"relative-path\">ReferenceManager</a> property of the <a class=\"xref\" href=\"system.web.ui.design.controldesigner#System_Web_UI_Design_ControlDesigner_RootDesigner_\" data-linktype=\"relative-path\">RootDesigner</a> object, or if that is not available, the <a class=\"xref\" href=\"system.web.ui.design.iwebformreferencemanager\" data-linktype=\"relative-path\">IWebFormReferenceManager</a> service.  </p>\n<p> The ParseControl method throws an exception if the parser cannot build the control.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_Design_ControlParser_ParseControl_System_ComponentModel_Design_IDesignerHost_System_String_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ParseControl(IDesignerHost, String, String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Creates a control from the specified markup using the specified designer host and directives.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Web.UI.Control ParseControl (System.ComponentModel.Design.IDesignerHost designerHost, string controlText, string directives);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>designerHost</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.design.idesignerhost\" data-linktype=\"relative-path\">IDesignerHost</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.componentmodel.design.idesignerhost\" data-linktype=\"relative-path\">IDesignerHost</a> instance that is the designer host for the page.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>controlText</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The text of the HTML markup for the control.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>directives</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The page directives to include in the code for the control.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a> that <code>controlText</code> represents.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A parameter is not valid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The ParseControl method accesses the string representing the register directives on the ASP.NET Web page using the services of the designer host. Designer host services are acquired through the <a class=\"xref\" href=\"system.web.ui.design.webformsrootdesigner#System_Web_UI_Design_WebFormsRootDesigner_ReferenceManager_\" data-linktype=\"relative-path\">ReferenceManager</a> property of the <a class=\"xref\" href=\"system.web.ui.design.controldesigner#System_Web_UI_Design_ControlDesigner_RootDesigner_\" data-linktype=\"relative-path\">RootDesigner</a> object, or if that is not available, the <a class=\"xref\" href=\"system.web.ui.design.iwebformreferencemanager\" data-linktype=\"relative-path\">IWebFormReferenceManager</a> service.  </p>\n<p> The ParseControl method throws an exception if the parser cannot build the control.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_Design_ControlParser_ParseControls_System_ComponentModel_Design_IDesignerHost_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ParseControls(IDesignerHost, String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Creates an array of controls from the specified markup using the specified designer host.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Web.UI.Control[] ParseControls (System.ComponentModel.Design.IDesignerHost designerHost, string controlText);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>designerHost</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.design.idesignerhost\" data-linktype=\"relative-path\">IDesignerHost</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.componentmodel.design.idesignerhost\" data-linktype=\"relative-path\">IDesignerHost</a> instance that is the designer host for the page.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>controlText</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string that represents a collection of markup for controls.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a>[]</span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An array of <a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a> elements, parsed from <code>controlText</code>; otherwise, <code>null</code>, if the parser cannot build the controls.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>designerHost</code> is <code>null</code>.  </p>\n<p> - or -  </p>\n<p> <code>controlText</code> is <code>null</code> or an empty string (&quot;&quot;).</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The ParseControls method accesses the string representing the register directives on the ASP.NET Web page using the services of the designer host. Designer host services are acquired through the <a class=\"xref\" href=\"system.web.ui.design.webformsrootdesigner#System_Web_UI_Design_WebFormsRootDesigner_ReferenceManager_\" data-linktype=\"relative-path\">ReferenceManager</a> property of the <a class=\"xref\" href=\"system.web.ui.design.controldesigner#System_Web_UI_Design_ControlDesigner_RootDesigner_\" data-linktype=\"relative-path\">RootDesigner</a> object, or if that is not available, the <a class=\"xref\" href=\"system.web.ui.design.iwebformreferencemanager\" data-linktype=\"relative-path\">IWebFormReferenceManager</a> service.  </p>\n<p> The ParseControls method throws an exception if the parser cannot build the controls from the <code>controlText</code> parameter.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_Design_ControlParser_ParseTemplate_System_ComponentModel_Design_IDesignerHost_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ParseTemplate(IDesignerHost, String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Creates an <a class=\"xref\" href=\"system.web.ui.itemplate\" data-linktype=\"relative-path\">ITemplate</a> interface from the specified template markup.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Web.UI.ITemplate ParseTemplate (System.ComponentModel.Design.IDesignerHost designerHost, string templateText);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>designerHost</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.design.idesignerhost\" data-linktype=\"relative-path\">IDesignerHost</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.componentmodel.design.idesignerhost\" data-linktype=\"relative-path\">IDesignerHost</a> instance that is the designer host for the page.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>templateText</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string containing the template markup.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.itemplate\" data-linktype=\"relative-path\">ITemplate</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.web.ui.itemplate\" data-linktype=\"relative-path\">ITemplate</a> instance created by parsing <code>templateText</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>designerHost</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The ParseTemplate method accesses the string representing the register directives on the ASP.NET Web page using the services of the designer host. Designer host services are acquired through the <a class=\"xref\" href=\"system.web.ui.design.webformsrootdesigner#System_Web_UI_Design_WebFormsRootDesigner_ReferenceManager_\" data-linktype=\"relative-path\">ReferenceManager</a> property of the <a class=\"xref\" href=\"system.web.ui.design.controldesigner#System_Web_UI_Design_ControlDesigner_RootDesigner_\" data-linktype=\"relative-path\">RootDesigner</a> object, or if that is not available, the <a class=\"xref\" href=\"system.web.ui.design.iwebformreferencemanager\" data-linktype=\"relative-path\">IWebFormReferenceManager</a> service.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_Design_ControlParser_ParseTemplate_System_ComponentModel_Design_IDesignerHost_System_String_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ParseTemplate(IDesignerHost, String, String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Parses the specified template markup and creates an <a class=\"xref\" href=\"system.web.ui.itemplate\" data-linktype=\"relative-path\">ITemplate</a> interface.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Web.UI.ITemplate ParseTemplate (System.ComponentModel.Design.IDesignerHost designerHost, string templateText, string directives);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>designerHost</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.design.idesignerhost\" data-linktype=\"relative-path\">IDesignerHost</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.componentmodel.design.idesignerhost\" data-linktype=\"relative-path\">IDesignerHost</a> instance that is the designer host for the page.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>templateText</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string containing the template markup.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>directives</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Any directives to add to the beginning of the code for the template.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.itemplate\" data-linktype=\"relative-path\">ITemplate</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.web.ui.itemplate\" data-linktype=\"relative-path\">ITemplate</a> instance created by parsing <code>templateText</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>designerHost</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The ParseTemplate method accesses the string representing the register directives on the ASP.NET Web page using the services of the designer host. Designer host services are acquired through the <a class=\"xref\" href=\"system.web.ui.design.webformsrootdesigner#System_Web_UI_Design_WebFormsRootDesigner_ReferenceManager_\" data-linktype=\"relative-path\">ReferenceManager</a> property of the <a class=\"xref\" href=\"system.web.ui.design.controldesigner#System_Web_UI_Design_ControlDesigner_RootDesigner_\" data-linktype=\"relative-path\">RootDesigner</a> object, or if that is not available, the <a class=\"xref\" href=\"system.web.ui.design.iwebformreferencemanager\" data-linktype=\"relative-path\">IWebFormReferenceManager</a> service.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.Design.ControlParser.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.Design.ControlParser\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.Design.ControlParser.ParseControl\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.Design.ControlParser.ParseControls\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.Design.ControlParser.ParseTemplate\">\r\n<meta name=\"APILocation\" content=\"System.Design.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"ae757e81-d518-105f-ebb7-cf5141e2ed71\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides methods for creating a Web server  control or  interface from a string of markup that represents a persisted control or template.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.web.ui.design/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.Design.ControlParser\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.Design.ControlParser.yml","open_to_public_contributors":false,"api_name":["System.Web.UI.Design.ControlParser","System.Web.UI.Design.ControlParser.ParseControl","System.Web.UI.Design.ControlParser.ParseControls","System.Web.UI.Design.ControlParser.ParseTemplate"],"api_location":["System.Design.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.Design.ControlParser","System::Web::UI::Design::ControlParser","System.Web.UI.Design.ControlParser.ParseControl","System::Web::UI::Design::ControlParser::ParseControl","System.Web.UI.Design.ControlParser.ParseControls","System::Web::UI::Design::ControlParser::ParseControls","System.Web.UI.Design.ControlParser.ParseTemplate","System::Web::UI::Design::ControlParser::ParseTemplate"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"ae757e81-d518-105f-ebb7-cf5141e2ed71","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.Design/ControlParser.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ControlParser class | Microsoft Docs","_op_ogTitle":"ControlParser class","description":"Provides methods for creating a Web server  control or  interface from a string of markup that represents a persisted control or template.\n","toc_asset_id":"api/_splitted/System.Web.UI.Design/toc.json","toc_rel":"_splitted/System.Web.UI.Design/toc.json","source_url":"","ms.assetid":"System.Web.UI.Design.ControlParser","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.design.controlparser","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.design.controlparser","fileRelativePath":"api/System.Web.UI.Design.ControlParser.html"},"themesRelativePathToOutputRoot":"_themes/"}