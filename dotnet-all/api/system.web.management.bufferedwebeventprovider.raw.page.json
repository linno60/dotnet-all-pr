{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">BufferedWebEventProvider</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides the base functionality for creating event providers that require buffering.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public abstract class BufferedWebEventProvider : System.Web.Management.WebEventProvider</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.provider.providerbase\" data-linktype=\"relative-path\">ProviderBase</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.management.webeventprovider\" data-linktype=\"relative-path\">WebEventProvider</a></span></div><span class=\"lang-csharp\">BufferedWebEventProvider</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.provider.providerbase#System_Configuration_Provider_ProviderBase_Description\" data-linktype=\"relative-path\">Description</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.provider.providerbase#System_Configuration_Provider_ProviderBase_Name\" data-linktype=\"relative-path\">Name</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example shows how to derive from the BufferedWebEventProvider class to create a custom provider that writes the configured events to a local file for which appropriate access rights must be granted.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.Management.BufferedWebEventProvider#1\">\nusing System;\nusing System.Text;\nusing System.IO;\nusing System.Web.Management;\nusing System.Collections.Generic;\nusing System.Collections.Specialized;\nusing System.Web;\n\n\n namespace Samples.AspNet.Management\n {\n    // Implements a custom event provider.\n    public class SampleBufferedWebEventProvider :\n        BufferedWebEventProvider\n    {\n\n        // The local path of the file where\n        // to store event information.\n        private string logFilePath = string.Empty;\n\n        // Holds custom information.\n        private StringBuilder customInfo;\n\n        private FileStream fs;\n\n        private string providerName, \n            buffer, bufferModality;\n\n        public SampleBufferedWebEventProvider()\n        {\n            // Perform local initializations.\n\n            // Path of local file where to store \n            // event info.\n            // Assure that the path works for you and\n            // that the right permissions are set.\n            logFilePath = &quot;C:/test/log.doc&quot;;\n            \n            // Instantiate buffer to contain \n            // local data.\n            customInfo = new StringBuilder();\n\n        }\n\n\n        public override void  Flush()\n        {\n            customInfo.AppendLine(&quot;Perform custom flush&quot;);\n            StoreToFile(customInfo, logFilePath, FileMode.Append);\n        }\n\n\n        // Initializes the provider.\n        public override void Initialize(string name,\n         NameValueCollection config)\n        {\n            base.Initialize(name, config);\n\n            // Get the configuration information.\n            providerName = name;\n            buffer = SampleUseBuffering.ToString();\n            bufferModality = SampleBufferMode;\n\n            customInfo.AppendLine(string.Format(\n                &quot;Provider name: {0}&quot;, providerName));\n            customInfo.AppendLine(string.Format(\n                &quot;Buffering: {0}&quot;, buffer));\n            customInfo.AppendLine(string.Format(\n                &quot;Buffering modality: {0}&quot;, bufferModality));\n\n        }\n\n        public bool SampleUseBuffering\n        {\n            get { return UseBuffering; }\n        }\n\n        public string SampleBufferMode\n        {\n            get { return BufferMode; }\n        }\n\n\n        // Processes the incoming events.\n        // This method performs custom processing and, \n        // if buffering is enabled, it calls the \n        // base.ProcessEvent to buffer the event\n        // information.\n        public override void ProcessEvent(\n            WebBaseEvent eventRaised)\n        {\n\n            if (UseBuffering)\n                // Buffering enabled, call the \n                // base event to buffer event information.\n                base.ProcessEvent(eventRaised);\n            else\n            {\n                // Buffering disabled, store the \n                // current event now.\n                customInfo.AppendLine(\n                    &quot;*** Buffering disabled ***&quot;);\n                customInfo.AppendLine(\n                    eventRaised.ToString());\n                // Store the information in the specified file.\n                StoreToFile(customInfo, \n                    logFilePath, FileMode.Append);\n            }\n        }\n\n        private WebBaseEventCollection GetEvents(\n            WebEventBufferFlushInfo flushInfo)\n        {\n            return flushInfo.Events;\n        }\n\n\n        private int GetEventsDiscardedSinceLastNotification(\n            WebEventBufferFlushInfo flushInfo)\n        {\n            return flushInfo.EventsDiscardedSinceLastNotification;\n        }\n\n\n        private int GetEventsInBuffer(\n            WebEventBufferFlushInfo flushInfo)\n        {\n            return flushInfo.EventsInBuffer;\n        }\n\n\n        private DateTime GetLastNotificationTime(\n            WebEventBufferFlushInfo flushInfo)\n        {\n            return flushInfo.LastNotificationUtc;\n        }\n\n        \n        private int GetNotificationSequence(\n            WebEventBufferFlushInfo flushInfo)\n        {\n            return flushInfo.NotificationSequence;\n        }\n\n\n        private EventNotificationType GetNotificationType(\n            WebEventBufferFlushInfo flushInfo)\n        {\n            return flushInfo.NotificationType;\n        }\n\n\n\n        // Processes the messages that have been buffered.\n        // It is called by the ASP.NET when the flushing of \n        // the buffer is required.\n        public override void ProcessEventFlush(\n            WebEventBufferFlushInfo flushInfo)\n        {\n\n            // Customize event information to be sent to \n            // the Windows Event Viewer Application Log.\n            customInfo.AppendLine(\n                &quot;SampleEventLogWebEventProvider buffer flush.&quot;);\n\n            customInfo.AppendLine(\n                string.Format(&quot;NotificationType: {0}&quot;,\n                GetNotificationType(flushInfo)));\n\n            customInfo.AppendLine(\n                string.Format(&quot;EventsInBuffer: {0}&quot;,\n                GetEventsInBuffer(flushInfo)));\n\n            customInfo.AppendLine(\n                string.Format(\n                &quot;EventsDiscardedSinceLastNotification: {0}&quot;,\n                GetEventsDiscardedSinceLastNotification(flushInfo)));\n\n           \n            // Read each buffered event and send it to the\n            // Application Log.\n            foreach (WebBaseEvent eventRaised in flushInfo.Events)\n                customInfo.AppendLine(eventRaised.ToString());\n\n            // Store the information in the specified file.\n            StoreToFile(customInfo, logFilePath, FileMode.Append);\n        }\n\n        // Performs standard shutdown.\n        public override void Shutdown()\n        {\n            // Here you need the code that performs\n            // those tasks required before shutting \n            // down the provider.\n\n            // Flush the buffer, if needed.\n            Flush();\n            \n        }\n\n        // Store event information in a local file.\n        private void StoreToFile(StringBuilder text,\n            string filePath, FileMode mode)\n        {\n            int writeBlock;\n            int startIndex;\n\n            try\n            {\n\n                writeBlock = 256;\n                startIndex = 0;\n\n                // Open or create the local file \n                // to store the event information.\n                fs = new FileStream(filePath,\n                    mode, FileAccess.Write);\n\n                // Lock the file for writing.\n                fs.Lock(startIndex, writeBlock);\n\n                // Create a stream writer\n                StreamWriter writer = new StreamWriter(fs);\n\n                // Set the file pointer to the current \n                // position to keep adding data to it. \n                // If you want to rewrite the file use \n                // the following statement instead.\n                // writer.BaseStream.Seek (0, SeekOrigin.Begin);\n                writer.BaseStream.Seek(0, SeekOrigin.Current);\n\n                //If the file already exists it must not \n                // be write protected otherwise  \n                // the following write operation fails silently.\n                writer.Write(text.ToString());\n\n                // Update the underlying file\n                writer.Flush();\n\n                // Unlock the file for other processes.\n                fs.Unlock(startIndex, writeBlock);\n\n                // Close the stream writer and the underlying file     \n                writer.Close();\n\n                fs.Close();\n            }\n            catch (Exception e)\n            {\n                // Use this for debugging.\n                // Never dispaly it!\n                string ex = e.ToString();\n                throw new Exception(\n                    &quot;[SampleEventProvider] StoreToFile: exception.&quot; );\n            }\n        }\n\n    }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.Management.BufferedWebEventProvider#1\">Imports System\nImports System.Text\nImports System.IO\nImports System.Web.Management\nImports System.Collections.Generic\nImports System.Collections.Specialized\nImports System.Web\n\n\n\n&#39; Implements a custom event provider.\n\nPublic Class SampleBufferedWebEventProvider\n   Inherits BufferedWebEventProvider\n   \n   &#39; The local path of the file where\n   &#39; to store event information.\n   Private logFilePath As String = String.Empty\n   \n   &#39; Holds custom information.\n   Private customInfo As StringBuilder\n   \n   Private fs As FileStream\n   \n    Private providerName, buffer, bufferModality As String\n   \n   \n   Public Sub New()\n      &#39; Perform local initializations.\n      &#39; Path of local file where to store \n      &#39; event info.\n      &#39; Assure that the path works for you and\n      &#39; that the right permissions are set.\n      logFilePath = &quot;C:/test/log.doc&quot;\n      \n      &#39; Instantiate buffer to contain \n      &#39; local data.\n      customInfo = New StringBuilder()\n   End Sub &#39;New\n    \n   \n   Public Overrides Sub Flush()\n      customInfo.AppendLine(&quot;Perform custom flush&quot;)\n        StoreToFile(customInfo, _\n        logFilePath, FileMode.Append)\n   End Sub &#39;Flush\n   \n   &#39; Initializes the provider.\n    Public Overrides Sub Initialize(ByVal name As String, _\n    ByVal config As NameValueCollection)\n        MyBase.Initialize(name, config)\n\n        &#39; Get the configuration information.\n        providerName = name\n        buffer = SampleUseBuffering.ToString()\n        bufferModality = SampleBufferMode\n\n        customInfo.AppendLine(String.Format( _\n        &quot;Provider name: {0}&quot;, providerName))\n        customInfo.AppendLine(String.Format( _\n        &quot;Buffering: {0}&quot;, buffer))\n        customInfo.AppendLine(String.Format( _\n        &quot;Buffering modality: {0}&quot;, bufferModality))\n    End Sub &#39;Initialize\n   \n   \n   Public ReadOnly Property SampleUseBuffering() As Boolean\n      Get\n         Return UseBuffering\n      End Get\n    End Property\n\n   \n   Public ReadOnly Property SampleBufferMode() As String\n      Get\n         Return BufferMode\n      End Get\n    End Property\n\n   &#39; Processes the incoming events.\n    &#39; This method performs custom \n    &#39; processing and, if buffering is \n    &#39; enabled, it calls the base.ProcessEvent\n    &#39; to buffer the event information.\n    Public Overrides Sub ProcessEvent( _\n    ByVal eventRaised As WebBaseEvent)\n\n        If UseBuffering Then\n            &#39; Buffering enabled, call the base event to\n            &#39; buffer event information.\n            MyBase.ProcessEvent(eventRaised)\n        Else\n            &#39; Buffering disabled, store the current event\n            &#39; now.\n            customInfo.AppendLine(&quot;*** Buffering disabled ***&quot;)\n            customInfo.AppendLine(eventRaised.ToString())\n            &#39; Store the information in the specified file.\n            StoreToFile(customInfo, _\n            logFilePath, FileMode.Append)\n        End If\n    End Sub &#39;ProcessEvent\n   \n\n    Private Function GetEvents( _\n    ByVal flushInfo As WebEventBufferFlushInfo) _\n    As WebBaseEventCollection\n        Return flushInfo.Events\n    End Function &#39;GetEvents\n\n\n    Private Function GetEventsDiscardedSinceLastNotification( _\n    ByVal flushInfo _\n    As WebEventBufferFlushInfo) As Integer\n        Return flushInfo.EventsDiscardedSinceLastNotification\n    End Function &#39;GetEventsDiscardedSinceLastNotification\n\n\n    Private Function GetEventsInBuffer(ByVal flushInfo _\n    As WebEventBufferFlushInfo) As Integer\n        Return flushInfo.EventsInBuffer\n    End Function &#39;GetEventsInBuffer\n\n\n    Private Function GetLastNotificationTime(ByVal flushInfo _\n    As WebEventBufferFlushInfo) As DateTime\n        Return flushInfo.LastNotificationUtc\n    End Function &#39;GetLastNotificationTime\n\n\n    Private Function GetNotificationSequence(ByVal flushInfo _\n    As WebEventBufferFlushInfo) As Integer\n        Return flushInfo.NotificationSequence\n    End Function &#39;GetNotificationSequence\n\n\n    Private Function GetNotificationType(ByVal flushInfo _\n    As WebEventBufferFlushInfo) _\n    As EventNotificationType\n        Return flushInfo.NotificationType\n    End Function &#39;GetNotificationType\n\n\n    &#39; Processes the messages that have been buffered.\n    &#39; It is called by the ASP.NET when the flushing of \n    &#39; the buffer is required according to the parameters \n    &#39; defined in the &lt;bufferModes&gt; element of the \n    &#39; &lt;healthMonitoring&gt; configuration section.\n    Public Overrides Sub ProcessEventFlush(ByVal flushInfo _\n    As WebEventBufferFlushInfo)\n\n        &#39; Customize event information to be sent to \n        &#39; the Windows Event Viewer Application Log.\n        customInfo.AppendLine( _\n        &quot;SampleEventLogWebEventProvider buffer flush.&quot;)\n\n        customInfo.AppendLine(String.Format( _\n        &quot;NotificationType: {0}&quot;, _\n        GetNotificationType(flushInfo)))\n\n        customInfo.AppendLine(String.Format( _\n        &quot;EventsInBuffer: {0}&quot;, _\n        GetEventsInBuffer(flushInfo)))\n\n        customInfo.AppendLine(String.Format( _\n        &quot;EventsDiscardedSinceLastNotification: {0}&quot;, _\nGetEventsDiscardedSinceLastNotification( _\nflushInfo)))\n\n        &#39; Read each buffered event and send it to the\n        &#39; Application Log.\n        Dim eventRaised As WebBaseEvent\n        For Each eventRaised In flushInfo.Events\n            customInfo.AppendLine(eventRaised.ToString())\n        Next eventRaised\n        &#39; Store the information in the specified file.\n        StoreToFile(customInfo, logFilePath, _\n        FileMode.Append)\n    End Sub &#39;ProcessEventFlush\n\n    &#39; Performs standard shutdown.\n    Public Overrides Sub Shutdown()\n        &#39; Here you need the code that performs\n        &#39; those tasks required before shutting \n        &#39; down the provider.\n        &#39; Flush the buffer, if needed.\n        Flush()\n\n    End Sub &#39;Shutdown\n\n    &#39; Store event information in a local file.\n    Private Sub StoreToFile(ByVal [text] _\n    As StringBuilder, ByVal filePath As String, _\n    ByVal mode As FileMode)\n        Dim writeBlock As Integer\n        Dim startIndex As Integer\n\n        Try\n\n            writeBlock = 256\n            startIndex = 0\n\n            &#39; Open or create the local file \n            &#39; to store the event information.\n            fs = New FileStream(filePath, mode, FileAccess.Write)\n\n            &#39; Lock the file for writing.\n            fs.Lock(startIndex, writeBlock)\n\n            &#39; Create a stream writer\n            Dim writer As New StreamWriter(fs)\n\n            &#39; Set the file pointer to the current \n            &#39; position to keep adding data to it. \n            &#39; If you want to rewrite the file use \n            &#39; the following statement instead.\n            &#39; writer.BaseStream.Seek (0, SeekOrigin.Begin);\n            writer.BaseStream.Seek(0, SeekOrigin.Current)\n\n            &#39;If the file already exists it must not \n            &#39; be write protected otherwise  \n            &#39; the following write operation \n            &#39;fails silently.\n            writer.Write([text].ToString())\n\n            &#39; Update the underlying file\n            writer.Flush()\n\n            &#39; Unlock the file for other processes.\n            fs.Unlock(startIndex, writeBlock)\n\n            &#39; Close the stream writer and \n            &#39;the underlying file     \n            writer.Close()\n\n            fs.Close()\n        Catch e As Exception\n            &#39;Use this for debugging.\n            &#39;Never dispaly it!\n            Dim ex As String = e.ToString()\n            Throw New Exception( _\n            &quot;[SampleEventProvider] StoreToFile: exception.&quot;)\n        End Try\n    End Sub &#39;StoreToFile\nEnd Class &#39;SampleBufferedWebEventProvider\n\n\n</code></pre><p> The following configuration file excerpt shows a <code>healthMonitoring</code> configuration section that enables ASP.NET to use the custom provider defined above to process all health-monitoring events.  </p>\n<pre><code>&lt;healthMonitoring    \n  heartBeatInterval=&quot;0&quot; enabled=&quot;true&quot;&gt;  \n\n  &lt;bufferModes&gt;  \n    &lt;add name =&quot;Custom Notification&quot;  \n      maxBufferSize=&quot;10&quot;  \n      maxFlushSize=&quot;5&quot;  \n      urgentFlushThreshold=&quot;10&quot;  \n      regularFlushInterval=&quot;Infinite&quot;  \n      urgentFlushInterval=&quot;00:00:30&quot;  \n      maxBufferThreads=&quot;1&quot;  \n/&gt;  \n  &lt;/bufferModes&gt;  \n\n  &lt;providers&gt;  \n    &lt;clear/&gt;  \n    &lt;add name=&quot;SampleBufferedWebEventProvider&quot;   \n      type=&quot;SamplesAspNet.SampleBufferedWebEventProvider, bufferedwebeventprovider, Version=1.0.1785.14700, Culture=neutral, PublicKeyToken=d31491bf33b55954, processorArchitecture=MSIL&quot;   \n      buffer=&quot;true&quot;  \n      bufferMode=&quot;Custom Notification&quot;  \n/&gt;  \n  &lt;/providers&gt;  \n\n  &lt;profiles&gt;  \n    &lt;add name=&quot;Custom&quot;   \n      minInstances=&quot;1&quot;   \n      maxLimit=&quot;Infinite&quot;   \n      minInterval=&quot;00:00:00&quot; /&gt;  \n  &lt;/profiles&gt;  \n\n  &lt;rules&gt;  \n    &lt;clear /&gt;  \n      &lt;add name=&quot;Custom Buffered Web Event Provider&quot;   \n        eventName=&quot;All Events&quot;  \n        provider=&quot;SampleBufferedWebEventProvider&quot;   \n        profile=&quot;Custom&quot; /&gt;  \n  &lt;/rules&gt;  \n\n&lt;/healthMonitoring&gt;  \n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The <a class=\"xref\" href=\"system.web.management\" data-linktype=\"relative-path\">System.Web.Management</a> namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events.  </p>\n<p> If you want to customize the health-event processing, you can derive from the BufferedWebEventProvider class to create your own custom buffered provider.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the <code>healthMonitoring</code> configuration section. You can also derive from the health-monitoring types to create your own custom events and providers. For an example of creating a custom provider, see <a href=\"../Topic/How%20to:%20Implement%20the%20Health%20Monitoring%20Custom%20Provider%20Example.md\" data-linktype=\"relative-path\">How to: Implement the Health Monitoring Custom Provider Example</a>.</p>\n</div>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_Management_BufferedWebEventProvider__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">BufferedWebEventProvider()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.web.management.bufferedwebeventprovider\" data-linktype=\"relative-path\">BufferedWebEventProvider</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected BufferedWebEventProvider ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor is used internally by the ASP.NET health-monitoring system. You will never use it to instantiate a <a class=\"xref\" href=\"system.web.management.tracewebeventprovider\" data-linktype=\"relative-path\">TraceWebEventProvider</a> object, but you can call this constructor when implementing your own provider type that inherits from this class.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_Management_BufferedWebEventProvider_BufferMode\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">BufferMode</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value indicating the buffering mode used by the provider.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string BufferMode { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of the buffering mode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The BufferMode property contains the value defined by the <code>bufferMode</code> attribute in the <code>providers</code> element of the <code>healthMonitoring</code> section.  </p>\n<p> The following configuration-file excerpt shows how the name of the buffer mode should be defined in the <code>healthMonitoring</code> section.  </p>\n<pre><code>&lt;bufferModes&gt;  \n  &lt;add name =&quot;Custom Notification&quot; /&gt;  \n&lt;/bufferModes&gt;  \n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_Management_BufferedWebEventProvider_UseBuffering\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">UseBuffering</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value indicating whether the provider is in buffered mode.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool UseBuffering { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the provider is in buffered mode; otherwise, <code>false</code>. The default is <code>true</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The UseBuffering property contains the value defined by the <code>buffer</code> attribute in the <code>providers</code> element of the <code>healthMonitoring</code> section.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_Management_BufferedWebEventProvider_Flush\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Flush()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Moves the events from the provider&#39;s buffer into the event log.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override void Flush ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When this method is called, all the events in the buffer are immediately moved from the buffer to the log, regardless of how much time has elapsed since last write or how many events are in the buffer. The time of the last write is reset to the time of the flushing action.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_Management_BufferedWebEventProvider_Initialize_System_String_System_Collections_Specialized_NameValueCollection_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Initialize(String, NameValueCollection)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Sets the initial values for this object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override void Initialize (string name, System.Collections.Specialized.NameValueCollection config);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>name</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name used in the configuration file to identify this provider.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>config</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.specialized.namevaluecollection\" data-linktype=\"relative-path\">NameValueCollection</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.collections.specialized.namevaluecollection\" data-linktype=\"relative-path\">NameValueCollection</a> that specifies the attributes assigned for this provider in the configuration file.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>ASP.NET calls the Initialize method after calling the <a class=\"xref\" href=\"system.web.management.bufferedwebeventprovider#System_Web_Management_BufferedWebEventProvider__ctor_\" data-linktype=\"relative-path\">BufferedWebEventProvider</a> constructor. This method is called to initialize the <a class=\"xref\" href=\"system.web.management.bufferedwebeventprovider\" data-linktype=\"relative-path\">BufferedWebEventProvider</a> with the configuration settings and name specified in the configuration file.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_Management_BufferedWebEventProvider_ProcessEvent_System_Web_Management_WebBaseEvent_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ProcessEvent(WebBaseEvent)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Processes the event passed to the provider.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override void ProcessEvent (System.Web.Management.WebBaseEvent eventRaised);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>eventRaised</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.management.webbaseevent\" data-linktype=\"relative-path\">WebBaseEvent</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.web.management.webbaseevent\" data-linktype=\"relative-path\">WebBaseEvent</a> object to process.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This is the method that ASP.NET health monitoring calls to start the processing of the event. If buffering is enabled, the event information is buffered; otherwise, it is dispatched to the current logging mechanism.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_Management_BufferedWebEventProvider_ProcessEventFlush_System_Web_Management_WebEventBufferFlushInfo_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ProcessEventFlush(WebEventBufferFlushInfo)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Processes the buffered events.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public abstract void ProcessEventFlush (System.Web.Management.WebEventBufferFlushInfo flushInfo);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>flushInfo</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.management.webeventbufferflushinfo\" data-linktype=\"relative-path\">WebEventBufferFlushInfo</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.web.management.webeventbufferflushinfo\" data-linktype=\"relative-path\">WebEventBufferFlushInfo</a> that contains buffering information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The ProcessEventFlush method processes the messages that have been buffered. ASP.NET health monitoring calls the method when the flushing of the buffer is required. The intervals at which flushing is required is determined by the parameter value of the <code>bufferMode</code> attribute in the <code>providers</code> element in the <code>healthMonitoring</code> configuration section.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_Management_BufferedWebEventProvider_Shutdown\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Shutdown()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Performs tasks associated with shutting down the provider.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override void Shutdown ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>ASP.NET calls the Shutdown method when the application domain hosting the Web application terminates. The method is called to perform tasks that will allow the application to end gracefully, such as closing resources.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.Management.BufferedWebEventProvider.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.Management.BufferedWebEventProvider\">\r\n<meta name=\"APIName\" content=\"System.Web.Management.BufferedWebEventProvider..ctor\">\r\n<meta name=\"APIName\" content=\"System.Web.Management.BufferedWebEventProvider.BufferMode\">\r\n<meta name=\"APIName\" content=\"System.Web.Management.BufferedWebEventProvider.Flush\">\r\n<meta name=\"APIName\" content=\"System.Web.Management.BufferedWebEventProvider.Initialize\">\r\n<meta name=\"APIName\" content=\"System.Web.Management.BufferedWebEventProvider.ProcessEvent\">\r\n<meta name=\"APIName\" content=\"System.Web.Management.BufferedWebEventProvider.ProcessEventFlush\">\r\n<meta name=\"APIName\" content=\"System.Web.Management.BufferedWebEventProvider.Shutdown\">\r\n<meta name=\"APIName\" content=\"System.Web.Management.BufferedWebEventProvider.UseBuffering\">\r\n<meta name=\"APILocation\" content=\"System.Web.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"acdfa615-9677-c166-51fe-28c8a317ec6b\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides the base functionality for creating event providers that require buffering.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.web.management/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.Management.BufferedWebEventProvider\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.Management.BufferedWebEventProvider.yml","open_to_public_contributors":false,"api_name":["System.Web.Management.BufferedWebEventProvider","System.Web.Management.BufferedWebEventProvider..ctor","System.Web.Management.BufferedWebEventProvider.BufferMode","System.Web.Management.BufferedWebEventProvider.Flush","System.Web.Management.BufferedWebEventProvider.Initialize","System.Web.Management.BufferedWebEventProvider.ProcessEvent","System.Web.Management.BufferedWebEventProvider.ProcessEventFlush","System.Web.Management.BufferedWebEventProvider.Shutdown","System.Web.Management.BufferedWebEventProvider.UseBuffering"],"api_location":["System.Web.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.Management.BufferedWebEventProvider","System::Web::Management::BufferedWebEventProvider","System.Web.Management.BufferedWebEventProvider.#ctor","System::Web::Management::BufferedWebEventProvider::#ctor","System.Web.Management.BufferedWebEventProvider.BufferMode","System::Web::Management::BufferedWebEventProvider::BufferMode","System.Web.Management.BufferedWebEventProvider.Flush","System::Web::Management::BufferedWebEventProvider::Flush","System.Web.Management.BufferedWebEventProvider.Initialize","System::Web::Management::BufferedWebEventProvider::Initialize","System.Web.Management.BufferedWebEventProvider.ProcessEvent","System::Web::Management::BufferedWebEventProvider::ProcessEvent","System.Web.Management.BufferedWebEventProvider.ProcessEventFlush","System::Web::Management::BufferedWebEventProvider::ProcessEventFlush","System.Web.Management.BufferedWebEventProvider.Shutdown","System::Web::Management::BufferedWebEventProvider::Shutdown","System.Web.Management.BufferedWebEventProvider.UseBuffering","System::Web::Management::BufferedWebEventProvider::UseBuffering"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"acdfa615-9677-c166-51fe-28c8a317ec6b","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Web.Management/BufferedWebEventProvider.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"BufferedWebEventProvider class | Microsoft Docs","_op_ogTitle":"BufferedWebEventProvider class","description":"Provides the base functionality for creating event providers that require buffering.\n","toc_asset_id":"api/_splitted/System.Web.Management/toc.json","toc_rel":"_splitted/System.Web.Management/toc.json","source_url":"","ms.assetid":"System.Web.Management.BufferedWebEventProvider","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.web.management.bufferedwebeventprovider","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.web.management.bufferedwebeventprovider","fileRelativePath":"api/System.Web.Management.BufferedWebEventProvider.html"},"themesRelativePathToOutputRoot":"_themes/"}