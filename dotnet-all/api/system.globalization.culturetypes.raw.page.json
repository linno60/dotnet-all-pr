{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">CultureTypes</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Defines the types of culture lists that can be retrieved using the <span class=\"xref\">stem.Globalization.CultureInfo.GetCultures*</span> method.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[ECMA2Yaml.Models.ECMAAttribute]\n[ECMA2Yaml.Models.ECMAAttribute]\npublic enum CultureTypes</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">CultureTypes</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.flagsattribute\" title=\"System.FlagsAttribute\" data-linktype=\"relative-path\">FlagsAttribute</a></span>\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example demonstrates the CultureTypes enumeration and the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CultureTypes_\" data-linktype=\"relative-path\">CultureTypes</a> property.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CultureTypes#1\">// This example demonstrates the CultureTypes enumeration \n// and the CultureInfo.CultureTypes property.\n\nusing System;\nusing System.Globalization;\n\nclass Sample\n{\n    public static void Main()\n    {\n        // Create a table of most culture types. \n        CultureTypes[] mostCultureTypes = new CultureTypes[] {\n                        CultureTypes.NeutralCultures, \n                        CultureTypes.SpecificCultures, \n                        CultureTypes.InstalledWin32Cultures, \n                        CultureTypes.UserCustomCulture, \n                        CultureTypes.ReplacementCultures, \n                        CultureTypes.FrameworkCultures,\n                        CultureTypes.WindowsOnlyCultures\n                        };\n        CultureInfo[] allCultures;\n        CultureTypes combo;\n\n        // Get and enumerate all cultures.\n        allCultures = CultureInfo.GetCultures(CultureTypes.AllCultures);\n        foreach (CultureInfo ci in allCultures)\n        {\n            // Display the name of each culture.\n            Console.WriteLine(&quot;Culture: {0}&quot;, ci.Name);\n\n            // Get the culture types of each culture. \n            combo = ci.CultureTypes;\n\n            // Display the name of each culture type flag that is set.\n            Console.Write(&quot;  &quot;);\n            foreach (CultureTypes ct in mostCultureTypes)\n                if (0 != (ct &amp; combo))\n                    Console.Write(&quot;{0} &quot;, ct);\n            Console.WriteLine();\n        }\n    }\n}\n\n/*\nThe following is a portion of the results produced by this code example.\n.\n.\n.\nCulture: tg\n  NeutralCultures InstalledWin32Cultures \nCulture: ta\n  NeutralCultures InstalledWin32Cultures FrameworkCultures \nCulture: te\n  NeutralCultures InstalledWin32Cultures FrameworkCultures \nCulture: syr\n  NeutralCultures InstalledWin32Cultures FrameworkCultures \nCulture: tg-Cyrl-TJ\n  SpecificCultures InstalledWin32Cultures \nCulture: ta-IN\n  SpecificCultures InstalledWin32Cultures FrameworkCultures \nCulture: te-IN\n  SpecificCultures InstalledWin32Cultures FrameworkCultures \nCulture: syr-SY\n  SpecificCultures InstalledWin32Cultures FrameworkCultures \nCulture: tg-Cyrl\n  NeutralCultures InstalledWin32Cultures \n.\n.\n.\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.CultureTypes#1\">// This example demonstrates the CultureTypes enumeration \n// and the CultureInfo.CultureTypes property.\n\nusing namespace System;\nusing namespace System::Globalization;\nint main()\n{\n    // Create a table of most culture types. \n    array&lt;CultureTypes&gt;^ mostCultureTypes = gcnew array&lt;CultureTypes&gt; {\n                    CultureTypes::NeutralCultures, \n                    CultureTypes::SpecificCultures, \n                    CultureTypes::InstalledWin32Cultures, \n                    CultureTypes::UserCustomCulture, \n                    CultureTypes::ReplacementCultures, \n                    CultureTypes::FrameworkCultures,\n                    CultureTypes::WindowsOnlyCultures\n                    };\n    CultureTypes combo;\n\n    // Get and enumerate all cultures.\n    System::Collections::IEnumerator^ enum0 = CultureInfo::GetCultures(CultureTypes::AllCultures)-&gt;GetEnumerator();\n    while (enum0-&gt;MoveNext())\n    {\n        // Display the name of each culture.\n        CultureInfo^ ci = safe_cast&lt;CultureInfo^&gt;(enum0-&gt;Current);\n        Console::WriteLine(&quot;Culture: {0}&quot;, ci-&gt;Name);\n\n        // Get the culture types of each culture. \n        combo = ci-&gt;CultureTypes;\n\n        // Display the name of each culture type flag that is set.\n        Console::Write(&quot;  &quot;);\n        for each (CultureTypes ct in mostCultureTypes)\n            if ((ct &amp; combo) != CultureTypes())\n                Console::Write(&quot;{0} &quot;, ct);\n        Console::WriteLine();\n    }\n}\n\n/*\nThe following is a portion of the results produced by this code example.\n.\n.\n.\nCulture: tg\n  NeutralCultures InstalledWin32Cultures \nCulture: ta\n  NeutralCultures InstalledWin32Cultures FrameworkCultures \nCulture: te\n  NeutralCultures InstalledWin32Cultures FrameworkCultures \nCulture: syr\n  NeutralCultures InstalledWin32Cultures FrameworkCultures \nCulture: tg-Cyrl-TJ\n  SpecificCultures InstalledWin32Cultures \nCulture: ta-IN\n  SpecificCultures InstalledWin32Cultures FrameworkCultures \nCulture: te-IN\n  SpecificCultures InstalledWin32Cultures FrameworkCultures \nCulture: syr-SY\n  SpecificCultures InstalledWin32Cultures FrameworkCultures \nCulture: tg-Cyrl\n  NeutralCultures InstalledWin32Cultures \n.\n.\n.\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureTypes#1\">&#39; This example demonstrates the CultureTypes enumeration \n&#39; and the CultureInfo.CultureTypes property.\n\nImports System\nImports System.Globalization\n\nModule Module1\n    Public Sub Main()\n\n        &#39; Create a table of most culture types. \n        Dim mostCultureTypes() As CultureTypes = { _\n                CultureTypes.NeutralCultures, _\n                CultureTypes.SpecificCultures, _\n                CultureTypes.InstalledWin32Cultures, _\n                CultureTypes.UserCustomCulture, _\n                CultureTypes.ReplacementCultures, _\n                CultureTypes.FrameworkCultures, _\n                CultureTypes.WindowsOnlyCultures}\n        Dim allCultures() As CultureInfo\n        Dim combo As CultureTypes\n\n        &#39; Get and enumerate all cultures.\n        allCultures = CultureInfo.GetCultures(CultureTypes.AllCultures)\n        Dim ci As CultureInfo\n        For Each ci In allCultures\n            &#39; Display the name of each culture.\n            Console.WriteLine(&quot;Culture: {0}&quot;, ci.Name)\n\n            &#39; Get the culture types of each culture. \n            combo = ci.CultureTypes\n\n            &#39; Display the name of each culture type flag that is set.\n            Console.Write(&quot;  &quot;)\n            Dim ct As CultureTypes\n            For Each ct In mostCultureTypes\n                If 0 &lt;&gt; (ct And combo) Then\n                    Console.Write(&quot;{0} &quot;, ct)\n                End If\n            Next ct\n            Console.WriteLine()\n        Next ci\n\n    End Sub &#39;Main \nEnd Module\n\n&#39;The following is a portion of the results produced by this code example.\n&#39;.\n&#39;.\n&#39;.\n&#39;Culture: tg\n&#39;  NeutralCultures InstalledWin32Cultures \n&#39;Culture: ta\n&#39;  NeutralCultures InstalledWin32Cultures FrameworkCultures \n&#39;Culture: te\n&#39;  NeutralCultures InstalledWin32Cultures FrameworkCultures \n&#39;Culture: syr\n&#39;  NeutralCultures InstalledWin32Cultures FrameworkCultures \n&#39;Culture: tg-Cyrl-TJ\n&#39;  SpecificCultures InstalledWin32Cultures \n&#39;Culture: ta-IN\n&#39;  SpecificCultures InstalledWin32Cultures FrameworkCultures \n&#39;Culture: te-IN\n&#39;  SpecificCultures InstalledWin32Cultures FrameworkCultures \n&#39;Culture: syr-SY\n&#39;  SpecificCultures InstalledWin32Cultures FrameworkCultures \n&#39;Culture: tg-Cyrl\n&#39;  NeutralCultures InstalledWin32Cultures \n&#39;.\n&#39;.\n&#39;.\n</code></pre><p> The following example displays several properties of the neutral cultures.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Globalization.CultureInfo.GetCultures#1\">using System;\nusing System.Globalization;\n\npublic class SamplesCultureInfo\n{\n\n   public static void Main()\n   {\n\n      // Displays several properties of the neutral cultures.\n      Console.WriteLine(&quot;CULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME&quot;);\n      foreach (CultureInfo ci in CultureInfo.GetCultures(CultureTypes.NeutralCultures))\n      {\n         Console.Write(&quot;{0,-7}&quot;, ci.Name);\n         Console.Write(&quot; {0,-3}&quot;, ci.TwoLetterISOLanguageName);\n         Console.Write(&quot; {0,-3}&quot;, ci.ThreeLetterISOLanguageName);\n         Console.Write(&quot; {0,-3}&quot;, ci.ThreeLetterWindowsLanguageName);\n         Console.Write(&quot; {0,-40}&quot;, ci.DisplayName);\n         Console.WriteLine(&quot; {0,-40}&quot;, ci.EnglishName);\n      }\n\n   }\n\n}\n\n\n/*\nThis code produces the following output.  This output has been cropped for brevity.\n\nCULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME\nar      ar  ara ARA Arabic                                   Arabic                                  \nbg      bg  bul BGR Bulgarian                                Bulgarian                               \nca      ca  cat CAT Catalan                                  Catalan                                 \nzh-Hans zh  zho CHS Chinese (Simplified)                     Chinese (Simplified)                    \ncs      cs  ces CSY Czech                                    Czech                                   \nda      da  dan DAN Danish                                   Danish                                  \nde      de  deu DEU German                                   German                                  \nel      el  ell ELL Greek                                    Greek                                   \nen      en  eng ENU English                                  English                                 \nes      es  spa ESP Spanish                                  Spanish                                 \nfi      fi  fin FIN Finnish                                  Finnish                                 \nzh      zh  zho CHS Chinese                                  Chinese                                 \nzh-Hant zh  zho CHT Chinese (Traditional)                    Chinese (Traditional)                   \nzh-CHS  zh  zho CHS Chinese (Simplified) Legacy              Chinese (Simplified) Legacy             \nzh-CHT  zh  zho CHT Chinese (Traditional) Legacy             Chinese (Traditional) Legacy            \n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Globalization.CultureInfo.GetCultures#1\">using namespace System;\nusing namespace System::Globalization;\nint main()\n{\n   \n   // Displays several properties of the neutral cultures.\n   Console::WriteLine( &quot;CULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME&quot; );\n   System::Collections::IEnumerator^ enum0 = CultureInfo::GetCultures( CultureTypes::NeutralCultures )-&gt;GetEnumerator();\n   while ( enum0-&gt;MoveNext() )\n   {\n      CultureInfo^ ci = safe_cast&lt;CultureInfo^&gt;(enum0-&gt;Current);\n      Console::Write( &quot;{0,-7}&quot;, ci-&gt;Name );\n      Console::Write( &quot; {0,-3}&quot;, ci-&gt;TwoLetterISOLanguageName );\n      Console::Write( &quot; {0,-3}&quot;, ci-&gt;ThreeLetterISOLanguageName );\n      Console::Write( &quot; {0,-3}&quot;, ci-&gt;ThreeLetterWindowsLanguageName );\n      Console::Write( &quot; {0,-40}&quot;, ci-&gt;DisplayName );\n      Console::WriteLine( &quot; {0,-40}&quot;, ci-&gt;EnglishName );\n   }\n}\n\n/*\nThis code produces the following output.  This output has been cropped for brevity.\n\nCULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME\nar      ar  ara ARA Arabic                                   Arabic                                  \nbg      bg  bul BGR Bulgarian                                Bulgarian                               \nca      ca  cat CAT Catalan                                  Catalan                                 \nzh-Hans zh  zho CHS Chinese (Simplified)                     Chinese (Simplified)                    \ncs      cs  ces CSY Czech                                    Czech                                   \nda      da  dan DAN Danish                                   Danish                                  \nde      de  deu DEU German                                   German                                  \nel      el  ell ELL Greek                                    Greek                                   \nen      en  eng ENU English                                  English                                 \nes      es  spa ESP Spanish                                  Spanish                                 \nfi      fi  fin FIN Finnish                                  Finnish                                 \nzh      zh  zho CHS Chinese                                  Chinese                                 \nzh-Hant zh  zho CHT Chinese (Traditional)                    Chinese (Traditional)                   \nzh-CHS  zh  zho CHS Chinese (Simplified) Legacy              Chinese (Simplified) Legacy             \nzh-CHT  zh  zho CHT Chinese (Traditional) Legacy             Chinese (Traditional) Legacy            \n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Globalization.CultureInfo.GetCultures#1\">Imports System\nImports System.Globalization\n\nModule Module1\n\n   Public Sub Main()\n\n      &#39; Displays several properties of the neutral cultures.\n      Console.WriteLine(&quot;CULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME&quot;)\n      Dim ci As CultureInfo\n      For Each ci In CultureInfo.GetCultures(CultureTypes.NeutralCultures)\n         Console.Write(&quot;{0,-7}&quot;, ci.Name)\n         Console.Write(&quot; {0,-3}&quot;, ci.TwoLetterISOLanguageName)\n         Console.Write(&quot; {0,-3}&quot;, ci.ThreeLetterISOLanguageName)\n         Console.Write(&quot; {0,-3}&quot;, ci.ThreeLetterWindowsLanguageName)\n         Console.Write(&quot; {0,-40}&quot;, ci.DisplayName)\n         Console.WriteLine(&quot; {0,-40}&quot;, ci.EnglishName)\n      Next ci\n\n   End Sub &#39;Main \n\n\n\n&#39;This code produces the following output.  This output has been cropped for brevity.\n&#39;\n&#39;CULTURE ISO ISO WIN DISPLAYNAME                              ENGLISHNAME\n&#39;ar      ar  ara ARA Arabic                                   Arabic                                  \n&#39;bg      bg  bul BGR Bulgarian                                Bulgarian                               \n&#39;ca      ca  cat CAT Catalan                                  Catalan                                 \n&#39;zh-Hans zh  zho CHS Chinese (Simplified)                     Chinese (Simplified)                    \n&#39;cs      cs  ces CSY Czech                                    Czech                                   \n&#39;da      da  dan DAN Danish                                   Danish                                  \n&#39;de      de  deu DEU German                                   German                                  \n&#39;el      el  ell ELL Greek                                    Greek                                   \n&#39;en      en  eng ENU English                                  English                                 \n&#39;es      es  spa ESP Spanish                                  Spanish                                 \n&#39;fi      fi  fin FIN Finnish                                  Finnish                                 \n&#39;zh      zh  zho CHS Chinese                                  Chinese                                 \n&#39;zh-Hant zh  zho CHT Chinese (Traditional)                    Chinese (Traditional)                   \n&#39;zh-CHS  zh  zho CHS Chinese (Simplified) Legacy              Chinese (Simplified) Legacy             \n&#39;zh-CHT  zh  zho CHT Chinese (Traditional) Legacy             Chinese (Traditional) Legacy            \n\nEnd Module\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>These culture type values are returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_CultureTypes_\" data-linktype=\"relative-path\">CultureTypes</a> property, and also serve as a filter that limits the cultures returned by the <a class=\"xref\" href=\"system.globalization.cultureinfo#System_Globalization_CultureInfo_GetCultures_\" data-linktype=\"relative-path\">GetCultures</a> method. For more information on cultures, see <a class=\"xref\" href=\"system.globalization.cultureinfo\" data-linktype=\"relative-path\">CultureInfo</a>.  </p>\n<p> Generally, your application should enumerate all cultures, using the AllCultures value. This allows enumeration of custom cultures, as well as the other culture types.  </p>\n<p> Note that the FrameworkCultures and WindowsOnlyCultures members have been deprecated.</p>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Globalization_CultureTypes_AllCultures\">\r\n      \t\t\t<span class=\"lang-csharp\">AllCultures</span>\r\n      \t</td>\r\n      \t<td><p>All cultures that ship with the .NET Framework, including neutral and specific cultures, cultures installed in the Windows operating system, and custom cultures created by the user.  </p>\n<p> AllCultures is a composite field that includes the NeutralCultures, SpecificCultures, and InstalledWin32Cultures values.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Globalization_CultureTypes_FrameworkCultures\">\r\n      \t\t\t<span class=\"lang-csharp\">FrameworkCultures</span>\r\n      \t</td>\r\n      \t<td><p>This member is deprecated; using this value with <span class=\"xref\">stem.Globalization.CultureInfo.GetCultures*</span> returns neutral and specific cultures shipped with the .NET Framework 2.0.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Globalization_CultureTypes_InstalledWin32Cultures\">\r\n      \t\t\t<span class=\"lang-csharp\">InstalledWin32Cultures</span>\r\n      \t</td>\r\n      \t<td><p>All cultures that are installed in the Windows operating system. Note that not all cultures supported by the .NET Framework are installed in the operating system.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Globalization_CultureTypes_NeutralCultures\">\r\n      \t\t\t<span class=\"lang-csharp\">NeutralCultures</span>\r\n      \t</td>\r\n      \t<td><p>Cultures that are associated with a language but are not specific to a country/region. The names of .NET Framework cultures consist of the lowercase two-letter code derived from ISO 639-1. For example: &quot;en&quot; (English) is a neutral culture.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Globalization_CultureTypes_ReplacementCultures\">\r\n      \t\t\t<span class=\"lang-csharp\">ReplacementCultures</span>\r\n      \t</td>\r\n      \t<td><p>Custom cultures created by the user that replace cultures shipped with the .NET Framework.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Globalization_CultureTypes_SpecificCultures\">\r\n      \t\t\t<span class=\"lang-csharp\">SpecificCultures</span>\r\n      \t</td>\r\n      \t<td><p>Cultures that are specific to a country/region. The names of these cultures follow RFC 4646 (Windows Vista and later). The format is &quot;<languagecode2>-<country egioncode2=\"\">&quot;, where <languagecode2> is a lowercase two-letter code derived from ISO 639-1 and <country egioncode2=\"\"> is an uppercase two-letter code derived from ISO 3166. For example, &quot;en-US&quot; for English (United States) is a specific culture.<p>\n</country></languagecode2></country></languagecode2></td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Globalization_CultureTypes_UserCustomCulture\">\r\n      \t\t\t<span class=\"lang-csharp\">UserCustomCulture</span>\r\n      \t</td>\r\n      \t<td><p>Custom cultures created by the user.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Globalization_CultureTypes_WindowsOnlyCultures\">\r\n      \t\t\t<span class=\"lang-csharp\">WindowsOnlyCultures</span>\r\n      \t</td>\r\n      \t<td><p>This member is deprecated. If it is used as an argument to the <span class=\"xref\">stem.Globalization.CultureInfo.GetCultures*</span> method, the method returns an empty array.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Globalization.CultureTypes.yml\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureTypes\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureTypes.AllCultures\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureTypes.FrameworkCultures\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureTypes.InstalledWin32Cultures\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureTypes.NeutralCultures\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureTypes.ReplacementCultures\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureTypes.SpecificCultures\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureTypes.UserCustomCulture\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureTypes.WindowsOnlyCultures\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"cadbc09c-abac-6a04-c43a-d39258b53bcf\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines the types of culture lists that can be retrieved using the  method.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.globalization/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Globalization.CultureTypes\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Globalization.CultureTypes.yml","open_to_public_contributors":false,"api_name":["System.Globalization.CultureTypes","System.Globalization.CultureTypes.AllCultures","System.Globalization.CultureTypes.FrameworkCultures","System.Globalization.CultureTypes.InstalledWin32Cultures","System.Globalization.CultureTypes.NeutralCultures","System.Globalization.CultureTypes.ReplacementCultures","System.Globalization.CultureTypes.SpecificCultures","System.Globalization.CultureTypes.UserCustomCulture","System.Globalization.CultureTypes.WindowsOnlyCultures"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Globalization.CultureTypes","System::Globalization::CultureTypes","System.Globalization.CultureTypes.AllCultures","System::Globalization::CultureTypes::AllCultures","System.Globalization.CultureTypes.FrameworkCultures","System::Globalization::CultureTypes::FrameworkCultures","System.Globalization.CultureTypes.InstalledWin32Cultures","System::Globalization::CultureTypes::InstalledWin32Cultures","System.Globalization.CultureTypes.NeutralCultures","System::Globalization::CultureTypes::NeutralCultures","System.Globalization.CultureTypes.ReplacementCultures","System::Globalization::CultureTypes::ReplacementCultures","System.Globalization.CultureTypes.SpecificCultures","System::Globalization::CultureTypes::SpecificCultures","System.Globalization.CultureTypes.UserCustomCulture","System::Globalization::CultureTypes::UserCustomCulture","System.Globalization.CultureTypes.WindowsOnlyCultures","System::Globalization::CultureTypes::WindowsOnlyCultures"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"cadbc09c-abac-6a04-c43a-d39258b53bcf","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Globalization/CultureTypes.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"CultureTypes enum | Microsoft Docs","_op_ogTitle":"CultureTypes enum","description":"Defines the types of culture lists that can be retrieved using the  method.\n","toc_asset_id":"api/_splitted/System.Globalization/toc.json","toc_rel":"_splitted/System.Globalization/toc.json","source_url":"","ms.assetid":"System.Globalization.CultureTypes","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.globalization.culturetypes","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.globalization.culturetypes","fileRelativePath":"api/System.Globalization.CultureTypes.html"},"themesRelativePathToOutputRoot":"_themes/"}