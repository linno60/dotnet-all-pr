{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">IIdentifierCreationService</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides a mechanism to create uniquely named identifiers throughout a specified range of activities.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Obsolete(&quot;The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*&quot;)]\npublic interface IIdentifierCreationService</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.obsoleteattribute\" title=\"System.ObsoleteAttribute\" data-linktype=\"relative-path\">ObsoleteAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example shows an implementation of the IIdentifierCreationService. This service ensures that each of the identifiers used within the current workflow is unique.  </p>\n<pre><code class=\"lang-cs\" name=\"WF_Samples#41\">internal sealed class IdentifierCreationService : IIdentifierCreationService\n{\n    private IServiceProvider serviceProvider = null;\n\n    internal IdentifierCreationService(IServiceProvider serviceProvider)\n    {\n        this.serviceProvider = serviceProvider;\n    }\n\n    void IIdentifierCreationService.ValidateIdentifier(Activity activity, string identifier)\n    {\n        if (identifier == null)\n            throw new ArgumentNullException(&quot;identifier&quot;);\n        if (activity == null)\n            throw new ArgumentNullException(&quot;activity&quot;);\n\n        if (activity.Name.ToLower().Equals(identifier.ToLower()))\n            return;\n\n        ArrayList identifiers = new ArrayList();\n        Activity rootActivity = GetRootActivity(activity);\n        identifiers.AddRange(GetIdentifiersInCompositeActivity(rootActivity as CompositeActivity));\n        identifiers.Sort();\n        if (identifiers.BinarySearch(identifier.ToLower(), StringComparer.OrdinalIgnoreCase) &gt;= 0)\n            throw new ArgumentException(string.Format(&quot;Duplicate Component Identifier {0}&quot;, identifier));\n    }\n\n    void IIdentifierCreationService.EnsureUniqueIdentifiers(CompositeActivity parentActivity, ICollection childActivities)\n    {\n        if (parentActivity == null)\n            throw new ArgumentNullException(&quot;parentActivity&quot;);\n        if (childActivities == null)\n            throw new ArgumentNullException(&quot;childActivities&quot;);\n\n        List&lt;Activity&gt; allActivities = new List&lt;Activity&gt;();\n\n        Queue activities = new Queue(childActivities);\n        while (activities.Count &gt; 0)\n        {\n            Activity activity = (Activity)activities.Dequeue();\n            if (activity is CompositeActivity)\n            {\n                foreach (Activity child in ((CompositeActivity)activity).Activities)\n                    activities.Enqueue(child);\n            }\n\n            //If we are moving activities, we need not regenerate their identifiers\n            if (((IComponent)activity).Site != null)\n                continue;\n\n            allActivities.Add(activity);\n        }\n\n        // get the root activity\n        CompositeActivity rootActivity = GetRootActivity(parentActivity) as CompositeActivity;\n        ArrayList identifiers = new ArrayList(); // all the identifiers in the workflow\n        identifiers.AddRange(GetIdentifiersInCompositeActivity(rootActivity));\n\n        foreach (Activity activity in allActivities)\n        {\n            string finalIdentifier = activity.Name;\n\n            // now loop until we find a identifier that hasn&#39;t been used.\n            string baseIdentifier = GetBaseIdentifier(activity);\n            int index = 0;\n\n            identifiers.Sort();\n            while (finalIdentifier == null || finalIdentifier.Length == 0 || identifiers.BinarySearch(finalIdentifier.ToLower(), StringComparer.OrdinalIgnoreCase) &gt;= 0)\n            {\n                finalIdentifier = string.Format(&quot;{0}{1}&quot;, baseIdentifier, ++index);\n            }\n\n            // add new identifier to collection \n            identifiers.Add(finalIdentifier);\n            activity.Name = finalIdentifier;\n        }\n    }\n\n    private static IList GetIdentifiersInCompositeActivity(CompositeActivity compositeActivity)\n    {\n        ArrayList identifiers = new ArrayList();\n        if (compositeActivity != null)\n        {\n            identifiers.Add(compositeActivity.Name);\n            IList&lt;Activity&gt; allChildren = GetAllNestedActivities(compositeActivity);\n            foreach (Activity activity in allChildren)\n                identifiers.Add(activity.Name);\n        }\n        return ArrayList.ReadOnly(identifiers);\n    }\n\n    private static string GetBaseIdentifier(Activity activity)\n    {\n        string baseIdentifier = activity.GetType().Name;\n        StringBuilder b = new StringBuilder(baseIdentifier.Length);\n        for (int i = 0; i &lt; baseIdentifier.Length; i++)\n        {\n            if (Char.IsUpper(baseIdentifier[i]) &amp;&amp; (i == 0 || i == baseIdentifier.Length - 1 || Char.IsUpper(baseIdentifier[i + 1])))\n            {\n                b.Append(Char.ToLower(baseIdentifier[i]));\n            }\n            else\n            {\n                b.Append(baseIdentifier.Substring(i));\n                break;\n            }\n        }\n        return b.ToString();\n    }\n\n    private static Activity GetRootActivity(Activity activity)\n    {\n        if (activity == null)\n            throw new ArgumentException(&quot;activity&quot;);\n\n        while (activity.Parent != null)\n            activity = activity.Parent;\n\n        return activity;\n    }\n\n    private static Activity[] GetAllNestedActivities(CompositeActivity compositeActivity)\n    {\n        if (compositeActivity == null)\n            throw new ArgumentNullException(&quot;compositeActivity&quot;);\n\n        ArrayList nestedActivities = new ArrayList();\n        Queue compositeActivities = new Queue();\n        compositeActivities.Enqueue(compositeActivity);\n        while (compositeActivities.Count &gt; 0)\n        {\n            CompositeActivity compositeActivity2 = (CompositeActivity)compositeActivities.Dequeue();\n\n            foreach (Activity activity in compositeActivity2.Activities)\n            {\n                nestedActivities.Add(activity);\n                if (activity is CompositeActivity)\n                    compositeActivities.Enqueue(activity);\n            }\n\n            foreach (Activity activity in compositeActivity2.EnabledActivities)\n            {\n                if (!nestedActivities.Contains(activity))\n                {\n                    nestedActivities.Add(activity);\n                    if (activity is CompositeActivity)\n                        compositeActivities.Enqueue(activity);\n                }\n            }\n        }\n        return (Activity[])nestedActivities.ToArray(typeof(Activity));\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"WF_Samples#41\">Friend NotInheritable Class IdentifierCreationService\n    Implements IIdentifierCreationService\n    Private serviceProvider As IServiceProvider = Nothing\n\n    Friend Sub New(ByVal serviceProvider As IServiceProvider)\n        Me.serviceProvider = serviceProvider\n    End Sub\n\n    Sub ValidateIdentifier(ByVal activity As Activity, ByVal identifier As String) Implements IIdentifierCreationService.ValidateIdentifier\n        If identifier Is Nothing Then\n            Throw New ArgumentNullException(&quot;identifier&quot;)\n        End If\n        If activity Is Nothing Then\n            Throw New ArgumentNullException(&quot;activity&quot;)\n        End If\n        If activity.Name.ToLower().Equals(identifier.ToLower()) Then\n            Return\n        End If\n        Dim identifiers As New ArrayList()\n        Dim rootActivity As Activity = GetRootActivity(activity)\n        identifiers.AddRange(GetIdentifiersInCompositeActivity(CType(rootActivity, CompositeActivity)))\n        identifiers.Sort()\n        If identifiers.BinarySearch(identifier.ToLower(), StringComparer.OrdinalIgnoreCase) &gt;= 0 Then\n            Throw New ArgumentException(String.Format(&quot;Duplicate Component Identifier 0}&quot;, identifier))\n        End If\n    End Sub\n\n    Sub EnsureUniqueIdentifiers(ByVal parentActivity As CompositeActivity, ByVal childActivities As ICollection) Implements IIdentifierCreationService.EnsureUniqueIdentifiers\n\n        If parentActivity Is Nothing Then\n            Throw New ArgumentNullException(&quot;parentActivity&quot;)\n        End If\n        If childActivities Is Nothing Then\n            Throw New ArgumentNullException(&quot;childActivities&quot;)\n        End If\n        Dim allActivities As New List(Of Activity)()\n\n        Dim activities As New Queue(childActivities)\n        While activities.Count &gt; 0\n\n            Dim activity As Activity = CType(activities.Dequeue(), Activity)\n            If TypeOf activity Is CompositeActivity Then\n                For Each child As Activity In CType(activity, CompositeActivity).Activities\n                    activities.Enqueue(child)\n                Next\n            End If\n\n            &#39;If we are moving activities, we need not regenerate their identifiers\n            If CType(activity, IComponent).Site IsNot Nothing Then\n                Continue While\n            End If\n\n            allActivities.Add(activity)\n        End While\n\n        &#39; get the root activity\n        Dim rootActivity As CompositeActivity = CType(GetRootActivity(parentActivity), CompositeActivity)\n        Dim identifiers As New ArrayList() &#39; all the identifiers in the workflow\n        identifiers.AddRange(GetIdentifiersInCompositeActivity(rootActivity))\n\n        For Each activity As Activity In allActivities\n\n            Dim finalIdentifier As String = activity.Name\n\n            &#39; now loop until we find a identifier that hasn&#39;t been used.\n            Dim baseIdentifier As String = GetBaseIdentifier(activity)\n            Dim index As Integer = 0\n\n            identifiers.Sort()\n            While finalIdentifier Is Nothing Or _\n            finalIdentifier.Length = 0 Or _\n            identifiers.BinarySearch(finalIdentifier.ToLower(), StringComparer.OrdinalIgnoreCase) &gt;= 0\n                finalIdentifier = String.Format(&quot;0}1}&quot;, baseIdentifier, ++index)\n            End While\n\n            &#39; add new identifier to collection \n            identifiers.Add(finalIdentifier)\n            activity.Name = finalIdentifier\n        Next\n    End Sub\n\n    Private Shared Function GetIdentifiersInCompositeActivity(ByVal CompositeActivity As CompositeActivity) As IList\n        Dim identifiers As New ArrayList()\n        If CompositeActivity IsNot Nothing Then\n            identifiers.Add(CompositeActivity.Name)\n            Dim allChildren As IList(Of Activity) = GetAllNestedActivities(CompositeActivity)\n            For Each activity As Activity In allChildren\n                identifiers.Add(activity.Name)\n            Next\n        End If\n\n        Return ArrayList.ReadOnly(identifiers)\n    End Function\n\n    Private Shared Function GetBaseIdentifier(ByVal activity As Activity)\n        Dim baseIdentifier As String = activity.GetType().Name\n        Dim b As New StringBuilder(baseIdentifier.Length)\n        For i As Integer = 0 To baseIdentifier.Length\n            If Char.IsUpper(baseIdentifier(i)) And (i = 0 Or i = baseIdentifier.Length - 1 Or Char.IsUpper(baseIdentifier(i + 1))) Then\n                b.Append(Char.ToLower(baseIdentifier(i)))\n            Else\n                b.Append(baseIdentifier.Substring(i))\n                Exit For\n            End If\n        Next\n        Return b.ToString()\n    End Function\n\n    Private Shared Function GetRootActivity(ByVal activity As Activity) As Activity\n        If activity Is Nothing Then\n            Throw New ArgumentException(&quot;activity&quot;)\n        End If\n\n        While activity.Parent IsNot Nothing\n            activity = activity.Parent\n        End While\n\n        Return activity\n    End Function\n\n    Private Shared Function GetAllNestedActivities(ByVal compositeActivity As CompositeActivity) As Activity()\n\n        If compositeActivity Is Nothing Then\n            Throw New ArgumentNullException(&quot;compositeActivity&quot;)\n        End If\n\n        Dim nestedActivities As New ArrayList()\n        Dim compositeActivities As New Queue()\n        compositeActivities.Enqueue(compositeActivity)\n        While compositeActivities.Count &gt; 0\n\n            Dim compositeActivity2 As CompositeActivity = CType(compositeActivities.Dequeue(), CompositeActivity)\n\n            For Each activity As Activity In compositeActivity2.Activities\n                nestedActivities.Add(activity)\n                If activity Is compositeActivity Then\n                    compositeActivities.Enqueue(activity)\n                End If\n            Next\n\n            For Each activity As Activity In compositeActivity2.EnabledActivities\n                If Not nestedActivities.Contains(activity) Then\n                    nestedActivities.Add(activity)\n                    If (activity Is compositeActivity) Then\n                        compositeActivities.Enqueue(activity)\n                    End If\n                End If\n            Next\n        End While\n        Return CType(nestedActivities.ToArray(GetType(Activity)), Activity())\n    End Function\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<div class=\"NOTE\"><h5>Note</h5><p>This material discusses types and namespaces that are obsolete. For more information, see <a href=\"http://aka.ms/wfdeprecatedtypes\" data-linktype=\"external\">Deprecated Types in Windows Workflow Foundation 4.5</a>.</p>\n</div>\n<p> IIdentifierCreationService provides a mechanism to create uniquely named identifiers throughout a range of activities.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Workflow_ComponentModel_Design_IIdentifierCreationService_EnsureUniqueIdentifiers_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Workflow_ComponentModel_Design_IIdentifierCreationService_EnsureUniqueIdentifiers_System_Workflow_ComponentModel_CompositeActivity_System_Collections_ICollection_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">EnsureUniqueIdentifiers(CompositeActivity, ICollection)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Provides a mechanism to ensure that Activities added to a <a class=\"xref\" href=\"system.workflow.componentmodel.compositeactivity\" data-linktype=\"relative-path\">CompositeActivity</a> are uniquely named.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void EnsureUniqueIdentifiers (System.Workflow.ComponentModel.CompositeActivity parentActivity, System.Collections.ICollection childActivities);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>parentActivity</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.workflow.componentmodel.compositeactivity\" data-linktype=\"relative-path\">CompositeActivity</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.workflow.componentmodel.compositeactivity\" data-linktype=\"relative-path\">CompositeActivity</a> that will contain the uniquely named activities.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>childActivities</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A collection of activities to ensure that activities are uniquely named.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.obsoleteattribute\" title=\"System.ObsoleteAttribute\" data-linktype=\"relative-path\">ObsoleteAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use EnsureUniqueIdentifiers to ensure activities inserted into a <a class=\"xref\" href=\"system.workflow.componentmodel.compositeactivity\" data-linktype=\"relative-path\">CompositeActivity</a> have unique identifiers.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Workflow_ComponentModel_Design_IIdentifierCreationService_ValidateIdentifier_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Workflow_ComponentModel_Design_IIdentifierCreationService_ValidateIdentifier_System_Workflow_ComponentModel_Activity_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ValidateIdentifier(Activity, String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Provides a mechanism to test that an identifier is unique within an <a class=\"xref\" href=\"system.workflow.componentmodel.activity\" data-linktype=\"relative-path\">Activity</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void ValidateIdentifier (System.Workflow.ComponentModel.Activity activity, string identifier);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>activity</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.workflow.componentmodel.activity\" data-linktype=\"relative-path\">Activity</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.workflow.componentmodel.activity\" data-linktype=\"relative-path\">Activity</a> against which to test the identifier.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>identifier</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The identifier to test for validity.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.obsoleteattribute\" title=\"System.ObsoleteAttribute\" data-linktype=\"relative-path\">ObsoleteAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use ValidateIdentifier to make sure an identifier is unique and properly formatted for use within a specified <a class=\"xref\" href=\"system.workflow.componentmodel.activity\" data-linktype=\"relative-path\">Activity</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Workflow.ComponentModel.Design.IIdentifierCreationService.yml\">\r\n<meta name=\"APIName\" content=\"System.Workflow.ComponentModel.Design.IIdentifierCreationService\">\r\n<meta name=\"APIName\" content=\"System.Workflow.ComponentModel.Design.IIdentifierCreationService.EnsureUniqueIdentifiers\">\r\n<meta name=\"APIName\" content=\"System.Workflow.ComponentModel.Design.IIdentifierCreationService.ValidateIdentifier\">\r\n<meta name=\"APILocation\" content=\"System.Workflow.ComponentModel.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:59 PM\">\r\n<meta name=\"document_id\" content=\"ca58734b-0a02-2034-e0cb-feaa3698e035\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a mechanism to create uniquely named identifiers throughout a specified range of activities.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.workflow.componentmodel.design/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Workflow.ComponentModel.Design.IIdentifierCreationService\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","uhfHeaderId":"MSDocsHeader-DotNet","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Workflow.ComponentModel.Design.IIdentifierCreationService.yml","open_to_public_contributors":false,"api_name":["System.Workflow.ComponentModel.Design.IIdentifierCreationService","System.Workflow.ComponentModel.Design.IIdentifierCreationService.EnsureUniqueIdentifiers","System.Workflow.ComponentModel.Design.IIdentifierCreationService.ValidateIdentifier"],"api_location":["System.Workflow.ComponentModel.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Workflow.ComponentModel.Design.IIdentifierCreationService","System::Workflow::ComponentModel::Design::IIdentifierCreationService","System.Workflow.ComponentModel.Design.IIdentifierCreationService.EnsureUniqueIdentifiers","System::Workflow::ComponentModel::Design::IIdentifierCreationService::EnsureUniqueIdentifiers","System.Workflow.ComponentModel.Design.IIdentifierCreationService.ValidateIdentifier","System::Workflow::ComponentModel::Design::IIdentifierCreationService::ValidateIdentifier"],"dev_langs":["csharp"],"updated_at":"2017-04-01 05:59 PM","document_id":"ca58734b-0a02-2034-e0cb-feaa3698e035","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Workflow.ComponentModel.Design/IIdentifierCreationService.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IIdentifierCreationService interface | Microsoft Docs","_op_ogTitle":"IIdentifierCreationService interface","description":"Provides a mechanism to create uniquely named identifiers throughout a specified range of activities.\n","toc_asset_id":"api/_splitted/System.Workflow.ComponentModel.Design/toc.json","toc_rel":"_splitted/System.Workflow.ComponentModel.Design/toc.json","source_url":"","ms.assetid":"System.Workflow.ComponentModel.Design.IIdentifierCreationService","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.workflow.componentmodel.design.iidentifiercreationservice","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.workflow.componentmodel.design.iidentifiercreationservice","fileRelativePath":"api/System.Workflow.ComponentModel.Design.IIdentifierCreationService.html"},"themesRelativePathToOutputRoot":"_themes/"}