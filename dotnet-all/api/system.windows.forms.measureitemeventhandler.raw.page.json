{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">MeasureItemEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that will handle the <code>MeasureItem</code> event of the <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a>, <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a>, <a class=\"xref\" href=\"system.windows.forms.checkedlistbox\" data-linktype=\"relative-path\">CheckedListBox</a>, or <a class=\"xref\" href=\"system.windows.forms.menuitem\" data-linktype=\"relative-path\">MenuItem</a> controls.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void MeasureItemEventHandler(object sender, MeasureItemEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">MeasureItemEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates using the <a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a> property to perform custom drawing of the items in a <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"MeasureItemEventArgs#1\">Public Class Form1\n   Inherits System.Windows.Forms.Form\n   Private WithEvents listBox1 As System.Windows.Forms.ListBox\n   Private components As System.ComponentModel.Container = Nothing\n\n   Private FontSize As Single = 12.0F\n\n   &#39;\n   &#39;  This sample displays a ListBox that contains a list of all the fonts\n   &#39;  installed on the system and draws each item in its respective font.\n   &#39;\n   Public Sub New()\n      InitializeComponent()\n\n      &#39; Populate control with the fonts installed on the system.\n      Dim families As FontFamily() = FontFamily.Families\n\n      Dim family As FontFamily\n      For Each family In families\n         Dim style As FontStyle = FontStyle.Regular\n\n         &#39; Monotype Corsiva is only available in italic\n         If family.Name = &quot;Monotype Corsiva&quot; Then\n            style = style Or FontStyle.Italic\n         End If\n\n         listBox1.Items.Add(New ListBoxFontItem(New Font(family.Name, FontSize, style, GraphicsUnit.Point)))\n      Next family\n   End Sub\n\n\n   Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)\n      If disposing Then\n         If (components IsNot Nothing) Then\n            components.Dispose()\n         End If\n\n         If (foreColorBrush IsNot Nothing) Then\n            foreColorBrush.Dispose()\n         End If\n      End If\n\n      MyBase.Dispose(disposing)\n   End Sub\n\n   Private Sub InitializeComponent()\n      Me.listBox1 = New System.Windows.Forms.ListBox()\n      Me.SuspendLayout()\n      &#39; \n      &#39; listBox1\n      &#39; \n      Me.listBox1.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawVariable\n      Me.listBox1.Location = New System.Drawing.Point(16, 48)\n      Me.listBox1.Name = &quot;listBox1&quot;\n      Me.listBox1.SelectionMode = System.Windows.Forms.SelectionMode.MultiExtended\n      Me.listBox1.Size = New System.Drawing.Size(256, 134)\n      Me.listBox1.TabIndex = 0\n      &#39; \n      &#39; Form1\n      &#39; \n      Me.ClientSize = New System.Drawing.Size(292, 273)\n      Me.Controls.AddRange(New System.Windows.Forms.Control() {Me.listBox1})\n      Me.Name = &quot;Form1&quot;\n      Me.Text = &quot;Form1&quot;\n      Me.ResumeLayout(False)\n   End Sub\n\n   &lt;STAThread()&gt; Shared Sub Main()\n      Application.Run(New Form1())\n   End Sub\n\n   Private Sub listBox1_MeasureItem(ByVal sender As Object, ByVal e As System.Windows.Forms.MeasureItemEventArgs) Handles listBox1.MeasureItem\n      Dim font As Font = CType(listBox1.Items(e.Index), ListBoxFontItem).Font\n      Dim stringSize As SizeF = e.Graphics.MeasureString(font.Name, font)\n\n      &#39; Set the height and width of the item\n      e.ItemHeight = CInt(stringSize.Height)\n      e.ItemWidth = CInt(stringSize.Width)\n   End Sub\n\n   &#39; For efficiency, cache the brush used for drawing.\n   Private foreColorBrush As SolidBrush\n\n   Private Sub listBox1_DrawItem(ByVal sender As Object, ByVal e As System.Windows.Forms.DrawItemEventArgs) Handles listBox1.DrawItem\n      Dim brush As Brush\n\n      &#39; Create the brush using the ForeColor specified by the DrawItemEventArgs\n      If foreColorBrush Is Nothing Then\n         foreColorBrush = New SolidBrush(e.ForeColor)\n      Else\n         If Not foreColorBrush.Color.Equals(e.ForeColor) Then\n            &#39; The control&#39;s ForeColor has changed, so dispose of the cached brush and\n            &#39; create a new one.\n            foreColorBrush.Dispose()\n            foreColorBrush = New SolidBrush(e.ForeColor)\n         End If\n      End If\n\n      &#39; Select the appropriate brush depending on if the item is selected.\n      &#39; Since State can be a combinateion (bit-flag) of enum values, you can&#39;t use\n      &#39; &quot;==&quot; to compare them.\n      If (e.State And DrawItemState.Selected) = DrawItemState.Selected Then\n         brush = SystemBrushes.HighlightText\n      Else\n         brush = foreColorBrush\n      End If\n\n      &#39; Perform the painting.\n      Dim font As Font = CType(listBox1.Items(e.Index), ListBoxFontItem).Font\n      e.DrawBackground()\n      e.Graphics.DrawString(font.Name, font, brush, e.Bounds.X, e.Bounds.Y)\n      e.DrawFocusRectangle()\n   End Sub\n\n   &#39;\n   &#39;  A wrapper class for use with storing Fonts in a ListBox.  Since ListBox uses the\n   &#39;  ToString() of its items for the text it displays, this class is needed to return\n   &#39;  the name of the font, rather than its ToString() value.\n   &#39;\n   Public Class ListBoxFontItem\n      Public Font As Font\n\n      Public Sub New(ByVal f As Font)\n         Font = f\n      End Sub\n\n      Public Overrides Function ToString() As String\n         Return Font.Name\n      End Function\n   End Class\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"MeasureItemEventArgs#1\">public ref class Form1: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ListBox^ listBox1;\n   System::ComponentModel::Container^ components;\n\npublic:\n   ~Form1()\n   {\n      if ( components != nullptr )\n      {\n         delete components;\n      }\n   }\n\nprivate:\n\n   /// &lt;summary&gt;\n   /// Required method for Designer support - do not modify\n   /// the contents of this method with the code editor.\n   /// &lt;/summary&gt;\n   void InitializeComponent()\n   {\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;SuspendLayout();\n\n      // \n      // listBox1\n      // \n      this-&gt;listBox1-&gt;DrawMode = System::Windows::Forms::DrawMode::OwnerDrawVariable;\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 16, 48 );\n      this-&gt;listBox1-&gt;Name = &quot;listBox1&quot;;\n      this-&gt;listBox1-&gt;SelectionMode = System::Windows::Forms::SelectionMode::MultiExtended;\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 256, 134 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n      this-&gt;listBox1-&gt;MeasureItem += gcnew System::Windows::Forms::MeasureItemEventHandler( this, &amp;Form1::listBox1_MeasureItem );\n      this-&gt;listBox1-&gt;DrawItem += gcnew System::Windows::Forms::DrawItemEventHandler( this, &amp;Form1::listBox1_DrawItem );\n\n      // \n      // Form1\n      // \n      this-&gt;ClientSize = System::Drawing::Size( 292, 273 );\n      array&lt;System::Windows::Forms::Control^&gt;^temp0 = {this-&gt;listBox1};\n      this-&gt;Controls-&gt;AddRange( temp0 );\n      this-&gt;Name = &quot;Form1&quot;;\n      this-&gt;Text = &quot;Form1&quot;;\n      this-&gt;ResumeLayout( false );\n   }\n\n   void listBox1_MeasureItem( Object^ /*sender*/, MeasureItemEventArgs^ e )\n   {\n      System::Drawing::Font^ font = (dynamic_cast&lt;ListBoxFontItem^&gt;(listBox1-&gt;Items[ e-&gt;Index ]))-&gt;Font;\n      SizeF stringSize = e-&gt;Graphics-&gt;MeasureString( font-&gt;Name, font );\n      \n      // Set the height and width of the item\n      e-&gt;ItemHeight = (int)stringSize.Height;\n      e-&gt;ItemWidth = (int)stringSize.Width;\n   }\n\n   // For efficiency, cache the brush to use for drawing.\n   SolidBrush^ foreColorBrush;\n   void listBox1_DrawItem( Object^ /*sender*/, DrawItemEventArgs^ e )\n   {\n      Brush^ brush;\n\n      // Create the brush using the ForeColor specified by the DrawItemEventArgs\n      if ( foreColorBrush == nullptr )\n            foreColorBrush = gcnew SolidBrush( e-&gt;ForeColor );\n      else\n      if ( foreColorBrush-&gt;Color != e-&gt;ForeColor )\n      {\n         // The control&#39;s ForeColor has changed, so dispose of the cached brush and\n         // create a new one.\n         delete foreColorBrush;\n         foreColorBrush = gcnew SolidBrush( e-&gt;ForeColor );\n      }\n\n      // Select the appropriate brush depending on if the item is selected.\n      // Since State can be a combinateion (bit-flag) of enum values, you can&#39;t use\n      // &quot;==&quot; to compare them.\n      if ( (e-&gt;State &amp; DrawItemState::Selected) == DrawItemState::Selected )\n            brush = SystemBrushes::HighlightText;\n      else\n            brush = foreColorBrush;\n\n      // Perform the painting.\n      System::Drawing::Font^ font = (dynamic_cast&lt;ListBoxFontItem^&gt;(listBox1-&gt;Items[ e-&gt;Index ]))-&gt;Font;\n      e-&gt;DrawBackground();\n      e-&gt;Graphics-&gt;DrawString( font-&gt;Name, font, brush, e-&gt;Bounds );\n      e-&gt;DrawFocusRectangle();\n   }\n\npublic:\n\n   /// &lt;summary&gt;\n   ///  A wrapper class for use with storing Fonts in a ListBox.  Since ListBox uses the\n   ///  ToString() of its items for the text it displays, this class is needed to return\n   ///  the name of the font, rather than its ToString() value.\n   /// &lt;/summary&gt;\n   ref class ListBoxFontItem\n   {\n   public:\n      System::Drawing::Font^ Font;\n      ListBoxFontItem( System::Drawing::Font^ f )\n      {\n         Font = f;\n      }\n\n      virtual String^ ToString() override\n      {\n         return Font-&gt;Name;\n      }\n   };\n};\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew Form1 );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"MeasureItemEventArgs#1\"> public class Form1 : System.Windows.Forms.Form\n {\n    private System.Windows.Forms.ListBox listBox1;\n    private System.ComponentModel.Container components = null;\n\n\n    protected override void Dispose(bool disposing)\n    {\n       if( disposing )\n       {\n          if ( components != null ) \n             components.Dispose();\n\n          if ( foreColorBrush != null )\n             foreColorBrush.Dispose();\n       }\n       base.Dispose(disposing);\n    }\n\n#region Windows Form Designer generated code\n    /// &lt;summary&gt;\n    /// Required method for Designer support - do not modify\n    /// the contents of this method with the code editor.\n    /// &lt;/summary&gt;\n    private void InitializeComponent()\n    {\n       this.listBox1 = new System.Windows.Forms.ListBox();\n       this.SuspendLayout();\n       // \n       // listBox1\n       // \n       this.listBox1.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawVariable;\n       this.listBox1.Location = new System.Drawing.Point(16, 48);\n       this.listBox1.Name = &quot;listBox1&quot;;\n       this.listBox1.SelectionMode = System.Windows.Forms.SelectionMode.MultiExtended;\n       this.listBox1.Size = new System.Drawing.Size(256, 134);\n       this.listBox1.TabIndex = 0;\n       this.listBox1.MeasureItem += new System.Windows.Forms.MeasureItemEventHandler(this.listBox1_MeasureItem);\n       this.listBox1.DrawItem += new System.Windows.Forms.DrawItemEventHandler(this.listBox1_DrawItem);\n       // \n       // Form1\n       // \n       this.ClientSize = new System.Drawing.Size(292, 273);\n       this.Controls.AddRange(new System.Windows.Forms.Control[] {\n                                                                    this.listBox1});\n       this.Name = &quot;Form1&quot;;\n       this.Text = &quot;Form1&quot;;\n       this.ResumeLayout(false);\n\n    }\n#endregion\n\n    [STAThread]\n    static void Main() \n    {\n       Application.Run(new Form1());\n    }\n\n    private void listBox1_MeasureItem(object sender, System.Windows.Forms.MeasureItemEventArgs e)\n    {\n       Font font = ((ListBoxFontItem)listBox1.Items[e.Index]).Font;\n       SizeF stringSize = e.Graphics.MeasureString(font.Name, font);\n\n       // Set the height and width of the item\n       e.ItemHeight = (int)stringSize.Height;\n       e.ItemWidth = (int)stringSize.Width;\n    }\n\n    // For efficiency, cache the brush to use for drawing.\n    private SolidBrush foreColorBrush;\n\n    private void listBox1_DrawItem(object sender, System.Windows.Forms.DrawItemEventArgs e)\n    {\n       Brush brush;\n\n       // Create the brush using the ForeColor specified by the DrawItemEventArgs\n       if ( foreColorBrush == null )\n          foreColorBrush = new SolidBrush(e.ForeColor);\n       else if ( foreColorBrush.Color != e.ForeColor )\n       {\n          // The control&#39;s ForeColor has changed, so dispose of the cached brush and\n          // create a new one.\n          foreColorBrush.Dispose();\n          foreColorBrush = new SolidBrush(e.ForeColor);\n       }\n\n       // Select the appropriate brush depending on if the item is selected.\n       // Since State can be a combinateion (bit-flag) of enum values, you can&#39;t use\n       // &quot;==&quot; to compare them.\n       if ( (e.State &amp; DrawItemState.Selected) == DrawItemState.Selected )\n          brush = SystemBrushes.HighlightText;\n       else\n          brush = foreColorBrush;\n\n       // Perform the painting.\n       Font font = ((ListBoxFontItem)listBox1.Items[e.Index]).Font;\n       e.DrawBackground();\n       e.Graphics.DrawString(font.Name, font, brush, e.Bounds);\n       e.DrawFocusRectangle();\n    }\n\n    /// &lt;summary&gt;\n    ///  A wrapper class for use with storing Fonts in a ListBox.  Since ListBox uses the\n    ///  ToString() of its items for the text it displays, this class is needed to return\n    ///  the name of the font, rather than its ToString() value.\n    /// &lt;/summary&gt;\n    public class ListBoxFontItem \n    {\n       public Font Font;\n\n       public ListBoxFontItem(Font f) \n       {\n          Font = f;\n       }\n\n       public override string ToString() \n       {\n          return Font.Name;\n       }\n    }\n }\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>When you create a MeasureItemEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event handler delegates, see <a href=\"../topic/handling%20and%20raising%20events\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.MeasureItemEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.MeasureItemEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.MeasureItemEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.MeasureItemEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.MeasureItemEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.MeasureItemEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"f7477143-71f6-4b57-0599-9e0f2ac072ae\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that will handle the MeasureItem event of the , , , or  controls.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.windows.forms/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.MeasureItemEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.MeasureItemEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Windows.Forms.MeasureItemEventHandler","System.Windows.Forms.MeasureItemEventHandler..ctor","System.Windows.Forms.MeasureItemEventHandler.Invoke","System.Windows.Forms.MeasureItemEventHandler.BeginInvoke","System.Windows.Forms.MeasureItemEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.MeasureItemEventHandler","System::Windows::Forms::MeasureItemEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"f7477143-71f6-4b57-0599-9e0f2ac072ae","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Windows.Forms/MeasureItemEventHandler.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"MeasureItemEventHandler delegate | Microsoft Docs","_op_ogTitle":"MeasureItemEventHandler delegate","description":"Represents the method that will handle the MeasureItem event of the , , , or  controls.\n","toc_asset_id":"api/_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.MeasureItemEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.measureitemeventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.measureitemeventhandler","fileRelativePath":"api/System.Windows.Forms.MeasureItemEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}