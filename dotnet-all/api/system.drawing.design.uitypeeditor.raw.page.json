{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">UITypeEditor</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides a base class that can be used to design value editors that can provide a user interface (UI) for representing and editing the values of objects of the supported data types.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class UITypeEditor</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">UITypeEditor</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Derived</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n        \t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.design.binaryeditor\" data-linktype=\"relative-path\">BinaryEditor</a></span></div>\r\n        \t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.design.collectioneditor\" data-linktype=\"relative-path\">CollectionEditor</a></span></div>\r\n        \t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.design.datetimeeditor\" data-linktype=\"relative-path\">DateTimeEditor</a></span></div>\r\n        \t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.design.multilinestringeditor\" data-linktype=\"relative-path\">MultilineStringEditor</a></span></div>\r\n        \t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.design.objectselectoreditor\" data-linktype=\"relative-path\">ObjectSelectorEditor</a></span></div>\r\n        \t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.design.coloreditor\" data-linktype=\"relative-path\">ColorEditor</a></span></div>\r\n        \t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.design.contentalignmenteditor\" data-linktype=\"relative-path\">ContentAlignmentEditor</a></span></div>\r\n        \t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.design.cursoreditor\" data-linktype=\"relative-path\">CursorEditor</a></span></div>\r\n        \t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.design.fonteditor\" data-linktype=\"relative-path\">FontEditor</a></span></div>\r\n        \t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.design.fontnameeditor\" data-linktype=\"relative-path\">FontNameEditor</a></span></div>\r\n  \t\t\t\t<div class=\"cdl hiddenDerivedClass\" hidden=\"\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.design.iconeditor\" data-linktype=\"relative-path\">IconEditor</a></span></div>\r\n  \t\t\t\t<div class=\"cdl hiddenDerivedClass\" hidden=\"\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.design.imageeditor\" data-linktype=\"relative-path\">ImageEditor</a></span></div>\r\n  \t\t\t\t<div class=\"cdl hiddenDerivedClass\" hidden=\"\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.messaging.design.queuepatheditor\" data-linktype=\"relative-path\">QueuePathEditor</a></span></div>\r\n  \t\t\t\t<div class=\"cdl hiddenDerivedClass\" hidden=\"\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.design.connectionstringeditor\" data-linktype=\"relative-path\">ConnectionStringEditor</a></span></div>\r\n  \t\t\t\t<div class=\"cdl hiddenDerivedClass\" hidden=\"\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.design.databindingcollectioneditor\" data-linktype=\"relative-path\">DataBindingCollectionEditor</a></span></div>\r\n  \t\t\t\t<div class=\"cdl hiddenDerivedClass\" hidden=\"\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.design.expressionscollectioneditor\" data-linktype=\"relative-path\">ExpressionsCollectionEditor</a></span></div>\r\n  \t\t\t\t<div class=\"cdl hiddenDerivedClass\" hidden=\"\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.design.urleditor\" data-linktype=\"relative-path\">UrlEditor</a></span></div>\r\n  \t\t\t\t<div class=\"cdl hiddenDerivedClass\" hidden=\"\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.design.xmlfileeditor\" data-linktype=\"relative-path\">XmlFileEditor</a></span></div>\r\n  \t\t\t\t<div class=\"cdl hiddenDerivedClass\" hidden=\"\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.design.webcontrols.datacontrolfieldtypeeditor\" data-linktype=\"relative-path\">DataControlFieldTypeEditor</a></span></div>\r\n  \t\t\t\t<div class=\"cdl hiddenDerivedClass\" hidden=\"\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.design.webcontrols.datagridcolumncollectioneditor\" data-linktype=\"relative-path\">DataGridColumnCollectionEditor</a></span></div>\r\n  \t\t\t\t<div class=\"cdl hiddenDerivedClass\" hidden=\"\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.design.webcontrols.datapagerfieldtypeeditor\" data-linktype=\"relative-path\">DataPagerFieldTypeEditor</a></span></div>\r\n  \t\t\t\t<div class=\"cdl hiddenDerivedClass\" hidden=\"\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.design.webcontrols.menubindingseditor\" data-linktype=\"relative-path\">MenuBindingsEditor</a></span></div>\r\n  \t\t\t\t<div class=\"cdl hiddenDerivedClass\" hidden=\"\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.design.webcontrols.menuitemcollectioneditor\" data-linktype=\"relative-path\">MenuItemCollectionEditor</a></span></div>\r\n  \t\t\t\t<div class=\"cdl hiddenDerivedClass\" hidden=\"\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.design.webcontrols.parametercollectioneditor\" data-linktype=\"relative-path\">ParameterCollectionEditor</a></span></div>\r\n  \t\t\t\t<div class=\"cdl hiddenDerivedClass\" hidden=\"\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.design.webcontrols.regextypeeditor\" data-linktype=\"relative-path\">RegexTypeEditor</a></span></div>\r\n  \t\t\t\t<div class=\"cdl hiddenDerivedClass\" hidden=\"\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.design.webcontrols.treenodecollectioneditor\" data-linktype=\"relative-path\">TreeNodeCollectionEditor</a></span></div>\r\n  \t\t\t\t<div class=\"cdl hiddenDerivedClass\" hidden=\"\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.design.webcontrols.treeviewbindingseditor\" data-linktype=\"relative-path\">TreeViewBindingsEditor</a></span></div>\r\n  \t\t\t\t<div class=\"cdl hiddenDerivedClass\" hidden=\"\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.design.anchoreditor\" data-linktype=\"relative-path\">AnchorEditor</a></span></div>\r\n  \t\t\t\t<div class=\"cdl hiddenDerivedClass\" hidden=\"\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.design.bordersideseditor\" data-linktype=\"relative-path\">BorderSidesEditor</a></span></div>\r\n  \t\t\t\t<div class=\"cdl hiddenDerivedClass\" hidden=\"\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.design.dockeditor\" data-linktype=\"relative-path\">DockEditor</a></span></div>\r\n  \t\t\t\t<div class=\"cdl hiddenDerivedClass\" hidden=\"\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.design.filenameeditor\" data-linktype=\"relative-path\">FileNameEditor</a></span></div>\r\n  \t\t\t\t<div class=\"cdl hiddenDerivedClass\" hidden=\"\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.design.foldernameeditor\" data-linktype=\"relative-path\">FolderNameEditor</a></span></div>\r\n  \t\t\t\t<div class=\"cdl hiddenDerivedClass\" hidden=\"\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.design.shortcutkeyseditor\" data-linktype=\"relative-path\">ShortcutKeysEditor</a></span></div>\r\n  \t\t\t\t<div class=\"cdl hiddenDerivedClass\" hidden=\"\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.workflow.componentmodel.design.binduitypeeditor\" data-linktype=\"relative-path\">BindUITypeEditor</a></span></div>\r\n  \t\t\t\t<div class=\"cdl hiddenDerivedClass\" hidden=\"\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.workflow.componentmodel.design.typebrowsereditor\" data-linktype=\"relative-path\">TypeBrowserEditor</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><a class=\"derivedClassesButton\" href=\"#\" title=\"Show all derived classes\" data-linktype=\"relative-path\">More&#8230;</a></div>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates that a UITypeEditor can be associated with an integer, double, or float property using an <a class=\"xref\" href=\"system.componentmodel.editorattribute\" data-linktype=\"relative-path\">EditorAttribute</a> to provide an angle selection interface from the Properties window in design mode. This example uses the <a class=\"xref\" href=\"system.windows.forms.design.iwindowsformseditorservice\" data-linktype=\"relative-path\">IWindowsFormsEditorService</a> interface to display a drop-down control in the Properties window in design mode. Compile the code and add the assembly to the Toolbox using the <strong>Customize Toolbox</strong> command on the <strong>Tools</strong> menu of Visual Studio. Create an instance of the <code>AngleTestControl</code> and click the drop-down button next to the Angle property in the Properties window to configure the property using the editor.  </p>\n<pre><code class=\"lang-cs\" name=\"AngleEditor#1\">using System;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Drawing.Design;\nusing System.Windows.Forms;\nusing System.Windows.Forms.Design;\n\nnamespace AngleEditor\n{\n    // This UITypeEditor can be associated with Int32, Double and Single\n    // properties to provide a design-mode angle selection interface.\n    [System.Security.Permissions.PermissionSet(System.Security.Permissions.SecurityAction.Demand, Name = &quot;FullTrust&quot;)] \n    public class AngleEditor : System.Drawing.Design.UITypeEditor\n    {        \n        public AngleEditor()\n        {\n        }\n\n        // Indicates whether the UITypeEditor provides a form-based (modal) dialog, \n        // drop down dialog, or no UI outside of the properties window.\n        public override System.Drawing.Design.UITypeEditorEditStyle GetEditStyle(System.ComponentModel.ITypeDescriptorContext context)\n        {\n            return UITypeEditorEditStyle.DropDown;\n        }\n\n        // Displays the UI for value selection.\n        public override object EditValue(System.ComponentModel.ITypeDescriptorContext context, System.IServiceProvider provider, object value)\n        {            \n            // Return the value if the value is not of type Int32, Double and Single.\n            if( value.GetType() != typeof(double) &amp;&amp; value.GetType() != typeof(float) &amp;&amp; value.GetType() != typeof(int) )\n                return value;\n\n            // Uses the IWindowsFormsEditorService to display a \n            // drop-down UI in the Properties window.\n            IWindowsFormsEditorService edSvc = (IWindowsFormsEditorService)provider.GetService(typeof(IWindowsFormsEditorService));\n            if( edSvc != null )\n            {\n                // Display an angle selection control and retrieve the value.\n                AngleControl angleControl = new AngleControl((double)value);\n                edSvc.DropDownControl( angleControl );\n\n                // Return the value in the appropraite data format.\n                if( value.GetType() == typeof(double) )\n                    return angleControl.angle;\n                else if( value.GetType() == typeof(float) )\n                    return (float)angleControl.angle;\n                else if( value.GetType() == typeof(int) )\n                    return (int)angleControl.angle;\n            }\n            return value;\n        }\n\n        // Draws a representation of the property&#39;s value.\n        public override void PaintValue(System.Drawing.Design.PaintValueEventArgs e)\n        {\n            int normalX = (e.Bounds.Width/2);\n            int normalY = (e.Bounds.Height/2);\n            \n            // Fill background and ellipse and center point.\n            e.Graphics.FillRectangle(new SolidBrush(Color.DarkBlue), e.Bounds.X, e.Bounds.Y, e.Bounds.Width, e.Bounds.Height);            \n            e.Graphics.FillEllipse(new SolidBrush(Color.White), e.Bounds.X+1, e.Bounds.Y+1, e.Bounds.Width-3, e.Bounds.Height-3);\n            e.Graphics.FillEllipse(new SolidBrush(Color.SlateGray), normalX+e.Bounds.X-1, normalY+e.Bounds.Y-1, 3, 3);\n            \n            // Draw line along the current angle.\n            double radians = ((double)e.Value*Math.PI) / (double)180;\n            e.Graphics.DrawLine( new Pen(new SolidBrush(Color.Red), 1), normalX+e.Bounds.X, normalY+e.Bounds.Y, \n                e.Bounds.X+ ( normalX + (int)( (double)normalX * Math.Cos( radians ) ) ),\n                e.Bounds.Y+ ( normalY + (int)( (double)normalY * Math.Sin( radians ) ) ) );\n        }\n        \n        // Indicates whether the UITypeEditor supports painting a \n        // representation of a property&#39;s value.\n        public override bool GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext context)\n        {\n            return true;\n        }\n    }\n\n    // Provides a user interface for adjusting an angle value.\n    internal class AngleControl : System.Windows.Forms.UserControl\n    {\n        // Stores the angle.\n        public double angle;\n        // Stores the rotation offset.\n        private int rotation = 0;\n        // Control state tracking variables.\n        private int dbx = -10;\n        private int dby = -10;\n        private int overButton = -1;\n        \n        public AngleControl(double initial_angle)\n        {\n            this.angle = initial_angle;                 \n            this.SetStyle( ControlStyles.AllPaintingInWmPaint, true );\n        }\n\n        protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)\n        {\n            // Set angle origin point at center of control.\n            int originX = (this.Width/2);\n            int originY = (this.Height/2);            \n            \n            // Fill background and ellipse and center point.\n            e.Graphics.FillRectangle(new SolidBrush(Color.DarkBlue), 0, 0, this.Width, this.Height);\n            e.Graphics.FillEllipse(new SolidBrush(Color.White), 1, 1, this.Width-3, this.Height-3);            \n            e.Graphics.FillEllipse(new SolidBrush(Color.SlateGray), originX-1, originY-1, 3, 3);\n            \n            // Draw angle markers.\n            int startangle = (270-rotation)%360;\n            e.Graphics.DrawString(startangle.ToString(), new Font(&quot;Arial&quot;, 8), new SolidBrush(Color.DarkGray), (this.Width/2)-10, 10);\n            startangle = (startangle+90)%360;\n            e.Graphics.DrawString(startangle.ToString(), new Font(&quot;Arial&quot;, 8), new SolidBrush(Color.DarkGray), this.Width-18, (this.Height/2)-6);\n            startangle = (startangle+90)%360;\n            e.Graphics.DrawString(startangle.ToString(), new Font(&quot;Arial&quot;, 8), new SolidBrush(Color.DarkGray), (this.Width/2)-6, this.Height-18);\n            startangle = (startangle+90)%360;\n            e.Graphics.DrawString(startangle.ToString(), new Font(&quot;Arial&quot;, 8), new SolidBrush(Color.DarkGray), 10, (this.Height/2)-6);\n\n            // Draw line along the current angle.         \n            double radians = ((((angle+rotation)+360)%360)*Math.PI) / (double)180;\n            e.Graphics.DrawLine( new Pen(new SolidBrush(Color.Red), 1), originX, originY, \n                originX + (int)( (double)originX * (double)Math.Cos( radians )   ),\n                originY + (int)( (double)originY * (double)Math.Sin( radians ) ) );\n            \n            // Output angle information.\n            e.Graphics.FillRectangle(new SolidBrush(Color.Gray), this.Width-84, 3, 82, 13);\n            e.Graphics.DrawString(&quot;Angle: &quot;+angle.ToString(&quot;F4&quot;), new Font(&quot;Arial&quot;, 8), new SolidBrush(Color.Yellow), this.Width-84, 2);\n            // Draw square at mouse position of last angle adjustment.\n            e.Graphics.DrawRectangle(new Pen(new SolidBrush(Color.Black), 1), dbx-2, dby-2, 4, 4);\n            // Draw rotation adjustment buttons.\n            if( overButton == 1 )\n            {\n                e.Graphics.FillRectangle(new SolidBrush(Color.Green), this.Width-28, this.Height-14, 12, 12);\n                e.Graphics.FillRectangle(new SolidBrush(Color.Gray), 2, this.Height-13, 110, 12);    \n                e.Graphics.DrawString(&quot;Rotate 90 degrees left&quot;, new Font(&quot;Arial&quot;, 8), new SolidBrush(Color.White), 2, this.Height-14);\n            }\n            else            \n                e.Graphics.FillRectangle(new SolidBrush(Color.DarkGreen), this.Width-28, this.Height-14, 12, 12);\n            if( overButton == 2 )\n            {\n                e.Graphics.FillRectangle(new SolidBrush(Color.Green), this.Width-14, this.Height-14, 12, 12);\n                e.Graphics.FillRectangle(new SolidBrush(Color.Gray), 2, this.Height-13, 116, 12);    \n                e.Graphics.DrawString(&quot;Rotate 90 degrees right&quot;, new Font(&quot;Arial&quot;, 8), new SolidBrush(Color.White), 2, this.Height-14);\n            }\n            else\n                e.Graphics.FillRectangle(new SolidBrush(Color.DarkGreen), this.Width-14, this.Height-14, 12, 12);\n            e.Graphics.DrawEllipse(new Pen(new SolidBrush(Color.White), 1), this.Width-11, this.Height-11, 6, 6);\n            e.Graphics.DrawEllipse(new Pen(new SolidBrush(Color.White), 1), this.Width-25, this.Height-11, 6, 6);\n            if( overButton == 1 )\n                e.Graphics.FillRectangle(new SolidBrush(Color.Green), this.Width-25, this.Height-6, 4, 4);\n            else\n                e.Graphics.FillRectangle(new SolidBrush(Color.DarkGreen), this.Width-25, this.Height-6, 4, 4);\n            if( overButton == 2 )\n                e.Graphics.FillRectangle(new SolidBrush(Color.Green), this.Width-8, this.Height-6, 4, 4);\n            else\n                e.Graphics.FillRectangle(new SolidBrush(Color.DarkGreen), this.Width-8, this.Height-6, 4, 4);\n            e.Graphics.FillPolygon(new SolidBrush(Color.White), new Point[] { new Point(this.Width-7, this.Height-8), new Point(this.Width-3, this.Height-8), new Point(this.Width-5, this.Height-4) });\n            e.Graphics.FillPolygon(new SolidBrush(Color.White), new Point[] { new Point(this.Width-26, this.Height-8), new Point(this.Width-21, this.Height-8), new Point(this.Width-25, this.Height-4) });            \n        }\n\n        protected override void OnMouseDown(System.Windows.Forms.MouseEventArgs e)\n        {            \n            // Handle rotation adjustment button clicks.\n            if( e.X &gt;= this.Width-28 &amp;&amp; e.X &lt;= this.Width-2 &amp;&amp; e.Y &gt;= this.Height-14 &amp;&amp; e.Y &lt;= this.Height-2 )\n            {\n                if( e.X &lt;= this.Width-16 )\n                    rotation -= 90;\n                else if( e.X &gt;= this.Width-14 )\n                    rotation += 90;\n                if( rotation &lt; 0 )\n                    rotation += 360;\n                rotation = rotation%360;\n                dbx=-10;\n                dby=-10;\n            }\n            else\n                UpdateAngle(e.X, e.Y);                \n            this.Refresh();        \n        }\n\n        protected override void OnMouseMove(System.Windows.Forms.MouseEventArgs e)\n        {\n            if( e.Button == MouseButtons.Left )\n            {\n                UpdateAngle(e.X, e.Y);                                        \n                overButton = -1;                \n            }\n            else if( e.X &gt;= this.Width-28 &amp;&amp; e.X &lt;= this.Width-16 &amp;&amp; e.Y &gt;= this.Height-14 &amp;&amp; e.Y &lt;= this.Height-2 )\n                overButton = 1;\n            else if( e.X &gt;= this.Width-14 &amp;&amp; e.X &lt;= this.Width-2 &amp;&amp; e.Y &gt;= this.Height-14 &amp;&amp; e.Y &lt;= this.Height-2 )\n                overButton = 2;\n            else\n                overButton = -1;\n            this.Refresh();\n        }\n\n        private void UpdateAngle(int mx, int my)\n        {\n            // Store mouse coordinates.\n            dbx = mx;\n            dby = my;\n\n            // Translate y coordinate input to GetAngle function to correct for ellipsoid distortion.\n            double widthToHeightRatio =  (double)this.Width/(double)this.Height;                        \n            int tmy;\n            if( my == 0 )\n                tmy = my;\n            else if( my &lt; this.Height/2 )\n                tmy = (this.Height/2)-(int)(((this.Height/2)-my)*widthToHeightRatio);                \n            else\n                tmy = (this.Height/2)+(int)((double)(my-(this.Height/2))*widthToHeightRatio);\n            \n            // Retrieve updated angle based on rise over run.\n            angle = (GetAngle(this.Width/2, this.Height/2, mx, tmy)-rotation)%360;                                    \n        }\n\n        private double GetAngle(int x1, int y1, int x2, int y2)\n        {  \n            double degrees;\n           \n            // Avoid divide by zero run values.\n            if( x2-x1 == 0 )\n            {\n                if( y2 &gt; y1 )\n                    degrees = 90;\n                else\n                    degrees = 270;\n            }\n            else\n            {\n                // Calculate angle from offset.\n                double riseoverrun = (double)(y2-y1)/(double)(x2-x1);\n                double radians = Math.Atan( riseoverrun );\n                degrees = radians * ((double)180/Math.PI);\n                \n                // Handle quadrant specific transformations.       \n                if( (x2-x1) &lt; 0 || (y2-y1) &lt; 0 )\n                    degrees += 180;\n                if( (x2-x1) &gt; 0 &amp;&amp; (y2-y1) &lt; 0 )\n                    degrees -= 180;\n                if( degrees &lt; 0 )\n                    degrees += 360;\n            }\n            return degrees;\n        }\n    }\n\n    public class AngleEditorTestControl : System.Windows.Forms.UserControl\n    {\n        private double int_angle;\n\n        [BrowsableAttribute(true)]\n        [EditorAttribute(typeof(AngleEditor), typeof(System.Drawing.Design.UITypeEditor))]        \n        public double Angle\n        {\n            get\n            { return int_angle; }\n            set\n            { int_angle = value; }\n        }        \n\n        public AngleEditorTestControl()\n        {\n            int_angle = 90;\n            this.Size = new Size(190, 42);\n            this.BackColor = Color.Beige;\t\t\t\n        }\n\n        protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)\n        {\n            if( this.DesignMode )\n            {\n                e.Graphics.DrawString(&quot;Use the Properties Window to access&quot;, new Font(&quot;Arial&quot;, 8), new SolidBrush(Color.Black), 3,2);\n                e.Graphics.DrawString(&quot;the AngleEditor UITypeEditor by&quot;, new Font(&quot;Arial&quot;, 8), new SolidBrush(Color.Black), 3,14);\n                e.Graphics.DrawString(&quot;configuring the \\&quot;Angle\\&quot; property.&quot;, new Font(&quot;Arial&quot;, 8), new SolidBrush(Color.Black), 3,26);\n            }\n            else\n                e.Graphics.DrawString(&quot;This example requires design mode.&quot;, new Font(&quot;Arial&quot;, 8), new SolidBrush(Color.Black), 3,2);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"AngleEditor#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Drawing::Design;\nusing namespace System::Windows::Forms;\nusing namespace System::Windows::Forms::Design;\n\nnamespace AngleEditor\n{\n   // Provides a user interface for adjusting an angle value.\n   ref class AngleControl: public System::Windows::Forms::UserControl\n   {\n   public:\n\n      // Stores the angle.\n      double angle;\n\n   private:\n\n      // Stores the rotation offset.\n      int rotation;\n\n      // Control state tracking variables.\n      int dbx;\n      int dby;\n      int overButton;\n\n   public:\n      AngleControl( double initial_angle )\n      {\n         this-&gt;angle = initial_angle;\n         this-&gt;SetStyle( static_cast&lt;ControlStyles&gt;(ControlStyles::AllPaintingInWmPaint), true );\n         rotation = 0;\n         dbx = -10;\n         dby = -10;\n         overButton = -1;\n      }\n\n   protected:\n      virtual void OnPaint( System::Windows::Forms::PaintEventArgs^ e ) override\n      {\n         // Set angle origin point at center of control.\n         int originX = (this-&gt;Width / 2);\n         int originY = (this-&gt;Height / 2);\n\n         // Fill background and ellipse and center point.\n         e-&gt;Graphics-&gt;FillRectangle( gcnew SolidBrush( Color::DarkBlue ), 0, 0, this-&gt;Width, this-&gt;Height );\n         e-&gt;Graphics-&gt;FillEllipse( gcnew SolidBrush( Color::White ), 1, 1, this-&gt;Width - 3, this-&gt;Height - 3 );\n         e-&gt;Graphics-&gt;FillEllipse( gcnew SolidBrush( Color::SlateGray ), originX - 1, originY - 1, 3, 3 );\n\n         // Draw angle markers.\n         int startangle = (270 - rotation) % 360;\n         e-&gt;Graphics-&gt;DrawString( startangle.ToString(), gcnew System::Drawing::Font( &quot;Arial&quot;,8.0 ), gcnew SolidBrush( Color::DarkGray ), (float)(this-&gt;Width / 2) - 10, (float)10 );\n         startangle = (startangle + 90) % 360;\n         e-&gt;Graphics-&gt;DrawString( startangle.ToString(), gcnew System::Drawing::Font( &quot;Arial&quot;,8 ), gcnew SolidBrush( Color::DarkGray ), (float)this-&gt;Width - 18, (float)(this-&gt;Height / 2) - 6 );\n         startangle = (startangle + 90) % 360;\n         e-&gt;Graphics-&gt;DrawString( startangle.ToString(), gcnew System::Drawing::Font( &quot;Arial&quot;,8 ), gcnew SolidBrush( Color::DarkGray ), ((float)this-&gt;Width / 2) - 6, (float)this-&gt;Height - 18 );\n         startangle = (startangle + 90) % 360;\n         e-&gt;Graphics-&gt;DrawString( startangle.ToString(), gcnew System::Drawing::Font( &quot;Arial&quot;,8 ), gcnew SolidBrush( Color::DarkGray ), (float)10, (float)(this-&gt;Height / 2) - 6 );\n\n         // Draw line along the current angle.\n         double radians = ((((int)(angle + rotation) + 360) % 360) * Math::PI) / (double)180;\n         e-&gt;Graphics-&gt;DrawLine( gcnew Pen( gcnew SolidBrush( Color::Red ),1 ), originX, originY, originX + (int)((double)originX * (double)Math::Cos( radians )), originY + (int)((double)originY * (double)Math::Sin( radians )) );\n\n         // Output angle information.\n         e-&gt;Graphics-&gt;FillRectangle( gcnew SolidBrush( Color::Gray ), this-&gt;Width - 84, 3, 82, 13 );\n         e-&gt;Graphics-&gt;DrawString( String::Format( &quot;Angle: {0}&quot;, angle.ToString( &quot;F4&quot; ) ), gcnew System::Drawing::Font( &quot;Arial&quot;,8 ), gcnew SolidBrush( Color::Yellow ), (float)this-&gt;Width - 84, (float)2 );\n\n         // Draw square at mouse position of last angle adjustment.\n         e-&gt;Graphics-&gt;DrawRectangle( gcnew Pen( gcnew SolidBrush( Color::Black ),1 ), dbx - 2, dby - 2, 4, 4 );\n\n         // Draw rotation adjustment buttons.\n         if ( overButton == 1 )\n         {\n            e-&gt;Graphics-&gt;FillRectangle( gcnew SolidBrush( Color::Green ), this-&gt;Width - 28, this-&gt;Height - 14, 12, 12 );\n            e-&gt;Graphics-&gt;FillRectangle( gcnew SolidBrush( Color::Gray ), 2, this-&gt;Height - 13, 110, 12 );\n            e-&gt;Graphics-&gt;DrawString( &quot;Rotate 90 degrees left&quot;, gcnew System::Drawing::Font( &quot;Arial&quot;,8 ), gcnew SolidBrush( Color::White ), (float)2, (float)this-&gt;Height - 14 );\n         }\n         else\n                  e-&gt;Graphics-&gt;FillRectangle( gcnew SolidBrush( Color::DarkGreen ), this-&gt;Width - 28, this-&gt;Height - 14, 12, 12 );\n\n         if ( overButton == 2 )\n         {\n            e-&gt;Graphics-&gt;FillRectangle( gcnew SolidBrush( Color::Green ), this-&gt;Width - 14, this-&gt;Height - 14, 12, 12 );\n            e-&gt;Graphics-&gt;FillRectangle( gcnew SolidBrush( Color::Gray ), 2, this-&gt;Height - 13, 116, 12 );\n            e-&gt;Graphics-&gt;DrawString( &quot;Rotate 90 degrees right&quot;, gcnew System::Drawing::Font( &quot;Arial&quot;,8 ), gcnew SolidBrush( Color::White ), (float)2, (float)this-&gt;Height - 14 );\n         }\n         else\n                  e-&gt;Graphics-&gt;FillRectangle( gcnew SolidBrush( Color::DarkGreen ), this-&gt;Width - 14, this-&gt;Height - 14, 12, 12 );\n\n         e-&gt;Graphics-&gt;DrawEllipse( gcnew Pen( gcnew SolidBrush( Color::White ),1 ), this-&gt;Width - 11, this-&gt;Height - 11, 6, 6 );\n         e-&gt;Graphics-&gt;DrawEllipse( gcnew Pen( gcnew SolidBrush( Color::White ),1 ), this-&gt;Width - 25, this-&gt;Height - 11, 6, 6 );\n         if ( overButton == 1 )\n                  e-&gt;Graphics-&gt;FillRectangle( gcnew SolidBrush( Color::Green ), this-&gt;Width - 25, this-&gt;Height - 6, 4, 4 );\n         else\n                  e-&gt;Graphics-&gt;FillRectangle( gcnew SolidBrush( Color::DarkGreen ), this-&gt;Width - 25, this-&gt;Height - 6, 4, 4 );\n\n         if ( overButton == 2 )\n                  e-&gt;Graphics-&gt;FillRectangle( gcnew SolidBrush( Color::Green ), this-&gt;Width - 8, this-&gt;Height - 6, 4, 4 );\n         else\n                  e-&gt;Graphics-&gt;FillRectangle( gcnew SolidBrush( Color::DarkGreen ), this-&gt;Width - 8, this-&gt;Height - 6, 4, 4 );\n\n         array&lt;Point&gt;^ temp0 = {Point(this-&gt;Width - 7,this-&gt;Height - 8),Point(this-&gt;Width - 3,this-&gt;Height - 8),Point(this-&gt;Width - 5,this-&gt;Height - 4)};\n         e-&gt;Graphics-&gt;FillPolygon( gcnew SolidBrush( Color::White ), temp0 );\n         array&lt;Point&gt;^ temp1 = {Point(this-&gt;Width - 26,this-&gt;Height - 8),Point(this-&gt;Width - 21,this-&gt;Height - 8),Point(this-&gt;Width - 25,this-&gt;Height - 4)};\n         e-&gt;Graphics-&gt;FillPolygon( gcnew SolidBrush( Color::White ), temp1 );\n      }\n\n      virtual void OnMouseDown( System::Windows::Forms::MouseEventArgs^ e ) override\n      {\n         // Handle rotation adjustment button clicks.\n         if ( e-&gt;X &gt;= this-&gt;Width - 28 &amp;&amp; e-&gt;X &lt;= this-&gt;Width - 2 &amp;&amp; e-&gt;Y &gt;= this-&gt;Height - 14 &amp;&amp; e-&gt;Y &lt;= this-&gt;Height - 2 )\n         {\n            if ( e-&gt;X &lt;= this-&gt;Width - 16 )\n                        rotation -= 90;\n            else\n            if ( e-&gt;X &gt;= this-&gt;Width - 14 )\n                        rotation += 90;\n\n            if ( rotation &lt; 0 )\n                        rotation += 360;\n\n            rotation = rotation % 360;\n            dbx = -10;\n            dby = -10;\n         }\n         else\n                  UpdateAngle( e-&gt;X, e-&gt;Y );\n\n         this-&gt;Refresh();\n      }\n\n      virtual void OnMouseMove( System::Windows::Forms::MouseEventArgs^ e ) override\n      {\n         if ( e-&gt;Button == ::MouseButtons::Left )\n         {\n            UpdateAngle( e-&gt;X, e-&gt;Y );\n            overButton = -1;\n         }\n         else\n         if ( e-&gt;X &gt;= this-&gt;Width - 28 &amp;&amp; e-&gt;X &lt;= this-&gt;Width - 16 &amp;&amp; e-&gt;Y &gt;= this-&gt;Height - 14 &amp;&amp; e-&gt;Y &lt;= this-&gt;Height - 2 )\n                  overButton = 1;\n         else\n         if ( e-&gt;X &gt;= this-&gt;Width - 14 &amp;&amp; e-&gt;X &lt;= this-&gt;Width - 2 &amp;&amp; e-&gt;Y &gt;= this-&gt;Height - 14 &amp;&amp; e-&gt;Y &lt;= this-&gt;Height - 2 )\n                  overButton = 2;\n         else\n                  overButton = -1;\n\n         this-&gt;Refresh();\n      }\n\n   private:\n      void UpdateAngle( int mx, int my )\n      {\n         // Store mouse coordinates.\n         dbx = mx;\n         dby = my;\n         \n         // Translate y coordinate input to GetAngle function to correct for ellipsoid distortion.\n         double widthToHeightRatio = (double)this-&gt;Width / (double)this-&gt;Height;\n         int tmy;\n         if ( my == 0 )\n                  tmy = my;\n         else\n         if ( my &lt; this-&gt;Height / 2 )\n                  tmy = (this-&gt;Height / 2) - (int)(((this-&gt;Height / 2) - my) * widthToHeightRatio);\n         else\n                  tmy = (this-&gt;Height / 2) + (int)((double)(my - (this-&gt;Height / 2)) * widthToHeightRatio);\n\n         // Retrieve updated angle based on rise over run.\n         angle = (int)(GetAngle( this-&gt;Width / 2, this-&gt;Height / 2, mx, tmy ) - rotation) % 360;\n      }\n\n      double GetAngle( int x1, int y1, int x2, int y2 )\n      {\n         double degrees;\n\n         // Avoid divide by zero run values.\n         if ( x2 - x1 == 0 )\n         {\n            if ( y2 &gt; y1 )\n                        degrees = 90;\n            else\n                        degrees = 270;\n         }\n         else\n         {\n            // Calculate angle from offset.\n            double riseoverrun = (double)(y2 - y1) / (double)(x2 - x1);\n            double radians = Math::Atan( riseoverrun );\n            degrees = radians * ((double)180 / Math::PI);\n            \n            // Handle quadrant specific transformations.\n            if ( (x2 - x1) &lt; 0 || (y2 - y1) &lt; 0 )\n                        degrees += 180;\n\n            if ( (x2 - x1) &gt; 0 &amp;&amp; (y2 - y1) &lt; 0 )\n                        degrees -= 180;\n\n            if ( degrees &lt; 0 )\n                        degrees += 360;\n         }\n\n         return degrees;\n      }\n   };\n\n   // This UITypeEditor can be associated with Int32, Double and Single\n   // properties to provide a design-mode angle selection interface.\n   [System::Security::Permissions::PermissionSetAttribute\n   (System::Security::Permissions::SecurityAction::InheritanceDemand, Name=&quot;FullTrust&quot;)]\n   [System::Security::Permissions::PermissionSetAttribute\n   (System::Security::Permissions::SecurityAction::LinkDemand, Name=&quot;FullTrust&quot;)]\n   public ref class AngleEditor: public System::Drawing::Design::UITypeEditor\n   {\n   public:\n      AngleEditor(){}\n\n      // Indicates whether the UITypeEditor provides a form-based (modal) dialog,\n      // drop down dialog, or no UI outside of the properties window.\n      virtual System::Drawing::Design::UITypeEditorEditStyle GetEditStyle( System::ComponentModel::ITypeDescriptorContext^ context ) override\n      {\n         return UITypeEditorEditStyle::DropDown;\n      }\n\n      // Displays the UI for value selection.\n      virtual Object^ EditValue( System::ComponentModel::ITypeDescriptorContext^ context, System::IServiceProvider^ provider, Object^ value ) override\n      {\n         // Return the value if the value is not of type Int32, Double and Single.\n         if ( value-&gt;GetType() != double::typeid &amp;&amp; value-&gt;GetType() != float::typeid &amp;&amp; value-&gt;GetType() != int::typeid )\n                  return value;\n         \n         // Uses the IWindowsFormsEditorService* to display a\n         // drop-down UI in the Properties window.\n         IWindowsFormsEditorService^ edSvc = dynamic_cast&lt;IWindowsFormsEditorService^&gt;(provider-&gt;GetService( IWindowsFormsEditorService::typeid ));\n         if ( edSvc != nullptr )\n         {\n            // Display an angle selection control and retrieve the value.\n            AngleControl^ angleControl = gcnew AngleControl(  *dynamic_cast&lt;double^&gt;(value) );\n            edSvc-&gt;DropDownControl( angleControl );\n\n            // Return the value in the appropraite data format.\n            if ( value-&gt;GetType() == double::typeid )\n                        return angleControl-&gt;angle;\n            else\n            if ( value-&gt;GetType() == float::typeid )\n                        return (float)angleControl-&gt;angle;\n            else\n            if ( value-&gt;GetType() == int::typeid )\n                        return (int)angleControl-&gt;angle;\n         }\n\n         return value;\n      }\n\n      // Draws a representation of the property&#39;s value.\n   private:\n      void PaintValue( System::Drawing::Design::PaintValueEventArgs^ e ) new\n      {\n         int normalX = (e-&gt;Bounds.Width / 2);\n         int normalY = (e-&gt;Bounds.Height / 2);\n         \n         // Fill background and ellipse and center point.\n         e-&gt;Graphics-&gt;FillRectangle( gcnew SolidBrush( Color::DarkBlue ), e-&gt;Bounds.X, e-&gt;Bounds.Y, e-&gt;Bounds.Width, e-&gt;Bounds.Height );\n         e-&gt;Graphics-&gt;FillEllipse( gcnew SolidBrush( Color::White ), e-&gt;Bounds.X + 1, e-&gt;Bounds.Y + 1, e-&gt;Bounds.Width - 3, e-&gt;Bounds.Height - 3 );\n         e-&gt;Graphics-&gt;FillEllipse( gcnew SolidBrush( Color::SlateGray ), normalX + e-&gt;Bounds.X - 1, normalY + e-&gt;Bounds.Y - 1, 3, 3 );\n         \n         // Draw line along the current angle.\n         double radians = ( *dynamic_cast&lt;double^&gt;(e-&gt;Value) * Math::PI) / (double)180;\n         e-&gt;Graphics-&gt;DrawLine( gcnew Pen( gcnew SolidBrush( Color::Red ),1 ), normalX + e-&gt;Bounds.X, normalY + e-&gt;Bounds.Y, e-&gt;Bounds.X + (normalX + (int)((double)normalX * Math::Cos( radians ))), e-&gt;Bounds.Y + (normalY + (int)((double)normalY * Math::Sin( radians ))) );\n      }\n\n      // Indicates whether the UITypeEditor supports painting a\n      // representation of a property&#39;s value.\n      bool GetPaintValueSupported( System::ComponentModel::ITypeDescriptorContext^ context ) new\n      {\n         return true;\n      }\n   };\n\n   public ref class AngleEditorTestControl: public System::Windows::Forms::UserControl\n   {\n   private:\n      double int_angle;\n\n   public:\n\n      property double Angle \n      {\n         [BrowsableAttribute(true)]\n         [EditorAttribute(AngleEditor::typeid,System::Drawing::Design::UITypeEditor::typeid)]\n         double get()\n         {\n            return int_angle;\n         }\n\n         void set( double value )\n         {\n            int_angle = value;\n         }\n\n      }\n      AngleEditorTestControl()\n      {\n         int_angle = 90;\n         this-&gt;Size = System::Drawing::Size( 190, 42 );\n         this-&gt;BackColor = Color::Beige;\n      }\n\n   protected:\n      virtual void OnPaint( System::Windows::Forms::PaintEventArgs^ e ) override\n      {\n         if ( this-&gt;DesignMode )\n         {\n            e-&gt;Graphics-&gt;DrawString( &quot;Use the Properties Window to access&quot;, \n               gcnew System::Drawing::Font( &quot;Arial&quot;,8 ), gcnew SolidBrush( Color::Black ), 3, 2 );\n            e-&gt;Graphics-&gt;DrawString( &quot;the AngleEditor UITypeEditor by&quot;, \n               gcnew System::Drawing::Font( &quot;Arial&quot;,8 ), gcnew SolidBrush( Color::Black ), 3, 14 );\n            e-&gt;Graphics-&gt;DrawString( &quot;configuring the \\&quot;Angle\\&quot; property.&quot;, \n               gcnew System::Drawing::Font( &quot;Arial&quot;,8 ), gcnew SolidBrush( Color::Black ), 3, 26 );\n         }\n         else\n            e-&gt;Graphics-&gt;DrawString( &quot;This example requires design mode.&quot;, \n               gcnew System::Drawing::Font( &quot;Arial&quot;,8 ), gcnew SolidBrush( Color::Black ), 3, 2 );\n      }\n   };\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"AngleEditor#1\">Option Strict Off\nImports System\nImports System.ComponentModel\nImports System.Drawing\nImports System.Drawing.Design\nImports System.Reflection\nImports System.Windows.Forms\nImports System.Windows.Forms.Design\n\n&#39; This UITypeEditor can be associated with Int32, Double and Single\n&#39; properties to provide a design-mode angle selection interface.\n&lt;System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.Demand, Name:=&quot;FullTrust&quot;)&gt; _\nPublic Class AngleEditor\n    Inherits System.Drawing.Design.UITypeEditor\n\n    Public Sub New()\n    End Sub\n\n    &#39; Indicates whether the UITypeEditor provides a form-based (modal) dialog, \n    &#39; drop down dialog, or no UI outside of the properties window.\n    Public Overloads Overrides Function GetEditStyle(ByVal context As System.ComponentModel.ITypeDescriptorContext) As System.Drawing.Design.UITypeEditorEditStyle\n        Return UITypeEditorEditStyle.DropDown\n    End Function\n\n    &#39; Displays the UI for value selection.\n    Public Overloads Overrides Function EditValue(ByVal context As System.ComponentModel.ITypeDescriptorContext, ByVal provider As System.IServiceProvider, ByVal value As Object) As Object\n        &#39; Return the value if the value is not of type Int32, Double and Single.\n        If value.GetType() IsNot GetType(Double) AndAlso value.GetType() IsNot GetType(Single) AndAlso value.GetType() IsNot GetType(Integer) Then\n            Return value\n        End If\n        &#39; Uses the IWindowsFormsEditorService to display a \n        &#39; drop-down UI in the Properties window.\n        Dim edSvc As IWindowsFormsEditorService = CType(provider.GetService(GetType(IWindowsFormsEditorService)), IWindowsFormsEditorService)\n        If (edSvc IsNot Nothing) Then\n            &#39; Display an angle selection control and retrieve the value.\n            Dim angleControl As New AngleControl(System.Convert.ToDouble(value))\n            edSvc.DropDownControl(angleControl)\n\n            &#39; Return the value in the appropraite data format.\n            If value Is GetType(Double) Then\n                Return angleControl.angle\n            ElseIf value Is GetType(Single) Then\n                Return System.Convert.ToSingle(angleControl.angle)\n            ElseIf value Is GetType(Integer) Then\n                Return System.Convert.ToInt32(angleControl.angle)\n            End If\n        End If\n        Return value\n    End Function\n\n    &#39; Draws a representation of the property&#39;s value.\n    Public Overloads Overrides Sub PaintValue(ByVal e As System.Drawing.Design.PaintValueEventArgs)\n        Dim normalX As Integer = e.Bounds.Width / 2\n        Dim normalY As Integer = e.Bounds.Height / 2\n\n        &#39; Fill background and ellipse and center point.\n        e.Graphics.FillRectangle(New SolidBrush(Color.DarkBlue), e.Bounds.X, e.Bounds.Y, e.Bounds.Width, e.Bounds.Height)\n        e.Graphics.FillEllipse(New SolidBrush(Color.White), e.Bounds.X + 1, e.Bounds.Y + 1, e.Bounds.Width - 3, e.Bounds.Height - 3)\n        e.Graphics.FillEllipse(New SolidBrush(Color.SlateGray), normalX + e.Bounds.X - 1, normalY + e.Bounds.Y - 1, 3, 3)\n\n        &#39; Draw line along the current angle.\n        Dim radians As Double = System.Convert.ToDouble(e.Value) * Math.PI / System.Convert.ToDouble(180)\n        e.Graphics.DrawLine(New Pen(New SolidBrush(Color.Red), 1), normalX + e.Bounds.X, normalY + e.Bounds.Y, e.Bounds.X + (normalX + System.Convert.ToInt32(System.Convert.ToDouble(normalX) * Math.Cos(radians))), e.Bounds.Y + (normalY + System.Convert.ToInt32(System.Convert.ToDouble(normalY) * Math.Sin(radians))))\n    End Sub\n\n    &#39; Indicates whether the UITypeEditor supports painting a \n    &#39; representation of a property&#39;s value.\n    Public Overloads Overrides Function GetPaintValueSupported(ByVal context As System.ComponentModel.ITypeDescriptorContext) As Boolean\n        Return True\n    End Function\nEnd Class\n\n&#39; Provides a user interface for adjusting an angle value.\nFriend Class AngleControl\n    Inherits System.Windows.Forms.UserControl\n\n    &#39; Stores the angle.\n    Public angle As Double\n    &#39; Stores the rotation offset.\n    Private rotation As Integer = 0\n    &#39; Control state tracking variables.\n    Private dbx As Integer = -10\n    Private dby As Integer = -10\n    Private overButton As Integer = -1\n\n    Public Sub New(ByVal initial_angle As Double)\n        Me.angle = initial_angle\n        Me.SetStyle(ControlStyles.AllPaintingInWmPaint, True)\n    End Sub\n\n    Protected Overrides Sub OnPaint(ByVal e As System.Windows.Forms.PaintEventArgs)\n        &#39; Set angle origin point at center of control.\n        Dim originX As Integer = Me.Width / 2\n        Dim originY As Integer = Me.Height / 2\n\n        &#39; Fill background and ellipse and center point.\n        e.Graphics.FillRectangle(New SolidBrush(Color.DarkBlue), 0, 0, Me.Width, Me.Height)\n        e.Graphics.FillEllipse(New SolidBrush(Color.White), 1, 1, Me.Width - 3, Me.Height - 3)\n        e.Graphics.FillEllipse(New SolidBrush(Color.SlateGray), originX - 1, originY - 1, 3, 3)\n\n        &#39; Draw angle markers.\n        Dim startangle As Integer = (270 - rotation) Mod 360\n        e.Graphics.DrawString(startangle.ToString(), New Font(&quot;Arial&quot;, 8), New SolidBrush(Color.DarkGray), Me.Width / 2 - 10, 10)\n        startangle = (startangle + 90) Mod 360\n        e.Graphics.DrawString(startangle.ToString(), New Font(&quot;Arial&quot;, 8), New SolidBrush(Color.DarkGray), Me.Width - 18, Me.Height / 2 - 6)\n        startangle = (startangle + 90) Mod 360\n        e.Graphics.DrawString(startangle.ToString(), New Font(&quot;Arial&quot;, 8), New SolidBrush(Color.DarkGray), Me.Width / 2 - 6, Me.Height - 18)\n        startangle = (startangle + 90) Mod 360\n        e.Graphics.DrawString(startangle.ToString(), New Font(&quot;Arial&quot;, 8), New SolidBrush(Color.DarkGray), 10, Me.Height / 2 - 6)\n\n        &#39; Draw line along the current angle.   \n        Dim radians As Double = ((angle + rotation + 360) Mod 360) * Math.PI / System.Convert.ToDouble(180)\n        e.Graphics.DrawLine(New Pen(New SolidBrush(Color.Red), 1), originX, originY, originX + System.Convert.ToInt32(System.Convert.ToDouble(originX) * Math.Cos(radians)), originY + System.Convert.ToInt32(System.Convert.ToDouble(originY) * Math.Sin(radians)))\n\n        &#39; Output angle information.\n        e.Graphics.FillRectangle(New SolidBrush(Color.Gray), Me.Width - 84, 3, 82, 13)\n        e.Graphics.DrawString(&quot;Angle: &quot; + angle.ToString(&quot;F4&quot;), New Font(&quot;Arial&quot;, 8), New SolidBrush(Color.Yellow), Me.Width - 84, 2)\n        &#39; Draw square at mouse position of last angle adjustment.\n        e.Graphics.DrawRectangle(New Pen(New SolidBrush(Color.Black), 1), dbx - 2, dby - 2, 4, 4)\n        &#39; Draw rotation adjustment buttons.\n        If overButton = 1 Then\n            e.Graphics.FillRectangle(New SolidBrush(Color.Green), Me.Width - 28, Me.Height - 14, 12, 12)\n            e.Graphics.FillRectangle(New SolidBrush(Color.Gray), 2, Me.Height - 13, 110, 12)\n            e.Graphics.DrawString(&quot;Rotate 90 degrees left&quot;, New Font(&quot;Arial&quot;, 8), New SolidBrush(Color.White), 2, Me.Height - 14)\n        Else\n            e.Graphics.FillRectangle(New SolidBrush(Color.DarkGreen), Me.Width - 28, Me.Height - 14, 12, 12)\n        End If\n        If overButton = 2 Then\n            e.Graphics.FillRectangle(New SolidBrush(Color.Green), Me.Width - 14, Me.Height - 14, 12, 12)\n            e.Graphics.FillRectangle(New SolidBrush(Color.Gray), 2, Me.Height - 13, 116, 12)\n            e.Graphics.DrawString(&quot;Rotate 90 degrees right&quot;, New Font(&quot;Arial&quot;, 8), New SolidBrush(Color.White), 2, Me.Height - 14)\n        Else\n            e.Graphics.FillRectangle(New SolidBrush(Color.DarkGreen), Me.Width - 14, Me.Height - 14, 12, 12)\n        End If\n        e.Graphics.DrawEllipse(New Pen(New SolidBrush(Color.White), 1), Me.Width - 11, Me.Height - 11, 6, 6)\n        e.Graphics.DrawEllipse(New Pen(New SolidBrush(Color.White), 1), Me.Width - 25, Me.Height - 11, 6, 6)\n        If overButton = 1 Then\n            e.Graphics.FillRectangle(New SolidBrush(Color.Green), Me.Width - 25, Me.Height - 6, 4, 4)\n        Else\n            e.Graphics.FillRectangle(New SolidBrush(Color.DarkGreen), Me.Width - 25, Me.Height - 6, 4, 4)\n        End If\n        If overButton = 2 Then\n            e.Graphics.FillRectangle(New SolidBrush(Color.Green), Me.Width - 8, Me.Height - 6, 4, 4)\n        Else\n            e.Graphics.FillRectangle(New SolidBrush(Color.DarkGreen), Me.Width - 8, Me.Height - 6, 4, 4)\n        End If\n        e.Graphics.FillPolygon(New SolidBrush(Color.White), New Point() {New Point(Me.Width - 7, Me.Height - 8), New Point(Me.Width - 3, Me.Height - 8), New Point(Me.Width - 5, Me.Height - 4)})\n        e.Graphics.FillPolygon(New SolidBrush(Color.White), New Point() {New Point(Me.Width - 26, Me.Height - 8), New Point(Me.Width - 21, Me.Height - 8), New Point(Me.Width - 25, Me.Height - 4)})\n    End Sub\n\n    Protected Overrides Sub OnMouseDown(ByVal e As System.Windows.Forms.MouseEventArgs)\n        &#39; Handle rotation adjustment button clicks.\n        If e.X &gt;= Me.Width - 28 AndAlso e.X &lt;= Me.Width - 2 AndAlso e.Y &gt;= Me.Height - 14 AndAlso e.Y &lt;= Me.Height - 2 Then\n            If e.X &lt;= Me.Width - 16 Then\n                rotation -= 90\n            ElseIf e.X &gt;= Me.Width - 14 Then\n                rotation += 90\n            End If\n            If rotation &lt; 0 Then\n                rotation += 360\n            End If\n            rotation = rotation Mod 360\n            dbx = -10\n            dby = -10\n        Else\n            UpdateAngle(e.X, e.Y)\n        End If\n        Me.Refresh()\n    End Sub\n\n    Protected Overrides Sub OnMouseMove(ByVal e As System.Windows.Forms.MouseEventArgs)\n        If e.Button = System.Windows.Forms.MouseButtons.Left Then\n            UpdateAngle(e.X, e.Y)\n            overButton = -1\n        ElseIf e.X &gt;= Me.Width - 28 AndAlso e.X &lt;= Me.Width - 16 AndAlso e.Y &gt;= Me.Height - 14 AndAlso e.Y &lt;= Me.Height - 2 Then\n            overButton = 1\n        ElseIf e.X &gt;= Me.Width - 14 AndAlso e.X &lt;= Me.Width - 2 AndAlso e.Y &gt;= Me.Height - 14 AndAlso e.Y &lt;= Me.Height - 2 Then\n            overButton = 2\n        Else\n            overButton = -1\n        End If\n        Me.Refresh()\n    End Sub\n\n    Private Sub UpdateAngle(ByVal mx As Integer, ByVal my As Integer)\n        &#39; Store mouse coordinates.\n        dbx = mx\n        dby = my\n\n        &#39; Translate y coordinate input to GetAngle function to correct for ellipsoid distortion.\n        Dim widthToHeightRatio As Double = System.Convert.ToDouble(Me.Width) / System.Convert.ToDouble(Me.Height)\n        Dim tmy As Integer\n        If my = 0 Then\n            tmy = my\n        ElseIf my &lt; Me.Height / 2 Then\n            tmy = Me.Height / 2 - Fix((Me.Height / 2 - my) * widthToHeightRatio)\n        Else\n            tmy = Me.Height / 2 + Fix(System.Convert.ToDouble(my - Me.Height / 2) * widthToHeightRatio)\n        End If\n        &#39; Retrieve updated angle based on rise over run.\n        angle = (GetAngle(Me.Width / 2, Me.Height / 2, mx, tmy) - rotation) Mod 360\n    End Sub\n\n    Private Function GetAngle(ByVal x1 As Integer, ByVal y1 As Integer, ByVal x2 As Integer, ByVal y2 As Integer) As Double\n        Dim degrees As Double\n\n        &#39; Avoid divide by zero run values.\n        If x2 - x1 = 0 Then\n            If y2 &gt; y1 Then\n                degrees = 90\n            Else\n                degrees = 270\n            End If\n        Else\n            &#39; Calculate angle from offset.\n            Dim riseoverrun As Double = System.Convert.ToDouble(y2 - y1) / System.Convert.ToDouble(x2 - x1)\n            Dim radians As Double = Math.Atan(riseoverrun)\n            degrees = radians * (System.Convert.ToDouble(180) / Math.PI)\n\n            &#39; Handle quadrant specific transformations.           \n            If x2 - x1 &lt; 0 OrElse y2 - y1 &lt; 0 Then\n                degrees += 180\n            End If\n            If x2 - x1 &gt; 0 AndAlso y2 - y1 &lt; 0 Then\n                degrees -= 180\n            End If\n            If degrees &lt; 0 Then\n                degrees += 360\n            End If\n        End If\n        Return degrees\n    End Function\nEnd Class\n\nPublic Class AngleEditorTestControl\n    Inherits System.Windows.Forms.UserControl\n    Private int_angle As Double\n\n    &lt;BrowsableAttribute(True), EditorAttribute(GetType(AngleEditor), GetType(System.Drawing.Design.UITypeEditor))&gt; _\n    Public Property Angle() As Double\n        Get\n            Return int_angle\n        End Get\n        Set(ByVal Value As Double)\n            int_angle = Value\n        End Set\n    End Property\n\n    Public Sub New()\n        int_angle = 90\n        Me.Size = New Size(190, 42)\n        Me.BackColor = Color.Beige\n    End Sub\n\n    Protected Overrides Sub OnPaint(ByVal e As System.Windows.Forms.PaintEventArgs)\n        If Me.DesignMode Then\n            e.Graphics.DrawString(&quot;Use the Properties Window to access&quot;, New Font(&quot;Arial&quot;, 8), New SolidBrush(Color.Black), 3, 2)\n            e.Graphics.DrawString(&quot;the AngleEditor UITypeEditor by&quot;, New Font(&quot;Arial&quot;, 8), New SolidBrush(Color.Black), 3, 14)\n            e.Graphics.DrawString(&quot;configuring the &quot;&quot;Angle&quot;&quot; property.&quot;, New Font(&quot;Arial&quot;, 8), New SolidBrush(Color.Black), 3, 26)\n        Else\n            e.Graphics.DrawString(&quot;This example requires design mode.&quot;, New Font(&quot;Arial&quot;, 8), New SolidBrush(Color.Black), 3, 2)\n        End If\n    End Sub\nEnd Class\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The UITypeEditor class provides a base class that you can derive from and extend to implement a custom type editor for the design-time environment. Typically, your custom type editor interacts with the <a class=\"xref\" href=\"system.windows.forms.propertygrid\" data-linktype=\"relative-path\">PropertyGrid</a> control.  </p>\n<p> Custom type editors are useful in situations where a text-box value editor is insufficient to effectively select the values of certain types.  </p>\n<p> To implement a custom design-time UI type editor, you must perform the following steps:  </p>\n<ul>\n<li><p>Define a class that derives from UITypeEditor.  </p>\n</li>\n<li><p>Override the <a class=\"xref\" href=\"system.drawing.design.uitypeeditor#System_Drawing_Design_UITypeEditor_EditValue_\" data-linktype=\"relative-path\">EditValue</a> method to handle the user interface, user input processing, and value assignment.  </p>\n</li>\n<li><p>Override the <a class=\"xref\" href=\"system.drawing.design.uitypeeditor#System_Drawing_Design_UITypeEditor_GetEditStyle_\" data-linktype=\"relative-path\">GetEditStyle</a> method to inform the Properties window of the type of editor style that the editor will use.  </p>\n</li>\n</ul>\n<p> You can add additional support for painting a value&#39;s representation in the Properties window by performing the following steps:  </p>\n<ul>\n<li><p>Override the <a class=\"xref\" href=\"system.drawing.design.uitypeeditor#System_Drawing_Design_UITypeEditor_GetPaintValueSupported_\" data-linktype=\"relative-path\">GetPaintValueSupported</a> method to indicate that the editor supports displaying the value&#39;s representation.  </p>\n</li>\n<li><p>Override the <a class=\"xref\" href=\"system.drawing.design.uitypeeditor#System_Drawing_Design_UITypeEditor_PaintValue_\" data-linktype=\"relative-path\">PaintValue</a> method to implement the display of the value&#39;s representation.  </p>\n</li>\n<li><p>Override the UITypeEditor constructor method if the editor should have initialization behavior.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> The UITypeEditor class does not support right-to-left (RTL) layouts.  </p>\n</div>\n<p> For more information about enhancing design-time support, see <a href=\"../topic/extending%20design-time%20support\" data-linktype=\"relative-path\">Extending Design-Time Support</a>. For more information on implementing a UITypeEditor, see <a href=\"../topic/user%20interface%20type%20editors%20overview\" data-linktype=\"relative-path\">User Interface Type Editors Overview</a>.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Drawing_Design_UITypeEditor__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Drawing_Design_UITypeEditor__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">UITypeEditor()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.drawing.design.uitypeeditor\" data-linktype=\"relative-path\">UITypeEditor</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public UITypeEditor ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Drawing_Design_UITypeEditor_IsDropDownResizable_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Drawing_Design_UITypeEditor_IsDropDownResizable\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsDropDownResizable</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value indicating whether drop-down editors should be resizable by the user.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual bool IsDropDownResizable { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if drop-down editors are resizable; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Drawing_Design_UITypeEditor_EditValue_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Drawing_Design_UITypeEditor_EditValue_System_IServiceProvider_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">EditValue(IServiceProvider, Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Edits the value of the specified object using the editor style indicated by the <span class=\"xref\">stem.Drawing.Design.UITypeEditor.GetEditStyle*</span> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public object EditValue (IServiceProvider provider, object value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iserviceprovider\" data-linktype=\"relative-path\">IServiceProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.iserviceprovider\" data-linktype=\"relative-path\">IServiceProvider</a> that this editor can use to obtain services.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object to edit.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The new value of the object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method launches the user interface for value editing, and is called by the Properties window when a user attempts to edit the value of a type that this editor is configured to edit the value of. A service provider is provided so that the editor can obtain any required services.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Drawing_Design_UITypeEditor_EditValue_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Drawing_Design_UITypeEditor_EditValue_System_ComponentModel_ITypeDescriptorContext_System_IServiceProvider_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">EditValue(ITypeDescriptorContext, IServiceProvider, Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Edits the specified object&#39;s value using the editor style indicated by the <span class=\"xref\">stem.Drawing.Design.UITypeEditor.GetEditStyle*</span> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual object EditValue (System.ComponentModel.ITypeDescriptorContext context, IServiceProvider provider, object value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>context</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.itypedescriptorcontext\" data-linktype=\"relative-path\">ITypeDescriptorContext</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.componentmodel.itypedescriptorcontext\" data-linktype=\"relative-path\">ITypeDescriptorContext</a> that can be used to gain additional context information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>provider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iserviceprovider\" data-linktype=\"relative-path\">IServiceProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.iserviceprovider\" data-linktype=\"relative-path\">IServiceProvider</a> that this editor can use to obtain services.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object to edit.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The new value of the object. If the value of the object has not changed, this should return the same object it was passed.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>A service provider is provided so that the editor can obtain any required services.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Drawing_Design_UITypeEditor_GetEditStyle_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Drawing_Design_UITypeEditor_GetEditStyle\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetEditStyle()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the editor style used by the <span class=\"xref\">stem.Drawing.Design.UITypeEditor.EditValue*</span> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Drawing.Design.UITypeEditorEditStyle GetEditStyle ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.design.uitypeeditoreditstyle\" data-linktype=\"relative-path\">UITypeEditorEditStyle</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.drawing.design.uitypeeditoreditstyle\" data-linktype=\"relative-path\">UITypeEditorEditStyle</a> enumeration value that indicates the style of editor used by the current <a class=\"xref\" href=\"system.drawing.design.uitypeeditor\" data-linktype=\"relative-path\">UITypeEditor</a>. By default, this method will return <a class=\"xref\" href=\"system.drawing.design.uitypeeditoreditstyle\" data-linktype=\"relative-path\">UITypeEditorEditStyle</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If a <a class=\"xref\" href=\"system.drawing.design.uitypeeditor\" data-linktype=\"relative-path\">UITypeEditor</a> does not override and implement this method, GetEditStyle will return <a class=\"xref\" href=\"system.drawing.design.uitypeeditoreditstyle\" data-linktype=\"relative-path\">UITypeEditorEditStyle</a> by default.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Drawing_Design_UITypeEditor_GetEditStyle_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Drawing_Design_UITypeEditor_GetEditStyle_System_ComponentModel_ITypeDescriptorContext_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetEditStyle(ITypeDescriptorContext)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the editor style used by the <span class=\"xref\">stem.Drawing.Design.UITypeEditor.EditValue*</span> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual System.Drawing.Design.UITypeEditorEditStyle GetEditStyle (System.ComponentModel.ITypeDescriptorContext context);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>context</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.itypedescriptorcontext\" data-linktype=\"relative-path\">ITypeDescriptorContext</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.componentmodel.itypedescriptorcontext\" data-linktype=\"relative-path\">ITypeDescriptorContext</a> that can be used to gain additional context information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.design.uitypeeditoreditstyle\" data-linktype=\"relative-path\">UITypeEditorEditStyle</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.drawing.design.uitypeeditoreditstyle\" data-linktype=\"relative-path\">UITypeEditorEditStyle</a> value that indicates the style of editor used by the <span class=\"xref\">stem.Drawing.Design.UITypeEditor.EditValue*</span> method. If the <a class=\"xref\" href=\"system.drawing.design.uitypeeditor\" data-linktype=\"relative-path\">UITypeEditor</a> does not support this method, then <span class=\"xref\">stem.Drawing.Design.UITypeEditor.GetEditStyle*</span> will return <a class=\"xref\" href=\"system.drawing.design.uitypeeditoreditstyle\" data-linktype=\"relative-path\">UITypeEditorEditStyle</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Drawing_Design_UITypeEditor_GetPaintValueSupported_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Drawing_Design_UITypeEditor_GetPaintValueSupported\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetPaintValueSupported()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Indicates whether this editor supports painting a representation of an object&#39;s value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool GetPaintValueSupported ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <span class=\"xref\">stem.Drawing.Design.UITypeEditor.PaintValue*</span> is implemented; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Drawing_Design_UITypeEditor_GetPaintValueSupported_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Drawing_Design_UITypeEditor_GetPaintValueSupported_System_ComponentModel_ITypeDescriptorContext_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetPaintValueSupported(ITypeDescriptorContext)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Indicates whether the specified context supports painting a representation of an object&#39;s value within the specified context.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual bool GetPaintValueSupported (System.ComponentModel.ITypeDescriptorContext context);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>context</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.itypedescriptorcontext\" data-linktype=\"relative-path\">ITypeDescriptorContext</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.componentmodel.itypedescriptorcontext\" data-linktype=\"relative-path\">ITypeDescriptorContext</a> that can be used to gain additional context information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <span class=\"xref\">stem.Drawing.Design.UITypeEditor.PaintValue*</span> is implemented; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Drawing_Design_UITypeEditor_PaintValue_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Drawing_Design_UITypeEditor_PaintValue_System_Drawing_Design_PaintValueEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PaintValue(PaintValueEventArgs)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Paints a representation of the value of an object using the specified <a class=\"xref\" href=\"system.drawing.design.paintvalueeventargs\" data-linktype=\"relative-path\">PaintValueEventArgs</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual void PaintValue (System.Drawing.Design.PaintValueEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.design.paintvalueeventargs\" data-linktype=\"relative-path\">PaintValueEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.drawing.design.paintvalueeventargs\" data-linktype=\"relative-path\">PaintValueEventArgs</a> that indicates what to paint and where to paint it.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Editors should paint within the boundaries of the specified rectangle. This rectangle indicates the area of the Properties window to draw a representation of the value within.  </p>\n<p> Starting with the .NET Framework 4.6, the rectangle specified by <a class=\"xref\" href=\"system.drawing.design.paintvalueeventargs#System_Drawing_Design_PaintValueEventArgs_Bounds_\" data-linktype=\"relative-path\">Bounds</a> will be resized based on the system DPI setting when the app.config file contains the following entry:  </p>\n<pre><code>&lt;appSettings&gt;  \n  &lt;add key=&quot;EnableWindowsFormsHighDpiAutoResizing&quot; value=&quot;true&quot; /&gt;  \n&lt;/appSettings&gt;  \n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Drawing_Design_UITypeEditor_PaintValue_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Drawing_Design_UITypeEditor_PaintValue_System_Object_System_Drawing_Graphics_System_Drawing_Rectangle_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PaintValue(Object, Graphics, Rectangle)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Paints a representation of the value of the specified object to the specified canvas.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void PaintValue (object value, System.Drawing.Graphics canvas, System.Drawing.Rectangle rectangle);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object whose value this type editor will display.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>canvas</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A drawing canvas on which to paint the representation of the object&#39;s value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>rectangle</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a> within whose boundaries to paint the value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Editors should paint within the boundaries of the specified rectangle. This rectangle indicates the area of the Properties window to draw a representation of the value within.  </p>\n<p> Starting with the .NET Framework 4.6, the rectangle specified by <a class=\"xref\" href=\"system.drawing.design.paintvalueeventargs#System_Drawing_Design_PaintValueEventArgs_Bounds_\" data-linktype=\"relative-path\">Bounds</a> will be resized based on the system DPI setting when the app.config file contains the following entry:  </p>\n<pre><code>&lt;appSettings&gt;  \n  &lt;add key=&quot;EnableWindowsFormsHighDpiAutoResizing&quot; value=&quot;true&quot; /&gt;  \n&lt;/appSettings&gt;  \n</code></pre>\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Drawing.Design.UITypeEditor.yml\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Design.UITypeEditor\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Design.UITypeEditor..ctor\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Design.UITypeEditor.EditValue\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Design.UITypeEditor.GetEditStyle\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Design.UITypeEditor.GetPaintValueSupported\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Design.UITypeEditor.IsDropDownResizable\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Design.UITypeEditor.PaintValue\">\r\n<meta name=\"APILocation\" content=\"System.Drawing.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"fb8c107a-c4b9-4bea-c04e-b07cef2c309a\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a base class that can be used to design value editors that can provide a user interface (UI) for representing and editing the values of objects of the supported data types.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.drawing.design/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Drawing.Design.UITypeEditor\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Drawing.Design.UITypeEditor.yml","open_to_public_contributors":false,"api_name":["System.Drawing.Design.UITypeEditor","System.Drawing.Design.UITypeEditor..ctor","System.Drawing.Design.UITypeEditor.EditValue","System.Drawing.Design.UITypeEditor.GetEditStyle","System.Drawing.Design.UITypeEditor.GetPaintValueSupported","System.Drawing.Design.UITypeEditor.IsDropDownResizable","System.Drawing.Design.UITypeEditor.PaintValue"],"api_location":["System.Drawing.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Drawing.Design.UITypeEditor","System::Drawing::Design::UITypeEditor","System.Drawing.Design.UITypeEditor.#ctor","System::Drawing::Design::UITypeEditor::#ctor","System.Drawing.Design.UITypeEditor.EditValue","System::Drawing::Design::UITypeEditor::EditValue","System.Drawing.Design.UITypeEditor.GetEditStyle","System::Drawing::Design::UITypeEditor::GetEditStyle","System.Drawing.Design.UITypeEditor.GetPaintValueSupported","System::Drawing::Design::UITypeEditor::GetPaintValueSupported","System.Drawing.Design.UITypeEditor.IsDropDownResizable","System::Drawing::Design::UITypeEditor::IsDropDownResizable","System.Drawing.Design.UITypeEditor.PaintValue","System::Drawing::Design::UITypeEditor::PaintValue"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"fb8c107a-c4b9-4bea-c04e-b07cef2c309a","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Drawing.Design/UITypeEditor.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"UITypeEditor class | Microsoft Docs","_op_ogTitle":"UITypeEditor class","description":"Provides a base class that can be used to design value editors that can provide a user interface (UI) for representing and editing the values of objects of the supported data types.\n","toc_asset_id":"api/_splitted/System.Drawing.Design/toc.json","toc_rel":"_splitted/System.Drawing.Design/toc.json","source_url":"","ms.assetid":"System.Drawing.Design.UITypeEditor","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.drawing.design.uitypeeditor","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.drawing.design.uitypeeditor","fileRelativePath":"api/System.Drawing.Design.UITypeEditor.html"},"themesRelativePathToOutputRoot":"_themes/"}