{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">CheckState</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies the state of a control, such as a check box, that can be checked, unchecked, or set to an indeterminate state.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public enum CheckState</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">CheckState</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates the use of the CheckState enumeration.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic CheckedListBox Example#1\">#using &lt;System.Data.dll&gt;\n#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::Drawing;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Windows::Forms;\nusing namespace System::Data;\nusing namespace System::IO;\n\npublic ref class Form1: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::CheckedListBox^ checkedListBox1;\n   System::Windows::Forms::TextBox^ textBox1;\n   System::Windows::Forms::Button^ button1;\n   System::Windows::Forms::Button^ button2;\n   System::Windows::Forms::ListBox^ listBox1;\n   System::Windows::Forms::Button^ button3;\n   System::ComponentModel::Container^ components;\n\npublic:\n   Form1()\n   {\n      InitializeComponent();\n      \n      // Sets up the initial objects in the CheckedListBox.\n      array&lt;String^&gt;^myFruit = {&quot;Apples&quot;,&quot;Oranges&quot;,&quot;Tomato&quot;};\n      checkedListBox1-&gt;Items-&gt;AddRange( myFruit );\n      \n      // Changes the selection mode from double-click to single click.\n      checkedListBox1-&gt;CheckOnClick = true;\n   }\n\npublic:\n   ~Form1()\n   {\n      if ( components != nullptr )\n      {\n         delete components;\n      }\n   }\n\nprivate:\n   void InitializeComponent()\n   {\n      this-&gt;components = gcnew System::ComponentModel::Container;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;checkedListBox1 = gcnew System::Windows::Forms::CheckedListBox;\n      this-&gt;listBox1 = gcnew System::Windows::Forms::ListBox;\n      this-&gt;button1 = gcnew System::Windows::Forms::Button;\n      this-&gt;button2 = gcnew System::Windows::Forms::Button;\n      this-&gt;button3 = gcnew System::Windows::Forms::Button;\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 144, 64 );\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 128, 20 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;textBox1-&gt;TextChanged += gcnew System::EventHandler( this, &amp;Form1::textBox1_TextChanged );\n      this-&gt;checkedListBox1-&gt;Location = System::Drawing::Point( 16, 64 );\n      this-&gt;checkedListBox1-&gt;Size = System::Drawing::Size( 120, 184 );\n      this-&gt;checkedListBox1-&gt;TabIndex = 0;\n      this-&gt;checkedListBox1-&gt;ItemCheck += gcnew System::Windows::Forms::ItemCheckEventHandler( this, &amp;Form1::checkedListBox1_ItemCheck );\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 408, 64 );\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 128, 186 );\n      this-&gt;listBox1-&gt;TabIndex = 3;\n      this-&gt;button1-&gt;Enabled = false;\n      this-&gt;button1-&gt;Location = System::Drawing::Point( 144, 104 );\n      this-&gt;button1-&gt;Size = System::Drawing::Size( 104, 32 );\n      this-&gt;button1-&gt;TabIndex = 2;\n      this-&gt;button1-&gt;Text = &quot;Add Fruit&quot;;\n      this-&gt;button1-&gt;Click += gcnew System::EventHandler( this, &amp;Form1::button1_Click );\n      this-&gt;button2-&gt;Enabled = false;\n      this-&gt;button2-&gt;Location = System::Drawing::Point( 288, 64 );\n      this-&gt;button2-&gt;Size = System::Drawing::Size( 104, 32 );\n      this-&gt;button2-&gt;TabIndex = 2;\n      this-&gt;button2-&gt;Text = &quot;Show Order&quot;;\n      this-&gt;button2-&gt;Click += gcnew System::EventHandler( this, &amp;Form1::button2_Click );\n      this-&gt;button3-&gt;Enabled = false;\n      this-&gt;button3-&gt;Location = System::Drawing::Point( 288, 104 );\n      this-&gt;button3-&gt;Size = System::Drawing::Size( 104, 32 );\n      this-&gt;button3-&gt;TabIndex = 2;\n      this-&gt;button3-&gt;Text = &quot;Save Order&quot;;\n      this-&gt;button3-&gt;Click += gcnew System::EventHandler( this, &amp;Form1::button3_Click );\n      this-&gt;ClientSize = System::Drawing::Size( 563, 273 );\n      array&lt;System::Windows::Forms::Control^&gt;^temp0 = {this-&gt;listBox1,this-&gt;button3,this-&gt;button2,this-&gt;button1,this-&gt;textBox1,this-&gt;checkedListBox1};\n      this-&gt;Controls-&gt;AddRange( temp0 );\n      this-&gt;Text = &quot;Fruit Order&quot;;\n   }\n\n   // Adds the string if the text box has data in it.\n   void button1_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      if (  !textBox1-&gt;Text-&gt;Equals( &quot;&quot; ) )\n      {\n         if ( checkedListBox1-&gt;CheckedItems-&gt;Contains( textBox1-&gt;Text ) == false )\n                  checkedListBox1-&gt;Items-&gt;Add( textBox1-&gt;Text, CheckState::Checked );\n         textBox1-&gt;Text = &quot;&quot;;\n      }\n   }\n\n   // Activates or deactivates the Add button.\n   void textBox1_TextChanged( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      if ( textBox1-&gt;Text-&gt;Equals( &quot;&quot; ) )\n      {\n         button1-&gt;Enabled = false;\n      }\n      else\n      {\n         button1-&gt;Enabled = true;\n      }\n   }\n\n   // Moves the checked items from the CheckedListBox to the listBox.\n   void button2_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      listBox1-&gt;Items-&gt;Clear();\n      button3-&gt;Enabled = false;\n      for ( int i = 0; i &lt; checkedListBox1-&gt;CheckedItems-&gt;Count; i++ )\n      {\n         listBox1-&gt;Items-&gt;Add( checkedListBox1-&gt;CheckedItems[ i ] );\n\n      }\n      if ( listBox1-&gt;Items-&gt;Count &gt; 0 )\n            button3-&gt;Enabled = true;\n   }\n\n   // Activates the move button if there are checked items.\n   void checkedListBox1_ItemCheck( Object^ /*sender*/, ItemCheckEventArgs^ e )\n   {\n      if ( e-&gt;NewValue == CheckState::Unchecked )\n      {\n         if ( checkedListBox1-&gt;CheckedItems-&gt;Count == 1 )\n         {\n            button2-&gt;Enabled = false;\n         }\n      }\n      else\n      {\n         button2-&gt;Enabled = true;\n      }\n   }\n\n   // Saves the items to a file.\n   void button3_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // Insert code to save a file.\n      listBox1-&gt;Items-&gt;Clear();\n      IEnumerator^ myEnumerator;\n      myEnumerator = checkedListBox1-&gt;CheckedIndices-&gt;GetEnumerator();\n      int y;\n      while ( myEnumerator-&gt;MoveNext() != false )\n      {\n         y = safe_cast&lt;Int32&gt;(myEnumerator-&gt;Current);\n         checkedListBox1-&gt;SetItemChecked( y, false );\n      }\n\n      button3-&gt;Enabled = false;\n   }\n};\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew Form1 );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic CheckedListBox Example#1\">namespace WindowsApplication1\n{\n   using System;\n   using System.Drawing;\n   using System.Collections;\n   using System.ComponentModel;\n   using System.Windows.Forms;\n   using System.Data;\n   using System.IO ;\n\n   public class Form1 : System.Windows.Forms.Form\n   {\n      private System.Windows.Forms.CheckedListBox checkedListBox1;\n      private System.Windows.Forms.TextBox textBox1;\n      private System.Windows.Forms.Button button1;\n      private System.Windows.Forms.Button button2;\n      private System.Windows.Forms.ListBox listBox1;\n      private System.Windows.Forms.Button button3;\n        private System.ComponentModel.Container components;\n      \n      public Form1()\n      {\n            InitializeComponent();\n\n         // Sets up the initial objects in the CheckedListBox.\n            string[] myFruit = {&quot;Apples&quot;, &quot;Oranges&quot;,&quot;Tomato&quot;};\n         checkedListBox1.Items.AddRange(myFruit);\n\n            // Changes the selection mode from double-click to single click.\n         checkedListBox1.CheckOnClick = true;\n      }\n\n      protected override void Dispose( bool disposing )\n\t  {\n\t\tif( disposing )\n\t\t{\n\t\t\tif (components != null) \n\t\t\t{\n\t\t\t  components.Dispose();\n\t\t\t}\n\t\t}\n\t\tbase.Dispose( disposing );\n\t  }\n\n      private void InitializeComponent()\n      {\n         this.components = new System.ComponentModel.Container();\n         this.textBox1 = new System.Windows.Forms.TextBox();\n         this.checkedListBox1 = new System.Windows.Forms.CheckedListBox();\n         this.listBox1 = new System.Windows.Forms.ListBox();\n         this.button1 = new System.Windows.Forms.Button();\n         this.button2 = new System.Windows.Forms.Button();\n         this.button3 = new System.Windows.Forms.Button();\n         this.textBox1.Location = new System.Drawing.Point(144, 64);\n         this.textBox1.Size = new System.Drawing.Size(128, 20);\n         this.textBox1.TabIndex = 1;\n         this.textBox1.TextChanged += new System.EventHandler(this.textBox1_TextChanged);\n         this.checkedListBox1.Location = new System.Drawing.Point(16, 64);\n         this.checkedListBox1.Size = new System.Drawing.Size(120, 184);\n         this.checkedListBox1.TabIndex = 0;\n         this.checkedListBox1.ItemCheck += new System.Windows.Forms.ItemCheckEventHandler(this.checkedListBox1_ItemCheck);\n         this.listBox1.Location = new System.Drawing.Point(408, 64);\n         this.listBox1.Size = new System.Drawing.Size(128, 186);\n         this.listBox1.TabIndex = 3;\n         this.button1.Enabled = false;\n         this.button1.Location = new System.Drawing.Point(144, 104);\n         this.button1.Size = new System.Drawing.Size(104, 32);\n         this.button1.TabIndex = 2;\n         this.button1.Text = &quot;Add Fruit&quot;;\n         this.button1.Click += new System.EventHandler(this.button1_Click);\n         this.button2.Enabled = false;\n         this.button2.Location = new System.Drawing.Point(288, 64);\n         this.button2.Size = new System.Drawing.Size(104, 32);\n         this.button2.TabIndex = 2;\n         this.button2.Text = &quot;Show Order&quot;;\n         this.button2.Click += new System.EventHandler(this.button2_Click);\n         this.button3.Enabled = false;\n         this.button3.Location = new System.Drawing.Point(288, 104);\n         this.button3.Size = new System.Drawing.Size(104, 32);\n         this.button3.TabIndex = 2;\n         this.button3.Text = &quot;Save Order&quot;;\n         this.button3.Click += new System.EventHandler(this.button3_Click);\n         this.ClientSize = new System.Drawing.Size(563, 273);\n         this.Controls.AddRange(new System.Windows.Forms.Control[] {this.listBox1,\n                                                        this.button3,\n                                                        this.button2,\n                                                        this.button1,\n                                                        this.textBox1,\n                                                        this.checkedListBox1});\n         this.Text = &quot;Fruit Order&quot;;\n      }\n\n      [STAThread]\n      public static void Main(string[] args) \n      {\n         Application.Run(new Form1());\n      }\n\n      // Adds the string if the text box has data in it.\n      private void button1_Click(object sender, System.EventArgs e)\n      {\n         if(textBox1.Text != &quot;&quot;)\n         {\n            if(checkedListBox1.CheckedItems.Contains(textBox1.Text)== false)\n               checkedListBox1.Items.Add(textBox1.Text,CheckState.Checked);\n            textBox1.Text = &quot;&quot;;\n         }\n\n      }\n      // Activates or deactivates the Add button.\n      private void textBox1_TextChanged(object sender, System.EventArgs e)\n      {\n         if (textBox1.Text == &quot;&quot;)\n         {\n            button1.Enabled = false;\n         }\n         else\n         {\n            button1.Enabled = true;\n         }\n            \n        }\n\n      // Moves the checked items from the CheckedListBox to the listBox.\n      private void button2_Click(object sender, System.EventArgs e)\n      {\n         listBox1.Items.Clear();\n         button3.Enabled=false;\n         for (int i=0; i&lt; checkedListBox1.CheckedItems.Count;i++)\n         {\n            listBox1.Items.Add(checkedListBox1.CheckedItems[i]);\n         }\n         if (listBox1.Items.Count&gt;0)\n            button3.Enabled=true;\n         \n      }\n        // Activates the move button if there are checked items.\n      private void checkedListBox1_ItemCheck(object sender, ItemCheckEventArgs e)\n      {\n         if(e.NewValue==CheckState.Unchecked)\n         {\n            if(checkedListBox1.CheckedItems.Count==1)\n            {\n               button2.Enabled = false;\n            }\n         }\n         else\n         {\n            button2.Enabled = true;\n         }\n      }\n\n        // Saves the items to a file.\n      private void button3_Click(object sender, System.EventArgs e)\n      {   \n         // Insert code to save a file.\n         listBox1.Items.Clear();\n         IEnumerator myEnumerator;\n         myEnumerator = checkedListBox1.CheckedIndices.GetEnumerator();\n         int y;\n         while (myEnumerator.MoveNext() != false)\n         {\n            y =(int) myEnumerator.Current;\n            checkedListBox1.SetItemChecked(y, false);\n         }\n         button3.Enabled = false ;\n      }        \n    }\n}\n   \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic CheckedListBox Example#1\">Option Explicit\nOption Strict\n\nImports System\nImports System.Drawing\nImports System.Collections\nImports System.ComponentModel\nImports System.Windows.Forms\nImports System.Data\nImports System.IO\n\nNamespace WindowsApplication1\n    Public Class Form1\n        Inherits System.Windows.Forms.Form\n        Private WithEvents checkedListBox1 As System.Windows.Forms.CheckedListBox\n        Private WithEvents textBox1 As System.Windows.Forms.TextBox\n        Private WithEvents button1 As System.Windows.Forms.Button\n        Private WithEvents button2 As System.Windows.Forms.Button\n        Private WithEvents listBox1 As System.Windows.Forms.ListBox\n        Private WithEvents button3 As System.Windows.Forms.Button\n        Private components As System.ComponentModel.Container\n        \n        \n        Public Sub New()\n            InitializeComponent()\n            \n            &#39; Sets up the initial objects in the CheckedListBox.\n            Dim myFruit As String() =  {&quot;Apples&quot;, &quot;Oranges&quot;, &quot;Tomato&quot;}\n            checkedListBox1.Items.AddRange(myFruit)\n            \n            &#39; Changes the selection mode from double-click to single click.\n            checkedListBox1.CheckOnClick = True\n        End Sub &#39;New\n        \n        \n        Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)\n            If disposing Then\n                If (components IsNot Nothing) Then\n                    components.Dispose()\n                End If\n            End If\n            MyBase.Dispose(disposing)\n        End Sub\n         \n        Private Sub InitializeComponent()\n            Me.components = New System.ComponentModel.Container()\n            Me.textBox1 = New System.Windows.Forms.TextBox()\n            Me.checkedListBox1 = New System.Windows.Forms.CheckedListBox()\n            Me.listBox1 = New System.Windows.Forms.ListBox()\n            Me.button1 = New System.Windows.Forms.Button()\n            Me.button2 = New System.Windows.Forms.Button()\n            Me.button3 = New System.Windows.Forms.Button()\n            Me.textBox1.Location = New System.Drawing.Point(144, 64)\n            Me.textBox1.Size = New System.Drawing.Size(128, 20)\n            Me.textBox1.TabIndex = 1\n            Me.checkedListBox1.Location = New System.Drawing.Point(16, 64)\n            Me.checkedListBox1.Size = New System.Drawing.Size(120, 184)\n            Me.checkedListBox1.TabIndex = 0\n            Me.listBox1.Location = New System.Drawing.Point(408, 64)\n            Me.listBox1.Size = New System.Drawing.Size(128, 186)\n            Me.listBox1.TabIndex = 3\n            Me.button1.Enabled = False\n            Me.button1.Location = New System.Drawing.Point(144, 104)\n            Me.button1.Size = New System.Drawing.Size(104, 32)\n            Me.button1.TabIndex = 2\n            Me.button1.Text = &quot;Add Fruit&quot;\n            Me.button2.Enabled = False\n            Me.button2.Location = New System.Drawing.Point(288, 64)\n            Me.button2.Size = New System.Drawing.Size(104, 32)\n            Me.button2.TabIndex = 2\n            Me.button2.Text = &quot;Show Order&quot;\n            Me.button3.Enabled = False\n            Me.button3.Location = New System.Drawing.Point(288, 104)\n            Me.button3.Size = New System.Drawing.Size(104, 32)\n            Me.button3.TabIndex = 2\n            Me.button3.Text = &quot;Save Order&quot;\n            Me.ClientSize = New System.Drawing.Size(563, 273)\n            Me.Controls.AddRange(New System.Windows.Forms.Control() {Me.listBox1, Me.button3, Me.button2, Me.button1, Me.textBox1, Me.checkedListBox1})\n            Me.Text = &quot;Fruit Order&quot;\n        End Sub &#39;InitializeComponent\n        \n        &lt;STAThread()&gt; _\n        Public Shared Sub Main()\n            Application.Run(New Form1())\n        End Sub &#39;Main\n        \n        \n        &#39; Adds the string if the text box has data in it.\n        Private Sub button1_Click(sender As Object, _\n                e As System.EventArgs) Handles button1.Click\n            If textBox1.Text &lt;&gt; &quot;&quot; Then\n                If checkedListBox1.CheckedItems.Contains(textBox1.Text) = False Then\n                    checkedListBox1.Items.Add(textBox1.Text, CheckState.Checked)\n                End If\n                textBox1.Text = &quot;&quot;\n            End If\n        End Sub &#39;button1_Click\n         \n        &#39; Activates or deactivates the Add button.\n        Private Sub textBox1_TextChanged(sender As Object, _\n                e As System.EventArgs) Handles textBox1.TextChanged\n            If textBox1.Text = &quot;&quot; Then\n                button1.Enabled = False\n            Else\n                button1.Enabled = True\n            End If\n        End Sub &#39;textBox1_TextChanged\n         \n        \n        &#39; Moves the checked items from the CheckedListBox to the listBox.\n        Private Sub button2_Click(sender As Object, _\n                e As System.EventArgs) Handles button2.Click\n            listBox1.Items.Clear()\n            button3.Enabled = False\n            Dim i As Integer\n            For i = 0 To checkedListBox1.CheckedItems.Count - 1\n                listBox1.Items.Add(checkedListBox1.CheckedItems(i))\n            Next i\n            If listBox1.Items.Count &gt; 0 Then\n                button3.Enabled = True\n            End If \n        End Sub &#39;button2_Click\n        \n        &#39; Activates the move button if there are checked items.\n        Private Sub checkedListBox1_ItemCheck(sender As Object, _\n                e As ItemCheckEventArgs) Handles checkedListBox1.ItemCheck\n            If e.NewValue = CheckState.Unchecked Then\n                If checkedListBox1.CheckedItems.Count = 1 Then\n                    button2.Enabled = False\n                End If\n            Else\n                button2.Enabled = True\n            End If\n        End Sub &#39;checkedListBox1_ItemCheck\n        \n        \n        &#39; Saves the items to a file.\n        Private Sub button3_Click(sender As Object, _\n                e As System.EventArgs) Handles button3.Click\n            &#39; Insert code to save a file.\n            listBox1.Items.Clear()\n            Dim myEnumerator As IEnumerator\n            myEnumerator = checkedListBox1.CheckedIndices.GetEnumerator()\n            Dim y As Integer\n            While myEnumerator.MoveNext() &lt;&gt; False\n                y = CInt(myEnumerator.Current)\n                checkedListBox1.SetItemChecked(y, False)\n            End While\n            button3.Enabled = False\n        End Sub &#39;button3_Click\n    End Class &#39;Form1\nEnd Namespace &#39;WindowsApplication1\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Multiple methods in <a class=\"xref\" href=\"system.windows.forms.checkbox\" data-linktype=\"relative-path\">CheckBox</a>, <a class=\"xref\" href=\"system.windows.forms.checkedlistbox\" data-linktype=\"relative-path\">CheckedListBox</a>, and <a class=\"xref\" href=\"system.windows.forms.itemcheckeventargs\" data-linktype=\"relative-path\">ItemCheckEventArgs</a> use this enumeration.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Use an indeterminately checked control when you do not want to set a default value.</p>\n</div>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Windows_Forms_CheckState_Checked\">\r\n      \t\t\t<span class=\"lang-csharp\">Checked</span>\r\n      \t</td>\r\n      \t<td><p>The control is checked.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_CheckState_Indeterminate\">\r\n      \t\t\t<span class=\"lang-csharp\">Indeterminate</span>\r\n      \t</td>\r\n      \t<td><p>The control is indeterminate. An indeterminate control generally has a shaded appearance.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_CheckState_Unchecked\">\r\n      \t\t\t<span class=\"lang-csharp\">Unchecked</span>\r\n      \t</td>\r\n      \t<td><p>The control is unchecked.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.CheckState.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.CheckState\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.CheckState.Checked\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.CheckState.Indeterminate\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.CheckState.Unchecked\">\r\n<meta name=\"APILocation\" content=\"System.Windows.Forms.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 05:47 AM\">\r\n<meta name=\"document_id\" content=\"438d09cd-d0f2-9207-103a-df66d5080e4c\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies the state of a control, such as a check box, that can be checked, unchecked, or set to an indeterminate state.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.windows.forms/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.CheckState\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.CheckState.yml","open_to_public_contributors":false,"api_name":["System.Windows.Forms.CheckState","System.Windows.Forms.CheckState.Checked","System.Windows.Forms.CheckState.Indeterminate","System.Windows.Forms.CheckState.Unchecked"],"api_location":["System.Windows.Forms.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.CheckState","System::Windows::Forms::CheckState","System.Windows.Forms.CheckState.Checked","System::Windows::Forms::CheckState::Checked","System.Windows.Forms.CheckState.Indeterminate","System::Windows::Forms::CheckState::Indeterminate","System.Windows.Forms.CheckState.Unchecked","System::Windows::Forms::CheckState::Unchecked"],"dev_langs":["csharp"],"updated_at":"2017-03-31 05:47 AM","document_id":"438d09cd-d0f2-9207-103a-df66d5080e4c","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Windows.Forms/CheckState.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"CheckState enum | Microsoft Docs","_op_ogTitle":"CheckState enum","description":"Specifies the state of a control, such as a check box, that can be checked, unchecked, or set to an indeterminate state.\n","toc_asset_id":"api/_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.CheckState","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.checkstate","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.checkstate","fileRelativePath":"api/System.Windows.Forms.CheckState.html"},"themesRelativePathToOutputRoot":"_themes/"}