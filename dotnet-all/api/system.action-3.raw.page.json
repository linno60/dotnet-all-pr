{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">Action&lt;T1,T2,T3&gt;</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Encapsulates a method that has three parameters and does not return a value.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.CompilerServices.TypeForwardedFrom(&quot;System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089&quot;)]\npublic delegate void Action&lt;in T1,in T2,in T3&gt;(T1 arg1, T2 arg2, T3 arg3);</code></pre>\r\n  \r\n  \r\n  \r\n  \t\t<h3 class=\"accented\">Type Parameters</h3>\r\n  \t\t<table class=\"nameValue stack\">\r\n  \t\t\t<tr>\r\n  \t\t\t<td>T1</td>\r\n  \t\t\t<td><p>The type of the first parameter of the method that this delegate encapsulates.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t\t<tr>\r\n  \t\t\t<td>T2</td>\r\n  \t\t\t<td><p>The type of the second parameter of the method that this delegate encapsulates.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t\t<tr>\r\n  \t\t\t<td>T3</td>\r\n  \t\t\t<td><p>The type of the third parameter of the method that this delegate encapsulates.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t</table>\r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">System.Delegate</a></span></div><span class=\"lang-csharp\">Action&lt;T1,T2,T3&gt;</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>You can use the Action(T1, delegate to pass a method as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have three parameters that are all passed to it by value, and it must not return a value. (In C#, the method must return <code>void</code>. In Visual Basic, it must be defined by the <code>Sub</code>â€¦<code>End Sub</code> construct. It can also be a method that returns a value that is ignored.) Typically, such a method is used to perform an operation.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To reference a method that has three parameters and returns a value, use the generic <a class=\"xref\" href=\"system.func-4\" data-linktype=\"relative-path\">Func&lt;T1,T2,T3,TResult&gt;</a> delegate instead.  </p>\n</div>\n<p> When you use the Action(T1, delegate, you do not have to explicitly define a delegate that encapsulates a method with three parameters. For example, the following code explicitly declares a delegate named <code>StringCopy</code> and assigns a reference to the <code>CopyStrings</code> method to its delegate instance.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Action~3#1\">using System;\n\ndelegate void StringCopy(string[] stringArray1, \n                         string[] stringArray2, \n                         int indexToStart);\n                         \npublic class TestDelegate\n{\n   public static void Main()\n   {\n      string[] ordinals = {&quot;First&quot;, &quot;Second&quot;, &quot;Third&quot;, &quot;Fourth&quot;, &quot;Fifth&quot;};\n      string[] copiedOrdinals = new string[ordinals.Length];           \n      StringCopy copyOperation = CopyStrings;\n      copyOperation(ordinals, copiedOrdinals, 3);\n      foreach (string ordinal in copiedOrdinals)\n         Console.WriteLine(String.IsNullOrEmpty(ordinal) ? &quot;&lt;None&gt;&quot; : ordinal);\n   }\n\n   private static void CopyStrings(string[] source, string[] target, int startPos)\n   {\n      if (source.Length != target.Length) \n         throw new IndexOutOfRangeException(&quot;The source and target arrays must have the same number of elements.&quot;);\n\n      for (int ctr = startPos; ctr &lt;= source.Length - 1; ctr++)\n         target[ctr] = String.Copy(source[ctr]);\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Action~3#1\">Delegate Sub StringCopy(stringArray1() As String, _\n                        stringArray2() As String, _\n                        indexToStart As Integer)\n\nModule TestDelegate\n   Public Sub Main()\n      Dim ordinals() As String = {&quot;First&quot;, &quot;Second&quot;, &quot;Third&quot;, &quot;Fourth&quot;, &quot;Fifth&quot;}\n      Dim copiedOrdinals(ordinals.Length - 1) As String\n      Dim copyOperation As StringCopy = AddressOf CopyStrings\n      copyOperation(ordinals, copiedOrdinals, 3)\n      For Each ordinal As String In copiedOrdinals\n         Console.WriteLine(ordinal)\n      Next    \n   End Sub\n   \n   Private Sub CopyStrings(source() As String, target() As String, startPos As Integer)\n      If source.Length &lt;&gt; target.Length Then \n         Throw New IndexOutOfRangeException(&quot;The source and target arrays must have the same number of elements.&quot;)\n      End If\n      For ctr As Integer = startPos to source.Length - 1\n         target(ctr) = String.Copy(source(ctr))\n      Next\n   End Sub\nEnd Module\n</code></pre><p> The following example simplifies this code by instantiating the Action(T1, delegate instead of explicitly defining a new delegate and assigning a named method to it.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Action~3#2\">using System;\n                         \npublic class TestAction3\n{\n   public static void Main()\n   {\n      string[] ordinals = {&quot;First&quot;, &quot;Second&quot;, &quot;Third&quot;, &quot;Fourth&quot;, &quot;Fifth&quot;};\n      string[] copiedOrdinals = new string[ordinals.Length];           \n      Action&lt;string[], string[], int&gt; copyOperation = CopyStrings;\n      copyOperation(ordinals, copiedOrdinals, 3);\n      foreach (string ordinal in copiedOrdinals)\n         Console.WriteLine(String.IsNullOrEmpty(ordinal) ? &quot;&lt;None&gt;&quot; : ordinal);\n   }\n\n   private static void CopyStrings(string[] source, string[] target, int startPos)\n   {\n      if (source.Length != target.Length) \n         throw new IndexOutOfRangeException(&quot;The source and target arrays must have the same number of elements.&quot;);\n\n      for (int ctr = startPos; ctr &lt;= source.Length - 1; ctr++)\n         target[ctr] = String.Copy(source[ctr]);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Action~3#2\">Module TestAction3\n   Public Sub Main()\n      Dim ordinals() As String = {&quot;First&quot;, &quot;Second&quot;, &quot;Third&quot;, &quot;Fourth&quot;, &quot;Fifth&quot;}\n      Dim copiedOrdinals(ordinals.Length - 1) As String\n      Dim copyOperation As Action(Of String(), String(), Integer) = AddressOf CopyStrings\n      copyOperation(ordinals, copiedOrdinals, 3)\n      For Each ordinal As String In copiedOrdinals\n         Console.WriteLine(ordinal)\n      Next    \n   End Sub\n   \n   Private Sub CopyStrings(source() As String, target() As String, startPos As Integer)\n      If source.Length &lt;&gt; target.Length Then \n         Throw New IndexOutOfRangeException(&quot;The source and target arrays must have the same number of elements.&quot;)\n      End If\n      For ctr As Integer = startPos to source.Length - 1\n         target(ctr) = String.Copy(source(ctr))\n      Next\n   End Sub\nEnd Module\n</code></pre><p> You can also use the Action(T1, delegate with anonymous methods in C#, as the following example illustrates. (For an introduction to anonymous methods, see <a href=\"../topic/anonymous%20methods%20(c%23%20programming%20guide)\" data-linktype=\"relative-path\">Anonymous Methods</a>.)  </p>\n<pre><code class=\"lang-cs\" name=\"System.Action~3#3\">using System;\n                         \npublic class TestAnon\n{\n   public static void Main()\n   {\n      string[] ordinals = {&quot;First&quot;, &quot;Second&quot;, &quot;Third&quot;, &quot;Fourth&quot;, &quot;Fifth&quot;};\n      string[] copiedOrdinals = new string[ordinals.Length];           \n      Action&lt;string[], string[], int&gt; copyOperation = delegate(string[] s1, \n                                                               string[] s2, \n                                                               int pos) \n                                      { CopyStrings(s1, s2, pos); };\n      copyOperation(ordinals, copiedOrdinals, 3);\n      foreach (string ordinal in copiedOrdinals)\n         Console.WriteLine(String.IsNullOrEmpty(ordinal) ? &quot;&lt;None&gt;&quot; : ordinal);\n   }\n\n   private static void CopyStrings(string[] source, string[] target, int startPos)\n   {\n      if (source.Length != target.Length) \n         throw new IndexOutOfRangeException(&quot;The source and target arrays must have the same number of elements.&quot;);\n\n      for (int ctr = startPos; ctr &lt;= source.Length - 1; ctr++)\n         target[ctr] = String.Copy(source[ctr]);\n   }\n}\n</code></pre><p> You can also assign a lambda expression to an Action(T1, delegate instance, as the following example illustrates. (For an introduction to lambda expressions, see <a href=\"../topic/lambda%20expressions%20(c%23%20programming%20guide)\" data-linktype=\"relative-path\">Lambda Expressions</a>.)  </p>\n<pre><code class=\"lang-cs\" name=\"System.Action~3#4\">using System;\n                         \npublic class TestLambda\n{\n   public static void Main()\n   {\n      string[] ordinals = {&quot;First&quot;, &quot;Second&quot;, &quot;Third&quot;, &quot;Fourth&quot;, &quot;Fifth&quot;};\n      string[] copiedOrdinals = new string[ordinals.Length];           \n      Action&lt;string[], string[], int&gt; copyOperation = (s1, s2, pos) =&gt;\n                                      CopyStrings(s1, s2, pos); \n      copyOperation(ordinals, copiedOrdinals, 3);\n      foreach (string ordinal in copiedOrdinals)\n         Console.WriteLine(ordinal == string.Empty ? &quot;&lt;None&gt;&quot; : ordinal);\n   }\n\n   private static void CopyStrings(string[] source, string[] target, int startPos)\n   {\n      if (source.Length != target.Length) \n         throw new IndexOutOfRangeException(&quot;The source and target arrays must have the same number of elements.&quot;);\n\n      for (int ctr = startPos; ctr &lt;= source.Length - 1; ctr++)\n         target[ctr] = String.Copy(source[ctr]);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Action~3#4\">Public Module TestLambda\n   Public Sub Main()\n      Dim ordinals() As String = {&quot;First&quot;, &quot;Second&quot;, &quot;Third&quot;, &quot;Fourth&quot;, &quot;Fifth&quot;}\n      Dim copiedOrdinals(ordinals.Length - 1) As String           \n      Dim copyOperation As Action(Of String(), String(), Integer) = _\n                           Sub(s1, s2, pos) CopyStrings(s1, s2, pos) \n      copyOperation(ordinals, copiedOrdinals, 3)\n      For Each ordinal As String In copiedOrdinals\n         If String.IsNullOrEmpty(ordinal) Then\n            Console.WriteLine(&quot;&lt;None&gt;&quot;)\n         Else\n            Console.WriteLine(ordinal)\n         End If      \n      Next   \n   End Sub\n\n   Private Function CopyStrings(source() As String, target() As String, startPos As Integer) As Integer\n      If source.Length &lt;&gt; target.Length Then \n         Throw New IndexOutOfRangeException(&quot;The source and target arrays must have the same number of elements.&quot;)\n      End If\n      \n      For ctr As Integer = startPos To source.Length - 1 \n         target(ctr) = String.Copy(source(ctr))\n      Next\n      Return source.Length - startPos \n   End Function\nEnd Module\n&#39; The example displays the following output:\n&#39;       &lt;None&gt;\n&#39;       &lt;None&gt;\n&#39;       &lt;None&gt;\n&#39;       Fourth\n&#39;       Fifth\n</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Action-3.yml\">\r\n<meta name=\"APIName\" content=\"System.Action&lt;T1,T2,T3&gt;\">\r\n<meta name=\"APIName\" content=\"System.Action&lt;T1,T2,T3&gt;..ctor\">\r\n<meta name=\"APIName\" content=\"System.Action&lt;T1,T2,T3&gt;.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Action&lt;T1,T2,T3&gt;.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Action&lt;T1,T2,T3&gt;.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-23 06:04 AM\">\r\n<meta name=\"document_id\" content=\"7126867b-e620-a6e6-1cd8-549e410fec0c\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Encapsulates a method that has three parameters and does not return a value.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Action`3\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Action-3.yml","open_to_public_contributors":false,"api_name":["System.Action<T1,T2,T3>","System.Action<T1,T2,T3>..ctor","System.Action<T1,T2,T3>.Invoke","System.Action<T1,T2,T3>.BeginInvoke","System.Action<T1,T2,T3>.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Action`3","System::Action`3"],"dev_langs":["csharp"],"updated_at":"2017-03-23 06:04 AM","document_id":"7126867b-e620-a6e6-1cd8-549e410fec0c","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/xml/System/Action`3.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Action<T1,T2,T3> delegate | Microsoft Docs","_op_ogTitle":"Action<T1,T2,T3> delegate","description":"Encapsulates a method that has three parameters and does not return a value.\n","toc_asset_id":"api/_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Action`3","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/api/system.action-3","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/api/system.action-3","fileRelativePath":"api/System.Action-3.html"},"themesRelativePathToOutputRoot":"_themes/"}