{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">EventLogEntryCollection</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Defines size and enumerators for a collection of <a class=\"xref\" href=\"system.diagnostics.eventlogentry\" data-linktype=\"relative-path\">EventLogEntry</a> instances.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class EventLogEntryCollection : System.Collections.ICollection</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">EventLogEntryCollection</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example demonstrates how to obtain event log information from an EventLogEntryCollection object.  </p>\n<pre><code class=\"lang-cs\" name=\"EventLogEntry_CopyTo#1\">using System;\nusing System.Collections;\nusing System.Diagnostics;\n\nclass EventLogEntryCollection_Item\n{\n    public static void Main()\n    {\n        try\n        {\n            string myLogName = &quot;MyNewLog&quot;;\n            // Check if the source exists.\n            if (!EventLog.SourceExists(&quot;MySource&quot;))\n            {\n                // Create the source.\n                // An event log source should not be created and immediately used.\n                // There is a latency time to enable the source, it should be created\n                // prior to executing the application that uses the source.\n                // Execute this sample a second time to use the new source.\n                EventLog.CreateEventSource(&quot;MySource&quot;, myLogName);\n                Console.WriteLine(&quot;Creating EventSource&quot;);\n                Console.WriteLine(&quot;Exiting, execute the application a second time to use the source.&quot;);\n                // The source is created.  Exit the application to allow it to be registered.\n                return;\n            }\n            else\n                // Get the EventLog associated if the source exists.\n                myLogName = EventLog.LogNameFromSourceName(&quot;MySource&quot;, &quot;.&quot;);\n\n            // Create an EventLog instance and assign its source.\n            EventLog myEventLog2 = new EventLog();\n            myEventLog2.Source = &quot;MySource&quot;;\n            // Write an informational entry to the event log.\n            myEventLog2.WriteEntry(&quot;Successfully created a new Entry in the Log&quot;);\n            myEventLog2.Close();\n            // Create a new EventLog object.\n            EventLog myEventLog1 = new EventLog();\n            myEventLog1.Log = myLogName;\n\n            // Obtain the Log Entries of &quot;MyNewLog&quot;.\n            EventLogEntryCollection myEventLogEntryCollection =\n               myEventLog1.Entries;\n            myEventLog1.Close();\n            Console.WriteLine(&quot;The number of entries in &#39;MyNewLog&#39; = &quot;\n               + myEventLogEntryCollection.Count);\n\n            // Display the &#39;Message&#39; property of EventLogEntry.\n            for (int i = 0; i &lt; myEventLogEntryCollection.Count; i++)\n            {\n                Console.WriteLine(&quot;The Message of the EventLog is :&quot;\n                   + myEventLogEntryCollection[i].Message);\n            }\n\n            // Copy the EventLog entries to Array of type EventLogEntry.\n            EventLogEntry[] myEventLogEntryArray =\n               new EventLogEntry[myEventLogEntryCollection.Count];\n            myEventLogEntryCollection.CopyTo(myEventLogEntryArray, 0);\n            IEnumerator myEnumerator = myEventLogEntryArray.GetEnumerator();\n            while (myEnumerator.MoveNext())\n            {\n                EventLogEntry myEventLogEntry = (EventLogEntry)myEnumerator.Current;\n                Console.WriteLine(&quot;The LocalTime the Event is generated is &quot;\n                   + myEventLogEntry.TimeGenerated);\n            }\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(&quot;Exception:{0}&quot;, e.Message);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"EventLogEntry_CopyTo#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Diagnostics;\nint main()\n{\n   try\n   {\n      String^ myLogName = &quot;MyNewLog&quot;;\n      \n      // Check if the source exists.\n      if (  !EventLog::SourceExists( &quot;MySource&quot; ) )\n      {\n         //Create source.\n         EventLog::CreateEventSource( &quot;MySource&quot;, myLogName );\n         Console::WriteLine( &quot;Creating EventSource&quot; );\n      }\n      else\n            myLogName = EventLog::LogNameFromSourceName( &quot;MySource&quot;, &quot;.&quot; );\n      \n      // Get the EventLog associated if the source exists.\n      // Create an EventLog instance and assign its source.\n      EventLog^ myEventLog2 = gcnew EventLog;\n      myEventLog2-&gt;Source = &quot;MySource&quot;;\n      \n      // Write an informational entry to the event log.\n      myEventLog2-&gt;WriteEntry( &quot;Successfully created a new Entry in the Log&quot; );\n      myEventLog2-&gt;Close();\n      \n      // Create a new EventLog Object*.\n      EventLog^ myEventLog1 = gcnew EventLog;\n      myEventLog1-&gt;Log = myLogName;\n      \n      // Obtain the Log Entries of S&quot;MyNewLog&quot;.\n      EventLogEntryCollection^ myEventLogEntryCollection = myEventLog1-&gt;Entries;\n      myEventLog1-&gt;Close();\n      Console::WriteLine( &quot;The number of entries in &#39;MyNewLog&#39; = {0}&quot;, myEventLogEntryCollection-&gt;Count );\n      \n      // Display the &#39;Message&#39; property of EventLogEntry.\n      for ( int i = 0; i &lt; myEventLogEntryCollection-&gt;Count; i++ )\n      {\n         Console::WriteLine( &quot;The Message of the EventLog is : {0}&quot;, myEventLogEntryCollection[ i ]-&gt;Message );\n      }\n      \n      // Copy the EventLog entries to Array of type EventLogEntry.\n      array&lt;EventLogEntry^&gt;^myEventLogEntryArray = gcnew array&lt;EventLogEntry^&gt;(myEventLogEntryCollection-&gt;Count);\n      myEventLogEntryCollection-&gt;CopyTo( myEventLogEntryArray, 0 );\n      IEnumerator^ myEnumerator = myEventLogEntryArray-&gt;GetEnumerator();\n      while ( myEnumerator-&gt;MoveNext() )\n      {\n         EventLogEntry^ myEventLogEntry = safe_cast&lt;EventLogEntry^&gt;(myEnumerator-&gt;Current);\n         Console::WriteLine( &quot;The LocalTime the Event is generated is {0}&quot;, myEventLogEntry-&gt;TimeGenerated );\n      }\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;Exception: {0}&quot;, e-&gt;Message );\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"EventLogEntry_CopyTo#1\">Imports System\nImports System.Collections\nImports System.Diagnostics\n\nClass EventLogEntryCollection_Item\n   Public Shared Sub Main()\n      Try\n         Dim myLogName As String = &quot;MyNewlog&quot;\n         &#39; Check if the source exists.\n         If Not EventLog.SourceExists(&quot;MySource&quot;) Then\n            &#39;Create source.\n            EventLog.CreateEventSource(&quot;MySource&quot;, myLogName)\n            Console.WriteLine(&quot;Creating EventSource&quot;)\n         &#39; Get the EventLog associated if the source exists.\n         Else\n            myLogName = EventLog.LogNameFromSourceName(&quot;MySource&quot;, &quot;.&quot;)\n         End If\n         &#39; Create an EventLog instance and assign its source.\n         Dim myEventLog2 As New EventLog()\n         myEventLog2.Source = &quot;MySource&quot;\n         &#39; Write an informational entry to the event log.\n         myEventLog2.WriteEntry(&quot;Successfully created a new Entry in the Log&quot;)\n         myEventLog2.Close()\n         &#39; Create a new EventLog object.\n         Dim myEventLog1 As New EventLog()\n         myEventLog1.Log = myLogName\n\n         &#39; Obtain the Log Entries of &quot;MyNewLog&quot;.\n         Dim myEventLogEntryCollection As EventLogEntryCollection = myEventLog1.Entries\n         myEventLog1.Close()\n         Console.WriteLine(&quot;The number of entries in &#39;MyNewLog&#39; = &quot; + _\n                           myEventLogEntryCollection.Count.ToString())\n\n         &#39; Display the &#39;Message&#39; property of EventLogEntry.\n         Dim i As Integer\n         For i = 0 To myEventLogEntryCollection.Count - 1\n            Console.WriteLine(&quot;The Message of the EventLog is :&quot; + _\n                              myEventLogEntryCollection(i).Message)\n         Next i\n         &#39; Copy the EventLog entries to Array of type EventLogEntry.\n         Dim myEventLogEntryArray(myEventLogEntryCollection.Count-1) As EventLogEntry\n         myEventLogEntryCollection.CopyTo(myEventLogEntryArray, 0)\n         Dim myEnumerator As IEnumerator = myEventLogEntryArray.GetEnumerator()\n         While myEnumerator.MoveNext()\n            Dim myEventLogEntry As EventLogEntry = CType(myEnumerator.Current, EventLogEntry)\n            Console.WriteLine(&quot;The LocalTime the Event is generated is &quot; + _\n                                 myEventLogEntry.TimeGenerated)\n         End While\n      Catch e As Exception\n         Console.WriteLine(&quot;Exception:{0}&quot;, e.Message.ToString())\n      End Try\n   End Sub &#39;Main\nEnd Class &#39;EventLogEntryCollection_Item\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Use the EventLogEntryCollection class when reading the entries associated with an <a class=\"xref\" href=\"system.diagnostics.eventlog\" data-linktype=\"relative-path\">EventLog</a> instance. The <a class=\"xref\" href=\"system.diagnostics.eventlog#System_Diagnostics_EventLog_Entries_\" data-linktype=\"relative-path\">Entries</a> property of the <a class=\"xref\" href=\"system.diagnostics.eventlog\" data-linktype=\"relative-path\">EventLog</a> class is a collection of all the entries in the event log.  </p>\n<p> Because new entries are appended to the existing list, stepping through the collection enables you to access the entries that were created after you originally created the EventLogEntryCollection. However, after you view the entire list, it is not updated with new entries.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_EventLogEntryCollection_Count_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_EventLogEntryCollection_Count\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Count</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the number of entries in the event log (that is, the number of elements in the <a class=\"xref\" href=\"system.diagnostics.eventlogentry\" data-linktype=\"relative-path\">EventLogEntry</a> collection).</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int Count { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of entries currently in the event log.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.diagnostics.eventlogentrycollection\" data-linktype=\"relative-path\">EventLogEntryCollection</a> represents a dynamic list of all the entries in a log. Therefore, the Count property can change during the lifetime of the <a class=\"xref\" href=\"system.diagnostics.eventlogentrycollection\" data-linktype=\"relative-path\">EventLogEntryCollection</a> instance that you create. It is usually best to work with the Count property directly instead of assigning its value to a variable.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_EventLogEntryCollection_Item_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_EventLogEntryCollection_Item_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Item(Int32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets an entry in the event log, based on an index that starts at 0 (zero).</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual System.Diagnostics.EventLogEntry this[int index] { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>index</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The zero-based index that is associated with the event log entry.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.eventlogentry\" data-linktype=\"relative-path\">EventLogEntry</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The event log entry at the location that is specified by the <code>index</code> parameter.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.diagnostics.eventlogentry\" data-linktype=\"relative-path\">EventLogEntry</a> objects are indexed by the event log system according to the chronological order in which they arrived in the event log. Use the Item property to select a specific event log entry whose index in the collection is known.  </p>\n<p> Iterating through the <a class=\"xref\" href=\"system.diagnostics.eventlogentrycollection\" data-linktype=\"relative-path\">EventLogEntryCollection</a> instance steps through each <a class=\"xref\" href=\"system.diagnostics.eventlogentry\" data-linktype=\"relative-path\">EventLogEntry</a> object sequentially. The collection is dynamic and the number of entries may not be immutable when you enter the loop. Therefore, you should use a <code>for each...next</code> loop instead of a <code>for(int i=0; i&lt;count, i++)</code> loop to step through entries that are associated with the <a class=\"xref\" href=\"system.diagnostics.eventlogentrycollection\" data-linktype=\"relative-path\">EventLogEntryCollection</a> instance to examine the entire set of entries.  </p>\n<p> Because new entries are appended to the existing list, stepping through the collection enables you to access the entries that were created after you originally created the <a class=\"xref\" href=\"system.diagnostics.eventlogentrycollection\" data-linktype=\"relative-path\">EventLogEntryCollection</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_EventLogEntryCollection_CopyTo_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_EventLogEntryCollection_CopyTo_System_Diagnostics_EventLogEntry___System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CopyTo(EventLogEntry[], Int32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Copies the elements of the <a class=\"xref\" href=\"system.diagnostics.eventlogentrycollection\" data-linktype=\"relative-path\">EventLogEntryCollection</a> to an array of <a class=\"xref\" href=\"system.diagnostics.eventlogentry\" data-linktype=\"relative-path\">EventLogEntry</a> instances, starting at a particular array index.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void CopyTo (System.Diagnostics.EventLogEntry[] entries, int index);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>entries</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.eventlogentry\" data-linktype=\"relative-path\">EventLogEntry</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The one-dimensional array of <a class=\"xref\" href=\"system.diagnostics.eventlogentry\" data-linktype=\"relative-path\">EventLogEntry</a> instances that is the destination of the elements copied from the collection. The array must have zero-based indexing.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>index</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The zero-based index in the array at which copying begins.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Because new entries are appended to the existing list, stepping through the collection enables you to access the entries that were created after you originally created the <a class=\"xref\" href=\"system.diagnostics.eventlogentrycollection\" data-linktype=\"relative-path\">EventLogEntryCollection</a>. An array of <a class=\"xref\" href=\"system.diagnostics.eventlogentry\" data-linktype=\"relative-path\">EventLogEntry</a> instances is fixed at the time it is instantiated. Therefore, you cannot read new entries by using the array that is returned by the CopyTo method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_EventLogEntryCollection_GetEnumerator_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_EventLogEntryCollection_GetEnumerator\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetEnumerator()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Supports a simple iteration over the <a class=\"xref\" href=\"system.diagnostics.eventlogentrycollection\" data-linktype=\"relative-path\">EventLogEntryCollection</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Collections.IEnumerator GetEnumerator ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An object that can be used to iterate over the collection.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The object that is returned by the GetEnumerator method is a wrapper for the <a class=\"xref\" href=\"system.diagnostics.eventlogentrycollection\" data-linktype=\"relative-path\">EventLogEntryCollection</a> class that implements the <a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a> enumerator.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If the collection is changed during the iteration, the iteration is terminated. To avoid this possibility, see the <a class=\"xref\" href=\"system.diagnostics.eventlogentrycollection#System_Diagnostics_EventLogEntryCollection_Item_\" data-linktype=\"relative-path\">Item</a> property for an alternative technique for iterating through a collection.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Explicit Interface Implementations\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_EventLogEntryCollection_System_Collections_ICollection_CopyTo_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_EventLogEntryCollection_System_Collections_ICollection_CopyTo_System_Array_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ICollection.CopyTo(Array, Int32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Copies the elements of the collection to an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>, starting at a particular <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> index.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">void ICollection.CopyTo (Array array, int index);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>array</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that is the destination of the elements that are copied from the collection. The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> must have zero-based indexing.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>index</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The zero-based index in <code>array</code> at which copying begins.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use the <a class=\"xref\" href=\"system.diagnostics.eventlogentrycollection#System_Diagnostics_EventLogEntryCollection_CopyTo_\" data-linktype=\"relative-path\">CopyTo</a> method of the <a class=\"xref\" href=\"system.diagnostics.eventlogentrycollection\" data-linktype=\"relative-path\">EventLogEntryCollection</a> class to copy all or part of the collection to an <a class=\"xref\" href=\"system.diagnostics.eventlogentry\" data-linktype=\"relative-path\">EventLogEntry</a> array.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_EventLogEntryCollection_System_Collections_ICollection_IsSynchronized_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_EventLogEntryCollection_System_Collections_ICollection_IsSynchronized\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ICollection.IsSynchronized</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether access to the <a class=\"xref\" href=\"system.diagnostics.eventlogentrycollection\" data-linktype=\"relative-path\">EventLogEntryCollection</a> is synchronized (thread-safe).</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">bool System.Collections.ICollection.IsSynchronized { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>false</code> if access to the collection is not synchronized (thread-safe).</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>For the <a class=\"xref\" href=\"system.diagnostics.eventlogentrycollection\" data-linktype=\"relative-path\">EventLogEntryCollection</a> class, the ICollection.IsSynchronized method always returns <code>false</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_EventLogEntryCollection_System_Collections_ICollection_SyncRoot_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_EventLogEntryCollection_System_Collections_ICollection_SyncRoot\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ICollection.SyncRoot</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets an object that can be used to synchronize access to the <a class=\"xref\" href=\"system.diagnostics.eventlogentrycollection\" data-linktype=\"relative-path\">EventLogEntryCollection</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">object System.Collections.ICollection.SyncRoot { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An object that can be used to synchronize access to the collection.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>For the <a class=\"xref\" href=\"system.diagnostics.eventlogentrycollection\" data-linktype=\"relative-path\">EventLogEntryCollection</a> class, the ICollection.SyncRoot property always returns the current <a class=\"xref\" href=\"system.diagnostics.eventlogentrycollection\" data-linktype=\"relative-path\">EventLogEntryCollection</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Diagnostics.EventLogEntryCollection.yml\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.EventLogEntryCollection\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.EventLogEntryCollection.CopyTo\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.EventLogEntryCollection.Count\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.EventLogEntryCollection.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.EventLogEntryCollection.Item\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.EventLogEntryCollection.ICollection.CopyTo\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.EventLogEntryCollection.ICollection.IsSynchronized\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.EventLogEntryCollection.ICollection.SyncRoot\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"dc7afb7e-3874-dc0f-1fd0-1d6db0ef302b\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines size and enumerators for a collection of  instances.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.diagnostics/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Diagnostics.EventLogEntryCollection\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Diagnostics.EventLogEntryCollection.yml","open_to_public_contributors":false,"api_name":["System.Diagnostics.EventLogEntryCollection","System.Diagnostics.EventLogEntryCollection.CopyTo","System.Diagnostics.EventLogEntryCollection.Count","System.Diagnostics.EventLogEntryCollection.GetEnumerator","System.Diagnostics.EventLogEntryCollection.Item","System.Diagnostics.EventLogEntryCollection.ICollection.CopyTo","System.Diagnostics.EventLogEntryCollection.ICollection.IsSynchronized","System.Diagnostics.EventLogEntryCollection.ICollection.SyncRoot"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Diagnostics.EventLogEntryCollection","System::Diagnostics::EventLogEntryCollection","System.Diagnostics.EventLogEntryCollection.CopyTo","System::Diagnostics::EventLogEntryCollection::CopyTo","System.Diagnostics.EventLogEntryCollection.Count","System::Diagnostics::EventLogEntryCollection::Count","System.Diagnostics.EventLogEntryCollection.GetEnumerator","System::Diagnostics::EventLogEntryCollection::GetEnumerator","System.Diagnostics.EventLogEntryCollection.Item","System::Diagnostics::EventLogEntryCollection::Item","System.Diagnostics.EventLogEntryCollection.System#Collections#ICollection#CopyTo","System::Diagnostics::EventLogEntryCollection::System#Collections#ICollection#CopyTo","System.Diagnostics.EventLogEntryCollection.System#Collections#ICollection#IsSynchronized","System::Diagnostics::EventLogEntryCollection::System#Collections#ICollection#IsSynchronized","System.Diagnostics.EventLogEntryCollection.System#Collections#ICollection#SyncRoot","System::Diagnostics::EventLogEntryCollection::System#Collections#ICollection#SyncRoot"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"dc7afb7e-3874-dc0f-1fd0-1d6db0ef302b","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Diagnostics/EventLogEntryCollection.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"EventLogEntryCollection class | Microsoft Docs","_op_ogTitle":"EventLogEntryCollection class","description":"Defines size and enumerators for a collection of  instances.\n","toc_asset_id":"api/_splitted/System.Diagnostics/toc.json","toc_rel":"_splitted/System.Diagnostics/toc.json","source_url":"","ms.assetid":"System.Diagnostics.EventLogEntryCollection","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.eventlogentrycollection","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.eventlogentrycollection","fileRelativePath":"api/System.Diagnostics.EventLogEntryCollection.html"},"themesRelativePathToOutputRoot":"_themes/"}