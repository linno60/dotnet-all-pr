{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">IStateManager</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Defines the properties and methods any class must implement to support view state management for a server control.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public interface IStateManager</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example shows a class that implements the IStateManager interface. It includes implementations of the <a class=\"xref\" href=\"system.web.ui.istatemanager#System_Web_UI_IStateManager_IsTrackingViewState_\" data-linktype=\"relative-path\">IsTrackingViewState</a> property and the <a class=\"xref\" href=\"system.web.ui.istatemanager#System_Web_UI_IStateManager_LoadViewState_\" data-linktype=\"relative-path\">LoadViewState</a>, <a class=\"xref\" href=\"system.web.ui.istatemanager#System_Web_UI_IStateManager_SaveViewState_\" data-linktype=\"relative-path\">SaveViewState</a>, and <a class=\"xref\" href=\"system.web.ui.istatemanager#System_Web_UI_IStateManager_TrackViewState_\" data-linktype=\"relative-path\">TrackViewState</a> methods.  </p>\n<pre><code class=\"lang-vb\" name=\"StateBag_IStateManager_Sample1#8\">&#39; Create a class that implements IStateManager so that\n&#39; it can manage its own view state.   \n\n&lt;AspNetHostingPermission(SecurityAction.Demand, _\n   Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\nPublic NotInheritable Class MyItem\n    Implements IStateManager\n    Private _message As String\n\n    &#39; The StateBag object that allows you to save\n    &#39; and restore view-state information.\n    Private _viewstate As StateBag\n\n\n    &#39; The constructor for the MyItem class.\n    Public Sub New(ByVal mesg As String)\n        _message = mesg\n        _viewstate = New StateBag()\n        _viewstate.Add(&quot;message&quot;, _message)\n    End Sub &#39;New\n\n    &#39; Create a Message property that reads from and writes\n    &#39; to view state. If the set accessor writes the message\n    &#39; value to view state, the StateBag.SetItemDirty method\n    &#39; is called, telling view state that the item has changed. \n\n    Public Property Message() As String\n        Get\n            Return CStr(_viewstate(&quot;message&quot;))\n        End Get\n        Set(ByVal value As String)\n            _message = value\n            _viewstate.SetItemDirty(&quot;message&quot;, True)\n        End Set\n    End Property\n\n    &#39; Implement the LoadViewState method. If the saved view state\n    &#39; exists, the view-state value is loaded to the MyItem \n    &#39; control. \n    Sub LoadViewState(ByVal savedState As Object) Implements IStateManager.LoadViewState\n        _message = CStr(_viewstate(&quot;message&quot;))\n        If Not (savedState Is Nothing) Then\n            CType(_viewstate, IStateManager).LoadViewState(savedState)\n        End If\n    End Sub &#39;LoadViewState\n    &#39; Implement the SaveViewState method. If the StateBag\n    &#39; that stores the MyItem class&#39;s view state contains\n    &#39; a value for the message property and if the value\n    &#39; has changed since the TrackViewState method was last \n    &#39; called, all view state for this class is deleted, \n    &#39; using the StateBag.Clear method,and the new value is added.\n    Function SaveViewState() As Object Implements IStateManager.SaveViewState\n        &#39; Check whether the message property exists in \n        &#39; the ViewState property, and if it does, check\n        &#39; whether it has changed since the most recent\n        &#39; TrackViewState method call.\n        If Not CType(_viewstate, IDictionary).Contains(&quot;message&quot;) OrElse _viewstate.IsItemDirty(&quot;message&quot;) Then\n            _viewstate.Clear()\n            &#39; Add the _message property to the StateBag.\n            _viewstate.Add(&quot;message&quot;, _message)\n        End If\n        Return CType(_viewstate, IStateManager).SaveViewState()\n    End Function &#39;IStateManager.SaveViewState\n\n\n    &#39; Implement the TrackViewState method for this class by\n    &#39; calling the TrackViewState method of the class&#39;s private\n    &#39; _viewstate property.\n    Sub TrackViewState() Implements IStateManager.TrackViewState\n        CType(_viewstate, IStateManager).TrackViewState()\n    End Sub &#39;IStateManager.TrackViewState\n    &#39; Implement the IsTrackingViewState method for this class \n    &#39; by calling the IsTrackingViewState method of the class&#39;s\n    &#39; private _viewstate property. \n\n    ReadOnly Property IsTrackingViewState() As Boolean Implements IStateManager.IsTrackingViewState\n        Get\n            Return CType(_viewstate, IStateManager).IsTrackingViewState\n        End Get\n    End Property\n\n    &#39; Create a function that iterates through the view-state\n    &#39; values stored for this class and returns the\n    &#39; results as a string.\n    Public Function EnumerateViewState() As String\n        Dim keyName, keyValue As String\n        Dim result As String = [String].Empty\n        Dim myStateItem As StateItem\n        Dim myDictionaryEnumerator As IDictionaryEnumerator = _viewstate.GetEnumerator()\n        While myDictionaryEnumerator.MoveNext()\n            keyName = CStr(myDictionaryEnumerator.Key)\n            myStateItem = CType(myDictionaryEnumerator.Value, StateItem)\n            keyValue = CStr(myStateItem.Value)\n            result = result + &quot;&lt;br&gt;ViewState[&quot; + keyName + &quot;] = &quot; + keyValue\n        End While\n        Return result\n    End Function &#39;EnumerateViewState\nEnd Class &#39;MyItem \n</code></pre><pre><code class=\"lang-cs\" name=\"StateBag_IStateManager_Sample1#8\">// Create a class that implements IStateManager so that\n// it can manage its own view state.   \n[AspNetHostingPermission(SecurityAction.Demand,\n   Level = AspNetHostingPermissionLevel.Minimal)]\npublic sealed class MyItem : IStateManager\n{\n    private string _message;\n\n    // The StateBag object that allows you to save\n    // and restore view-state information.\n    private StateBag _viewstate;\n\n    // The constructor for the MyItem class.\n    public MyItem(string mesg)\n    {\n        _message = mesg;\n        _viewstate = new StateBag();\n        _viewstate.Add(&quot;message&quot;, _message);\n    }\n\n    // Create a Message property that reads from and writes\n    // to view state. If the set accessor writes the message\n    // value to view state, the StateBag.SetItemDirty method\n    // is called, telling view state that the item has changed. \n    public string Message\n    {\n        get\n        {\n            return (string)_viewstate[&quot;message&quot;];\n        }\n        set\n        {\n            _message = value;\n            _viewstate.SetItemDirty(&quot;message&quot;, true);\n        }\n    }\n\n    // Implement the LoadViewState method. If the saved view state\n    // exists, the view-state value is loaded to the MyItem control. \n    void IStateManager.LoadViewState(object savedState)\n    {\n        _message = (string)_viewstate[&quot;message&quot;];\n        if (savedState != null)\n            ((IStateManager)_viewstate).LoadViewState(savedState);\n    }\n\n    // Implement the SaveViewState method. If the StateBag\n    // that stores the MyItem class&#39;s view state contains\n    // a value for the message property and if the value\n    // has changed since the TrackViewState method was last \n    // called, all view state for this class is deleted, \n    // using the StateBag.Clear method,and the new value is added.\n    object IStateManager.SaveViewState()\n    {\n        // Check whether the message property exists in \n        // the ViewState property, and if it does, check\n        // whether it has changed since the most recent\n        // TrackViewState method call.\n        if (!((IDictionary)_viewstate).Contains(&quot;message&quot;) || _viewstate.IsItemDirty(&quot;message&quot;))\n        {\n            _viewstate.Clear();\n            // Add the _message property to the StateBag.\n            _viewstate.Add(&quot;message&quot;, _message);\n        }\n        return ((IStateManager)_viewstate).SaveViewState();\n    }\n\n\n    // Implement the TrackViewState method for this class by\n    // calling the TrackViewState method of the class&#39;s private\n    // _viewstate property.\n    void IStateManager.TrackViewState()\n    {\n        ((IStateManager)_viewstate).TrackViewState();\n    }\n\n    // Implement the IsTrackingViewState method for this class \n    // by calling the IsTrackingViewState method of the class&#39;s\n    // private _viewstate property. \n    bool IStateManager.IsTrackingViewState\n    {\n        get\n        {\n            return ((IStateManager)_viewstate).IsTrackingViewState;\n        }\n    }\n\n    // Create a function that iterates through the view-state\n    // values stored for this class and returns the\n    // results as a string.\n    public string EnumerateViewState()\n    {\n        string keyName, keyValue;\n        string result = String.Empty;\n        StateItem myStateItem;\n        IDictionaryEnumerator myDictionaryEnumerator = _viewstate.GetEnumerator();\n        while (myDictionaryEnumerator.MoveNext())\n        {\n            keyName = (string)myDictionaryEnumerator.Key;\n            myStateItem = (StateItem)myDictionaryEnumerator.Value;\n            keyValue = (string)myStateItem.Value;\n            result = result + &quot;&lt;br&gt;ViewState[&quot; + keyName + &quot;] = &quot; + keyValue;\n        }\n        return result;\n    }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>A server control&#39;s view state comprises the cumulative values of the control&#39;s properties. This interface includes methods that save and load a server control&#39;s view state values, as well as a method that instructs the control to track any changes to its view state.  </p>\n<p> To customize the way your ASP.NET application manages server control view state, you must create a class that implements this interface because you cannot inherit from the <a class=\"xref\" href=\"system.web.ui.statebag\" data-linktype=\"relative-path\">StateBag</a> class.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_IStateManager_IsTrackingViewState\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsTrackingViewState</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>When implemented by a class, gets a value indicating whether a server control is tracking its view state changes.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsTrackingViewState { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if a server control is tracking its view state changes; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_IStateManager_LoadViewState_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LoadViewState(Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>When implemented by a class, loads the server control&#39;s previously saved view state to the control.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void LoadViewState (object state);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>state</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> that contains the saved view state values for the control.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is used primarily by the .NET Framework infrastructure and is not intended to be used directly from your code. However, control developers can override this method to specify how a custom server control restores its view state. For more information, see <a href=\"../topic/asp.net%20state%20management%20overview\" data-linktype=\"relative-path\">ASP.NET State Management Overview</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_IStateManager_SaveViewState\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SaveViewState()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>When implemented by a class, saves the changes to a server control&#39;s view state to an <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public object SaveViewState ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> that contains the view state changes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_IStateManager_TrackViewState\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TrackViewState()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>When implemented by a class, instructs the server control to track changes to its view state.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void TrackViewState ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>After this method has been called on a server control, the <a class=\"xref\" href=\"system.web.ui.istatemanager#System_Web_UI_IStateManager_IsTrackingViewState_\" data-linktype=\"relative-path\">IsTrackingViewState</a> property will return <code>true</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.IStateManager.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.IStateManager\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.IStateManager.IsTrackingViewState\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.IStateManager.LoadViewState\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.IStateManager.SaveViewState\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.IStateManager.TrackViewState\">\r\n<meta name=\"APILocation\" content=\"System.Web.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"7c37d8e5-043e-085e-18f6-c55ccfce7d13\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines the properties and methods any class must implement to support view state management for a server control.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.web.ui/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.IStateManager\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.IStateManager.yml","open_to_public_contributors":false,"api_name":["System.Web.UI.IStateManager","System.Web.UI.IStateManager.IsTrackingViewState","System.Web.UI.IStateManager.LoadViewState","System.Web.UI.IStateManager.SaveViewState","System.Web.UI.IStateManager.TrackViewState"],"api_location":["System.Web.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.IStateManager","System::Web::UI::IStateManager","System.Web.UI.IStateManager.IsTrackingViewState","System::Web::UI::IStateManager::IsTrackingViewState","System.Web.UI.IStateManager.LoadViewState","System::Web::UI::IStateManager::LoadViewState","System.Web.UI.IStateManager.SaveViewState","System::Web::UI::IStateManager::SaveViewState","System.Web.UI.IStateManager.TrackViewState","System::Web::UI::IStateManager::TrackViewState"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"7c37d8e5-043e-085e-18f6-c55ccfce7d13","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Web.UI/IStateManager.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IStateManager interface | Microsoft Docs","_op_ogTitle":"IStateManager interface","description":"Defines the properties and methods any class must implement to support view state management for a server control.\n","toc_asset_id":"api/_splitted/System.Web.UI/toc.json","toc_rel":"_splitted/System.Web.UI/toc.json","source_url":"","ms.assetid":"System.Web.UI.IStateManager","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.istatemanager","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.istatemanager","fileRelativePath":"api/System.Web.UI.IStateManager.html"},"themesRelativePathToOutputRoot":"_themes/"}