{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">IComponent</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides functionality required by all components.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.ComponentModel.Design.Serialization.RootDesignerSerializer(&quot;System.ComponentModel.Design.Serialization.RootCodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;, &quot;System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;, true)]\n[System.ComponentModel.Designer(&quot;System.ComponentModel.Design.ComponentDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;, typeof(System.ComponentModel.Design.IDesigner))]\n[System.ComponentModel.Designer(&quot;System.Windows.Forms.Design.ComponentDocumentDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&quot;, typeof(System.ComponentModel.Design.IRootDesigner))]\n[System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ComponentConverter))]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic interface IComponent : IDisposable</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates how to implement the IComponent, <a class=\"xref\" href=\"system.componentmodel.isite\" data-linktype=\"relative-path\">ISite</a>, and <a class=\"xref\" href=\"system.componentmodel.icontainer\" data-linktype=\"relative-path\">IContainer</a> interfaces.  </p>\n<pre><code class=\"lang-cs\" name=\"ContainerExmpl#1\">\t/// &lt;summary&gt;\n\t/// The following example demonstrates the implementation of \n\t/// ISite, IComponent, and IContainer for use in a simple library container.\n\t///\n\t/// This example uses the System, System.ComponentModel, and System.Collections\n\t/// namespaces.\n\t/// &lt;/summary&gt;\n\n\t//This code segment implements the ISite and IComponent interfaces.\n\t//The implementation of the IContainer interface can be seen in the documentation \n\t//of IContainer.\n\n\t//Implement the ISite interface.\n\n\t// The ISBNSite class represents the ISBN name of the book component\n\tclass ISBNSite : ISite\n\t{\n\t\tprivate IComponent m_curComponent;\n\t\tprivate IContainer m_curContainer;\n\t\tprivate bool m_bDesignMode;\n\t\tprivate string m_ISBNCmpName;\n\n\t\tpublic ISBNSite(IContainer actvCntr, IComponent prntCmpnt)\n\t\t{\n\t\t\tm_curComponent = prntCmpnt;\n\t\t\tm_curContainer = actvCntr;\n\t\t\tm_bDesignMode = false;\n\t\t\tm_ISBNCmpName = null;\n\t\t}\n\n\t\t//Support the ISite interface.\n\t\tpublic virtual IComponent Component\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\treturn m_curComponent;\n\t\t\t}\n\t\t}\n\n\t\tpublic virtual IContainer Container\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\treturn m_curContainer;\n\t\t\t}\n\t\t}\n\t\t\n\t\tpublic virtual bool DesignMode\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\treturn m_bDesignMode;\n\t\t\t}\n\t\t}\n\n\t\tpublic virtual string Name\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\treturn m_ISBNCmpName;\n\t\t\t}\n\n\t\t\tset\n\t\t\t{\n\t\t\t\tm_ISBNCmpName = value;\n\t\t\t}\n\t\t}\n\n\t\t//Support the IServiceProvider interface.\n\t\tpublic virtual object GetService(Type serviceType)\n\t\t{\n\t\t\t//This example does not use any service object.\n\t\t\treturn null;\n\t\t}\n\n\t}\n\n\t// The BookComponent class represents the book component of the library container.\n\t\n\t// This class implements the IComponent interface.\n\t\n\tclass BookComponent : IComponent\n\t{\n\t\tpublic event EventHandler Disposed;\n\t\tprivate ISite m_curISBNSite;\n\t\tprivate string m_bookTitle;\n\t\tprivate string m_bookAuthor;\n\n\t\tpublic BookComponent(string Title, string Author)\n\t\t{\n\t\t\tm_curISBNSite = null;\n\t\t\tDisposed = null;\n\t\t\tm_bookTitle = Title;\n\t\t\tm_bookAuthor = Author;\n\t\t}\n\n\t\tpublic string Title\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\treturn m_bookTitle;\n\t\t\t}\n\t\t}\n\n\t\tpublic string Author\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\treturn m_bookAuthor;\n\t\t\t}\n\t\t}\n\n\t\tpublic virtual void Dispose()\n\t\t{\t\n\t\t\t//There is nothing to clean.\n\t\t\tif(Disposed != null)\n\t\t\t\tDisposed(this,EventArgs.Empty);\n\t\t}\n\n\t\tpublic virtual ISite Site\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\treturn m_curISBNSite;\n\t\t\t}\n\t\t\tset\n\t\t\t{\n\t\t\t\tm_curISBNSite = value;\n\t\t\t}\n\t\t}\n\n\t\tpublic override bool Equals(object cmp)\n\t\t{\n\t\t\tBookComponent cmpObj = (BookComponent)cmp;\n\t\t\tif(this.Title.Equals(cmpObj.Title) &amp;&amp; this.Author.Equals(cmpObj.Author))\n\t\t\t\treturn true;\n\n\t\t\treturn false;\n\t\t}\n\n\t\tpublic override int GetHashCode()\n\t\t{\n\t\t\treturn base.GetHashCode();\n\t\t}\n\t}\n</code></pre><pre><code class=\"lang-cpp\" name=\"ContainerExmpl#1\">   /// &lt;summary&gt;\n   /// The following example demonstrates the implementation of\n   /// ISite, IComponent, and IContainer for use in a simple library container.\n   ///\n   /// This example uses the System, System.ComponentModel, and System.Collections\n   /// namespaces.\n   /// &lt;/summary&gt;\n   //This code segment implements the ISite and IComponent interfaces.\n   //The implementation of the IContainer interface can be seen in the documentation\n   //of IContainer.\n   //Implement the ISite interface.\n   // The ISBNSite class represents the ISBN name of the book component\n   ref class ISBNSite: public ISite\n   {\n   private:\n      IComponent^ m_curComponent;\n      IContainer^ m_curContainer;\n      bool m_bDesignMode;\n      String^ m_ISBNCmpName;\n\n   public:\n      ISBNSite( IContainer^ actvCntr, IComponent^ prntCmpnt )\n      {\n         m_curComponent = prntCmpnt;\n         m_curContainer = actvCntr;\n         m_bDesignMode = false;\n         m_ISBNCmpName = nullptr;\n      }\n\n\n      property IComponent^ Component \n      {\n\n         //Support the ISite interface.\n         virtual IComponent^ get()\n         {\n            return m_curComponent;\n         }\n\n      }\n\n      property IContainer^ Container \n      {\n         virtual IContainer^ get()\n         {\n            return m_curContainer;\n         }\n\n      }\n\n      property bool DesignMode \n      {\n         virtual bool get()\n         {\n            return m_bDesignMode;\n         }\n\n      }\n\n      property String^ Name \n      {\n         virtual String^ get()\n         {\n            return m_ISBNCmpName;\n         }\n\n         virtual void set( String^ value )\n         {\n            m_ISBNCmpName = value;\n         }\n\n      }\n\n      //Support the IServiceProvider interface.\n      virtual Object^ GetService( Type^ serviceType )\n      {\n         \n         //This example does not use any service object.\n         return nullptr;\n      }\n\n   };\n\n\n   // The BookComponent class represents the book component of the library container.\n   // This class implements the IComponent interface.\n   ref class BookComponent: public IComponent\n   {\n   private:\n      ISite^ m_curISBNSite;\n      String^ m_bookTitle;\n      String^ m_bookAuthor;\n\n   public:\n      event virtual EventHandler^ Disposed;\n\n\t  BookComponent( String^ Title, String^ Author )\n      {\n         m_curISBNSite = nullptr;\n         //Disp = false;\n         m_bookTitle = Title;\n         m_bookAuthor = Author;\n      }\n\n\n      property String^ Title \n      {\n         String^ get()\n         {\n            return m_bookTitle;\n         }\n\n      }\n\n      property String^ Author \n      {\n         String^ get()\n         {\n            return m_bookAuthor;\n         }\n\n      }\n\n      ~BookComponent()\n      {\n\n      }\n\n      property ISite^ Site \n      {\n         virtual ISite^ get()\n         {\n            return m_curISBNSite;\n         }\n\n         virtual void set( ISite^ value )\n         {\n            m_curISBNSite = value;\n         }\n\n      }\n      virtual bool Equals( Object^ cmp ) override\n      {\n         BookComponent^ cmpObj = safe_cast&lt;BookComponent^&gt;(cmp);\n         return (this-&gt;Title-&gt;Equals( cmpObj-&gt;Title ) &amp;&amp; this-&gt;Author-&gt;Equals( cmpObj-&gt;Author ));\n      }\n\n      virtual int GetHashCode() override\n      {\n         return IComponent::GetHashCode();\n      }\n\n   };\n\n</code></pre><pre><code class=\"lang-vb\" name=\"ContainerExmpl#1\">\t&#39;The following example demonstrates the implementation of \n\t&#39;ISite, IComponent, and IContainer for use in a simple library container.\n\t&#39;\n\t&#39;This example imports the System, System.ComponentModel, and System.Collections\n\t&#39;namespaces.\n\n\t&#39;This code segment implements the ISite and IComponent interfaces.\n\t&#39;The implementation of the IContainer interface can be seen in the documentation \n\t&#39;of IContainer.\n\n\t&#39;Implement the ISite interface.\n\n\t&#39;The ISBNSite class represents the ISBN name of the book component\n\t\nClass ISBNSite\n    Implements ISite\n    Private m_curComponent As IComponent\n    Private m_curContainer As IContainer\n    Private m_bDesignMode As Boolean\n    Private m_ISBNCmpName As String\n\n    Public Sub New(ByVal actvCntr As IContainer, ByVal prntCmpnt As IComponent)\n        m_curComponent = prntCmpnt\n        m_curContainer = actvCntr\n        m_bDesignMode = False\n        m_ISBNCmpName = Nothing\n    End Sub\n\n    &#39;Support the ISite interface.\n    Public ReadOnly Property Component() As IComponent Implements ISite.Component\n        Get\n            Return m_curComponent\n        End Get\n    End Property\n\n    Public ReadOnly Property Container() As IContainer Implements ISite.Container\n        Get\n            Return m_curContainer\n        End Get\n    End Property\n\n    Public ReadOnly Property DesignMode() As Boolean Implements ISite.DesignMode\n        Get\n            Return m_bDesignMode\n        End Get\n    End Property\n\n    Public Property Name() As String Implements ISite.Name\n        Get\n            Return m_ISBNCmpName\n        End Get\n        Set(ByVal Value As String)\n            m_ISBNCmpName = Value\n        End Set\n    End Property\n\n    &#39;Support the IServiceProvider interface.\n    Public Function GetService(ByVal serviceType As Type) As Object Implements IServiceProvider.GetService\n        &#39;This example does not use any service object.\n        GetService = Nothing\n    End Function\nEnd Class\n\n&#39;The BookComponent class represents the book component of the library container.\nClass BookComponent\n    Implements IComponent\n    Public Event Disposed As EventHandler Implements IComponent.Disposed\n    Private m_curISBNSite As ISite\n    Private m_bookTitle As String\n    Private m_bookAuthor As String\n\n    Public Sub New(ByVal Title As String, ByVal Author As String)\n        m_curISBNSite = Nothing\n        m_bookTitle = Title\n        m_bookAuthor = Author\n    End Sub\n\n    Public ReadOnly Property Title() As String\n        Get\n            Return m_bookTitle\n        End Get\n    End Property\n\n    Public ReadOnly Property Author() As String\n        Get\n            Return m_bookAuthor\n        End Get\n    End Property\n\n    Public Sub Dispose() Implements IDisposable.Dispose\n        &#39;There is nothing to clean.\n        RaiseEvent Disposed(Me, EventArgs.Empty)\n    End Sub\n\n    Public Property Site() As ISite Implements IComponent.Site\n        Get\n            Return m_curISBNSite\n        End Get\n        Set(ByVal Value As ISite)\n            m_curISBNSite = Value\n        End Set\n    End Property\n\n    Public Overloads Function Equals(ByVal cmp As Object) As Boolean\n        Dim cmpObj As BookComponent = CType(cmp, BookComponent)\n        If (Me.Title.Equals(cmpObj.Title) And Me.Author.Equals(cmpObj.Author)) Then\n            Equals = True\n        Else\n            Equals = False\n        End If\n    End Function\n\n    Public Overrides Function GetHashCode() As Integer\n        GetHashCode = MyBase.GetHashCode()\n    End Function\n\nEnd Class\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p><a class=\"xref\" href=\"system.componentmodel.component\" data-linktype=\"relative-path\">Component</a> is the default implementation of IComponent and serves as the base class for all components in the common language runtime.  </p>\n<p> You can contain components in a container. In this context, containment refers to logical containment, not visual containment. You can use components and containers in a variety of scenarios, both visual and non visual.  </p>\n<p> <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">System.Windows.Forms.Control</a> inherits from <a class=\"xref\" href=\"system.componentmodel.component\" data-linktype=\"relative-path\">Component</a>, the default implementation of IComponent.  </p>\n<p> A component interacts with its container primarily through a container-provided <a class=\"xref\" href=\"system.componentmodel.isite\" data-linktype=\"relative-path\">ISite</a>, which is a repository of container-specific per-component information.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_IComponent_Site\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Site</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the <a class=\"xref\" href=\"system.componentmodel.isite\" data-linktype=\"relative-path\">ISite</a> associated with the <a class=\"xref\" href=\"system.componentmodel.icomponent\" data-linktype=\"relative-path\">IComponent</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.ComponentModel.ISite Site { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.isite\" data-linktype=\"relative-path\">ISite</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.componentmodel.isite\" data-linktype=\"relative-path\">ISite</a> object associated with the component; or <code>null</code>, if the component does not have a site.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Sites can also serve as a repository for container-specific, per-component information, such as the component name.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Events\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_IComponent_Disposed\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Disposed</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Represents the method that handles the Disposed event of a component.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event EventHandler Disposed;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When you create a Disposed delegate, you identify the method that handles the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event handler delegates, see <a href=\"http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115\" data-linktype=\"external\">NIB: Events and Delegates</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.IComponent.yml\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.IComponent\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.IComponent.Disposed\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.IComponent.add_Disposed\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.IComponent.remove_Disposed\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.IComponent.Site\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-24 01:41 AM\">\r\n<meta name=\"document_id\" content=\"a77d5698-83f4-a52c-e5ad-11a674e9b3b9\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides functionality required by all components.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.componentmodel/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.ComponentModel.IComponent\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.IComponent.yml","open_to_public_contributors":false,"api_name":["System.ComponentModel.IComponent","System.ComponentModel.IComponent.Disposed","System.ComponentModel.IComponent.add_Disposed","System.ComponentModel.IComponent.remove_Disposed","System.ComponentModel.IComponent.Site"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.ComponentModel.IComponent","System::ComponentModel::IComponent","System.ComponentModel.IComponent.Disposed","System::ComponentModel::IComponent::Disposed","System.ComponentModel.IComponent.Site","System::ComponentModel::IComponent::Site"],"dev_langs":["csharp"],"updated_at":"2017-03-24 01:41 AM","document_id":"a77d5698-83f4-a52c-e5ad-11a674e9b3b9","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/IComponent.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IComponent interface | Microsoft Docs","_op_ogTitle":"IComponent interface","description":"Provides functionality required by all components.\n","toc_asset_id":"api/_splitted/System.ComponentModel/toc.json","toc_rel":"_splitted/System.ComponentModel/toc.json","source_url":"","ms.assetid":"System.ComponentModel.IComponent","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.icomponent","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.icomponent","fileRelativePath":"api/System.ComponentModel.IComponent.html"},"themesRelativePathToOutputRoot":"_themes/"}