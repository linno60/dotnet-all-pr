{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">DrawToolTipEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that will handle the <a class=\"xref\" href=\"system.windows.forms.tooltip#System_Windows_Forms_ToolTip_Draw\" data-linktype=\"relative-path\">Draw</a> event of a <a class=\"xref\" href=\"system.windows.forms.tooltip\" data-linktype=\"relative-path\">ToolTip</a>.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void DrawToolTipEventHandler(object sender, DrawToolTipEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">DrawToolTipEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates how to custom draw the <a class=\"xref\" href=\"system.windows.forms.tooltip\" data-linktype=\"relative-path\">ToolTip</a>. The example creates a <a class=\"xref\" href=\"system.windows.forms.tooltip\" data-linktype=\"relative-path\">ToolTip</a> and associates it to three <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> controls located on the <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a>. The example sets the <a class=\"xref\" href=\"system.windows.forms.tooltip#System_Windows_Forms_ToolTip_OwnerDraw_\" data-linktype=\"relative-path\">OwnerDraw</a> property to true and handles the <a class=\"xref\" href=\"system.windows.forms.tooltip#System_Windows_Forms_ToolTip_Draw\" data-linktype=\"relative-path\">Draw</a> event. In the <a class=\"xref\" href=\"system.windows.forms.tooltip#System_Windows_Forms_ToolTip_Draw\" data-linktype=\"relative-path\">Draw</a> event handler, the <a class=\"xref\" href=\"system.windows.forms.tooltip\" data-linktype=\"relative-path\">ToolTip</a> is custom drawn differently depending upon what button the <a class=\"xref\" href=\"system.windows.forms.tooltip\" data-linktype=\"relative-path\">ToolTip</a> is being displayed for as indicated by the <a class=\"xref\" href=\"system.windows.forms.drawtooltipeventargs#System_Windows_Forms_DrawToolTipEventArgs_AssociatedControl_\" data-linktype=\"relative-path\">AssociatedControl</a> property.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.ToolTip.OwnerDraw#1\">#using &lt;System.dll&gt;\n#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::Drawing;\nusing namespace System::Windows::Forms;\nusing namespace System::Windows::Forms::VisualStyles;\n\n// Form for the ToolTip example.\npublic ref class ToolTipExampleForm: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::ToolTip^ toolTip1;\n   System::Windows::Forms::Button^ button1;\n   System::Windows::Forms::Button^ button2;\n   System::Windows::Forms::Button^ button3;\n\npublic:\n   ToolTipExampleForm()\n   {\n      // Create the ToolTip and set initial values.\n      this-&gt;toolTip1 = gcnew System::Windows::Forms::ToolTip;\n      this-&gt;toolTip1-&gt;AutoPopDelay = 5000;\n      this-&gt;toolTip1-&gt;InitialDelay = 500;\n      this-&gt;toolTip1-&gt;OwnerDraw = true;\n      this-&gt;toolTip1-&gt;ReshowDelay = 10;\n      this-&gt;toolTip1-&gt;Draw += gcnew DrawToolTipEventHandler( this, &amp;ToolTipExampleForm::toolTip1_Draw );\n      \n      // Create button1 and set initial values.\n      this-&gt;button1 = gcnew System::Windows::Forms::Button;\n      this-&gt;button1-&gt;Location = System::Drawing::Point( 8, 8 );\n      this-&gt;button1-&gt;Text = &quot;Button 1&quot;;\n      this-&gt;toolTip1-&gt;SetToolTip( this-&gt;button1, &quot;Button1 tip text&quot; );\n      \n      // Create button2 and set initial values.\n      this-&gt;button2 = gcnew System::Windows::Forms::Button;\n      this-&gt;button2-&gt;Location = System::Drawing::Point( 8, 32 );\n      this-&gt;button2-&gt;Text = &quot;Button 2&quot;;\n      this-&gt;toolTip1-&gt;SetToolTip( this-&gt;button2, &quot;Button2 tip text&quot; );\n      \n      // Create button3 and set initial values.\n      this-&gt;button3 = gcnew System::Windows::Forms::Button;\n      this-&gt;button3-&gt;Location = System::Drawing::Point( 8, 56 );\n      this-&gt;button3-&gt;Text = &quot;Button 3&quot;;\n      this-&gt;toolTip1-&gt;SetToolTip( this-&gt;button3, &quot;Button3 tip text&quot; );\n      \n      // Set up the Form.\n      array&lt;Control^&gt;^temp0 = {this-&gt;button1,this-&gt;button2,this-&gt;button3};\n      this-&gt;Controls-&gt;AddRange( temp0 );\n      this-&gt;Text = &quot;owner drawn ToolTip example&quot;;\n   }\n\nprotected:\n\n   ~ToolTipExampleForm()\n   {\n      if ( toolTip1 != nullptr )\n      {\n         delete toolTip1;\n      }\n   }\n\n   // Handles drawing the ToolTip.\nprivate:\n   void toolTip1_Draw( System::Object^ /*sender*/, System::Windows::Forms::DrawToolTipEventArgs^ e )\n   {\n      // Draw the ToolTip differently depending on which \n      // control this ToolTip is for.\n      // Draw a custom 3D border if the ToolTip is for button1.\n      if ( e-&gt;AssociatedControl == button1 )\n      {\n         // Draw the standard background.\n         e-&gt;DrawBackground();\n         \n         // Draw the custom border to appear 3-dimensional.\n         array&lt;Point&gt;^ temp1 = {Point(0,e-&gt;Bounds.Height - 1),Point(0,0),Point(e-&gt;Bounds.Width - 1,0)};\n         e-&gt;Graphics-&gt;DrawLines( SystemPens::ControlLightLight, temp1 );\n         array&lt;Point&gt;^ temp2 = {Point(0,e-&gt;Bounds.Height - 1),Point(e-&gt;Bounds.Width - 1,e-&gt;Bounds.Height - 1),Point(e-&gt;Bounds.Width - 1,0)};\n         e-&gt;Graphics-&gt;DrawLines( SystemPens::ControlDarkDark, temp2 );\n         \n         // Specify custom text formatting flags.\n         TextFormatFlags sf = static_cast&lt;TextFormatFlags&gt;(TextFormatFlags::VerticalCenter | TextFormatFlags::HorizontalCenter | TextFormatFlags::NoFullWidthCharacterBreak);\n         \n         // Draw the standard text with customized formatting options.\n         e-&gt;DrawText( sf );\n      }\n      // Draw a custom background and text if the ToolTip is for button2.\n      else\n      \n      // Draw a custom background and text if the ToolTip is for button2.\n      if ( e-&gt;AssociatedControl == button2 )\n      {\n         // Draw the custom background.\n         e-&gt;Graphics-&gt;FillRectangle( SystemBrushes::ActiveCaption, e-&gt;Bounds );\n         \n         // Draw the standard border.\n         e-&gt;DrawBorder();\n         \n         // Draw the custom text.\n         // The using block will dispose the StringFormat automatically.\n         StringFormat^ sf = gcnew StringFormat;\n         try\n         {\n            sf-&gt;Alignment = StringAlignment::Center;\n            sf-&gt;LineAlignment = StringAlignment::Center;\n            sf-&gt;HotkeyPrefix = System::Drawing::Text::HotkeyPrefix::None;\n            sf-&gt;FormatFlags = StringFormatFlags::NoWrap;\n            System::Drawing::Font^ f = gcnew System::Drawing::Font( &quot;Tahoma&quot;,9 );\n            try\n            {\n               e-&gt;Graphics-&gt;DrawString( e-&gt;ToolTipText, f, SystemBrushes::ActiveCaptionText, e-&gt;Bounds, sf );\n            }\n            finally\n            {\n               if ( f )\n                  delete safe_cast&lt;IDisposable^&gt;(f);\n            }\n\n         }\n         finally\n         {\n            if ( sf )\n               delete safe_cast&lt;IDisposable^&gt;(sf);\n         }\n      }\n      // Draw the ToolTip using default values if the ToolTip is for button3.\n      else if ( e-&gt;AssociatedControl == button3 )\n      {\n         e-&gt;DrawBackground();\n         e-&gt;DrawBorder();\n         e-&gt;DrawText();\n      }\n   }\n};\n\n// The main entry point for the application.\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew ToolTipExampleForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.ToolTip.OwnerDraw#1\">using System;\nusing System.Drawing;\nusing System.Windows.Forms;\nusing System.Windows.Forms.VisualStyles;\n\nnamespace ToolTipExample\n{\n    // Form for the ToolTip example.\n    public class ToolTipExampleForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.ToolTip toolTip1;\n        private System.Windows.Forms.Button button1;\n        private System.Windows.Forms.Button button2;\n        private System.Windows.Forms.Button button3;\n\n        public ToolTipExampleForm()\n        {\n            // Create the ToolTip and set initial values.\n            this.toolTip1 = new System.Windows.Forms.ToolTip();\n            this.toolTip1.AutoPopDelay = 5000;\n            this.toolTip1.InitialDelay = 500;\n            this.toolTip1.OwnerDraw = true;\n            this.toolTip1.ReshowDelay = 10;\n            this.toolTip1.Draw += new DrawToolTipEventHandler(this.toolTip1_Draw);\n            this.toolTip1.Popup += new PopupEventHandler(toolTip1_Popup);\n\n            // Create button1 and set initial values.\n            this.button1 = new System.Windows.Forms.Button();\n            this.button1.Location = new System.Drawing.Point(8, 8);\n            this.button1.Text = &quot;Button 1&quot;;\n            this.toolTip1.SetToolTip(this.button1, &quot;Button1 tip text&quot;);\n\n            // Create button2 and set initial values.\n            this.button2 = new System.Windows.Forms.Button();\n            this.button2.Location = new System.Drawing.Point(8, 32);\n            this.button2.Text = &quot;Button 2&quot;;\n            this.toolTip1.SetToolTip(this.button2, &quot;Button2 tip text&quot;);\n\n            // Create button3 and set initial values.\n            this.button3 = new System.Windows.Forms.Button();\n            this.button3.Location = new System.Drawing.Point(8, 56);\n            this.button3.Text = &quot;Button 3&quot;;\n            this.toolTip1.SetToolTip(this.button3, &quot;Button3 tip text&quot;);\n\n            // Set up the Form.\n            this.Controls.AddRange(new Control[] {\n                this.button1, this.button2, this.button3\n            });\n            this.Text = &quot;owner drawn ToolTip example&quot;;\n        }\n\n        // Clean up any resources being used.        \n        protected override void Dispose(bool disposing)\n        {\n            if (disposing)\n            {\n                toolTip1.Dispose();\n            }\n\n            base.Dispose(disposing);\n        }\n\n        // The main entry point for the application.\n        [STAThread]\n        static void Main()\n        {\n            Application.Run(new ToolTipExampleForm());\n        }\n\n        // Determines the correct size for the button2 ToolTip.\n        private void toolTip1_Popup(object sender, PopupEventArgs e)\n        {\n            if (e.AssociatedControl == button2)\n            {\n                using (Font f = new Font(&quot;Tahoma&quot;, 9))\n                {\n                    e.ToolTipSize = TextRenderer.MeasureText(\n                        toolTip1.GetToolTip(e.AssociatedControl), f);\n                }\n            }\n        }\n\n        // Handles drawing the ToolTip.\n        private void toolTip1_Draw(System.Object sender, \n            System.Windows.Forms.DrawToolTipEventArgs e)\n        {\n            // Draw the ToolTip differently depending on which \n            // control this ToolTip is for.\n            // Draw a custom 3D border if the ToolTip is for button1.\n            if (e.AssociatedControl == button1)\n            {\n                // Draw the standard background.\n                e.DrawBackground();\n\n                // Draw the custom border to appear 3-dimensional.\n                e.Graphics.DrawLines(SystemPens.ControlLightLight, new Point[] {\n                    new Point (0, e.Bounds.Height - 1), \n                    new Point (0, 0), \n                    new Point (e.Bounds.Width - 1, 0)\n                });\n                e.Graphics.DrawLines(SystemPens.ControlDarkDark, new Point[] {\n                    new Point (0, e.Bounds.Height - 1), \n                    new Point (e.Bounds.Width - 1, e.Bounds.Height - 1), \n                    new Point (e.Bounds.Width - 1, 0)\n                });\n\n                // Specify custom text formatting flags.\n                TextFormatFlags sf = TextFormatFlags.VerticalCenter |\n                                     TextFormatFlags.HorizontalCenter |\n                                     TextFormatFlags.NoFullWidthCharacterBreak;\n\n                // Draw the standard text with customized formatting options.\n                e.DrawText(sf);\n            }\n            // Draw a custom background and text if the ToolTip is for button2.\n            else if (e.AssociatedControl == button2)\n            {\n                // Draw the custom background.\n                e.Graphics.FillRectangle(SystemBrushes.ActiveCaption, e.Bounds);\n\n                // Draw the standard border.\n                e.DrawBorder();\n\n                // Draw the custom text.\n                // The using block will dispose the StringFormat automatically.\n                using (StringFormat sf = new StringFormat())\n                {\n                    sf.Alignment = StringAlignment.Center;\n                    sf.LineAlignment = StringAlignment.Center;\n                    sf.HotkeyPrefix = System.Drawing.Text.HotkeyPrefix.None;\n                    sf.FormatFlags = StringFormatFlags.NoWrap;\n                    using (Font f = new Font(&quot;Tahoma&quot;, 9))\n                    {\n                        e.Graphics.DrawString(e.ToolTipText, f, \n                            SystemBrushes.ActiveCaptionText, e.Bounds, sf);\n                    }\n                }\n            }\n            // Draw the ToolTip using default values if the ToolTip is for button3.\n            else if (e.AssociatedControl == button3)\n            {\n                e.DrawBackground();\n                e.DrawBorder();\n                e.DrawText();\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.ToolTip.OwnerDraw#1\">Imports System\nImports System.Drawing\nImports System.Windows.Forms\nImports System.Windows.Forms.VisualStyles\n\nPublic Module ToolTipExampleApp\n    &#39; The main entry point for the application.\n    &lt;STAThread()&gt; _\n    Sub Main()\n        Application.Run(New ToolTipExampleForm)\n    End Sub\nEnd Module\n\n&#39; Form for the ToolTip example.\nPublic Class ToolTipExampleForm\n    Inherits System.Windows.Forms.Form\n\n    Private WithEvents toolTip1 As System.Windows.Forms.ToolTip\n    Private WithEvents button1 As System.Windows.Forms.Button\n    Private WithEvents button2 As System.Windows.Forms.Button\n    Private WithEvents button3 As System.Windows.Forms.Button\n\n    Public Sub New()\n        &#39; Create the ToolTip and set initial values.\n        Me.toolTip1 = New System.Windows.Forms.ToolTip\n        Me.toolTip1.AutoPopDelay = 5000\n        Me.toolTip1.InitialDelay = 500\n        Me.toolTip1.OwnerDraw = True\n        Me.toolTip1.ReshowDelay = 10\n\n        &#39; Create button1 and set initial values.\n        Me.button1 = New System.Windows.Forms.Button\n        Me.button1.Location = New System.Drawing.Point(8, 8)\n        Me.button1.Text = &quot;Button 1&quot;\n        Me.toolTip1.SetToolTip(Me.button1, &quot;Button1 tip text&quot;)\n\n        &#39; Create button2 and set initial values.\n        Me.button2 = New System.Windows.Forms.Button\n        Me.button2.Location = New System.Drawing.Point(8, 32)\n        Me.button2.Text = &quot;Button 2&quot;\n        Me.toolTip1.SetToolTip(Me.button2, &quot;Button2 tip text&quot;)\n\n        &#39; Create button3 and set initial values.\n        Me.button3 = New System.Windows.Forms.Button\n        Me.button3.Location = New System.Drawing.Point(8, 56)\n        Me.button3.Text = &quot;Button 3&quot;\n        Me.toolTip1.SetToolTip(Me.button3, &quot;Button3 tip text&quot;)\n\n        &#39; Set up the Form.\n        Me.Controls.AddRange(New Control() {Me.button1, _\n                                            Me.button2, _\n                                            Me.button3})\n        Me.Text = &quot;owner drawn ToolTip example&quot;\n    End Sub\n\n    &#39; Clean up any resources being used.        \n    Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)\n        If (disposing) Then\n            toolTip1.Dispose()\n        End If\n\n        MyBase.Dispose(disposing)\n    End Sub\n\n    &#39; Determines the correct size for the button2 ToolTip.\n    Private Sub toolTip1_Popup(ByVal sender As System.Object, _\n        ByVal e As PopupEventArgs) Handles toolTip1.Popup\n\n        If e.AssociatedControl Is button2 Then\n\n            Dim f As New Font(&quot;Tahoma&quot;, 9)\n            Try\n                e.ToolTipSize = TextRenderer.MeasureText( _\n                    toolTip1.GetToolTip(e.AssociatedControl), f)\n            Finally\n                f.Dispose()\n            End Try\n\n        End If\n    End Sub\n\n    &#39; Handles drawing the ToolTip.\n    Private Sub toolTip1_Draw(ByVal sender As System.Object, _\n        ByVal e As DrawToolTipEventArgs) Handles toolTip1.Draw\n        &#39; Draw the ToolTip differently depending on which \n        &#39; control this ToolTip is for.\n\n        &#39; Draw a custom 3D border if the ToolTip is for button1.\n        If (e.AssociatedControl Is button1) Then\n            &#39; Draw the standard background.\n            e.DrawBackground()\n\n            &#39; Draw the custom border to appear 3-dimensional.\n            e.Graphics.DrawLines( _\n                SystemPens.ControlLightLight, New Point() { _\n                New Point(0, e.Bounds.Height - 1), _\n                New Point(0, 0), _\n                New Point(e.Bounds.Width - 1, 0)})\n            e.Graphics.DrawLines( _\n                SystemPens.ControlDarkDark, New Point() { _\n                New Point(0, e.Bounds.Height - 1), _\n                New Point(e.Bounds.Width - 1, e.Bounds.Height - 1), _\n                New Point(e.Bounds.Width - 1, 0)})\n\n            &#39; Specify custom text formatting flags.\n            Dim sf As TextFormatFlags = TextFormatFlags.VerticalCenter Or _\n                                 TextFormatFlags.HorizontalCenter Or _\n                                 TextFormatFlags.NoFullWidthCharacterBreak\n\n            &#39; Draw standard text with customized formatting options.\n            e.DrawText(sf)\n        ElseIf (e.AssociatedControl Is button2) Then\n            &#39; Draw a custom background and text if the ToolTip is for button2.\n\n            &#39; Draw the custom background.\n            e.Graphics.FillRectangle(SystemBrushes.ActiveCaption, e.Bounds)\n\n            &#39; Draw the standard border.\n            e.DrawBorder()\n\n            &#39; Draw the custom text.\n            Dim sf As StringFormat = New StringFormat\n            Try\n                sf.Alignment = StringAlignment.Center\n                sf.LineAlignment = StringAlignment.Center\n                sf.HotkeyPrefix = System.Drawing.Text.HotkeyPrefix.None\n                sf.FormatFlags = StringFormatFlags.NoWrap\n\n                Dim f As Font = New Font(&quot;Tahoma&quot;, 9)\n                Try\n                    e.Graphics.DrawString(e.ToolTipText, f, _\n                        SystemBrushes.ActiveCaptionText, _\n                        RectangleF.op_Implicit(e.Bounds), sf)\n                Finally\n                    f.Dispose()\n                End Try\n            Finally\n                sf.Dispose()\n            End Try\n        ElseIf (e.AssociatedControl Is button3) Then\n            &#39; Draw the ToolTip using default values if the ToolTip is for button3.\n            e.DrawBackground()\n            e.DrawBorder()\n            e.DrawText()\n        End If\n    End Sub\nEnd Class\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The <a class=\"xref\" href=\"system.windows.forms.tooltip#System_Windows_Forms_ToolTip_Draw\" data-linktype=\"relative-path\">System.Windows.Forms.ToolTip.Draw</a> event is raised by the <a class=\"xref\" href=\"system.windows.forms.tooltip\" data-linktype=\"relative-path\">ToolTip</a> class when the <a class=\"xref\" href=\"system.windows.forms.tooltip\" data-linktype=\"relative-path\">ToolTip</a> is drawn and the <a class=\"xref\" href=\"system.windows.forms.tooltip#System_Windows_Forms_ToolTip_OwnerDraw_\" data-linktype=\"relative-path\">OwnerDraw</a> property value is <code>true</code>. The <a class=\"xref\" href=\"system.windows.forms.drawtooltipeventargs\" data-linktype=\"relative-path\">DrawToolTipEventArgs</a> class contains all the information needed to paint the <a class=\"xref\" href=\"system.windows.forms.tooltip\" data-linktype=\"relative-path\">ToolTip</a>, including the ToolTip text, the <a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a>, and the <a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a> object on which the drawing should be done. To customize the look of the ToolTip, use the <a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a> to determine the bounds of the ToolTip, and the <a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a> object to perform your customized drawing. You can increase the bounds of the <a class=\"xref\" href=\"system.windows.forms.tooltip\" data-linktype=\"relative-path\">ToolTip</a> before it is shown by handling the <a class=\"xref\" href=\"system.windows.forms.tooltip#System_Windows_Forms_ToolTip_Popup\" data-linktype=\"relative-path\">Popup</a> event.  </p>\n<p> When you create a DrawToolTipEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event handler delegates, see <a href=\"../topic/handling%20and%20raising%20events\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.DrawToolTipEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DrawToolTipEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DrawToolTipEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DrawToolTipEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DrawToolTipEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DrawToolTipEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:59 PM\">\r\n<meta name=\"document_id\" content=\"beb506e5-8b07-d510-caf8-69e947538cbb\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that will handle the  event of a .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.windows.forms/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.DrawToolTipEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","uhfHeaderId":"MSDocsHeader-DotNet","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.DrawToolTipEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Windows.Forms.DrawToolTipEventHandler","System.Windows.Forms.DrawToolTipEventHandler..ctor","System.Windows.Forms.DrawToolTipEventHandler.Invoke","System.Windows.Forms.DrawToolTipEventHandler.BeginInvoke","System.Windows.Forms.DrawToolTipEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.DrawToolTipEventHandler","System::Windows::Forms::DrawToolTipEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-04-01 05:59 PM","document_id":"beb506e5-8b07-d510-caf8-69e947538cbb","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Windows.Forms/DrawToolTipEventHandler.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DrawToolTipEventHandler delegate | Microsoft Docs","_op_ogTitle":"DrawToolTipEventHandler delegate","description":"Represents the method that will handle the  event of a .\n","toc_asset_id":"api/_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.DrawToolTipEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.drawtooltipeventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.drawtooltipeventhandler","fileRelativePath":"api/System.Windows.Forms.DrawToolTipEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}