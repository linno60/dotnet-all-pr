{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">BindingFlags</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies flags that control binding and the way in which the search for members and types is conducted by reflection.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Flags]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic enum BindingFlags</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">BindingFlags</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example demonstrates many of the binding flags.  </p>\n<pre><code class=\"lang-vb\" name=\"BindingFlags#1\">Imports System\nImports System.Reflection\nImports System.IO\n\nClass Invoke\n\n    Public Shared Sub Main()\n        &#39; BindingFlags.InvokeMethod\n        &#39; Call a static method.\n        Dim t As Type = GetType(TestClass)\n\n        Console.WriteLine()\n        Console.WriteLine(&quot;Invoking a static method.&quot;)\n        Console.WriteLine(&quot;-------------------------&quot;)\n        t.InvokeMember(&quot;SayHello&quot;, BindingFlags.InvokeMethod Or BindingFlags.Public _\n            Or BindingFlags.Static, Nothing, Nothing, New Object() {})\n\n        &#39; BindingFlags.InvokeMethod\n        &#39; Call an instance method.\n        Dim c As New TestClass()\n        Console.WriteLine()\n        Console.WriteLine(&quot;Invoking an instance method.&quot;)\n        Console.WriteLine(&quot;----------------------------&quot;)\n        c.GetType().InvokeMember(&quot;AddUp&quot;, BindingFlags.InvokeMethod, Nothing, c, New Object() {})\n        c.GetType().InvokeMember(&quot;AddUp&quot;, BindingFlags.InvokeMethod, Nothing, c, New Object() {})\n\n        &#39; BindingFlags.InvokeMethod\n        &#39; Call a method with parameters.\n        Dim args() As Object = {100.09, 184.45}\n        Dim result As Object\n        Console.WriteLine()\n        Console.WriteLine(&quot;Invoking a method with parameters.&quot;)\n        Console.WriteLine(&quot;---------------------------------&quot;)\n        result = t.InvokeMember(&quot;ComputeSum&quot;, BindingFlags.InvokeMethod, Nothing, Nothing, args)\n        Console.WriteLine(&quot;{0} + {1} = {2}&quot;, args(0), args(1), result)\n\n        &#39; BindingFlags.GetField, SetField\n        Console.WriteLine()\n        Console.WriteLine(&quot;Invoking a field (getting and setting.)&quot;)\n        Console.WriteLine(&quot;--------------------------------------&quot;)\n        &#39; Get a field value.\n        result = t.InvokeMember(&quot;Name&quot;, BindingFlags.GetField, Nothing, c, New Object() {})\n        Console.WriteLine(&quot;Name == {0}&quot;, result)\n        &#39; Set a field.\n        t.InvokeMember(&quot;Name&quot;, BindingFlags.SetField, Nothing, c, New Object() {&quot;NewName&quot;})\n        result = t.InvokeMember(&quot;Name&quot;, BindingFlags.GetField, Nothing, c, New Object() {})\n        Console.WriteLine(&quot;Name == {0}&quot;, result)\n\n        Console.WriteLine()\n        Console.WriteLine(&quot;Invoking an indexed property (getting and setting.)&quot;)\n        Console.WriteLine(&quot;--------------------------------------------------&quot;)\n        &#39; BindingFlags.GetProperty \n        &#39; Get an indexed property value.\n        Dim index As Integer = 3\n        result = t.InvokeMember(&quot;Item&quot;, BindingFlags.GetProperty, Nothing, c, New Object() {index})\n        Console.WriteLine(&quot;Item[{0}] == {1}&quot;, index, result)\n        &#39; BindingFlags.SetProperty\n        &#39; Set an indexed property value.\n        index = 3\n        t.InvokeMember(&quot;Item&quot;, BindingFlags.SetProperty, Nothing, c, New Object() {index, &quot;NewValue&quot;})\n        result = t.InvokeMember(&quot;Item&quot;, BindingFlags.GetProperty, Nothing, c, New Object() {index})\n        Console.WriteLine(&quot;Item[{0}] == {1}&quot;, index, result)\n\n        Console.WriteLine()\n        Console.WriteLine(&quot;Getting a field or property.&quot;)\n        Console.WriteLine(&quot;----------------------------&quot;)\n        &#39; BindingFlags.GetField\n        &#39; Get a field or property.\n        result = t.InvokeMember(&quot;Name&quot;, BindingFlags.GetField Or BindingFlags.GetProperty, Nothing, _\n            c, New Object() {})\n        Console.WriteLine(&quot;Name == {0}&quot;, result)\n        &#39; BindingFlags.GetProperty\n        result = t.InvokeMember(&quot;Value&quot;, BindingFlags.GetField Or BindingFlags.GetProperty, Nothing, _\n            c, New Object() {})\n        Console.WriteLine(&quot;Value == {0}&quot;, result)\n\n        Console.WriteLine()\n        Console.WriteLine(&quot;Invoking a method with named parameters.&quot;)\n        Console.WriteLine(&quot;---------------------------------------&quot;)\n        &#39; BindingFlags.InvokeMethod\n        &#39; Call a method using named parameters.\n        Dim argValues() As Object = {&quot;Mouse&quot;, &quot;Micky&quot;}\n        Dim argNames() As [String] = {&quot;lastName&quot;, &quot;firstName&quot;}\n        t.InvokeMember(&quot;PrintName&quot;, BindingFlags.InvokeMethod, Nothing, Nothing, argValues, Nothing, _\n            Nothing, argNames)\n\n        Console.WriteLine()\n        Console.WriteLine(&quot;Invoking a default member of a type.&quot;)\n        Console.WriteLine(&quot;------------------------------------&quot;)\n        &#39; BindingFlags.Default\n        &#39; Call the default member of a type.\n        Dim t3 As Type = GetType(TestClass2)\n        t3.InvokeMember(&quot;&quot;, BindingFlags.InvokeMethod Or BindingFlags.Default, Nothing, _\n            New TestClass2(), New Object() {})\n\n        Console.WriteLine()\n        Console.WriteLine(&quot;Invoking a method with ByRef parameters.&quot;)\n        Console.WriteLine(&quot;----------------------------------------&quot;)\n        &#39; BindingFlags.Static, NonPublic, and Public\n        &#39; Invoking a member by reference.\n        Dim m As MethodInfo = t.GetMethod(&quot;Swap&quot;)\n        args = New Object(1) {}\n        args(0) = 1\n        args(1) = 2\n        m.Invoke(New TestClass(), args)\n        Console.WriteLine(&quot;{0}, {1}&quot;, args(0), args(1))\n\n        &#39; BindingFlags.CreateInstance\n        &#39; Creating an instance.\n        Console.WriteLine()\n        Console.WriteLine(&quot;Creating an instance with parameterless constructor.&quot;)\n        Console.WriteLine(&quot;----------------------------------------------------&quot;)\n        Dim obj As Object = GetType(TestClass).InvokeMember(&quot;TestClass&quot;, BindingFlags.CreateInstance, _\n            Nothing, Nothing, New Object() {})\n        Console.WriteLine(&quot;Instance of {0} created.&quot;, obj.GetType().Name)\n\n        Console.WriteLine()\n        Console.WriteLine(&quot;Creating an instance with a constructor that has parameters.&quot;)\n        Console.WriteLine(&quot;------------------------------------------------------------&quot;)\n        obj = GetType(TestClass).InvokeMember(&quot;TestClass&quot;, BindingFlags.CreateInstance, Nothing, _\n            Nothing, New Object() { &quot;Hello, World!&quot; })\n        Console.WriteLine(&quot;Instance of {0} created with initial value &#39;{1}&#39;.&quot;, obj.GetType().Name, _\n            obj.GetType().InvokeMember(&quot;Name&quot;, BindingFlags.GetField, Nothing, obj, Nothing))\n\n        &#39; BindingFlags.DeclaredOnly\n        Console.WriteLine()\n        Console.WriteLine(&quot;DeclaredOnly instance members.&quot;)\n        Console.WriteLine(&quot;------------------------------&quot;)\n        Dim memInfo As System.Reflection.MemberInfo() = t.GetMembers(BindingFlags.DeclaredOnly Or _\n            BindingFlags.Public Or BindingFlags.Instance)\n        Dim i As Integer\n        For i = 0 To memInfo.Length - 1\n            Console.WriteLine(memInfo(i).Name)\n        Next i\n\n        &#39; BindingFlags.IgnoreCase\n        Console.WriteLine()\n        Console.WriteLine(&quot;Using IgnoreCase and invoking the PrintName method.&quot;)\n        Console.WriteLine(&quot;---------------------------------------------------&quot;)\n        t.InvokeMember(&quot;printname&quot;, BindingFlags.IgnoreCase Or BindingFlags.Public Or _\n            BindingFlags.Static Or BindingFlags.InvokeMethod, Nothing, Nothing, _\n            New Object() {&quot;Brad&quot;, &quot;Smith&quot;})\n\n        &#39; BindingFlags.FlattenHierarchy\n        Console.WriteLine()\n        Console.WriteLine(&quot;Using FlattenHierarchy to get inherited static protected and public members.&quot; )\n        Console.WriteLine(&quot;----------------------------------------------------------------------------&quot;)\n        Dim finfos() As FieldInfo = GetType(MostDerived).GetFields(BindingFlags.NonPublic Or _\n              BindingFlags.Public Or BindingFlags.Static Or BindingFlags.FlattenHierarchy)\n        For Each finfo As FieldInfo In finfos\n            Console.WriteLine(&quot;{0} defined in {1}.&quot;, finfo.Name, finfo.DeclaringType.Name)\n        Next\n\n        Console.WriteLine()\n        Console.WriteLine(&quot;Without FlattenHierarchy.&quot; )\n        Console.WriteLine(&quot;-------------------------&quot;)\n        finfos = GetType(MostDerived).GetFields(BindingFlags.NonPublic Or BindingFlags.Public Or _\n              BindingFlags.Static)\n        For Each finfo As FieldInfo In finfos\n            Console.WriteLine(&quot;{0} defined in {1}.&quot;, finfo.Name, finfo.DeclaringType.Name)\n        Next\n    End Sub\nEnd Class\n\nPublic Class TestClass\n    Public Name As String\n    Private values() As [Object] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}\n\n    Default Public Property Item(ByVal index As Integer) As [Object]\n        Get\n            Return values(index)\n        End Get\n        Set(ByVal Value As [Object])\n            values(index) = Value\n        End Set\n    End Property\n\n    Public ReadOnly Property Value() As [Object]\n        Get\n            Return &quot;the value&quot;\n        End Get\n    End Property\n\n    Public Sub New(ByVal initName As String)\n        Name = initName\n    End Sub \n\n    Public Sub New()\n        MyClass.New(&quot;initialName&quot;)\n    End Sub \n\n    Private methodCalled As Integer = 0\n\n    Public Shared Sub SayHello()\n        Console.WriteLine(&quot;Hello&quot;)\n    End Sub \n\n    Public Sub AddUp()\n        methodCalled += 1\n        Console.WriteLine(&quot;AddUp Called {0} times&quot;, methodCalled)\n    End Sub \n\n    Public Shared Function ComputeSum(ByVal d1 As Double, ByVal d2 As Double) As Double\n        Return d1 + d2\n    End Function \n\n    Public Shared Sub PrintName(ByVal firstName As [String], ByVal lastName As [String])\n        Console.WriteLine(&quot;{0},{1}&quot;, lastName, firstName)\n    End Sub \n\n    Public Sub PrintTime()\n        Console.WriteLine(DateTime.Now)\n    End Sub \n\n    Public Sub Swap(ByRef a As Integer, ByRef b As Integer)\n        Dim x As Integer = a\n        a = b\n        b = x\n    End Sub\nEnd Class\n\n&lt;DefaultMemberAttribute(&quot;PrintTime&quot;)&gt; _\nPublic Class TestClass2\n\n    Public Sub PrintTime()\n        Console.WriteLine(DateTime.Now)\n    End Sub \nEnd Class\n\nPublic Class Base\n    Shared BaseOnlyPrivate As Integer = 0\n    Protected Shared BaseOnly As Integer = 0\nEnd Class\n\nPublic Class Derived \n    Inherits Base\n    Public Shared DerivedOnly As Integer = 0\nEnd Class\n\nPublic Class MostDerived \n    Inherits Derived\nEnd Class\n\n&#39; This example produces output similar to the following:\n&#39;\n&#39;Invoking a static method.\n&#39;-------------------------\n&#39;Hello\n&#39;\n&#39;Invoking an instance method.\n&#39;----------------------------\n&#39;AddUp Called 1 times\n&#39;AddUp Called 2 times\n&#39;\n&#39;Invoking a method with parameters.\n&#39;---------------------------------\n&#39;100.09 + 184.45 = 284.54\n&#39;\n&#39;Invoking a field (getting and setting.)\n&#39;--------------------------------------\n&#39;Name == initialName\n&#39;Name == NewName\n&#39;\n&#39;Invoking an indexed property (getting and setting.)\n&#39;--------------------------------------------------\n&#39;Item[3] == 3\n&#39;Item[3] == NewValue\n&#39;\n&#39;Getting a field or property.\n&#39;----------------------------\n&#39;Name == NewName\n&#39;Value == the value\n&#39;\n&#39;Invoking a method with named parameters.\n&#39;---------------------------------------\n&#39;Mouse,Micky\n&#39;\n&#39;Invoking a default member of a type.\n&#39;------------------------------------\n&#39;12/23/2009 4:34:22 PM\n&#39;\n&#39;Invoking a method with ByRef parameters.\n&#39;----------------------------------------\n&#39;2, 1\n&#39;\n&#39;Creating an instance with parameterless constructor.\n&#39;----------------------------------------------------\n&#39;Instance of TestClass created.\n&#39;\n&#39;Creating an instance with a constructor that has parameters.\n&#39;------------------------------------------------------------\n&#39;Instance of TestClass created with initial value &#39;Hello, World!&#39;.\n&#39;\n&#39;DeclaredOnly instance members.\n&#39;------------------------------\n&#39;get_Item\n&#39;set_Item\n&#39;get_Value\n&#39;AddUp\n&#39;PrintTime\n&#39;Swap\n&#39;.ctor\n&#39;.ctor\n&#39;Item\n&#39;Value\n&#39;Name\n&#39;\n&#39;Using IgnoreCase and invoking the PrintName method.\n&#39;---------------------------------------------------\n&#39;Smith,Brad\n&#39;\n&#39;Using FlattenHierarchy to get inherited static protected and public members.\n&#39;----------------------------------------------------------------------------\n&#39;DerivedOnly defined in Derived.\n&#39;BaseOnly defined in Base.\n&#39;\n&#39;Without FlattenHierarchy.\n&#39;-------------------------\n&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"BindingFlags#1\">using System;\nusing System.Reflection;\nusing System.IO;\n\nnamespace BindingFlagsSnippet\n{\n    class Example\n    {\n        static void Main()\n        {\n            // BindingFlags.InvokeMethod\n            // Call a static method.\n            Type t = typeof (TestClass);\n\n            Console.WriteLine();\n            Console.WriteLine(&quot;Invoking a static method.&quot;);\n            Console.WriteLine(&quot;-------------------------&quot;);\n            t.InvokeMember (&quot;SayHello&quot;, BindingFlags.InvokeMethod | BindingFlags.Public | \n                BindingFlags.Static, null, null, new object [] {});\n\n            // BindingFlags.InvokeMethod\n            // Call an instance method.\n            TestClass c = new TestClass ();\n            Console.WriteLine();\n            Console.WriteLine(&quot;Invoking an instance method.&quot;);\n            Console.WriteLine(&quot;----------------------------&quot;);\n            c.GetType().InvokeMember (&quot;AddUp&quot;, BindingFlags.InvokeMethod, null, c, new object [] {});\n            c.GetType().InvokeMember (&quot;AddUp&quot;, BindingFlags.InvokeMethod, null, c, new object [] {});\n\n            // BindingFlags.InvokeMethod\n            // Call a method with parameters.\n            object [] args = new object [] {100.09, 184.45};\n            object result;\n            Console.WriteLine();\n            Console.WriteLine(&quot;Invoking a method with parameters.&quot;);\n            Console.WriteLine(&quot;---------------------------------&quot;);\n            result = t.InvokeMember (&quot;ComputeSum&quot;, BindingFlags.InvokeMethod, null, null, args);\n            Console.WriteLine (&quot;{0} + {1} = {2}&quot;, args[0], args[1], result);\n\n            // BindingFlags.GetField, SetField\n            Console.WriteLine();\n            Console.WriteLine(&quot;Invoking a field (getting and setting.)&quot;);\n            Console.WriteLine(&quot;--------------------------------------&quot;);\n            // Get a field value.\n            result = t.InvokeMember (&quot;Name&quot;, BindingFlags.GetField, null, c, new object [] {});\n            Console.WriteLine (&quot;Name == {0}&quot;, result);\n            // Set a field.\n            t.InvokeMember (&quot;Name&quot;, BindingFlags.SetField, null, c, new object [] {&quot;NewName&quot;});\n            result = t.InvokeMember (&quot;Name&quot;, BindingFlags.GetField, null, c, new object [] {});\n            Console.WriteLine (&quot;Name == {0}&quot;, result);\n\n            Console.WriteLine();\n            Console.WriteLine(&quot;Invoking an indexed property (getting and setting.)&quot;);\n            Console.WriteLine(&quot;--------------------------------------------------&quot;);\n            // BindingFlags.GetProperty\n            // Get an indexed property value.\n            int  index = 3;\n            result = t.InvokeMember (&quot;Item&quot;, BindingFlags.GetProperty, null, c, new object [] {index});\n            Console.WriteLine (&quot;Item[{0}] == {1}&quot;, index, result);\n            // BindingFlags.SetProperty\n            // Set an indexed property value.\n            index = 3;\n            t.InvokeMember (&quot;Item&quot;, BindingFlags.SetProperty, null, c, new object [] {index, &quot;NewValue&quot;});\n            result = t.InvokeMember (&quot;Item&quot;, BindingFlags.GetProperty , null, c, new object [] {index});\n            Console.WriteLine (&quot;Item[{0}] == {1}&quot;, index, result);\n\n            Console.WriteLine();\n            Console.WriteLine(&quot;Getting a field or property.&quot;);\n            Console.WriteLine(&quot;----------------------------&quot;);\n            // BindingFlags.GetField\n            // Get a field or property.\n            result = t.InvokeMember (&quot;Name&quot;, BindingFlags.GetField | BindingFlags.GetProperty, null, c, \n                new object [] {});\n            Console.WriteLine (&quot;Name == {0}&quot;, result);\n            // BindingFlags.GetProperty\n            result = t.InvokeMember (&quot;Value&quot;, BindingFlags.GetField | BindingFlags.GetProperty, null, c, \n                new object [] {});\n            Console.WriteLine (&quot;Value == {0}&quot;, result);\n\n            Console.WriteLine();\n            Console.WriteLine(&quot;Invoking a method with named parameters.&quot;);\n            Console.WriteLine(&quot;---------------------------------------&quot;);\n            // BindingFlags.InvokeMethod\n            // Call a method using named parameters.\n            object[] argValues = new object [] {&quot;Mouse&quot;, &quot;Micky&quot;};\n            String [] argNames = new String [] {&quot;lastName&quot;, &quot;firstName&quot;};\n            t.InvokeMember (&quot;PrintName&quot;, BindingFlags.InvokeMethod, null, null, argValues, null, null, \n                argNames);\n\n            Console.WriteLine();\n            Console.WriteLine(&quot;Invoking a default member of a type.&quot;);\n            Console.WriteLine(&quot;------------------------------------&quot;);\n            // BindingFlags.Default\n            // Call the default member of a type.\n            Type t3 = typeof (TestClass2);\n            t3.InvokeMember (&quot;&quot;, BindingFlags.InvokeMethod | BindingFlags.Default, null, new TestClass2(), \n                new object [] {});\n\n            // BindingFlags.Static, NonPublic, and Public\n            // Invoking a member with ref parameters.\n            Console.WriteLine();\n            Console.WriteLine(&quot;Invoking a method with ref parameters.&quot;);\n            Console.WriteLine(&quot;--------------------------------------&quot;);\n            MethodInfo m = t.GetMethod(&quot;Swap&quot;);\n            args = new object[2];\n            args[0] = 1;\n            args[1] = 2;\n            m.Invoke(new TestClass(),args);\n            Console.WriteLine (&quot;{0}, {1}&quot;, args[0], args[1]);\n\n            // BindingFlags.CreateInstance\n            // Creating an instance with a parameterless constructor.\n            Console.WriteLine();\n            Console.WriteLine(&quot;Creating an instance with a parameterless constructor.&quot;);\n            Console.WriteLine(&quot;------------------------------------------------------&quot;);\n            object cobj = t.InvokeMember (&quot;TestClass&quot;, BindingFlags.Public |\n                BindingFlags.Instance | BindingFlags.CreateInstance,\n                null, null, new object [] {});\n            Console.WriteLine(&quot;Instance of {0} created.&quot;, cobj.GetType().Name);\n\n            // Creating an instance with a constructor that has parameters.\n            Console.WriteLine();\n            Console.WriteLine(&quot;Creating an instance with a constructor that has parameters.&quot;);\n            Console.WriteLine(&quot;------------------------------------------------------------&quot;);\n            cobj = t.InvokeMember (&quot;TestClass&quot;, BindingFlags.Public |\n                BindingFlags.Instance | BindingFlags.CreateInstance,\n                null, null, new object [] { &quot;Hello, World!&quot; });\n            Console.WriteLine(&quot;Instance of {0} created with initial value &#39;{1}&#39;.&quot;, cobj.GetType().Name,\n                cobj.GetType().InvokeMember(&quot;Name&quot;, BindingFlags.GetField, null, cobj, null));\n\n            // BindingFlags.DeclaredOnly\n            Console.WriteLine();\n            Console.WriteLine(&quot;DeclaredOnly instance members.&quot;);\n            Console.WriteLine(&quot;------------------------------&quot;);\n            System.Reflection.MemberInfo[] memInfo =\n                t.GetMembers(BindingFlags.DeclaredOnly | BindingFlags.Instance | \n                BindingFlags.Public);\n            for(int i=0;i&lt;memInfo.Length;i++)\n            {\n                Console.WriteLine(memInfo[i].Name);\n            }\n\n            // BindingFlags.IgnoreCase\n            Console.WriteLine();\n            Console.WriteLine(&quot;Using IgnoreCase and invoking the PrintName method.&quot;);\n            Console.WriteLine(&quot;---------------------------------------------------&quot;);\n            t.InvokeMember(&quot;printname&quot;, BindingFlags.IgnoreCase | BindingFlags.Static | \n                BindingFlags.Public | BindingFlags.InvokeMethod, null, null, new object[]\n                {&quot;Brad&quot;,&quot;Smith&quot;});\n\n            // BindingFlags.FlattenHierarchy\n            Console.WriteLine();\n            Console.WriteLine(&quot;Using FlattenHierarchy to get inherited static protected and public members.&quot; );\n            Console.WriteLine(&quot;----------------------------------------------------------------------------&quot;);\n            FieldInfo[] finfos = typeof(MostDerived).GetFields(BindingFlags.NonPublic | BindingFlags.Public |\n                  BindingFlags.Static | BindingFlags.FlattenHierarchy);\n            foreach (FieldInfo finfo in finfos)\n            {\n                Console.WriteLine(&quot;{0} defined in {1}.&quot;, finfo.Name, finfo.DeclaringType.Name);\n            }\n\n            Console.WriteLine();\n            Console.WriteLine(&quot;Without FlattenHierarchy.&quot; );\n            Console.WriteLine(&quot;-------------------------&quot;);\n            finfos = typeof(MostDerived).GetFields(BindingFlags.NonPublic | BindingFlags.Public |\n                  BindingFlags.Static);\n            foreach (FieldInfo finfo in finfos)\n            {\n                Console.WriteLine(&quot;{0} defined in {1}.&quot;, finfo.Name, finfo.DeclaringType.Name);\n            }\n        }\n    }\n\n    public class TestClass\n    {\n        public String Name;\n        private Object [] values = new Object [] {0, 1,2,3,4,5,6,7,8,9};\n\n        public Object this [int index]\n        {\n            get\n            {\n                return values[index];\n            }\n            set\n            {\n                values[index] = value;\n            }\n        }\n\n        public Object Value\n        {\n            get\n            {\n                return &quot;the value&quot;;\n            }\n        }\n\n        public TestClass () : this(&quot;initialName&quot;) {}\n        public TestClass (string initName)\n        {\n            Name = initName;\n        }\n\n        int methodCalled = 0;\n\n        public static void SayHello ()\n        {\n            Console.WriteLine (&quot;Hello&quot;);\n        }\n\n        public void AddUp ()\n        {\n            methodCalled++;\n            Console.WriteLine (&quot;AddUp Called {0} times&quot;, methodCalled);\n        }\n\n        public static double ComputeSum (double d1, double d2)\n        {\n            return d1 + d2;\n        }\n\n        public static void PrintName (String firstName, String lastName)\n        {\n            Console.WriteLine (&quot;{0},{1}&quot;, lastName,firstName);\n        }\n\n        public void PrintTime ()\n        {\n            Console.WriteLine (DateTime.Now);\n        }\n\n        public void Swap(ref int a, ref int b)\n        {\n            int x = a;\n            a = b;\n            b = x;\n        }\n    }\n\n    [DefaultMemberAttribute (&quot;PrintTime&quot;)]\n    public class TestClass2\n    {\n        public void PrintTime ()\n        {\n            Console.WriteLine (DateTime.Now);\n        }\n    }\n\n    public class Base\n    {\n        static int BaseOnlyPrivate = 0;\n        protected static int BaseOnly = 0;\n    }\n    public class Derived : Base\n    {\n        public static int DerivedOnly = 0;\n    }\n    public class MostDerived : Derived {}\n}\n\n/* This example produces output similar to the following:\n\nInvoking a static method.\n-------------------------\nHello\n\nInvoking an instance method.\n----------------------------\nAddUp Called 1 times\nAddUp Called 2 times\n\nInvoking a method with parameters.\n---------------------------------\n100.09 + 184.45 = 284.54\n\nInvoking a field (getting and setting.)\n--------------------------------------\nName == initialName\nName == NewName\n\nInvoking an indexed property (getting and setting.)\n--------------------------------------------------\nItem[3] == 3\nItem[3] == NewValue\n\nGetting a field or property.\n----------------------------\nName == NewName\nValue == the value\n\nInvoking a method with named parameters.\n---------------------------------------\nMouse,Micky\n\nInvoking a default member of a type.\n------------------------------------\n12/23/2009 4:29:21 PM\n\nInvoking a method with ref parameters.\n--------------------------------------\n2, 1\n\nCreating an instance with a parameterless constructor.\n------------------------------------------------------\nInstance of TestClass created.\n\nCreating an instance with a constructor that has parameters.\n------------------------------------------------------------\nInstance of TestClass created with initial value &#39;Hello, World!&#39;.\n\nDeclaredOnly instance members.\n------------------------------\nget_Item\nset_Item\nget_Value\nAddUp\nPrintTime\nSwap\n.ctor\n.ctor\nItem\nValue\nName\n\nUsing IgnoreCase and invoking the PrintName method.\n---------------------------------------------------\nSmith,Brad\n\nUsing FlattenHierarchy to get inherited static protected and public members.\n----------------------------------------------------------------------------\nDerivedOnly defined in Derived.\nBaseOnly defined in Base.\n\nWithout FlattenHierarchy.\n-------------------------\n\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"BindingFlags#1\">using namespace System;\nusing namespace System::Collections;\nusing namespace System::Reflection;\nusing namespace System::IO;\n\n//namespace BindingFlagsSnippet {\npublic ref class TestClass\n{\npublic:\n   String^ Name;\n\nprivate:\n   array&lt;Object^&gt;^ values;\n   int methodCalled;\n\npublic:\n\n   property Object^ Item [int]\n   {\n      Object^ get( int index )\n      {\n         return values[ index ];\n      }\n\n      void set( int index, Object^ value )\n      {\n         values[ index ] = value;\n      }\n   }\n\n   property Object^ Value\n   {\n      Object^ get()\n      {\n         return &quot;the value&quot;;\n      }\n   }\n\n   TestClass() \n   {\n      Name = &quot;initialName&quot;;\n      values = gcnew array&lt;Object^&gt; {(int^)0,1,2,3,4,5,6,7,8,9};\n      methodCalled = 0;\n   }\n   \n   TestClass(String^ initName)\n   {\n      Name = initName;\n      values = gcnew array&lt;Object^&gt; {(int^)0,1,2,3,4,5,6,7,8,9};\n      methodCalled = 0;\n   }\n\n   static void SayHello()\n   {\n      Console::WriteLine( &quot;Hello&quot; );\n   }\n\n   void AddUp()\n   {\n      methodCalled++;\n      Console::WriteLine( &quot;AddUp Called {0} times&quot;, methodCalled );\n   }\n\n   static double ComputeSum( double d1, double d2 )\n   {\n      return d1 + d2;\n   }\n\n   static void PrintName( String^ firstName, String^ lastName )\n   {\n      Console::WriteLine( &quot;{0},{1}&quot;, lastName, firstName );\n   }\n\n   void PrintTime()\n   {\n      Console::WriteLine( DateTime::Now );\n   }\n\n   void Swap( interior_ptr&lt;int&gt; a, interior_ptr&lt;int&gt; b )\n   {\n      int x =  *a;\n       *a =  *b;\n       *b = x;\n   }\n};\n\n\n[DefaultMemberAttribute(&quot;PrintTime&quot;)]\npublic ref class TestClass2\n{\npublic:\n   void PrintTime()\n   {\n      Console::WriteLine( DateTime::Now );\n   }\n\n};\n\npublic ref class Base\n{\nprivate:\n    static int BaseOnlyPrivate = 0;\nprotected:\n    static int BaseOnly = 0;\n};\n\npublic ref class Derived : Base\n{\npublic:\n    static int DerivedOnly = 0;\n};\n\npublic ref class MostDerived : Derived {};\n\nvoid main()\n{\n   array&lt;Object^&gt;^ noArguments;\n\n   // BindingFlags::InvokeMethod\n   // Call a static method.\n   Type^ t = TestClass::typeid;\n   Console::WriteLine();\n   Console::WriteLine( &quot;Invoking a static method.&quot; );\n   Console::WriteLine( &quot;-------------------------&quot; );\n   t-&gt;InvokeMember( &quot;SayHello&quot;, BindingFlags::InvokeMethod | BindingFlags::Public | BindingFlags::Static, \n         nullptr, nullptr, noArguments );\n\n   // BindingFlags::InvokeMethod\n   // Call an instance method.\n   TestClass^ c = gcnew TestClass;\n   Console::WriteLine();\n   Console::WriteLine( &quot;Invoking an instance method.&quot; );\n   Console::WriteLine( &quot;----------------------------&quot; );\n   c-&gt;GetType()-&gt;InvokeMember( &quot;AddUp&quot;, BindingFlags::InvokeMethod, nullptr, c, noArguments );\n   c-&gt;GetType()-&gt;InvokeMember( &quot;AddUp&quot;, BindingFlags::InvokeMethod, nullptr, c, noArguments );\n\n   // BindingFlags::InvokeMethod\n   // Call a method with parameters.\n   array&lt;Object^&gt;^args = {100.09,184.45};\n   Object^ result;\n   Console::WriteLine();\n   Console::WriteLine( &quot;Invoking a method with parameters.&quot; );\n   Console::WriteLine( &quot;---------------------------------&quot; );\n   result = t-&gt;InvokeMember( &quot;ComputeSum&quot;, BindingFlags::InvokeMethod, nullptr, nullptr, args );\n   Console::WriteLine( &quot; {0} + {1} = {2}&quot;, args[ 0 ], args[ 1 ], result );\n\n   // BindingFlags::GetField, SetField\n   Console::WriteLine();\n   Console::WriteLine( &quot;Invoking a field (getting and setting.)&quot; );\n   Console::WriteLine( &quot;--------------------------------------&quot; );\n\n   // Get a field value.\n   result = t-&gt;InvokeMember( &quot;Name&quot;, BindingFlags::GetField, nullptr, c, noArguments );\n   Console::WriteLine( &quot;Name == {0}&quot;, result );\n\n   // Set a field.\n   array&lt;Object^&gt;^obj2 = {&quot;NewName&quot;};\n   t-&gt;InvokeMember( &quot;Name&quot;, BindingFlags::SetField, nullptr, c, obj2 );\n   result = t-&gt;InvokeMember( &quot;Name&quot;, BindingFlags::GetField, nullptr, c, noArguments );\n   Console::WriteLine( &quot;Name == {0}&quot;, result );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Invoking an indexed property (getting and setting.)&quot; );\n   Console::WriteLine( &quot;--------------------------------------------------&quot; );\n\n   // BindingFlags::GetProperty\n   // Get an indexed property value.\n   int index = 3;\n   array&lt;Object^&gt;^obj3 = {index};\n   result = t-&gt;InvokeMember( &quot;Item&quot;, BindingFlags::GetProperty, nullptr, c, obj3 );\n   Console::WriteLine( &quot;Item-&gt;Item[ {0}] == {1}&quot;, index, result );\n\n   // BindingFlags::SetProperty\n   // Set an indexed property value.\n   index = 3;\n   array&lt;Object^&gt;^obj4 = {index,&quot;NewValue&quot;};\n   t-&gt;InvokeMember( &quot;Item&quot;, BindingFlags::SetProperty, nullptr, c, obj4 );\n   result = t-&gt;InvokeMember( &quot;Item&quot;, BindingFlags::GetProperty, nullptr, c, obj3 );\n   Console::WriteLine( &quot;Item-&gt;Item[ {0}] == {1}&quot;, index, result );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Getting a field or property.&quot; );\n   Console::WriteLine( &quot;----------------------------&quot; );\n\n   // BindingFlags::GetField\n   // Get a field or property.\n   result = t-&gt;InvokeMember( &quot;Name&quot;, static_cast&lt;BindingFlags&gt;(BindingFlags::GetField | \n       BindingFlags::GetProperty), nullptr, c, noArguments );\n   Console::WriteLine( &quot;Name == {0}&quot;, result );\n\n   // BindingFlags::GetProperty\n   result = t-&gt;InvokeMember( &quot;Value&quot;, static_cast&lt;BindingFlags&gt;(BindingFlags::GetField | \n       BindingFlags::GetProperty), nullptr, c, noArguments );\n   Console::WriteLine( &quot;Value == {0}&quot;, result );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Invoking a method with named parameters.&quot; );\n   Console::WriteLine( &quot;---------------------------------------&quot; );\n\n   // BindingFlags::InvokeMethod\n   // Call a method using named parameters.\n   array&lt;Object^&gt;^argValues = {&quot;Mouse&quot;,&quot;Micky&quot;};\n   array&lt;String^&gt;^argNames = {&quot;lastName&quot;,&quot;firstName&quot;};\n   t-&gt;InvokeMember( &quot;PrintName&quot;, BindingFlags::InvokeMethod, nullptr, nullptr, argValues, nullptr, \n       nullptr, argNames );\n   Console::WriteLine();\n   Console::WriteLine( &quot;Invoking a default member of a type.&quot; );\n   Console::WriteLine( &quot;------------------------------------&quot; );\n\n   // BindingFlags::Default\n   // Call the default member of a type.\n   Type^ t3 = TestClass2::typeid;\n   t3-&gt;InvokeMember( &quot;&quot;, static_cast&lt;BindingFlags&gt;(BindingFlags::InvokeMethod | BindingFlags::Default), \n        nullptr, gcnew TestClass2, noArguments );\n\n   // BindingFlags::Static, NonPublic, and Public\n   // Invoking a member with ref parameters.\n   Console::WriteLine();\n   Console::WriteLine( &quot;Invoking a method with ref parameters.&quot; );\n   Console::WriteLine( &quot;--------------------------------------&quot; );\n   MethodInfo^ m = t-&gt;GetMethod( &quot;Swap&quot; );\n   args = gcnew array&lt;Object^&gt;(2);\n   args[ 0 ] = 1;\n   args[ 1 ] = 2;\n   m-&gt;Invoke( gcnew TestClass, args );\n   Console::WriteLine( &quot;{0}, {1}&quot;, args[ 0 ], args[ 1 ] );\n\n   // BindingFlags::CreateInstance\n   // Creating an instance with a parameterless constructor.\n   Console::WriteLine();\n   Console::WriteLine( &quot;Creating an instance with a parameterless constructor.&quot; );\n   Console::WriteLine( &quot;------------------------------------------------------&quot; );\n   Object^ obj = t-&gt;InvokeMember( &quot;TestClass&quot;, static_cast&lt;BindingFlags&gt;(BindingFlags::Public | \n       BindingFlags::Instance | BindingFlags::CreateInstance), nullptr, nullptr, noArguments );\n   Console::WriteLine(&quot;Instance of {0} created.&quot;, obj-&gt;GetType()-&gt;Name);\n\n   // Creating an instance with a constructor that has parameters.\n   Console::WriteLine();\n   Console::WriteLine( &quot;Creating an instance with a constructor that has parameters.&quot; );\n   Console::WriteLine( &quot;------------------------------------------------------------&quot; );\n   obj = t-&gt;InvokeMember( &quot;TestClass&quot;, static_cast&lt;BindingFlags&gt;(BindingFlags::Public | \n       BindingFlags::Instance | BindingFlags::CreateInstance), nullptr, nullptr, \n       gcnew array&lt;Object^&gt; { &quot;Hello, World!&quot; } );\n   Console::WriteLine(&quot;Instance of {0} created with initial value &#39;{1}&#39;.&quot;, obj-&gt;GetType()-&gt;Name, \n       obj-&gt;GetType()-&gt;InvokeMember(&quot;Name&quot;, BindingFlags::GetField, nullptr, obj, noArguments));\n\n   // BindingFlags::DeclaredOnly\n   Console::WriteLine();\n   Console::WriteLine( &quot;DeclaredOnly instance members.&quot; );\n   Console::WriteLine( &quot;------------------------------&quot; );\n   array&lt;System::Reflection::MemberInfo^&gt;^memInfo = t-&gt;GetMembers( BindingFlags::DeclaredOnly | \n       BindingFlags::Instance | BindingFlags::Public);\n   for ( int i = 0; i &lt; memInfo-&gt;Length; i++ )\n   {\n      Console::WriteLine( memInfo[ i ]-&gt;Name );\n\n   }\n\n   // BindingFlags::IgnoreCase\n   Console::WriteLine();\n   Console::WriteLine( &quot;Using IgnoreCase and invoking the PrintName method.&quot; );\n   Console::WriteLine( &quot;---------------------------------------------------&quot; );\n   t-&gt;InvokeMember( &quot;printname&quot;, static_cast&lt;BindingFlags&gt;(BindingFlags::IgnoreCase | \n                BindingFlags::Static | BindingFlags::Public | BindingFlags::InvokeMethod), \n                nullptr, nullptr, gcnew array&lt;Object^&gt; {&quot;Brad&quot;,&quot;Smith&quot;});\n\n   // BindingFlags::FlattenHierarchy\n   Console::WriteLine();\n   Console::WriteLine( &quot;Using FlattenHierarchy to get inherited static protected and public members.&quot; );\n   Console::WriteLine( &quot;----------------------------------------------------------------------------&quot; );\n   array&lt;FieldInfo^&gt;^ finfos = MostDerived::typeid-&gt;GetFields(BindingFlags::NonPublic | \n         BindingFlags::Public | BindingFlags::Static | BindingFlags::FlattenHierarchy);\n   for each (FieldInfo^ finfo in finfos)\n   {\n       Console::WriteLine(&quot;{0} defined in {1}.&quot;, finfo-&gt;Name, finfo-&gt;DeclaringType-&gt;Name);\n   }\n\n   Console::WriteLine();\n   Console::WriteLine(&quot;Without FlattenHierarchy.&quot; );\n   Console::WriteLine(&quot;-------------------------&quot;);\n   finfos = MostDerived::typeid-&gt;GetFields(BindingFlags::NonPublic | BindingFlags::Public |\n         BindingFlags::Static);\n   for each (FieldInfo^ finfo in finfos)\n   {\n       Console::WriteLine(&quot;{0} defined in {1}.&quot;, finfo-&gt;Name, finfo-&gt;DeclaringType-&gt;Name);\n   }\n};\n\n/* This example produces output similar to the following:\n\nInvoking a static method.\n-------------------------\nHello\n\nInvoking an instance method.\n----------------------------\nAddUp Called 1 times\nAddUp Called 2 times\n\nInvoking a method with parameters.\n---------------------------------\n 100.09 + 184.45 = 284.54\n\nInvoking a field (getting and setting.)\n--------------------------------------\nName == initialName\nName == NewName\n\nInvoking an indexed property (getting and setting.)\n--------------------------------------------------\nItem-&gt;Item[ 3] == 3\nItem-&gt;Item[ 3] == NewValue\n\nGetting a field or property.\n----------------------------\nName == NewName\nValue == the value\n\nInvoking a method with named parameters.\n---------------------------------------\nMouse,Micky\n\nInvoking a default member of a type.\n------------------------------------\n12/23/2009 4:19:06 PM\n\nInvoking a method with ref parameters.\n--------------------------------------\n2, 1\n\nCreating an instance with a parameterless constructor.\n------------------------------------------------------\nInstance of TestClass created.\n\nCreating an instance with a constructor that has parameters.\n------------------------------------------------------------\nInstance of TestClass created with initial value &#39;Hello, World!&#39;.\n\nDeclaredOnly instance members.\n------------------------------\nget_Item\nset_Item\nget_Value\nAddUp\nPrintTime\nSwap\n.ctor\n.ctor\nValue\nItem\nName\nmethodCalled\n\nUsing IgnoreCase and invoking the PrintName method.\n---------------------------------------------------\nSmith,Brad\n\nUsing FlattenHierarchy to get inherited static protected and public members.\n----------------------------------------------------------------------------\nDerivedOnly defined in Derived.\nBaseOnly defined in Base.\n\nWithout FlattenHierarchy.\n-------------------------\n\n */\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>These <code>BindingFlags</code> control binding for a great many classes in the <code>System</code>, <code>System.Reflection</code>, and <code>System.Runtime</code> namespaces that invoke, create, get, set, and find members and types.  </p>\n<p> <code>BindingFlags</code> are used in the following <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> methods and other places such as <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_Invoke_\" data-linktype=\"relative-path\">Invoke</a> :  </p>\n<ul>\n<li><a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_Invoke_\" data-linktype=\"relative-path\">Invoke</a>  \n</li>\n<li><a class=\"xref\" href=\"system.type#System_Type_GetMembers_\" data-linktype=\"relative-path\">GetMembers</a>  \n</li>\n<li><a class=\"xref\" href=\"system.type#System_Type_GetEvents_\" data-linktype=\"relative-path\">GetEvents</a>  \n</li>\n<li><a class=\"xref\" href=\"system.type#System_Type_InvokeMember_\" data-linktype=\"relative-path\">InvokeMember</a>  \n</li>\n<li><a class=\"xref\" href=\"system.activator#System_Activator_CreateInstance_\" data-linktype=\"relative-path\">CreateInstance</a>  \n</li>\n<li><a class=\"xref\" href=\"system.type#System_Type_GetConstructor_\" data-linktype=\"relative-path\">GetConstructor</a>  \n</li>\n<li><a class=\"xref\" href=\"system.type#System_Type_GetConstructors_\" data-linktype=\"relative-path\">GetConstructors</a>  \n</li>\n<li><a class=\"xref\" href=\"system.type#System_Type_GetMethod_\" data-linktype=\"relative-path\">GetMethod</a>  \n</li>\n<li><a class=\"xref\" href=\"system.type#System_Type_GetMethods_\" data-linktype=\"relative-path\">GetMethods</a>  \n</li>\n<li><a class=\"xref\" href=\"system.type#System_Type_GetField_\" data-linktype=\"relative-path\">GetField</a>  \n</li>\n<li><a class=\"xref\" href=\"system.type#System_Type_GetFields_\" data-linktype=\"relative-path\">GetFields</a>  \n</li>\n<li><a class=\"xref\" href=\"system.type#System_Type_GetEvent_\" data-linktype=\"relative-path\">GetEvent</a>  \n</li>\n<li><a class=\"xref\" href=\"system.type#System_Type_GetProperty_\" data-linktype=\"relative-path\">GetProperty</a>  \n</li>\n<li><a class=\"xref\" href=\"system.type#System_Type_GetProperties_\" data-linktype=\"relative-path\">GetProperties</a>  \n</li>\n<li><a class=\"xref\" href=\"system.type#System_Type_GetMember_\" data-linktype=\"relative-path\">GetMember</a>  \n</li>\n<li><a class=\"xref\" href=\"system.type#System_Type_FindMembers_\" data-linktype=\"relative-path\">FindMembers</a>  \n</li>\n</ul>\n<p> <code>InvokeMember</code> and <code>GetMethod</code> are especially important.  </p>\n<p> The binding flags can be categorized by how they identify a type member, as listed in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Identified by Accessibility</th>\n<th>Identified by Binding Argument</th>\n<th>Identified by Operation</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DeclaredOnly<br><br> FlattenHierarchy<br><br> IgnoreCase<br><br> IgnoreReturn<br><br> Instance<br><br> NonPublic<br><br> Public<br><br> Static</td>\n<td>ExactBinding<br><br> OptionalParamBinding</td>\n<td>CreateInstance<br><br> GetField<br><br> SetField<br><br> GetProperty<br><br> SetProperty<br><br> InvokeMethod<br><br> PutDispProperty<br><br> PutRefDispProperty</td>\n</tr>\n</tbody>\n</table>\n<div class=\"NOTE\"><h5>Note</h5><p> You must specify <code>Instance</code> or <code>Static</code> along with <code>Public</code> or <code>NonPublic</code> or no members will be returned.  </p>\n</div>\n<p> The following table lists the coercions performed by the default <a class=\"xref\" href=\"system.reflection.binder#System_Reflection_Binder_ChangeType_\" data-linktype=\"relative-path\">ChangeType</a>. This table applies especially to the <code>ExactBinding</code> binding flag.  </p>\n<table>\n<thead>\n<tr>\n<th>Source Type</th>\n<th>Target Type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Any type</td>\n<td>Its base type.</td>\n</tr>\n<tr>\n<td>Any type</td>\n<td>The interface it implements.</td>\n</tr>\n<tr>\n<td><code>Char</code></td>\n<td><code>UInt16</code>, <code>UInt32</code>, <code>Int32</code>, <code>UInt64</code>, <code>Int64</code>, <code>Single</code>, <code>Double</code></td>\n</tr>\n<tr>\n<td><code>Byte</code></td>\n<td><code>Char</code>, <code>UInt16</code>, <code>Int16</code>, <code>UInt32</code>, <code>Int32</code>, <code>UInt64</code>, <code>Int64</code>, <code>Single</code>, <code>Double</code></td>\n</tr>\n<tr>\n<td><code>SByte</code></td>\n<td><code>Int16</code>, <code>Int32</code>, <code>Int64</code>, <code>Single</code>, <code>Double</code></td>\n</tr>\n<tr>\n<td><code>UInt16</code></td>\n<td><code>UInt32</code>, <code>Int32</code>, <code>UInt64</code>, <code>Int64</code>, <code>Single</code>, <code>Double</code></td>\n</tr>\n<tr>\n<td><code>Int16</code></td>\n<td><code>Int32</code>, <code>Int64</code>, <code>Single</code>, <code>Double</code></td>\n</tr>\n<tr>\n<td><code>UInt32</code></td>\n<td><code>UInt64</code>, <code>Int64</code>, <code>Single</code>, <code>Double</code></td>\n</tr>\n<tr>\n<td><code>Int32</code></td>\n<td><code>Int64</code>, <code>Single</code>, <code>Double</code></td>\n</tr>\n<tr>\n<td><code>UInt64</code></td>\n<td><code>Single</code>, <code>Double</code></td>\n</tr>\n<tr>\n<td><code>Int64</code></td>\n<td><code>Single</code>, <code>Double</code></td>\n</tr>\n<tr>\n<td><code>Single</code></td>\n<td><code>Double</code></td>\n</tr>\n<tr>\n<td>Non-reference</td>\n<td>By-reference.</td>\n</tr>\n</tbody>\n</table>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Reflection_BindingFlags_CreateInstance\">\r\n      \t\t\t<span class=\"lang-csharp\">CreateInstance</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that reflection should create an instance of the specified type. Calls the constructor that matches the given arguments. The supplied member name is ignored. If the type of lookup is not specified, (Instance | Public) will apply. It is not possible to call a type initializer.  </p>\n<p> This flag is passed to an <code>InvokeMember</code> method to invoke a constructor.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_BindingFlags_DeclaredOnly\">\r\n      \t\t\t<span class=\"lang-csharp\">DeclaredOnly</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that only members declared at the level of the supplied type&#39;s hierarchy should be considered. Inherited members are not considered.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_BindingFlags_Default\">\r\n      \t\t\t<span class=\"lang-csharp\">Default</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that no binding flags are defined.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_BindingFlags_ExactBinding\">\r\n      \t\t\t<span class=\"lang-csharp\">ExactBinding</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that types of the supplied arguments must exactly match the types of the corresponding formal parameters. Reflection throws an exception if the caller supplies a non-null <code>Binder</code> object, since that implies that the caller is supplying <code>BindToXXX</code> implementations that will pick the appropriate method.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_BindingFlags_FlattenHierarchy\">\r\n      \t\t\t<span class=\"lang-csharp\">FlattenHierarchy</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that public and protected static members up the hierarchy should be returned. Private static members in inherited classes are not returned. Static members include fields, methods, events, and properties. Nested types are not returned.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_BindingFlags_GetField\">\r\n      \t\t\t<span class=\"lang-csharp\">GetField</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the value of the specified field should be returned.  </p>\n<p> This flag is passed to an <code>InvokeMember</code> method to get a field value.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_BindingFlags_GetProperty\">\r\n      \t\t\t<span class=\"lang-csharp\">GetProperty</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the value of the specified property should be returned.  </p>\n<p> This flag is passed to an <code>InvokeMember</code> method to invoke a property getter.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_BindingFlags_IgnoreCase\">\r\n      \t\t\t<span class=\"lang-csharp\">IgnoreCase</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the case of the member name should not be considered when binding.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_BindingFlags_IgnoreReturn\">\r\n      \t\t\t<span class=\"lang-csharp\">IgnoreReturn</span>\r\n      \t</td>\r\n      \t<td><p>Used in COM interop to specify that the return value of the member can be ignored.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_BindingFlags_Instance\">\r\n      \t\t\t<span class=\"lang-csharp\">Instance</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that instance members are to be included in the search.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_BindingFlags_InvokeMethod\">\r\n      \t\t\t<span class=\"lang-csharp\">InvokeMethod</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that a method is to be invoked. This must not be a constructor or a type initializer.  </p>\n<p> This flag is passed to an <code>InvokeMember</code> method to invoke a method.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_BindingFlags_NonPublic\">\r\n      \t\t\t<span class=\"lang-csharp\">NonPublic</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that non-public members are to be included in the search.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_BindingFlags_OptionalParamBinding\">\r\n      \t\t\t<span class=\"lang-csharp\">OptionalParamBinding</span>\r\n      \t</td>\r\n      \t<td><p>Returns the set of members whose parameter count matches the number of supplied arguments. This binding flag is used for methods with parameters that have default values and methods with variable arguments (varargs). This flag should only be used with [System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String&lt;xref href=&quot;stem.Type.InvokeMember%2A&quot;&gt;.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_BindingFlags_Public\">\r\n      \t\t\t<span class=\"lang-csharp\">Public</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that public members are to be included in the search.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_BindingFlags_PutDispProperty\">\r\n      \t\t\t<span class=\"lang-csharp\">PutDispProperty</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the <code>PROPPUT</code> member on a COM object should be invoked. <code>PROPPUT</code> specifies a property-setting function that uses a value. Use <code>PutDispProperty</code> if a property has both <code>PROPPUT</code> and <code>PROPPUTREF</code> and you need to distinguish which one is called.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_BindingFlags_PutRefDispProperty\">\r\n      \t\t\t<span class=\"lang-csharp\">PutRefDispProperty</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the <code>PROPPUTREF</code> member on a COM object should be invoked. <code>PROPPUTREF</code> specifies a property-setting function that uses a reference instead of a value. Use <code>PutRefDispProperty</code> if a property has both <code>PROPPUT</code> and <code>PROPPUTREF</code> and you need to distinguish which one is called.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_BindingFlags_SetField\">\r\n      \t\t\t<span class=\"lang-csharp\">SetField</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the value of the specified field should be set.  </p>\n<p> This flag is passed to an <code>InvokeMember</code> method to set a field value.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_BindingFlags_SetProperty\">\r\n      \t\t\t<span class=\"lang-csharp\">SetProperty</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the value of the specified property should be set. For COM properties, specifying this binding flag is equivalent to specifying <code>PutDispProperty</code> and <code>PutRefDispProperty</code>.  </p>\n<p> This flag is passed to an <code>InvokeMember</code> method to invoke a property setter.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_BindingFlags_Static\">\r\n      \t\t\t<span class=\"lang-csharp\">Static</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that static members are to be included in the search.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_BindingFlags_SuppressChangeType\">\r\n      \t\t\t<span class=\"lang-csharp\">SuppressChangeType</span>\r\n      \t</td>\r\n      \t<td><p>Not implemented.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Reflection.BindingFlags.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.BindingFlags\">\r\n<meta name=\"APIName\" content=\"System.Reflection.BindingFlags.CreateInstance\">\r\n<meta name=\"APIName\" content=\"System.Reflection.BindingFlags.DeclaredOnly\">\r\n<meta name=\"APIName\" content=\"System.Reflection.BindingFlags.Default\">\r\n<meta name=\"APIName\" content=\"System.Reflection.BindingFlags.ExactBinding\">\r\n<meta name=\"APIName\" content=\"System.Reflection.BindingFlags.FlattenHierarchy\">\r\n<meta name=\"APIName\" content=\"System.Reflection.BindingFlags.GetField\">\r\n<meta name=\"APIName\" content=\"System.Reflection.BindingFlags.GetProperty\">\r\n<meta name=\"APIName\" content=\"System.Reflection.BindingFlags.IgnoreCase\">\r\n<meta name=\"APIName\" content=\"System.Reflection.BindingFlags.IgnoreReturn\">\r\n<meta name=\"APIName\" content=\"System.Reflection.BindingFlags.Instance\">\r\n<meta name=\"APIName\" content=\"System.Reflection.BindingFlags.InvokeMethod\">\r\n<meta name=\"APIName\" content=\"System.Reflection.BindingFlags.NonPublic\">\r\n<meta name=\"APIName\" content=\"System.Reflection.BindingFlags.OptionalParamBinding\">\r\n<meta name=\"APIName\" content=\"System.Reflection.BindingFlags.Public\">\r\n<meta name=\"APIName\" content=\"System.Reflection.BindingFlags.PutDispProperty\">\r\n<meta name=\"APIName\" content=\"System.Reflection.BindingFlags.PutRefDispProperty\">\r\n<meta name=\"APIName\" content=\"System.Reflection.BindingFlags.SetField\">\r\n<meta name=\"APIName\" content=\"System.Reflection.BindingFlags.SetProperty\">\r\n<meta name=\"APIName\" content=\"System.Reflection.BindingFlags.Static\">\r\n<meta name=\"APIName\" content=\"System.Reflection.BindingFlags.SuppressChangeType\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"1dc23dba-b767-5114-cff5-c652c1fb0a5f\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies flags that control binding and the way in which the search for members and types is conducted by reflection.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.reflection/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.BindingFlags\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Reflection.BindingFlags.yml","open_to_public_contributors":false,"api_name":["System.Reflection.BindingFlags","System.Reflection.BindingFlags.CreateInstance","System.Reflection.BindingFlags.DeclaredOnly","System.Reflection.BindingFlags.Default","System.Reflection.BindingFlags.ExactBinding","System.Reflection.BindingFlags.FlattenHierarchy","System.Reflection.BindingFlags.GetField","System.Reflection.BindingFlags.GetProperty","System.Reflection.BindingFlags.IgnoreCase","System.Reflection.BindingFlags.IgnoreReturn","System.Reflection.BindingFlags.Instance","System.Reflection.BindingFlags.InvokeMethod","System.Reflection.BindingFlags.NonPublic","System.Reflection.BindingFlags.OptionalParamBinding","System.Reflection.BindingFlags.Public","System.Reflection.BindingFlags.PutDispProperty","System.Reflection.BindingFlags.PutRefDispProperty","System.Reflection.BindingFlags.SetField","System.Reflection.BindingFlags.SetProperty","System.Reflection.BindingFlags.Static","System.Reflection.BindingFlags.SuppressChangeType"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.BindingFlags","System::Reflection::BindingFlags","System.Reflection.BindingFlags.CreateInstance","System::Reflection::BindingFlags::CreateInstance","System.Reflection.BindingFlags.DeclaredOnly","System::Reflection::BindingFlags::DeclaredOnly","System.Reflection.BindingFlags.Default","System::Reflection::BindingFlags::Default","System.Reflection.BindingFlags.ExactBinding","System::Reflection::BindingFlags::ExactBinding","System.Reflection.BindingFlags.FlattenHierarchy","System::Reflection::BindingFlags::FlattenHierarchy","System.Reflection.BindingFlags.GetField","System::Reflection::BindingFlags::GetField","System.Reflection.BindingFlags.GetProperty","System::Reflection::BindingFlags::GetProperty","System.Reflection.BindingFlags.IgnoreCase","System::Reflection::BindingFlags::IgnoreCase","System.Reflection.BindingFlags.IgnoreReturn","System::Reflection::BindingFlags::IgnoreReturn","System.Reflection.BindingFlags.Instance","System::Reflection::BindingFlags::Instance","System.Reflection.BindingFlags.InvokeMethod","System::Reflection::BindingFlags::InvokeMethod","System.Reflection.BindingFlags.NonPublic","System::Reflection::BindingFlags::NonPublic","System.Reflection.BindingFlags.OptionalParamBinding","System::Reflection::BindingFlags::OptionalParamBinding","System.Reflection.BindingFlags.Public","System::Reflection::BindingFlags::Public","System.Reflection.BindingFlags.PutDispProperty","System::Reflection::BindingFlags::PutDispProperty","System.Reflection.BindingFlags.PutRefDispProperty","System::Reflection::BindingFlags::PutRefDispProperty","System.Reflection.BindingFlags.SetField","System::Reflection::BindingFlags::SetField","System.Reflection.BindingFlags.SetProperty","System::Reflection::BindingFlags::SetProperty","System.Reflection.BindingFlags.Static","System::Reflection::BindingFlags::Static","System.Reflection.BindingFlags.SuppressChangeType","System::Reflection::BindingFlags::SuppressChangeType"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"1dc23dba-b767-5114-cff5-c652c1fb0a5f","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Reflection/BindingFlags.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"BindingFlags enum | Microsoft Docs","_op_ogTitle":"BindingFlags enum","description":"Specifies flags that control binding and the way in which the search for members and types is conducted by reflection.\n","toc_asset_id":"api/_splitted/System.Reflection/toc.json","toc_rel":"_splitted/System.Reflection/toc.json","source_url":"","ms.assetid":"System.Reflection.BindingFlags","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.bindingflags","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.bindingflags","fileRelativePath":"api/System.Reflection.BindingFlags.html"},"themesRelativePathToOutputRoot":"_themes/"}