{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ViewTechnology</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Defines identifiers for a set of technologies that designer hosts support.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic enum ViewTechnology</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">ViewTechnology</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates how to use the ViewTechnology class in a designer. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.componentmodel.design.irootdesigner\" data-linktype=\"relative-path\">IRootDesigner</a> interface.  </p>\n<pre><code class=\"lang-cs\" name=\"IRootDesigner Sample#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.ComponentModel.Design;\nusing System.Diagnostics;\nusing System.Drawing;\nusing System.Windows.Forms;\nusing System.Windows.Forms.Design;\n\nnamespace SampleRootDesigner\n{\t\n    // This sample demonstrates how to provide the root designer view, or\n    // design mode background view, by overriding IRootDesigner.GetView().\n\n    // This sample component inherits from RootDesignedComponent which \n    // uses the SampleRootDesigner.\n    public class RootViewSampleComponent : RootDesignedComponent\n    {\n        public RootViewSampleComponent()\n        {\n        }\n    }\n\n    // The following attribute associates the SampleRootDesigner designer \n    // with the SampleComponent component.\n    [Designer(typeof(SampleRootDesigner), typeof(IRootDesigner))]\n    public class RootDesignedComponent : Component\n    {\n        public RootDesignedComponent()\n        {\n        }\n    }\n\n    public class SampleRootDesigner : ComponentDesigner, IRootDesigner\n    {\n        // Member field of custom type RootDesignerView, a control that \n        // will be shown in the Forms designer view. This member is \n        // cached to reduce processing needed to recreate the \n        // view control on each call to GetView().\n        private RootDesignerView m_view;\t\t\t\n\n        // This method returns an instance of the view for this root\n        // designer. The &quot;view&quot; is the user interface that is presented\n        // in a document window for the user to manipulate. \n        object IRootDesigner.GetView(ViewTechnology technology) \n        {\n            if (technology != ViewTechnology.Default)\n            {\n                throw new ArgumentException(&quot;Not a supported view technology&quot;, &quot;technology&quot;);\n            }\n            if (m_view == null)\n            {\n                   // Some type of displayable Form or control is required \n                   // for a root designer that overrides GetView(). In this \n                   // example, a Control of type RootDesignerView is used.\n                   // Any class that inherits from Control will work.\n                m_view = new RootDesignerView(this);\n            }\n            return m_view;\n        }\n\n        // IRootDesigner.SupportedTechnologies is a required override for an\n        // IRootDesigner. Default is the view technology used by this designer.  \n        ViewTechnology[] IRootDesigner.SupportedTechnologies \n        {\n            get\n            {\n                return new ViewTechnology[] {ViewTechnology.Default};\n            }\n        }\n\n        // RootDesignerView is a simple control that will be displayed \n        // in the designer window.\n        private class RootDesignerView : Control \n        {\n            private SampleRootDesigner m_designer;\n\n            public RootDesignerView(SampleRootDesigner designer)\n            {\n                m_designer = designer;\n                BackColor = Color.Blue;\n                Font = new Font(Font.FontFamily.Name, 24.0f);\n            }\n\n            protected override void OnPaint(PaintEventArgs pe)\n            {\n                base.OnPaint(pe);\n\n                // Draws the name of the component in large letters.\n                pe.Graphics.DrawString(m_designer.Component.Site.Name, Font, Brushes.Yellow, ClientRectangle);\n            }\n        }\t\t\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"IRootDesigner Sample#1\">Imports System\nImports System.Collections\nImports System.ComponentModel\nImports System.ComponentModel.Design\nImports System.Diagnostics\nImports System.Drawing\nImports System.Windows.Forms\nImports System.Windows.Forms.Design\n\nNamespace SampleRootDesigner\n\n    &#39; This sample demonstrates how to provide the root designer view, or\n    &#39; design mode background view, by overriding IRootDesigner.GetView().\n\n    &#39; This sample component inherits from RootDesignedComponent which \n    &#39; uses the SampleRootDesigner.\n    Public Class RootViewSampleComponent\n        Inherits RootDesignedComponent\n\n        Public Sub New()\n        End Sub\n\n    End Class\n\n    &#39; The following attribute associates the SampleRootDesigner designer \n    &#39; with the SampleComponent component.\n    &lt;Designer(GetType(SampleRootDesigner), GetType(IRootDesigner))&gt; _\n    Public Class RootDesignedComponent\n        Inherits Component\n\n        Public Sub New()\n        End Sub \n\n    End Class \n\n    Public Class SampleRootDesigner\n        Inherits ComponentDesigner\n        Implements IRootDesigner\n\n        &#39; Member field of custom type RootDesignerView, a control that \n        &#39; will be shown in the Forms designer view. This member is \n        &#39; cached to reduce processing needed to recreate the \n        &#39; view control on each call to GetView().\n        Private m_view As RootDesignerView\n\n        &#39; This method returns an instance of the view for this root\n        &#39; designer. The &quot;view&quot; is the user interface that is presented\n        &#39; in a document window for the user to manipulate. \n        Function GetView(ByVal technology As ViewTechnology) As Object Implements IRootDesigner.GetView\n            If Not technology = ViewTechnology.Default Then\n                Throw New ArgumentException(&quot;Not a supported view technology&quot;, &quot;technology&quot;)\n            End If\n            If m_view Is Nothing Then\n                &#39; Some type of displayable Form or control is required for a root designer that overrides \n                &#39; GetView(). In this example, a Control of type RootDesignerView is used.\n                &#39; Any class that inherits from Control will work. \n                m_view = New RootDesignerView(Me)\n            End If\n            Return m_view\n        End Function \n\n        &#39; IRootDesigner.SupportedTechnologies is a required override for an \n        &#39; IRootDesigner. Default is the view technology used by this designer.\n        ReadOnly Property SupportedTechnologies() As ViewTechnology() Implements IRootDesigner.SupportedTechnologies\n            Get\n                Return New ViewTechnology() {ViewTechnology.Default}\n            End Get\n        End Property\n\n        &#39; RootDesignerView is a simple control that will be displayed \n        &#39; in the designer window.\n        Private Class RootDesignerView\n            Inherits Control\n            Private m_designer As SampleRootDesigner\n\n            Public Sub New(ByVal designer As SampleRootDesigner)\n                m_designer = designer\n                BackColor = Color.Blue\n                Font = New Font(Font.FontFamily.Name, 24.0F)\n            End Sub \n\n            Protected Overrides Sub OnPaint(ByVal pe As PaintEventArgs)\n                MyBase.OnPaint(pe)\n                &#39; Draws the name of the component in large letters.\n                Dim rf As New RectangleF(ClientRectangle.X, ClientRectangle.Y, ClientRectangle.Width, ClientRectangle.Height)\n                pe.Graphics.DrawString(m_designer.Component.Site.Name, Font, Brushes.Yellow, rf)\n            End Sub \n\n        End Class\n    End Class\n\nEnd Namespace \n</code></pre><pre><code class=\"lang-cpp\" name=\"IRootDesigner Sample#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.Design.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::ComponentModel::Design;\nusing namespace System::Diagnostics;\nusing namespace System::Drawing;\nusing namespace System::Windows::Forms;\nusing namespace System::Windows::Forms::Design;\n\nnamespace SampleRootDesigner\n{\n   ref class SampleRootDesigner;\n\n   // This sample demonstrates how to provide the root designer view, or\n   // design mode background view, by overriding IRootDesigner.GetView().\n   // The following attribute associates the SampleRootDesigner designer\n   // with the SampleComponent component.\n\n   [Designer(SampleRootDesigner::typeid,IRootDesigner::typeid)]\n   public ref class RootDesignedComponent: public Component\n   {\n   public:\n      RootDesignedComponent(){}\n\n   };\n\n   public ref class SampleRootDesigner: public ComponentDesigner, public IRootDesigner\n   {\n   private:\n      ref class RootDesignerView;\n\n      // Member field of custom type RootDesignerView, a control that\n      // will be shown in the Forms designer view. This member is\n      // cached to reduce processing needed to recreate the\n      // view control on each call to GetView().\n      RootDesignerView^ m_view;\n\n      // This method returns an instance of the view for this root\n      // designer. The &quot;view&quot; is the user interface that is presented\n      // in a document window for the user to manipulate.\n      virtual Object^ GetView( ViewTechnology technology ) sealed = IRootDesigner::GetView\n      {\n         if ( technology != ViewTechnology::WindowsForms )\n         {\n            throw gcnew ArgumentException( &quot;Not a supported view technology&quot;,&quot;technology&quot; );\n         }\n\n         if ( m_view == nullptr )\n         {\n            \n            // Some type of displayable Form or control is required\n            // for a root designer that overrides GetView(). In this\n            // example, a Control of type RootDesignerView is used.\n            // Any class that inherits from Control will work.\n            m_view = gcnew RootDesignerView( this );\n         }\n\n         return m_view;\n      }\n\n\n      // IRootDesigner.SupportedTechnologies is a required override for an\n      // IRootDesigner. WindowsForms is the view technology used by this designer.\npublic:\n      property array&lt;ViewTechnology&gt;^ SupportedTechnologies \n      {\n\t\tvirtual array&lt;ViewTechnology&gt;^ get() \n\t\t{\n\t\t\treturn gcnew array&lt;ViewTechnology&gt; {ViewTechnology::Default};\n                \t\n\t\t}\n      }\n      \n      // RootDesignerView is a simple control that will be displayed\n      // in the designer window.\n      ref class RootDesignerView: public Control\n      {\n      private:\n         SampleRootDesigner^ m_designer;\n\n      public:\n         RootDesignerView( SampleRootDesigner^ designer )\n         {\n            m_designer = designer;\n            BackColor = Color::Blue;\n            Font = gcnew System::Drawing::Font( Font-&gt;FontFamily-&gt;Name,24.0f );\n         }\n\n\n      protected:\n         virtual void OnPaint( PaintEventArgs^ pe ) override\n         {\n            Control::OnPaint( pe );\n            \n            // Draws the name of the component in large letters.\n            pe-&gt;Graphics-&gt;DrawString( m_designer-&gt;Component-&gt;Site-&gt;Name, Font, Brushes::Yellow, ClientRectangle );\n         }\n\n      };\n\n\n   };\n\n\n   // This sample component inherits from RootDesignedComponent which\n   // uses the SampleRootDesigner.\n   public ref class RootViewSampleComponent: public RootDesignedComponent\n   {\n   public:\n      RootViewSampleComponent(){}\n\n   };\n\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The view adapter model replaces and adds functionality to the ViewTechnology feature; however, the ViewTechnology feature is retained for both backward compatibility and future use, if you choose. For more information, see &quot;.NET Shape Library: A Sample Designer&quot; in the Windows Forms Knowledge Base at <a href=\"http://windowsforms.net/articles/shapedesigner.aspx\" data-linktype=\"external\">http://windowsforms.net/articles/shapedesigner.aspx</a>.  </p>\n<p> ViewTechnology defines identifiers that can indicate the mode to use for controlling the display of a designer-hosted document.  </p>\n<p> You should only use the Default value in your designer hosting environment. In previous versions of the .NET Framework, the ViewTechnology enumeration specified the type of UI model supported by a root designer. Because this model is not extensible, you should instead use a <em>view adapter</em> model. A view adapter is a type that adapts an object of one type to another.  </p>\n<p> For example, an HTML designer might return a <code>DemoDOM</code> tree as its view. The HTML designer returns a view technology of Default. A Windows Forms hosting environment would have one or more view adapter classes available. If one such class could convert the <code>DemoDOM</code> into a Windows Forms control, the hosting application can support this type of designer. If no adapter can handle the data type returned from the designer’s <a class=\"xref\" href=\"system.componentmodel.design.irootdesigner#System_ComponentModel_Design_IRootDesigner_GetView_\" data-linktype=\"relative-path\">GetView</a> method, the load of the designer will fail, and the user will be presented with an error.  </p>\n<p> Visual Studio has an extensible scheme for providing view adapters, so it can adapt to any UI technology. Third-party technology providers can also offer an appropriate view adapter, and their object models are immediately consumable.  </p>\n<p> For an example that uses view adapters, see &quot;.NET Shape Library: A Sample Designer&quot; in the Windows Forms Knowledge Base at <a href=\"http://windowsforms.net/articles/shapedesigner.aspx\" data-linktype=\"external\">http://windowsforms.net/articles/shapedesigner.aspx</a>.</p>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_ComponentModel_Design_ViewTechnology_Default\">\r\n      \t\t\t<span class=\"lang-csharp\">Default</span>\r\n      \t</td>\r\n      \t<td><p>Specifies the default view technology support.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_ComponentModel_Design_ViewTechnology_Passthrough\">\r\n      \t\t\t<span class=\"lang-csharp\">Passthrough</span>\r\n      \t</td>\r\n      \t<td><p>Represents a mode in which the view object is passed directly to the development environment.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_ComponentModel_Design_ViewTechnology_WindowsForms\">\r\n      \t\t\t<span class=\"lang-csharp\">WindowsForms</span>\r\n      \t</td>\r\n      \t<td><p>Represents a mode in which a Windows Forms control object provides the display for the root designer.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.Design.ViewTechnology.yml\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.ViewTechnology\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.ViewTechnology.Default\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.ViewTechnology.Passthrough\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.ViewTechnology.WindowsForms\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"2f1cffb8-b80f-4067-3d9a-76f6399f8970\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines identifiers for a set of technologies that designer hosts support.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.componentmodel.design/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.ComponentModel.Design.ViewTechnology\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.Design.ViewTechnology.yml","open_to_public_contributors":false,"api_name":["System.ComponentModel.Design.ViewTechnology","System.ComponentModel.Design.ViewTechnology.Default","System.ComponentModel.Design.ViewTechnology.Passthrough","System.ComponentModel.Design.ViewTechnology.WindowsForms"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.ComponentModel.Design.ViewTechnology","System::ComponentModel::Design::ViewTechnology","System.ComponentModel.Design.ViewTechnology.Default","System::ComponentModel::Design::ViewTechnology::Default","System.ComponentModel.Design.ViewTechnology.Passthrough","System::ComponentModel::Design::ViewTechnology::Passthrough","System.ComponentModel.Design.ViewTechnology.WindowsForms","System::ComponentModel::Design::ViewTechnology::WindowsForms"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"2f1cffb8-b80f-4067-3d9a-76f6399f8970","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.ComponentModel.Design/ViewTechnology.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ViewTechnology enum | Microsoft Docs","_op_ogTitle":"ViewTechnology enum","description":"Defines identifiers for a set of technologies that designer hosts support.\n","toc_asset_id":"api/_splitted/System.ComponentModel.Design/toc.json","toc_rel":"_splitted/System.ComponentModel.Design/toc.json","source_url":"","ms.assetid":"System.ComponentModel.Design.ViewTechnology","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.design.viewtechnology","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.design.viewtechnology","fileRelativePath":"api/System.ComponentModel.Design.ViewTechnology.html"},"themesRelativePathToOutputRoot":"_themes/"}