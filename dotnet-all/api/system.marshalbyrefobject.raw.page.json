{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">MarshalByRefObject</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Enables access to objects across application domain boundaries in applications that support remoting.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic abstract class MarshalByRefObject</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">MarshalByRefObject</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>This section contains two code examples. The first code example shows how to create an instance of a class in another application domain. The second code example shows a simple class that can be used for remoting.  </p>\n<p> <strong>Example 1</strong>  </p>\n<p> The following code example shows the simplest way to execute code in another application domain. The example defines a class named <code>Worker</code> that inherits MarshalByRefObject, with a method that displays the name of the application domain in which it is executing. The example creates instances of <code>Worker</code> in the default application domain and in a new application domain.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The assembly that contains <code>Worker</code> must be loaded into both application domains, but it could load other assemblies that would exist only in the new application domain.  </p>\n</div>\n<pre><code class=\"lang-cpp\" name=\"CreateInstanceAndUnwrap2#1\">using namespace System;\nusing namespace System::Reflection;\n\npublic ref class Worker : MarshalByRefObject\n{\npublic:\n    void PrintDomain() \n    { \n        Console::WriteLine(&quot;Object is executing in AppDomain \\&quot;{0}\\&quot;&quot;,\n            AppDomain::CurrentDomain-&gt;FriendlyName); \n    }\n};\n \nvoid main()\n{\n    // Create an ordinary instance in the current AppDomain\n    Worker^ localWorker = gcnew Worker();\n    localWorker-&gt;PrintDomain();\n \n    // Create a new application domain, create an instance\n    // of Worker in the application domain, and execute code\n    // there.\n    AppDomain^ ad = AppDomain::CreateDomain(&quot;New domain&quot;);\n    Worker^ remoteWorker = (Worker^) ad-&gt;CreateInstanceAndUnwrap(\n        Worker::typeid-&gt;Assembly-&gt;FullName,\n        &quot;Worker&quot;);\n    remoteWorker-&gt;PrintDomain();\n}\n\n/* This code produces output similar to the following:\n\nObject is executing in AppDomain &quot;source.exe&quot;\nObject is executing in AppDomain &quot;New domain&quot;\n */\n</code></pre><pre><code class=\"lang-cs\" name=\"CreateInstanceAndUnwrap2#1\">using System;\nusing System.Reflection;\n \npublic class Worker : MarshalByRefObject\n{\n    public void PrintDomain() \n    { \n        Console.WriteLine(&quot;Object is executing in AppDomain \\&quot;{0}\\&quot;&quot;,\n            AppDomain.CurrentDomain.FriendlyName); \n    }\n}\n \nclass Example\n{\n    public static void Main()\n    {\n        // Create an ordinary instance in the current AppDomain\n        Worker localWorker = new Worker();\n        localWorker.PrintDomain();\n \n        // Create a new application domain, create an instance\n        // of Worker in the application domain, and execute code\n        // there.\n        AppDomain ad = AppDomain.CreateDomain(&quot;New domain&quot;);\n        Worker remoteWorker = (Worker) ad.CreateInstanceAndUnwrap(\n            typeof(Worker).Assembly.FullName,\n            &quot;Worker&quot;);\n        remoteWorker.PrintDomain();\n    }\n}\n\n/* This code produces output similar to the following:\n\nObject is executing in AppDomain &quot;source.exe&quot;\nObject is executing in AppDomain &quot;New domain&quot;\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"CreateInstanceAndUnwrap2#1\">Imports System.Reflection\n\nPublic Class Worker\n    Inherits MarshalByRefObject\n    \n    Public Sub PrintDomain() \n        Console.WriteLine(&quot;Object is executing in AppDomain &quot;&quot;{0}&quot;&quot;&quot;, _\n            AppDomain.CurrentDomain.FriendlyName)\n    End Sub \nEnd Class \n\nClass Example\n    \n    Public Shared Sub Main() \n        &#39; Create an ordinary instance in the current AppDomain\n        Dim localWorker As New Worker()\n        localWorker.PrintDomain()\n        \n        &#39; Create a new application domain, create an instance\n        &#39; of Worker in the application domain, and execute code\n        &#39; there.\n        Dim ad As AppDomain = AppDomain.CreateDomain(&quot;New domain&quot;)\n        Dim remoteWorker As Worker = CType( _\n            ad.CreateInstanceAndUnwrap( _\n                GetType(Worker).Assembly.FullName, _\n                &quot;Worker&quot;), _\n            Worker)\n        remoteWorker.PrintDomain()\n    \n    End Sub \nEnd Class \n\n&#39; This code produces output similar to the following:\n&#39;\n&#39;Object is executing in AppDomain &quot;source.exe&quot;\n&#39;Object is executing in AppDomain &quot;New domain&quot;\n</code></pre><p> <strong>Example 2</strong>  </p>\n<p> The following example demonstrates a class derived from MarshalByRefObject that is used later in remoting.  </p>\n<pre><code class=\"lang-cpp\" name=\"RemotingServices.SetObjectUriForMarshal#1\">using namespace System;\nusing namespace System::Runtime::Remoting;\nusing namespace System::Security::Permissions;\n\npublic ref class SetObjectUriForMarshalTest\n{\npublic:\n   ref class TestClass: public MarshalByRefObject{};\n\n   [SecurityPermissionAttribute(SecurityAction::Demand, Flags=SecurityPermissionFlag::RemotingConfiguration)]   \n   static void Main()\n   {\n      TestClass^ obj = gcnew TestClass;\n      RemotingServices::SetObjectUriForMarshal( obj,  &quot;testUri&quot; );\n      RemotingServices::Marshal(obj);\n      Console::WriteLine( RemotingServices::GetObjectUri( obj ) );\n   }\n\n};\n</code></pre><pre><code class=\"lang-cs\" name=\"RemotingServices.SetObjectUriForMarshal#1\">using System;\nusing System.Runtime.Remoting;\nusing System.Security.Permissions;\n\npublic class SetObjectUriForMarshalTest  {\n\n    class TestClass : MarshalByRefObject {\n    }\n\n    [SecurityPermission(SecurityAction.Demand, Flags=SecurityPermissionFlag.RemotingConfiguration)] \n    public static void Main()  {\n\n        TestClass obj = new TestClass();    \n\n        RemotingServices.SetObjectUriForMarshal(obj, &quot;testUri&quot;);\n        RemotingServices.Marshal(obj);\n\n        Console.WriteLine(RemotingServices.GetObjectUri(obj));\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"RemotingServices.SetObjectUriForMarshal#1\">Imports System.Runtime.Remoting\nImports System.Security.Permissions\n\n\nPublic Class SetObjectUriForMarshalTest\n    \n    Class TestClass\n        Inherits MarshalByRefObject\n    End Class\n\n    &lt;SecurityPermission(SecurityAction.Demand, Flags:= SecurityPermissionFlag.RemotingConfiguration )&gt; _\n    Public Shared Sub Main()\n        Dim obj As TestClass = New TestClass()\n\n        RemotingServices.SetObjectUriForMarshal(obj, &quot;testUri&quot;)\n        RemotingServices.Marshal(obj)\n\n        Console.WriteLine(RemotingServices.GetObjectUri(obj))\n    End Sub\n\nEnd Class\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>An application domain is a partition in an operating system process where one or more applications reside. Objects in the same application domain communicate directly. Objects in different application domains communicate either by transporting copies of objects across application domain boundaries, or by using a proxy to exchange messages.  </p>\n<p> MarshalByRefObject is the base class for objects that communicate across application domain boundaries by exchanging messages using a proxy. Objects that do not inherit from MarshalByRefObject are implicitly marshal by value. When a remote application references a marshal by value object, a copy of the object is passed across application domain boundaries.  </p>\n<p> MarshalByRefObject objects are accessed directly within the boundaries of the local application domain. The first time an application in a remote application domain accesses a MarshalByRefObject, a proxy is passed to the remote application. Subsequent calls on the proxy are marshaled back to the object residing in the local application domain.  </p>\n<p> Types must inherit from MarshalByRefObject when the type is used across application domain boundaries, and the state of the object must not be copied because the members of the object are not usable outside the application domain where they were created.  </p>\n<p> When you derive an object from MarshalByRefObject for use across application domain boundaries, you should not override any of its members, nor should you call its methods directly. The runtime recognizes that classes derived from  MarshalByRefObject should be marshaled across app domain boundaries.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_MarshalByRefObject__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MarshalByRefObject()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected MarshalByRefObject ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_MarshalByRefObject_CreateObjRef_System_Type_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CreateObjRef(Type)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Creates an object that contains all the relevant information required to generate a proxy used to communicate with a remote object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual System.Runtime.Remoting.ObjRef CreateObjRef (Type requestedType);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>requestedType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of the object that the new <a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a> will reference.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.objref\" data-linktype=\"relative-path\">ObjRef</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>Information required to generate a proxy.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.remoting.remotingexception\" data-linktype=\"relative-path\">RemotingException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>This instance is not a valid remoting object.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The immediate caller does not have infrastructure permission.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>TheCreateObjRef method is called by remote object creation methods such as <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstance_\" data-linktype=\"relative-path\">CreateInstance</a> and <a class=\"xref\" href=\"system.appdomain#System_AppDomain_CreateInstanceAndUnwrap_\" data-linktype=\"relative-path\">CreateInstanceAndUnwrap</a>. In most cases, there is no need to override this method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_MarshalByRefObject_GetLifetimeService\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetLifetimeService()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Retrieves the current lifetime service object that controls the lifetime policy for this instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public object GetLifetimeService ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An object of type <a class=\"xref\" href=\"system.runtime.remoting.lifetime.ilease\" data-linktype=\"relative-path\">ILease</a> used to control the lifetime policy for this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The immediate caller does not have infrastructure permission.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>For more information about lifetime services, see the <a class=\"xref\" href=\"system.runtime.remoting.lifetime.lifetimeservices\" data-linktype=\"relative-path\">LifetimeServices</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_MarshalByRefObject_InitializeLifetimeService\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">InitializeLifetimeService()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Obtains a lifetime service object to control the lifetime policy for this instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual object InitializeLifetimeService ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An object of type <a class=\"xref\" href=\"system.runtime.remoting.lifetime.ilease\" data-linktype=\"relative-path\">ILease</a> used to control the lifetime policy for this instance. This is the current lifetime service object for this instance if one exists; otherwise, a new lifetime service object initialized to the value of the <span class=\"xref\">stem.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime*</span> property.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The immediate caller does not have infrastructure permission.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>For more information about lifetime services, see the <a class=\"xref\" href=\"system.runtime.remoting.lifetime.lifetimeservices\" data-linktype=\"relative-path\">LifetimeServices</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_MarshalByRefObject_MemberwiseClone_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MemberwiseClone(Boolean)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Creates a shallow copy of the current <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected MarshalByRefObject MemberwiseClone (bool cloneIdentity);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>cloneIdentity</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>false</code> to delete the current <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a> object&#39;s identity, which will cause the object to be assigned a new identity when it is marshaled across a remoting boundary. A value of <code>false</code> is usually appropriate. <code>true</code> to copy the current <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a> object&#39;s identity to its clone, which will cause remoting client calls to be routed to the remote server object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A shallow copy of the current <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The MemberwiseClone method creates a shallow copy by creating a new <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a> object, and then copying the nonstatic fields of the current <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a> object to the new object. If a field is a value type, a bit-by-bit copy of the field is performed. If a field is a reference type, the reference is copied but the referred object is not; therefore, the original object and its clone refer to the same object.  </p>\n<p> For example, consider a <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a> object called X that references objects A and B. Object B, in turn, references object C. A shallow copy of X creates new object X2 that also references objects A and B. In contrast, a deep copy of X creates a new object X2 that references the new objects A2 and B2, which are copies of A and B. B2, in turn, references the new object C2, which is a copy C. Use a class that implements the <a class=\"xref\" href=\"system.icloneable\" data-linktype=\"relative-path\">ICloneable</a> interface to perform a deep or shallow copy of an object.  </p>\n<p> The identity of a <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a> object is defined as the remote server object that is the target of a remoting client call. By default, the memberwise clone of a <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a> object has the same identity as the original object, which is typically not the correct behavior for clones of server-side objects that are marshaled across a remoting boundary to the client side. Specify <code>false</code>, which is usually appropriate, to delete the identity of the clone and cause a new identity to be assigned when the clone is marshaled across a remoting boundary, or <code>true</code> to cause the clone to retain the identity of the original <a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a> object. The MemberwiseClone method is intended to be used by developers implementing remote server objects.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.MarshalByRefObject.yml\">\r\n<meta name=\"APIName\" content=\"System.MarshalByRefObject\">\r\n<meta name=\"APIName\" content=\"System.MarshalByRefObject..ctor\">\r\n<meta name=\"APIName\" content=\"System.MarshalByRefObject.CreateObjRef\">\r\n<meta name=\"APIName\" content=\"System.MarshalByRefObject.GetLifetimeService\">\r\n<meta name=\"APIName\" content=\"System.MarshalByRefObject.InitializeLifetimeService\">\r\n<meta name=\"APIName\" content=\"System.MarshalByRefObject.MemberwiseClone\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"2d0392f4-1b8e-7876-d373-c928d7e7c6e5\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Enables access to objects across application domain boundaries in applications that support remoting.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.MarshalByRefObject\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.MarshalByRefObject.yml","open_to_public_contributors":false,"api_name":["System.MarshalByRefObject","System.MarshalByRefObject..ctor","System.MarshalByRefObject.CreateObjRef","System.MarshalByRefObject.GetLifetimeService","System.MarshalByRefObject.InitializeLifetimeService","System.MarshalByRefObject.MemberwiseClone"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.MarshalByRefObject","System::MarshalByRefObject","System.MarshalByRefObject.#ctor","System::MarshalByRefObject::#ctor","System.MarshalByRefObject.CreateObjRef","System::MarshalByRefObject::CreateObjRef","System.MarshalByRefObject.GetLifetimeService","System::MarshalByRefObject::GetLifetimeService","System.MarshalByRefObject.InitializeLifetimeService","System::MarshalByRefObject::InitializeLifetimeService","System.MarshalByRefObject.MemberwiseClone","System::MarshalByRefObject::MemberwiseClone"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"2d0392f4-1b8e-7876-d373-c928d7e7c6e5","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System/MarshalByRefObject.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"MarshalByRefObject class | Microsoft Docs","_op_ogTitle":"MarshalByRefObject class","description":"Enables access to objects across application domain boundaries in applications that support remoting.\n","toc_asset_id":"api/_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.MarshalByRefObject","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.marshalbyrefobject","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.marshalbyrefobject","fileRelativePath":"api/System.MarshalByRefObject.html"},"themesRelativePathToOutputRoot":"_themes/"}