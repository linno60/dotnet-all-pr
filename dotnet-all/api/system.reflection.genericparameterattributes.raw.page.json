{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">GenericParameterAttributes</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Describes the constraints on a generic type parameter of a generic type or method.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Flags]\npublic enum GenericParameterAttributes</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">GenericParameterAttributes</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.flagsattribute\" title=\"System.FlagsAttribute\" data-linktype=\"relative-path\">FlagsAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example defines a generic type <code>Test</code> with two type parameters. The second type parameter has a base class constraint and a reference type constraint. When the program executes, the constraints are examined using the <a class=\"xref\" href=\"system.type#System_Type_GenericParameterAttributes_\" data-linktype=\"relative-path\">GenericParameterAttributes</a> property and the <a class=\"xref\" href=\"system.type#System_Type_GetGenericParameterConstraints_\" data-linktype=\"relative-path\">GetGenericParameterConstraints</a> method.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Type.GetGenericParameterConstraints#1\">Imports System\nImports System.Reflection\n\n&#39; Define a sample interface to use as an interface constraint.\nPublic Interface ITest\nEnd Interface \n\n&#39; Define a base type to use as a base class constraint.\nPublic Class Base\nEnd Class \n\n&#39; Define the generic type to examine. The first generic type parameter,\n&#39; T, derives from the class Base and implements ITest. This demonstrates\n&#39; a base class constraint and an interface constraint. The second generic \n&#39; type parameter, U, must be a reference type (Class) and must have a \n&#39; default constructor (New). This demonstrates special constraints.\n&#39;\nPublic Class Test(Of T As {Base, ITest}, U As {New, Class}) \nEnd Class\n\n&#39; Define a type that derives from Base and implements ITtest. This type\n&#39; satisfies the constraints on T in class Test.\nPublic Class Derived\n    Inherits Base\n    Implements ITest\nEnd Class \n\nPublic Class Example\n    \n    Public Shared Sub Main() \n        &#39; To get the generic type definition, omit the type\n        &#39; arguments but retain the comma to indicate the number\n        &#39; of type arguments. \n        &#39;\n        Dim def As Type = GetType(Test(Of ,))\n        Console.WriteLine(vbCrLf &amp; &quot;Examining generic type {0}&quot;, def)\n        \n        &#39; Get the type parameters of the generic type definition,\n        &#39; and display them.\n        &#39;\n        Dim defparams() As Type = def.GetGenericArguments()\n        For Each tp As Type In defparams\n\n            Console.WriteLine(vbCrLf &amp; &quot;Type parameter: {0}&quot;, tp.Name)\n            Console.WriteLine(vbTab &amp; ListGenericParameterAttributes(tp))\n            \n            &#39; List the base class and interface constraints. The\n            &#39; constraints do not appear in any particular order. An\n            &#39; empty array is returned if there are no constraints.\n            &#39;\n            Dim tpConstraints As Type() = _\n                tp.GetGenericParameterConstraints()\n            For Each tpc As Type In  tpConstraints\n                Console.WriteLine(vbTab &amp; tpc.ToString())\n            Next tpc\n        Next tp\n    \n    End Sub \n    \n    &#39; List the variance and special constraint flags.\n    &#39;\n    Private Shared Function ListGenericParameterAttributes(ByVal t As Type) As String \n        Dim retval As String\n        Dim gpa As GenericParameterAttributes = t.GenericParameterAttributes\n\n        &#39; Select the variance flags.\n        Dim variance As GenericParameterAttributes = _\n            gpa And GenericParameterAttributes.VarianceMask\n        \n        If variance = GenericParameterAttributes.None Then\n            retval = &quot;No variance flag;&quot;\n        Else\n            If (variance And GenericParameterAttributes.Covariant) &lt;&gt; 0 Then\n                retval = &quot;Covariant;&quot;\n            Else\n                retval = &quot;Contravariant;&quot;\n            End If\n        End If \n\n        &#39; Select the constraint flags.\n        Dim constraints As GenericParameterAttributes = _\n            gpa And GenericParameterAttributes.SpecialConstraintMask\n        \n        If constraints = GenericParameterAttributes.None Then\n            retval &amp;= &quot; no special constraints.&quot;\n        Else\n            If (constraints And GenericParameterAttributes.ReferenceTypeConstraint) &lt;&gt; 0 Then\n                retval &amp;= &quot; ReferenceTypeConstraint&quot;\n            End If\n            If (constraints And GenericParameterAttributes.NotNullableValueTypeConstraint) &lt;&gt; 0 Then\n                retval &amp;= &quot; NotNullableValueTypeConstraint&quot;\n            End If\n            If (constraints And GenericParameterAttributes.DefaultConstructorConstraint) &lt;&gt; 0 Then\n                retval &amp;= &quot; DefaultConstructorConstraint&quot;\n            End If\n        End If \n        Return retval\n    \n    End Function \nEnd Class \n&#39; This example produces the following output:\n&#39;\n&#39;Examining generic type Test`2[T,U]\n&#39;\n&#39;Type parameter: T\n&#39;        No variance flag; no special constraints.\n&#39;        Base\n&#39;        ITest\n&#39;\n&#39;Type parameter: U\n&#39;        No variance flag; ReferenceTypeConstraint DefaultConstructorConstraint\n&#39; \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Type.GetGenericParameterConstraints#1\">using System;\nusing System.Reflection;\n\n// Define a sample interface to use as an interface constraint.\npublic interface ITest {}\n\n// Define a base type to use as a base class constraint.\npublic class Base {}\n\n// Define the generic type to examine. The first generic type parameter,\n// T, derives from the class Base and implements ITest. This demonstrates\n// a base class constraint and an interface constraint. The second generic \n// type parameter, U, must be a reference type (class) and must have a \n// default constructor (new()). This demonstrates special constraints.\n//\npublic class Test&lt;T,U&gt; \n    where T : Base, ITest \n    where U : class, new() {}\n\n// Define a type that derives from Base and implements ITest. This type\n// satisfies the constraints on T in class Test.\npublic class Derived : Base, ITest {}\n\npublic class Example\n{\n    public static void Main()\n    {\n        // To get the generic type definition, omit the type\n        // arguments but retain the comma to indicate the number\n        // of type arguments. \n        //\n        Type def = typeof(Test&lt;,&gt;);\n        Console.WriteLine(&quot;\\r\\nExamining generic type {0}&quot;, def);\n\n        // Get the type parameters of the generic type definition,\n        // and display them.\n        //\n        Type[] defparams = def.GetGenericArguments();\n        foreach (Type tp in defparams)\n        {\n            Console.WriteLine(&quot;\\r\\nType parameter: {0}&quot;, tp.Name);\n            Console.WriteLine(&quot;\\t{0}&quot;, \n                ListGenericParameterAttributes(tp));\n\n            // List the base class and interface constraints. The\n            // constraints are returned in no particular order. If \n            // there are no class or interface constraints, an empty\n            // array is returned.\n            //\n            Type[] tpConstraints = tp.GetGenericParameterConstraints();\n            foreach (Type tpc in tpConstraints)\n            {\n                Console.WriteLine(&quot;\\t{0}&quot;, tpc);\n            }\n        }\n    }\n\n    // List the variance and special constraint flags. \n    //\n    private static string ListGenericParameterAttributes(Type t)\n    {\n        string retval;\n        GenericParameterAttributes gpa = t.GenericParameterAttributes;\n        GenericParameterAttributes variance = gpa &amp; \n            GenericParameterAttributes.VarianceMask;\n\n        // Select the variance flags.\n        if (variance == GenericParameterAttributes.None)\n            retval = &quot;No variance flag;&quot;;\n        else\n        {\n            if ((variance &amp; GenericParameterAttributes.Covariant) != 0)\n                retval = &quot;Covariant;&quot;;\n            else\n                retval = &quot;Contravariant;&quot;;\n        }\n\n        // Select \n        GenericParameterAttributes constraints = gpa &amp; \n            GenericParameterAttributes.SpecialConstraintMask;\n\n        if (constraints == GenericParameterAttributes.None)\n            retval += &quot; No special constraints&quot;;\n        else\n        {\n            if ((constraints &amp; GenericParameterAttributes.ReferenceTypeConstraint) != 0)\n                retval += &quot; ReferenceTypeConstraint&quot;;\n            if ((constraints &amp; GenericParameterAttributes.NotNullableValueTypeConstraint) != 0)\n                retval += &quot; NotNullableValueTypeConstraint&quot;;\n            if ((constraints &amp; GenericParameterAttributes.DefaultConstructorConstraint) != 0)\n                retval += &quot; DefaultConstructorConstraint&quot;;\n        }\n\n        return retval;\n    }\n}\n/* This example produces the following output:\n\nExamining generic type Test`2[T,U]\n\nType parameter: T\n        No variance flag; no special constraints.\n        Base\n        ITest\n\nType parameter: U\n        No variance flag; ReferenceTypeConstraint DefaultConstructorConstraint\n */\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Type.GetGenericParameterConstraints#1\">using namespace System;\nusing namespace System::Collections;\nusing namespace System::Reflection;\n\n// Define a sample interface to use as an interface constraint.\ninterface class ITest{};\n\n// Define a base type to use as a class constraint.\npublic ref class Base{};\n\n// Define the generic type to examine. The first generic type parameter,\n// T, derives from the class Base and implements ITest. This demonstrates\n// a base class constraint and an interface constraint. In the .NET\n// Framework version 2.0, C++ has no way of expressing special constraints.\n// See the C# example code.\n//\ngeneric &lt;typename T, typename U&gt;\n   where T :  Base, ITest\nref class Test {};\n\n// Define a type that derives from Base and implements interface\n// ITest. This type satisfies the constraint on T in class Test.\npublic ref class Derived: public Base, public ITest {};\n\npublic ref class Example\n{\npublic:\n   static void Main()\n   {\n      // Create a constructed type from Test&lt;T,U&gt;, and from it\n      // get the generic type definition.\n      //\n      Type^ def = Test::typeid;\n      Console::WriteLine( L&quot;\\r\\nExamining generic type {0}&quot;, def );\n      \n      // Get the type parameters of the generic type definition,\n      // and display them.\n      //\n      for each (Type^ tp in def-&gt;GetGenericArguments())\n      {\n         Console::WriteLine( L&quot;\\r\\nType parameter: {0}&quot;, tp);\n         Console::WriteLine( L&quot;\\t{0}&quot;, \n            ListGenericParameterAttributes( tp ) );\n         \n         // List the base class and interface constraints. The\n         // constraints do not appear in any particular order. If\n         // there are no class or interface constraints, an empty\n         // array is returned.\n         //\n         for each (Type^ constraint in tp-&gt;GetGenericParameterConstraints())\n         {\n            Console::WriteLine( L&quot;\\t{0}&quot;, constraint );\n         }\n      }\n   }\n\nprivate:\n\n   // List the variance and special constraint flags. \n   //\n   static String^ ListGenericParameterAttributes( Type^ t )\n   {\n      String^ retval;\n      GenericParameterAttributes gpa = t-&gt;GenericParameterAttributes;\n\n      // Select the variance flag.\n      GenericParameterAttributes variance =\n         static_cast&lt;GenericParameterAttributes&gt;(\n            gpa &amp; GenericParameterAttributes::VarianceMask );\n\n      if ( variance == GenericParameterAttributes::None )\n            retval = L&quot;No variance flag;&quot;;\n      else\n      {\n         if ( (variance &amp; GenericParameterAttributes::Covariant) !=\n               GenericParameterAttributes::None )\n            retval = L&quot;Covariant;&quot;;\n         else\n            retval = L&quot;Contravariant;&quot;;\n      }\n\n      // Select the special constraint flags.\n      GenericParameterAttributes constraints =\n         static_cast&lt;GenericParameterAttributes&gt;(\n            gpa &amp; GenericParameterAttributes::SpecialConstraintMask);\n\n      if ( constraints == GenericParameterAttributes::None )\n            retval = String::Concat( retval, L&quot; No special constraints&quot; );\n      else\n      {\n         if ( (constraints &amp; GenericParameterAttributes::ReferenceTypeConstraint) !=\n               GenericParameterAttributes::None )\n            retval = String::Concat( retval, L&quot; ReferenceTypeConstraint&quot; );\n\n         if ( (constraints &amp; GenericParameterAttributes::NotNullableValueTypeConstraint) !=\n               GenericParameterAttributes::None )\n            retval = String::Concat( retval, L&quot; NotNullableValueTypeConstraint&quot; );\n\n         if ( (constraints &amp; GenericParameterAttributes::DefaultConstructorConstraint) !=\n               GenericParameterAttributes::None )\n            retval = String::Concat( retval, L&quot; DefaultConstructorConstraint&quot; );\n      }\n\n      return retval;\n   }\n};\n\nint main()\n{\n   Example::Main();\n}\n\n/* This example produces the following output:\n\nExamining generic type Test`2[T,U]\n\nType parameter: T\n        No variance flag; No special constraints\n        Base\n        ITest\n\nType parameter: U\n        No variance flag; No special constraints\n */\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The members of the GenericParameterAttributes enumeration are divided into two groups, the variance group and the special constraints group. To test a GenericParameterAttributes value for variance flags, first perform a bitwise AND operation with VarianceMask. If the result is None, there are no variance flags. Similarly, use SpecialConstraintMask to test for constraint flags.</p>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Reflection_GenericParameterAttributes_Contravariant\">\r\n      \t\t\t<span class=\"lang-csharp\">Contravariant</span>\r\n      \t</td>\r\n      \t<td><p>The generic type parameter is contravariant. A contravariant type parameter can appear as a parameter type in method signatures.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_GenericParameterAttributes_Covariant\">\r\n      \t\t\t<span class=\"lang-csharp\">Covariant</span>\r\n      \t</td>\r\n      \t<td><p>The generic type parameter is covariant. A covariant type parameter can appear as the result type of a method, the type of a read-only field, a declared base type, or an implemented interface.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_GenericParameterAttributes_DefaultConstructorConstraint\">\r\n      \t\t\t<span class=\"lang-csharp\">DefaultConstructorConstraint</span>\r\n      \t</td>\r\n      \t<td><p>A type can be substituted for the generic type parameter only if it has a parameterless constructor.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_GenericParameterAttributes_None\">\r\n      \t\t\t<span class=\"lang-csharp\">None</span>\r\n      \t</td>\r\n      \t<td><p>There are no special flags.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_GenericParameterAttributes_NotNullableValueTypeConstraint\">\r\n      \t\t\t<span class=\"lang-csharp\">NotNullableValueTypeConstraint</span>\r\n      \t</td>\r\n      \t<td><p>A type can be substituted for the generic type parameter only if it is a value type and is not nullable.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_GenericParameterAttributes_ReferenceTypeConstraint\">\r\n      \t\t\t<span class=\"lang-csharp\">ReferenceTypeConstraint</span>\r\n      \t</td>\r\n      \t<td><p>A type can be substituted for the generic type parameter only if it is a reference type.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_GenericParameterAttributes_SpecialConstraintMask\">\r\n      \t\t\t<span class=\"lang-csharp\">SpecialConstraintMask</span>\r\n      \t</td>\r\n      \t<td><p>Selects the combination of all special constraint flags. This value is the result of using logical OR to combine the following flags: DefaultConstructorConstraint, ReferenceTypeConstraint, and NotNullableValueTypeConstraint.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_GenericParameterAttributes_VarianceMask\">\r\n      \t\t\t<span class=\"lang-csharp\">VarianceMask</span>\r\n      \t</td>\r\n      \t<td><p>Selects the combination of all variance flags. This value is the result of using logical OR to combine the following flags: Contravariant and Covariant.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Reflection.GenericParameterAttributes.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.GenericParameterAttributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.GenericParameterAttributes.Contravariant\">\r\n<meta name=\"APIName\" content=\"System.Reflection.GenericParameterAttributes.Covariant\">\r\n<meta name=\"APIName\" content=\"System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint\">\r\n<meta name=\"APIName\" content=\"System.Reflection.GenericParameterAttributes.None\">\r\n<meta name=\"APIName\" content=\"System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint\">\r\n<meta name=\"APIName\" content=\"System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint\">\r\n<meta name=\"APIName\" content=\"System.Reflection.GenericParameterAttributes.SpecialConstraintMask\">\r\n<meta name=\"APIName\" content=\"System.Reflection.GenericParameterAttributes.VarianceMask\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:59 PM\">\r\n<meta name=\"document_id\" content=\"a410934d-cd67-95ef-fc99-75e302994953\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Describes the constraints on a generic type parameter of a generic type or method.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.reflection/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.GenericParameterAttributes\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","uhfHeaderId":"MSDocsHeader-DotNet","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Reflection.GenericParameterAttributes.yml","open_to_public_contributors":false,"api_name":["System.Reflection.GenericParameterAttributes","System.Reflection.GenericParameterAttributes.Contravariant","System.Reflection.GenericParameterAttributes.Covariant","System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint","System.Reflection.GenericParameterAttributes.None","System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint","System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint","System.Reflection.GenericParameterAttributes.SpecialConstraintMask","System.Reflection.GenericParameterAttributes.VarianceMask"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.GenericParameterAttributes","System::Reflection::GenericParameterAttributes","System.Reflection.GenericParameterAttributes.Contravariant","System::Reflection::GenericParameterAttributes::Contravariant","System.Reflection.GenericParameterAttributes.Covariant","System::Reflection::GenericParameterAttributes::Covariant","System.Reflection.GenericParameterAttributes.DefaultConstructorConstraint","System::Reflection::GenericParameterAttributes::DefaultConstructorConstraint","System.Reflection.GenericParameterAttributes.None","System::Reflection::GenericParameterAttributes::None","System.Reflection.GenericParameterAttributes.NotNullableValueTypeConstraint","System::Reflection::GenericParameterAttributes::NotNullableValueTypeConstraint","System.Reflection.GenericParameterAttributes.ReferenceTypeConstraint","System::Reflection::GenericParameterAttributes::ReferenceTypeConstraint","System.Reflection.GenericParameterAttributes.SpecialConstraintMask","System::Reflection::GenericParameterAttributes::SpecialConstraintMask","System.Reflection.GenericParameterAttributes.VarianceMask","System::Reflection::GenericParameterAttributes::VarianceMask"],"dev_langs":["csharp"],"updated_at":"2017-04-01 05:59 PM","document_id":"a410934d-cd67-95ef-fc99-75e302994953","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Reflection/GenericParameterAttributes.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"GenericParameterAttributes enum | Microsoft Docs","_op_ogTitle":"GenericParameterAttributes enum","description":"Describes the constraints on a generic type parameter of a generic type or method.\n","toc_asset_id":"api/_splitted/System.Reflection/toc.json","toc_rel":"_splitted/System.Reflection/toc.json","source_url":"","ms.assetid":"System.Reflection.GenericParameterAttributes","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.genericparameterattributes","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.genericparameterattributes","fileRelativePath":"api/System.Reflection.GenericParameterAttributes.html"},"themesRelativePathToOutputRoot":"_themes/"}