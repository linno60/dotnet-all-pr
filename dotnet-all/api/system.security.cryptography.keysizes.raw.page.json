{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">KeySizes</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Determines the set of valid key sizes for the symmetric cryptographic algorithms.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class KeySizes</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span></div><span class=\"lang-csharp\">KeySizes</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example shows the use of members of the KeySizes class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.KeySizes#1\">using System;\nusing System.Security.Cryptography;\n\nnamespace Contoso\n{\n    class KeySizesMembers\n    {\n        [STAThread]\n        static void Main(string[] args)\n        {\n            // Initializes a new instance of the KeySizes class with the\n            // specified key values.\n            int minSize = 64;\n            int maxSize = 1024;\n            int skipSize = 64;\n            KeySizes keySizes = new KeySizes(minSize, maxSize, skipSize);\n\n            // Show the values of the keys.\n            ShowKeys(new KeySizes[1]{keySizes}, &quot;Custom Keys&quot;);\n\n            // Create a new symmetric algorithm and display its key values.\n            SymmetricAlgorithm rijn = SymmetricAlgorithm.Create();\n            ShowKeys(rijn.LegalKeySizes, rijn.ToString());\n            Console.WriteLine(&quot;rijn.blocksize:&quot; + rijn.BlockSize);\n\n            // Create a new RSA algorithm and display its key values.\n            RSACryptoServiceProvider rsaCSP = \n                new RSACryptoServiceProvider(384);\n            ShowKeys(rsaCSP.LegalKeySizes, rsaCSP.ToString());\n            Console.WriteLine(&quot;RSACryptoServiceProvider KeySize = &quot; + \n                rsaCSP.KeySize);\n\n            Console.WriteLine(&quot;This sample completed successfully; &quot; +\n                &quot;press Enter to exit.&quot;);\n            Console.ReadLine();\n        }\n\n        // Display specified KeySize properties to the console.\n        private static void ShowKeys(KeySizes[] keySizes, string objectName)\n        {\n            // Retrieve the first KeySizes in the array.\n            KeySizes firstKeySize = keySizes[0];\n\n            // Retrieve the minimum key size in bits.\n            int minKeySize = firstKeySize.MinSize;\n                \n            // Retrieve the maximum key size in bits.\n            int maxKeySize = firstKeySize.MaxSize;\n                \n            // Retrieve the interval between valid key size in bits.\n            int skipKeySize = firstKeySize.SkipSize;\n\n            Console.Write(&quot;\\n KeySizes retrieved from the &quot;);\n            Console.WriteLine(objectName + &quot; object.&quot;);\n            Console.WriteLine(&quot;Minimum key size bits: &quot; + minKeySize);\n            Console.WriteLine(&quot;Maximum key size bits: &quot; + maxKeySize);\n            Console.WriteLine(&quot;Interval between key size bits: &quot; + \n                skipKeySize);\n        }\n\t}\n}\n//\n// This sample produces the following output:\n//\n// KeySizes retrieved from the Custom Keys object.\n// Minimum key size bits: 64\n// Maximum key size bits: 1024\n// Interval between key size bits: 64\n// \n// KeySizes retrieved from the System.Security.Cryptography.RijndaelManaged\n// object.\n// Minimum key size bits: 128\n// Maximum key size bits: 256\n// Interval between key size bits: 64\n// rijn.blocksize:128\n// \n// KeySizes retrieved from the\n// System.Security.Cryptography.RSACryptoServiceProvider object.\n// Minimum key size bits: 384\n// Maximum key size bits: 16384\n// Interval between key size bits: 8\n// RSACryptoServiceProvider KeySize = 384\n// This sample completed successfully; press Enter to exit.\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.KeySizes#1\">\nusing namespace System;\nusing namespace System::Security::Cryptography;\n\nnamespace CryptographySample\n{\n    ref class KeySizesMembers\n    {\n    public:\n        static void Work()\n        {\n            // Initializes a new instance of the KeySizes class \n            // with the specified key values.\n            int minSize = 64;\n            int maxSize = 1024;\n            int skipSize = 64;\n            KeySizes^ keySizes = \n                gcnew KeySizes(minSize, maxSize, skipSize);\n\n            // Show the values of the keys.\n            ShowKeys(gcnew array&lt;KeySizes^&gt;(1) {keySizes},\n                &quot;Custom Keys&quot;);\n                 \n            // Create a new symmetric algorithm and display its \n            // key values.\n            SymmetricAlgorithm^ symAlg = \n                SymmetricAlgorithm::Create();\n            ShowKeys(symAlg-&gt;LegalKeySizes, symAlg-&gt;ToString());\n            Console::WriteLine(&quot;rijn.blocksize:{0}&quot;, \n                    symAlg-&gt;BlockSize);\n\n            // Create a new RSA algorithm and display its key values.\n            RSACryptoServiceProvider^ rsaCSP = \n                   gcnew RSACryptoServiceProvider(384);\n            ShowKeys(rsaCSP-&gt;LegalKeySizes, rsaCSP-&gt;ToString());\n            Console::WriteLine(&quot;RSACryptoServiceProvider KeySize =&quot;\n                &quot; {0}&quot;,\n                    rsaCSP-&gt;KeySize);\n\n            Console::WriteLine(&quot;This sample completed successfully; &quot; \n                   &quot;press Enter to exit.&quot;);\n            Console::ReadLine();\n        }\n\n    private:\n        // Display specified KeySize properties to the console.\n        static void ShowKeys(array &lt;KeySizes^&gt;^ keySizes,\n            String^ objectName)\n        {\n            // Retrieve the first KeySizes in the array.\n            KeySizes^ firstKeySize = keySizes[0];\n\n            // Retrieve the minimum key size in bits.\n            int minKeySize = firstKeySize-&gt;MinSize;\n\n            // Retrieve the maximum key size in bits.\n            int maxKeySize = firstKeySize-&gt;MaxSize;\n\n            // Retrieve the interval between valid key size in bits.\n            int skipKeySize = firstKeySize-&gt;SkipSize;\n\n            Console::Write(&quot;\\n KeySizes retrieved from the &quot;);\n            Console::WriteLine(&quot;{0} object.&quot;, objectName);\n            Console::WriteLine(&quot;Minimum key size bits: {0}&quot;, \n                minKeySize);\n            Console::WriteLine(&quot;Maximum key size bits: {0}&quot;, \n                maxKeySize);\n            Console::WriteLine(&quot;Interval between key size bits: {0}&quot;, \n                skipKeySize);            \n        }\n    };\n}\n\nusing namespace CryptographySample;\n\nint main()\n{\n    KeySizesMembers::Work();\n}\n//\n// This sample produces the following output:\n//\n// KeySizes retrieved from the Custom Keys object.\n// Minimum key size bits: 64\n// Maximum key size bits: 1024\n// Interval between key size bits: 64\n// \n// KeySizes retrieved from the \n//  System.Security.Cryptography.RijndaelManaged object.\n// Minimum key size bits: 128\n// Maximum key size bits: 256\n// Interval between key size bits: 64\n// rijn.blocksize:128\n// \n// KeySizes retrieved from the\n// System.Security.Cryptography.RSACryptoServiceProvider object.\n// Minimum key size bits: 384\n// Maximum key size bits: 16384\n// Interval between key size bits: 8\n// RSACryptoServiceProvider KeySize = 384\n// This sample completed successfully; press Enter to exit.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.KeySizes#1\">Imports System\nImports System.Security.Cryptography\n\nPublic Class Form1\n    Inherits System.Windows.Forms.Form\n\n    &#39; Event handler for Run button.\n    Private Sub Button1_Click( _\n        ByVal sender As System.Object, _\n        ByVal e As System.EventArgs) Handles Button1.Click\n\n        tbxOutput.Cursor = Cursors.WaitCursor\n        tbxOutput.Text = &quot;&quot;\n\n        &#39; Initializes a new instance of the KeySizes class with the\n        &#39; specified key values.\n        Dim MinSize As Integer = 64\n        Dim MaxSize As Integer = 1024\n        Dim SkipSize As Integer = 64\n        Dim keySizes As New KeySizes(MinSize, MaxSize, SkipSize)\n\n        &#39; Show the values of the keys.\n        ShowKeys(New KeySizes(0) {keySizes}, &quot;Custom Keys&quot;)\n\n        &#39; Create a new symmetric algorithm and display its key values.\n        Dim rijn As SymmetricAlgorithm = SymmetricAlgorithm.Create()\n        WriteLine(&quot;rijn.blocksize:&quot; + rijn.BlockSize.ToString())\n        ShowKeys(rijn.LegalKeySizes, rijn.ToString())\n\n        &#39; Create a new RSA algorithm and display its key values.\n        Dim rsaCSP As New RSACryptoServiceProvider(384)\n        WriteLine(&quot;RSACryptoServiceProvider KeySize = &quot; + _\n            rsaCSP.KeySize.ToString())\n        ShowKeys(rsaCSP.LegalKeySizes, rsaCSP.ToString())\n\n        &#39; Reset the cursor and conclude application.\n        WriteLine(&quot;This sample completed successfully;&quot; + _\n            &quot; press Exit to continue.&quot;)\n        tbxOutput.Cursor = Cursors.Default\n    End Sub\n\n    &#39; Display specified KeySize properties to output textbox.\n    Private Sub ShowKeys( _\n        ByVal KeySizes() As KeySizes, _\n        ByVal objectName As String)\n\n        &#39; Retrieve the first KeySizes in the array.\n        Dim firstKeySize As KeySizes = KeySizes(0)\n\n        &#39; Retrieve the minimum key size in bits.\n        Dim minKeySize As Integer = firstKeySize.MinSize\n\n        &#39; Retrieve the maximum key size in bits.\n        Dim maxKeySize As Integer = firstKeySize.MaxSize\n\n        &#39; Retrieve the interval between valid key size in bits.\n        Dim skipKeySize As Integer = firstKeySize.SkipSize\n\n        WriteLine(&quot;KeySizes retrieved from the &quot; + objectName + &quot; object.&quot;)\n        WriteLine(&quot;Minimum key size bits: &quot; + minKeySize.ToString())\n        WriteLine(&quot;Maximum key size bits: &quot; + maxKeySize.ToString())\n        WriteLine(&quot;Interval between key size bits: &quot; + skipKeySize.ToString())\n        WriteLine(&quot;&quot;)\n    End Sub\n    &#39; Display the message to the textbox with a carriage return and line feed.\n    Private Sub WriteLine(ByVal message As String)\n        tbxOutput.AppendText(message + vbCrLf)\n    End Sub\n    &#39; Event handler for Exit button.\n    Private Sub Button2_Click( _\n        ByVal sender As System.Object, _\n        ByVal e As System.EventArgs) Handles Button2.Click\n\n        Application.Exit()\n    End Sub\n#Region &quot; Windows Form Designer generated code &quot;\n\n    Public Sub New()\n        MyBase.New()\n\n        &#39;This call is required by the Windows Form Designer.\n        InitializeComponent()\n\n        &#39;Add any initialization after the InitializeComponent() call\n\n    End Sub\n\n    &#39;Form overrides dispose to clean up the component list.\n    Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)\n        If disposing Then\n            If Not (components Is Nothing) Then\n                components.Dispose()\n            End If\n        End If\n        MyBase.Dispose(disposing)\n    End Sub\n\n    &#39;Required by the Windows Form Designer\n    Private components As System.ComponentModel.IContainer\n\n    &#39;NOTE: The following procedure is required by the Windows Form Designer\n    &#39;It can be modified using the Windows Form Designer.  \n    &#39;Do not modify it using the code editor.\n    Friend WithEvents Panel2 As System.Windows.Forms.Panel\n    Friend WithEvents Panel1 As System.Windows.Forms.Panel\n    Friend WithEvents Button1 As System.Windows.Forms.Button\n    Friend WithEvents Button2 As System.Windows.Forms.Button\n    Friend WithEvents tbxOutput As System.Windows.Forms.RichTextBox\n    &lt;System.Diagnostics.DebuggerStepThrough()&gt; _\n    Private Sub InitializeComponent()\n        Me.Panel2 = New System.Windows.Forms.Panel\n        Me.Button1 = New System.Windows.Forms.Button\n        Me.Button2 = New System.Windows.Forms.Button\n        Me.Panel1 = New System.Windows.Forms.Panel\n        Me.tbxOutput = New System.Windows.Forms.RichTextBox\n        Me.Panel2.SuspendLayout()\n        Me.Panel1.SuspendLayout()\n        Me.SuspendLayout()\n        &#39;\n        &#39;Panel2\n        &#39;\n        Me.Panel2.Controls.Add(Me.Button1)\n        Me.Panel2.Controls.Add(Me.Button2)\n        Me.Panel2.Dock = System.Windows.Forms.DockStyle.Bottom\n        Me.Panel2.DockPadding.All = 20\n        Me.Panel2.Location = New System.Drawing.Point(0, 320)\n        Me.Panel2.Name = &quot;Panel2&quot;\n        Me.Panel2.Size = New System.Drawing.Size(616, 64)\n        Me.Panel2.TabIndex = 1\n        &#39;\n        &#39;Button1\n        &#39;\n        Me.Button1.Dock = System.Windows.Forms.DockStyle.Right\n        Me.Button1.Font = New System.Drawing.Font(&quot;Microsoft Sans Serif&quot;, _\n            9.0!, _\n            System.Drawing.FontStyle.Regular, _\n            System.Drawing.GraphicsUnit.Point, _\n            CType(0, Byte))\n        Me.Button1.Location = New System.Drawing.Point(446, 20)\n        Me.Button1.Name = &quot;Button1&quot;\n        Me.Button1.Size = New System.Drawing.Size(75, 24)\n        Me.Button1.TabIndex = 2\n        Me.Button1.Text = &quot;&amp;Run&quot;\n        &#39;\n        &#39;Button2\n        &#39;\n        Me.Button2.Dock = System.Windows.Forms.DockStyle.Right\n        Me.Button2.Font = New System.Drawing.Font(&quot;Microsoft Sans Serif&quot;, _\n            9.0!, _\n            System.Drawing.FontStyle.Regular, _\n            System.Drawing.GraphicsUnit.Point, _\n            CType(0, Byte))\n        Me.Button2.Location = New System.Drawing.Point(521, 20)\n        Me.Button2.Name = &quot;Button2&quot;\n        Me.Button2.Size = New System.Drawing.Size(75, 24)\n        Me.Button2.TabIndex = 3\n        Me.Button2.Text = &quot;E&amp;xit&quot;\n        &#39;\n        &#39;Panel1\n        &#39;\n        Me.Panel1.Controls.Add(Me.tbxOutput)\n        Me.Panel1.Dock = System.Windows.Forms.DockStyle.Fill\n        Me.Panel1.DockPadding.All = 20\n        Me.Panel1.Location = New System.Drawing.Point(0, 0)\n        Me.Panel1.Name = &quot;Panel1&quot;\n        Me.Panel1.Size = New System.Drawing.Size(616, 320)\n        Me.Panel1.TabIndex = 2\n        &#39;\n        &#39;tbxOutput\n        &#39;\n        Me.tbxOutput.AccessibleDescription = _\n            &quot;Displays output from application.&quot;\n        Me.tbxOutput.AccessibleName = &quot;Output textbox.&quot;\n        Me.tbxOutput.Dock = System.Windows.Forms.DockStyle.Fill\n        Me.tbxOutput.Location = New System.Drawing.Point(20, 20)\n        Me.tbxOutput.Name = &quot;tbxOutput&quot;\n        Me.tbxOutput.Size = New System.Drawing.Size(576, 280)\n        Me.tbxOutput.TabIndex = 1\n        Me.tbxOutput.Text = &quot;Click the Run button to run the application.&quot;\n        &#39;\n        &#39;Form1\n        &#39;\n        Me.AutoScaleBaseSize = New System.Drawing.Size(6, 15)\n        Me.ClientSize = New System.Drawing.Size(616, 384)\n        Me.Controls.Add(Me.Panel1)\n        Me.Controls.Add(Me.Panel2)\n        Me.Name = &quot;Form1&quot;\n        Me.Text = &quot;KeySizes&quot;\n        Me.Panel2.ResumeLayout(False)\n        Me.Panel1.ResumeLayout(False)\n        Me.ResumeLayout(False)\n\n    End Sub\n\n#End Region\nEnd Class\n&#39;\n&#39; This sample produces the following output:\n&#39;\n&#39; KeySizes retrieved from the Custom Keys object.\n&#39; Minimum key size bits: 64\n&#39; Maximum key size bits: 1024\n&#39; Interval between key size bits: 64\n&#39; \n&#39; rijn.blocksize:128\n&#39; KeySizes retrieved from the System.Security.Cryptography.RijndaelManaged\n&#39; object.\n&#39; Minimum key size bits: 128\n&#39; Maximum key size bits: 256\n&#39; Interval between key size bits: 64\n&#39; \n&#39; RSACryptoServiceProvider KeySize = 384\n&#39; KeySizes retrieved from the\n&#39; System.Security.Cryptography.RSACryptoServiceProvider object.\n&#39; Minimum key size bits: 384\n&#39; Maximum key size bits: 16384\n&#39; Interval between key size bits: 8\n&#39; \n&#39; This sample completed successfully; press Exit to continue.\n</code></pre>\r\n  \r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_KeySizes__ctor_System_Int32_System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">KeySizes(Int32,Int32,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.keysizes\" data-linktype=\"relative-path\">KeySizes</a> class with the specified key values.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public KeySizes (int minSize, int maxSize, int skipSize);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>minSize</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The minimum valid key size.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>maxSize</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The maximum valid key size.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>skipSize</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The interval between valid key sizes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_KeySizes_MaxSize\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MaxSize</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Specifies the maximum key size in bits.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int MaxSize { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The maximum key size in bits.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_KeySizes_MinSize\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MinSize</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Specifies the minimum key size in bits.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int MinSize { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The minimum key size in bits.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_KeySizes_SkipSize\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SkipSize</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Specifies the interval between valid key sizes in bits.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int SkipSize { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The interval between valid key sizes in bits.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.KeySizes.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.KeySizes\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.KeySizes..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.KeySizes.MaxSize\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.KeySizes.MinSize\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.KeySizes.SkipSize\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-24 01:41 AM\">\r\n<meta name=\"document_id\" content=\"6f58a6e8-21bb-0fc7-fc7c-f0a2ef4d25b2\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Determines the set of valid key sizes for the symmetric cryptographic algorithms.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.security.cryptography/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.KeySizes\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.KeySizes.yml","open_to_public_contributors":false,"api_name":["System.Security.Cryptography.KeySizes","System.Security.Cryptography.KeySizes..ctor","System.Security.Cryptography.KeySizes.MaxSize","System.Security.Cryptography.KeySizes.MinSize","System.Security.Cryptography.KeySizes.SkipSize"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.KeySizes","System::Security::Cryptography::KeySizes","System.Security.Cryptography.KeySizes.#ctor","System::Security::Cryptography::KeySizes::#ctor","System.Security.Cryptography.KeySizes.MaxSize","System::Security::Cryptography::KeySizes::MaxSize","System.Security.Cryptography.KeySizes.MinSize","System::Security::Cryptography::KeySizes::MinSize","System.Security.Cryptography.KeySizes.SkipSize","System::Security::Cryptography::KeySizes::SkipSize"],"dev_langs":["csharp"],"updated_at":"2017-03-24 01:41 AM","document_id":"6f58a6e8-21bb-0fc7-fc7c-f0a2ef4d25b2","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/KeySizes.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"KeySizes class | Microsoft Docs","_op_ogTitle":"KeySizes class","description":"Determines the set of valid key sizes for the symmetric cryptographic algorithms.\n","toc_asset_id":"api/_splitted/System.Security.Cryptography/toc.json","toc_rel":"_splitted/System.Security.Cryptography/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.KeySizes","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.keysizes","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.keysizes","fileRelativePath":"api/System.Security.Cryptography.KeySizes.html"},"themesRelativePathToOutputRoot":"_themes/"}