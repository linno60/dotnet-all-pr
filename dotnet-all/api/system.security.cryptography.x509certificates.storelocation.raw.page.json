{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">StoreLocation</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies the location of the X.509 certificate store.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public enum StoreLocation</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">StoreLocation</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example opens an X.509 certificate store, adds and deletes certificates, and then closes the store. It assumes you have three certificates to add to and remove from a local store.  </p>\n<pre><code class=\"lang-cs\" name=\"x509store2#1\">using System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.X509Certificates;\nusing System.IO;\n\npublic class X509store2\n{\n\tpublic static void Main (string[] args)\n\t{\n\t\t//Create new X509 store called teststore from the local certificate store.\n\t\tX509Store store = new X509Store (&quot;teststore&quot;, StoreLocation.CurrentUser);\n\t\tstore.Open (OpenFlags.ReadWrite);\n\t\tX509Certificate2 certificate = new X509Certificate2 ();\n\n\t\t//Create certificates from certificate files.\n\t\t//You must put in a valid path to three certificates in the following constructors.\n\t\tX509Certificate2 certificate1 = new X509Certificate2 (&quot;c:\\\\mycerts\\\\*****.cer&quot;);\n\t\tX509Certificate2 certificate2 = new X509Certificate2 (&quot;c:\\\\mycerts\\\\*****.cer&quot;);\n\t\tX509Certificate2 certificate5 = new X509Certificate2 (&quot;c:\\\\mycerts\\\\*****.cer&quot;);\n\n\t\t//Create a collection and add two of the certificates.\n\t\tX509Certificate2Collection collection = new X509Certificate2Collection ();\n\t\tcollection.Add (certificate2);\n\t\tcollection.Add (certificate5);\n\n\t\t//Add certificates to the store.\n\t\tstore.Add (certificate1);\n\t\tstore.AddRange (collection);\n\n\t\tX509Certificate2Collection storecollection = (X509Certificate2Collection)store.Certificates;\n\t\tConsole.WriteLine (&quot;Store name: {0}&quot;, store.Name);\n\t\tConsole.WriteLine (&quot;Store location: {0}&quot;, store.Location);\n\t\tforeach (X509Certificate2 x509 in storecollection)\n\t\t{\n\t\t\tConsole.WriteLine(&quot;certificate name: {0}&quot;,x509.Subject);\n\t\t}\n\n\t\t//Remove a certificate.\n\t\tstore.Remove (certificate1);\n\t\tX509Certificate2Collection storecollection2 = (X509Certificate2Collection)store.Certificates;\n\t\tConsole.WriteLine (&quot;{1}Store name: {0}&quot;, store.Name, Environment.NewLine);\n\t\tforeach (X509Certificate2 x509 in storecollection2)\n\t\t{\n\t\t\tConsole.WriteLine (&quot;certificate name: {0}&quot;, x509.Subject);\n\t\t}\n\n\t\t//Remove a range of certificates.\n\t\tstore.RemoveRange (collection);\n\t\tX509Certificate2Collection storecollection3 = (X509Certificate2Collection)store.Certificates;\n\t\tConsole.WriteLine (&quot;{1}Store name: {0}&quot;, store.Name, Environment.NewLine);\n\t\tif (storecollection3.Count == 0)\n\t\t{\n\t\t\tConsole.WriteLine (&quot;Store contains no certificates.&quot;);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tforeach (X509Certificate2 x509 in storecollection3)\n\t\t\t{\n\t\t\t\tConsole.WriteLine (&quot;certificate name: {0}&quot;, x509.Subject);\n\t\t\t}\n\t\t}\n\n\t\t//Close the store.\n\t\tstore.Close ();\n\t}\t\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"x509store2#1\">#using &lt;System.dll&gt;\n#using &lt;System.Security.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::X509Certificates;\nusing namespace System::IO;\nint main()\n{\n   \n   //Create new X509 store called teststore from the local certificate store.\n   X509Store ^ store = gcnew X509Store( &quot;teststore&quot;,StoreLocation::CurrentUser );\n   store-&gt;Open( OpenFlags::ReadWrite );\n   X509Certificate2 ^ certificate = gcnew X509Certificate2;\n   \n   //Create certificates from certificate files.\n   //You must put in a valid path to three certificates in the following constructors.\n   X509Certificate2 ^ certificate1 = gcnew X509Certificate2( &quot;c:\\\\mycerts\\\\*****.cer&quot; );\n   X509Certificate2 ^ certificate2 = gcnew X509Certificate2( &quot;c:\\\\mycerts\\\\*****.cer&quot; );\n   X509Certificate2 ^ certificate5 = gcnew X509Certificate2( &quot;c:\\\\mycerts\\\\*****.cer&quot; );\n   \n   //Create a collection and add two of the certificates.\n   X509Certificate2Collection ^ collection = gcnew X509Certificate2Collection;\n   collection-&gt;Add( certificate2 );\n   collection-&gt;Add( certificate5 );\n   \n   //Add certificates to the store.\n   store-&gt;Add( certificate1 );\n   store-&gt;AddRange( collection );\n   X509Certificate2Collection ^ storecollection = dynamic_cast&lt;X509Certificate2Collection^&gt;(store-&gt;Certificates);\n   Console::WriteLine( &quot;Store name: {0}&quot;, store-&gt;Name );\n   Console::WriteLine( &quot;Store location: {0}&quot;, store-&gt;Location );\n   System::Collections::IEnumerator^ myEnum = storecollection-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      X509Certificate2 ^ x509 = safe_cast&lt;X509Certificate2 ^&gt;(myEnum-&gt;Current);\n      Console::WriteLine( &quot;certificate name: {0}&quot;, x509-&gt;Subject );\n   }\n\n   \n   //Remove a certificate.\n   store-&gt;Remove( certificate1 );\n   X509Certificate2Collection ^ storecollection2 = dynamic_cast&lt;X509Certificate2Collection^&gt;(store-&gt;Certificates);\n   Console::WriteLine( &quot;{1}Store name: {0}&quot;, store-&gt;Name, Environment::NewLine );\n   System::Collections::IEnumerator^ myEnum1 = storecollection2-&gt;GetEnumerator();\n   while ( myEnum1-&gt;MoveNext() )\n   {\n      X509Certificate2 ^ x509 = safe_cast&lt;X509Certificate2 ^&gt;(myEnum1-&gt;Current);\n      Console::WriteLine( &quot;certificate name: {0}&quot;, x509-&gt;Subject );\n   }\n\n   \n   //Remove a range of certificates.\n   store-&gt;RemoveRange( collection );\n   X509Certificate2Collection ^ storecollection3 = dynamic_cast&lt;X509Certificate2Collection^&gt;(store-&gt;Certificates);\n   Console::WriteLine( &quot;{1}Store name: {0}&quot;, store-&gt;Name, Environment::NewLine );\n   if ( storecollection3-&gt;Count == 0 )\n   {\n      Console::WriteLine( &quot;Store contains no certificates.&quot; );\n   }\n   else\n   {\n      System::Collections::IEnumerator^ myEnum2 = storecollection3-&gt;GetEnumerator();\n      while ( myEnum2-&gt;MoveNext() )\n      {\n         X509Certificate2 ^ x509 = safe_cast&lt;X509Certificate2 ^&gt;(myEnum2-&gt;Current);\n         Console::WriteLine( &quot;certificate name: {0}&quot;, x509-&gt;Subject );\n      }\n   }\n\n   \n   //Close the store.\n   store-&gt;Close();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"x509store2#1\">Imports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.X509Certificates\nImports System.IO\n\n\n\nClass X509store2\n\n    Shared Sub Main(ByVal args() As String)\n        &#39;Create new X509 store called teststore from the local certificate store.\n        Dim store As New X509Store(&quot;teststore&quot;, StoreLocation.CurrentUser)\n        store.Open(OpenFlags.ReadWrite)\n        Dim certificate As New X509Certificate2()\n\n        &#39;Create certificates from certificate files.\n        &#39;You must put in a valid path to three certificates in the following constructors.\n        Dim certificate1 As New X509Certificate2(&quot;c:\\mycerts\\*****.cer&quot;)\n        Dim certificate2 As New X509Certificate2(&quot;c:\\mycerts\\*****.cer&quot;)\n        Dim certificate5 As New X509Certificate2(&quot;c:\\mycerts\\*****.cer&quot;)\n\n        &#39;Create a collection and add two of the certificates.\n        Dim collection As New X509Certificate2Collection()\n        collection.Add(certificate2)\n        collection.Add(certificate5)\n\n        &#39;Add certificates to the store.\n        store.Add(certificate1)\n        store.AddRange(collection)\n\n        Dim storecollection As X509Certificate2Collection = CType(store.Certificates, X509Certificate2Collection)\n        Console.WriteLine(&quot;Store name: {0}&quot;, store.Name)\n        Console.WriteLine(&quot;Store location: {0}&quot;, store.Location)\n        Dim x509 As X509Certificate2\n        For Each x509 In storecollection\n            Console.WriteLine(&quot;certificate name: {0}&quot;, x509.Subject)\n        Next x509\n\n        &#39;Remove a certificate.\n        store.Remove(certificate1)\n        Dim storecollection2 As X509Certificate2Collection = CType(store.Certificates, X509Certificate2Collection)\n        Console.WriteLine(&quot;{1}Store name: {0}&quot;, store.Name, Environment.NewLine)\n        Dim x509a As X509Certificate2\n        For Each x509a In storecollection2\n            Console.WriteLine(&quot;certificate name: {0}&quot;, x509a.Subject)\n        Next x509a\n\n        &#39;Remove a range of certificates.\n        store.RemoveRange(collection)\n        Dim storecollection3 As X509Certificate2Collection = CType(store.Certificates, X509Certificate2Collection)\n        Console.WriteLine(&quot;{1}Store name: {0}&quot;, store.Name, Environment.NewLine)\n        If storecollection3.Count = 0 Then\n            Console.WriteLine(&quot;Store contains no certificates.&quot;)\n        Else\n            Dim x509b As X509Certificate2\n            For Each x509b In storecollection3\n                Console.WriteLine(&quot;certificate name: {0}&quot;, x509b.Subject)\n            Next x509b\n        End If\n\n        &#39;Close the store.\n        store.Close()\n\n    End Sub\nEnd Class\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>This enumeration is used with the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509store\" data-linktype=\"relative-path\">X509Store</a> constructor.</p>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Security_Cryptography_X509Certificates_StoreLocation_CurrentUser\">\r\n      \t\t\t<span class=\"lang-csharp\">CurrentUser</span>\r\n      \t</td>\r\n      \t<td><p>The X.509 certificate store used by the current user.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Cryptography_X509Certificates_StoreLocation_LocalMachine\">\r\n      \t\t\t<span class=\"lang-csharp\">LocalMachine</span>\r\n      \t</td>\r\n      \t<td><p>The X.509 certificate store assigned to the local machine.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.X509Certificates.StoreLocation.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.StoreLocation\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"438bb5a2-0e10-25ab-3bae-094d6fe303b9\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies the location of the X.509 certificate store.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.security.cryptography.x509certificates/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.X509Certificates.StoreLocation\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.X509Certificates.StoreLocation.yml","open_to_public_contributors":false,"api_name":["System.Security.Cryptography.X509Certificates.StoreLocation","System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser","System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.X509Certificates.StoreLocation","System::Security::Cryptography::X509Certificates::StoreLocation","System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser","System::Security::Cryptography::X509Certificates::StoreLocation::CurrentUser","System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine","System::Security::Cryptography::X509Certificates::StoreLocation::LocalMachine"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"438bb5a2-0e10-25ab-3bae-094d6fe303b9","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Security.Cryptography.X509Certificates/StoreLocation.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"StoreLocation enum | Microsoft Docs","_op_ogTitle":"StoreLocation enum","description":"Specifies the location of the X.509 certificate store.\n","toc_asset_id":"api/_splitted/System.Security.Cryptography.X509Certificates/toc.json","toc_rel":"_splitted/System.Security.Cryptography.X509Certificates/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.X509Certificates.StoreLocation","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.x509certificates.storelocation","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.x509certificates.storelocation","fileRelativePath":"api/System.Security.Cryptography.X509Certificates.StoreLocation.html"},"themesRelativePathToOutputRoot":"_themes/"}