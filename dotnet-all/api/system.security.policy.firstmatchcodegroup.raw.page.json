{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">FirstMatchCodeGroup</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Allows security policy to be defined by the union of the policy statement of a code group and that of the first child code group that matches. This class cannot be inherited.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[ECMA2Yaml.Models.ECMAAttribute]\n[ECMA2Yaml.Models.ECMAAttribute]\npublic sealed class FirstMatchCodeGroup : System.Security.Policy.CodeGroup</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup\" data-linktype=\"relative-path\">CodeGroup</a></span></div><span class=\"lang-csharp\">FirstMatchCodeGroup</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.obsoleteattribute\" title=\"System.ObsoleteAttribute\" data-linktype=\"relative-path\">ObsoleteAttribute</a></span>\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_AddChild_System_Security_Policy_CodeGroup_\" data-linktype=\"relative-path\">AddChild(CodeGroup)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_AttributeString\" data-linktype=\"relative-path\">AttributeString</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_Children\" data-linktype=\"relative-path\">Children</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_CreateXml_System_Security_SecurityElement_System_Security_Policy_PolicyLevel_\" data-linktype=\"relative-path\">CreateXml(SecurityElement, PolicyLevel)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_Description\" data-linktype=\"relative-path\">Description</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_Equals_System_Security_Policy_CodeGroup_System_Boolean_\" data-linktype=\"relative-path\">Equals(CodeGroup, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_FromXml_System_Security_SecurityElement_\" data-linktype=\"relative-path\">FromXml(SecurityElement)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_FromXml_System_Security_SecurityElement_System_Security_Policy_PolicyLevel_\" data-linktype=\"relative-path\">FromXml(SecurityElement, PolicyLevel)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_MembershipCondition\" data-linktype=\"relative-path\">MembershipCondition</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_Name\" data-linktype=\"relative-path\">Name</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_ParseXml_System_Security_SecurityElement_System_Security_Policy_PolicyLevel_\" data-linktype=\"relative-path\">ParseXml(SecurityElement, PolicyLevel)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_PermissionSetName\" data-linktype=\"relative-path\">PermissionSetName</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_PolicyStatement\" data-linktype=\"relative-path\">PolicyStatement</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_RemoveChild_System_Security_Policy_CodeGroup_\" data-linktype=\"relative-path\">RemoveChild(CodeGroup)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_ToXml\" data-linktype=\"relative-path\">ToXml()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_ToXml_System_Security_Policy_PolicyLevel_\" data-linktype=\"relative-path\">ToXml(PolicyLevel)</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example shows the use of members of the FirstMatchCodeGroup class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Security.Policy.FirstMatchCodeGroup_Evt#1\">using namespace System;\nusing namespace System::Security;\nusing namespace System::Security::Policy;\nusing namespace System::Security::Permissions;\nusing namespace System::Reflection;\n\nref class Members\n{\npublic:\n   [STAThread]\n   static void Main()\n   {\n      // Create a new FirstMatchCodeGroup.\n      FirstMatchCodeGroup^ codeGroup = constructDefaultGroup();\n      \n      // Create a deep copy of the FirstMatchCodeGroup.\n      FirstMatchCodeGroup^ copyCodeGroup =\n         dynamic_cast&lt;FirstMatchCodeGroup^&gt;(codeGroup-&gt;Copy());\n\n      // Compare the original code group with the copy.\n      CompareTwoCodeGroups( codeGroup, copyCodeGroup );\n\n      addPolicy(  &amp;codeGroup );\n      addXmlMember(  &amp;codeGroup );\n      updateMembershipCondition(  &amp;codeGroup );\n      addChildCodeGroup(  &amp;codeGroup );\n\n      Console::Write( L&quot;Comparing the resolved code group &quot; );\n      Console::WriteLine( L&quot;with the initial code group.&quot; );\n      FirstMatchCodeGroup^ resolvedCodeGroup =\n         ResolveGroupToEvidence( codeGroup );\n      if ( CompareTwoCodeGroups( codeGroup, resolvedCodeGroup ) )\n      {\n         PrintCodeGroup( resolvedCodeGroup );\n      }\n      else\n      {\n         PrintCodeGroup( codeGroup );\n      }\n\n      Console::WriteLine( L&quot;This sample completed successfully; &quot;\n      L&quot;press Enter to exit.&quot; );\n      Console::ReadLine();\n   }\n\nprivate:\n   // Create a FirstMatchCodeGroup with an exclusive policy and membership\n   // condition.\n   static FirstMatchCodeGroup^ constructDefaultGroup()\n   {\n      // Construct a new FirstMatchCodeGroup with Read, Write, Append\n      // and PathDiscovery access.\n      // Create read access permission to the root directory on drive C.\n      FileIOPermission^ rootFilePermissions =\n         gcnew FileIOPermission( PermissionState::None );\n      rootFilePermissions-&gt;AllLocalFiles = FileIOPermissionAccess::Read;\n      rootFilePermissions-&gt;SetPathList( FileIOPermissionAccess::Read, L&quot;C:\\\\&quot; );\n      \n      // Add a permission to a named permission set.\n      NamedPermissionSet^ namedPermissions =\n         gcnew NamedPermissionSet( L&quot;RootPermissions&quot; );\n      namedPermissions-&gt;AddPermission( rootFilePermissions );\n      \n      // Create a PolicyStatement with exclusive rights to the policy.\n      PolicyStatement^ policy = gcnew PolicyStatement(\n         namedPermissions,PolicyStatementAttribute::Exclusive );\n      \n      // Create a FirstMatchCodeGroup with a membership condition that\n      // matches all code, and an exclusive policy.\n      FirstMatchCodeGroup^ codeGroup = gcnew FirstMatchCodeGroup(\n         gcnew AllMembershipCondition,policy );\n\n      // Set the name of the first match code group.\n      codeGroup-&gt;Name = L&quot;TempCodeGroup&quot;;\n\n      // Set the description of the first match code group.\n      codeGroup-&gt;Description = L&quot;Temp folder permissions group&quot;;\n      return codeGroup;\n   }\n\n   // Add file permission to restrict write access to all files\n   // on the local machine.\n   static void addPolicy( interior_ptr&lt;FirstMatchCodeGroup^&gt; codeGroup )\n   {\n      // Set the PolicyStatement property to a policy with read access to\n      // the root directory on drive C.\n      FileIOPermission^ rootFilePermissions =\n         gcnew FileIOPermission( PermissionState::None );\n      rootFilePermissions-&gt;AllLocalFiles = FileIOPermissionAccess::Read;\n      rootFilePermissions-&gt;SetPathList( FileIOPermissionAccess::Read, L&quot;C:\\\\&quot; );\n\n      NamedPermissionSet^ namedPermissions =\n         gcnew NamedPermissionSet( L&quot;RootPermissions&quot; );\n      namedPermissions-&gt;AddPermission( rootFilePermissions );\n      \n      // Create a PolicyStatement with exclusive rights to the policy.\n      PolicyStatement^ policy = gcnew PolicyStatement(\n         namedPermissions,PolicyStatementAttribute::Exclusive );\n      ( *codeGroup )-&gt;PolicyStatement = policy;\n   }\n\n   // Set the membership condition of the code group.\n   static void updateMembershipCondition(\n      interior_ptr&lt;FirstMatchCodeGroup^&gt; codeGroup )\n   {\n      // Set the membership condition of the specified FirstMatchCodeGroup\n      // to the Intranet zone.\n      ZoneMembershipCondition^ zoneCondition =\n         gcnew ZoneMembershipCondition( SecurityZone::Intranet );\n      ( *codeGroup )-&gt;MembershipCondition = zoneCondition;\n   }\n\n   // Create a child code group with read-access file permissions and add it\n   // to the specified code group.\n   static void addChildCodeGroup( interior_ptr&lt;FirstMatchCodeGroup^&gt; codeGroup )\n   {\n      // Create a first match code group with read access.\n      FileIOPermission^ rootFilePermissions = gcnew FileIOPermission(\n         PermissionState::None );\n      rootFilePermissions-&gt;AllLocalFiles = FileIOPermissionAccess::Read;\n      rootFilePermissions-&gt;SetPathList( FileIOPermissionAccess::Read, L&quot;C:\\\\&quot; );\n\n      PermissionSet^ permissions = gcnew PermissionSet(\n         PermissionState::Unrestricted );\n      permissions-&gt;AddPermission( rootFilePermissions );\n\n      FirstMatchCodeGroup^ tempFolderCodeGroup =\n         gcnew FirstMatchCodeGroup( gcnew AllMembershipCondition,\n            gcnew PolicyStatement( permissions ) );\n      \n      // Set the name of the child code group and add it to\n      // the specified code group.\n      tempFolderCodeGroup-&gt;Name = L&quot;Read-only code group&quot;;\n      ( *codeGroup )-&gt;AddChild( tempFolderCodeGroup );\n   }\n\n   // Compare the two FirstMatchCodeGroups.\n   static bool CompareTwoCodeGroups( FirstMatchCodeGroup^ firstCodeGroup,\n      FirstMatchCodeGroup^ secondCodeGroup )\n   {\n      // Compare the two specified FirstMatchCodeGroups for equality.\n      if ( firstCodeGroup-&gt;Equals( secondCodeGroup ) )\n      {\n         Console::WriteLine( L&quot;The two code groups are equal.&quot; );\n         return true;\n      }\n      else\n      {\n         Console::WriteLine( L&quot;The two code groups are not equal.&quot; );\n         return false;\n      }\n   }\n\n   // Retrieve the resolved policy based on executing evidence found\n   // in the specified code group.\n   static String^ ResolveEvidence( CodeGroup^ codeGroup )\n   {\n      String^ policyString = L&quot;None&quot;;\n      \n      // Resolve the policy based on the executing assembly&#39;s evidence.\n      Assembly^ assembly = Members::typeid-&gt;Assembly;\n      Evidence^ executingEvidence = assembly-&gt;Evidence;\n\n      PolicyStatement^ policy = codeGroup-&gt;Resolve( executingEvidence );\n\n      if ( policy != nullptr )\n      {\n         policyString = policy-&gt;ToString();\n      }\n\n      return policyString;\n   }\n\n   // Retrieve the resolved code group based on the evidence from the\n   // specified code group.\n   static FirstMatchCodeGroup^ ResolveGroupToEvidence(\n      FirstMatchCodeGroup^ codeGroup )\n   {\n      // Resolve matching code groups to the executing assembly.\n      Assembly^ assembly = Members::typeid-&gt;Assembly;\n      Evidence^ evidence = assembly-&gt;Evidence;\n      CodeGroup^ resolvedCodeGroup =\n         codeGroup-&gt;ResolveMatchingCodeGroups( evidence );\n\n      return dynamic_cast&lt;FirstMatchCodeGroup^&gt;(resolvedCodeGroup);\n   }\n\n   // If a domain attribute is not found in the specified\n   // FirstMatchCodeGroup, add a child XML element identifying a custom\n   // membership condition.\n   static void addXmlMember( interior_ptr&lt;FirstMatchCodeGroup^&gt; codeGroup )\n   {\n      SecurityElement^ xmlElement = ( *codeGroup )-&gt;ToXml();\n\n      SecurityElement^ rootElement = gcnew SecurityElement( L&quot;CodeGroup&quot; );\n\n      if ( xmlElement-&gt;Attribute(L&quot;domain&quot;) == nullptr )\n      {\n         SecurityElement^ newElement = gcnew SecurityElement(\n         L&quot;CustomMembershipCondition&quot; );\n         newElement-&gt;AddAttribute( L&quot;class&quot;, L&quot;CustomMembershipCondition&quot; );\n         newElement-&gt;AddAttribute( L&quot;version&quot;, L&quot;1&quot; );\n         newElement-&gt;AddAttribute( L&quot;domain&quot;, L&quot;contoso.com&quot; );\n         rootElement-&gt;AddChild( newElement );\n         ( *codeGroup )-&gt;FromXml( rootElement );\n      }\n\n      Console::WriteLine( L&quot;Added a custom membership condition:&quot; );\n      Console::WriteLine( rootElement );\n   }\n\n   // Print the properties of the specified code group to the console.\n   static void PrintCodeGroup( CodeGroup^ codeGroup )\n   {\n      // Compare the type of the specified object with the\n      // FirstMatchCodeGroup type.\n      if (  !codeGroup-&gt;GetType()-&gt;Equals( FirstMatchCodeGroup::typeid ) )\n      {\n         throw gcnew ArgumentException( L&quot;Expected the FirstMatchCodeGroup type.&quot; );\n      }\n\n      String^ codeGroupName = codeGroup-&gt;Name;\n      String^ membershipCondition = codeGroup-&gt;MembershipCondition-&gt;ToString();\n      \n      String^ permissionSetName = codeGroup-&gt;PermissionSetName;\n\n      int hashCode = codeGroup-&gt;GetHashCode();\n\n      String^ mergeLogic = L&quot;&quot;;\n      if ( codeGroup-&gt;MergeLogic-&gt;Equals( L&quot;First Match&quot; ) )\n      {\n         mergeLogic = L&quot;with first-match merge logic&quot;;\n      }\n      \n      // Retrieve the class path for the FirstMatchCodeGroup.\n      String^ firstMatchGroupClass = codeGroup-&gt;ToString();\n\n      String^ attributeString = L&quot;&quot;;\n      // Retrieve the string representation of the FirstMatchCodeGroup&#39;s\n      // attributes.\n      if ( codeGroup-&gt;AttributeString != nullptr )\n      {\n         attributeString = codeGroup-&gt;AttributeString;\n      }\n\n      // Write a summary to the console window.\n      Console::WriteLine( L&quot;\\n*** {0} summary ***&quot;, firstMatchGroupClass );\n      Console::Write( L&quot;A FirstMatchCodeGroup named &quot; );\n      Console::Write( L&quot;{0}{1}&quot;, codeGroupName, mergeLogic );\n      Console::Write( L&quot; has been created with hash code({0}).&quot;, hashCode );\n      Console::Write( L&quot;\\nThis code group contains a {0}&quot;, membershipCondition );\n      Console::Write( L&quot; membership condition with the &quot; );\n      Console::WriteLine( L&quot;{0} permission set.&quot;, permissionSetName );\n\n      Console::Write( L&quot;The code group contains the following policy: &quot; );\n      Console::Write( ResolveEvidence( codeGroup ) );\n      Console::Write( L&quot;\\nIt also contains the following attributes: &quot; );\n      Console::WriteLine( attributeString );\n\n      int childCount = codeGroup-&gt;Children-&gt;Count;\n      if ( childCount &gt; 0 )\n      {\n         Console::Write( L&quot;There are {0}&quot;, childCount );\n         Console::WriteLine( L&quot; child elements in the code group.&quot; );\n         \n         // Iterate through the child code groups to display their names\n         // and then remove them from the specified code group.\n         for ( int i = 0; i &lt; childCount; i++ )\n         {\n            // Retrieve a child code group, which has been cast as a\n            // FirstMatchCodeGroup type.\n            FirstMatchCodeGroup^ childCodeGroup =\n               dynamic_cast&lt;FirstMatchCodeGroup^&gt;(codeGroup-&gt;Children-&gt;default[ i ]);\n\n            Console::Write( L&quot;Removing the {0}.&quot;, childCodeGroup-&gt;Name );\n            // Remove the child code group.\n            codeGroup-&gt;RemoveChild( childCodeGroup );\n         }\n         Console::WriteLine();\n      }\n      else\n      {\n         Console::WriteLine( L&quot; No child code groups were found in this&quot;\n         L&quot; code group.&quot; );\n      }\n   }\n};\n\nint main()\n{\n   Members::Main();\n}\n//\n// This sample produces the following output:\n//\n// The two code groups are equal.\n// Added a custom membership condition:\n// &lt;CodeGroup&gt;\n//   &lt;CustomMembershipCondition class=&quot;CustomMembershipCondition&quot;\n//                              version=&quot;1&quot;\n//                              domain=&quot;contoso.com&quot;/&gt;\n// &lt;/CodeGroup&gt;\n//\n// Comparing the resolved code group with the initial code group.\n// The two code groups are not equal.\n//\n// *** System.Security.Policy.FirstMatchCodeGroup summary ***\n// A FirstMatchCodeGroup named with first-match merge logic has been created\n// with hash code(113151525).\n// This code group contains a Zone - Intranet membership condition with the\n// permission set.The code group contains the following policy:\n// It also contains the following attributes:\n// There are 1 child elements in the code group.\n// Removing the Read-only code group.\n// This sample completed successfully; press Enter to exit.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Policy.FirstMatchCodeGroup_Evt#1\">Imports System.Security\nImports System.Security.Policy\nImports System.Security.Permissions\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class Form1\n    Inherits System.Windows.Forms.Form\n\n    &#39; Event handler for Run button.\n    Private Sub Button1_Click( _\n        ByVal sender As System.Object, _\n        ByVal e As System.EventArgs) Handles Button1.Click\n\n        tbxOutput.Cursor = Cursors.WaitCursor\n        tbxOutput.Text = &quot;&quot;\n\n        &#39; Create a new FirstMatchCodeGroup.\n        Dim codeGroup As FirstMatchCodeGroup = constructDefaultGroup()\n\n        &#39; Create a deep copy of the FirstMatchCodeGroup.\n        Dim copyCodeGroup As FirstMatchCodeGroup\n        copyCodeGroup = CType(codeGroup.Copy(), FirstMatchCodeGroup)\n\n        &#39; Compare the original code group with the copy.\n        CompareTwoCodeGroups(codeGroup, copyCodeGroup)\n\n        addPolicy(codeGroup)\n        addXmlMember(codeGroup)\n        updateMembershipCondition(codeGroup)\n        addChildCodeGroup(codeGroup)\n\n        Write(&quot;Comparing the resolved code group &quot;)\n        WriteLine(&quot;with the initial code group.&quot;)\n\n        Dim resolvedCodeGroup As FirstMatchCodeGroup\n        resolvedCodeGroup = ResolveGroupToEvidence(codeGroup)\n        If (CompareTwoCodeGroups(codeGroup, resolvedCodeGroup)) Then\n            PrintCodeGroup(resolvedCodeGroup)\n        Else\n            PrintCodeGroup(codeGroup)\n        End If\n\n        &#39; Reset the cursor and conclude application.\n        tbxOutput.AppendText(vbCrLf + &quot;This sample completed &quot; + _\n            &quot;successfully; press Exit to continue.&quot;)\n        tbxOutput.Cursor = Cursors.Default\n    End Sub\n    &#39; Create a FirstMatchCodeGroup with an exclusive policy and membership\n    &#39; condition.\n    Private Function constructDefaultGroup() As FirstMatchCodeGroup\n        &#39; Construct a new FirstMatchCodeGroup with Read, Write, Append \n        &#39; and PathDiscovery access.\n        &#39; Create read access permission to the root directory on drive C.\n        Dim rootFilePermissions As New FileIOPermission(PermissionState.None)\n        rootFilePermissions.AllLocalFiles = FileIOPermissionAccess.Read\n        rootFilePermissions.SetPathList(FileIOPermissionAccess.Read, &quot;C:\\\\&quot;)\n\n        &#39; Add a permission to a named permission set.\n        Dim namedPermissions As New NamedPermissionSet(&quot;RootPermissions&quot;)\n        namedPermissions.AddPermission(rootFilePermissions)\n\n        &#39; Create a PolicyStatement with exclusive rights to the policy.\n        Dim policy As New PolicyStatement( _\n            namedPermissions, _\n            PolicyStatementAttribute.Exclusive)\n\n        &#39; Create a FirstMatchCodeGroup with a membership condition that \n        &#39; matches all code, and an exclusive policy.\n        Dim codeGroup As New FirstMatchCodeGroup( _\n            New AllMembershipCondition, _\n            policy)\n\n        &#39; Set the name of the first match code group.\n        codeGroup.Name = &quot;TempCodeGroup&quot;\n\n        &#39; Set the description of the first match code group.\n        codeGroup.Description = &quot;Temp folder permissions group&quot;\n\n        Return codeGroup\n    End Function\n\n    &#39; Add file permission to restrict write access to all files \n    &#39; on the local machine.\n    Private Sub addPolicy(ByRef codeGroup As FirstMatchCodeGroup)\n        &#39; Set the PolicyStatement property to a policy with read access to the\n        &#39; root directory on drive C.\n        Dim rootFilePermissions As New FileIOPermission(PermissionState.None)\n        rootFilePermissions.AllLocalFiles = FileIOPermissionAccess.Read\n        rootFilePermissions.SetPathList(FileIOPermissionAccess.Read, &quot;C:\\\\&quot;)\n\n        Dim namedPermissions As New NamedPermissionSet(&quot;RootPermissions&quot;)\n        namedPermissions.AddPermission(rootFilePermissions)\n\n        &#39; Create a PolicyStatement with exclusive rights to the policy.\n        Dim policy As New PolicyStatement( _\n            namedPermissions, _\n            PolicyStatementAttribute.Exclusive)\n\n        codeGroup.PolicyStatement = policy\n    End Sub\n\n    &#39; Set the membership condition of the code group.\n    Private Sub updateMembershipCondition( _\n        ByRef codeGroup As FirstMatchCodeGroup)\n\n        &#39; Set the membership condition of the specified FirstMatchCodeGroup \n        &#39; to the Intranet zone.\n        Dim zoneCondition As _\n            New ZoneMembershipCondition(SecurityZone.Intranet)\n        codeGroup.MembershipCondition = zoneCondition\n    End Sub\n\n    &#39; Create a child code group with read-access file permissions and add it\n    &#39; to the specified code group.\n    Private Sub addChildCodeGroup(ByRef codegroup As FirstMatchCodeGroup)\n        &#39; Create a first match code group with read access.\n        Dim rootFilePermissions As New FileIOPermission(PermissionState.None)\n        rootFilePermissions.AllLocalFiles = FileIOPermissionAccess.Read\n        rootFilePermissions.SetPathList(FileIOPermissionAccess.Read, &quot;C:\\\\&quot;)\n\n        Dim permissions As New PermissionSet(PermissionState.Unrestricted)\n        permissions.AddPermission(rootFilePermissions)\n\n        Dim tempFolderCodeGroup = New FirstMatchCodeGroup( _\n            New AllMembershipCondition, _\n            New PolicyStatement(permissions))\n\n        &#39; Set the name of the child code group and add it to the specified\n        &#39; code group.\n        tempFolderCodeGroup.Name = &quot;Read-only code group&quot;\n        codegroup.AddChild(tempFolderCodeGroup)\n    End Sub\n\n    &#39; Compare the two FirstMatchCodeGroups.\n    Private Function CompareTwoCodeGroups( _\n        ByVal firstCodeGroup As FirstMatchCodeGroup, _\n        ByVal secondCodeGroup As FirstMatchCodeGroup) As Boolean\n\n        &#39; Compare the two specified FirstMatchCodeGroups for equality.\n        If (firstCodeGroup.Equals(secondCodeGroup)) Then\n\n            WriteLine(&quot;The two code groups are equal.&quot;)\n            Return True\n        Else\n            WriteLine(&quot;The two code groups are not equal.&quot;)\n            Return False\n        End If\n    End Function\n\n    &#39; Retrieve the resolved policy based on executing evidence found \n    &#39; in the specified code group.\n    Private Function ResolveEvidence(ByVal codeGroup As CodeGroup) As String\n        Dim policyString As String = &quot;None&quot;\n\n        &#39; Resolve the policy based on the executing assembly&#39;s evidence.\n        Dim executingAssembly As [Assembly] = Me.GetType().Assembly\n        Dim executingEvidence As Evidence\n        executingEvidence = executingAssembly.Evidence\n\n        Dim policy As PolicyStatement = codeGroup.Resolve(executingEvidence)\n\n        If (Not policy Is Nothing) Then\n            policyString = policy.ToString()\n        End If\n\n        Return policyString\n    End Function\n\n    &#39; Retrieve the resolved code group based on the evidence from the \n    &#39; specified code group.\n    Private Function ResolveGroupToEvidence( _\n        ByVal codegroup As FirstMatchCodeGroup) _\n        As FirstMatchCodeGroup\n\n        &#39; Resolve matching code groups to the executing assembly.\n        Dim executingAssembly As [Assembly] = Me.GetType().Assembly\n        Dim evidence As Evidence = executingAssembly.Evidence\n        Dim resolvedCodeGroup As CodeGroup\n        resolvedCodeGroup = codegroup.ResolveMatchingCodeGroups(Evidence)\n\n        Return CType(resolvedCodeGroup, FirstMatchCodeGroup)\n    End Function\n\n    &#39; If a domain attribute is not found in the specified FirstMatchCodeGroup,\n    &#39; add a child XML element identifying a custom membership condition.\n    Private Sub addXmlMember(ByRef codeGroup As FirstMatchCodeGroup)\n        Dim xmlElement As SecurityElement = codeGroup.ToXml()\n\n        Dim rootElement As New SecurityElement(&quot;CodeGroup&quot;)\n\n        If (xmlElement.Attribute(&quot;domain&quot;) Is Nothing) Then\n            Dim newElement As New SecurityElement(&quot;CustomMembershipCondition&quot;)\n            newElement.AddAttribute(&quot;class&quot;, &quot;CustomMembershipCondition&quot;)\n            newElement.AddAttribute(&quot;version&quot;, &quot;1&quot;)\n            newElement.AddAttribute(&quot;domain&quot;, &quot;contoso.com&quot;)\n\n            rootElement.AddChild(newElement)\n\n            codeGroup.FromXml(rootElement)\n        End If\n\n        WriteLine(&quot;Added a custom membership condition:&quot;)\n        WriteLine(rootElement.ToString())\n    End Sub\n\n    &#39; Print the properties of the specified code group to the console.\n    Private Sub PrintCodeGroup(ByVal codeGroup As CodeGroup)\n        &#39; Compare the type of the specified object with the\n        &#39; FirstMatchCodeGroup type.\n        If (Not codeGroup.GetType() Is GetType(FirstMatchCodeGroup)) Then\n            Throw New ArgumentException( _\n                &quot;Expected the FirstMatchCodeGroup type.&quot;)\n\n        End If\n\n        Dim codeGroupName As String = codeGroup.Name\n        Dim membershipCondition As String\n        membershipCondition = codeGroup.MembershipCondition.ToString()\n\n        Dim permissionSetName As String = codeGroup.PermissionSetName\n\n        Dim hashCode As Integer = codeGroup.GetHashCode()\n\n        Dim mergeLogic As String = &quot;&quot;\n        If (codeGroup.MergeLogic.Equals(&quot;First Match&quot;)) Then\n            mergeLogic = &quot;with first-match merge logic&quot;\n        End If\n\n        &#39; Retrieve the class path for the FirstMatchCodeGroup.\n        Dim firstMatchGroupClass As String = codeGroup.ToString()\n\n        Dim attributeString As String = &quot;&quot;\n        &#39; Retrieve the string representation of the FirstMatchCodeGroup&#39;s\n        &#39; attributes.\n        If (Not codeGroup.AttributeString Is Nothing) Then\n            attributeString = codeGroup.AttributeString\n        End If\n\n        &#39; Write a summary to the console window.\n        WriteLine(vbCrLf + &quot;* &quot; + firstMatchGroupClass + &quot; summary *&quot;)\n        Write(&quot;A FirstMatchCodeGroup named &quot;)\n        Write(codeGroupName + mergeLogic)\n        Write(&quot; has been created with hash code &quot;)\n        WriteLine(hashCode.ToString() + &quot;. &quot;)\n\n        Write(&quot;This code group contains a &quot; + membershipCondition)\n        Write(&quot; membership condition with the &quot;)\n        Write(permissionSetName + &quot; permission set. &quot;)\n\n        Write(&quot;The code group contains the following policy: &quot;)\n        Write(ResolveEvidence(codeGroup) + &quot;. &quot;)\n        Write(&quot;It also contains the following attributes: &quot;)\n        WriteLine(attributeString)\n\n        Dim childCount As Integer = codeGroup.Children.Count\n        If (childCount &gt; 0) Then\n            Write(&quot;There are &quot; + childCount.ToString())\n            WriteLine(&quot; child elements in the code group.&quot;)\n\n            &#39; Iterate through the child code groups to display their names\n            &#39; and then remove them from the specified code group.\n            For i As Int16 = 0 To childCount - 1 Step 1\n                &#39; Retrieve each child explicitly casted as a \n                &#39; FirstMatchCodeGroup type.\n                Dim childCodeGroup As FirstMatchCodeGroup\n                childCodeGroup = _\n                    CType(codeGroup.Children(i), FirstMatchCodeGroup)\n\n                Write(&quot;Removing the &quot; + childCodeGroup.Name + &quot;.&quot;)\n                &#39; Remove the child code group.\n                codeGroup.RemoveChild(childCodeGroup)\n            Next\n\n            WriteLine(&quot;&quot;)\n        Else\n            WriteLine(&quot;No child code groups were found in this code group.&quot;)\n        End If\n    End Sub\n\n    Private Sub WriteLine(ByVal message As String)\n        tbxOutput.AppendText(message + vbCrLf)\n\n    End Sub\n\n    Private Sub Write(ByVal message As String)\n        tbxOutput.AppendText(message)\n\n    End Sub\n\n    &#39; Event handler for Exit button.\n    Private Sub Button2_Click( _\n        ByVal sender As System.Object, _\n        ByVal e As System.EventArgs) Handles Button2.Click\n\n        Application.Exit()\n    End Sub\n#Region &quot; Windows Form Designer generated code &quot;\n\n    Public Sub New()\n        MyBase.New()\n\n        &#39;This call is required by the Windows Form Designer.\n        InitializeComponent()\n\n        &#39;Add any initialization after the InitializeComponent() call\n\n    End Sub\n\n    &#39;Form overrides dispose to clean up the component list.\n    Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)\n        If disposing Then\n            If Not (components Is Nothing) Then\n                components.Dispose()\n            End If\n        End If\n        MyBase.Dispose(disposing)\n    End Sub\n\n    &#39;Required by the Windows Form Designer\n    Private components As System.ComponentModel.IContainer\n\n    &#39;NOTE: The following procedure is required by the Windows Form Designer\n    &#39;It can be modified using the Windows Form Designer.  \n    &#39;Do not modify it using the code editor.\n    Friend WithEvents Panel2 As System.Windows.Forms.Panel\n    Friend WithEvents Panel1 As System.Windows.Forms.Panel\n    Friend WithEvents Button1 As System.Windows.Forms.Button\n    Friend WithEvents Button2 As System.Windows.Forms.Button\n    Friend WithEvents tbxOutput As System.Windows.Forms.RichTextBox\n    &lt;System.Diagnostics.DebuggerStepThrough()&gt; _\n    Private Sub InitializeComponent()\n        Me.Panel2 = New System.Windows.Forms.Panel\n        Me.Button1 = New System.Windows.Forms.Button\n        Me.Button2 = New System.Windows.Forms.Button\n        Me.Panel1 = New System.Windows.Forms.Panel\n        Me.tbxOutput = New System.Windows.Forms.RichTextBox\n        Me.Panel2.SuspendLayout()\n        Me.Panel1.SuspendLayout()\n        Me.SuspendLayout()\n        &#39;\n        &#39;Panel2\n        &#39;\n        Me.Panel2.Controls.Add(Me.Button1)\n        Me.Panel2.Controls.Add(Me.Button2)\n        Me.Panel2.Dock = System.Windows.Forms.DockStyle.Bottom\n        Me.Panel2.DockPadding.All = 20\n        Me.Panel2.Location = New System.Drawing.Point(0, 320)\n        Me.Panel2.Name = &quot;Panel2&quot;\n        Me.Panel2.Size = New System.Drawing.Size(616, 64)\n        Me.Panel2.TabIndex = 1\n        &#39;\n        &#39;Button1\n        &#39;\n        Me.Button1.Dock = System.Windows.Forms.DockStyle.Right\n        Me.Button1.Font = New System.Drawing.Font( _\n            &quot;Microsoft Sans Serif&quot;, _\n            9.0!, _\n            System.Drawing.FontStyle.Regular, _\n            System.Drawing.GraphicsUnit.Point, _\n            CType(0, Byte))\n        Me.Button1.Location = New System.Drawing.Point(446, 20)\n        Me.Button1.Name = &quot;Button1&quot;\n        Me.Button1.Size = New System.Drawing.Size(75, 24)\n        Me.Button1.TabIndex = 2\n        Me.Button1.Text = &quot;&amp;Run&quot;\n        &#39;\n        &#39;Button2\n        &#39;\n        Me.Button2.Dock = System.Windows.Forms.DockStyle.Right\n        Me.Button2.Font = New System.Drawing.Font( _\n            &quot;Microsoft Sans Serif&quot;, _\n            9.0!, _\n            System.Drawing.FontStyle.Regular, _\n            System.Drawing.GraphicsUnit.Point, _\n            CType(0, Byte))\n        Me.Button2.Location = New System.Drawing.Point(521, 20)\n        Me.Button2.Name = &quot;Button2&quot;\n        Me.Button2.Size = New System.Drawing.Size(75, 24)\n        Me.Button2.TabIndex = 3\n        Me.Button2.Text = &quot;E&amp;xit&quot;\n        &#39;\n        &#39;Panel1\n        &#39;\n        Me.Panel1.Controls.Add(Me.tbxOutput)\n        Me.Panel1.Dock = System.Windows.Forms.DockStyle.Fill\n        Me.Panel1.DockPadding.All = 20\n        Me.Panel1.Location = New System.Drawing.Point(0, 0)\n        Me.Panel1.Name = &quot;Panel1&quot;\n        Me.Panel1.Size = New System.Drawing.Size(616, 320)\n        Me.Panel1.TabIndex = 2\n        &#39;\n        &#39;tbxOutput\n        &#39;\n        Me.tbxOutput.AccessibleDescription = _\n            &quot;Displays output from application.&quot;\n        Me.tbxOutput.AccessibleName = &quot;Output textbox.&quot;\n        Me.tbxOutput.Dock = System.Windows.Forms.DockStyle.Fill\n        Me.tbxOutput.Location = New System.Drawing.Point(20, 20)\n        Me.tbxOutput.Name = &quot;tbxOutput&quot;\n        Me.tbxOutput.Size = New System.Drawing.Size(576, 280)\n        Me.tbxOutput.TabIndex = 1\n        Me.tbxOutput.Text = &quot;Click the Run button to run the application.&quot;\n        &#39;\n        &#39;Form1\n        &#39;\n        Me.AutoScaleBaseSize = New System.Drawing.Size(6, 15)\n        Me.ClientSize = New System.Drawing.Size(616, 384)\n        Me.Controls.Add(Me.Panel1)\n        Me.Controls.Add(Me.Panel2)\n        Me.Name = &quot;Form1&quot;\n        Me.Text = &quot;FirstMatchCodeGroup&quot;\n        Me.Panel2.ResumeLayout(False)\n        Me.Panel1.ResumeLayout(False)\n        Me.ResumeLayout(False)\n\n    End Sub\n\n#End Region\nEnd Class\n&#39;\n&#39; This sample produces the following output:\n&#39;\n&#39; The two code groups are equal.\n&#39; Added a custom membership condition:\n&#39; &lt;CodeGroup&gt;\n&#39;    &lt;CustomMembershipCondition class=&quot;CustomMembershipCondition&quot;\n&#39;                               version=&quot;1&quot;\n&#39;                               domain=&quot;contoso.com&quot;/&gt;\n&#39; &lt;/CodeGroup&gt;\n&#39; \n&#39; Comparing the resolved code group with the initial code group.\n&#39; The two code groups are not equal.\n&#39; \n&#39; * System.Security.Policy.FirstMatchCodeGroup summary *\n&#39; A FirstMatchCodeGroup named with first-match merge logic has been created\n&#39; with hash code 113155593. This code group contains a Zone - Intranet \n&#39; membership condition with the  permission set. The code group contains the\n&#39; following policy: None. It also contains the following attributes: \n&#39; There are 1 child elements in the code group.\n&#39; Removing the Read-only code group.\n&#39; \n&#39; This sample completed successfully; press Exit to continue.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Policy.FirstMatchCodeGroup_Evt#1\">using System;\nusing System.Security;\nusing System.Security.Policy;\nusing System.Security.Permissions;\nusing System.Reflection;\n\nclass Members\n{\n    [STAThread]\n    static void Main(string[] args)\n    {\n        // Create a new FirstMatchCodeGroup.\n        FirstMatchCodeGroup codeGroup = constructDefaultGroup();\n\n        // Create a deep copy of the FirstMatchCodeGroup.\n        FirstMatchCodeGroup copyCodeGroup = \n            (FirstMatchCodeGroup)codeGroup.Copy();\n        // Compare the original code group with the copy.\n        CompareTwoCodeGroups(codeGroup, copyCodeGroup);\n\n        addPolicy(ref codeGroup);\n        addXmlMember(ref codeGroup);\n        updateMembershipCondition(ref codeGroup);\n        addChildCodeGroup(ref codeGroup);\n\n        Console.Write(&quot;Comparing the resolved code group &quot;);\n        Console.WriteLine(&quot;with the initial code group.&quot;);\n        FirstMatchCodeGroup resolvedCodeGroup =\n            ResolveGroupToEvidence(codeGroup);\n        if (CompareTwoCodeGroups(codeGroup, resolvedCodeGroup))\n        {\n            PrintCodeGroup(resolvedCodeGroup);\n        }\n        else\n        {\n            PrintCodeGroup(codeGroup);\n        }\n        \n        Console.WriteLine(&quot;This sample completed successfully; &quot; +\n            &quot;press Enter to exit.&quot;);\n        Console.ReadLine();\n    }\n\n    // Create a FirstMatchCodeGroup with an exclusive policy and membership\n    // condition.\n    private static FirstMatchCodeGroup constructDefaultGroup()\n    {\n        // Construct a new FirstMatchCodeGroup with Read, Write, Append\n        // and PathDiscovery access.\n        // Create read access permission to the root directory on drive C.\n        FileIOPermission rootFilePermissions =\n            new FileIOPermission(PermissionState.None);\n        rootFilePermissions.AllLocalFiles = FileIOPermissionAccess.Read;\n        rootFilePermissions.SetPathList(FileIOPermissionAccess.Read,&quot;C:\\\\&quot;);\n\n        // Add a permission to a named permission set.\n        NamedPermissionSet namedPermissions =\n            new NamedPermissionSet(&quot;RootPermissions&quot;);\n        namedPermissions.AddPermission(rootFilePermissions);\n\n        // Create a PolicyStatement with exclusive rights to the policy.\n        PolicyStatement policy = new PolicyStatement(\n            namedPermissions,PolicyStatementAttribute.Exclusive);\n\n        // Create a FirstMatchCodeGroup with a membership condition that\n        // matches all code, and an exclusive policy.\n        FirstMatchCodeGroup codeGroup =\n            new FirstMatchCodeGroup(\n            new AllMembershipCondition(),\n            policy);\n\n        // Set the name of the first match code group.\n        codeGroup.Name = &quot;TempCodeGroup&quot;;\n\n        // Set the description of the first match code group.\n        codeGroup.Description = &quot;Temp folder permissions group&quot;;\n\n        return codeGroup;\n    }\n\n    // Add file permission to restrict write access to all files \n    // on the local machine.\n    private static void addPolicy(ref FirstMatchCodeGroup codeGroup)\n    {\n        // Set the PolicyStatement property to a policy with read access to\n        // the root directory on drive C.\n        FileIOPermission rootFilePermissions =\n            new FileIOPermission(PermissionState.None);\n        rootFilePermissions.AllLocalFiles = FileIOPermissionAccess.Read;\n        rootFilePermissions.SetPathList(FileIOPermissionAccess.Read,&quot;C:\\\\&quot;);\n\n        NamedPermissionSet namedPermissions =\n            new NamedPermissionSet(&quot;RootPermissions&quot;);\n        namedPermissions.AddPermission(rootFilePermissions);\n\n        // Create a PolicyStatement with exclusive rights to the policy.\n        PolicyStatement policy = new PolicyStatement(\n            namedPermissions,\n            PolicyStatementAttribute.Exclusive);\n\n        codeGroup.PolicyStatement = policy;\n    }\n\n    // Set the membership condition of the code group.\n    private static void updateMembershipCondition(\n        ref FirstMatchCodeGroup codeGroup)\n    {\n        // Set the membership condition of the specified FirstMatchCodeGroup\n        // to the Intranet zone.\n        ZoneMembershipCondition zoneCondition =\n            new ZoneMembershipCondition(SecurityZone.Intranet);\n        codeGroup.MembershipCondition = zoneCondition;\n    }\n\n    // Create a child code group with read-access file permissions and add it\n    // to the specified code group.\n    private static void addChildCodeGroup(ref FirstMatchCodeGroup codeGroup)\n    {\n        // Create a first match code group with read access.\n        FileIOPermission rootFilePermissions = \n            new FileIOPermission(PermissionState.None);\n        rootFilePermissions.AllLocalFiles = FileIOPermissionAccess.Read;\n        rootFilePermissions.SetPathList(FileIOPermissionAccess.Read,&quot;C:\\\\&quot;);\n\n        PermissionSet permissions =\n            new PermissionSet(PermissionState.Unrestricted);\n        permissions.AddPermission(rootFilePermissions);\n\n        FirstMatchCodeGroup tempFolderCodeGroup = new FirstMatchCodeGroup(\n            new AllMembershipCondition(), \n            new PolicyStatement(permissions));\n\n        // Set the name of the child code group and add it to \n        // the specified code group.\n        tempFolderCodeGroup.Name = &quot;Read-only code group&quot;;\n        codeGroup.AddChild(tempFolderCodeGroup);\n    }\n\n    // Compare the two FirstMatchCodeGroups.\n    private static bool CompareTwoCodeGroups(\n        FirstMatchCodeGroup firstCodeGroup, \n        FirstMatchCodeGroup secondCodeGroup)\n    {\n        // Compare the two specified FirstMatchCodeGroups for equality.\n        if (firstCodeGroup.Equals(secondCodeGroup))\n        {\n            Console.WriteLine(&quot;The two code groups are equal.&quot;);\n            return true;\n        }\n        else \n        {\n            Console.WriteLine(&quot;The two code groups are not equal.&quot;);\n            return false;\n        }\n    }\n\n    // Retrieve the resolved policy based on executing evidence found \n    // in the specified code group.\n    private static string ResolveEvidence(CodeGroup codeGroup)\n    {\n        string policyString = &quot;None&quot;;\n\n        // Resolve the policy based on the executing assembly&#39;s evidence.\n        Assembly assembly = typeof(Members).Assembly;\n        Evidence executingEvidence = assembly.Evidence;\n\n        PolicyStatement policy = codeGroup.Resolve(executingEvidence);\n\n        if (policy != null)\n        {\n            policyString = policy.ToString();\n        }\n\n        return policyString;\n    }\n\n    // Retrieve the resolved code group based on the evidence from the \n    // specified code group.\n    private static FirstMatchCodeGroup ResolveGroupToEvidence(\n        FirstMatchCodeGroup codeGroup)\n    {\n        // Resolve matching code groups to the executing assembly.\n        Assembly assembly = typeof(Members).Assembly;\n        Evidence evidence = assembly.Evidence;\n        CodeGroup resolvedCodeGroup = \n            codeGroup.ResolveMatchingCodeGroups(evidence);\n\n        return (FirstMatchCodeGroup)resolvedCodeGroup;\n    }\n\n    // If a domain attribute is not found in the specified \n    // FirstMatchCodeGroup, add a child XML element identifying a custom\n    // membership condition.\n    private static void addXmlMember(ref FirstMatchCodeGroup codeGroup)\n    {\n        SecurityElement xmlElement = codeGroup.ToXml();\n\n        SecurityElement rootElement = new SecurityElement(&quot;CodeGroup&quot;);\n\n        if (xmlElement.Attribute(&quot;domain&quot;) == null) \n        {\n            SecurityElement newElement = \n                new SecurityElement(&quot;CustomMembershipCondition&quot;);\n            newElement.AddAttribute(&quot;class&quot;,&quot;CustomMembershipCondition&quot;);\n            newElement.AddAttribute(&quot;version&quot;,&quot;1&quot;);\n            newElement.AddAttribute(&quot;domain&quot;,&quot;contoso.com&quot;);\n\n            rootElement.AddChild(newElement);\n\n            codeGroup.FromXml(rootElement);\n        }\n\n        Console.WriteLine(&quot;Added a custom membership condition:&quot;);\n        Console.WriteLine(rootElement.ToString());\n    }\n\n\n    // Print the properties of the specified code group to the console.\n    private static void PrintCodeGroup(CodeGroup codeGroup)\n    {\n        // Compare the type of the specified object with the\n        // FirstMatchCodeGroup type.\n        if (!codeGroup.GetType().Equals(typeof(FirstMatchCodeGroup)))\n        {\n            throw new ArgumentException(\n                &quot;Expected the FirstMatchCodeGroup type.&quot;);\n        }\n        \n        string codeGroupName = codeGroup.Name;\n        string membershipCondition = codeGroup.MembershipCondition.ToString();\n        string permissionSetName = codeGroup.PermissionSetName;\n\n        int hashCode = codeGroup.GetHashCode();\n\n        string mergeLogic = &quot;&quot;;\n        if (codeGroup.MergeLogic.Equals(&quot;First Match&quot;))\n        {\n            mergeLogic = &quot;with first-match merge logic&quot;;\n        }\n\n        // Retrieve the class path for the FirstMatchCodeGroup.\n        string firstMatchGroupClass = codeGroup.ToString();\n\n        string attributeString = &quot;&quot;;\n        // Retrieve the string representation of the FirstMatchCodeGroup&#39;s\n        // attributes.\n        if (codeGroup.AttributeString != null)\n        {\n            attributeString = codeGroup.AttributeString;\n        }\n\n        // Write a summary to the console window.\n        Console.WriteLine(&quot;\\n*** &quot; + firstMatchGroupClass + &quot; summary ***&quot;);\n        Console.Write(&quot;A FirstMatchCodeGroup named &quot;);\n        Console.Write(codeGroupName + mergeLogic);\n        Console.Write(&quot; has been created with hash code(&quot; + hashCode + &quot;).&quot;);\n        Console.Write(&quot;\\nThis code group contains a &quot; + membershipCondition);\n        Console.Write(&quot; membership condition with the &quot;);\n        Console.WriteLine(permissionSetName + &quot; permission set.&quot;);\n\n        Console.Write(&quot;The code group contains the following policy: &quot;);\n        Console.Write(ResolveEvidence(codeGroup));\n        Console.Write(&quot;\\nIt also contains the following attributes: &quot;);\n        Console.WriteLine(attributeString);\n\n        int childCount = codeGroup.Children.Count;\n        if (childCount &gt; 0 )\n        {\n            Console.Write(&quot;There are &quot; + childCount);\n            Console.WriteLine(&quot; child elements in the code group.&quot;);\n\n            // Iterate through the child code groups to display their names\n            // and then remove them from the specified code group.\n            for (int i=0; i &lt; childCount; i++)\n            {\n                // Retrieve a child code group, which has been cast as a\n                // FirstMatchCodeGroup type.\n                FirstMatchCodeGroup childCodeGroup = \n                    (FirstMatchCodeGroup)codeGroup.Children[i];\n\n                Console.Write(&quot;Removing the &quot; + childCodeGroup.Name + &quot;.&quot;);\n                // Remove the child code group.\n                codeGroup.RemoveChild(childCodeGroup);\n            }\n\n            Console.WriteLine();\n        }\n        else\n        {\n            Console.WriteLine(&quot; No child code groups were found in this&quot; + \n                &quot; code group.&quot;);\n        }\n    }\n}\n//\n// This sample produces the following output:\n//\n// The two code groups are equal.\n// Added a custom membership condition:\n// &lt;CodeGroup&gt;\n//   &lt;CustomMembershipCondition class=&quot;CustomMembershipCondition&quot;\n//                              version=&quot;1&quot;\n//                              domain=&quot;contoso.com&quot;/&gt;\n// &lt;/CodeGroup&gt;\n//\n// Comparing the resolved code group with the initial code group.\n// The two code groups are not equal.\n//\n// *** System.Security.Policy.FirstMatchCodeGroup summary ***\n// A FirstMatchCodeGroup named with first-match merge logic has been created\n// with hash code(113151525).\n// This code group contains a Zone - Intranet membership condition with the \n// permission set.The code group contains the following policy: \n// It also contains the following attributes:\n// There are 1 child elements in the code group.\n// Removing the Read-only code group.\n// This sample completed successfully; press Enter to exit.\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Code groups are the building blocks of code access security policy. Each policy level consists of a root code group that can have child code groups. Each child code group can have their own child code groups; this behavior extends to any number of levels, forming a tree. Each code group has a membership condition that determines if a given assembly belongs to it based on the evidence for that assembly. Only code groups whose membership conditions match a given assembly and their child code groups apply policy.  </p>\n<p> Like any code group, FirstMatchCodeGroup only applies when its membership condition matches evidence for an assembly. If there is a match, it tests the membership condition of each child in order, stopping when the first match occurs. The result of FirstMatchCodeGroup is the union of the policy statement of the root code group and the policy statement of the first child group of that code group that matches.  </p>\n<p> FirstMatchCodeGroup is intended for programmatic use by application domain hosts to set domain policy.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Policy_FirstMatchCodeGroup__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Policy_FirstMatchCodeGroup__ctor_System_Security_Policy_IMembershipCondition_System_Security_Policy_PolicyStatement_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FirstMatchCodeGroup(IMembershipCondition, PolicyStatement)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.policy.firstmatchcodegroup\" data-linktype=\"relative-path\">FirstMatchCodeGroup</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public FirstMatchCodeGroup (System.Security.Policy.IMembershipCondition membershipCondition, System.Security.Policy.PolicyStatement policy);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>membershipCondition</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.imembershipcondition\" data-linktype=\"relative-path\">IMembershipCondition</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A membership condition that tests evidence to determine whether this code group applies policy.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>policy</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.policystatement\" data-linktype=\"relative-path\">PolicyStatement</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The policy statement for the code group in the form of a permission set and attributes to grant code that matches the membership condition.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.obsoleteattribute\" title=\"System.ObsoleteAttribute\" data-linktype=\"relative-path\">ObsoleteAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The type of the <code>membershipCondition</code> parameter is not valid.  </p>\n<p> -or-  </p>\n<p> The type of the <code>policy</code> parameter is not valid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor creates a basic code group and should be called from the constructors of custom code groups. Child code groups can be added using the <a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_AddChild_\" data-linktype=\"relative-path\">AddChild</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Policy_FirstMatchCodeGroup_MergeLogic_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Policy_FirstMatchCodeGroup_MergeLogic\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MergeLogic</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the merge logic.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override string MergeLogic { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string &quot;First Match&quot;.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.obsoleteattribute\" title=\"System.ObsoleteAttribute\" data-linktype=\"relative-path\">ObsoleteAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Policy_FirstMatchCodeGroup_Copy_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Policy_FirstMatchCodeGroup_Copy\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Copy()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Makes a deep copy of the code group.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override System.Security.Policy.CodeGroup Copy ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup\" data-linktype=\"relative-path\">CodeGroup</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An equivalent copy of the code group, including its membership conditions and child code groups.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.obsoleteattribute\" title=\"System.ObsoleteAttribute\" data-linktype=\"relative-path\">ObsoleteAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method makes a deep copy of the code group, meaning that copies of all objects it contains are made, as well.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Policy_FirstMatchCodeGroup_Resolve_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Policy_FirstMatchCodeGroup_Resolve_System_Security_Policy_Evidence_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Resolve(Evidence)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Resolves policy for the code group and its descendants for a set of evidence.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override System.Security.Policy.PolicyStatement Resolve (System.Security.Policy.Evidence evidence);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>evidence</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The evidence for the assembly.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.policystatement\" data-linktype=\"relative-path\">PolicyStatement</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A policy statement consisting of the permissions granted by the code group with optional attributes, or <code>null</code> if the code group does not apply (the membership condition does not match the specified evidence).</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.security.securitysafecriticalattribute\" title=\"System.Security.SecuritySafeCriticalAttribute\" data-linktype=\"relative-path\">SecuritySafeCriticalAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>evidence</code> parameter is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.policyexception\" data-linktype=\"relative-path\">PolicyException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>More than one code group (including the parent code group and any child code groups) is marked <a class=\"xref\" href=\"system.security.policy.policystatementattribute\" data-linktype=\"relative-path\">PolicyStatementAttribute</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Given evidence for an assembly to be loaded, this method evaluates the code group by first checking the membership condition against the specified evidence. If there is a match, this method returns a policy statement for the code group, including evaluation of child code groups.  </p>\n<p> For first-match code groups, each child code group&#39;s membership condition is tested against the evidence in the order in which they were added; only the first match is resolved with the evidence set. If there are no matches, the policy statement of the parent first-match code group applies. The matching child code group type determines how all child groups under it are applied, depending on how the <a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_Resolve_\" data-linktype=\"relative-path\">Resolve</a> methods of these child groups work.  </p>\n<p> The .NET Framework security system uses <a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_Resolve_\" data-linktype=\"relative-path\">Resolve</a> on the policy levels to determine which permissions to grant to loaded code from the resulting policy statements and the code request on the assembly.  </p>\n<p> This operation of this method is as follows:  </p>\n<p> If the membership condition does not match the specified evidence, return <code>null</code>; otherwise, set the permission set to be returned (P) equal to the code group&#39;s policy statement and continue. For each child code group, resolve the code group with the same evidence; if the result is not <code>null</code>, return that policy statement. If no child code group matched, return P (the parent&#39;s policy statement).</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Policy_FirstMatchCodeGroup_ResolveMatchingCodeGroups_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Policy_FirstMatchCodeGroup_ResolveMatchingCodeGroups_System_Security_Policy_Evidence_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ResolveMatchingCodeGroups(Evidence)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Resolves matching code groups.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override System.Security.Policy.CodeGroup ResolveMatchingCodeGroups (System.Security.Policy.Evidence evidence);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>evidence</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The evidence for the assembly.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup\" data-linktype=\"relative-path\">CodeGroup</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.security.policy.codegroup\" data-linktype=\"relative-path\">CodeGroup</a> that is the root of the tree of matching code groups.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.obsoleteattribute\" title=\"System.ObsoleteAttribute\" data-linktype=\"relative-path\">ObsoleteAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>evidence</code> parameter is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Given evidence for an assembly to be loaded, this method evaluates the code group by first checking the membership condition against the specified evidence. If there is a match, this method returns a root code group. The code group that is returned contains child code groups, which in turn can have child code groups as necessary to reflect the complete set of code groups that were matched by the evidence provided.  </p>\n<p> For first-match code groups, each child code group&#39;s membership condition is tested against the evidence in the order in which they were added; only the first match is resolved with the evidence set. If there are no matches, the policy statement of the parent first-match code group applies. The matching child code group type determines how all child groups under it are applied, depending on how the <a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_ResolveMatchingCodeGroups_\" data-linktype=\"relative-path\">ResolveMatchingCodeGroups</a> methods of these child groups work.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Policy.FirstMatchCodeGroup.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Policy.FirstMatchCodeGroup\">\r\n<meta name=\"APIName\" content=\"System.Security.Policy.FirstMatchCodeGroup..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Policy.FirstMatchCodeGroup.Copy\">\r\n<meta name=\"APIName\" content=\"System.Security.Policy.FirstMatchCodeGroup.MergeLogic\">\r\n<meta name=\"APIName\" content=\"System.Security.Policy.FirstMatchCodeGroup.Resolve\">\r\n<meta name=\"APIName\" content=\"System.Security.Policy.FirstMatchCodeGroup.ResolveMatchingCodeGroups\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"ad7364e1-7445-8d2e-9c98-d462eac944b7\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Allows security policy to be defined by the union of the policy statement of a code group and that of the first child code group that matches. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.security.policy/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Policy.FirstMatchCodeGroup\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Policy.FirstMatchCodeGroup.yml","open_to_public_contributors":false,"api_name":["System.Security.Policy.FirstMatchCodeGroup","System.Security.Policy.FirstMatchCodeGroup..ctor","System.Security.Policy.FirstMatchCodeGroup.Copy","System.Security.Policy.FirstMatchCodeGroup.MergeLogic","System.Security.Policy.FirstMatchCodeGroup.Resolve","System.Security.Policy.FirstMatchCodeGroup.ResolveMatchingCodeGroups"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Policy.FirstMatchCodeGroup","System::Security::Policy::FirstMatchCodeGroup","System.Security.Policy.FirstMatchCodeGroup.#ctor","System::Security::Policy::FirstMatchCodeGroup::#ctor","System.Security.Policy.FirstMatchCodeGroup.Copy","System::Security::Policy::FirstMatchCodeGroup::Copy","System.Security.Policy.FirstMatchCodeGroup.MergeLogic","System::Security::Policy::FirstMatchCodeGroup::MergeLogic","System.Security.Policy.FirstMatchCodeGroup.Resolve","System::Security::Policy::FirstMatchCodeGroup::Resolve","System.Security.Policy.FirstMatchCodeGroup.ResolveMatchingCodeGroups","System::Security::Policy::FirstMatchCodeGroup::ResolveMatchingCodeGroups"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"ad7364e1-7445-8d2e-9c98-d462eac944b7","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Security.Policy/FirstMatchCodeGroup.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"FirstMatchCodeGroup class | Microsoft Docs","_op_ogTitle":"FirstMatchCodeGroup class","description":"Allows security policy to be defined by the union of the policy statement of a code group and that of the first child code group that matches. This class cannot be inherited.\n","toc_asset_id":"api/_splitted/System.Security.Policy/toc.json","toc_rel":"_splitted/System.Security.Policy/toc.json","source_url":"","ms.assetid":"System.Security.Policy.FirstMatchCodeGroup","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.security.policy.firstmatchcodegroup","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.security.policy.firstmatchcodegroup","fileRelativePath":"api/System.Security.Policy.FirstMatchCodeGroup.html"},"themesRelativePathToOutputRoot":"_themes/"}