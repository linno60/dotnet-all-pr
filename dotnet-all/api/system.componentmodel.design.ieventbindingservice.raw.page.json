{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">IEventBindingService</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides a service for registering event handlers for component events.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic interface IEventBindingService</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example demonstrates a designer that uses the IEventBindingService to link a component&#39;s event with an event handler at design time when the custom shortcut menu command that the designer adds for the component is invoked. To use the example, compile it to a class library, add a reference from a Windows Forms project, add the component in the class library to the Toolbox by right-clicking the Toolbox and selecting Customize Toolbox..., then choosing the class library and clicking OK, and add an instance of the EventControl to a Form. Then right-click the EventControl and click the Connect testEvent shortcut menu command. An empty event handler method is created and the EventControl&#39;s testEvent method is initialized to this event handler in the initialization code for the Form.  </p>\n<pre><code class=\"lang-cpp\" name=\"IEventBindingServiceExample#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Data.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.Design.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::ComponentModel::Design;\nusing namespace System::Drawing;\nusing namespace System::Data;\nusing namespace System::Windows::Forms;\nusing namespace System::Windows::Forms::Design;\nusing namespace System::Security::Permissions;\n\n// This designer provides a &quot;Connect testEvent&quot; designer verb shortcut \n// menu command. When invoked, the command attaches a new event-handler \n// method named &quot;testEventHandler&quot; to the &quot;testEvent&quot; event of an \n// associated control.\n// If a &quot;testEvent&quot; event of the associated control does not exist, \n// the IEventBindingService declares it.\npublic ref class EventDesigner: public System::Windows::Forms::Design::ControlDesigner\n{\npublic:\n   EventDesigner(){}\n\n   // When the &quot;Connect testEvent&quot; designer verb shortcut menu \n   // command is invoked, this method uses the \n   // IEventBindingService to attach an event handler to a \n   // &quot;textEvent&quot; event of the associated control.\nprivate:\n   void ConnectEvent( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      IEventBindingService^ eventservice = dynamic_cast&lt;IEventBindingService^&gt;(this-&gt;Component-&gt;Site-&gt;GetService( System::ComponentModel::Design::IEventBindingService::typeid ));\n      if ( eventservice != nullptr )\n      {\n         // Attempt to obtain a PropertyDescriptor for a \n         // component event named &quot;testEvent&quot;.\n         EventDescriptorCollection^ edc = TypeDescriptor::GetEvents( this-&gt;Component );\n         if ( edc == nullptr || edc-&gt;Count == 0 )\n                  return;\n         EventDescriptor^ ed = nullptr;\n\n         // Search for an event named &quot;testEvent&quot;.\n         IEnumerator^ myEnum = edc-&gt;GetEnumerator();\n         while ( myEnum-&gt;MoveNext() )\n         {\n            EventDescriptor^ edi = safe_cast&lt;EventDescriptor^&gt;(myEnum-&gt;Current);\n            if ( edi-&gt;Name-&gt;Equals( &quot;testEvent&quot; ) )\n            {\n               ed = edi;\n               break;\n            }\n         }\n         if ( ed == nullptr )\n                  return;\n\n         // Use the IEventBindingService to get a \n         // PropertyDescriptor for the event.\n         PropertyDescriptor^ pd = eventservice-&gt;GetEventProperty( ed );\n         if ( pd == nullptr )\n                  return;\n\n         // Set the value of the event to &quot;testEventHandler&quot;.\n         pd-&gt;SetValue( this-&gt;Component, &quot;testEventHandler&quot; );\n      }\n   }\n\npublic:\n   property System::ComponentModel::Design::DesignerVerbCollection^ Verbs \n   {\n      // Provides a designer verb command for the designer&#39;s \n      // shortcut menu.\n      [PermissionSetAttribute(SecurityAction::Demand, Name=&quot;FullTrust&quot;)]\n      virtual System::ComponentModel::Design::DesignerVerbCollection^ get() override\n      {\n         DesignerVerbCollection^ dvc = gcnew DesignerVerbCollection;\n         dvc-&gt;Add( gcnew DesignerVerb( &quot;Connect testEvent&quot;,gcnew EventHandler( this, &amp;EventDesigner::ConnectEvent ) ) );\n         return dvc;\n      }\n   }\n};\n\n// EventControl is associated with the EventDesigner and displays \n// instructions for demonstrating the service.\n\n[Designer(EventDesigner::typeid)]\npublic ref class EventControl: public System::Windows::Forms::UserControl\n{\npublic:\n   event System::EventHandler^ testEvent;\n   EventControl()\n   {\n      this-&gt;BackColor = Color::White;\n      this-&gt;Size = System::Drawing::Size( 320, 96 );\n   }\n\npublic:\n   ~EventControl()\n   {\n   }\n\nprotected:\n   virtual void OnPaint( System::Windows::Forms::PaintEventArgs^ e ) override\n   {\n      e-&gt;Graphics-&gt;DrawString( &quot;IEventBindingService Example Control&quot;, gcnew System::Drawing::Font( FontFamily::GenericMonospace,10 ), gcnew SolidBrush( Color::Blue ), 5, 5 );\n      e-&gt;Graphics-&gt;DrawString( &quot;Use the \\&quot;Connect testEvent\\&quot; command of the&quot;, gcnew System::Drawing::Font( FontFamily::GenericMonospace,8 ), gcnew SolidBrush( Color::Black ), 5, 22 );\n      e-&gt;Graphics-&gt;DrawString( &quot;right-click shortcut menu provided by this&quot;, gcnew System::Drawing::Font( FontFamily::GenericMonospace,8 ), gcnew SolidBrush( Color::Black ), 5, 32 );\n      e-&gt;Graphics-&gt;DrawString( &quot;control&#39;s associated EventDesigner to create&quot;, gcnew System::Drawing::Font( FontFamily::GenericMonospace,8 ), gcnew SolidBrush( Color::Black ), 5, 42 );\n      e-&gt;Graphics-&gt;DrawString( &quot;a new event handler linked with the testEvent&quot;, gcnew System::Drawing::Font( FontFamily::GenericMonospace,8 ), gcnew SolidBrush( Color::Black ), 5, 52 );\n      e-&gt;Graphics-&gt;DrawString( &quot;of this control in the initialization code&quot;, gcnew System::Drawing::Font( FontFamily::GenericMonospace,8 ), gcnew SolidBrush( Color::Black ), 5, 62 );\n      e-&gt;Graphics-&gt;DrawString( &quot;for this control.&quot;, gcnew System::Drawing::Font( FontFamily::GenericMonospace,8 ), gcnew SolidBrush( Color::Black ), 5, 72 );\n   }\n};\n</code></pre><pre><code class=\"lang-vb\" name=\"IEventBindingServiceExample#1\">Imports System\nImports System.Collections\nImports System.ComponentModel\nImports System.ComponentModel.Design\nImports System.Data\nImports System.Drawing\nImports System.Windows.Forms\nImports System.Windows.Forms.Design\n\nNamespace EventDesignerTest\n    &#39; This designer provides a &quot;Connect testEvent&quot; designer verb shortcut \n    &#39; menu command. When invoked, the command attaches a new event-handler \n    &#39; method named &quot;testEventHandler&quot; to the &quot;testEvent&quot; event of an \n    &#39; associated control.\n    &#39; If a &quot;testEvent&quot; event of the associated control does not exist, \n    &#39; the IEventBindingService declares it.\n    &lt;System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.Demand, Name:=&quot;FullTrust&quot;)&gt; _\n    Public Class EventDesigner\n        Inherits System.Windows.Forms.Design.ControlDesigner\n\n        Public Sub New()\n        End Sub\n\n        &#39; When the &quot;Connect testEvent&quot; designer verb shortcut menu \n        &#39; command is invoked, this method uses the \n        &#39; IEventBindingService to attach an event handler to a &quot;textEvent&quot; event of the associated control.\n        Private Sub ConnectEvent(ByVal sender As Object, ByVal e As EventArgs)\n            Dim eventservice As IEventBindingService = CType(Me.Component.Site.GetService(GetType(System.ComponentModel.Design.IEventBindingService)), IEventBindingService)\n            If (eventservice IsNot Nothing) Then\n                &#39; Attempt to obtain a PropertyDescriptor for a \n                &#39; component event named &quot;testEvent&quot;.\n                Dim edc As EventDescriptorCollection = TypeDescriptor.GetEvents(Me.Component)\n                If edc Is Nothing Or edc.Count = 0 Then\n                    Return\n                End If\n                Dim ed As EventDescriptor = Nothing\n                &#39; Search for an event named &quot;testEvent&quot;.\n                Dim edi As EventDescriptor\n                For Each edi In edc\n                    If edi.Name = &quot;testEvent&quot; Then\n                        ed = edi\n                        Exit For\n                    End If\n                Next edi\n                If ed Is Nothing Then\n                    Return\n                End If\n                &#39; Use the IEventBindingService to get a \n                &#39; PropertyDescriptor for the event.\n                Dim pd As PropertyDescriptor = eventservice.GetEventProperty(ed)\n                If pd Is Nothing Then\n                    Return\n                End If\n                &#39; Set the value of the event to &quot;testEventHandler&quot;.\n                pd.SetValue(Me.Component, &quot;testEventHandler&quot;)\n            End If\n        End Sub\n\n        &#39; Provides a designer verb command for the designer&#39;s \n        &#39; shortcut menu.\n        Public Overrides ReadOnly Property Verbs() As System.ComponentModel.Design.DesignerVerbCollection\n            Get\n                Dim dvc As New DesignerVerbCollection()\n                dvc.Add(New DesignerVerb(&quot;Connect testEvent&quot;, New EventHandler(AddressOf ConnectEvent)))\n                Return dvc\n            End Get\n        End Property\n    End Class\n\n    &#39; EventControl is associated with the EventDesigner and displays \n    &#39; instructions for demonstrating the service.\n    &lt;Designer(GetType(EventDesigner))&gt; _\n    Public Class EventControl\n        Inherits System.Windows.Forms.UserControl\n        Public Event testEvent As System.EventHandler\n\n        Public Sub New()\n            Me.BackColor = Color.White\n            Me.Size = New Size(320, 96)\n        End Sub\n\n        Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)\n            MyBase.Dispose(disposing)\n        End Sub\n\n        Protected Overrides Sub OnPaint(ByVal e As System.Windows.Forms.PaintEventArgs)\n            e.Graphics.DrawString(&quot;IEventBindingService Example Control&quot;, New Font(FontFamily.GenericMonospace, 10), New SolidBrush(Color.Blue), 5, 5)\n            e.Graphics.DrawString(&quot;Use the &quot;&quot;Connect testEvent&quot;&quot; command of the&quot;, New Font(FontFamily.GenericMonospace, 8), New SolidBrush(Color.Black), 5, 22)\n            e.Graphics.DrawString(&quot;right-click shortcut menu provided by this&quot;, New Font(FontFamily.GenericMonospace, 8), New SolidBrush(Color.Black), 5, 32)\n            e.Graphics.DrawString(&quot;control&#39;s associated EventDesigner to create&quot;, New Font(FontFamily.GenericMonospace, 8), New SolidBrush(Color.Black), 5, 42)\n            e.Graphics.DrawString(&quot;a new event handler linked with the testEvent&quot;, New Font(FontFamily.GenericMonospace, 8), New SolidBrush(Color.Black), 5, 52)\n            e.Graphics.DrawString(&quot;of this control in the initialization code&quot;, New Font(FontFamily.GenericMonospace, 8), New SolidBrush(Color.Black), 5, 62)\n            e.Graphics.DrawString(&quot;for this control.&quot;, New Font(FontFamily.GenericMonospace, 8), New SolidBrush(Color.Black), 5, 72)\n        End Sub\n\n    End Class\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"IEventBindingServiceExample#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.ComponentModel.Design;\nusing System.Drawing;\nusing System.Data;\nusing System.Windows.Forms;\nusing System.Windows.Forms.Design;\n\nnamespace EventDesignerTest\n{\n    // This designer provides a &quot;Connect testEvent&quot; designer verb shortcut \n    // menu command. When invoked, the command attaches a new event-handler \n    // method named &quot;testEventHandler&quot; to the &quot;testEvent&quot; event of an \n    // associated control.\n    // If a &quot;testEvent&quot; event of the associated control does not exist, \n    // the IEventBindingService declares it.\n    [System.Security.Permissions.PermissionSet(System.Security.Permissions.SecurityAction.Demand, Name = &quot;FullTrust&quot;)] \n    public class EventDesigner : System.Windows.Forms.Design.ControlDesigner\n    {\n        public EventDesigner()\n        {\n        }\n        \n        // When the &quot;Connect testEvent&quot; designer verb shortcut menu \n        // command is invoked, this method uses the \n        // IEventBindingService to attach an event handler to a \n        // &quot;textEvent&quot; event of the associated control.\n        private void ConnectEvent(object sender, EventArgs e)\n        {\n            IEventBindingService eventservice = (IEventBindingService)this.Component.Site.GetService(typeof(System.ComponentModel.Design.IEventBindingService));\n            if( eventservice != null )\n            {\n                // Attempt to obtain a PropertyDescriptor for a \n                // component event named &quot;testEvent&quot;.\n                EventDescriptorCollection edc = TypeDescriptor.GetEvents(this.Component);\t\t\t\t\n                if( edc == null || edc.Count == 0 )\n                    return;\n                                \n                EventDescriptor ed = null;\n                // Search for an event named &quot;testEvent&quot;.\n                foreach(EventDescriptor edi in edc)\n                    if(edi.Name == &quot;testEvent&quot;)\n                    {\n                        ed = edi;\n                        break;\n                    }\n                if( ed == null )\n                    return;\n\n                // Use the IEventBindingService to get a \n                // PropertyDescriptor for the event.\n                PropertyDescriptor pd = eventservice.GetEventProperty(ed);\n                if( pd == null )\n                    return;\t\t\t\t\n                \n                // Set the value of the event to &quot;testEventHandler&quot;.\n                pd.SetValue(this.Component, &quot;testEventHandler&quot;);\n            }\n        }\n\n                // Provides a designer verb command for the designer&#39;s \n                // shortcut menu.\n        public override System.ComponentModel.Design.DesignerVerbCollection Verbs\n        {\n            get\n            {\n                DesignerVerbCollection dvc = new DesignerVerbCollection();\n                dvc.Add(new DesignerVerb(&quot;Connect testEvent&quot;, new EventHandler(ConnectEvent)));\n                return dvc;\n            }\n        }\n    }\n\n    // EventControl is associated with the EventDesigner and displays \n    // instructions for demonstrating the service.\n    [Designer(typeof(EventDesigner))]\n    public class EventControl : System.Windows.Forms.UserControl\n    {\n        public event System.EventHandler testEvent;\n\n        public EventControl()\n        {\t\t\n            this.BackColor = Color.White;\t\n            this.Size = new Size(320, 96);\n        }\n\n        protected override void Dispose( bool disposing )\n        {\n            base.Dispose( disposing );\n        }\n\n        protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)\n        {\n            e.Graphics.DrawString(&quot;IEventBindingService Example Control&quot;, new Font(FontFamily.GenericMonospace, 10), new SolidBrush(Color.Blue), 5, 5);\n            \n            e.Graphics.DrawString(&quot;Use the \\&quot;Connect testEvent\\&quot; command of the&quot;, new Font(FontFamily.GenericMonospace, 8), new SolidBrush(Color.Black), 5, 22);\n            e.Graphics.DrawString(&quot;right-click shortcut menu provided by this&quot;, new Font(FontFamily.GenericMonospace, 8), new SolidBrush(Color.Black), 5, 32);\n            e.Graphics.DrawString(&quot;control&#39;s associated EventDesigner to create&quot;, new Font(FontFamily.GenericMonospace, 8), new SolidBrush(Color.Black), 5, 42);\n            e.Graphics.DrawString(&quot;a new event handler linked with the testEvent&quot;, new Font(FontFamily.GenericMonospace, 8), new SolidBrush(Color.Black), 5, 52);\n            e.Graphics.DrawString(&quot;of this control in the initialization code&quot;, new Font(FontFamily.GenericMonospace, 8), new SolidBrush(Color.Black), 5, 62);\n            e.Graphics.DrawString(&quot;for this control.&quot;, new Font(FontFamily.GenericMonospace, 8), new SolidBrush(Color.Black), 5, 72);\n        }\n    }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The event binding service provides a way to link an event handler with a component event from designer code.  </p>\n<p> To link an event handler with a component event using the IEventBindingService, you must first obtain an <a class=\"xref\" href=\"system.componentmodel.eventdescriptor\" data-linktype=\"relative-path\">EventDescriptor</a> for the event of the component you intend to link. The IEventBindingService provides methods that can convert an <a class=\"xref\" href=\"system.componentmodel.eventdescriptor\" data-linktype=\"relative-path\">EventDescriptor</a> to a <a class=\"xref\" href=\"system.componentmodel.propertydescriptor\" data-linktype=\"relative-path\">PropertyDescriptor</a> which you can use to configure the event with an event handler method name.  </p>\n<p> The <a class=\"xref\" href=\"system.componentmodel.typedescriptor\" data-linktype=\"relative-path\">TypeDescriptor</a> object provides a <a class=\"xref\" href=\"system.componentmodel.typedescriptor#System_ComponentModel_TypeDescriptor_GetEvents_\" data-linktype=\"relative-path\">GetEvents</a> method that you can use to obtain an <a class=\"xref\" href=\"system.componentmodel.eventdescriptorcollection\" data-linktype=\"relative-path\">EventDescriptorCollection</a> containing <a class=\"xref\" href=\"system.componentmodel.eventdescriptor\" data-linktype=\"relative-path\">EventDescriptor</a> objects for each event of a component. The <a class=\"xref\" href=\"system.componentmodel.design.ieventbindingservice#System_ComponentModel_Design_IEventBindingService_GetEventProperty_\" data-linktype=\"relative-path\">GetEventProperty</a> and <a class=\"xref\" href=\"system.componentmodel.design.ieventbindingservice#System_ComponentModel_Design_IEventBindingService_GetEventProperties_\" data-linktype=\"relative-path\">GetEventProperties</a> methods of the IEventBindingService return a <a class=\"xref\" href=\"system.componentmodel.propertydescriptor\" data-linktype=\"relative-path\">PropertyDescriptor</a> for each <a class=\"xref\" href=\"system.componentmodel.eventdescriptor\" data-linktype=\"relative-path\">EventDescriptor</a> passed to either method. Each <a class=\"xref\" href=\"system.componentmodel.propertydescriptor\" data-linktype=\"relative-path\">PropertyDescriptor</a> returned from <a class=\"xref\" href=\"system.componentmodel.design.ieventbindingservice#System_ComponentModel_Design_IEventBindingService_GetEventProperty_\" data-linktype=\"relative-path\">GetEventProperty</a> or <a class=\"xref\" href=\"system.componentmodel.design.ieventbindingservice#System_ComponentModel_Design_IEventBindingService_GetEventProperties_\" data-linktype=\"relative-path\">GetEventProperties</a> has a property type of string. You can set this string to a value that indicates the name of the event-handler method to link the event with using the <a class=\"xref\" href=\"system.componentmodel.propertydescriptor#System_ComponentModel_PropertyDescriptor_SetValue_\" data-linktype=\"relative-path\">SetValue</a> method of the <a class=\"xref\" href=\"system.componentmodel.propertydescriptor\" data-linktype=\"relative-path\">PropertyDescriptor</a>.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_IEventBindingService_CreateUniqueMethodName_System_ComponentModel_IComponent_System_ComponentModel_EventDescriptor_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CreateUniqueMethodName(IComponent, EventDescriptor)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Creates a unique name for an event-handler method for the specified component and event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string CreateUniqueMethodName (System.ComponentModel.IComponent component, System.ComponentModel.EventDescriptor e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>component</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.icomponent\" data-linktype=\"relative-path\">IComponent</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The component instance the event is connected to.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.eventdescriptor\" data-linktype=\"relative-path\">EventDescriptor</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The event to create a name for.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The recommended name for the event-handler method for this event.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method returns a name that is unique from any other method name in the user&#39;s source code.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_IEventBindingService_GetCompatibleMethods_System_ComponentModel_EventDescriptor_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetCompatibleMethods(EventDescriptor)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a collection of event-handler methods that have a method signature compatible with the specified event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Collections.ICollection GetCompatibleMethods (System.ComponentModel.EventDescriptor e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.eventdescriptor\" data-linktype=\"relative-path\">EventDescriptor</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The event to get the compatible event-handler methods for.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A collection of strings.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Each string in the collection is the name of a method that has a method signature compatible with the specified event.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_IEventBindingService_GetEvent_System_ComponentModel_PropertyDescriptor_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetEvent(PropertyDescriptor)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets an <a class=\"xref\" href=\"system.componentmodel.eventdescriptor\" data-linktype=\"relative-path\">EventDescriptor</a> for the event that the specified property descriptor represents, if it represents an event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.ComponentModel.EventDescriptor GetEvent (System.ComponentModel.PropertyDescriptor property);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>property</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.propertydescriptor\" data-linktype=\"relative-path\">PropertyDescriptor</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The property that represents an event.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.eventdescriptor\" data-linktype=\"relative-path\">EventDescriptor</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.componentmodel.eventdescriptor\" data-linktype=\"relative-path\">EventDescriptor</a> for the event that the property represents, or <code>null</code> if the property does not represent an event.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_IEventBindingService_GetEventProperties_System_ComponentModel_EventDescriptorCollection_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetEventProperties(EventDescriptorCollection)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Converts a set of event descriptors to a set of property descriptors.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.ComponentModel.PropertyDescriptorCollection GetEventProperties (System.ComponentModel.EventDescriptorCollection events);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>events</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.eventdescriptorcollection\" data-linktype=\"relative-path\">EventDescriptorCollection</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The events to convert to properties.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.propertydescriptorcollection\" data-linktype=\"relative-path\">PropertyDescriptorCollection</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An array of <a class=\"xref\" href=\"system.componentmodel.propertydescriptor\" data-linktype=\"relative-path\">PropertyDescriptor</a> objects that describe the event set.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Each returned <a class=\"xref\" href=\"system.componentmodel.propertydescriptor\" data-linktype=\"relative-path\">PropertyDescriptor</a> has a <a class=\"xref\" href=\"system.componentmodel.propertydescriptor#System_ComponentModel_PropertyDescriptor_PropertyType_\" data-linktype=\"relative-path\">PropertyType</a> of string.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_IEventBindingService_GetEventProperty_System_ComponentModel_EventDescriptor_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetEventProperty(EventDescriptor)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Converts a single event descriptor to a property descriptor.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.ComponentModel.PropertyDescriptor GetEventProperty (System.ComponentModel.EventDescriptor e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.eventdescriptor\" data-linktype=\"relative-path\">EventDescriptor</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The event to convert.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.propertydescriptor\" data-linktype=\"relative-path\">PropertyDescriptor</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.componentmodel.propertydescriptor\" data-linktype=\"relative-path\">PropertyDescriptor</a> that describes the event.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The returned <a class=\"xref\" href=\"system.componentmodel.propertydescriptor\" data-linktype=\"relative-path\">PropertyDescriptor</a> has a <a class=\"xref\" href=\"system.componentmodel.propertydescriptor#System_ComponentModel_PropertyDescriptor_PropertyType_\" data-linktype=\"relative-path\">PropertyType</a> of string.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_IEventBindingService_ShowCode\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ShowCode()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Displays the user code for the designer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool ShowCode ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the code is displayed; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method displays the code editor.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_IEventBindingService_ShowCode_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ShowCode(Int32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Displays the user code for the designer at the specified line.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool ShowCode (int lineNumber);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>lineNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The line number to place the caret on.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the code is displayed; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method displays the code editor and positions the cursor on the specified line.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_IEventBindingService_ShowCode_System_ComponentModel_IComponent_System_ComponentModel_EventDescriptor_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ShowCode(IComponent, EventDescriptor)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Displays the user code for the specified event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool ShowCode (System.ComponentModel.IComponent component, System.ComponentModel.EventDescriptor e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>component</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.icomponent\" data-linktype=\"relative-path\">IComponent</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The component that the event is connected to.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.eventdescriptor\" data-linktype=\"relative-path\">EventDescriptor</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The event to display.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the code is displayed; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method displays the code editor and positions the cursor on the line that the specified event is declared on.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.Design.IEventBindingService.yml\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IEventBindingService\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IEventBindingService.GetEvent\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IEventBindingService.GetEventProperties\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IEventBindingService.GetEventProperty\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IEventBindingService.ShowCode\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"c512af26-9af9-e22d-9cd6-ff6978d137bc\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a service for registering event handlers for component events.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.componentmodel.design/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.ComponentModel.Design.IEventBindingService\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.Design.IEventBindingService.yml","open_to_public_contributors":false,"api_name":["System.ComponentModel.Design.IEventBindingService","System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName","System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods","System.ComponentModel.Design.IEventBindingService.GetEvent","System.ComponentModel.Design.IEventBindingService.GetEventProperties","System.ComponentModel.Design.IEventBindingService.GetEventProperty","System.ComponentModel.Design.IEventBindingService.ShowCode"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.ComponentModel.Design.IEventBindingService","System::ComponentModel::Design::IEventBindingService","System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName","System::ComponentModel::Design::IEventBindingService::CreateUniqueMethodName","System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods","System::ComponentModel::Design::IEventBindingService::GetCompatibleMethods","System.ComponentModel.Design.IEventBindingService.GetEvent","System::ComponentModel::Design::IEventBindingService::GetEvent","System.ComponentModel.Design.IEventBindingService.GetEventProperties","System::ComponentModel::Design::IEventBindingService::GetEventProperties","System.ComponentModel.Design.IEventBindingService.GetEventProperty","System::ComponentModel::Design::IEventBindingService::GetEventProperty","System.ComponentModel.Design.IEventBindingService.ShowCode","System::ComponentModel::Design::IEventBindingService::ShowCode"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"c512af26-9af9-e22d-9cd6-ff6978d137bc","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.ComponentModel.Design/IEventBindingService.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IEventBindingService interface | Microsoft Docs","_op_ogTitle":"IEventBindingService interface","description":"Provides a service for registering event handlers for component events.\n","toc_asset_id":"api/_splitted/System.ComponentModel.Design/toc.json","toc_rel":"_splitted/System.ComponentModel.Design/toc.json","source_url":"","ms.assetid":"System.ComponentModel.Design.IEventBindingService","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.design.ieventbindingservice","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.design.ieventbindingservice","fileRelativePath":"api/System.ComponentModel.Design.IEventBindingService.html"},"themesRelativePathToOutputRoot":"_themes/"}