{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">EventLogEntryType</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies the event type of an event log entry.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public enum EventLogEntryType</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">EventLogEntryType</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates how to use the EventLogEntryType class to add information about triggered events to a log file. In this example, a <code>switch</code> statement is used to determine the event type. Each <code>case</code> statement uses the EventLogEntryType to specify the event type, gets the message and ID, and then writes the information to the log.  </p>\n<pre><code class=\"lang-cs\" name=\"EventLogEntryType_6#2\">\n// Create an event log instance.\nmyEventLog = new EventLog(myLog);\n// Initialize source property of obtained instance.\nmyEventLog.Source = mySource;\nswitch (myIntLog)\n{\n    case 1:\n        // Write an &#39;Error&#39; entry in specified log of event log.\n        myEventLog.WriteEntry(myMessage, EventLogEntryType.Error, myID);\n        break;\n    case 2:\n        // Write a &#39;Warning&#39; entry in specified log of event log.\n        myEventLog.WriteEntry(myMessage, EventLogEntryType.Warning, myID);\n        break;\n    case 3:\n        // Write an &#39;Information&#39; entry in specified log of event log.\n        myEventLog.WriteEntry(myMessage, EventLogEntryType.Information, myID);\n        break;\n    case 4:\n        // Write a &#39;FailureAudit&#39; entry in specified log of event log.\n        myEventLog.WriteEntry(myMessage, EventLogEntryType.FailureAudit, myID);\n        break;\n    case 5:\n        // Write a &#39;SuccessAudit&#39; entry in specified log of event log.\n        myEventLog.WriteEntry(myMessage, EventLogEntryType.SuccessAudit, myID);\n        break;\n    default:\n        Console.WriteLine(&quot;Error: Failed to create an event in event log.&quot;);\n        break;\n}\nConsole.WriteLine(&quot;A new event in log &#39;{0}&#39; with ID &#39;{1}&#39; &quot;\n   + &quot;is successfully written into event log.&quot;,\n   myEventLog.Log, myID);\n</code></pre><pre><code class=\"lang-cpp\" name=\"EventLogEntryType_6#2\">// Check whether source exist in event log.\nif (  !EventLog::SourceExists( mySource ) )\n{\n   \n   // Create a new source in a specified log on a system.\n   EventLog::CreateEventSource( mySource, myLog );\n}\n\n// Create an event log instance.* myEventLog = new EventLog(myLog);\n// Initialize source property of obtained instance.\nmyEventLog-&gt;Source = mySource;\nswitch ( myIntLog )\n{\n   case 1:\n      \n      // Write an &#39;Error&#39; entry in specified log of event log.\n      myEventLog-&gt;WriteEntry( myMessage, EventLogEntryType::Error, myID );\n      break;\n\n   case 2:\n      \n      // Write a &#39;Warning&#39; entry in specified log of event log.\n      myEventLog-&gt;WriteEntry( myMessage, EventLogEntryType::Warning, myID );\n      break;\n\n   case 3:\n      \n      // Write an &#39;Information&#39; entry in specified log of event log.\n      myEventLog-&gt;WriteEntry( myMessage, EventLogEntryType::Information, myID );\n      break;\n\n   case 4:\n      \n      // Write a &#39;FailureAudit&#39; entry in specified log of event log.\n      myEventLog-&gt;WriteEntry( myMessage, EventLogEntryType::FailureAudit, myID );\n      break;\n\n   case 5:\n      \n      // Write a &#39;SuccessAudit&#39; entry in specified log of event log.\n      myEventLog-&gt;WriteEntry( myMessage, EventLogEntryType::SuccessAudit, myID );\n      break;\n\n   default:\n      Console::WriteLine( &quot;Error: Failed to create an event in event log.&quot; );\n      break;\n}\nConsole::WriteLine( &quot;A new event in log &#39;{0}&#39; with ID &#39;{1}&#39; is successfully written into event log.&quot;, myEventLog-&gt;Log, myID );\n\n</code></pre><pre><code class=\"lang-vb\" name=\"EventLogEntryType_6#2\">&#39; Check whether source exist in event log.\nIf False = EventLog.SourceExists(mySource) Then\n   &#39; Create a new source in a specified log on a system.\n   EventLog.CreateEventSource(mySource, myLog)\nEnd If\n&#39; Create an event log instance.\nmyEventLog = New EventLog(myLog)\n&#39; Initialize source property of obtained instance.\nmyEventLog.Source = mySource\nSelect Case myIntLog\n   Case 1\n      &#39; Write an &#39;Error&#39; entry in specified log of event log.\n      myEventLog.WriteEntry(myMessage, EventLogEntryType.Error, myID)\n   Case 2\n      &#39; Write a &#39;Warning&#39; entry in specified log of event log.\n      myEventLog.WriteEntry(myMessage, EventLogEntryType.Warning, myID)\n   Case 3\n      &#39; Write an &#39;Information&#39; entry in specified log of event log.\n      myEventLog.WriteEntry(myMessage, EventLogEntryType.Information, myID)\n   Case 4\n      &#39; Write a &#39;FailureAudit&#39; entry in specified log of event log.\n      myEventLog.WriteEntry(myMessage, EventLogEntryType.FailureAudit, myID)\n   Case 5\n      &#39; Write a &#39;SuccessAudit&#39; entry in specified log of event log.\n      myEventLog.WriteEntry(myMessage, EventLogEntryType.SuccessAudit, myID)\n   Case Else\n      Console.WriteLine(&quot;Error: Failed to create an event in event log.&quot;)\nEnd Select\nConsole.WriteLine(&quot;A new event in log &#39;{0}&#39; with ID &#39;{1}&#39; &quot; + _\n         &quot;is successfully written into event log.&quot;, myEventLog.Log, myID)\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The type of an event log entry provides additional information for the entry.  Applications set the entry type when they write the entry to the event log.  </p>\n<p> Each event must be of a single type; the event types cannot be combined for an entry.  The Event Viewer uses this type to determine which icon to display in the list view of the log.</p>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Diagnostics_EventLogEntryType_Error\">\r\n      \t\t\t<span class=\"lang-csharp\">Error</span>\r\n      \t</td>\r\n      \t<td><p>An error event. This indicates a significant problem the user should know about; usually a loss of functionality or data.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_EventLogEntryType_FailureAudit\">\r\n      \t\t\t<span class=\"lang-csharp\">FailureAudit</span>\r\n      \t</td>\r\n      \t<td><p>A failure audit event. This indicates a security event that occurs when an audited access attempt fails; for example, a failed attempt to open a file.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_EventLogEntryType_Information\">\r\n      \t\t\t<span class=\"lang-csharp\">Information</span>\r\n      \t</td>\r\n      \t<td><p>An information event. This indicates a significant, successful operation.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_EventLogEntryType_SuccessAudit\">\r\n      \t\t\t<span class=\"lang-csharp\">SuccessAudit</span>\r\n      \t</td>\r\n      \t<td><p>A success audit event. This indicates a security event that occurs when an audited access attempt is successful; for example, logging on successfully.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_EventLogEntryType_Warning\">\r\n      \t\t\t<span class=\"lang-csharp\">Warning</span>\r\n      \t</td>\r\n      \t<td><p>A warning event. This indicates a problem that is not immediately significant, but that may signify conditions that could cause future problems.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Diagnostics.EventLogEntryType.yml\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.EventLogEntryType\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.EventLogEntryType.Error\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.EventLogEntryType.FailureAudit\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.EventLogEntryType.Information\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.EventLogEntryType.SuccessAudit\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.EventLogEntryType.Warning\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 05:47 AM\">\r\n<meta name=\"document_id\" content=\"07ddce67-7b06-2111-03c2-aeb29621e070\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies the event type of an event log entry.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.diagnostics/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Diagnostics.EventLogEntryType\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Diagnostics.EventLogEntryType.yml","open_to_public_contributors":false,"api_name":["System.Diagnostics.EventLogEntryType","System.Diagnostics.EventLogEntryType.Error","System.Diagnostics.EventLogEntryType.FailureAudit","System.Diagnostics.EventLogEntryType.Information","System.Diagnostics.EventLogEntryType.SuccessAudit","System.Diagnostics.EventLogEntryType.Warning"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Diagnostics.EventLogEntryType","System::Diagnostics::EventLogEntryType","System.Diagnostics.EventLogEntryType.Error","System::Diagnostics::EventLogEntryType::Error","System.Diagnostics.EventLogEntryType.FailureAudit","System::Diagnostics::EventLogEntryType::FailureAudit","System.Diagnostics.EventLogEntryType.Information","System::Diagnostics::EventLogEntryType::Information","System.Diagnostics.EventLogEntryType.SuccessAudit","System::Diagnostics::EventLogEntryType::SuccessAudit","System.Diagnostics.EventLogEntryType.Warning","System::Diagnostics::EventLogEntryType::Warning"],"dev_langs":["csharp"],"updated_at":"2017-03-31 05:47 AM","document_id":"07ddce67-7b06-2111-03c2-aeb29621e070","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Diagnostics/EventLogEntryType.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"EventLogEntryType enum | Microsoft Docs","_op_ogTitle":"EventLogEntryType enum","description":"Specifies the event type of an event log entry.\n","toc_asset_id":"api/_splitted/System.Diagnostics/toc.json","toc_rel":"_splitted/System.Diagnostics/toc.json","source_url":"","ms.assetid":"System.Diagnostics.EventLogEntryType","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.eventlogentrytype","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.eventlogentrytype","fileRelativePath":"api/System.Diagnostics.EventLogEntryType.html"},"themesRelativePathToOutputRoot":"_themes/"}