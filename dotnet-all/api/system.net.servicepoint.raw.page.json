{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ServicePoint</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides connection management for HTTP connections.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.CompilerServices.FriendAccessAllowed]\npublic class ServicePoint</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">ServicePoint</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><span class=\"xref\">System.Runtime.CompilerServices.FriendAccessAllowed</span></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example creates a ServicePoint object that connects to the URI www.contoso.com.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Net.ServicePoint#1\">// This example shows how to use the ServicePoint and ServicePointManager classes.\n// The ServicePointManager class uses the ServicePoint class to manage connections\n// to a remote host. The networking classes reuse service points for all \n// requests to a given URI. In fact, the same ServicePoint object \n// is used to issue requests to Internet resources identified by the same\n// scheme identifier (for example,  HTTP) and host fragment (for example,  www.contoso.com).  \n// This should improve your application performance. \n// Reusing service points in this way can help improve application performance.\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Net;\nusing namespace System::Threading;\nusing namespace System::Text::RegularExpressions;\nvoid ShowProperties( ServicePoint^ sp )\n{\n   Console::WriteLine( &quot;Done calling FindServicePoint()...&quot; );\n   \n   // Display the ServicePoint Internet resource address.\n   Console::WriteLine( &quot;Address = {0}&quot;, sp-&gt;Address );\n   \n   // Display the date and time that the ServicePoint was last \n   // connected to a host.\n   Console::WriteLine( &quot;IdleSince = {0}&quot;, sp-&gt;IdleSince );\n   \n   // Display the maximum length of time that the ServicePoint instance  \n   // is allowed to maintain an idle connection to an Internet  \n   // resource before it is recycled for use in another connection.\n   Console::WriteLine( &quot;MaxIdleTime = {0}&quot;, sp-&gt;MaxIdleTime );\n   \n   Console::WriteLine( &quot;ConnectionName = {0}&quot;, sp-&gt;ConnectionName );\n   \n   // Display the maximum number of connections allowed on this \n   // ServicePoint instance.\n   Console::WriteLine( &quot;ConnectionLimit = {0}&quot;, sp-&gt;ConnectionLimit );\n   \n   // Display the number of connections associated with this \n   // ServicePoint instance.\n   Console::WriteLine( &quot;CurrentConnections = {0}&quot;, sp-&gt;CurrentConnections );\n   \n   if ( sp-&gt;Certificate == nullptr )\n      Console::WriteLine( &quot;Certificate = (null)&quot; );\n   else\n      Console::WriteLine( &quot;Certificate = {0}&quot;, sp-&gt;Certificate );\n\n   if ( sp-&gt;ClientCertificate == nullptr )\n      Console::WriteLine( &quot;Client Certificate = (null)&quot; );\n   else\n      Console::WriteLine( &quot;Client Certificate = {0}&quot;, sp-&gt;ClientCertificate );\n\n   Console::WriteLine( &quot;ProtocolVersion = {0}&quot;, sp-&gt;ProtocolVersion-&gt;ToString() );\n   Console::WriteLine( &quot;SupportsPipelining = {0}&quot;, sp-&gt;SupportsPipelining );\n   \n   Console::WriteLine( &quot;UseNagleAlgorithm = {0} &quot;, sp-&gt;UseNagleAlgorithm.ToString() );\n   Console::WriteLine( &quot;Expect 100-continue = {0}&quot;, sp-&gt;Expect100Continue.ToString() );\n   \n}\n\n\nvoid makeWebRequest( int hashCode, String^ Uri )\n{\n   HttpWebResponse^ res = nullptr;\n   \n   // Make sure that the idle time has elapsed, so that a new \n   // ServicePoint instance is created.\n   Console::WriteLine( &quot;Sleeping for 2 sec.&quot; );\n   Thread::Sleep( 2000 );\n   try\n   {\n      \n      // Create a request to the passed URI.\n      HttpWebRequest^ req = dynamic_cast&lt;HttpWebRequest^&gt;(WebRequest::Create( Uri ));\n      Console::WriteLine( &quot;\\nConnecting to {0} ............&quot;, Uri );\n      \n      // Get the response object.\n      res = dynamic_cast&lt;HttpWebResponse^&gt;(req-&gt;GetResponse());\n      Console::WriteLine( &quot;Connected.\\n&quot; );\n      ServicePoint^ currentServicePoint = req-&gt;ServicePoint;\n      \n      // Display new service point properties.\n      int currentHashCode = currentServicePoint-&gt;GetHashCode();\n      Console::WriteLine( &quot;New service point hashcode: {0}&quot;, currentHashCode );\n      Console::WriteLine( &quot;New service point max idle time: {0}&quot;, currentServicePoint-&gt;MaxIdleTime );\n      Console::WriteLine( &quot;New service point is idle since {0}&quot;, currentServicePoint-&gt;IdleSince );\n      \n      // Check that a new ServicePoint instance has been created.\n      if ( hashCode == currentHashCode )\n            Console::WriteLine( &quot;Service point reused.&quot; );\n      else\n            Console::WriteLine( &quot;A new service point created.&quot; );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;Source : {0}&quot;, e-&gt;Source );\n      Console::WriteLine( &quot;Message : {0}&quot;, e-&gt;Message );\n   }\n   finally\n   {\n      if ( res != nullptr )\n            res-&gt;Close();\n   }\n\n}\n\n\n// Show the user how to use this program when wrong inputs are entered.\nvoid showUsage()\n{\n   Console::WriteLine( &quot;Enter the proxy name as follows:&quot; );\n   Console::WriteLine( &quot;\\tcs_servicepoint proxyName&quot; );\n}\n\n\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n   int port = 80;\n   \n   // Define a regular expression to parse the user&#39;s input.\n   // This is a security check. It allows only\n   // alphanumeric input strings between 2 to 40 characters long.\n   Regex^ rex = gcnew Regex( &quot;^[a-zA-Z]\\\\w{1,39}$&quot; );\n   if ( args-&gt;Length &lt; 2 )\n   {\n      showUsage();\n      return  -1;\n   }\n\n   String^ proxy = args[ 1 ];\n   if ( (rex-&gt;Match(proxy))-&gt;Success != true )\n   {\n      Console::WriteLine( &quot;Input string format not allowed.&quot; );\n      return  -1;\n   }\n\n   String^ proxyAdd = String::Format( &quot;http://{0}:{1}&quot;, proxy, port );\n   \n   // Create a proxy object.  \n   WebProxy^ DefaultProxy = gcnew WebProxy( proxyAdd,true );\n   \n   // Set the proxy that all HttpWebRequest instances use.\n   WebRequest::DefaultWebProxy = DefaultProxy;\n   \n   // Get the base interface for proxy access for the \n   // WebRequest-based classes.\n   IWebProxy^ Iproxy = WebRequest::DefaultWebProxy;\n\n   \n   // Set the maximum number of ServicePoint instances to \n   // maintain. If a ServicePoint instance for that host already \n   // exists when your application requests a connection to\n   // an Internet resource, the ServicePointManager object\n   // returns this existing ServicePoint instance. If none exists \n   // for that host, it creates a new ServicePoint instance.\n   ServicePointManager::MaxServicePoints = 4;\n   \n   // Set the maximum idle time of a ServicePoint instance to 10 seconds.\n   // After the idle time expires, the ServicePoint object is eligible for\n   // garbage collection and cannot be used by the ServicePointManager.\n   ServicePointManager::MaxServicePointIdleTime = 10000;\n   \n   ServicePointManager::UseNagleAlgorithm = true;\n   ServicePointManager::Expect100Continue = true;\n   ServicePointManager::CheckCertificateRevocationList = true;\n   ServicePointManager::DefaultConnectionLimit = ServicePointManager::DefaultPersistentConnectionLimit;\n   \n   // Create the Uri object for the resource you want to access.\n   Uri^ MS = gcnew Uri( &quot;http://msdn.microsoft.com/&quot; );\n   \n   // Use the FindServicePoint method to find an existing \n   // ServicePoint object or to create a new one.   \n   ServicePoint^ servicePoint = ServicePointManager::FindServicePoint( MS, Iproxy );\n   ShowProperties( servicePoint );\n   int hashCode = servicePoint-&gt;GetHashCode();\n   Console::WriteLine( &quot;Service point hashcode: {0}&quot;, hashCode );\n   \n   // Make a request with the same scheme identifier and host fragment\n   // used to create the previous ServicePoint object.\n   makeWebRequest( hashCode, &quot;http://msdn.microsoft.com/library/&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.ServicePoint#1\">&#39; This example shows how to use the ServicePoint and ServicePointManager classes.\n&#39; The ServicePointManager class uses the ServicePoint class to manage connections\n&#39; to a remote host. The networking classes reuse service points for all \n&#39; requests to a given URI. In fact, the same ServicePoint object \n&#39; is used to issue requests to Internet resources identified by the same\n&#39; scheme identifier (for example,  HTTP) and host fragment (for example,  www.contoso.com).  \n&#39; Reusing service points in this way can help improve application  performance.\n\nImports System\nImports System.Net\nImports System.Threading\nImports System.Text.RegularExpressions\n\nNamespace Mssc.Services.ConnectionManagement\n    Module M_TestServicePoint\n\n        Class TestServicePoint\n            Private Shared Sub ShowProperties(ByVal sp As ServicePoint)\n\n                Console.WriteLine(&quot;Done calling FindServicePoint&quot;)\n\n                &#39; Display the ServicePoint Internet resource address.\n                Console.WriteLine((&quot;Address = &quot; + sp.Address.ToString()))\n\n                &#39; Display the date and time that the ServicePoint was last \n                &#39; connected to a host.\n                Console.WriteLine((&quot;IdleSince = &quot; + sp.IdleSince.ToString()))\n\n\n                &#39; Display the maximum length of time that the ServicePoint instance \n                &#39; is allowed to maintain an idle connection to an Internet  \n                &#39; resource before it is recycled for use in another connection.\n                Console.WriteLine((&quot;MaxIdleTime = &quot; + sp.MaxIdleTime.ToString()))\n\n                Console.WriteLine((&quot;ConnectionName = &quot; + sp.ConnectionName))\n\n                &#39; Display the maximum number of connections allowed on this \n                &#39; ServicePoint instance.\n                Console.WriteLine((&quot;ConnectionLimit = &quot; + sp.ConnectionLimit.ToString()))\n\n                &#39; Display the number of connections associated with this \n                &#39; ServicePoint instance.\n                Console.WriteLine((&quot;CurrentConnections = &quot; + sp.CurrentConnections.ToString()))\n\n                If sp.Certificate Is Nothing Then\n                    Console.WriteLine(&quot;Certificate = (null)&quot;)\n                Else\n                    Console.WriteLine((&quot;Certificate = &quot; + sp.Certificate.ToString()))\n                End If\n\n                If sp.ClientCertificate Is Nothing Then\n                    Console.WriteLine(&quot;ClientCertificate = (null)&quot;)\n                Else\n                    Console.WriteLine((&quot;ClientCertificate = &quot; + sp.ClientCertificate.ToString()))\n                End If\n\n                Console.WriteLine(&quot;ProtocolVersion = &quot; + sp.ProtocolVersion.ToString())\n                Console.WriteLine((&quot;SupportsPipelining = &quot; + sp.SupportsPipelining.ToString()))\n\n\n                Console.WriteLine(&quot;UseNagleAlgorithm = &quot; + sp.UseNagleAlgorithm.ToString())\n                Console.WriteLine(&quot;Expect 100-continue = &quot; + sp.Expect100Continue.ToString())\n            End Sub &#39;ShowProperties\n\n\n\n\n\n            Private Shared Sub makeWebRequest(ByVal hashCode As Integer, ByVal Uri As String)\n                Dim res As HttpWebResponse = Nothing\n\n                &#39; Make sure that the idle time has elapsed, so that a new \n                &#39; ServicePoint instance is created.\n                Console.WriteLine(&quot;Sleeping for 2 sec.&quot;)\n                Thread.Sleep(2000)\n\n                Try\n                    &#39; Create a request to the passed URI.\n                    Dim req As HttpWebRequest = CType(WebRequest.Create(Uri), HttpWebRequest)\n                    Console.WriteLine((ControlChars.Lf + &quot;Connecting to &quot; + Uri + &quot; ............&quot;))\n\n                    &#39; Get the response object.\n                    res = CType(req.GetResponse(), HttpWebResponse)\n                    Console.WriteLine(&quot;Connected.&quot; + ControlChars.Lf)\n                    Dim currentServicePoint As ServicePoint = req.ServicePoint\n\n                    &#39; Display new service point properties.\n                    Dim currentHashCode As Integer = currentServicePoint.GetHashCode()\n                    Console.WriteLine((&quot;New service point hashcode: &quot; + currentHashCode.ToString()))\n                    Console.WriteLine((&quot;New service point max idle time: &quot; + currentServicePoint.MaxIdleTime.ToString()))\n                    Console.WriteLine((&quot;New service point is idle since &quot; + currentServicePoint.IdleSince.ToString()))\n\n                    &#39; Check that a new ServicePoint instance has been created.\n                    If hashCode = currentHashCode Then\n                        Console.WriteLine(&quot;Service point reused.&quot;)\n                    Else\n                        Console.WriteLine(&quot;A new service point created.&quot;)\n                    End If\n                Catch e As Exception\n                    Console.WriteLine((&quot;Source : &quot; + e.Source))\n                    Console.WriteLine((&quot;Message : &quot; + e.Message))\n                Finally\n                    If Not (res Is Nothing) Then\n                        res.Close()\n                    End If\n                End Try\n            End Sub &#39;makeWebRequest\n\n\n            &#39; Show the user how to use this program when wrong inputs are entered.\n            Private Shared Sub showUsage()\n                Console.WriteLine(&quot;Enter the proxy name as follows:&quot;)\n                Console.WriteLine(ControlChars.Tab + &quot;vb_servicepoint proxyName&quot;)\n            End Sub &#39;showusage\n\n            &#39; This is the program entry point. It allows the user to enter \n            &#39; a server name that is used to locate its current homepage.\n            Public Shared Sub Main(ByVal args() As String)\n                Dim proxy As String = Nothing\n                Dim port As Integer = 80\n\n                &#39; Define a regular expression to parse the user&#39;s input.\n                &#39; This is a security check. It allows only\n                &#39; alphanumeric input strings between 2 to 40 characters long.\n                Dim rex As New Regex(&quot;^[a-zA-Z]\\w{1,39}$&quot;)\n\n                If args.Length = 0 Then\n                    &#39; Show how to use this program.\n                    showUsage()\n                    Return\n                End If\n\n                proxy = args(0)\n                If (Not (rex.Match(proxy)).Success) Then\n                    Console.WriteLine(&quot;Input string format not allowed.&quot;)\n                    Return\n                End If\n\n                &#39; Create a proxy object.  \n                Dim proxyAdd As String\n                proxyAdd = &quot;http://&quot; + proxy + &quot;:&quot; + port.ToString()\n\n\n                Dim DefaultProxy As New WebProxy(proxyAdd, True)\n\n                &#39; Set the proxy that all HttpWebRequest instances use.\n                WebRequest.DefaultWebProxy = DefaultProxy\n\n\n                &#39; Get the base interface for proxy access for the \n                &#39; WebRequest-based classes.\n                Dim Iproxy As IWebProxy = WebRequest.DefaultWebProxy\n\n                &#39; Set the maximum number of ServicePoint instances to maintain.\n                &#39; Note that, if a ServicePoint instance for that host already \n                &#39; exists when your application requests a connection to\n                &#39; an Internet resource, the ServicePointManager object\n                &#39; returns this existing ServicePoint. If none exists \n                &#39; for that host, it creates a new ServicePoint instance.\n                ServicePointManager.MaxServicePoints = 4\n\n                &#39; Set the maximum idle time of a ServicePoint instance to 10 seconds.\n                &#39; After the idle time expires, the ServicePoint object is eligible for\n                &#39; garbage collection and cannot be used by the ServicePointManager.\n                ServicePointManager.MaxServicePointIdleTime = 10000\n\n\n                ServicePointManager.UseNagleAlgorithm = True\n                ServicePointManager.Expect100Continue = True\n                ServicePointManager.CheckCertificateRevocationList = True\n                ServicePointManager.DefaultConnectionLimit = _\n                    ServicePointManager.DefaultPersistentConnectionLimit\n                &#39; Create the Uri object for the resource you want to access.\n                Dim MS As New Uri(&quot;http://msdn.microsoft.com/&quot;)\n\n                &#39; Use the FindServicePoint method to find an existing \n                &#39; ServicePoint object or to create a new one.   \n                Dim servicePoint As ServicePoint = ServicePointManager.FindServicePoint(MS, Iproxy)\n                ShowProperties(servicePoint)\n                Dim hashCode As Integer = servicePoint.GetHashCode()\n                Console.WriteLine((&quot;Service point hashcode: &quot; + hashCode.ToString()))\n\n                &#39; Make a request with the same scheme identifier and host fragment\n                &#39; used to create the previous ServicePoint object.\n                makeWebRequest(hashCode, &quot;http://msdn.microsoft.com/library/&quot;)\n\n            End Sub &#39;Main\n\n\n        End Class &#39;TestServicePoint\n\n    End Module\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.ServicePoint#1\">// This example shows how to use the ServicePoint and ServicePointManager classes.\n// The ServicePointManager class uses the ServicePoint class to manage connections\n// to a remote host. The networking classes reuse service points for all \n// requests to a given URI. In fact, the same ServicePoint object \n// is used to issue requests to Internet resources identified by the same\n// scheme identifier (for example,  HTTP) and host fragment (for example,  www.contoso.com).  \n// This should improve your application performance. \n// Reusing service points in this way can help improve application performance.\nusing System;\nusing System.Net;\nusing System.Threading;\nusing System.Text.RegularExpressions;\n\nnamespace Mssc.Services.ConnectionManagement\n{\n    class TestServicePoint\n    {\n        private static void ShowProperties (ServicePoint sp)\n        {\n            Console.WriteLine (&quot;Done calling FindServicePoint()...&quot;);\n\n            // Display the ServicePoint Internet resource address.\n            Console.WriteLine (&quot;Address = {0} &quot;, sp.Address.ToString ());\n\n            // Display the date and time that the ServicePoint was last \n            // connected to a host.\n            Console.WriteLine (&quot;IdleSince = &quot; + sp.IdleSince.ToString ());\n\n            // Display the maximum length of time that the ServicePoint instance  \n            // is allowed to maintain an idle connection to an Internet  \n            // resource before it is recycled for use in another connection.\n            Console.WriteLine (&quot;MaxIdleTime = &quot; + sp.MaxIdleTime);\n\n            Console.WriteLine (&quot;ConnectionName = &quot; + sp.ConnectionName);\n\n            // Display the maximum number of connections allowed on this \n            // ServicePoint instance.\n            Console.WriteLine (&quot;ConnectionLimit = &quot; + sp.ConnectionLimit);\n\n            // Display the number of connections associated with this \n            // ServicePoint instance.\n            Console.WriteLine (&quot;CurrentConnections = &quot; + sp.CurrentConnections);\n\n            if (sp.Certificate == null)\n                Console.WriteLine (&quot;Certificate = (null)&quot;);\n            else\n                Console.WriteLine (&quot;Certificate = &quot; + sp.Certificate.ToString ());\n\n            if (sp.ClientCertificate == null)\n                Console.WriteLine (&quot;ClientCertificate = (null)&quot;);\n            else\n                Console. WriteLine (&quot;ClientCertificate = &quot; + sp.ClientCertificate.ToString ());\n\n            Console.WriteLine (&quot;ProtocolVersion = &quot; + sp.ProtocolVersion.ToString ());\n            Console.WriteLine (&quot;SupportsPipelining = &quot; + sp.SupportsPipelining);\n\n            Console.WriteLine (&quot;UseNagleAlgorithm = &quot; + sp.UseNagleAlgorithm.ToString ());\n            Console.WriteLine (&quot;Expect 100-continue = &quot; + sp.Expect100Continue.ToString ());\n        }\n\n        private static void makeWebRequest (int hashCode, string Uri)\n        {\n            HttpWebResponse res = null;\n\n            // Make sure that the idle time has elapsed, so that a new \n            // ServicePoint instance is created.\n            Console.WriteLine (&quot;Sleeping for 2 sec.&quot;);\n            Thread.Sleep (2000);\n            try\n            {\n                // Create a request to the passed URI.\n                HttpWebRequest req = (HttpWebRequest)WebRequest.Create (Uri);\n\n                Console.WriteLine (&quot;\\nConnecting to &quot; + Uri + &quot; ............&quot;);\n\n                // Get the response object.\n                res = (HttpWebResponse)req.GetResponse ();\n                Console.WriteLine (&quot;Connected.\\n&quot;);\n\n                ServicePoint currentServicePoint = req.ServicePoint;\n\n                // Display new service point properties.\n                int currentHashCode = currentServicePoint.GetHashCode ();\n\n                Console.WriteLine (&quot;New service point hashcode: &quot; + currentHashCode);\n                Console.WriteLine (&quot;New service point max idle time: &quot; + currentServicePoint.MaxIdleTime);\n                Console.WriteLine (&quot;New service point is idle since &quot; + currentServicePoint.IdleSince );\n\n                // Check that a new ServicePoint instance has been created.\n                if (hashCode == currentHashCode)\n                    Console.WriteLine (&quot;Service point reused.&quot;);\n                else\n                    Console.WriteLine (&quot;A new service point created.&quot;) ;\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine (&quot;Source : &quot; + e.Source);\n                Console.WriteLine (&quot;Message : &quot; + e.Message);\n            }\n            finally\n            {\n                if (res != null)\n                    res.Close ();\n            }\n        }\n\n        // Show the user how to use this program when wrong inputs are entered.\n        private static void showUsage ()\n        {\n            Console.WriteLine (&quot;Enter the proxy name as follows:&quot;);\n            Console.WriteLine (&quot;\\tcs_servicepoint proxyName&quot;);\n        }\n\n        public static void Main (string[] args)\n        {\n            int port = 80;\n\n            // Define a regular expression to parse the user&#39;s input.\n            // This is a security check. It allows only\n            // alphanumeric input strings between 2 to 40 characters long.\n            Regex rex = new Regex (@&quot;^[a-zA-Z]\\w{1,39}$&quot;);\n\n            if (args.Length &lt; 1)\n            {\n                showUsage ();\n                return;\n            }\n            string proxy = args[0];\n\n            if ((rex.Match (proxy)).Success != true)\n            {\n                Console.WriteLine (&quot;Input string format not allowed.&quot;);\n                return;\n            }\n            string proxyAdd = &quot;http://&quot; + proxy + &quot;:&quot; + port;\n\n            // Create a proxy object.  \n            WebProxy DefaultProxy = new WebProxy (proxyAdd, true);\n\n            // Set the proxy that all HttpWebRequest instances use.\n            WebRequest.DefaultWebProxy = DefaultProxy;\n\n            // Get the base interface for proxy access for the \n            // WebRequest-based classes.\n            IWebProxy Iproxy = WebRequest.DefaultWebProxy;\n\n            // Set the maximum number of ServicePoint instances to \n            // maintain. If a ServicePoint instance for that host already \n            // exists when your application requests a connection to\n            // an Internet resource, the ServicePointManager object\n            // returns this existing ServicePoint instance. If none exists \n            // for that host, it creates a new ServicePoint instance.\n            ServicePointManager.MaxServicePoints = 4;\n\n            // Set the maximum idle time of a ServicePoint instance to 10 seconds.\n            // After the idle time expires, the ServicePoint object is eligible for\n            // garbage collection and cannot be used by the ServicePointManager object.\n            ServicePointManager.MaxServicePointIdleTime = 10000;\n\n\n\n            ServicePointManager.UseNagleAlgorithm = true;\n            ServicePointManager.Expect100Continue = true;\n            ServicePointManager.CheckCertificateRevocationList = true;\n            ServicePointManager.DefaultConnectionLimit = ServicePointManager.DefaultPersistentConnectionLimit;\n            // Create the Uri object for the resource you want to access.\n            Uri MS = new Uri (&quot;http://msdn.microsoft.com/&quot;);\n\n            // Use the FindServicePoint method to find an existing \n            // ServicePoint object or to create a new one.  \n            ServicePoint servicePoint = ServicePointManager.FindServicePoint (MS, Iproxy);\n\n            ShowProperties (servicePoint);\n\n            int hashCode = servicePoint.GetHashCode ();\n\n            Console.WriteLine (&quot;Service point hashcode: &quot; + hashCode);\n\n            // Make a request with the same scheme identifier and host fragment\n            // used to create the previous ServicePoint object.\n            makeWebRequest (hashCode, &quot;http://msdn.microsoft.com/library/&quot;);\n        \n\n            \n        }\n\n    }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The ServicePoint class handles connections to an Internet resource based on the host information passed in the resource&#39;s Uniform Resource Identifier (URI). The initial connection to the resource determines the information that the ServicePoint object maintains, which is then shared by all subsequent requests to that resource.  </p>\n<p> ServicePoint objects are managed by the <a class=\"xref\" href=\"system.net.servicepointmanager\" data-linktype=\"relative-path\">ServicePointManager</a> class and are created, if necessary, by the <a class=\"xref\" href=\"system.net.servicepointmanager#System_Net_ServicePointManager_FindServicePoint_\" data-linktype=\"relative-path\">FindServicePoint</a> method. ServicePoint objects are never created directly but are always created and managed by the <a class=\"xref\" href=\"system.net.servicepointmanager\" data-linktype=\"relative-path\">ServicePointManager</a> class. The maximum number of ServicePoint objects that can be created is set by the <a class=\"xref\" href=\"system.net.servicepointmanager#System_Net_ServicePointManager_MaxServicePoints_\" data-linktype=\"relative-path\">MaxServicePoints</a> property.  </p>\n<p> Each ServicePoint object maintains its connection to an Internet resource until it has been idle longer than the time specified in the <a class=\"xref\" href=\"system.net.servicepoint#System_Net_ServicePoint_MaxIdleTime_\" data-linktype=\"relative-path\">MaxIdleTime</a> property. When a ServicePoint exceeds the <a class=\"xref\" href=\"system.net.servicepoint#System_Net_ServicePoint_MaxIdleTime_\" data-linktype=\"relative-path\">MaxIdleTime</a> value, it can be recycled to another connection. The default value of <a class=\"xref\" href=\"system.net.servicepoint#System_Net_ServicePoint_MaxIdleTime_\" data-linktype=\"relative-path\">MaxIdleTime</a> is set by the <a class=\"xref\" href=\"system.net.servicepointmanager#System_Net_ServicePointManager_MaxServicePointIdleTime_\" data-linktype=\"relative-path\">MaxServicePointIdleTime</a> property.  </p>\n<p> When the <a class=\"xref\" href=\"system.net.servicepoint#System_Net_ServicePoint_ConnectionLeaseTimeout_\" data-linktype=\"relative-path\">ConnectionLeaseTimeout</a> property is set to a value other than -1, and after the specified time elapses, an active ServicePoint connection is closed after it services the next request. This is useful for applications that do not require active connections that are opened indefinitely, as they are by default.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In high load conditions, some applications may run out of free threads in the ThreadPool, which may lead to poor system performance (such as high and variable transaction times). See <a href=\"http://msdn.microsoft.com/library/default.asp?url=/library/dnpag/html/scalenetchapt17.asp\" data-linktype=\"external\">http://msdn.microsoft.com/library/default.asp?url=/library/dnpag/html/scalenetchapt17.asp</a> for a number of configuration changes you can make to fix this issue.</p>\n</div>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Net_ServicePoint_Address_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_ServicePoint_Address\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Address</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the Uniform Resource Identifier (URI) of the server that this <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> object connects to.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Uri Address { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An instance of the <a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a> class that contains the URI of the Internet server that this <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> object connects to.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><span class=\"xref\">System.Runtime.CompilerServices.FriendAccessAllowed</span></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> is in host mode.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Net_ServicePoint_BindIPEndPointDelegate_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_ServicePoint_BindIPEndPointDelegate\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">BindIPEndPointDelegate</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Specifies the delegate to associate a local <a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a> with a <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Net.BindIPEndPoint BindIPEndPointDelegate { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.bindipendpoint\" data-linktype=\"relative-path\">BindIPEndPoint</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A delegate that forces a <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> to use a particular local Internet Protocol (IP) address and port number. The default value is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><span class=\"xref\">System.Runtime.CompilerServices.FriendAccessAllowed</span></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Some load balancing techniques require a client to use a specific local IP address and port number, rather than <a class=\"xref\" href=\"system.net.ipaddress#System_Net_IPAddress_Any\" data-linktype=\"relative-path\">System.Net.IPAddress.Any</a> (or <a class=\"xref\" href=\"system.net.ipaddress#System_Net_IPAddress_IPv6Any\" data-linktype=\"relative-path\">System.Net.IPAddress.IPv6Any</a> for Internet Protocol Version 6) and an ephemeral port. Your BindIPEndPointDelegate can satisfy this requirement.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Net_ServicePoint_Certificate_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_ServicePoint_Certificate\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Certificate</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the certificate received for this <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Security.Cryptography.X509Certificates.X509Certificate Certificate { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">X509Certificate</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">X509Certificate</a> class that contains the security certificate received for this <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><span class=\"xref\">System.Runtime.CompilerServices.FriendAccessAllowed</span></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Although a <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> object can make multiple connections to an Internet resource, it can maintain only one certificate.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Net_ServicePoint_ClientCertificate_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_ServicePoint_ClientCertificate\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ClientCertificate</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the last client certificate sent to the server.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Security.Cryptography.X509Certificates.X509Certificate ClientCertificate { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">X509Certificate</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">X509Certificate</a> object that contains the public values of the last client certificate sent to the server.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><span class=\"xref\">System.Runtime.CompilerServices.FriendAccessAllowed</span></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Net_ServicePoint_ConnectionLeaseTimeout_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_ServicePoint_ConnectionLeaseTimeout\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ConnectionLeaseTimeout</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the number of milliseconds after which an active <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> connection is closed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int ConnectionLeaseTimeout { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> that specifies the number of milliseconds that an active <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> connection remains open. The default is -1, which allows an active <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> connection to stay connected indefinitely. Set this property to 0 to force <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> connections to close after servicing a request.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><span class=\"xref\">System.Runtime.CompilerServices.FriendAccessAllowed</span></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The value specified for a set operation is a negative number less than -1.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>You can use this property to ensure that a <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> object&#39;s active connections do not remain open indefinitely. This property is intended for scenarios where connections should be dropped and reestablished periodically, such as load balancing scenarios.  </p>\n<p> By default, when <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_KeepAlive_\" data-linktype=\"relative-path\">KeepAlive</a> is <code>true</code> for a request, the <a class=\"xref\" href=\"system.net.servicepoint#System_Net_ServicePoint_MaxIdleTime_\" data-linktype=\"relative-path\">MaxIdleTime</a> property sets the time-out for closing <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> connections due to inactivity. If the <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> has active connections, <a class=\"xref\" href=\"system.net.servicepoint#System_Net_ServicePoint_MaxIdleTime_\" data-linktype=\"relative-path\">MaxIdleTime</a> has no effect and the connections remain open indefinitely.  </p>\n<p> When the ConnectionLeaseTimeout property is set to a value other than -1, and after the specified time elapses, an active <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> connection is closed after servicing a request by setting <a class=\"xref\" href=\"system.net.ftpwebrequest#System_Net_FtpWebRequest_KeepAlive_\" data-linktype=\"relative-path\">KeepAlive</a> to <code>false</code> in that request.  </p>\n<p> Setting this value affects all connections managed by the <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Net_ServicePoint_ConnectionLimit_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_ServicePoint_ConnectionLimit\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ConnectionLimit</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the maximum number of connections allowed on this <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int ConnectionLimit { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The maximum number of connections allowed on this <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><span class=\"xref\">System.Runtime.CompilerServices.FriendAccessAllowed</span></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The connection limit is equal to or less than 0.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The ConnectionLimit property sets the maximum number of connections that the <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> object can make to an Internet resource. The value of the ConnectionLimit property is set to the value of the <a class=\"xref\" href=\"system.net.servicepointmanager#System_Net_ServicePointManager_DefaultConnectionLimit_\" data-linktype=\"relative-path\">DefaultConnectionLimit</a> property when the <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> object is created; subsequent changes to <a class=\"xref\" href=\"system.net.servicepointmanager#System_Net_ServicePointManager_DefaultConnectionLimit_\" data-linktype=\"relative-path\">DefaultConnectionLimit</a> have no effect on existing <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> objects.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Net_ServicePoint_ConnectionName_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_ServicePoint_ConnectionName\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ConnectionName</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the connection name.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string ConnectionName { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> that represents the connection name.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><span class=\"xref\">System.Runtime.CompilerServices.FriendAccessAllowed</span></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If the <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> object was constructed with a <a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a> object (the <a class=\"xref\" href=\"system.net.servicepointmanager#System_Net_ServicePointManager_FindServicePoint_\" data-linktype=\"relative-path\">FindServicePoint</a> or <a class=\"xref\" href=\"system.net.servicepointmanager#System_Net_ServicePointManager_FindServicePoint_\" data-linktype=\"relative-path\">FindServicePoint</a> methods, for example), then the ConnectionName property represents the <a class=\"xref\" href=\"system.uri#System_Uri_Scheme_\" data-linktype=\"relative-path\">Scheme</a> property of the <a class=\"xref\" href=\"system.uri\" data-linktype=\"relative-path\">Uri</a> object used.  </p>\n<p> If the <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> object was constructed from a network host and port, the ConnectionName property contains a string that represents the host and the network port. If the ConnectionName property is set when constructed from a host and port, only <a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a> objects with the same <a class=\"xref\" href=\"system.net.webrequest#System_Net_WebRequest_ConnectionGroupName_\" data-linktype=\"relative-path\">ConnectionGroupName</a> value can use this <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Net_ServicePoint_CurrentConnections_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_ServicePoint_CurrentConnections\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CurrentConnections</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the number of open connections associated with this <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int CurrentConnections { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of open connections associated with this <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><span class=\"xref\">System.Runtime.CompilerServices.FriendAccessAllowed</span></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The CurrentConnections property contains the number of open Internet connections associated with this <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> object. The value of CurrentConnections cannot exceed that of <a class=\"xref\" href=\"system.net.servicepoint#System_Net_ServicePoint_ConnectionLimit_\" data-linktype=\"relative-path\">ConnectionLimit</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Net_ServicePoint_Expect100Continue_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_ServicePoint_Expect100Continue\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Expect100Continue</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that determines whether 100-Continue behavior is used.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool Expect100Continue { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to expect 100-Continue responses for <code>POST</code> requests; otherwise, <code>false</code>. The default value is <code>true</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><span class=\"xref\">System.Runtime.CompilerServices.FriendAccessAllowed</span></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When this property is set to <code>true</code>, client requests that use the <code>POST</code> method expect to receive a 100-Continue response from the server to indicate that the client should send the data to be posted. This mechanism allows clients to avoid sending large amounts of data over the network when the server, based on the request headers, intends to reject the request.  </p>\n<p> For example, assume the Expect100Continue property is <code>false</code>. When the request is sent to the server, it includes the data. If, after reading the request headers, the server requires authentication and sends a 401 response, the client must resend the data with proper authentication headers.  </p>\n<p> If the Expect100Continue property is <code>true</code>, the request headers are sent to the server. If the server has not rejected the request, it sends a 100-Continue response signaling that the data can be transmitted. If, as in the preceding example, the server requires authentication, it sends the 401 response and the client has not unnecessarily transmitted the data.  </p>\n<p> Changing the value of this property does not affect existing connections. Only new connections created after the change are affected.  </p>\n<p> The Expect 100-Continue behavior is fully described in IETF RFC 2616 Section 10.1.1.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Net_ServicePoint_IdleSince_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_ServicePoint_IdleSince\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IdleSince</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the date and time that the <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> object was last connected to a host.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public DateTime IdleSince { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> object that contains the date and time at which the <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> object was last connected.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><span class=\"xref\">System.Runtime.CompilerServices.FriendAccessAllowed</span></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The IdleSince property records the last date and time at which a service point was disconnected from a host. When the difference between the current time and IdleSince exceeds the value of <a class=\"xref\" href=\"system.net.servicepoint#System_Net_ServicePoint_MaxIdleTime_\" data-linktype=\"relative-path\">MaxIdleTime</a>, the <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> object is available for recycling to another connection.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Net_ServicePoint_MaxIdleTime_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_ServicePoint_MaxIdleTime\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MaxIdleTime</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the amount of time a connection associated with the <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> object can remain idle before the connection is closed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int MaxIdleTime { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The length of time, in milliseconds, that a connection associated with the <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> object can remain idle before it is closed and reused for another connection.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><span class=\"xref\">System.Runtime.CompilerServices.FriendAccessAllowed</span></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>MaxIdleTime is set to less than <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">Infinite</a> or greater than <a class=\"xref\" href=\"system.int32#System_Int32_MaxValue\" data-linktype=\"relative-path\">MaxValue</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>You can set MaxIdleTime to <a class=\"xref\" href=\"system.threading.timeout#System_Threading_Timeout_Infinite\" data-linktype=\"relative-path\">System.Threading.Timeout.Infinite</a> to indicate that a connection associated with the <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> object should never time out.  </p>\n<p> The default value of the MaxIdleTime property is the value of the <a class=\"xref\" href=\"system.net.servicepointmanager#System_Net_ServicePointManager_MaxServicePointIdleTime_\" data-linktype=\"relative-path\">MaxServicePointIdleTime</a> property when the <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> object is created. Subsequent changes to the <a class=\"xref\" href=\"system.net.servicepointmanager#System_Net_ServicePointManager_MaxServicePointIdleTime_\" data-linktype=\"relative-path\">MaxServicePointIdleTime</a> property have no effect on existing <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> objects.  </p>\n<p> When the MaxIdleTime for a connection associated with a <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> is exceeded, the connection remains open until the application tries to use the connection. At that time, the Framework closes the connection and creates a new connection to the remote host.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Net_ServicePoint_ProtocolVersion_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_ServicePoint_ProtocolVersion\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ProtocolVersion</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the version of the HTTP protocol that the <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> object uses.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual Version ProtocolVersion { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.version\" data-linktype=\"relative-path\">Version</a> object that contains the HTTP protocol version that the <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> object uses.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><span class=\"xref\">System.Runtime.CompilerServices.FriendAccessAllowed</span></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The HTTP protocol versions are HTTP/1.0 and HTTP/1.1.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Net_ServicePoint_ReceiveBufferSize_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_ServicePoint_ReceiveBufferSize\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ReceiveBufferSize</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the size of the receiving buffer for the socket used by this <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int ReceiveBufferSize { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> that contains the size, in bytes, of the receive buffer. The default is 8192.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><span class=\"xref\">System.Runtime.CompilerServices.FriendAccessAllowed</span></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The value specified for a set operation is greater than <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>For additional information, see <a class=\"xref\" href=\"system.net.sockets.socket#System_Net_Sockets_Socket_ReceiveBufferSize_\" data-linktype=\"relative-path\">ReceiveBufferSize</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Net_ServicePoint_SupportsPipelining_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_ServicePoint_SupportsPipelining\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SupportsPipelining</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Indicates whether the <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> object supports pipelined connections.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool SupportsPipelining { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> object supports pipelined connections; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><span class=\"xref\">System.Runtime.CompilerServices.FriendAccessAllowed</span></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Pipelining allows clients to send multiple requests across a persistent connection without waiting for each response from the server. The server sends the responses in the same order as the requests were received.  </p>\n<p> Pipelining is described in detail in IETF RFC 2616 section 8.1.2.2.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Net_ServicePoint_UseNagleAlgorithm_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_ServicePoint_UseNagleAlgorithm\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">UseNagleAlgorithm</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that determines whether the Nagle algorithm is used on connections managed by this <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool UseNagleAlgorithm { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to use the Nagle algorithm; otherwise, <code>false</code>. The default value is <code>true</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><span class=\"xref\">System.Runtime.CompilerServices.FriendAccessAllowed</span></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Nagle algorithm is used to buffer small packets of data and transmit them as a single packet. This process, referred to as &quot;nagling,&quot; is widely used because it reduces the number of packets transmitted and lowers the overhead per packet.  </p>\n<p> Changing the value of this property does not affect existing connections. Only new connections created after the change are affected.  </p>\n<p> The Nagle algorithm is fully described in IETF RFC 896.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Net_ServicePoint_CloseConnectionGroup_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_ServicePoint_CloseConnectionGroup_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CloseConnectionGroup(String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Removes the specified connection group from this <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool CloseConnectionGroup (string connectionGroupName);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>connectionGroupName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of the connection group that contains the connections to close and remove from this service point.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value that indicates whether the connection group was closed.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><span class=\"xref\">System.Runtime.CompilerServices.FriendAccessAllowed</span></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Connection groups associate a set of requests with a particular connection or set of connections. This method removes and closes all connections that belong to the specified connection group.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Net_ServicePoint_SetTcpKeepAlive_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_ServicePoint_SetTcpKeepAlive_System_Boolean_System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SetTcpKeepAlive(Boolean, Int32, Int32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Enables or disables the keep-alive option on a TCP connection.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void SetTcpKeepAlive (bool enabled, int keepAliveTime, int keepAliveInterval);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>enabled</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>If set to true, then the TCP keep-alive option on a TCP connection will be enabled using the specified <code>keepAliveTime</code> and <code>keepAliveInterval</code> values.  </p>\n<p> If set to false, then the TCP keep-alive option is disabled and the remaining parameters are ignored.  </p>\n<p> The default value is false.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>keepAliveTime</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Specifies the timeout, in milliseconds, with no activity until the first keep-alive packet is sent.  </p>\n<p> The value must be greater than 0.  If a value of less than or equal to zero is passed an <a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a> is thrown.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>keepAliveInterval</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Specifies the interval, in milliseconds, between when successive keep-alive packets are sent if no acknowledgement is received.  </p>\n<p> The value must be greater than 0.  If a value of less than or equal to zero is passed an <a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a> is thrown.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><span class=\"xref\">System.Runtime.CompilerServices.FriendAccessAllowed</span></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The value specified for <code>keepAliveTime</code> or <code>keepAliveInterval</code> parameter is less than or equal to 0.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>An application can request that a TCP/IP provider enable the use of keep-alive packets on a TCP connection. The default is that the use of keep-alive packets on a TCP connection is disabled.  </p>\n<p> The default settings when a TCP socket is initialized sets the keep-alive timeout to 2 hours and the keep-alive interval to 1 second. The <code>keepAliveTime</code> parameter specifies the timeout, in milliseconds, with no activity until the first keep-alive packet is sent. The <code>keepAliveInterval</code> parameter specifies the interval, in milliseconds, between when successive keep-alive packets are sent if no acknowledgement is received. The number of keep-alive probes cannot be changed and is set to 10.  </p>\n<p> If a TCP connection is dropped as the result of keep-alives, a <a class=\"xref\" href=\"system.net.sockets.socketerror\" data-linktype=\"relative-path\">SocketError</a> of <a class=\"xref\" href=\"system.net.sockets.socketerror\" data-linktype=\"relative-path\">SocketError</a> is returned to any calls in progress on the socket, and any subsequent calls will fail with a <a class=\"xref\" href=\"system.net.sockets.socketerror\" data-linktype=\"relative-path\">SocketError</a> of <a class=\"xref\" href=\"system.net.sockets.socketerror\" data-linktype=\"relative-path\">SocketError</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Net.ServicePoint.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.ServicePoint\">\r\n<meta name=\"APIName\" content=\"System.Net.ServicePoint.Address\">\r\n<meta name=\"APIName\" content=\"System.Net.ServicePoint.BindIPEndPointDelegate\">\r\n<meta name=\"APIName\" content=\"System.Net.ServicePoint.Certificate\">\r\n<meta name=\"APIName\" content=\"System.Net.ServicePoint.ClientCertificate\">\r\n<meta name=\"APIName\" content=\"System.Net.ServicePoint.CloseConnectionGroup\">\r\n<meta name=\"APIName\" content=\"System.Net.ServicePoint.ConnectionLeaseTimeout\">\r\n<meta name=\"APIName\" content=\"System.Net.ServicePoint.ConnectionLimit\">\r\n<meta name=\"APIName\" content=\"System.Net.ServicePoint.ConnectionName\">\r\n<meta name=\"APIName\" content=\"System.Net.ServicePoint.CurrentConnections\">\r\n<meta name=\"APIName\" content=\"System.Net.ServicePoint.Expect100Continue\">\r\n<meta name=\"APIName\" content=\"System.Net.ServicePoint.IdleSince\">\r\n<meta name=\"APIName\" content=\"System.Net.ServicePoint.MaxIdleTime\">\r\n<meta name=\"APIName\" content=\"System.Net.ServicePoint.ProtocolVersion\">\r\n<meta name=\"APIName\" content=\"System.Net.ServicePoint.ReceiveBufferSize\">\r\n<meta name=\"APIName\" content=\"System.Net.ServicePoint.SetTcpKeepAlive\">\r\n<meta name=\"APIName\" content=\"System.Net.ServicePoint.SupportsPipelining\">\r\n<meta name=\"APIName\" content=\"System.Net.ServicePoint.UseNagleAlgorithm\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 05:47 AM\">\r\n<meta name=\"document_id\" content=\"5cfac781-dab5-1a2c-7772-dda841af0ed8\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides connection management for HTTP connections.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.net/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.ServicePoint\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Net.ServicePoint.yml","open_to_public_contributors":false,"api_name":["System.Net.ServicePoint","System.Net.ServicePoint.Address","System.Net.ServicePoint.BindIPEndPointDelegate","System.Net.ServicePoint.Certificate","System.Net.ServicePoint.ClientCertificate","System.Net.ServicePoint.CloseConnectionGroup","System.Net.ServicePoint.ConnectionLeaseTimeout","System.Net.ServicePoint.ConnectionLimit","System.Net.ServicePoint.ConnectionName","System.Net.ServicePoint.CurrentConnections","System.Net.ServicePoint.Expect100Continue","System.Net.ServicePoint.IdleSince","System.Net.ServicePoint.MaxIdleTime","System.Net.ServicePoint.ProtocolVersion","System.Net.ServicePoint.ReceiveBufferSize","System.Net.ServicePoint.SetTcpKeepAlive","System.Net.ServicePoint.SupportsPipelining","System.Net.ServicePoint.UseNagleAlgorithm"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.ServicePoint","System::Net::ServicePoint","System.Net.ServicePoint.Address","System::Net::ServicePoint::Address","System.Net.ServicePoint.BindIPEndPointDelegate","System::Net::ServicePoint::BindIPEndPointDelegate","System.Net.ServicePoint.Certificate","System::Net::ServicePoint::Certificate","System.Net.ServicePoint.ClientCertificate","System::Net::ServicePoint::ClientCertificate","System.Net.ServicePoint.CloseConnectionGroup","System::Net::ServicePoint::CloseConnectionGroup","System.Net.ServicePoint.ConnectionLeaseTimeout","System::Net::ServicePoint::ConnectionLeaseTimeout","System.Net.ServicePoint.ConnectionLimit","System::Net::ServicePoint::ConnectionLimit","System.Net.ServicePoint.ConnectionName","System::Net::ServicePoint::ConnectionName","System.Net.ServicePoint.CurrentConnections","System::Net::ServicePoint::CurrentConnections","System.Net.ServicePoint.Expect100Continue","System::Net::ServicePoint::Expect100Continue","System.Net.ServicePoint.IdleSince","System::Net::ServicePoint::IdleSince","System.Net.ServicePoint.MaxIdleTime","System::Net::ServicePoint::MaxIdleTime","System.Net.ServicePoint.ProtocolVersion","System::Net::ServicePoint::ProtocolVersion","System.Net.ServicePoint.ReceiveBufferSize","System::Net::ServicePoint::ReceiveBufferSize","System.Net.ServicePoint.SetTcpKeepAlive","System::Net::ServicePoint::SetTcpKeepAlive","System.Net.ServicePoint.SupportsPipelining","System::Net::ServicePoint::SupportsPipelining","System.Net.ServicePoint.UseNagleAlgorithm","System::Net::ServicePoint::UseNagleAlgorithm"],"dev_langs":["csharp"],"updated_at":"2017-03-31 05:47 AM","document_id":"5cfac781-dab5-1a2c-7772-dda841af0ed8","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Net/ServicePoint.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ServicePoint class | Microsoft Docs","_op_ogTitle":"ServicePoint class","description":"Provides connection management for HTTP connections.\n","toc_asset_id":"api/_splitted/System.Net/toc.json","toc_rel":"_splitted/System.Net/toc.json","source_url":"","ms.assetid":"System.Net.ServicePoint","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.net.servicepoint","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.net.servicepoint","fileRelativePath":"api/System.Net.ServicePoint.html"},"themesRelativePathToOutputRoot":"_themes/"}