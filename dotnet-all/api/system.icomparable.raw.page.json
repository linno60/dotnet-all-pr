{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">IComparable</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Defines a generalized type-specific comparison method that a value type or class implements to order or sort its instances.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic interface IComparable</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example illustrates the implementation of IComparable and the requisite <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method.  </p>\n<pre><code class=\"lang-cs\" name=\"IComparable Example#1\">using System;\nusing System.Collections;\n\npublic class Temperature : IComparable \n{\n    // The temperature value\n    protected double temperatureF;\n\n    public int CompareTo(object obj) {\n        if (obj == null) return 1;\n        \n        Temperature otherTemperature = obj as Temperature;\n        if (otherTemperature != null) \n            return this.temperatureF.CompareTo(otherTemperature.temperatureF);\n        else\n           throw new ArgumentException(&quot;Object is not a Temperature&quot;);\n    }\n\n    public double Fahrenheit \n    {\n        get \n        {\n            return this.temperatureF;\n        }\n        set {\n            this.temperatureF = value;\n        }\n    }\n\n    public double Celsius \n    {\n        get \n        {\n            return (this.temperatureF - 32) * (5.0/9);\n        }\n        set \n        {\n            this.temperatureF = (value * 9.0/5) + 32;\n        }\n    }\n}\n\npublic class CompareTemperatures\n{\n   public static void Main()\n   {\n      ArrayList temperatures = new ArrayList();\n      // Initialize random number generator.\n      Random rnd = new Random();\n      \n      // Generate 10 temperatures between 0 and 100 randomly.\n      for (int ctr = 1; ctr &lt;= 10; ctr++)\n      {\n         int degrees = rnd.Next(0, 100);\n         Temperature temp = new Temperature();\n         temp.Fahrenheit = degrees;\n         temperatures.Add(temp);   \n      }\n\n      // Sort ArrayList.\n      temperatures.Sort();\n      \n      foreach (Temperature temp in temperatures)\n         Console.WriteLine(temp.Fahrenheit);\n            \n   }\n}\n// The example displays the following output to the console (individual\n// values may vary because they are randomly generated):\n//       2\n//       7\n//       16\n//       17\n//       31\n//       37\n//       58\n//       66\n//       72\n//       95\n</code></pre><pre><code class=\"lang-cpp\" name=\"IComparable Example#1\">using namespace System;\nusing namespace System::Collections;\n\npublic ref class Temperature: public IComparable {\n   /// &lt;summary&gt;\n   /// IComparable.CompareTo implementation.\n   /// &lt;/summary&gt;\nprotected:\n   // The value holder\n   Double m_value;\n\npublic:\n   virtual Int32 CompareTo( Object^ obj ) {\n   \n      if (obj == nullptr) return 1;\n      \n      if ( obj-&gt;GetType() == Temperature::typeid ) {\n         Temperature^ temp = dynamic_cast&lt;Temperature^&gt;(obj);\n\n         return m_value.CompareTo( temp-&gt;m_value );\n      }\n      throw gcnew ArgumentException(  &quot;object is not a Temperature&quot; );\n   }\n\n   property Double Value {\n      Double get() {\n         return m_value;\n      }\n      void set( Double value ) {\n         m_value = value;\n      }\n   }\n\n   property Double Celsius  {\n      Double get() {\n         return (m_value - 32) / 1.8;\n      }\n      void set( Double value ) {\n         m_value = (value * 1.8) + 32;\n      }\n   }\n};\n\nint main()\n{\n   ArrayList^ temperatures = gcnew ArrayList;\n   // Initialize random number generator.\n   Random^ rnd = gcnew Random;\n\n   // Generate 10 temperatures between 0 and 100 randomly.\n   for (int ctr = 1; ctr &lt;= 10; ctr++)\n   {\n      int degrees = rnd-&gt;Next(0, 100);\n      Temperature^ temp = gcnew Temperature;\n      temp-&gt;Value = degrees;\n      temperatures-&gt;Add(temp);\n   }\n\n   // Sort ArrayList.\n   temperatures-&gt;Sort();\n      \n   for each (Temperature^ temp in temperatures)\n      Console::WriteLine(temp-&gt;Value);\n   return 0;\n}\n// The example displays the following output to the console (individual\n// values may vary because they are randomly generated):\n//       2\n//       7\n//       16\n//       17\n//       31\n//       37\n//       58\n//       66\n//       72\n//       95\n</code></pre><pre><code class=\"lang-vb\" name=\"IComparable Example#1\">Imports System.Collections\n\nPublic Class Temperature\n    Implements IComparable\n    &#39; The temperature value\n    Protected temperatureF As Double\n\n    Public Overloads Function CompareTo(ByVal obj As Object) As Integer _\n        Implements IComparable.CompareTo\n        \n        If obj Is Nothing Then Return 1\n\n        Dim otherTemperature As Temperature = TryCast(obj, Temperature)\n        If otherTemperature IsNot Nothing Then\n            Return Me.temperatureF.CompareTo(otherTemperature.temperatureF)\n        Else\n           Throw New ArgumentException(&quot;Object is not a Temperature&quot;)\n        End If   \n    End Function\n\n    Public Property Fahrenheit() As Double\n        Get\n            Return temperatureF\n        End Get\n        Set(ByVal Value As Double)\n            Me.temperatureF = Value\n        End Set\n    End Property\n\n    Public Property Celsius() As Double\n        Get\n            Return (temperatureF - 32) * (5/9)\n        End Get\n        Set(ByVal Value As Double)\n            Me.temperatureF = (Value * 9/5) + 32\n        End Set\n    End Property\nEnd Class\n\nPublic Module CompareTemperatures\n   Public Sub Main()\n      Dim temperatures As New ArrayList\n      &#39; Initialize random number generator.\n      Dim rnd As New Random()\n      \n      &#39; Generate 10 temperatures between 0 and 100 randomly.\n      For ctr As Integer = 1 To 10\n         Dim degrees As Integer = rnd.Next(0, 100)\n         Dim temp As New Temperature\n         temp.Fahrenheit = degrees\n         temperatures.Add(temp)   \n      Next\n\n      &#39; Sort ArrayList.\n      temperatures.Sort()\n      \n      For Each temp As Temperature In temperatures\n         Console.WriteLine(temp.Fahrenheit)\n      Next      \n   End Sub\nEnd Module\n&#39; The example displays the following output to the console (individual\n&#39; values may vary because they are randomly generated):\n&#39;       2\n&#39;       7\n&#39;       16\n&#39;       17\n&#39;       31\n&#39;       37\n&#39;       58\n&#39;       66\n&#39;       72\n&#39;       95\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>This interface is implemented by types whose values can be ordered or sorted. It requires that implementing types define a single method, <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_System_Object_\" data-linktype=\"relative-path\">CompareTo(Object)</a>, that indicates whether the position of the current instance in the sort order is before, after, or the same as a second object of the same type. The instance&#39;s IComparable implementation is called automatically by methods such as <a class=\"xref\" href=\"system.array#System_Array_Sort_\" data-linktype=\"relative-path\">Sort</a> and <a class=\"xref\" href=\"system.collections.arraylist#System_Collections_ArrayList_Sort_\" data-linktype=\"relative-path\">Sort</a>.  </p>\n<p> The implementation of the <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_System_Object_\" data-linktype=\"relative-path\">CompareTo(Object)</a> method must return an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> that has one of three values, as shown in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>Value</th>\n<th>Meaning</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Less than zero</td>\n<td>The current instance precedes the object specified by the <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method in the sort order.</td>\n</tr>\n<tr>\n<td>Zero</td>\n<td>This current instance occurs in the same position in the sort order as the object specified by the <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method.</td>\n</tr>\n<tr>\n<td>Greater than zero</td>\n<td>This current instance follows the object specified by the <a class=\"xref\" href=\"system.icomparable#System_IComparable_CompareTo_\" data-linktype=\"relative-path\">CompareTo</a> method in the sort order.</td>\n</tr>\n</tbody>\n</table>\n<p> All numeric types (such as <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> and <a class=\"xref\" href=\"system.double\" data-linktype=\"relative-path\">Double</a>) implement IComparable, as do <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>, <a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>, and <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a>. Custom types should also provide their own implementation of IComparable to enable object instances to be ordered or sorted.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_IComparable_CompareTo_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CompareTo(Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int CompareTo (object obj);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>obj</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object to compare with this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A value that indicates the relative order of the objects being compared. The return value has these meanings:  </p>\n <table><thead><tr><th> Value<br>\n </th><th> Meaning<br>\n </th></tr></thead><tbody><tr><td> Less than zero<br>\n </td><td> This instance precedes <code>obj</code> in the sort order.<br>\n </td></tr><tr><td> Zero<br>\n </td><td> This instance occurs in the same position in the sort order as <code>obj</code>.<br>\n </td></tr><tr><td> Greater than zero<br>\n </td><td> This instance follows <code>obj</code> in the sort order.<br>\n </td></tr></tbody></table>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>obj</code> is not the same type as this instance.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The CompareTo method is implemented by types whose values can be ordered or sorted. It is called automatically by methods of non-generic collection objects, such as <a class=\"xref\" href=\"system.array#System_Array_Sort_\" data-linktype=\"relative-path\">Sort</a>, to order each member of the array. If a custom class or structure does not implement <a class=\"xref\" href=\"system.icomparable\" data-linktype=\"relative-path\">IComparable</a>, its members cannot be ordered and the sort operation can throw an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.  </p>\n<p> This method is only a definition and must be implemented by a specific class or value type to have effect. The meaning of the comparisons specified in the Return Value section (&quot;precedes&quot;, &quot;occurs in the same position as&quot;, and &quot;follows&quot;) depends on the particular implementation.  </p>\n<p> By definition, any object compares greater than (or follows) <code>null</code>, and two null references compare equal to each other.  </p>\n<p> The parameter, <code>obj</code>, must be the same type as the class or value type that implements this interface; otherwise, an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> is thrown.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.IComparable.yml\">\r\n<meta name=\"APIName\" content=\"System.IComparable\">\r\n<meta name=\"APIName\" content=\"System.IComparable.CompareTo\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"e925802c-a4a8-cf91-6bb6-bad9202bdb47\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines a generalized type-specific comparison method that a value type or class implements to order or sort its instances.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.IComparable\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.IComparable.yml","open_to_public_contributors":false,"api_name":["System.IComparable","System.IComparable.CompareTo"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.IComparable","System::IComparable","System.IComparable.CompareTo","System::IComparable::CompareTo"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"e925802c-a4a8-cf91-6bb6-bad9202bdb47","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System/IComparable.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IComparable interface | Microsoft Docs","_op_ogTitle":"IComparable interface","description":"Defines a generalized type-specific comparison method that a value type or class implements to order or sort its instances.\n","toc_asset_id":"api/_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.IComparable","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.icomparable","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.icomparable","fileRelativePath":"api/System.IComparable.html"},"themesRelativePathToOutputRoot":"_themes/"}