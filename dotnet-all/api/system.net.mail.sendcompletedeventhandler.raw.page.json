{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">SendCompletedEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that will handle the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendCompleted\" data-linktype=\"relative-path\">SendCompleted</a> event.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void SendCompletedEventHandler(object sender, AsyncCompletedEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">SendCompletedEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates sending an e-mail message asynchronously. It uses a SendCompletedEventHandler to invoke the <code>SendCompletedCallback</code> method to handle <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendCompleted\" data-linktype=\"relative-path\">SendCompleted</a> events.  </p>\n<pre><code class=\"lang-cs\" name=\"NclMailASync#1\">\nusing System;\nusing System.Net;\nusing System.Net.Mail;\nusing System.Net.Mime;\nusing System.Threading;\nusing System.ComponentModel;\nnamespace Examples.SmptExamples.Async\n{\n    public class SimpleAsynchronousExample\n    {\n        static bool mailSent = false;\n        private static void SendCompletedCallback(object sender, AsyncCompletedEventArgs e)\n        {\n            // Get the unique identifier for this asynchronous operation.\n             String token = (string) e.UserState;\n           \n            if (e.Cancelled)\n            {\n                 Console.WriteLine(&quot;[{0}] Send canceled.&quot;, token);\n            }\n            if (e.Error != null)\n            {\n                 Console.WriteLine(&quot;[{0}] {1}&quot;, token, e.Error.ToString());\n            } else\n            {\n                Console.WriteLine(&quot;Message sent.&quot;);\n            }\n            mailSent = true;\n        }\n        public static void Main(string[] args)\n        {\n            // Command line argument must the the SMTP host.\n            SmtpClient client = new SmtpClient(args[0]);\n            // Specify the e-mail sender.\n            // Create a mailing address that includes a UTF8 character\n            // in the display name.\n            MailAddress from = new MailAddress(&quot;jane@contoso.com&quot;, \n               &quot;Jane &quot; + (char)0xD8+ &quot; Clayton&quot;, \n            System.Text.Encoding.UTF8);\n            // Set destinations for the e-mail message.\n            MailAddress to = new MailAddress(&quot;ben@contoso.com&quot;);\n            // Specify the message content.\n            MailMessage message = new MailMessage(from, to);\n            message.Body = &quot;This is a test e-mail message sent by an application. &quot;;\n            // Include some non-ASCII characters in body and subject.\n            string someArrows = new string(new char[] {&#39;\\u2190&#39;, &#39;\\u2191&#39;, &#39;\\u2192&#39;, &#39;\\u2193&#39;});\n            message.Body += Environment.NewLine + someArrows;\n            message.BodyEncoding =  System.Text.Encoding.UTF8;\n            message.Subject = &quot;test message 1&quot; + someArrows;\n            message.SubjectEncoding = System.Text.Encoding.UTF8;\n            // Set the method that is called back when the send operation ends.\n            client.SendCompleted += new \n            SendCompletedEventHandler(SendCompletedCallback);\n            // The userState can be any object that allows your callback \n            // method to identify this send operation.\n            // For this example, the userToken is a string constant.\n            string userState = &quot;test message1&quot;;\n            client.SendAsync(message, userState);\n            Console.WriteLine(&quot;Sending message... press c to cancel mail. Press any other key to exit.&quot;);\n            string answer = Console.ReadLine();\n            // If the user canceled the send, and mail hasn&#39;t been sent yet,\n            // then cancel the pending operation.\n            if (answer.StartsWith(&quot;c&quot;) &amp;&amp; mailSent == false)\n            {\n                client.SendAsyncCancel();\n            }\n            // Clean up.\n            message.Dispose();\n            Console.WriteLine(&quot;Goodbye.&quot;);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"NclMailASync#1\">#using &lt;System.dll&gt;\nusing namespace System;\nusing namespace System::Net;\nusing namespace System::Net::Mail;\nusing namespace System::Net::Mime;\nusing namespace System::Threading;\nusing namespace System::ComponentModel;\n\nstatic bool mailSent;\n\nstatic void SendCompletedCallback(Object^ sender, AsyncCompletedEventArgs^ e)\n{\n    // Get the unique identifier for this asynchronous \n    // operation.\n    String^ token = (String^) e-&gt;UserState;\n\n    if (e-&gt;Cancelled)\n    {\n        Console::WriteLine(&quot;[{0}] Send canceled.&quot;, token);\n    }\n    if (e-&gt;Error != nullptr)\n    {\n        Console::WriteLine(&quot;[{0}] {1}&quot;, token, \n            e-&gt;Error-&gt;ToString());\n    } else\n    {\n        Console::WriteLine(&quot;Message sent.&quot;);\n    }\n    mailSent = true;\n}\n\nint main(array&lt;String^&gt;^ args)\n{\n    if (args-&gt;Length &gt; 1)\n    {\n        // Command line argument must the the SMTP host.\n        SmtpClient^ client = gcnew SmtpClient(args[1]);\n        // Specify the e-mail sender.\n        // Create a mailing address that includes a UTF8 \n        // character in the display name.\n        MailAddress^ from = gcnew MailAddress(&quot;jane@contoso.com&quot;,\n            &quot;Jane &quot; + (wchar_t)0xD8 + &quot; Clayton&quot;,\n            System::Text::Encoding::UTF8);\n        // Set destinations for the e-mail message.\n        MailAddress^ to = gcnew MailAddress(&quot;ben@contoso.com&quot;);\n        // Specify the message content.\n        MailMessage^ message = gcnew MailMessage(from, to);\n        message-&gt;Body = &quot;This is a test e-mail message sent&quot; +\n            &quot; by an application. &quot;;\n        // Include some non-ASCII characters in body and \n        // subject.\n        String^ someArrows = gcnew String(gcnew array&lt;wchar_t&gt;{L&#39;\\u2190&#39;, \n            L&#39;\\u2191&#39;, L&#39;\\u2192&#39;, L&#39;\\u2193&#39;});\n        message-&gt;Body += Environment::NewLine + someArrows;\n        message-&gt;BodyEncoding = System::Text::Encoding::UTF8;\n        message-&gt;Subject = &quot;test message 1&quot; + someArrows;\n        message-&gt;SubjectEncoding = System::Text::Encoding::UTF8;\n        // Set the method that is called back when the send\n        // operation ends.\n        client-&gt;SendCompleted += gcnew\n            SendCompletedEventHandler(SendCompletedCallback);\n        // The userState can be any object that allows your \n        // callback method to identify this send operation.\n        // For this example, the userToken is a string constant.\n        String^ userState = &quot;test message1&quot;;\n        client-&gt;SendAsync(message, userState);\n        Console::WriteLine(&quot;Sending message... press c to&quot; +\n            &quot; cancel mail. Press any other key to exit.&quot;);\n        String^ answer = Console::ReadLine();\n        // If the user canceled the send, and mail hasn&#39;t been \n        // sent yet,then cancel the pending operation.\n        if (answer-&gt;ToLower()-&gt;StartsWith(&quot;c&quot;) &amp;&amp; mailSent == false)\n        {\n            client-&gt;SendAsyncCancel();\n        }\n        // Clean up.\n        delete message;\n        client = nullptr;\n        Console::WriteLine(&quot;Goodbye.&quot;);\n    }\n    else\n    {\n        Console::WriteLine(&quot;Please give SMTP server name!&quot;);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"NclMailASync#1\">\nImports System\nImports System.Net\nImports System.Net.Mail\nImports System.Net.Mime\nImports System.Threading\nImports System.ComponentModel\nNamespace Examples.SmptExamples.Async\n    Public Class SimpleAsynchronousExample\n        Private Shared mailSent As Boolean = False\n        Private Shared Sub SendCompletedCallback(ByVal sender As Object, ByVal e As AsyncCompletedEventArgs)\n            &#39; Get the unique identifier for this asynchronous operation.\n            Dim token As String = CStr(e.UserState)\n\n            If e.Cancelled Then\n                Console.WriteLine(&quot;[{0}] Send canceled.&quot;, token)\n            End If\n            If e.Error IsNot Nothing Then\n                Console.WriteLine(&quot;[{0}] {1}&quot;, token, e.Error.ToString())\n            Else\n                Console.WriteLine(&quot;Message sent.&quot;)\n            End If\n            mailSent = True\n        End Sub\n        Public Shared Sub Main(ByVal args() As String)\n            &#39; Command line argument must the the SMTP host.\n            Dim client As New SmtpClient(args(0))\n            &#39; Specify the e-mail sender.\n            &#39; Create a mailing address that includes a UTF8 character\n            &#39; in the display name.\n            Dim [from] As New MailAddress(&quot;jane@contoso.com&quot;, &quot;Jane &quot; &amp; ChrW(&amp;HD8) &amp; &quot; Clayton&quot;, System.Text.Encoding.UTF8)\n            &#39; Set destinations for the e-mail message.\n            Dim [to] As New MailAddress(&quot;ben@contoso.com&quot;)\n            &#39; Specify the message content.\n            Dim message As New MailMessage([from], [to])\n            message.Body = &quot;This is a test e-mail message sent by an application. &quot;\n            &#39; Include some non-ASCII characters in body and subject.\n            Dim someArrows As New String(New Char() {ChrW(&amp;H2190), ChrW(&amp;H2191), ChrW(&amp;H2192), ChrW(&amp;H2193)})\n            message.Body += Environment.NewLine &amp; someArrows\n            message.BodyEncoding = System.Text.Encoding.UTF8\n            message.Subject = &quot;test message 1&quot; &amp; someArrows\n            message.SubjectEncoding = System.Text.Encoding.UTF8\n            &#39; Set the method that is called back when the send operation ends.\n            AddHandler client.SendCompleted, AddressOf SendCompletedCallback\n            &#39; The userState can be any object that allows your callback \n            &#39; method to identify this send operation.\n            &#39; For this example, the userToken is a string constant.\n            Dim userState As String = &quot;test message1&quot;\n            client.SendAsync(message, userState)\n            Console.WriteLine(&quot;Sending message... press c to cancel mail. Press any other key to exit.&quot;)\n            Dim answer As String = Console.ReadLine()\n            &#39; If the user canceled the send, and mail hasn&#39;t been sent yet,\n            &#39; then cancel the pending operation.\n            If answer.StartsWith(&quot;c&quot;) AndAlso mailSent = False Then\n                client.SendAsyncCancel()\n            End If\n            &#39; Clean up.\n            message.Dispose()\n            Console.WriteLine(&quot;Goodbye.&quot;)\n        End Sub\n    End Class\nEnd Namespace\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The SendCompletedEventHandler delegate is used to handle events that occur when the <a class=\"xref\" href=\"system.net.mail.smtpclient\" data-linktype=\"relative-path\">SmtpClient</a> class finishes asynchronously sending an e-mail message using the <a class=\"xref\" href=\"system.net.mail.smtpclient#System_Net_Mail_SmtpClient_SendAsync_\" data-linktype=\"relative-path\">SendAsync</a> method.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Net.Mail.SendCompletedEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.Mail.SendCompletedEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Net.Mail.SendCompletedEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Net.Mail.SendCompletedEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Net.Mail.SendCompletedEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Net.Mail.SendCompletedEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"99203565-12a9-d41f-0cea-aed6d3b9915e\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that will handle the  event.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.net.mail/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.Mail.SendCompletedEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Net.Mail.SendCompletedEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Net.Mail.SendCompletedEventHandler","System.Net.Mail.SendCompletedEventHandler..ctor","System.Net.Mail.SendCompletedEventHandler.Invoke","System.Net.Mail.SendCompletedEventHandler.BeginInvoke","System.Net.Mail.SendCompletedEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.Mail.SendCompletedEventHandler","System::Net::Mail::SendCompletedEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"99203565-12a9-d41f-0cea-aed6d3b9915e","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Net.Mail/SendCompletedEventHandler.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SendCompletedEventHandler delegate | Microsoft Docs","_op_ogTitle":"SendCompletedEventHandler delegate","description":"Represents the method that will handle the  event.\n","toc_asset_id":"api/_splitted/System.Net.Mail/toc.json","toc_rel":"_splitted/System.Net.Mail/toc.json","source_url":"","ms.assetid":"System.Net.Mail.SendCompletedEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.net.mail.sendcompletedeventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.net.mail.sendcompletedeventhandler","fileRelativePath":"api/System.Net.Mail.SendCompletedEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}