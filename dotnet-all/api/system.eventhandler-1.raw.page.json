{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">EventHandler&lt;TEventArgs&gt;</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that will handle an event when the event provides data.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void EventHandler&lt;TEventArgs&gt;(object sender, TEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \t\t<h3 class=\"accented\">Type Parameters</h3>\r\n  \t\t<table class=\"nameValue stack\">\r\n  \t\t\t<tr>\r\n  \t\t\t<td>TEventArgs</td>\r\n  \t\t\t<td><p>The type of the event data generated by the event.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t</table>\r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">EventHandler&lt;TEventArgs&gt;</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example shows an event named <code>ThresholdReached</code>. The event is associated with an EventHandler(TEventArgs) delegate.  </p>\n<pre><code class=\"lang-cs\" name=\"EventsOverview#6\">using System;\n\nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Counter c = new Counter(new Random().Next(10));\n            c.ThresholdReached += c_ThresholdReached;\n\n            Console.WriteLine(&quot;press &#39;a&#39; key to increase total&quot;);\n            while (Console.ReadKey(true).KeyChar == &#39;a&#39;)\n            {\n                Console.WriteLine(&quot;adding one&quot;);\n                c.Add(1);\n            }\n        }\n\n        static void c_ThresholdReached(object sender, ThresholdReachedEventArgs e)\n        {\n            Console.WriteLine(&quot;The threshold of {0} was reached at {1}.&quot;, e.Threshold,  e.TimeReached);\n            Environment.Exit(0);\n        }\n    }\n\n    class Counter\n    {\n        private int threshold;\n        private int total;\n\n        public Counter(int passedThreshold)\n        {\n            threshold = passedThreshold;\n        }\n\n        public void Add(int x)\n        {\n            total += x;\n            if (total &gt;= threshold)\n            {\n                ThresholdReachedEventArgs args = new ThresholdReachedEventArgs();\n                args.Threshold = threshold;\n                args.TimeReached = DateTime.Now;\n                OnThresholdReached(args);\n            }\n        }\n\n        protected virtual void OnThresholdReached(ThresholdReachedEventArgs e)\n        {\n            EventHandler&lt;ThresholdReachedEventArgs&gt; handler = ThresholdReached;\n            if (handler != null)\n            {\n                handler(this, e);\n            }\n        }\n\n        public event EventHandler&lt;ThresholdReachedEventArgs&gt; ThresholdReached;\n    }\n\n    public class ThresholdReachedEventArgs : EventArgs\n    {\n        public int Threshold { get; set; }\n        public DateTime TimeReached { get; set; }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"EventsOverview#6\">using namespace System;\n\npublic ref class ThresholdReachedEventArgs : public EventArgs\n{\n   public:\n      property int Threshold;\n      property DateTime TimeReached;\n};\n\npublic ref class Counter\n{\n   private:\n      int threshold;\n      int total;\n\n   public:\n      Counter() {};\n\n      Counter(int passedThreshold)\n      {\n         threshold = passedThreshold;\n      }\n\n      void Add(int x)\n      {\n          total += x;\n          if (total &gt;= threshold) {\n             ThresholdReachedEventArgs^ args = gcnew ThresholdReachedEventArgs();\n             args-&gt;Threshold = threshold;\n             args-&gt;TimeReached = DateTime::Now;\n             OnThresholdReached(args);\n          }\n      }\n\n      event EventHandler&lt;ThresholdReachedEventArgs^&gt;^ ThresholdReached;\n\n   protected:\n      virtual void OnThresholdReached(ThresholdReachedEventArgs^ e)\n      {\n         ThresholdReached(this, e);\n      }\n};\n\npublic ref class SampleHandler\n{\n   public:\n      static void c_ThresholdReached(Object^ sender, ThresholdReachedEventArgs^ e)\n      {\n         Console::WriteLine(&quot;The threshold of {0} was reached at {1}.&quot;,\n                            e-&gt;Threshold,  e-&gt;TimeReached);\n         Environment::Exit(0);\n      }\n};\n\nvoid main()\n{\n   Counter^ c = gcnew Counter((gcnew Random())-&gt;Next(10));\n   c-&gt;ThresholdReached += gcnew EventHandler&lt;ThresholdReachedEventArgs^&gt;(SampleHandler::c_ThresholdReached);\n\n   Console::WriteLine(&quot;press &#39;a&#39; key to increase total&quot;);\n   while (Console::ReadKey(true).KeyChar == &#39;a&#39;) {\n      Console::WriteLine(&quot;adding one&quot;);\n      c-&gt;Add(1);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"EventsOverview#6\">Module Module1\n\n    Sub Main()\n        Dim c As Counter = New Counter(New Random().Next(10))\n        AddHandler c.ThresholdReached, AddressOf c_ThresholdReached\n\n        Console.WriteLine(&quot;press &#39;a&#39; key to increase total&quot;)\n        While Console.ReadKey(True).KeyChar = &quot;a&quot;\n            Console.WriteLine(&quot;adding one&quot;)\n            c.Add(1)\n        End While\n    End Sub\n\n    Sub c_ThresholdReached(sender As Object, e As ThresholdReachedEventArgs)\n        Console.WriteLine(&quot;The threshold of {0} was reached at {1}.&quot;, e.Threshold, e.TimeReached)\n        Environment.Exit(0)\n    End Sub\nEnd Module\n\nClass Counter\n    Private threshold As Integer\n    Private total As Integer\n\n    Public Sub New(passedThreshold As Integer)\n        threshold = passedThreshold\n    End Sub\n\n    Public Sub Add(x As Integer)\n        total = total + x\n        If (total &gt;= threshold) Then\n            Dim args As ThresholdReachedEventArgs = New ThresholdReachedEventArgs()\n            args.Threshold = threshold\n            args.TimeReached = DateTime.Now\n            OnThresholdReached(args)\n        End If\n    End Sub\n\n    Protected Overridable Sub OnThresholdReached(e As ThresholdReachedEventArgs)\n        RaiseEvent ThresholdReached(Me, e)\n    End Sub\n\n    Public Event ThresholdReached As EventHandler(Of ThresholdReachedEventArgs)\nEnd Class\n\nClass ThresholdReachedEventArgs\n    Inherits EventArgs\n\n    Public Property Threshold As Integer\n    Public Property TimeReached As DateTime\nEnd Class\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The event model in the .NET Framework is based on having an event delegate that connects an event with its handler. To raise an event, two elements are needed:  </p>\n<ul>\n<li><p>A delegate that refers to a method that provides the response to the event.  </p>\n</li>\n<li><p>Optionally, a class that holds the event data, if the event provides data.  </p>\n</li>\n</ul>\n<p> The delegate is a type that defines a signature, that is, the return value type and parameter list types for a method. You can use the delegate type to declare a variable that can refer to any method with the same signature as the delegate.  </p>\n<p> The standard signature of an event handler delegate defines a method that does not return a value. This method&#39;s first parameter is of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and refers to the instance that raises the event. Its second parameter is derived from type <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> and holds the event data. If the event does not generate event data, the second parameter is simply the value of the <a class=\"xref\" href=\"system.eventargs#System_EventArgs_Empty\" data-linktype=\"relative-path\">System.EventArgs.Empty</a> field. Otherwise, the second parameter is a type derived from <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> and supplies any fields or properties needed to hold the event data.  </p>\n<p> The EventHandler(TEventArgs) delegate is a predefined delegate that represents an event handler method for an event that generates data. The advantage of using EventHandler(TEventArgs) is that you do not need to code your own custom delegate if your event generates event data. You simply provide the type of the event data object as the generic parameter.  </p>\n<p> To associate the event with the method that will handle the event, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate.  </p>\n<p> For more information about event handler delegates, see <a href=\"../topic/handling%20and%20raising%20events\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.EventHandler-1.yml\">\r\n<meta name=\"APIName\" content=\"System.EventHandler&lt;TEventArgs&gt;\">\r\n<meta name=\"APIName\" content=\"System.EventHandler&lt;TEventArgs&gt;..ctor\">\r\n<meta name=\"APIName\" content=\"System.EventHandler&lt;TEventArgs&gt;.Invoke\">\r\n<meta name=\"APIName\" content=\"System.EventHandler&lt;TEventArgs&gt;.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.EventHandler&lt;TEventArgs&gt;.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"2fd3b938-6a7f-46d8-f0f0-12a3585199ec\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that will handle an event when the event provides data.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.EventHandler`1\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.EventHandler-1.yml","open_to_public_contributors":false,"api_name":["System.EventHandler<TEventArgs>","System.EventHandler<TEventArgs>..ctor","System.EventHandler<TEventArgs>.Invoke","System.EventHandler<TEventArgs>.BeginInvoke","System.EventHandler<TEventArgs>.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.EventHandler`1","System::EventHandler`1"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"2fd3b938-6a7f-46d8-f0f0-12a3585199ec","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System/EventHandler`1.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"EventHandler<TEventArgs> delegate | Microsoft Docs","_op_ogTitle":"EventHandler<TEventArgs> delegate","description":"Represents the method that will handle an event when the event provides data.\n","toc_asset_id":"api/_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.EventHandler`1","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.eventhandler-1","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.eventhandler-1","fileRelativePath":"api/System.EventHandler-1.html"},"themesRelativePathToOutputRoot":"_themes/"}