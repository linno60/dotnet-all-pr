{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">AccessibleNavigation</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies values for navigating among accessible objects.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public enum AccessibleNavigation</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">AccessibleNavigation</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates the creation of an accessibility-aware chart control, using the <a class=\"xref\" href=\"system.windows.forms.accessibleobject\" data-linktype=\"relative-path\">AccessibleObject</a> and <a class=\"xref\" href=\"system.windows.forms.control.controlaccessibleobject\" data-linktype=\"relative-path\">Control.ControlAccessibleObject</a> classes to expose accessible information. The control plots two curves along with a legend. The <code>ChartControlAccessibleObject</code> class, which derives from <code>ControlAccessibleObject</code>, is used in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CreateAccessibilityInstance_\" data-linktype=\"relative-path\">CreateAccessibilityInstance</a> method to provide custom accessible information for the chart control. Since the chart legend is not an actual <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> -based control, but instead is drawn by the chart control, it does not any built-in accessible information. Because of this, the <code>ChartControlAccessibleObject</code> class overrides the <a class=\"xref\" href=\"system.windows.forms.accessibleobject#System_Windows_Forms_AccessibleObject_GetChild_\" data-linktype=\"relative-path\">GetChild</a> method to return the <code>CurveLegendAccessibleObject</code> that represents accessible information for each part of the legend. When an accessible-aware application uses this control, the control can provide the necessary accessible information.  </p>\n<p> This example demonstrates using the AccessibleNavigation enumeration with the <a class=\"xref\" href=\"system.windows.forms.accessibleobject#System_Windows_Forms_AccessibleObject_Navigate_\" data-linktype=\"relative-path\">Navigate</a> method. See the <a class=\"xref\" href=\"system.windows.forms.accessibleobject\" data-linktype=\"relative-path\">AccessibleObject</a> class overview for the complete code example.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.AccessibleObject#4\">&#39; Inner Class ChartControlAccessibleObject represents accessible information \n&#39; associated with the ChartControl.\n&#39; The ChartControlAccessibleObject is returned in the         &#39; ChartControl.CreateAccessibilityInstance override.\nPublic Class ChartControlAccessibleObject\n    Inherits Control.ControlAccessibleObject\n\n    Private chartControl As ChartControl\n    \n    Public Sub New(ctrl As ChartControl)\n        MyBase.New(ctrl)\n        chartControl = ctrl\n    End Sub &#39;New\n    \n    &#39; Get the role for the Chart. This is used by accessibility programs.            \n    Public Overrides ReadOnly Property Role() As AccessibleRole\n        Get\n            Return System.Windows.Forms.AccessibleRole.Chart\n        End Get\n    End Property\n    \n    &#39; Get the state for the Chart. This is used by accessibility programs.            \n    Public Overrides ReadOnly Property State() As AccessibleStates\n        Get\n            Return AccessibleStates.ReadOnly\n        End Get\n    End Property                        \n    \n    &#39; The CurveLegend objects are &quot;child&quot; controls in terms of accessibility so \n    &#39; return the number of ChartLengend objects.            \n    Public Overrides Function GetChildCount() As Integer\n        Return chartControl.Legends.Length\n    End Function \n    \n    &#39; Get the Accessibility object of the child CurveLegend idetified by index.\n    Public Overrides Function GetChild(index As Integer) As AccessibleObject\n        If index &gt;= 0 And index &lt; chartControl.Legends.Length Then\n            Return chartControl.Legends(index).AccessibilityObject\n        End If\n        Return Nothing\n    End Function \n    \n    &#39; Helper function that is used by the CurveLegend&#39;s accessibility object\n    &#39; to navigate between sibiling controls. Specifically, this function is used in\n    &#39; the CurveLegend.CurveLegendAccessibleObject.Navigate function.\n    Friend Function NavigateFromChild(child As CurveLegend.CurveLegendAccessibleObject, _\n                                    navdir As AccessibleNavigation) As AccessibleObject\n        Select Case navdir\n            Case AccessibleNavigation.Down, AccessibleNavigation.Next\n                    Return GetChild(child.ID + 1)\n            \n            Case AccessibleNavigation.Up, AccessibleNavigation.Previous\n                    Return GetChild(child.ID - 1)\n        End Select\n        Return Nothing\n    End Function            \n\n    &#39; Helper function that is used by the CurveLegend&#39;s accessibility object\n    &#39; to select a specific CurveLegend control. Specifically, this function is used \n    &#39; in the CurveLegend.CurveLegendAccessibleObject.Select function.            \n    Friend Sub SelectChild(child As CurveLegend.CurveLegendAccessibleObject, selection As AccessibleSelection)\n        Dim childID As Integer = child.ID\n        \n        &#39; Determine which selection action should occur, based on the\n        &#39; AccessibleSelection value.\n        If (selection And AccessibleSelection.TakeSelection) &lt;&gt; 0 Then\n            Dim i As Integer\n            For i = 0 To chartControl.Legends.Length - 1\n                If i = childID Then\n                    chartControl.Legends(i).Selected = True\n                Else\n                    chartControl.Legends(i).Selected = False\n                End If\n            Next i\n            \n            &#39; AccessibleSelection.AddSelection means that the CurveLegend will be selected.\n            If (selection And AccessibleSelection.AddSelection) &lt;&gt; 0 Then\n                chartControl.Legends(childID).Selected = True\n            End If\n\n            &#39; AccessibleSelection.AddSelection means that the CurveLegend will be unselected.                    \n            If (selection And AccessibleSelection.RemoveSelection) &lt;&gt; 0 Then\n                chartControl.Legends(childID).Selected = False\n            End If\n        End If\n    End Sub &#39;SelectChild\nEnd Class &#39;ChartControlAccessibleObject\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.AccessibleObject#4\">// Inner class ChartControlAccessibleObject represents accessible information associated with the ChartControl.\n// The ChartControlAccessibleObject is returned in the ChartControl.CreateAccessibilityInstance override.\npublic class ChartControlAccessibleObject : ControlAccessibleObject\n{\n    ChartControl chartControl;\n\n    public ChartControlAccessibleObject(ChartControl ctrl) : base(ctrl) \n    {\n        chartControl = ctrl;\n    }\n\n    // Gets the role for the Chart. This is used by accessibility programs.\n    public override AccessibleRole Role\n    {  \n        get {\n            return AccessibleRole.Chart;\n        }\n    }\n\n    // Gets the state for the Chart. This is used by accessibility programs.\n    public override AccessibleStates State\n    {  \n        get {                    \n            return AccessibleStates.ReadOnly;\n        }\n    }\n\n    // The CurveLegend objects are &quot;child&quot; controls in terms of accessibility so \n    // return the number of ChartLengend objects.\n    public override int GetChildCount()\n    {  \n        return chartControl.Legends.Length;\n    }\n\n    // Gets the Accessibility object of the child CurveLegend idetified by index.\n    public override AccessibleObject GetChild(int index)\n    {  \n        if (index &gt;= 0 &amp;&amp; index &lt; chartControl.Legends.Length) {\n            return chartControl.Legends[index].AccessibilityObject;\n        }                \n        return null;\n    }\n\n    // Helper function that is used by the CurveLegend&#39;s accessibility object\n    // to navigate between sibiling controls. Specifically, this function is used in\n    // the CurveLegend.CurveLegendAccessibleObject.Navigate function.\n    internal AccessibleObject NavigateFromChild(CurveLegend.CurveLegendAccessibleObject child, \n                                                AccessibleNavigation navdir) \n    {  \n        switch(navdir) {\n            case AccessibleNavigation.Down:\n            case AccessibleNavigation.Next:\n                return GetChild(child.ID + 1);\n                \n            case AccessibleNavigation.Up:\n            case AccessibleNavigation.Previous:\n                return GetChild(child.ID - 1);                        \n        }\n        return null;\n    }\n\n    // Helper function that is used by the CurveLegend&#39;s accessibility object\n    // to select a specific CurveLegend control. Specifically, this function is used\n    // in the CurveLegend.CurveLegendAccessibleObject.Select function.\n    internal void SelectChild(CurveLegend.CurveLegendAccessibleObject child, AccessibleSelection selection) \n    {   \n        int childID = child.ID;\n\n        // Determine which selection action should occur, based on the\n        // AccessibleSelection value.\n        if ((selection &amp; AccessibleSelection.TakeSelection) != 0) {\n            for(int i = 0; i &lt; chartControl.Legends.Length; i++) {\n                if (i == childID) {\n                    chartControl.Legends[i].Selected = true;                        \n                } else {\n                    chartControl.Legends[i].Selected = false;\n                }\n            }\n\n            // AccessibleSelection.AddSelection means that the CurveLegend will be selected.\n            if ((selection &amp; AccessibleSelection.AddSelection) != 0) {\n                chartControl.Legends[childID].Selected = true;                        \n            }\n\n            // AccessibleSelection.AddSelection means that the CurveLegend will be unselected.\n            if ((selection &amp; AccessibleSelection.RemoveSelection) != 0) {\n                chartControl.Legends[childID].Selected = false;                        \n            }\n        }            \n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.AccessibleObject#4\">// Inner class ChartControlAccessibleObject represents accessible information associated with the ChartControl.\n// The ChartControlAccessibleObject is returned in the ChartControl::CreateAccessibilityInstance .\nref class ChartControlAccessibleObject: public ControlAccessibleObject\n{\nprivate:\n   ChartControl^ chartControl;\n\npublic:\n   ChartControlAccessibleObject( ChartControl^ ctrl )\n      : ControlAccessibleObject( ctrl )\n   {\n      chartControl = ctrl;\n   }\n\n\n   property System::Windows::Forms::AccessibleRole Role \n   {\n\n      // Gets the role for the Chart. This is used by accessibility programs.\n      virtual System::Windows::Forms::AccessibleRole get() override\n      {\n         return ::AccessibleRole::Chart;\n      }\n\n   }\n\n   property AccessibleStates State \n   {\n\n      // Gets the state for the Chart. This is used by accessibility programs.\n      virtual AccessibleStates get() override\n      {\n         return AccessibleStates::ReadOnly;\n      }\n\n   }\n\n   // The CurveLegend objects are &quot;child&quot; controls in terms of accessibility so\n   // return the number of ChartLengend objects.\n   virtual int GetChildCount() override\n   {\n      return chartControl-&gt;Legends-&gt;Length;\n   }\n\n\n   // Gets the Accessibility object of the child CurveLegend idetified by index.\n   virtual AccessibleObject^ GetChild( int index ) override\n   {\n      if ( index &gt;= 0 &amp;&amp; index &lt; chartControl-&gt;Legends-&gt;Length )\n      {\n         return chartControl-&gt;Legends[ index ]-&gt;AccessibilityObject;\n      }\n\n      return nullptr;\n   }\n\n\ninternal:\n\n   // Helper function that is used by the CurveLegend&#39;s accessibility object\n   // to navigate between sibiling controls. Specifically, this function is used in\n   // the CurveLegend::CurveLegendAccessibleObject.Navigate function.\n   AccessibleObject^ NavigateFromChild( CurveLegend::CurveLegendAccessibleObject^ child, AccessibleNavigation navdir )\n   {\n      switch ( navdir )\n      {\n         case AccessibleNavigation::Down:\n         case AccessibleNavigation::Next:\n            return GetChild( child-&gt;ID + 1 );\n\n         case AccessibleNavigation::Up:\n         case AccessibleNavigation::Previous:\n            return GetChild( child-&gt;ID - 1 );\n      }\n      return nullptr;\n   }\n\n\n   // Helper function that is used by the CurveLegend&#39;s accessibility object\n   // to select a specific CurveLegend control. Specifically, this function is used\n   // in the CurveLegend::CurveLegendAccessibleObject.Select function.\n   void SelectChild( CurveLegend::CurveLegendAccessibleObject^ child, AccessibleSelection selection )\n   {\n      int childID = child-&gt;ID;\n      \n      // Determine which selection action should occur, based on the\n      // AccessibleSelection value.\n      if ( (selection &amp; AccessibleSelection::TakeSelection) != (AccessibleSelection)0 )\n      {\n         for ( int i = 0; i &lt; chartControl-&gt;Legends-&gt;Length; i++ )\n         {\n            if ( i == childID )\n            {\n               chartControl-&gt;Legends[ i ]-&gt;Selected = true;\n            }\n            else\n            {\n               chartControl-&gt;Legends[ i ]-&gt;Selected = false;\n            }\n\n         }\n         \n         // AccessibleSelection-&gt;AddSelection means that the CurveLegend will be selected.\n         if ( (selection &amp; AccessibleSelection::AddSelection) != (AccessibleSelection)0 )\n         {\n            chartControl-&gt;Legends[ childID ]-&gt;Selected = true;\n         }\n         \n         // AccessibleSelection-&gt;AddSelection means that the CurveLegend will be unselected.\n         if ( (selection &amp; AccessibleSelection::RemoveSelection) != (AccessibleSelection)0 )\n         {\n            chartControl-&gt;Legends[ childID ]-&gt;Selected = false;\n         }\n      }\n   }\n\n};\n\n// class ChartControlAccessibleObject\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Accessible navigation directions are either spatial (up, down, left, and right) or logical (first child, last child, next, and previous). Logical directions are used when clients navigate from one user interface element to another within the same container.  </p>\n<p> <a class=\"xref\" href=\"system.windows.forms.accessibleobject\" data-linktype=\"relative-path\">AccessibleObject</a> uses this enumeration.  </p>\n<p> For more information about the accessibility application, search for the &quot;Microsoft Active Accessibility&quot; topic in the MSDN library.</p>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleNavigation_Down\">\r\n      \t\t\t<span class=\"lang-csharp\">Down</span>\r\n      \t</td>\r\n      \t<td><p>Navigation to a sibling object located below the starting object.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleNavigation_FirstChild\">\r\n      \t\t\t<span class=\"lang-csharp\">FirstChild</span>\r\n      \t</td>\r\n      \t<td><p>Navigation to the first child of the object.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleNavigation_LastChild\">\r\n      \t\t\t<span class=\"lang-csharp\">LastChild</span>\r\n      \t</td>\r\n      \t<td><p>Navigation to the last child of the object.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleNavigation_Left\">\r\n      \t\t\t<span class=\"lang-csharp\">Left</span>\r\n      \t</td>\r\n      \t<td><p>Navigation to the sibling object located to the left of the starting object.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleNavigation_Next\">\r\n      \t\t\t<span class=\"lang-csharp\">Next</span>\r\n      \t</td>\r\n      \t<td><p>Navigation to the next logical object, typically from a sibling object to the starting object.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleNavigation_Previous\">\r\n      \t\t\t<span class=\"lang-csharp\">Previous</span>\r\n      \t</td>\r\n      \t<td><p>Navigation to the previous logical object, typically from a sibling object to the starting object.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleNavigation_Right\">\r\n      \t\t\t<span class=\"lang-csharp\">Right</span>\r\n      \t</td>\r\n      \t<td><p>Navigation to the sibling object located to the right of the starting object.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleNavigation_Up\">\r\n      \t\t\t<span class=\"lang-csharp\">Up</span>\r\n      \t</td>\r\n      \t<td><p>Navigation to a sibling object located above the starting object.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.AccessibleNavigation.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleNavigation\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleNavigation.Down\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleNavigation.FirstChild\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleNavigation.LastChild\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleNavigation.Left\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleNavigation.Next\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleNavigation.Previous\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleNavigation.Right\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleNavigation.Up\">\r\n<meta name=\"APILocation\" content=\"System.Windows.Forms.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:59 PM\">\r\n<meta name=\"document_id\" content=\"cfc8fb73-1697-826c-5318-d79301e2b5de\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies values for navigating among accessible objects.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.windows.forms/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.AccessibleNavigation\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","uhfHeaderId":"MSDocsHeader-DotNet","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.AccessibleNavigation.yml","open_to_public_contributors":false,"api_name":["System.Windows.Forms.AccessibleNavigation","System.Windows.Forms.AccessibleNavigation.Down","System.Windows.Forms.AccessibleNavigation.FirstChild","System.Windows.Forms.AccessibleNavigation.LastChild","System.Windows.Forms.AccessibleNavigation.Left","System.Windows.Forms.AccessibleNavigation.Next","System.Windows.Forms.AccessibleNavigation.Previous","System.Windows.Forms.AccessibleNavigation.Right","System.Windows.Forms.AccessibleNavigation.Up"],"api_location":["System.Windows.Forms.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.AccessibleNavigation","System::Windows::Forms::AccessibleNavigation","System.Windows.Forms.AccessibleNavigation.Down","System::Windows::Forms::AccessibleNavigation::Down","System.Windows.Forms.AccessibleNavigation.FirstChild","System::Windows::Forms::AccessibleNavigation::FirstChild","System.Windows.Forms.AccessibleNavigation.LastChild","System::Windows::Forms::AccessibleNavigation::LastChild","System.Windows.Forms.AccessibleNavigation.Left","System::Windows::Forms::AccessibleNavigation::Left","System.Windows.Forms.AccessibleNavigation.Next","System::Windows::Forms::AccessibleNavigation::Next","System.Windows.Forms.AccessibleNavigation.Previous","System::Windows::Forms::AccessibleNavigation::Previous","System.Windows.Forms.AccessibleNavigation.Right","System::Windows::Forms::AccessibleNavigation::Right","System.Windows.Forms.AccessibleNavigation.Up","System::Windows::Forms::AccessibleNavigation::Up"],"dev_langs":["csharp"],"updated_at":"2017-04-01 05:59 PM","document_id":"cfc8fb73-1697-826c-5318-d79301e2b5de","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Windows.Forms/AccessibleNavigation.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"AccessibleNavigation enum | Microsoft Docs","_op_ogTitle":"AccessibleNavigation enum","description":"Specifies values for navigating among accessible objects.\n","toc_asset_id":"api/_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.AccessibleNavigation","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.accessiblenavigation","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.accessiblenavigation","fileRelativePath":"api/System.Windows.Forms.AccessibleNavigation.html"},"themesRelativePathToOutputRoot":"_themes/"}