{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">FileCodeGroup</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Grants permission to manipulate files located in the code assemblies to code assemblies that match the membership condition. This class cannot be inherited.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class FileCodeGroup : System.Security.Policy.CodeGroup</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup\" data-linktype=\"relative-path\">CodeGroup</a></span></div><span class=\"lang-csharp\">FileCodeGroup</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_AddChild_System_Security_Policy_CodeGroup_\" data-linktype=\"relative-path\">AddChild(CodeGroup)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_Children\" data-linktype=\"relative-path\">Children</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_Description\" data-linktype=\"relative-path\">Description</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_Equals_System_Security_Policy_CodeGroup_System_Boolean_\" data-linktype=\"relative-path\">Equals(CodeGroup, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_FromXml_System_Security_SecurityElement_\" data-linktype=\"relative-path\">FromXml(SecurityElement)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_FromXml_System_Security_SecurityElement_System_Security_Policy_PolicyLevel_\" data-linktype=\"relative-path\">FromXml(SecurityElement, PolicyLevel)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_MembershipCondition\" data-linktype=\"relative-path\">MembershipCondition</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_Name\" data-linktype=\"relative-path\">Name</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_PolicyStatement\" data-linktype=\"relative-path\">PolicyStatement</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_RemoveChild_System_Security_Policy_CodeGroup_\" data-linktype=\"relative-path\">RemoveChild(CodeGroup)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_ToXml\" data-linktype=\"relative-path\">ToXml()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_ToXml_System_Security_Policy_PolicyLevel_\" data-linktype=\"relative-path\">ToXml(PolicyLevel)</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example shows the use of members of the FileCodeGroup class.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Security.Policy.FileCodeGroup_Evt#1\">using namespace System;\nusing namespace System::Security;\nusing namespace System::Security::Policy;\nusing namespace System::Security::Permissions;\nusing namespace System::Reflection;\n\nref class Members\n{\npublic:\n   [STAThread]\n   static void Main()\n   {\n      FileCodeGroup^ fileCodeGroup = constructDefaultGroup();\n      \n      // Create a deep copy of the FileCodeGroup.\n      FileCodeGroup^ copyCodeGroup =\n         dynamic_cast&lt;FileCodeGroup^&gt;(fileCodeGroup-&gt;Copy());\n\n      CompareTwoCodeGroups( fileCodeGroup, copyCodeGroup );\n      addPolicy(  &amp;fileCodeGroup );\n      addXmlMember(  &amp;fileCodeGroup );\n      updateMembershipCondition(  &amp;fileCodeGroup );\n      addChildCodeGroup(  &amp;fileCodeGroup );\n      Console::Write( L&quot;Comparing the resolved code group &quot; );\n      Console::WriteLine( L&quot;with the initial code group.&quot; );\n      FileCodeGroup^ resolvedCodeGroup =\n         ResolveGroupToEvidence( fileCodeGroup );\n      if ( CompareTwoCodeGroups( fileCodeGroup, resolvedCodeGroup ) )\n      {\n         PrintCodeGroup( resolvedCodeGroup );\n      }\n      else\n      {\n         PrintCodeGroup( fileCodeGroup );\n      }\n\n      Console::WriteLine( L&quot;This sample completed successfully; press Enter to exit.&quot; );\n      Console::ReadLine();\n   }\n\nprivate:\n   // Construct a new FileCodeGroup with Read, Write, Append\n   // and PathDiscovery access.\n   static FileCodeGroup^ constructDefaultGroup()\n   {\n      // Construct a new file code group that has complete access to\n      // files in the specified path.\n      FileCodeGroup^ fileCodeGroup = gcnew FileCodeGroup(\n         gcnew AllMembershipCondition,FileIOPermissionAccess::AllAccess );\n\n      // Set the name of the file code group.\n      fileCodeGroup-&gt;Name = L&quot;TempCodeGroup&quot;;\n\n      // Set the description of the file code group.\n      fileCodeGroup-&gt;Description = L&quot;Temp folder permissions group&quot;;\n\n      // Retrieve the string representation of the  fileCodeGroupï¿½s\n      // attributes. FileCodeGroup does not use AttributeString, so the\n      // value should be null.\n      if ( fileCodeGroup-&gt;AttributeString != nullptr )\n      {\n         throw gcnew NullReferenceException(\n            L&quot;The AttributeString property should be null.&quot; );\n      }\n\n      return fileCodeGroup;\n   }\n\n   // Add file permission to restrict write access to all files on the\n   // local machine.\n   static void addPolicy( interior_ptr&lt;FileCodeGroup^&gt; fileCodeGroup )\n   {\n      // Set the PolicyStatement property to a policy with read access to\n      // the root directory of drive C.\n      FileIOPermission^ rootFilePermissions =\n         gcnew FileIOPermission( PermissionState::None );\n      rootFilePermissions-&gt;AllLocalFiles =\n         FileIOPermissionAccess::Read;\n      rootFilePermissions-&gt;SetPathList(\n         FileIOPermissionAccess::Read, L&quot;C:\\\\&quot; );\n      NamedPermissionSet^ namedPermissions =\n         gcnew NamedPermissionSet( L&quot;RootPermissions&quot; );\n      namedPermissions-&gt;AddPermission( rootFilePermissions );\n      ( *fileCodeGroup )-&gt;PolicyStatement =\n         gcnew PolicyStatement( namedPermissions );\n   }\n\n   // Set the membership condition of the specified FileCodeGroup\n   // to the Intranet zone.\n   static void updateMembershipCondition( interior_ptr&lt;FileCodeGroup^&gt; fileCodeGroup )\n   {\n      ZoneMembershipCondition^ zoneCondition =\n         gcnew ZoneMembershipCondition( SecurityZone::Intranet );\n      ( *fileCodeGroup )-&gt;MembershipCondition = zoneCondition;\n   }\n\n   // Add a child group with read-access file permission to the specified\n   // code group.\n   static void addChildCodeGroup( interior_ptr&lt;FileCodeGroup^&gt; fileCodeGroup )\n   {\n      // Create a file code group with read-access permission.\n      FileCodeGroup^ tempFolderCodeGroup = gcnew FileCodeGroup(\n         gcnew AllMembershipCondition,FileIOPermissionAccess::Read );\n      \n      // Set the name of the child code group and add it to\n      // the specified code group.\n      tempFolderCodeGroup-&gt;Name = L&quot;Read-only group&quot;;\n      ( *fileCodeGroup )-&gt;AddChild( tempFolderCodeGroup );\n   }\n\n   // Compare the two specified file code groups for equality.\n   static bool CompareTwoCodeGroups( FileCodeGroup^ firstCodeGroup,\n      FileCodeGroup^ secondCodeGroup )\n   {\n      if ( firstCodeGroup-&gt;Equals( secondCodeGroup ) )\n      {\n         Console::WriteLine( L&quot;The two code groups are equal.&quot; );\n         return true;\n      }\n      else\n      {\n         Console::WriteLine( L&quot;The two code groups are not equal.&quot; );\n         return false;\n      }\n   }\n\n   // Retrieve the resolved policy based on Evidence from the executing\n   // assembly found in the specified code group.\n   static String^ ResolveEvidence( CodeGroup^ fileCodeGroup )\n   {\n      String^ policyString = L&quot;&quot;;\n      \n      // Resolve the policy based on evidence in the executing assembly.\n      Assembly^ assembly = Members::typeid-&gt;Assembly;\n      Evidence^ executingEvidence = assembly-&gt;Evidence;\n      PolicyStatement^ policy = fileCodeGroup-&gt;Resolve( executingEvidence );\n\n      if ( policy != nullptr )\n      {\n         policyString = policy-&gt;ToString();\n      }\n\n      return policyString;\n   }\n\n   // Retrieve the resolved code group based on the Evidence from\n   // the executing assembly found in the specified code group.\n   static FileCodeGroup^ ResolveGroupToEvidence( FileCodeGroup^ fileCodeGroup )\n   {\n      // Resolve matching code groups to the executing assembly.\n      Assembly^ assembly = Members::typeid-&gt;Assembly;\n      Evidence^ evidence = assembly-&gt;Evidence;\n      CodeGroup^ codeGroup = fileCodeGroup-&gt;ResolveMatchingCodeGroups( evidence );\n\n      return dynamic_cast&lt;FileCodeGroup^&gt;(codeGroup);\n   }\n\n   // If a domain attribute is not found in the specified FileCodeGroup,\n   // add a child XML element identifying a custom membership condition.\n   static void addXmlMember( interior_ptr&lt;FileCodeGroup^&gt; fileCodeGroup )\n   {\n      SecurityElement^ xmlElement = ( *fileCodeGroup )-&gt;ToXml();\n\n      SecurityElement^ rootElement = gcnew SecurityElement( L&quot;CodeGroup&quot; );\n      if ( xmlElement-&gt;Attribute(L&quot;domain&quot;) == nullptr )\n      {\n         SecurityElement^ newElement = gcnew SecurityElement(\n            L&quot;CustomMembershipCondition&quot; );\n         newElement-&gt;AddAttribute( L&quot;class&quot;, L&quot;CustomMembershipCondition&quot; );\n         newElement-&gt;AddAttribute( L&quot;version&quot;, L&quot;1&quot; );\n         newElement-&gt;AddAttribute( L&quot;domain&quot;, L&quot;contoso.com&quot; );\n         rootElement-&gt;AddChild( newElement );\n         ( *fileCodeGroup )-&gt;FromXml( rootElement );\n      }\n\n      Console::WriteLine( L&quot;Added a custom membership condition:&quot; );\n      Console::WriteLine( rootElement );\n   }\n\n   // Print the properties of the specified code group to the console.\n   static void PrintCodeGroup( CodeGroup^ codeGroup )\n   {\n      // Compare the type of the specified object with the FileCodeGroup\n      // type.\n      if (  !codeGroup-&gt;GetType()-&gt;Equals( FileCodeGroup::typeid ) )\n      {\n         throw gcnew ArgumentException( L&quot;Expected the FileCodeGroup type.&quot; );\n      }\n\n      String^ codeGroupName = codeGroup-&gt;Name;\n      String^ membershipCondition = codeGroup-&gt;MembershipCondition-&gt;ToString();\n      \n      String^ permissionSetName = codeGroup-&gt;PermissionSetName;\n\n      int hashCode = codeGroup-&gt;GetHashCode();\n\n      String^ mergeLogic = L&quot;&quot;;\n      \n      if ( codeGroup-&gt;MergeLogic-&gt;Equals( L&quot;Union&quot; ) )\n      {\n         mergeLogic = L&quot; with Union merge logic&quot;;\n      }\n      \n      // Retrieve the class path for FileCodeGroup.\n      String^ fileGroupClass = codeGroup-&gt;ToString();\n      \n      // Write summary to the console window.\n      Console::WriteLine( L&quot;\\n*** {0} summary ***&quot;, fileGroupClass );\n      Console::Write( L&quot;A FileCodeGroup named &quot; );\n      Console::Write( L&quot;{0}{1}&quot;, codeGroupName, mergeLogic );\n      Console::Write( L&quot; has been created with hash code{0}.&quot;, hashCode );\n      Console::Write( L&quot;This code group contains a {0}&quot;, membershipCondition );\n      Console::Write( L&quot; membership condition with the &quot; );\n      Console::Write( L&quot;{0} permission set. &quot;, permissionSetName );\n      Console::Write( L&quot;The code group has the following security policy: &quot; );\n      Console::WriteLine( ResolveEvidence( codeGroup ) );\n      int childCount = codeGroup-&gt;Children-&gt;Count;\n      if ( childCount &gt; 0 )\n      {\n         Console::Write( L&quot;There are {0}&quot;, childCount );\n         Console::WriteLine( L&quot; child code groups in this code group.&quot; );\n         \n         // Iterate through the child code groups to display their names\n         // and remove them from the specified code group.\n         for ( int i = 0; i &lt; childCount; i++ )\n         {\n            // Get child code group as type FileCodeGroup.\n            FileCodeGroup^ childCodeGroup =\n               dynamic_cast&lt;FileCodeGroup^&gt;(codeGroup-&gt;Children-&gt;default[ i ]);\n            \n            Console::Write( L&quot;Removing the {0}.&quot;, childCodeGroup-&gt;Name );\n            // Remove child code group.\n\n            codeGroup-&gt;RemoveChild( childCodeGroup );\n         }\n         Console::WriteLine();\n      }\n      else\n      {\n         Console::Write( L&quot;There are no child code groups&quot; );\n         Console::WriteLine( L&quot; in this code group.&quot; );\n      }\n   }\n};\n\nint main()\n{\n   Members::Main();\n}\n\n//\n// This sample produces the following output:\n//\n// The two code groups are equal.\n// Added a custom membership condition:\n// &lt;CodeGroup&gt;\n// &lt;CustomMembershipCondition class=&quot;CustomMembershipCondition&quot;\n//                                version=&quot;1&quot;\n//                                domain=&quot;contoso.com&quot;/&gt;\n//                                &lt;/CodeGroup&gt;\n// Comparing the resolved code group with the initial code group.\n// The two code groups are not equal.\n//\n// *** System.Security.Policy.FileCodeGroup summary ***\n// A FileCodeGroup named  with Union merge logic has been created with hash\n// code 113151473. This code group contains a Zone - Intranet membership\n// condition with the Same directory FileIO - NoAccess permission set. The\n// code group has the following security policy:\n// There are 1 child code groups in this code group.\n// Removing the Read-only group.\n// This sample completed successfully; press Enter to exit.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Policy.FileCodeGroup_Evt#1\">using System;\nusing System.Security;\nusing System.Security.Policy;\nusing System.Security.Permissions;\nusing System.Reflection;\n\nclass Members\n{\n    [STAThread]\n    static void Main(string[] args)\n    {\n        FileCodeGroup fileCodeGroup = constructDefaultGroup();\n        \n        // Create a deep copy of the FileCodeGroup.\n        FileCodeGroup copyCodeGroup = (FileCodeGroup)fileCodeGroup.Copy();\n\n        CompareTwoCodeGroups(fileCodeGroup, copyCodeGroup);\n\n        addPolicy(ref fileCodeGroup);\n        addXmlMember(ref fileCodeGroup);\n        updateMembershipCondition(ref fileCodeGroup);\n        addChildCodeGroup(ref fileCodeGroup);\n\n        Console.Write(&quot;Comparing the resolved code group &quot;);\n        Console.WriteLine(&quot;with the initial code group.&quot;);\n        FileCodeGroup resolvedCodeGroup =\n            ResolveGroupToEvidence(fileCodeGroup);\n        if (CompareTwoCodeGroups(fileCodeGroup, resolvedCodeGroup))\n        {\n            PrintCodeGroup(resolvedCodeGroup);\n        }\n        else\n        {\n            PrintCodeGroup(fileCodeGroup);\n        }\n        \n        Console.WriteLine(&quot;This sample completed successfully; &quot; +\n            &quot;press Enter to exit.&quot;);\n        Console.ReadLine();\n    }\n\n    // Construct a new FileCodeGroup with Read, Write, Append \n    // and PathDiscovery access.\n    private static FileCodeGroup constructDefaultGroup()\n    {\n        // Construct a new file code group that has complete access to\n        // files in the specified path.\n        FileCodeGroup fileCodeGroup = \n            new FileCodeGroup(\n            new AllMembershipCondition(),\n            FileIOPermissionAccess.AllAccess);\n\n        // Set the name of the file code group.\n        fileCodeGroup.Name = &quot;TempCodeGroup&quot;;\n\n        // Set the description of the file code group.\n        fileCodeGroup.Description = &quot;Temp folder permissions group&quot;;\n\n        // Retrieve the string representation of the  fileCodeGroupï¿½s \n        // attributes. FileCodeGroup does not use AttributeString, so the\n        // value should be null.\n        if (fileCodeGroup.AttributeString != null)\n        {\n            throw new NullReferenceException(\n                &quot;The AttributeString property should be null.&quot;);\n        }\n\n        return fileCodeGroup;\n    }\n\n    // Add file permission to restrict write access to all files on the\n    // local machine.\n    private static void addPolicy(ref FileCodeGroup fileCodeGroup)\n    {\n        // Set the PolicyStatement property to a policy with read access to\n        // the root directory of drive C.\n        FileIOPermission rootFilePermissions = \n            new FileIOPermission(PermissionState.None);\n        rootFilePermissions.AllLocalFiles = FileIOPermissionAccess.Read;\n        rootFilePermissions.SetPathList(FileIOPermissionAccess.Read,&quot;C:\\\\&quot;);\n\n        NamedPermissionSet namedPermissions =\n            new NamedPermissionSet(&quot;RootPermissions&quot;);\n        namedPermissions.AddPermission(rootFilePermissions);\n        \n        fileCodeGroup.PolicyStatement =\n            new PolicyStatement(namedPermissions);\n    }\n\n    // Set the membership condition of the specified FileCodeGroup \n    // to the Intranet zone.\n    private static void updateMembershipCondition(\n        ref FileCodeGroup fileCodeGroup)\n    {\n        ZoneMembershipCondition zoneCondition =\n            new ZoneMembershipCondition(SecurityZone.Intranet);\n        fileCodeGroup.MembershipCondition = zoneCondition;\n    }\n\n    // Add a child group with read-access file permission to the specified \n    // code group.\n    private static void addChildCodeGroup(ref FileCodeGroup fileCodeGroup)\n    {\n        // Create a file code group with read-access permission.\n        FileCodeGroup tempFolderCodeGroup = new FileCodeGroup(\n            new AllMembershipCondition(), \n            FileIOPermissionAccess.Read);\n\n        // Set the name of the child code group and add it to \n        // the specified code group.\n        tempFolderCodeGroup.Name = &quot;Read-only group&quot;;\n        fileCodeGroup.AddChild(tempFolderCodeGroup);\n    }\n\n    // Compare the two specified file code groups for equality.\n    private static bool CompareTwoCodeGroups(\n        FileCodeGroup firstCodeGroup, FileCodeGroup secondCodeGroup)\n    {\n        if (firstCodeGroup.Equals(secondCodeGroup))\n        {\n            Console.WriteLine(&quot;The two code groups are equal.&quot;);\n            return true;\n        }\n        else \n        {\n            Console.WriteLine(&quot;The two code groups are not equal.&quot;);\n            return false;\n        }\n    }\n\n    // Retrieve the resolved policy based on Evidence from the executing \n    // assembly found in the specified code group.\n    private static string ResolveEvidence(CodeGroup fileCodeGroup)\n    {\n        string policyString = &quot;&quot;;\n\n        // Resolve the policy based on evidence in the executing assembly.\n        Assembly assembly = typeof(Members).Assembly;\n        Evidence executingEvidence = assembly.Evidence;\n\n        PolicyStatement policy = fileCodeGroup.Resolve(executingEvidence);\n\n        if (policy != null)\n        {\n            policyString = policy.ToString();\n        }\n\n        return policyString;\n    }\n\n    // Retrieve the resolved code group based on the Evidence from \n    // the executing assembly found in the specified code group.\n    private static FileCodeGroup ResolveGroupToEvidence(\n        FileCodeGroup fileCodeGroup)\n    {\n        // Resolve matching code groups to the executing assembly.\n        Assembly assembly = typeof(Members).Assembly;\n        Evidence evidence = assembly.Evidence;\n        CodeGroup codeGroup = \n            fileCodeGroup.ResolveMatchingCodeGroups(evidence);\n\n        return (FileCodeGroup)codeGroup;\n    }\n\n    // If a domain attribute is not found in the specified FileCodeGroup,\n    // add a child XML element identifying a custom membership condition.\n    private static void addXmlMember(ref FileCodeGroup fileCodeGroup)\n    {\n        SecurityElement xmlElement = fileCodeGroup.ToXml();\n\n        SecurityElement rootElement = new SecurityElement(&quot;CodeGroup&quot;);\n\n        if (xmlElement.Attribute(&quot;domain&quot;) == null) \n        {\n            SecurityElement newElement = \n                new SecurityElement(&quot;CustomMembershipCondition&quot;);\n            newElement.AddAttribute(&quot;class&quot;,&quot;CustomMembershipCondition&quot;);\n            newElement.AddAttribute(&quot;version&quot;,&quot;1&quot;);\n            newElement.AddAttribute(&quot;domain&quot;,&quot;contoso.com&quot;);\n\n            rootElement.AddChild(newElement);\n\n            fileCodeGroup.FromXml(rootElement);\n        }\n\n        Console.WriteLine(&quot;Added a custom membership condition:&quot;);\n        Console.WriteLine(rootElement.ToString());\n    }\n\n\n    // Print the properties of the specified code group to the console.\n    private static void PrintCodeGroup(CodeGroup codeGroup)\n    {\n        // Compare the type of the specified object with the FileCodeGroup\n        // type.\n        if (!codeGroup.GetType().Equals(typeof(FileCodeGroup)))\n        {\n            throw new ArgumentException(&quot;Expected the FileCodeGroup type.&quot;);\n        }\n        \n        string codeGroupName = codeGroup.Name;\n        string membershipCondition = codeGroup.MembershipCondition.ToString();\n        string permissionSetName = codeGroup.PermissionSetName;\n\n        int hashCode = codeGroup.GetHashCode();\n\n        string mergeLogic = &quot;&quot;;\n        if (codeGroup.MergeLogic.Equals(&quot;Union&quot;))\n        {\n            mergeLogic = &quot; with Union merge logic&quot;;\n        }\n\n        // Retrieve the class path for FileCodeGroup.\n        string fileGroupClass = codeGroup.ToString();\n\n        // Write summary to the console window.\n        Console.WriteLine(&quot;\\n*** &quot; + fileGroupClass + &quot; summary ***&quot;);\n        Console.Write(&quot;A FileCodeGroup named &quot;);\n        Console.Write(codeGroupName + mergeLogic);\n        Console.Write(&quot; has been created with hash code&quot; + hashCode + &quot;.&quot;);\n        Console.Write(&quot;This code group contains a &quot; + membershipCondition);\n        Console.Write(&quot; membership condition with the &quot;);\n        Console.Write(permissionSetName + &quot; permission set. &quot;);\n\n        Console.Write(&quot;The code group has the following security policy: &quot;);\n        Console.WriteLine(ResolveEvidence(codeGroup));\n\n        \n        int childCount = codeGroup.Children.Count;\n        if (childCount &gt; 0 )\n        {\n            Console.Write(&quot;There are &quot; + childCount);\n            Console.WriteLine(&quot; child code groups in this code group.&quot;);\n\n            // Iterate through the child code groups to display their names\n            // and remove them from the specified code group.\n            for (int i=0; i &lt; childCount; i++)\n            {\n                // Get child code group as type FileCodeGroup.\n                FileCodeGroup childCodeGroup = \n                    (FileCodeGroup)codeGroup.Children[i];\n                \n                Console.Write(&quot;Removing the &quot; + childCodeGroup.Name + &quot;.&quot;);\n                // Remove child code group.\n                codeGroup.RemoveChild(childCodeGroup);\n            }\n\n            Console.WriteLine();\n        }\n        else\n        {\n            Console.Write(&quot;There are no child code groups&quot;);\n            Console.WriteLine(&quot; in this code group.&quot;);\n        }\n    }\n}\n//\n// This sample produces the following output:\n//\n// The two code groups are equal.\n// Added a custom membership condition:\n// &lt;CodeGroup&gt;\n// &lt;CustomMembershipCondition class=&quot;CustomMembershipCondition&quot;\n//                                version=&quot;1&quot;\n//                                domain=&quot;contoso.com&quot;/&gt;\n//                                &lt;/CodeGroup&gt;\n// Comparing the resolved code group with the initial code group.\n// The two code groups are not equal.\n// \n// *** System.Security.Policy.FileCodeGroup summary ***\n// A FileCodeGroup named  with Union merge logic has been created with hash\n// code 113151473. This code group contains a Zone - Intranet membership\n// condition with the Same directory FileIO - NoAccess permission set. The\n// code group has the following security policy:\n// There are 1 child code groups in this code group.\n// Removing the Read-only group.\n// This sample completed successfully; press Enter to exit.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Policy.FileCodeGroup_Evt#1\">Imports System.Security\nImports System.Security.Policy\nImports System.Security.Permissions\nImports System.Reflection\nImports System.Windows.Forms\n\nPublic Class Form1\n    Inherits System.Windows.Forms.Form\n\n    &#39; Event handler for Run button.\n    Private Sub Button1_Click( _\n        ByVal sender As System.Object, _\n        ByVal e As System.EventArgs) Handles Button1.Click\n\n        tbxOutput.Cursor = Cursors.WaitCursor\n        tbxOutput.Text = &quot;&quot;\n\n        Dim fileCodeGroup As FileCodeGroup = constructDefaultGroup()\n\n        &#39; Create a deep copy of the FileCodeGroup;\n        Dim copyCodeGroup As FileCodeGroup = _\n            CType(fileCodeGroup.Copy(), FileCodeGroup)\n\n        CompareTwoCodeGroups(fileCodeGroup, copyCodeGroup)\n\n        addPolicy(fileCodeGroup)\n        addXmlMember(fileCodeGroup)\n        updateMembershipCondition(fileCodeGroup)\n        addChildCodeGroup(fileCodeGroup)\n\n        WriteLine(&quot;Comparing the resolved code group with the initial &quot; + _\n            &quot;code group:&quot;)\n        Dim resolvedCodeGroup As FileCodeGroup\n        resolvedCodeGroup = ResolveGroupToEvidence(fileCodeGroup)\n\n        If (CompareTwoCodeGroups(fileCodeGroup, resolvedCodeGroup)) Then\n            PrintCodeGroup(resolvedCodeGroup)\n        Else\n            PrintCodeGroup(fileCodeGroup)\n        End If\n\n        &#39; Reset the cursor and conclude application.\n        tbxOutput.AppendText(vbCrLf + &quot;This sample completed &quot; + _\n            &quot;successfully; press Exit to continue.&quot;)\n        tbxOutput.Cursor = Cursors.Default\n    End Sub\n    &#39; Construct a new FileCodeGroup with read, write, append and \n    &#39; discovery access.\n    Private Function constructDefaultGroup() As FileCodeGroup\n        &#39; Construct a file code group with read, write, append and \n        &#39; discovery access.\n        Dim fileCodeGroup As New FileCodeGroup( _\n            New AllMembershipCondition, _\n            FileIOPermissionAccess.AllAccess)\n\n        &#39; Set the name of the file code group.\n        fileCodeGroup.Name = &quot;TempCodeGroup&quot;\n\n        &#39; Set the description of the file code group.\n        fileCodeGroup.Description = &quot;Temp folder permissions group&quot;\n\n        &#39; Retrieve the string representation of the Policy&#39;s attributes.\n        &#39; FileCodeGroup does not use AttributeString, so the value should\n        &#39; be null.\n        If (Not fileCodeGroup.AttributeString Is Nothing) Then\n            Throw New NullReferenceException( _\n                &quot;AttributeString property is not empty&quot;)\n        End If\n\n        Return fileCodeGroup\n    End Function\n\n    &#39; Add file permission to restrict write access to all files on the \n    &#39; local machine.\n    Private Sub addPolicy(ByRef fileCodeGroup As FileCodeGroup)\n        &#39; Set the PolicyStatement property to a policy with\n        &#39; read access to c:\\.\n        Dim rootFilePermissions As New FileIOPermission(PermissionState.None)\n        rootFilePermissions.AllLocalFiles = FileIOPermissionAccess.Read\n        rootFilePermissions.SetPathList(FileIOPermissionAccess.Read, &quot;C:\\\\&quot;)\n\n        Dim namedPermissions As New NamedPermissionSet(&quot;RootPermissions&quot;)\n        namedPermissions.AddPermission(rootFilePermissions)\n\n        fileCodeGroup.PolicyStatement = New PolicyStatement(namedPermissions)\n    End Sub\n\n    &#39; Set the membership condition of the specified FileCodeGroup to \n    &#39; Intranet zone.\n    Private Sub updateMembershipCondition( _\n        ByRef fileCodeGroup As FileCodeGroup)\n\n        &#39; Set the membership condition to the Intranet zone.\n        Dim zoneCondition As _\n            New ZoneMembershipCondition(SecurityZone.Intranet)\n\n        fileCodeGroup.MembershipCondition = zoneCondition\n    End Sub\n\n    &#39; Add a child group with read-access file permissions to the specified\n    &#39; code group.\n    Private Sub addChildCodeGroup(ByRef fileCodeGroup As FileCodeGroup)\n        &#39; Create a file code group with read access.\n        Dim tempFolderCodeGroup As New FileCodeGroup( _\n            New AllMembershipCondition, _\n            FileIOPermissionAccess.Read)\n\n        &#39; Set the name of the child code group and add it to the specified \n        &#39; code group.\n        tempFolderCodeGroup.Name = &quot;Read-only group&quot;\n        fileCodeGroup.AddChild(tempFolderCodeGroup)\n    End Sub\n\n    &#39; Compare two specified FileCodeGroups for equality.\n    Private Function CompareTwoCodeGroups( _\n        ByVal firstCodeGroup As FileCodeGroup, _\n        ByVal secondCodeGroup As FileCodeGroup) As Boolean\n\n        &#39; Compare two FileCodeGroups for equality.\n        If (firstCodeGroup.Equals(secondCodeGroup)) Then\n            WriteLine(&quot;The two code groups are equal.&quot;)\n            Return True\n        Else\n            WriteLine(&quot;The two code groups are not equal.&quot;)\n            Return False\n        End If\n\n    End Function\n\n    &#39; Retrieve the resolved policy based on the executing evidence found \n    &#39; in the specified code group.\n    Private Function ResolveEvidence( _\n        ByVal fileCodeGroup As CodeGroup) As String\n\n        Dim policyString As String = &quot;&quot;\n\n        &#39; Resolve the policy based on the executing assemlby&#39;s evidence.\n        Dim executingAssembly As [Assembly]\n        executingAssembly = Me.GetType().Assembly\n\n        Dim executingEvidence As Evidence = executingAssembly.Evidence\n\n        Dim policy As PolicyStatement\n        policy = fileCodeGroup.Resolve(executingEvidence)\n\n        If (Not policy Is Nothing) Then\n            policyString = policy.ToString()\n        End If\n\n        Return policyString\n    End Function\n\n    &#39; Retrieve the resolved code group based on the executing evidence found\n    &#39; in the specified code group.\n    Private Function ResolveGroupToEvidence( _\n        ByVal fileCodeGroup As FileCodeGroup) As FileCodeGroup\n\n        &#39; Resolve matching code groups to the executing assembly.\n        Dim executingAssembly As [Assembly]\n        executingAssembly = Me.GetType().Assembly\n\n        Dim evidence As Evidence = executingAssembly.Evidence\n\n        Dim codeGroup As CodeGroup\n        codeGroup = fileCodeGroup.ResolveMatchingCodeGroups(evidence)\n\n        Return CType(codeGroup, FileCodeGroup)\n    End Function\n\n    &#39; If domain attribute is not found in specified FileCodeGroup, \n    &#39; add a child Xml element identifying a custom membership condition.\n    Private Sub addXmlMember(ByRef fileCodeGroup As FileCodeGroup)\n        Dim xmlElement As SecurityElement = fileCodeGroup.ToXml()\n\n        Dim rootElement As New SecurityElement(&quot;CodeGroup&quot;)\n        If (xmlElement.Attribute(&quot;domain&quot;) Is Nothing) Then\n            Dim newElement As New SecurityElement(&quot;CustomMembershipCondition&quot;)\n            newElement.AddAttribute(&quot;class&quot;, &quot;CustomMembershipCondition&quot;)\n            newElement.AddAttribute(&quot;version&quot;, &quot;1&quot;)\n            newElement.AddAttribute(&quot;domain&quot;, &quot;contoso.com&quot;)\n\n            rootElement.AddChild(newElement)\n\n            fileCodeGroup.FromXml(rootElement)\n\n        End If\n\n        WriteLine(&quot;Added a custom membership condition:&quot;)\n        WriteLine(rootElement.ToString())\n    End Sub\n\n    &#39; Print the properties of the specified code group to the output textbox.\n    Private Sub PrintCodeGroup(ByVal codeGroup As CodeGroup)\n        &#39; Compare specified object&#39;s type with the FileCodeGroup type.\n        If (Not codeGroup.GetType() Is GetType(FileCodeGroup)) Then\n            Throw New ArgumentException(&quot;Excepted FileCodeGroup type&quot;)\n        End If\n\n        Dim codeGroupName As String = codeGroup.Name\n        Dim membershipCondition As String\n        membershipCondition = codeGroup.MembershipCondition.ToString()\n\n        Dim permissionSetName As String = codeGroup.PermissionSetName\n\n        Dim hashCode As Integer = codeGroup.GetHashCode()\n\n        Dim mergeLogic As String = &quot;&quot;\n        If (codeGroup.MergeLogic.Equals(&quot;Union&quot;)) Then\n            mergeLogic = &quot; with Union merge logic&quot;\n        End If\n\n        &#39; Retrieve the class path for FileCodeGroup.\n        Dim fileGroupClass As String = codeGroup.ToString()\n\n        &#39; Write summary to console window.\n        WriteLine(vbCrLf + &quot;*** &quot; + fileGroupClass + &quot; summary ***&quot;)\n        Write(&quot;A FileCodeGroup named &quot; + codeGroupName + mergeLogic)\n        Write(&quot; has been created with hash code(&quot; + hashCode.ToString())\n        Write(&quot;). It contains a &quot; + membershipCondition)\n        Write(&quot; membership condition with the &quot;)\n        Write(permissionSetName + &quot; permission set. &quot;)\n\n        WriteLine(&quot;It has the following policy: &quot; + _\n            ResolveEvidence(codeGroup))\n        Dim childCount As Integer = codeGroup.Children.Count\n        If (childCount &gt; 0) Then\n            Write(&quot;There are &quot; + childCount.ToString())\n            WriteLine(&quot; child elements in the code group:&quot;)\n\n            &#39; Iterate through the child code groups to display their names and\n            &#39;  remove them from the specified code group.\n            For i As Int16 = 0 To childCount - 1 Step 1\n                &#39; Get child code group as type FileCodeGroup.\n                Dim childCodeGroup As FileCodeGroup\n                childCodeGroup = CType(codeGroup.Children(i), FileCodeGroup)\n\n                Write(&quot;Removing the &quot; + childCodeGroup.Name + &quot;.&quot;)\n                &#39; Remove child codegroup.\n                codeGroup.RemoveChild(childCodeGroup)\n            Next\n\n            WriteLine(&quot;&quot;)\n\n        Else\n            WriteLine(&quot;There are no children found in the code group:&quot;)\n\n        End If\n    End Sub\n    &#39; Write message to the output textbox.\n    Private Sub Write(ByVal message As String)\n        tbxOutput.AppendText(message)\n\n    End Sub\n    &#39; Write message with carriage return to the output textbox.\n    Private Sub WriteLine(ByVal message As String)\n        tbxOutput.AppendText(message + vbCrLf)\n\n    End Sub\n\n\n    &#39; Event handler for Exit button.\n    Private Sub Button2_Click( _\n        ByVal sender As System.Object, _\n        ByVal e As System.EventArgs) Handles Button2.Click\n\n        Application.Exit()\n    End Sub\n#Region &quot; Windows Form Designer generated code &quot;\n\n    Public Sub New()\n        MyBase.New()\n\n        &#39;This call is required by the Windows Form Designer.\n        InitializeComponent()\n\n        &#39;Add any initialization after the InitializeComponent() call\n\n    End Sub\n\n    &#39;Form overrides dispose to clean up the component list.\n    Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)\n        If disposing Then\n            If Not (components Is Nothing) Then\n                components.Dispose()\n            End If\n        End If\n        MyBase.Dispose(disposing)\n    End Sub\n\n    &#39;Required by the Windows Form Designer\n    Private components As System.ComponentModel.IContainer\n\n    &#39;NOTE: The following procedure is required by the Windows Form Designer\n    &#39;It can be modified using the Windows Form Designer.  \n    &#39;Do not modify it using the code editor.\n    Friend WithEvents Panel2 As System.Windows.Forms.Panel\n    Friend WithEvents Panel1 As System.Windows.Forms.Panel\n    Friend WithEvents Button1 As System.Windows.Forms.Button\n    Friend WithEvents Button2 As System.Windows.Forms.Button\n    Friend WithEvents tbxOutput As System.Windows.Forms.RichTextBox\n    &lt;System.Diagnostics.DebuggerStepThrough()&gt; _\n    Private Sub InitializeComponent()\n        Me.Panel2 = New System.Windows.Forms.Panel\n        Me.Button1 = New System.Windows.Forms.Button\n        Me.Button2 = New System.Windows.Forms.Button\n        Me.Panel1 = New System.Windows.Forms.Panel\n        Me.tbxOutput = New System.Windows.Forms.RichTextBox\n        Me.Panel2.SuspendLayout()\n        Me.Panel1.SuspendLayout()\n        Me.SuspendLayout()\n        &#39;\n        &#39;Panel2\n        &#39;\n        Me.Panel2.Controls.Add(Me.Button1)\n        Me.Panel2.Controls.Add(Me.Button2)\n        Me.Panel2.Dock = System.Windows.Forms.DockStyle.Bottom\n        Me.Panel2.DockPadding.All = 20\n        Me.Panel2.Location = New System.Drawing.Point(0, 320)\n        Me.Panel2.Name = &quot;Panel2&quot;\n        Me.Panel2.Size = New System.Drawing.Size(616, 64)\n        Me.Panel2.TabIndex = 1\n        &#39;\n        &#39;Button1\n        &#39;\n        Me.Button1.Dock = System.Windows.Forms.DockStyle.Right\n        Me.Button1.Font = New System.Drawing.Font( _\n            &quot;Microsoft Sans Serif&quot;, _\n            9.0!, _\n            System.Drawing.FontStyle.Regular, _\n            System.Drawing.GraphicsUnit.Point, _\n            CType(0, Byte))\n        Me.Button1.Location = New System.Drawing.Point(446, 20)\n        Me.Button1.Name = &quot;Button1&quot;\n        Me.Button1.Size = New System.Drawing.Size(75, 24)\n        Me.Button1.TabIndex = 2\n        Me.Button1.Text = &quot;&amp;Run&quot;\n        &#39;\n        &#39;Button2\n        &#39;\n        Me.Button2.Dock = System.Windows.Forms.DockStyle.Right\n        Me.Button2.Font = New System.Drawing.Font( _\n            &quot;Microsoft Sans Serif&quot;, _\n            9.0!, _\n            System.Drawing.FontStyle.Regular, _\n            System.Drawing.GraphicsUnit.Point, _\n            CType(0, Byte))\n        Me.Button2.Location = New System.Drawing.Point(521, 20)\n        Me.Button2.Name = &quot;Button2&quot;\n        Me.Button2.Size = New System.Drawing.Size(75, 24)\n        Me.Button2.TabIndex = 3\n        Me.Button2.Text = &quot;E&amp;xit&quot;\n        &#39;\n        &#39;Panel1\n        &#39;\n        Me.Panel1.Controls.Add(Me.tbxOutput)\n        Me.Panel1.Dock = System.Windows.Forms.DockStyle.Fill\n        Me.Panel1.DockPadding.All = 20\n        Me.Panel1.Location = New System.Drawing.Point(0, 0)\n        Me.Panel1.Name = &quot;Panel1&quot;\n        Me.Panel1.Size = New System.Drawing.Size(616, 320)\n        Me.Panel1.TabIndex = 2\n        &#39;\n        &#39;tbxOutput\n        &#39;\n        Me.tbxOutput.AccessibleDescription = _\n            &quot;Displays output from application.&quot;\n        Me.tbxOutput.AccessibleName = &quot;Output textbox.&quot;\n        Me.tbxOutput.Dock = System.Windows.Forms.DockStyle.Fill\n        Me.tbxOutput.Location = New System.Drawing.Point(20, 20)\n        Me.tbxOutput.Name = &quot;tbxOutput&quot;\n        Me.tbxOutput.Size = New System.Drawing.Size(576, 280)\n        Me.tbxOutput.TabIndex = 1\n        Me.tbxOutput.Text = &quot;Click the Run button to run the application.&quot;\n        &#39;\n        &#39;Form1\n        &#39;\n        Me.AutoScaleBaseSize = New System.Drawing.Size(6, 15)\n        Me.ClientSize = New System.Drawing.Size(616, 384)\n        Me.Controls.Add(Me.Panel1)\n        Me.Controls.Add(Me.Panel2)\n        Me.Name = &quot;Form1&quot;\n        Me.Text = &quot;FileCodeGroup&quot;\n        Me.Panel2.ResumeLayout(False)\n        Me.Panel1.ResumeLayout(False)\n        Me.ResumeLayout(False)\n\n    End Sub\n\n#End Region\nEnd Class\n&#39;\n&#39; This sample produces the following output:\n&#39;\n&#39; The two code groups are equal.\n&#39; Added a custom membership condition:\n&#39; &lt;CodeGroup&gt;\n&#39;    &lt;CustomMembershipCondition class=&quot;CustomMembershipCondition&quot;\n&#39;                               version=&quot;1&quot;\n&#39;                               domain=&quot;contoso.com&quot;/&gt;\n&#39; &lt;/CodeGroup&gt;\n&#39; \n&#39; Comparing the resolved code group with the initial code group:\n&#39; The two code groups are not equal.\n&#39; \n&#39; *** System.Security.Policy.FileCodeGroup summary ***\n&#39; A FileCodeGroup named  with Union merge logic has been created with hash\n&#39; code (113152269). It contains a Zone - Intranet membership condition with\n&#39; the Same directory FileIO - NoAccess permission set. Has the following\n&#39; policy: \n&#39; There are 1 child elements in the code group:\n&#39; Removing the Read-only group.\n&#39; \n&#39; This sample completed successfully; press Exit to continue.\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Code groups are the building blocks of code access security policy. Each policy level consists of a root code group that can have child code groups. Each child code group can have their own child code groups; this behavior extends to any number of levels, forming a tree. Each code group has a membership condition that determines if a given assembly belongs to it based on the evidence for that assembly. Only code groups whose membership conditions match a given assembly and their child code groups apply policy.  </p>\n<p> FileCodeGroup has the same child matching semantics as <a class=\"xref\" href=\"system.security.policy.unioncodegroup\" data-linktype=\"relative-path\">UnionCodeGroup</a>. However, FileCodeGroup returns a permission set containing a dynamically-calculated <a class=\"xref\" href=\"system.security.permissions.fileiopermission\" data-linktype=\"relative-path\">FileIOPermission</a> that grants file access to the directory from which the code is run; <a class=\"xref\" href=\"system.security.policy.unioncodegroup\" data-linktype=\"relative-path\">UnionCodeGroup</a> only returns a static permission set. The type of file access granted is passed as a parameter to the constructor.  </p>\n<p> This code group only matches assemblies run over a file protocol, that is, assemblies that have URLs that point to a file or UNC path.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Policy_FileCodeGroup__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Policy_FileCodeGroup__ctor_System_Security_Policy_IMembershipCondition_System_Security_Permissions_FileIOPermissionAccess_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FileCodeGroup(IMembershipCondition, FileIOPermissionAccess)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.policy.filecodegroup\" data-linktype=\"relative-path\">FileCodeGroup</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public FileCodeGroup (System.Security.Policy.IMembershipCondition membershipCondition, System.Security.Permissions.FileIOPermissionAccess access);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>membershipCondition</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.imembershipcondition\" data-linktype=\"relative-path\">IMembershipCondition</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A membership condition that tests evidence to determine whether this code group applies policy.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>access</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>One of the <a class=\"xref\" href=\"system.security.permissions.fileiopermissionaccess\" data-linktype=\"relative-path\">FileIOPermissionAccess</a> values. This value is used to construct the <a class=\"xref\" href=\"system.security.permissions.fileiopermission\" data-linktype=\"relative-path\">FileIOPermission</a> that is granted.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>membershipCondition</code> parameter is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The type of the <code>membershipCondition</code> parameter is not valid.  </p>\n<p> -or-  </p>\n<p> The type of the <code>access</code> parameter is not valid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor creates a basic code group. Child code groups can be added with the <a class=\"xref\" href=\"system.security.policy.codegroup#System_Security_Policy_CodeGroup_AddChild_\" data-linktype=\"relative-path\">AddChild</a> method.  </p>\n<p> <a class=\"xref\" href=\"system.security.policy.filecodegroup\" data-linktype=\"relative-path\">FileCodeGroup</a> returns a permission set containing a dynamically-calculated <a class=\"xref\" href=\"system.security.permissions.fileiopermission\" data-linktype=\"relative-path\">FileIOPermission</a> that grants file access to the directory from which the code is run. The type of access granted is determined by the <code>access</code> parameter.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Policy_FileCodeGroup_AttributeString_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Policy_FileCodeGroup_AttributeString\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AttributeString</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a string representation of the attributes of the policy statement for the code group.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override string AttributeString { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Always <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.security.policy.filecodegroup\" data-linktype=\"relative-path\">FileCodeGroup</a> does not use AttributeString, so this property is always <code>null</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Policy_FileCodeGroup_MergeLogic_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Policy_FileCodeGroup_MergeLogic\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MergeLogic</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the merge logic.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override string MergeLogic { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string &quot;Union&quot;.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Policy_FileCodeGroup_PermissionSetName_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Policy_FileCodeGroup_PermissionSetName\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PermissionSetName</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the name of the named permission set for the code group.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override string PermissionSetName { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The concatenatation of the string &quot;Same directory FileIO - &quot; and the access type.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Policy_FileCodeGroup_Copy_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Policy_FileCodeGroup_Copy\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Copy()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Makes a deep copy of the current code group.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override System.Security.Policy.CodeGroup Copy ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup\" data-linktype=\"relative-path\">CodeGroup</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An equivalent copy of the current code group, including its membership conditions and child code groups.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method makes a deep copy of the code group, so that copies of all objects the code group contains are also made.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Policy_FileCodeGroup_CreateXml_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Policy_FileCodeGroup_CreateXml_System_Security_SecurityElement_System_Security_Policy_PolicyLevel_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CreateXml(SecurityElement, PolicyLevel)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected override void CreateXml (System.Security.SecurityElement element, System.Security.Policy.PolicyLevel level);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>element</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>level</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.policylevel\" data-linktype=\"relative-path\">PolicyLevel</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Policy_FileCodeGroup_Equals_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Policy_FileCodeGroup_Equals_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Equals(Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether the specified code group is equivalent to the current code group.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override bool Equals (object o);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>o</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The code group to compare with the current code group.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the specified code group is equivalent to the current code group; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Policy_FileCodeGroup_GetHashCode_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Policy_FileCodeGroup_GetHashCode\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetHashCode()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the hash code of the current code group.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetHashCode ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The hash code of the current code group.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Policy_FileCodeGroup_ParseXml_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Policy_FileCodeGroup_ParseXml_System_Security_SecurityElement_System_Security_Policy_PolicyLevel_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ParseXml(SecurityElement, PolicyLevel)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected override void ParseXml (System.Security.SecurityElement e, System.Security.Policy.PolicyLevel level);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityelement\" data-linktype=\"relative-path\">SecurityElement</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>level</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.policylevel\" data-linktype=\"relative-path\">PolicyLevel</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Policy_FileCodeGroup_Resolve_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Policy_FileCodeGroup_Resolve_System_Security_Policy_Evidence_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Resolve(Evidence)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Resolves policy for the code group and its descendants for a set of evidence.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override System.Security.Policy.PolicyStatement Resolve (System.Security.Policy.Evidence evidence);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>evidence</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The evidence for the assembly.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.policystatement\" data-linktype=\"relative-path\">PolicyStatement</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A policy statement consisting of the permissions granted by the code group with optional attributes, or <code>null</code> if the code group does not apply (the membership condition does not match the specified evidence).</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.security.securitysafecriticalattribute\" title=\"System.Security.SecuritySafeCriticalAttribute\" data-linktype=\"relative-path\">SecuritySafeCriticalAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>evidence</code> parameter is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.policyexception\" data-linktype=\"relative-path\">PolicyException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The current policy is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> More than one code group (including the parent code group and all child code groups) is marked <a class=\"xref\" href=\"system.security.policy.policystatementattribute\" data-linktype=\"relative-path\">PolicyStatementAttribute</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Given evidence for an assembly to be loaded, this method evaluates the code group by first checking the membership condition against the specified evidence. If there is a match, this method returns a policy statement for the code group, including evaluation of child code groups.  </p>\n<p> The .NET Framework security system uses Resolve on the policy levels to determine which permissions to grant to loaded code from the resulting policy statements and the code request on the assembly.  </p>\n<p> <a class=\"xref\" href=\"system.security.policy.filecodegroup\" data-linktype=\"relative-path\">FileCodeGroup</a> uses union semantics and forms a permission set based on the <a class=\"xref\" href=\"system.security.policy.url\" data-linktype=\"relative-path\">Url</a> specified by <code>evidence</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Policy_FileCodeGroup_ResolveMatchingCodeGroups_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Policy_FileCodeGroup_ResolveMatchingCodeGroups_System_Security_Policy_Evidence_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ResolveMatchingCodeGroups(Evidence)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Resolves matching code groups.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override System.Security.Policy.CodeGroup ResolveMatchingCodeGroups (System.Security.Policy.Evidence evidence);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>evidence</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.evidence\" data-linktype=\"relative-path\">Evidence</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The evidence for the assembly.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.policy.codegroup\" data-linktype=\"relative-path\">CodeGroup</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.security.policy.codegroup\" data-linktype=\"relative-path\">CodeGroup</a> that is the root of the tree of matching code groups.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>evidence</code> parameter is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Given evidence for an assembly to be loaded, this method evaluates the code group by first checking the membership condition against the specified evidence. If there is a match, this method returns a root code group. The code group that is returned contains child code groups, which in turn can have child code groups as necessary to reflect the complete set of code groups that were matched by the evidence provided.  </p>\n<p> <a class=\"xref\" href=\"system.security.policy.filecodegroup\" data-linktype=\"relative-path\">FileCodeGroup</a> uses union semantics and forms a permission set based on the <a class=\"xref\" href=\"system.security.policy.url\" data-linktype=\"relative-path\">Url</a> specified by <code>evidence</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Policy.FileCodeGroup.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Policy.FileCodeGroup\">\r\n<meta name=\"APIName\" content=\"System.Security.Policy.FileCodeGroup..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Policy.FileCodeGroup.AttributeString\">\r\n<meta name=\"APIName\" content=\"System.Security.Policy.FileCodeGroup.Copy\">\r\n<meta name=\"APIName\" content=\"System.Security.Policy.FileCodeGroup.CreateXml\">\r\n<meta name=\"APIName\" content=\"System.Security.Policy.FileCodeGroup.Equals\">\r\n<meta name=\"APIName\" content=\"System.Security.Policy.FileCodeGroup.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Security.Policy.FileCodeGroup.MergeLogic\">\r\n<meta name=\"APIName\" content=\"System.Security.Policy.FileCodeGroup.ParseXml\">\r\n<meta name=\"APIName\" content=\"System.Security.Policy.FileCodeGroup.PermissionSetName\">\r\n<meta name=\"APIName\" content=\"System.Security.Policy.FileCodeGroup.Resolve\">\r\n<meta name=\"APIName\" content=\"System.Security.Policy.FileCodeGroup.ResolveMatchingCodeGroups\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:59 PM\">\r\n<meta name=\"document_id\" content=\"185ced61-b5be-135e-6863-f72b524bb1ad\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Grants permission to manipulate files located in the code assemblies to code assemblies that match the membership condition. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.security.policy/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Policy.FileCodeGroup\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","uhfHeaderId":"MSDocsHeader-DotNet","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Policy.FileCodeGroup.yml","open_to_public_contributors":false,"api_name":["System.Security.Policy.FileCodeGroup","System.Security.Policy.FileCodeGroup..ctor","System.Security.Policy.FileCodeGroup.AttributeString","System.Security.Policy.FileCodeGroup.Copy","System.Security.Policy.FileCodeGroup.CreateXml","System.Security.Policy.FileCodeGroup.Equals","System.Security.Policy.FileCodeGroup.GetHashCode","System.Security.Policy.FileCodeGroup.MergeLogic","System.Security.Policy.FileCodeGroup.ParseXml","System.Security.Policy.FileCodeGroup.PermissionSetName","System.Security.Policy.FileCodeGroup.Resolve","System.Security.Policy.FileCodeGroup.ResolveMatchingCodeGroups"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Policy.FileCodeGroup","System::Security::Policy::FileCodeGroup","System.Security.Policy.FileCodeGroup.#ctor","System::Security::Policy::FileCodeGroup::#ctor","System.Security.Policy.FileCodeGroup.AttributeString","System::Security::Policy::FileCodeGroup::AttributeString","System.Security.Policy.FileCodeGroup.Copy","System::Security::Policy::FileCodeGroup::Copy","System.Security.Policy.FileCodeGroup.CreateXml","System::Security::Policy::FileCodeGroup::CreateXml","System.Security.Policy.FileCodeGroup.Equals","System::Security::Policy::FileCodeGroup::Equals","System.Security.Policy.FileCodeGroup.GetHashCode","System::Security::Policy::FileCodeGroup::GetHashCode","System.Security.Policy.FileCodeGroup.MergeLogic","System::Security::Policy::FileCodeGroup::MergeLogic","System.Security.Policy.FileCodeGroup.ParseXml","System::Security::Policy::FileCodeGroup::ParseXml","System.Security.Policy.FileCodeGroup.PermissionSetName","System::Security::Policy::FileCodeGroup::PermissionSetName","System.Security.Policy.FileCodeGroup.Resolve","System::Security::Policy::FileCodeGroup::Resolve","System.Security.Policy.FileCodeGroup.ResolveMatchingCodeGroups","System::Security::Policy::FileCodeGroup::ResolveMatchingCodeGroups"],"dev_langs":["csharp"],"updated_at":"2017-04-01 05:59 PM","document_id":"185ced61-b5be-135e-6863-f72b524bb1ad","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Security.Policy/FileCodeGroup.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"FileCodeGroup class | Microsoft Docs","_op_ogTitle":"FileCodeGroup class","description":"Grants permission to manipulate files located in the code assemblies to code assemblies that match the membership condition. This class cannot be inherited.\n","toc_asset_id":"api/_splitted/System.Security.Policy/toc.json","toc_rel":"_splitted/System.Security.Policy/toc.json","source_url":"","ms.assetid":"System.Security.Policy.FileCodeGroup","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.security.policy.filecodegroup","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.security.policy.filecodegroup","fileRelativePath":"api/System.Security.Policy.FileCodeGroup.html"},"themesRelativePathToOutputRoot":"_themes/"}