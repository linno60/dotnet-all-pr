{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">IObservable&lt;T&gt;</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Defines a provider for push-based notification.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public interface IObservable&lt;out T&gt;</code></pre>\r\n  \r\n  \r\n  \r\n  \t\t<h3 class=\"accented\">Type Parameters</h3>\r\n  \t\t<table class=\"nameValue stack\">\r\n  \t\t\t<tr>\r\n  \t\t\t<td>T</td>\r\n  \t\t\t<td><p>The object that provides notification information.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t</table>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example illustrates the observer design pattern. It defines a <code>Location</code> class that contains latitude and longitude information.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IObserver.Class#5\">Public Structure Location\n   Dim lat, lon As Double\n\n   Public Sub New(ByVal latitude As Double, ByVal longitude As Double)\n      Me.lat = latitude\n      Me.lon = longitude\n   End Sub\n\n   Public ReadOnly Property Latitude As Double\n      Get\n         Return Me.lat\n      End Get\n   End Property\n\n   Public ReadOnly Property Longitude As Double\n      Get\n         Return Me.lon\n      End Get\n   End Property\nEnd Structure\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IObserver.Class#5\">public struct Location\n{\n   double lat, lon;\n\n   public Location(double latitude, double longitude)\n   {\n      this.lat = latitude;\n      this.lon = longitude;\n   }\n\n   public double Latitude\n   { get { return this.lat; } }\n\n   public double Longitude\n   { get { return this.lon; } }\n}\n</code></pre><p> The <code>LocationTracker</code> class provides the IObservable(T) implementation. Its <code>TrackLocation</code> method is passed a nullable <code>Location</code> object that contains the latitude and longitude data. If the <code>Location</code> value is not <code>null</code>, the <code>TrackLocation</code> method calls the <a class=\"xref\" href=\"system.iobserver-1#System_IObserver_1_OnNext_\" data-linktype=\"relative-path\">OnNext</a> method of each observer.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IObserver.Class#6\">Public Class LocationTracker : Implements IObservable(Of Location)\n\n   Public Sub New()\n      observers = New List(Of IObserver(Of Location))\n   End Sub\n\n   Private observers As List(Of IObserver(Of Location))\n\n   Public Function Subscribe(ByVal observer As System.IObserver(Of Location)) As System.IDisposable _\n                            Implements System.IObservable(Of Location).Subscribe\n      If Not observers.Contains(observer) Then\n         observers.Add(observer)\n      End If\n      Return New Unsubscriber(observers, observer)\n   End Function\n\n   Private Class Unsubscriber : Implements IDisposable\n      Private _observers As List(Of IObserver(Of Location))\n      Private _observer As IObserver(Of Location)\n\n      Public Sub New(ByVal observers As List(Of IObserver(Of Location)), ByVal observer As IObserver(Of Location))\n         Me._observers = observers\n         Me._observer = observer\n      End Sub\n\n      Public Sub Dispose() Implements IDisposable.Dispose\n         If _observer IsNot Nothing AndAlso _observers.Contains(_observer) Then\n            _observers.Remove(_observer)\n         End If\n      End Sub\n   End Class\n\n   Public Sub TrackLocation(ByVal loc As Nullable(Of Location))\n      For Each observer In observers\n         If Not loc.HasValue Then\n            observer.OnError(New LocationUnknownException())\n         Else\n            observer.OnNext(loc.Value)\n         End If\n      Next\n   End Sub\n\n   Public Sub EndTransmission()\n      For Each observer In observers.ToArray()\n         If observers.Contains(observer) Then observer.OnCompleted()\n      Next\n      observers.Clear()\n   End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IObserver.Class#6\">public class LocationTracker : IObservable&lt;Location&gt;\n{\n   public LocationTracker()\n   {\n      observers = new List&lt;IObserver&lt;Location&gt;&gt;();\n   }\n\n   private List&lt;IObserver&lt;Location&gt;&gt; observers;\n\n   public IDisposable Subscribe(IObserver&lt;Location&gt; observer) \n   {\n      if (! observers.Contains(observer)) \n         observers.Add(observer);\n      return new Unsubscriber(observers, observer);\n   }\n\n   private class Unsubscriber : IDisposable\n   {\n      private List&lt;IObserver&lt;Location&gt;&gt;_observers;\n      private IObserver&lt;Location&gt; _observer;\n\n      public Unsubscriber(List&lt;IObserver&lt;Location&gt;&gt; observers, IObserver&lt;Location&gt; observer)\n      {\n         this._observers = observers;\n         this._observer = observer;\n      }\n\n      public void Dispose()\n      {\n         if (_observer != null &amp;&amp; _observers.Contains(_observer))\n            _observers.Remove(_observer);\n      }\n   }\n\n   public void TrackLocation(Nullable&lt;Location&gt; loc)\n   {\n      foreach (var observer in observers) {\n         if (! loc.HasValue)\n            observer.OnError(new LocationUnknownException());\n         else\n            observer.OnNext(loc.Value);\n      }\n   }\n\n   public void EndTransmission()\n   {\n      foreach (var observer in observers.ToArray())\n         if (observers.Contains(observer))\n            observer.OnCompleted();\n\n      observers.Clear();\n   }\n}\n</code></pre><p> If the <code>Location</code> value is <code>null</code>, the <code>TrackLocation</code> method instantiates a <code>LocationUnknownException</code> object, which is shown in the following example. It then calls each observer&#39;s <a class=\"xref\" href=\"system.iobserver-1#System_IObserver_1_OnError_\" data-linktype=\"relative-path\">OnError</a> method and passes it the <code>LocationUnknownException</code> object. Note that <code>LocationUnknownException</code> derives from <a class=\"xref\" href=\"system.exception\" data-linktype=\"relative-path\">Exception</a>, but does not add any new members.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IObserver.Class#7\">Public Class LocationUnknownException : Inherits Exception\n   Friend Sub New()\n   End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IObserver.Class#7\">public class LocationUnknownException : Exception\n{\n   internal LocationUnknownException() \n   { }\n}\n</code></pre><p> Observers register to receive notifications from a <code>TrackLocation</code> object by calling its <a class=\"xref\" href=\"system.iobservable-1#System_IObservable_1_Subscribe_\" data-linktype=\"relative-path\">Subscribe</a> method, which assigns a reference to the observer object to a private generic <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> object. The method returns an <code>Unsubscriber</code> object, which is an <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> implementation that enables observers to stop receiving notifications. The <code>LocationTracker</code> class also includes an <code>EndTransmission</code> method. When no further location data is available, the method calls each observer&#39;s <a class=\"xref\" href=\"system.iobserver-1#System_IObserver_1_OnCompleted_\" data-linktype=\"relative-path\">OnCompleted</a> method and then clears the internal list of observers.  </p>\n<p> In this example, the <code>LocationReporter</code> class provides the <a class=\"xref\" href=\"system.iobserver-1\" data-linktype=\"relative-path\">IObserver&lt;T&gt;</a> implementation. It displays information about the current location to the console. Its constructor includes a <code>name</code> parameter, which enables the <code>LocationReporter</code> instance to identify itself in its string output. It also includes a <code>Subscribe</code> method, which wraps a call to the provider&#39;s <a class=\"xref\" href=\"system.iobservable-1#System_IObservable_1_Subscribe_\" data-linktype=\"relative-path\">Subscribe</a> method. This allows the method to assign the returned <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> reference to a private variable. The <code>LocationReporter</code> class also includes an <code>Unsubscribe</code> method, which calls the <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method of the object that is returned by the <a class=\"xref\" href=\"system.iobservable-1#System_IObservable_1_Subscribe_\" data-linktype=\"relative-path\">Subscribe</a> method. The following code defines the <code>LocationReporter</code> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.IObserver.Class#8\">using System;\n\npublic class LocationReporter : IObserver&lt;Location&gt;\n{\n   private IDisposable unsubscriber;\n   private string instName;\n\n   public LocationReporter(string name)\n   {\n      this.instName = name;\n   }\n\n   public string Name\n   {  get{ return this.instName; } }\n\n   public virtual void Subscribe(IObservable&lt;Location&gt; provider)\n   {\n      if (provider != null) \n         unsubscriber = provider.Subscribe(this);\n   }\n\n   public virtual void OnCompleted()\n   {\n      Console.WriteLine(&quot;The Location Tracker has completed transmitting data to {0}.&quot;, this.Name);\n      this.Unsubscribe();\n   }\n\n   public virtual void OnError(Exception e)\n   {\n      Console.WriteLine(&quot;{0}: The location cannot be determined.&quot;, this.Name);\n   }\n\n   public virtual void OnNext(Location value)\n   {\n      Console.WriteLine(&quot;{2}: The current location is {0}, {1}&quot;, value.Latitude, value.Longitude, this.Name);\n   }\n\n   public virtual void Unsubscribe()\n   {\n      unsubscriber.Dispose();\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.IObserver.Class#8\">Public Class LocationReporter : Implements IObserver(Of Location)\n   Dim unsubscriber As IDisposable\n   Dim instName As String\n\n   Public Sub New(ByVal name As String)\n      Me.instName = name\n   End Sub\n\n   Public ReadOnly Property Name As String\n      Get\n         Return instName\n      End Get\n   End Property\n\n   Public Overridable Sub Subscribe(ByVal provider As IObservable(Of Location))\n      If provider Is Nothing Then Exit Sub\n      unsubscriber = provider.Subscribe(Me)\n   End Sub\n\n   Public Overridable Sub OnCompleted() Implements System.IObserver(Of Location).OnCompleted\n      Console.WriteLine(&quot;The Location Tracker has completed transmitting data to {0}.&quot;, Me.Name)\n      Me.Unsubscribe()\n   End Sub\n\n   Public Overridable Sub OnError(ByVal e As System.Exception) Implements System.IObserver(Of Location).OnError\n      Console.WriteLine(&quot;{0}: The location cannot be determined.&quot;, Me.Name)\n   End Sub\n\n   Public Overridable Sub OnNext(ByVal value As Location) Implements System.IObserver(Of Location).OnNext\n      Console.WriteLine(&quot;{2}: The current location is {0}, {1}&quot;, value.Latitude, value.Longitude, Me.Name)\n   End Sub\n\n   Public Overridable Sub Unsubscribe()\n      unsubscriber.Dispose()\n   End Sub\nEnd Class\n</code></pre><p> The following code then instantiates the provider and the observer.  </p>\n<pre><code class=\"lang-vb\" name=\"System.IObserver.Class#9\">Module Module1\n   Dim provider As LocationTracker\n\n   Sub Main()\n      &#39; Define a provider and two observers.\n      provider = New LocationTracker()\n      Dim reporter1 As New LocationReporter(&quot;FixedGPS&quot;)\n      reporter1.Subscribe(provider)\n      Dim reporter2 As New LocationReporter(&quot;MobileGPS&quot;)\n      reporter2.Subscribe(provider)\n\n      provider.TrackLocation(New Location(47.6456, -122.1312))\n      reporter1.Unsubscribe()\n      provider.TrackLocation(New Location(47.6677, -122.1199))\n      provider.TrackLocation(Nothing)\n      provider.EndTransmission()\n   End Sub\nEnd Module\n&#39; The example displays output similar to the following:\n&#39;       FixedGPS: The current location is 47.6456, -122.1312\n&#39;       MobileGPS: The current location is 47.6456, -122.1312\n&#39;       MobileGPS: The current location is 47.6677, -122.1199\n&#39;       MobileGPS: The location cannot be determined.\n&#39;       The Location Tracker has completed transmitting data to MobileGPS.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.IObserver.Class#9\">using System;\n\nclass Program\n{\n   static void Main(string[] args)\n   {\n      // Define a provider and two observers.\n      LocationTracker provider = new LocationTracker();\n      LocationReporter reporter1 = new LocationReporter(&quot;FixedGPS&quot;);\n      reporter1.Subscribe(provider);\n      LocationReporter reporter2 = new LocationReporter(&quot;MobileGPS&quot;);\n      reporter2.Subscribe(provider);\n\n      provider.TrackLocation(new Location(47.6456, -122.1312));\n      reporter1.Unsubscribe();\n      provider.TrackLocation(new Location(47.6677, -122.1199));\n      provider.TrackLocation(null);\n      provider.EndTransmission();\n   }\n}\n// The example displays output similar to the following:\n//      FixedGPS: The current location is 47.6456, -122.1312\n//      MobileGPS: The current location is 47.6456, -122.1312\n//      MobileGPS: The current location is 47.6677, -122.1199\n//      MobileGPS: The location cannot be determined.\n//      The Location Tracker has completed transmitting data to MobileGPS.\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The <a class=\"xref\" href=\"system.iobserver-1\" data-linktype=\"relative-path\">IObserver&lt;T&gt;</a> and IObservable(T) interfaces provide a generalized mechanism for push-based notification, also known as the observer design pattern. The IObservable(T) interface represents the class that sends notifications (the provider); the <a class=\"xref\" href=\"system.iobserver-1\" data-linktype=\"relative-path\">IObserver&lt;T&gt;</a> interface represents the class that receives them (the observer). <code>T</code> represents the class that provides the notification information. In some push-based notifications, the <a class=\"xref\" href=\"system.iobserver-1\" data-linktype=\"relative-path\">IObserver&lt;T&gt;</a> implementation and <code>T</code> can represent the same type.  </p>\n<p> The provider must implement a single method, <a class=\"xref\" href=\"system.iobservable-1#System_IObservable_1_Subscribe_\" data-linktype=\"relative-path\">Subscribe</a>, that indicates that an observer wants to receive push-based notifications. Callers to the method pass an instance of the observer. The method returns an <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> implementation that enables observers to cancel notifications at any time before the provider has stopped sending them.  </p>\n<p> At any given time, a given provider may have zero, one, or multiple observers. The provider is responsible for storing references to observers and ensuring that they are valid before it sends notifications. The IObservable(T) interface does not make any assumptions about the number of observers or the order in which notifications are sent.  </p>\n<p> The provider sends the following three kinds of notifications to the observer by calling <a class=\"xref\" href=\"system.iobserver-1\" data-linktype=\"relative-path\">IObserver&lt;T&gt;</a> methods:  </p>\n<ul>\n<li><p>The current data. The provider can call the <a class=\"xref\" href=\"system.iobserver-1#System_IObserver_1_OnNext_\" data-linktype=\"relative-path\">OnNext</a> method to pass the observer a <code>T</code> object that has current data, changed data, or fresh data.  </p>\n</li>\n<li><p>An error condition. The provider can call the <a class=\"xref\" href=\"system.iobserver-1#System_IObserver_1_OnError_\" data-linktype=\"relative-path\">OnError</a> method to notify the observer that some error condition has occurred.  </p>\n</li>\n<li><p>No further data. The provider can call the <a class=\"xref\" href=\"system.iobserver-1#System_IObserver_1_OnCompleted_\" data-linktype=\"relative-path\">OnCompleted</a> method to notify the observer that it has finished sending notifications.</p>\n</li>\n</ul>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_IObservable_1_Subscribe_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_IObservable_1_Subscribe_System_IObserver__0__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Subscribe(IObserver&lt;T&gt;)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Notifies the provider that an observer is to receive notifications.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public IDisposable Subscribe (IObserver&lt;out T&gt; observer);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>observer</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iobserver-1\" data-linktype=\"relative-path\">IObserver&lt;T&gt;</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object that is to receive notifications.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A reference to an interface that allows observers to stop receiving notifications before the provider has finished sending them.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Subscribe method must be called to register an observer for push-based notifications. A typical implementation of the Subscribe method does the following:  </p>\n<ul>\n<li><p>It stores a reference to the observer in a collection object, such as a <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> object.  </p>\n</li>\n<li><p>It returns a reference to an <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface. This enables observers to unsubscribe (that is, to stop receiving notifications) before the provider has finished sending them and called the subscriber&#39;s <a class=\"xref\" href=\"system.iobserver-1#System_IObserver_1_OnCompleted_\" data-linktype=\"relative-path\">OnCompleted</a> method.  </p>\n</li>\n</ul>\n<p> At any given time, a particular instance of an <a class=\"xref\" href=\"system.iobservable-1\" data-linktype=\"relative-path\">IObservable&lt;T&gt;</a> implementation is responsible for handling all subscriptions and notifying all subscribers. Unless the documentation for a particular <a class=\"xref\" href=\"system.iobservable-1\" data-linktype=\"relative-path\">IObservable&lt;T&gt;</a> implementation indicates otherwise, observers should make no assumptions about the <a class=\"xref\" href=\"system.iobservable-1\" data-linktype=\"relative-path\">IObservable&lt;T&gt;</a> implementation, such as the order of notifications that multiple observers will receive.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.IObservable-1.yml\">\r\n<meta name=\"APIName\" content=\"System.IObservable&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.IObservable&lt;T&gt;.Subscribe\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 05:47 AM\">\r\n<meta name=\"document_id\" content=\"13c2e064-7719-76c6-1094-1a17e46d972a\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines a provider for push-based notification.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.IObservable`1\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.IObservable-1.yml","open_to_public_contributors":false,"api_name":["System.IObservable<T>","System.IObservable<T>.Subscribe"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.IObservable`1","System::IObservable`1","System.IObservable`1.Subscribe","System::IObservable`1::Subscribe"],"dev_langs":["csharp"],"updated_at":"2017-03-31 05:47 AM","document_id":"13c2e064-7719-76c6-1094-1a17e46d972a","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System/IObservable`1.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IObservable<T> interface | Microsoft Docs","_op_ogTitle":"IObservable<T> interface","description":"Defines a provider for push-based notification.\n","toc_asset_id":"api/_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.IObservable`1","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.iobservable-1","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.iobservable-1","fileRelativePath":"api/System.IObservable-1.html"},"themesRelativePathToOutputRoot":"_themes/"}