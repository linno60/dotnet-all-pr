{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">Action</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Encapsulates a method that has no parameters and does not return a value.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.CompilerServices.TypeForwardedFrom(&quot;System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089&quot;)]\npublic delegate void Action();</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">System.Delegate</a></span></div><span class=\"lang-csharp\">Action</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>You can use this delegate to pass a method as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have no parameters and no return value. (In C#, the method must return <code>void</code>. In Visual Basic, it must be defined by the <code>Sub</code>â€¦<code>End Sub</code> construct. It can also be a method that returns a value that is ignored.) Typically, such a method is used to perform an operation.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To reference a method that has no parameters and returns a value, use the generic <a class=\"xref\" href=\"system.func-1\" data-linktype=\"relative-path\">Func&lt;TResult&gt;</a> delegate instead.  </p>\n</div>\n<p> When you use the Action delegate, you do not have to explicitly define a delegate that encapsulates a parameterless procedure. For example, the following code explicitly declares a delegate named <code>ShowValue</code> and assigns a reference to the <code>Name.DisplayToWindow</code> instance method to its delegate instance.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Action.Delegate#1\">using namespace System;\nusing namespace System::Windows::Forms;\n\npublic delegate void ShowValue();\n\n\npublic ref class Name\n{\nprivate:\n   String^ instanceName;\n\npublic:\n   Name(String^ name) \n   {\n      instanceName = name;\n   }\n\n   void DisplayToConsole()\n   {\n      Console::WriteLine(this-&gt;instanceName);\n   }\n\n   void DisplayToWindow()\n   {\n      MessageBox::Show(this-&gt;instanceName);\n   }\n};\n\nint main()\n{\n   Name^ testName = gcnew Name(L&quot;Koani&quot;);\n   ShowValue^ showMethod;\n   showMethod = gcnew ShowValue(testName, &amp;Name::DisplayToWindow);\n   showMethod();\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Action.Delegate#1\">Public Delegate Sub ShowValue\n\nPublic Class Name\n   Private instanceName As String\n   \n   Public Sub New(name As String)\n      Me.instanceName = name\n   End Sub\n   \n   Public Sub DisplayToConsole()\n      Console.WriteLine(Me.instanceName)\n   End Sub   \n   \n   Public Sub DisplayToWindow()\n      MsgBox(Me.instanceName)\n   End Sub   \nEnd Class\n\nPublic Module testDelegate\n   Public Sub Main()\n      Dim testName As New Name(&quot;Koani&quot;)\n      Dim showMethod As ShowValue = AddressOf testName.DisplayToWindow\n      showMethod   \n   End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Action.Delegate#1\">using System;\nusing System.Windows.Forms;\n\npublic delegate void ShowValue();\n\npublic class Name\n{\n   private string instanceName;\n   \n   public Name(string name)\n   {\n      this.instanceName = name;\n   }\n\n   public void DisplayToConsole()\n   {\n      Console.WriteLine(this.instanceName);\n   }\n\n   public void DisplayToWindow()\n   {\n      MessageBox.Show(this.instanceName);\n   }\n}\n\npublic class testTestDelegate\n{\n   public static void Main()\n   {\n      Name testName = new Name(&quot;Koani&quot;);\n      ShowValue showMethod = testName.DisplayToWindow;\n      showMethod();\n   }\n}\n</code></pre><p> The following example simplifies this code by instantiating the Action delegate instead of explicitly defining a new delegate and assigning a named method to it.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Action#2\">#using &lt;System.Windows.Forms.dll&gt;\n\nusing namespace System;\nusing namespace System::Windows::Forms;\n\npublic ref class Name\n{\nprivate:\n   String^ instanceName;\n   \npublic:\n   Name(String^ name)\n   {\n      instanceName = name;\n   }\n\n   void DisplayToConsole()\n   {\n      Console::WriteLine(this-&gt;instanceName);\n   }\n\n   void DisplayToWindow()\n   {\n      MessageBox::Show(this-&gt;instanceName);\n   }\n};\n\n\nint main()\n{\n   Name^ testName = gcnew Name(L&quot;Koani&quot;);\n   System::Action^ showMethod;\n   showMethod += gcnew Action(testName, &amp;Name::DisplayToWindow);\n   showMethod();\n   return 0;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Action#2\">using System;\nusing System.Windows.Forms;\n\npublic class Name\n{\n   private string instanceName;\n   \n   public Name(string name)\n   {\n      this.instanceName = name;\n   }\n\n   public void DisplayToConsole()\n   {\n      Console.WriteLine(this.instanceName);\n   }\n\n   public void DisplayToWindow()\n   {\n      MessageBox.Show(this.instanceName);\n   }\n}\n\npublic class testTestDelegate\n{\n   public static void Main()\n   {\n      Name testName = new Name(&quot;Koani&quot;);\n      Action showMethod = testName.DisplayToWindow;\n      showMethod();\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Action#2\">Public Class Name\n   Private instanceName As String\n   \n   Public Sub New(name As String)\n      Me.instanceName = name\n   End Sub\n   \n   Public Sub DisplayToConsole()\n      Console.WriteLine(Me.instanceName)\n   End Sub   \n   \n   Public Sub DisplayToWindow()\n      MsgBox(Me.instanceName)\n   End Sub   \nEnd Class\n\nPublic Module testDelegate\n   Public Sub Main()\n      Dim testName As New Name(&quot;Koani&quot;)\n      Dim showMethod As Action = AddressOf testName.DisplayToWindow\n      showMethod   \n   End Sub\nEnd Module\n</code></pre><p> You can also use the Action delegate with anonymous methods in C#, as the following example illustrates. (For an introduction to anonymous methods, see <a href=\"../topic/anonymous%20methods%20(c%23%20programming%20guide)\" data-linktype=\"relative-path\">Anonymous Methods</a>.)  </p>\n<pre><code class=\"lang-cs\" name=\"System.Action#3\">using System;\nusing System.Windows.Forms;\n\npublic class Name\n{\n   private string instanceName;\n   \n   public Name(string name)\n   {\n      this.instanceName = name;\n   }\n\n   public void DisplayToConsole()\n   {\n      Console.WriteLine(this.instanceName);\n   }\n\n   public void DisplayToWindow()\n   {\n      MessageBox.Show(this.instanceName);\n   }\n}\n\npublic class Anonymous\n{\n   public static void Main()\n   {\n      Name testName = new Name(&quot;Koani&quot;);\n      Action showMethod = delegate() { testName.DisplayToWindow();} ;\n      showMethod();\n   }\n}\n</code></pre><p> You can also assign a lambda expression to an Action delegate instance, as the following example illustrates. (For an introduction to lambda expressions, see <a href=\"../topic/lambda%20expressions%20(c%23%20programming%20guide)\" data-linktype=\"relative-path\">Lambda Expressions</a>.)  </p>\n<pre><code class=\"lang-cs\" name=\"System.Action#4\">using System;\nusing System.Windows.Forms;\n\npublic class Name\n{\n   private string instanceName;\n   \n   public Name(string name)\n   {\n      this.instanceName = name;\n   }\n\n   public void DisplayToConsole()\n   {\n      Console.WriteLine(this.instanceName);\n   }\n\n   public void DisplayToWindow()\n   {\n      MessageBox.Show(this.instanceName);\n   }\n}\n\npublic class LambdaExpression\n{\n   public static void Main()\n   {\n      Name testName = new Name(&quot;Koani&quot;);\n      Action showMethod = () =&gt; testName.DisplayToWindow();\n      showMethod();\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Action#4\">Public Class Name\n   Private instanceName As String\n   \n   Public Sub New(name As String)\n      Me.instanceName = name\n   End Sub\n   \n   Public Function DisplayToConsole() As Integer\n      Console.WriteLine(Me.instanceName)\n      Return 0\n   End Function\n   \n   Public Function DisplayToWindow() As Integer\n      Return MsgBox(Me.instanceName)\n   End Function      \nEnd Class\n\nModule LambdaExpression\n   Public Sub Main()\n      Dim name1 As New Name(&quot;Koani&quot;)\n      Dim methodCall As Action = Sub() name1.DisplayToWindow()\n      methodCall()\n   End Sub\nEnd Module\n</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Action.yml\">\r\n<meta name=\"APIName\" content=\"System.Action\">\r\n<meta name=\"APIName\" content=\"System.Action..ctor\">\r\n<meta name=\"APIName\" content=\"System.Action.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Action.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Action.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-24 01:41 AM\">\r\n<meta name=\"document_id\" content=\"a7762115-effb-e5ac-ff01-29e9a5ed987b\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Encapsulates a method that has no parameters and does not return a value.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Action\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Action.yml","open_to_public_contributors":false,"api_name":["System.Action","System.Action..ctor","System.Action.Invoke","System.Action.BeginInvoke","System.Action.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Action","System::Action"],"dev_langs":["csharp"],"updated_at":"2017-03-24 01:41 AM","document_id":"a7762115-effb-e5ac-ff01-29e9a5ed987b","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System/Action.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Action delegate | Microsoft Docs","_op_ogTitle":"Action delegate","description":"Encapsulates a method that has no parameters and does not return a value.\n","toc_asset_id":"api/_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Action","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.action","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.action","fileRelativePath":"api/System.Action.html"},"themesRelativePathToOutputRoot":"_themes/"}