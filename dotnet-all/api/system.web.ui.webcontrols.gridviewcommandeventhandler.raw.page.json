{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">GridViewCommandEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that handles the <a class=\"xref\" href=\"system.web.ui.webcontrols.gridview#System_Web_UI_WebControls_GridView_RowCommand\" data-linktype=\"relative-path\">RowCommand</a> event of a <a class=\"xref\" href=\"system.web.ui.webcontrols.gridview\" data-linktype=\"relative-path\">GridView</a> control.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void GridViewCommandEventHandler(object sender, GridViewCommandEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">GridViewCommandEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example demonstrates how to programmatically add a GridViewCommandEventHandler delegate to the <a class=\"xref\" href=\"system.web.ui.webcontrols.gridview#System_Web_UI_WebControls_GridView_RowCommand\" data-linktype=\"relative-path\">RowCommand</a> event of a <a class=\"xref\" href=\"system.web.ui.webcontrols.gridview\" data-linktype=\"relative-path\">GridView</a> control.  </p>\n<pre><code class=\"lang-cs\" name=\"GridViewCommandEventHandler#1\">\n&lt;%@ Page language=&quot;C#&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  void Page_Load(Object sender, EventArgs e)\n  {\n\n    // Create a new GridView object.\n    GridView customersGridView = new GridView();\n\n    // Set the GridView object&#39;s properties.\n    customersGridView.ID = &quot;CustomersGridView&quot;;\n    customersGridView.DataSourceID = &quot;CustomersSource&quot;;\n    customersGridView.AutoGenerateColumns = false;\n\n    // Dynamically create the columns for the GridView control.\n    ButtonField addColumn = new ButtonField();\n    addColumn.CommandName = &quot;Add&quot;;\n    addColumn.Text = &quot;Add&quot;;\n    addColumn.ButtonType = ButtonType.Link;\n\n    BoundField companyNameColumn = new BoundField();\n    companyNameColumn.DataField = &quot;CompanyName&quot;;\n    companyNameColumn.HeaderText = &quot;Company Name&quot;;\n\n    BoundField cityColumn = new BoundField();\n    cityColumn.DataField = &quot;City&quot;;\n    cityColumn.HeaderText = &quot;City&quot;;\n\n    // Add the columns to the Columns collection\n    // of the GridView control.\n    customersGridView.Columns.Add(addColumn);\n    customersGridView.Columns.Add(companyNameColumn);\n    customersGridView.Columns.Add(cityColumn);\n\n    // Programmatically register the event handling methods.\n    customersGridView.RowCommand += new GridViewCommandEventHandler(this.CustomersGridView_RowCommand);\n    customersGridView.RowCreated += new GridViewRowEventHandler(this.CustomersGridView_RowCreated);\n\n    // Add the GridView object to the Controls collection\n    // of the PlaceHolder control.\n    GridViewPlaceHolder.Controls.Add(customersGridView);\n\n  }\n\n  void CustomersGridView_RowCommand(Object sender, GridViewCommandEventArgs e)\n  {\n    // If multiple ButtonField columns are used, use the\n    // CommandName property to determine which button was clicked.\n    if(e.CommandName==&quot;Add&quot;)\n    {\n      // Convert the row index stored in the CommandArgument\n      // property to an Integer.\n      int index = Convert.ToInt32(e.CommandArgument);\n\n      // Retrieve the row that contains the button clicked\n      // by the user from the Rows collection. Use the\n      // CommandSource property to access the GridView control.\n      GridView customersGridView = (GridView)e.CommandSource;\n      GridViewRow row = customersGridView.Rows[index];\n\n      // Create a new ListItem object for the customer in the row.\n      ListItem item = new ListItem();\n      item.Text = Server.HtmlDecode(row.Cells[1].Text) + &quot; &quot; + Server.HtmlDecode(row.Cells[2].Text);\n\n      // If the author is not already in the ListBox, add the ListItem\n      // object to the Items collection of a ListBox control.\n      if(!CustomersListBox.Items.Contains(item))\n      {\n        CustomersListBox.Items.Add(item);\n      }\n    }\n  }\n\n  void CustomersGridView_RowCreated(Object sender, GridViewRowEventArgs e)\n  {\n\n    // The GridViewCommandEventArgs class does not contain a\n    // property that indicates which row&#39;s command button was\n    // clicked. To identify which row was clicked, use the button&#39;s\n    // CommandArgument property by setting it to the row&#39;s index.\n    if(e.Row.RowType == DataControlRowType.DataRow)\n    {\n      // Retrieve the LinkButton control from the first column.\n      LinkButton addButton = (LinkButton)e.Row.Cells[0].Controls[0];\n\n      // Set the LinkButton&#39;s CommandArgument property with the\n      // row&#39;s index.\n      addButton.CommandArgument = e.Row.RowIndex.ToString();\n    }\n\n  }\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;GridViewCommandEventHandler Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;GridViewCommandEventHandler Example&lt;/h3&gt;\n\n      &lt;table width=&quot;100%&quot;&gt;\n        &lt;tr&gt;\n          &lt;td style=&quot;width:50%&quot;&gt;\n            &lt;asp:placeholder id=&quot;GridViewPlaceHolder&quot;\n              runat=&quot;Server&quot;/&gt;\n          &lt;/td&gt;\n\n          &lt;td style=&quot;vertical-align:top; width:50%&quot;&gt;\n             Customers: &lt;br/&gt;\n             &lt;asp:listbox id=&quot;CustomersListBox&quot;\n               runat=&quot;server&quot;/&gt;\n          &lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/table&gt;\n\n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the Web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;CustomersSource&quot;\n        selectcommand=&quot;Select [CustomerID], [CompanyName], [City] From [Customers]&quot;\n        connectionstring=&quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n\n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"GridViewCommandEventHandler#1\">\n&lt;%@ Page language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)\n\n    &#39; Create a new GridView object.\n    Dim customersGridView As New GridView()\n\n    &#39; Set the GridView object&#39;s properties.\n    customersGridView.ID = &quot;CustomersGridView&quot;\n    customersGridView.DataSourceID = &quot;CustomersSource&quot;\n    customersGridView.AutoGenerateColumns = False\n\n    &#39; Dynamically create the columns for the GridView control.\n    Dim addColumn As New ButtonField()\n    addColumn.CommandName = &quot;Add&quot;\n    addColumn.Text = &quot;Add&quot;\n    addColumn.ButtonType = ButtonType.Link\n\n    Dim companyNameColumn As New BoundField()\n    companyNameColumn.DataField = &quot;CompanyName&quot;\n    companyNameColumn.HeaderText = &quot;Company Name&quot;\n\n    Dim cityColumn As New BoundField()\n    cityColumn.DataField = &quot;City&quot;\n    cityColumn.HeaderText = &quot;City&quot;\n\n    &#39; Add the columns to the Columns collection\n    &#39; of the GridView control.\n    customersGridView.Columns.Add(addColumn)\n    customersGridView.Columns.Add(companyNameColumn)\n    customersGridView.Columns.Add(cityColumn)\n\n    &#39; Programmatically register the event handling methods.\n    AddHandler customersGridView.RowCommand, AddressOf CustomersGridView_RowCommand\n    AddHandler customersGridView.RowCreated, AddressOf CustomersGridView_RowCreated\n\n    &#39; Add the GridView object to the Controls collection\n    &#39; of the PlaceHolder control.\n    GridViewPlaceHolder.Controls.Add(customersGridView)\n\n  End Sub\n\n  Sub CustomersGridView_RowCommand(ByVal sender As Object, ByVal e As GridViewCommandEventArgs)\n  \n    &#39; If multiple ButtonField columns are used, use the\n    &#39; CommandName property to determine which button was clicked.\n    If e.CommandName = &quot;Add&quot; Then\n    \n      &#39; Convert the row index stored in the CommandArgument\n      &#39; property to an Integer.\n      Dim index As Integer = Convert.ToInt32(e.CommandArgument)\n\n      &#39; Retrieve the row that contains the button clicked\n      &#39; by the user from the Rows collection. Use the\n      &#39; CommandSource property to access the GridView control.\n      Dim customersGridView As GridView = CType(e.CommandSource, GridView)\n      Dim row As GridViewRow = customersGridView.Rows(index)\n\n      &#39; Create a new ListItem object for the customer in the row.\n      Dim item As New ListItem()\n      item.Text = Server.HtmlDecode(row.Cells(1).Text) + &quot; &quot; + Server.HtmlDecode(row.Cells(2).Text)\n\n      &#39; If the author is not already in the ListBox, add the ListItem\n      &#39; object to the Items collection of a ListBox control.\n      If Not CustomersListBox.Items.Contains(item) Then\n      \n        CustomersListBox.Items.Add(item)\n        \n      End If\n    End If\n        \n  End Sub\n\n  Sub CustomersGridView_RowCreated(ByVal sender As Object, ByVal e As GridViewRowEventArgs)\n\n    &#39; The GridViewCommandEventArgs class does not contain a\n    &#39; property that indicates which row&#39;s command button was\n    &#39; clicked. To identify which row was clicked, use the button&#39;s\n    &#39; CommandArgument property by setting it to the row&#39;s index.\n    If e.Row.RowType = DataControlRowType.DataRow Then\n\n      &#39; Retrieve the LinkButton control from the first column.\n      Dim addButton As LinkButton = CType(e.Row.Cells(0).Controls(0), LinkButton)\n\n      &#39; Set the LinkButton&#39;s CommandArgument property with the\n      &#39; row&#39;s index.\n      addButton.CommandArgument = e.Row.RowIndex.ToString()\n      \n    End If\n\n  End Sub\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;GridViewCommandEventHandler Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;GridViewCommandEventHandler Example&lt;/h3&gt;\n\n      &lt;table width=&quot;100%&quot;&gt;\n        &lt;tr&gt;\n          &lt;td style=&quot;width:50%&quot;&gt;\n            &lt;asp:placeholder id=&quot;GridViewPlaceHolder&quot;\n              runat=&quot;Server&quot;/&gt;\n          &lt;/td&gt;\n\n          &lt;td style=&quot;vertical-align:top; width:50%&quot;&gt;\n             Customers: &lt;br/&gt;\n             &lt;asp:listbox id=&quot;CustomersListBox&quot;\n               runat=&quot;server&quot;/&gt;\n          &lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/table&gt;\n\n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the Web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;CustomersSource&quot;\n        selectcommand=&quot;Select [CustomerID], [CompanyName], [City] From [Customers]&quot;\n        connectionstring=&quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n\n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p> The following example demonstrates how to declaratively add a GridViewCommandEventHandler delegate to the <a class=\"xref\" href=\"system.web.ui.webcontrols.gridview#System_Web_UI_WebControls_GridView_RowCommand\" data-linktype=\"relative-path\">RowCommand</a> event of a <a class=\"xref\" href=\"system.web.ui.webcontrols.gridview\" data-linktype=\"relative-path\">GridView</a> control.  </p>\n<pre><code class=\"lang-cs\" name=\"GridViewRowCommmand#1\">\n&lt;%@ Page language=&quot;C#&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  void ContactsGridView_RowCommand(Object sender, GridViewCommandEventArgs e)\n  {\n    // If multiple buttons are used in a GridView control, use the\n    // CommandName property to determine which button was clicked.\n    if(e.CommandName==&quot;Add&quot;)\n    {\n      // Convert the row index stored in the CommandArgument\n      // property to an Integer.\n      int index = Convert.ToInt32(e.CommandArgument);\n\n      // Retrieve the row that contains the button clicked \n      // by the user from the Rows collection.\n      GridViewRow row = ContactsGridView.Rows[index];\n\n      // Create a new ListItem object for the contact in the row.     \n      ListItem item = new ListItem();\n      item.Text = Server.HtmlDecode(row.Cells[2].Text) + &quot; &quot; +\n        Server.HtmlDecode(row.Cells[3].Text);\n\n      // If the contact is not already in the ListBox, add the ListItem \n      // object to the Items collection of the ListBox control. \n      if (!ContactsListBox.Items.Contains(item))\n      {\n        ContactsListBox.Items.Add(item);\n      }\n    }\n  }    \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;GridView RowCommand Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;GridView RowCommand Example&lt;/h3&gt;\n\n      &lt;table width=&quot;100%&quot;&gt;\n        &lt;tr&gt;\n          &lt;td style=&quot;width:50%&quot;&gt;\n\n            &lt;asp:gridview id=&quot;ContactsGridView&quot; \n              datasourceid=&quot;ContactsSource&quot;\n              allowpaging=&quot;true&quot; \n              autogeneratecolumns=&quot;false&quot;\n              onrowcommand=&quot;ContactsGridView_RowCommand&quot;\n              runat=&quot;server&quot;&gt;\n\n              &lt;columns&gt;\n                &lt;asp:buttonfield buttontype=&quot;Link&quot; \n                  commandname=&quot;Add&quot; \n                  text=&quot;Add&quot;/&gt;\n                &lt;asp:boundfield datafield=&quot;ContactID&quot; \n                  headertext=&quot;Contact ID&quot;/&gt;\n                &lt;asp:boundfield datafield=&quot;FirstName&quot; \n                  headertext=&quot;First Name&quot;/&gt; \n                &lt;asp:boundfield datafield=&quot;LastName&quot; \n                  headertext=&quot;Last Name&quot;/&gt;\n              &lt;/columns&gt;\n\n            &lt;/asp:gridview&gt;\n\n          &lt;/td&gt;\n\n          &lt;td style=&quot;vertical-align:top; width:50%&quot;&gt;\n\n            Contacts: &lt;br/&gt;\n            &lt;asp:listbox id=&quot;ContactsListBox&quot;\n              runat=&quot;server&quot; Height=&quot;200px&quot; Width=&quot;200px&quot;/&gt;\n\n          &lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/table&gt;\n\n      &lt;!-- This example uses Microsoft SQL Server and connects    --&gt;\n      &lt;!-- to the AdventureWorks sample database. Use an ASP.NET  --&gt;\n      &lt;!-- expression to retrieve the connection string value     --&gt;\n      &lt;!-- from the Web.config file.                              --&gt;\n      &lt;asp:sqldatasource id=&quot;ContactsSource&quot;\n        selectcommand=&quot;Select [ContactID], [FirstName], [LastName] From Person.Contact&quot;\n        connectionstring=&quot;&lt;%$ ConnectionStrings:AdventureWorks_DataConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n\n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"GridViewRowCommmand#1\">\n&lt;%@ Page language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Sub ContactsGridView_RowCommand(ByVal sender As Object, ByVal e As GridViewCommandEventArgs)\n\n    &#39; If multiple buttons are used in a GridView control, use the\n    &#39; CommandName property to determine which button was clicked.\n    If e.CommandName = &quot;Add&quot; Then\n    \n      &#39; Convert the row index stored in the CommandArgument\n      &#39; property to an Integer.\n      Dim index As Integer = Convert.ToInt32(e.CommandArgument)\n            \n      &#39; Retrieve the row that contains the button clicked \n      &#39; by the user from the Rows collection.\n      Dim row As GridViewRow = ContactsGridView.Rows(index)\n            \n      &#39; Create a new ListItem object for the contact in the row.     \n      Dim item As New ListItem()\n      item.Text = Server.HtmlDecode(row.Cells(2).Text) &amp; &quot; &quot; &amp; _\n        Server.HtmlDecode(row.Cells(3).Text)\n            \n      &#39; If the contact is not already in the ListBox, add the ListItem \n      &#39; object to the Items collection of the ListBox control. \n      If Not ContactsListBox.Items.Contains(item) Then\n      \n        ContactsListBox.Items.Add(item)\n        \n      End If\n      \n    End If\n    \n  End Sub\n    \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head id=&quot;Head1&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;GridView RowCommand Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n      &lt;h3&gt;GridView RowCommand Example&lt;/h3&gt;\n\n      &lt;table width=&quot;100%&quot;&gt;\n        &lt;tr&gt;\n          &lt;td style=&quot;width:50%&quot;&gt;\n\n            &lt;asp:gridview id=&quot;ContactsGridView&quot; \n              datasourceid=&quot;ContactsSource&quot;\n              allowpaging=&quot;true&quot; \n              autogeneratecolumns=&quot;false&quot;\n              onrowcommand=&quot;ContactsGridView_RowCommand&quot;\n              runat=&quot;server&quot;&gt;\n\n              &lt;columns&gt;\n                &lt;asp:buttonfield buttontype=&quot;Link&quot; \n                  commandname=&quot;Add&quot; \n                  text=&quot;Add&quot;/&gt;\n                &lt;asp:boundfield datafield=&quot;ContactID&quot; \n                  headertext=&quot;Contact ID&quot;/&gt;\n                &lt;asp:boundfield datafield=&quot;FirstName&quot; \n                  headertext=&quot;First Name&quot;/&gt; \n                &lt;asp:boundfield datafield=&quot;LastName&quot; \n                  headertext=&quot;Last Name&quot;/&gt;\n              &lt;/columns&gt;\n\n            &lt;/asp:gridview&gt;\n\n          &lt;/td&gt;\n\n          &lt;td style=&quot;vertical-align:top; width:50%&quot;&gt;\n\n            Contacts: &lt;br/&gt;\n            &lt;asp:listbox id=&quot;ContactsListBox&quot;\n              runat=&quot;server&quot; Height=&quot;200px&quot; Width=&quot;200px&quot;/&gt;\n\n          &lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/table&gt;\n\n      &lt;!-- This example uses Microsoft SQL Server and connects    --&gt;\n      &lt;!-- to the AdventureWorks sample database. Use an ASP.NET  --&gt;\n      &lt;!-- expression to retrieve the connection string value     --&gt;\n      &lt;!-- from the Web.config file.                              --&gt;\n      &lt;asp:sqldatasource id=&quot;ContactsSource&quot;\n        selectcommand=&quot;Select [ContactID], [FirstName], [LastName] From Person.Contact&quot;\n        connectionstring=&quot;&lt;%$ ConnectionStrings:AdventureWorks_DataConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n\n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The <a class=\"xref\" href=\"system.web.ui.webcontrols.gridview#System_Web_UI_WebControls_GridView_RowCommand\" data-linktype=\"relative-path\">RowCommand</a> event is raised when a button within the <a class=\"xref\" href=\"system.web.ui.webcontrols.gridview\" data-linktype=\"relative-path\">GridView</a> control is clicked. This allows you to provide an event-handling method that performs a custom routine whenever this event occurs.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.web.ui.webcontrols.gridview\" data-linktype=\"relative-path\">GridView</a> control also raises other specialized events when certain buttons are clicked (buttons with the <code>CommandName</code> property set to &quot;Delete&quot;, &quot;Update&quot;, and &quot;Page&quot; for example). When using one of these buttons, you should consider handling one of the specialized events provided by the control (such as <a class=\"xref\" href=\"system.web.ui.webcontrols.gridview#System_Web_UI_WebControls_GridView_RowDeleted\" data-linktype=\"relative-path\">RowDeleted</a> or <a class=\"xref\" href=\"system.web.ui.webcontrols.gridview#System_Web_UI_WebControls_GridView_RowDeleting\" data-linktype=\"relative-path\">RowDeleting</a>).  </p>\n</div>\n<p> When you create a GridViewCommandEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see <a href=\"http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115\" data-linktype=\"external\">NIB: Events and Delegates</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.GridViewCommandEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.GridViewCommandEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.GridViewCommandEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.GridViewCommandEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.GridViewCommandEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.GridViewCommandEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"9da795b8-90ff-977b-e6e6-689229144fd5\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that handles the  event of a  control.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.web.ui.webcontrols/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.WebControls.GridViewCommandEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.GridViewCommandEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Web.UI.WebControls.GridViewCommandEventHandler","System.Web.UI.WebControls.GridViewCommandEventHandler..ctor","System.Web.UI.WebControls.GridViewCommandEventHandler.Invoke","System.Web.UI.WebControls.GridViewCommandEventHandler.BeginInvoke","System.Web.UI.WebControls.GridViewCommandEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.WebControls.GridViewCommandEventHandler","System::Web::UI::WebControls::GridViewCommandEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"9da795b8-90ff-977b-e6e6-689229144fd5","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Web.UI.WebControls/GridViewCommandEventHandler.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"GridViewCommandEventHandler delegate | Microsoft Docs","_op_ogTitle":"GridViewCommandEventHandler delegate","description":"Represents the method that handles the  event of a  control.\n","toc_asset_id":"api/_splitted/System.Web.UI.WebControls/toc.json","toc_rel":"_splitted/System.Web.UI.WebControls/toc.json","source_url":"","ms.assetid":"System.Web.UI.WebControls.GridViewCommandEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.gridviewcommandeventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.gridviewcommandeventhandler","fileRelativePath":"api/System.Web.UI.WebControls.GridViewCommandEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}