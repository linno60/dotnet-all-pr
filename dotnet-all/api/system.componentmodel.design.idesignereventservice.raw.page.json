{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">IDesignerEventService</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides event notifications when root designers are added and removed, when a selected component changes, and when the current root designer changes.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public interface IDesignerEventService</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>This example demonstrates a designer that uses the IDesignerEventService to display event notifications on a control. To use this example, compile the code to a class library. Add a reference to the library to a new Windows Forms project, and add the control within the library to the <strong>Toolbox</strong>.  Add an instance of the <code>DesignerMonitor</code> control to a form in design mode. Right-click the control and click the <code>Start monitoring</code> command to display notifications of events raised by the IDesignerEventService.  </p>\n<pre><code class=\"lang-cpp\" name=\"IDesignerEventServiceExample#1\">#using &lt;system.dll&gt;\n#using &lt;system.design.dll&gt;\n#using &lt;system.windows.forms.dll&gt;\n#using &lt;system.drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::ComponentModel;\nusing namespace System::ComponentModel::Design;\nusing namespace System::Collections;\nusing namespace System::Drawing;\nusing namespace System::Windows::Forms;\nusing namespace System::Windows::Forms::Design;\n\nnamespace DesignerEventServiceExample\n{\n   ref class DesignerMonitorDesigner;\n\n   // DesignerMonitor provides a display for designer event notifications.\n\n   [Designer(DesignerEventServiceExample::DesignerMonitorDesigner::typeid)]\n   public ref class DesignerMonitor: public UserControl\n   {\n   public:\n\n      // List to contain strings that describe designer events.\n      ArrayList^ updates;\n      bool monitoring_events;\n      DesignerMonitor()\n      {\n         monitoring_events = false;\n         updates = gcnew ArrayList;\n         this-&gt;BackColor = Color::White;\n         this-&gt;Size = System::Drawing::Size( 450, 300 );\n      }\n\n   protected:\n\n      // Display the message for the current mode, and any event messages if event monitoring is active.\n      virtual void OnPaint( PaintEventArgs^ e ) override\n      {\n         e-&gt;Graphics-&gt;DrawString( &quot;IDesignerEventService DesignerMonitor Control&quot;, gcnew System::Drawing::Font( FontFamily::GenericMonospace,10 ), gcnew SolidBrush( Color::Blue ), 5, 4 );\n         int yoffset = 10;\n         if (  !monitoring_events )\n         {\n            yoffset += 10;\n            e-&gt;Graphics-&gt;DrawString( &quot;Currently not monitoring designer events.&quot;, gcnew System::Drawing::Font( FontFamily::GenericMonospace,10 ), gcnew SolidBrush( Color::Black ), 5.f, yoffset + 10.f );\n            e-&gt;Graphics-&gt;DrawString( &quot;Use the shortcut menu commands&quot;, gcnew System::Drawing::Font( FontFamily::GenericMonospace,10 ), gcnew SolidBrush( Color::Black ), 5.f, yoffset + 30.f );\n            e-&gt;Graphics-&gt;DrawString( &quot;provided by an associated DesignerMonitorDesigner&quot;, gcnew System::Drawing::Font( FontFamily::GenericMonospace,10 ), gcnew SolidBrush( Color::Black ), 5.f, yoffset + 40.f );\n            e-&gt;Graphics-&gt;DrawString( &quot;to start or stop monitoring.&quot;, gcnew System::Drawing::Font( FontFamily::GenericMonospace,10 ), gcnew SolidBrush( Color::Black ), 5.f, yoffset + 50.f );\n         }\n         else\n         {\n            e-&gt;Graphics-&gt;DrawString( &quot;Currently monitoring designer events.&quot;, gcnew System::Drawing::Font( FontFamily::GenericMonospace,10 ), gcnew SolidBrush( Color::DarkBlue ), 5.f, yoffset + 10.f );\n            e-&gt;Graphics-&gt;DrawString( &quot;Designer created, changed and disposed events:&quot;, gcnew System::Drawing::Font( FontFamily::GenericMonospace,9 ), gcnew SolidBrush( Color::Brown ), 5.f, yoffset + 35.f );\n            for ( int i = 0; i &lt; updates-&gt;Count; i++ )\n            {\n               e-&gt;Graphics-&gt;DrawString( static_cast&lt;String^&gt;(updates[ i ]), gcnew System::Drawing::Font( FontFamily::GenericMonospace,8 ), gcnew SolidBrush( Color::Black ), 5.f, yoffset + 55.f + (10 * i) );\n               yoffset += 10;\n            }\n         }\n      }\n   };\n\n   // DesignerMonitorDesigner uses the IDesignerEventService to send event information\n   // to an associated DesignerMonitor control&#39;s updates collection.\n   public ref class DesignerMonitorDesigner: public ControlDesigner\n   {\n   private:\n      DesignerMonitor^ dm;\n      DesignerVerbCollection^ dvc;\n      int eventcount;\n      void StopMonitoring( Object^ /*sender*/, EventArgs^ /*e*/ )\n      {\n         IDesignerEventService^ des = dynamic_cast&lt;IDesignerEventService^&gt;(this-&gt;Control-&gt;Site-&gt;GetService( IDesignerEventService::typeid ));\n         if ( des != nullptr )\n         {\n            // Remove event handlers for event notification methods.\n            des-&gt;DesignerCreated -= gcnew DesignerEventHandler( this, &amp;DesignerMonitorDesigner::DesignerCreated );\n            des-&gt;DesignerDisposed -= gcnew DesignerEventHandler( this, &amp;DesignerMonitorDesigner::DesignerDisposed );\n            des-&gt;ActiveDesignerChanged -= gcnew ActiveDesignerEventHandler( this, &amp;DesignerMonitorDesigner::DesignerChanged );\n            des-&gt;SelectionChanged -= gcnew EventHandler( this, &amp;DesignerMonitorDesigner::SelectionChanged );\n            dm-&gt;monitoring_events = false;\n\n            // Rebuild menu with &quot;Start monitoring&quot; command.\n            array&lt;DesignerVerb^&gt;^myArray = {gcnew DesignerVerb( &quot;Start monitoring&quot;,gcnew EventHandler( this, &amp;DesignerMonitorDesigner::StartMonitoring ) )};\n            dvc = gcnew DesignerVerbCollection( myArray );\n            dm-&gt;Refresh();\n         }\n      }\n\n      void StartMonitoring( Object^ /*sender*/, EventArgs^ /*e*/ )\n      {\n         IDesignerEventService^ des = dynamic_cast&lt;IDesignerEventService^&gt;(this-&gt;Control-&gt;Site-&gt;GetService( IDesignerEventService::typeid ));\n         if ( des != nullptr )\n         {\n            // Add event handlers for event notification methods.\n            des-&gt;DesignerCreated += gcnew DesignerEventHandler( this, &amp;DesignerMonitorDesigner::DesignerCreated );\n            des-&gt;DesignerDisposed += gcnew DesignerEventHandler( this, &amp;DesignerMonitorDesigner::DesignerDisposed );\n            des-&gt;ActiveDesignerChanged += gcnew ActiveDesignerEventHandler( this, &amp;DesignerMonitorDesigner::DesignerChanged );\n            des-&gt;SelectionChanged += gcnew EventHandler( this, &amp;DesignerMonitorDesigner::SelectionChanged );\n            dm-&gt;monitoring_events = false;\n\n            // Rebuild menu with &quot;Stop monitoring&quot; command.\n            array&lt;DesignerVerb^&gt;^myArray = {gcnew DesignerVerb( &quot;Stop monitoring&quot;,gcnew EventHandler( this, &amp;DesignerMonitorDesigner::StopMonitoring ) )};\n            dvc = gcnew DesignerVerbCollection( myArray );\n            dm-&gt;Refresh();\n         }\n      }\n\n      void DesignerCreated( Object^ /*sender*/, DesignerEventArgs^ e )\n      {\n         UpdateStatus( &quot;Designer for &quot; + e-&gt;Designer-&gt;RootComponent-&gt;Site-&gt;Name + &quot; was created.&quot; );\n      }\n\n      void DesignerDisposed( Object^ /*sender*/, DesignerEventArgs^ e )\n      {\n         UpdateStatus( &quot;Designer for &quot; + e-&gt;Designer-&gt;RootComponent-&gt;Site-&gt;Name + &quot; was disposed.&quot; );\n      }\n\n      void DesignerChanged( Object^ /*sender*/, ActiveDesignerEventArgs^ e )\n      {\n         UpdateStatus( &quot;Active designer moved from &quot; + e-&gt;OldDesigner-&gt;RootComponent-&gt;Site-&gt;Name + &quot; to &quot; + e-&gt;NewDesigner-&gt;RootComponent-&gt;Site-&gt;Name + &quot;.&quot; );\n      }\n\n      void SelectionChanged( Object^ /*sender*/, EventArgs^ /*e*/ )\n      {\n         UpdateStatus(&quot;A component selection was changed.&quot;);\n      }\n\n      // Update message buffer on DesignerMonitor control.\n      void UpdateStatus( String^ newmsg )\n      {\n         if ( dm-&gt;updates-&gt;Count &gt; 10 )\n                  dm-&gt;updates-&gt;RemoveAt( 10 );\n\n         dm-&gt;updates-&gt;Insert( 0, &quot;Event #&quot; + eventcount.ToString() + &quot;: &quot; + newmsg );\n         eventcount++;\n         dm-&gt;Refresh();\n      }\n   };\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"IDesignerEventServiceExample#1\">Imports System\nImports System.Collections\nImports System.ComponentModel\nImports System.ComponentModel.Design\nImports System.Drawing\nImports System.Windows.Forms\nImports System.Windows.Forms.Design\n\nNamespace DesignerEventServiceExample\n\n    &#39; DesignerMonitor provides a display for designer event notifications.\n    &lt;Designer(GetType(DesignerMonitorDesigner))&gt; _\n    Public Class DesignerMonitor\n        Inherits System.Windows.Forms.UserControl\n\n        &#39; List to contain strings that describe designer events.\n        Public updates As ArrayList\n        Public monitoring_events As Boolean = False\n\n        Public Sub New()\n            updates = New ArrayList()\n            Me.BackColor = Color.Beige\n            Me.Size = New Size(450, 300)\n        End Sub    \n\n        &#39; Display the message for the current mode, and any event messages if monitoring events\n        Protected Overrides Sub OnPaint(ByVal e As System.Windows.Forms.PaintEventArgs)\n            e.Graphics.DrawString(&quot;IDesignerEventService DesignerMonitor control&quot;, New Font(FontFamily.GenericMonospace, 10), New SolidBrush(Color.Red), 5, 4)\n            Dim yoffset As Integer = 10\n            If Not monitoring_events Then\n                yoffset += 10\n                e.Graphics.DrawString(&quot;Currently not monitoring designer events.&quot;, New Font(FontFamily.GenericMonospace, 10), New SolidBrush(Color.Black), 5, yoffset + 10)\n                e.Graphics.DrawString(&quot;Use the shortcut menu commands&quot;, New Font(FontFamily.GenericMonospace, 10), New SolidBrush(Color.Black), 5, yoffset + 30)\n                e.Graphics.DrawString(&quot;provided by an associated DesignerMonitorDesigner&quot;, New Font(FontFamily.GenericMonospace, 10), New SolidBrush(Color.Black), 5, yoffset + 40)\n                e.Graphics.DrawString(&quot;to start or stop monitoring.&quot;, New Font(FontFamily.GenericMonospace, 10), New SolidBrush(Color.Black), 5, yoffset + 50)\n            Else\n                e.Graphics.DrawString(&quot;Currently monitoring designer events.&quot;, New Font(FontFamily.GenericMonospace, 10), New SolidBrush(Color.DarkBlue), 5, yoffset + 10)\n                e.Graphics.DrawString(&quot;Designer created, changed and disposed events:&quot;, New Font(FontFamily.GenericMonospace, 9), New SolidBrush(Color.Brown), 5, yoffset + 35)\n                Dim i As Integer\n                For i = 0 To updates.Count - 1\n                    e.Graphics.DrawString(CStr(updates(i)), New Font(FontFamily.GenericMonospace, 8), New SolidBrush(Color.Black), 5, yoffset + 55 + 10 * i)\n                    yoffset += 10\n                Next i\n            End If\n        End Sub \n    End Class   \n\n    &#39; DesignerMonitorDesigner uses the IDesignerEventService to send event information \n    &#39; to an associated DesignerMonitor control&#39;s updates collection.\n    Public Class DesignerMonitorDesigner\n        Inherits System.Windows.Forms.Design.ControlDesigner\n        Private dm As DesignerMonitor = Nothing\n        Private dvc As DesignerVerbCollection = Nothing\n        Private eventcount As Integer = 0\n\n        Public Sub New()\n            &#39; Initializes the designer&#39;s shortcut menu with a &quot;Start monitoring&quot; command.\n            dvc = New DesignerVerbCollection(New DesignerVerb() {New DesignerVerb(&quot;Start monitoring&quot;, AddressOf Me.StartMonitoring)})\n        End Sub  \n\n        Public Overrides Sub Initialize(ByVal component As System.ComponentModel.IComponent)\n            MyBase.Initialize(component)\n\n            Dim o As Object\n            o = component\n            \n            If o.GetType() IsNot GetType(DesignerMonitor) Then\n                Throw New Exception(&quot;This designer requires a DesignerMonitor control.&quot;)\n            End If\n            dm = CType(component, DesignerMonitor)\n        End Sub   \n\n        Public Overrides ReadOnly Property Verbs() As System.ComponentModel.Design.DesignerVerbCollection\n            Get\n                Return dvc\n            End Get\n        End Property\n\n        Private Sub StopMonitoring(ByVal sender As Object, ByVal e As EventArgs)\n            Dim des As IDesignerEventService = CType(Me.Control.Site.GetService(GetType(IDesignerEventService)), IDesignerEventService)\n            If des Is Nothing Then\n                Return\n            End If\n            &#39; Remove event handlers for event notification methods.\n            RemoveHandler des.DesignerCreated, AddressOf Me.DesignerCreated\n            RemoveHandler des.DesignerDisposed, AddressOf Me.DesignerDisposed\n            RemoveHandler des.ActiveDesignerChanged, AddressOf Me.DesignerChanged\n            RemoveHandler des.SelectionChanged, AddressOf Me.SelectionChanged\n\n            dm.monitoring_events = False\n            &#39; Rebuild menu with &quot;Start monitoring&quot; command.\n            dvc = New DesignerVerbCollection(New DesignerVerb() {New DesignerVerb(&quot;Start monitoring&quot;, AddressOf Me.StartMonitoring)})\n            dm.Refresh()\n        End Sub \n\n        Private Sub StartMonitoring(ByVal sender As Object, ByVal e As EventArgs)\n            Dim des As IDesignerEventService = CType(Me.Control.Site.GetService(GetType(IDesignerEventService)), IDesignerEventService)\n            If des Is Nothing Then\n                Return\n            End If\n            &#39; Add event handlers for event notification methods.\n            AddHandler des.DesignerCreated, AddressOf Me.DesignerCreated\n            AddHandler des.DesignerDisposed, AddressOf Me.DesignerDisposed\n            AddHandler des.ActiveDesignerChanged, AddressOf Me.DesignerChanged\n            AddHandler des.SelectionChanged, AddressOf Me.SelectionChanged\n\n            dm.monitoring_events = True\n            &#39; Rebuild menu with &quot;Stop monitoring&quot; command.\n            dvc = New DesignerVerbCollection(New DesignerVerb() {New DesignerVerb(&quot;Stop monitoring&quot;, AddressOf Me.StopMonitoring)})\n            dm.Refresh()\n        End Sub      \n\n        Private Sub DesignerCreated(ByVal sender As Object, ByVal e As DesignerEventArgs)\n            UpdateStatus((&quot;Designer for &quot; + e.Designer.RootComponent.Site.Name + &quot; was created.&quot;))\n        End Sub     \n\n        Private Sub DesignerDisposed(ByVal sender As Object, ByVal e As DesignerEventArgs)\n            UpdateStatus((&quot;Designer for &quot; + e.Designer.RootComponent.Site.Name + &quot; was disposed.&quot;))\n        End Sub \n\n        Private Sub DesignerChanged(ByVal sender As Object, ByVal e As ActiveDesignerEventArgs)\n            UpdateStatus((&quot;Active designer moved from &quot; + e.OldDesigner.RootComponent.Site.Name + &quot; to &quot; + e.NewDesigner.RootComponent.Site.Name + &quot;.&quot;))\n        End Sub    \n\n        Private Sub SelectionChanged(ByVal sender As Object, ByVal e As EventArgs)\n            UpdateStatus(&quot;A component selection was changed.&quot;)\n        End Sub       \n\n        &#39; Update message buffer on DesignerMonitor control.\n        Private Sub UpdateStatus(ByVal newmsg As String)\n            If dm.updates.Count &gt; 10 Then\n                dm.updates.RemoveAt(10)\n            End If\n            dm.updates.Insert(0, &quot;Event #&quot; + eventcount.ToString() + &quot;: &quot; + newmsg)\n            eventcount += 1\n            dm.Refresh()\n        End Sub \n\n    End Class \nEnd Namespace \n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>IDesignerEventService provides notification when a new root designer is created, changed, or disposed. A root designer provides design time support for the base component of a document in designer view. The <a class=\"xref\" href=\"system.componentmodel.design.idesignereventservice#System_ComponentModel_Design_IDesignerEventService_SelectionChanged\" data-linktype=\"relative-path\">SelectionChanged</a> event provides notification when the current component selection has changed.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_Design_IDesignerEventService_ActiveDesigner_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_IDesignerEventService_ActiveDesigner\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ActiveDesigner</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the root designer for the currently active document.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.ComponentModel.Design.IDesignerHost ActiveDesigner { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.design.idesignerhost\" data-linktype=\"relative-path\">IDesignerHost</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The currently active document, or <code>null</code> if there is no active document.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_Design_IDesignerEventService_Designers_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_IDesignerEventService_Designers\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Designers</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a collection of root designers for design documents that are currently active in the development environment.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.ComponentModel.Design.DesignerCollection Designers { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.design.designercollection\" data-linktype=\"relative-path\">DesignerCollection</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.componentmodel.design.designercollection\" data-linktype=\"relative-path\">DesignerCollection</a> containing the root designers that have been created and not yet disposed.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Events\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_IDesignerEventService_ActiveDesignerChanged\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ActiveDesignerChanged</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the current root designer changes.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.ComponentModel.Design.ActiveDesignerEventHandler ActiveDesignerChanged;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event can result from the user opening or setting focus to a new document, or by closing a document.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_IDesignerEventService_DesignerCreated\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">DesignerCreated</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when a root designer is created.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.ComponentModel.Design.DesignerEventHandler DesignerCreated;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event is raised when a new document has been loaded and is ready for user input.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_IDesignerEventService_DesignerDisposed\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">DesignerDisposed</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when a root designer for a document is disposed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.ComponentModel.Design.DesignerEventHandler DesignerDisposed;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event is raised when a document is about to be disposed, but before the document actually starts to dispose itself.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_IDesignerEventService_SelectionChanged\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SelectionChanged</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the current design-view selection changes.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event EventHandler SelectionChanged;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This selection changed event can result from the user changing the selection in the currently active document, or from the user switching to a new document.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.Design.IDesignerEventService.yml\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IDesignerEventService\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IDesignerEventService.ActiveDesigner\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IDesignerEventService.add_ActiveDesignerChanged\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IDesignerEventService.remove_ActiveDesignerChanged\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IDesignerEventService.DesignerCreated\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IDesignerEventService.add_DesignerCreated\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IDesignerEventService.remove_DesignerCreated\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IDesignerEventService.DesignerDisposed\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IDesignerEventService.add_DesignerDisposed\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IDesignerEventService.remove_DesignerDisposed\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IDesignerEventService.Designers\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IDesignerEventService.SelectionChanged\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IDesignerEventService.add_SelectionChanged\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IDesignerEventService.remove_SelectionChanged\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"b35fc277-749f-ce36-3d69-e82cc202a4f5\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides event notifications when root designers are added and removed, when a selected component changes, and when the current root designer changes.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.componentmodel.design/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.ComponentModel.Design.IDesignerEventService\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.Design.IDesignerEventService.yml","open_to_public_contributors":false,"api_name":["System.ComponentModel.Design.IDesignerEventService","System.ComponentModel.Design.IDesignerEventService.ActiveDesigner","System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged","System.ComponentModel.Design.IDesignerEventService.add_ActiveDesignerChanged","System.ComponentModel.Design.IDesignerEventService.remove_ActiveDesignerChanged","System.ComponentModel.Design.IDesignerEventService.DesignerCreated","System.ComponentModel.Design.IDesignerEventService.add_DesignerCreated","System.ComponentModel.Design.IDesignerEventService.remove_DesignerCreated","System.ComponentModel.Design.IDesignerEventService.DesignerDisposed","System.ComponentModel.Design.IDesignerEventService.add_DesignerDisposed","System.ComponentModel.Design.IDesignerEventService.remove_DesignerDisposed","System.ComponentModel.Design.IDesignerEventService.Designers","System.ComponentModel.Design.IDesignerEventService.SelectionChanged","System.ComponentModel.Design.IDesignerEventService.add_SelectionChanged","System.ComponentModel.Design.IDesignerEventService.remove_SelectionChanged"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.ComponentModel.Design.IDesignerEventService","System::ComponentModel::Design::IDesignerEventService","System.ComponentModel.Design.IDesignerEventService.ActiveDesigner","System::ComponentModel::Design::IDesignerEventService::ActiveDesigner","System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged","System::ComponentModel::Design::IDesignerEventService::ActiveDesignerChanged","System.ComponentModel.Design.IDesignerEventService.DesignerCreated","System::ComponentModel::Design::IDesignerEventService::DesignerCreated","System.ComponentModel.Design.IDesignerEventService.DesignerDisposed","System::ComponentModel::Design::IDesignerEventService::DesignerDisposed","System.ComponentModel.Design.IDesignerEventService.Designers","System::ComponentModel::Design::IDesignerEventService::Designers","System.ComponentModel.Design.IDesignerEventService.SelectionChanged","System::ComponentModel::Design::IDesignerEventService::SelectionChanged"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"b35fc277-749f-ce36-3d69-e82cc202a4f5","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.ComponentModel.Design/IDesignerEventService.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IDesignerEventService interface | Microsoft Docs","_op_ogTitle":"IDesignerEventService interface","description":"Provides event notifications when root designers are added and removed, when a selected component changes, and when the current root designer changes.\n","toc_asset_id":"api/_splitted/System.ComponentModel.Design/toc.json","toc_rel":"_splitted/System.ComponentModel.Design/toc.json","source_url":"","ms.assetid":"System.ComponentModel.Design.IDesignerEventService","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.design.idesignereventservice","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.design.idesignereventservice","fileRelativePath":"api/System.ComponentModel.Design.IDesignerEventService.html"},"themesRelativePathToOutputRoot":"_themes/"}