{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">CallingConvention</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies the calling convention required to call methods implemented in unmanaged code.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[ECMA2Yaml.Models.ECMAAttribute]\npublic enum CallingConvention</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">CallingConvention</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example demonstrates how to apply the <code>Cdecl</code> calling convention, which you must use because the stack is cleaned up by the caller.  </p>\n<pre><code class=\"lang-cs\" name=\"Interop CallingConvention#1\">using System;\nusing System.Runtime.InteropServices;\n\npublic class LibWrap\n{\n// C# doesn&#39;t support varargs so all arguments must be explicitly defined.\n// CallingConvention.Cdecl must be used since the stack is \n// cleaned up by the caller.\n\n// int printf( const char *format [, argument]... )\n\n[DllImport(&quot;msvcrt.dll&quot;, CharSet=CharSet.Unicode, CallingConvention=CallingConvention.Cdecl)]\npublic static extern int printf(String format, int i, double d); \n\n[DllImport(&quot;msvcrt.dll&quot;, CharSet=CharSet.Unicode, CallingConvention=CallingConvention.Cdecl)]\npublic static extern int printf(String format, int i, String s); \n}\n\npublic class App\n{\n    public static void Main()\n    {\n        LibWrap.printf(&quot;\\nPrint params: %i %f&quot;, 99, 99.99);\n        LibWrap.printf(&quot;\\nPrint params: %i %s&quot;, 99, &quot;abcd&quot;);\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Interop CallingConvention#1\">using namespace System;\nusing namespace System::Runtime::InteropServices;\npublic ref class LibWrap\n{\npublic:\n\n   // CallingConvention.Cdecl must be used since the stack is \n   // cleaned up by the caller.\n   // int printf( const char *format [, argument]... )\n\n   [DllImport(&quot;msvcrt.dll&quot;,CharSet=CharSet::Unicode, CallingConvention=CallingConvention::Cdecl)]\n   static int printf( String^ format, int i, double d );\n\n   [DllImport(&quot;msvcrt.dll&quot;,CharSet=CharSet::Unicode, CallingConvention=CallingConvention::Cdecl)]\n   static int printf( String^ format, int i, String^ s );\n};\n\nint main()\n{\n   LibWrap::printf( &quot;\\nPrint params: %i %f&quot;, 99, 99.99 );\n   LibWrap::printf( &quot;\\nPrint params: %i %s&quot;, 99, &quot;abcd&quot; );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Interop CallingConvention#1\">Imports System\nImports Microsoft.VisualBasic\nImports System.Runtime.InteropServices\n\nPublic Class LibWrap\n&#39; Visual Basic does not support varargs, so all arguments must be \n&#39; explicitly defined. CallingConvention.Cdecl must be used since the stack \n&#39; is cleaned up by the caller. \n&#39; int printf( const char *format [, argument]... )\n\n&lt;DllImport(&quot;msvcrt.dll&quot;, CharSet:=CharSet.Unicode, CallingConvention:=CallingConvention.Cdecl)&gt; _\nOverloads Shared Function printf( _\n    ByVal format As String, ByVal i As Integer, ByVal d As Double) As Integer\nEnd Function\n\n&lt;DllImport(&quot;msvcrt.dll&quot;, CharSet:=CharSet.Unicode, CallingConvention:=CallingConvention.Cdecl)&gt; _\nOverloads Shared Function printf( _\n    ByVal format As String, ByVal i As Integer, ByVal s As String) As Integer\nEnd Function\nEnd Class &#39;LibWrap\n\nPublic Class App\n    Public Shared Sub Main()\n        LibWrap.printf(ControlChars.CrLf + &quot;Print params: %i %f&quot;, 99, _\n                       99.99)\n        LibWrap.printf(ControlChars.CrLf + &quot;Print params: %i %s&quot;, 99, _\n                       &quot;abcd&quot;)\n    End Sub &#39;Main\nEnd Class &#39;App\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Always use the CallingConvention enumeration rather than the <a class=\"xref\" href=\"system.runtime.interopservices.callconv\" data-linktype=\"relative-path\">CALLCONV</a> enumeration to specify a calling convention in managed code. The latter exists only for the sake of COM definitions. The CallingConvention enumeration is used by <a class=\"xref\" href=\"system.runtime.interopservices.dllimportattribute\" data-linktype=\"relative-path\">DllImportAttribute</a> and several classes in <a class=\"xref\" href=\"system.reflection.emit\" data-linktype=\"relative-path\">System.Reflection.Emit</a> to dynamically emit platform invoke signatures.</p>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Runtime_InteropServices_CallingConvention_Cdecl\">\r\n      \t\t\t<span class=\"lang-csharp\">Cdecl</span>\r\n      \t</td>\r\n      \t<td><p>The caller cleans the stack. This enables calling functions with <code>varargs</code>, which makes it appropriate to use for methods that accept a variable number of parameters, such as <code>Printf</code>.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Runtime_InteropServices_CallingConvention_FastCall\">\r\n      \t\t\t<span class=\"lang-csharp\">FastCall</span>\r\n      \t</td>\r\n      \t<td><p>This calling convention is not supported.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Runtime_InteropServices_CallingConvention_StdCall\">\r\n      \t\t\t<span class=\"lang-csharp\">StdCall</span>\r\n      \t</td>\r\n      \t<td><p>The callee cleans the stack. This is the default convention for calling unmanaged functions with platform invoke.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Runtime_InteropServices_CallingConvention_ThisCall\">\r\n      \t\t\t<span class=\"lang-csharp\">ThisCall</span>\r\n      \t</td>\r\n      \t<td><p>The first parameter is the <code>this</code> pointer and is stored in register ECX. Other parameters are pushed on the stack. This calling convention is used to call methods on classes exported from an unmanaged DLL.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Runtime_InteropServices_CallingConvention_Winapi\">\r\n      \t\t\t<span class=\"lang-csharp\">Winapi</span>\r\n      \t</td>\r\n      \t<td><p>This member is not actually a calling convention, but instead uses the default platform calling convention. For example, on Windows the default is StdCall and on Windows CE.NET it is Cdecl.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Runtime.InteropServices.CallingConvention.yml\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.CallingConvention\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.CallingConvention.Cdecl\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.CallingConvention.FastCall\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.CallingConvention.StdCall\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.CallingConvention.ThisCall\">\r\n<meta name=\"APIName\" content=\"System.Runtime.InteropServices.CallingConvention.Winapi\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"c86df4d7-644c-aca0-3887-8f475471e5ab\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies the calling convention required to call methods implemented in unmanaged code.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.runtime.interopservices/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Runtime.InteropServices.CallingConvention\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Runtime.InteropServices.CallingConvention.yml","open_to_public_contributors":false,"api_name":["System.Runtime.InteropServices.CallingConvention","System.Runtime.InteropServices.CallingConvention.Cdecl","System.Runtime.InteropServices.CallingConvention.FastCall","System.Runtime.InteropServices.CallingConvention.StdCall","System.Runtime.InteropServices.CallingConvention.ThisCall","System.Runtime.InteropServices.CallingConvention.Winapi"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Runtime.InteropServices.CallingConvention","System::Runtime::InteropServices::CallingConvention","System.Runtime.InteropServices.CallingConvention.Cdecl","System::Runtime::InteropServices::CallingConvention::Cdecl","System.Runtime.InteropServices.CallingConvention.FastCall","System::Runtime::InteropServices::CallingConvention::FastCall","System.Runtime.InteropServices.CallingConvention.StdCall","System::Runtime::InteropServices::CallingConvention::StdCall","System.Runtime.InteropServices.CallingConvention.ThisCall","System::Runtime::InteropServices::CallingConvention::ThisCall","System.Runtime.InteropServices.CallingConvention.Winapi","System::Runtime::InteropServices::CallingConvention::Winapi"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"c86df4d7-644c-aca0-3887-8f475471e5ab","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Runtime.InteropServices/CallingConvention.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"CallingConvention enum | Microsoft Docs","_op_ogTitle":"CallingConvention enum","description":"Specifies the calling convention required to call methods implemented in unmanaged code.\n","toc_asset_id":"api/_splitted/System.Runtime.InteropServices/toc.json","toc_rel":"_splitted/System.Runtime.InteropServices/toc.json","source_url":"","ms.assetid":"System.Runtime.InteropServices.CallingConvention","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.callingconvention","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.callingconvention","fileRelativePath":"api/System.Runtime.InteropServices.CallingConvention.html"},"themesRelativePathToOutputRoot":"_themes/"}