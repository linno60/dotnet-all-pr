{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">AsymmetricAlgorithm</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the abstract base class from which all implementations of asymmetric algorithms must inherit.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic abstract class AsymmetricAlgorithm : IDisposable</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">AsymmetricAlgorithm</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates how to implement a custom asymmetric algorithm inherited from the AsymmetricAlgorithm class.  An additional class is provided to demonstrate how to use the custom class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.AsymmetricAlgorithm#2\">using System;\nusing System.Xml;\nusing System.Text;\nusing System.Security.Cryptography;\nusing System.Reflection;\n\n[assembly: AssemblyKeyFile(&quot;CustomCrypto.snk&quot;)]\n[assembly: AssemblyVersion(&quot;1.0.0.0&quot;)]\n[assembly: CLSCompliant(true)]\nnamespace Contoso\n{\n    // Define a CustomCrypto class that inherits from the AsymmetricAlgorithm\n    // class.\n    public class CustomCrypto : \n        System.Security.Cryptography.AsymmetricAlgorithm\n    {\n        // Declare local member variables.\n        private CspParameters cspParameters;\n        private readonly KeySizes[] keySizes = {new KeySizes(8, 64, 8)};\n\n        // Initialize a CustomCrypto with the default key size of 8.\n        public CustomCrypto()\n        {\n            this.KeySize = 8;\n        }\n\n        // Initialize a CustomCrypto with the specified key size.\n        public CustomCrypto(int keySize)\n        {\n            this.KeySize = keySize;\n        }\n\n        // Accessor function for keySizes member variable.\n        public override KeySizes[] LegalKeySizes \n        { \n            get { return (KeySizes[])keySizes.Clone(); }\n        }\n\n        // Modify the KeySizeValue property inherited from the Asymmetric\n        // class. Prior to setting the value, ensure it falls within the\n        // range identified in the local keySizes member variable.\n        public override int KeySize \n        {\n            get { return KeySizeValue; }\n            set\n            {\n                for (int i=0; i &lt; keySizes.Length; i++)\n                {\n                    if (keySizes[i].SkipSize == 0) \n                    {\n                        if (keySizes[i].MinSize == value)\n                        {\n                            KeySizeValue = value;\n                            return;\n                        }\n                    }\n                    else\n                    {\n                        for (int j = keySizes[i].MinSize;\n                            j &lt;= keySizes[i].MaxSize;\n                            j += keySizes[i].SkipSize)\n                        {\n                            if (j == value)\n                            {\n                                KeySizeValue = value;\n                                return;\n                            }\n                        }\n                    }\n                }\n\n                // If the key does not fall within the range identified \n                // in the keySizes member variable, throw an exception.\n                throw new CryptographicException(&quot;Invalid key size.&quot;);\n            }\n        }\n\n        // Initialize the parameters with default values.\n        public void InitializeParameters()\n        {\n            cspParameters = new CspParameters();\n            cspParameters.ProviderName = &quot;Contoso&quot;;\n            cspParameters.KeyContainerName = &quot;SecurityBin1&quot;;\n            cspParameters.KeyNumber = 1;\n            cspParameters.ProviderType = 2;\n        }\n\n        // Parse specified xmlString for values to populate the CspParams\n        // Expected XML schema:\n        //  &lt;CustomCryptoKeyValue&gt;\n        //      &lt;ProviderName&gt;&lt;/ProviderName&gt;\n        //      &lt;KeyContainerName&gt;&lt;/KeyContainerName&gt;\n        //      &lt;KeyNumber&gt;&lt;/KeyNumber&gt;\n        //      &lt;ProviderType&gt;&lt;/ProviderType&gt;\n        //  &lt;/CustomCryptoKeyValue&gt;\n        public override void FromXmlString(string xmlString)\n        {\n            if (xmlString != null)\n            {\n                XmlDocument doc = new XmlDocument();\n                doc.LoadXml(xmlString);\n                XmlNode firstNode = doc.FirstChild;\n                XmlNodeList nodeList;\n\n                // Assemble parameters from values in each XML element.\n                cspParameters = new CspParameters();\n\n                // KeyContainerName is optional.\n                nodeList = doc.GetElementsByTagName(&quot;KeyContainerName&quot;);\n                string keyName = nodeList.Item(0).InnerText;\n                if (keyName != null) \n                {\n                    cspParameters.KeyContainerName = keyName;\n                }\n\n                // KeyNumber is optional.\n                nodeList = doc.GetElementsByTagName(&quot;KeyNumber&quot;);\n                string keyNumber = nodeList.Item(0).InnerText;\n                if (keyNumber != null) \n                {\n                    cspParameters.KeyNumber = Int32.Parse(keyNumber);\n                }\n\n                // ProviderName is optional.\n                nodeList = doc.GetElementsByTagName(&quot;ProviderName&quot;);\n                string providerName = nodeList.Item(0).InnerText;\n                if (providerName != null) \n                {\n                    cspParameters.ProviderName = providerName;\n                }\n\n                // ProviderType is optional.\n                nodeList = doc.GetElementsByTagName(&quot;ProviderType&quot;);\n                string providerType = nodeList.Item(0).InnerText;\n                if (providerType != null) \n                {\n                    cspParameters.ProviderType = Int32.Parse(providerType);\n                }\n            }\n            else\n            {\n                throw new ArgumentNullException(&quot;xmlString&quot;);\n            }\n        }\n\n        // Create an XML string representation of the parameters in the\n        // current customCrypto object.\n        public override string ToXmlString(bool includePrivateParameters)\n        {\n            string keyContainerName = &quot;&quot;;\n            string keyNumber = &quot;&quot;;\n            string providerName = &quot;&quot;;\n            string providerType = &quot;&quot;;\n\n            if (cspParameters != null)\n            {\n                keyContainerName = cspParameters.KeyContainerName;\n                keyNumber = cspParameters.KeyNumber.ToString();\n                providerName = cspParameters.ProviderName;\n                providerType = cspParameters.ProviderType.ToString();\n            }\n\n            StringBuilder sb = new StringBuilder();\n            sb.Append(&quot;&lt;CustomCryptoKeyValue&gt;&quot;);\n\n            sb.Append(&quot;&lt;KeyContainerName&gt;&quot;);\n            sb.Append(keyContainerName);\n            sb.Append(&quot;&lt;/KeyContainerName&gt;&quot;);\n\n            sb.Append(&quot;&lt;KeyNumber&gt;&quot;);\n            sb.Append(keyNumber);\n            sb.Append(&quot;&lt;/KeyNumber&gt;&quot;);\n\n            sb.Append(&quot;&lt;ProviderName&gt;&quot;);\n            sb.Append(providerName);\n            sb.Append(&quot;&lt;/ProviderName&gt;&quot;);\n\n            sb.Append(&quot;&lt;ProviderType&gt;&quot;);\n            sb.Append(providerType);\n            sb.Append(&quot;&lt;/ProviderType&gt;&quot;);\n\n            sb.Append(&quot;&lt;/CustomCryptoKeyValue&gt;&quot;);\n            return(sb.ToString());\n        }\n\n        // Return the name for the key exchange algorithm.\n        public override string KeyExchangeAlgorithm\n        {\n            get {return &quot;RSA-PKCS1-KeyEx&quot;;}\n        }\n\n        // Retrieves the name of the signature alogrithm.\n        public override string SignatureAlgorithm \n        {\n            get {return &quot;http://www.w3.org/2000/09/xmldsig#rsa-sha1&quot;;}\n        }\n\n        // Required member for implementing the AsymmetricAlgorithm class.\n        protected override void Dispose(bool disposing) {}\n\n        // Call the Create method using the CustomCrypto assembly name.\n        // The create function attempts to create a CustomCrypto object using\n        // the assembly name. This functionality requires modification of the\n        // machine.config file. Add the following section to the configuration\n        // element and modify the values of the cryptoClass to reflect what is\n        // installed in your machines GAC.\n        //&lt;mscorlib&gt;\n        //  &lt;cryptographySettings&gt;\n        //    &lt;cryptoNameMapping&gt;\n        //      &lt;cryptoClasses&gt;\n        //        &lt;cryptoClass CustomCrypto=&quot;Contoso.CustomCrypto, \n        //          CustomCrypto, \n        //          Culture=neutral, \n        //          PublicKeyToken=fdb9f9c4851028bf, \n        //          Version=1.0.1448.27640&quot; /&gt;\n        //      &lt;/cryptoClasses&gt;\n        //      &lt;nameEntry name=&quot;Contoso.CustomCrypto&quot; class=&quot;CustomCrypto&quot; /&gt;\n        //      &lt;nameEntry name=&quot;CustomCrypto&quot; class=&quot;CustomCrypto&quot; /&gt;\n        //    &lt;/cryptoNameMapping&gt;\n        //  &lt;/cryptographySettings&gt;\n        //&lt;/mscorlib&gt;\n        new static public CustomCrypto Create() \n        {\n            return Create(&quot;CustomCrypto&quot;);\n        }\n\n        // Create a CustomCrypto object by calling CrytoConfig&#39;s\n        // CreateFromName method and casting the type to CustomCrypto.\n        // The create function attempts to create a CustomCrypto object using\n        // the assembly name. This functionality requires modification of the\n        // machine.config file. Add the following section to the configuration\n        // element and modify the values of the cryptoClass to reflect what is\n        // installed in your machines GAC.\n        //&lt;mscorlib&gt;\n        // &lt;cryptographySettings&gt;\n        //   &lt;cryptoNameMapping&gt;\n        //     &lt;cryptoClasses&gt;\n        //       &lt;cryptoClass CustomCrypto=&quot;Contoso.CustomCrypto, \n        //         CustomCrypto, \n        //         Culture=neutral, \n        //         PublicKeyToken=fdb9f9c4851028bf, \n        //         Version=1.0.1448.27640&quot; /&gt;\n        //     &lt;/cryptoClasses&gt;\n        //     &lt;nameEntry name=&quot;Contoso.CustomCrypto&quot; class=&quot;CustomCrypto&quot; /&gt;\n        //     &lt;nameEntry name=&quot;CustomCrypto&quot; class=&quot;CustomCrypto&quot; /&gt;\n        //    &lt;/cryptoNameMapping&gt;\n        //  &lt;/cryptographySettings&gt;\n        //&lt;/mscorlib&gt;\n        new static public CustomCrypto Create(String algorithmName) \n        {\n            return (CustomCrypto) CryptoConfig.CreateFromName(algorithmName);\n        }\n    }\n    class CustomCryptoImpl\n    {\n        [STAThread]\n        static void Main(string[] args)\n        {\n            // Construct a CustomCrypto object and initialize its\n            // CspParameters.\n            CustomCrypto customCrypto = new CustomCrypto();\n            customCrypto.InitializeParameters();\n\n            // Display properties of the current customCrypto object.\n            Console.WriteLine(&quot;*** CustomCrypto created with default &quot; + \n                &quot;parameters:&quot;);\n            DisplayProperties(customCrypto);\n\n            // Release all the resources used by this instance of \n            // CustomCrytpo.\n            customCrypto.Clear();\n\n            customCrypto = new CustomCrypto(64);\n            // Create new parameters and set them by using the FromXmlString\n            // method.\n            string parameterXml = &quot;&lt;CustomCryptoKeyValue&gt;&quot;;\n            parameterXml += &quot;&lt;ProviderName&gt;Contoso&lt;/ProviderName&gt;&quot;;\n            parameterXml += &quot;&lt;KeyContainerName&gt;SecurityBin2&quot;;\n            parameterXml += &quot;&lt;/KeyContainerName&gt;&quot;;\n            parameterXml += &quot;&lt;KeyNumber&gt;1&lt;/KeyNumber&gt;&quot;;\n            parameterXml += &quot;&lt;ProviderType&gt;2&lt;/ProviderType&gt;&quot;;\n            parameterXml += &quot;&lt;/CustomCryptoKeyValue&gt;&quot;;\n            customCrypto.FromXmlString(parameterXml);\n\n            // Display the properties of a customCrypto object created with\n            // custom parameters.\n            Console.WriteLine(&quot;\\n*** &quot; + \n                &quot;CustomCrypto created with custom parameters:&quot;);\n            DisplayProperties(customCrypto);\n\n            // Create an object by using the assembly name.\n            try\n            {\n                CustomCrypto myCryptoA = CustomCrypto.Create(&quot;CustomCrypto&quot;);\n                if (myCryptoA != null)\n                {\n                    Console.Write(&quot;\\n*** &quot; + \n                        &quot;Successfully created CustomCrytpo from&quot;);\n                    Console.WriteLine(&quot; the Create method.&quot;);\n\n                    DisplayProperties(myCryptoA);\n                }\n                else\n                {\n                    Console.Write(&quot;Unable to create CustomCrytpo from &quot;);\n                    Console.WriteLine(&quot; the Create method.&quot;);\n                }\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex.ToString());\n            }\n            \n            Console.WriteLine(&quot;This sample completed successfully; &quot; +\n                &quot;press Enter to exit.&quot;);\n            Console.ReadLine();\n        }\n        // Display the properties of the specified CustomCrypto object to the\n        // console.\n        public static void DisplayProperties(CustomCrypto customCrypto)\n        {\n            try\n            {\n                // Retrieve the class description for the customCrypto object.\n                string classDescription = customCrypto.ToString();\n\n                Console.WriteLine(classDescription);\n                Console.Write(&quot;KeyExchangeAlgorithm: &quot;);\n                Console.WriteLine(customCrypto.KeyExchangeAlgorithm);\n                Console.Write(&quot;SignatureAlgorithm: &quot;);\n                Console.WriteLine(customCrypto.SignatureAlgorithm);\n                Console.WriteLine(&quot;KeySize: &quot; + customCrypto.KeySize);\n                Console.WriteLine(&quot;Parameters described in Xml format:&quot;);\n                Console.WriteLine(customCrypto.ToXmlString(true));\n\n                // Display the MinSize, MaxSize, and SkipSize properties of \n                // each KeySize item in the local keySizes member variable.\n                KeySizes[] legalKeySizes = customCrypto.LegalKeySizes;\n                if (legalKeySizes.Length &gt; 0)\n                {\n                    for (int i=0; i &lt; legalKeySizes.Length; i++)\n                    {\n                        Console.Write(&quot;Keysize&quot; + i + &quot; min, max, step: &quot;);\n                        Console.Write(legalKeySizes[i].MinSize + &quot;, &quot;);\n                        Console.Write(legalKeySizes[i].MaxSize + &quot;, &quot;);\n                        Console.WriteLine(legalKeySizes[i].SkipSize + &quot;, &quot;);\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(&quot;Caught unexpected exception: &quot; + \n                    ex.ToString());\n            }\n        }\n    }\n}\n//\n// This sample produces the following output:\n//\n// *** CustomCrypto created with default parameters:\n// Contoso.vbCustomCrypto\n// KeyExchangeAlgorithm: RSA-PKCS1-KeyEx\n// SignatureAlgorithm: http://www.w3.org/2000/09/xmldsig#rsa-sha1\n// KeySize: 8\n// Parameters described in Xml format:\n// &lt;CustomCryptoKeyValue&gt;&lt;KeyContainerName&gt;SecurityBin1&lt;/KeyContainerName&gt;\n// &lt;KeyNumber&gt;1&lt;/KeyNumber&gt;&lt;ProviderName&gt;Contoso&lt;/ProviderName&gt;\n// &lt;ProviderType&gt;2&lt;/ProviderType&gt;&lt;/CustomCryptoKeyValue&gt;\n// Keysize0 min, max, step: 8, 64, 8, \n// \n// *** CustomCrypto created with custom parameters:\n// Contoso.vbCustomCrypto\n// KeyExchangeAlgorithm: RSA-PKCS1-KeyEx\n// SignatureAlgorithm: http://www.w3.org/2000/09/xmldsig#rsa-sha1\n// KeySize: 64\n// Parameters described in Xml format:\n// &lt;CustomCryptoKeyValue&gt;&lt;KeyContainerName&gt;SecurityBin2&lt;/KeyContainerName&gt;\n// &lt;KeyNumber&gt;1&lt;/KeyNumber&gt;&lt;ProviderName&gt;Contoso&lt;/ProviderName&gt;\n// &lt;ProviderType&gt;2&lt;/ProviderType&gt;&lt;/CustomCryptoKeyValue&gt;\n// Keysize0 min, max, step: 8, 64, 8, \n// Unable to create CustomCrytpo from  the Create method\n// This sample completed successfully; press Exit to continue.\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.AsymmetricAlgorithm#2\">#using &lt;System.Xml.dll&gt;\n#using &lt;System.Security.dll&gt;\n\nusing namespace System;\nusing namespace System::Xml;\nusing namespace System::Text;\nusing namespace System::Security::Cryptography;\nusing namespace System::Reflection;\n\n[assembly: AssemblyKeyFile(&quot;CustomCrypto.snk&quot;)];\n[assembly: AssemblyVersion(&quot;1.0.0.0&quot;)];\n[assembly: CLSCompliant(true)];\nnamespace Contoso\n{\n    // Define a CustomCrypto class that inherits from the AsymmetricAlgorithm\n    // class.\n    public ref class CustomCrypto :\n        public System::Security::Cryptography::AsymmetricAlgorithm\n        {\n            // Declare local member variables.\n        private:\n            CspParameters^ cryptoServiceParameters;\n            array&lt;KeySizes^&gt;^ customValidKeySizes;\n\n            // Initialize a CustomCrypto with the default key size of 8.\n        public:\n            CustomCrypto()\n            {\n                customValidKeySizes = \n                    gcnew array&lt;KeySizes^&gt;{gcnew KeySizes(8, 64, 8)};\n                this-&gt;KeySize = 8;\n            }\n\n            // Initialize a CustomCrypto with the specified key size.\n        public:\n            CustomCrypto(int keySize)\n            {\n                customValidKeySizes = \n                    gcnew array&lt;KeySizes^&gt;{gcnew KeySizes(8, 64, 8)};\n                this-&gt;KeySize = keySize;\n            }\n\n            // Accessor function for keySizes member variable.\n        public:\n            property array&lt;KeySizes^&gt;^ LegalKeySizes\n            {\n                virtual array&lt;KeySizes^&gt;^ get() override\n                {\n                    return (array&lt;KeySizes^&gt;^)customValidKeySizes-&gt;Clone();\n                }\n            }\n\n            // Modify the KeySizeValue property inherited from the Asymmetric\n            // class. Prior to setting the value, ensure it falls within the\n            // range identified in the local keySizes member variable.\n        public:\n            property int KeySize\n            {\n                virtual int get() override\n                {\n                    return KeySizeValue;\n                }\n\n                virtual void set(int value) override\n                {\n                    for (int i = 0; i &lt; customValidKeySizes-&gt;Length; i++)\n                    {\n                        if (customValidKeySizes[i]-&gt;SkipSize == 0)\n                        {\n                            if (customValidKeySizes[i]-&gt;MinSize == value)\n                            {\n                                KeySizeValue = value;\n                                return;\n                            }\n                        }\n                        else\n                        {\n                            for (int j = customValidKeySizes[i]-&gt;MinSize;\n                                j &lt;= customValidKeySizes[i]-&gt;MaxSize;\n                                j += customValidKeySizes[i]-&gt;SkipSize)\n                            {\n                                if (j == value)\n                                {\n                                    KeySizeValue = value;\n                                    return;\n                                }\n                            }\n                        }\n                    }\n\n                    // If the key does not fall within the range identified\n                    // in the keySizes member variable, throw an exception.\n                    throw gcnew CryptographicException(&quot;Invalid key size.&quot;);\n                }\n            }\n\n            // Initialize the parameters with default values.\n        public:\n            void InitializeParameters()\n            {\n                cryptoServiceParameters = gcnew CspParameters();\n                cryptoServiceParameters-&gt;ProviderName = &quot;Contoso&quot;;\n                cryptoServiceParameters-&gt;KeyContainerName = &quot;SecurityBin1&quot;;\n                cryptoServiceParameters-&gt;KeyNumber = 1;\n                cryptoServiceParameters-&gt;ProviderType = 2;\n            }\n\n            // Parse specified xmlString for values to populate the CspParams\n            // Expected XML schema:\n            //  &lt;CustomCryptoKeyValue&gt;\n            //      &lt;ProviderName&gt;&lt;/ProviderName&gt;\n            //      &lt;KeyContainerName&gt;&lt;/KeyContainerName&gt;\n            //      &lt;KeyNumber&gt;&lt;/KeyNumber&gt;\n            //      &lt;ProviderType&gt;&lt;/ProviderType&gt;\n            //  &lt;/CustomCryptoKeyValue&gt;\n        public:\n            virtual void FromXmlString(String^ xmlString) override \n            {\n                if (xmlString != nullptr)\n                {\n                    XmlDocument^ document = gcnew XmlDocument();\n                    document-&gt;LoadXml(xmlString);\n                    XmlNode^ firstNode = document-&gt;FirstChild;\n                    XmlNodeList^ nodeList;\n\n                    // Assemble parameters from values in each XML element.\n                    cryptoServiceParameters = gcnew CspParameters();\n\n                    // KeyContainerName is optional.\n                    nodeList = \n                        document-&gt;GetElementsByTagName(&quot;KeyContainerName&quot;);\n                    if (nodeList-&gt;Count &gt; 0)\n                    {\n                        cryptoServiceParameters-&gt;KeyContainerName =\n                            nodeList-&gt;Item(0)-&gt;InnerText;\n                    }\n\n                    // KeyNumber is optional.\n                    nodeList = document-&gt;GetElementsByTagName(&quot;KeyNumber&quot;);\n                    if (nodeList-&gt;Count &gt; 0)\n                    {\n                        cryptoServiceParameters-&gt;KeyNumber =\n                            Int32::Parse(nodeList-&gt;Item(0)-&gt;InnerText);\n                    }\n\n                    // ProviderName is optional.\n                    nodeList = document-&gt;GetElementsByTagName(&quot;ProviderName&quot;);\n                    if (nodeList-&gt;Count &gt; 0)\n                    {\n                        cryptoServiceParameters-&gt;ProviderName =\n                            nodeList-&gt;Item(0)-&gt;InnerText;\n                    }\n\n                    // ProviderType is optional.\n                    nodeList = document-&gt;GetElementsByTagName(&quot;ProviderType&quot;);\n                    if (nodeList-&gt;Count &gt; 0)\n                    {\n                        cryptoServiceParameters-&gt;ProviderType =\n                            Int32::Parse(nodeList-&gt;Item(0)-&gt;InnerText);\n                    }\n                }\n                else\n                {\n                    throw gcnew ArgumentNullException(&quot;xmlString&quot;);\n                }\n            }\n\n            // Create an XML string representation of the parameters in the\n            // current customCrypto object.\n        public:\n            virtual String^ ToXmlString(bool includePrivateParameters) override\n            {\n                String^ keyContainerName = &quot;&quot;;\n                String^ keyNumber = &quot;&quot;;\n                String^ providerName = &quot;&quot;;\n                String^ providerType = &quot;&quot;;\n\n                if (cryptoServiceParameters != nullptr)\n                {\n                    keyContainerName = \n                        cryptoServiceParameters-&gt;KeyContainerName;\n                    keyNumber = cryptoServiceParameters-&gt;KeyNumber.ToString();\n                    providerName = cryptoServiceParameters-&gt;ProviderName;\n                    providerType = \n                        cryptoServiceParameters-&gt;ProviderType.ToString();\n                }\n\n                StringBuilder^ sb = gcnew StringBuilder();\n                sb-&gt;Append(&quot;&lt;CustomCryptoKeyValue&gt;&quot;);\n\n                sb-&gt;Append(&quot;&lt;KeyContainerName&gt;&quot;);\n                sb-&gt;Append(keyContainerName);\n                sb-&gt;Append(&quot;&lt;/KeyContainerName&gt;&quot;);\n\n                sb-&gt;Append(&quot;&lt;KeyNumber&gt;&quot;);\n                sb-&gt;Append(keyNumber);\n                sb-&gt;Append(&quot;&lt;/KeyNumber&gt;&quot;);\n\n                sb-&gt;Append(&quot;&lt;ProviderName&gt;&quot;);\n                sb-&gt;Append(providerName);\n                sb-&gt;Append(&quot;&lt;/ProviderName&gt;&quot;);\n\n                sb-&gt;Append(&quot;&lt;ProviderType&gt;&quot;);\n                sb-&gt;Append(providerType);\n                sb-&gt;Append(&quot;&lt;/ProviderType&gt;&quot;);\n\n                sb-&gt;Append(&quot;&lt;/CustomCryptoKeyValue&gt;&quot;);\n                return(sb-&gt;ToString());\n            }\n\n            // Return the name for the key exchange algorithm.\n        public:\n            property String^ KeyExchangeAlgorithm \n            {\n                virtual String^ get() override\n                {\n                    return &quot;RSA-PKCS1-KeyEx&quot;;\n                }\n            }\n\n            // Retrieves the name of the signature alogrithm.\n        public:\n            property String^ SignatureAlgorithm\n            {\n                virtual String^ get() override\n                {\n                    return &quot;http://www.w3.org/2000/09/xmldsig#rsa-sha1&quot;;\n                }\n            }\n\n            // Required member for implementing the AsymmetricAlgorithm class.\n\t\tprotected:\n\t\t\tvirtual ~CustomCrypto()\n\t\t\t{\n\t\t\t}\n\n            // Call the Create method using the CustomCrypto assembly name.\n            // The create function attempts to create a CustomCrypto \n            // object using the assembly name. This functionality requires \n            // modification of the machine.config file. Add the following \n            // section to the configuration element and modify the values \n            // of the cryptoClass to reflect what isinstalled \n            // in your machines GAC.\n            //&lt;mscorlib&gt;\n            //  &lt;cryptographySettings&gt;\n            //    &lt;cryptoNameMapping&gt;\n            //      &lt;cryptoClasses&gt;\n            //        &lt;cryptoClass CustomCrypto=&quot;Contoso.CustomCrypto,\n            //          CustomCrypto,\n            //          Culture=neutral,\n            //          PublicKeyToken=fdb9f9c4851028bf,\n            //          Version=1.0.1448.27640&quot; /&gt;\n            //      &lt;/cryptoClasses&gt;\n            //      &lt;nameEntry name=&quot;Contoso.CustomCrypto&quot; \n            //         class=&quot;CustomCrypto&quot; /&gt;\n            //      &lt;nameEntry name=&quot;CustomCrypto&quot; class=&quot;CustomCrypto&quot; /&gt;\n            //    &lt;/cryptoNameMapping&gt;\n            //  &lt;/cryptographySettings&gt;\n            //&lt;/mscorlib&gt;\n\n        public:\n            static CustomCrypto^ Create() \n            {\n                return Create(&quot;CustomCrypto&quot;);\n            }\n\n            // Create a CustomCrypto object by calling CrytoConfig&#39;s\n            // CreateFromName method and casting the type to CustomCrypto.\n            // The create function attempts to create a CustomCrypto object \n            // using the assembly name. This functionality requires \n            // modification of the machine.config file. Add the following \n            // section to the configuration element and modify the values \n            // of the cryptoClass to reflect what is installed \n            // in your machines GAC.\n            //&lt;mscorlib&gt;\n            // &lt;cryptographySettings&gt;\n            //   &lt;cryptoNameMapping&gt;\n            //     &lt;cryptoClasses&gt;\n            //       &lt;cryptoClass CustomCrypto=&quot;Contoso.CustomCrypto,\n            //         CustomCrypto,\n            //         Culture=neutral,\n            //         PublicKeyToken=fdb9f9c4851028bf,\n            //         Version=1.0.1448.27640&quot; /&gt;\n            //     &lt;/cryptoClasses&gt;\n            //     &lt;nameEntry name=&quot;Contoso.CustomCrypto&quot; \n            //        class=&quot;CustomCrypto&quot; /&gt;\n            //     &lt;nameEntry name=&quot;CustomCrypto&quot; class=&quot;CustomCrypto&quot; /&gt;\n            //    &lt;/cryptoNameMapping&gt;\n            //  &lt;/cryptographySettings&gt;\n            //&lt;/mscorlib&gt;\n\n        public:\n            static CustomCrypto^ Create(String^ algorithmName) \n            {\n                return (CustomCrypto^) \n                    CryptoConfig::CreateFromName(algorithmName);\n            }\n        };\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.AsymmetricAlgorithm#2\">Imports System\nImports System.Xml\nImports System.Text\nImports System.Security.Cryptography\nImports System.Reflection\n\n&lt;Assembly: AssemblyKeyFile(&quot;CustomCrypto.snk&quot;)&gt; \n&lt;Assembly: AssemblyVersion(&quot;1.0.0.0&quot;)&gt; \n&lt;Assembly: CLSCompliant(True)&gt; \nNamespace Contoso\n    &#39; Define a vbCustomCrypto class that inherits from the AsymmetricAlgorithm\n    &#39; class.\n    Class vbCustomCrypto\n        Inherits System.Security.Cryptography.AsymmetricAlgorithm\n\n        &#39; Declare local member variables.\n        Private cspParameters As CspParameters\n        Private ReadOnly keySizes() As keySizes = {New keySizes(8, 64, 8)}\n\n        &#39; Initialize a vbCustomCrypto with the default key size of 8.\n        Public Sub New()\n            Me.KeySize = 8\n        End Sub\n\n        &#39; Initialize a vbCustomCrypto with the specified key size.\n        Public Sub New(ByVal keySize As Integer)\n            Me.KeySize = keySize\n        End Sub\n\n        &#39; Modify the KeySizeValue property inherited from the Asymmetric\n        &#39; class. Prior to setting the value, ensure it falls within the\n        &#39; range identified in the local keySizes member variable.\n        Public Overrides Property KeySize() As Integer\n            Get\n                Return KeySizeValue\n            End Get\n            Set(ByVal Value As Integer)\n                For i As Int16 = 0 To keySizes.Length - 1 Step i\n                    If (keySizes(i).SkipSize.Equals(0)) Then\n                        If (keySizes(i).MinSize.Equals(Value)) Then\n                            KeySizeValue = Value\n                            Return\n                        End If\n                    Else\n                        For j As Integer = keySizes(i).MinSize _\n                            To keySizes(i).MaxSize _\n                            Step keySizes(i).SkipSize\n                            If (j.Equals(Value)) Then\n                                KeySizeValue = Value\n                                Return\n                            End If\n                        Next\n                    End If\n                Next\n                &#39; If the key does not fall within the range identified \n                &#39; in the keySizes member variable, throw an exception.\n                Throw New CryptographicException(&quot;Invalid key size.&quot;)\n            End Set\n        End Property\n        &#39; Accessor function for keySizes member variable.\n        public Overrides Readonly Property LegalKeySizes as KeySizes()\n            Get\n                Return keySizes\n            End Get\n        End Property\n        &#39; Initialize the parameters with default values.\n        Public Sub InitializeParameters()\n            cspParameters = New CspParameters\n            cspParameters.ProviderName = &quot;Contoso&quot;\n            cspParameters.KeyContainerName = &quot;SecurityBin1&quot;\n            cspParameters.KeyNumber = 1\n            cspParameters.ProviderType = 2\n        End Sub\n\n        &#39; Parse specified xmlString for values to populate the CspParams\n        &#39; Expected XML schema:\n        &#39;  &lt;CustomCryptoKeyValue&gt;\n        &#39;      &lt;ProviderName&gt;&lt;/ProviderName&gt;\n        &#39;      &lt;KeyContainerName&gt;&lt;/KeyContainerName&gt;\n        &#39;      &lt;KeyNumber&gt;&lt;/KeyNumber&gt;\n        &#39;      &lt;ProviderType&gt;&lt;/ProviderType&gt;\n        &#39;  &lt;/CustomCryptoKeyValue&gt;\n        Public Overrides Sub FromXmlString(ByVal xmlString As String)\n            If Not xmlString Is Nothing Then\n                Dim doc As New XmlDocument\n                doc.LoadXml(xmlString)\n                Dim firstNode As XmlNode = doc.FirstChild\n                Dim nodeList As XmlNodeList\n\n                &#39; Assemble parameters from values in each XML element.\n                cspParameters = New CspParameters\n\n                &#39; KeyContainerName is optional.\n                nodeList = doc.GetElementsByTagName(&quot;KeyContainerName&quot;)\n                Dim keyName As String = nodeList.Item(0).InnerText\n                If Not keyName Is Nothing Then\n                    cspParameters.KeyContainerName = keyName\n                End If\n\n                &#39; KeyNumber is optional.\n                nodeList = doc.GetElementsByTagName(&quot;KeyNumber&quot;)\n                Dim keyNumber As String = nodeList.Item(0).InnerText\n                If Not keyNumber Is Nothing Then\n                    cspParameters.KeyNumber = Int32.Parse(keyNumber)\n                End If\n\n                &#39; ProviderName is optional.\n                nodeList = doc.GetElementsByTagName(&quot;ProviderName&quot;)\n                Dim providerName As String = nodeList.Item(0).InnerText\n                If Not providerName Is Nothing Then\n                    cspParameters.ProviderName = providerName\n                End If\n\n                &#39; ProviderType is optional.\n                nodeList = doc.GetElementsByTagName(&quot;ProviderType&quot;)\n                Dim providerType As String = nodeList.Item(0).InnerText\n                If Not providerType Is Nothing Then\n                    cspParameters.ProviderType = Int32.Parse(providerType)\n                End If\n            Else\n                Throw New ArgumentNullException(&quot;xmlString&quot;)\n            End If\n        End Sub\n\n        &#39; Create an XML string representation of the parameters in the current\n        &#39; vbCustomCrypto object.\n        Public Overrides Function ToXmlString( _\n            ByVal includePrivateParameters As Boolean) As String\n\n            Dim keyContainerName As String = &quot;&quot;\n            Dim keyNumber As String = &quot;&quot;\n            Dim providerName As String = &quot;&quot;\n            Dim providerType As String = &quot;&quot;\n\n            If Not cspParameters Is Nothing Then\n                keyContainerName = cspParameters.KeyContainerName\n                keyNumber = cspParameters.KeyNumber.ToString()\n                providerName = cspParameters.ProviderName\n                providerType = cspParameters.ProviderType.ToString()\n            End If\n\n            Dim xmlBuilder As New StringBuilder\n            xmlBuilder.Append(&quot;&lt;CustomCryptoKeyValue&gt;&quot;)\n\n            xmlBuilder.Append(&quot;&lt;KeyContainerName&gt;&quot;)\n            xmlBuilder.Append(keyContainerName)\n            xmlBuilder.Append(&quot;&lt;/KeyContainerName&gt;&quot;)\n\n            xmlBuilder.Append(&quot;&lt;KeyNumber&gt;&quot;)\n            xmlBuilder.Append(keyNumber)\n            xmlBuilder.Append(&quot;&lt;/KeyNumber&gt;&quot;)\n\n            xmlBuilder.Append(&quot;&lt;ProviderName&gt;&quot;)\n            xmlBuilder.Append(providerName)\n            xmlBuilder.Append(&quot;&lt;/ProviderName&gt;&quot;)\n\n            xmlBuilder.Append(&quot;&lt;ProviderType&gt;&quot;)\n            xmlBuilder.Append(providerType)\n            xmlBuilder.Append(&quot;&lt;/ProviderType&gt;&quot;)\n\n            xmlBuilder.Append(&quot;&lt;/CustomCryptoKeyValue&gt;&quot;)\n            Return (xmlBuilder.ToString())\n        End Function\n\n        &#39; Return the name for the key exchange algorithm.\n        Public Overrides ReadOnly Property KeyExchangeAlgorithm() As String\n            Get\n                Return &quot;RSA-PKCS1-KeyEx&quot;\n            End Get\n        End Property\n\n        &#39; Retrieves the name of the signature alogrithm.\n        Public Overrides ReadOnly Property SignatureAlgorithm() As String\n            Get\n                Return &quot;http://www.w3.org/2000/09/xmldsig#rsa-sha1&quot;\n            End Get\n        End Property\n\n        &#39; Required member for implementing the AsymmetricAlgorithm class.\n        Protected Overrides Sub Dispose(ByVal disposing As Boolean)\n\n        End Sub\n\n        &#39; The create function attempts to create a vbCustomCrypto object using\n        &#39; the assembly name. This functionality requires modification of the\n        &#39; machine.config file. Add the following section to the configuration\n        &#39; element and modify the values of the cryptoClass to reflect what is\n        &#39; installed in your machines GAC.\n        &#39;&lt;mscorlib&gt;\n        &#39;    &lt;cryptographySettings&gt;\n        &#39;      &lt;cryptoNameMapping&gt;\n        &#39;        &lt;cryptoClasses&gt;\n        &#39;          &lt;cryptoClass vbCustomCrypto=&quot;Contoso.vbCustomCrypto, \n        &#39;            vbCustomCrypto, \n        &#39;            Culture=neutral, \n        &#39;            PublicKeyToken=fdb9f9c4851028bf, \n        &#39;            Version=1.0.1448.27640&quot; /&gt;\n        &#39;        &lt;/cryptoClasses&gt;\n        &#39;        &lt;nameEntry name=&quot;Contoso.vbCustomCrypto&quot; \n        &#39;                   class=&quot;vbCustomCrypto&quot; /&gt;\n        &#39;        &lt;nameEntry name=&quot;vbCustomCrypto&quot; class=&quot;vbCustomCrypto&quot; /&gt;\n        &#39;      &lt;/cryptoNameMapping&gt;\n        &#39;    &lt;/cryptographySettings&gt;\n        &#39;&lt;/mscorlib&gt;\n        Public Shadows Function Create() As vbCustomCrypto\n            Return Create(&quot;vbCustomCrypto&quot;)\n        End Function\n\n        &#39; Create a CustomCrypto object by calling CrytoConfig&#39;s\n        &#39; CreateFromName method and casting the type to CustomCrypto.\n        &#39; The create function attempts to create a vbCustomCrypto object using\n        &#39; the assembly name. This functionality requires modification of the\n        &#39; machine.config file. Add the following section to the configuration\n        &#39; element and modify the values of the cryptoClass to reflect what is\n        &#39; installed in your machines GAC.\n        &#39;&lt;mscorlib&gt;\n        &#39;    &lt;cryptographySettings&gt;\n        &#39;      &lt;cryptoNameMapping&gt;\n        &#39;        &lt;cryptoClasses&gt;\n        &#39;          &lt;cryptoClass vbCustomCrypto=&quot;Contoso.vbCustomCrypto, \n        &#39;            vbCustomCrypto, \n        &#39;            Culture=neutral, \n        &#39;            PublicKeyToken=fdb9f9c4851028bf, \n        &#39;            Version=1.0.1448.27640&quot; /&gt;\n        &#39;        &lt;/cryptoClasses&gt;\n        &#39;        &lt;nameEntry name=&quot;Contoso.vbCustomCrypto&quot; \n        &#39;                   class=&quot;vbCustomCrypto&quot; /&gt;\n        &#39;        &lt;nameEntry name=&quot;vbCustomCrypto&quot; class=&quot;vbCustomCrypto&quot; /&gt;\n        &#39;      &lt;/cryptoNameMapping&gt;\n        &#39;    &lt;/cryptographySettings&gt;\n        &#39;&lt;/mscorlib&gt;\n        Public Shadows Function Create( _\n            ByVal algorithmName As String) As vbCustomCrypto\n\n            Return CType( _\n                CryptoConfig.CreateFromName(algorithmName), _\n                vbCustomCrypto)\n\n        End Function\n    End Class\n    Class Form1\n        Inherits System.Windows.Forms.Form\n\n        &#39; Event handler for Run button.\n        Private Sub Button1_Click( _\n            ByVal sender As System.Object, _\n            ByVal e As System.EventArgs) Handles Button1.Click\n\n            tbxOutput.Cursor = Cursors.WaitCursor\n            tbxOutput.Text = &quot;&quot;\n\n            &#39; Construct a CustomCrypto object and initialize its\n            &#39; CspParameters.\n            Dim customCrypto As New Contoso.vbCustomCrypto\n            customCrypto.InitializeParameters()\n\n            &#39; Display properties of the current vbCustomCrypto object.\n            WriteLine(&quot;*** CustomCrypto created with default parameters:&quot;)\n            DisplayProperties(customCrypto)\n\n            &#39; Release all the resources used by this instance of CustomCrytpo.\n            customCrypto.Clear()\n\n            customCrypto = New Contoso.vbCustomCrypto(64)\n            &#39; Create new parameters and set them by using the\n            &#39; FromXmlString method.\n            Dim parameterXml As String = &quot;&lt;CustomCryptoKeyValue&gt;&quot;\n            parameterXml += &quot;&lt;ProviderName&gt;Contoso&lt;/ProviderName&gt;&quot;\n            parameterXml += &quot;&lt;KeyContainerName&gt;SecurityBin2&quot;\n            parameterXml += &quot;&lt;/KeyContainerName&gt;&quot;\n            parameterXml += &quot;&lt;KeyNumber&gt;1&lt;/KeyNumber&gt;&quot;\n            parameterXml += &quot;&lt;ProviderType&gt;2&lt;/ProviderType&gt;&quot;\n            parameterXml += &quot;&lt;/CustomCryptoKeyValue&gt;&quot;\n            customCrypto.FromXmlString(parameterXml)\n\n            &#39; Display the properties of a customCrypto object created with\n            &#39; custom parameters.\n            WriteLine(vbCrLf + &quot;*** &quot; + _\n                &quot;CustomCrypto created with custom parameters:&quot;)\n            DisplayProperties(customCrypto)\n\n            &#39; Create an object by using the assembly name.\n            Try\n                Dim createdCrypto As Contoso.vbCustomCrypto\n                createdCrypto = customCrypto.Create(&quot;vbCustomCrypto&quot;)\n\n                If (Not createdCrypto Is Nothing) Then\n                    Write(vbCrLf + &quot;*** Successfully created vbCustomCrytpo &quot;)\n                    WriteLine(&quot;from the Create method.&quot;)\n\n                    DisplayProperties(createdCrypto)\n                Else\n                    Write(&quot;Unable to create CustomCrytpo from &quot;)\n                    WriteLine(&quot; the Create method.&quot;)\n                End If\n            Catch ex As Exception\n                WriteLine(ex.ToString())\n            End Try\n\n            &#39; Align interface and conclude application.\n            WriteLine(&quot;This sample completed successfully;&quot; + _\n                &quot; press Exit to continue.&quot;)\n\n            &#39; Reset the cursor.\n            tbxOutput.Cursor = Cursors.Default\n        End Sub\n        &#39; Display the properties of the specified CustomCrypto object to\n        &#39; the output texbox.\n        Public Sub DisplayProperties( _\n            ByVal customCrypto As Contoso.vbCustomCrypto)\n\n            Try\n                &#39; Retrieve the class description for the customCrypto object.\n                Dim classDescription As String = customCrypto.ToString()\n\n                WriteLine(classDescription)\n                WriteLine(&quot;KeyExchangeAlgorithm: &quot; + _\n                    customCrypto.KeyExchangeAlgorithm)\n                WriteLine(&quot;SignatureAlgorithm: &quot; + _\n                    customCrypto.SignatureAlgorithm)\n                WriteLine(&quot;KeySize: &quot; + customCrypto.KeySize.ToString())\n                WriteLine(&quot;Parameters described in Xml format:&quot;)\n                WriteLine(customCrypto.ToXmlString(True))\n\n                &#39; Display the MinSize, MaxSize, and SkipSize properties of \n                &#39; each KeySize item in the local keySizes member variable.\n                Dim legalKeySizes() As KeySizes = customCrypto.LegalKeySizes\n                If (legalKeySizes.Length &gt; 0) Then\n                    For i As Integer = 0 To legalKeySizes.Length - 1 Step 1\n                        Write(&quot;Keysize&quot; + i.ToString() + &quot; min, max, step: &quot;)\n                        Write(legalKeySizes(i).MinSize.ToString() + &quot;, &quot;)\n                        Write(legalKeySizes(i).MaxSize.ToString() + &quot;, &quot;)\n                        Write(legalKeySizes(i).SkipSize.ToString() + &quot;, &quot;)\n                        WriteLine(&quot;&quot;)\n                    Next\n                End If\n            Catch ex As Exception\n                WriteLine(&quot;Caught unexpected exception: &quot; + ex.ToString())\n            End Try\n        End Sub\n        &#39; Write the specified message and carriage return to the output\n        &#39; textbox.\n        Private Sub WriteLine(ByVal message As String)\n            tbxOutput.AppendText(message + vbCrLf)\n        End Sub\n        &#39; Write the specified message to the output textbox.\n        Private Sub Write(ByVal message As String)\n            tbxOutput.AppendText(message)\n        End Sub\n        &#39; Event handler for Exit button.\n        Private Sub Button2_Click( _\n            ByVal sender As System.Object, _\n            ByVal e As System.EventArgs) Handles Button2.Click\n\n            Application.Exit()\n        End Sub\n\n\n        Public Sub New()\n            MyBase.New()\n\n            &#39;This call is required by the Windows Form Designer.\n            InitializeComponent()\n\n            &#39;Add any initialization after the InitializeComponent() call\n\n        End Sub\n\n        &#39;Form overrides dispose to clean up the component list.\n        Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)\n            If disposing Then\n                If Not (components Is Nothing) Then\n                    components.Dispose()\n                End If\n            End If\n            MyBase.Dispose(disposing)\n        End Sub\n\n        &#39;Required by the Windows Form Designer\n        Private components As System.ComponentModel.IContainer\n\n        &#39;NOTE: The following procedure is required by the Windows Form \n        &#39;Designer. It can be modified using the Windows Form Designer. \n        &#39;Do not modify it using the code editor.\n        Friend WithEvents Panel2 As System.Windows.Forms.Panel\n        Friend WithEvents Panel1 As System.Windows.Forms.Panel\n        Friend WithEvents Button1 As System.Windows.Forms.Button\n        Friend WithEvents Button2 As System.Windows.Forms.Button\n        Friend WithEvents tbxOutput As System.Windows.Forms.RichTextBox\n        &lt;System.Diagnostics.DebuggerStepThrough()&gt; _\n        Private Sub InitializeComponent()\n            Me.Panel2 = New System.Windows.Forms.Panel\n            Me.Button1 = New System.Windows.Forms.Button\n            Me.Button2 = New System.Windows.Forms.Button\n            Me.Panel1 = New System.Windows.Forms.Panel\n            Me.tbxOutput = New System.Windows.Forms.RichTextBox\n            Me.Panel2.SuspendLayout()\n            Me.Panel1.SuspendLayout()\n            Me.SuspendLayout()\n            &#39;\n            &#39;Panel2\n            &#39;\n            Me.Panel2.Controls.Add(Me.Button1)\n            Me.Panel2.Controls.Add(Me.Button2)\n            Me.Panel2.Dock = System.Windows.Forms.DockStyle.Bottom\n            Me.Panel2.DockPadding.All = 20\n            Me.Panel2.Location = New System.Drawing.Point(0, 320)\n            Me.Panel2.Name = &quot;Panel2&quot;\n            Me.Panel2.Size = New System.Drawing.Size(616, 64)\n            Me.Panel2.TabIndex = 1\n            &#39;\n            &#39;Button1\n            &#39;\n            Me.Button1.Dock = System.Windows.Forms.DockStyle.Right\n            Me.Button1.Font = New System.Drawing.Font( _\n                &quot;Microsoft Sans Serif&quot;, _\n                9.0!, _\n                System.Drawing.FontStyle.Regular, _\n                System.Drawing.GraphicsUnit.Point, _\n                CType(0, Byte))\n            Me.Button1.Location = New System.Drawing.Point(446, 20)\n            Me.Button1.Name = &quot;Button1&quot;\n            Me.Button1.Size = New System.Drawing.Size(75, 24)\n            Me.Button1.TabIndex = 2\n            Me.Button1.Text = &quot;&amp;Run&quot;\n            &#39;\n            &#39;Button2\n            &#39;\n            Me.Button2.Dock = System.Windows.Forms.DockStyle.Right\n            Me.Button2.Font = New System.Drawing.Font( _\n                &quot;Microsoft Sans Serif&quot;, _\n                9.0!, _\n                System.Drawing.FontStyle.Regular, _\n                System.Drawing.GraphicsUnit.Point, _\n                CType(0, Byte))\n            Me.Button2.Location = New System.Drawing.Point(521, 20)\n            Me.Button2.Name = &quot;Button2&quot;\n            Me.Button2.Size = New System.Drawing.Size(75, 24)\n            Me.Button2.TabIndex = 3\n            Me.Button2.Text = &quot;E&amp;xit&quot;\n            &#39;\n            &#39;Panel1\n            &#39;\n            Me.Panel1.Controls.Add(Me.tbxOutput)\n            Me.Panel1.Dock = System.Windows.Forms.DockStyle.Fill\n            Me.Panel1.DockPadding.All = 20\n            Me.Panel1.Location = New System.Drawing.Point(0, 0)\n            Me.Panel1.Name = &quot;Panel1&quot;\n            Me.Panel1.Size = New System.Drawing.Size(616, 320)\n            Me.Panel1.TabIndex = 2\n            &#39;\n            &#39;tbxOutput\n            &#39;\n            Me.tbxOutput.AccessibleDescription = _\n                &quot;Displays output from application.&quot;\n            Me.tbxOutput.AccessibleName = &quot;Output textbox.&quot;\n            Me.tbxOutput.Dock = System.Windows.Forms.DockStyle.Fill\n            Me.tbxOutput.Location = New System.Drawing.Point(20, 20)\n            Me.tbxOutput.Name = &quot;tbxOutput&quot;\n            Me.tbxOutput.Size = New System.Drawing.Size(576, 280)\n            Me.tbxOutput.TabIndex = 1\n            Me.tbxOutput.Text = &quot;Click the Run button to run the application.&quot;\n            &#39;\n            &#39;Form1\n            &#39;\n            Me.AutoScaleBaseSize = New System.Drawing.Size(6, 15)\n            Me.ClientSize = New System.Drawing.Size(616, 384)\n            Me.Controls.Add(Me.Panel1)\n            Me.Controls.Add(Me.Panel2)\n            Me.Name = &quot;Form1&quot;\n            Me.Text = &quot;AsymmetricAlgorithm&quot;\n            Me.Panel2.ResumeLayout(False)\n            Me.Panel1.ResumeLayout(False)\n            Me.ResumeLayout(False)\n\n        End Sub\n\n    End Class\nEnd Namespace\n&#39;\n&#39; This sample produces the following output:\n&#39;\n&#39; *** CustomCrypto created with default parameters:\n&#39; Contoso.vbCustomCrypto\n&#39; KeyExchangeAlgorithm: RSA-PKCS1-KeyEx\n&#39; SignatureAlgorithm: http://www.w3.org/2000/09/xmldsig#rsa-sha1\n&#39; KeySize: 8\n&#39; Parameters described in Xml format:\n&#39; &lt;CustomCryptoKeyValue&gt;&lt;KeyContainerName&gt;SecurityBin1&lt;/KeyContainerName&gt;\n&#39; &lt;KeyNumber&gt;1&lt;/KeyNumber&gt;&lt;ProviderName&gt;Contoso&lt;/ProviderName&gt;\n&#39; &lt;ProviderType&gt;2&lt;/ProviderType&gt;&lt;/CustomCryptoKeyValue&gt;\n&#39; Keysize0 min, max, step: 8, 64, 8, \n&#39; \n&#39; *** CustomCrypto created with custom parameters:\n&#39; Contoso.vbCustomCrypto\n&#39; KeyExchangeAlgorithm: RSA-PKCS1-KeyEx\n&#39; SignatureAlgorithm: http://www.w3.org/2000/09/xmldsig#rsa-sha1\n&#39; KeySize: 64\n&#39; Parameters described in Xml format:\n&#39; &lt;CustomCryptoKeyValue&gt;&lt;KeyContainerName&gt;SecurityBin2&lt;/KeyContainerName&gt;\n&#39; &lt;KeyNumber&gt;1&lt;/KeyNumber&gt;&lt;ProviderName&gt;Contoso&lt;/ProviderName&gt;\n&#39; &lt;ProviderType&gt;2&lt;/ProviderType&gt;&lt;/CustomCryptoKeyValue&gt;\n&#39; Keysize0 min, max, step: 8, 64, 8, \n&#39; Unable to create CustomCrytpo from  the Create method\n&#39; This sample completed successfully; press Enter to exit.\n</code></pre><p> Here&#39;s an additional class that demonstrates how to use the custom class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.AsymmetricAlgorithm#3\">    class CustomCryptoImpl\n    {\n        [STAThread]\n        static void Main(string[] args)\n        {\n            // Construct a CustomCrypto object and initialize its\n            // CspParameters.\n            CustomCrypto customCrypto = new CustomCrypto();\n            customCrypto.InitializeParameters();\n\n            // Display properties of the current customCrypto object.\n            Console.WriteLine(&quot;*** CustomCrypto created with default &quot; + \n                &quot;parameters:&quot;);\n            DisplayProperties(customCrypto);\n\n            // Release all the resources used by this instance of \n            // CustomCrytpo.\n            customCrypto.Clear();\n\n            customCrypto = new CustomCrypto(64);\n            // Create new parameters and set them by using the FromXmlString\n            // method.\n            string parameterXml = &quot;&lt;CustomCryptoKeyValue&gt;&quot;;\n            parameterXml += &quot;&lt;ProviderName&gt;Contoso&lt;/ProviderName&gt;&quot;;\n            parameterXml += &quot;&lt;KeyContainerName&gt;SecurityBin2&quot;;\n            parameterXml += &quot;&lt;/KeyContainerName&gt;&quot;;\n            parameterXml += &quot;&lt;KeyNumber&gt;1&lt;/KeyNumber&gt;&quot;;\n            parameterXml += &quot;&lt;ProviderType&gt;2&lt;/ProviderType&gt;&quot;;\n            parameterXml += &quot;&lt;/CustomCryptoKeyValue&gt;&quot;;\n            customCrypto.FromXmlString(parameterXml);\n\n            // Display the properties of a customCrypto object created with\n            // custom parameters.\n            Console.WriteLine(&quot;\\n*** &quot; + \n                &quot;CustomCrypto created with custom parameters:&quot;);\n            DisplayProperties(customCrypto);\n\n            // Create an object by using the assembly name.\n            try\n            {\n                CustomCrypto myCryptoA = CustomCrypto.Create(&quot;CustomCrypto&quot;);\n                if (myCryptoA != null)\n                {\n                    Console.Write(&quot;\\n*** &quot; + \n                        &quot;Successfully created CustomCrytpo from&quot;);\n                    Console.WriteLine(&quot; the Create method.&quot;);\n\n                    DisplayProperties(myCryptoA);\n                }\n                else\n                {\n                    Console.Write(&quot;Unable to create CustomCrytpo from &quot;);\n                    Console.WriteLine(&quot; the Create method.&quot;);\n                }\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(ex.ToString());\n            }\n            \n            Console.WriteLine(&quot;This sample completed successfully; &quot; +\n                &quot;press Enter to exit.&quot;);\n            Console.ReadLine();\n        }\n        // Display the properties of the specified CustomCrypto object to the\n        // console.\n        public static void DisplayProperties(CustomCrypto customCrypto)\n        {\n            try\n            {\n                // Retrieve the class description for the customCrypto object.\n                string classDescription = customCrypto.ToString();\n\n                Console.WriteLine(classDescription);\n                Console.Write(&quot;KeyExchangeAlgorithm: &quot;);\n                Console.WriteLine(customCrypto.KeyExchangeAlgorithm);\n                Console.Write(&quot;SignatureAlgorithm: &quot;);\n                Console.WriteLine(customCrypto.SignatureAlgorithm);\n                Console.WriteLine(&quot;KeySize: &quot; + customCrypto.KeySize);\n                Console.WriteLine(&quot;Parameters described in Xml format:&quot;);\n                Console.WriteLine(customCrypto.ToXmlString(true));\n\n                // Display the MinSize, MaxSize, and SkipSize properties of \n                // each KeySize item in the local keySizes member variable.\n                KeySizes[] legalKeySizes = customCrypto.LegalKeySizes;\n                if (legalKeySizes.Length &gt; 0)\n                {\n                    for (int i=0; i &lt; legalKeySizes.Length; i++)\n                    {\n                        Console.Write(&quot;Keysize&quot; + i + &quot; min, max, step: &quot;);\n                        Console.Write(legalKeySizes[i].MinSize + &quot;, &quot;);\n                        Console.Write(legalKeySizes[i].MaxSize + &quot;, &quot;);\n                        Console.WriteLine(legalKeySizes[i].SkipSize + &quot;, &quot;);\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine(&quot;Caught unexpected exception: &quot; + \n                    ex.ToString());\n            }\n        }\n    }\n}\n//\n// This sample produces the following output:\n//\n// *** CustomCrypto created with default parameters:\n// Contoso.vbCustomCrypto\n// KeyExchangeAlgorithm: RSA-PKCS1-KeyEx\n// SignatureAlgorithm: http://www.w3.org/2000/09/xmldsig#rsa-sha1\n// KeySize: 8\n// Parameters described in Xml format:\n// &lt;CustomCryptoKeyValue&gt;&lt;KeyContainerName&gt;SecurityBin1&lt;/KeyContainerName&gt;\n// &lt;KeyNumber&gt;1&lt;/KeyNumber&gt;&lt;ProviderName&gt;Contoso&lt;/ProviderName&gt;\n// &lt;ProviderType&gt;2&lt;/ProviderType&gt;&lt;/CustomCryptoKeyValue&gt;\n// Keysize0 min, max, step: 8, 64, 8, \n// \n// *** CustomCrypto created with custom parameters:\n// Contoso.vbCustomCrypto\n// KeyExchangeAlgorithm: RSA-PKCS1-KeyEx\n// SignatureAlgorithm: http://www.w3.org/2000/09/xmldsig#rsa-sha1\n// KeySize: 64\n// Parameters described in Xml format:\n// &lt;CustomCryptoKeyValue&gt;&lt;KeyContainerName&gt;SecurityBin2&lt;/KeyContainerName&gt;\n// &lt;KeyNumber&gt;1&lt;/KeyNumber&gt;&lt;ProviderName&gt;Contoso&lt;/ProviderName&gt;\n// &lt;ProviderType&gt;2&lt;/ProviderType&gt;&lt;/CustomCryptoKeyValue&gt;\n// Keysize0 min, max, step: 8, 64, 8, \n// Unable to create CustomCrytpo from  the Create method\n// This sample completed successfully; press Exit to continue.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.AsymmetricAlgorithm#3\">    Class Form1\n        Inherits System.Windows.Forms.Form\n\n        &#39; Event handler for Run button.\n        Private Sub Button1_Click( _\n            ByVal sender As System.Object, _\n            ByVal e As System.EventArgs) Handles Button1.Click\n\n            tbxOutput.Cursor = Cursors.WaitCursor\n            tbxOutput.Text = &quot;&quot;\n\n            &#39; Construct a CustomCrypto object and initialize its\n            &#39; CspParameters.\n            Dim customCrypto As New Contoso.vbCustomCrypto\n            customCrypto.InitializeParameters()\n\n            &#39; Display properties of the current vbCustomCrypto object.\n            WriteLine(&quot;*** CustomCrypto created with default parameters:&quot;)\n            DisplayProperties(customCrypto)\n\n            &#39; Release all the resources used by this instance of CustomCrytpo.\n            customCrypto.Clear()\n\n            customCrypto = New Contoso.vbCustomCrypto(64)\n            &#39; Create new parameters and set them by using the\n            &#39; FromXmlString method.\n            Dim parameterXml As String = &quot;&lt;CustomCryptoKeyValue&gt;&quot;\n            parameterXml += &quot;&lt;ProviderName&gt;Contoso&lt;/ProviderName&gt;&quot;\n            parameterXml += &quot;&lt;KeyContainerName&gt;SecurityBin2&quot;\n            parameterXml += &quot;&lt;/KeyContainerName&gt;&quot;\n            parameterXml += &quot;&lt;KeyNumber&gt;1&lt;/KeyNumber&gt;&quot;\n            parameterXml += &quot;&lt;ProviderType&gt;2&lt;/ProviderType&gt;&quot;\n            parameterXml += &quot;&lt;/CustomCryptoKeyValue&gt;&quot;\n            customCrypto.FromXmlString(parameterXml)\n\n            &#39; Display the properties of a customCrypto object created with\n            &#39; custom parameters.\n            WriteLine(vbCrLf + &quot;*** &quot; + _\n                &quot;CustomCrypto created with custom parameters:&quot;)\n            DisplayProperties(customCrypto)\n\n            &#39; Create an object by using the assembly name.\n            Try\n                Dim createdCrypto As Contoso.vbCustomCrypto\n                createdCrypto = customCrypto.Create(&quot;vbCustomCrypto&quot;)\n\n                If (Not createdCrypto Is Nothing) Then\n                    Write(vbCrLf + &quot;*** Successfully created vbCustomCrytpo &quot;)\n                    WriteLine(&quot;from the Create method.&quot;)\n\n                    DisplayProperties(createdCrypto)\n                Else\n                    Write(&quot;Unable to create CustomCrytpo from &quot;)\n                    WriteLine(&quot; the Create method.&quot;)\n                End If\n            Catch ex As Exception\n                WriteLine(ex.ToString())\n            End Try\n\n            &#39; Align interface and conclude application.\n            WriteLine(&quot;This sample completed successfully;&quot; + _\n                &quot; press Exit to continue.&quot;)\n\n            &#39; Reset the cursor.\n            tbxOutput.Cursor = Cursors.Default\n        End Sub\n        &#39; Display the properties of the specified CustomCrypto object to\n        &#39; the output texbox.\n        Public Sub DisplayProperties( _\n            ByVal customCrypto As Contoso.vbCustomCrypto)\n\n            Try\n                &#39; Retrieve the class description for the customCrypto object.\n                Dim classDescription As String = customCrypto.ToString()\n\n                WriteLine(classDescription)\n                WriteLine(&quot;KeyExchangeAlgorithm: &quot; + _\n                    customCrypto.KeyExchangeAlgorithm)\n                WriteLine(&quot;SignatureAlgorithm: &quot; + _\n                    customCrypto.SignatureAlgorithm)\n                WriteLine(&quot;KeySize: &quot; + customCrypto.KeySize.ToString())\n                WriteLine(&quot;Parameters described in Xml format:&quot;)\n                WriteLine(customCrypto.ToXmlString(True))\n\n                &#39; Display the MinSize, MaxSize, and SkipSize properties of \n                &#39; each KeySize item in the local keySizes member variable.\n                Dim legalKeySizes() As KeySizes = customCrypto.LegalKeySizes\n                If (legalKeySizes.Length &gt; 0) Then\n                    For i As Integer = 0 To legalKeySizes.Length - 1 Step 1\n                        Write(&quot;Keysize&quot; + i.ToString() + &quot; min, max, step: &quot;)\n                        Write(legalKeySizes(i).MinSize.ToString() + &quot;, &quot;)\n                        Write(legalKeySizes(i).MaxSize.ToString() + &quot;, &quot;)\n                        Write(legalKeySizes(i).SkipSize.ToString() + &quot;, &quot;)\n                        WriteLine(&quot;&quot;)\n                    Next\n                End If\n            Catch ex As Exception\n                WriteLine(&quot;Caught unexpected exception: &quot; + ex.ToString())\n            End Try\n        End Sub\n        &#39; Write the specified message and carriage return to the output\n        &#39; textbox.\n        Private Sub WriteLine(ByVal message As String)\n            tbxOutput.AppendText(message + vbCrLf)\n        End Sub\n        &#39; Write the specified message to the output textbox.\n        Private Sub Write(ByVal message As String)\n            tbxOutput.AppendText(message)\n        End Sub\n        &#39; Event handler for Exit button.\n        Private Sub Button2_Click( _\n            ByVal sender As System.Object, _\n            ByVal e As System.EventArgs) Handles Button2.Click\n\n            Application.Exit()\n        End Sub\n\n\n        Public Sub New()\n            MyBase.New()\n\n            &#39;This call is required by the Windows Form Designer.\n            InitializeComponent()\n\n            &#39;Add any initialization after the InitializeComponent() call\n\n        End Sub\n\n        &#39;Form overrides dispose to clean up the component list.\n        Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)\n            If disposing Then\n                If Not (components Is Nothing) Then\n                    components.Dispose()\n                End If\n            End If\n            MyBase.Dispose(disposing)\n        End Sub\n\n        &#39;Required by the Windows Form Designer\n        Private components As System.ComponentModel.IContainer\n\n        &#39;NOTE: The following procedure is required by the Windows Form \n        &#39;Designer. It can be modified using the Windows Form Designer. \n        &#39;Do not modify it using the code editor.\n        Friend WithEvents Panel2 As System.Windows.Forms.Panel\n        Friend WithEvents Panel1 As System.Windows.Forms.Panel\n        Friend WithEvents Button1 As System.Windows.Forms.Button\n        Friend WithEvents Button2 As System.Windows.Forms.Button\n        Friend WithEvents tbxOutput As System.Windows.Forms.RichTextBox\n        &lt;System.Diagnostics.DebuggerStepThrough()&gt; _\n        Private Sub InitializeComponent()\n            Me.Panel2 = New System.Windows.Forms.Panel\n            Me.Button1 = New System.Windows.Forms.Button\n            Me.Button2 = New System.Windows.Forms.Button\n            Me.Panel1 = New System.Windows.Forms.Panel\n            Me.tbxOutput = New System.Windows.Forms.RichTextBox\n            Me.Panel2.SuspendLayout()\n            Me.Panel1.SuspendLayout()\n            Me.SuspendLayout()\n            &#39;\n            &#39;Panel2\n            &#39;\n            Me.Panel2.Controls.Add(Me.Button1)\n            Me.Panel2.Controls.Add(Me.Button2)\n            Me.Panel2.Dock = System.Windows.Forms.DockStyle.Bottom\n            Me.Panel2.DockPadding.All = 20\n            Me.Panel2.Location = New System.Drawing.Point(0, 320)\n            Me.Panel2.Name = &quot;Panel2&quot;\n            Me.Panel2.Size = New System.Drawing.Size(616, 64)\n            Me.Panel2.TabIndex = 1\n            &#39;\n            &#39;Button1\n            &#39;\n            Me.Button1.Dock = System.Windows.Forms.DockStyle.Right\n            Me.Button1.Font = New System.Drawing.Font( _\n                &quot;Microsoft Sans Serif&quot;, _\n                9.0!, _\n                System.Drawing.FontStyle.Regular, _\n                System.Drawing.GraphicsUnit.Point, _\n                CType(0, Byte))\n            Me.Button1.Location = New System.Drawing.Point(446, 20)\n            Me.Button1.Name = &quot;Button1&quot;\n            Me.Button1.Size = New System.Drawing.Size(75, 24)\n            Me.Button1.TabIndex = 2\n            Me.Button1.Text = &quot;&amp;Run&quot;\n            &#39;\n            &#39;Button2\n            &#39;\n            Me.Button2.Dock = System.Windows.Forms.DockStyle.Right\n            Me.Button2.Font = New System.Drawing.Font( _\n                &quot;Microsoft Sans Serif&quot;, _\n                9.0!, _\n                System.Drawing.FontStyle.Regular, _\n                System.Drawing.GraphicsUnit.Point, _\n                CType(0, Byte))\n            Me.Button2.Location = New System.Drawing.Point(521, 20)\n            Me.Button2.Name = &quot;Button2&quot;\n            Me.Button2.Size = New System.Drawing.Size(75, 24)\n            Me.Button2.TabIndex = 3\n            Me.Button2.Text = &quot;E&amp;xit&quot;\n            &#39;\n            &#39;Panel1\n            &#39;\n            Me.Panel1.Controls.Add(Me.tbxOutput)\n            Me.Panel1.Dock = System.Windows.Forms.DockStyle.Fill\n            Me.Panel1.DockPadding.All = 20\n            Me.Panel1.Location = New System.Drawing.Point(0, 0)\n            Me.Panel1.Name = &quot;Panel1&quot;\n            Me.Panel1.Size = New System.Drawing.Size(616, 320)\n            Me.Panel1.TabIndex = 2\n            &#39;\n            &#39;tbxOutput\n            &#39;\n            Me.tbxOutput.AccessibleDescription = _\n                &quot;Displays output from application.&quot;\n            Me.tbxOutput.AccessibleName = &quot;Output textbox.&quot;\n            Me.tbxOutput.Dock = System.Windows.Forms.DockStyle.Fill\n            Me.tbxOutput.Location = New System.Drawing.Point(20, 20)\n            Me.tbxOutput.Name = &quot;tbxOutput&quot;\n            Me.tbxOutput.Size = New System.Drawing.Size(576, 280)\n            Me.tbxOutput.TabIndex = 1\n            Me.tbxOutput.Text = &quot;Click the Run button to run the application.&quot;\n            &#39;\n            &#39;Form1\n            &#39;\n            Me.AutoScaleBaseSize = New System.Drawing.Size(6, 15)\n            Me.ClientSize = New System.Drawing.Size(616, 384)\n            Me.Controls.Add(Me.Panel1)\n            Me.Controls.Add(Me.Panel2)\n            Me.Name = &quot;Form1&quot;\n            Me.Text = &quot;AsymmetricAlgorithm&quot;\n            Me.Panel2.ResumeLayout(False)\n            Me.Panel1.ResumeLayout(False)\n            Me.ResumeLayout(False)\n\n        End Sub\n\n    End Class\nEnd Namespace\n&#39;\n&#39; This sample produces the following output:\n&#39;\n&#39; *** CustomCrypto created with default parameters:\n&#39; Contoso.vbCustomCrypto\n&#39; KeyExchangeAlgorithm: RSA-PKCS1-KeyEx\n&#39; SignatureAlgorithm: http://www.w3.org/2000/09/xmldsig#rsa-sha1\n&#39; KeySize: 8\n&#39; Parameters described in Xml format:\n&#39; &lt;CustomCryptoKeyValue&gt;&lt;KeyContainerName&gt;SecurityBin1&lt;/KeyContainerName&gt;\n&#39; &lt;KeyNumber&gt;1&lt;/KeyNumber&gt;&lt;ProviderName&gt;Contoso&lt;/ProviderName&gt;\n&#39; &lt;ProviderType&gt;2&lt;/ProviderType&gt;&lt;/CustomCryptoKeyValue&gt;\n&#39; Keysize0 min, max, step: 8, 64, 8, \n&#39; \n&#39; *** CustomCrypto created with custom parameters:\n&#39; Contoso.vbCustomCrypto\n&#39; KeyExchangeAlgorithm: RSA-PKCS1-KeyEx\n&#39; SignatureAlgorithm: http://www.w3.org/2000/09/xmldsig#rsa-sha1\n&#39; KeySize: 64\n&#39; Parameters described in Xml format:\n&#39; &lt;CustomCryptoKeyValue&gt;&lt;KeyContainerName&gt;SecurityBin2&lt;/KeyContainerName&gt;\n&#39; &lt;KeyNumber&gt;1&lt;/KeyNumber&gt;&lt;ProviderName&gt;Contoso&lt;/ProviderName&gt;\n&#39; &lt;ProviderType&gt;2&lt;/ProviderType&gt;&lt;/CustomCryptoKeyValue&gt;\n&#39; Keysize0 min, max, step: 8, 64, 8, \n&#39; Unable to create CustomCrytpo from  the Create method\n&#39; This sample completed successfully; press Enter to exit.\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.AsymmetricAlgorithm#3\">#using &lt;System.Xml.dll&gt;\n#using &lt;System.Security.dll&gt;\n\nusing namespace System;\nusing namespace System::Xml;\nusing namespace System::Text;\nusing namespace System::Security::Cryptography;\n\n// Display the properties of the specified CustomCrypto object to the\n// console.\nstatic void DisplayProperties(Contoso::CustomCrypto^ customCryptoAlgorithm)\n{\n    // Retrieve the class description for the customCrypto object.\n    String^ classDescription = customCryptoAlgorithm-&gt;ToString();\n\n    Console::WriteLine(classDescription);\n    Console::WriteLine(&quot;KeyExchangeAlgorithm: {0}&quot;,\n        customCryptoAlgorithm-&gt;KeyExchangeAlgorithm);\n    Console::WriteLine(&quot;SignatureAlgorithm: {0}&quot;,\n        customCryptoAlgorithm-&gt;SignatureAlgorithm);\n    Console::WriteLine(&quot;KeySize: {0}&quot;,\n        customCryptoAlgorithm-&gt;KeySize);\n    Console::WriteLine(&quot;Parameters described in Xml format:&quot;);\n    Console::WriteLine(customCryptoAlgorithm-&gt;ToXmlString(true));\n\n    // Display the MinSize, MaxSize, and SkipSize properties of\n    // each KeySize item in the local keySizes member variable.\n    array&lt;KeySizes^&gt;^ legalKeySizes = customCryptoAlgorithm-&gt;LegalKeySizes;\n    for (int i = 0; i &lt; legalKeySizes-&gt;Length; i++)\n    {\n        Console::WriteLine(\n            &quot;Keysize{0} min, max, step: {1}, {2}, {3}, &quot;, i,\n            legalKeySizes[i]-&gt;MinSize,\n            legalKeySizes[i]-&gt;MaxSize,\n            legalKeySizes[i]-&gt;SkipSize);\n    }\n}\n\n[STAThread]\nint main()\n{\n    // Construct a CustomCrypto object and initialize its\n    // CspParameters.\n    Contoso::CustomCrypto^ customCryptoAlgorithm = gcnew Contoso::CustomCrypto();\n    customCryptoAlgorithm-&gt;InitializeParameters();\n\n    // Display properties of the current customCrypto object.\n    Console::WriteLine(\n        &quot;*** CustomCrypto created with default parameters:&quot;);\n    DisplayProperties(customCryptoAlgorithm);\n\n    // Release all the resources used by this instance of\n    // CustomCrypto.\n    customCryptoAlgorithm-&gt;Clear();\n\n    customCryptoAlgorithm = gcnew Contoso::CustomCrypto(64);\n    // Create new parameters and set them by using the FromXmlString\n    // method.\n    String^ parameterXml = &quot;&lt;CustomCryptoKeyValue&gt;&quot; +\n        &quot;&lt;ProviderName&gt;Contoso&lt;/ProviderName&gt;&quot; +\n        &quot;&lt;KeyContainerName&gt;SecurityBin2&lt;/KeyContainerName&gt;&quot; +\n        &quot;&lt;KeyNumber&gt;1&lt;/KeyNumber&gt;&quot; +\n        &quot;&lt;ProviderType&gt;2&lt;/ProviderType&gt;&quot; +\n        &quot;&lt;/CustomCryptoKeyValue&gt;&quot;;\n    customCryptoAlgorithm-&gt;FromXmlString(parameterXml);\n\n    // Display the properties of a customCrypto object created with\n    // custom parameters.\n    Console::WriteLine(\n        &quot;{0}*** CustomCrypto created with custom parameters:&quot;, Environment::NewLine);\n    DisplayProperties(customCryptoAlgorithm);\n\n    // Create an object by using the assembly name.\n    Contoso::CustomCrypto^ cryptoFromAssembly =\n        Contoso::CustomCrypto::Create(&quot;CustomCrypto&quot;);\n    if (cryptoFromAssembly != nullptr)\n    {\n        Console::WriteLine(&quot;{0}*** Successfully created &quot; +\n            &quot;CustomCrypto from the Create method.&quot;, Environment::NewLine);\n        DisplayProperties(cryptoFromAssembly);\n    }\n    else\n    {\n        Console::WriteLine(&quot;Unable to create CustomCrypto from &quot; +\n            &quot;the Create method.&quot;);\n    }\n\n    Console::WriteLine(\n        &quot;This sample completed successfully; press Enter to exit.&quot;);\n    Console::ReadLine();\n}\n\n//\n// This sample produces the following output:\n//\n// *** CustomCrypto created with default parameters:\n// Contoso.vbCustomCrypto\n// KeyExchangeAlgorithm: RSA-PKCS1-KeyEx\n// SignatureAlgorithm: http://www.w3.org/2000/09/xmldsig#rsa-sha1\n// KeySize: 8\n// Parameters described in Xml format:\n// &lt;CustomCryptoKeyValue&gt;&lt;KeyContainerName&gt;SecurityBin1&lt;/KeyContainerName&gt;\n// &lt;KeyNumber&gt;1&lt;/KeyNumber&gt;&lt;ProviderName&gt;Contoso&lt;/ProviderName&gt;\n// &lt;ProviderType&gt;2&lt;/ProviderType&gt;&lt;/CustomCryptoKeyValue&gt;\n// Keysize0 min, max, step: 8, 64, 8,\n//\n// *** CustomCrypto created with custom parameters:\n// Contoso.vbCustomCrypto\n// KeyExchangeAlgorithm: RSA-PKCS1-KeyEx\n// SignatureAlgorithm: http://www.w3.org/2000/09/xmldsig#rsa-sha1\n// KeySize: 64\n// Parameters described in Xml format:\n// &lt;CustomCryptoKeyValue&gt;&lt;KeyContainerName&gt;SecurityBin2&lt;/KeyContainerName&gt;\n// &lt;KeyNumber&gt;1&lt;/KeyNumber&gt;&lt;ProviderName&gt;Contoso&lt;/ProviderName&gt;\n// &lt;ProviderType&gt;2&lt;/ProviderType&gt;&lt;/CustomCryptoKeyValue&gt;\n// Keysize0 min, max, step: 8, 64, 8,\n// Unable to create CustomCrypto from the Create method\n// This sample completed successfully; press Enter to exit.\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Asymmetric cryptographic algorithms, also known as public-key algorithms, require that both sender and receiver maintain a pair of related keys: a private key and a public key. Both keys are unique to the entity. The public key can be made available to anyone; this key is used for encoding data that is sent to a receiver. The private key must be kept private by the receiver; this key is used for decoding messages encoded using the receiver&#39;s public key. The <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> class is an implementation of a public-key algorithm. For an in-depth discussion of public-key encryption and algorithms, see the &quot;Public-Key Encryption&quot; section in <a href=\"../topic/cryptographic%20services\" data-linktype=\"relative-path\">Cryptographic Services</a>. For information about how to use the Strong Name tool (Sn.exe) to create key pairs, see <a href=\"../Topic/How%20to:%20Create%20a%20Public-Private%20Key%20Pair.md\" data-linktype=\"relative-path\">How to: Create a Public-Private Key Pair</a>.  </p>\n<p> You can use public-key systems to form digital signatures. Digital signatures are used to help to protect the integrity of data. For example, to use a public-key system to digitally sign a message, the sender first applies a hash function to the message to create a message digest. The sender then encrypts the message digest with the sender&#39;s private key to create the sender&#39;s personal signature. Upon receiving the message and signature, the receiver decrypts the signature using the sender&#39;s public key to recover the message digest and hashes the message using the same hash algorithm that the sender used. If the message digest that the receiver computes matches the message digest received from the sender, the receiver can assume that the message was not altered while in transit. Note that anyone can verify a signature, because the sender&#39;s public key is common knowledge. This technique does not retain the secrecy of the message; for the message to be secret, it must also be encrypted.  </p>\n<p> The .NET Framework provides the following classes that implement digital signature algorithms: <a class=\"xref\" href=\"system.security.cryptography.dsacryptoserviceprovider\" data-linktype=\"relative-path\">DSACryptoServiceProvider</a>, <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a>, <a class=\"xref\" href=\"system.security.cryptography.ecdsa\" data-linktype=\"relative-path\">ECDsa</a> (base class), and <a class=\"xref\" href=\"system.security.cryptography.ecdsacng\" data-linktype=\"relative-path\">ECDsaCng</a>.  </p>\n<p> The <a class=\"xref\" href=\"system.security.cryptography\" data-linktype=\"relative-path\">System.Security.Cryptography</a> namespace provides concrete classes for <a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a> and <a class=\"xref\" href=\"system.security.cryptography.dsa\" data-linktype=\"relative-path\">DSA</a> only.  </p>\n<p> To learn how to use the RSA algorithm to encrypt and decrypt XML data, and create and verify XML digital signatures, see these articles:  </p>\n<ul>\n<li><p><a href=\"../Topic/How%20to:%20Encrypt%20XML%20Elements%20with%20Asymmetric%20Keys.md\" data-linktype=\"relative-path\">How to: Encrypt XML Elements with Asymmetric Keys</a>  </p>\n</li>\n<li><p><a href=\"../Topic/How%20to:%20Decrypt%20XML%20Elements%20with%20Asymmetric%20Keys.md\" data-linktype=\"relative-path\">How to: Decrypt XML Elements with Asymmetric Keys</a>  </p>\n</li>\n<li><p><a href=\"../Topic/How%20to:%20Sign%20XML%20Documents%20with%20Digital%20Signatures.md\" data-linktype=\"relative-path\">How to: Sign XML Documents with Digital Signatures</a>  </p>\n</li>\n<li><p><a href=\"../Topic/How%20to:%20Verify%20the%20Digital%20Signatures%20of%20XML%20Documents.md\" data-linktype=\"relative-path\">How to: Verify the Digital Signatures of XML Documents</a></p>\n</li>\n</ul>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_AsymmetricAlgorithm__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AsymmetricAlgorithm()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected AsymmetricAlgorithm ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The implementation of the derived class is not valid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>You cannot create an instance of an abstract class. Application code creates a new instance of a derived class. The <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> and <a class=\"xref\" href=\"system.security.cryptography.dsacryptoserviceprovider\" data-linktype=\"relative-path\">DSACryptoServiceProvider</a> classes are the only currently supported implementations.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Fields\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_AsymmetricAlgorithm_KeySizeValue\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">KeySizeValue</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Represents the size, in bits, of the key modulus used by the asymmetric algorithm.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected int KeySizeValue;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The valid key sizes are specified by the particular implementation of the asymmetric algorithm and are listed in the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm#System_Security_Cryptography_AsymmetricAlgorithm_LegalKeySizes_\" data-linktype=\"relative-path\">LegalKeySizes</a> property.  </p>\n<p> This field is accessed through the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm#System_Security_Cryptography_AsymmetricAlgorithm_KeySize_\" data-linktype=\"relative-path\">KeySize</a> property.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_AsymmetricAlgorithm_LegalKeySizesValue\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LegalKeySizesValue</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Specifies the key sizes that are supported by the asymmetric algorithm.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected System.Security.Cryptography.KeySizes[] LegalKeySizesValue;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The asymmetric algorithm supports only key sizes that match an entry in this array.  </p>\n<p> This field is accessed through the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm#System_Security_Cryptography_AsymmetricAlgorithm_LegalKeySizes_\" data-linktype=\"relative-path\">LegalKeySizes</a> property.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_AsymmetricAlgorithm_KeyExchangeAlgorithm\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">KeyExchangeAlgorithm</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>When overridden in a derived class, gets the name of the key exchange algorithm. Otherwise, throws an <a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual string KeyExchangeAlgorithm { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of the key exchange algorithm.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_AsymmetricAlgorithm_KeySize\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">KeySize</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the size, in bits, of the key modulus used by the asymmetric algorithm.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual int KeySize { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The size, in bits, of the key modulus used by the asymmetric algorithm.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The key modulus size is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The valid key sizes are specified by the particular implementation of the asymmetric algorithm and are listed in the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm#System_Security_Cryptography_AsymmetricAlgorithm_LegalKeySizes_\" data-linktype=\"relative-path\">LegalKeySizes</a> property.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_AsymmetricAlgorithm_LegalKeySizes\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LegalKeySizes</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the key sizes that are supported by the asymmetric algorithm.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual System.Security.Cryptography.KeySizes[] LegalKeySizes { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.keysizes\" data-linktype=\"relative-path\">KeySizes</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array that contains the key sizes supported by the asymmetric algorithm.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The asymmetric algorithm supports only key sizes that match an entry in this array.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_AsymmetricAlgorithm_SignatureAlgorithm\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SignatureAlgorithm</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>When implemented in a derived class, gets the name of the signature algorithm. Otherwise, always throws a <a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual string SignatureAlgorithm { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of the signature algorithm.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_AsymmetricAlgorithm_Clear\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Clear()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Releases all resources used by the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Clear ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is a simple call to the <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method.  </p>\n<p> Calling <code>Dispose</code> allows the resources used by the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> class to be reallocated for other purposes. For more information about <code>Dispose</code>, see <a href=\"../topic/cleaning%20up%20unmanaged%20resources\" data-linktype=\"relative-path\">Cleaning Up Unmanaged Resources</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_AsymmetricAlgorithm_Create\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Create()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Creates a default cryptographic object used to perform the asymmetric algorithm.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Security.Cryptography.AsymmetricAlgorithm Create ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A new <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> instance, unless the default settings have been changed with the <a href=\"../Topic/%3CcryptoClass%3E%20Element.md\" data-linktype=\"relative-path\"><cryptoclass> element</cryptoclass></a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_AsymmetricAlgorithm_Create_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Create(String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Creates an instance of the specified implementation of an asymmetric algorithm.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Security.Cryptography.AsymmetricAlgorithm Create (string algName);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>algName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The asymmetric algorithm implementation to use. The following table shows the valid values for the <code>algName</code> parameter and the algorithms they map to.  </p>\n <table><thead><tr><th> Parameter value<br>\n </th><th> Implements<br>\n </th></tr></thead><tbody><tr><td> System.Security.Cryptography.AsymmetricAlgorithm<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a></td></tr><tr><td> RSA<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a></td></tr><tr><td> System.Security.Cryptography.RSA<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.rsa\" data-linktype=\"relative-path\">RSA</a></td></tr><tr><td> DSA<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.dsa\" data-linktype=\"relative-path\">DSA</a></td></tr><tr><td> System.Security.Cryptography.DSA<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.dsa\" data-linktype=\"relative-path\">DSA</a></td></tr><tr><td> ECDsa<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.ecdsa\" data-linktype=\"relative-path\">ECDsa</a></td></tr><tr><td> ECDsaCng<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.ecdsacng\" data-linktype=\"relative-path\">ECDsaCng</a></td></tr><tr><td> System.Security.Cryptography.ECDsaCng<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.ecdsacng\" data-linktype=\"relative-path\">ECDsaCng</a></td></tr><tr><td> ECDH<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellman\" data-linktype=\"relative-path\">ECDiffieHellman</a></td></tr><tr><td> ECDiffieHellman<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellman\" data-linktype=\"relative-path\">ECDiffieHellman</a></td></tr><tr><td> ECDiffieHellmanCng<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmancng\" data-linktype=\"relative-path\">ECDiffieHellmanCng</a></td></tr><tr><td> System.Security.Cryptography.ECDiffieHellmanCng<br>\n </td><td><a class=\"xref\" href=\"system.security.cryptography.ecdiffiehellmancng\" data-linktype=\"relative-path\">ECDiffieHellmanCng</a></td></tr></tbody></table>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A new instance of the specified asymmetric algorithm implementation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_AsymmetricAlgorithm_Dispose\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Dispose()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Releases all resources used by the current instance of the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Dispose ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Call <code>Dispose</code> when you are finished using the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a>. The <code>Dispose</code> method leaves the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> in an unusable state. After calling <code>Dispose</code>, you must release all references to the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> so the garbage collector can reclaim the memory that the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> was occupying.  </p>\n<p> For more information, see <a href=\"../topic/cleaning%20up%20unmanaged%20resources\" data-linktype=\"relative-path\">Cleaning Up Unmanaged Resources</a> and <a href=\"../topic/implementing%20a%20dispose%20method\" data-linktype=\"relative-path\">Implementing a Dispose Method</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Always call <code>Dispose</code> before you release your last reference to the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> object&#39;s <code>Finalize</code> method.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_AsymmetricAlgorithm_Dispose_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Dispose(Boolean)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Releases the unmanaged resources used by the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> class and optionally releases the managed resources.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void Dispose (bool disposing);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>disposing</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to release both managed and unmanaged resources; <code>false</code> to release only unmanaged resources.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is called by the public <code>Dispose()</code> method and the <code>Finalize</code> method. <code>Dispose()</code> invokes the protected <code>Dispose(Boolean)</code> method with the <code>disposing</code> parameter set to <code>true</code>. <code>Finalize</code> invokes <code>Dispose</code> with <code>disposing</code> set to <code>false</code>.  </p>\n<p> When the <code>disposing</code> parameter is <code>true</code>, this method releases all resources held by any managed objects that this <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> references. This method invokes the <code>Dispose()</code> method of each referenced object.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_AsymmetricAlgorithm_FromXmlString_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FromXmlString(String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>When overridden in a derived class, reconstructs an <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> object from an XML string. Otherwise, throws a <a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual void FromXmlString (string xmlString);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>xmlString</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The XML string to use to reconstruct the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_AsymmetricAlgorithm_ToXmlString_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToXmlString(Boolean)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>When overridden in a derived class, creates and returns an XML string representation of the current <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> object. Otherwise, throws a <a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual string ToXmlString (bool includePrivateParameters);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>includePrivateParameters</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to include private parameters; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An XML string encoding of the current <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.AsymmetricAlgorithm.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.AsymmetricAlgorithm\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.AsymmetricAlgorithm..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.AsymmetricAlgorithm.Clear\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.AsymmetricAlgorithm.Create\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.AsymmetricAlgorithm.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.AsymmetricAlgorithm.KeySize\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"11b7d7b7-cf9a-ae9d-5c14-db46f430f1c6\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the abstract base class from which all implementations of asymmetric algorithms must inherit.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.security.cryptography/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.AsymmetricAlgorithm\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.AsymmetricAlgorithm.yml","open_to_public_contributors":false,"api_name":["System.Security.Cryptography.AsymmetricAlgorithm","System.Security.Cryptography.AsymmetricAlgorithm..ctor","System.Security.Cryptography.AsymmetricAlgorithm.Clear","System.Security.Cryptography.AsymmetricAlgorithm.Create","System.Security.Cryptography.AsymmetricAlgorithm.Dispose","System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString","System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm","System.Security.Cryptography.AsymmetricAlgorithm.KeySize","System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue","System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes","System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue","System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm","System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.AsymmetricAlgorithm","System::Security::Cryptography::AsymmetricAlgorithm","System.Security.Cryptography.AsymmetricAlgorithm.#ctor","System::Security::Cryptography::AsymmetricAlgorithm::#ctor","System.Security.Cryptography.AsymmetricAlgorithm.Clear","System::Security::Cryptography::AsymmetricAlgorithm::Clear","System.Security.Cryptography.AsymmetricAlgorithm.Create","System::Security::Cryptography::AsymmetricAlgorithm::Create","System.Security.Cryptography.AsymmetricAlgorithm.Dispose","System::Security::Cryptography::AsymmetricAlgorithm::Dispose","System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString","System::Security::Cryptography::AsymmetricAlgorithm::FromXmlString","System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm","System::Security::Cryptography::AsymmetricAlgorithm::KeyExchangeAlgorithm","System.Security.Cryptography.AsymmetricAlgorithm.KeySize","System::Security::Cryptography::AsymmetricAlgorithm::KeySize","System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue","System::Security::Cryptography::AsymmetricAlgorithm::KeySizeValue","System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes","System::Security::Cryptography::AsymmetricAlgorithm::LegalKeySizes","System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue","System::Security::Cryptography::AsymmetricAlgorithm::LegalKeySizesValue","System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm","System::Security::Cryptography::AsymmetricAlgorithm::SignatureAlgorithm","System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString","System::Security::Cryptography::AsymmetricAlgorithm::ToXmlString"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"11b7d7b7-cf9a-ae9d-5c14-db46f430f1c6","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Security.Cryptography/AsymmetricAlgorithm.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"AsymmetricAlgorithm class | Microsoft Docs","_op_ogTitle":"AsymmetricAlgorithm class","description":"Represents the abstract base class from which all implementations of asymmetric algorithms must inherit.\n","toc_asset_id":"api/_splitted/System.Security.Cryptography/toc.json","toc_rel":"_splitted/System.Security.Cryptography/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.AsymmetricAlgorithm","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.asymmetricalgorithm","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.asymmetricalgorithm","fileRelativePath":"api/System.Security.Cryptography.AsymmetricAlgorithm.html"},"themesRelativePathToOutputRoot":"_themes/"}