{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">IRuleExpression</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the base class from which custom expression writers must derive to write custom expressions.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public interface IRuleExpression</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code creates an expression that can be used in declarative conditions and rule sets. The expression is named <code>TwoOfThree</code>, and takes 3 parameters, all of which must evaluate to Booleans. This expression returns <code>true</code> if 2 of the 3 expressions return <code>true</code>.  </p>\n<p> To use this code, add it to a Class Library project and reference the library from your workflow project.  </p>\n<pre><code class=\"lang-c#\">using System.CodeDom;  \nusing System.Text;  \nusing System.Workflow.Activities.Rules;  \nusing System.Workflow.ComponentModel.Compiler;  \n\nnamespace TwoOfThreeRuleExpression  \n{  \n    public class TwoOfThree : CodeExpression, IRuleExpression  \n    {  \n        CodeExpression expression1, expression2, expression3;  \n\n        public CodeExpression First  \n        {  \n            get { return expression1; }  \n            set { expression1 = value; }  \n        }  \n\n        public CodeExpression Second  \n        {  \n            get { return expression2; }  \n            set { expression2 = value; }  \n        }  \n\n        public CodeExpression Third  \n        {  \n            get { return expression3; }  \n            set { expression3 = value; }  \n        }  \n\n        public TwoOfThree()  \n        {  \n            // constructor required for deserialization  \n        }  \n\n        public TwoOfThree(CodeExpression first, CodeExpression second, CodeExpression third)  \n        {  \n            // constructor required by parser  \n            expression1 = first;  \n            expression2 = second;  \n            expression3 = third;  \n        }  \n\n        public void AnalyzeUsage(RuleAnalysis analysis, bool isRead, bool isWritten, RulePathQualifier qualifier)  \n        {  \n            // check what the 3 expressions use  \n            RuleExpressionWalker.AnalyzeUsage(analysis, expression1, true, false, null);  \n            RuleExpressionWalker.AnalyzeUsage(analysis, expression2, true, false, null);  \n            RuleExpressionWalker.AnalyzeUsage(analysis, expression3, true, false, null);  \n        }  \n\n        public CodeExpression Clone()  \n        {  \n            TwoOfThree result = new TwoOfThree();  \n            result.expression1 = RuleExpressionWalker.Clone(expression1);  \n            result.expression2 = RuleExpressionWalker.Clone(expression2);  \n            result.expression3 = RuleExpressionWalker.Clone(expression3);  \n            return result;  \n        }  \n\n        public void Decompile(StringBuilder stringBuilder, CodeExpression parentExpression)  \n        {  \n            // what should be displayed by the parser  \n            stringBuilder.Append(&quot;TwoOfThree(&quot;);  \n            RuleExpressionWalker.Decompile(stringBuilder, expression1, this);  \n            stringBuilder.Append(&quot;, &quot;);  \n            RuleExpressionWalker.Decompile(stringBuilder, expression2, this);  \n            stringBuilder.Append(&quot;, &quot;);  \n            RuleExpressionWalker.Decompile(stringBuilder, expression3, this);  \n            stringBuilder.Append(&quot;)&quot;);  \n        }  \n\n        static RuleLiteralResult resultTrue = new RuleLiteralResult(true);  \n        static RuleLiteralResult resultFalse = new RuleLiteralResult(false);  \n\n        public RuleExpressionResult Evaluate(RuleExecution execution)  \n        {  \n            // start by doing the first 2 expressions  \n            RuleExpressionResult r1 = RuleExpressionWalker.Evaluate(execution, expression1);  \n            RuleExpressionResult r2 = RuleExpressionWalker.Evaluate(execution, expression2);  \n            bool b1 = (bool)r1.Value;  \n            bool b2 = (bool)r2.Value;  \n            if (b1 &amp;&amp; b2)  \n            {  \n                // both are true, so result is true  \n                return resultTrue;  \n            }  \n            else if (b1 || b2)  \n            {  \n                // only one of the first 2 is true, evaluate the third to determine result  \n                return RuleExpressionWalker.Evaluate(execution, expression3);  \n            }  \n            else  \n                // both e1 and e2 are false, so skip e3 and return false;  \n                return resultFalse;  \n        }  \n\n        public bool Match(CodeExpression expression)  \n        {  \n            TwoOfThree other = expression as TwoOfThree;  \n            return (other != null) &amp;&amp;  \n                RuleExpressionWalker.Match(expression1, other.expression1) &amp;&amp;  \n                RuleExpressionWalker.Match(expression2, other.expression2) &amp;&amp;  \n                RuleExpressionWalker.Match(expression3, other.expression3);  \n        }  \n\n        public RuleExpressionInfo Validate(RuleValidation validation, bool isWritten)  \n        {  \n            ValidateExpression(validation, expression1, &quot;First&quot;);  \n            ValidateExpression(validation, expression2, &quot;Second&quot;);  \n            ValidateExpression(validation, expression3, &quot;Third&quot;);  \n            return new RuleExpressionInfo(typeof(bool));  \n        }  \n\n        private void ValidateExpression(RuleValidation validation, CodeExpression expression, string propertyName)  \n        {  \n            ValidationError error;  \n            if (expression == null)  \n            {  \n                error = new ValidationError(propertyName + &quot; cannot be null&quot;, 123);  \n                validation.Errors.Add(error);  \n            }  \n            else  \n            {  \n                RuleExpressionInfo result = RuleExpressionWalker.Validate(validation, expression, false);  \n                if ((result == null) || (result.ExpressionType != typeof(bool)))  \n                {  \n                    error = new ValidationError(propertyName + &quot; must return boolean result&quot;, 123);  \n                    validation.Errors.Add(error);  \n                }  \n            }  \n        }  \n    }  \n}  \n</code></pre>\r\n  \r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Workflow_Activities_Rules_IRuleExpression_AnalyzeUsage_System_Workflow_Activities_Rules_RuleAnalysis_System_Boolean_System_Boolean_System_Workflow_Activities_Rules_RulePathQualifier_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AnalyzeUsage(RuleAnalysis, Boolean, Boolean, RulePathQualifier)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>When overridden in a derived class, reports on how the object uses fields and properties in the context type.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void AnalyzeUsage (System.Workflow.Activities.Rules.RuleAnalysis analysis, bool isRead, bool isWritten, System.Workflow.Activities.Rules.RulePathQualifier qualifier);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>analysis</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.workflow.activities.rules.ruleanalysis\" data-linktype=\"relative-path\">RuleAnalysis</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.workflow.activities.rules.ruleanalysis\" data-linktype=\"relative-path\">RuleAnalysis</a> method to store fields and properties read by a condition or read by an action.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>isRead</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the expression is being read from; <code>false</code> if the expression is not being read from.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>isWritten</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the expression is being written to; <code>false</code> if the expression is not being written to.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>qualifier</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.workflow.activities.rules.rulepathqualifier\" data-linktype=\"relative-path\">RulePathQualifier</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The path of a field or property.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Workflow_Activities_Rules_IRuleExpression_Clone\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Clone()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>When overridden in a derived class, creates a deep copy of the current <a class=\"xref\" href=\"system.codedom.codeexpression\" data-linktype=\"relative-path\">CodeExpression</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.CodeDom.CodeExpression Clone ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codeexpression\" data-linktype=\"relative-path\">CodeExpression</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A deep copy of the current <a class=\"xref\" href=\"system.codedom.codeexpression\" data-linktype=\"relative-path\">CodeExpression</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Workflow_Activities_Rules_IRuleExpression_Decompile_System_Text_StringBuilder_System_CodeDom_CodeExpression_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Decompile(StringBuilder, CodeExpression)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>When overridden in a derived class, decompiles the custom expression into string form.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Decompile (System.Text.StringBuilder stringBuilder, System.CodeDom.CodeExpression parentExpression);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>stringBuilder</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.stringbuilder\" data-linktype=\"relative-path\">StringBuilder</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A mutable string for the decompiled expression. This method should append the decompiled syntax for this subexpression.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>parentExpression</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codeexpression\" data-linktype=\"relative-path\">CodeExpression</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The parent code expression. This can be used to determine operator precedence, and whether this subexpression needs to be parenthesized.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Workflow_Activities_Rules_IRuleExpression_Evaluate_System_Workflow_Activities_Rules_RuleExecution_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Evaluate(RuleExecution)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>When overridden in a derived class, evaluates the custom expression.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Workflow.Activities.Rules.RuleExpressionResult Evaluate (System.Workflow.Activities.Rules.RuleExecution execution);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>execution</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.workflow.activities.rules.ruleexecution\" data-linktype=\"relative-path\">RuleExecution</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.workflow.activities.rules.ruleexecution\" data-linktype=\"relative-path\">RuleExecution</a> to execute the expression.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.workflow.activities.rules.ruleexpressionresult\" data-linktype=\"relative-path\">RuleExpressionResult</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.workflow.activities.rules.ruleexpressionresult\" data-linktype=\"relative-path\">RuleExpressionResult</a> that indicates the result of the rule execution.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Workflow_Activities_Rules_IRuleExpression_Match_System_CodeDom_CodeExpression_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Match(CodeExpression)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compares the current expression to another expression to determine whether they are equal.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool Match (System.CodeDom.CodeExpression expression);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>expression</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codeexpression\" data-linktype=\"relative-path\">CodeExpression</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The expression to compare the current expression to.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to show that the expressions are equal; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Workflow_Activities_Rules_IRuleExpression_Validate_System_Workflow_Activities_Rules_RuleValidation_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Validate(RuleValidation, Boolean)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>When overridden in a derived class, verifies that the expression is configured correctly and has no errors.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Workflow.Activities.Rules.RuleExpressionInfo Validate (System.Workflow.Activities.Rules.RuleValidation validation, bool isWritten);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>validation</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.workflow.activities.rules.rulevalidation\" data-linktype=\"relative-path\">RuleValidation</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.workflow.activities.rules.rulevalidation\" data-linktype=\"relative-path\">RuleValidation</a> to manage the validation process.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>isWritten</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the expression is being written to; <code>false</code> if the expression is not being written to.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.workflow.activities.rules.ruleexpressioninfo\" data-linktype=\"relative-path\">RuleExpressionInfo</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.workflow.activities.rules.ruleexpressioninfo\" data-linktype=\"relative-path\">RuleExpressionInfo</a> for the expression.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Workflow.Activities.Rules.IRuleExpression.yml\">\r\n<meta name=\"APIName\" content=\"System.Workflow.Activities.Rules.IRuleExpression\">\r\n<meta name=\"APIName\" content=\"System.Workflow.Activities.Rules.IRuleExpression.AnalyzeUsage\">\r\n<meta name=\"APIName\" content=\"System.Workflow.Activities.Rules.IRuleExpression.Clone\">\r\n<meta name=\"APIName\" content=\"System.Workflow.Activities.Rules.IRuleExpression.Decompile\">\r\n<meta name=\"APIName\" content=\"System.Workflow.Activities.Rules.IRuleExpression.Evaluate\">\r\n<meta name=\"APIName\" content=\"System.Workflow.Activities.Rules.IRuleExpression.Match\">\r\n<meta name=\"APIName\" content=\"System.Workflow.Activities.Rules.IRuleExpression.Validate\">\r\n<meta name=\"APILocation\" content=\"System.Workflow.Activities.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"b677205d-6986-2612-898b-03f1db10679c\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the base class from which custom expression writers must derive to write custom expressions.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.workflow.activities.rules/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Workflow.Activities.Rules.IRuleExpression\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Workflow.Activities.Rules.IRuleExpression.yml","open_to_public_contributors":false,"api_name":["System.Workflow.Activities.Rules.IRuleExpression","System.Workflow.Activities.Rules.IRuleExpression.AnalyzeUsage","System.Workflow.Activities.Rules.IRuleExpression.Clone","System.Workflow.Activities.Rules.IRuleExpression.Decompile","System.Workflow.Activities.Rules.IRuleExpression.Evaluate","System.Workflow.Activities.Rules.IRuleExpression.Match","System.Workflow.Activities.Rules.IRuleExpression.Validate"],"api_location":["System.Workflow.Activities.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Workflow.Activities.Rules.IRuleExpression","System::Workflow::Activities::Rules::IRuleExpression","System.Workflow.Activities.Rules.IRuleExpression.AnalyzeUsage","System::Workflow::Activities::Rules::IRuleExpression::AnalyzeUsage","System.Workflow.Activities.Rules.IRuleExpression.Clone","System::Workflow::Activities::Rules::IRuleExpression::Clone","System.Workflow.Activities.Rules.IRuleExpression.Decompile","System::Workflow::Activities::Rules::IRuleExpression::Decompile","System.Workflow.Activities.Rules.IRuleExpression.Evaluate","System::Workflow::Activities::Rules::IRuleExpression::Evaluate","System.Workflow.Activities.Rules.IRuleExpression.Match","System::Workflow::Activities::Rules::IRuleExpression::Match","System.Workflow.Activities.Rules.IRuleExpression.Validate","System::Workflow::Activities::Rules::IRuleExpression::Validate"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"b677205d-6986-2612-898b-03f1db10679c","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Workflow.Activities.Rules/IRuleExpression.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IRuleExpression interface | Microsoft Docs","_op_ogTitle":"IRuleExpression interface","description":"Represents the base class from which custom expression writers must derive to write custom expressions.\n","toc_asset_id":"api/_splitted/System.Workflow.Activities.Rules/toc.json","toc_rel":"_splitted/System.Workflow.Activities.Rules/toc.json","source_url":"","ms.assetid":"System.Workflow.Activities.Rules.IRuleExpression","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.workflow.activities.rules.iruleexpression","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.workflow.activities.rules.iruleexpression","fileRelativePath":"api/System.Workflow.Activities.Rules.IRuleExpression.html"},"themesRelativePathToOutputRoot":"_themes/"}