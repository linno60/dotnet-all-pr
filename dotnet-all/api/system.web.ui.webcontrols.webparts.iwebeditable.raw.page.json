{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">IWebEditable</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides an interface for developers to specify custom editing controls that are associated with a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> control.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public interface IWebEditable</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates how to override the methods of the IWebEditable interface in a custom <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> control, which then creates an instance of a custom <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.editorpart\" data-linktype=\"relative-path\">EditorPart</a> control when the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> control enters edit mode.  </p>\n<p> This example has four parts:  </p>\n<ul>\n<li><p>The code for the custom class.  </p>\n</li>\n<li><p>The Web page that hosts the custom control.  </p>\n</li>\n<li><p>A user control that switches the page into edit mode.  </p>\n</li>\n<li><p>A description of how the example works in a browser.  </p>\n</li>\n</ul>\n<p> The first part of the code example is the custom <code>TextDisplayWebPart</code> class. Notice that the class derives from the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> class and implements the IWebEditable interface, providing specific implementations for the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.iwebeditable#System_Web_UI_WebControls_WebParts_IWebEditable_CreateEditorParts_\" data-linktype=\"relative-path\">CreateEditorParts</a> method and the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.iwebeditable#System_Web_UI_WebControls_WebParts_IWebEditable_WebBrowsableObject_\" data-linktype=\"relative-path\">WebBrowsableObject</a> property. Notice also that nested within the <code>TextDisplayWebPart</code> class is a private, custom <code>TextDisplayEditorPart</code> class that derives from the base <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.editorpart\" data-linktype=\"relative-path\">EditorPart</a> class. For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site&#39;s Bin folder or the global assembly cache. Alternatively, you can put the source code in your site&#39;s App_Code folder, where it will be dynamically compiled at run time. For a walkthrough that demonstrates both methods of compiling, see <a href=\"../Topic/Walkthrough:%20Developing%20and%20Using%20a%20Custom%20Web%20Server%20Control.md\" data-linktype=\"relative-path\">Walkthrough: Developing and Using a Custom Web Server Control</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"WebParts_IWebEditable_Overview#1\">Imports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Security.Permissions\nImports System.Web\nImports System.Web.UI\nImports System.Web.UI.WebControls\nImports System.Web.UI.WebControls.WebParts\n\nNamespace Samples.AspNet.VB.Controls\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class TextDisplayWebPart\n    Inherits WebPart\n    Private _contentText As String = Nothing\n    Private _fontStyle As String = Nothing\n    Private input As TextBox\n    Private DisplayContent As Label\n    Private lineBreak As Literal\n\n    Public Overrides Function CreateEditorParts() _\n                                As EditorPartCollection\n      Dim editorArray As New ArrayList()\n      Dim edPart as New TextDisplayEditorPart()\n      edPart.ID = Me.ID &amp; &quot;_editorPart1&quot;\n      editorArray.Add(edPart)\n      Dim editorParts As New EditorPartCollection(editorArray)\n      Return editorParts\n\n    End Function\n\n    Public Overrides ReadOnly Property WebBrowsableObject() _\n                                        As Object\n      Get\n        Return Me\n      End Get\n    End Property\n\n    &lt;Personalizable(), WebBrowsable()&gt; _\n    Public Property ContentText() As String\n      Get\n        Return _contentText\n      End Get\n      Set(ByVal value As String)\n        _contentText = Value\n      End Set\n    End Property\n\n    &lt;Personalizable(), WebBrowsable()&gt; _\n    Public Property FontStyle() As String\n      Get\n        Return _fontStyle\n      End Get\n      Set(ByVal value As String)\n        _fontStyle = Value\n      End Set\n    End Property\n\n    Protected Overrides Sub CreateChildControls()\n      Controls.Clear()\n      DisplayContent = New Label()\n      DisplayContent.BackColor = Color.LightBlue\n      DisplayContent.Text = Me.ContentText\n      If FontStyle Is Nothing Then\n        FontStyle = &quot;None&quot;\n      End If\n      SetFontStyle(DisplayContent, FontStyle)\n      Me.Controls.Add(DisplayContent)\n\n      lineBreak = New Literal()\n      lineBreak.Text = &quot;&lt;br /&gt;&quot;\n      Controls.Add(lineBreak)\n\n      input = New TextBox()\n      Me.Controls.Add(input)\n      Dim update As New Button()\n      update.Text = &quot;Set Label Content&quot;\n      AddHandler update.Click, AddressOf Me.submit_Click\n      Me.Controls.Add(update)\n\n    End Sub\n\n    Private Sub submit_Click(ByVal sender As Object, _\n                             ByVal e As EventArgs)\n      &#39; Update the label string.\n      If input.Text &lt;&gt; String.Empty Then\n        _contentText = input.Text + &quot;&lt;br /&gt;&quot;\n        input.Text = String.Empty\n        DisplayContent.Text = Me.ContentText\n      End If\n\n    End Sub\n\n    Private Sub SetFontStyle(ByVal label As Label, _\n                             ByVal selectedStyle As String)\n      If selectedStyle = &quot;Bold&quot; Then\n        label.Font.Bold = True\n        label.Font.Italic = False\n        label.Font.Underline = False\n      ElseIf selectedStyle = &quot;Italic&quot; Then\n        label.Font.Italic = True\n        label.Font.Bold = False\n        label.Font.Underline = False\n      ElseIf selectedStyle = &quot;Underline&quot; Then\n        label.Font.Underline = True\n        label.Font.Bold = False\n        label.Font.Italic = False\n      Else\n        label.Font.Bold = False\n        label.Font.Italic = False\n        label.Font.Underline = False\n      End If\n\n    End Sub\n\n    &#39; Create a custom EditorPart to edit the WebPart control.\n    &lt;AspNetHostingPermission(SecurityAction.Demand, _\n      Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n    Private Class TextDisplayEditorPart\n      Inherits EditorPart\n      Private _partContentFontStyle As DropDownList\n\n      Public Overrides Function ApplyChanges() As Boolean\n        Dim part As TextDisplayWebPart = CType(WebPartToEdit, _\n                                               TextDisplayWebPart)\n        &#39; Update the custom WebPart control with the font style.\n        part.FontStyle = PartContentFontStyle.SelectedValue\n\n        Return True\n\n      End Function\n\n      Public Overrides Sub SyncChanges()\n        Dim part As TextDisplayWebPart = CType(WebPartToEdit, _\n                                               TextDisplayWebPart)\n        Dim currentStyle As String = part.FontStyle\n\n        &#39; Select the current font style in the drop-down control.\n        Dim item As ListItem\n        For Each item In PartContentFontStyle.Items\n          If item.Value = currentStyle Then\n            item.Selected = True\n            Exit For\n          End If\n        Next item\n\n      End Sub\n\n      Protected Overrides Sub CreateChildControls()\n        Controls.Clear()\n\n        &#39; Add a set of font styles to the dropdown list.\n        _partContentFontStyle = New DropDownList()\n        _partContentFontStyle.Items.Add(&quot;Bold&quot;)\n        _partContentFontStyle.Items.Add(&quot;Italic&quot;)\n        _partContentFontStyle.Items.Add(&quot;Underline&quot;)\n        _partContentFontStyle.Items.Add(&quot;None&quot;)\n\n        Controls.Add(_partContentFontStyle)\n\n      End Sub\n\n      Protected Overrides Sub RenderContents(ByVal writer _\n                                             As HtmlTextWriter)\n        writer.Write(&quot;&lt;b&gt;Text Content Font Style&lt;/b&gt;&quot;)\n        writer.WriteBreak()\n        writer.Write(&quot;Select a font style.&quot;)\n        writer.WriteBreak()\n        _partContentFontStyle.RenderControl(writer)\n        writer.WriteBreak()\n\n      End Sub\n\n      &#39; Access the drop-down control through a property.\n      Private ReadOnly Property PartContentFontStyle() As DropDownList\n        Get\n          EnsureChildControls()\n          Return _partContentFontStyle\n        End Get\n      End Property\n\n    End Class\n\n  End Class\n\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"WebParts_IWebEditable_Overview#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Security.Permissions;\nusing System.Web;\nusing System.Web.UI;\nusing System.Web.UI.WebControls;\nusing System.Web.UI.WebControls.WebParts;\n\nnamespace Samples.AspNet.CS.Controls\n{\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public class TextDisplayWebPart : WebPart\n  {\n    private String _contentText = null;\n    private String _fontStyle = null;\n    TextBox input;\n    Label DisplayContent;\n    Literal lineBreak;\n\n    public override EditorPartCollection CreateEditorParts()\n    {\n      ArrayList editorArray = new ArrayList();\n      TextDisplayEditorPart edPart = new TextDisplayEditorPart();\n      edPart.ID = this.ID + &quot;_editorPart1&quot;;\n      editorArray.Add(edPart);\n      EditorPartCollection editorParts = \n        new EditorPartCollection(editorArray);\n      return editorParts;\n    }\n\n    public override object WebBrowsableObject\n    {\n      get { return this; }\n    }\n\n    [Personalizable(), WebBrowsable]\n    public String ContentText\n    {\n      get { return _contentText; }\n      set { _contentText = value; }\n    }\n\n    [Personalizable(), WebBrowsable()]\n    public String FontStyle\n    {\n      get { return _fontStyle; }\n      set { _fontStyle = value; }\n    }\n\n    protected override void CreateChildControls()\n    {\n      Controls.Clear();\n      DisplayContent = new Label();\n      DisplayContent.BackColor = Color.LightBlue;\n      DisplayContent.Text = this.ContentText;\n      if (FontStyle == null)\n        FontStyle = &quot;None&quot;;\n      SetFontStyle(DisplayContent, FontStyle);\n      this.Controls.Add(DisplayContent);\n\n      lineBreak = new Literal();\n      lineBreak.Text = @&quot;&lt;br /&gt;&quot;;\n      Controls.Add(lineBreak);\n\n      input = new TextBox();\n      this.Controls.Add(input);\n      Button update = new Button();\n      update.Text = &quot;Set Label Content&quot;;\n      update.Click += new EventHandler(this.submit_Click);\n      this.Controls.Add(update);\n\n    }\n\n    private void submit_Click(object sender, EventArgs e)\n    {\n      // Update the label string.\n      if (input.Text != String.Empty)\n      {\n        _contentText = input.Text + @&quot;&lt;br /&gt;&quot;;\n        input.Text = String.Empty;\n        DisplayContent.Text = this.ContentText;\n      }\n    }\n\n    private void SetFontStyle(Label label, String selectedStyle)\n    {\n      if (selectedStyle == &quot;Bold&quot;)\n      {\n        label.Font.Bold = true;\n        label.Font.Italic = false;\n        label.Font.Underline = false;\n      }\n      else if (selectedStyle == &quot;Italic&quot;)\n      {\n        label.Font.Italic = true;\n        label.Font.Bold = false;\n        label.Font.Underline = false;\n      }\n      else if (selectedStyle == &quot;Underline&quot;)\n      {\n        label.Font.Underline = true;\n        label.Font.Bold = false;\n        label.Font.Italic = false;\n      }\n      else\n      {\n        label.Font.Bold = false;\n        label.Font.Italic = false;\n        label.Font.Underline = false;\n      }\n    }\n\n    // Create a custom EditorPart to edit the WebPart control.\n    [AspNetHostingPermission(SecurityAction.Demand,\n      Level = AspNetHostingPermissionLevel.Minimal)]\n    private class TextDisplayEditorPart : EditorPart\n    {\n      DropDownList _partContentFontStyle;\n\n      public override bool ApplyChanges()\n      {\n        TextDisplayWebPart part = \n          (TextDisplayWebPart)WebPartToEdit;\n        // Update the custom WebPart control with the font style.\n        part.FontStyle = PartContentFontStyle.SelectedValue;\n\n        return true;\n      }\n\n      public override void SyncChanges()\n      {\n        TextDisplayWebPart part = \n          (TextDisplayWebPart)WebPartToEdit;\n        String currentStyle = part.FontStyle;\n\n        // Select the current font style in the drop-down control.\n        foreach (ListItem item in PartContentFontStyle.Items)\n        {\n          if (item.Value == currentStyle)\n          {\n            item.Selected = true;\n            break;\n          }\n        }\n      }\n\n      protected override void CreateChildControls()\n      {\n        Controls.Clear();\n\n        // Add a set of font styles to the dropdown list.\n        _partContentFontStyle = new DropDownList();\n        _partContentFontStyle.Items.Add(&quot;Bold&quot;);\n        _partContentFontStyle.Items.Add(&quot;Italic&quot;);\n        _partContentFontStyle.Items.Add(&quot;Underline&quot;);\n        _partContentFontStyle.Items.Add(&quot;None&quot;);\n\n        Controls.Add(_partContentFontStyle);\n\n      }\n\n      protected override void RenderContents(HtmlTextWriter writer)\n      {\n        writer.Write(&quot;&lt;b&gt;Text Content Font Style&lt;/b&gt;&quot;);\n        writer.WriteBreak();\n        writer.Write(&quot;Select a font style.&quot;);\n        writer.WriteBreak();\n        _partContentFontStyle.RenderControl(writer);\n        writer.WriteBreak();\n      }\n\n      // Access the drop-down control through a property.\n      private DropDownList PartContentFontStyle\n      {\n        get \n        {\n          EnsureChildControls();\n          return _partContentFontStyle;\n        }\n      }\n    }\n  }\n}\n</code></pre><p> The second part of the code example is a Web page that hosts the custom control. Notice that although an <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.editorzone\" data-linktype=\"relative-path\">EditorZone</a> control is declared in the markup of the page, the custom <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.editorpart\" data-linktype=\"relative-path\">EditorPart</a> control need not be referenced there, because it can be added programmatically at run time.  </p>\n<pre><code class=\"lang-vb\" name=\"WebParts_IWebEditable_Overview#7\">&lt;%@ page language=&quot;vb&quot; %&gt;\n&lt;%@ register TagPrefix=&quot;uc1&quot; \n  TagName=&quot;DisplayModeUC&quot; \n  Src=&quot;DisplayModeUCvb.ascx&quot; %&gt;\n&lt;%@ register tagprefix=&quot;aspSample&quot; \n  Namespace=&quot;Samples.AspNet.VB.Controls&quot; \n  Assembly=&quot;TextDisplayWebPartVB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;\n      Text Display WebPart with EditorPart\n    &lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n      &lt;asp:webpartmanager id=&quot;WebPartManager1&quot; runat=&quot;server&quot; /&gt;\n      &lt;uc1:DisplayModeUC ID=&quot;DisplayModeUC1&quot; runat=&quot;server&quot; /&gt;\n      &lt;asp:webpartzone id=&quot;zone1&quot; runat=&quot;server&quot; \n        CloseVerb-Enabled=&quot;false&quot;&gt;\n        &lt;zonetemplate&gt;\n          &lt;aspSample:TextDisplayWebPart \n            runat=&quot;server&quot;   \n            id=&quot;textwebpart&quot; \n            title = &quot;Text Content WebPart&quot; /&gt;\n        &lt;/zonetemplate&gt;\n      &lt;/asp:webpartzone&gt; \n      &lt;asp:EditorZone ID=&quot;EditorZone1&quot; runat=&quot;server&quot; /&gt; \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"WebParts_IWebEditable_Overview#7\">&lt;%@ page language=&quot;c#&quot; %&gt;\n&lt;%@ register TagPrefix=&quot;uc1&quot; \n  TagName=&quot;DisplayModeUC&quot; \n  Src=&quot;DisplayModeUCcs.ascx&quot; %&gt;\n&lt;%@ register tagprefix=&quot;aspSample&quot; \n  Namespace=&quot;Samples.AspNet.CS.Controls&quot; \n  Assembly=&quot;TextDisplayWebPartCS&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;\n      Text Display WebPart with EditorPart\n    &lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n      &lt;asp:webpartmanager id=&quot;WebPartManager1&quot; runat=&quot;server&quot; /&gt;\n      &lt;uc1:DisplayModeUC ID=&quot;DisplayModeUC1&quot; runat=&quot;server&quot; /&gt;\n      &lt;asp:webpartzone id=&quot;zone1&quot; runat=&quot;server&quot; \n        CloseVerb-Enabled=&quot;false&quot;&gt;\n        &lt;zonetemplate&gt;\n          &lt;aspSample:TextDisplayWebPart \n            runat=&quot;server&quot;   \n            id=&quot;textwebpart&quot; \n            title = &quot;Text Content WebPart&quot; /&gt; \n        &lt;/zonetemplate&gt;\n      &lt;/asp:webpartzone&gt; \n      &lt;asp:EditorZone ID=&quot;EditorZone1&quot; runat=&quot;server&quot; /&gt; \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p> The third part of the code example is a user control that enables a user to switch the page into edit mode. Notice that the user control is referenced in the hosting Web page. For a full description of how to create this user control, see <a href=\"../Topic/Walkthrough:%20Changing%20Display%20Modes%20on%20a%20Web%20Parts%20Page.md\" data-linktype=\"relative-path\">Walkthrough: Changing Display Modes on a Web Parts Page</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_IWebEditable_Overview#8\">&lt;%@ control language=&quot;C#&quot; classname=&quot;DisplayModeMenu&quot;%&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n\n  // On initial load, fill the dropdown with display modes.\n  void DisplayModeDropdown_Load(object sender, System.EventArgs e)\n  {\n    if (!IsPostBack)\n    {\n      WebPartManager mgr = \n        WebPartManager.GetCurrentWebPartManager(Page);\n      String browseModeName = WebPartManager.BrowseDisplayMode.Name;\n      // Use a sorted list so the modes are sorted alphabetically.\n      SortedList itemArray = \n        new SortedList(mgr.SupportedDisplayModes.Count);\n\n      // Add display modes only if they are supported on the page.\n      foreach (WebPartDisplayMode mode in mgr.SupportedDisplayModes)\n      {\n        String modeName = mode.Name;\n        itemArray.Add(modeName, modeName + &quot; Mode&quot;);      \n      }\n      // Fill the dropdown with the display mode names.\n      foreach(DictionaryEntry arrayItem in itemArray)\n      {\n        ListItem item = new ListItem(arrayItem.Value.ToString(), \n          arrayItem.Key.ToString());\n        if (item.Value == browseModeName)\n          item.Selected = true;\n        DisplayModeDropdown.Items.Add(item);\n      }\n    }\n  }\n\n  // Change the page to the selected display mode.\n  void DisplayModeDropdown_SelectedIndexChanged(object sender, \n    EventArgs e)\n  {\n    WebPartManager mgr = WebPartManager.GetCurrentWebPartManager(Page);\n    String selectedMode = DisplayModeDropdown.SelectedValue;\n\n    foreach (WebPartDisplayMode mode in mgr.SupportedDisplayModes)\n    {\n      if (selectedMode == mode.Name)\n      {\n        mgr.DisplayMode = mode;\n        break;\n      }\n    }\n  }\n\n&lt;/script&gt;\n&lt;div&gt;\n  &lt;asp:DropDownList ID=&quot;DisplayModeDropdown&quot; \n    runat=&quot;server&quot; \n    AutoPostBack=&quot;true&quot; \n    OnLoad=&quot;DisplayModeDropdown_Load&quot; \n    OnSelectedIndexChanged=&quot;DisplayModeDropdown_SelectedIndexChanged&quot; /&gt;\n&lt;/div&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_IWebEditable_Overview#8\">&lt;%@ control language=&quot;vb&quot; classname=&quot;DisplayModeMenu&quot;%&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n\n &#39; On initial load, fill the dropdown with display modes.\n  Sub DisplayModeDropdown_Load(ByVal sender As Object, _\n                               ByVal e As System.EventArgs)\n    If Not IsPostBack Then\n      Dim mgr As WebPartManager = _\n        WebPartManager.GetCurrentWebPartManager(Page)\n      Dim browseModeName As String = _\n        WebPartManager.BrowseDisplayMode.Name\n      &#39; Use a sorted list so the modes are sorted alphabetically.\n      Dim itemArray As New SortedList(mgr.SupportedDisplayModes.Count)\n        \n      &#39; Add display modes only if they are supported on the page.\n      Dim mode As WebPartDisplayMode\n      For Each mode In mgr.SupportedDisplayModes\n        Dim modeName As String = mode.Name\n        itemArray.Add(modeName, modeName + &quot; Mode&quot;)\n      Next mode\n      &#39; Fill the dropdown with the display mode names.\n      Dim arrayItem As DictionaryEntry\n      For Each arrayItem In itemArray\n        Dim item As New ListItem(arrayItem.Value.ToString(), _\n                                 arrayItem.Key.ToString())\n        If item.Value = browseModeName Then\n          item.Selected = True\n        End If\n        DisplayModeDropdown.Items.Add(item)\n      Next arrayItem\n    End If\n\n  End Sub\n\n\n&#39; Change the page to the selected display mode.\n  Sub DisplayModeDropdown_SelectedIndexChanged(ByVal sender As Object, _\n                                               ByVal e As EventArgs)\n    Dim mgr As WebPartManager = _\n      WebPartManager.GetCurrentWebPartManager(Page)\n    Dim selectedMode As String = DisplayModeDropdown.SelectedValue\n    \n    Dim mode As WebPartDisplayMode\n    For Each mode In mgr.SupportedDisplayModes\n      If selectedMode = mode.Name Then\n        mgr.DisplayMode = mode\n        Exit For\n      End If\n    Next mode\n\n  End Sub\n\n&lt;/script&gt;\n&lt;div&gt;\n  &lt;asp:DropDownList ID=&quot;DisplayModeDropdown&quot; \n    runat=&quot;server&quot; \n    AutoPostBack=&quot;true&quot; \n    OnLoad=&quot;DisplayModeDropdown_Load&quot; \n    OnSelectedIndexChanged=&quot;DisplayModeDropdown_SelectedIndexChanged&quot; /&gt;\n&lt;/div&gt;\n</code></pre><p> To run the code example, load the hosting Web page in a browser, add some text to the text box, and click the <strong>Set Label Content</strong> button to update the label in the control. To switch the page into edit mode, select <strong>Edit</strong> from the drop-down list containing the display modes. To display the UI from the custom <code>TextDisplayEditorPart</code> control, click the verbs menu drop-down arrow on the <code>TextDisplayWebPart</code> control, and select <strong>Edit</strong>. In the editing UI, you can use the drop-down list containing the font styles to update the text style for the label in the <code>TextDisplayWebPart</code> control. You must click <strong>Browse Mode</strong> in the display modes drop-down list to return the page to normal view and confirm that the text in the label now has the font style you selected while in edit mode.</p>\n\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The IWebEditable interface enables you to associate custom <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.editorpart\" data-linktype=\"relative-path\">EditorPart</a> controls with a server control--such as a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> control, a user control, or a custom server control. The <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.editorpart\" data-linktype=\"relative-path\">EditorPart</a> controls are contained with an <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.editorzone\" data-linktype=\"relative-path\">EditorZone</a> control, and this zone with its editing controls provides end users with a user interface (UI) for modifying properties, appearance, and behavior on the associated <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> control.  </p>\n<p> The IWebEditable interface includes two exposed members. The <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.iwebeditable#System_Web_UI_WebControls_WebParts_IWebEditable_WebBrowsableObject_\" data-linktype=\"relative-path\">WebBrowsableObject</a> property provides a way for <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.editorpart\" data-linktype=\"relative-path\">EditorPart</a> controls to get a reference to the associated server control. The <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.iwebeditable#System_Web_UI_WebControls_WebParts_IWebEditable_CreateEditorParts_\" data-linktype=\"relative-path\">CreateEditorParts</a> method is used to create an instance of each custom <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.editorpart\" data-linktype=\"relative-path\">EditorPart</a> control associated with a server control, and return them as a collection.  </p>\n<p> The IWebEditable interface is already implemented on the base <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> class, although by default this implementation does not associate any custom <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.editorpart\" data-linktype=\"relative-path\">EditorPart</a> controls with the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> class. To associate a derived <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> control with custom <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.editorpart\" data-linktype=\"relative-path\">EditorPart</a> controls, you can override the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.iwebeditable#System_Web_UI_WebControls_WebParts_IWebEditable_CreateEditorParts_\" data-linktype=\"relative-path\">CreateEditorParts</a> method.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_WebControls_WebParts_IWebEditable_WebBrowsableObject\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">WebBrowsableObject</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a reference to the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> control, user control, or custom control that will be edited by <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.editorpart\" data-linktype=\"relative-path\">EditorPart</a> controls.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public object WebBrowsableObject { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object reference to the control associated with an <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.editorpart\" data-linktype=\"relative-path\">EditorPart</a> control.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The WebBrowsableObject property provides a way for <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.editorpart\" data-linktype=\"relative-path\">EditorPart</a> controls to get a reference to the server controls they are associated with.  </p>\n<p> Although the property itself is read-only, the object reference that it returns enables <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.editorpart\" data-linktype=\"relative-path\">EditorPart</a> controls to change values in the server control.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_WebControls_WebParts_IWebEditable_CreateEditorParts\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CreateEditorParts()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a collection of custom <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.editorpart\" data-linktype=\"relative-path\">EditorPart</a> controls associated with a server control that implements the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.iwebeditable\" data-linktype=\"relative-path\">IWebEditable</a> interface.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Web.UI.WebControls.WebParts.EditorPartCollection CreateEditorParts ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.editorpartcollection\" data-linktype=\"relative-path\">EditorPartCollection</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.editorpartcollection\" data-linktype=\"relative-path\">EditorPartCollection</a> that contains the collection of custom <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.editorpart\" data-linktype=\"relative-path\">EditorPart</a> controls associated with a server control.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The CreateEditorParts method enables you to create a collection of all the custom <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.editorpart\" data-linktype=\"relative-path\">EditorPart</a> controls associated with your custom control, <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> control, or user control, and return them as an <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.editorpartcollection\" data-linktype=\"relative-path\">EditorPartCollection</a> object. The <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager\" data-linktype=\"relative-path\">WebPartManager</a> control takes the collection and creates instances of all the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.editorpart\" data-linktype=\"relative-path\">EditorPart</a> controls whenever the server control enters edit mode.  </p>\n<p> Typically you implement this method in a custom <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> control by overriding its <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart#System_Web_UI_WebControls_WebParts_WebPart_CreateEditorParts_\" data-linktype=\"relative-path\">CreateEditorParts</a> method. In the method, you create instances of the custom <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.editorpart\" data-linktype=\"relative-path\">EditorPart</a> controls you want to associate with your controls, add them to an <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.editorpartcollection\" data-linktype=\"relative-path\">EditorPartCollection</a> object, and then return that object. The collection of <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.editorpart\" data-linktype=\"relative-path\">EditorPart</a> controls is then assigned to the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.editorzonebase#System_Web_UI_WebControls_WebParts_EditorZoneBase_EditorParts_\" data-linktype=\"relative-path\">EditorParts</a> property of the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.editorzonebase\" data-linktype=\"relative-path\">EditorZoneBase</a> zone.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Any <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.editorpart\" data-linktype=\"relative-path\">EditorPart</a> that is added to the collection of <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.editorpart\" data-linktype=\"relative-path\">EditorPart</a> controls in an implementation of the CreateEditorParts method must have a value assigned to its ID property, otherwise an exception will be thrown when the collection is assigned to the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.editorzonebase#System_Web_UI_WebControls_WebParts_EditorZoneBase_EditorParts_\" data-linktype=\"relative-path\">EditorParts</a> property.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.WebParts.IWebEditable.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.IWebEditable\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.IWebEditable.CreateEditorParts\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.IWebEditable.WebBrowsableObject\">\r\n<meta name=\"APILocation\" content=\"System.Web.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"ca65c0de-22db-3210-424a-5e22dc2ad6a9\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides an interface for developers to specify custom editing controls that are associated with a  control.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.web.ui.webcontrols.webparts/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.WebControls.WebParts.IWebEditable\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.WebParts.IWebEditable.yml","open_to_public_contributors":false,"api_name":["System.Web.UI.WebControls.WebParts.IWebEditable","System.Web.UI.WebControls.WebParts.IWebEditable.CreateEditorParts","System.Web.UI.WebControls.WebParts.IWebEditable.WebBrowsableObject"],"api_location":["System.Web.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.WebControls.WebParts.IWebEditable","System::Web::UI::WebControls::WebParts::IWebEditable","System.Web.UI.WebControls.WebParts.IWebEditable.CreateEditorParts","System::Web::UI::WebControls::WebParts::IWebEditable::CreateEditorParts","System.Web.UI.WebControls.WebParts.IWebEditable.WebBrowsableObject","System::Web::UI::WebControls::WebParts::IWebEditable::WebBrowsableObject"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"ca65c0de-22db-3210-424a-5e22dc2ad6a9","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls.WebParts/IWebEditable.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IWebEditable interface | Microsoft Docs","_op_ogTitle":"IWebEditable interface","description":"Provides an interface for developers to specify custom editing controls that are associated with a  control.\n","toc_asset_id":"api/_splitted/System.Web.UI.WebControls.WebParts/toc.json","toc_rel":"_splitted/System.Web.UI.WebControls.WebParts/toc.json","source_url":"","ms.assetid":"System.Web.UI.WebControls.WebParts.IWebEditable","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.webparts.iwebeditable","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.webparts.iwebeditable","fileRelativePath":"api/System.Web.UI.WebControls.WebParts.IWebEditable.html"},"themesRelativePathToOutputRoot":"_themes/"}