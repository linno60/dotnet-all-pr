{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ParameterizedThreadStart</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that executes on a <a class=\"xref\" href=\"system.threading.thread\" data-linktype=\"relative-path\">Thread</a>.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(false)]\npublic delegate void ParameterizedThreadStart(object obj);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">ParameterizedThreadStart</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example uses a ParameterizedThreadStart delegate with to execute a static method and an instance method. The first ParameterizedThreadStart delegate is represented by the static <code>DoWork</code> method and the second is represented by the instance <code>DoMoreWork</code> method. Both methods match the ParameterizedThreadStart delegate signature; that is, they have a single parameter of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and don&#39;t return a value.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The Visual Basic and C# compilers infer the ParameterizedThreadStart delegate from the signatures of the <code>DoWork</code> and <code>DoMoreWork</code> methods, and call the correct constructor. Thus, there is no explicit constructor call in the code.  </p>\n</div>\n<pre><code class=\"lang-cpp\" name=\"System.Threading.ParameterizedThreadStart#1\">using namespace System;\nusing namespace System::Threading;\n\nnamespace SystemThreadingExample\n{\n    public ref class Work\n    {\n    public:\n        void StartThreads()\n        {\n            // Start a thread that calls a parameterized static method.\n            Thread^ newThread = gcnew\n                Thread(gcnew ParameterizedThreadStart(Work::DoWork));\n            newThread-&gt;Start(42);\n              \n            // Start a thread that calls a parameterized instance method.\n            Work^ someWork = gcnew Work;\n            newThread = gcnew Thread(\n                        gcnew ParameterizedThreadStart(someWork,\n                        &amp;Work::DoMoreWork));\n            newThread-&gt;Start(&quot;The answer.&quot;);\n        }\n\n        static void DoWork(Object^ data)\n        {\n            Console::WriteLine(&quot;Static thread procedure. Data=&#39;{0}&#39;&quot;, \n                data);\n        }\n\n        void DoMoreWork(Object^ data)\n        {\n            Console::WriteLine(&quot;Instance thread procedure. Data=&#39;{0}&#39;&quot;, \n                data);\n        }\n    };\n}\n\n//Entry point of example application\nint main()\n{\n    SystemThreadingExample::Work^ samplework = \n        gcnew SystemThreadingExample::Work();\n    samplework-&gt;StartThreads();\n}\n// This example displays output like the following:\n//       Static thread procedure. Data=&#39;42&#39;\n//       Instance thread procedure. Data=&#39;The answer.&#39;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ParameterizedThreadStart#1\">Imports System.Threading\n\nPublic Class Work\n    Shared Sub Main()\n        &#39; Start a thread that calls a parameterized static method.\n        Dim newThread As New Thread(AddressOf Work.DoWork)\n        newThread.Start(42)\n\n        &#39; Start a thread that calls a parameterized instance method.\n        Dim w As New Work()\n        newThread = New Thread(AddressOf w.DoMoreWork)\n        newThread.Start(&quot;The answer.&quot;)\n    End Sub\n \n    Public Shared Sub DoWork(ByVal data As Object)\n        Console.WriteLine(&quot;Static thread procedure. Data=&#39;{0}&#39;&quot;,\n                          data)\n    End Sub\n\n    Public Sub DoMoreWork(ByVal data As Object) \n        Console.WriteLine(&quot;Instance thread procedure. Data=&#39;{0}&#39;&quot;,\n                          data)\n    End Sub\nEnd Class\n&#39; This example displays output like the following:\n&#39;    Static thread procedure. Data=&#39;42&#39;\n&#39;    Instance thread procedure. Data=&#39;The answer.&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.ParameterizedThreadStart#1\">using System;\nusing System.Threading;\n\npublic class Work\n{\n    public static void Main()\n    {\n        // Start a thread that calls a parameterized static method.\n        Thread newThread = new Thread(Work.DoWork);\n        newThread.Start(42);\n\n        // Start a thread that calls a parameterized instance method.\n        Work w = new Work();\n        newThread = new Thread(w.DoMoreWork);\n        newThread.Start(&quot;The answer.&quot;);\n    }\n \n    public static void DoWork(object data)\n    {\n        Console.WriteLine(&quot;Static thread procedure. Data=&#39;{0}&#39;&quot;,\n            data);\n    }\n\n    public void DoMoreWork(object data)\n    {\n        Console.WriteLine(&quot;Instance thread procedure. Data=&#39;{0}&#39;&quot;,\n            data);\n    }\n}\n// This example displays output like the following:\n//       Static thread procedure. Data=&#39;42&#39;\n//       Instance thread procedure. Data=&#39;The answer.&#39;\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>When a managed thread is created, the method that executes on the thread is represented by:  </p>\n<ul>\n<li><p>A <a class=\"xref\" href=\"system.threading.threadstart\" data-linktype=\"relative-path\">ThreadStart</a> delegate that is passed to the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread__ctor_System_Threading_ThreadStart_\" data-linktype=\"relative-path\">System.Threading.Thread.Thread(ThreadStart)</a> constructor.  Any method that has no parameters and that returns <code>void</code> in C# or is a <code>Sub</code> procedure in Visual Basic can represent the delegate.  </p>\n</li>\n<li><p>A ParameterizedThreadStart delegate that is passed to the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread__ctor_System_Threading_ParameterizedThreadStart_System_Int32_\" data-linktype=\"relative-path\">System.Threading.Thread.Thread(ParameterizedThreadStart, Int32)</a> constructor. Any method that has a single parameter of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and that returns void in C# or is a Sub procedure in Visual Basic can represent the delegate.  </p>\n</li>\n</ul>\n<p> The thread does not begin executing until the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Start_\" data-linktype=\"relative-path\">Start</a> method is called. The <a class=\"xref\" href=\"system.threading.threadstart\" data-linktype=\"relative-path\">ThreadStart</a> or ParameterizedThreadStart delegate is invoked on the thread, and execution begins at the first line of the method represented by the delegate. In the case of the ParameterizedThreadStart delegate, the object that is passed to the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Start_System_Object_\" data-linktype=\"relative-path\">Start(Object)</a> method is passed to the delegate.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Visual Basic and C# users can omit the <a class=\"xref\" href=\"system.threading.threadstart\" data-linktype=\"relative-path\">ThreadStart</a> or ParameterizedThreadStart delegate constructor when creating a thread. In Visual Basic, use the <code>AddressOf</code> operator when passing your method to the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread__ctor_\" data-linktype=\"relative-path\">Thread</a> constructor; for example, <code>Dim t As New Thread(AddressOf ThreadProc)</code>. In C#, simply specify the name of the thread procedure. The compiler selects the correct delegate constructor.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> When you create a ParameterizedThreadStart delegate for an instance method in C++, the first parameter of the constructor is the instance variable. For a static method, the first parameter of the constructor is zero. For a static method, the delegate constructor requires only one parameter: the address of the callback method, qualified by the class name.  </p>\n</div>\n<p> The ParameterizedThreadStart delegate and the <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Start_System_Object_\" data-linktype=\"relative-path\">System.Threading.Thread.Start(Object)</a> method overload make it easy to pass data to a thread procedure, but this technique is not type safe because any object can be passed to <a class=\"xref\" href=\"system.threading.thread#System_Threading_Thread_Start_System_Object_\" data-linktype=\"relative-path\">System.Threading.Thread.Start(Object)</a>. A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object. For more information, see <a href=\"../topic/creating%20threads%20and%20passing%20data%20at%20start%20time\" data-linktype=\"relative-path\">Creating Threads and Passing Data at Start Time</a>.  </p>\n<p> The ParameterizedThreadStart delegate supports only a single parameter. You can pass multiple data items to the ParameterizedThreadStart by making that parameter one of the following:  </p>\n<ul>\n<li><p>An array.  </p>\n</li>\n<li><p>A collection type, if all of the data items are of the same type.  </p>\n</li>\n<li><p>A tuple type, such as <a class=\"xref\" href=\"system.tuple-2\" data-linktype=\"relative-path\">Tuple&lt;T1,T2&gt;</a> or <a class=\"xref\" href=\"system.tuple-4\" data-linktype=\"relative-path\">Tuple&lt;T1,T2,T3,T4&gt;</a>.</p>\n</li>\n</ul>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Threading.ParameterizedThreadStart.yml\">\r\n<meta name=\"APIName\" content=\"System.Threading.ParameterizedThreadStart\">\r\n<meta name=\"APIName\" content=\"System.Threading.ParameterizedThreadStart..ctor\">\r\n<meta name=\"APIName\" content=\"System.Threading.ParameterizedThreadStart.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Threading.ParameterizedThreadStart.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Threading.ParameterizedThreadStart.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 05:47 AM\">\r\n<meta name=\"document_id\" content=\"a42e0f39-c82f-404e-9030-1372224b2bf7\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that executes on a .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.threading/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Threading.ParameterizedThreadStart\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Threading.ParameterizedThreadStart.yml","open_to_public_contributors":false,"api_name":["System.Threading.ParameterizedThreadStart","System.Threading.ParameterizedThreadStart..ctor","System.Threading.ParameterizedThreadStart.Invoke","System.Threading.ParameterizedThreadStart.BeginInvoke","System.Threading.ParameterizedThreadStart.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Threading.ParameterizedThreadStart","System::Threading::ParameterizedThreadStart"],"dev_langs":["csharp"],"updated_at":"2017-03-31 05:47 AM","document_id":"a42e0f39-c82f-404e-9030-1372224b2bf7","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Threading/ParameterizedThreadStart.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ParameterizedThreadStart delegate | Microsoft Docs","_op_ogTitle":"ParameterizedThreadStart delegate","description":"Represents the method that executes on a .\n","toc_asset_id":"api/_splitted/System.Threading/toc.json","toc_rel":"_splitted/System.Threading/toc.json","source_url":"","ms.assetid":"System.Threading.ParameterizedThreadStart","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.threading.parameterizedthreadstart","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.threading.parameterizedthreadstart","fileRelativePath":"api/System.Threading.ParameterizedThreadStart.html"},"themesRelativePathToOutputRoot":"_themes/"}