{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">CultureAndRegionModifiers</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies constants that define a <a class=\"xref\" href=\"system.globalization.cultureandregioninfobuilder\" data-linktype=\"relative-path\">CultureAndRegionInfoBuilder</a> object.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Flags]\npublic enum CultureAndRegionModifiers</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">CultureAndRegionModifiers</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.flagsattribute\" title=\"System.FlagsAttribute\" data-linktype=\"relative-path\">FlagsAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example creates a custom culture with a private use prefix, then lists a set of its properties. The first property is the name of the culture.  </p>\n<pre><code class=\"lang-cs\" name=\"sys.glob.carib1#1\">// This example demonstrates a System.Globalization.Culture-\n// AndRegionInfoBuilder constructor and some of the properties \n// of the CultureAndRegionInfoBuilder object that is created.\n// Compile this example with a reference to sysglobl.dll.\n\nusing System;\nusing System.Globalization;\n\nclass Sample \n{\n    public static void Main() \n    {\n\n// Construct a new, privately used culture that extends the en-US culture \n// provided by the .NET Framework. In this sample, the CultureAndRegion-\n// Types.Specific parameter creates a minimal CultureAndRegionInfoBuilder \n// object that you must populate with culture and region information.\n\n    CultureAndRegionInfoBuilder cib = null;\n    try {\n        cib = new CultureAndRegionInfoBuilder(\n                                          &quot;x-en-US-sample&quot;,\n                                          CultureAndRegionModifiers.None);\n        }\n    catch (ArgumentException ae)\n        {\n        Console.WriteLine(ae);\n        return;\n        }\n\n// Populate the new CultureAndRegionInfoBuilder object with culture information.\n\n    CultureInfo ci = new CultureInfo(&quot;en-US&quot;);\n    cib.LoadDataFromCultureInfo(ci);\n\n// Populate the new CultureAndRegionInfoBuilder object with region information.\n\n    RegionInfo  ri = new RegionInfo(&quot;US&quot;);\n    cib.LoadDataFromRegionInfo(ri);\n\n// Display some of the properties for the x-en-US-sample custom culture.\n\n    Console.Clear();\n    Console.WriteLine(&quot;CultureName:. . . . . . . . . . {0}&quot;, cib.CultureName);\n    Console.WriteLine(&quot;CultureEnglishName: . . . . . . {0}&quot;, cib.CultureEnglishName);\n    Console.WriteLine(&quot;CultureNativeName:. . . . . . . {0}&quot;, cib.CultureNativeName);\n    Console.WriteLine(&quot;GeoId:. . . . . . . . . . . . . {0}&quot;, cib.GeoId);\n    Console.WriteLine(&quot;IsMetric: . . . . . . . . . . . {0}&quot;, cib.IsMetric);\n    Console.WriteLine(&quot;ISOCurrencySymbol:. . . . . . . {0}&quot;, cib.ISOCurrencySymbol);\n    Console.WriteLine(&quot;RegionEnglishName:. . . . . . . {0}&quot;, cib.RegionEnglishName);\n    Console.WriteLine(&quot;RegionName: . . . . . . . . . . {0}&quot;, cib.RegionName);\n    Console.WriteLine(&quot;RegionNativeName: . . . . . . . {0}&quot;, cib.RegionNativeName);\n    Console.WriteLine(&quot;ThreeLetterISOLanguageName: . . {0}&quot;, cib.ThreeLetterISOLanguageName);\n    Console.WriteLine(&quot;ThreeLetterISORegionName: . . . {0}&quot;, cib.ThreeLetterISORegionName);\n    Console.WriteLine(&quot;ThreeLetterWindowsLanguageName: {0}&quot;, cib.ThreeLetterWindowsLanguageName);\n    Console.WriteLine(&quot;ThreeLetterWindowsRegionName: . {0}&quot;, cib.ThreeLetterWindowsRegionName);\n    Console.WriteLine(&quot;TwoLetterISOLanguageName: . . . {0}&quot;, cib.TwoLetterISOLanguageName);\n    Console.WriteLine(&quot;TwoLetterISORegionName: . . . . {0}&quot;, cib.TwoLetterISORegionName);\n    }\n}\n/*\nThis code example produces the following results:\n\nCultureName:. . . . . . . . . . x-en-US-sample\nCultureEnglishName: . . . . . . English\nCultureNativeName:. . . . . . . English\nGeoId:. . . . . . . . . . . . . 244\nIsMetric: . . . . . . . . . . . False\nISOCurrencySymbol:. . . . . . . USD\nRegionEnglishName:. . . . . . . United States\nRegionName: . . . . . . . . . . US\nRegionNativeName: . . . . . . . United States\nThreeLetterISOLanguageName: . . eng\nThreeLetterISORegionName: . . . USA\nThreeLetterWindowsLanguageName: ENU\nThreeLetterWindowsRegionName: . USA\nTwoLetterISOLanguageName: . . . en\nTwoLetterISORegionName: . . . . US\n\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"sys.glob.carib1#1\">// This example demonstrates a System.Globalization.Culture-\n// AndRegionInfoBuilder constructor and some of the properties \n// of a custom culture object created with the constructor.\n\n#using &lt;sysglobl.dll&gt;\n\nusing namespace System;\nusing namespace System::Globalization;\n\nint main()\n{\n    CultureAndRegionInfoBuilder^ builder = \n        gcnew CultureAndRegionInfoBuilder\n        (&quot;x-en-US-sample&quot;, CultureAndRegionModifiers::None);\n    \n    // Display some of the properties \n    // for the en-US culture.\n    Console::WriteLine(&quot;CultureName:. . . . . . . . . . {0}&quot;, \n        builder-&gt;CultureName);\n    Console::WriteLine(&quot;CultureEnglishName: . . . . . . {0}&quot;, \n        builder-&gt;CultureEnglishName);\n    Console::WriteLine(&quot;CultureNativeName:. . . . . . . {0}&quot;, \n        builder-&gt;CultureNativeName);\n    Console::WriteLine(&quot;GeoId:. . . . . . . . . . . . . {0}&quot;, \n        builder-&gt;GeoId);\n    Console::WriteLine(&quot;IsMetric: . . . . . . . . . . . {0}&quot;, \n        builder-&gt;IsMetric);\n    Console::WriteLine(&quot;ISOCurrencySymbol:. . . . . . . {0}&quot;, \n        builder-&gt;ISOCurrencySymbol);\n    Console::WriteLine(&quot;RegionEnglishName:. . . . . . . {0}&quot;, \n        builder-&gt;RegionEnglishName);\n    Console::WriteLine(&quot;RegionName: . . . . . . . . . . {0}&quot;, \n        builder-&gt;RegionName);\n    Console::WriteLine(&quot;RegionNativeName: . . . . . . . {0}&quot;, \n        builder-&gt;RegionNativeName);\n    Console::WriteLine(&quot;ThreeLetterISOLanguageName: . . {0}&quot;, \n        builder-&gt;ThreeLetterISOLanguageName);\n    Console::WriteLine(&quot;ThreeLetterISORegionName: . . . {0}&quot;, \n        builder-&gt;ThreeLetterISORegionName);\n    Console::WriteLine(&quot;ThreeLetterWindowsLanguageName: {0}&quot;, \n        builder-&gt;ThreeLetterWindowsLanguageName);\n    Console::WriteLine(&quot;ThreeLetterWindowsRegionName: . {0}&quot;, \n        builder-&gt;ThreeLetterWindowsRegionName);\n    Console::WriteLine(&quot;TwoLetterISOLanguageName: . . . {0}&quot;, \n        builder-&gt;TwoLetterISOLanguageName);\n    Console::WriteLine(&quot;TwoLetterISORegionName: . . . . {0}&quot;, \n        builder-&gt;TwoLetterISORegionName);\n}\n\n/*\nThis code example produces the following results:\n\nCultureName:. . . . . . . . . . en-US\nCultureEnglishName: . . . . . . English (United States)\nCultureNativeName:. . . . . . . English (United States)\nGeoId:. . . . . . . . . . . . . 244\nIsMetric: . . . . . . . . . . . False\nISOCurrencySymbol:. . . . . . . USD\nRegionEnglishName:. . . . . . . United States\nRegionName: . . . . . . . . . . US\nRegionNativeName: . . . . . . . United States\nThreeLetterISOLanguageName: . . eng\nThreeLetterISORegionName: . . . USA\nThreeLetterWindowsLanguageName: ENU\nThreeLetterWindowsRegionName: . USA\nTwoLetterISOLanguageName: . . . en\nTwoLetterISORegionName: . . . . US\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"sys.glob.carib1#1\">&#39; This example demonstrates a System.Globalization.Culture-\n&#39; AndRegionInfoBuilder constructor and some of the properties \n&#39; of the CultureAndRegionInfoBuilder object that is created.\n&#39; Compile this example with a reference to sysglobl.dll.\n\nImports System\nImports System.Globalization\n\nClass Sample\n    Public Shared Sub Main() \n        \n        &#39; Construct a new, privately used culture that extends the en-US culture \n        &#39; provided by the .NET Framework. In this sample, the CultureAndRegion-\n        &#39; Types.Specific parameter creates a minimal CultureAndRegionInfoBuilder \n        &#39; object that you must populate with culture and region information.\n\n        Dim cib As CultureAndRegionInfoBuilder = Nothing\n        Try\n            cib = New CultureAndRegionInfoBuilder(&quot;x-en-US-sample&quot;, _\n                                                   CultureAndRegionModifiers.None)\n        Catch ae As ArgumentException\n            Console.WriteLine(ae)\n            Return\n        End Try\n        \n        &#39; Populate the new CultureAndRegionInfoBuilder object with culture information.\n\n        Dim ci As New CultureInfo(&quot;en-US&quot;)\n        cib.LoadDataFromCultureInfo(ci)\n        \n        &#39; Populate the new CultureAndRegionInfoBuilder object with region information.\n\n        Dim ri As New RegionInfo(&quot;US&quot;)\n        cib.LoadDataFromRegionInfo(ri)\n        \n        &#39; Display some of the properties for the x-en-US-sample custom culture.\n\n        Console.Clear()\n        Console.WriteLine(&quot;CultureName:. . . . . . . . . . {0}&quot;, cib.CultureName)\n        Console.WriteLine(&quot;CultureEnglishName: . . . . . . {0}&quot;, cib.CultureEnglishName)\n        Console.WriteLine(&quot;CultureNativeName:. . . . . . . {0}&quot;, cib.CultureNativeName)\n        Console.WriteLine(&quot;GeoId:. . . . . . . . . . . . . {0}&quot;, cib.GeoId)\n        Console.WriteLine(&quot;IsMetric: . . . . . . . . . . . {0}&quot;, cib.IsMetric)\n        Console.WriteLine(&quot;ISOCurrencySymbol:. . . . . . . {0}&quot;, cib.ISOCurrencySymbol)\n        Console.WriteLine(&quot;RegionEnglishName:. . . . . . . {0}&quot;, cib.RegionEnglishName)\n        Console.WriteLine(&quot;RegionName: . . . . . . . . . . {0}&quot;, cib.RegionName)\n        Console.WriteLine(&quot;RegionNativeName: . . . . . . . {0}&quot;, cib.RegionNativeName)\n        Console.WriteLine(&quot;ThreeLetterISOLanguageName: . . {0}&quot;, cib.ThreeLetterISOLanguageName)\n        Console.WriteLine(&quot;ThreeLetterISORegionName: . . . {0}&quot;, cib.ThreeLetterISORegionName)\n        Console.WriteLine(&quot;ThreeLetterWindowsLanguageName: {0}&quot;, cib.ThreeLetterWindowsLanguageName)\n        Console.WriteLine(&quot;ThreeLetterWindowsRegionName: . {0}&quot;, cib.ThreeLetterWindowsRegionName)\n        Console.WriteLine(&quot;TwoLetterISOLanguageName: . . . {0}&quot;, cib.TwoLetterISOLanguageName)\n        Console.WriteLine(&quot;TwoLetterISORegionName: . . . . {0}&quot;, cib.TwoLetterISORegionName)\n    \n    End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;CultureName:. . . . . . . . . . x-en-US-sample\n&#39;CultureEnglishName: . . . . . . English\n&#39;CultureNativeName:. . . . . . . English\n&#39;GeoId:. . . . . . . . . . . . . 244\n&#39;IsMetric: . . . . . . . . . . . False\n&#39;ISOCurrencySymbol:. . . . . . . USD\n&#39;RegionEnglishName:. . . . . . . United States\n&#39;RegionName: . . . . . . . . . . US\n&#39;RegionNativeName: . . . . . . . United States\n&#39;ThreeLetterISOLanguageName: . . eng\n&#39;ThreeLetterISORegionName: . . . USA\n&#39;ThreeLetterWindowsLanguageName: ENU\n&#39;ThreeLetterWindowsRegionName: . USA\n&#39;TwoLetterISOLanguageName: . . . en\n&#39;TwoLetterISORegionName: . . . . US\n&#39;\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Specify a bitwise combination of one or more CultureAndRegionModifiers values as an argument to the <a class=\"xref\" href=\"system.globalization.cultureandregioninfobuilder#System_Globalization_CultureAndRegionInfoBuilder__ctor_System_String_System_Globalization_CultureAndRegionModifiers_\" data-linktype=\"relative-path\">System.Globalization.CultureAndRegionInfoBuilder.CultureAndRegionInfoBuilder(String, CultureAndRegionModifiers)</a> constructor. You use the resulting <a class=\"xref\" href=\"system.globalization.cultureandregioninfobuilder\" data-linktype=\"relative-path\">CultureAndRegionInfoBuilder</a> object to create a custom culture.  </p>\n<p> A custom culture can have a combination of these characteristics:  </p>\n<ul>\n<li><p>A custom culture can be a specific culture or a neutral culture.  </p>\n<p> A specific culture specifies a language and a region, while a neutral culture specifies a language but no region.  </p>\n</li>\n<li><p>A custom culture can be a replacement culture or a supplemental culture.  </p>\n<p> A replacement culture replaces a culture that ships with the .NET Framework or a locale that ships with Windows.  </p>\n<p> A supplemental culture is anything other than a replacement culture. A supplemental culture can be entirely new, or can extend an existing .NET Framework culture or Windows locale.  </p>\n</li>\n</ul>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Note that the CultureAndRegionModifiers enumeration is found in an assembly named sysglobl.dll. Successfully compiling code that uses this type requires that you add a reference to sysglobl.dll.</p>\n</div>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Globalization_CultureAndRegionModifiers_Neutral\">\r\n      \t\t\t<span class=\"lang-csharp\">Neutral</span>\r\n      \t</td>\r\n      \t<td><p>A neutral custom culture.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Globalization_CultureAndRegionModifiers_None\">\r\n      \t\t\t<span class=\"lang-csharp\">None</span>\r\n      \t</td>\r\n      \t<td><p>A specific, supplemental custom culture.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Globalization_CultureAndRegionModifiers_Replacement\">\r\n      \t\t\t<span class=\"lang-csharp\">Replacement</span>\r\n      \t</td>\r\n      \t<td><p>A custom culture that replaces an existing .NET Framework culture or Windows locale.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Globalization.CultureAndRegionModifiers.yml\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureAndRegionModifiers\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureAndRegionModifiers.Neutral\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureAndRegionModifiers.None\">\r\n<meta name=\"APIName\" content=\"System.Globalization.CultureAndRegionModifiers.Replacement\">\r\n<meta name=\"APILocation\" content=\"sysglobl.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:59 PM\">\r\n<meta name=\"document_id\" content=\"210d1ded-42b0-9944-86d1-129081c6f033\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies constants that define a  object.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.globalization/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Globalization.CultureAndRegionModifiers\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","uhfHeaderId":"MSDocsHeader-DotNet","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Globalization.CultureAndRegionModifiers.yml","open_to_public_contributors":false,"api_name":["System.Globalization.CultureAndRegionModifiers","System.Globalization.CultureAndRegionModifiers.Neutral","System.Globalization.CultureAndRegionModifiers.None","System.Globalization.CultureAndRegionModifiers.Replacement"],"api_location":["sysglobl.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Globalization.CultureAndRegionModifiers","System::Globalization::CultureAndRegionModifiers","System.Globalization.CultureAndRegionModifiers.Neutral","System::Globalization::CultureAndRegionModifiers::Neutral","System.Globalization.CultureAndRegionModifiers.None","System::Globalization::CultureAndRegionModifiers::None","System.Globalization.CultureAndRegionModifiers.Replacement","System::Globalization::CultureAndRegionModifiers::Replacement"],"dev_langs":["csharp"],"updated_at":"2017-04-01 05:59 PM","document_id":"210d1ded-42b0-9944-86d1-129081c6f033","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Globalization/CultureAndRegionModifiers.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"CultureAndRegionModifiers enum | Microsoft Docs","_op_ogTitle":"CultureAndRegionModifiers enum","description":"Specifies constants that define a  object.\n","toc_asset_id":"api/_splitted/System.Globalization/toc.json","toc_rel":"_splitted/System.Globalization/toc.json","source_url":"","ms.assetid":"System.Globalization.CultureAndRegionModifiers","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.globalization.cultureandregionmodifiers","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.globalization.cultureandregionmodifiers","fileRelativePath":"api/System.Globalization.CultureAndRegionModifiers.html"},"themesRelativePathToOutputRoot":"_themes/"}