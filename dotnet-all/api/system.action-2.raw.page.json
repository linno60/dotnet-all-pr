{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">Action&lt;T1,T2&gt;</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Encapsulates a method that has two parameters and does not return a value.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[ECMA2Yaml.Models.ECMAAttribute]\npublic delegate void Action&lt;in T1,in T2&gt;(T1 arg1, T2 arg2);</code></pre>\r\n  \r\n  \r\n  \r\n  \t\t<h3 class=\"accented\">Type Parameters</h3>\r\n  \t\t<table class=\"nameValue stack\">\r\n  \t\t\t<tr>\r\n  \t\t\t<td>T1</td>\r\n  \t\t\t<td><p>The type of the first parameter of the method that this delegate encapsulates.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t\t<tr>\r\n  \t\t\t<td>T2</td>\r\n  \t\t\t<td><p>The type of the second parameter of the method that this delegate encapsulates.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t</table>\r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">Action&lt;T1,T2&gt;</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.compilerservices.typeforwardedfromattribute\" title=\"System.Runtime.CompilerServices.TypeForwardedFromAttribute\" data-linktype=\"relative-path\">TypeForwardedFromAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>You can use the Action(T1, delegate to pass a method as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have two parameters that are both passed to it by value, and it must not return a value. (In C#, the method must return <code>void</code>. In Visual Basic, it must be defined by the <code>Sub</code>â€¦<code>End Sub</code> construct. It can also be a method that returns a value that is ignored.) Typically, such a method is used to perform an operation.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To reference a method that has two parameters and returns a value, use the generic <a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func&lt;T1,T2,TResult&gt;</a> delegate instead.  </p>\n</div>\n<p> When you use the Action(T1, delegate, you do not have to explicitly define a delegate that encapsulates a method with two parameters. For example, the following code explicitly declares a delegate named <code>ConcatStrings</code>. It then assigns a reference to either of two methods to its delegate instance. One method writes two strings to the console; the second writes two strings to a file.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Action~2#1\">using System;\nusing System.IO;\n\ndelegate void ConcatStrings(string string1, string string2);\n\npublic class TestDelegate\n{\n   public static void Main()\n   {\n      string message1 = &quot;The first line of a message.&quot;;\n      string message2 = &quot;The second line of a message.&quot;;\n      ConcatStrings concat;\n      \n      if (Environment.GetCommandLineArgs().Length &gt; 1)\n         concat = WriteToFile;\n      else\n         concat = WriteToConsole;\n         \n      concat(message1, message2);\n   }\n  \n   private static void WriteToConsole(string string1, string string2)\n   {\n      Console.WriteLine(&quot;{0}\\n{1}&quot;, string1, string2);            \n   }\n\n   private static void WriteToFile(string string1, string string2)\n   {\n      StreamWriter writer = null;  \n      try\n      {\n         writer = new StreamWriter(Environment.GetCommandLineArgs()[1], false);\n         writer.WriteLine(&quot;{0}\\n{1}&quot;, string1, string2);\n      }\n      catch\n      {\n         Console.WriteLine(&quot;File write operation failed...&quot;);\n      }\n      finally\n      {\n         if (writer != null) writer.Close();\n      }      \n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Action~2#1\">Imports System.IO\n\nDelegate Sub ConcatStrings(string1 As String, string2 As String)\n\nModule TestDelegate\n   Public Sub Main()\n      \n      Dim message1 As String = &quot;The first line of a message.&quot;\n      Dim message2 As String = &quot;The second line of a message.&quot;\n      Dim concat As ConcatStrings\n      \n      If Environment.GetCommandLineArgs().Length &gt; 1 Then\n         concat = AddressOf WriteToFile\n      Else\n         concat = AddressOf WriteToConsole\n      End If   \n      concat(message1, message2)         \n   End Sub\n   \n   Private Sub WriteToConsole(string1 As String, string2 As String)\n      Console.WriteLine(&quot;{0}{1}{2}&quot;, string1, vbCrLf, string2)\n   End Sub\n   \n   Private Sub WriteToFile(string1 As String, string2 As String)\n      Dim writer As StreamWriter = Nothing  \n      Try\n         writer = New StreamWriter(Environment.GetCommandLineArgs(1), False)\n         writer.WriteLine(&quot;{0}{1}{2}&quot;, string1, vbCrLf, string2)\n      Catch\n         Console.WriteLine(&quot;File write operation failed...&quot;)\n      Finally\n         If writer IsNot Nothing Then writer.Close\n      End Try      \n   End Sub\nEnd Module\n</code></pre><p> The following example simplifies this code by instantiating the Action(T1, delegate instead of explicitly defining a new delegate and assigning a named method to it.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Action~2#2\">using System;\nusing System.IO;\n\npublic class TestAction2\n{\n   public static void Main()\n   {\n      string message1 = &quot;The first line of a message.&quot;;\n      string message2 = &quot;The second line of a message.&quot;;\n      Action&lt;string, string&gt; concat;\n      \n      if (Environment.GetCommandLineArgs().Length &gt; 1)\n         concat = WriteToFile;\n      else\n         concat = WriteToConsole;\n         \n      concat(message1, message2);\n   }\n  \n   private static void WriteToConsole(string string1, string string2)\n   {\n      Console.WriteLine(&quot;{0}\\n{1}&quot;, string1, string2);            \n   }\n\n   private static void WriteToFile(string string1, string string2)\n   {\n      StreamWriter writer = null;  \n      try\n      {\n         writer = new StreamWriter(Environment.GetCommandLineArgs()[1], false);\n         writer.WriteLine(&quot;{0}\\n{1}&quot;, string1, string2);\n      }\n      catch\n      {\n         Console.WriteLine(&quot;File write operation failed...&quot;);\n      }\n      finally\n      {\n         if (writer != null) writer.Close();\n      }      \n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Action~2#2\">Imports System.IO\n\nModule TestAction2\n   Public Sub Main()\n      \n      Dim message1 As String = &quot;The first line of a message.&quot;\n      Dim message2 As String = &quot;The second line of a message.&quot;\n      Dim concat As Action(Of String, String)\n      \n      If Environment.GetCommandLineArgs().Length &gt; 1 Then\n         concat = AddressOf WriteToFile\n      Else\n         concat = AddressOf WriteToConsole\n      End If   \n      concat(message1, message2)         \n   End Sub\n   \n   Private Sub WriteToConsole(string1 As String, string2 As String)\n      Console.WriteLine(&quot;{0}{1}{2}&quot;, string1, vbCrLf, string2)\n   End Sub\n   \n   Private Sub WriteToFile(string1 As String, string2 As String)\n      Dim writer As StreamWriter = Nothing  \n      Try\n         writer = New StreamWriter(Environment.GetCommandLineArgs(1), False)\n         writer.WriteLine(&quot;{0}{1}{2}&quot;, string1, vbCrLf, string2)\n      Catch\n         Console.WriteLine(&quot;File write operation failed...&quot;)\n      Finally\n         If writer IsNot Nothing Then writer.Close\n      End Try      \n   End Sub\nEnd Module\n</code></pre><p> You can also use the Action(T1, delegate with anonymous methods in C#, as the following example illustrates. (For an introduction to anonymous methods, see <a href=\"../topic/anonymous%20methods%20(c%23%20programming%20guide)\" data-linktype=\"relative-path\">Anonymous Methods</a>.)  </p>\n<pre><code class=\"lang-cs\" name=\"System.Action~2#3\">using System;\nusing System.IO;\n\npublic class TestAnonymousMethod\n{\n   public static void Main()\n   {\n      string message1 = &quot;The first line of a message.&quot;;\n      string message2 = &quot;The second line of a message.&quot;;\n      Action&lt;string, string&gt; concat;\n      \n      if (Environment.GetCommandLineArgs().Length &gt; 1)\n         concat = delegate(string s1, string s2) { WriteToFile(s1, s2); };\n      else\n         concat = delegate(string s1, string s2) { WriteToConsole(s1, s2);} ;\n         \n      concat(message1, message2);\n   }\n  \n   private static void WriteToConsole(string string1, string string2)\n   {\n      Console.WriteLine(&quot;{0}\\n{1}&quot;, string1, string2);            \n   }\n\n   private static void WriteToFile(string string1, string string2)\n   {\n      StreamWriter writer = null;  \n      try\n      {\n         writer = new StreamWriter(Environment.GetCommandLineArgs()[1], false);\n         writer.WriteLine(&quot;{0}\\n{1}&quot;, string1, string2);\n      }\n      catch\n      {\n         Console.WriteLine(&quot;File write operation failed...&quot;);\n      }\n      finally\n      {\n         if (writer != null) writer.Close();\n      }      \n   }\n}\n</code></pre><p> You can also assign a lambda expression to an Action(T1, delegate instance, as the following example illustrates. (For an introduction to lambda expressions, see <a href=\"../topic/lambda%20expressions%20(c%23%20programming%20guide)\" data-linktype=\"relative-path\">Lambda Expressions</a>.)  </p>\n<pre><code class=\"lang-vb\" name=\"System.Action~2#4\">Imports System.IO\n\nPublic Module TestLambdaExpression\n\n   Public Sub Main()\n      Dim message1 As String = &quot;The first line of a message.&quot;\n      Dim message2 As String = &quot;The second line of a message.&quot;\n      Dim concat As Action(Of String, String)\n      \n      If Environment.GetCommandLineArgs().Length &gt; 1 Then\n         concat = Sub(s1, s2) WriteToFile(s1, s2)\n      Else\n         concat = Sub(s1, s2) WriteToConsole(s1, s2)\n      End If\n         \n      concat(message1, message2)\n   End Sub\n  \n   Private Function WriteToConsole(string1 As String, string2 As String) As Integer\n      Dim message As String = String.Format(&quot;{0}{1}{2}&quot;, string1, vbCrLf, string2)\n      Console.WriteLine(message)\n      Return message.Length\n   End Function\n\n   Private Function WriteToFile(string1 As String, string2 As String) As Integer\n      Dim writer As StreamWriter = Nothing  \n      Dim message As String = String.Format(&quot;{0}{1}{2}&quot;, string1, vbCrLf, string2)\n      Dim charsWritten As Integer\n      Try\n         writer = New StreamWriter(Environment.GetCommandLineArgs()(1), False)\n         writer.WriteLine(message)\n      Catch\n         Console.WriteLine(&quot;File write operation failed...&quot;)\n      Finally\n         If writer IsNot Nothing Then \n            writer.Close()\n            charsWritten = message.Length\n         Else\n            charsWritten = 0\n         End If\n      End Try      \n      Return charsWritten\n   End Function\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Action~2#4\">using System;\nusing System.IO;\n\npublic class TestLambdaExpression\n{\n   public static void Main()\n   {\n      string message1 = &quot;The first line of a message.&quot;;\n      string message2 = &quot;The second line of a message.&quot;;\n      Action&lt;string, string&gt; concat;\n      \n      if (Environment.GetCommandLineArgs().Length &gt; 1)\n         concat = (s1, s2) =&gt; WriteToFile(s1, s2);\n      else\n         concat = (s1, s2) =&gt; WriteToConsole(s1, s2);\n         \n      concat(message1, message2);\n   }\n  \n   private static void WriteToConsole(string string1, string string2)\n   {\n      Console.WriteLine(&quot;{0}\\n{1}&quot;, string1, string2);            \n   }\n\n   private static void WriteToFile(string string1, string string2)\n   {\n      StreamWriter writer = null;  \n      try\n      {\n         writer = new StreamWriter(Environment.GetCommandLineArgs()[1], false);\n         writer.WriteLine(&quot;{0}\\n{1}&quot;, string1, string2);\n      }\n      catch\n      {\n         Console.WriteLine(&quot;File write operation failed...&quot;);\n      }\n      finally\n      {\n         if (writer != null) writer.Close();\n      }      \n   }\n}\n</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Action-2.yml\">\r\n<meta name=\"APIName\" content=\"System.Action&lt;T1,T2&gt;\">\r\n<meta name=\"APIName\" content=\"System.Action&lt;T1,T2&gt;..ctor\">\r\n<meta name=\"APIName\" content=\"System.Action&lt;T1,T2&gt;.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Action&lt;T1,T2&gt;.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Action&lt;T1,T2&gt;.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"1da386b4-6a02-2df0-5cd0-eb1565759e26\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Encapsulates a method that has two parameters and does not return a value.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Action`2\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Action-2.yml","open_to_public_contributors":false,"api_name":["System.Action<T1,T2>","System.Action<T1,T2>..ctor","System.Action<T1,T2>.Invoke","System.Action<T1,T2>.BeginInvoke","System.Action<T1,T2>.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Action`2","System::Action`2"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"1da386b4-6a02-2df0-5cd0-eb1565759e26","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System/Action`2.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Action<T1,T2> delegate | Microsoft Docs","_op_ogTitle":"Action<T1,T2> delegate","description":"Encapsulates a method that has two parameters and does not return a value.\n","toc_asset_id":"api/_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Action`2","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.action-2","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.action-2","fileRelativePath":"api/System.Action-2.html"},"themesRelativePathToOutputRoot":"_themes/"}