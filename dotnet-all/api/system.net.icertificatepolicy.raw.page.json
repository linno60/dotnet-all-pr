{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ICertificatePolicy</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Validates a server certificate.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public interface ICertificatePolicy</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example creates a certificate policy that returns <code>false</code> for any certificate problem and prints a message that indicates the problem on the console. The CertificateProblem enum defines SSPI constants for certificate problems, and the private GetProblemMessage method creates a printable message about the problem.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic ICertificatePolicy Example#1\">public enum class CertificateProblem : UInt32\n{\n   CertEXPIRED = 0x800B0101,\n   CertVALIDITYPERIODNESTING = 0x800B0102,\n   CertROLE = 0x800B0103,\n   CertPATHLENCONST = 0x800B0104,\n   CertCRITICAL = 0x800B0105,\n   CertPURPOSE = 0x800B0106,\n   CertISSUERCHAINING = 0x800B0107,\n   CertMALFORMED = 0x800B0108,\n   CertUNTRUSTEDROOT = 0x800B0109,\n   CertCHAINING = 0x800B010A,\n   CertREVOKED = 0x800B010C,\n   CertUNTRUSTEDTESTROOT = 0x800B010D,\n   CertREVOCATION_FAILURE = 0x800B010E,\n   CertCN_NO_MATCH = 0x800B010F,\n   CertWRONG_USAGE = 0x800B0110,\n   CertUNTRUSTEDCA = 0x800B0112\n};\n\npublic ref class MyCertificateValidation: public ICertificatePolicy\n{\npublic:\n\n   // Default policy for certificate validation.\n   static bool DefaultValidate = false;\n   virtual bool CheckValidationResult( ServicePoint^ /*sp*/, X509Certificate^ /*cert*/, WebRequest^ request, int problem )\n   {\n      bool ValidationResult = false;\n      Console::WriteLine( &quot;Certificate Problem with accessing {0}&quot;, request-&gt;RequestUri );\n      Console::Write( &quot;Problem code 0x{0:X8},&quot;, (int)problem );\n      Console::WriteLine( GetProblemMessage( (CertificateProblem)problem ) );\n      ValidationResult = DefaultValidate;\n      return ValidationResult;\n   }\n\nprivate:\n   String^ GetProblemMessage( CertificateProblem Problem )\n   {\n      String^ ProblemMessage = &quot;&quot;;\n      CertificateProblem problemList = CertificateProblem(  );\n      String^ ProblemCodeName = Enum::GetName( problemList.GetType(), Problem );\n      if ( ProblemCodeName != nullptr )\n            ProblemMessage = String::Concat( ProblemMessage, &quot;-Certificateproblem:&quot;, ProblemCodeName );\n      else\n            ProblemMessage = &quot;Unknown Certificate Problem&quot;;\n\n      return ProblemMessage;\n   }\n};\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic ICertificatePolicy Example#1\">public  enum    CertificateProblem  : long\n{\n        CertEXPIRED                   = 0x800B0101,\n        CertVALIDITYPERIODNESTING     = 0x800B0102,\n        CertROLE                      = 0x800B0103,\n        CertPATHLENCONST              = 0x800B0104,\n        CertCRITICAL                  = 0x800B0105,\n        CertPURPOSE                   = 0x800B0106,\n        CertISSUERCHAINING            = 0x800B0107,\n        CertMALFORMED                 = 0x800B0108,\n        CertUNTRUSTEDROOT             = 0x800B0109,\n        CertCHAINING                  = 0x800B010A,\n        CertREVOKED                   = 0x800B010C,\n        CertUNTRUSTEDTESTROOT         = 0x800B010D,\n        CertREVOCATION_FAILURE        = 0x800B010E,\n        CertCN_NO_MATCH               = 0x800B010F,\n        CertWRONG_USAGE               = 0x800B0110,\n        CertUNTRUSTEDCA               = 0x800B0112\n}\n\npublic class MyCertificateValidation : ICertificatePolicy\n{\n    // Default policy for certificate validation.\n    public static bool DefaultValidate = false; \n\n    public bool CheckValidationResult(ServicePoint sp, X509Certificate cert,\n       WebRequest request, int problem)\n    {        \n        bool ValidationResult=false;\n        Console.WriteLine(&quot;Certificate Problem with accessing &quot; +\n           request.RequestUri);\n        Console.Write(&quot;Problem code 0x{0:X8},&quot;,(int)problem);\n        Console.WriteLine(GetProblemMessage((CertificateProblem)problem));\n\n        ValidationResult = DefaultValidate;\n        return ValidationResult; \n    }\n    \n    private String GetProblemMessage(CertificateProblem Problem)\n    {\n        String ProblemMessage = &quot;&quot;;\n        CertificateProblem problemList = new CertificateProblem();\n        String ProblemCodeName = Enum.GetName(problemList.GetType(),Problem);\n        if(ProblemCodeName != null)\n           ProblemMessage = ProblemMessage + &quot;-Certificateproblem:&quot; +\n              ProblemCodeName;\n        else\n           ProblemMessage = &quot;Unknown Certificate Problem&quot;;\n        return ProblemMessage;\n     }\n}\n   \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ICertificatePolicy Example#1\">Public Enum CertificateProblem As Long\n    CertEXPIRED                   = 2148204801    &#39; 0x800B0101\n    CertVALIDITYPERIODNESTING     = 2148204802    &#39; 0x800B0102\n    CertROLE                      = 2148204803    &#39; 0x800B0103\n    CertPATHLENCONST              = 2148204804    &#39; 0x800B0104\n    CertCRITICAL                  = 2148204805    &#39; 0x800B0105\n    CertPURPOSE                   = 2148204806    &#39; 0x800B0106\n    CertISSUERCHAINING            = 2148204807    &#39; 0x800B0107\n    CertMALFORMED                 = 2148204808    &#39; 0x800B0108\n    CertUNTRUSTEDROOT             = 2148204809    &#39; 0x800B0109\n    CertCHAINING                  = 2148204810    &#39; 0x800B010A\n    CertREVOKED                   = 2148204812    &#39; 0x800B010C\n    CertUNTRUSTEDTESTROOT         = 2148204813    &#39; 0x800B010D       \n    CertREVOCATION_FAILURE        = 2148204814    &#39; 0x800B010E\n    CertCN_NO_MATCH               = 2148204815    &#39; 0x800B010F\n    CertWRONG_USAGE               = 2148204816    &#39; 0x800B0110\n    CertUNTRUSTEDCA               = 2148204818     &#39; 0x800B0112\nEnd Enum\n\n\nPublic Class MyCertificateValidation\n    Implements ICertificatePolicy\n    \n    &#39; Default policy for certificate validation.\n    Public Shared DefaultValidate As Boolean = False    \n    \n    Public Function CheckValidationResult(srvPoint As ServicePoint, _\n       cert As X509Certificate, request As WebRequest, problem As Integer) _\n       As Boolean Implements ICertificatePolicy.CheckValidationResult\n       \n        Dim ValidationResult As Boolean = False\n        Console.WriteLine((&quot;Certificate Problem with accessing &quot; &amp; _\n           request.RequestUri.ToString()))\n        Console.Write(&quot;Problem code 0x{0:X8},&quot;, CInt(problem))\n        Console.WriteLine(GetProblemMessage(CType(problem, _\n           CertificateProblem)))\n        \n        ValidationResult = DefaultValidate\n        Return ValidationResult\n    End Function    \n    \n    Private Function GetProblemMessage(Problem As CertificateProblem) As String\n        Dim ProblemMessage As String = &quot;&quot;\n        Dim problemList As New CertificateProblem()\n        Dim ProblemCodeName As String = System.Enum.GetName( _\n           problemList.GetType(), Problem)\n        If Not (ProblemCodeName Is Nothing) Then\n            ProblemMessage = ProblemMessage + &quot;-Certificateproblem:&quot; &amp; _\n               ProblemCodeName\n        Else\n            ProblemMessage = &quot;Unknown Certificate Problem&quot;\n        End If\n        Return ProblemMessage\n    End Function\nEnd Class\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The ICertificatePolicy interface is used to provide custom security certificate validation for an application. The default policy is to allow valid certificates, as well as valid certificates that have expired. To change this policy, implement the ICertificatePolicy interface with a different policy, and then assign that policy to <a class=\"xref\" href=\"system.net.servicepointmanager#System_Net_ServicePointManager_CertificatePolicy_\" data-linktype=\"relative-path\">CertificatePolicy</a>.  </p>\n<p> ICertificatePolicy uses the Security Support Provider Interface (SSPI). For more information, see the SSPI documentation on MSDN.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Net_ICertificatePolicy_CheckValidationResult_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_ICertificatePolicy_CheckValidationResult_System_Net_ServicePoint_System_Security_Cryptography_X509Certificates_X509Certificate_System_Net_WebRequest_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CheckValidationResult(ServicePoint, X509Certificate, WebRequest, Int32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Validates a server certificate.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool CheckValidationResult (System.Net.ServicePoint srvPoint, System.Security.Cryptography.X509Certificates.X509Certificate certificate, System.Net.WebRequest request, int certificateProblem);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>srvPoint</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.net.servicepoint\" data-linktype=\"relative-path\">ServicePoint</a> that will use the certificate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>certificate</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">X509Certificate</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The certificate to validate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>request</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The request that received the certificate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>certificateProblem</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The problem that was encountered when using the certificate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the certificate should be honored; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The CheckValidationResult method implements the application certificate validation policy. The method can examine the <code>srvPoint</code>, <code>certificate</code>, <code>request</code>, and <code>certificateProblem</code> parameters to determine whether the certificate should be honored.  </p>\n<p> The <code>certificateProblem</code> parameter is a Security Support Provider Interface (SSPI) status code. For more information, see the SSPI documentation on MSDN.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Net.ICertificatePolicy.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.ICertificatePolicy\">\r\n<meta name=\"APIName\" content=\"System.Net.ICertificatePolicy.CheckValidationResult\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"348f350a-b182-ca4c-d979-569a7a5caabe\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Validates a server certificate.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.net/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.ICertificatePolicy\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Net.ICertificatePolicy.yml","open_to_public_contributors":false,"api_name":["System.Net.ICertificatePolicy","System.Net.ICertificatePolicy.CheckValidationResult"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.ICertificatePolicy","System::Net::ICertificatePolicy","System.Net.ICertificatePolicy.CheckValidationResult","System::Net::ICertificatePolicy::CheckValidationResult"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"348f350a-b182-ca4c-d979-569a7a5caabe","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Net/ICertificatePolicy.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ICertificatePolicy interface | Microsoft Docs","_op_ogTitle":"ICertificatePolicy interface","description":"Validates a server certificate.\n","toc_asset_id":"api/_splitted/System.Net/toc.json","toc_rel":"_splitted/System.Net/toc.json","source_url":"","ms.assetid":"System.Net.ICertificatePolicy","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.net.icertificatepolicy","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.net.icertificatepolicy","fileRelativePath":"api/System.Net.ICertificatePolicy.html"},"themesRelativePathToOutputRoot":"_themes/"}