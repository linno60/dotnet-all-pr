{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">AccessibleStates</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies values representing possible states for an accessible object.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Flags]\npublic enum AccessibleStates</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">AccessibleStates</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates the creation of an accessibility-aware chart control, using the <a class=\"xref\" href=\"system.windows.forms.accessibleobject\" data-linktype=\"relative-path\">AccessibleObject</a> and <a class=\"xref\" href=\"system.windows.forms.control.controlaccessibleobject\" data-linktype=\"relative-path\">Control.ControlAccessibleObject</a> classes to expose accessible information. The control plots two curves along with a legend. The <code>ChartControlAccessibleObject</code> class, which derives from <code>ControlAccessibleObject</code>, is used in the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_CreateAccessibilityInstance_\" data-linktype=\"relative-path\">CreateAccessibilityInstance</a> method to provide custom accessible information for the chart control. Because the chart legend is not an actual control based on <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a>, but instead is drawn by the chart control, it does not contain any built-in accessible information. Because of this, the <code>ChartControlAccessibleObject</code> class overrides the <a class=\"xref\" href=\"system.windows.forms.accessibleobject#System_Windows_Forms_AccessibleObject_GetChild_\" data-linktype=\"relative-path\">GetChild</a> method to return the <code>CurveLegendAccessibleObject</code> that represents accessible information for each part of the legend. When an accessible-aware application uses this control, the control can provide the necessary accessible information.  </p>\n<p> This code excerpt demonstrates using the AccessibleStates enumeration with the <a class=\"xref\" href=\"system.windows.forms.accessibleobject#System_Windows_Forms_AccessibleObject_State_\" data-linktype=\"relative-path\">State</a> property. See the <a class=\"xref\" href=\"system.windows.forms.accessibleobject\" data-linktype=\"relative-path\">AccessibleObject</a> class overview for the complete code example.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.AccessibleObject#4\">&#39; Inner Class ChartControlAccessibleObject represents accessible information \n&#39; associated with the ChartControl.\n&#39; The ChartControlAccessibleObject is returned in the         &#39; ChartControl.CreateAccessibilityInstance override.\nPublic Class ChartControlAccessibleObject\n    Inherits Control.ControlAccessibleObject\n\n    Private chartControl As ChartControl\n    \n    Public Sub New(ctrl As ChartControl)\n        MyBase.New(ctrl)\n        chartControl = ctrl\n    End Sub &#39;New\n    \n    &#39; Get the role for the Chart. This is used by accessibility programs.            \n    Public Overrides ReadOnly Property Role() As AccessibleRole\n        Get\n            Return System.Windows.Forms.AccessibleRole.Chart\n        End Get\n    End Property\n    \n    &#39; Get the state for the Chart. This is used by accessibility programs.            \n    Public Overrides ReadOnly Property State() As AccessibleStates\n        Get\n            Return AccessibleStates.ReadOnly\n        End Get\n    End Property                        \n    \n    &#39; The CurveLegend objects are &quot;child&quot; controls in terms of accessibility so \n    &#39; return the number of ChartLengend objects.            \n    Public Overrides Function GetChildCount() As Integer\n        Return chartControl.Legends.Length\n    End Function \n    \n    &#39; Get the Accessibility object of the child CurveLegend idetified by index.\n    Public Overrides Function GetChild(index As Integer) As AccessibleObject\n        If index &gt;= 0 And index &lt; chartControl.Legends.Length Then\n            Return chartControl.Legends(index).AccessibilityObject\n        End If\n        Return Nothing\n    End Function \n    \n    &#39; Helper function that is used by the CurveLegend&#39;s accessibility object\n    &#39; to navigate between sibiling controls. Specifically, this function is used in\n    &#39; the CurveLegend.CurveLegendAccessibleObject.Navigate function.\n    Friend Function NavigateFromChild(child As CurveLegend.CurveLegendAccessibleObject, _\n                                    navdir As AccessibleNavigation) As AccessibleObject\n        Select Case navdir\n            Case AccessibleNavigation.Down, AccessibleNavigation.Next\n                    Return GetChild(child.ID + 1)\n            \n            Case AccessibleNavigation.Up, AccessibleNavigation.Previous\n                    Return GetChild(child.ID - 1)\n        End Select\n        Return Nothing\n    End Function            \n\n    &#39; Helper function that is used by the CurveLegend&#39;s accessibility object\n    &#39; to select a specific CurveLegend control. Specifically, this function is used \n    &#39; in the CurveLegend.CurveLegendAccessibleObject.Select function.            \n    Friend Sub SelectChild(child As CurveLegend.CurveLegendAccessibleObject, selection As AccessibleSelection)\n        Dim childID As Integer = child.ID\n        \n        &#39; Determine which selection action should occur, based on the\n        &#39; AccessibleSelection value.\n        If (selection And AccessibleSelection.TakeSelection) &lt;&gt; 0 Then\n            Dim i As Integer\n            For i = 0 To chartControl.Legends.Length - 1\n                If i = childID Then\n                    chartControl.Legends(i).Selected = True\n                Else\n                    chartControl.Legends(i).Selected = False\n                End If\n            Next i\n            \n            &#39; AccessibleSelection.AddSelection means that the CurveLegend will be selected.\n            If (selection And AccessibleSelection.AddSelection) &lt;&gt; 0 Then\n                chartControl.Legends(childID).Selected = True\n            End If\n\n            &#39; AccessibleSelection.AddSelection means that the CurveLegend will be unselected.                    \n            If (selection And AccessibleSelection.RemoveSelection) &lt;&gt; 0 Then\n                chartControl.Legends(childID).Selected = False\n            End If\n        End If\n    End Sub &#39;SelectChild\nEnd Class &#39;ChartControlAccessibleObject\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.AccessibleObject#4\">// Inner class ChartControlAccessibleObject represents accessible information associated with the ChartControl.\n// The ChartControlAccessibleObject is returned in the ChartControl.CreateAccessibilityInstance override.\npublic class ChartControlAccessibleObject : ControlAccessibleObject\n{\n    ChartControl chartControl;\n\n    public ChartControlAccessibleObject(ChartControl ctrl) : base(ctrl) \n    {\n        chartControl = ctrl;\n    }\n\n    // Gets the role for the Chart. This is used by accessibility programs.\n    public override AccessibleRole Role\n    {  \n        get {\n            return AccessibleRole.Chart;\n        }\n    }\n\n    // Gets the state for the Chart. This is used by accessibility programs.\n    public override AccessibleStates State\n    {  \n        get {                    \n            return AccessibleStates.ReadOnly;\n        }\n    }\n\n    // The CurveLegend objects are &quot;child&quot; controls in terms of accessibility so \n    // return the number of ChartLengend objects.\n    public override int GetChildCount()\n    {  \n        return chartControl.Legends.Length;\n    }\n\n    // Gets the Accessibility object of the child CurveLegend idetified by index.\n    public override AccessibleObject GetChild(int index)\n    {  \n        if (index &gt;= 0 &amp;&amp; index &lt; chartControl.Legends.Length) {\n            return chartControl.Legends[index].AccessibilityObject;\n        }                \n        return null;\n    }\n\n    // Helper function that is used by the CurveLegend&#39;s accessibility object\n    // to navigate between sibiling controls. Specifically, this function is used in\n    // the CurveLegend.CurveLegendAccessibleObject.Navigate function.\n    internal AccessibleObject NavigateFromChild(CurveLegend.CurveLegendAccessibleObject child, \n                                                AccessibleNavigation navdir) \n    {  \n        switch(navdir) {\n            case AccessibleNavigation.Down:\n            case AccessibleNavigation.Next:\n                return GetChild(child.ID + 1);\n                \n            case AccessibleNavigation.Up:\n            case AccessibleNavigation.Previous:\n                return GetChild(child.ID - 1);                        \n        }\n        return null;\n    }\n\n    // Helper function that is used by the CurveLegend&#39;s accessibility object\n    // to select a specific CurveLegend control. Specifically, this function is used\n    // in the CurveLegend.CurveLegendAccessibleObject.Select function.\n    internal void SelectChild(CurveLegend.CurveLegendAccessibleObject child, AccessibleSelection selection) \n    {   \n        int childID = child.ID;\n\n        // Determine which selection action should occur, based on the\n        // AccessibleSelection value.\n        if ((selection &amp; AccessibleSelection.TakeSelection) != 0) {\n            for(int i = 0; i &lt; chartControl.Legends.Length; i++) {\n                if (i == childID) {\n                    chartControl.Legends[i].Selected = true;                        \n                } else {\n                    chartControl.Legends[i].Selected = false;\n                }\n            }\n\n            // AccessibleSelection.AddSelection means that the CurveLegend will be selected.\n            if ((selection &amp; AccessibleSelection.AddSelection) != 0) {\n                chartControl.Legends[childID].Selected = true;                        \n            }\n\n            // AccessibleSelection.AddSelection means that the CurveLegend will be unselected.\n            if ((selection &amp; AccessibleSelection.RemoveSelection) != 0) {\n                chartControl.Legends[childID].Selected = false;                        \n            }\n        }            \n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.AccessibleObject#4\">// Inner class ChartControlAccessibleObject represents accessible information associated with the ChartControl.\n// The ChartControlAccessibleObject is returned in the ChartControl::CreateAccessibilityInstance .\nref class ChartControlAccessibleObject: public ControlAccessibleObject\n{\nprivate:\n   ChartControl^ chartControl;\n\npublic:\n   ChartControlAccessibleObject( ChartControl^ ctrl )\n      : ControlAccessibleObject( ctrl )\n   {\n      chartControl = ctrl;\n   }\n\n\n   property System::Windows::Forms::AccessibleRole Role \n   {\n\n      // Gets the role for the Chart. This is used by accessibility programs.\n      virtual System::Windows::Forms::AccessibleRole get() override\n      {\n         return ::AccessibleRole::Chart;\n      }\n\n   }\n\n   property AccessibleStates State \n   {\n\n      // Gets the state for the Chart. This is used by accessibility programs.\n      virtual AccessibleStates get() override\n      {\n         return AccessibleStates::ReadOnly;\n      }\n\n   }\n\n   // The CurveLegend objects are &quot;child&quot; controls in terms of accessibility so\n   // return the number of ChartLengend objects.\n   virtual int GetChildCount() override\n   {\n      return chartControl-&gt;Legends-&gt;Length;\n   }\n\n\n   // Gets the Accessibility object of the child CurveLegend idetified by index.\n   virtual AccessibleObject^ GetChild( int index ) override\n   {\n      if ( index &gt;= 0 &amp;&amp; index &lt; chartControl-&gt;Legends-&gt;Length )\n      {\n         return chartControl-&gt;Legends[ index ]-&gt;AccessibilityObject;\n      }\n\n      return nullptr;\n   }\n\n\ninternal:\n\n   // Helper function that is used by the CurveLegend&#39;s accessibility object\n   // to navigate between sibiling controls. Specifically, this function is used in\n   // the CurveLegend::CurveLegendAccessibleObject.Navigate function.\n   AccessibleObject^ NavigateFromChild( CurveLegend::CurveLegendAccessibleObject^ child, AccessibleNavigation navdir )\n   {\n      switch ( navdir )\n      {\n         case AccessibleNavigation::Down:\n         case AccessibleNavigation::Next:\n            return GetChild( child-&gt;ID + 1 );\n\n         case AccessibleNavigation::Up:\n         case AccessibleNavigation::Previous:\n            return GetChild( child-&gt;ID - 1 );\n      }\n      return nullptr;\n   }\n\n\n   // Helper function that is used by the CurveLegend&#39;s accessibility object\n   // to select a specific CurveLegend control. Specifically, this function is used\n   // in the CurveLegend::CurveLegendAccessibleObject.Select function.\n   void SelectChild( CurveLegend::CurveLegendAccessibleObject^ child, AccessibleSelection selection )\n   {\n      int childID = child-&gt;ID;\n      \n      // Determine which selection action should occur, based on the\n      // AccessibleSelection value.\n      if ( (selection &amp; AccessibleSelection::TakeSelection) != (AccessibleSelection)0 )\n      {\n         for ( int i = 0; i &lt; chartControl-&gt;Legends-&gt;Length; i++ )\n         {\n            if ( i == childID )\n            {\n               chartControl-&gt;Legends[ i ]-&gt;Selected = true;\n            }\n            else\n            {\n               chartControl-&gt;Legends[ i ]-&gt;Selected = false;\n            }\n\n         }\n         \n         // AccessibleSelection-&gt;AddSelection means that the CurveLegend will be selected.\n         if ( (selection &amp; AccessibleSelection::AddSelection) != (AccessibleSelection)0 )\n         {\n            chartControl-&gt;Legends[ childID ]-&gt;Selected = true;\n         }\n         \n         // AccessibleSelection-&gt;AddSelection means that the CurveLegend will be unselected.\n         if ( (selection &amp; AccessibleSelection::RemoveSelection) != (AccessibleSelection)0 )\n         {\n            chartControl-&gt;Legends[ childID ]-&gt;Selected = false;\n         }\n      }\n   }\n\n};\n\n// class ChartControlAccessibleObject\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>An accessible object can be associated with one or more of these states.  </p>\n<p> For more information about the accessibility application, see &quot;Microsoft Active Accessibility&quot; in the Microsoft Developer Network (MSDN) library at <a href=\"http://msdn.microsoft.com/library\" data-linktype=\"external\">http://msdn.microsoft.com/library</a>.</p>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleStates_AlertHigh\">\r\n      \t\t\t<span class=\"lang-csharp\">AlertHigh</span>\r\n      \t</td>\r\n      \t<td><p>The important information that should be conveyed to the user immediately. For example, a battery-level indicator reaching a critical low level would transition to this state, in which case, a blind access utility would announce this information immediately to the user, and a screen magnification program would scroll the screen so that the battery indicator is in view. This state is also appropriate for any prompt or operation that must be completed before the user can continue.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleStates_AlertLow\">\r\n      \t\t\t<span class=\"lang-csharp\">AlertLow</span>\r\n      \t</td>\r\n      \t<td><p>The low-priority information that might not be important to the user.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleStates_AlertMedium\">\r\n      \t\t\t<span class=\"lang-csharp\">AlertMedium</span>\r\n      \t</td>\r\n      \t<td><p>The important information that does not need to be conveyed to the user immediately. For example, when a battery-level indicator is starting to reach a low level, it could generate a medium-level alert. Blind access utilities could then generate a sound to let the user know that important information is available, without actually interrupting the user&#39;s work. Users can then query the alert information any time they choose.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleStates_Animated\">\r\n      \t\t\t<span class=\"lang-csharp\">Animated</span>\r\n      \t</td>\r\n      \t<td><p>The object that rapidly or constantly changes appearance. Graphics that are occasionally animated, but not always, should be defined as <a class=\"xref\" href=\"system.windows.forms.accessiblerole\" data-linktype=\"relative-path\">AccessibleRole</a><code>OR``Animated</code>. This state should not be used to indicate that the object&#39;s location is changing.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleStates_Busy\">\r\n      \t\t\t<span class=\"lang-csharp\">Busy</span>\r\n      \t</td>\r\n      \t<td><p>A control that cannot accept input in its current condition.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleStates_Checked\">\r\n      \t\t\t<span class=\"lang-csharp\">Checked</span>\r\n      \t</td>\r\n      \t<td><p>An object with a selected check box.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleStates_Collapsed\">\r\n      \t\t\t<span class=\"lang-csharp\">Collapsed</span>\r\n      \t</td>\r\n      \t<td><p>The hidden children of the object that are items in an outline or tree structure.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleStates_Default\">\r\n      \t\t\t<span class=\"lang-csharp\">Default</span>\r\n      \t</td>\r\n      \t<td><p>The default button or menu item.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleStates_Expanded\">\r\n      \t\t\t<span class=\"lang-csharp\">Expanded</span>\r\n      \t</td>\r\n      \t<td><p>The displayed children of the object that are items in an outline or tree structure.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleStates_ExtSelectable\">\r\n      \t\t\t<span class=\"lang-csharp\">ExtSelectable</span>\r\n      \t</td>\r\n      \t<td><p>The altered selection such that all objects between the selection anchor, which is the object with the keyboard focus, and this object take on the anchor object&#39;s selection state. If the anchor object is not selected, the objects are removed from the selection. If the anchor object is selected, the selection is extended to include this object and all objects in between. You can set the selection state by combining this with <a class=\"xref\" href=\"system.windows.forms.accessibleselection\" data-linktype=\"relative-path\">AccessibleSelection</a> or <span class=\"xref\">stem.Windows.Forms.AccessibleSelection.RemoveSelection</span>. This state does not change the focus or the selection anchor unless it is combined with <span class=\"xref\">stem.Windows.Forms.AccessibleSelection.TakeFocus</span>.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleStates_Floating\">\r\n      \t\t\t<span class=\"lang-csharp\">Floating</span>\r\n      \t</td>\r\n      \t<td><p>The object that is not fixed to the boundary of its parent object and that does not move automatically along with the parent.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleStates_Focusable\">\r\n      \t\t\t<span class=\"lang-csharp\">Focusable</span>\r\n      \t</td>\r\n      \t<td><p>The object on the active window that can receive keyboard focus.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleStates_Focused\">\r\n      \t\t\t<span class=\"lang-csharp\">Focused</span>\r\n      \t</td>\r\n      \t<td><p>An object with the keyboard focus.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleStates_HasPopup\">\r\n      \t\t\t<span class=\"lang-csharp\">HasPopup</span>\r\n      \t</td>\r\n      \t<td><p>The object displays a pop-up menu or window when invoked.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleStates_HotTracked\">\r\n      \t\t\t<span class=\"lang-csharp\">HotTracked</span>\r\n      \t</td>\r\n      \t<td><p>The object hot-tracked by the mouse, meaning its appearance is highlighted to indicate the mouse pointer is located over it.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleStates_Indeterminate\">\r\n      \t\t\t<span class=\"lang-csharp\">Indeterminate</span>\r\n      \t</td>\r\n      \t<td><p>A three-state check box or toolbar button whose state is indeterminate. The check box is neither checked nor unchecked, and it is in the third or mixed state.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleStates_Invisible\">\r\n      \t\t\t<span class=\"lang-csharp\">Invisible</span>\r\n      \t</td>\r\n      \t<td><p>An object without a visible user interface.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleStates_Linked\">\r\n      \t\t\t<span class=\"lang-csharp\">Linked</span>\r\n      \t</td>\r\n      \t<td><p>A linked object that has not been previously selected.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleStates_Marqueed\">\r\n      \t\t\t<span class=\"lang-csharp\">Marqueed</span>\r\n      \t</td>\r\n      \t<td><p>An object with scrolling or moving text or graphics.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleStates_Mixed\">\r\n      \t\t\t<span class=\"lang-csharp\">Mixed</span>\r\n      \t</td>\r\n      \t<td><p>A three-state check box or toolbar button whose state is indeterminate. The check box is neither checked nor unchecked, and it is in the third or mixed state.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleStates_Moveable\">\r\n      \t\t\t<span class=\"lang-csharp\">Moveable</span>\r\n      \t</td>\r\n      \t<td><p>A movable object.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleStates_MultiSelectable\">\r\n      \t\t\t<span class=\"lang-csharp\">MultiSelectable</span>\r\n      \t</td>\r\n      \t<td><p>An object that accepts multiple selected items.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleStates_None\">\r\n      \t\t\t<span class=\"lang-csharp\">None</span>\r\n      \t</td>\r\n      \t<td><p>No state.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleStates_Offscreen\">\r\n      \t\t\t<span class=\"lang-csharp\">Offscreen</span>\r\n      \t</td>\r\n      \t<td><p>No on-screen representation. A sound or alert object would have this state, or a hidden window that is never made visible.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleStates_Pressed\">\r\n      \t\t\t<span class=\"lang-csharp\">Pressed</span>\r\n      \t</td>\r\n      \t<td><p>A pressed object.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleStates_Protected\">\r\n      \t\t\t<span class=\"lang-csharp\">Protected</span>\r\n      \t</td>\r\n      \t<td><p>A password-protected edit control.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleStates_ReadOnly\">\r\n      \t\t\t<span class=\"lang-csharp\">ReadOnly</span>\r\n      \t</td>\r\n      \t<td><p>A read-only object.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleStates_Selectable\">\r\n      \t\t\t<span class=\"lang-csharp\">Selectable</span>\r\n      \t</td>\r\n      \t<td><p>An object that can accept selection.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleStates_Selected\">\r\n      \t\t\t<span class=\"lang-csharp\">Selected</span>\r\n      \t</td>\r\n      \t<td><p>A selected object.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleStates_SelfVoicing\">\r\n      \t\t\t<span class=\"lang-csharp\">SelfVoicing</span>\r\n      \t</td>\r\n      \t<td><p>The object or child can use text-to-speech (TTS) to describe itself. A speech-based accessibility aid should not announce information when an object with this state has the focus, because the object automatically announces information about itself.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleStates_Sizeable\">\r\n      \t\t\t<span class=\"lang-csharp\">Sizeable</span>\r\n      \t</td>\r\n      \t<td><p>A sizable object.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleStates_Traversed\">\r\n      \t\t\t<span class=\"lang-csharp\">Traversed</span>\r\n      \t</td>\r\n      \t<td><p>A linked object that has previously been selected.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleStates_Unavailable\">\r\n      \t\t\t<span class=\"lang-csharp\">Unavailable</span>\r\n      \t</td>\r\n      \t<td><p>An unavailable object.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_AccessibleStates_Valid\">\r\n      \t\t\t<span class=\"lang-csharp\">Valid</span>\r\n      \t</td>\r\n      \t<td><p>A valid object. This property is deprecated in .NET Framework 2.0.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.AccessibleStates.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates.AlertHigh\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates.AlertLow\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates.AlertMedium\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates.Animated\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates.Busy\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates.Checked\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates.Collapsed\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates.Default\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates.Expanded\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates.ExtSelectable\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates.Floating\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates.Focusable\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates.Focused\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates.HasPopup\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates.HotTracked\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates.Indeterminate\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates.Invisible\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates.Linked\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates.Marqueed\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates.Mixed\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates.Moveable\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates.MultiSelectable\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates.None\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates.Offscreen\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates.Pressed\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates.Protected\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates.ReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates.Selectable\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates.Selected\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates.SelfVoicing\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates.Sizeable\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates.Traversed\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates.Unavailable\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.AccessibleStates.Valid\">\r\n<meta name=\"APILocation\" content=\"System.Windows.Forms.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"18365b4a-9230-0073-002d-0441c1616a30\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies values representing possible states for an accessible object.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.windows.forms/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.AccessibleStates\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.AccessibleStates.yml","open_to_public_contributors":false,"api_name":["System.Windows.Forms.AccessibleStates","System.Windows.Forms.AccessibleStates.AlertHigh","System.Windows.Forms.AccessibleStates.AlertLow","System.Windows.Forms.AccessibleStates.AlertMedium","System.Windows.Forms.AccessibleStates.Animated","System.Windows.Forms.AccessibleStates.Busy","System.Windows.Forms.AccessibleStates.Checked","System.Windows.Forms.AccessibleStates.Collapsed","System.Windows.Forms.AccessibleStates.Default","System.Windows.Forms.AccessibleStates.Expanded","System.Windows.Forms.AccessibleStates.ExtSelectable","System.Windows.Forms.AccessibleStates.Floating","System.Windows.Forms.AccessibleStates.Focusable","System.Windows.Forms.AccessibleStates.Focused","System.Windows.Forms.AccessibleStates.HasPopup","System.Windows.Forms.AccessibleStates.HotTracked","System.Windows.Forms.AccessibleStates.Indeterminate","System.Windows.Forms.AccessibleStates.Invisible","System.Windows.Forms.AccessibleStates.Linked","System.Windows.Forms.AccessibleStates.Marqueed","System.Windows.Forms.AccessibleStates.Mixed","System.Windows.Forms.AccessibleStates.Moveable","System.Windows.Forms.AccessibleStates.MultiSelectable","System.Windows.Forms.AccessibleStates.None","System.Windows.Forms.AccessibleStates.Offscreen","System.Windows.Forms.AccessibleStates.Pressed","System.Windows.Forms.AccessibleStates.Protected","System.Windows.Forms.AccessibleStates.ReadOnly","System.Windows.Forms.AccessibleStates.Selectable","System.Windows.Forms.AccessibleStates.Selected","System.Windows.Forms.AccessibleStates.SelfVoicing","System.Windows.Forms.AccessibleStates.Sizeable","System.Windows.Forms.AccessibleStates.Traversed","System.Windows.Forms.AccessibleStates.Unavailable","System.Windows.Forms.AccessibleStates.Valid"],"api_location":["System.Windows.Forms.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.AccessibleStates","System::Windows::Forms::AccessibleStates","System.Windows.Forms.AccessibleStates.AlertHigh","System::Windows::Forms::AccessibleStates::AlertHigh","System.Windows.Forms.AccessibleStates.AlertLow","System::Windows::Forms::AccessibleStates::AlertLow","System.Windows.Forms.AccessibleStates.AlertMedium","System::Windows::Forms::AccessibleStates::AlertMedium","System.Windows.Forms.AccessibleStates.Animated","System::Windows::Forms::AccessibleStates::Animated","System.Windows.Forms.AccessibleStates.Busy","System::Windows::Forms::AccessibleStates::Busy","System.Windows.Forms.AccessibleStates.Checked","System::Windows::Forms::AccessibleStates::Checked","System.Windows.Forms.AccessibleStates.Collapsed","System::Windows::Forms::AccessibleStates::Collapsed","System.Windows.Forms.AccessibleStates.Default","System::Windows::Forms::AccessibleStates::Default","System.Windows.Forms.AccessibleStates.Expanded","System::Windows::Forms::AccessibleStates::Expanded","System.Windows.Forms.AccessibleStates.ExtSelectable","System::Windows::Forms::AccessibleStates::ExtSelectable","System.Windows.Forms.AccessibleStates.Floating","System::Windows::Forms::AccessibleStates::Floating","System.Windows.Forms.AccessibleStates.Focusable","System::Windows::Forms::AccessibleStates::Focusable","System.Windows.Forms.AccessibleStates.Focused","System::Windows::Forms::AccessibleStates::Focused","System.Windows.Forms.AccessibleStates.HasPopup","System::Windows::Forms::AccessibleStates::HasPopup","System.Windows.Forms.AccessibleStates.HotTracked","System::Windows::Forms::AccessibleStates::HotTracked","System.Windows.Forms.AccessibleStates.Indeterminate","System::Windows::Forms::AccessibleStates::Indeterminate","System.Windows.Forms.AccessibleStates.Invisible","System::Windows::Forms::AccessibleStates::Invisible","System.Windows.Forms.AccessibleStates.Linked","System::Windows::Forms::AccessibleStates::Linked","System.Windows.Forms.AccessibleStates.Marqueed","System::Windows::Forms::AccessibleStates::Marqueed","System.Windows.Forms.AccessibleStates.Mixed","System::Windows::Forms::AccessibleStates::Mixed","System.Windows.Forms.AccessibleStates.Moveable","System::Windows::Forms::AccessibleStates::Moveable","System.Windows.Forms.AccessibleStates.MultiSelectable","System::Windows::Forms::AccessibleStates::MultiSelectable","System.Windows.Forms.AccessibleStates.None","System::Windows::Forms::AccessibleStates::None","System.Windows.Forms.AccessibleStates.Offscreen","System::Windows::Forms::AccessibleStates::Offscreen","System.Windows.Forms.AccessibleStates.Pressed","System::Windows::Forms::AccessibleStates::Pressed","System.Windows.Forms.AccessibleStates.Protected","System::Windows::Forms::AccessibleStates::Protected","System.Windows.Forms.AccessibleStates.ReadOnly","System::Windows::Forms::AccessibleStates::ReadOnly","System.Windows.Forms.AccessibleStates.Selectable","System::Windows::Forms::AccessibleStates::Selectable","System.Windows.Forms.AccessibleStates.Selected","System::Windows::Forms::AccessibleStates::Selected","System.Windows.Forms.AccessibleStates.SelfVoicing","System::Windows::Forms::AccessibleStates::SelfVoicing","System.Windows.Forms.AccessibleStates.Sizeable","System::Windows::Forms::AccessibleStates::Sizeable","System.Windows.Forms.AccessibleStates.Traversed","System::Windows::Forms::AccessibleStates::Traversed","System.Windows.Forms.AccessibleStates.Unavailable","System::Windows::Forms::AccessibleStates::Unavailable","System.Windows.Forms.AccessibleStates.Valid","System::Windows::Forms::AccessibleStates::Valid"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"18365b4a-9230-0073-002d-0441c1616a30","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Windows.Forms/AccessibleStates.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"AccessibleStates enum | Microsoft Docs","_op_ogTitle":"AccessibleStates enum","description":"Specifies values representing possible states for an accessible object.\n","toc_asset_id":"api/_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.AccessibleStates","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.accessiblestates","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.accessiblestates","fileRelativePath":"api/System.Windows.Forms.AccessibleStates.html"},"themesRelativePathToOutputRoot":"_themes/"}