{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">RegistryRights</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies the access control rights that can be applied to registry objects.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Flags]\npublic enum RegistryRights</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">RegistryRights</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.flagsattribute\" title=\"System.FlagsAttribute\" data-linktype=\"relative-path\">FlagsAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates the use of the RegistryRights enumeration. The code creates a test key, allowing the current user ReadKey and Delete access rights but denying ChangePermissions and WriteKey rights. Subsequent attempts to manipulate the key succeed or fail depending on these permissions.  </p>\n<p> Before the key is deleted, the code pauses. You can switch to the Registry Editor (Regedit.exe or Regedt32.exe) and verify that the same access rights apply when the key is accessed using the Registry Editor.  </p>\n<p> This example works best if you use <strong>RunAs</strong> from the command line to run the Registry Editor and the sample code as a local user without administrator rights. For example, if you have defined a local user named TestUser, the command <code>runas /user:TestUser cmd</code> opens a command window from which you can run the Registry Editor and then the example code.  </p>\n<pre><code class=\"lang-cpp\" name=\"RegistrySecurity101#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace Microsoft::Win32;\nusing namespace System::Security::AccessControl;\nusing namespace System::Security;\n\nint main()\n{\n    // Delete the example key if it exists.\n    try\n    {\n        Registry::CurrentUser-&gt;DeleteSubKey(&quot;RegistryRightsExample&quot;);\n        Console::WriteLine(&quot;Example key has been deleted.&quot;);\n    }\n    catch (ArgumentException^)\n    {\n        // ArgumentException is thrown if the key does not exist. In\n        // this case, there is no reason to display a message.\n    }\n    catch (InvalidOperationException^ ex)\n    {\n        Console::WriteLine(\n            &quot;{0}Unable to delete key: it appears to have child subkeys:{0}{1}&quot;, \n            Environment::NewLine, ex);\n        return 0;\n    }\n    catch (SecurityException^ ex)\n    {\n        Console::WriteLine(&quot;{0}You do not have the permissions required &quot; +\n            &quot;to delete this key:{0}{1}&quot;, Environment::NewLine, ex);\n        return 0;\n    }\n\n    String^ user = Environment::UserDomainName + &quot;\\\\&quot; + Environment::UserName;\n\n    RegistrySecurity^ regSecurity = gcnew RegistrySecurity();\n\n    // Allow the current user to read and delete the key.\n    //\n    regSecurity-&gt;AddAccessRule(gcnew RegistryAccessRule(user,\n        RegistryRights::ReadKey | RegistryRights::Delete,\n        InheritanceFlags::None,\n        PropagationFlags::None,\n        AccessControlType::Allow));\n\n    // Prevent the current user from writing or changing the\n    // permission set of the key. Note that if Delete permission\n    // were not allowed in the previous access rule, denying\n    // WriteKey permission would prevent the user from deleting the\n    // key.\n    regSecurity-&gt;AddAccessRule(gcnew RegistryAccessRule(user,\n        RegistryRights::WriteKey | RegistryRights::ChangePermissions,\n        InheritanceFlags::None,\n        PropagationFlags::None,\n        AccessControlType::Deny));\n\n    // Create the example key with registry security.\n    RegistryKey^ createdKey = nullptr;\n    try\n    {\n        createdKey = Registry::CurrentUser-&gt;CreateSubKey(\n            &quot;RegistryRightsExample&quot;, RegistryKeyPermissionCheck::Default,\n            regSecurity);\n        Console::WriteLine(&quot;{0}Example key created.&quot;, Environment::NewLine);\n        createdKey-&gt;SetValue(&quot;ValueName&quot;, &quot;StringValue&quot;);\n    }\n    catch (SecurityException^ ex)\n    {\n        Console::WriteLine(&quot;{0}You do not have the permissions required &quot; +\n            &quot;to create the example key:{0}{1}&quot;, Environment::NewLine, ex);\n        return 0;\n    }\n    if (createdKey != nullptr)\n    {\n        createdKey-&gt;Close();\n    }\n\n    RegistryKey^ openedKey;\n\n    // Open the key with read access.\n    openedKey = Registry::CurrentUser-&gt;OpenSubKey(&quot;RegistryRightsExample&quot;,\n        false);\n    Console::WriteLine(&quot;{0}Retrieved value: {1}&quot;,\n        Environment::NewLine, openedKey-&gt;GetValue(&quot;ValueName&quot;));\n    openedKey-&gt;Close();\n\n    // Attempt to open the key with write access.\n    try\n    {\n        openedKey = Registry::CurrentUser-&gt;OpenSubKey(&quot;RegistryRightsExample&quot;,\n            true);\n    }\n    catch (SecurityException^ ex)\n    {\n        Console::WriteLine(&quot;{0}You do not have the permissions required &quot; +\n            &quot;to write to the example key:{0}{1}&quot;, Environment::NewLine, ex);\n    }\n    if (openedKey != nullptr)\n    {\n        openedKey-&gt;Close();\n    }\n\n    // Attempt to change permissions for the key.\n    try\n    {\n        regSecurity = gcnew RegistrySecurity();\n        regSecurity-&gt;AddAccessRule(gcnew RegistryAccessRule(user,\n            RegistryRights::WriteKey,\n            InheritanceFlags::None,\n            PropagationFlags::None,\n            AccessControlType::Allow));\n        openedKey = Registry::CurrentUser-&gt;OpenSubKey(&quot;RegistryRightsExample&quot;,\n            false);\n        openedKey-&gt;SetAccessControl(regSecurity);\n        Console::WriteLine(&quot;{0}Example key permissions were changed.&quot;, \n            Environment::NewLine);\n    }\n    catch (UnauthorizedAccessException^ ex)\n    {\n        Console::WriteLine(&quot;{0}You are not authorized to change &quot; +\n            &quot;permissions for the example key:{0}{1}&quot;, Environment::NewLine, ex);\n    }\n    if (openedKey != nullptr)\n    {\n        openedKey-&gt;Close();\n    }\n\n    Console::WriteLine(&quot;{0}Press Enter to delete the example key.&quot;, \n        Environment::NewLine);\n    Console::ReadLine();\n\n    try\n    {\n        Registry::CurrentUser-&gt;DeleteSubKey(&quot;RegistryRightsExample&quot;);\n        Console::WriteLine(&quot;Example key was deleted.&quot;);\n    }\n    catch(SecurityException^ ex)\n    {\n        Console::WriteLine(&quot;{0}You do not have the permissions required to &quot;\n            + &quot;delete the example key:{0}{1}&quot;, Environment::NewLine, ex);\n    }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"RegistrySecurity101#1\">using System;\nusing System.Reflection;\nusing System.Security;\nusing System.Security.AccessControl;\nusing Microsoft.Win32;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Delete the example key if it exists.\n        try\n        {\n            Registry.CurrentUser.DeleteSubKey(&quot;RegistryRightsExample&quot;);\n            Console.WriteLine(&quot;Example key has been deleted.&quot;);\n        }\n        catch (ArgumentException)\n        {\n            // ArgumentException is thrown if the key does not exist. In\n            // this case, there is no reason to display a message.\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(&quot;Unable to delete the example key: {0}&quot;, ex);\n            return;\n        }\n\n        string user = Environment.UserDomainName + &quot;\\\\&quot; + Environment.UserName;\n\n        RegistrySecurity rs = new RegistrySecurity();\n\n        // Allow the current user to read and delete the key.\n        //\n        rs.AddAccessRule(new RegistryAccessRule(user, \n            RegistryRights.ReadKey | RegistryRights.Delete, \n            InheritanceFlags.None, \n            PropagationFlags.None, \n            AccessControlType.Allow));\n\n        // Prevent the current user from writing or changing the\n        // permission set of the key. Note that if Delete permission\n        // were not allowed in the previous access rule, denying\n        // WriteKey permission would prevent the user from deleting the \n        // key.\n        rs.AddAccessRule(new RegistryAccessRule(user, \n            RegistryRights.WriteKey | RegistryRights.ChangePermissions, \n            InheritanceFlags.None, \n            PropagationFlags.None, \n            AccessControlType.Deny));\n\n        // Create the example key with registry security.\n        RegistryKey rk = null;\n        try\n        {\n            rk = Registry.CurrentUser.CreateSubKey(&quot;RegistryRightsExample&quot;, \n                RegistryKeyPermissionCheck.Default, rs);\n            Console.WriteLine(&quot;\\r\\nExample key created.&quot;);\n            rk.SetValue(&quot;ValueName&quot;, &quot;StringValue&quot;);\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(&quot;\\r\\nUnable to create the example key: {0}&quot;, ex);\n        }\n        if (rk != null) rk.Close();\n\n        rk = Registry.CurrentUser;\n\n        RegistryKey rk2;\n        \n        // Open the key with read access.\n        rk2 = rk.OpenSubKey(&quot;RegistryRightsExample&quot;, false);\n        Console.WriteLine(&quot;\\r\\nRetrieved value: {0}&quot;, rk2.GetValue(&quot;ValueName&quot;));\n        rk2.Close();\n\n        // Attempt to open the key with write access.\n        try\n        {\n            rk2 = rk.OpenSubKey(&quot;RegistryRightsExample&quot;, true);\n        }\n        catch (SecurityException ex)\n        {\n            Console.WriteLine(&quot;\\nUnable to write to the example key.&quot; +\n                &quot; Caught SecurityException: {0}&quot;, ex.Message);\n        }\n        if (rk2 != null) rk2.Close();\n\n        // Attempt to change permissions for the key.\n        try\n        {\n            rs = new RegistrySecurity();\n            rs.AddAccessRule(new RegistryAccessRule(user, \n                RegistryRights.WriteKey, \n                InheritanceFlags.None, \n                PropagationFlags.None, \n                AccessControlType.Allow));\n            rk2 = rk.OpenSubKey(&quot;RegistryRightsExample&quot;, false);\n            rk2.SetAccessControl(rs);\n            Console.WriteLine(&quot;\\r\\nExample key permissions were changed.&quot;);\n        }\n        catch (UnauthorizedAccessException ex)\n        {\n            Console.WriteLine(&quot;\\nUnable to change permissions for the example key.&quot; +\n                &quot; Caught UnauthorizedAccessException: {0}&quot;, ex.Message);\n        }\n        if (rk2 != null) rk2.Close();\n\n        Console.WriteLine(&quot;\\r\\nPress Enter to delete the example key.&quot;);\n        Console.ReadLine();\n\n        try\n        {\n            rk.DeleteSubKey(&quot;RegistryRightsExample&quot;);\n            Console.WriteLine(&quot;Example key was deleted.&quot;);\n        }\n        catch(Exception ex)\n        {\n            Console.WriteLine(&quot;Unable to delete the example key: {0}&quot;, ex);\n        }\n\n        rk.Close();\n    }\n}\n\n/* This code example produces the following output:\n\nExample key created.\n\nRetrieved value: StringValue\n\nUnable to write to the example key. Caught SecurityException: Requested registry access is not allowed.\n\nUnable to change permissions for the example key. Caught UnauthorizedAccessException: Cannot write to the registry key.\n\nPress Enter to delete the example key.\n\nExample key was deleted.\n */\n</code></pre><pre><code class=\"lang-vb\" name=\"RegistrySecurity101#1\">Imports System\nImports System.Reflection\nImports System.Security\nImports System.Security.AccessControl\nImports Microsoft.Win32\n\nPublic Class Example\n    Public Shared Sub Main()\n        &#39; Delete the example key if it exists.\n        Try\n            Registry.CurrentUser.DeleteSubKey(&quot;RegistryRightsExample&quot;)\n            Console.WriteLine(&quot;Example key has been deleted.&quot;)\n        Catch ex As ArgumentException\n            &#39; ArgumentException is thrown if the key does not exist. In\n            &#39; this case, there is no reason to display a message.\n        Catch ex As Exception\n            Console.WriteLine(&quot;Unable to delete the example key: {0}&quot;, ex)\n            Return\n        End Try\n\n        Dim user As String = Environment.UserDomainName &amp; &quot;\\&quot; &amp; Environment.UserName\n\n        Dim rs As New RegistrySecurity()\n\n        &#39; Allow the current user to read and delete the key.\n        &#39;\n        rs.AddAccessRule(new RegistryAccessRule(user, _\n            RegistryRights.ReadKey Or RegistryRights.Delete, _\n            InheritanceFlags.None, _\n            PropagationFlags.None, _\n            AccessControlType.Allow))\n\n        &#39; Prevent the current user from writing or changing the\n        &#39; permission set of the key. Note that if Delete permission\n        &#39; were not allowed in the previous access rule, denying\n        &#39; WriteKey permission would prevent the user from deleting the \n        &#39; key.\n        rs.AddAccessRule(new RegistryAccessRule(user, _\n            RegistryRights.WriteKey Or RegistryRights.ChangePermissions, _\n            InheritanceFlags.None, _\n            PropagationFlags.None, _\n            AccessControlType.Deny))\n\n        &#39; Create the example key with registry security.\n        Dim rk As RegistryKey = Nothing\n        Try\n            rk = Registry.CurrentUser.CreateSubKey(&quot;RegistryRightsExample&quot;, _\n                RegistryKeyPermissionCheck.Default, rs)\n            Console.WriteLine(vbCrLf &amp; &quot;Example key created.&quot;)\n            rk.SetValue(&quot;ValueName&quot;, &quot;StringValue&quot;)\n        Catch ex As Exception\n            Console.WriteLine(vbCrLf &amp; &quot;Unable to create the example key: {0}&quot;, ex)\n        End Try\n\n        If rk IsNot Nothing Then rk.Close()\n\n        rk = Registry.CurrentUser\n\n        Dim rk2 As RegistryKey\n        \n        &#39; Open the key with read access.\n        rk2 = rk.OpenSubKey(&quot;RegistryRightsExample&quot;, False)\n        Console.WriteLine(vbCrLf &amp; &quot;Retrieved value: {0}&quot;, rk2.GetValue(&quot;ValueName&quot;))\n        rk2.Close()\n\n        &#39; Attempt to open the key with write access.\n        Try\n            rk2 = rk.OpenSubKey(&quot;RegistryRightsExample&quot;, True)\n        Catch ex As SecurityException\n            Console.WriteLine(vbCrLf &amp; &quot;Unable to write to the example key.&quot; _\n                &amp; &quot; Caught SecurityException: {0}&quot;, ex.Message)\n        End Try\n        If rk2 IsNot Nothing Then rk2.Close()\n\n        &#39; Attempt to change permissions for the key.\n        Try\n            rs = New RegistrySecurity()\n            rs.AddAccessRule(new RegistryAccessRule(user, _\n                RegistryRights.WriteKey, _\n                InheritanceFlags.None, _\n                PropagationFlags.None, _\n                AccessControlType.Allow))\n            rk2 = rk.OpenSubKey(&quot;RegistryRightsExample&quot;, False)\n            rk2.SetAccessControl(rs)\n            Console.WriteLine(vbCrLf &amp; &quot;Example key permissions were changed.&quot;)\n        Catch ex As UnauthorizedAccessException\n            Console.WriteLine(vbCrLf &amp; &quot;Unable to change permissions for the example key.&quot; _\n                &amp; &quot; Caught UnauthorizedAccessException: {0}&quot;, ex.Message)\n        End Try\n        If rk2 IsNot Nothing Then rk2.Close()\n\n        Console.WriteLine(vbCrLf &amp; &quot;Press Enter to delete the example key.&quot;)\n        Console.ReadLine()\n\n        Try\n            rk.DeleteSubKey(&quot;RegistryRightsExample&quot;)\n            Console.WriteLine(&quot;Example key was deleted.&quot;)\n        Catch ex As Exception\n            Console.WriteLine(&quot;Unable to delete the example key: {0}&quot;, ex)\n        End Try\n\n        rk.Close()\n    End Sub\nEnd Class\n\n&#39; This code produces the following output:\n&#39;\n&#39;Example key created.\n&#39;\n&#39;Retrieved value: StringValue\n&#39;\n&#39;Unable to write to the example key. Caught SecurityException: Requested registry access is not allowed.\n&#39;\n&#39;Unable to change permissions for the example key. Caught UnauthorizedAccessException: Cannot write to the registry key.\n&#39;\n&#39;Press Enter to delete the example key.\n&#39;\n&#39;Example key was deleted.\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Use the RegistryRights enumeration to specify registry access rights when you create <a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity\" data-linktype=\"relative-path\">RegistrySecurity</a> objects. To apply access rights to a registry key, first add <a class=\"xref\" href=\"system.security.accesscontrol.registryaccessrule\" data-linktype=\"relative-path\">RegistryAccessRule</a> objects to a <a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity\" data-linktype=\"relative-path\">RegistrySecurity</a> object, then attach the <a class=\"xref\" href=\"system.security.accesscontrol.registrysecurity\" data-linktype=\"relative-path\">RegistrySecurity</a> object to the key using the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_SetAccessControl_\" data-linktype=\"relative-path\">SetAccessControl</a> method, or an appropriate overload of the <a class=\"xref\" href=\"microsoft.win32.registrykey#Microsoft_Win32_RegistryKey_CreateSubKey_\" data-linktype=\"relative-path\">CreateSubKey</a> method.</p>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Security_AccessControl_RegistryRights_ChangePermissions\">\r\n      \t\t\t<span class=\"lang-csharp\">ChangePermissions</span>\r\n      \t</td>\r\n      \t<td><p>The right to change the access rules and audit rules associated with a registry key.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_AccessControl_RegistryRights_CreateLink\">\r\n      \t\t\t<span class=\"lang-csharp\">CreateLink</span>\r\n      \t</td>\r\n      \t<td><p>Reserved for system use.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_AccessControl_RegistryRights_CreateSubKey\">\r\n      \t\t\t<span class=\"lang-csharp\">CreateSubKey</span>\r\n      \t</td>\r\n      \t<td><p>The right to create subkeys of a registry key.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_AccessControl_RegistryRights_Delete\">\r\n      \t\t\t<span class=\"lang-csharp\">Delete</span>\r\n      \t</td>\r\n      \t<td><p>The right to delete a registry key.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_AccessControl_RegistryRights_EnumerateSubKeys\">\r\n      \t\t\t<span class=\"lang-csharp\">EnumerateSubKeys</span>\r\n      \t</td>\r\n      \t<td><p>The right to list the subkeys of a registry key.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_AccessControl_RegistryRights_ExecuteKey\">\r\n      \t\t\t<span class=\"lang-csharp\">ExecuteKey</span>\r\n      \t</td>\r\n      \t<td><p>Same as ReadKey.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_AccessControl_RegistryRights_FullControl\">\r\n      \t\t\t<span class=\"lang-csharp\">FullControl</span>\r\n      \t</td>\r\n      \t<td><p>The right to exert full control over a registry key, and to modify its access rules and audit rules.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_AccessControl_RegistryRights_Notify\">\r\n      \t\t\t<span class=\"lang-csharp\">Notify</span>\r\n      \t</td>\r\n      \t<td><p>The right to request notification of changes on a registry key.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_AccessControl_RegistryRights_QueryValues\">\r\n      \t\t\t<span class=\"lang-csharp\">QueryValues</span>\r\n      \t</td>\r\n      \t<td><p>The right to query the name/value pairs in a registry key.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_AccessControl_RegistryRights_ReadKey\">\r\n      \t\t\t<span class=\"lang-csharp\">ReadKey</span>\r\n      \t</td>\r\n      \t<td><p>The right to query the name/value pairs in a registry key, to request notification of changes, to enumerate its subkeys, and to read its access rules and audit rules.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_AccessControl_RegistryRights_ReadPermissions\">\r\n      \t\t\t<span class=\"lang-csharp\">ReadPermissions</span>\r\n      \t</td>\r\n      \t<td><p>The right to open and copy the access rules and audit rules for a registry key.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_AccessControl_RegistryRights_SetValue\">\r\n      \t\t\t<span class=\"lang-csharp\">SetValue</span>\r\n      \t</td>\r\n      \t<td><p>The right to create, delete, or set name/value pairs in a registry key.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_AccessControl_RegistryRights_TakeOwnership\">\r\n      \t\t\t<span class=\"lang-csharp\">TakeOwnership</span>\r\n      \t</td>\r\n      \t<td><p>The right to change the owner of a registry key.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_AccessControl_RegistryRights_WriteKey\">\r\n      \t\t\t<span class=\"lang-csharp\">WriteKey</span>\r\n      \t</td>\r\n      \t<td><p>The right to create, delete, and set the name/value pairs in a registry key, to create or delete subkeys, to request notification of changes, to enumerate its subkeys, and to read its access rules and audit rules.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.AccessControl.RegistryRights.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.RegistryRights\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.RegistryRights.ChangePermissions\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.RegistryRights.CreateLink\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.RegistryRights.CreateSubKey\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.RegistryRights.Delete\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.RegistryRights.EnumerateSubKeys\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.RegistryRights.ExecuteKey\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.RegistryRights.FullControl\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.RegistryRights.Notify\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.RegistryRights.QueryValues\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.RegistryRights.ReadKey\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.RegistryRights.ReadPermissions\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.RegistryRights.SetValue\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.RegistryRights.TakeOwnership\">\r\n<meta name=\"APIName\" content=\"System.Security.AccessControl.RegistryRights.WriteKey\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 05:47 AM\">\r\n<meta name=\"document_id\" content=\"50402de0-75ff-1a7c-8265-d64f6a36b307\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies the access control rights that can be applied to registry objects.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.security.accesscontrol/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.AccessControl.RegistryRights\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.AccessControl.RegistryRights.yml","open_to_public_contributors":false,"api_name":["System.Security.AccessControl.RegistryRights","System.Security.AccessControl.RegistryRights.ChangePermissions","System.Security.AccessControl.RegistryRights.CreateLink","System.Security.AccessControl.RegistryRights.CreateSubKey","System.Security.AccessControl.RegistryRights.Delete","System.Security.AccessControl.RegistryRights.EnumerateSubKeys","System.Security.AccessControl.RegistryRights.ExecuteKey","System.Security.AccessControl.RegistryRights.FullControl","System.Security.AccessControl.RegistryRights.Notify","System.Security.AccessControl.RegistryRights.QueryValues","System.Security.AccessControl.RegistryRights.ReadKey","System.Security.AccessControl.RegistryRights.ReadPermissions","System.Security.AccessControl.RegistryRights.SetValue","System.Security.AccessControl.RegistryRights.TakeOwnership","System.Security.AccessControl.RegistryRights.WriteKey"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.AccessControl.RegistryRights","System::Security::AccessControl::RegistryRights","System.Security.AccessControl.RegistryRights.ChangePermissions","System::Security::AccessControl::RegistryRights::ChangePermissions","System.Security.AccessControl.RegistryRights.CreateLink","System::Security::AccessControl::RegistryRights::CreateLink","System.Security.AccessControl.RegistryRights.CreateSubKey","System::Security::AccessControl::RegistryRights::CreateSubKey","System.Security.AccessControl.RegistryRights.Delete","System::Security::AccessControl::RegistryRights::Delete","System.Security.AccessControl.RegistryRights.EnumerateSubKeys","System::Security::AccessControl::RegistryRights::EnumerateSubKeys","System.Security.AccessControl.RegistryRights.ExecuteKey","System::Security::AccessControl::RegistryRights::ExecuteKey","System.Security.AccessControl.RegistryRights.FullControl","System::Security::AccessControl::RegistryRights::FullControl","System.Security.AccessControl.RegistryRights.Notify","System::Security::AccessControl::RegistryRights::Notify","System.Security.AccessControl.RegistryRights.QueryValues","System::Security::AccessControl::RegistryRights::QueryValues","System.Security.AccessControl.RegistryRights.ReadKey","System::Security::AccessControl::RegistryRights::ReadKey","System.Security.AccessControl.RegistryRights.ReadPermissions","System::Security::AccessControl::RegistryRights::ReadPermissions","System.Security.AccessControl.RegistryRights.SetValue","System::Security::AccessControl::RegistryRights::SetValue","System.Security.AccessControl.RegistryRights.TakeOwnership","System::Security::AccessControl::RegistryRights::TakeOwnership","System.Security.AccessControl.RegistryRights.WriteKey","System::Security::AccessControl::RegistryRights::WriteKey"],"dev_langs":["csharp"],"updated_at":"2017-03-31 05:47 AM","document_id":"50402de0-75ff-1a7c-8265-d64f6a36b307","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Security.AccessControl/RegistryRights.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"RegistryRights enum | Microsoft Docs","_op_ogTitle":"RegistryRights enum","description":"Specifies the access control rights that can be applied to registry objects.\n","toc_asset_id":"api/_splitted/System.Security.AccessControl/toc.json","toc_rel":"_splitted/System.Security.AccessControl/toc.json","source_url":"","ms.assetid":"System.Security.AccessControl.RegistryRights","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.security.accesscontrol.registryrights","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.security.accesscontrol.registryrights","fileRelativePath":"api/System.Security.AccessControl.RegistryRights.html"},"themesRelativePathToOutputRoot":"_themes/"}