{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ProviderConnectionPoint</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Defines a connection point object that enables a server control acting as a provider to form a connection with a consumer.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionpoint\" data-linktype=\"relative-path\">ConnectionPoint</a></span></div><span class=\"lang-csharp\">ProviderConnectionPoint</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionpoint#System_Web_UI_WebControls_WebParts_ConnectionPoint_AllowsMultipleConnections\" data-linktype=\"relative-path\">AllowsMultipleConnections</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionpoint#System_Web_UI_WebControls_WebParts_ConnectionPoint_ControlType\" data-linktype=\"relative-path\">ControlType</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionpoint#System_Web_UI_WebControls_WebParts_ConnectionPoint_DefaultID\" data-linktype=\"relative-path\">DefaultID</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionpoint#System_Web_UI_WebControls_WebParts_ConnectionPoint_DisplayName\" data-linktype=\"relative-path\">DisplayName</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionpoint#System_Web_UI_WebControls_WebParts_ConnectionPoint_GetEnabled_System_Web_UI_Control_\" data-linktype=\"relative-path\">GetEnabled(Control)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionpoint#System_Web_UI_WebControls_WebParts_ConnectionPoint_ID\" data-linktype=\"relative-path\">ID</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionpoint#System_Web_UI_WebControls_WebParts_ConnectionPoint_InterfaceType\" data-linktype=\"relative-path\">InterfaceType</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example shows simple ways to create a connection declaratively, programmatically, or through the UI, in each case making use of a provider connection point.  </p>\n<p> The example has four parts:  </p>\n<ul>\n<li><p>A user control that enables you to change the Web Parts display mode on a page.  </p>\n</li>\n<li><p>Source code for an interface and two <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls acting as the provider and the consumer for a connection.  </p>\n</li>\n<li><p>A Web page to host all the controls and run the code example.  </p>\n</li>\n<li><p>An explanation of how to run the example page.  </p>\n</li>\n</ul>\n<p> The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the <code>Src</code> attribute of the <code>Register</code> directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see <a href=\"../Topic/Walkthrough:%20Changing%20Display%20Modes%20on%20a%20Web%20Parts%20Page.md\" data-linktype=\"relative-path\">Walkthrough: Changing Display Modes on a Web Parts Page</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_ConnectionPoint_Overview#6\">&lt;%@ control language=&quot;C#&quot; classname=&quot;DisplayModeMenuCS&quot;%&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n // Use a field to reference the current WebPartManager.\n  WebPartManager _manager;\n\n  void Page_Init(object sender, EventArgs e)\n  {\n    Page.InitComplete += new EventHandler(InitComplete);\n  }  \n\n  void InitComplete(object sender, System.EventArgs e)\n  {\n    _manager = WebPartManager.GetCurrentWebPartManager(Page);\n\n    String browseModeName = WebPartManager.BrowseDisplayMode.Name;\n\n    // Fill the dropdown with the names of supported display modes.\n    foreach (WebPartDisplayMode mode in _manager.SupportedDisplayModes)\n    {\n      String modeName = mode.Name;\n      // Make sure a mode is enabled before adding it.\n      if (mode.IsEnabled(_manager))\n      {\n        ListItem item = new ListItem(modeName, modeName);\n        DisplayModeDropdown.Items.Add(item);\n      }\n    }\n\n    // If shared scope is allowed for this user, display the scope-switching\n    // UI and select the appropriate radio button for the current user scope.\n    if (_manager.Personalization.CanEnterSharedScope)\n    {\n      Panel2.Visible = true;\n      if (_manager.Personalization.Scope == PersonalizationScope.User)\n        RadioButton1.Checked = true;\n      else\n        RadioButton2.Checked = true;\n    }\n    \n  }\n \n  // Change the page to the selected display mode.\n  void DisplayModeDropdown_SelectedIndexChanged(object sender, EventArgs e)\n  {\n    String selectedMode = DisplayModeDropdown.SelectedValue;\n\n    WebPartDisplayMode mode = _manager.SupportedDisplayModes[selectedMode];\n    if (mode != null)\n      _manager.DisplayMode = mode;\n  }\n\n  // Set the selected item equal to the current display mode.\n  void Page_PreRender(object sender, EventArgs e)\n  {\n    ListItemCollection items = DisplayModeDropdown.Items;\n    int selectedIndex = \n      items.IndexOf(items.FindByText(_manager.DisplayMode.Name));\n    DisplayModeDropdown.SelectedIndex = selectedIndex;\n  }\n\n  // Reset all of a user&#39;s personalization data for the page.\n  protected void LinkButton1_Click(object sender, EventArgs e)\n  {\n    _manager.Personalization.ResetPersonalizationState();\n  }\n\n  // If not in User personalization scope, toggle into it.\n  protected void RadioButton1_CheckedChanged(object sender, EventArgs e)\n  {\n    if (_manager.Personalization.Scope == PersonalizationScope.Shared)\n      _manager.Personalization.ToggleScope();\n  }\n\n  // If not in Shared scope, and if user is allowed, toggle the scope.\n  protected void RadioButton2_CheckedChanged(object sender, EventArgs e)\n  {\n    if (_manager.Personalization.CanEnterSharedScope &amp;&amp; \n        _manager.Personalization.Scope == PersonalizationScope.User)\n      _manager.Personalization.ToggleScope();\n  }\n&lt;/script&gt;\n&lt;div&gt;\n  &lt;asp:Panel ID=&quot;Panel1&quot; runat=&quot;server&quot; \n    Borderwidth=&quot;1&quot; \n    Width=&quot;230&quot; \n    BackColor=&quot;lightgray&quot;\n    Font-Names=&quot;Verdana, Arial, Sans Serif&quot; &gt;\n    &lt;asp:Label ID=&quot;Label1&quot; runat=&quot;server&quot; \n      Text=&quot;&amp;nbsp;Display Mode&quot; \n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot;\n      Width=&quot;120&quot; \n      AssociatedControlID=&quot;DisplayModeDropdown&quot;/&gt;\n    &lt;asp:DropDownList ID=&quot;DisplayModeDropdown&quot; runat=&quot;server&quot;  \n      AutoPostBack=&quot;true&quot; \n      Width=&quot;120&quot;\n      OnSelectedIndexChanged=&quot;DisplayModeDropdown_SelectedIndexChanged&quot; /&gt;\n    &lt;asp:LinkButton ID=&quot;LinkButton1&quot; runat=&quot;server&quot;\n      Text=&quot;Reset User State&quot; \n      ToolTip=&quot;Reset the current user&#39;s personalization data for the page.&quot;\n      Font-Size=&quot;8&quot; \n      OnClick=&quot;LinkButton1_Click&quot; /&gt;\n    &lt;asp:Panel ID=&quot;Panel2&quot; runat=&quot;server&quot; \n      GroupingText=&quot;Personalization Scope&quot;\n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot; \n      Visible=&quot;false&quot; &gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton1&quot; runat=&quot;server&quot; \n        Text=&quot;User&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; OnCheckedChanged=&quot;RadioButton1_CheckedChanged&quot; /&gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton2&quot; runat=&quot;server&quot; \n        Text=&quot;Shared&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; \n        OnCheckedChanged=&quot;RadioButton2_CheckedChanged&quot; /&gt;\n    &lt;/asp:Panel&gt;\n  &lt;/asp:Panel&gt;\n&lt;/div&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_ConnectionPoint_Overview#6\">&lt;%@ control language=&quot;vb&quot; classname=&quot;DisplayModeMenuVB&quot;%&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  &#39; Use a field to reference the current WebPartManager.\n  Dim _manager As WebPartManager\n\n  Sub Page_Init(ByVal sender As Object, ByVal e As EventArgs)\n    AddHandler Page.InitComplete, AddressOf InitComplete\n  End Sub\n\n  Sub InitComplete(ByVal sender As Object, ByVal e As System.EventArgs)\n    _manager = WebPartManager.GetCurrentWebPartManager(Page)\n      \n    Dim browseModeName As String = WebPartManager.BrowseDisplayMode.Name\n      \n    &#39; Fill the dropdown with the names of supported display modes.\n    Dim mode As WebPartDisplayMode\n    For Each mode In _manager.SupportedDisplayModes\n      Dim modeName As String = mode.Name\n      &#39; Make sure a mode is enabled before adding it.\n      If mode.IsEnabled(_manager) Then\n        Dim item As New ListItem(modeName, modeName)\n        DisplayModeDropdown.Items.Add(item)\n      End If\n    Next mode\n      \n    &#39; If shared scope is allowed for this user, display the scope-switching\n    &#39; UI and select the appropriate radio button for the current user scope.\n    If _manager.Personalization.CanEnterSharedScope Then\n      Panel2.Visible = True\n      If _manager.Personalization.Scope = PersonalizationScope.User Then\n        RadioButton1.Checked = True\n      Else\n        RadioButton2.Checked = True\n      End If\n    End If\n   \n  End Sub\n\n  &#39; Change the page to the selected display mode.\n  Sub DisplayModeDropdown_SelectedIndexChanged(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    Dim selectedMode As String = DisplayModeDropdown.SelectedValue   \n    Dim mode As WebPartDisplayMode = _\n      _manager.SupportedDisplayModes(selectedMode)\n    If Not (mode Is Nothing) Then\n      _manager.DisplayMode = mode\n    End If\n\n  End Sub\n   \n  &#39; Set the selected item equal to the current display mode.\n  Sub Page_PreRender(ByVal sender As Object, ByVal e As EventArgs)\n    Dim items As ListItemCollection = DisplayModeDropdown.Items\n    Dim selectedIndex As Integer = _\n      items.IndexOf(items.FindByText(_manager.DisplayMode.Name))\n    DisplayModeDropdown.SelectedIndex = selectedIndex\n\n  End Sub\n\n  &#39; Reset all of a user&#39;s personalization data for the page.\n  Protected Sub LinkButton1_Click(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    _manager.Personalization.ResetPersonalizationState()\n    \n  End Sub\n\n  &#39; If not in User personalization scope, toggle into it.\n  Protected Sub RadioButton1_CheckedChanged(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    If _manager.Personalization.Scope = PersonalizationScope.Shared Then\n      _manager.Personalization.ToggleScope()\n    End If\n\n  End Sub\n   \n  &#39; If not in Shared scope, and if user is allowed, toggle the scope.\n  Protected Sub RadioButton2_CheckedChanged(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    If _manager.Personalization.CanEnterSharedScope AndAlso _\n      _manager.Personalization.Scope = PersonalizationScope.User Then\n      _manager.Personalization.ToggleScope()\n    End If\n\n  End Sub\n\n&lt;/script&gt;\n&lt;div&gt;\n  &lt;asp:Panel ID=&quot;Panel1&quot; runat=&quot;server&quot; \n    Borderwidth=&quot;1&quot; \n    Width=&quot;230&quot; \n    BackColor=&quot;lightgray&quot;\n    Font-Names=&quot;Verdana, Arial, Sans Serif&quot; &gt;\n    &lt;asp:Label ID=&quot;Label1&quot; runat=&quot;server&quot; \n      Text=&quot;&amp;nbsp;Display Mode&quot; \n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot;\n      Width=&quot;120&quot; \n      AssociatedControlID=&quot;DisplayModeDropdown&quot;/&gt;\n    &lt;asp:DropDownList ID=&quot;DisplayModeDropdown&quot; runat=&quot;server&quot;  \n      AutoPostBack=&quot;true&quot; \n      Width=&quot;120&quot;\n      OnSelectedIndexChanged=&quot;DisplayModeDropdown_SelectedIndexChanged&quot; /&gt;\n    &lt;asp:LinkButton ID=&quot;LinkButton1&quot; runat=&quot;server&quot;\n      Text=&quot;Reset User State&quot; \n      ToolTip=&quot;Reset the current user&#39;s personalization data for the page.&quot;\n      Font-Size=&quot;8&quot; \n      OnClick=&quot;LinkButton1_Click&quot; /&gt;\n    &lt;asp:Panel ID=&quot;Panel2&quot; runat=&quot;server&quot; \n      GroupingText=&quot;Personalization Scope&quot;\n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot; \n      Visible=&quot;false&quot; &gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton1&quot; runat=&quot;server&quot; \n        Text=&quot;User&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; OnCheckedChanged=&quot;RadioButton1_CheckedChanged&quot; /&gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton2&quot; runat=&quot;server&quot; \n        Text=&quot;Shared&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; \n        OnCheckedChanged=&quot;RadioButton2_CheckedChanged&quot; /&gt;\n    &lt;/asp:Panel&gt;\n  &lt;/asp:Panel&gt;\n&lt;/div&gt;\n</code></pre><p> The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named <code>IZipCode</code>. There is also a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> class named <code>ZipCodeWebPart</code> that implements the interface and acts as the provider control. Its <code>ProvideIZipCode</code> method is the callback method that implements the interface&#39;s only member. The method simply returns an instance of the interface. Note that the method is marked with a <code>ConnectionProvider</code> attribute in its metadata. This is the mechanism for identifying the method as the callback method for the provider&#39;s connection point. The other <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> class is named <code>WeatherWebPart</code>, and it acts as the consumer for the connection. This class has a method named <code>GetZipCode</code> that gets an instance of the <code>IZipCode</code> interface from the provider control. Note that this method is marked as the consumer&#39;s connection point method with a <code>ConnectionConsumer</code> attribute in its metadata. This is the mechanism for identifying the connection point method in the consumer control.  </p>\n<p> For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site&#39;s Bin folder or the global assembly cache. Alternatively, you can put the source code in your site&#39;s App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see <a href=\"../Topic/Walkthrough:%20Developing%20and%20Using%20a%20Custom%20Web%20Server%20Control.md\" data-linktype=\"relative-path\">Walkthrough: Developing and Using a Custom Web Server Control</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"WebParts_ConnectionPoint_Overview#2\">Imports System\nImports System.Web\nImports System.Web.Security\nImports System.Security.Permissions\nImports System.Web.UI\nImports System.Web.UI.WebControls\nImports System.Web.UI.WebControls.WebParts\n\nNamespace Samples.AspNet.VB.Controls\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Interface IZipCode\n\n    Property ZipCode() As String\n\n  End Interface\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class ZipCodeWebPart\n    Inherits WebPart\n    Implements IZipCode\n    Private zipCodeText As String = String.Empty\n    Private input As TextBox\n    Private send As Button\n\n    Public Sub New()\n    End Sub\n\n    &#39; Make the implemented property personalizable to save \n    &#39; the Zip Code between browser sessions.\n    &lt;Personalizable()&gt; _\n    Public Property ZipCode() As String _\n      Implements IZipCode.ZipCode\n\n      Get\n        Return zipCodeText\n      End Get\n      Set(ByVal value As String)\n        zipCodeText = value\n      End Set\n    End Property\n\n    &#39; This is the callback method that returns the provider.\n    &lt;ConnectionProvider(&quot;Zip Code Provider&quot;, &quot;ZipCodeProvider&quot;)&gt; _\n    Public Function ProvideIZipCode() As IZipCode\n      Return Me\n    End Function\n\n\n    Protected Overrides Sub CreateChildControls()\n      Controls.Clear()\n      input = New TextBox()\n      Me.Controls.Add(input)\n      send = New Button()\n      send.Text = &quot;Enter 5-digit Zip Code&quot;\n      AddHandler send.Click, AddressOf Me.submit_Click\n      Me.Controls.Add(send)\n\n    End Sub\n\n\n    Private Sub submit_Click(ByVal sender As Object, _\n      ByVal e As EventArgs)\n\n      If input.Text &lt;&gt; String.Empty Then\n        zipCodeText = Page.Server.HtmlEncode(input.Text)\n        input.Text = String.Empty\n      End If\n\n    End Sub\n\n  End Class\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class WeatherWebPart\n    Inherits WebPart\n    Private _provider As IZipCode\n    Private _zipSearch As String\n    Private DisplayContent As Label\n\n    &#39; This method is identified by the ConnectionConsumer \n    &#39; attribute, and is the mechanism for connecting with \n    &#39; the provider. \n    &lt;ConnectionConsumer(&quot;Zip Code Consumer&quot;, &quot;ZipCodeConsumer&quot;)&gt; _\n    Public Sub GetIZipCode(ByVal Provider As IZipCode)\n      _provider = Provider\n    End Sub\n\n\n    Protected Overrides Sub OnPreRender(ByVal e As EventArgs)\n      EnsureChildControls()\n\n      If Not (Me._provider Is Nothing) Then\n        _zipSearch = _provider.ZipCode.Trim()\n\t\t\t\tDisplayContent.Text = &quot;My Zip Code is:  &quot; + _zipSearch\n      End If\n\n    End Sub &#39;OnPreRender\n\n    Protected Overrides Sub CreateChildControls()\n      Controls.Clear()\n      DisplayContent = New Label()\n      Me.Controls.Add(DisplayContent)\n\n    End Sub\n\n  End Class\n\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"WebParts_ConnectionPoint_Overview#2\">namespace Samples.AspNet.CS.Controls\n{\n  using System;\n  using System.Web;\n  using System.Web.Security;\n  using System.Security.Permissions;\n  using System.Web.UI;\n  using System.Web.UI.WebControls;\n  using System.Web.UI.WebControls.WebParts;\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public interface IZipCode\n  {\n    string ZipCode { get; set;}\n  }\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public class ZipCodeWebPart : WebPart, IZipCode\n  {\n    string zipCodeText = String.Empty;\n    TextBox input;\n    Button send;\n\n    public ZipCodeWebPart()\n    {\n    }\n\n    // Make the implemented property personalizable to save \n    // the Zip Code between browser sessions.\n    [Personalizable()]\n    public virtual string ZipCode\n    {\n      get { return zipCodeText; }\n      set { zipCodeText = value; }\n    }\n\n    // This is the callback method that returns the provider.\n    [ConnectionProvider(&quot;Zip Code Provider&quot;, &quot;ZipCodeProvider&quot;)]\n    public IZipCode ProvideIZipCode()\n    {\n      return this;\n    }\n\n    protected override void CreateChildControls()\n    {\n      Controls.Clear();\n      input = new TextBox();\n      this.Controls.Add(input);\n      send = new Button();\n      send.Text = &quot;Enter 5-digit Zip Code&quot;;\n      send.Click += new EventHandler(this.submit_Click);\n      this.Controls.Add(send);\n    }\n\n    private void submit_Click(object sender, EventArgs e)\n    {\n      if (input.Text != String.Empty)\n      {\n        zipCodeText = Page.Server.HtmlEncode(input.Text);\n        input.Text = String.Empty;\n      }\n    }\n\n  }\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public class WeatherWebPart : WebPart\n  {\n    private IZipCode _provider;\n    string _zipSearch;\n    Label DisplayContent;\n\n    // This method is identified by the ConnectionConsumer \n    // attribute, and is the mechanism for connecting with \n    // the provider. \n    [ConnectionConsumer(&quot;Zip Code Consumer&quot;, &quot;ZipCodeConsumer&quot;)]\n    public void GetIZipCode(IZipCode Provider)\n    {\n      _provider = Provider;\n    }\n    \n    protected override void OnPreRender(EventArgs e)\n    {\n      EnsureChildControls();\n\n      if (this._provider != null)\n      {\n        _zipSearch = _provider.ZipCode.Trim();\n        DisplayContent.Text = &quot;My Zip Code is:  &quot; + _zipSearch;\n      }\n    }\n\n    protected override void CreateChildControls()\n    {\n      Controls.Clear();\n      DisplayContent = new Label();\n      this.Controls.Add(DisplayContent);\n    }\n\n  }\n}\n</code></pre><p> The third part of the code example is the Web page. Near the top are <code>Register</code> directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page. The connection itself is created declaratively within the <code>&lt;staticconnections&gt;</code> element on the page. This demonstrates one way of creating a connection--note the <code>ProviderConnectionPointID</code> attribute in the <code>&lt;asp:webpartconnection&gt;</code> element. You can also create the connection programmatically; the code for doing that is in the <code>Button1_Click</code> method. In this case, a ProviderConnectionPoint object is created and then passed to a method that creates the actual connection. Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer. The <code>Button2_Click</code> method accesses the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionpoint\" data-linktype=\"relative-path\">ConnectionPoint</a> objects for both the provider and the consumer, and writes some of their property values to a label in the page.  </p>\n<pre><code class=\"lang-vb\" name=\"WebParts_ConnectionPoint_Overview#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n&lt;%@ register tagprefix=&quot;uc1&quot; \n    tagname=&quot;DisplayModeMenuVB&quot;\n    src=&quot;~/displaymodemenuvb.ascx&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;aspSample&quot; \n    Namespace=&quot;Samples.AspNet.VB.Controls&quot; %&gt;\n    \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n  &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n\n  Protected Sub Button1_Click(ByVal sender As Object, _\n    ByVal e As System.EventArgs)\n\n    Dim provPoint As ProviderConnectionPoint = _\n      mgr.GetProviderConnectionPoints(zip1)(&quot;ZipCodeProvider&quot;)\n    Dim connPoint As ConsumerConnectionPoint = _\n      mgr.GetConsumerConnectionPoints(weather1)(&quot;ZipCodeConsumer&quot;)\n\n    If mgr.CanConnectWebParts(zip1, provPoint, weather1, connPoint) Then\n      mgr.ConnectWebParts(zip1, provPoint, weather1, connPoint)\n    End If\n    \n  End Sub\n  \n  Protected Sub Button2_Click(ByVal sender As Object, _\n    ByVal e As System.EventArgs)\n    \n    Dim conn As WebPartConnection = mgr.Connections(0)\n\n    lblConn.Text = &quot;&lt;h2&gt;Connection Point Details&lt;/h2&gt;&quot; &amp; _\n      &quot;&lt;h3&gt;Provider Connection Point&lt;/h3&gt;&quot; &amp; _\n      &quot;  Display name: &quot; &amp; conn.ProviderConnectionPoint.DisplayName &amp; _\n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;  ID: &quot; &amp; conn.ProviderConnectionPoint.ID &amp; _\n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;  Interface type: &quot; &amp; conn.ProviderConnectionPoint.InterfaceType.ToString() &amp; _\n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;  Control type: &quot; &amp; conn.ProviderConnectionPoint.ControlType.ToString() &amp; _\n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;  Allows multiple connections: &quot; &amp; _\n        conn.ProviderConnectionPoint.AllowsMultipleConnections.ToString() &amp; _\n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;  Enabled: &quot; &amp; conn.ProviderConnectionPoint.GetEnabled(zip1).ToString() &amp; _\n      &quot;&lt;hr /&gt;&quot; &amp; _\n      &quot;&lt;h3&gt;Consumer Connection Point&lt;/h3&gt;&quot; &amp; _\n      &quot;  Display name: &quot; &amp; conn.ConsumerConnectionPoint.DisplayName &amp; _\n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;  ID: &quot; &amp; conn.ConsumerConnectionPoint.ID &amp; _\n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;  Interface type: &quot; &amp; conn.ConsumerConnectionPoint.InterfaceType.ToString() &amp; _\n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;  Control type: &quot; &amp; conn.ConsumerConnectionPoint.ControlType.ToString() &amp; _\n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;  Allows multiple connections: &quot; &amp; _\n        conn.ConsumerConnectionPoint.AllowsMultipleConnections.ToString() &amp; _\n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;  Enabled: &quot; &amp; conn.ConsumerConnectionPoint.GetEnabled(zip1).ToString()\n          \n  End Sub\n\n  Protected Sub Page_Load(ByVal sender As Object, _\n    ByVal e As System.EventArgs)\n    lblConn.Text = String.Empty\n  End Sub\n  \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head id=&quot;Head1&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:WebPartManager ID=&quot;mgr&quot; runat=&quot;server&quot; &gt;\n        &lt;StaticConnections&gt;\n          &lt;asp:WebPartConnection ID=&quot;conn1&quot;\n            ConsumerConnectionPointID=&quot;ZipCodeConsumer&quot;\n            ConsumerID=&quot;weather1&quot; \n            ProviderConnectionPointID=&quot;ZipCodeProvider&quot; \n            ProviderID=&quot;zip1&quot; /&gt;\n        &lt;/StaticConnections&gt;      \n      &lt;/asp:WebPartManager&gt;\n      &lt;uc1:displaymodemenuvb id=&quot;menu1&quot; runat=&quot;server&quot; /&gt;\n      &lt;asp:WebPartZone ID=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;\n        &lt;ZoneTemplate&gt;\n          &lt;aspSample:ZipCodeWebPart ID=&quot;zip1&quot; runat=&quot;server&quot;\n            Title=&quot;Zip Code Provider&quot;  /&gt;\n          &lt;aspSample:WeatherWebPart ID=&quot;weather1&quot; runat=&quot;server&quot; \n            Title=&quot;Zip Code Consumer&quot; /&gt;\n        &lt;/ZoneTemplate&gt;\n      &lt;/asp:WebPartZone&gt;\n      &lt;asp:ConnectionsZone ID=&quot;ConnectionsZone1&quot; runat=&quot;server&quot;&gt;\n      &lt;/asp:ConnectionsZone&gt;\n      &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; \n        Text=&quot;Dynamic Connection&quot; \n        OnClick=&quot;Button1_Click&quot; /&gt;      \n      &lt;br /&gt;\n      &lt;asp:Button ID=&quot;Button2&quot; runat=&quot;server&quot; \n        Text=&quot;Connection Point Details&quot; \n        OnClick=&quot;Button2_Click&quot; /&gt;\n      &lt;br /&gt;\n      &lt;asp:Label ID=&quot;lblConn&quot; runat=&quot;server&quot; /&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"WebParts_ConnectionPoint_Overview#1\">&lt;%@ Page Language=&quot;C#&quot; %&gt;\n&lt;%@ register tagprefix=&quot;uc1&quot; \n    tagname=&quot;DisplayModeMenuCS&quot;\n    src=&quot;~/displaymodemenucs.ascx&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;aspSample&quot; \n    Namespace=&quot;Samples.AspNet.CS.Controls&quot; %&gt;\n    \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n  &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n\n  protected void Button1_Click(object sender, EventArgs e)\n  {\n    ProviderConnectionPoint provPoint =\n      mgr.GetProviderConnectionPoints(zip1)[&quot;ZipCodeProvider&quot;];\n    ConsumerConnectionPoint connPoint =\n      mgr.GetConsumerConnectionPoints(weather1)[&quot;ZipCodeConsumer&quot;];\n      \n    if(mgr.CanConnectWebParts(zip1, provPoint, weather1, connPoint))\n      mgr.ConnectWebParts(zip1, provPoint, weather1, connPoint);\n  \n  }  \n  protected void Button2_Click(object sender, EventArgs e)\n  {\n    WebPartConnection conn = mgr.Connections[0];\n    \n    lblConn.Text = &quot;&lt;h2&gt;Connection Point Details&lt;/h2&gt;&quot; + \n       &quot;&lt;h3&gt;Provider Connection Point&lt;/h3&gt;&quot; + \n       &quot;  Display name: &quot; + conn.ProviderConnectionPoint.DisplayName + \n       &quot;&lt;br /&gt;&quot; + \n       &quot;  ID: &quot; + conn.ProviderConnectionPoint.ID + \n       &quot;&lt;br /&gt;&quot; + \n       &quot;  Interface type: &quot; + \n        conn.ProviderConnectionPoint.InterfaceType.ToString() + \n       &quot;&lt;br /&gt;&quot; + \n       &quot;  Control type: &quot; + conn.ProviderConnectionPoint.ControlType.ToString() + \n       &quot;&lt;br /&gt;&quot; + \n       &quot;  Allows multiple connections: &quot; + \n          conn.ProviderConnectionPoint.AllowsMultipleConnections.ToString() + \n       &quot;&lt;br /&gt;&quot; + \n       &quot;  Enabled: &quot; + conn.ProviderConnectionPoint.GetEnabled(zip1).ToString() + \n       &quot;&lt;hr /&gt;&quot; + \n       &quot;&lt;h3&gt;Consumer Connection Point&lt;/h3&gt;&quot; + \n       &quot;  Display name: &quot; + conn.ConsumerConnectionPoint.DisplayName + \n       &quot;&lt;br /&gt;&quot; + \n       &quot;  ID: &quot; + conn.ConsumerConnectionPoint.ID + \n       &quot;&lt;br /&gt;&quot; + \n       &quot;  Interface type: &quot; + conn.ConsumerConnectionPoint.InterfaceType.ToString() + \n       &quot;&lt;br /&gt;&quot; + \n       &quot;  Control type: &quot; + conn.ConsumerConnectionPoint.ControlType.ToString() + \n       &quot;&lt;br /&gt;&quot; + \n       &quot;  Allows multiple connections: &quot; + \n          conn.ConsumerConnectionPoint.AllowsMultipleConnections.ToString() + \n       &quot;&lt;br /&gt;&quot; + \n       &quot;  Enabled: &quot; + conn.ConsumerConnectionPoint.GetEnabled(zip1).ToString();\n  }\n\n  protected void Page_Load(object sender, EventArgs e)\n  {\n    lblConn.Text = String.Empty;\n  }\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:WebPartManager ID=&quot;mgr&quot; runat=&quot;server&quot; &gt;\n        &lt;StaticConnections&gt;\n          &lt;asp:WebPartConnection ID=&quot;conn1&quot;\n            ConsumerConnectionPointID=&quot;ZipCodeConsumer&quot;\n            ConsumerID=&quot;weather1&quot; \n            ProviderConnectionPointID=&quot;ZipCodeProvider&quot; \n            ProviderID=&quot;zip1&quot; /&gt;\n        &lt;/StaticConnections&gt;      \n      &lt;/asp:WebPartManager&gt;\n      &lt;uc1:displaymodemenucs id=&quot;menu1&quot; runat=&quot;server&quot; /&gt;\n      &lt;asp:WebPartZone ID=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;\n        &lt;ZoneTemplate&gt;\n          &lt;aspSample:ZipCodeWebPart ID=&quot;zip1&quot; runat=&quot;server&quot;\n            Title=&quot;Zip Code Provider&quot;  /&gt;\n          &lt;aspSample:WeatherWebPart ID=&quot;weather1&quot; runat=&quot;server&quot; \n            Title=&quot;Zip Code Consumer&quot; /&gt;\n        &lt;/ZoneTemplate&gt;\n      &lt;/asp:WebPartZone&gt;\n      &lt;asp:ConnectionsZone ID=&quot;ConnectionsZone1&quot; runat=&quot;server&quot;&gt;\n      &lt;/asp:ConnectionsZone&gt;\n      &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; \n        Text=&quot;Dynamic Connection&quot; \n        OnClick=&quot;Button1_Click&quot; /&gt;      \n      &lt;br /&gt;\n      &lt;asp:Button ID=&quot;Button2&quot; runat=&quot;server&quot; \n        Text=&quot;Connection Point Details&quot; \n        OnClick=&quot;Button2_Click&quot; /&gt;\n      &lt;br /&gt;\n      &lt;asp:Label ID=&quot;lblConn&quot; runat=&quot;server&quot; /&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p> After you load the page in a browser, click the <strong>Connection Point Details</strong> button. Information about the provider and consumer connection points established in the declarative connection appears. Next, use the <strong>Display Mode</strong> drop-down control to switch the page into connect mode. On the verbs menu of the <strong>ZIP Code Consumer</strong><a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> control (represented by a downward arrow in the title bar), click the connect verb. The connection UI appears, created automatically by the <code>&lt;asp:connectionszone&gt;</code> control declared in the page. This is another way of creating a connection (through the UI), along with the declarative and programmatic methods discussed earlier. Click the <strong>Disconnect</strong> button to terminate the existing static connection. Click the <strong>Create a Connection to a Provider</strong> link. The UI now displays a drop-down control that lists the provider connection point display name. Select the connection point in the drop-down list, and then click <strong>Connect</strong> to complete the connection. Next, click <strong>Disconnect</strong> again. Then, click the <strong>Dynamic Connection</strong> button to create a connection programmatically. Use the <strong>Display Mode</strong> control to return the page to browse mode. Click the <strong>Connection Point Details</strong> button again, to once more indicate details about the provider connection point object.  </p>\n<p> The example has demonstrated establishing a connection and using a provider connection point in three ways: a static connection declared in the Web page markup; a connection created in code that used a ProviderConnectionPoint object; and a connection created by a user through the connection UI.</p>\n\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>In every Web Parts connection between two server controls, each control must have (among other requirements) an associated connection point object that enables it to connect to the other control and to either provide or consume data, depending on whether the control is designated as the provider or consumer for the connection. A <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionpoint\" data-linktype=\"relative-path\">ConnectionPoint</a> object in general contains the details for how a control can connect to another control and the type of data it can share. For a control acting as the provider in a connection, its connection point must be a ProviderConnectionPoint object. For details on Web Parts connections and connection points, see the topics listed in the See Also section below.  </p>\n<p> To create a ProviderConnectionPoint object, several steps are required:  </p>\n<ol>\n<li><p>Create an interface. When a provider shares data with a consumer, it does so by getting an instance of an interface, and returning that instance to a consumer.  </p>\n</li>\n<li><p>Implement the interface in a provider. A <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> or other server control (any type of server control in a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartzonebase\" data-linktype=\"relative-path\">WebPartZoneBase</a> zone can be used) that will be the provider must implement the interface created in the first step.  </p>\n</li>\n<li><p>Identify a callback method. A method in the provider must be identified as the callback method to establish a connection. This method returns an instance of the implemented interface to a consumer. The Web Parts approach for identifying a callback method in the provider is to add a <code>ConnectionProvider</code> metadata attribute (defined by the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionproviderattribute\" data-linktype=\"relative-path\">ConnectionProviderAttribute</a> class) to the method that returns the interface instance. When the attribute is added, the only required parameter is a display name to use for the provider connection point. Optional parameters can also be added, such as an ID for the connection point.  </p>\n</li>\n</ol>\n<p> After a control has been equipped to act as a provider, the control can participate in connections (assuming that a consumer control is similarly equipped and available). To create a static, declarative connection in the markup of a Web page, developers can use the <code>&lt;asp:webpartconnection&gt;</code> element. If the <code>ConnectionProvider</code> attribute in the provider source code that identifies the callback method specifies an ID for the connection point, then that value must be assigned to the <code>ProviderConnectionPointID</code> attribute in the <code>&lt;asp:webpartconnection&gt;</code> element on a page. One reason that a developer might specify an ID for a provider connection point is if there are multiple connection points in the provider control. If an ID is not specified for the provider connection point in the provider control, a value does not have to be assigned to the <code>ProviderConnectionPointID</code> attribute in the page either, because the connection will be created using a default value obtained from the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionpoint#System_Web_UI_WebControls_WebParts_ConnectionPoint_DefaultID\" data-linktype=\"relative-path\">DefaultID</a> field.  </p>\n<p> To create a connection in code, developers must create a new ProviderConnectionPoint object by calling the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager#System_Web_UI_WebControls_WebParts_WebPartManager_GetProviderConnectionPoints_\" data-linktype=\"relative-path\">GetProviderConnectionPoints</a> method and passing to it the ID of the provider control, along with the ID or index of the defined ProviderConnectionPoint object in the provider control. The returned ProviderConnectionPoint object, along with a reference to the provider control, a reference to the consumer control, and a corresponding <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.consumerconnectionpoint\" data-linktype=\"relative-path\">ConsumerConnectionPoint</a> object, are all passed to the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager#System_Web_UI_WebControls_WebParts_WebPartManager_ConnectWebParts_\" data-linktype=\"relative-path\">ConnectWebParts</a> method to create a new <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection\" data-linktype=\"relative-path\">WebPartConnection</a> object.  </p>\n<p> Although developers can use provider connection points as part of establishing connections either declaratively or programmatically, users can also interact with provider connection points to establish connections through the user interface (UI). If developers declare a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionszone\" data-linktype=\"relative-path\">ConnectionsZone</a> control on a Web page, it provides a run-time UI for users to create connections. If users choose the consumer control as the starting point for establishing the connection by clicking its connect verb (they could also choose the provider; there is no difference in the resulting connection), in the UI they will see a drop-down list control with the display name of the available provider connection point (or points if there are multiple ones). Users must select a provider connection point to create a connection.  </p>\n<p> A ProviderConnectionPoint object associates directly with a specific provider control, and stores details about a connection in the properties it inherits from the base <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionpoint\" data-linktype=\"relative-path\">ConnectionPoint</a> class. For example, in the inherited <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionpoint#System_Web_UI_WebControls_WebParts_ConnectionPoint_InterfaceType_\" data-linktype=\"relative-path\">InterfaceType</a> property, a provider connection point keeps the type of interface returned by the provider. If the provider and consumer in a connection both work with the same interface type, the controls are compatible and capable of forming a direct connection. If the provider and consumer cannot work with the same interface type, they are incompatible and must use a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webparttransformer\" data-linktype=\"relative-path\">WebPartTransformer</a> object to translate the provider connection point&#39;s <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionpoint#System_Web_UI_WebControls_WebParts_ConnectionPoint_InterfaceType_\" data-linktype=\"relative-path\">InterfaceType</a> value into a type that the consumer can work with. Another important inherited property is the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionpoint#System_Web_UI_WebControls_WebParts_ConnectionPoint_DisplayName_\" data-linktype=\"relative-path\">DisplayName</a> property, which provides a friendly name to display in the UI for users to choose a provider connection point when creating connections. The display name is the required parameter when developers add a <code>ConnectionProvider</code> attribute to the callback method in a provider control. The inherited <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionpoint#System_Web_UI_WebControls_WebParts_ConnectionPoint_ID_\" data-linktype=\"relative-path\">ID</a> property is also useful, as indicated above, because it provides a unique identifier for a provider connection point in the event that a provider has multiple connection points. A provider can have multiple ProviderConnectionPoint objects defined in it, and in this case, when developers add the <code>ConnectionProvider</code> attribute to a method, they should specify an ID value to distinguish each connection point. One other notable inherited property is the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionpoint#System_Web_UI_WebControls_WebParts_ConnectionPoint_AllowsMultipleConnections_\" data-linktype=\"relative-path\">AllowsMultipleConnections</a> property, which indicates whether a provider connection point can connect simultaneously to multiple consumers. This property value is <code>true</code> by default for provider connection points (whereas it defaults to <code>false</code> for consumer connection points).  </p>\n<p> The ProviderConnectionPoint class adds several unique methods to the members it inherits from the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionpoint\" data-linktype=\"relative-path\">ConnectionPoint</a> class. The <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.providerconnectionpoint#System_Web_UI_WebControls_WebParts_ProviderConnectionPoint_GetObject_\" data-linktype=\"relative-path\">GetObject</a> method retrieves an instance of the interface that the callback method will return to consumers. The <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.providerconnectionpoint#System_Web_UI_WebControls_WebParts_ProviderConnectionPoint_GetSecondaryInterfaces_\" data-linktype=\"relative-path\">GetSecondaryInterfaces</a> method retrieves additional consumer interfaces that are part of an existing connection, but are not the interfaces used to establish the connection.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Web_UI_WebControls_WebParts_ProviderConnectionPoint__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_WebControls_WebParts_ProviderConnectionPoint__ctor_System_Reflection_MethodInfo_System_Type_System_Type_System_String_System_String_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ProviderConnectionPoint(MethodInfo, Type, Type, String, String, Boolean)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.providerconnectionpoint\" data-linktype=\"relative-path\">ProviderConnectionPoint</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>callbackMethod</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The method in the provider control that returns an interface instance to consumers to establish a connection.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>interfaceType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of the interface that the provider serves to consumers.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>controlType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of the provider control with which the provider connection point is associated.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>displayName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A friendly display name for the provider connection point that appears to users in the connection user interface (UI).</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>id</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A unique identifier for the provider connection point.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>allowsMultipleConnections</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A Boolean value indicating whether the provider connection point can have multiple simultaneous connections with consumers.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>callbackMethod</code> is <code>null</code>.  </p>\n<p> - or -  </p>\n<p> <code>interfaceType</code> is <code>null</code>.  </p>\n<p> - or -  </p>\n<p> <code>controlType</code> is <code>null</code>.  </p>\n<p> - or -  </p>\n<p> <code>displayName</code> is <code>null</code> or an empty string (&quot;&quot;).</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>controlType </code>is not the same type as the provider control (or a valid class derived from it).</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The ProviderConnectionPoint constructor for the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.providerconnectionpoint\" data-linktype=\"relative-path\">ProviderConnectionPoint</a> class simply calls the base constructor, passing to it the various parameters and initializing the base class.  </p>\n<p> The base class constructor checks a number of the parameters for a connection point and can throw several exceptions. For a list of possible exceptions, see the Exceptions section.  </p>\n<p> You can call the ProviderConnectionPoint constructor to create your own instance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.providerconnectionpoint\" data-linktype=\"relative-path\">ProviderConnectionPoint</a> class. However, in cases where you are simply establishing a connection and not extending the class, you should call the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager#System_Web_UI_WebControls_WebParts_WebPartManager_GetProviderConnectionPoints_\" data-linktype=\"relative-path\">GetProviderConnectionPoints</a> method to return an existing connection point object from a provider.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Web_UI_WebControls_WebParts_ProviderConnectionPoint_GetObject_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_WebControls_WebParts_ProviderConnectionPoint_GetObject_System_Web_UI_Control_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetObject(Control)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invokes the callback method in a provider control that gets an interface instance to return to consumers.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual object GetObject (System.Web.UI.Control control);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>control</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The control acting as the provider in a Web Parts connection.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> that is an instance of the interface a provider returns to consumers to establish a connection.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>control</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method returns an object from the provider control that is an instance of the interface used to establish a connection. The type of the object will be the type of the implemented interface. For example, two interfaces that are implemented for connections in the Web Parts control set are <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.iwebpartfield\" data-linktype=\"relative-path\">IWebPartField</a> and <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.iwebpartrow\" data-linktype=\"relative-path\">IWebPartRow</a>. When the GetObject method is called on a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.providerconnectionpoint\" data-linktype=\"relative-path\">ProviderConnectionPoint</a> object, if the associated provider implements one of these interfaces, the returned object will be of the same type.  </p>\n<p> The GetObject method is called by <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection\" data-linktype=\"relative-path\">WebPartConnection</a> objects when a connection is being activated. This is a critical step that actually initiates a connection and begins the process that enables two controls to share data.  </p>\n<p> The consumer control in a connection must be able to work with the same type of interface as the provider. If it does not, the controls are incompatible and a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webparttransformer\" data-linktype=\"relative-path\">WebPartTransformer</a> object must be used to establish a connection.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Web_UI_WebControls_WebParts_ProviderConnectionPoint_GetSecondaryInterfaces_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_WebControls_WebParts_ProviderConnectionPoint_GetSecondaryInterfaces_System_Web_UI_Control_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetSecondaryInterfaces(Control)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets an optional collection of secondary interfaces that can be supported by a provider connection point.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>control</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The control acting as the provider in a Web Parts connection.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectioninterfacecollection\" data-linktype=\"relative-path\">ConnectionInterfaceCollection</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectioninterfacecollection\" data-linktype=\"relative-path\">ConnectionInterfaceCollection</a> of additional interfaces provided by the control acting as a provider.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>A provider connection point object always has a default interface that is used to establish a connection with consumers. An instance of the default interface is retrieved by calling the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.providerconnectionpoint#System_Web_UI_WebControls_WebParts_ProviderConnectionPoint_GetObject_\" data-linktype=\"relative-path\">GetObject</a> method on a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.providerconnectionpoint\" data-linktype=\"relative-path\">ProviderConnectionPoint</a> object.  </p>\n<p> However, some provider controls will implement multiple interfaces to provide to consumers as part of a connection. These interfaces, which are not the default ones used to establish a connection, are called secondary interfaces. The GetSecondaryInterfaces method provides a way to return a collection of references to the secondary interfaces, just as the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.providerconnectionpoint#System_Web_UI_WebControls_WebParts_ProviderConnectionPoint_GetObject_\" data-linktype=\"relative-path\">GetObject</a> method returns a reference to the default interface.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.ProviderConnectionPoint\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.ProviderConnectionPoint..ctor\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces\">\r\n<meta name=\"APILocation\" content=\"System.Web.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"e27d0ba4-18e6-25d8-df57-c28f840e82e9\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines a connection point object that enables a server control acting as a provider to form a connection with a consumer.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.web.ui.webcontrols.webparts/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.WebControls.WebParts.ProviderConnectionPoint\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.yml","open_to_public_contributors":false,"api_name":["System.Web.UI.WebControls.WebParts.ProviderConnectionPoint","System.Web.UI.WebControls.WebParts.ProviderConnectionPoint..ctor","System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject","System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces"],"api_location":["System.Web.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.WebControls.WebParts.ProviderConnectionPoint","System::Web::UI::WebControls::WebParts::ProviderConnectionPoint","System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor","System::Web::UI::WebControls::WebParts::ProviderConnectionPoint::#ctor","System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject","System::Web::UI::WebControls::WebParts::ProviderConnectionPoint::GetObject","System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces","System::Web::UI::WebControls::WebParts::ProviderConnectionPoint::GetSecondaryInterfaces"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"e27d0ba4-18e6-25d8-df57-c28f840e82e9","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Web.UI.WebControls.WebParts/ProviderConnectionPoint.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ProviderConnectionPoint class | Microsoft Docs","_op_ogTitle":"ProviderConnectionPoint class","description":"Defines a connection point object that enables a server control acting as a provider to form a connection with a consumer.\n","toc_asset_id":"api/_splitted/System.Web.UI.WebControls.WebParts/toc.json","toc_rel":"_splitted/System.Web.UI.WebControls.WebParts/toc.json","source_url":"","ms.assetid":"System.Web.UI.WebControls.WebParts.ProviderConnectionPoint","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.webparts.providerconnectionpoint","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.webparts.providerconnectionpoint","fileRelativePath":"api/System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.html"},"themesRelativePathToOutputRoot":"_themes/"}