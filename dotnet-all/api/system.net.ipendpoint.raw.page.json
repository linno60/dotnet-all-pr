{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">IPEndPoint</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents a network endpoint as an IP address and a port number.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class IPEndPoint : System.Net.EndPoint</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.endpoint\" data-linktype=\"relative-path\">EndPoint</a></span></div><span class=\"lang-csharp\">IPEndPoint</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<pre><code class=\"lang-cpp\" name=\"System.Net.IPEndPoint#1\">// This example uses the IPEndPoint class and its members to display the home page \n// of the server selected by the user.\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Text;\nusing namespace System::IO;\nusing namespace System::Net;\nusing namespace System::Net::Sockets;\nusing namespace System::Text::RegularExpressions;\n\n// The getPage function gets the server&#39;s home page content by \n// recreating the server&#39;s endpoint from the original serialized endpoint.\n// Then it creates a new socket and connects it to the endpoint.\nString^ getPage( String^ server, SocketAddress^ socketAddress )\n{\n   //Set up variables and string to write to the server.\n   Encoding^ ASCII = Encoding::ASCII;\n   String^ Get = String::Format( &quot;GET / HTTP/1.1\\r\\nHost: {0}\\r\\nConnection: Close\\r\\n\\r\\n&quot;, server );\n   array&lt;Byte&gt;^ByteGet = ASCII-&gt;GetBytes( Get );\n   array&lt;Byte&gt;^RecvBytes = gcnew array&lt;Byte&gt;(256);\n   String^ strRetPage = nullptr;\n   Socket^ socket = nullptr;\n\n   // Recreate the connection endpoint from the serialized information.\n   IPEndPoint^ endpoint = gcnew IPEndPoint( (__int64)0,0 );\n   IPEndPoint^ clonedIPEndPoint = dynamic_cast&lt;IPEndPoint^&gt;(endpoint-&gt;Create( socketAddress ));\n   Console::WriteLine( &quot;clonedIPEndPoint: {0}&quot;, clonedIPEndPoint );\n\n   Console::WriteLine( &quot;Press any key to continue.&quot; );\n   Console::ReadLine();\n   try\n   {\n      // Create a socket object to establish a connection with the server.\n      socket = gcnew Socket( endpoint-&gt;AddressFamily,SocketType::Stream,ProtocolType::Tcp );\n\n      // Connect to the cloned end point.\n      socket-&gt;Connect( clonedIPEndPoint );\n   }\n   catch ( SocketException^ e ) \n   {\n      Console::WriteLine( &quot;Source : {0}&quot;, e-&gt;Source );\n      Console::WriteLine( &quot;Message : {0}&quot;, e-&gt;Message );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;Source : {0}&quot;, e-&gt;Source );\n      Console::WriteLine( &quot;Message : {0}&quot;, e-&gt;Message );\n   }\n\n   if ( socket == nullptr )\n      return (&quot;Connection to cloned endpoint failed&quot;);\n\n   // Send request to the server.\n   socket-&gt;Send( ByteGet, ByteGet-&gt;Length, static_cast&lt;SocketFlags&gt;(0) );\n\n   // Receive the server  home page content.\n   Int32 bytes = socket-&gt;Receive( RecvBytes, RecvBytes-&gt;Length, static_cast&lt;SocketFlags&gt;(0) );\n\n   // Read the first 256 bytes.\n   strRetPage = String::Format( &quot;Default HTML page on {0}:\\r\\n&quot;, server );\n   strRetPage = String::Concat( strRetPage, ASCII-&gt;GetString( RecvBytes, 0, bytes ) );\n   while ( bytes &gt; 0 )\n   {\n      bytes = socket-&gt;Receive( RecvBytes, RecvBytes-&gt;Length, static_cast&lt;SocketFlags&gt;(0) );\n      strRetPage = String::Concat( strRetPage, ASCII-&gt;GetString( RecvBytes, 0, bytes ) );\n   }\n\n   socket-&gt;Close();\n   return strRetPage;\n}\n\n// The serializeEndpoint function serializes the endpoint and returns the \n// SocketAddress containing the serialized endpoint data.\nSocketAddress^ serializeEndpoint( IPEndPoint^ endpoint )\n{\n   // Serialize IPEndPoint details to a SocketAddress instance.\n   SocketAddress^ socketAddress = endpoint-&gt;Serialize();\n\n   // Display the serialized endpoint information.\n   Console::WriteLine( &quot;Endpoint.Serialize() : {0}&quot;, socketAddress );\n   Console::WriteLine( &quot;Socket-&gt;Family : {0}&quot;, socketAddress-&gt;Family );\n   Console::WriteLine( &quot;Socket-&gt;Size : {0}&quot;, socketAddress-&gt;Size );\n   Console::WriteLine( &quot;Press any key to continue.&quot; );\n   Console::ReadLine();\n   return socketAddress;\n}\n\nvoid displayEndpointInfo( IPEndPoint^ endpoint )\n{\n   Console::WriteLine( &quot;Endpoint-&gt;Address : {0}&quot;, endpoint-&gt;Address );\n   Console::WriteLine( &quot;Endpoint-&gt;AddressFamily : {0}&quot;, endpoint-&gt;AddressFamily );\n   Console::WriteLine( &quot;Endpoint-&gt;Port : {0}&quot;, endpoint-&gt;Port );\n   Console::WriteLine( &quot;Endpoint.ToString() : {0}&quot;, endpoint );\n   Console::WriteLine( &quot;Press any key to continue.&quot; );\n   Console::ReadLine();\n}\n\n// The serializeEndpoint function determines the server endpoint and then \n// serializes it to obtain the related SocketAddress object.\n// Note that in the for loop a temporary socket is created to ensure that \n// the current IP address format matches the AddressFamily type.\n// In fact, in the case of servers supporting both IPv4 and IPv6, an exception \n// may arise if an IP address format does not match the address family type.\nSocketAddress^ getSocketAddress( String^ server, int port )\n{\n   Socket^ tempSocket = nullptr;\n   IPHostEntry^ host = nullptr;\n   SocketAddress^ serializedSocketAddress = nullptr;\n   try\n   {\n      // Get the object containing Internet host information.\n      host = Dns::Resolve( server );\n\n      // Obtain the IP address from the list of IP addresses associated with the server.\n      System::Collections::IEnumerator^ myEnum = host-&gt;AddressList-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         IPAddress^ address = safe_cast&lt;IPAddress^&gt;(myEnum-&gt;Current);\n         IPEndPoint^ endpoint = gcnew IPEndPoint( address,port );\n         tempSocket = gcnew Socket( endpoint-&gt;AddressFamily,SocketType::Stream,ProtocolType::Tcp );\n         tempSocket-&gt;Connect( endpoint );\n         if ( tempSocket-&gt;Connected )\n         {\n            // Display the endpoint information.\n            displayEndpointInfo( endpoint );\n\n            // Serialize the endpoint to obtain a SocketAddress object.\n            serializedSocketAddress = serializeEndpoint( endpoint );\n            break;\n         }\n         else\n                  continue;\n      }\n\n      // Close the temporary socket.\n      tempSocket-&gt;Close();\n   }\n   catch ( SocketException^ e ) \n   {\n      Console::WriteLine( &quot;Source : {0}&quot;, e-&gt;Source );\n      Console::WriteLine( &quot;Message : {0}&quot;, e-&gt;Message );\n   }\n   catch ( Exception^ e ) \n   {\n      Console::WriteLine( &quot;Source : {0}&quot;, e-&gt;Source );\n      Console::WriteLine( &quot;Message : {0}&quot;, e-&gt;Message );\n   }\n\n   return serializedSocketAddress;\n}\n\n\n// The requestServerHomePage function obtains the server&#39;s home page and returns\n// its content.\nString^ requestServerHomePage( String^ server, int port )\n{\n   String^ strRetPage = nullptr;\n\n   // Get a socket address using the specified server and port.\n   SocketAddress^ socketAddress = getSocketAddress( server, port );\n   if ( socketAddress == nullptr )\n      strRetPage = &quot;Connection failed&quot;; // Obtain the server&#39;s home page content.\n   else\n      strRetPage = getPage( server, socketAddress );\n\n   return strRetPage;\n}\n\n\n// Show to the user how to use this program when wrong input parameters are entered.\nvoid showUsage()\n{\n   Console::WriteLine( &quot;Enter the server name as follows:&quot; );\n   Console::WriteLine( &quot;\\tcs_ipendpoint servername&quot; );\n}\n\n\n// This is the program entry point. It allows the user to enter \n// a server name that is used to locate its current homepage.\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n   String^ host = nullptr;\n   int port = 80;\n\n   // Define a regular expression to parse user&#39;s input.\n   // This is a security check. It allows only\n   // alphanumeric input string between 2 to 40 character long.\n   Regex^ rex = gcnew Regex( &quot;^[a-zA-Z]\\\\w{1,39}$&quot; );\n   if ( args-&gt;Length &lt; 2 )\n      showUsage();\n   else\n   {\n      String^ message = args[ 1 ];\n      if ( (rex-&gt;Match(message))-&gt;Success )\n      {\n         host = args[ 1 ];\n         \n         // Get the specified server home_page and display its content.\n         String^ result = requestServerHomePage( host, port );\n         Console::WriteLine( result );\n      }\n      else\n            Console::WriteLine( &quot;Input string format not allowed.&quot; );\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.IPEndPoint#1\">&#39; This example uses the IPEndPoint class and its members to display the home page \n&#39; of the server selected by the user.\n\nImports System\nImports System.Text\nImports System.IO\nImports System.Net\nImports System.Net.Sockets\nImports System.Text.RegularExpressions\n\nNamespace Mssc.Services.ConnectionManagement\n  Module M_TestIPEndPoint\n\n\n    Public Class TestIPEndPoint\n\n\t&#39;The getPage method gets the server&#39;s home page content by \n    \t&#39;recreating the server&#39;s endpoint from the original serialized endpoint.\n    \t&#39;Then it creates a new socket and connects it to the endpoint.\n      Private Shared Function getPage(ByVal server As String, ByVal socketAddress As SocketAddress) As String\n        &#39;Set up variables and String to write to the server.\n        Dim ASCII As Encoding = Encoding.ASCII\n        Dim [Get] As String = &quot;GET / HTTP/1.1&quot; + ControlChars.Cr + ControlChars.Lf + &quot;Host: &quot; + server + ControlChars.Cr + ControlChars.Lf + &quot;Connection: Close&quot; + ControlChars.Cr + ControlChars.Lf + ControlChars.Cr + ControlChars.Lf\n        Dim ByteGet As [Byte]() = ASCII.GetBytes([Get])\n        Dim RecvBytes(255) As [Byte]\n        Dim strRetPage As [String] = Nothing\n\n        Dim socket As Socket = Nothing\n\n        &#39; Recreate the connection endpoint from the serialized information.\n        Dim endpoint As New IPEndPoint(0, 0)\n        Dim clonedIPEndPoint As IPEndPoint = CType(endpoint.Create(socketAddress), IPEndPoint)\n        Console.WriteLine((&quot;clonedIPEndPoint: &quot; + clonedIPEndPoint.ToString()))\n        Console.WriteLine(&quot;Press any key to continue.&quot;)\n        Console.ReadLine()\n\n        Try\n          &#39; Create a socket object to establish a connection with the server.\n          socket = New Socket(endpoint.AddressFamily, SocketType.Stream, ProtocolType.Tcp)\n\n          &#39; Connect to the cloned end point.\n          socket.Connect(clonedIPEndPoint)\n        Catch e As SocketException\n          Console.WriteLine((&quot;Source : &quot; + e.Source))\n          Console.WriteLine((&quot;Message : &quot; + e.Message))\n        Catch e As Exception\n          Console.WriteLine((&quot;Source : &quot; + e.Source))\n          Console.WriteLine((&quot;Message : &quot; + e.Message))\n        End Try\n\n        If socket Is Nothing Then\n          Return &quot;Connection to cloned endpoint failed&quot;\n        End If\n        &#39; Send request to the server.\n        socket.Send(ByteGet, ByteGet.Length, 0)\n\n        &#39; Receive the server  home page content.\n        Dim bytes As Int32 = socket.Receive(RecvBytes, RecvBytes.Length, 0)\n\n        &#39; Read the first 256 bytes.\n        strRetPage = &quot;Default HTML page on &quot; + server + &quot;:&quot; + ControlChars.Cr + ControlChars.Lf\n        strRetPage = strRetPage + ASCII.GetString(RecvBytes, 0, bytes)\n\n        While bytes &gt; 0\n          bytes = socket.Receive(RecvBytes, RecvBytes.Length, 0)\n          strRetPage = strRetPage + ASCII.GetString(RecvBytes, 0, bytes)\n        End While\n\n        socket.Close()\n\n        Return strRetPage\n      End Function &#39;getPage\n\n\n      &#39; The serializeEndpoint method serializes the endpoint and returns the \n      &#39; SocketAddress containing the serialized endpoint data.\n      Private Shared Function serializeEndpoint(ByVal endpoint As IPEndPoint) As SocketAddress\n\n        &#39; Serialize IPEndPoint details to a SocketAddress instance.\n        Dim socketAddress As SocketAddress = endpoint.Serialize()\n\n        &#39; Display the serialized endpoint information.\n        Console.WriteLine(&quot;Endpoint Serialize() : &quot; + socketAddress.ToString())\n\n        Console.WriteLine(&quot;Socket Family : &quot; + socketAddress.Family.ToString())\n        Console.WriteLine(&quot;Socket Size : &quot; + socketAddress.ToString())\n\n        Console.WriteLine(&quot;Press any key to continue.&quot;)\n        Console.ReadLine()\n\n        Return socketAddress\n      End Function &#39;serializeEndpoint\n\n      Private Shared Sub displayEndpointInfo(ByVal endpoint As IPEndPoint)\n        Console.WriteLine(&quot;Endpoint Address : &quot; + endpoint.Address.ToString())\n        Console.WriteLine(&quot;Endpoint AddressFamily : &quot; + endpoint.AddressFamily.ToString())\n        Console.WriteLine(&quot;Endpoint Port : &quot; + endpoint.Port.ToString())\n        Console.WriteLine(&quot;Endpoint ToString() : &quot; + endpoint.ToString())\n\n        Console.WriteLine(&quot;Press any key to continue.&quot;)\n        Console.ReadLine()\n      End Sub &#39;displayEndpointInfo\n\n      &#39; The following method determines the server endpoint and then \n      &#39; serializes it to obtain the related SocketAddress object.\n      &#39; Note that in the for loop a temporary socket is created to ensure that \n      &#39; the current IP address format matches the AddressFamily type.\n      &#39; In fact, in the case of servers supporting both IPv4 and IPv6, an exception \n      &#39; may arise if an IP address format does not match the address family type.\n      Private Shared Function getSocketAddress(ByVal server As String, ByVal port As Integer) As SocketAddress\n        Dim tempSocket As Socket = Nothing\n        Dim host As IPHostEntry = Nothing\n        Dim serializedSocketAddress As SocketAddress = Nothing\n\n        Try\n          &#39; Get the object containing Internet host information.\n          host = Dns.Resolve(server)\n\n          &#39; Obtain the IP address from the list of IP addresses associated with the server.\n          Dim address As IPAddress\n          For Each address In host.AddressList\n            Dim endpoint As New IPEndPoint(address, port)\n\n\n            tempSocket = New Socket(endpoint.AddressFamily, SocketType.Stream, ProtocolType.Tcp)\n\n            tempSocket.Connect(endpoint)\n\n            If tempSocket.Connected Then\n              &#39; Display the endpoint information.\n              displayEndpointInfo(endpoint)\n              &#39; Serialize the endpoint to obtain a SocketAddress object.\n              serializedSocketAddress = serializeEndpoint(endpoint)\n              Exit For\n\n            End If\n\n          Next address\n\n\n          &#39;Close the temporary socket.\n          tempSocket.Close()\n\n        Catch e As SocketException\n          Console.WriteLine((&quot;Source : &quot; + e.Source))\n          Console.WriteLine((&quot;Message : &quot; + e.Message))\n        Catch e As Exception\n          Console.WriteLine((&quot;Source : &quot; + e.Source))\n          Console.WriteLine((&quot;Message : &quot; + e.Message))\n        End Try\n\n        Return serializedSocketAddress\n\n      End Function &#39;getSocketAddress\n\n\n\n      &#39; The requestServerHomePage obtains the server&#39;s home page and returns\n      &#39; its content.\n      Private Shared Function requestServerHomePage(ByVal server As String, ByVal port As Integer) As String\n        Dim strRetPage As [String] = Nothing\n\n        &#39; Get a socket address using the specified server and port.\n        Dim socketAddress As SocketAddress = getSocketAddress(server, port)\n\n        If socketAddress Is Nothing Then\n          strRetPage = &quot;Connection failed&quot;\n          &#39; Obtain the server&#39;s home page content.\n        Else\n          strRetPage = getPage(server, socketAddress)\n        End If\n        Return strRetPage\n      End Function &#39;requestServerHomePage\n\n\n      &#39; Show to the user how to use this program when wrong input parameters are entered.\n      Private Shared Sub showusage()\n        Console.WriteLine(&quot;Enter the server name as follows:&quot;)\n        Console.WriteLine(ControlChars.Tab + &quot;vb_ipendpoint servername&quot;)\n      End Sub &#39;showusage\n\n      &#39; This is the program entry point. It allows the user to enter \n      &#39; a server name that is used to locate its current homepage.\n      Public Shared Sub Main(ByVal args() As String)\n        Dim host As String = Nothing\n        Dim port As Integer = 80\n\n        &#39;Define a regular expression to parse user&#39;s input.\n        &#39;This is a security check. It allows only\n        &#39;alphanumeric input string between 2 to 40 character long.\n        Dim rex As New Regex(&quot;^[a-zA-Z]\\w{1,39}$&quot;)\n\n        If args.Length = 0 Then\n          &#39; Show how to use this program.\n          showusage()\n        Else\n          host = args(0)\n          If ((rex.Match(host)).Success) Then\n            &#39; Get the specified server home_page and display its content.\n            Dim result As String = requestServerHomePage(host, port)\n            Console.WriteLine(result)\n          Else\n            Console.WriteLine(&quot;Input string format not allowed.&quot;)\n          End If\n        End If\n      End Sub &#39;Main\n\n    End Class &#39;TestIPEndPoint\n  End Module\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Net.IPEndPoint#1\">\n// This example uses the IPEndPoint class and its members to display the home page \n// of the server selected by the user.\n\n\n\nusing System;\nusing System.Text;\nusing System.IO;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Text.RegularExpressions;\n\n\nnamespace Mssc.Services.ConnectionManagement\n{\n  public class TestIPEndPoint\n  {\n\n    // The getPage method gets the server&#39;s home page content by \n    // recreating the server&#39;s endpoint from the original serialized endpoint.\n    // Then it creates a new socket and connects it to the endpoint.\n    private static string getPage(string server, SocketAddress socketAddress)\n    {\n      //Set up variables and string to write to the server.\n      Encoding ASCII = Encoding.ASCII;\n      string Get = &quot;GET / HTTP/1.1\\r\\nHost: &quot; + server + \n        &quot;\\r\\nConnection: Close\\r\\n\\r\\n&quot;;\n      Byte[] ByteGet = ASCII.GetBytes(Get);\n      Byte[] RecvBytes = new Byte[256];\n      String strRetPage = null;\n\n      Socket socket = null;\n\n      // Recreate the connection endpoint from the serialized information.\n      IPEndPoint endpoint = new IPEndPoint(0,0);\n      IPEndPoint clonedIPEndPoint = (IPEndPoint) endpoint.Create(socketAddress);\n      Console.WriteLine(&quot;clonedIPEndPoint: &quot; + clonedIPEndPoint.ToString());\n\n      Console.WriteLine(&quot;Press any key to continue.&quot;);\n      Console.ReadLine();\n\n      try\n      {\n        // Create a socket object to establish a connection with the server.\n        socket = \n          new Socket(endpoint.AddressFamily, SocketType.Stream, ProtocolType.Tcp);\n\n        // Connect to the cloned end point.\n        socket.Connect(clonedIPEndPoint);\n      }\n      catch(SocketException e) \n      {\n        Console.WriteLine(&quot;Source : &quot; + e.Source);\n        Console.WriteLine(&quot;Message : &quot; + e.Message);\n      }\n      catch(Exception e)\n      {\n        Console.WriteLine(&quot;Source : &quot; + e.Source);\n        Console.WriteLine(&quot;Message : &quot; + e.Message);\n      }\n\n      if (socket == null)\n        return (&quot;Connection to cloned endpoint failed&quot;);\n      \n      // Send request to the server.\n      socket.Send(ByteGet, ByteGet.Length, 0);  \n        \n      // Receive the server  home page content.\n      Int32 bytes = socket.Receive(RecvBytes, RecvBytes.Length, 0);\n   \n      // Read the first 256 bytes.\n      strRetPage = &quot;Default HTML page on &quot; + server + &quot;:\\r\\n&quot;;\n      strRetPage = strRetPage + ASCII.GetString(RecvBytes, 0, bytes);\n\n      while (bytes &gt; 0)\n      {\n        bytes = socket.Receive(RecvBytes, RecvBytes.Length, 0);\n        strRetPage = strRetPage + ASCII.GetString(RecvBytes, 0, bytes);\n      }\n      \n      socket.Close();\n\n      return strRetPage;\n    }\n\n    // The serializeEndpoint method serializes the endpoint and returns the \n    // SocketAddress containing the serialized endpoint data.\n    private static SocketAddress serializeEndpoint(IPEndPoint endpoint)\n    {\n \n      // Serialize IPEndPoint details to a SocketAddress instance.\n      SocketAddress socketAddress = endpoint.Serialize();\n  \n      // Display the serialized endpoint information.\n      Console.WriteLine(&quot;Endpoint.Serialize() : &quot; + socketAddress.ToString());\n \n      Console.WriteLine(&quot;Socket.Family : &quot; + socketAddress.Family);\n      Console.WriteLine(&quot;Socket.Size : &quot; + socketAddress.Size);\n\n      Console.WriteLine(&quot;Press any key to continue.&quot;);\n      Console.ReadLine();\n\n      return socketAddress;\n    }\n\n    private static void displayEndpointInfo(IPEndPoint endpoint)\n    {\n      Console.WriteLine(&quot;Endpoint.Address : &quot; + endpoint.Address);\n      Console.WriteLine(&quot;Endpoint.AddressFamily : &quot; + endpoint.AddressFamily);\n      Console.WriteLine(&quot;Endpoint.Port : &quot; + endpoint.Port);\n      Console.WriteLine(&quot;Endpoint.ToString() : &quot; + endpoint.ToString());\n\n      Console.WriteLine(&quot;Press any key to continue.&quot;);\n      Console.ReadLine();\n    }\n\n    // The serializeEndpoint method determines the server endpoint and then \n    // serializes it to obtain the related SocketAddress object.\n    // Note that in the for loop a temporary socket is created to ensure that \n    // the current IP address format matches the AddressFamily type.\n    // In fact, in the case of servers supporting both IPv4 and IPv6, an exception \n    // may arise if an IP address format does not match the address family type.\n    private static SocketAddress getSocketAddress(string server, int port)\n    {\n      Socket tempSocket = null;\n      IPHostEntry host = null;\n      SocketAddress serializedSocketAddress = null;\n    \n      try\n      {\n        // Get the object containing Internet host information.\n        host = Dns.Resolve(server);\n\n        // Obtain the IP address from the list of IP addresses associated with the server.\n        foreach(IPAddress address in host.AddressList)\n        {\n          IPEndPoint endpoint = new IPEndPoint(address, port);\n\n            \n          tempSocket = \n            new Socket(endpoint.AddressFamily, SocketType.Stream, ProtocolType.Tcp);\n\n          tempSocket.Connect(endpoint);\n\n          if(tempSocket.Connected)\n          {\n            // Display the endpoint information.\n            displayEndpointInfo(endpoint);\n            // Serialize the endpoint to obtain a SocketAddress object.\n            serializedSocketAddress = serializeEndpoint(endpoint);\n            break;\n          }\n          else\n            continue;\n        }\n\n        // Close the temporary socket.\n        tempSocket.Close();\n      }\n    \n      catch(SocketException e) \n      {\n        Console.WriteLine(&quot;Source : &quot; + e.Source);\n        Console.WriteLine(&quot;Message : &quot; + e.Message);\n      }\n      catch(Exception e)\n      {\n        Console.WriteLine(&quot;Source : &quot; + e.Source);\n        Console.WriteLine(&quot;Message : &quot; + e.Message);\n      }\n      return serializedSocketAddress;\n\n    }\n\n\n    // The requestServerHomePage method obtains the server&#39;s home page and returns\n    // its content.\n    private static string requestServerHomePage(string server, int port) \n    {\n      String strRetPage = null;\n\n      // Get a socket address using the specified server and port.\n      SocketAddress socketAddress = getSocketAddress(server, port);\n\n      if (socketAddress == null)\n        strRetPage = &quot;Connection failed&quot;;\n      else \n        // Obtain the server&#39;s home page content.\n        strRetPage = getPage(server, socketAddress);\n     \n      return strRetPage;\n    }\n    \n    // Show to the user how to use this program when wrong input parameters are entered.\n    private static void showUsage() \n    {\n      Console.WriteLine(&quot;Enter the server name as follows:&quot;);\n      Console.WriteLine(&quot;\\tcs_ipendpoint servername&quot;);\n    }\n\n    // This is the program entry point. It allows the user to enter \n    // a server name that is used to locate its current homepage.\n    public static void Main(string[] args) \n    {\n      string host= null;\n      int port = 80;\n\n      // Define a regular expression to parse user&#39;s input.\n      // This is a security check. It allows only\n      // alphanumeric input string between 2 to 40 character long.\n      Regex rex = new Regex(@&quot;^[a-zA-Z]\\w{1,39}$&quot;);\n\n      if (args.Length &lt; 1)\n        showUsage();\n      else\n      {\n        string message = args[0];\n        if ((rex.Match(message)).Success)\n        {\n          host = args[0];\n          // Get the specified server home_page and display its content.\n          string result = requestServerHomePage(host, port); \n          Console.WriteLine(result);\n        }\n        else\n          Console.WriteLine(&quot;Input string format not allowed.&quot;);\n      }\n\n    }\n  \n  }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The IPEndPoint class contains the host and local or remote port information needed by an application to connect to a service on a host. By combining the host&#39;s IP address and port number of a service, the IPEndPoint class forms a connection point to a service.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_IPEndPoint__ctor_System_Int64_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IPEndPoint(Int64, Int32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a> class with the specified address and port number.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public IPEndPoint (long address, int port);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>address</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The IP address of the Internet host.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>port</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The port number associated with the <code>address</code>, or 0 to specify any available port. <code>port</code> is in host order.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>port</code> is less than <a class=\"xref\" href=\"system.net.ipendpoint#System_Net_IPEndPoint_MinPort\" data-linktype=\"relative-path\">MinPort</a>.  </p>\n<p> -or-  </p>\n<p> <code>port</code> is greater than <a class=\"xref\" href=\"system.net.ipendpoint#System_Net_IPEndPoint_MaxPort\" data-linktype=\"relative-path\">MaxPort</a>.  </p>\n<p> -or-  </p>\n<p> <code>address</code> is less than 0 or greater than 0x00000000FFFFFFFF.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_IPEndPoint__ctor_System_Net_IPAddress_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IPEndPoint(IPAddress, Int32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a> class with the specified address and port number.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public IPEndPoint (System.Net.IPAddress address, int port);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>address</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>port</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The port number associated with the <code>address</code>, or 0 to specify any available port. <code>port</code> is in host order.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>address</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>port</code> is less than <a class=\"xref\" href=\"system.net.ipendpoint#System_Net_IPEndPoint_MinPort\" data-linktype=\"relative-path\">MinPort</a>.  </p>\n<p> -or-  </p>\n<p> <code>port</code> is greater than <a class=\"xref\" href=\"system.net.ipendpoint#System_Net_IPEndPoint_MaxPort\" data-linktype=\"relative-path\">MaxPort</a>.  </p>\n<p> -or-  </p>\n<p> <code>address</code> is less than 0 or greater than 0x00000000FFFFFFFF.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Fields\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_IPEndPoint_MaxPort\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MaxPort</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Specifies the maximum value that can be assigned to the <span class=\"xref\">stem.Net.IPEndPoint.Port*</span> property. The MaxPort value is set to 0x0000FFFF. This field is read-only.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public const int MaxPort = 65535;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_IPEndPoint_MinPort\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MinPort</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Specifies the minimum value that can be assigned to the <span class=\"xref\">stem.Net.IPEndPoint.Port*</span> property. This field is read-only.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public const int MinPort = 0;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_IPEndPoint_Address\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Address</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the IP address of the endpoint.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Net.IPAddress Address { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.net.ipaddress\" data-linktype=\"relative-path\">IPAddress</a> instance containing the IP address of the endpoint.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_IPEndPoint_AddressFamily\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AddressFamily</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the Internet Protocol (IP) address family.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override System.Net.Sockets.AddressFamily AddressFamily { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.sockets.addressfamily\" data-linktype=\"relative-path\">AddressFamily</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Returns <a class=\"xref\" href=\"system.net.sockets.addressfamily\" data-linktype=\"relative-path\">AddressFamily</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_IPEndPoint_Port\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Port</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the port number of the endpoint.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int Port { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An integer value in the range <a class=\"xref\" href=\"system.net.ipendpoint#System_Net_IPEndPoint_MinPort\" data-linktype=\"relative-path\">MinPort</a> to <a class=\"xref\" href=\"system.net.ipendpoint#System_Net_IPEndPoint_MaxPort\" data-linktype=\"relative-path\">MaxPort</a> indicating the port number of the endpoint.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The value that was specified for a set operation is less than <a class=\"xref\" href=\"system.net.ipendpoint#System_Net_IPEndPoint_MinPort\" data-linktype=\"relative-path\">MinPort</a> or greater than <a class=\"xref\" href=\"system.net.ipendpoint#System_Net_IPEndPoint_MaxPort\" data-linktype=\"relative-path\">MaxPort</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_IPEndPoint_Create_System_Net_SocketAddress_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Create(SocketAddress)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Creates an endpoint from a socket address.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override System.Net.EndPoint Create (System.Net.SocketAddress socketAddress);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>socketAddress</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.socketaddress\" data-linktype=\"relative-path\">SocketAddress</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.net.socketaddress\" data-linktype=\"relative-path\">SocketAddress</a> to use for the endpoint.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.endpoint\" data-linktype=\"relative-path\">EndPoint</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.net.endpoint\" data-linktype=\"relative-path\">EndPoint</a> instance using the specified socket address.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The AddressFamily of <code>socketAddress</code> is not equal to the AddressFamily of the current instance.  </p>\n<p> -or-  </p>\n<p> <code>socketAddress</code>.Size &lt; 8.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_IPEndPoint_Equals_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Equals(Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether the specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> is equal to the current <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override bool Equals (object comparand);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>comparand</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to compare with the current <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> is equal to the current <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_IPEndPoint_GetHashCode\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetHashCode()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a hash value for a <a class=\"xref\" href=\"system.net.ipendpoint\" data-linktype=\"relative-path\">IPEndPoint</a> instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetHashCode ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An integer hash value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The GetHashCode method returns a hash code of the IP endpoint instance. This value can be used as a key in hash tables.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_IPEndPoint_Serialize\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Serialize()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Serializes endpoint information into a <a class=\"xref\" href=\"system.net.socketaddress\" data-linktype=\"relative-path\">SocketAddress</a> instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override System.Net.SocketAddress Serialize ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.socketaddress\" data-linktype=\"relative-path\">SocketAddress</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.net.socketaddress\" data-linktype=\"relative-path\">SocketAddress</a> instance containing the socket address for the endpoint.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_IPEndPoint_ToString\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToString()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the IP address and port number of the specified endpoint.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override string ToString ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A string containing the IP address and the port number of the specified endpoint (for example, 192.168.1.2:80).</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Net.IPEndPoint.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.IPEndPoint\">\r\n<meta name=\"APIName\" content=\"System.Net.IPEndPoint..ctor\">\r\n<meta name=\"APIName\" content=\"System.Net.IPEndPoint.Address\">\r\n<meta name=\"APIName\" content=\"System.Net.IPEndPoint.AddressFamily\">\r\n<meta name=\"APIName\" content=\"System.Net.IPEndPoint.Create\">\r\n<meta name=\"APIName\" content=\"System.Net.IPEndPoint.Equals\">\r\n<meta name=\"APIName\" content=\"System.Net.IPEndPoint.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Net.IPEndPoint.MaxPort\">\r\n<meta name=\"APIName\" content=\"System.Net.IPEndPoint.MinPort\">\r\n<meta name=\"APIName\" content=\"System.Net.IPEndPoint.Port\">\r\n<meta name=\"APIName\" content=\"System.Net.IPEndPoint.Serialize\">\r\n<meta name=\"APIName\" content=\"System.Net.IPEndPoint.ToString\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"5fa32236-1972-d637-70ee-b444a96b4c6b\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a network endpoint as an IP address and a port number.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.net/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.IPEndPoint\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Net.IPEndPoint.yml","open_to_public_contributors":false,"api_name":["System.Net.IPEndPoint","System.Net.IPEndPoint..ctor","System.Net.IPEndPoint.Address","System.Net.IPEndPoint.AddressFamily","System.Net.IPEndPoint.Create","System.Net.IPEndPoint.Equals","System.Net.IPEndPoint.GetHashCode","System.Net.IPEndPoint.MaxPort","System.Net.IPEndPoint.MinPort","System.Net.IPEndPoint.Port","System.Net.IPEndPoint.Serialize","System.Net.IPEndPoint.ToString"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.IPEndPoint","System::Net::IPEndPoint","System.Net.IPEndPoint.#ctor","System::Net::IPEndPoint::#ctor","System.Net.IPEndPoint.Address","System::Net::IPEndPoint::Address","System.Net.IPEndPoint.AddressFamily","System::Net::IPEndPoint::AddressFamily","System.Net.IPEndPoint.Create","System::Net::IPEndPoint::Create","System.Net.IPEndPoint.Equals","System::Net::IPEndPoint::Equals","System.Net.IPEndPoint.GetHashCode","System::Net::IPEndPoint::GetHashCode","System.Net.IPEndPoint.MaxPort","System::Net::IPEndPoint::MaxPort","System.Net.IPEndPoint.MinPort","System::Net::IPEndPoint::MinPort","System.Net.IPEndPoint.Port","System::Net::IPEndPoint::Port","System.Net.IPEndPoint.Serialize","System::Net::IPEndPoint::Serialize","System.Net.IPEndPoint.ToString","System::Net::IPEndPoint::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"5fa32236-1972-d637-70ee-b444a96b4c6b","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Net/IPEndPoint.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IPEndPoint class | Microsoft Docs","_op_ogTitle":"IPEndPoint class","description":"Represents a network endpoint as an IP address and a port number.\n","toc_asset_id":"api/_splitted/System.Net/toc.json","toc_rel":"_splitted/System.Net/toc.json","source_url":"","ms.assetid":"System.Net.IPEndPoint","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.net.ipendpoint","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.net.ipendpoint","fileRelativePath":"api/System.Net.IPEndPoint.html"},"themesRelativePathToOutputRoot":"_themes/"}