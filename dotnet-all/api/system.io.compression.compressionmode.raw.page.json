{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">CompressionMode</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies whether to compress or decompress the underlying stream.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public enum CompressionMode</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">CompressionMode</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example uses the CompressionMode enumeration with the <a class=\"xref\" href=\"system.io.compression.gzipstream\" data-linktype=\"relative-path\">GZipStream</a> class to compress and decompress a file.  </p>\n<pre><code class=\"lang-cs\" name=\"IO.Compression.GZip1#1\">using System;\nusing System.IO;\nusing System.IO.Compression;\n\nnamespace zip\n{\n    public class Program\n    {\n        private static string directoryPath = @&quot;c:\\temp&quot;;\n        public static void Main()\n        {\n            DirectoryInfo directorySelected = new DirectoryInfo(directoryPath);\n            Compress(directorySelected);\n\n            foreach (FileInfo fileToDecompress in directorySelected.GetFiles(&quot;*.gz&quot;))\n            {\n                Decompress(fileToDecompress);\n            }\n        }\n\n        public static void Compress(DirectoryInfo directorySelected)\n        {\n            foreach (FileInfo fileToCompress in directorySelected.GetFiles())\n            {\n                using (FileStream originalFileStream = fileToCompress.OpenRead())\n                {\n                    if ((File.GetAttributes(fileToCompress.FullName) &amp; \n                       FileAttributes.Hidden) != FileAttributes.Hidden &amp; fileToCompress.Extension != &quot;.gz&quot;)\n                    {\n                        using (FileStream compressedFileStream = File.Create(fileToCompress.FullName + &quot;.gz&quot;))\n                        {\n                            using (GZipStream compressionStream = new GZipStream(compressedFileStream, \n                               CompressionMode.Compress))\n                            {\n                                originalFileStream.CopyTo(compressionStream);\n\n                            }\n                        }\n                        FileInfo info = new FileInfo(directoryPath + &quot;\\\\&quot; + fileToCompress.Name + &quot;.gz&quot;);\n                        Console.WriteLine(&quot;Compressed {0} from {1} to {2} bytes.&quot;,\n                        fileToCompress.Name, fileToCompress.Length.ToString(), info.Length.ToString());\n                    }\n\n                }\n            }\n        }\n\n        public static void Decompress(FileInfo fileToDecompress)\n        {\n            using (FileStream originalFileStream = fileToDecompress.OpenRead())\n            {\n                string currentFileName = fileToDecompress.FullName;\n                string newFileName = currentFileName.Remove(currentFileName.Length - fileToDecompress.Extension.Length);\n\n                using (FileStream decompressedFileStream = File.Create(newFileName))\n                {\n                    using (GZipStream decompressionStream = new GZipStream(originalFileStream, CompressionMode.Decompress))\n                    {\n                        decompressionStream.CopyTo(decompressedFileStream);\n                        Console.WriteLine(&quot;Decompressed: {0}&quot;, fileToDecompress.Name);\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"IO.Compression.GZip1#1\">Imports System.IO\nImports System.IO.Compression\nModule Module1\n\n    Private directoryPath As String = &quot;c:\\temp&quot;\n    Public Sub Main()\n        Dim directorySelected As New DirectoryInfo(directoryPath)\n        Compress(directorySelected)\n\n        For Each fileToDecompress As FileInfo In directorySelected.GetFiles(&quot;*.gz&quot;)\n            Decompress(fileToDecompress)\n        Next\n    End Sub\n\n    Public Sub Compress(directorySelected As DirectoryInfo)\n        For Each fileToCompress As FileInfo In directorySelected.GetFiles()\n            Using originalFileStream As FileStream = fileToCompress.OpenRead()\n                If (File.GetAttributes(fileToCompress.FullName) And FileAttributes.Hidden) &lt;&gt; FileAttributes.Hidden And fileToCompress.Extension &lt;&gt; &quot;.gz&quot; Then\n                    Using compressedFileStream As FileStream = File.Create(fileToCompress.FullName &amp; &quot;.gz&quot;)\n                        Using compressionStream As New GZipStream(compressedFileStream, CompressionMode.Compress)\n\n                            originalFileStream.CopyTo(compressionStream)\n                        End Using\n                    End Using\n                    Dim info As New FileInfo(directoryPath &amp; &quot;\\&quot; &amp; fileToCompress.Name &amp; &quot;.gz&quot;)\n                    Console.WriteLine(&quot;Compressed {0} from {1} to {2} bytes.&quot;, fileToCompress.Name,\n                                      fileToCompress.Length.ToString(), info.Length.ToString())\n\n                End If\n            End Using\n        Next\n    End Sub\n\n\n    Private Sub Decompress(ByVal fileToDecompress As FileInfo)\n        Using originalFileStream As FileStream = fileToDecompress.OpenRead()\n            Dim currentFileName As String = fileToDecompress.FullName\n            Dim newFileName = currentFileName.Remove(currentFileName.Length - fileToDecompress.Extension.Length)\n\n            Using decompressedFileStream As FileStream = File.Create(newFileName)\n                Using decompressionStream As GZipStream = New GZipStream(originalFileStream, CompressionMode.Decompress)\n                    decompressionStream.CopyTo(decompressedFileStream)\n                    Console.WriteLine(&quot;Decompressed: {0}&quot;, fileToDecompress.Name)\n                End Using\n            End Using\n        End Using\n    End Sub\nEnd Module\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>This enumeration is used with the <a class=\"xref\" href=\"system.io.compression.gzipstream\" data-linktype=\"relative-path\">GZipStream</a> and <a class=\"xref\" href=\"system.io.compression.deflatestream\" data-linktype=\"relative-path\">DeflateStream</a> classes.</p>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_IO_Compression_CompressionMode_Compress\">\r\n      \t\t\t<span class=\"lang-csharp\">Compress</span>\r\n      \t</td>\r\n      \t<td><p>Compresses the underlying stream.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_IO_Compression_CompressionMode_Decompress\">\r\n      \t\t\t<span class=\"lang-csharp\">Decompress</span>\r\n      \t</td>\r\n      \t<td><p>Decompresses the underlying stream.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.IO.Compression.CompressionMode.yml\">\r\n<meta name=\"APIName\" content=\"System.IO.Compression.CompressionMode\">\r\n<meta name=\"APIName\" content=\"System.IO.Compression.CompressionMode.Compress\">\r\n<meta name=\"APIName\" content=\"System.IO.Compression.CompressionMode.Decompress\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"7d0b2e37-39f9-6b20-bbd6-4fd419237452\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies whether to compress or decompress the underlying stream.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.io.compression/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.IO.Compression.CompressionMode\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.IO.Compression.CompressionMode.yml","open_to_public_contributors":false,"api_name":["System.IO.Compression.CompressionMode","System.IO.Compression.CompressionMode.Compress","System.IO.Compression.CompressionMode.Decompress"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.IO.Compression.CompressionMode","System::IO::Compression::CompressionMode","System.IO.Compression.CompressionMode.Compress","System::IO::Compression::CompressionMode::Compress","System.IO.Compression.CompressionMode.Decompress","System::IO::Compression::CompressionMode::Decompress"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"7d0b2e37-39f9-6b20-bbd6-4fd419237452","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.IO.Compression/CompressionMode.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"CompressionMode enum | Microsoft Docs","_op_ogTitle":"CompressionMode enum","description":"Specifies whether to compress or decompress the underlying stream.\n","toc_asset_id":"api/_splitted/System.IO.Compression/toc.json","toc_rel":"_splitted/System.IO.Compression/toc.json","source_url":"","ms.assetid":"System.IO.Compression.CompressionMode","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.io.compression.compressionmode","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.io.compression.compressionmode","fileRelativePath":"api/System.IO.Compression.CompressionMode.html"},"themesRelativePathToOutputRoot":"_themes/"}