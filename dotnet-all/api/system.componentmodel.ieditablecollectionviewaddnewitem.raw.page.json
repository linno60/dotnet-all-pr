{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">IEditableCollectionViewAddNewItem</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Defines methods and properties that a <a class=\"xref\" href=\"system.windows.data.collectionview\" data-linktype=\"relative-path\">CollectionView</a> implements to enable specifying adding items of a specific type.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public interface IEditableCollectionViewAddNewItem : System.ComponentModel.IEditableCollectionView</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example enables a user to add various types of items to a collection. The user can enter a new item and submit the entry or cancel the transaction. The example gets an IEditableCollectionViewAddNewItem from the <a class=\"xref\" href=\"system.windows.controls.itemscontrol#System_Windows_Controls_ItemsControl_Items_\" data-linktype=\"relative-path\">Items</a> property of a <a class=\"xref\" href=\"system.windows.controls.listbox\" data-linktype=\"relative-path\">ListBox</a> and creates an object, whose type is determined by the user. Then the example calls the <a class=\"xref\" href=\"system.componentmodel.ieditablecollectionviewaddnewitem#System_ComponentModel_IEditableCollectionViewAddNewItem_AddNewItem_\" data-linktype=\"relative-path\">AddNewItem</a> method to add the object to the collection.  </p>\n<pre><code class=\"lang-vb\" name=\"IEditableCollectionViewAddItemExample#MainWindowLogic\">Imports System\nImports System.ComponentModel\nImports System.Windows\n\nPartial Class Window1\n    Public Sub New()\n        InitializeComponent()\n    End Sub\n\n    Private Sub Button_Click(ByVal sender As Object, ByVal e As RoutedEventArgs)\n\n        Dim viewToAddDisparateItems As IEditableCollectionViewAddNewItem =\n            TryCast(catalogList.Items, IEditableCollectionViewAddNewItem)\n\n        If Not viewToAddDisparateItems.CanAddNewItem Then\n            MessageBox.Show(&quot;You cannot add items to the list.&quot;)\n            Exit Sub\n        End If\n\n        &#39; Create a window that prompts the user to enter a new \n        &#39; item to sell. \n        Dim win As New AddItemWindow()\n\n        &#39; Create an item, depending on which RadioButton is selected. \n        &#39; Radio buttons correspond to book, cd, dvd, or other. \n        Dim newItem As LibraryItem\n\n        If CBool(Book.IsChecked) Then\n            newItem = New Book(&quot;Enter the book title&quot;, &quot;Enter an Author&quot;,\n                &quot;Enter a Genre&quot;, &quot;Enter a call number&quot;,\n                DateTime.Now + New TimeSpan(21, 0, 0, 0))\n        ElseIf CBool(cd.IsChecked) Then\n            newItem = New MusicCD(&quot;Enter the Album&quot;, &quot;Enter the artist&quot;,\n                0, &quot;CD.******&quot;, DateTime.Now + New TimeSpan(14, 0, 0, 0))\n\n        ElseIf CBool(dvd.IsChecked) Then\n            newItem = New MovieDVD(&quot;Enter the movie title&quot;,\n                &quot;Enter the director&quot;, &quot;Enter the genre&quot;, New TimeSpan(),\n                &quot;DVD.******&quot;, DateTime.Now + New TimeSpan(7, 0, 0, 0))\n        Else\n            newItem = New LibraryItem(&quot;Enter the title&quot;,\n                &quot;Enter the call number&quot;,\n                DateTime.Now + New TimeSpan(14, 0, 0, 0))\n        End If\n\n        &#39; Add the new item to the collection by calling \n        &#39; IEditableCollectionViewAddNewItem.AddNewItem. \n        &#39; Set the DataContext of the AddItemWindow to the \n        &#39; returned item. \n        win.DataContext = viewToAddDisparateItems.AddNewItem(newItem)\n\n        &#39; If the user submits the new item, commit the new \n        &#39; object to the collection. If the user cancels \n        &#39; adding the new item, discard the new item. \n        If CBool(win.ShowDialog()) Then\n            viewToAddDisparateItems.CommitNew()\n        Else\n            viewToAddDisparateItems.CancelNew()\n        End If\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"IEditableCollectionViewAddItemExample#MainWindowLogic\">using System;\nusing System.ComponentModel;\nusing System.Windows;\n\nnamespace IEditableCollectionViewAddItemExample\n{\n    public partial class Window1 : Window\n    {\n        public Window1()\n        {\n            InitializeComponent();\n        }\n\n        private void Button_Click(object sender, RoutedEventArgs e)\n        {\n            IEditableCollectionViewAddNewItem viewToAddDisparateItems =\n                catalogList.Items as IEditableCollectionViewAddNewItem;\n\n            if (!viewToAddDisparateItems.CanAddNewItem)\n            {\n                MessageBox.Show(&quot;You cannot add items to the list.&quot;);\n                return;\n            }\n\n            // Create a window that prompts the user to enter a new\n            // item to sell.\n            AddItemWindow win = new AddItemWindow();\n\n            // Create an item, depending on which RadioButton is selected.\n            // Radio buttons correspond to book, cd, dvd, or other.\n            LibraryItem newItem;\n\n            if ((bool)book.IsChecked)\n            {\n                newItem = new Book(&quot;Enter the book title&quot;, &quot;Enter an Author&quot;, &quot;Enter a Genre&quot;,\n                    &quot;Enter a call number&quot;, DateTime.Now + new TimeSpan(21, 0, 0, 0));\n            }\n            else if ((bool)cd.IsChecked)\n            {\n                newItem = new MusicCD(&quot;Enter the Album&quot;, &quot;Enter the artist&quot;, 0, &quot;CD.******&quot;,\n                    DateTime.Now + new TimeSpan(14, 0, 0, 0));\n            }\n\n            else if ((bool)dvd.IsChecked)\n            {\n                newItem = new MovieDVD(&quot;Enter the movie title&quot;, &quot;Enter the director&quot;,\n                    &quot;Enter the genre&quot;, new TimeSpan(), &quot;DVD.******&quot;,\n                    DateTime.Now + new TimeSpan(7, 0, 0, 0));\n            }\n            else\n            {\n                newItem = new LibraryItem(&quot;Enter the title&quot;, &quot;Enter the call number&quot;,\n                        DateTime.Now + new TimeSpan(14, 0, 0, 0));\n            }\n\n            // Add the new item to the collection by calling\n            // IEditableCollectionViewAddNewItem.AddNewItem.\n            // Set the DataContext of the AddItemWindow to the\n            // returned item.\n            win.DataContext = viewToAddDisparateItems.AddNewItem(newItem);\n\n            // If the user submits the new item, commit the new\n            // object to the collection.  If the user cancels \n            // adding the new item, discard the new item.\n            if ((bool)win.ShowDialog())\n            {\n                viewToAddDisparateItems.CommitNew();\n            }\n            else\n            {\n                viewToAddDisparateItems.CancelNew();\n            }\n\n\n        }\n    }\n}\n</code></pre><p> The following example creates the user interface for the previous example.  </p>\n<pre><code class=\"lang-xml\" name=\"IEditableCollectionViewAddItemExample#MainWindowXaml\">&lt;StackPanel xmlns:src=&quot;clr-namespace:IEditableCollectionViewAddItemExample&quot;&gt;\n  &lt;StackPanel.Resources&gt;\n    &lt;src:LibraryCatalog x:Key=&quot;catalog&quot;/&gt;\n\n    &lt;!--Use AlternationConverter to create alternating background brushes\n              to better distinguish each item. See AlternationConverter\n              for more information.--&gt;\n    &lt;AlternationConverter x:Key=&quot;BackgroundConverter&quot;&gt;\n      &lt;SolidColorBrush&gt;LightBlue&lt;/SolidColorBrush&gt;\n      &lt;SolidColorBrush&gt;LightGray&lt;/SolidColorBrush&gt;\n    &lt;/AlternationConverter&gt;\n\n    &lt;!--The DataTemplate for LibraryItem, which is the base class\n              of the other data types.--&gt;\n    &lt;DataTemplate DataType=&quot;{x:Type src:LibraryItem}&quot;&gt;\n      &lt;StackPanel&gt;\n\n        &lt;TextBlock FontWeight=&quot;Bold&quot;&gt;Item:&lt;/TextBlock&gt;\n        &lt;TextBlock Text=&quot;{Binding Title, StringFormat={}Title: {0}}&quot;/&gt;\n        &lt;TextBlock&gt;\n          &lt;TextBlock.Text&gt;\n            &lt;MultiBinding StringFormat=&quot;{}Due Date: {0:d}    Call Number: {1}&quot;&gt;\n              &lt;Binding Path=&quot;DueDate&quot;/&gt;\n              &lt;Binding Path=&quot;CallNumber&quot;/&gt;\n            &lt;/MultiBinding&gt;\n          &lt;/TextBlock.Text&gt;\n        &lt;/TextBlock&gt;\n      &lt;/StackPanel&gt;\n    &lt;/DataTemplate&gt;\n\n    &lt;!--The DataTemplate for Book.--&gt;\n    &lt;DataTemplate DataType=&quot;{x:Type src:Book}&quot;&gt;\n      &lt;StackPanel&gt;\n\n        &lt;TextBlock FontWeight=&quot;Bold&quot;&gt;Book:&lt;/TextBlock&gt;\n        &lt;TextBlock Text=&quot;{Binding Title, StringFormat={}Title: {0}}&quot;/&gt;\n        &lt;TextBlock&gt;\n          &lt;TextBlock.Text&gt;\n            &lt;MultiBinding StringFormat=&quot;{}Author: {0}    Genre: {1}&quot;&gt;\n              &lt;Binding Path=&quot;Author&quot;/&gt;\n              &lt;Binding Path=&quot;Genre&quot;/&gt;\n            &lt;/MultiBinding&gt;\n          &lt;/TextBlock.Text&gt;\n        &lt;/TextBlock&gt;\n        &lt;TextBlock&gt;\n          &lt;TextBlock.Text&gt;\n            &lt;MultiBinding StringFormat=&quot;{}Due Date: {0:d}    Call Number: {1}&quot;&gt;\n              &lt;Binding Path=&quot;DueDate&quot;/&gt;\n              &lt;Binding Path=&quot;CallNumber&quot;/&gt;\n            &lt;/MultiBinding&gt;\n          &lt;/TextBlock.Text&gt;\n        &lt;/TextBlock&gt;\n      &lt;/StackPanel&gt;\n    &lt;/DataTemplate&gt;\n\n    &lt;!--The DataTemplate for MusicCD.--&gt;\n    &lt;DataTemplate DataType=&quot;{x:Type src:MusicCD}&quot;&gt;\n      &lt;StackPanel&gt;\n\n        &lt;TextBlock FontWeight=&quot;Bold&quot;&gt;Music CD:&lt;/TextBlock&gt;\n        &lt;TextBlock Text=&quot;{Binding Title, StringFormat={}Title: {0}}&quot;/&gt;\n        &lt;TextBlock&gt;\n          &lt;TextBlock.Text&gt;\n            &lt;MultiBinding StringFormat=&quot;{}Artist: {0}    Tracks: {1}&quot;&gt;\n              &lt;Binding Path=&quot;Artist&quot;/&gt;\n              &lt;Binding Path=&quot;NumberOfTracks&quot;/&gt;\n            &lt;/MultiBinding&gt;\n          &lt;/TextBlock.Text&gt;\n        &lt;/TextBlock&gt;\n        &lt;TextBlock&gt;\n          &lt;TextBlock.Text&gt;\n            &lt;MultiBinding StringFormat=&quot;{}Due Date: {0:d}    Call Number: {1}&quot;&gt;\n              &lt;Binding Path=&quot;DueDate&quot;/&gt;\n              &lt;Binding Path=&quot;CallNumber&quot;/&gt;\n            &lt;/MultiBinding&gt;\n          &lt;/TextBlock.Text&gt;\n        &lt;/TextBlock&gt;\n      &lt;/StackPanel&gt;\n    &lt;/DataTemplate&gt;\n\n    &lt;!--The DataTemplate for MovieDVD--&gt;\n    &lt;DataTemplate DataType=&quot;{x:Type src:MovieDVD}&quot;&gt;\n      &lt;StackPanel&gt;\n        &lt;TextBlock FontWeight=&quot;Bold&quot;&gt;Movie DVD:&lt;/TextBlock&gt;\n        &lt;TextBlock Text=&quot;{Binding Title, StringFormat={}Title: {0}}&quot;/&gt;\n        &lt;TextBlock&gt;\n          &lt;TextBlock.Text&gt;\n            &lt;MultiBinding StringFormat=&quot;{}Director: {0}    Genre: {1}    Length: {2}&quot;&gt;\n              &lt;Binding Path=&quot;Director&quot;/&gt;\n              &lt;Binding Path=&quot;Genre&quot;/&gt;\n              &lt;Binding Path=&quot;Length&quot;/&gt;\n            &lt;/MultiBinding&gt;\n          &lt;/TextBlock.Text&gt;\n        &lt;/TextBlock&gt;\n        &lt;TextBlock&gt;\n          &lt;TextBlock.Text&gt;\n            &lt;MultiBinding StringFormat=&quot;{}Due Date: {0:d}    Call Number: {1}&quot;&gt;\n              &lt;Binding Path=&quot;DueDate&quot;/&gt;\n              &lt;Binding Path=&quot;CallNumber&quot;/&gt;\n            &lt;/MultiBinding&gt;\n          &lt;/TextBlock.Text&gt;\n        &lt;/TextBlock&gt;\n      &lt;/StackPanel&gt;\n    &lt;/DataTemplate&gt;\n\n  &lt;/StackPanel.Resources&gt;\n\n  &lt;!--Bind a ListBox to a collection of LibraryItem objects. The collection \n          can hold objects any type that inherits from LibraryItem.--&gt;\n  &lt;ListBox Name=&quot;catalogList&quot; Height=&quot;350&quot; AlternationCount=&quot;2&quot; \n               ItemsSource=&quot;{StaticResource catalog}&quot;&gt;\n\n    &lt;!--Use alternating background styles to better distinguish each item.\n              See ItemsControl.AlternationIndex for more information.--&gt;\n    &lt;ListBox.ItemContainerStyle&gt;\n      &lt;Style TargetType=&quot;ListBoxItem&quot;&gt;\n        &lt;Setter Property=&quot;Background&quot; \n                Value=&quot;{Binding RelativeSource={RelativeSource Self},\n                Path=(ItemsControl.AlternationIndex),\n               Converter={StaticResource BackgroundConverter}}&quot;/&gt;\n\n        &lt;Setter Property=&quot;Margin&quot; Value=&quot;3&quot;/&gt;\n      &lt;/Style&gt;\n    &lt;/ListBox.ItemContainerStyle&gt;\n  &lt;/ListBox&gt;\n\n  &lt;!--Enable the user to choose a type of item to add to the collection.--&gt;\n  &lt;TextBlock&gt;Select an item to add:&lt;/TextBlock&gt;\n  &lt;RadioButton Name=&quot;book&quot; &gt;Book&lt;/RadioButton&gt;\n  &lt;RadioButton Name=&quot;cd&quot;&gt;Music CD&lt;/RadioButton&gt;\n  &lt;RadioButton Name=&quot;dvd&quot;&gt;DVD&lt;/RadioButton&gt;\n  &lt;RadioButton&gt;Other&lt;/RadioButton&gt;\n\n  &lt;Button Margin=&quot;0,3,0,0&quot; Click=&quot;Button_Click&quot;&gt;Add Item&lt;/Button&gt;\n&lt;/StackPanel&gt;\n</code></pre><p> The following example creates the <code>AddItemWindow</code> in which the user adds data for a new item.  </p>\n<pre><code class=\"lang-xml\" name=\"IEditableCollectionViewAddItemExample#AddItemXaml\">&lt;StackPanel Margin=&quot;10&quot; Width=&quot;250&quot;&gt;\n  &lt;StackPanel.Resources&gt;\n\n    &lt;!--Add an event handler to select all text when\n        a TextBox gets focus.--&gt;\n    &lt;Style TargetType=&quot;TextBox&quot;&gt;\n      &lt;EventSetter Event=&quot;GotFocus&quot; Handler=&quot;TextBoxFocus&quot;/&gt;\n    &lt;/Style&gt;\n\n    &lt;!--Create a Template for HeaderedContentControl so the header is\n        to the left of the content.--&gt;\n    &lt;Style TargetType=&quot;HeaderedContentControl&quot;&gt;\n      &lt;Setter Property=&quot;Margin&quot; Value=&quot;2&quot;/&gt;\n      &lt;Setter Property=&quot;Focusable&quot; Value=&quot;False&quot;/&gt;\n      &lt;Setter Property=&quot;Template&quot;&gt;\n        &lt;Setter.Value&gt;\n          &lt;ControlTemplate TargetType=&quot;HeaderedContentControl&quot;&gt;\n            &lt;DockPanel LastChildFill=&quot;False&quot;&gt;\n              &lt;ContentPresenter ContentSource=&quot;Header&quot; DockPanel.Dock=&quot;Left&quot; \n                                Focusable=&quot;False&quot; VerticalAlignment=&quot;Center&quot;/&gt;\n              &lt;ContentPresenter ContentSource=&quot;Content&quot; Margin=&quot;5,0,0,0&quot; \n                                DockPanel.Dock=&quot;Right&quot; VerticalAlignment=&quot;Center&quot;/&gt;\n            &lt;/DockPanel&gt;\n\n          &lt;/ControlTemplate&gt;\n        &lt;/Setter.Value&gt;\n      &lt;/Setter&gt;\n    &lt;/Style&gt;\n\n    &lt;Style TargetType=&quot;Button&quot;&gt;\n      &lt;Setter Property=&quot;Width&quot; Value=&quot;100&quot;/&gt;\n      &lt;Setter Property=&quot;Margin&quot; Value=&quot;10,15,15,15&quot;/&gt;\n\n    &lt;/Style&gt;\n\n    &lt;!--The DataTemplate that is used when the user \n        enters a new LibraryItem.--&gt;\n    &lt;DataTemplate DataType=&quot;{x:Type src:LibraryItem}&quot;&gt;\n      &lt;StackPanel&gt;\n        &lt;HeaderedContentControl Header=&quot;Title&quot;&gt;\n          &lt;TextBox Width=&quot;150&quot; Text=&quot;{Binding Path=Title, Mode=TwoWay}&quot;/&gt;\n        &lt;/HeaderedContentControl&gt;\n        &lt;HeaderedContentControl Header=&quot;Due Date&quot;&gt;\n          &lt;TextBox Width=&quot;150&quot; Text=&quot;{Binding Path=DueDate, StringFormat=d, Mode=TwoWay}&quot;&gt;\n\n          &lt;/TextBox&gt;\n        &lt;/HeaderedContentControl&gt;\n        &lt;HeaderedContentControl Header=&quot;Call Number&quot;&gt;\n          &lt;TextBox Width=&quot;150&quot; Text=&quot;{Binding Path=CallNumber, Mode=TwoWay}&quot;/&gt;\n        &lt;/HeaderedContentControl&gt;\n      &lt;/StackPanel&gt;\n    &lt;/DataTemplate&gt;\n\n    &lt;!--The DataTemplate that is used when the user \n        enters a new Book.--&gt;\n    &lt;DataTemplate DataType=&quot;{x:Type src:Book}&quot;&gt;\n      &lt;StackPanel&gt;\n        &lt;HeaderedContentControl Header=&quot;Title&quot;&gt;\n          &lt;TextBox Width=&quot;150&quot; Text=&quot;{Binding Path=Title, Mode=TwoWay}&quot;/&gt;\n        &lt;/HeaderedContentControl&gt;\n        &lt;HeaderedContentControl Header=&quot;Author&quot;&gt;\n          &lt;TextBox Width=&quot;150&quot; Text=&quot;{Binding Path=Author, Mode=TwoWay}&quot;/&gt;\n        &lt;/HeaderedContentControl&gt;\n        &lt;HeaderedContentControl Header=&quot;Genre&quot;&gt;\n          &lt;TextBox Width=&quot;150&quot; Text=&quot;{Binding Path=Genre, Mode=TwoWay}&quot;/&gt;\n        &lt;/HeaderedContentControl&gt;\n        &lt;HeaderedContentControl Header=&quot;Due Date&quot;&gt;\n          &lt;TextBox Width=&quot;150&quot; Text=&quot;{Binding Path=DueDate, StringFormat=d, Mode=TwoWay}&quot;/&gt;\n        &lt;/HeaderedContentControl&gt;\n        &lt;HeaderedContentControl Header=&quot;Call Number&quot;&gt;\n          &lt;TextBox Width=&quot;150&quot; Text=&quot;{Binding Path=CallNumber, Mode=TwoWay}&quot;/&gt;\n        &lt;/HeaderedContentControl&gt;\n      &lt;/StackPanel&gt;\n    &lt;/DataTemplate&gt;\n\n    &lt;!--The DataTemplate that is used when the user \n        enters a new MusicCD.--&gt;\n    &lt;DataTemplate DataType=&quot;{x:Type src:MusicCD}&quot;&gt;\n      &lt;StackPanel&gt;\n        &lt;HeaderedContentControl Header=&quot;Title&quot;&gt;\n          &lt;TextBox Width=&quot;150&quot; Text=&quot;{Binding Path=Title, Mode=TwoWay}&quot;/&gt;\n        &lt;/HeaderedContentControl&gt;\n        &lt;HeaderedContentControl Header=&quot;Artist&quot;&gt;\n          &lt;TextBox Width=&quot;150&quot; Text=&quot;{Binding Path=Artist, Mode=TwoWay}&quot;/&gt;\n        &lt;/HeaderedContentControl&gt;\n        &lt;HeaderedContentControl Header=&quot;Tracks&quot;&gt;\n          &lt;TextBox Width=&quot;150&quot; Text=&quot;{Binding Path=NumberOfTracks, Mode=TwoWay}&quot;/&gt;\n        &lt;/HeaderedContentControl&gt;\n        &lt;HeaderedContentControl Header=&quot;Due Date&quot;&gt;\n          &lt;TextBox Width=&quot;150&quot; Text=&quot;{Binding Path=DueDate, StringFormat=d, Mode=TwoWay}&quot;/&gt;\n        &lt;/HeaderedContentControl&gt;\n        &lt;HeaderedContentControl Header=&quot;Call Number&quot;&gt;\n          &lt;TextBox Width=&quot;150&quot; Text=&quot;{Binding Path=CallNumber, Mode=TwoWay}&quot;/&gt;\n        &lt;/HeaderedContentControl&gt;\n      &lt;/StackPanel&gt;\n    &lt;/DataTemplate&gt;\n\n    &lt;!--The DataTemplate that is used when the user \n        enters a new MovieDVD.--&gt;\n    &lt;DataTemplate DataType=&quot;{x:Type src:MovieDVD}&quot;&gt;\n      &lt;StackPanel&gt;\n        &lt;HeaderedContentControl Header=&quot;Title&quot;&gt;\n          &lt;TextBox Width=&quot;150&quot; Text=&quot;{Binding Path=Title, Mode=TwoWay}&quot;/&gt;\n        &lt;/HeaderedContentControl&gt;\n        &lt;HeaderedContentControl Header=&quot;Director&quot;&gt;\n          &lt;TextBox Width=&quot;150&quot; Text=&quot;{Binding Path=Director, Mode=TwoWay}&quot;/&gt;\n        &lt;/HeaderedContentControl&gt;\n        &lt;HeaderedContentControl Header=&quot;Length&quot;&gt;\n          &lt;TextBox Width=&quot;150&quot; Text=&quot;{Binding Path=Length, Mode=TwoWay}&quot;/&gt;\n        &lt;/HeaderedContentControl&gt;\n        &lt;HeaderedContentControl Header=&quot;Genre&quot;&gt;\n          &lt;TextBox Width=&quot;150&quot; Text=&quot;{Binding Path=Genre, Mode=TwoWay}&quot;/&gt;\n        &lt;/HeaderedContentControl&gt;\n        &lt;HeaderedContentControl Header=&quot;Due Date&quot;&gt;\n          &lt;TextBox Width=&quot;150&quot; Text=&quot;{Binding Path=DueDate, StringFormat=d, Mode=TwoWay}&quot;/&gt;\n        &lt;/HeaderedContentControl&gt;\n        &lt;HeaderedContentControl Header=&quot;Call Number&quot;&gt;\n          &lt;TextBox Width=&quot;150&quot; Text=&quot;{Binding Path=CallNumber, Mode=TwoWay}&quot;/&gt;\n        &lt;/HeaderedContentControl&gt;\n      &lt;/StackPanel&gt;\n    &lt;/DataTemplate&gt;\n  &lt;/StackPanel.Resources&gt;\n\n  &lt;!--One of the DataTemplates that defined above \n      is used by this ContentControl when the window is created.--&gt;\n  &lt;ContentControl Content=&quot;{Binding}&quot; /&gt;\n\n  &lt;StackPanel Orientation=&quot;Horizontal&quot;&gt;\n    &lt;Button IsDefault=&quot;True&quot; Click=&quot;Submit_Click&quot;&gt;_Submit&lt;/Button&gt;\n    &lt;Button IsCancel=&quot;True&quot;&gt;_Cancel&lt;/Button&gt;\n  &lt;/StackPanel&gt;\n&lt;/StackPanel&gt;\n</code></pre><p> The following example shows the logic for the <code>AddItemWindow</code>.  </p>\n<pre><code class=\"lang-vb\" name=\"IEditableCollectionViewAddItemExample#AddItemLogic\">Imports System.Windows\nImports System.Windows.Controls\n\nPartial Public Class AddItemWindow\n    Inherits Window\n    Public Sub New()\n        InitializeComponent()\n    End Sub\n\n    Private Sub Submit_Click(ByVal sender As Object, ByVal e As RoutedEventArgs)\n        DialogResult = True\n        Close()\n    End Sub\n\n    &#39; Select all text when the TextBox gets focus. \n    Private Sub TextBoxFocus(ByVal sender As Object, ByVal e As RoutedEventArgs)\n        Dim tbx As TextBox = TryCast(sender, TextBox)\n\n        tbx.SelectAll()\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"IEditableCollectionViewAddItemExample#AddItemLogic\">using System.Windows;\nusing System.Windows.Controls;\n\nnamespace IEditableCollectionViewAddItemExample\n{\n    public partial class AddItemWindow : Window\n    {\n        public AddItemWindow()\n        {\n            InitializeComponent();\n        }\n\n        private void Submit_Click(object sender, RoutedEventArgs e)\n        {\n            DialogResult = true;\n            Close();\n        }\n\n        // Select all text when the TextBox gets focus.\n        private void TextBoxFocus(object sender, RoutedEventArgs e)\n        {\n            TextBox tbx = sender as TextBox;\n\n            tbx.SelectAll();\n\n        }\n    }\n}\n</code></pre><p> The following example shows the data types and collection that is used in the previous examples.  </p>\n<pre><code class=\"lang-vb\" name=\"IEditableCollectionViewAddItemExample#Data\">Imports System\nImports System.Collections.ObjectModel\nImports System.ComponentModel\n\n&#39; LibraryItem implements INotifyPropertyChanged so that the \n&#39; application is notified when a property changes. It \n&#39; implements IEditableObject so that pending changes can be discarded. \nPublic Class LibraryItem\n    Implements INotifyPropertyChanged\n    Implements IEditableObject\n    Private Structure ItemData\n        Friend Title As String\n        Friend CallNumber As String\n        Friend DueDate As DateTime\n    End Structure\n\n    Private copyData As ItemData\n    Private currentData As ItemData\n\n    Public Sub New(ByVal title As String, ByVal callNum As String, ByVal dueDate As DateTime)\n        Me.Title = title\n        Me.CallNumber = callNum\n        Me.DueDate = dueDate\n    End Sub\n\n    Public Property Title() As String\n        Get\n            Return currentData.Title\n        End Get\n        Set(ByVal value As String)\n            If currentData.Title &lt;&gt; value Then\n                currentData.Title = value\n                NotifyPropertyChanged(&quot;Title&quot;)\n            End If\n        End Set\n    End Property\n\n    Public Property CallNumber() As String\n        Get\n            Return currentData.CallNumber\n        End Get\n        Set(ByVal value As String)\n            If currentData.CallNumber &lt;&gt; value Then\n                currentData.CallNumber = value\n                NotifyPropertyChanged(&quot;CallNumber&quot;)\n            End If\n        End Set\n    End Property\n\n    Public Property DueDate() As DateTime\n        Get\n            Return currentData.DueDate\n        End Get\n        Set(ByVal value As DateTime)\n            If value &lt;&gt; currentData.DueDate Then\n                currentData.DueDate = value\n                NotifyPropertyChanged(&quot;DueDate&quot;)\n            End If\n        End Set\n    End Property\n\n#Region &quot;INotifyPropertyChanged Members&quot;\n\n    Public Event PropertyChanged As PropertyChangedEventHandler _\n        Implements INotifyPropertyChanged.PropertyChanged\n\n    Protected Sub NotifyPropertyChanged(ByVal info As String)\n        RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(info))\n    End Sub\n\n#End Region\n\n#Region &quot;IEditableObject Members&quot;\n\n    Public Overridable Sub BeginEdit() Implements IEditableObject.BeginEdit\n        copyData = currentData\n    End Sub\n\n    Public Overridable Sub CancelEdit() Implements IEditableObject.CancelEdit\n        currentData = copyData\n\n        NotifyPropertyChanged(&quot;&quot;)\n    End Sub\n\n    Public Overridable Sub EndEdit() Implements IEditableObject.EndEdit\n\n        copyData = New ItemData()\n    End Sub\n\n#End Region\n\nEnd Class\n\n\nPublic Class MusicCD\n    Inherits LibraryItem\n    Private Structure MusicData\n        Friend SongNumber As Integer\n        Friend Artist As String\n\n    End Structure\n\n    Private copyData As MusicData\n    Private currentData As MusicData\n\n    Public Sub New(ByVal title As String, ByVal artist As String,\n                   ByVal songNum As Integer, ByVal callNum As String,\n                   ByVal dueDate As DateTime)\n\n        MyBase.New(title, callNum, dueDate)\n        currentData.SongNumber = songNum\n        currentData.Artist = artist\n    End Sub\n\n    Public Property Artist() As String\n        Get\n            Return currentData.Artist\n        End Get\n        Set(ByVal value As String)\n            If value &lt;&gt; currentData.Artist Then\n                currentData.Artist = value\n                NotifyPropertyChanged(&quot;Artist&quot;)\n            End If\n        End Set\n    End Property\n\n    Public Property NumberOfTracks() As Integer\n        Get\n            Return currentData.SongNumber\n        End Get\n        Set(ByVal value As Integer)\n            If value &lt;&gt; currentData.SongNumber Then\n                currentData.SongNumber = value\n                NotifyPropertyChanged(&quot;NumberOfTracks&quot;)\n            End If\n        End Set\n    End Property\n\n    Public Overloads Overrides Sub BeginEdit()\n        MyBase.BeginEdit()\n        copyData = currentData\n    End Sub\n\n    Public Overloads Overrides Sub CancelEdit()\n        MyBase.CancelEdit()\n        currentData = copyData\n    End Sub\n\n    Public Overloads Overrides Sub EndEdit()\n        MyBase.EndEdit()\n        copyData = New MusicData()\n    End Sub\n\nEnd Class\n\nPublic Class Book\n    Inherits LibraryItem\n    Private Structure BookData\n        Friend Author As String\n        Friend Genre As String\n    End Structure\n\n    Private currentData As BookData\n    Private copyData As BookData\n\n    Public Sub New(ByVal title As String, ByVal author As String, \n                   ByVal genre As String, ByVal callnum As String, \n                   ByVal dueDate As DateTime)\n        MyBase.New(title, callnum, dueDate)\n\n        Me.Author = author\n        Me.Genre = genre\n    End Sub\n\n    Public Property Author() As String\n        Get\n            Return currentData.Author\n        End Get\n        Set(ByVal value As String)\n            If value &lt;&gt; currentData.Author Then\n                currentData.Author = value\n                NotifyPropertyChanged(&quot;Author&quot;)\n            End If\n        End Set\n    End Property\n\n    Public Property Genre() As String\n        Get\n            Return currentData.Genre\n        End Get\n        Set(ByVal value As String)\n            If value &lt;&gt; currentData.Genre Then\n                currentData.Genre = value\n                NotifyPropertyChanged(&quot;Genre&quot;)\n            End If\n        End Set\n    End Property\n\n    Public Overloads Overrides Sub BeginEdit()\n        MyBase.BeginEdit()\n        copyData = currentData\n    End Sub\n\n    Public Overloads Overrides Sub CancelEdit()\n        MyBase.CancelEdit()\n        currentData = copyData\n    End Sub\n\n    Public Overloads Overrides Sub EndEdit()\n        MyBase.EndEdit()\n        copyData = New BookData()\n    End Sub\n\nEnd Class\n\nPublic Class MovieDVD\n    Inherits LibraryItem\n    Private Structure MovieData\n        Friend Length As TimeSpan\n        Friend Director As String\n        Friend Genre As String\n    End Structure\n\n    Private currentData As MovieData\n    Private copyData As MovieData\n\n\n    Public Sub New(ByVal title As String, ByVal director As String,\n                   ByVal genre As String, ByVal length As TimeSpan,\n                   ByVal callnum As String, ByVal dueDate As DateTime)\n\n        MyBase.New(title, callnum, dueDate)\n        Me.Director = director\n        Me.Length = length\n        Me.Genre = genre\n    End Sub\n\n    Public Property Length() As TimeSpan\n        Get\n            Return currentData.Length\n        End Get\n        Set(ByVal value As TimeSpan)\n            If value &lt;&gt; currentData.Length Then\n                currentData.Length = value\n                NotifyPropertyChanged(&quot;Length&quot;)\n            End If\n        End Set\n    End Property\n\n    Public Property Director() As String\n        Get\n            Return currentData.Director\n        End Get\n        Set(ByVal value As String)\n            If value &lt;&gt; currentData.Director Then\n                currentData.Director = value\n                NotifyPropertyChanged(&quot;Director&quot;)\n            End If\n        End Set\n    End Property\n\n    Public Property Genre() As String\n        Get\n            Return currentData.Genre\n        End Get\n        Set(ByVal value As String)\n            If value &lt;&gt; currentData.Genre Then\n                currentData.Genre = value\n                NotifyPropertyChanged(&quot;Genre&quot;)\n            End If\n        End Set\n    End Property\n\n    Public Overloads Overrides Sub BeginEdit()\n        MyBase.BeginEdit()\n        copyData = currentData\n    End Sub\n\n    Public Overloads Overrides Sub CancelEdit()\n        MyBase.CancelEdit()\n        currentData = copyData\n    End Sub\n\n    Public Overloads Overrides Sub EndEdit()\n        MyBase.EndEdit()\n        copyData = New MovieData()\n    End Sub\n\nEnd Class\n\nPublic Class LibraryCatalog\n    Inherits ObservableCollection(Of LibraryItem)\n\n    Public Sub New()\n        Add(New MusicCD(&quot;A Programmers Plight&quot;, &quot;Jon Orton&quot;, 12,\n                        &quot;CD.OrtPro&quot;, New DateTime(2010, 3, 24)))\n        Add(New Book(&quot;Cooking with Thyme&quot;, &quot;Eliot J. Graff&quot;,\n                        &quot;Home Economics&quot;, &quot;HE.GraThy&quot;, New DateTime(2010, 2, 26)))\n        Add(New MovieDVD(&quot;Terror of the Testers&quot;, &quot;Molly Dempsey&quot;, &quot;Horror&quot;,\n                         New TimeSpan(1, 27, 19), &quot;DVD.DemTer&quot;, New DateTime(2010, 2, 1)))\n        Add(New MusicCD(&quot;The Best of Jim Hance&quot;, &quot;Jim Hance&quot;, 15,\n                        &quot;CD.HanBes&quot;, New DateTime(2010, 1, 31)))\n        Add(New Book(&quot;Victor and the VB Vehicle&quot;, &quot;Tommy Hortono&quot;,\n                        &quot;YA Fiction&quot;, &quot;YA.HorVic&quot;, New DateTime(2010, 3, 1)))\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"IEditableCollectionViewAddItemExample#Data\">using System;\nusing System.Collections.ObjectModel;\nusing System.ComponentModel;\n\nnamespace IEditableCollectionViewAddItemExample\n{\n    // LibraryItem implements INotifyPropertyChanged so that the \n    // application is notified when a property changes.  It \n    // implements IEditableObject so that pending changes can be discarded.\n    public class LibraryItem : INotifyPropertyChanged, IEditableObject\n    {\n        struct ItemData\n        {\n            internal string Title;\n            internal string CallNumber;\n            internal DateTime DueDate;\n        }\n\n        ItemData copyData;\n        ItemData currentData;\n\n        public LibraryItem(string title, string callNum, DateTime dueDate)\n        {\n            Title = title;\n            CallNumber = callNum;\n            DueDate = dueDate;\n        }\n\n        public override string ToString()\n        {\n            return String.Format(&quot;{0}, {1:c}, {2:D}&quot;, Title, CallNumber, DueDate);\n        }\n\n        public string Title\n        {\n            get { return currentData.Title; }\n            set\n            {\n                if (currentData.Title != value)\n                {\n                    currentData.Title = value;\n                    NotifyPropertyChanged(&quot;Title&quot;);\n                }\n            }\n        }\n\n        public string CallNumber\n        {\n            get { return currentData.CallNumber; }\n            set\n            {\n                if (currentData.CallNumber != value)\n                {\n                    currentData.CallNumber = value;\n                    NotifyPropertyChanged(&quot;CallNumber&quot;);\n                }\n            }\n        }\n\n        public DateTime DueDate\n        {\n            get { return currentData.DueDate; }\n            set\n            {\n                if (value != currentData.DueDate)\n                {\n                    currentData.DueDate = value;\n                    NotifyPropertyChanged(&quot;DueDate&quot;);\n                }\n            }\n        }\n\n        #region INotifyPropertyChanged Members\n\n        public event PropertyChangedEventHandler PropertyChanged;\n\n        protected void NotifyPropertyChanged(String info)\n        {\n            if (PropertyChanged != null)\n            {\n                PropertyChanged(this, new PropertyChangedEventArgs(info));\n            }\n        }\n\n        #endregion\n\n        #region IEditableObject Members\n\n        public virtual void BeginEdit()\n        {\n            copyData = currentData;\n        }\n\n        public virtual void CancelEdit()\n        {\n            currentData = copyData;\n            NotifyPropertyChanged(&quot;&quot;);\n\n        }\n\n        public virtual void EndEdit()\n        {\n            copyData = new ItemData();\n\n        }\n\n        #endregion\n\n    }\n\n\n    public class MusicCD : LibraryItem\n    {\n        private struct MusicData\n        {\n            internal int SongNumber;\n            internal string Artist;\n\n        }\n\n        MusicData copyData;\n        MusicData currentData;\n\n        public MusicCD(string title, string artist, int songNum, string callNum, DateTime dueDate)\n            : base(title, callNum, dueDate)\n        {\n            currentData.SongNumber = songNum;\n            currentData.Artist = artist;\n        }\n\n        public string Artist\n        {\n            get { return currentData.Artist; }\n            set\n            {\n                if (value != currentData.Artist)\n                {\n                    currentData.Artist = value;\n                    NotifyPropertyChanged(&quot;Artist&quot;);\n                }\n            }\n        }\n\n        public int NumberOfTracks\n        {\n            get { return currentData.SongNumber; }\n            set\n            {\n                if (value != currentData.SongNumber)\n                {\n                    currentData.SongNumber = value;\n                    NotifyPropertyChanged(&quot;NumberOfTracks&quot;);\n                }\n            }\n        }\n\n        public override void BeginEdit()\n        {\n            base.BeginEdit();\n            copyData = currentData;\n        }\n\n        public override void CancelEdit()\n        {\n            base.CancelEdit();\n            currentData = copyData;\n        }\n\n        public override void EndEdit()\n        {\n            base.EndEdit();\n            copyData = new MusicData();\n        }\n\n        public override string ToString()\n        {\n            return string.Format(\n                &quot;Album: {0}\\nArtist: {1}\\nTracks: {2}\\nDue Date: {3:d}\\nCall Number: {4}&quot;,\n                this.Title, this.Artist, this.NumberOfTracks, this.DueDate, this.CallNumber);\n        }\n    }\n\n    public class Book : LibraryItem\n    {\n        private struct BookData\n        {\n            internal string Author;\n            internal string Genre;\n        }\n\n        BookData currentData;\n        BookData copyData;\n\n        public Book(string title, string author, string genre, string callnum, DateTime dueDate)\n            : base (title, callnum, dueDate)\n        {\n            this.Author = author;\n            this.Genre = genre;\n        }\n\n        public string Author\n        {\n            get { return currentData.Author; }\n            set\n            {\n                if (value != currentData.Author)\n                {\n                    currentData.Author = value;\n                    NotifyPropertyChanged(&quot;Author&quot;);\n                }\n            }\n        }\n\n        public string Genre\n        {\n            get { return currentData.Genre; }\n            set\n            {\n                if (value != currentData.Genre)\n                {\n                    currentData.Genre = value;\n                    NotifyPropertyChanged(&quot;Genre&quot;);\n                }\n            }\n        }\n\n        public override void BeginEdit()\n        {\n            base.BeginEdit();\n            copyData = currentData;\n        }\n\n        public override void CancelEdit()\n        {\n            base.CancelEdit();\n            currentData = copyData;\n        }\n\n        public override void EndEdit()\n        {\n            base.EndEdit();\n            copyData = new BookData();\n        }\n\n        public override string ToString()\n        {\n            return String.Format(\n                &quot;Title: {0}\\nAuthor: {1}\\nGenre: {2}\\nDue Date: {3:d}\\nCall Number: {4}&quot;,\n                this.Title, this.Author, this.Genre, this.DueDate, this.CallNumber);\n        }\n    }\n\n    public class MovieDVD : LibraryItem\n    {\n        private struct MovieData\n        {\n            internal TimeSpan Length;\n            internal string Director;\n            internal string Genre;\n        }\n\n        private MovieData currentData;\n        private MovieData copyData;\n\n\n        public MovieDVD(string title, string director, string genre, TimeSpan length, string callnum, DateTime dueDate)\n            : base(title, callnum, dueDate)\n        {\n            this.Director = director;\n            this.Length = length;\n            this.Genre = genre;\n        }\n\n        public TimeSpan Length\n        {\n            get { return currentData.Length; }\n            set\n            {\n                if (value != currentData.Length)\n                {\n                    currentData.Length = value;\n                    NotifyPropertyChanged(&quot;Length&quot;);\n                }\n            }\n        }\n\n        public string Director\n        {\n            get { return currentData.Director; }\n            set\n            {\n                if (value != currentData.Director)\n                {\n                    currentData.Director = value;\n                    NotifyPropertyChanged(&quot;Director&quot;);\n                }\n            }\n        }\n\n        public string Genre\n        {\n            get { return currentData.Genre; }\n            set\n            {\n                if (value != currentData.Genre)\n                {\n                    currentData.Genre = value;\n                    NotifyPropertyChanged(&quot;Genre&quot;);\n                }\n            }\n        }\n\n        public override void BeginEdit()\n        {\n            base.BeginEdit();\n            copyData = currentData;\n        }\n\n        public override void CancelEdit()\n        {\n            base.CancelEdit();\n            currentData = copyData;\n        }\n\n        public override void EndEdit()\n        {\n            base.EndEdit();\n            copyData = new MovieData();\n        }\n\n        public override string  ToString()\n        {\n            return String.Format(&quot;Title: {0}\\nDirector: {1}\\nGenre: {2}\\nLength: {3}\\nDue Date: {4:d}\\nCall Number: {5}&quot;,\n                this.Title, this.Director, this.Genre, this.Length, this.DueDate, this.CallNumber);\n        }\n    }\n\n    public class LibraryCatalog : ObservableCollection&lt;LibraryItem&gt;\n    {\n        public LibraryCatalog()\n        {\n            Add(new MusicCD(&quot;A Programmers Plight&quot;, &quot;Jon Orton&quot;, \n                12, &quot;CD.OrtPro&quot;, new DateTime(2010, 3, 24)));\n    \n            Add(new Book(&quot;Cooking with Thyme&quot;, &quot;Eliot J. Graff&quot;,\n                &quot;Home Economics&quot;, &quot;HE.GraThy&quot;, new DateTime(2010, 2, 26)));\n            \n            Add(new MovieDVD(&quot;Terror of the Testers&quot;, &quot;Molly Dempsey&quot;, \n                &quot;Horror&quot;, new TimeSpan(1, 27, 19), &quot;DVD.DemTer&quot;,\n                new DateTime(2010, 2, 1)));\n            \n            Add(new MusicCD(&quot;The Best of Jim Hance&quot;, &quot;Jim Hance&quot;, \n                15, &quot;CD.HanBes&quot;, new DateTime(2010, 1, 31)));\n            \n            Add(new Book(&quot;Victor and the VB Vehicle&quot;, &quot;Tommy Hortono&quot;, \n                &quot;YA Fiction&quot;, &quot;YA.HorVic&quot;, new DateTime(2010, 3, 1)));\n\n        }\n    }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The IEditableCollectionViewAddNewItem interface enables application developers to specify what type of object to add to a collection. This interface extends <a class=\"xref\" href=\"system.componentmodel.ieditablecollectionview\" data-linktype=\"relative-path\">IEditableCollectionView</a>, so you can add, edit, and remove items in a collection. IEditableCollectionViewAddNewItem adds the <a class=\"xref\" href=\"system.componentmodel.ieditablecollectionviewaddnewitem#System_ComponentModel_IEditableCollectionViewAddNewItem_AddNewItem_\" data-linktype=\"relative-path\">AddNewItem</a> method, which takes an object that is added to the collection. This method is useful when the collection and objects that you want to add have one or more of the following characteristics:  </p>\n<ul>\n<li><p>The objects in the <a class=\"xref\" href=\"system.windows.data.collectionview\" data-linktype=\"relative-path\">CollectionView</a> are different types.  </p>\n</li>\n<li><p>The objects do not have a default constructor.  </p>\n</li>\n<li><p>The object already exists.  </p>\n</li>\n<li><p>You want to add a <code>null</code> object to the collection.</p>\n</li>\n</ul>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_IEditableCollectionViewAddNewItem_CanAddNewItem\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CanAddNewItem</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether a specified object can be added to the collection.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool CanAddNewItem { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if a specified object can be added to the collection; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If the CanAddNewItem property is <code>true</code>, you can specify an object to add to the collection by calling the <a class=\"xref\" href=\"system.componentmodel.ieditablecollectionviewaddnewitem#System_ComponentModel_IEditableCollectionViewAddNewItem_AddNewItem_\" data-linktype=\"relative-path\">AddNewItem</a> method. CanAddNewItem is <code>false</code> if items cannot be added to the collection by using <a class=\"xref\" href=\"system.componentmodel.ieditablecollectionviewaddnewitem#System_ComponentModel_IEditableCollectionViewAddNewItem_AddNewItem_\" data-linktype=\"relative-path\">AddNewItem</a>. If CanAddNewItem is <code>false</code>, you may still be able to add an object by using the <a class=\"xref\" href=\"system.componentmodel.ieditablecollectionview#System_ComponentModel_IEditableCollectionView_AddNew_\" data-linktype=\"relative-path\">AddNew</a> method. For example, you can add objects to an ADO.NET source by using <a class=\"xref\" href=\"system.componentmodel.ieditablecollectionview#System_ComponentModel_IEditableCollectionView_AddNew_\" data-linktype=\"relative-path\">AddNew</a>, but not by using <a class=\"xref\" href=\"system.componentmodel.ieditablecollectionviewaddnewitem#System_ComponentModel_IEditableCollectionViewAddNewItem_AddNewItem_\" data-linktype=\"relative-path\">AddNewItem</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_IEditableCollectionViewAddNewItem_AddNewItem_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AddNewItem(Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Adds the specified object to the collection.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public object AddNewItem (object newItem);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>newItem</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object to add to the collection.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The object that is added to the collection.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When you calling the AddNewItem method, it begins an add transaction. You should call the <a class=\"xref\" href=\"system.componentmodel.ieditablecollectionview#System_ComponentModel_IEditableCollectionView_CommitNew_\" data-linktype=\"relative-path\">CommitNew</a> or <a class=\"xref\" href=\"system.componentmodel.ieditablecollectionview#System_ComponentModel_IEditableCollectionView_CancelNew_\" data-linktype=\"relative-path\">CancelNew</a> methods to end the add transaction.  </p>\n<p> A new item always appears in the collection view. Any filtering, sorting, or grouping that is applied to the view is applied to the new item when <a class=\"xref\" href=\"system.componentmodel.ieditablecollectionview#System_ComponentModel_IEditableCollectionView_CommitNew_\" data-linktype=\"relative-path\">CommitNew</a> is called.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.IEditableCollectionViewAddNewItem.yml\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.IEditableCollectionViewAddNewItem\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.IEditableCollectionViewAddNewItem.AddNewItem\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.IEditableCollectionViewAddNewItem.CanAddNewItem\">\r\n<meta name=\"APILocation\" content=\"WindowsBase.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"e9b67627-fc7e-3c05-feca-20e32a032e88\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines methods and properties that a  implements to enable specifying adding items of a specific type.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.componentmodel/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.ComponentModel.IEditableCollectionViewAddNewItem\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.IEditableCollectionViewAddNewItem.yml","open_to_public_contributors":false,"api_name":["System.ComponentModel.IEditableCollectionViewAddNewItem","System.ComponentModel.IEditableCollectionViewAddNewItem.AddNewItem","System.ComponentModel.IEditableCollectionViewAddNewItem.CanAddNewItem"],"api_location":["WindowsBase.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.ComponentModel.IEditableCollectionViewAddNewItem","System::ComponentModel::IEditableCollectionViewAddNewItem","System.ComponentModel.IEditableCollectionViewAddNewItem.AddNewItem","System::ComponentModel::IEditableCollectionViewAddNewItem::AddNewItem","System.ComponentModel.IEditableCollectionViewAddNewItem.CanAddNewItem","System::ComponentModel::IEditableCollectionViewAddNewItem::CanAddNewItem"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"e9b67627-fc7e-3c05-feca-20e32a032e88","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/IEditableCollectionViewAddNewItem.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IEditableCollectionViewAddNewItem interface | Microsoft Docs","_op_ogTitle":"IEditableCollectionViewAddNewItem interface","description":"Defines methods and properties that a  implements to enable specifying adding items of a specific type.\n","toc_asset_id":"api/_splitted/System.ComponentModel/toc.json","toc_rel":"_splitted/System.ComponentModel/toc.json","source_url":"","ms.assetid":"System.ComponentModel.IEditableCollectionViewAddNewItem","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.ieditablecollectionviewaddnewitem","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.ieditablecollectionviewaddnewitem","fileRelativePath":"api/System.ComponentModel.IEditableCollectionViewAddNewItem.html"},"themesRelativePathToOutputRoot":"_themes/"}