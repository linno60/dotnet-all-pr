{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">BackgroundWorker</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Executes an operation on a separate thread.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.ComponentModel.DefaultEvent(&quot;DoWork&quot;)]\npublic class BackgroundWorker : System.ComponentModel.Component</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.component\" data-linktype=\"relative-path\">Component</a></span></div><span class=\"lang-csharp\">BackgroundWorker</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_CanRaiseEvents\" data-linktype=\"relative-path\">CanRaiseEvents</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Container\" data-linktype=\"relative-path\">Container</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_DesignMode\" data-linktype=\"relative-path\">DesignMode</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Dispose\" data-linktype=\"relative-path\">Dispose()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Dispose_System_Boolean_\" data-linktype=\"relative-path\">Dispose(Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Disposed\" data-linktype=\"relative-path\">Disposed</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Events\" data-linktype=\"relative-path\">Events</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_GetService_System_Type_\" data-linktype=\"relative-path\">GetService(Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Site\" data-linktype=\"relative-path\">Site</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates the basics of the BackgroundWorker class for executing a time-consuming operation asynchronously. The following illustration shows an example of the output.  </p>\n<p> <img src=\"../add/media/backgroundworker-simple.png\" alt=\"BackgroundWorker simple example\" title=\"BackgroundWorker simple example\" data-linktype=\"relative-path\">  </p>\n<p> To try this code, create a Windows Forms application. Add a <a class=\"xref\" href=\"system.windows.forms.label\" data-linktype=\"relative-path\">Label</a> control named <code>resultLabel</code> and add two <a class=\"xref\" href=\"system.windows.forms.button\" data-linktype=\"relative-path\">Button</a> controls named <code>startAsyncButton</code> and <code>cancelAsyncButton</code>. Create <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Click\" data-linktype=\"relative-path\">Click</a> event handlers for both buttons. From the <strong>Components</strong> tab of the Toolbox, add a BackgroundWorker component named <code>backgroundWorker1</code>. Create <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_DoWork\" data-linktype=\"relative-path\">DoWork</a>, <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_ProgressChanged\" data-linktype=\"relative-path\">ProgressChanged</a>, and <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_RunWorkerCompleted\" data-linktype=\"relative-path\">RunWorkerCompleted</a> event handlers for the BackgroundWorker. In the code for the form, replace the existing code with the following code.  </p>\n<pre><code class=\"lang-cs\" name=\"System.ComponentModel.BackgroundWorkerSimple#1\">using System;\nusing System.ComponentModel;\nusing System.Windows.Forms;\n\nnamespace BackgroundWorkerSimple\n{\n    public partial class Form1 : Form\n    {\n        public Form1()\n        {\n            InitializeComponent();\n            backgroundWorker1.WorkerReportsProgress = true;\n            backgroundWorker1.WorkerSupportsCancellation = true;\n        }\n\n        private void startAsyncButton_Click(object sender, EventArgs e)\n        {\n            if (backgroundWorker1.IsBusy != true)\n            {\n                // Start the asynchronous operation.\n                backgroundWorker1.RunWorkerAsync();\n            }\n        }\n\n        private void cancelAsyncButton_Click(object sender, EventArgs e)\n        {\n            if (backgroundWorker1.WorkerSupportsCancellation == true)\n            {\n                // Cancel the asynchronous operation.\n                backgroundWorker1.CancelAsync();\n            }\n        }\n\n        // This event handler is where the time-consuming work is done.\n        private void backgroundWorker1_DoWork(object sender, DoWorkEventArgs e)\n        {\n            BackgroundWorker worker = sender as BackgroundWorker;\n\n            for (int i = 1; i &lt;= 10; i++)\n            {\n                if (worker.CancellationPending == true)\n                {\n                    e.Cancel = true;\n                    break;\n                }\n                else\n                {\n                    // Perform a time consuming operation and report progress.\n                    System.Threading.Thread.Sleep(500);\n                    worker.ReportProgress(i * 10);\n                }\n            }\n        }\n\n        // This event handler updates the progress.\n        private void backgroundWorker1_ProgressChanged(object sender, ProgressChangedEventArgs e)\n        {\n            resultLabel.Text = (e.ProgressPercentage.ToString() + &quot;%&quot;);\n        }\n\n        // This event handler deals with the results of the background operation.\n        private void backgroundWorker1_RunWorkerCompleted(object sender, RunWorkerCompletedEventArgs e)\n        {\n            if (e.Cancelled == true)\n            {\n                resultLabel.Text = &quot;Canceled!&quot;;\n            }\n            else if (e.Error != null)\n            {\n                resultLabel.Text = &quot;Error: &quot; + e.Error.Message;\n            }\n            else\n            {\n                resultLabel.Text = &quot;Done!&quot;;\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.ComponentModel.BackgroundWorkerSimple#1\">Imports System.ComponentModel\n\nPublic Class Form1\n\n    Public Sub New()\n        InitializeComponent()\n        backgroundWorker1.WorkerReportsProgress = True\n        backgroundWorker1.WorkerSupportsCancellation = True\n    End Sub\n\n    Private Sub startAsyncButton_Click(ByVal sender As System.Object, _\n    ByVal e As System.EventArgs) Handles startAsyncButton.Click\n        If backgroundWorker1.IsBusy &lt;&gt; True Then\n            &#39; Start the asynchronous operation.\n            backgroundWorker1.RunWorkerAsync()\n        End If\n    End Sub\n\n    Private Sub cancelAsyncButton_Click(ByVal sender As System.Object, _\n    ByVal e As System.EventArgs) Handles cancelAsyncButton.Click\n        If backgroundWorker1.WorkerSupportsCancellation = True Then\n            &#39; Cancel the asynchronous operation.\n            backgroundWorker1.CancelAsync()\n        End If\n    End Sub\n\n    &#39; This event handler is where the time-consuming work is done.\n    Private Sub backgroundWorker1_DoWork(ByVal sender As System.Object, _\n    ByVal e As DoWorkEventArgs) Handles backgroundWorker1.DoWork\n        Dim worker As BackgroundWorker = CType(sender, BackgroundWorker)\n        Dim i As Integer\n\n        For i = 1 To 10\n            If (worker.CancellationPending = True) Then\n                e.Cancel = True\n                Exit For\n            Else\n                &#39; Perform a time consuming operation and report progress.\n                System.Threading.Thread.Sleep(500)\n                worker.ReportProgress(i * 10)\n            End If\n        Next\n    End Sub\n\n    &#39; This event handler updates the progress.\n    Private Sub backgroundWorker1_ProgressChanged(ByVal sender As System.Object, _\n    ByVal e As ProgressChangedEventArgs) Handles backgroundWorker1.ProgressChanged\n        resultLabel.Text = (e.ProgressPercentage.ToString() + &quot;%&quot;)\n    End Sub\n\n    &#39; This event handler deals with the results of the background operation.\n    Private Sub backgroundWorker1_RunWorkerCompleted(ByVal sender As System.Object, _\n    ByVal e As RunWorkerCompletedEventArgs) Handles backgroundWorker1.RunWorkerCompleted\n        If e.Cancelled = True Then\n            resultLabel.Text = &quot;Canceled!&quot;\n        ElseIf e.Error IsNot Nothing Then\n            resultLabel.Text = &quot;Error: &quot; &amp; e.Error.Message\n        Else\n            resultLabel.Text = &quot;Done!&quot;\n        End If\n    End Sub\nEnd Class\n</code></pre><p> The following code example demonstrates the use of the BackgroundWorker class for executing a time-consuming operation asynchronously. The following illustration shows an example of the output.  </p>\n<p> <img src=\"../add/media/backgroundworker-fibonacci.png\" alt=\"BackgroundWorker Fibonacci example\" title=\"BackgroundWorker Fibonacci example\" data-linktype=\"relative-path\">  </p>\n<p> The operation computes the selected Fibonacci number, reports progress updates as the calculation proceeds, and permits a pending calculation to be canceled.  </p>\n<pre><code class=\"lang-vb\" name=\"System.ComponentModel.BackgroundWorker#1\">Imports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Drawing\nImports System.Threading\nImports System.Windows.Forms\n\nPublic Class FibonacciForm\n    Inherits System.Windows.Forms.Form\n\n    Private numberToCompute As Integer = 0\n    Private highestPercentageReached As Integer = 0\n\n    Private numericUpDown1 As System.Windows.Forms.NumericUpDown\n    Private WithEvents startAsyncButton As System.Windows.Forms.Button\n    Private WithEvents cancelAsyncButton As System.Windows.Forms.Button\n    Private progressBar1 As System.Windows.Forms.ProgressBar\n    Private resultLabel As System.Windows.Forms.Label\n    Private WithEvents backgroundWorker1 As System.ComponentModel.BackgroundWorker\n\n\n    Public Sub New()\n        InitializeComponent()\n    End Sub &#39;New\n\n    Private Sub startAsyncButton_Click(ByVal sender As System.Object, _\n    ByVal e As System.EventArgs) _\n    Handles startAsyncButton.Click\n\n        &#39; Reset the text in the result label.\n        resultLabel.Text = [String].Empty\n\n        &#39; Disable the UpDown control until \n        &#39; the asynchronous operation is done.\n        Me.numericUpDown1.Enabled = False\n\n        &#39; Disable the Start button until \n        &#39; the asynchronous operation is done.\n        Me.startAsyncButton.Enabled = False\n\n        &#39; Enable the Cancel button while \n        &#39; the asynchronous operation runs.\n        Me.cancelAsyncButton.Enabled = True\n\n        &#39; Get the value from the UpDown control.\n        numberToCompute = CInt(numericUpDown1.Value)\n\n        &#39; Reset the variable for percentage tracking.\n        highestPercentageReached = 0\n\n\n        &#39; Start the asynchronous operation.\n        backgroundWorker1.RunWorkerAsync(numberToCompute)\n    End Sub \n\n    Private Sub cancelAsyncButton_Click( _\n    ByVal sender As System.Object, _\n    ByVal e As System.EventArgs) _\n    Handles cancelAsyncButton.Click\n        \n        &#39; Cancel the asynchronous operation.\n        Me.backgroundWorker1.CancelAsync()\n\n        &#39; Disable the Cancel button.\n        cancelAsyncButton.Enabled = False\n        \n    End Sub &#39;cancelAsyncButton_Click\n\n    &#39; This event handler is where the actual work is done.\n    Private Sub backgroundWorker1_DoWork( _\n    ByVal sender As Object, _\n    ByVal e As DoWorkEventArgs) _\n    Handles backgroundWorker1.DoWork\n\n        &#39; Get the BackgroundWorker object that raised this event.\n        Dim worker As BackgroundWorker = _\n            CType(sender, BackgroundWorker)\n\n        &#39; Assign the result of the computation\n        &#39; to the Result property of the DoWorkEventArgs\n        &#39; object. This is will be available to the \n        &#39; RunWorkerCompleted eventhandler.\n        e.Result = ComputeFibonacci(e.Argument, worker, e)\n    End Sub &#39;backgroundWorker1_DoWork\n\n    &#39; This event handler deals with the results of the\n    &#39; background operation.\n    Private Sub backgroundWorker1_RunWorkerCompleted( _\n    ByVal sender As Object, ByVal e As RunWorkerCompletedEventArgs) _\n    Handles backgroundWorker1.RunWorkerCompleted\n\n        &#39; First, handle the case where an exception was thrown.\n        If (e.Error IsNot Nothing) Then\n            MessageBox.Show(e.Error.Message)\n        ElseIf e.Cancelled Then\n            &#39; Next, handle the case where the user canceled the \n            &#39; operation.\n            &#39; Note that due to a race condition in \n            &#39; the DoWork event handler, the Cancelled\n            &#39; flag may not have been set, even though\n            &#39; CancelAsync was called.\n            resultLabel.Text = &quot;Canceled&quot;\n        Else\n            &#39; Finally, handle the case where the operation succeeded.\n            resultLabel.Text = e.Result.ToString()\n        End If\n\n        &#39; Enable the UpDown control.\n        Me.numericUpDown1.Enabled = True\n\n        &#39; Enable the Start button.\n        startAsyncButton.Enabled = True\n\n        &#39; Disable the Cancel button.\n        cancelAsyncButton.Enabled = False\n    End Sub &#39;backgroundWorker1_RunWorkerCompleted\n\n    &#39; This event handler updates the progress bar.\n    Private Sub backgroundWorker1_ProgressChanged( _\n    ByVal sender As Object, ByVal e As ProgressChangedEventArgs) _\n    Handles backgroundWorker1.ProgressChanged\n\n        Me.progressBar1.Value = e.ProgressPercentage\n\n    End Sub\n\n    &#39; This is the method that does the actual work. For this\n    &#39; example, it computes a Fibonacci number and\n    &#39; reports progress as it does its work.\n    Function ComputeFibonacci( _\n        ByVal n As Integer, _\n        ByVal worker As BackgroundWorker, _\n        ByVal e As DoWorkEventArgs) As Long\n\n        &#39; The parameter n must be &gt;= 0 and &lt;= 91.\n        &#39; Fib(n), with n &gt; 91, overflows a long.\n        If n &lt; 0 OrElse n &gt; 91 Then\n            Throw New ArgumentException( _\n                &quot;value must be &gt;= 0 and &lt;= 91&quot;, &quot;n&quot;)\n        End If\n\n        Dim result As Long = 0\n\n        &#39; Abort the operation if the user has canceled.\n        &#39; Note that a call to CancelAsync may have set \n        &#39; CancellationPending to true just after the\n        &#39; last invocation of this method exits, so this \n        &#39; code will not have the opportunity to set the \n        &#39; DoWorkEventArgs.Cancel flag to true. This means\n        &#39; that RunWorkerCompletedEventArgs.Cancelled will\n        &#39; not be set to true in your RunWorkerCompleted\n        &#39; event handler. This is a race condition.\n        If worker.CancellationPending Then\n            e.Cancel = True\n        Else\n            If n &lt; 2 Then\n                result = 1\n            Else\n                result = ComputeFibonacci(n - 1, worker, e) + _\n                         ComputeFibonacci(n - 2, worker, e)\n            End If\n\n            &#39; Report progress as a percentage of the total task.\n            Dim percentComplete As Integer = _\n                CSng(n) / CSng(numberToCompute) * 100\n            If percentComplete &gt; highestPercentageReached Then\n                highestPercentageReached = percentComplete\n                worker.ReportProgress(percentComplete)\n            End If\n\n        End If\n\n        Return result\n\n    End Function\n\n\n    Private Sub InitializeComponent()\n        Me.numericUpDown1 = New System.Windows.Forms.NumericUpDown\n        Me.startAsyncButton = New System.Windows.Forms.Button\n        Me.cancelAsyncButton = New System.Windows.Forms.Button\n        Me.resultLabel = New System.Windows.Forms.Label\n        Me.progressBar1 = New System.Windows.Forms.ProgressBar\n        Me.backgroundWorker1 = New System.ComponentModel.BackgroundWorker\n        CType(Me.numericUpDown1, System.ComponentModel.ISupportInitialize).BeginInit()\n        Me.SuspendLayout()\n        &#39;\n        &#39;numericUpDown1\n        &#39;\n        Me.numericUpDown1.Location = New System.Drawing.Point(16, 16)\n        Me.numericUpDown1.Maximum = New Decimal(New Integer() {91, 0, 0, 0})\n        Me.numericUpDown1.Minimum = New Decimal(New Integer() {1, 0, 0, 0})\n        Me.numericUpDown1.Name = &quot;numericUpDown1&quot;\n        Me.numericUpDown1.Size = New System.Drawing.Size(80, 20)\n        Me.numericUpDown1.TabIndex = 0\n        Me.numericUpDown1.Value = New Decimal(New Integer() {1, 0, 0, 0})\n        &#39;\n        &#39;startAsyncButton\n        &#39;\n        Me.startAsyncButton.Location = New System.Drawing.Point(16, 72)\n        Me.startAsyncButton.Name = &quot;startAsyncButton&quot;\n        Me.startAsyncButton.Size = New System.Drawing.Size(120, 23)\n        Me.startAsyncButton.TabIndex = 1\n        Me.startAsyncButton.Text = &quot;Start Async&quot;\n        &#39;\n        &#39;cancelAsyncButton\n        &#39;\n        Me.cancelAsyncButton.Enabled = False\n        Me.cancelAsyncButton.Location = New System.Drawing.Point(153, 72)\n        Me.cancelAsyncButton.Name = &quot;cancelAsyncButton&quot;\n        Me.cancelAsyncButton.Size = New System.Drawing.Size(119, 23)\n        Me.cancelAsyncButton.TabIndex = 2\n        Me.cancelAsyncButton.Text = &quot;Cancel Async&quot;\n        &#39;\n        &#39;resultLabel\n        &#39;\n        Me.resultLabel.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D\n        Me.resultLabel.Location = New System.Drawing.Point(112, 16)\n        Me.resultLabel.Name = &quot;resultLabel&quot;\n        Me.resultLabel.Size = New System.Drawing.Size(160, 23)\n        Me.resultLabel.TabIndex = 3\n        Me.resultLabel.Text = &quot;(no result)&quot;\n        Me.resultLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter\n        &#39;\n        &#39;progressBar1\n        &#39;\n        Me.progressBar1.Location = New System.Drawing.Point(18, 48)\n        Me.progressBar1.Name = &quot;progressBar1&quot;\n        Me.progressBar1.Size = New System.Drawing.Size(256, 8)\n        Me.progressBar1.TabIndex = 4\n        &#39;\n        &#39;backgroundWorker1\n        &#39;\n        Me.backgroundWorker1.WorkerReportsProgress = True\n        Me.backgroundWorker1.WorkerSupportsCancellation = True\n        &#39;\n        &#39;FibonacciForm\n        &#39;\n        Me.ClientSize = New System.Drawing.Size(292, 118)\n        Me.Controls.Add(Me.progressBar1)\n        Me.Controls.Add(Me.resultLabel)\n        Me.Controls.Add(Me.cancelAsyncButton)\n        Me.Controls.Add(Me.startAsyncButton)\n        Me.Controls.Add(Me.numericUpDown1)\n        Me.Name = &quot;FibonacciForm&quot;\n        Me.Text = &quot;Fibonacci Calculator&quot;\n        CType(Me.numericUpDown1, System.ComponentModel.ISupportInitialize).EndInit()\n        Me.ResumeLayout(False)\n\n    End Sub &#39;InitializeComponent\n\n    &lt;STAThread()&gt; _\n    Shared Sub Main()\n        Application.Run(New FibonacciForm)\n    End Sub &#39;Main\nEnd Class &#39;FibonacciForm \n</code></pre><pre><code class=\"lang-cs\" name=\"System.ComponentModel.BackgroundWorker#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Threading;\nusing System.Windows.Forms;\n\nnamespace BackgroundWorkerExample\n{\t\n    public class FibonacciForm : System.Windows.Forms.Form\n    {\t\n        private int numberToCompute = 0;\n        private int highestPercentageReached = 0;\n\n        private System.Windows.Forms.NumericUpDown numericUpDown1;\n        private System.Windows.Forms.Button startAsyncButton;\n        private System.Windows.Forms.Button cancelAsyncButton;\n        private System.Windows.Forms.ProgressBar progressBar1;\n        private System.Windows.Forms.Label resultLabel;\n        private System.ComponentModel.BackgroundWorker backgroundWorker1;\n\n        public FibonacciForm()\n        {\t\n            InitializeComponent();\n\n            InitializeBackgroundWorker();\n        }\n\n        // Set up the BackgroundWorker object by \n        // attaching event handlers. \n        private void InitializeBackgroundWorker()\n        {\n            backgroundWorker1.DoWork += \n                new DoWorkEventHandler(backgroundWorker1_DoWork);\n            backgroundWorker1.RunWorkerCompleted += \n                new RunWorkerCompletedEventHandler(\n            backgroundWorker1_RunWorkerCompleted);\n            backgroundWorker1.ProgressChanged += \n                new ProgressChangedEventHandler(\n            backgroundWorker1_ProgressChanged);\n        }\n\t\n        private void startAsyncButton_Click(System.Object sender, \n            System.EventArgs e)\n        {\n            // Reset the text in the result label.\n            resultLabel.Text = String.Empty;\n\n            // Disable the UpDown control until \n            // the asynchronous operation is done.\n            this.numericUpDown1.Enabled = false;\n\n            // Disable the Start button until \n            // the asynchronous operation is done.\n            this.startAsyncButton.Enabled = false;\n\n            // Enable the Cancel button while \n            // the asynchronous operation runs.\n            this.cancelAsyncButton.Enabled = true;\n\n            // Get the value from the UpDown control.\n            numberToCompute = (int)numericUpDown1.Value;\n\n            // Reset the variable for percentage tracking.\n            highestPercentageReached = 0;\n\n            // Start the asynchronous operation.\n            backgroundWorker1.RunWorkerAsync(numberToCompute);\n        }\n\n        private void cancelAsyncButton_Click(System.Object sender, \n            System.EventArgs e)\n        {   \n            // Cancel the asynchronous operation.\n            this.backgroundWorker1.CancelAsync();\n\n            // Disable the Cancel button.\n            cancelAsyncButton.Enabled = false;\n        }\n\n        // This event handler is where the actual,\n        // potentially time-consuming work is done.\n        private void backgroundWorker1_DoWork(object sender, \n            DoWorkEventArgs e)\n        {   \n            // Get the BackgroundWorker that raised this event.\n            BackgroundWorker worker = sender as BackgroundWorker;\n\n            // Assign the result of the computation\n            // to the Result property of the DoWorkEventArgs\n            // object. This is will be available to the \n            // RunWorkerCompleted eventhandler.\n            e.Result = ComputeFibonacci((int)e.Argument, worker, e);\n        }\n\n        // This event handler deals with the results of the\n        // background operation.\n        private void backgroundWorker1_RunWorkerCompleted(\n            object sender, RunWorkerCompletedEventArgs e)\n        {\n            // First, handle the case where an exception was thrown.\n            if (e.Error != null)\n            {\n                MessageBox.Show(e.Error.Message);\n            }\n            else if (e.Cancelled)\n            {\n                // Next, handle the case where the user canceled \n                // the operation.\n                // Note that due to a race condition in \n                // the DoWork event handler, the Cancelled\n                // flag may not have been set, even though\n                // CancelAsync was called.\n                resultLabel.Text = &quot;Canceled&quot;;\n            }\n            else\n            {\n                // Finally, handle the case where the operation \n                // succeeded.\n                resultLabel.Text = e.Result.ToString();\n            }\n\n            // Enable the UpDown control.\n            this.numericUpDown1.Enabled = true;\n\n            // Enable the Start button.\n            startAsyncButton.Enabled = true;\n\n            // Disable the Cancel button.\n            cancelAsyncButton.Enabled = false;\n        }\n\n        // This event handler updates the progress bar.\n        private void backgroundWorker1_ProgressChanged(object sender,\n            ProgressChangedEventArgs e)\n        {\n            this.progressBar1.Value = e.ProgressPercentage;\n        }\n\n        // This is the method that does the actual work. For this\n        // example, it computes a Fibonacci number and\n        // reports progress as it does its work.\n        long ComputeFibonacci(int n, BackgroundWorker worker, DoWorkEventArgs e)\n        {\n            // The parameter n must be &gt;= 0 and &lt;= 91.\n            // Fib(n), with n &gt; 91, overflows a long.\n            if ((n &lt; 0) || (n &gt; 91))\n            {\n                throw new ArgumentException(\n                    &quot;value must be &gt;= 0 and &lt;= 91&quot;, &quot;n&quot;);\n            }\n\n            long result = 0;\n\n            // Abort the operation if the user has canceled.\n            // Note that a call to CancelAsync may have set \n            // CancellationPending to true just after the\n            // last invocation of this method exits, so this \n            // code will not have the opportunity to set the \n            // DoWorkEventArgs.Cancel flag to true. This means\n            // that RunWorkerCompletedEventArgs.Cancelled will\n            // not be set to true in your RunWorkerCompleted\n            // event handler. This is a race condition.\n\n            if (worker.CancellationPending)\n            {   \n                e.Cancel = true;\n            }\n            else\n            {   \n                if (n &lt; 2)\n                {   \n                    result = 1;\n                }\n                else\n                {   \n                    result = ComputeFibonacci(n - 1, worker, e) + \n                             ComputeFibonacci(n - 2, worker, e);\n                }\n\n                // Report progress as a percentage of the total task.\n                int percentComplete = \n                    (int)((float)n / (float)numberToCompute * 100);\n                if (percentComplete &gt; highestPercentageReached)\n                {\n                    highestPercentageReached = percentComplete;\n                    worker.ReportProgress(percentComplete);\n                }\n            }\n\n            return result;\n        }\n\n\n\t\t#region Windows Form Designer generated code\n\t\t\n        private void InitializeComponent()\n        {\n            this.numericUpDown1 = new System.Windows.Forms.NumericUpDown();\n            this.startAsyncButton = new System.Windows.Forms.Button();\n            this.cancelAsyncButton = new System.Windows.Forms.Button();\n            this.resultLabel = new System.Windows.Forms.Label();\n            this.progressBar1 = new System.Windows.Forms.ProgressBar();\n            this.backgroundWorker1 = new System.ComponentModel.BackgroundWorker();\n            ((System.ComponentModel.ISupportInitialize)(this.numericUpDown1)).BeginInit();\n            this.SuspendLayout();\n            // \n            // numericUpDown1\n            // \n            this.numericUpDown1.Location = new System.Drawing.Point(16, 16);\n            this.numericUpDown1.Maximum = new System.Decimal(new int[] {\n            91,\n            0,\n            0,\n            0});\n            this.numericUpDown1.Minimum = new System.Decimal(new int[] {\n            1,\n            0,\n            0,\n            0});\n            this.numericUpDown1.Name = &quot;numericUpDown1&quot;;\n            this.numericUpDown1.Size = new System.Drawing.Size(80, 20);\n            this.numericUpDown1.TabIndex = 0;\n            this.numericUpDown1.Value = new System.Decimal(new int[] {\n            1,\n            0,\n            0,\n            0});\n            // \n            // startAsyncButton\n            // \n            this.startAsyncButton.Location = new System.Drawing.Point(16, 72);\n            this.startAsyncButton.Name = &quot;startAsyncButton&quot;;\n            this.startAsyncButton.Size = new System.Drawing.Size(120, 23);\n            this.startAsyncButton.TabIndex = 1;\n            this.startAsyncButton.Text = &quot;Start Async&quot;;\n            this.startAsyncButton.Click += new System.EventHandler(this.startAsyncButton_Click);\n            // \n            // cancelAsyncButton\n            // \n            this.cancelAsyncButton.Enabled = false;\n            this.cancelAsyncButton.Location = new System.Drawing.Point(153, 72);\n            this.cancelAsyncButton.Name = &quot;cancelAsyncButton&quot;;\n            this.cancelAsyncButton.Size = new System.Drawing.Size(119, 23);\n            this.cancelAsyncButton.TabIndex = 2;\n            this.cancelAsyncButton.Text = &quot;Cancel Async&quot;;\n            this.cancelAsyncButton.Click += new System.EventHandler(this.cancelAsyncButton_Click);\n            // \n            // resultLabel\n            // \n            this.resultLabel.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;\n            this.resultLabel.Location = new System.Drawing.Point(112, 16);\n            this.resultLabel.Name = &quot;resultLabel&quot;;\n            this.resultLabel.Size = new System.Drawing.Size(160, 23);\n            this.resultLabel.TabIndex = 3;\n            this.resultLabel.Text = &quot;(no result)&quot;;\n            this.resultLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;\n            // \n            // progressBar1\n            // \n            this.progressBar1.Location = new System.Drawing.Point(18, 48);\n            this.progressBar1.Name = &quot;progressBar1&quot;;\n            this.progressBar1.Size = new System.Drawing.Size(256, 8);\n            this.progressBar1.Step = 2;\n            this.progressBar1.TabIndex = 4;\n            // \n            // backgroundWorker1\n            // \n            this.backgroundWorker1.WorkerReportsProgress = true;\n            this.backgroundWorker1.WorkerSupportsCancellation = true;\n            // \n            // FibonacciForm\n            // \n            this.ClientSize = new System.Drawing.Size(292, 118);\n            this.Controls.Add(this.progressBar1);\n            this.Controls.Add(this.resultLabel);\n            this.Controls.Add(this.cancelAsyncButton);\n            this.Controls.Add(this.startAsyncButton);\n            this.Controls.Add(this.numericUpDown1);\n            this.Name = &quot;FibonacciForm&quot;;\n            this.Text = &quot;Fibonacci Calculator&quot;;\n            ((System.ComponentModel.ISupportInitialize)(this.numericUpDown1)).EndInit();\n            this.ResumeLayout(false);\n\n        }\n\t\t#endregion\n\n        [STAThread]\n        static void Main()\n        {\n            Application.Run(new FibonacciForm());\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.ComponentModel.BackgroundWorker#1\">#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n#using &lt;System.Windows.Forms.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Drawing;\nusing namespace System::Threading;\nusing namespace System::Windows::Forms;\n\npublic ref class FibonacciForm: public System::Windows::Forms::Form\n{\nprivate:\n\n   int numberToCompute;\n   int highestPercentageReached;\n\n   System::Windows::Forms::NumericUpDown^ numericUpDown1;\n   System::Windows::Forms::Button^ startAsyncButton;\n   System::Windows::Forms::Button^ cancelAsyncButton;\n   System::Windows::Forms::ProgressBar^ progressBar1;\n   System::Windows::Forms::Label ^ resultLabel;\n   System::ComponentModel::BackgroundWorker^ backgroundWorker1;\n\npublic:\n   FibonacciForm()\n   {\n      InitializeComponent();\n      numberToCompute = highestPercentageReached = 0;\n      InitializeBackgoundWorker();\n   }\n\n\nprivate:\n\n   // Set up the BackgroundWorker object by \n   // attaching event handlers. \n   void InitializeBackgoundWorker()\n   {\n      backgroundWorker1-&gt;DoWork += gcnew DoWorkEventHandler( this, &amp;FibonacciForm::backgroundWorker1_DoWork );\n      backgroundWorker1-&gt;RunWorkerCompleted += gcnew RunWorkerCompletedEventHandler( this, &amp;FibonacciForm::backgroundWorker1_RunWorkerCompleted );\n      backgroundWorker1-&gt;ProgressChanged += gcnew ProgressChangedEventHandler( this, &amp;FibonacciForm::backgroundWorker1_ProgressChanged );\n   }\n\n   void startAsyncButton_Click( System::Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      \n      // Reset the text in the result label.\n      resultLabel-&gt;Text = String::Empty;\n\n      // Disable the UpDown control until \n      // the asynchronous operation is done.\n      this-&gt;numericUpDown1-&gt;Enabled = false;\n\n      // Disable the Start button until \n      // the asynchronous operation is done.\n      this-&gt;startAsyncButton-&gt;Enabled = false;\n\n      // Enable the Cancel button while \n      // the asynchronous operation runs.\n      this-&gt;cancelAsyncButton-&gt;Enabled = true;\n\n      // Get the value from the UpDown control.\n      numberToCompute = (int)numericUpDown1-&gt;Value;\n\n      // Reset the variable for percentage tracking.\n      highestPercentageReached = 0;\n\n      // Start the asynchronous operation.\n      backgroundWorker1-&gt;RunWorkerAsync( numberToCompute );\n   }\n\n   void cancelAsyncButton_Click( System::Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {  \n      // Cancel the asynchronous operation.\n      this-&gt;backgroundWorker1-&gt;CancelAsync();\n      \n      // Disable the Cancel button.\n      cancelAsyncButton-&gt;Enabled = false;\n   }\n\n   // This event handler is where the actual,\n   // potentially time-consuming work is done.\n   void backgroundWorker1_DoWork( Object^ sender, DoWorkEventArgs^ e )\n   {\n      // Get the BackgroundWorker that raised this event.\n      BackgroundWorker^ worker = dynamic_cast&lt;BackgroundWorker^&gt;(sender);\n\n      // Assign the result of the computation\n      // to the Result property of the DoWorkEventArgs\n      // object. This is will be available to the \n      // RunWorkerCompleted eventhandler.\n      e-&gt;Result = ComputeFibonacci( safe_cast&lt;Int32&gt;(e-&gt;Argument), worker, e );\n   }\n\n   // This event handler deals with the results of the\n   // background operation.\n   void backgroundWorker1_RunWorkerCompleted( Object^ /*sender*/, RunWorkerCompletedEventArgs^ e )\n   {\n      // First, handle the case where an exception was thrown.\n      if ( e-&gt;Error != nullptr )\n      {\n         MessageBox::Show( e-&gt;Error-&gt;Message );\n      }\n      else\n      if ( e-&gt;Cancelled )\n      {\n         // Next, handle the case where the user cancelled \n         // the operation.\n         // Note that due to a race condition in \n         // the DoWork event handler, the Cancelled\n         // flag may not have been set, even though\n         // CancelAsync was called.\n         resultLabel-&gt;Text = &quot;Cancelled&quot;;\n      }\n      else\n      {\n         // Finally, handle the case where the operation \n         // succeeded.\n         resultLabel-&gt;Text = e-&gt;Result-&gt;ToString();\n      }\n\n      // Enable the UpDown control.\n      this-&gt;numericUpDown1-&gt;Enabled = true;\n\n      // Enable the Start button.\n      startAsyncButton-&gt;Enabled = true;\n\n      // Disable the Cancel button.\n      cancelAsyncButton-&gt;Enabled = false;\n   }\n\n   // This event handler updates the progress bar.\n   void backgroundWorker1_ProgressChanged( Object^ /*sender*/, ProgressChangedEventArgs^ e )\n   {\n      this-&gt;progressBar1-&gt;Value = e-&gt;ProgressPercentage;\n   }\n\n   // This is the method that does the actual work. For this\n   // example, it computes a Fibonacci number and\n   // reports progress as it does its work.\n   long ComputeFibonacci( int n, BackgroundWorker^ worker, DoWorkEventArgs ^ e )\n   {\n      // The parameter n must be &gt;= 0 and &lt;= 91.\n      // Fib(n), with n &gt; 91, overflows a long.\n      if ( (n &lt; 0) || (n &gt; 91) )\n      {\n         throw gcnew ArgumentException( &quot;value must be &gt;= 0 and &lt;= 91&quot;,&quot;n&quot; );\n      }\n\n      long result = 0;\n      \n      // Abort the operation if the user has cancelled.\n      // Note that a call to CancelAsync may have set \n      // CancellationPending to true just after the\n      // last invocation of this method exits, so this \n      // code will not have the opportunity to set the \n      // DoWorkEventArgs.Cancel flag to true. This means\n      // that RunWorkerCompletedEventArgs.Cancelled will\n      // not be set to true in your RunWorkerCompleted\n      // event handler. This is a race condition.\n      if ( worker-&gt;CancellationPending )\n      {\n         e-&gt;Cancel = true;\n      }\n      else\n      {\n         if ( n &lt; 2 )\n         {\n            result = 1;\n         }\n         else\n         {\n            result = ComputeFibonacci( n - 1, worker, e ) + ComputeFibonacci( n - 2, worker, e );\n         }\n\n         // Report progress as a percentage of the total task.\n         int percentComplete = (int)((float)n / (float)numberToCompute * 100);\n         if ( percentComplete &gt; highestPercentageReached )\n         {\n            highestPercentageReached = percentComplete;\n            worker-&gt;ReportProgress( percentComplete );\n         }\n      }\n\n      return result;\n   }\n\n   void InitializeComponent()\n   {\n      this-&gt;numericUpDown1 = gcnew System::Windows::Forms::NumericUpDown;\n      this-&gt;startAsyncButton = gcnew System::Windows::Forms::Button;\n      this-&gt;cancelAsyncButton = gcnew System::Windows::Forms::Button;\n      this-&gt;resultLabel = gcnew System::Windows::Forms::Label;\n      this-&gt;progressBar1 = gcnew System::Windows::Forms::ProgressBar;\n      this-&gt;backgroundWorker1 = gcnew System::ComponentModel::BackgroundWorker;\n      (dynamic_cast&lt;System::ComponentModel::ISupportInitialize^&gt;(this-&gt;numericUpDown1))-&gt;BeginInit();\n      this-&gt;SuspendLayout();\n      \n      // \n      // numericUpDown1\n      // \n      this-&gt;numericUpDown1-&gt;Location = System::Drawing::Point( 16, 16 );\n      array&lt;Int32&gt;^temp0 = {91,0,0,0};\n      this-&gt;numericUpDown1-&gt;Maximum = System::Decimal( temp0 );\n      array&lt;Int32&gt;^temp1 = {1,0,0,0};\n      this-&gt;numericUpDown1-&gt;Minimum = System::Decimal( temp1 );\n      this-&gt;numericUpDown1-&gt;Name = &quot;numericUpDown1&quot;;\n      this-&gt;numericUpDown1-&gt;Size = System::Drawing::Size( 80, 20 );\n      this-&gt;numericUpDown1-&gt;TabIndex = 0;\n      array&lt;Int32&gt;^temp2 = {1,0,0,0};\n      this-&gt;numericUpDown1-&gt;Value = System::Decimal( temp2 );\n\n      // \n      // startAsyncButton\n      // \n      this-&gt;startAsyncButton-&gt;Location = System::Drawing::Point( 16, 72 );\n      this-&gt;startAsyncButton-&gt;Name = &quot;startAsyncButton&quot;;\n      this-&gt;startAsyncButton-&gt;Size = System::Drawing::Size( 120, 23 );\n      this-&gt;startAsyncButton-&gt;TabIndex = 1;\n      this-&gt;startAsyncButton-&gt;Text = &quot;Start Async&quot;;\n      this-&gt;startAsyncButton-&gt;Click += gcnew System::EventHandler( this, &amp;FibonacciForm::startAsyncButton_Click );\n\n      // \n      // cancelAsyncButton\n      // \n      this-&gt;cancelAsyncButton-&gt;Enabled = false;\n      this-&gt;cancelAsyncButton-&gt;Location = System::Drawing::Point( 153, 72 );\n      this-&gt;cancelAsyncButton-&gt;Name = &quot;cancelAsyncButton&quot;;\n      this-&gt;cancelAsyncButton-&gt;Size = System::Drawing::Size( 119, 23 );\n      this-&gt;cancelAsyncButton-&gt;TabIndex = 2;\n      this-&gt;cancelAsyncButton-&gt;Text = &quot;Cancel Async&quot;;\n      this-&gt;cancelAsyncButton-&gt;Click += gcnew System::EventHandler( this, &amp;FibonacciForm::cancelAsyncButton_Click );\n\n      // \n      // resultLabel\n      // \n      this-&gt;resultLabel-&gt;BorderStyle = System::Windows::Forms::BorderStyle::Fixed3D;\n      this-&gt;resultLabel-&gt;Location = System::Drawing::Point( 112, 16 );\n      this-&gt;resultLabel-&gt;Name = &quot;resultLabel&quot;;\n      this-&gt;resultLabel-&gt;Size = System::Drawing::Size( 160, 23 );\n      this-&gt;resultLabel-&gt;TabIndex = 3;\n      this-&gt;resultLabel-&gt;Text = &quot;(no result)&quot;;\n      this-&gt;resultLabel-&gt;TextAlign = System::Drawing::ContentAlignment::MiddleCenter;\n\n      // \n      // progressBar1\n      // \n      this-&gt;progressBar1-&gt;Location = System::Drawing::Point( 18, 48 );\n      this-&gt;progressBar1-&gt;Name = &quot;progressBar1&quot;;\n      this-&gt;progressBar1-&gt;Size = System::Drawing::Size( 256, 8 );\n      this-&gt;progressBar1-&gt;Step = 2;\n      this-&gt;progressBar1-&gt;TabIndex = 4;\n\n      // \n      // backgroundWorker1\n      // \n      this-&gt;backgroundWorker1-&gt;WorkerReportsProgress = true;\n      this-&gt;backgroundWorker1-&gt;WorkerSupportsCancellation = true;\n\n      // \n      // FibonacciForm\n      // \n      this-&gt;ClientSize = System::Drawing::Size( 292, 118 );\n      this-&gt;Controls-&gt;Add( this-&gt;progressBar1 );\n      this-&gt;Controls-&gt;Add( this-&gt;resultLabel );\n      this-&gt;Controls-&gt;Add( this-&gt;cancelAsyncButton );\n      this-&gt;Controls-&gt;Add( this-&gt;startAsyncButton );\n      this-&gt;Controls-&gt;Add( this-&gt;numericUpDown1 );\n      this-&gt;Name = &quot;FibonacciForm&quot;;\n      this-&gt;Text = &quot;Fibonacci Calculator&quot;;\n      (dynamic_cast&lt;System::ComponentModel::ISupportInitialize^&gt;(this-&gt;numericUpDown1))-&gt;EndInit();\n      this-&gt;ResumeLayout( false );\n   }\n};\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew FibonacciForm );\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The BackgroundWorker class allows you to run an operation on a separate, dedicated thread. Time-consuming operations like downloads and database transactions can cause your user interface (UI) to seem as though it has stopped responding while they are running. When you want a responsive UI and you are faced with long delays associated with such operations, the BackgroundWorker class provides a convenient solution.  </p>\n<p> To execute a time-consuming operation in the background, create a BackgroundWorker and listen for events that report the progress of your operation and signal when your operation is finished. You can create the BackgroundWorker programmatically or you can drag it onto your form from the <strong>Components</strong> tab of the <strong>Toolbox</strong>. If you create the BackgroundWorker in the Windows Forms Designer, it will appear in the Component Tray, and its properties will be displayed in the Properties window.  </p>\n<p> To set up for a background operation, add an event handler for the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_DoWork\" data-linktype=\"relative-path\">DoWork</a> event. Call your time-consuming operation in this event handler. To start the operation, call <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_RunWorkerAsync_\" data-linktype=\"relative-path\">RunWorkerAsync</a>. To receive notifications of progress updates, handle the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_ProgressChanged\" data-linktype=\"relative-path\">ProgressChanged</a> event. To receive a notification when the operation is completed, handle the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_RunWorkerCompleted\" data-linktype=\"relative-path\">RunWorkerCompleted</a> event.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You must be careful not to manipulate any user-interface objects in your <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_DoWork\" data-linktype=\"relative-path\">DoWork</a> event handler. Instead, communicate to the user interface through the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_ProgressChanged\" data-linktype=\"relative-path\">ProgressChanged</a> and <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_RunWorkerCompleted\" data-linktype=\"relative-path\">RunWorkerCompleted</a> events.  </p>\n<p> BackgroundWorker events are not marshaled across <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a> boundaries. Do not use a BackgroundWorker component to perform multithreaded operations in more than one <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a>.  </p>\n</div>\n<p> If your background operation requires a parameter, call <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_RunWorkerAsync_\" data-linktype=\"relative-path\">RunWorkerAsync</a> with your parameter. Inside the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_DoWork\" data-linktype=\"relative-path\">DoWork</a> event handler, you can extract the parameter from the <a class=\"xref\" href=\"system.componentmodel.doworkeventargs#System_ComponentModel_DoWorkEventArgs_Argument_\" data-linktype=\"relative-path\">Argument</a> property.  </p>\n<p> For more information about BackgroundWorker, see <a href=\"../Topic/How%20to:%20Run%20an%20Operation%20in%20the%20Background.md\" data-linktype=\"relative-path\">How to: Run an Operation in the Background</a>.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_BackgroundWorker__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">BackgroundWorker()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public BackgroundWorker ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor initializes a <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_BackgroundWorker_CancellationPending\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CancellationPending</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value indicating whether the application has requested cancellation of a background operation.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool CancellationPending { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the application has requested cancellation of a background operation; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If CancellationPending is <code>true</code>, then the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_CancelAsync_\" data-linktype=\"relative-path\">CancelAsync</a> method has been called on the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a>.  </p>\n<p> This property is meant for use by the worker thread, which should periodically check CancellationPending and abort the background operation when it is set to <code>true</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_BackgroundWorker_IsBusy\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsBusy</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value indicating whether the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> is running an asynchronous operation.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsBusy { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code>, if the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> is running an asynchronous operation; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> starts an asynchronous operation when you call <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_RunWorkerAsync_\" data-linktype=\"relative-path\">RunWorkerAsync</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_BackgroundWorker_WorkerReportsProgress\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">WorkerReportsProgress</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value indicating whether the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> can report progress updates.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool WorkerReportsProgress { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> supports progress updates; otherwise <code>false</code>. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Set the WorkerReportsProgress property to <code>true</code> if you want the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> to support progress updates. When this property is <code>true</code>, user code can call the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_ReportProgress_\" data-linktype=\"relative-path\">ReportProgress</a> method to raise the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_ProgressChanged\" data-linktype=\"relative-path\">ProgressChanged</a> event.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_BackgroundWorker_WorkerSupportsCancellation\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">WorkerSupportsCancellation</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value indicating whether the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> supports asynchronous cancellation.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool WorkerSupportsCancellation { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> supports cancellation; otherwise <code>false</code>. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Set the WorkerSupportsCancellation property to <code>true</code> if you want the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> to support cancellation. When this property is <code>true</code>, you can call the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_CancelAsync_\" data-linktype=\"relative-path\">CancelAsync</a> method to interrupt a background operation.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_BackgroundWorker_CancelAsync\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CancelAsync()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Requests cancellation of a pending background operation.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void CancelAsync ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><span class=\"xref\">stem.ComponentModel.BackgroundWorker.WorkerSupportsCancellation*</span> is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>CancelAsync submits a request to terminate the pending background operation and sets the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_CancellationPending_\" data-linktype=\"relative-path\">CancellationPending</a> property to <code>true</code>.  </p>\n<p> When you call CancelAsync, your worker method has an opportunity to stop its execution and exit. The worker code should periodically check the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_CancellationPending_\" data-linktype=\"relative-path\">CancellationPending</a> property to see if it has been set to <code>true</code>.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Be aware that your code in the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_DoWork\" data-linktype=\"relative-path\">DoWork</a> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_CancellationPending_\" data-linktype=\"relative-path\">CancellationPending</a> being set to <code>true</code>. In this case, the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Cancelled_\" data-linktype=\"relative-path\">Cancelled</a> flag of <a class=\"xref\" href=\"system.componentmodel.runworkercompletedeventargs\" data-linktype=\"relative-path\">System.ComponentModel.RunWorkerCompletedEventArgs</a> in your <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_RunWorkerCompleted\" data-linktype=\"relative-path\">RunWorkerCompleted</a> event handler will not be set to <code>true</code>, even though a cancellation request was made. This situation is called a <em>race condition</em> and is a common concern in multithreaded programming. For more information about multithreading design issues, see <a href=\"../topic/managed%20threading%20best%20practices\" data-linktype=\"relative-path\">Managed Threading Best Practices</a>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_BackgroundWorker_OnDoWork_System_ComponentModel_DoWorkEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnDoWork(DoWorkEventArgs)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Raises the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_DoWork\" data-linktype=\"relative-path\">DoWork</a> event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnDoWork (System.ComponentModel.DoWorkEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.doworkeventargs\" data-linktype=\"relative-path\">DoWorkEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_BackgroundWorker_OnProgressChanged_System_ComponentModel_ProgressChangedEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnProgressChanged(ProgressChangedEventArgs)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Raises the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_ProgressChanged\" data-linktype=\"relative-path\">ProgressChanged</a> event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnProgressChanged (System.ComponentModel.ProgressChangedEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.progresschangedeventargs\" data-linktype=\"relative-path\">ProgressChangedEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2\" data-linktype=\"external\">NIB: Raising an Event</a>.  </p>\n<p> The OnProgressChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_BackgroundWorker_OnRunWorkerCompleted_System_ComponentModel_RunWorkerCompletedEventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnRunWorkerCompleted(RunWorkerCompletedEventArgs)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Raises the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_RunWorkerCompleted\" data-linktype=\"relative-path\">RunWorkerCompleted</a> event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void OnRunWorkerCompleted (System.ComponentModel.RunWorkerCompletedEventArgs e);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>e</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.runworkercompletedeventargs\" data-linktype=\"relative-path\">RunWorkerCompletedEventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> that contains the event data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Raising an event invokes the event handler through a delegate. For more information, see <a href=\"http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2\" data-linktype=\"external\">NIB: Raising an Event</a>.  </p>\n<p> The OnRunWorkerCompleted method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_BackgroundWorker_ReportProgress_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ReportProgress(Int32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Raises the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_ProgressChanged\" data-linktype=\"relative-path\">ProgressChanged</a> event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void ReportProgress (int percentProgress);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>percentProgress</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The percentage, from 0 to 100, of the background operation that is complete.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <span class=\"xref\">stem.ComponentModel.BackgroundWorker.WorkerReportsProgress*</span> property is set to <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If you need the background operation to report on its progress, you can call the ReportProgress method to raise the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_ProgressChanged\" data-linktype=\"relative-path\">ProgressChanged</a> event. The <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_WorkerReportsProgress_\" data-linktype=\"relative-path\">WorkerReportsProgress</a> property value must be <code>true</code>, or ReportProgress will throw an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.  </p>\n<p> It is up to you to implement a meaningful way of measuring your background operation&#39;s progress as a percentage of the total task completed.  </p>\n<p> The call to the ReportProgress method is asynchronous and returns immediately. The <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_ProgressChanged\" data-linktype=\"relative-path\">ProgressChanged</a> event handler executes on the thread that created the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_BackgroundWorker_ReportProgress_System_Int32_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ReportProgress(Int32, Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Raises the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_ProgressChanged\" data-linktype=\"relative-path\">ProgressChanged</a> event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void ReportProgress (int percentProgress, object userState);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>percentProgress</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The percentage, from 0 to 100, of the background operation that is complete.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>userState</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The state object passed to <span class=\"xref\">stem.ComponentModel.BackgroundWorker.RunWorkerAsync*</span>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <span class=\"xref\">stem.ComponentModel.BackgroundWorker.WorkerReportsProgress*</span> property is set to <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If you need the background operation to report on its progress, you can call the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_ReportProgress_\" data-linktype=\"relative-path\">ReportProgress</a> method to raise the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_ProgressChanged\" data-linktype=\"relative-path\">ProgressChanged</a> event. The <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_WorkerReportsProgress_\" data-linktype=\"relative-path\">WorkerReportsProgress</a> property value must <code>true</code>, or <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_ReportProgress_\" data-linktype=\"relative-path\">ReportProgress</a> will throw an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.  </p>\n<p> It is up to you to implement a meaningful way of measuring your background operation&#39;s progress as a percentage of the total task completed.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_BackgroundWorker_RunWorkerAsync\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">RunWorkerAsync()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Starts execution of a background operation.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void RunWorkerAsync ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><span class=\"xref\">stem.ComponentModel.BackgroundWorker.IsBusy*</span> is <code>true</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The RunWorkerAsync method submits a request to start the operation running asynchronously. When the request is serviced, the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_DoWork\" data-linktype=\"relative-path\">DoWork</a> event is raised, which in turn starts execution of your background operation.  </p>\n<p> If the background operation is already running, calling RunWorkerAsync again will raise an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_BackgroundWorker_RunWorkerAsync_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">RunWorkerAsync(Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Starts execution of a background operation.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void RunWorkerAsync (object argument);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>argument</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A parameter for use by the background operation to be executed in the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_DoWork\" data-linktype=\"relative-path\">DoWork</a> event handler.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><span class=\"xref\">stem.ComponentModel.BackgroundWorker.IsBusy*</span> is <code>true</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_RunWorkerAsync_\" data-linktype=\"relative-path\">RunWorkerAsync</a> method submits a request to start the operation running asynchronously. When the request is serviced, the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_DoWork\" data-linktype=\"relative-path\">DoWork</a> event is raised, which in turn starts execution of your background operation.  </p>\n<p> If your operation requires a parameter, you can provide it as the <code>argument</code> parameter to <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_RunWorkerAsync_\" data-linktype=\"relative-path\">RunWorkerAsync</a>.  </p>\n<p> If the background operation is already running, calling <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_RunWorkerAsync_\" data-linktype=\"relative-path\">RunWorkerAsync</a> again will raise an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Events\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_BackgroundWorker_DoWork\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">DoWork</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when <span class=\"xref\">stem.ComponentModel.BackgroundWorker.RunWorkerAsync*</span> is called.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.ComponentModel.DoWorkEventHandler DoWork;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event is raised when you call the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_RunWorkerAsync_\" data-linktype=\"relative-path\">RunWorkerAsync</a> method. This is where you start the operation that performs the potentially time-consuming work.  </p>\n<p> Your code in the DoWork event handler should periodically check the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_CancellationPending_\" data-linktype=\"relative-path\">CancellationPending</a> property value and abort the operation if it is <code>true</code>. When this occurs, you can set the <a class=\"xref\" href=\"system.componentmodel.canceleventargs#System_ComponentModel_CancelEventArgs_Cancel_\" data-linktype=\"relative-path\">Cancel</a> flag of <a class=\"xref\" href=\"system.componentmodel.doworkeventargs\" data-linktype=\"relative-path\">System.ComponentModel.DoWorkEventArgs</a> to <code>true</code>, and the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Cancelled_\" data-linktype=\"relative-path\">Cancelled</a> flag of <a class=\"xref\" href=\"system.componentmodel.runworkercompletedeventargs\" data-linktype=\"relative-path\">System.ComponentModel.RunWorkerCompletedEventArgs</a> in your <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_RunWorkerCompleted\" data-linktype=\"relative-path\">RunWorkerCompleted</a> event handler will be set to <code>true</code>.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Be aware that your code in the DoWork event handler may finish its work as a cancellation request is being made, and your polling loop may miss <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_CancellationPending_\" data-linktype=\"relative-path\">CancellationPending</a> being set to <code>true</code>. In this case, the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Cancelled_\" data-linktype=\"relative-path\">Cancelled</a> flag of <a class=\"xref\" href=\"system.componentmodel.runworkercompletedeventargs\" data-linktype=\"relative-path\">System.ComponentModel.RunWorkerCompletedEventArgs</a> in your <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_RunWorkerCompleted\" data-linktype=\"relative-path\">RunWorkerCompleted</a> event handler will not be set to <code>true</code>, even though a cancellation request was made. This situation is called a <em>race condition</em> and is a common concern in multithreaded programming. For more information about multithreading design issues, see <a href=\"../topic/managed%20threading%20best%20practices\" data-linktype=\"relative-path\">Managed Threading Best Practices</a>.  </p>\n</div>\n<p> If your operation produces a result, you can assign the result to the <a class=\"xref\" href=\"system.componentmodel.doworkeventargs#System_ComponentModel_DoWorkEventArgs_Result_\" data-linktype=\"relative-path\">Result</a> property. This will be available to the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_RunWorkerCompleted\" data-linktype=\"relative-path\">RunWorkerCompleted</a> event handler in the <a class=\"xref\" href=\"system.componentmodel.runworkercompletedeventargs#System_ComponentModel_RunWorkerCompletedEventArgs_Result_\" data-linktype=\"relative-path\">Result</a> property.  </p>\n<p> If the operation raises an exception that your code does not handle, the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> catches the exception and passes it into the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_RunWorkerCompleted\" data-linktype=\"relative-path\">RunWorkerCompleted</a> event handler, where it is exposed as the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Error_\" data-linktype=\"relative-path\">Error</a> property of <a class=\"xref\" href=\"system.componentmodel.runworkercompletedeventargs\" data-linktype=\"relative-path\">System.ComponentModel.RunWorkerCompletedEventArgs</a>. If you are running under the Visual Studio debugger, the debugger will break at the point in the DoWork event handler where the unhandled exception was raised. If you have more than one <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a>, you should not reference any of them directly, as this would couple your DoWork event handler to a specific instance of <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a>. Instead, you should access your <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> by casting the <code>sender</code> parameter in your DoWork event handler.  </p>\n<p> You must be careful not to manipulate any user-interface objects in your DoWork event handler. Instead, communicate to the user interface through the <a class=\"xref\" href=\"system.componentmodel.backgroundworker\" data-linktype=\"relative-path\">BackgroundWorker</a> events.  </p>\n<p> For more information about handling events, see <a href=\"http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67\" data-linktype=\"external\">NIB: Consuming Events</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_BackgroundWorker_ProgressChanged\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ProgressChanged</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when <span class=\"xref\">stem.ComponentModel.BackgroundWorker.ReportProgress*</span> is called.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.ComponentModel.ProgressChangedEventHandler ProgressChanged;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event is raised when you call the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_ReportProgress_\" data-linktype=\"relative-path\">ReportProgress</a> method.  </p>\n<p> For more information about handling events, see <a href=\"http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67\" data-linktype=\"external\">NIB: Consuming Events</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_BackgroundWorker_RunWorkerCompleted\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">RunWorkerCompleted</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when the background operation has completed, has been canceled, or has raised an exception.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.ComponentModel.RunWorkerCompletedEventHandler RunWorkerCompleted;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event is raised when the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_DoWork\" data-linktype=\"relative-path\">DoWork</a> event handler returns.  </p>\n<p> If the operation completes successfully and its result is assigned in the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_DoWork\" data-linktype=\"relative-path\">DoWork</a> event handler, you can access the result through the <a class=\"xref\" href=\"system.componentmodel.runworkercompletedeventargs#System_ComponentModel_RunWorkerCompletedEventArgs_Result_\" data-linktype=\"relative-path\">Result</a> property.  </p>\n<p> The <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Error_\" data-linktype=\"relative-path\">Error</a> property of <a class=\"xref\" href=\"system.componentmodel.runworkercompletedeventargs\" data-linktype=\"relative-path\">System.ComponentModel.RunWorkerCompletedEventArgs</a> indicates that an exception was thrown by the operation.  </p>\n<p> The <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Cancelled_\" data-linktype=\"relative-path\">Cancelled</a> property of <a class=\"xref\" href=\"system.componentmodel.runworkercompletedeventargs\" data-linktype=\"relative-path\">System.ComponentModel.RunWorkerCompletedEventArgs</a> indicates whether a cancellation request was processed by the background operation. If your code in the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_DoWork\" data-linktype=\"relative-path\">DoWork</a> event handler detects a cancellation request by checking the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_CancellationPending_\" data-linktype=\"relative-path\">CancellationPending</a> flag and setting the <a class=\"xref\" href=\"system.componentmodel.canceleventargs#System_ComponentModel_CancelEventArgs_Cancel_\" data-linktype=\"relative-path\">Cancel</a> flag of <a class=\"xref\" href=\"system.componentmodel.doworkeventargs\" data-linktype=\"relative-path\">System.ComponentModel.DoWorkEventArgs</a> to <code>true</code>, the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Cancelled_\" data-linktype=\"relative-path\">Cancelled</a> flag of <a class=\"xref\" href=\"system.componentmodel.runworkercompletedeventargs\" data-linktype=\"relative-path\">System.ComponentModel.RunWorkerCompletedEventArgs</a> also will be set to <code>true</code>.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Be aware that your code in the <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_DoWork\" data-linktype=\"relative-path\">DoWork</a> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <a class=\"xref\" href=\"system.componentmodel.backgroundworker#System_ComponentModel_BackgroundWorker_CancellationPending_\" data-linktype=\"relative-path\">CancellationPending</a> being set to <code>true</code>. In this case, the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Cancelled_\" data-linktype=\"relative-path\">Cancelled</a> flag of <a class=\"xref\" href=\"system.componentmodel.runworkercompletedeventargs\" data-linktype=\"relative-path\">System.ComponentModel.RunWorkerCompletedEventArgs</a> in your RunWorkerCompleted event handler will not be set to <code>true</code>, even though a cancellation request was made. This situation is called a <em>race condition</em> and is a common concern in multithreaded programming. For more information about multithreading design issues, see <a href=\"../topic/managed%20threading%20best%20practices\" data-linktype=\"relative-path\">Managed Threading Best Practices</a>.  </p>\n</div>\n<p> Your RunWorkerCompleted event handler should always check the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Error_\" data-linktype=\"relative-path\">Error</a> and <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_Cancelled_\" data-linktype=\"relative-path\">Cancelled</a> properties before accessing the <a class=\"xref\" href=\"system.componentmodel.runworkercompletedeventargs#System_ComponentModel_RunWorkerCompletedEventArgs_Result_\" data-linktype=\"relative-path\">Result</a> property. If an exception was raised or if the operation was canceled, accessing the <a class=\"xref\" href=\"system.componentmodel.runworkercompletedeventargs#System_ComponentModel_RunWorkerCompletedEventArgs_Result_\" data-linktype=\"relative-path\">Result</a> property raises an exception.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.BackgroundWorker.yml\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker..ctor\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.CancelAsync\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.CancellationPending\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.DoWork\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.add_DoWork\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.remove_DoWork\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.IsBusy\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.OnDoWork\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.OnProgressChanged\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.ProgressChanged\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.add_ProgressChanged\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.remove_ProgressChanged\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.ReportProgress\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.RunWorkerAsync\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.RunWorkerCompleted\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.add_RunWorkerCompleted\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.remove_RunWorkerCompleted\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.WorkerReportsProgress\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"ae956f05-4616-a5e6-beb0-0beae2e052af\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Executes an operation on a separate thread.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.componentmodel/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.ComponentModel.BackgroundWorker\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.BackgroundWorker.yml","open_to_public_contributors":false,"api_name":["System.ComponentModel.BackgroundWorker","System.ComponentModel.BackgroundWorker..ctor","System.ComponentModel.BackgroundWorker.CancelAsync","System.ComponentModel.BackgroundWorker.CancellationPending","System.ComponentModel.BackgroundWorker.DoWork","System.ComponentModel.BackgroundWorker.add_DoWork","System.ComponentModel.BackgroundWorker.remove_DoWork","System.ComponentModel.BackgroundWorker.IsBusy","System.ComponentModel.BackgroundWorker.OnDoWork","System.ComponentModel.BackgroundWorker.OnProgressChanged","System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted","System.ComponentModel.BackgroundWorker.ProgressChanged","System.ComponentModel.BackgroundWorker.add_ProgressChanged","System.ComponentModel.BackgroundWorker.remove_ProgressChanged","System.ComponentModel.BackgroundWorker.ReportProgress","System.ComponentModel.BackgroundWorker.RunWorkerAsync","System.ComponentModel.BackgroundWorker.RunWorkerCompleted","System.ComponentModel.BackgroundWorker.add_RunWorkerCompleted","System.ComponentModel.BackgroundWorker.remove_RunWorkerCompleted","System.ComponentModel.BackgroundWorker.WorkerReportsProgress","System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.ComponentModel.BackgroundWorker","System::ComponentModel::BackgroundWorker","System.ComponentModel.BackgroundWorker.#ctor","System::ComponentModel::BackgroundWorker::#ctor","System.ComponentModel.BackgroundWorker.CancelAsync","System::ComponentModel::BackgroundWorker::CancelAsync","System.ComponentModel.BackgroundWorker.CancellationPending","System::ComponentModel::BackgroundWorker::CancellationPending","System.ComponentModel.BackgroundWorker.DoWork","System::ComponentModel::BackgroundWorker::DoWork","System.ComponentModel.BackgroundWorker.IsBusy","System::ComponentModel::BackgroundWorker::IsBusy","System.ComponentModel.BackgroundWorker.OnDoWork","System::ComponentModel::BackgroundWorker::OnDoWork","System.ComponentModel.BackgroundWorker.OnProgressChanged","System::ComponentModel::BackgroundWorker::OnProgressChanged","System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted","System::ComponentModel::BackgroundWorker::OnRunWorkerCompleted","System.ComponentModel.BackgroundWorker.ProgressChanged","System::ComponentModel::BackgroundWorker::ProgressChanged","System.ComponentModel.BackgroundWorker.ReportProgress","System::ComponentModel::BackgroundWorker::ReportProgress","System.ComponentModel.BackgroundWorker.RunWorkerAsync","System::ComponentModel::BackgroundWorker::RunWorkerAsync","System.ComponentModel.BackgroundWorker.RunWorkerCompleted","System::ComponentModel::BackgroundWorker::RunWorkerCompleted","System.ComponentModel.BackgroundWorker.WorkerReportsProgress","System::ComponentModel::BackgroundWorker::WorkerReportsProgress","System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation","System::ComponentModel::BackgroundWorker::WorkerSupportsCancellation"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"ae956f05-4616-a5e6-beb0-0beae2e052af","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/BackgroundWorker.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"BackgroundWorker class | Microsoft Docs","_op_ogTitle":"BackgroundWorker class","description":"Executes an operation on a separate thread.\n","toc_asset_id":"api/_splitted/System.ComponentModel/toc.json","toc_rel":"_splitted/System.ComponentModel/toc.json","source_url":"","ms.assetid":"System.ComponentModel.BackgroundWorker","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.backgroundworker","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.backgroundworker","fileRelativePath":"api/System.ComponentModel.BackgroundWorker.html"},"themesRelativePathToOutputRoot":"_themes/"}