{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">DrawTreeNodeEventArgs</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides data for the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawNode\" data-linktype=\"relative-path\">DrawNode</a> event.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class DrawTreeNodeEventArgs : EventArgs</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></span></div><span class=\"lang-csharp\">DrawTreeNodeEventArgs</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs#System_EventArgs_Empty\" data-linktype=\"relative-path\">Empty</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates how to customize a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control using owner drawing. The <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control in the example displays optional node tags alongside the standard node labels. Node tags are specified using the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Tag_\" data-linktype=\"relative-path\">Tag</a> property. The <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control also uses custom colors, including a custom highlight color.  </p>\n<p> You can customize most of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> colors by setting color properties, but the selection highlight color is not available as a property. Additionally, the default selection highlight rectangle extends only around a node label. Owner drawing must be used to draw the node tags and to draw a customized highlight rectangle large enough to include a node tag.  </p>\n<p> In the example, a handler for the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawNode\" data-linktype=\"relative-path\">System.Windows.Forms.TreeView.DrawNode</a> event draws the node tags and the custom selection highlight manually. Unselected nodes do not need customization. For these, the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs#System_Windows_Forms_DrawTreeNodeEventArgs_DrawDefault_\" data-linktype=\"relative-path\">DrawDefault</a> property is set to <code>true</code> so that they will be drawn by the operating system.  </p>\n<p> Additionally, a handler for the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">System.Windows.Forms.Control.MouseDown</a> event provides hit-testing. By default, a node can be selected only by clicking the region around its label. The <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_MouseDown\" data-linktype=\"relative-path\">System.Windows.Forms.Control.MouseDown</a> event handler selects a node that is clicked anywhere within this region or within the region around a node tag, if present.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeViewOwnerDraw#1\">Imports System\nImports System.Drawing\nImports System.Windows.Forms\n\nPublic Class TreeViewOwnerDraw\n    Inherits Form\n\n    Private WithEvents myTreeView As TreeView\n    \n    &#39; Create a Font object for the node tags.\n    Private tagFont As New Font(&quot;Helvetica&quot;, 8, FontStyle.Bold)\n    \n    Public Sub New()\n\n        &#39; Create and initialize the TreeView control.\n        myTreeView = New TreeView()\n        myTreeView.Dock = DockStyle.Fill\n        myTreeView.BackColor = Color.Tan\n        myTreeView.CheckBoxes = True\n        \n        &#39; Add nodes to the TreeView control.\n        Dim node As TreeNode\n        Dim x As Integer\n        For x = 1 To 3\n\n            &#39; Add a root node to the TreeView control.\n            node = myTreeView.Nodes.Add(String.Format(&quot;Task {0}&quot;, x))\n            Dim y As Integer\n            For y = 1 To 3 \n\n                &#39; Add a child node to the root node.\n                node.Nodes.Add(String.Format(&quot;Subtask {0}&quot;, y))\n            Next y\n        Next x\n        myTreeView.ExpandAll()\n        \n        &#39; Add tags containing alert messages to a few nodes \n        &#39; and set the node background color to highlight them.\n        myTreeView.Nodes(1).Nodes(0).Tag = &quot;urgent!&quot;\n        myTreeView.Nodes(1).Nodes(0).BackColor = Color.Yellow\n        myTreeView.SelectedNode = myTreeView.Nodes(1).Nodes(0)\n        myTreeView.Nodes(2).Nodes(1).Tag = &quot;urgent!&quot;\n        myTreeView.Nodes(2).Nodes(1).BackColor = Color.Yellow\n        \n        &#39; Configure the TreeView control for owner-draw.\n        myTreeView.DrawMode = TreeViewDrawMode.OwnerDrawText\n\n        &#39; Add a handler for the MouseDown event so that a node can be \n        &#39; selected by clicking the tag text as well as the node text.\n        AddHandler myTreeView.MouseDown, AddressOf myTreeView_MouseDown\n        \n        &#39; Initialize the form and add the TreeView control to it.\n        Me.ClientSize = New Size(292, 273)\n        Me.Controls.Add(myTreeView)\n    End Sub &#39;New\n    \n    &lt;STAThreadAttribute()&gt; _\n    Shared Sub Main()\n        Application.Run(New TreeViewOwnerDraw())\n    End Sub &#39;Main\n    \n    &#39; Draws a node.\n    Private Sub myTreeView_DrawNode(ByVal sender As Object, _\n        ByVal e As DrawTreeNodeEventArgs) Handles myTreeView.DrawNode\n\n        &#39; Draw the background and node text for a selected node.\n        If (e.State And TreeNodeStates.Selected) &lt;&gt; 0 Then\n\n            &#39; Draw the background of the selected node. The NodeBounds\n            &#39; method makes the highlight rectangle large enough to\n            &#39; include the text of a node tag, if one is present.\n            e.Graphics.FillRectangle(Brushes.Green, NodeBounds(e.Node))\n\n            &#39; Retrieve the node font. If the node font has not been set,\n            &#39; use the TreeView font.\n            Dim nodeFont As Font = e.Node.NodeFont\n            If nodeFont Is Nothing Then\n                nodeFont = CType(sender, TreeView).Font\n            End If\n\n            &#39; Draw the node text.\n            e.Graphics.DrawString(e.Node.Text, nodeFont, Brushes.White, _\n                e.Bounds.Left - 2, e.Bounds.Top)\n\n        &#39; Use the default background and node text.\n        Else\n            e.DrawDefault = True\n        End If\n\n        &#39; If a node tag is present, draw its string representation \n        &#39; to the right of the label text.\n        If (e.Node.Tag IsNot Nothing) Then\n            e.Graphics.DrawString(e.Node.Tag.ToString(), tagFont, _\n                Brushes.Yellow, e.Bounds.Right + 2, e.Bounds.Top)\n        End If\n\n        &#39; If the node has focus, draw the focus rectangle large, making\n        &#39; it large enough to include the text of the node tag, if present.\n        If (e.State And TreeNodeStates.Focused) &lt;&gt; 0 Then\n            Dim focusPen As New Pen(Color.Black)\n            Try\n                focusPen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot\n                Dim focusBounds As Rectangle = NodeBounds(e.Node)\n                focusBounds.Size = New Size(focusBounds.Width - 1, _\n                    focusBounds.Height - 1)\n                e.Graphics.DrawRectangle(focusPen, focusBounds)\n            Finally\n                focusPen.Dispose()\n            End Try\n        End If\n\n    End Sub &#39;myTreeView_DrawNode\n\n    &#39; Selects a node that is clicked on its label or tag text.\n    Private Sub myTreeView_MouseDown(ByVal sender As Object, ByVal e As MouseEventArgs)\n        Dim clickedNode As TreeNode = myTreeView.GetNodeAt(e.X, e.Y)\n        If NodeBounds(clickedNode).Contains(e.X, e.Y) Then\n            myTreeView.SelectedNode = clickedNode\n        End If\n    End Sub &#39;myTreeView_MouseDown\n\n    &#39; Returns the bounds of the specified node, including the region \n    &#39; occupied by the node label and any node tag displayed.\n    Private Function NodeBounds(ByVal node As TreeNode) As Rectangle\n\n        &#39; Set the return value to the normal node bounds.\n        Dim bounds As Rectangle = node.Bounds\n        If (node.Tag IsNot Nothing) Then\n\n            &#39; Retrieve a Graphics object from the TreeView handle\n            &#39; and use it to calculate the display width of the tag.\n            Dim g As Graphics = myTreeView.CreateGraphics()\n            Dim tagWidth As Integer = CInt(g.MeasureString( _\n                node.Tag.ToString(), tagFont).Width) + 6\n\n            &#39; Adjust the node bounds using the calculated value.\n            bounds.Offset(tagWidth \\ 2, 0)\n            bounds = Rectangle.Inflate(bounds, tagWidth \\ 2, 0)\n            g.Dispose()\n        End If\n        Return bounds\n    End Function &#39;NodeBounds\n\nEnd Class &#39;TreeViewOwnerDraw \n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeViewOwnerDraw#1\">#using &lt;System.dll&gt;\n#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::Drawing;\nusing namespace System::Windows::Forms;\npublic ref class TreeViewOwnerDraw: public Form\n{\nprivate:\n   TreeView^ myTreeView;\n\n   // Create a Font object for the node tags.\n   System::Drawing::Font^ tagFont;\n\npublic:\n\n   TreeViewOwnerDraw()\n   {\n      tagFont = gcnew System::Drawing::Font( &quot;Helvetica&quot;,8,FontStyle::Bold );\n\n      // Create and initialize the TreeView control.\n      myTreeView = gcnew TreeView;\n      myTreeView-&gt;Dock = DockStyle::Fill;\n      myTreeView-&gt;BackColor = Color::Tan;\n      myTreeView-&gt;CheckBoxes = true;\n      \n      // Add nodes to the TreeView control.\n      TreeNode^ node;\n      for ( int x = 1; x &lt; 4; ++x )\n      {\n         // Add a root node to the TreeView control.\n         node = myTreeView-&gt;Nodes-&gt;Add( String::Format( &quot;Task {0}&quot;, x ) );\n         for ( int y = 1; y &lt; 4; ++y )\n         {\n            // Add a child node to the root node.\n            node-&gt;Nodes-&gt;Add( String::Format( &quot;Subtask {0}&quot;, y ) );\n         }\n      }\n      myTreeView-&gt;ExpandAll();\n      \n      // Add tags containing alert messages to a few nodes \n      // and set the node background color to highlight them.\n      myTreeView-&gt;Nodes[ 1 ]-&gt;Nodes[ 0 ]-&gt;Tag = &quot;urgent!&quot;;\n      myTreeView-&gt;Nodes[ 1 ]-&gt;Nodes[ 0 ]-&gt;BackColor = Color::Yellow;\n      myTreeView-&gt;SelectedNode = myTreeView-&gt;Nodes[ 1 ]-&gt;Nodes[ 0 ];\n      myTreeView-&gt;Nodes[ 2 ]-&gt;Nodes[ 1 ]-&gt;Tag = &quot;urgent!&quot;;\n      myTreeView-&gt;Nodes[ 2 ]-&gt;Nodes[ 1 ]-&gt;BackColor = Color::Yellow;\n      \n      // Configure the TreeView control for owner-draw and add\n      // a handler for the DrawNode event.\n      myTreeView-&gt;DrawMode = TreeViewDrawMode::OwnerDrawText;\n      myTreeView-&gt;DrawNode += gcnew DrawTreeNodeEventHandler( this, &amp;TreeViewOwnerDraw::myTreeView_DrawNode );\n      \n      // Add a handler for the MouseDown event so that a node can be \n      // selected by clicking the tag text as well as the node text.\n      myTreeView-&gt;MouseDown += gcnew MouseEventHandler( this, &amp;TreeViewOwnerDraw::myTreeView_MouseDown );\n      \n      // Initialize the form and add the TreeView control to it.\n      this-&gt;ClientSize = System::Drawing::Size( 292, 273 );\n      this-&gt;Controls-&gt;Add( myTreeView );\n   }\n\nprotected:\n   // Clean up any resources being used.        \n   ~TreeViewOwnerDraw()\n   {\n      if ( tagFont != nullptr )\n      {\n         delete tagFont;\n      }\n   }\n\n   // Draws a node.\nprivate:\n   void myTreeView_DrawNode( Object^ sender, DrawTreeNodeEventArgs^ e )\n   {\n      // Draw the background and node text for a selected node.\n      if ( (e-&gt;State &amp; TreeNodeStates::Selected) != (TreeNodeStates)0 )\n      {\n         // Draw the background of the selected node. The NodeBounds\n         // method makes the highlight rectangle large enough to\n         // include the text of a node tag, if one is present.\n         e-&gt;Graphics-&gt;FillRectangle( Brushes::Green, NodeBounds( e-&gt;Node ) );\n\n         // Retrieve the node font. If the node font has not been set,\n         // use the TreeView font.\n         System::Drawing::Font^ nodeFont = e-&gt;Node-&gt;NodeFont;\n         if ( nodeFont == nullptr )\n                  nodeFont = (dynamic_cast&lt;TreeView^&gt;(sender))-&gt;Font;\n\n         // Draw the node text.\n         e-&gt;Graphics-&gt;DrawString( e-&gt;Node-&gt;Text, nodeFont, Brushes::White, Rectangle::Inflate( e-&gt;Bounds, 2, 0 ) );\n      }\n      // Use the default background and node text.\n      else\n      {\n         e-&gt;DrawDefault = true;\n      }\n\n      // If a node tag is present, draw its string representation \n      // to the right of the label text.\n      if ( e-&gt;Node-&gt;Tag != nullptr )\n      {\n         e-&gt;Graphics-&gt;DrawString( e-&gt;Node-&gt;Tag-&gt;ToString(), tagFont, Brushes::Yellow, (float)e-&gt;Bounds.Right + 2, (float)e-&gt;Bounds.Top );\n      }\n\n      \n      // If the node has focus, draw the focus rectangle large, making\n      // it large enough to include the text of the node tag, if present.\n      if ( (e-&gt;State &amp; TreeNodeStates::Focused) != (TreeNodeStates)0 )\n      {\n         Pen^ focusPen = gcnew Pen( Color::Black );\n         try\n         {\n            focusPen-&gt;DashStyle = System::Drawing::Drawing2D::DashStyle::Dot;\n            Rectangle focusBounds = NodeBounds( e-&gt;Node );\n            focusBounds.Size = System::Drawing::Size( focusBounds.Width - 1, focusBounds.Height - 1 );\n            e-&gt;Graphics-&gt;DrawRectangle( focusPen, focusBounds );\n         }\n         finally\n         {\n            if ( focusPen )\n               delete safe_cast&lt;IDisposable^&gt;(focusPen);\n         }\n\n      }\n   }\n\n   // Selects a node that is clicked on its label or tag text.\n   void myTreeView_MouseDown( Object^ /*sender*/, MouseEventArgs^ e )\n   {\n      TreeNode^ clickedNode = myTreeView-&gt;GetNodeAt( e-&gt;X, e-&gt;Y );\n      if ( NodeBounds( clickedNode ).Contains( e-&gt;X, e-&gt;Y ) )\n      {\n         myTreeView-&gt;SelectedNode = clickedNode;\n      }\n   }\n\n   // Returns the bounds of the specified node, including the region \n   // occupied by the node label and any node tag displayed.\n   Rectangle NodeBounds( TreeNode^ node )\n   {\n      // Set the return value to the normal node bounds.\n      Rectangle bounds = node-&gt;Bounds;\n      if ( node-&gt;Tag != nullptr )\n      {\n         // Retrieve a Graphics object from the TreeView handle\n         // and use it to calculate the display width of the tag.\n         Graphics^ g = myTreeView-&gt;CreateGraphics();\n         int tagWidth = (int)g-&gt;MeasureString( node-&gt;Tag-&gt;ToString(), tagFont ).Width + 6;\n         \n         // Adjust the node bounds using the calculated value.\n         bounds.Offset( tagWidth / 2, 0 );\n         bounds = Rectangle::Inflate( bounds, tagWidth / 2, 0 );\n         g-&gt;~Graphics();\n      }\n\n      return bounds;\n   }\n};\n\n[STAThreadAttribute]\nint main()\n{\n   Application::Run( gcnew TreeViewOwnerDraw );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeViewOwnerDraw#1\">using System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\npublic class TreeViewOwnerDraw : Form\n{\n    private TreeView myTreeView;\n\n    // Create a Font object for the node tags.\n    Font tagFont = new Font(&quot;Helvetica&quot;, 8, FontStyle.Bold);\n\n    public TreeViewOwnerDraw()\n    {\n        // Create and initialize the TreeView control.\n        myTreeView = new TreeView();\n        myTreeView.Dock = DockStyle.Fill;\n        myTreeView.BackColor = Color.Tan;\n        myTreeView.CheckBoxes = true;\n\n        // Add nodes to the TreeView control.\n        TreeNode node;\n        for (int x = 1; x &lt; 4; ++x)\n        {\n            // Add a root node to the TreeView control.\n            node = myTreeView.Nodes.Add(String.Format(&quot;Task {0}&quot;, x));\n            for (int y = 1; y &lt; 4; ++y)\n            {\n                // Add a child node to the root node.\n                node.Nodes.Add(String.Format(&quot;Subtask {0}&quot;, y));\n            }\n        }\n        myTreeView.ExpandAll();\n\n        // Add tags containing alert messages to a few nodes \n        // and set the node background color to highlight them.\n        myTreeView.Nodes[1].Nodes[0].Tag = &quot;urgent!&quot;;\n        myTreeView.Nodes[1].Nodes[0].BackColor = Color.Yellow;\n        myTreeView.SelectedNode = myTreeView.Nodes[1].Nodes[0];\n        myTreeView.Nodes[2].Nodes[1].Tag = &quot;urgent!&quot;;\n        myTreeView.Nodes[2].Nodes[1].BackColor = Color.Yellow;\n\n        // Configure the TreeView control for owner-draw and add\n        // a handler for the DrawNode event.\n        myTreeView.DrawMode = TreeViewDrawMode.OwnerDrawText;\n        myTreeView.DrawNode += \n            new DrawTreeNodeEventHandler(myTreeView_DrawNode);\n\n        // Add a handler for the MouseDown event so that a node can be \n        // selected by clicking the tag text as well as the node text.\n        myTreeView.MouseDown += new MouseEventHandler(myTreeView_MouseDown);\n\n        // Initialize the form and add the TreeView control to it.\n        this.ClientSize = new Size(292, 273);\n        this.Controls.Add(myTreeView);\n    }\n\n    // Clean up any resources being used.        \n    protected override void Dispose(bool disposing)\n    {\n        if (disposing)\n        {\n            tagFont.Dispose();\n        }\n        base.Dispose(disposing);\n    }\n\n    [STAThreadAttribute()]\n    static void Main() \n    {\n        Application.Run(new TreeViewOwnerDraw());\n    }\n\n    // Draws a node.\n    private void myTreeView_DrawNode(\n        object sender, DrawTreeNodeEventArgs e)\n    {\n        // Draw the background and node text for a selected node.\n        if ((e.State &amp; TreeNodeStates.Selected) != 0)\n        {\n            // Draw the background of the selected node. The NodeBounds\n            // method makes the highlight rectangle large enough to\n            // include the text of a node tag, if one is present.\n            e.Graphics.FillRectangle(Brushes.Green, NodeBounds(e.Node));\n\n            // Retrieve the node font. If the node font has not been set,\n            // use the TreeView font.\n            Font nodeFont = e.Node.NodeFont;\n            if (nodeFont == null) nodeFont = ((TreeView)sender).Font;\n\n            // Draw the node text.\n            e.Graphics.DrawString(e.Node.Text, nodeFont, Brushes.White,\n                Rectangle.Inflate(e.Bounds, 2, 0));\n        }\n\n        // Use the default background and node text.\n        else \n        {\n            e.DrawDefault = true;\n        }\n\n        // If a node tag is present, draw its string representation \n        // to the right of the label text.\n        if (e.Node.Tag != null)\n        {\n            e.Graphics.DrawString(e.Node.Tag.ToString(), tagFont,\n                Brushes.Yellow, e.Bounds.Right + 2, e.Bounds.Top);\n        }\n\n        // If the node has focus, draw the focus rectangle large, making\n        // it large enough to include the text of the node tag, if present.\n        if ((e.State &amp; TreeNodeStates.Focused) != 0)\n        {\n            using (Pen focusPen = new Pen(Color.Black))\n            {\n                focusPen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot;\n                Rectangle focusBounds = NodeBounds(e.Node);\n                focusBounds.Size = new Size(focusBounds.Width - 1, \n                focusBounds.Height - 1);\n                e.Graphics.DrawRectangle(focusPen, focusBounds);\n            }\n        }\n    }\n\n    // Selects a node that is clicked on its label or tag text.\n    private void myTreeView_MouseDown(object sender, MouseEventArgs e)\n    {\n        TreeNode clickedNode = myTreeView.GetNodeAt(e.X, e.Y);\n        if (NodeBounds(clickedNode).Contains(e.X, e.Y))\n        {\n            myTreeView.SelectedNode = clickedNode;\n        }\n    }\n\n    // Returns the bounds of the specified node, including the region \n    // occupied by the node label and any node tag displayed.\n    private Rectangle NodeBounds(TreeNode node)\n    {\n        // Set the return value to the normal node bounds.\n        Rectangle bounds = node.Bounds;\n        if (node.Tag != null)\n        {\n            // Retrieve a Graphics object from the TreeView handle\n            // and use it to calculate the display width of the tag.\n            Graphics g = myTreeView.CreateGraphics(); \n            int tagWidth = (int)g.MeasureString\n                (node.Tag.ToString(), tagFont).Width + 6;\n\n            // Adjust the node bounds using the calculated value.\n            bounds.Offset(tagWidth/2, 0);\n            bounds = Rectangle.Inflate(bounds, tagWidth/2, 0);\n            g.Dispose();\n         }\n        \n        return bounds;\n        \n    }\n\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Use the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawNode\" data-linktype=\"relative-path\">DrawNode</a> event to customize the appearance of nodes in a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control using owner drawing.  </p>\n<p> The <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawNode\" data-linktype=\"relative-path\">DrawNode</a> event is raised by a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control when its <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawMode_\" data-linktype=\"relative-path\">DrawMode</a> property is set to <a class=\"xref\" href=\"system.windows.forms.treeviewdrawmode\" data-linktype=\"relative-path\">System.Windows.Forms.TreeViewDrawMode</a> or <a class=\"xref\" href=\"system.windows.forms.treeviewdrawmode\" data-linktype=\"relative-path\">System.Windows.Forms.TreeViewDrawMode</a> and a node is displayed or updated. The DrawTreeNodeEventArgs passed to the event handler contains information about the node to draw as well as providing methods to help you draw the node.  </p>\n<p> Use the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs#System_Windows_Forms_DrawTreeNodeEventArgs_State_\" data-linktype=\"relative-path\">State</a> or <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs#System_Windows_Forms_DrawTreeNodeEventArgs_Node_\" data-linktype=\"relative-path\">Node</a> properties to retrieve information about the node to draw. Use the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs#System_Windows_Forms_DrawTreeNodeEventArgs_Graphics_\" data-linktype=\"relative-path\">Graphics</a> property to do the actual drawing within the area specified by the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs#System_Windows_Forms_DrawTreeNodeEventArgs_Bounds_\" data-linktype=\"relative-path\">Bounds</a> property. To make the operating system draw a node that does not need to be owner drawn, set the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs#System_Windows_Forms_DrawTreeNodeEventArgs_DrawDefault_\" data-linktype=\"relative-path\">DrawDefault</a> property to <code>true</code>.  </p>\n<p> When the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawMode_\" data-linktype=\"relative-path\">DrawMode</a> property is set to <a class=\"xref\" href=\"system.windows.forms.treeviewdrawmode\" data-linktype=\"relative-path\">System.Windows.Forms.TreeViewDrawMode</a>, the area indicated by the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs#System_Windows_Forms_DrawTreeNodeEventArgs_Bounds_\" data-linktype=\"relative-path\">Bounds</a> property includes the label portion of the node only. When the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawMode_\" data-linktype=\"relative-path\">DrawMode</a> property is set to <a class=\"xref\" href=\"system.windows.forms.treeviewdrawmode\" data-linktype=\"relative-path\">System.Windows.Forms.TreeViewDrawMode</a>, the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs#System_Windows_Forms_DrawTreeNodeEventArgs_Bounds_\" data-linktype=\"relative-path\">Bounds</a> area includes the entire node, including the area typically used for icons, checkboxes, plus and minus signs, and lines connecting the nodes.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Windows_Forms_DrawTreeNodeEventArgs__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_DrawTreeNodeEventArgs__ctor_System_Drawing_Graphics_System_Windows_Forms_TreeNode_System_Drawing_Rectangle_System_Windows_Forms_TreeNodeStates_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">DrawTreeNodeEventArgs(Graphics, TreeNode, Rectangle, TreeNodeStates)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs\" data-linktype=\"relative-path\">DrawTreeNodeEventArgs</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public DrawTreeNodeEventArgs (System.Drawing.Graphics graphics, System.Windows.Forms.TreeNode node, System.Drawing.Rectangle bounds, System.Windows.Forms.TreeNodeStates state);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>graphics</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a> surface on which to draw.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>node</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> to draw.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>bounds</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a> within which to draw.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>state</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treenodestates\" data-linktype=\"relative-path\">TreeNodeStates</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A bitwise combination of the <a class=\"xref\" href=\"system.windows.forms.treenodestates\" data-linktype=\"relative-path\">TreeNodeStates</a> values indicating the current state of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> to draw.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Windows_Forms_DrawTreeNodeEventArgs_Bounds_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_DrawTreeNodeEventArgs_Bounds\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Bounds</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the size and location of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> to draw.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Drawing.Rectangle Bounds { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.drawing.rectangle\" data-linktype=\"relative-path\">Rectangle</a> that represents the bounds of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> to draw.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The location specified by this property is relative to the upper-left corner of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control.  </p>\n<p> When the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawMode_\" data-linktype=\"relative-path\">DrawMode</a> property is set to <a class=\"xref\" href=\"system.windows.forms.treeviewdrawmode\" data-linktype=\"relative-path\">TreeViewDrawMode</a>, the area specified by the Bounds property is the region in which a node can be clicked to select it. If you draw outside this hit test region, you should provide your own code for selecting a node when its visible area is clicked. You may also want to provide your own hit test code when the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawMode_\" data-linktype=\"relative-path\">DrawMode</a> property is set to <a class=\"xref\" href=\"system.windows.forms.treeviewdrawmode\" data-linktype=\"relative-path\">TreeViewDrawMode</a>. In this mode, the Bounds property encompasses the whole node across the entire width of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control, rather than the just hit test region.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Windows_Forms_DrawTreeNodeEventArgs_DrawDefault_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_DrawTreeNodeEventArgs_DrawDefault\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">DrawDefault</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value indicating whether the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> should be drawn by the operating system rather than being owner drawn.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool DrawDefault { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the node should be drawn by the operating system; <code>false</code> if the node will be drawn in the event handler. The default value is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Set this property to <code>true</code> for nodes that you do not want to customize when you handle the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawNode\" data-linktype=\"relative-path\">DrawNode</a> event. For example, this is useful when you want to customize only nodes that are in a specific state.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Windows_Forms_DrawTreeNodeEventArgs_Graphics_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_DrawTreeNodeEventArgs_Graphics\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Graphics</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the <a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a> object used to draw the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Drawing.Graphics Graphics { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a> used to draw the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.drawing.graphics\" data-linktype=\"relative-path\">Graphics</a> class provides properties and methods useful for drawing on the display device.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Windows_Forms_DrawTreeNodeEventArgs_Node_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_DrawTreeNodeEventArgs_Node\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Node</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> to draw.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Windows.Forms.TreeNode Node { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> to draw.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use this property to access the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> object to draw. This is useful when the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs#System_Windows_Forms_DrawTreeNodeEventArgs_State_\" data-linktype=\"relative-path\">State</a> property does not provide adequate information to meet your needs. The <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs#System_Windows_Forms_DrawTreeNodeEventArgs_State_\" data-linktype=\"relative-path\">State</a> property provides only basic state information that you can use, for example, to determine whether a node is selected, checked, or focused. The Node property, on the other hand, allows you to access all members of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> object. You must access the node directly, for example, when you want to determine its expansion state.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Windows_Forms_DrawTreeNodeEventArgs_State_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_DrawTreeNodeEventArgs_State\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">State</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the current state of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> to draw.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Windows.Forms.TreeNodeStates State { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.treenodestates\" data-linktype=\"relative-path\">TreeNodeStates</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A bitwise combination of the <a class=\"xref\" href=\"system.windows.forms.treenodestates\" data-linktype=\"relative-path\">TreeNodeStates</a> values indicating the current state of the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use this property to check whether the <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a> object to draw is in a particular state. This property provides only basic state information about the node. You can use this property, for example, to determine whether a node is selected, checked, or focused. If you need to know more, retrieve the node through the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs#System_Windows_Forms_DrawTreeNodeEventArgs_Node_\" data-linktype=\"relative-path\">Node</a> property. For example, to determine whether the node is expanded, you must retrieve the node and check the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_IsExpanded_\" data-linktype=\"relative-path\">IsExpanded</a> property.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.DrawTreeNodeEventArgs.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DrawTreeNodeEventArgs\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DrawTreeNodeEventArgs..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DrawTreeNodeEventArgs.Bounds\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DrawTreeNodeEventArgs.DrawDefault\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DrawTreeNodeEventArgs.Graphics\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DrawTreeNodeEventArgs.Node\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DrawTreeNodeEventArgs.State\">\r\n<meta name=\"APILocation\" content=\"System.Windows.Forms.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"26f8fab5-574c-ffca-00b1-7ef225e86f8e\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides data for the  event.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.windows.forms/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.DrawTreeNodeEventArgs\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.DrawTreeNodeEventArgs.yml","open_to_public_contributors":false,"api_name":["System.Windows.Forms.DrawTreeNodeEventArgs","System.Windows.Forms.DrawTreeNodeEventArgs..ctor","System.Windows.Forms.DrawTreeNodeEventArgs.Bounds","System.Windows.Forms.DrawTreeNodeEventArgs.DrawDefault","System.Windows.Forms.DrawTreeNodeEventArgs.Graphics","System.Windows.Forms.DrawTreeNodeEventArgs.Node","System.Windows.Forms.DrawTreeNodeEventArgs.State"],"api_location":["System.Windows.Forms.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.DrawTreeNodeEventArgs","System::Windows::Forms::DrawTreeNodeEventArgs","System.Windows.Forms.DrawTreeNodeEventArgs.#ctor","System::Windows::Forms::DrawTreeNodeEventArgs::#ctor","System.Windows.Forms.DrawTreeNodeEventArgs.Bounds","System::Windows::Forms::DrawTreeNodeEventArgs::Bounds","System.Windows.Forms.DrawTreeNodeEventArgs.DrawDefault","System::Windows::Forms::DrawTreeNodeEventArgs::DrawDefault","System.Windows.Forms.DrawTreeNodeEventArgs.Graphics","System::Windows::Forms::DrawTreeNodeEventArgs::Graphics","System.Windows.Forms.DrawTreeNodeEventArgs.Node","System::Windows::Forms::DrawTreeNodeEventArgs::Node","System.Windows.Forms.DrawTreeNodeEventArgs.State","System::Windows::Forms::DrawTreeNodeEventArgs::State"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"26f8fab5-574c-ffca-00b1-7ef225e86f8e","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Windows.Forms/DrawTreeNodeEventArgs.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DrawTreeNodeEventArgs class | Microsoft Docs","_op_ogTitle":"DrawTreeNodeEventArgs class","description":"Provides data for the  event.\n","toc_asset_id":"api/_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.DrawTreeNodeEventArgs","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.drawtreenodeeventargs","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.drawtreenodeeventargs","fileRelativePath":"api/System.Windows.Forms.DrawTreeNodeEventArgs.html"},"themesRelativePathToOutputRoot":"_themes/"}