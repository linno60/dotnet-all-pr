{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">XmlValueGetter</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>A <code>delegate</code> used by the <a class=\"xref\" href=\"system.xml.schema.xmlschemavalidator\" data-linktype=\"relative-path\">XmlSchemaValidator</a> class to pass attribute, text, and white space values as a Common Language Runtime (CLR) type compatible with the XML Schema Definition Language (XSD) type of the attribute, text, or white space.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate object XmlValueGetter();</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">System.Delegate</a></span></div><span class=\"lang-csharp\">XmlValueGetter</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example validates the <code>contosoBooks.xml</code> file against the <code>contosoBooks.xsd</code> schema. The example uses the <a class=\"xref\" href=\"system.xml.serialization.xmlserializer\" data-linktype=\"relative-path\">XmlSerializer</a> class to deserialize the <code>contosoBooks.xml</code> file and pass the value of the nodes to the methods of the <a class=\"xref\" href=\"system.xml.schema.xmlschemavalidator\" data-linktype=\"relative-path\">XmlSchemaValidator</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"XmlSchemaValidatorExamples#1\">using System;\nusing System.Xml;\nusing System.Xml.Schema;\nusing System.Xml.Serialization;\nusing System.Collections;\n\nnamespace Microsoft.Samples.Xml.Schema\n{\n    class XmlSchemaValidatorExamples\n    {\n        static void Main()\n        {\n            // The XML document to deserialize into the XmlSerializer object.\n            XmlReader reader = XmlReader.Create(&quot;contosoBooks.xml&quot;);\n\n            // The XmlSerializer object.\n            XmlSerializer serializer = new XmlSerializer(typeof(ContosoBooks));\n            ContosoBooks books = (ContosoBooks)serializer.Deserialize(reader);\n\n            // The XmlSchemaSet object containing the schema used to validate the XML document.\n            XmlSchemaSet schemaSet = new XmlSchemaSet();\n            schemaSet.Add(&quot;http://www.contoso.com/books&quot;, &quot;contosoBooks.xsd&quot;);\n\n            // The XmlNamespaceManager object used to handle namespaces.\n            XmlNamespaceManager manager = new XmlNamespaceManager(reader.NameTable);\n\n            // Assign a ValidationEventHandler to handle schema validation warnings and errors.\n            XmlSchemaValidator validator = new XmlSchemaValidator(reader.NameTable, schemaSet, manager, XmlSchemaValidationFlags.None);\n            validator.ValidationEventHandler += new ValidationEventHandler(SchemaValidationEventHandler);\n\n            // Initialize the XmlSchemaValidator object.\n            validator.Initialize();\n\n            // Validate the bookstore element, verify that all required attributes are present\n            // and prepare to validate child content.\n            validator.ValidateElement(&quot;bookstore&quot;, &quot;http://www.contoso.com/books&quot;, null);\n            validator.GetUnspecifiedDefaultAttributes(new ArrayList());\n            validator.ValidateEndOfAttributes(null);\n\n            // Get the next exptected element in the bookstore context.\n            XmlSchemaParticle[] particles = validator.GetExpectedParticles();\n            XmlSchemaElement nextElement = particles[0] as XmlSchemaElement;\n            Console.WriteLine(&quot;Expected Element: &#39;{0}&#39;&quot;, nextElement.Name);\n\n            foreach (BookType book in books.Book)\n            {\n                // Validate the book element.\n                validator.ValidateElement(&quot;book&quot;, &quot;http://www.contoso.com/books&quot;, null);\n\n                // Get the exptected attributes for the book element.\n                Console.Write(&quot;\\nExpected attributes: &quot;);\n                XmlSchemaAttribute[] attributes = validator.GetExpectedAttributes();\n                foreach (XmlSchemaAttribute attribute in attributes)\n                {\n                    Console.Write(&quot;&#39;{0}&#39; &quot;, attribute.Name);\n                }\n                Console.WriteLine();\n\n                // Validate the genre attribute and display its post schema validation information.\n                if (book.Genre != null)\n                {\n                    validator.ValidateAttribute(&quot;genre&quot;, &quot;&quot;, book.Genre, schemaInfo);\n                }\n                DisplaySchemaInfo();\n\n                // Validate the publicationdate attribute and display its post schema validation information.\n                if (book.PublicationDate != null)\n                {\n                    validator.ValidateAttribute(&quot;publicationdate&quot;, &quot;&quot;, dateTimeGetter(book.PublicationDate), schemaInfo);\n                }\n                DisplaySchemaInfo();\n\n                // Validate the ISBN attribute and display its post schema validation information.\n                if (book.Isbn != null)\n                {\n                    validator.ValidateAttribute(&quot;ISBN&quot;, &quot;&quot;, book.Isbn, schemaInfo);\n                }\n                DisplaySchemaInfo();\n\n                // After validating all the attributes for the current element with ValidateAttribute method,\n                // you must call GetUnspecifiedDefaultAttributes to validate the default attributes.\n                validator.GetUnspecifiedDefaultAttributes(new ArrayList());\n\n                // Verify that all required attributes of the book element are present\n                // and prepare to validate child content.\n                validator.ValidateEndOfAttributes(null);\n\n                // Validate the title element and its content.\n                validator.ValidateElement(&quot;title&quot;, &quot;http://www.contoso.com/books&quot;, null);\n                validator.ValidateEndElement(null, book.Title);\n\n                // Validate the author element, verify that all required attributes are present\n                // and prepare to validate child content.\n                validator.ValidateElement(&quot;author&quot;, &quot;http://www.contoso.com/books&quot;, null);\n                validator.GetUnspecifiedDefaultAttributes(new ArrayList());\n                validator.ValidateEndOfAttributes(null);\n\n                if (book.Author.Name != null)\n                {\n                    // Validate the name element and its content.\n                    validator.ValidateElement(&quot;name&quot;, &quot;http://www.contoso.com/books&quot;, null);\n                    validator.ValidateEndElement(null, book.Author.Name);\n                }\n\n                if (book.Author.FirstName != null)\n                {\n                    // Validate the first-name element and its content.\n                    validator.ValidateElement(&quot;first-name&quot;, &quot;http://www.contoso.com/books&quot;, null);\n                    validator.ValidateEndElement(null, book.Author.FirstName);\n\n                }\n\n                if (book.Author.LastName != null)\n                {\n                    // Validate the last-name element and its content.\n                    validator.ValidateElement(&quot;last-name&quot;, &quot;http://www.contoso.com/books&quot;, null);\n                    validator.ValidateEndElement(null, book.Author.LastName);\n                }\n\n                // Validate the content of the author element.\n                validator.ValidateEndElement(null);\n\n                // Validate the price element and its content.\n                validator.ValidateElement(&quot;price&quot;, &quot;http://www.contoso.com/books&quot;, null);\n                validator.ValidateEndElement(null, book.Price);\n\n                // Validate the content of the book element.\n                validator.ValidateEndElement(null);\n            }\n\n            // Validate the content of the bookstore element.\n            validator.ValidateEndElement(null);\n\n            // Close the XmlReader object.\n            reader.Close();\n        }\n\n        static XmlSchemaInfo schemaInfo = new XmlSchemaInfo();\n        static object dateTimeGetterContent;\n\n        static object dateTimeGetterHandle()\n        {\n            return dateTimeGetterContent;\n        }\n\n        static XmlValueGetter dateTimeGetter(DateTime dateTime)\n        {\n            dateTimeGetterContent = dateTime;\n            return new XmlValueGetter(dateTimeGetterHandle);\n        }\n\n        static void DisplaySchemaInfo()\n        {\n            if (schemaInfo.SchemaElement != null)\n            {\n                Console.WriteLine(&quot;Element &#39;{0}&#39; with type &#39;{1}&#39; is &#39;{2}&#39;&quot;,\n                    schemaInfo.SchemaElement.Name, schemaInfo.SchemaType, schemaInfo.Validity);\n            }\n            else if (schemaInfo.SchemaAttribute != null)\n            {\n                Console.WriteLine(&quot;Attribute &#39;{0}&#39; with type &#39;{1}&#39; is &#39;{2}&#39;&quot;,\n                    schemaInfo.SchemaAttribute.Name, schemaInfo.SchemaType, schemaInfo.Validity);\n            }\n        }\n\n        static void SchemaValidationEventHandler(object sender, ValidationEventArgs e)\n        {\n            switch (e.Severity)\n            {\n                case XmlSeverityType.Error:\n                    Console.WriteLine(&quot;\\nError: {0}&quot;, e.Message);\n                    break;\n                case XmlSeverityType.Warning:\n                    Console.WriteLine(&quot;\\nWarning: {0}&quot;, e.Message);\n                    break;\n            }\n        }\n    }\n\n    [XmlRootAttribute(&quot;bookstore&quot;, Namespace = &quot;http://www.contoso.com/books&quot;, IsNullable = false)]\n    public class ContosoBooks\n    {\n        [XmlElementAttribute(&quot;book&quot;)]\n        public BookType[] Book;\n    }\n\n    public class BookType\n    {\n        [XmlAttributeAttribute(&quot;genre&quot;)]\n        public string Genre;\n\n        [XmlAttributeAttribute(&quot;publicationdate&quot;, DataType = &quot;date&quot;)]\n        public DateTime PublicationDate;\n\n        [XmlAttributeAttribute(&quot;ISBN&quot;)]\n        public string Isbn;\n\n        [XmlElementAttribute(&quot;title&quot;)]\n        public string Title;\n\n        [XmlElementAttribute(&quot;author&quot;)]\n        public BookAuthor Author;\n\n        [XmlElementAttribute(&quot;price&quot;)]\n        public Decimal Price;\n    }\n\n    public class BookAuthor\n    {\n        [XmlElementAttribute(&quot;name&quot;)]\n        public string Name;\n\n        [XmlElementAttribute(&quot;first-name&quot;)]\n        public string FirstName;\n\n        [XmlElementAttribute(&quot;last-name&quot;)]\n        public string LastName;\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"XmlSchemaValidatorExamples#1\">Imports System\nImports System.Xml\nImports System.Xml.Schema\nImports System.Xml.Serialization\nImports System.Collections\n\n\nNamespace Microsoft.Samples.Xml.Schema\n\n    Class XmlSchemaValidatorExamples\n\n        Shared Sub Main()\n\n            &#39; The XML document to deserialize into the XmlSerializer object.\n            Dim reader As XmlReader = XmlReader.Create(&quot;contosoBooks.xml&quot;)\n\n            &#39; The XmlSerializer object.\n            Dim serializer As XmlSerializer = New XmlSerializer(GetType(ContosoBooks))\n            Dim books As ContosoBooks = CType(serializer.Deserialize(reader), ContosoBooks)\n\n            &#39; The XmlSchemaSet object containing the schema used to validate the XML document.\n            Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()\n            schemaSet.Add(&quot;http://www.contoso.com/books&quot;, &quot;contosoBooks.xsd&quot;)\n\n            &#39; The XmlNamespaceManager object used to handle namespaces.\n            Dim manager As XmlNamespaceManager = New XmlNamespaceManager(reader.NameTable)\n\n            &#39; Assign a ValidationEventHandler to handle schema validation warnings and errors.\n            Dim validator As XmlSchemaValidator = New XmlSchemaValidator(reader.NameTable, schemaSet, manager, XmlSchemaValidationFlags.None)\n            &#39;validator.ValidationEventHandler += New ValidationEventHandler(SchemaValidationEventHandler)\n            AddHandler validator.ValidationEventHandler, AddressOf SchemaValidationEventHandler\n\n            &#39; Initialize the XmlSchemaValidator object.\n            validator.Initialize()\n\n            &#39; Validate the bookstore element, verify that all required attributes are present\n            &#39; and prepare to validate child content.\n            validator.ValidateElement(&quot;bookstore&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n\n            validator.GetUnspecifiedDefaultAttributes(New ArrayList())\n            validator.ValidateEndOfAttributes(Nothing)\n\n            &#39; Get the next exptected element in the bookstore context.\n            Dim particles() As XmlSchemaParticle = validator.GetExpectedParticles()\n            Dim nextElement As XmlSchemaElement = particles(0)\n            Console.WriteLine(&quot;Expected Element: &#39;{0}&#39;&quot;, nextElement.Name)\n\n            For Each book As BookType In books.book\n                &#39; Validate the book element.\n                validator.ValidateElement(&quot;book&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n\n                &#39; Get the exptected attributes for the book element.\n                Console.Write(vbCrLf &amp; &quot;Expected attributes: &quot;)\n                Dim attributes() As XmlSchemaAttribute = validator.GetExpectedAttributes()\n                For Each attribute As XmlSchemaAttribute In attributes\n                    Console.Write(&quot;&#39;{0}&#39; &quot;, attribute.Name)\n                Next\n                Console.WriteLine()\n\n                &#39; Validate the genre attribute and display its post schema validation information.\n                If Not book.Genre Is Nothing Then\n                    validator.ValidateAttribute(&quot;genre&quot;, &quot;&quot;, book.Genre, schemaInfo)\n                End If\n                DisplaySchemaInfo()\n\n                &#39; Validate the publicationdate attribute and display its post schema validation information.\n                If Not book.PublicationDate = Nothing Then\n                    validator.ValidateAttribute(&quot;publicationdate&quot;, &quot;&quot;, dateTimeGetter(book.PublicationDate), schemaInfo)\n                End If\n                DisplaySchemaInfo()\n\n                &#39; Validate the ISBN attribute and display its post schema validation information.\n                If Not book.Isbn Is Nothing Then\n                    validator.ValidateAttribute(&quot;ISBN&quot;, &quot;&quot;, book.Isbn, schemaInfo)\n                End If\n                DisplaySchemaInfo()\n    \n                &#39; After validating all the attributes for the current element with ValidateAttribute method,\n                &#39; you must call GetUnspecifiedDefaultAttributes to validate the default attributes.\n                validator.GetUnspecifiedDefaultAttributes(New ArrayList())\n\n                &#39; Verify that all required attributes of the book element are present\n                &#39; and prepare to validate child content.\n                validator.ValidateEndOfAttributes(Nothing)\n\n                &#39; Validate the title element and its content.\n                validator.ValidateElement(&quot;title&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n                validator.ValidateEndElement(Nothing, book.Title)\n\n                &#39; Validate the author element, verify that all required attributes are present\n                &#39; and prepare to validate child content.\n                validator.ValidateElement(&quot;author&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n\n                validator.GetUnspecifiedDefaultAttributes(New ArrayList())\n                validator.ValidateEndOfAttributes(Nothing)\n\n                If Not book.Author.Name Is Nothing Then\n                    &#39; Validate the name element and its content.\n                    validator.ValidateElement(&quot;name&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n                    validator.ValidateEndElement(Nothing, book.Author.Name)\n                End If\n\n                If Not book.Author.FirstName Is Nothing Then\n                    &#39; Validate the first-name element and its content.\n                    validator.ValidateElement(&quot;first-name&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n                    validator.ValidateEndElement(Nothing, book.Author.FirstName)\n\n                End If\n\n                If Not book.Author.LastName Is Nothing Then\n                    &#39; Validate the last-name element and its content.\n                    validator.ValidateElement(&quot;last-name&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n                    validator.ValidateEndElement(Nothing, book.Author.LastName)\n                End If\n\n                &#39; Validate the content of the author element.\n                validator.ValidateEndElement(Nothing)\n\n                &#39; Validate the price element and its content.\n                validator.ValidateElement(&quot;price&quot;, &quot;http://www.contoso.com/books&quot;, Nothing)\n                validator.ValidateEndElement(Nothing, book.Price)\n\n                &#39; Validate the content of the book element.\n                validator.ValidateEndElement(Nothing)\n            Next\n\n            &#39; Validate the content of the bookstore element.\n            validator.ValidateEndElement(Nothing)\n\n            &#39; Close the XmlReader object.\n            reader.Close()\n\n        End Sub\n\n        Shared schemaInfo As XmlSchemaInfo = New XmlSchemaInfo()\n        Shared dateTimeGetterContent As Object\n\n        Shared Function dateTimeGetterHandle() As Object\n\n            Return dateTimeGetterContent\n\n        End Function\n\n        Shared Function dateTimeGetter(ByVal dateTime As DateTime) As XmlValueGetter\n\n            dateTimeGetterContent = dateTime\n            Return New XmlValueGetter(AddressOf dateTimeGetterHandle)\n\n        End Function\n\n        Shared Sub DisplaySchemaInfo()\n\n            If Not schemaInfo.SchemaElement Is Nothing Then\n                Console.WriteLine(&quot;Element &#39;{0}&#39; with type &#39;{1}&#39; is &#39;{2}&#39;&quot;, schemaInfo.SchemaElement.Name, schemaInfo.SchemaType, schemaInfo.Validity)\n            ElseIf Not schemaInfo.SchemaAttribute Is Nothing Then\n                Console.WriteLine(&quot;Attribute &#39;{0}&#39; with type &#39;{1}&#39; is &#39;{2}&#39;&quot;, schemaInfo.SchemaAttribute.Name, schemaInfo.SchemaType, schemaInfo.Validity)\n            End If\n\n        End Sub\n\n        Shared Sub SchemaValidationEventHandler(ByVal sender As Object, ByVal e As ValidationEventArgs)\n\n            Select Case e.Severity\n                Case XmlSeverityType.Error\n                    Console.WriteLine(vbCrLf &amp; &quot;Error: {0}&quot;, e.Message)\n                    Exit Sub\n                Case XmlSeverityType.Warning\n                    Console.WriteLine(vbCrLf &amp; &quot;Warning: {0}&quot;, e.Message)\n                    Exit Sub\n            End Select\n\n        End Sub\n\n    End Class\n\n    &lt;XmlRootAttribute(&quot;bookstore&quot;, Namespace:=&quot;http://www.contoso.com/books&quot;, IsNullable:=False)&gt; _\n    Public Class ContosoBooks\n\n        &lt;XmlElementAttribute(&quot;book&quot;)&gt; _\n        Public book() As BookType\n\n    End Class\n\n    Public Class BookType\n\n        &lt;XmlAttributeAttribute(&quot;genre&quot;)&gt; _\n        Public Genre As String\n\n        &lt;XmlAttributeAttribute(&quot;publicationdate&quot;, DataType:=&quot;date&quot;)&gt; _\n        Public PublicationDate As DateTime\n\n        &lt;XmlAttributeAttribute(&quot;ISBN&quot;)&gt; _\n        Public Isbn As String\n\n        &lt;XmlElementAttribute(&quot;title&quot;)&gt; _\n        Public Title As String\n\n        &lt;XmlElementAttribute(&quot;author&quot;)&gt; _\n        Public Author As BookAuthor\n\n        &lt;XmlElementAttribute(&quot;price&quot;)&gt; _\n        Public Price As Decimal\n\n    End Class\n\n    Public Class BookAuthor\n\n        &lt;XmlElementAttribute(&quot;name&quot;)&gt; _\n        Public Name As String\n\n        &lt;XmlElementAttribute(&quot;first-name&quot;)&gt; _\n        Public FirstName As String\n\n        &lt;XmlElementAttribute(&quot;last-name&quot;)&gt; _\n        Public LastName As String\n\n    End Class\n\nEnd Namespace\n</code></pre><p> The example takes the <code>contosoBooks.xml</code> file as input.  </p>\n<pre><code class=\"lang-xml\" name=\"XPathXMLExamples#2\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;\n&lt;bookstore xmlns=&quot;http://www.contoso.com/books&quot;&gt;\n    &lt;book genre=&quot;autobiography&quot; publicationdate=&quot;1981-03-22&quot; ISBN=&quot;1-861003-11-0&quot;&gt;\n        &lt;title&gt;The Autobiography of Benjamin Franklin&lt;/title&gt;\n        &lt;author&gt;\n            &lt;first-name&gt;Benjamin&lt;/first-name&gt;\n            &lt;last-name&gt;Franklin&lt;/last-name&gt;\n        &lt;/author&gt;\n        &lt;price&gt;8.99&lt;/price&gt;\n    &lt;/book&gt;\n    &lt;book genre=&quot;novel&quot; publicationdate=&quot;1967-11-17&quot; ISBN=&quot;0-201-63361-2&quot;&gt;\n        &lt;title&gt;The Confidence Man&lt;/title&gt;\n        &lt;author&gt;\n            &lt;first-name&gt;Herman&lt;/first-name&gt;\n            &lt;last-name&gt;Melville&lt;/last-name&gt;\n        &lt;/author&gt;\n        &lt;price&gt;11.99&lt;/price&gt;\n    &lt;/book&gt;\n    &lt;book genre=&quot;philosophy&quot; publicationdate=&quot;1991-02-15&quot; ISBN=&quot;1-861001-57-6&quot;&gt;\n        &lt;title&gt;The Gorgias&lt;/title&gt;\n        &lt;author&gt;\n            &lt;name&gt;Plato&lt;/name&gt;\n        &lt;/author&gt;\n        &lt;price&gt;9.99&lt;/price&gt;\n    &lt;/book&gt;\n&lt;/bookstore&gt;\n</code></pre><p> The example also takes the <code>contosoBooks.xsd</code> as an input.  </p>\n<pre><code class=\"lang-xml\" name=\"XPathXMLExamples#3\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;xs:schema attributeFormDefault=&quot;unqualified&quot; elementFormDefault=&quot;qualified&quot; targetNamespace=&quot;http://www.contoso.com/books&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;\n    &lt;xs:element name=&quot;bookstore&quot;&gt;\n        &lt;xs:complexType&gt;\n            &lt;xs:sequence&gt;\n                &lt;xs:element maxOccurs=&quot;unbounded&quot; name=&quot;book&quot;&gt;\n                    &lt;xs:complexType&gt;\n                        &lt;xs:sequence&gt;\n                            &lt;xs:element name=&quot;title&quot; type=&quot;xs:string&quot; /&gt;\n                            &lt;xs:element name=&quot;author&quot;&gt;\n                                &lt;xs:complexType&gt;\n                                    &lt;xs:sequence&gt;\n                                        &lt;xs:element minOccurs=&quot;0&quot; name=&quot;name&quot; type=&quot;xs:string&quot; /&gt;\n                                        &lt;xs:element minOccurs=&quot;0&quot; name=&quot;first-name&quot; type=&quot;xs:string&quot; /&gt;\n                                        &lt;xs:element minOccurs=&quot;0&quot; name=&quot;last-name&quot; type=&quot;xs:string&quot; /&gt;\n                                    &lt;/xs:sequence&gt;\n                                &lt;/xs:complexType&gt;\n                            &lt;/xs:element&gt;\n                            &lt;xs:element name=&quot;price&quot; type=&quot;xs:decimal&quot; /&gt;\n                        &lt;/xs:sequence&gt;\n                        &lt;xs:attribute name=&quot;genre&quot; type=&quot;xs:string&quot; use=&quot;required&quot; /&gt;\n                        &lt;xs:attribute name=&quot;publicationdate&quot; type=&quot;xs:date&quot; use=&quot;required&quot; /&gt;\n                        &lt;xs:attribute name=&quot;ISBN&quot; type=&quot;xs:string&quot; use=&quot;required&quot; /&gt;\n                    &lt;/xs:complexType&gt;\n                &lt;/xs:element&gt;\n            &lt;/xs:sequence&gt;\n        &lt;/xs:complexType&gt;\n    &lt;/xs:element&gt;\n&lt;/xs:schema&gt;\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>An XmlValueGetter<code>delegate</code> is useful if the CLR value of an attribute, text, or white space node is already available, and avoids the cost of converting it to a <code>string</code> and then reparsing it again for validation.  </p>\n<p> For more information about the <a class=\"xref\" href=\"system.xml.schema.xmlschemavalidator\" data-linktype=\"relative-path\">XmlSchemaValidator</a> class, see the <a href=\"../topic/xmlschemavalidator%20push-based%20validation\" data-linktype=\"relative-path\">XmlSchemaValidator Push-Based Validation</a> topic, or the <a class=\"xref\" href=\"system.xml.schema.xmlschemavalidator\" data-linktype=\"relative-path\">XmlSchemaValidator</a> class reference documentation.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Xml.Schema.XmlValueGetter.yml\">\r\n<meta name=\"APIName\" content=\"System.Xml.Schema.XmlValueGetter\">\r\n<meta name=\"APIName\" content=\"System.Xml.Schema.XmlValueGetter..ctor\">\r\n<meta name=\"APIName\" content=\"System.Xml.Schema.XmlValueGetter.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Xml.Schema.XmlValueGetter.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Xml.Schema.XmlValueGetter.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-24 01:41 AM\">\r\n<meta name=\"document_id\" content=\"2e943437-d532-0763-ad86-0f54195051b4\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"A delegate used by the  class to pass attribute, text, and white space values as a Common Language Runtime (CLR) type compatible with the XML Schema Definition Language (XSD) type of the attribute, t…\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.xml.schema/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Xml.Schema.XmlValueGetter\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Xml.Schema.XmlValueGetter.yml","open_to_public_contributors":false,"api_name":["System.Xml.Schema.XmlValueGetter","System.Xml.Schema.XmlValueGetter..ctor","System.Xml.Schema.XmlValueGetter.Invoke","System.Xml.Schema.XmlValueGetter.BeginInvoke","System.Xml.Schema.XmlValueGetter.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Xml.Schema.XmlValueGetter","System::Xml::Schema::XmlValueGetter"],"dev_langs":["csharp"],"updated_at":"2017-03-24 01:41 AM","document_id":"2e943437-d532-0763-ad86-0f54195051b4","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Xml.Schema/XmlValueGetter.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"XmlValueGetter delegate | Microsoft Docs","_op_ogTitle":"XmlValueGetter delegate","description":"A delegate used by the  class to pass attribute, text, and white space values as a Common Language Runtime (CLR) type compatible with the XML Schema Definition Language (XSD) type of the attribute, t…","toc_asset_id":"api/_splitted/System.Xml.Schema/toc.json","toc_rel":"_splitted/System.Xml.Schema/toc.json","source_url":"","ms.assetid":"System.Xml.Schema.XmlValueGetter","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.xml.schema.xmlvaluegetter","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.xml.schema.xmlvaluegetter","fileRelativePath":"api/System.Xml.Schema.XmlValueGetter.html"},"themesRelativePathToOutputRoot":"_themes/"}