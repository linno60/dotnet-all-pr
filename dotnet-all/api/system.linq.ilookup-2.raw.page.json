{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ILookup&lt;TKey,TElement&gt;</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Defines an indexer, size property, and Boolean search method for data structures that map keys to <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> sequences of values.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public interface ILookup&lt;TKey,TElement&gt; : System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</code></pre>\r\n  \r\n  \r\n  \r\n  \t\t<h3 class=\"accented\">Type Parameters</h3>\r\n  \t\t<table class=\"nameValue stack\">\r\n  \t\t\t<tr>\r\n  \t\t\t<td>TKey</td>\r\n  \t\t\t<td><p>The type of the keys in the ILookup(TKey,.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t\t<tr>\r\n  \t\t\t<td>TElement</td>\r\n  \t\t\t<td><p>The type of the elements in the <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> sequences that make up the values in the ILookup(TKey,.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t</table>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example creates an ILookup(TKey, object and iterates through its contents.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Linq.ILookup#1\">class Package\n{\n    public string Company { get; set; }\n    public double Weight { get; set; }\n    public long TrackingNumber { get; set; }\n}\n\npublic static void ILookupExample()\n{\n    // Create a list of Packages to put into an ILookup data structure.\n    List&lt;Package&gt; packages = new List&lt;Package&gt; { new Package { Company = &quot;Coho Vineyard&quot;, Weight = 25.2, TrackingNumber = 89453312L },\n                                                 new Package { Company = &quot;Lucerne Publishing&quot;, Weight = 18.7, TrackingNumber = 89112755L },\n                                                 new Package { Company = &quot;Wingtip Toys&quot;, Weight = 6.0, TrackingNumber = 299456122L },\n                                                 new Package { Company = &quot;Contoso Pharmaceuticals&quot;, Weight = 9.3, TrackingNumber = 670053128L },\n                                                 new Package { Company = &quot;Wide World Importers&quot;, Weight = 33.8, TrackingNumber = 4665518773L } };\n\n    // Create a Lookup to organize the packages. Use the first character of Company as the key value.\n    // Select Company appended to TrackingNumber for each element value in the ILookup object.\n    ILookup&lt;char, string&gt; packageLookup = packages.ToLookup(\n        p =&gt; Convert.ToChar(p.Company.Substring(0, 1)),\n        p =&gt; p.Company + &quot; &quot; + p.TrackingNumber\n        );\n\n    // Iterate through each value in the ILookup and output the contents.\n    foreach (var packageGroup in packageLookup)\n    {\n        // Print the key value.\n        Console.WriteLine(packageGroup.Key);\n        // Iterate through each value in the collection.\n        foreach (string str in packageGroup)\n            Console.WriteLine(&quot;    {0}&quot;, str);\n    }\n                \n    // This code produces the following output:\n    //\n    // C\n    //     Coho Vineyard 89453312\n    //     Contoso Pharmaceuticals 670053128\n    // L\n    //     Lucerne Publishing 89112755\n    // W\n    //     Wingtip Toys 299456122\n    //     Wide World Importers 4665518773\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Linq.ILookup#1\">Structure Package\n    Public Company As String\n    Public Weight As Double\n    Public TrackingNumber As Long\nEnd Structure\n\nSub ILookupExample()\n    &#39; Create a list of Packages to put into an ILookup data structure.\n    Dim packages As New System.Collections.Generic.List(Of Package)(New Package() _\n        {New Package With {.Company = &quot;Coho Vineyard&quot;, .Weight = 25.2, .TrackingNumber = 89453312L}, _\n          New Package With {.Company = &quot;Lucerne Publishing&quot;, .Weight = 18.7, .TrackingNumber = 89112755L}, _\n          New Package With {.Company = &quot;Wingtip Toys&quot;, .Weight = 6.0, .TrackingNumber = 299456122L}, _\n          New Package With {.Company = &quot;Contoso Pharmaceuticals&quot;, .Weight = 9.3, .TrackingNumber = 670053128L}, _\n          New Package With {.Company = &quot;Wide World Importers&quot;, .Weight = 33.8, .TrackingNumber = 4665518773L}})\n\n    &#39; Create a ILookup to organize the packages. Use the first character of Company as the key value.\n    &#39; Select Company appended to TrackingNumber for each element value.\n    Dim packageLookup As ILookup(Of Char, String) = _\n        packages.ToLookup(Function(p) Convert.ToChar(p.Company.Substring(0, 1)), _\n                          Function(p) p.Company &amp; &quot; &quot; &amp; p.TrackingNumber)\n\n    Dim output As New System.Text.StringBuilder\n    &#39; Iterate through each group in the Lookup and output the contents.\n    For Each packageGroup In packageLookup\n        &#39; Print the key value.\n        output.AppendLine(packageGroup.Key)\n        &#39; Iterate through each value in the group and output it.\n        For Each str As String In packageGroup\n            output.AppendLine(String.Format(&quot;    {0}&quot;, str))\n        Next\n    Next\n\n    &#39; Display the output.\n    MsgBox(output.ToString())\n\n    &#39; This code produces the following output:\n    &#39;\n    &#39; C\n    &#39;     Coho Vineyard 89453312\n    &#39;     Contoso Pharmaceuticals 670053128\n    &#39; L\n    &#39;     Lucerne Publishing 89112755\n    &#39; W\n    &#39;     Wingtip Toys 299456122\n    &#39;     Wide World Importers 4665518773\nEnd Sub\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The type <a class=\"xref\" href=\"system.linq.lookup-2\" data-linktype=\"relative-path\">Lookup&lt;TKey,TElement&gt;</a> implements the ILookup(TKey, interface.  </p>\n<p> The extension method <a class=\"xref\" href=\"https://msdn.microsoft.com/en-us/library/bb353368(v=vs.110).aspx\" data-linktype=\"external\">ToLookup</a>, which can be appended to the end of a LINQ query, returns an object of type ILookup(TKey,.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Linq_ILookup_2_Count\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Count</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the number of key/value collection pairs in the <span class=\"xref\">stem.Linq.ILookup`2</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int Count { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of key/value collection pairs in the <span class=\"xref\">stem.Linq.ILookup`2</span>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Linq_ILookup_2_Item__0_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Item(TKey)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> sequence of values indexed by a specified key.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Collections.Generic.IEnumerable&lt;TElement&gt; this[TKey key] { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>key</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">TKey</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The key of the desired sequence of values.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable</a>&lt;<span class=\"xref\">TElement</span>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <span class=\"xref\">stem.Collections.Generic.IEnumerable`1</span> sequence of values indexed by the specified key.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Linq_ILookup_2_Contains__0_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Contains(TKey)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether a specified key exists in the <span class=\"xref\">stem.Linq.ILookup`2</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool Contains (TKey key);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>key</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">TKey</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The key to search for in the <span class=\"xref\">stem.Linq.ILookup`2</span>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>key</code> is in the <span class=\"xref\">stem.Linq.ILookup`2</span>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Linq.ILookup-2.yml\">\r\n<meta name=\"APIName\" content=\"System.Linq.ILookup&lt;TKey,TElement&gt;\">\r\n<meta name=\"APIName\" content=\"System.Linq.ILookup&lt;TKey,TElement&gt;.Contains\">\r\n<meta name=\"APIName\" content=\"System.Linq.ILookup&lt;TKey,TElement&gt;.Count\">\r\n<meta name=\"APIName\" content=\"System.Linq.ILookup&lt;TKey,TElement&gt;.Item\">\r\n<meta name=\"APILocation\" content=\"System.Core.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"c53c6ad1-f7ee-7ae1-f279-275d32f0eb35\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines an indexer, size property, and Boolean search method for data structures that map keys to  sequences of values.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.linq/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Linq.ILookup`2\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Linq.ILookup-2.yml","open_to_public_contributors":false,"api_name":["System.Linq.ILookup<TKey,TElement>","System.Linq.ILookup<TKey,TElement>.Contains","System.Linq.ILookup<TKey,TElement>.Count","System.Linq.ILookup<TKey,TElement>.Item"],"api_location":["System.Core.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Linq.ILookup`2","System::Linq::ILookup`2","System.Linq.ILookup`2.Contains","System::Linq::ILookup`2::Contains","System.Linq.ILookup`2.Count","System::Linq::ILookup`2::Count","System.Linq.ILookup`2.Item","System::Linq::ILookup`2::Item"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"c53c6ad1-f7ee-7ae1-f279-275d32f0eb35","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Linq/ILookup`2.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ILookup<TKey,TElement> interface | Microsoft Docs","_op_ogTitle":"ILookup<TKey,TElement> interface","description":"Defines an indexer, size property, and Boolean search method for data structures that map keys to  sequences of values.\n","toc_asset_id":"api/_splitted/System.Linq/toc.json","toc_rel":"_splitted/System.Linq/toc.json","source_url":"","ms.assetid":"System.Linq.ILookup`2","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.linq.ilookup-2","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.linq.ilookup-2","fileRelativePath":"api/System.Linq.ILookup-2.html"},"themesRelativePathToOutputRoot":"_themes/"}