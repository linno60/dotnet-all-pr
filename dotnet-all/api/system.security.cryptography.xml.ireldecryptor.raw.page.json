{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">IRelDecryptor</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Defines methods that decrypt an XrML <code>&lt;encryptedGrant&gt;</code> element.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public interface IRelDecryptor</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example shows how to validate an XML digital signature using the IRelDecryptor interface and the <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"Cryptography.XML.XmlLicenseTransform#2\">public static void CheckSignatureWithEncryptedGrant(string fileName, IRelDecryptor decryptor)\n{\n    // Create a new XML document.\n    XmlDocument xmlDocument = new XmlDocument();\n    XmlNamespaceManager nsManager = new XmlNamespaceManager(xmlDocument.NameTable);\n\n    // Format using whitespaces.\n    xmlDocument.PreserveWhitespace = true;\n\n    // Load the passed XML file into the document. \n    xmlDocument.Load(fileName);\n    nsManager.AddNamespace(&quot;dsig&quot;, SignedXml.XmlDsigNamespaceUrl);\n\n    // Find the &quot;Signature&quot; node and create a new XmlNodeList object.\n    XmlNodeList nodeList = xmlDocument.SelectNodes(&quot;//dsig:Signature&quot;, nsManager);\n\n    for (int i = 0, count = nodeList.Count; i &lt; count; i++)\n    {\n        XmlDocument clone = xmlDocument.Clone() as XmlDocument;\n        XmlNodeList signatures = clone.SelectNodes(&quot;//dsig:Signature&quot;, nsManager);\n\n        // Create a new SignedXml object and pass into it the XML document clone.\n        SignedXml signedXml = new SignedXml(clone);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)signatures[i]);\n\n        // Set the context for license transform\n        Transform trans = ((Reference)signedXml.SignedInfo.References[0]).TransformChain[0];\n\n        if (trans is XmlLicenseTransform)\n        {\n\n            // Decryptor is used to decrypt encryptedGrant elements.\n            if (decryptor != null)\n                (trans as XmlLicenseTransform).Decryptor = decryptor;\n        }\n\n        // Check the signature and display the result.\n        bool result = signedXml.CheckSignature();\n\n        if (result)\n            Console.WriteLine(&quot;SUCCESS: CheckSignatureWithEncryptedGrant - issuer index #&quot; +\n                                            i.ToString());\n        else\n            Console.WriteLine(&quot;FAILURE: CheckSignatureWithEncryptedGrant - issuer index #&quot; +\n                                            i.ToString());\n    }\n\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"Cryptography.XML.XmlLicenseTransform#2\">void CheckSignatureWithEncryptedGrant(\n    String^ fileName, IRelDecryptor^ decryptor)\n{\n    // Create a new XML document.\n    XmlDocument^ sourceDocument = gcnew XmlDocument();\n    XmlNamespaceManager^ namespaceManager =\n        gcnew XmlNamespaceManager(sourceDocument-&gt;NameTable);\n\n    // Format using whitespaces.\n    sourceDocument-&gt;PreserveWhitespace = true;\n\n    // Load the passed XML file into the document.\n    sourceDocument-&gt;Load(fileName);\n    namespaceManager-&gt;AddNamespace(&quot;dsig&quot;,\n        SignedXml::XmlDsigNamespaceUrl);\n\n    // Find the &quot;Signature&quot; node and create a new\n    // XmlNodeList object.\n    XmlNodeList^ nodeList = \n        sourceDocument-&gt;SelectNodes(&quot;//dsig:Signature&quot;, namespaceManager);\n\n    for (int i = 0, count = nodeList-&gt;Count; i &lt; count; i++)\n    {\n        XmlDocument^ clone = (XmlDocument^) sourceDocument-&gt;Clone();\n        XmlNodeList^ signatures =\n            clone-&gt;SelectNodes(&quot;//dsig:Signature&quot;, namespaceManager);\n\n        // Create a new SignedXml object and pass into it the\n        // XML document clone.\n        SignedXml^ signedDocument = gcnew SignedXml(clone);\n\n        // Load the signature node.\n        signedDocument-&gt;LoadXml((XmlElement^)signatures[i]);\n\n        // Set the context for license transform\n        Transform^ licenseTransform = ((Reference^)signedDocument-&gt;\n            SignedInfo-&gt;References[0])-&gt;TransformChain[0];\n\n        if ((licenseTransform::typeid == XmlLicenseTransform::typeid) \n            &amp;&amp; (decryptor != nullptr))\n        {\n            // Decryptor is used to decrypt encryptedGrant\n            // elements.\n            ((XmlLicenseTransform^) licenseTransform)-&gt;Decryptor = decryptor;\n        }\n\n        // Check the signature and display the result.\n        if (signedDocument-&gt;CheckSignature())\n        {\n            Console::WriteLine(&quot;SUCCESS: &quot; +\n                &quot;CheckSignatureWithEncryptedGrant - issuer index #&quot; + i);\n        }\n        else\n        {\n            Console::WriteLine(&quot;FAILURE: &quot; +\n                &quot;CheckSignatureWithEncryptedGrant - issuer index #&quot; + i);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.XML.XmlLicenseTransform#2\">    Public Shared Sub CheckSignatureWithEncryptedGrant(ByVal fileName As String, ByVal decryptor As IRelDecryptor)\n        &#39; Create a new XML document.\n        Dim xmlDocument As New XmlDocument()\n        Dim nsManager As New XmlNamespaceManager(xmlDocument.NameTable)\n\n        &#39; Format using whitespaces.\n        xmlDocument.PreserveWhitespace = True\n\n        &#39; Load the passed XML file into the document. \n        xmlDocument.Load(fileName)\n        nsManager.AddNamespace(&quot;dsig&quot;, SignedXml.XmlDsigNamespaceUrl)\n\n        &#39; Find the &quot;Signature&quot; node and create a new XmlNodeList object.\n        Dim nodeList As XmlNodeList = xmlDocument.SelectNodes(&quot;//dsig:Signature&quot;, nsManager)\n\n        Dim count = nodeList.Count\n        Dim i As Integer\n\n        For i = 0 To count\n            Dim clone As XmlDocument = xmlDocument.Clone()\n           \n            Dim signatures As XmlNodeList = clone.SelectNodes(&quot;//dsig:Signature&quot;, nsManager)\n\n            &#39; Create a new SignedXml object and pass into it the XML document clone.\n            Dim signedXml As New SignedXml(clone)\n\n            &#39; Load the signature node.\n            signedXml.LoadXml(CType(signatures(i), XmlElement))\n\n            &#39; Set the context for license transform\n            Dim trans As Transform = CType(signedXml.SignedInfo.References(0), Reference).TransformChain(0)\n\n            If TypeOf trans Is XmlLicenseTransform Then\n\n                &#39; Decryptor is used to decrypt encryptedGrant elements.\n                If Not (decryptor Is Nothing) Then\n                    CType(trans, XmlLicenseTransform).Decryptor = decryptor\n                End If\n\n            End If\n\n            &#39; Check the signature and display the result.\n            Dim result As Boolean = signedXml.CheckSignature()\n\n            If result Then\n                Console.WriteLine(&quot;SUCCESS: CheckSignatureWithEncryptedGrant - issuer index #&quot; + i.ToString())\n            Else\n                Console.WriteLine(&quot;FAILURE: CheckSignatureWithEncryptedGrant - issuer index #&quot; + i.ToString())\n            End If\n        Next i\n\n    End Sub\nEnd Class\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Use the IRelDecryptor interface with the <a class=\"xref\" href=\"system.security.cryptography.xml.xmllicensetransform\" data-linktype=\"relative-path\">XmlLicenseTransform</a> class to decrypt an XrML <code>&lt;encryptedGrant&gt;</code> element.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Cryptography_Xml_IRelDecryptor_Decrypt_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_IRelDecryptor_Decrypt_System_Security_Cryptography_Xml_EncryptionMethod_System_Security_Cryptography_Xml_KeyInfo_System_IO_Stream_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Decrypt(EncryptionMethod, KeyInfo, Stream)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Decrypts an XrML <code>&lt;encryptedGrant&gt;</code> element that is contained within a <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.IO.Stream Decrypt (System.Security.Cryptography.Xml.EncryptionMethod encryptionMethod, System.Security.Cryptography.Xml.KeyInfo keyInfo, System.IO.Stream toDecrypt);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>encryptionMethod</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.encryptionmethod\" data-linktype=\"relative-path\">EncryptionMethod</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.security.cryptography.xml.encryptionmethod\" data-linktype=\"relative-path\">EncryptionMethod</a> object that encapsulates the algorithm used for XML encryption.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>keyInfo</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.keyinfo\" data-linktype=\"relative-path\">KeyInfo</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.security.cryptography.xml.keyinfo\" data-linktype=\"relative-path\">KeyInfo</a> object that contains an asymmetric key to use for decryption.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>toDecrypt</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A stream object that contains an <code>&lt;encryptedGrant&gt;</code> element to decrypt.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a> object that contains a decrypted <code>&lt;encryptedGrant&gt;</code> element.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Decrypt method decrypts an XrML <code>&lt;encryptedGrant&gt;</code> element and returns a plaintext stream.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.Xml.IRelDecryptor.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.IRelDecryptor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.IRelDecryptor.Decrypt\">\r\n<meta name=\"APILocation\" content=\"System.Security.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:59 PM\">\r\n<meta name=\"document_id\" content=\"5ab0cac7-0733-476b-509b-d6751fb8f0d8\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines methods that decrypt an XrML &amp;lt;encryptedGrant&amp;gt; element.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.security.cryptography.xml/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.Xml.IRelDecryptor\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","uhfHeaderId":"MSDocsHeader-DotNet","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.Xml.IRelDecryptor.yml","open_to_public_contributors":false,"api_name":["System.Security.Cryptography.Xml.IRelDecryptor","System.Security.Cryptography.Xml.IRelDecryptor.Decrypt"],"api_location":["System.Security.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.Xml.IRelDecryptor","System::Security::Cryptography::Xml::IRelDecryptor","System.Security.Cryptography.Xml.IRelDecryptor.Decrypt","System::Security::Cryptography::Xml::IRelDecryptor::Decrypt"],"dev_langs":["csharp"],"updated_at":"2017-04-01 05:59 PM","document_id":"5ab0cac7-0733-476b-509b-d6751fb8f0d8","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Security.Cryptography.Xml/IRelDecryptor.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IRelDecryptor interface | Microsoft Docs","_op_ogTitle":"IRelDecryptor interface","description":"Defines methods that decrypt an XrML &lt;encryptedGrant&gt; element.\n","toc_asset_id":"api/_splitted/System.Security.Cryptography.Xml/toc.json","toc_rel":"_splitted/System.Security.Cryptography.Xml/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.Xml.IRelDecryptor","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.xml.ireldecryptor","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.xml.ireldecryptor","fileRelativePath":"api/System.Security.Cryptography.Xml.IRelDecryptor.html"},"themesRelativePathToOutputRoot":"_themes/"}