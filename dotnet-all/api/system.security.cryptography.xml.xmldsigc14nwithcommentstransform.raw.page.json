{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">XmlDsigC14NWithCommentsTransform</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the C14N XML canonicalization transform for a digital signature as defined by the World Wide Web Consortium (W3C), with comments.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class XmlDsigC14NWithCommentsTransform : System.Security.Cryptography.Xml.XmlDsigC14NTransform</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.transform\" data-linktype=\"relative-path\">Transform</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigc14ntransform\" data-linktype=\"relative-path\">XmlDsigC14NTransform</a></span></div><span class=\"lang-csharp\">XmlDsigC14NWithCommentsTransform</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_Algorithm\" data-linktype=\"relative-path\">Algorithm</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_Context\" data-linktype=\"relative-path\">Context</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_GetXml\" data-linktype=\"relative-path\">GetXml()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_PropagatedNamespaces\" data-linktype=\"relative-path\">PropagatedNamespaces</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_Resolver\" data-linktype=\"relative-path\">Resolver</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigc14ntransform#System_Security_Cryptography_Xml_XmlDsigC14NTransform_GetDigestedOutput_System_Security_Cryptography_HashAlgorithm_\" data-linktype=\"relative-path\">GetDigestedOutput(HashAlgorithm)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigc14ntransform#System_Security_Cryptography_Xml_XmlDsigC14NTransform_GetInnerXml\" data-linktype=\"relative-path\">GetInnerXml()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigc14ntransform#System_Security_Cryptography_Xml_XmlDsigC14NTransform_GetOutput\" data-linktype=\"relative-path\">GetOutput()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigc14ntransform#System_Security_Cryptography_Xml_XmlDsigC14NTransform_GetOutput_System_Type_\" data-linktype=\"relative-path\">GetOutput(Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigc14ntransform#System_Security_Cryptography_Xml_XmlDsigC14NTransform_InputTypes\" data-linktype=\"relative-path\">InputTypes</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigc14ntransform#System_Security_Cryptography_Xml_XmlDsigC14NTransform_LoadInnerXml_System_Xml_XmlNodeList_\" data-linktype=\"relative-path\">LoadInnerXml(XmlNodeList)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigc14ntransform#System_Security_Cryptography_Xml_XmlDsigC14NTransform_LoadInput_System_Object_\" data-linktype=\"relative-path\">LoadInput(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigc14ntransform#System_Security_Cryptography_Xml_XmlDsigC14NTransform_OutputTypes\" data-linktype=\"relative-path\">OutputTypes</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>This section contains two code examples. The first example demonstrates how to sign an XML file using a detached signature. This example creates a signature of www.microsoft.com in an XML file and then verifies the file. The second example demonstrates how to sign an XML file using an envelope signature.  This example creates a signature of an XML file and then saves the signature in new XML file.  </p>\n<p> <strong>Example #1</strong>  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.XML.XmlDsigC14NWithCommentsTransform_Detached#1\">//\n// This example signs a file specified by a URI \n// using a detached signature. It then verifies  \n// the signed XML.\n//\n#using &lt;System.Security.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Sign an XML file and save the signature in a new file.\nvoid SignDetachedResource( String^ URIString, String^ XmlSigFileName, RSA^ RSAKey )\n{\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml;\n   \n   // Assign the key to the SignedXml object.\n   signedXml-&gt;SigningKey = RSAKey;\n   \n   // Create a reference to be signed.\n   Reference^ reference = gcnew Reference;\n   \n   // Add the passed URI to the reference object.\n   reference-&gt;Uri = URIString;\n   \n   // Add a transformation if the URI is an XML file.\n   if ( URIString-&gt;EndsWith( &quot;xml&quot; ) )\n   {\n      \n      // Add the reference to the SignedXml object.\n      signedXml-&gt;AddReference( reference );\n      \n      // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n      KeyInfo^ keyInfo = gcnew KeyInfo;\n      keyInfo-&gt;AddClause( gcnew RSAKeyValue( safe_cast&lt;RSA^&gt;(RSAKey) ) );\n      signedXml-&gt;KeyInfo = keyInfo;\n      \n      // Compute the signature.\n      signedXml-&gt;ComputeSignature();\n      \n      // Get the XML representation of the signature and save\n      // it to an XmlElement object.\n      XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n      \n      // Save the signed XML document to a file specified\n      // using the passed string.\n      XmlTextWriter^ xmltw = gcnew XmlTextWriter( XmlSigFileName,gcnew UTF8Encoding( false ) );\n      xmlDigitalSignature-&gt;WriteTo( xmltw );\n      xmltw-&gt;Close();\n   }\n}\n\n\n// Verify the signature of an XML file and return the result.\nBoolean VerifyDetachedSignature( String^ XmlSigFileName )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Load the passed XML file into the document.\n   xmlDocument-&gt;Load( XmlSigFileName );\n   \n   // Create a new SignedXMl object.\n   SignedXml^ signedXml = gcnew SignedXml;\n   \n   // Find the S&quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( &quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( safe_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature();\n}\n\n\nint main()\n{\n   \n   // The URI to sign.\n   String^ resourceToSign = &quot;http://www.microsoft.com&quot;;\n   \n   // The name of the file to which to save the XML signature.\n   String^ XmlFileName = &quot;xmldsig.xml&quot;;\n   try\n   {\n      \n      // Generate a signing key.\n      RSACryptoServiceProvider^ Key = gcnew RSACryptoServiceProvider;\n      Console::WriteLine( &quot;Signing: {0}&quot;, resourceToSign );\n      \n      // Sign the detached resourceand save the signature in an XML file.\n      SignDetachedResource( resourceToSign, XmlFileName, Key );\n      Console::WriteLine( &quot;XML signature was succesfully computed and saved to {0}.&quot;, XmlFileName );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( &quot;Verifying signature...&quot; );\n      \n      //Verify the XML signature in the XML file.\n      bool result = VerifyDetachedSignature( XmlFileName );\n      \n      // Display the results of the signature verification to \n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( &quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( &quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.XML.XmlDsigC14NWithCommentsTransform_Detached#1\">&#39; This example signs a file specified by a URI \n&#39; using a detached signature. It then verifies  \n&#39; the signed XML.\n\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\nClass XMLDSIGDetached\n\n   \n   &lt;STAThread()&gt;  _\n   Overloads Shared Sub Main(args() As String)\n      &#39; The URI to sign.\n      Dim resourceToSign As String = &quot;http://www.microsoft.com&quot;\n      \n      &#39; The name of the file to which to save the XML signature.\n      Dim XmlFileName As String = &quot;xmldsig.xml&quot;\n      \n      Try\n         \n         &#39; Generate a signing key.\n         Dim Key As New RSACryptoServiceProvider()\n         \n         Console.WriteLine(&quot;Signing: {0}&quot;, resourceToSign)\n         \n         &#39; Sign the detached resourceand save the signature in an XML file.\n         SignDetachedResource(resourceToSign, XmlFileName, Key)\n         \n         Console.WriteLine(&quot;XML signature was succesfully computed and saved to {0}.&quot;, XmlFileName)\n         \n         &#39; Verify the signature of the signed XML.\n         Console.WriteLine(&quot;Verifying signature...&quot;)\n         \n         &#39;Verify the XML signature in the XML file.\n         Dim result As Boolean = VerifyDetachedSignature(XmlFileName)\n         \n         &#39; Display the results of the signature verification to \n         &#39; the console.\n         If result Then\n            Console.WriteLine(&quot;The XML signature is valid.&quot;)\n         Else\n            Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n         End If\n      Catch e As CryptographicException\n         Console.WriteLine(e.Message)\n      End Try \n   End Sub \n   \n   &#39; Sign an XML file and save the signature in a new file.\n   Public Shared Sub SignDetachedResource(URIString As String, XmlSigFileName As String, Key As RSA)\n      &#39; Create a SignedXml object.\n      Dim signedXml As New SignedXml()\n      \n      &#39; Assign the key to the SignedXml object.\n      signedXml.SigningKey = Key\n      \n      &#39; Create a reference to be signed.\n      Dim reference As New Reference()\n      \n      &#39; Add the passed URI to the reference object.\n      reference.Uri = URIString\n      \n      &#39; Add the reference to the SignedXml object.\n      signedXml.AddReference(reference)\n      \n      &#39; Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n      Dim keyInfo As New KeyInfo()\n      keyInfo.AddClause(New RSAKeyValue(CType(Key, RSA)))\n      signedXml.KeyInfo = keyInfo\n      \n      &#39; Compute the signature.\n      signedXml.ComputeSignature()\n      \n      &#39; Get the XML representation of the signature and save\n      &#39; it to an XmlElement object.\n      Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n      \n      &#39; Save the signed XML document to a file specified\n      &#39; using the passed string.\n      Dim xmltw As New XmlTextWriter(XmlSigFileName, New UTF8Encoding(False))\n      xmlDigitalSignature.WriteTo(xmltw)\n      xmltw.Close()\n   End Sub \n   \n   &#39; Verify the signature of an XML file and return the result.\n   Public Shared Function VerifyDetachedSignature(XmlSigFileName As String) As [Boolean]\n      &#39; Create a new XML document.\n      Dim xmlDocument As New XmlDocument()\n      \n      &#39; Load the passed XML file into the document.\n      xmlDocument.Load(XmlSigFileName)\n      \n      &#39; Create a new SignedXMl object.\n      Dim signedXml As New SignedXml()\n      \n      &#39; Find the &quot;Signature&quot; node and create a new\n      &#39; XmlNodeList object.\n      Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n      \n      &#39; Load the signature node.\n      signedXml.LoadXml(CType(nodeList(0), XmlElement))\n      \n      &#39; Check the signature and return the result.\n      Return signedXml.CheckSignature()\n   End Function\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.XML.XmlDsigC14NWithCommentsTransform_Detached#1\">//\n// This example signs a file specified by a URI \n// using a detached signature. It then verifies  \n// the signed XML.\n//\n\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\n\n\nclass XMLDSIGDetached\n{\n\t\n    [STAThread]\n    static void Main(string[] args)\n    {\n        // The URI to sign.\n        string resourceToSign = &quot;http://www.microsoft.com&quot;;\n\t\t\n        // The name of the file to which to save the XML signature.\n        string XmlFileName = &quot;xmldsig.xml&quot;;\n\n        try\n        {\n\n            // Generate a signing key.\n            RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n            Console.WriteLine(&quot;Signing: {0}&quot;, resourceToSign);\n\n            // Sign the detached resourceand save the signature in an XML file.\n            SignDetachedResource(resourceToSign, XmlFileName, Key);\n\n            Console.WriteLine(&quot;XML signature was succesfully computed and saved to {0}.&quot;, XmlFileName);\n\n            // Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;);\n\n            //Verify the XML signature in the XML file.\n            bool result = VerifyDetachedSignature(XmlFileName);\n\n            // Display the results of the signature verification to \n            // the console.\n            if(result)\n            {\n                Console.WriteLine(&quot;The XML signature is valid.&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n            }\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n\n        }\n\t\t\n    }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignDetachedResource(string URIString, string XmlSigFileName, RSA Key)\n    {\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml();\n\n        // Assign the key to the SignedXml object.\n        signedXml.SigningKey = Key;\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n\n        // Add the passed URI to the reference object.\n        reference.Uri = URIString;\n\t\t\n        // Add the reference to the SignedXml object.\n        signedXml.AddReference(reference);\n\n        // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        KeyInfo keyInfo = new KeyInfo();\n        keyInfo.AddClause(new RSAKeyValue((RSA)Key));\t\n        signedXml.KeyInfo = keyInfo;\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(XmlSigFileName, new UTF8Encoding(false));\n        xmlDigitalSignature.WriteTo(xmltw);\n        xmltw.Close();\n    }\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyDetachedSignature(string XmlSigFileName)\n    {\t\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Load the passed XML file into the document.\n        xmlDocument.Load(XmlSigFileName);\n\t\n        // Create a new SignedXMl object.\n        SignedXml signedXml = new SignedXml();\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature();\n    }\n}\n</code></pre><p> <strong>Example #2</strong>  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.XML.XmlDsigC14NWithCommentsTransform_Envelope#1\">// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\npublic class SignVerifyEnvelope\n{\n\n    public static void Main(String[] args)\n    {\n        try\n        {\n            // Generate a signing key.\n            RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n            // Create an XML file to sign.\n            CreateSomeXml(&quot;Example.xml&quot;);\n            Console.WriteLine(&quot;New XML file created.&quot;); \n\n            // Sign the XML that was just created and save it in a \n            // new file.\n            SignXmlFile(&quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, Key);\n            Console.WriteLine(&quot;XML file signed.&quot;); \n\n            // Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;);\n            bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;);\n\n            // Display the results of the signature verification to \\\n            // the console.\n            if(result)\n            {\n                Console.WriteLine(&quot;The XML signature is valid.&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n            }\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignXmlFile(string FileName, string SignedFileName, RSA Key)\n    {\n        // Create a new XML document.\n        XmlDocument doc = new XmlDocument();\n\n        // Format the document to ignore white spaces.\n        doc.PreserveWhitespace = false;\n\n        // Load the passed XML file using it&#39;s name.\n        doc.Load(new XmlTextReader(FileName));\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml(doc);\n\n        // Add the key to the SignedXml document. \n        signedXml.SigningKey = Key;\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n        reference.Uri = &quot;&quot;;\n\n        // Add an enveloped transformation to the reference.\n        XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();\n        reference.AddTransform(env);\n\n        // Add the reference to the SignedXml object.\n        signedXml.AddReference(reference);\n\n\t\t\n        // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        KeyInfo keyInfo = new KeyInfo();\n        keyInfo.AddClause(new RSAKeyValue((RSA)Key));\n        signedXml.KeyInfo = keyInfo;\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));\n\t\t\n\t\t\n        if (doc.FirstChild is XmlDeclaration)  \n        {\n            doc.RemoveChild(doc.FirstChild);\n        }\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false));\n        doc.WriteTo(xmltw);\n        xmltw.Close();\n    }\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyXmlFile(String Name)\n    {\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Format using white spaces.\n        xmlDocument.PreserveWhitespace = true;\n\n        // Load the passed XML file into the document. \n        xmlDocument.Load(Name);\n\n        // Create a new SignedXml object and pass it\n        // the XML document class.\n        SignedXml signedXml = new SignedXml(xmlDocument);\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature();\n    }\n\n    // Create example data to sign.\n    public static void CreateSomeXml(string FileName)\n    {\n        // Create a new XmlDocument object.\n        XmlDocument document = new XmlDocument();\n\n        // Create a new XmlNode object.\n        XmlNode  node = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot;);\n\t\t\n        // Add some text to the node.\n        node.InnerText = &quot;Example text to be signed.&quot;;\n\n        // Append the node to the document.\n        document.AppendChild(node);\n\n        // Save the XML document to the file name specified.\n        XmlTextWriter xmltw = new XmlTextWriter(FileName, new UTF8Encoding(false));\n        document.WriteTo(xmltw);\n        xmltw.Close();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.XML.XmlDsigC14NWithCommentsTransform_Envelope#1\">&#39; This example signs an XML file using an\n&#39; envelope signature. It then verifies the \n&#39; signed XML.\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\nPublic Class SignVerifyEnvelope\n\n   Overloads Public Shared Sub Main(args() As [String])\n      Try\n         &#39; Generate a signing key.\n         Dim Key As New RSACryptoServiceProvider()\n         \n         &#39; Create an XML file to sign.\n         CreateSomeXml(&quot;Example.xml&quot;)\n         Console.WriteLine(&quot;New XML file created.&quot;)\n         \n         &#39; Sign the XML that was just created and save it in a \n         &#39; new file.\n         SignXmlFile(&quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, Key)\n         Console.WriteLine(&quot;XML file signed.&quot;)\n         \n         &#39; Verify the signature of the signed XML.\n         Console.WriteLine(&quot;Verifying signature...&quot;)\n         Dim result As Boolean = VerifyXmlFile(&quot;SignedExample.xml&quot;)\n         \n         &#39; Display the results of the signature verification to \\\n         &#39; the console.\n         If result Then\n            Console.WriteLine(&quot;The XML signature is valid.&quot;)\n         Else\n            Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n         End If\n      Catch e As CryptographicException\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub \n   \n   \n   &#39; Sign an XML file and save the signature in a new file.\n   Public Shared Sub SignXmlFile(FileName As String, SignedFileName As String, Key As RSA)\n      &#39; Create a new XML document.\n      Dim doc As New XmlDocument()\n      \n      &#39; Format the document to ignore white spaces.\n      doc.PreserveWhitespace = False\n      \n      &#39; Load the passed XML file using it&#39;s name.\n      doc.Load(New XmlTextReader(FileName))\n      \n      &#39; Create a SignedXml object.\n      Dim signedXml As New SignedXml(doc)\n      \n      &#39; Add the key to the SignedXml document. \n      signedXml.SigningKey = Key\n      \n      &#39; Create a reference to be signed.\n      Dim reference As New Reference()\n      reference.Uri = &quot;&quot;\n      \n      &#39; Add an enveloped transformation to the reference.\n      Dim env As New XmlDsigEnvelopedSignatureTransform()\n      reference.AddTransform(env)\n      \n      &#39; Add the reference to the SignedXml object.\n      signedXml.AddReference(reference)\n      \n      \n      &#39; Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n      Dim keyInfo As New KeyInfo()\n      keyInfo.AddClause(New RSAKeyValue(CType(Key, RSA)))\n      signedXml.KeyInfo = keyInfo\n      \n      &#39; Compute the signature.\n      signedXml.ComputeSignature()\n      \n      &#39; Get the XML representation of the signature and save\n      &#39; it to an XmlElement object.\n      Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n      \n      &#39; Append the element to the XML document.\n      doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, True))\n      \n      \n      If TypeOf doc.FirstChild Is XmlDeclaration Then\n         doc.RemoveChild(doc.FirstChild)\n      End If\n      \n      &#39; Save the signed XML document to a file specified\n      &#39; using the passed string.\n      Dim xmltw As New XmlTextWriter(SignedFileName, New UTF8Encoding(False))\n      doc.WriteTo(xmltw)\n      xmltw.Close()\n   End Sub \n   \n   &#39; Verify the signature of an XML file and return the result.\n   Public Shared Function VerifyXmlFile(Name As [String]) As [Boolean]\n      &#39; Create a new XML document.\n      Dim xmlDocument As New XmlDocument()\n      \n      &#39; Format using white spaces.\n      xmlDocument.PreserveWhitespace = True\n      \n      &#39; Load the passed XML file into the document. \n      xmlDocument.Load(Name)\n      \n      &#39; Create a new SignedXml object and pass it\n      &#39; the XML document class.\n      Dim signedXml As New SignedXml(xmlDocument)\n      \n      &#39; Find the &quot;Signature&quot; node and create a new\n      &#39; XmlNodeList object.\n      Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n      \n      &#39; Load the signature node.\n      signedXml.LoadXml(CType(nodeList(0), XmlElement))\n      \n      &#39; Check the signature and return the result.\n      Return signedXml.CheckSignature()\n   End Function \n   \n   &#39; Create example data to sign.\n   Public Shared Sub CreateSomeXml(FileName As String)\n      &#39; Create a new XmlDocument object.\n      Dim document As New XmlDocument()\n      \n      &#39; Create a new XmlNode object.\n      Dim node As XmlNode = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot;)\n      \n      &#39; Add some text to the node.\n      node.InnerText = &quot;Example text to be signed.&quot;\n      \n      &#39; Append the node to the document.\n      document.AppendChild(node)\n      \n      &#39; Save the XML document to the file name specified.\n      Dim xmltw As New XmlTextWriter(FileName, New UTF8Encoding(False))\n      document.WriteTo(xmltw)\n      xmltw.Close()\n   End Sub \nEnd Class \n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.XML.XmlDsigC14NWithCommentsTransform_Envelope#1\">// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n#using &lt;System.Security.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Sign an XML file and save the signature in a new file.\nvoid SignXmlFile( String^ FileName, String^ SignedFileName, RSA^ Key )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   // Format the document to ignore white spaces.\n   doc-&gt;PreserveWhitespace = false;\n   \n   // Load the passed XML file using it&#39;s name.\n   doc-&gt;Load( gcnew XmlTextReader( FileName ) );\n   \n   // Create a SignedXml Object*.\n   SignedXml^ signedXml = gcnew SignedXml( doc );\n   \n   // Add the key to the SignedXml document. \n   signedXml-&gt;SigningKey = Key;\n   \n   // Create a reference to be signed.\n   Reference^ reference = gcnew Reference;\n   reference-&gt;Uri = &quot;&quot;;\n   \n   // Add an enveloped transformation to the reference.\n   XmlDsigEnvelopedSignatureTransform^ env = gcnew XmlDsigEnvelopedSignatureTransform;\n   reference-&gt;AddTransform( env );\n   \n   // Add the reference to the SignedXml Object*.\n   signedXml-&gt;AddReference( reference );\n   \n   // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n   KeyInfo^ keyInfo = gcnew KeyInfo;\n   keyInfo-&gt;AddClause( gcnew RSAKeyValue( safe_cast&lt;RSA^&gt;(Key) ) );\n   signedXml-&gt;KeyInfo = keyInfo;\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement Object*.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Append the element to the XML document.\n   doc-&gt;DocumentElement-&gt;AppendChild( doc-&gt;ImportNode( xmlDigitalSignature, true ) );\n   if ( (doc-&gt;FirstChild)-&gt;GetType() == XmlDeclaration::typeid )\n   {\n      doc-&gt;RemoveChild( doc-&gt;FirstChild );\n   }\n\n   \n   // Save the signed XML document to a file specified\n   // using the passed String*.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( SignedFileName,gcnew UTF8Encoding( false ) );\n   doc-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file and return the result.\nBoolean VerifyXmlFile( String^ Name )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Format using white spaces.\n   xmlDocument-&gt;PreserveWhitespace = true;\n   \n   // Load the passed XML file into the document. \n   xmlDocument-&gt;Load( Name );\n   \n   // Create a new SignedXml Object* and pass it\n   // the XML document class.\n   SignedXml^ signedXml = gcnew SignedXml( xmlDocument );\n   \n   // Find the S&quot;Signature&quot; node and create a new\n   // XmlNodeList Object*.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( &quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( safe_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature();\n}\n\n\n// Create example data to sign.\nvoid CreateSomeXml( String^ FileName )\n{\n   \n   // Create a new XmlDocument Object*.\n   XmlDocument^ document = gcnew XmlDocument;\n   \n   // Create a new XmlNode Object*.\n   XmlNode^ node = document-&gt;CreateNode( XmlNodeType::Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot; );\n   \n   // Add some text to the node.\n   node-&gt;InnerText = &quot;Example text to be signed.&quot;;\n   \n   // Append the node to the document.\n   document-&gt;AppendChild( node );\n   \n   // Save the XML document to the file name specified.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( FileName,gcnew UTF8Encoding( false ) );\n   document-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\nvoid main()\n{\n   try\n   {\n      \n      // Generate a signing key.\n      RSACryptoServiceProvider^ Key = gcnew RSACryptoServiceProvider;\n      \n      // Create an XML file to sign.\n      CreateSomeXml( &quot;Example.xml&quot; );\n      Console::WriteLine( &quot;New XML file created.&quot; );\n      \n      // Sign the XML that was just created and save it in a \n      // new file.\n      SignXmlFile( &quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, Key );\n      Console::WriteLine( &quot;XML file signed.&quot; );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( &quot;Verifying signature...&quot; );\n      bool result = VerifyXmlFile( &quot;SignedExample.xml&quot; );\n      \n      // Display the results of the signature verification to\n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( &quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( &quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The XmlDsigC14NWithCommentsTransform class represents the C14N XML canonicalization transform that describes the canonical form of an XML document.  This transform allows a signer to create a digest using the canonical form of an XML document.  A recipient can then verify the digital signature using the same canonical form of the XML document with the same transform.  </p>\n<p> Use the XmlDsigC14NWithCommentsTransform class when you need to sign an XML document that contains comments.  </p>\n<p> Note that you cannot directly create a new instance of a canonicalization transform class.  To specify a canonicalization transform, pass the Uniform Resource Identifier (URI) that describes the transform to the <a class=\"xref\" href=\"system.security.cryptography.xml.signedinfo#System_Security_Cryptography_Xml_SignedInfo_CanonicalizationMethod_\" data-linktype=\"relative-path\">CanonicalizationMethod</a> property, which is accessible from the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml#System_Security_Cryptography_Xml_SignedXml_SignedInfo_\" data-linktype=\"relative-path\">SignedInfo</a> property.  To acquire a reference to the canonicalization transform, use the <a class=\"xref\" href=\"system.security.cryptography.xml.signedinfo#System_Security_Cryptography_Xml_SignedInfo_CanonicalizationMethodObject_\" data-linktype=\"relative-path\">CanonicalizationMethodObject</a> property, which is accessible from the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml#System_Security_Cryptography_Xml_SignedXml_SignedInfo_\" data-linktype=\"relative-path\">SignedInfo</a> property.  </p>\n<p> The URI that describes the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigexcc14nwithcommentstransform\" data-linktype=\"relative-path\">XmlDsigExcC14NWithCommentsTransform</a> class is defined by the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml#System_Security_Cryptography_Xml_SignedXml_XmlDsigExcC14NWithCommentsTransformUrl\" data-linktype=\"relative-path\">XmlDsigExcC14NWithCommentsTransformUrl</a> field.  </p>\n<p> The URI that describes the XmlDsigC14NWithCommentsTransform class is defined by the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml#System_Security_Cryptography_Xml_SignedXml_XmlDsigC14NWithCommentsTransformUrl\" data-linktype=\"relative-path\">XmlDsigC14NWithCommentsTransformUrl</a> field and the <a class=\"xref\" href=\"system.security.cryptography.xml.signedxml#System_Security_Cryptography_Xml_SignedXml_XmlDsigCanonicalizationWithCommentsUrl\" data-linktype=\"relative-path\">XmlDsigCanonicalizationWithCommentsUrl</a> field.  </p>\n<p> For more information about the C14N with comments transform, see Sections 6.5 and 6.6.1 of the XMLDSIG specification, which is available from the World Wide Web Consortium (W3C) at www.w3.org/TR/xmldsig-core/. The canonicalization algorithm is defined in the W3C Canonical XML specification, which is available at www.w3.org/TR/xml-c14n.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_XmlDsigC14NWithCommentsTransform__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">XmlDsigC14NWithCommentsTransform()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigc14nwithcommentstransform\" data-linktype=\"relative-path\">XmlDsigC14NWithCommentsTransform</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public XmlDsigC14NWithCommentsTransform ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform..ctor\">\r\n<meta name=\"APILocation\" content=\"System.Security.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"8b5367d0-e1fa-d9fa-47d7-56356647d72a\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the C14N XML canonicalization transform for a digital signature as defined by the World Wide Web Consortium (W3C), with comments.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.security.cryptography.xml/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform.yml","open_to_public_contributors":false,"api_name":["System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform","System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform..ctor"],"api_location":["System.Security.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform","System::Security::Cryptography::Xml::XmlDsigC14NWithCommentsTransform","System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform.#ctor","System::Security::Cryptography::Xml::XmlDsigC14NWithCommentsTransform::#ctor"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"8b5367d0-e1fa-d9fa-47d7-56356647d72a","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.Xml/XmlDsigC14NWithCommentsTransform.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"XmlDsigC14NWithCommentsTransform class | Microsoft Docs","_op_ogTitle":"XmlDsigC14NWithCommentsTransform class","description":"Represents the C14N XML canonicalization transform for a digital signature as defined by the World Wide Web Consortium (W3C), with comments.\n","toc_asset_id":"api/_splitted/System.Security.Cryptography.Xml/toc.json","toc_rel":"_splitted/System.Security.Cryptography.Xml/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.xml.xmldsigc14nwithcommentstransform","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.xml.xmldsigc14nwithcommentstransform","fileRelativePath":"api/System.Security.Cryptography.Xml.XmlDsigC14NWithCommentsTransform.html"},"themesRelativePathToOutputRoot":"_themes/"}