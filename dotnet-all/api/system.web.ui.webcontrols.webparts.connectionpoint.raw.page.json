{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ConnectionPoint</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Serves as the base class for defining connection point objects that enable the consumer control and the provider control in a Web Parts connection to share data.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public abstract class ConnectionPoint</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">ConnectionPoint</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates the creation of a Web Parts connection that includes the required ConnectionPoint objects. Because the ConnectionPoint class is an abstract base class, instances of its child classes--<a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.providerconnectionpoint\" data-linktype=\"relative-path\">ProviderConnectionPoint</a> and <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.consumerconnectionpoint\" data-linktype=\"relative-path\">ConsumerConnectionPoint</a>--are the actual objects used to form a connection.  </p>\n<p> The example has four parts:  </p>\n<ul>\n<li><p>A user control that enables you to change the Web Parts display mode on a page.  </p>\n</li>\n<li><p>Source code for an interface and two <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls acting as the provider and the consumer for a connection.  </p>\n</li>\n<li><p>A Web page to host all the controls and run the code example.  </p>\n</li>\n<li><p>An explanation of how to run the example page.  </p>\n</li>\n</ul>\n<p> The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the <code>Src</code> attribute of the <code>Register</code> directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see <a href=\"../Topic/Walkthrough:%20Changing%20Display%20Modes%20on%20a%20Web%20Parts%20Page.md\" data-linktype=\"relative-path\">Walkthrough: Changing Display Modes on a Web Parts Page</a>.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_ConnectionPoint_Overview#6\">&lt;%@ control language=&quot;C#&quot; classname=&quot;DisplayModeMenuCS&quot;%&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n // Use a field to reference the current WebPartManager.\n  WebPartManager _manager;\n\n  void Page_Init(object sender, EventArgs e)\n  {\n    Page.InitComplete += new EventHandler(InitComplete);\n  }  \n\n  void InitComplete(object sender, System.EventArgs e)\n  {\n    _manager = WebPartManager.GetCurrentWebPartManager(Page);\n\n    String browseModeName = WebPartManager.BrowseDisplayMode.Name;\n\n    // Fill the dropdown with the names of supported display modes.\n    foreach (WebPartDisplayMode mode in _manager.SupportedDisplayModes)\n    {\n      String modeName = mode.Name;\n      // Make sure a mode is enabled before adding it.\n      if (mode.IsEnabled(_manager))\n      {\n        ListItem item = new ListItem(modeName, modeName);\n        DisplayModeDropdown.Items.Add(item);\n      }\n    }\n\n    // If shared scope is allowed for this user, display the scope-switching\n    // UI and select the appropriate radio button for the current user scope.\n    if (_manager.Personalization.CanEnterSharedScope)\n    {\n      Panel2.Visible = true;\n      if (_manager.Personalization.Scope == PersonalizationScope.User)\n        RadioButton1.Checked = true;\n      else\n        RadioButton2.Checked = true;\n    }\n    \n  }\n \n  // Change the page to the selected display mode.\n  void DisplayModeDropdown_SelectedIndexChanged(object sender, EventArgs e)\n  {\n    String selectedMode = DisplayModeDropdown.SelectedValue;\n\n    WebPartDisplayMode mode = _manager.SupportedDisplayModes[selectedMode];\n    if (mode != null)\n      _manager.DisplayMode = mode;\n  }\n\n  // Set the selected item equal to the current display mode.\n  void Page_PreRender(object sender, EventArgs e)\n  {\n    ListItemCollection items = DisplayModeDropdown.Items;\n    int selectedIndex = \n      items.IndexOf(items.FindByText(_manager.DisplayMode.Name));\n    DisplayModeDropdown.SelectedIndex = selectedIndex;\n  }\n\n  // Reset all of a user&#39;s personalization data for the page.\n  protected void LinkButton1_Click(object sender, EventArgs e)\n  {\n    _manager.Personalization.ResetPersonalizationState();\n  }\n\n  // If not in User personalization scope, toggle into it.\n  protected void RadioButton1_CheckedChanged(object sender, EventArgs e)\n  {\n    if (_manager.Personalization.Scope == PersonalizationScope.Shared)\n      _manager.Personalization.ToggleScope();\n  }\n\n  // If not in Shared scope, and if user is allowed, toggle the scope.\n  protected void RadioButton2_CheckedChanged(object sender, EventArgs e)\n  {\n    if (_manager.Personalization.CanEnterSharedScope &amp;&amp; \n        _manager.Personalization.Scope == PersonalizationScope.User)\n      _manager.Personalization.ToggleScope();\n  }\n&lt;/script&gt;\n&lt;div&gt;\n  &lt;asp:Panel ID=&quot;Panel1&quot; runat=&quot;server&quot; \n    Borderwidth=&quot;1&quot; \n    Width=&quot;230&quot; \n    BackColor=&quot;lightgray&quot;\n    Font-Names=&quot;Verdana, Arial, Sans Serif&quot; &gt;\n    &lt;asp:Label ID=&quot;Label1&quot; runat=&quot;server&quot; \n      Text=&quot;&amp;nbsp;Display Mode&quot; \n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot;\n      Width=&quot;120&quot; \n      AssociatedControlID=&quot;DisplayModeDropdown&quot;/&gt;\n    &lt;asp:DropDownList ID=&quot;DisplayModeDropdown&quot; runat=&quot;server&quot;  \n      AutoPostBack=&quot;true&quot; \n      Width=&quot;120&quot;\n      OnSelectedIndexChanged=&quot;DisplayModeDropdown_SelectedIndexChanged&quot; /&gt;\n    &lt;asp:LinkButton ID=&quot;LinkButton1&quot; runat=&quot;server&quot;\n      Text=&quot;Reset User State&quot; \n      ToolTip=&quot;Reset the current user&#39;s personalization data for the page.&quot;\n      Font-Size=&quot;8&quot; \n      OnClick=&quot;LinkButton1_Click&quot; /&gt;\n    &lt;asp:Panel ID=&quot;Panel2&quot; runat=&quot;server&quot; \n      GroupingText=&quot;Personalization Scope&quot;\n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot; \n      Visible=&quot;false&quot; &gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton1&quot; runat=&quot;server&quot; \n        Text=&quot;User&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; OnCheckedChanged=&quot;RadioButton1_CheckedChanged&quot; /&gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton2&quot; runat=&quot;server&quot; \n        Text=&quot;Shared&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; \n        OnCheckedChanged=&quot;RadioButton2_CheckedChanged&quot; /&gt;\n    &lt;/asp:Panel&gt;\n  &lt;/asp:Panel&gt;\n&lt;/div&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_ConnectionPoint_Overview#6\">&lt;%@ control language=&quot;vb&quot; classname=&quot;DisplayModeMenuVB&quot;%&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  &#39; Use a field to reference the current WebPartManager.\n  Dim _manager As WebPartManager\n\n  Sub Page_Init(ByVal sender As Object, ByVal e As EventArgs)\n    AddHandler Page.InitComplete, AddressOf InitComplete\n  End Sub\n\n  Sub InitComplete(ByVal sender As Object, ByVal e As System.EventArgs)\n    _manager = WebPartManager.GetCurrentWebPartManager(Page)\n      \n    Dim browseModeName As String = WebPartManager.BrowseDisplayMode.Name\n      \n    &#39; Fill the dropdown with the names of supported display modes.\n    Dim mode As WebPartDisplayMode\n    For Each mode In _manager.SupportedDisplayModes\n      Dim modeName As String = mode.Name\n      &#39; Make sure a mode is enabled before adding it.\n      If mode.IsEnabled(_manager) Then\n        Dim item As New ListItem(modeName, modeName)\n        DisplayModeDropdown.Items.Add(item)\n      End If\n    Next mode\n      \n    &#39; If shared scope is allowed for this user, display the scope-switching\n    &#39; UI and select the appropriate radio button for the current user scope.\n    If _manager.Personalization.CanEnterSharedScope Then\n      Panel2.Visible = True\n      If _manager.Personalization.Scope = PersonalizationScope.User Then\n        RadioButton1.Checked = True\n      Else\n        RadioButton2.Checked = True\n      End If\n    End If\n   \n  End Sub\n\n  &#39; Change the page to the selected display mode.\n  Sub DisplayModeDropdown_SelectedIndexChanged(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    Dim selectedMode As String = DisplayModeDropdown.SelectedValue   \n    Dim mode As WebPartDisplayMode = _\n      _manager.SupportedDisplayModes(selectedMode)\n    If Not (mode Is Nothing) Then\n      _manager.DisplayMode = mode\n    End If\n\n  End Sub\n   \n  &#39; Set the selected item equal to the current display mode.\n  Sub Page_PreRender(ByVal sender As Object, ByVal e As EventArgs)\n    Dim items As ListItemCollection = DisplayModeDropdown.Items\n    Dim selectedIndex As Integer = _\n      items.IndexOf(items.FindByText(_manager.DisplayMode.Name))\n    DisplayModeDropdown.SelectedIndex = selectedIndex\n\n  End Sub\n\n  &#39; Reset all of a user&#39;s personalization data for the page.\n  Protected Sub LinkButton1_Click(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    _manager.Personalization.ResetPersonalizationState()\n    \n  End Sub\n\n  &#39; If not in User personalization scope, toggle into it.\n  Protected Sub RadioButton1_CheckedChanged(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    If _manager.Personalization.Scope = PersonalizationScope.Shared Then\n      _manager.Personalization.ToggleScope()\n    End If\n\n  End Sub\n   \n  &#39; If not in Shared scope, and if user is allowed, toggle the scope.\n  Protected Sub RadioButton2_CheckedChanged(ByVal sender As Object, _\n    ByVal e As EventArgs)\n    \n    If _manager.Personalization.CanEnterSharedScope AndAlso _\n      _manager.Personalization.Scope = PersonalizationScope.User Then\n      _manager.Personalization.ToggleScope()\n    End If\n\n  End Sub\n\n&lt;/script&gt;\n&lt;div&gt;\n  &lt;asp:Panel ID=&quot;Panel1&quot; runat=&quot;server&quot; \n    Borderwidth=&quot;1&quot; \n    Width=&quot;230&quot; \n    BackColor=&quot;lightgray&quot;\n    Font-Names=&quot;Verdana, Arial, Sans Serif&quot; &gt;\n    &lt;asp:Label ID=&quot;Label1&quot; runat=&quot;server&quot; \n      Text=&quot;&amp;nbsp;Display Mode&quot; \n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot;\n      Width=&quot;120&quot; \n      AssociatedControlID=&quot;DisplayModeDropdown&quot;/&gt;\n    &lt;asp:DropDownList ID=&quot;DisplayModeDropdown&quot; runat=&quot;server&quot;  \n      AutoPostBack=&quot;true&quot; \n      Width=&quot;120&quot;\n      OnSelectedIndexChanged=&quot;DisplayModeDropdown_SelectedIndexChanged&quot; /&gt;\n    &lt;asp:LinkButton ID=&quot;LinkButton1&quot; runat=&quot;server&quot;\n      Text=&quot;Reset User State&quot; \n      ToolTip=&quot;Reset the current user&#39;s personalization data for the page.&quot;\n      Font-Size=&quot;8&quot; \n      OnClick=&quot;LinkButton1_Click&quot; /&gt;\n    &lt;asp:Panel ID=&quot;Panel2&quot; runat=&quot;server&quot; \n      GroupingText=&quot;Personalization Scope&quot;\n      Font-Bold=&quot;true&quot;\n      Font-Size=&quot;8&quot; \n      Visible=&quot;false&quot; &gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton1&quot; runat=&quot;server&quot; \n        Text=&quot;User&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; OnCheckedChanged=&quot;RadioButton1_CheckedChanged&quot; /&gt;\n      &lt;asp:RadioButton ID=&quot;RadioButton2&quot; runat=&quot;server&quot; \n        Text=&quot;Shared&quot; \n        AutoPostBack=&quot;true&quot;\n        GroupName=&quot;Scope&quot; \n        OnCheckedChanged=&quot;RadioButton2_CheckedChanged&quot; /&gt;\n    &lt;/asp:Panel&gt;\n  &lt;/asp:Panel&gt;\n&lt;/div&gt;\n</code></pre><p> The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named <code>IZipCode</code>. There is also a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> class named <code>ZipCodeWebPart</code> that implements the interface and acts as the provider control. Its <code>ProvideIZipCode</code> method is the callback method that implements the interface&#39;s only member. The method simply returns an instance of the interface. Note that the method is marked with a <code>ConnectionProvider</code> attribute in its metadata. This is the mechanism for identifying the method as the callback method for the provider&#39;s connection point. The other <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> class is named <code>WeatherWebPart</code>, and it acts as the consumer for the connection. This class has a method named <code>GetZipCode</code> that gets an instance of the <code>IZipCode</code> interface from the provider control. Note that this method is marked as the consumer&#39;s connection point method with a <code>ConnectionConsumer</code> attribute in its metadata. This is the mechanism for identifying the connection point method in the consumer control.  </p>\n<p> For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site&#39;s Bin folder or the global assembly cache. Alternatively, you can put the source code in your site&#39;s App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see <a href=\"../Topic/Walkthrough:%20Developing%20and%20Using%20a%20Custom%20Web%20Server%20Control.md\" data-linktype=\"relative-path\">Walkthrough: Developing and Using a Custom Web Server Control</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"WebParts_ConnectionPoint_Overview#2\">Imports System\nImports System.Web\nImports System.Web.Security\nImports System.Security.Permissions\nImports System.Web.UI\nImports System.Web.UI.WebControls\nImports System.Web.UI.WebControls.WebParts\n\nNamespace Samples.AspNet.VB.Controls\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Interface IZipCode\n\n    Property ZipCode() As String\n\n  End Interface\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class ZipCodeWebPart\n    Inherits WebPart\n    Implements IZipCode\n    Private zipCodeText As String = String.Empty\n    Private input As TextBox\n    Private send As Button\n\n    Public Sub New()\n    End Sub\n\n    &#39; Make the implemented property personalizable to save \n    &#39; the Zip Code between browser sessions.\n    &lt;Personalizable()&gt; _\n    Public Property ZipCode() As String _\n      Implements IZipCode.ZipCode\n\n      Get\n        Return zipCodeText\n      End Get\n      Set(ByVal value As String)\n        zipCodeText = value\n      End Set\n    End Property\n\n    &#39; This is the callback method that returns the provider.\n    &lt;ConnectionProvider(&quot;Zip Code Provider&quot;, &quot;ZipCodeProvider&quot;)&gt; _\n    Public Function ProvideIZipCode() As IZipCode\n      Return Me\n    End Function\n\n\n    Protected Overrides Sub CreateChildControls()\n      Controls.Clear()\n      input = New TextBox()\n      Me.Controls.Add(input)\n      send = New Button()\n      send.Text = &quot;Enter 5-digit Zip Code&quot;\n      AddHandler send.Click, AddressOf Me.submit_Click\n      Me.Controls.Add(send)\n\n    End Sub\n\n\n    Private Sub submit_Click(ByVal sender As Object, _\n      ByVal e As EventArgs)\n\n      If input.Text &lt;&gt; String.Empty Then\n        zipCodeText = Page.Server.HtmlEncode(input.Text)\n        input.Text = String.Empty\n      End If\n\n    End Sub\n\n  End Class\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class WeatherWebPart\n    Inherits WebPart\n    Private _provider As IZipCode\n    Private _zipSearch As String\n    Private DisplayContent As Label\n\n    &#39; This method is identified by the ConnectionConsumer \n    &#39; attribute, and is the mechanism for connecting with \n    &#39; the provider. \n    &lt;ConnectionConsumer(&quot;Zip Code Consumer&quot;, &quot;ZipCodeConsumer&quot;)&gt; _\n    Public Sub GetIZipCode(ByVal Provider As IZipCode)\n      _provider = Provider\n    End Sub\n\n\n    Protected Overrides Sub OnPreRender(ByVal e As EventArgs)\n      EnsureChildControls()\n\n      If Not (Me._provider Is Nothing) Then\n        _zipSearch = _provider.ZipCode.Trim()\n\t\t\t\tDisplayContent.Text = &quot;My Zip Code is:  &quot; + _zipSearch\n      End If\n\n    End Sub &#39;OnPreRender\n\n    Protected Overrides Sub CreateChildControls()\n      Controls.Clear()\n      DisplayContent = New Label()\n      Me.Controls.Add(DisplayContent)\n\n    End Sub\n\n  End Class\n\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"WebParts_ConnectionPoint_Overview#2\">namespace Samples.AspNet.CS.Controls\n{\n  using System;\n  using System.Web;\n  using System.Web.Security;\n  using System.Security.Permissions;\n  using System.Web.UI;\n  using System.Web.UI.WebControls;\n  using System.Web.UI.WebControls.WebParts;\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public interface IZipCode\n  {\n    string ZipCode { get; set;}\n  }\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public class ZipCodeWebPart : WebPart, IZipCode\n  {\n    string zipCodeText = String.Empty;\n    TextBox input;\n    Button send;\n\n    public ZipCodeWebPart()\n    {\n    }\n\n    // Make the implemented property personalizable to save \n    // the Zip Code between browser sessions.\n    [Personalizable()]\n    public virtual string ZipCode\n    {\n      get { return zipCodeText; }\n      set { zipCodeText = value; }\n    }\n\n    // This is the callback method that returns the provider.\n    [ConnectionProvider(&quot;Zip Code Provider&quot;, &quot;ZipCodeProvider&quot;)]\n    public IZipCode ProvideIZipCode()\n    {\n      return this;\n    }\n\n    protected override void CreateChildControls()\n    {\n      Controls.Clear();\n      input = new TextBox();\n      this.Controls.Add(input);\n      send = new Button();\n      send.Text = &quot;Enter 5-digit Zip Code&quot;;\n      send.Click += new EventHandler(this.submit_Click);\n      this.Controls.Add(send);\n    }\n\n    private void submit_Click(object sender, EventArgs e)\n    {\n      if (input.Text != String.Empty)\n      {\n        zipCodeText = Page.Server.HtmlEncode(input.Text);\n        input.Text = String.Empty;\n      }\n    }\n\n  }\n\n  [AspNetHostingPermission(SecurityAction.Demand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n    Level = AspNetHostingPermissionLevel.Minimal)]\n  public class WeatherWebPart : WebPart\n  {\n    private IZipCode _provider;\n    string _zipSearch;\n    Label DisplayContent;\n\n    // This method is identified by the ConnectionConsumer \n    // attribute, and is the mechanism for connecting with \n    // the provider. \n    [ConnectionConsumer(&quot;Zip Code Consumer&quot;, &quot;ZipCodeConsumer&quot;)]\n    public void GetIZipCode(IZipCode Provider)\n    {\n      _provider = Provider;\n    }\n    \n    protected override void OnPreRender(EventArgs e)\n    {\n      EnsureChildControls();\n\n      if (this._provider != null)\n      {\n        _zipSearch = _provider.ZipCode.Trim();\n        DisplayContent.Text = &quot;My Zip Code is:  &quot; + _zipSearch;\n      }\n    }\n\n    protected override void CreateChildControls()\n    {\n      Controls.Clear();\n      DisplayContent = new Label();\n      this.Controls.Add(DisplayContent);\n    }\n\n  }\n}\n</code></pre><p> The third part of the code example is the Web page. Near the top are <code>Register</code> directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page. The connection itself is created declaratively within the <code>&lt;staticconnections&gt;</code> element on the page. You can also create the connection programmatically; the code for doing that is contained in the <code>Button1_Click</code> method. Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer. The <code>Button2_Click</code> method accesses the ConnectionPoint objects for both the provider and the consumer, and writes some of their property values to a label in the page.  </p>\n<pre><code class=\"lang-vb\" name=\"WebParts_ConnectionPoint_Overview#1\">&lt;%@ Page Language=&quot;VB&quot; %&gt;\n&lt;%@ register tagprefix=&quot;uc1&quot; \n    tagname=&quot;DisplayModeMenuVB&quot;\n    src=&quot;~/displaymodemenuvb.ascx&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;aspSample&quot; \n    Namespace=&quot;Samples.AspNet.VB.Controls&quot; %&gt;\n    \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n  &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n\n  Protected Sub Button1_Click(ByVal sender As Object, _\n    ByVal e As System.EventArgs)\n\n    Dim provPoint As ProviderConnectionPoint = _\n      mgr.GetProviderConnectionPoints(zip1)(&quot;ZipCodeProvider&quot;)\n    Dim connPoint As ConsumerConnectionPoint = _\n      mgr.GetConsumerConnectionPoints(weather1)(&quot;ZipCodeConsumer&quot;)\n\n    If mgr.CanConnectWebParts(zip1, provPoint, weather1, connPoint) Then\n      mgr.ConnectWebParts(zip1, provPoint, weather1, connPoint)\n    End If\n    \n  End Sub\n  \n  Protected Sub Button2_Click(ByVal sender As Object, _\n    ByVal e As System.EventArgs)\n    \n    Dim conn As WebPartConnection = mgr.Connections(0)\n\n    lblConn.Text = &quot;&lt;h2&gt;Connection Point Details&lt;/h2&gt;&quot; &amp; _\n      &quot;&lt;h3&gt;Provider Connection Point&lt;/h3&gt;&quot; &amp; _\n      &quot;  Display name: &quot; &amp; conn.ProviderConnectionPoint.DisplayName &amp; _\n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;  ID: &quot; &amp; conn.ProviderConnectionPoint.ID &amp; _\n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;  Interface type: &quot; &amp; conn.ProviderConnectionPoint.InterfaceType.ToString() &amp; _\n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;  Control type: &quot; &amp; conn.ProviderConnectionPoint.ControlType.ToString() &amp; _\n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;  Allows multiple connections: &quot; &amp; _\n        conn.ProviderConnectionPoint.AllowsMultipleConnections.ToString() &amp; _\n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;  Enabled: &quot; &amp; conn.ProviderConnectionPoint.GetEnabled(zip1).ToString() &amp; _\n      &quot;&lt;hr /&gt;&quot; &amp; _\n      &quot;&lt;h3&gt;Consumer Connection Point&lt;/h3&gt;&quot; &amp; _\n      &quot;  Display name: &quot; &amp; conn.ConsumerConnectionPoint.DisplayName &amp; _\n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;  ID: &quot; &amp; conn.ConsumerConnectionPoint.ID &amp; _\n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;  Interface type: &quot; &amp; conn.ConsumerConnectionPoint.InterfaceType.ToString() &amp; _\n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;  Control type: &quot; &amp; conn.ConsumerConnectionPoint.ControlType.ToString() &amp; _\n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;  Allows multiple connections: &quot; &amp; _\n        conn.ConsumerConnectionPoint.AllowsMultipleConnections.ToString() &amp; _\n      &quot;&lt;br /&gt;&quot; &amp; _\n      &quot;  Enabled: &quot; &amp; conn.ConsumerConnectionPoint.GetEnabled(zip1).ToString()\n          \n  End Sub\n\n  Protected Sub Page_Load(ByVal sender As Object, _\n    ByVal e As System.EventArgs)\n    lblConn.Text = String.Empty\n  End Sub\n  \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head id=&quot;Head1&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:WebPartManager ID=&quot;mgr&quot; runat=&quot;server&quot; &gt;\n        &lt;StaticConnections&gt;\n          &lt;asp:WebPartConnection ID=&quot;conn1&quot;\n            ConsumerConnectionPointID=&quot;ZipCodeConsumer&quot;\n            ConsumerID=&quot;weather1&quot; \n            ProviderConnectionPointID=&quot;ZipCodeProvider&quot; \n            ProviderID=&quot;zip1&quot; /&gt;\n        &lt;/StaticConnections&gt;      \n      &lt;/asp:WebPartManager&gt;\n      &lt;uc1:displaymodemenuvb id=&quot;menu1&quot; runat=&quot;server&quot; /&gt;\n      &lt;asp:WebPartZone ID=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;\n        &lt;ZoneTemplate&gt;\n          &lt;aspSample:ZipCodeWebPart ID=&quot;zip1&quot; runat=&quot;server&quot;\n            Title=&quot;Zip Code Provider&quot;  /&gt;\n          &lt;aspSample:WeatherWebPart ID=&quot;weather1&quot; runat=&quot;server&quot; \n            Title=&quot;Zip Code Consumer&quot; /&gt;\n        &lt;/ZoneTemplate&gt;\n      &lt;/asp:WebPartZone&gt;\n      &lt;asp:ConnectionsZone ID=&quot;ConnectionsZone1&quot; runat=&quot;server&quot;&gt;\n      &lt;/asp:ConnectionsZone&gt;\n      &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; \n        Text=&quot;Dynamic Connection&quot; \n        OnClick=&quot;Button1_Click&quot; /&gt;      \n      &lt;br /&gt;\n      &lt;asp:Button ID=&quot;Button2&quot; runat=&quot;server&quot; \n        Text=&quot;Connection Point Details&quot; \n        OnClick=&quot;Button2_Click&quot; /&gt;\n      &lt;br /&gt;\n      &lt;asp:Label ID=&quot;lblConn&quot; runat=&quot;server&quot; /&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"WebParts_ConnectionPoint_Overview#1\">&lt;%@ Page Language=&quot;C#&quot; %&gt;\n&lt;%@ register tagprefix=&quot;uc1&quot; \n    tagname=&quot;DisplayModeMenuCS&quot;\n    src=&quot;~/displaymodemenucs.ascx&quot; %&gt;\n&lt;%@ Register TagPrefix=&quot;aspSample&quot; \n    Namespace=&quot;Samples.AspNet.CS.Controls&quot; %&gt;\n    \n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n  &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;script runat=&quot;server&quot;&gt;\n\n  protected void Button1_Click(object sender, EventArgs e)\n  {\n    ProviderConnectionPoint provPoint =\n      mgr.GetProviderConnectionPoints(zip1)[&quot;ZipCodeProvider&quot;];\n    ConsumerConnectionPoint connPoint =\n      mgr.GetConsumerConnectionPoints(weather1)[&quot;ZipCodeConsumer&quot;];\n      \n    if(mgr.CanConnectWebParts(zip1, provPoint, weather1, connPoint))\n      mgr.ConnectWebParts(zip1, provPoint, weather1, connPoint);\n  \n  }  \n  protected void Button2_Click(object sender, EventArgs e)\n  {\n    WebPartConnection conn = mgr.Connections[0];\n    \n    lblConn.Text = &quot;&lt;h2&gt;Connection Point Details&lt;/h2&gt;&quot; + \n       &quot;&lt;h3&gt;Provider Connection Point&lt;/h3&gt;&quot; + \n       &quot;  Display name: &quot; + conn.ProviderConnectionPoint.DisplayName + \n       &quot;&lt;br /&gt;&quot; + \n       &quot;  ID: &quot; + conn.ProviderConnectionPoint.ID + \n       &quot;&lt;br /&gt;&quot; + \n       &quot;  Interface type: &quot; + \n        conn.ProviderConnectionPoint.InterfaceType.ToString() + \n       &quot;&lt;br /&gt;&quot; + \n       &quot;  Control type: &quot; + conn.ProviderConnectionPoint.ControlType.ToString() + \n       &quot;&lt;br /&gt;&quot; + \n       &quot;  Allows multiple connections: &quot; + \n          conn.ProviderConnectionPoint.AllowsMultipleConnections.ToString() + \n       &quot;&lt;br /&gt;&quot; + \n       &quot;  Enabled: &quot; + conn.ProviderConnectionPoint.GetEnabled(zip1).ToString() + \n       &quot;&lt;hr /&gt;&quot; + \n       &quot;&lt;h3&gt;Consumer Connection Point&lt;/h3&gt;&quot; + \n       &quot;  Display name: &quot; + conn.ConsumerConnectionPoint.DisplayName + \n       &quot;&lt;br /&gt;&quot; + \n       &quot;  ID: &quot; + conn.ConsumerConnectionPoint.ID + \n       &quot;&lt;br /&gt;&quot; + \n       &quot;  Interface type: &quot; + conn.ConsumerConnectionPoint.InterfaceType.ToString() + \n       &quot;&lt;br /&gt;&quot; + \n       &quot;  Control type: &quot; + conn.ConsumerConnectionPoint.ControlType.ToString() + \n       &quot;&lt;br /&gt;&quot; + \n       &quot;  Allows multiple connections: &quot; + \n          conn.ConsumerConnectionPoint.AllowsMultipleConnections.ToString() + \n       &quot;&lt;br /&gt;&quot; + \n       &quot;  Enabled: &quot; + conn.ConsumerConnectionPoint.GetEnabled(zip1).ToString();\n  }\n\n  protected void Page_Load(object sender, EventArgs e)\n  {\n    lblConn.Text = String.Empty;\n  }\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div&gt;\n      &lt;asp:WebPartManager ID=&quot;mgr&quot; runat=&quot;server&quot; &gt;\n        &lt;StaticConnections&gt;\n          &lt;asp:WebPartConnection ID=&quot;conn1&quot;\n            ConsumerConnectionPointID=&quot;ZipCodeConsumer&quot;\n            ConsumerID=&quot;weather1&quot; \n            ProviderConnectionPointID=&quot;ZipCodeProvider&quot; \n            ProviderID=&quot;zip1&quot; /&gt;\n        &lt;/StaticConnections&gt;      \n      &lt;/asp:WebPartManager&gt;\n      &lt;uc1:displaymodemenucs id=&quot;menu1&quot; runat=&quot;server&quot; /&gt;\n      &lt;asp:WebPartZone ID=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;\n        &lt;ZoneTemplate&gt;\n          &lt;aspSample:ZipCodeWebPart ID=&quot;zip1&quot; runat=&quot;server&quot;\n            Title=&quot;Zip Code Provider&quot;  /&gt;\n          &lt;aspSample:WeatherWebPart ID=&quot;weather1&quot; runat=&quot;server&quot; \n            Title=&quot;Zip Code Consumer&quot; /&gt;\n        &lt;/ZoneTemplate&gt;\n      &lt;/asp:WebPartZone&gt;\n      &lt;asp:ConnectionsZone ID=&quot;ConnectionsZone1&quot; runat=&quot;server&quot;&gt;\n      &lt;/asp:ConnectionsZone&gt;\n      &lt;asp:Button ID=&quot;Button1&quot; runat=&quot;server&quot; \n        Text=&quot;Dynamic Connection&quot; \n        OnClick=&quot;Button1_Click&quot; /&gt;      \n      &lt;br /&gt;\n      &lt;asp:Button ID=&quot;Button2&quot; runat=&quot;server&quot; \n        Text=&quot;Connection Point Details&quot; \n        OnClick=&quot;Button2_Click&quot; /&gt;\n      &lt;br /&gt;\n      &lt;asp:Label ID=&quot;lblConn&quot; runat=&quot;server&quot; /&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p> After you load the page in a browser, click the <strong>Connection Point Details</strong> button. Information about the provider and consumer connection points established in the declarative connection appears. Next, use the <strong>Display Mode</strong> drop-down control to switch the page into connect mode. On the verbs menu of one of the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls (represented by a downward arrow in the title bar), click the connect verb. The connection UI appears, created automatically by the <code>&lt;asp:connectionszone&gt;</code> control declared in the page. Click the <strong>Disconnect</strong> button to terminate the existing connection. Use the <strong>Display Mode</strong> control to return the page to browse mode. Next, click the <strong>Dynamic Connection</strong> button to create a connection programmatically. Click the <strong>Connection Point Details</strong> button again, to indicate details about the two connection point objects.</p>\n\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Every Web Parts connection consists of two server controls sharing data: one control is the consumer, the other is the provider. For a discussion of the essential components of a Web Parts connection, and the connection object itself, see the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection\" data-linktype=\"relative-path\">WebPartConnection</a> class overview. Every Web Parts connection requires connection points. The provider and the consumer control must each have at least one defined ConnectionPoint object (each of them can optionally have multiple connection points) that contains the details for how a control can connect to another control and the type of data it can share. In an actual connection, the provider has its own type of connection point object (derived from the base ConnectionPoint class), a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.providerconnectionpoint\" data-linktype=\"relative-path\">ProviderConnectionPoint</a> instance, and the consumer has its own object, a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.consumerconnectionpoint\" data-linktype=\"relative-path\">ConsumerConnectionPoint</a> instance.  </p>\n<p> To create a provider connection point, developers must add a callback method to the provider that will return an implemented interface instance to a consumer. They must mark the callback method in the source code with a <code>ConnectionProvider</code> code attribute (see the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionproviderattribute\" data-linktype=\"relative-path\">ConnectionProviderAttribute</a> class). Similarly, to create a consumer connection point, developers must add a method to the consumer that receives an interface instance, and they must mark that method with a <code>ConnectionConsumer</code> attribute (see the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionconsumerattribute\" data-linktype=\"relative-path\">ConnectionConsumerAttribute</a> class).  </p>\n<p> When developers create connections on a Web page, they can be created as static or dynamic connections. Static connections are declared in the markup of a Web page. When a static connection is declared, developers can designate which connection points are used for both the consumer and provider by assigning values to the <code>ProviderConnectionPointID</code> and <code>ConsumerConnectionPointID</code> attributes within the <code>&lt;asp:webpartconnection&gt;</code> element tag. This approach is especially useful if there are multiple connection points defined within the consumer and provider controls, because it enables the static connection to identify which connection points to use for the connection.  </p>\n<p> Dynamic connections are created programmatically, either by a developer&#39;s code or by users through the user interface (UI) provided by the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionszone\" data-linktype=\"relative-path\">ConnectionsZone</a> control. To create a connection in code, developers must get an instance of a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartconnection\" data-linktype=\"relative-path\">WebPartConnection</a> object by calling the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager#System_Web_UI_WebControls_WebParts_WebPartManager_ConnectWebParts_\" data-linktype=\"relative-path\">ConnectWebParts</a> method on the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager\" data-linktype=\"relative-path\">WebPartManager</a> control. Before they can call this method, developers must have references to the consumer and provider server controls and their respective connection point objects. To get references to the connection points for a provider and a consumer control, developers first call the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager#System_Web_UI_WebControls_WebParts_WebPartManager_GetProviderConnectionPoints_\" data-linktype=\"relative-path\">GetProviderConnectionPoints</a> and <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager#System_Web_UI_WebControls_WebParts_WebPartManager_GetConsumerConnectionPoints_\" data-linktype=\"relative-path\">GetConsumerConnectionPoints</a> methods on the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager\" data-linktype=\"relative-path\">WebPartManager</a> control. These methods return the appropriate connection point objects, which in turn can be passed to the method for creating a connection.  </p>\n<p> When the provider&#39;s and the consumer&#39;s connection point objects both work with the same type of interface, they are compatible and can form a direct connection to share data. If they do not work with the same interface type, a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webparttransformer\" data-linktype=\"relative-path\">WebPartTransformer</a> object must be used to translate the interface instance from the provider into a type that the consumer can work with.  </p>\n<p> The abstract ConnectionPoint class provides the base details of connection points that are shared by both consumer and provider controls. Several properties contain these details. The <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionpoint#System_Web_UI_WebControls_WebParts_ConnectionPoint_AllowsMultipleConnections_\" data-linktype=\"relative-path\">AllowsMultipleConnections</a> property indicates whether a connection point can participate in more than one connection at a time. By default, provider connection points can participate in multiple connections, and consumer connection points cannot. The <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionpoint#System_Web_UI_WebControls_WebParts_ConnectionPoint_ControlType_\" data-linktype=\"relative-path\">ControlType</a> property indicates the type of the server control associated with a connection point. Note that not only <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls can form connections; any server control, whether an ASP.NET control, a custom control, or a user control, can be enabled to participate in connections if placed in a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartzonebase\" data-linktype=\"relative-path\">WebPartZoneBase</a> zone. The <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionpoint#System_Web_UI_WebControls_WebParts_ConnectionPoint_DisplayName_\" data-linktype=\"relative-path\">DisplayName</a> property provides a friendly name for the connection point that can be displayed in the UI to assist users who are creating connections. The <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionpoint#System_Web_UI_WebControls_WebParts_ConnectionPoint_ID_\" data-linktype=\"relative-path\">ID</a> property serves as a string identifier for the connection point object itself. The <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionpoint#System_Web_UI_WebControls_WebParts_ConnectionPoint_InterfaceType_\" data-linktype=\"relative-path\">InterfaceType</a> property indicates what type of interface instance the connection point understands. Whether a given connection point provides or consumes an instance of that interface is determined by whether it is a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.providerconnectionpoint\" data-linktype=\"relative-path\">ProviderConnectionPoint</a> or a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.consumerconnectionpoint\" data-linktype=\"relative-path\">ConsumerConnectionPoint</a> object.  </p>\n<p> The ConnectionPoint class has one method. The <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionpoint#System_Web_UI_WebControls_WebParts_ConnectionPoint_GetEnabled_\" data-linktype=\"relative-path\">GetEnabled</a> method returns a Boolean value indicating whether a connection point is currently able to participate in connections.  </p>\n<p> The ConnectionPoint class also has one public field, <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionpoint#System_Web_UI_WebControls_WebParts_ConnectionPoint_DefaultID\" data-linktype=\"relative-path\">DefaultID</a>. This field contains a value used to identify the default connection point in a connection.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The attributes for specifying connection point methods have only one required parameter, <code>displayName</code>, so it is possible to create the default connection point attribute without specifying an ID. In such cases, the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionpoint#System_Web_UI_WebControls_WebParts_ConnectionPoint_DefaultID\" data-linktype=\"relative-path\">DefaultID</a> field supplies a base value to use.</p>\n</div>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Fields\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_WebControls_WebParts_ConnectionPoint_DefaultID\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">DefaultID</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Represents a string used to identify the default connection point within a collection of connection points associated with a server control.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly string DefaultID;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When a connection point is created, it is possible to specify an ID for the connection point in the source code of a consumer or provider <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> control, using a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionconsumerattribute\" data-linktype=\"relative-path\">ConnectionConsumerAttribute</a> or a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionproviderattribute\" data-linktype=\"relative-path\">ConnectionProviderAttribute</a> attribute. However, when an attribute is added to a connection point in the source code, the <code>ID</code> parameter is optional. If the ID is not specified in the attribute, the DefaultID field provides a string that is used to identify the default connection point.  </p>\n<p> If multiple connection points are defined in a consumer or provider control, it is necessary to specify an ID for each connection point, so that the connection points can be distinguished when creating connections.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_WebControls_WebParts_ConnectionPoint_AllowsMultipleConnections\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AllowsMultipleConnections</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether a connection point supports multiple simultaneous connections.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool AllowsMultipleConnections { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the connection point supports multiple connections; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.providerconnectionpoint\" data-linktype=\"relative-path\">ProviderConnectionPoint</a> objects have their AllowsMultipleConnections property value set to <code>true</code> (by the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionproviderattribute\" data-linktype=\"relative-path\">ConnectionProviderAttribute</a> class), because the Web Parts control set by default enables provider connection points to form connections to multiple consumers.  </p>\n<p> In contrast, <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.consumerconnectionpoint\" data-linktype=\"relative-path\">ConsumerConnectionPoint</a> objects have their AllowsMultipleConnections property value set to <code>false</code> (by the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionconsumerattribute\" data-linktype=\"relative-path\">ConnectionConsumerAttribute</a> class) because the Web Parts control set by default allows consumer connection points to establish a connection to only one provider at a time.  </p>\n<p> You can change the default behavior concerning multiple connections by assigning different values to the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionproviderattribute#System_Web_UI_WebControls_WebParts_ConnectionProviderAttribute_AllowsMultipleConnections_\" data-linktype=\"relative-path\">AllowsMultipleConnections</a> property (for providers) or the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionconsumerattribute#System_Web_UI_WebControls_WebParts_ConnectionConsumerAttribute_AllowsMultipleConnections_\" data-linktype=\"relative-path\">AllowsMultipleConnections</a> property (for consumers) on the two <a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a> classes used for connection attributes. If you enable consumer connection points to connect to multiple providers at the same time, your code must deal with any resulting synchronization issues.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_WebControls_WebParts_ConnectionPoint_ControlType\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ControlType</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of the server control with which a connection point is associated.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Type ControlType { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> representing the control type.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The value of the ControlType property is often the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> type. However, because any type of user control or server control can participate in connections if it is properly enabled and placed in a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartzonebase\" data-linktype=\"relative-path\">WebPartZoneBase</a> zone, the ControlType property can return one of these other server control types as well.  </p>\n<p> When server controls that are not <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls are placed in a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartzonebase\" data-linktype=\"relative-path\">WebPartZoneBase</a> zone, they are wrapped with a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.genericwebpart\" data-linktype=\"relative-path\">GenericWebPart</a> object at run time so they can function as <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> controls and participate in connections. But when such controls are involved in connections, the ControlType property value does not return the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.genericwebpart\" data-linktype=\"relative-path\">GenericWebPart</a> type; it returns the type of the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.genericwebpart\" data-linktype=\"relative-path\">GenericWebPart</a> object&#39;s child control, which is the type of the server or user control.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_WebControls_WebParts_ConnectionPoint_DisplayName\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">DisplayName</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a string that serves as a friendly display name to represent a connection point in the user interface (UI).</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string DisplayName { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string that contains a friendly display name for a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionpoint\" data-linktype=\"relative-path\">ConnectionPoint</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>To create a Web Parts connection, the provider and consumer controls for the connection must each specify at least one connection point, a method that enables them to communicate and share data. To identify these connection point methods, a developer specifies an attribute on the selected methods. In the provider, a <code>ConnectionProvider</code> attribute is set on the selected callback method, and in the consumer, a <code>ConnectionConsumer</code> attribute is set on the method that receives an instance of an interface that contains data from the provider. For both of these attributes, the one parameter that is always required, regardless of which overload is declared to create the attribute, is the <code>displayName</code> parameter. The developer must assign a string to be used as a friendly display name for the connection point, and that string becomes the value of the DisplayName property.  </p>\n<p> The DisplayName property value is displayed in the UI of a Web page when users create connections. For example, when the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionszone\" data-linktype=\"relative-path\">ConnectionsZone</a> control is added to the page, it creates a UI for users to create connections between controls. After a user switches a page into connect display mode and clicks a connect verb on a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> control, the connection UI appears. Each control that can participate in a connection is listed in the UI, and next to each control is a drop-down list control that displays the friendly names of its available connection points. Users must select at least one connection point to establish a connection. The values that appear in the list of connection points are obtained from the DisplayName property. If developers build a custom UI for creating connections, they can use the DisplayName property in a similar way to provide a friendly name that represents a connection point.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_WebControls_WebParts_ConnectionPoint_ID\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ID</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a string that contains the identifier for a connection point.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string ID { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string that contains the identifier for a connection point.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When a developer declares a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionconsumerattribute\" data-linktype=\"relative-path\">ConnectionConsumerAttribute</a> or a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionproviderattribute\" data-linktype=\"relative-path\">ConnectionProviderAttribute</a> attribute on a method in the source code of a control, so that the method can be used as a connection point, it is not required to declare the <code>ID</code> parameter for the connection point attribute. The only required attribute is the <code>displayName</code> parameter. A default ID is assigned to the connection point, using the value from the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionpoint#System_Web_UI_WebControls_WebParts_ConnectionPoint_DefaultID\" data-linktype=\"relative-path\">DefaultID</a> field.  </p>\n<p> If there is only one method in a control being used as a connection point, it is unnecessary to specify an ID for the connection point. If there are multiple methods specified as connection points, you must specify an ID for each one; otherwise, an exception will be thrown. By assigning an ID to each connection point, you also make it possible to specify which connection point to use when you declare connections in Web pages or create them in code.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_WebControls_WebParts_ConnectionPoint_InterfaceType\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">InterfaceType</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the type of the interface used by a connection point.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Type InterfaceType { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> that corresponds to the interface type provided or consumed by a control.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The InterfaceType property indicates what type of interface a connection point uses. This can help to determine whether two controls are compatible and able to form a connection. If the provider connection point&#39;s InterfaceType is different from the consumer connection point&#39;s InterfaceType, then the two controls are incompatible (meaning that they cannot be directly connected without a transformer), and a <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webparttransformer\" data-linktype=\"relative-path\">WebPartTransformer</a> object must be used to establish a connection.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_WebControls_WebParts_ConnectionPoint_GetEnabled_System_Web_UI_Control_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetEnabled(Control)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether a connection point can participate in connections.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual bool GetEnabled (System.Web.UI.Control control);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>control</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> or other server control that is associated with a connection point.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the control can create a connection point to participate in a connection; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The GetEnabled method in the base <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.connectionpoint\" data-linktype=\"relative-path\">ConnectionPoint</a> class always returns <code>true</code>, but derived classes can override the method to return <code>true</code> or <code>false</code> at different times, based on the state of <code>control</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.WebParts.ConnectionPoint.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.ConnectionPoint\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.ConnectionPoint.ID\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType\">\r\n<meta name=\"APILocation\" content=\"System.Web.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"6a4765e9-47fb-c7eb-5967-bae712a7202f\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Serves as the base class for defining connection point objects that enable the consumer control and the provider control in a Web Parts connection to share data.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.web.ui.webcontrols.webparts/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.WebControls.WebParts.ConnectionPoint\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.WebParts.ConnectionPoint.yml","open_to_public_contributors":false,"api_name":["System.Web.UI.WebControls.WebParts.ConnectionPoint","System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections","System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType","System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID","System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName","System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled","System.Web.UI.WebControls.WebParts.ConnectionPoint.ID","System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType"],"api_location":["System.Web.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.WebControls.WebParts.ConnectionPoint","System::Web::UI::WebControls::WebParts::ConnectionPoint","System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections","System::Web::UI::WebControls::WebParts::ConnectionPoint::AllowsMultipleConnections","System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType","System::Web::UI::WebControls::WebParts::ConnectionPoint::ControlType","System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID","System::Web::UI::WebControls::WebParts::ConnectionPoint::DefaultID","System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName","System::Web::UI::WebControls::WebParts::ConnectionPoint::DisplayName","System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled","System::Web::UI::WebControls::WebParts::ConnectionPoint::GetEnabled","System.Web.UI.WebControls.WebParts.ConnectionPoint.ID","System::Web::UI::WebControls::WebParts::ConnectionPoint::ID","System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType","System::Web::UI::WebControls::WebParts::ConnectionPoint::InterfaceType"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"6a4765e9-47fb-c7eb-5967-bae712a7202f","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls.WebParts/ConnectionPoint.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ConnectionPoint class | Microsoft Docs","_op_ogTitle":"ConnectionPoint class","description":"Serves as the base class for defining connection point objects that enable the consumer control and the provider control in a Web Parts connection to share data.\n","toc_asset_id":"api/_splitted/System.Web.UI.WebControls.WebParts/toc.json","toc_rel":"_splitted/System.Web.UI.WebControls.WebParts/toc.json","source_url":"","ms.assetid":"System.Web.UI.WebControls.WebParts.ConnectionPoint","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.webparts.connectionpoint","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.webparts.connectionpoint","fileRelativePath":"api/System.Web.UI.WebControls.WebParts.ConnectionPoint.html"},"themesRelativePathToOutputRoot":"_themes/"}