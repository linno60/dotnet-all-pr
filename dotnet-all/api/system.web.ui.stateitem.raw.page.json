{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">StateItem</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents an item that is saved in the <a class=\"xref\" href=\"system.web.ui.statebag\" data-linktype=\"relative-path\">StateBag</a> class when view state information is persisted between Web requests. This class cannot be inherited.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public sealed class StateItem</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">StateItem</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example uses the <a class=\"xref\" href=\"system.web.ui.stateitem#System_Web_UI_StateItem_Value_\" data-linktype=\"relative-path\">Value</a> and <a class=\"xref\" href=\"system.web.ui.stateitem#System_Web_UI_StateItem_IsDirty_\" data-linktype=\"relative-path\">IsDirty</a> properties of the StateItem class to save the state of a simple custom ASP.NET server control class, <code>StateBagSample</code>. When the page has posted to the server, the <a class=\"xref\" href=\"system.web.ui.stateitem#System_Web_UI_StateItem_IsDirty_\" data-linktype=\"relative-path\">IsDirty</a> property checks whether the item has been modified. The state values are displayed by accessing the <a class=\"xref\" href=\"system.web.ui.stateitem#System_Web_UI_StateItem_Value_\" data-linktype=\"relative-path\">Value</a> property.  </p>\n<pre><code class=\"lang-vb\" name=\"StateBag_IStateManager_Sample1#1\">&#39; Create a namespace that contains a class, MyItem,\n&#39; that implements the IStateManager interface and \n&#39; another, MyControl, that overrides its own view-state\n&#39; management methods to use those of MyItem.\nImports System\nImports System.Web\nImports System.Web.UI\nImports System.Collections\nImports System.Security.Permissions\n\nNamespace StateBagSampleVB\n\n    &#39; Create a class that implements IStateManager so that\n    &#39; it can manage its own view state.   \n\n    &lt;AspNetHostingPermission(SecurityAction.Demand, _\n       Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n    Public NotInheritable Class MyItem\n        Implements IStateManager\n        Private _message As String\n\n        &#39; The StateBag object that allows you to save\n        &#39; and restore view-state information.\n        Private _viewstate As StateBag\n\n\n        &#39; The constructor for the MyItem class.\n        Public Sub New(ByVal mesg As String)\n            _message = mesg\n            _viewstate = New StateBag()\n            _viewstate.Add(&quot;message&quot;, _message)\n        End Sub &#39;New\n\n        &#39; Create a Message property that reads from and writes\n        &#39; to view state. If the set accessor writes the message\n        &#39; value to view state, the StateBag.SetItemDirty method\n        &#39; is called, telling view state that the item has changed. \n\n        Public Property Message() As String\n            Get\n                Return CStr(_viewstate(&quot;message&quot;))\n            End Get\n            Set(ByVal value As String)\n                _message = value\n                _viewstate.SetItemDirty(&quot;message&quot;, True)\n            End Set\n        End Property\n\n        &#39; Implement the LoadViewState method. If the saved view state\n        &#39; exists, the view-state value is loaded to the MyItem \n        &#39; control. \n        Sub LoadViewState(ByVal savedState As Object) Implements IStateManager.LoadViewState\n            _message = CStr(_viewstate(&quot;message&quot;))\n            If Not (savedState Is Nothing) Then\n                CType(_viewstate, IStateManager).LoadViewState(savedState)\n            End If\n        End Sub &#39;LoadViewState\n        &#39; Implement the SaveViewState method. If the StateBag\n        &#39; that stores the MyItem class&#39;s view state contains\n        &#39; a value for the message property and if the value\n        &#39; has changed since the TrackViewState method was last \n        &#39; called, all view state for this class is deleted, \n        &#39; using the StateBag.Clear method,and the new value is added.\n        Function SaveViewState() As Object Implements IStateManager.SaveViewState\n            &#39; Check whether the message property exists in \n            &#39; the ViewState property, and if it does, check\n            &#39; whether it has changed since the most recent\n            &#39; TrackViewState method call.\n            If Not CType(_viewstate, IDictionary).Contains(&quot;message&quot;) OrElse _viewstate.IsItemDirty(&quot;message&quot;) Then\n                _viewstate.Clear()\n                &#39; Add the _message property to the StateBag.\n                _viewstate.Add(&quot;message&quot;, _message)\n            End If\n            Return CType(_viewstate, IStateManager).SaveViewState()\n        End Function &#39;IStateManager.SaveViewState\n\n\n        &#39; Implement the TrackViewState method for this class by\n        &#39; calling the TrackViewState method of the class&#39;s private\n        &#39; _viewstate property.\n        Sub TrackViewState() Implements IStateManager.TrackViewState\n            CType(_viewstate, IStateManager).TrackViewState()\n        End Sub &#39;IStateManager.TrackViewState\n        &#39; Implement the IsTrackingViewState method for this class \n        &#39; by calling the IsTrackingViewState method of the class&#39;s\n        &#39; private _viewstate property. \n\n        ReadOnly Property IsTrackingViewState() As Boolean Implements IStateManager.IsTrackingViewState\n            Get\n                Return CType(_viewstate, IStateManager).IsTrackingViewState\n            End Get\n        End Property\n\n        &#39; Create a function that iterates through the view-state\n        &#39; values stored for this class and returns the\n        &#39; results as a string.\n        Public Function EnumerateViewState() As String\n            Dim keyName, keyValue As String\n            Dim result As String = [String].Empty\n            Dim myStateItem As StateItem\n            Dim myDictionaryEnumerator As IDictionaryEnumerator = _viewstate.GetEnumerator()\n            While myDictionaryEnumerator.MoveNext()\n                keyName = CStr(myDictionaryEnumerator.Key)\n                myStateItem = CType(myDictionaryEnumerator.Value, StateItem)\n                keyValue = CStr(myStateItem.Value)\n                result = result + &quot;&lt;br&gt;ViewState[&quot; + keyName + &quot;] = &quot; + keyValue\n            End While\n            Return result\n        End Function &#39;EnumerateViewState\n    End Class &#39;MyItem \n\n    &#39; This class contains an instance of the MyItem class as \n    &#39; private member. It overrides the state management methods \n    &#39; of the Control class, since it has to invoke state \n    &#39; management methods of MyItem whenever its own\n    &#39; view state is being saved, loaded, or tracked.\n\n    &lt;AspNetHostingPermission(SecurityAction.Demand, _\n       Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n    Public NotInheritable Class MyControl\n        Inherits Control\n        Private myItem As MyItem\n\n        Public Sub New()\n            myItem = New MyItem(&quot;Hello World!&quot;)\n        End Sub &#39;New\n\n        &#39; Override the LoadViewState method of the Control class.\n        Protected Overrides Sub LoadViewState(ByVal savedState As Object)\n            If Not (savedState Is Nothing) Then\n                Dim myState As Object() = CType(savedState, Object())\n                If Not (myState(0) Is Nothing) Then\n                    MyBase.LoadViewState(myState(0))\n                End If\n                If Not (myState(1) Is Nothing) Then\n                    CType(myItem, IStateManager).LoadViewState(myState(1))\n                End If\n            End If\n        End Sub &#39;LoadViewState\n        &#39; Override the TrackViewState method of the Control class\n        &#39; to call the version of this method that was \n        &#39; implemented in the MyItem class.\n        Protected Overrides Sub TrackViewState()\n            MyBase.TrackViewState()\n            If Not (myItem Is Nothing) Then\n                CType(myItem, IStateManager).TrackViewState()\n            End If\n        End Sub &#39;TrackViewState\n\n        &#39; Override the SaveViewState method of the Control class to\n        &#39; call the version of this method that was implemented by\n        &#39; the MyItem class.\n        Protected Overrides Function SaveViewState() As Object\n            Dim baseState As Object = MyBase.SaveViewState()\n            Dim itemState As Object\n            If Not (myItem Is Nothing) Then\n                itemState = CType(myItem, IStateManager).SaveViewState()\n            Else\n                itemState = Nothing\n            End If\n\n            Dim myState(1) As Object\n            myState(0) = baseState\n            myState(1) = itemState\n            Return myState\n        End Function &#39;SaveViewState\n\n\n        Public Sub SetMessage(ByVal mesg As String)\n            myItem.Message = mesg\n        End Sub &#39;SetMessage\n\n\n        Public Function GetMessage() As String\n            Return myItem.Message\n        End Function &#39;GetMessage\n\n\n        &#39; Display the contents of Message and ViewState properties. \n        Protected Overrides Sub Render(ByVal output As HtmlTextWriter)\n            &#39; Track changes to  view state before rendering.\n            TrackViewState()\n            output.Write((&quot;Message: &quot; + myItem.Message))\n            output.Write(&quot;&lt;br&gt;&quot;)\n            output.Write(&quot;&lt;br&gt;Enumerating the view state of the custom control&lt;br&gt;&quot;)\n            output.Write(myItem.EnumerateViewState())\n        End Sub &#39;Render\n    End Class &#39;MyControl\nEnd Namespace &#39;StateBagSampleVB\n</code></pre><pre><code class=\"lang-cs\" name=\"StateBag_IStateManager_Sample1#1\">// Create a namespace that contains a class, MyItem,\n// that implements the IStateManager interface and \n// another, MyControl, that overrides its own view-state\n// management methods to use those of MyItem.\nusing System;\nusing System.Web;\nusing System.Web.UI;\nusing System.Collections;\nusing System.Security.Permissions;\n\nnamespace StateBagSample\n{\n    // Create a class that implements IStateManager so that\n    // it can manage its own view state.   \n    [AspNetHostingPermission(SecurityAction.Demand,\n       Level = AspNetHostingPermissionLevel.Minimal)]\n    public sealed class MyItem : IStateManager\n    {\n        private string _message;\n\n        // The StateBag object that allows you to save\n        // and restore view-state information.\n        private StateBag _viewstate;\n\n        // The constructor for the MyItem class.\n        public MyItem(string mesg)\n        {\n            _message = mesg;\n            _viewstate = new StateBag();\n            _viewstate.Add(&quot;message&quot;, _message);\n        }\n\n        // Create a Message property that reads from and writes\n        // to view state. If the set accessor writes the message\n        // value to view state, the StateBag.SetItemDirty method\n        // is called, telling view state that the item has changed. \n        public string Message\n        {\n            get\n            {\n                return (string)_viewstate[&quot;message&quot;];\n            }\n            set\n            {\n                _message = value;\n                _viewstate.SetItemDirty(&quot;message&quot;, true);\n            }\n        }\n\n        // Implement the LoadViewState method. If the saved view state\n        // exists, the view-state value is loaded to the MyItem control. \n        void IStateManager.LoadViewState(object savedState)\n        {\n            _message = (string)_viewstate[&quot;message&quot;];\n            if (savedState != null)\n                ((IStateManager)_viewstate).LoadViewState(savedState);\n        }\n\n        // Implement the SaveViewState method. If the StateBag\n        // that stores the MyItem class&#39;s view state contains\n        // a value for the message property and if the value\n        // has changed since the TrackViewState method was last \n        // called, all view state for this class is deleted, \n        // using the StateBag.Clear method,and the new value is added.\n        object IStateManager.SaveViewState()\n        {\n            // Check whether the message property exists in \n            // the ViewState property, and if it does, check\n            // whether it has changed since the most recent\n            // TrackViewState method call.\n            if (!((IDictionary)_viewstate).Contains(&quot;message&quot;) || _viewstate.IsItemDirty(&quot;message&quot;))\n            {\n                _viewstate.Clear();\n                // Add the _message property to the StateBag.\n                _viewstate.Add(&quot;message&quot;, _message);\n            }\n            return ((IStateManager)_viewstate).SaveViewState();\n        }\n\n\n        // Implement the TrackViewState method for this class by\n        // calling the TrackViewState method of the class&#39;s private\n        // _viewstate property.\n        void IStateManager.TrackViewState()\n        {\n            ((IStateManager)_viewstate).TrackViewState();\n        }\n\n        // Implement the IsTrackingViewState method for this class \n        // by calling the IsTrackingViewState method of the class&#39;s\n        // private _viewstate property. \n        bool IStateManager.IsTrackingViewState\n        {\n            get\n            {\n                return ((IStateManager)_viewstate).IsTrackingViewState;\n            }\n        }\n\n        // Create a function that iterates through the view-state\n        // values stored for this class and returns the\n        // results as a string.\n        public string EnumerateViewState()\n        {\n            string keyName, keyValue;\n            string result = String.Empty;\n            StateItem myStateItem;\n            IDictionaryEnumerator myDictionaryEnumerator = _viewstate.GetEnumerator();\n            while (myDictionaryEnumerator.MoveNext())\n            {\n                keyName = (string)myDictionaryEnumerator.Key;\n                myStateItem = (StateItem)myDictionaryEnumerator.Value;\n                keyValue = (string)myStateItem.Value;\n                result = result + &quot;&lt;br&gt;ViewState[&quot; + keyName + &quot;] = &quot; + keyValue;\n            }\n            return result;\n        }\n    }\n    // This class contains an instance of the MyItem class as \n    // private member. It overrides the state management methods \n    // of the Control class, since it has to invoke state \n    // management methods of MyItem whenever its own\n    // view state is being saved, loaded, or tracked.\n    [AspNetHostingPermission(SecurityAction.Demand,\n       Level = AspNetHostingPermissionLevel.Minimal)]\n    public sealed class MyControl : Control\n    {\n        private MyItem myItem;\n        public MyControl()\n            : base()\n        {\n            myItem = new MyItem(&quot;Hello World!&quot;);\n        }\n        // Override the LoadViewState method of the Control class.\n        protected override void LoadViewState(object savedState)\n        {\n            if (savedState != null)\n            {\n                object[] myState = (object[])savedState;\n                if (myState[0] != null)\n                    base.LoadViewState(myState[0]);\n                if (myState[1] != null)\n                    ((IStateManager)myItem).LoadViewState(myState[1]);\n            }\n        }\n        // Override the TrackViewState method of the Control class\n        // to call the version of this method that was \n        // implemented in the MyItem class.\n        protected override void TrackViewState()\n        {\n            base.TrackViewState();\n            if (myItem != null)\n                ((IStateManager)myItem).TrackViewState();\n        }\n\n        // Override the SaveViewState method of the Control class to\n        // call the version of this method that was implemented by\n        // the MyItem class.\n        protected override object SaveViewState()\n        {\n            object baseState = base.SaveViewState();\n            object itemState = (myItem != null) ? ((IStateManager)myItem).SaveViewState() : null;\n            object[] myState = new object[2];\n            myState[0] = baseState;\n            myState[1] = itemState;\n            return myState;\n        }\n\n        public void SetMessage(string mesg)\n        {\n            myItem.Message = mesg;\n        }\n\n        public string GetMessage()\n        {\n            return myItem.Message;\n        }\n\n        // Display the contents of Message and ViewState properties. \n        protected override void Render(HtmlTextWriter output)\n        {\n            // Track changes to  view state before rendering.\n            TrackViewState();\n            output.Write(&quot;Message: &quot; + myItem.Message);\n            output.Write(&quot;&lt;br&gt;&quot;);\n            output.Write(&quot;&lt;br&gt;Enumerating the view state of the custom control&lt;br&gt;&quot;);\n            output.Write(myItem.EnumerateViewState());\n        }\n    }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>View state is the accumulation of a page&#39;s or an ASP.NET server control&#39;s property values and is sent to the requesting browser in a hidden field.  </p>\n<p> You can explicitly add StateItem objects to an ASP.NET server control&#39;s <a class=\"xref\" href=\"system.web.ui.statebag\" data-linktype=\"relative-path\">StateBag</a> object using either the <a class=\"xref\" href=\"system.web.ui.statebag#System_Web_UI_StateBag_Item_\" data-linktype=\"relative-path\">Item</a> property or the <a class=\"xref\" href=\"system.web.ui.statebag#System_Web_UI_StateBag_Add_\" data-linktype=\"relative-path\">Add</a> method. The <a class=\"xref\" href=\"system.web.ui.statebag\" data-linktype=\"relative-path\">StateBag</a> then tracks changes to all the items that it stores. Any changes to a StateItem object are reflected in its <a class=\"xref\" href=\"system.web.ui.stateitem#System_Web_UI_StateItem_IsDirty_\" data-linktype=\"relative-path\">IsDirty</a> property. These changes are saved by a call to the <a class=\"xref\" href=\"system.web.ui.control#System_Web_UI_Control_SaveViewState_\" data-linktype=\"relative-path\">SaveViewState</a> method during the save view state phase of server control processing, just before the control is rendered to the page. For more information, see <a href=\"http://msdn.microsoft.com/en-us/e18eb2f2-cf00-47ae-b1a1-dfc188a6dea1\" data-linktype=\"external\">NIB: ASP.NET Web Server Controls</a>.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Web_UI_StateItem_IsDirty_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_StateItem_IsDirty\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsDirty</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value indicating whether the <a class=\"xref\" href=\"system.web.ui.stateitem\" data-linktype=\"relative-path\">StateItem</a> object has been modified.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsDirty { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the stored <a class=\"xref\" href=\"system.web.ui.stateitem\" data-linktype=\"relative-path\">StateItem</a> object has been modified; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Web_UI_StateItem_Value_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_StateItem_Value\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Value</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the value of the <a class=\"xref\" href=\"system.web.ui.stateitem\" data-linktype=\"relative-path\">StateItem</a> object that is stored in the <a class=\"xref\" href=\"system.web.ui.statebag\" data-linktype=\"relative-path\">StateBag</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public object Value { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value of the <a class=\"xref\" href=\"system.web.ui.stateitem\" data-linktype=\"relative-path\">StateItem</a> stored in the <a class=\"xref\" href=\"system.web.ui.statebag\" data-linktype=\"relative-path\">StateBag</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.StateItem.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.StateItem\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.StateItem.IsDirty\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.StateItem.Value\">\r\n<meta name=\"APILocation\" content=\"System.Web.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:59 PM\">\r\n<meta name=\"document_id\" content=\"a9701c0a-e6dd-4216-55af-176759e61827\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents an item that is saved in the  class when view state information is persisted between Web requests. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.web.ui/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.StateItem\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","uhfHeaderId":"MSDocsHeader-DotNet","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.StateItem.yml","open_to_public_contributors":false,"api_name":["System.Web.UI.StateItem","System.Web.UI.StateItem.IsDirty","System.Web.UI.StateItem.Value"],"api_location":["System.Web.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.StateItem","System::Web::UI::StateItem","System.Web.UI.StateItem.IsDirty","System::Web::UI::StateItem::IsDirty","System.Web.UI.StateItem.Value","System::Web::UI::StateItem::Value"],"dev_langs":["csharp"],"updated_at":"2017-04-01 05:59 PM","document_id":"a9701c0a-e6dd-4216-55af-176759e61827","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Web.UI/StateItem.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"StateItem class | Microsoft Docs","_op_ogTitle":"StateItem class","description":"Represents an item that is saved in the  class when view state information is persisted between Web requests. This class cannot be inherited.\n","toc_asset_id":"api/_splitted/System.Web.UI/toc.json","toc_rel":"_splitted/System.Web.UI/toc.json","source_url":"","ms.assetid":"System.Web.UI.StateItem","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.stateitem","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.stateitem","fileRelativePath":"api/System.Web.UI.StateItem.html"},"themesRelativePathToOutputRoot":"_themes/"}