{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ConditionalWeakTable&lt;TKey,TValue&gt;</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Enables compilers to dynamically attach object fields to managed objects.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[ECMA2Yaml.Models.ECMAAttribute]\npublic sealed class ConditionalWeakTable&lt;TKey,TValue&gt; where TKey : class where TValue : class</code></pre>\r\n  \r\n  \r\n  \r\n  \t\t<h3 class=\"accented\">Type Parameters</h3>\r\n  \t\t<table class=\"nameValue stack\">\r\n  \t\t\t<tr>\r\n  \t\t\t<td>TKey</td>\r\n  \t\t\t<td><p>The reference type to which the field is attached.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t\t<tr>\r\n  \t\t\t<td>TValue</td>\r\n  \t\t\t<td><p>The field&#39;s type. This must be a reference type.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t</table>\r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">ConditionalWeakTable&lt;TKey,TValue&gt;</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example illustrates that a key stored in the ConditionalWeakTable(TKey, table does not persist after references to it outside the table are destroyed. The example defines two classes: <code>ManagedClass</code>, which represents the key in the table, and <code>ClassData</code>, which represents the key&#39;s value. The example instantiates three objects of each type. It also instantiates a <a class=\"xref\" href=\"system.weakreference\" data-linktype=\"relative-path\">WeakReference</a> object that represents the second <code>ManagedClass</code>, and then destroys the second <code>ManagedClass</code> instance. The attempt to retrieve the second <code>ManagedClass</code> object from the <a class=\"xref\" href=\"system.weakreference#System_WeakReference_Target_\" data-linktype=\"relative-path\">Target</a> property indicates that no references to the object remain.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Runtime.CompilerServices.ConditionalWeakTable.Class#1\">using System;\nusing System.Runtime.CompilerServices;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var mc1 = new ManagedClass();\n      var mc2 = new ManagedClass();\n      var mc3 = new ManagedClass();\n      \n      var cwt = new ConditionalWeakTable&lt;ManagedClass, ClassData&gt;();\n      cwt.Add(mc1, new ClassData());          \n      cwt.Add(mc2, new ClassData());\n      cwt.Add(mc3, new ClassData());\n      \n      var wr2 = new WeakReference(mc2);\n      mc2 = null;\n\n      GC.Collect();\n      \n      ClassData data = null; \n\n      if (wr2.Target == null)\n          Console.WriteLine(&quot;No strong reference to mc2 exists.&quot;);   \n      else if (cwt.TryGetValue(mc2, out data))\n          Console.WriteLine(&quot;Data created at {0}&quot;, data.CreationTime);      \n      else\n          Console.WriteLine(&quot;mc2 not found in the table.&quot;);\n   }\n}\n\npublic class ManagedClass\n{ \n}\n\npublic class ClassData\n{\n   public DateTime CreationTime;\n   public object Data;   \n   \n   public ClassData()\n   {\n      CreationTime = DateTime.Now;\n      this.Data  = new object();     \n   }\n}\n// The example displays the following output:\n//       No strong reference to mc2 exists.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Runtime.CompilerServices.ConditionalWeakTable.Class#1\">Imports System.Runtime.CompilerServices\n\nModule Example\n   Public Sub Main()\n      Dim mc1 As New ManagedClass()\n      Dim mc2 As New ManagedClass()\n      Dim mc3 As New ManagedClass()\n                    \n      Dim cwt As New ConditionalWeakTable(Of ManagedClass, ClassData)()\n      cwt.Add(mc1, New ClassData())          \n      cwt.Add(mc2, New ClassData())\n      cwt.Add(mc3, New ClassData())\n      \n      Dim wr2 As New WeakReference(mc2)\n      mc2 = Nothing\n\n      GC.Collect()\n\n      Dim data As ClassData = Nothing\n\n      If wr2.Target Is Nothing Then\n          Console.WriteLine(&quot;No strong reference to mc2 exists.&quot;)   \n      Else If cwt.TryGetValue(mc2, data) Then\n          Console.WriteLine(&quot;Data created at {0}&quot;, data.CreationTime)      \n      Else\n          Console.WriteLine(&quot;mc2 not found in the table.&quot;)\n      End If\n   End Sub\nEnd Module\n\nPublic Class ManagedClass\nEnd Class\n\nPublic Class ClassData\n   Public CreationTime As DateTime\n   Public Data As Object   \n   \n   Public Sub New()\n      Me.CreationTime = DateTime.Now\n      Me.Data  = New Object()     \n   End Sub\nEnd Class\n&#39; The example displays the following output:\n&#39;       No strong reference to mc2 exists.\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The ConditionalWeakTable(TKey, class enables language compilers to attach arbitrary properties to managed objects at run time. A ConditionalWeakTable(TKey, object is a dictionary that binds a managed object, which is represented by a key, to its attached property, which is represented by a value. The object&#39;s keys are the individual instances of the <code>TKey</code> class to which the property is attached, and its values are the property values that are assigned to the corresponding objects.  </p>\n<p> Keys must be unique; in other words, the ConditionalWeakTable(TKey, class supports one attached value per managed object. Two keys are equal if passing them to the <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_\" data-linktype=\"relative-path\">ReferenceEquals</a> method returns <code>true</code>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> You cannot control equality comparisons by overriding <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> to explicitly set the hash code for a key. The ConditionalWeakTable(TKey, class does not use the <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> method to compute hash codes, and therefore does not invoke <a class=\"xref\" href=\"system.object#System_Object_GetHashCode_\" data-linktype=\"relative-path\">GetHashCode</a> overrides.  </p>\n</div>\n<p> Although the ConditionalWeakTable(TKey, class holds a collection of key/value pairs, it is best thought of as a table rather than a dictionary object. The ConditionalWeakTable(TKey, class differs from a dictionary in several ways:  </p>\n<ul>\n<li><p>It does not persist keys. That is, a key is not kept alive only because it is a member of the collection.  </p>\n</li>\n<li><p>It does not include all the methods (such as <code>GetEnumerator</code> or <code>Contains</code>) that a dictionary typically has.  </p>\n</li>\n<li><p>It does not implement the <a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary&lt;TKey,TValue&gt;</a> interface.  </p>\n</li>\n</ul>\n<p> The ConditionalWeakTable(TKey, class differs from other collection objects in its management of the object lifetime of keys stored in the collection. Ordinarily, when an object is stored in a collection, its lifetime lasts until it is removed (and there are no additional references to the object) or until the collection object itself is destroyed. However, in the ConditionalWeakTable(TKey, class, adding a key/value pair to the table does not ensure that the key will persist, even if it can be reached directly from a value stored in the table (for example, if the table contains one key, A, with a value V1, and a second key, B, with a value P2 that contains a reference to A). Instead, ConditionalWeakTable(TKey, automatically removes the key/value entry as soon as no other references to a key exist outside the table. The example provides an illustration.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Runtime_CompilerServices_ConditionalWeakTable_2__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_CompilerServices_ConditionalWeakTable_2__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ConditionalWeakTable&lt;TKey,TValue&gt;()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <span class=\"xref\">stem.Runtime.CompilerServices.ConditionalWeakTable`2</span> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public ConditionalWeakTable ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.security.securitysafecriticalattribute\" title=\"System.Security.SecuritySafeCriticalAttribute\" data-linktype=\"relative-path\">SecuritySafeCriticalAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The ConditionalWeakTable(TKey, constructor instantiates an empty <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2\" data-linktype=\"relative-path\">ConditionalWeakTable&lt;TKey,TValue&gt;</a> table; that is, the table contains no key/value pairs. You can add key/value pairs by calling the <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2#System_Runtime_CompilerServices_ConditionalWeakTable_2_Add_\" data-linktype=\"relative-path\">Add</a>, <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2#System_Runtime_CompilerServices_ConditionalWeakTable_2_GetValue_\" data-linktype=\"relative-path\">GetValue</a>, or <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2#System_Runtime_CompilerServices_ConditionalWeakTable_2_GetOrCreateValue_\" data-linktype=\"relative-path\">GetOrCreateValue</a> method.  </p>\n<p> Every key in a <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2\" data-linktype=\"relative-path\">ConditionalWeakTable&lt;TKey,TValue&gt;</a> object must be unique. Keys are not unique if they refer to the same object (that is, if passing them as arguments to the <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_\" data-linktype=\"relative-path\">ReferenceEquals</a> method returns <code>true</code>).</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Runtime_CompilerServices_ConditionalWeakTable_2_Add_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_CompilerServices_ConditionalWeakTable_2_Add__0__1_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Add(TKey, TValue)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Adds a key to the table.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Add (TKey key, TValue value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>key</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">TKey</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The key to add. <code>key</code> represents the object to which the property is attached.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">TValue</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The key&#39;s property value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.security.securitysafecriticalattribute\" title=\"System.Security.SecuritySafeCriticalAttribute\" data-linktype=\"relative-path\">SecuritySafeCriticalAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>key</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>key</code> already exists.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Every key in a <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2\" data-linktype=\"relative-path\">ConditionalWeakTable&lt;TKey,TValue&gt;</a> object must be unique. Keys are not unique if they refer to the same object (that is, if passing them as arguments to the <a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_\" data-linktype=\"relative-path\">ReferenceEquals</a> method returns <code>true</code>).  </p>\n<p> If the key is garbage-collected during the addition operation, the existing key/value pair is removed and the new key/value pair is added without an exception being thrown.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Runtime_CompilerServices_ConditionalWeakTable_2_Finalize_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_CompilerServices_ConditionalWeakTable_2_Finalize\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Finalize()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <span class=\"xref\">stem.Runtime.CompilerServices.ConditionalWeakTable`2</span> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">~ConditionalWeakTable`2 ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.security.securitysafecriticalattribute\" title=\"System.Security.SecuritySafeCriticalAttribute\" data-linktype=\"relative-path\">SecuritySafeCriticalAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The garbage collector calls Finalize when the current object is ready to be finalized.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Runtime_CompilerServices_ConditionalWeakTable_2_GetOrCreateValue_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_CompilerServices_ConditionalWeakTable_2_GetOrCreateValue__0_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetOrCreateValue(TKey)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Atomically searches for a specified key in the table and returns the corresponding value. If the key does not exist in the table, the method invokes the default constructor of the class that represents the table&#39;s value to create a value that is bound to the specified key.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public TValue GetOrCreateValue (TKey key);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>key</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">TKey</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The key to search for. <code>key</code> represents the object to which the property is attached.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">TValue</span></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The value that corresponds to <code>key</code>, if <code>key</code> already exists in the table; otherwise, a new value created by the default constructor of the class defined by the <code>TValue</code> generic type parameter.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>key</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"alert NOTE\"><br> In the <a href=\"http://go.microsoft.com/fwlink/?LinkID=247912\" data-linktype=\"external\">.NET for Windows Store apps</a> or the <a href=\"../topic/cross-platform%20development%20with%20the%20portable%20class%20library\" data-linktype=\"relative-path\">Portable Class Library</a>, catch the base class exception, <a class=\"xref\" href=\"system.missingmemberexception\" data-linktype=\"relative-path\">MissingMemberException</a>, instead.<br>\n</div>  \n\n<p> The class that represents the table&#39;s value does not define a default constructor.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If <code>key</code> does not exist in the table, the method adds it, along with the object that is instantiated by calling the default constructor of the class defined by the <code>TValue</code> generic type parameter. If the <code>TValue</code> class has no default constructor, a <a class=\"xref\" href=\"system.missingmethodexception\" data-linktype=\"relative-path\">MissingMethodException</a> is thrown.  </p>\n<p> This is the recommended method of retrieving an existing value or adding a new value to the <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2\" data-linktype=\"relative-path\">ConditionalWeakTable&lt;TKey,TValue&gt;</a> table if the class of the table&#39;s value defines a default constructor. If it does not define a default constructor, you can instead call the <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2#System_Runtime_CompilerServices_ConditionalWeakTable_2_GetValue_\" data-linktype=\"relative-path\">GetValue</a> method, which relies on a callback-provided method to instantiate the object representing the table&#39;s value  </p>\n<p> To retrieve the value of an existing key without adding the key/value pair if the key is not found in the table, call the <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2#System_Runtime_CompilerServices_ConditionalWeakTable_2_TryGetValue_\" data-linktype=\"relative-path\">TryGetValue</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Runtime_CompilerServices_ConditionalWeakTable_2_GetValue_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_CompilerServices_ConditionalWeakTable_2_GetValue__0_System_Runtime_CompilerServices_ConditionalWeakTable__0__1__CreateValueCallback_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetValue(TKey, ConditionalWeakTable&lt;TKey,TValue&gt;)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Atomically searches for a specified key in the table and returns the corresponding value. If the key does not exist in the table, the method invokes a callback method to create a value that is bound to the specified key.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public TValue GetValue (TKey key, System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey,TValue&gt;.CreateValueCallback createValueCallback);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>key</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">TKey</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The key to search for. <code>key</code> represents the object to which the property is attached.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>createValueCallback</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2\" data-linktype=\"relative-path\">ConditionalWeakTable</a>&lt;<span class=\"xref\">TKey</span>,<span class=\"xref\">TValue</span>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A delegate to a method that can create a value for the given <code>key</code>. It has a single parameter of type <code>TKey</code>, and returns a value of type <code>TValue</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">TValue</span></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The value attached to <code>key</code>, if <code>key</code> already exists in the table; otherwise, the new value returned by the <code>createValueCallback</code> delegate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.security.securitysafecriticalattribute\" title=\"System.Security.SecuritySafeCriticalAttribute\" data-linktype=\"relative-path\">SecuritySafeCriticalAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>key</code> or <code>createValueCallback</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If <code>key</code> does not exist in the table, GetValue invokes the method that is defined by the <code>createValueCallback</code> parameter and passes it the key. A new value is bound to the key in the table and returned as a result.  </p>\n<p> Use this method only when the class that represents the table&#39;s value does not define a default constructor. If it does define a default constructor, use the <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2#System_Runtime_CompilerServices_ConditionalWeakTable_2_GetOrCreateValue_\" data-linktype=\"relative-path\">GetOrCreateValue</a> method instead. To retrieve the value of an existing key without adding the key/value pair if the key is not found in the table, call the <a class=\"xref\" href=\"system.runtime.compilerservices.conditionalweaktable-2#System_Runtime_CompilerServices_ConditionalWeakTable_2_TryGetValue_\" data-linktype=\"relative-path\">TryGetValue</a> method.  </p>\n<p> If multiple threads try to create the same key, <code>createValueCallback</code> may be invoked multiple times with the same key. Only one of these calls will succeed, and its returned value will be added to the table. Which thread succeeds in creating the value is indeterminate. This rule permits the table to invoke <code>createValueCallback</code> outside the internal table lock to prevent deadlocks.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Runtime_CompilerServices_ConditionalWeakTable_2_Remove_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_CompilerServices_ConditionalWeakTable_2_Remove__0_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Remove(TKey)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Removes a key and its value from the table.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool Remove (TKey key);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>key</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">TKey</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The key to remove.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the key is found and removed; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.security.securitysafecriticalattribute\" title=\"System.Security.SecuritySafeCriticalAttribute\" data-linktype=\"relative-path\">SecuritySafeCriticalAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>key</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If the key is garbage-collected during this operation, the method does not raise an exception and the return value is undefined.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Runtime_CompilerServices_ConditionalWeakTable_2_TryGetValue_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_CompilerServices_ConditionalWeakTable_2_TryGetValue__0__1__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TryGetValue(TKey, TValue)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the value of the specified key.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool TryGetValue (TKey key, out TValue value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>key</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">TKey</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The key that represents an object with an attached property.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">TValue</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>When this method returns, contains the attached property value. If <code>key</code> is not found, <code>value</code> contains the default value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>key</code> is found; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.security.securitysafecriticalattribute\" title=\"System.Security.SecuritySafeCriticalAttribute\" data-linktype=\"relative-path\">SecuritySafeCriticalAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>key</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If the key is garbage-collected during this operation, the method may return <code>false</code> and set <code>value</code> to the default value (as if the key were not present).</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \t<h2 class=\"accented\">Thread Safety</h2>\r\n  \tInstances of the ConditionalWeakTable(TKey, class are thread safe. They do not require callers to do any additional locking.\r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Runtime.CompilerServices.ConditionalWeakTable-2.yml\">\r\n<meta name=\"APIName\" content=\"System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey,TValue&gt;\">\r\n<meta name=\"APIName\" content=\"System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey,TValue&gt;..ctor\">\r\n<meta name=\"APIName\" content=\"System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey,TValue&gt;.Add\">\r\n<meta name=\"APIName\" content=\"System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey,TValue&gt;.Finalize\">\r\n<meta name=\"APIName\" content=\"System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey,TValue&gt;.GetOrCreateValue\">\r\n<meta name=\"APIName\" content=\"System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey,TValue&gt;.GetValue\">\r\n<meta name=\"APIName\" content=\"System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey,TValue&gt;.Remove\">\r\n<meta name=\"APIName\" content=\"System.Runtime.CompilerServices.ConditionalWeakTable&lt;TKey,TValue&gt;.TryGetValue\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"0855d329-2e8b-d92b-cded-56266f570a9e\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Enables compilers to dynamically attach object fields to managed objects.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.runtime.compilerservices/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Runtime.CompilerServices.ConditionalWeakTable`2\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Runtime.CompilerServices.ConditionalWeakTable-2.yml","open_to_public_contributors":false,"api_name":["System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>","System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>..ctor","System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>.Add","System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>.Finalize","System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>.GetOrCreateValue","System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>.GetValue","System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>.Remove","System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>.TryGetValue"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Runtime.CompilerServices.ConditionalWeakTable`2","System::Runtime::CompilerServices::ConditionalWeakTable`2","System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor","System::Runtime::CompilerServices::ConditionalWeakTable`2::#ctor","System.Runtime.CompilerServices.ConditionalWeakTable`2.Add","System::Runtime::CompilerServices::ConditionalWeakTable`2::Add","System.Runtime.CompilerServices.ConditionalWeakTable`2.Finalize","System::Runtime::CompilerServices::ConditionalWeakTable`2::Finalize","System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue","System::Runtime::CompilerServices::ConditionalWeakTable`2::GetOrCreateValue","System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue","System::Runtime::CompilerServices::ConditionalWeakTable`2::GetValue","System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove","System::Runtime::CompilerServices::ConditionalWeakTable`2::Remove","System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue","System::Runtime::CompilerServices::ConditionalWeakTable`2::TryGetValue"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"0855d329-2e8b-d92b-cded-56266f570a9e","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Runtime.CompilerServices/ConditionalWeakTable`2.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ConditionalWeakTable<TKey,TValue> class | Microsoft Docs","_op_ogTitle":"ConditionalWeakTable<TKey,TValue> class","description":"Enables compilers to dynamically attach object fields to managed objects.\n","toc_asset_id":"api/_splitted/System.Runtime.CompilerServices/toc.json","toc_rel":"_splitted/System.Runtime.CompilerServices/toc.json","source_url":"","ms.assetid":"System.Runtime.CompilerServices.ConditionalWeakTable`2","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.conditionalweaktable-2","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.conditionalweaktable-2","fileRelativePath":"api/System.Runtime.CompilerServices.ConditionalWeakTable-2.html"},"themesRelativePathToOutputRoot":"_themes/"}