{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">IAuthenticationModule</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides the base authentication interface for Web client authentication modules.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public interface IAuthenticationModule</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example creates creates a customized authentication class by implementing the IAuthenticationModule interface. For a complete example refer to the <a class=\"xref\" href=\"system.net.authenticationmanager\" data-linktype=\"relative-path\">AuthenticationManager</a> class.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Net.Authentication#6\">// The CustomBasic class creates a custom Basic authentication by implementing the\n// IAuthenticationModule interface. It performs the following\n// tasks:\n// 1) Defines and initializes the required properties.\n// 2) Implements the Authenticate method.\n\npublic class CustomBasic : IAuthenticationModule\n{\n\n  private string m_authenticationType ;\n  private bool m_canPreAuthenticate ;\n\n  // The CustomBasic constructor initializes the properties of the customized \n  // authentication.\n  public CustomBasic()\n  {\n    m_authenticationType = &quot;Basic&quot;;\n    m_canPreAuthenticate = false;\n  }\n\n  // Define the authentication type. This type is then used to identify this\n  // custom authentication module. The default is set to Basic.\n  public string AuthenticationType\n  {\n    get\n    {\n      return m_authenticationType;\n    }\n  }\n\n  // Define the pre-authentication capabilities for the module. The default is set\n  // to false.\n  public bool CanPreAuthenticate\n  {\n    get\n    {\n      return m_canPreAuthenticate;\n    }\n  }\n\n  // The checkChallenge method checks whether the challenge sent by the HttpWebRequest \n  // contains the correct type (Basic) and the correct domain name. \n  // Note: The challenge is in the form BASIC REALM=&quot;DOMAINNAME&quot;; \n  // the Internet Web site must reside on a server whose\n  // domain name is equal to DOMAINNAME.\n  public bool checkChallenge(string Challenge, string domain) \n  {\n    bool challengePasses = false;\n\n    String tempChallenge = Challenge.ToUpper();\n\n    // Verify that this is a Basic authorization request and that the requested domain\n    // is correct.\n    // Note: When the domain is an empty string, the following code only checks \n    // whether the authorization type is Basic.\n\n    if (tempChallenge.IndexOf(&quot;BASIC&quot;) != -1)\n      if (domain != String.Empty)\n        if (tempChallenge.IndexOf(domain.ToUpper()) != -1)\n          challengePasses = true;\n        else\n          // The domain is not allowed and the authorization type is Basic.\n          challengePasses = false;\n      else\n        // The domain is a blank string and the authorization type is Basic.\n        challengePasses = true;\n\n    return challengePasses;\n  }\n\n  // The PreAuthenticate method specifies whether the authentication implemented \n  // by this class allows pre-authentication. \n  // Even if you do not use it, this method must be implemented to obey to the rules \n  // of interface implementation.\n  // In this case it always returns null. \n  public Authorization PreAuthenticate(WebRequest request, ICredentials credentials) \n  {                \n    return null;\n  }\n\n  // Authenticate is the core method for this custom authentication.\n  // When an Internet resource requests authentication, the WebRequest.GetResponse \n  // method calls the AuthenticationManager.Authenticate method. This method, in \n  // turn, calls the Authenticate method on each of the registered authentication\n  // modules, in the order in which they were registered. When the authentication is \n  // complete an Authorization object is returned to the WebRequest.\n  public Authorization Authenticate(String challenge, WebRequest request, ICredentials credentials) \n  {\n    Encoding ASCII = Encoding.ASCII;        \n\n    // Get the username and password from the credentials\n    NetworkCredential MyCreds = credentials.GetCredential(request.RequestUri, &quot;Basic&quot;);        \n\n    if (PreAuthenticate(request, credentials) == null)\n      Console.WriteLine(&quot;\\n Pre-authentication is not allowed.&quot;);\n    else\n      Console.WriteLine(&quot;\\n Pre-authentication is allowed.&quot;);\n\n    // Verify that the challenge satisfies the authorization requirements.\n    bool challengeOk = checkChallenge(challenge, MyCreds.Domain);\n\n    if (!challengeOk)\n      return null;\n\n    // Create the encrypted string according to the Basic authentication format as\n    // follows:\n    // a)Concatenate the username and password separated by colon;\n    // b)Apply ASCII encoding to obtain a stream of bytes;\n    // c)Apply Base64 encoding to this array of bytes to obtain the encoded \n    // authorization.\n    string BasicEncrypt = MyCreds.UserName + &quot;:&quot; + MyCreds.Password;\n\n    string BasicToken = &quot;Basic &quot; + Convert.ToBase64String(ASCII.GetBytes(BasicEncrypt));\n\n    // Create an Authorization object using the encoded authorization above.\n    Authorization resourceAuthorization = new Authorization(BasicToken);\n\n    // Get the Message property, which contains the authorization string that the \n    // client returns to the server when accessing protected resources.\n    Console.WriteLine(&quot;\\n Authorization Message:{0}&quot;,resourceAuthorization.Message);\n\n    // Get the Complete property, which is set to true when the authentication process \n    // between the client and the server is finished.\n    Console.WriteLine(&quot;\\n Authorization Complete:{0}&quot;,resourceAuthorization.Complete);\n\n    Console.WriteLine(&quot;\\n Authorization ConnectionGroupId:{0}&quot;,resourceAuthorization.ConnectionGroupId);\n\n\n    return resourceAuthorization;\n  }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Net.Authentication#6\">// The CustomBasic class creates a custom Basic authentication by implementing the\n// IAuthenticationModule interface. In particular it performs the following\n// tasks:\n// 1) Defines and initializes the required properties.\n// 2) Impements the Authenticate method.\npublic ref class CustomBasic: public IAuthenticationModule\n{\nprivate:\n\n   String^ m_authenticationType;\n   bool m_canPreAuthenticate;\n\npublic:\n\n   // The CustomBasic constructor initializes the properties of the customized\n   // authentication.\n   CustomBasic()\n   {\n      m_authenticationType = &quot;Basic&quot;;\n      m_canPreAuthenticate = false;\n   }\n\n\n   property String^ AuthenticationType \n   {\n\n      // Define the authentication type. This type is then used to identify this\n      // custom authentication module. The default is set to Basic.\n      virtual String^ get()\n      {\n         return m_authenticationType;\n      }\n\n   }\n\n   property bool CanPreAuthenticate \n   {\n\n      // Define the pre-authentication capabilities for the module. The default is set\n      // to false.\n      virtual bool get()\n      {\n         return m_canPreAuthenticate;\n      }\n\n   }\n\n   // The checkChallenge method checks if the challenge sent by the HttpWebRequest\n   // contains the correct type (Basic) and the correct domain name.\n   // Note: the challenge is in the form BASIC REALM=S&quot;DOMAINNAME&quot;\n   // and you must assure that the Internet Web site resides on a server whose\n   // domain name is equal to DOMAINAME.\n   bool checkChallenge( String^ Challenge, String^ domain )\n   {\n      bool challengePasses = false;\n      String^ tempChallenge = Challenge-&gt;ToUpper();\n      \n      // Verify that this is a Basic authorization request and the requested domain\n      // is correct.\n      // Note: When the domain is an empty string the following code only checks\n      // whether the authorization type is Basic.\n      if ( tempChallenge-&gt;IndexOf( &quot;BASIC&quot; ) != -1 )\n            if ( String::Compare( domain, String::Empty ) != 0 )\n            if ( tempChallenge-&gt;IndexOf( domain-&gt;ToUpper() ) != -1 )\n            challengePasses = true; // The domain is not allowed and the authorization type is Basic.\n      else\n            challengePasses = false;\n\n      else\n            challengePasses = true;\n\n\n      return challengePasses;\n   }\n\n\n   // The PreAuthenticate method specifies if the authentication implemented\n   // by this class allows pre-authentication.\n   // Even if you do not use it, this method must be implemented to obey to the rules\n   // of interface implemebtation.\n   // In this case it always returns null.\n   virtual Authorization^ PreAuthenticate( WebRequest^ request, ICredentials^ credentials )\n   {\n      return nullptr;\n   }\n\n\n   // Authenticate is the core method for this custom authentication.\n   // When an internet resource requests authentication, the WebRequest::GetResponse\n   // method calls the AuthenticationManager::Authenticate method. This method, in\n   // turn, calls the Authenticate method on each of the registered authentication\n   // modules, in the order they were registered. When the authentication is\n   // complete an Authorization object is returned to the WebRequest, as\n   // shown by this routine&#39;s retun type.\n   virtual Authorization^ Authenticate( String^ challenge, WebRequest^ request, ICredentials^ credentials )\n   {\n      Encoding^ ASCII = Encoding::ASCII;\n      \n      // Get the username and password from the credentials\n      NetworkCredential^ MyCreds = credentials-&gt;GetCredential( request-&gt;RequestUri, &quot;Basic&quot; );\n      if ( PreAuthenticate( request, credentials ) == nullptr )\n            Console::WriteLine( &quot;\\n Pre-authentication is not allowed.&quot; );\n      else\n            Console::WriteLine( &quot;\\n Pre-authentication is allowed.&quot; );\n\n      \n      // Verify that the challenge satisfies the authorization requirements.\n      bool challengeOk = checkChallenge( challenge, MyCreds-&gt;Domain );\n      if (  !challengeOk )\n            return nullptr;\n\n      \n      // Create the encrypted string according to the Basic authentication format as\n      // follows:\n      // a)Concatenate username and password separated by colon;\n      // b)Apply ASCII encoding to obtain a stream of bytes;\n      // c)Apply Base64 Encoding to this array of bytes to obtain the encoded\n      // authorization.\n      String^ BasicEncrypt = String::Concat( MyCreds-&gt;UserName, &quot;:&quot;, MyCreds-&gt;Password );\n      String^ BasicToken = String::Concat( &quot;Basic &quot;, Convert::ToBase64String( ASCII-&gt;GetBytes( BasicEncrypt ) ) );\n      \n      // Create an Authorization object using the above encoded authorization.\n      Authorization^ resourceAuthorization = gcnew Authorization( BasicToken );\n      \n      // Get the Message property which contains the authorization string that the\n      // client returns to the server when accessing protected resources\n      Console::WriteLine( &quot;\\n Authorization Message: {0}&quot;, resourceAuthorization-&gt;Message );\n      \n      // Get the Complete property which is set to true when the authentication process\n      // between the client and the server is finished.\n      Console::WriteLine( &quot;\\n Authorization Complete: {0}&quot;, resourceAuthorization-&gt;Complete );\n      \n      Console::WriteLine( &quot;\\n Authorization ConnectionGroupId: {0}&quot;, resourceAuthorization-&gt;ConnectionGroupId );\n      return resourceAuthorization;\n   }\n\n};\n\n\n// This is the program entry point. It allows the user to enter\n// her credentials and the Internet resource (Web page) to access.\n// It also unregisters the standard and registers the customized basic\n// authentication.\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n   if ( args-&gt;Length &lt; 4 )\n      TestAuthentication::showusage();\n   else\n   {\n      \n      // Read the user&#39;s credentials.\n      TestAuthentication::uri = args[ 1 ];\n      TestAuthentication::username = args[ 2 ];\n      TestAuthentication::password = args[ 3 ];\n      if ( args-&gt;Length == 4 )\n            TestAuthentication::domain = String::Empty; // If the domain exists, store it. Usually the domain name\n      else\n            TestAuthentication::domain = args[ 4 ];\n      \n      // is by default the name of the server hosting the Internet\n      // resource.\n      // Instantiate the custom Basic authentication module.\n      CustomBasic^ customBasicModule = gcnew CustomBasic;\n      \n      // Unregister the standard Basic authentication module.\n      AuthenticationManager::Unregister( &quot;Basic&quot; );\n      \n      // Register the custom Basic authentication module.\n      AuthenticationManager::Register( customBasicModule );\n      \n      // Display registered Authorization modules.\n      TestAuthentication::displayRegisteredModules();\n      \n      // Read the specified page and display it on the console.\n      TestAuthentication::getPage( TestAuthentication::uri );\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Net.Authentication#6\">&#39; The CustomBasic class creates a custom Basic authentication by implementing the\n&#39; IAuthenticationModule interface. It performs the following\n&#39; tasks:\n&#39; 1) Defines and initializes the required properties.\n&#39; 2) Implements the Authenticate and PreAuthenticate methods.\n\nPublic Class CustomBasic\n  Implements IAuthenticationModule\n\n  Private m_authenticationType As String\n  Private m_canPreAuthenticate As Boolean\n\n\n  &#39; The CustomBasic constructor initializes the properties of the customized \n  &#39; authentication.\n  Public Sub New()\n    m_authenticationType = &quot;Basic&quot;\n    m_canPreAuthenticate = False\n  End Sub &#39;New\n\n  &#39; Define the authentication type. This type is then used to identify this\n  &#39; custom authentication module. The default is set to Basic.\n\n  Public ReadOnly Property AuthenticationType() As String _\n   Implements IAuthenticationModule.AuthenticationType\n\n    Get\n      Return m_authenticationType\n    End Get\n  End Property\n\n  &#39; Define the pre-authentication capabilities for the module. The default is set\n  &#39; to false.\n\n  Public ReadOnly Property CanPreAuthenticate() As Boolean _\n   Implements IAuthenticationModule.CanPreAuthenticate\n\n\n    Get\n      Return m_canPreAuthenticate\n    End Get\n  End Property\n\n&#39; The checkChallenge method checks whether the challenge sent by the HttpWebRequest \n&#39; contains the correct type (Basic) and the correct domain name. \n&#39; Note: The challenge is in the form BASIC REALM=&quot;DOMAINNAME&quot;; \n&#39; the Internet Web site must reside on a server whose\n&#39; domain name is equal to DOMAINNAME.\n  Public Function checkChallenge(ByVal Challenge As String, ByVal domain As String) As Boolean\n    Dim challengePasses As Boolean = False\n\n    Dim tempChallenge As [String] = Challenge.ToUpper()\n\n    &#39; Verify that this is a Basic authorization request and that the requested domain\n    &#39; is correct.\n    &#39; Note: When the domain is an empty string, the following code only checks \n    &#39; whether the authorization type is Basic.\n    If tempChallenge.IndexOf(&quot;BASIC&quot;) &lt;&gt; -1 Then\n      If domain &lt;&gt; [String].Empty Then\n        If tempChallenge.IndexOf(domain.ToUpper()) &lt;&gt; -1 Then\n          challengePasses = True\n          &#39; The domain is not allowed and the authorization type is Basic.\n        Else\n          challengePasses = False\n        End If\n        &#39; The domain is a blank string and the authorization type is Basic.\n      Else\n        challengePasses = True\n      End If\n    End If\n    Return challengePasses\n  End Function &#39;checkChallenge\n\n\n  &#39; The PreAuthenticate method specifies whether the authentication implemented \n  &#39; by this class allows pre-authentication. \n  &#39; Even if you do not use it, this method must be implemented to obey to the rules \n  &#39; of interface implementation.\n  &#39; In this case it always returns null. \n  Public Function PreAuthenticate(ByVal request As WebRequest, ByVal credentials As ICredentials) As Authorization _\n      Implements IAuthenticationModule.PreAuthenticate\n\n    Return Nothing\n  End Function &#39;PreAuthenticate\n\n  \n  &#39; Authenticate is the core method for this custom authentication.\n  &#39; When an Internet resource requests authentication, the WebRequest.GetResponse \n  &#39; method calls the AuthenticationManager.Authenticate method. This method, in \n  &#39; turn, calls the Authenticate method on each of the registered authentication\n  &#39; modules, in the order in which they were registered. When the authentication is \n  &#39; complete an Authorization object is returned to the WebRequest.\n  Public Function Authenticate(ByVal challenge As String, ByVal request As WebRequest, ByVal credentials As ICredentials) As Authorization _\n      Implements IAuthenticationModule.Authenticate\n\n\n    Dim ASCII As Encoding = Encoding.ASCII\n\n    &#39; Get the username and password from the credentials\n    Dim MyCreds As NetworkCredential = credentials.GetCredential(request.RequestUri, &quot;Basic&quot;)\n\n    If PreAuthenticate(request, credentials) Is Nothing Then\n      Console.WriteLine(ControlChars.Lf + &quot; Pre-authentication is not allowed.&quot;)\n    Else\n      Console.WriteLine(ControlChars.Lf + &quot; Pre-authentication is allowed.&quot;)\n    End If\n    &#39; Verify that the challenge satisfies the authorization requirements.\n    Dim challengeOk As Boolean = checkChallenge(challenge, MyCreds.Domain)\n\n    If Not challengeOk Then\n      Return Nothing\n    End If\n\n    &#39; Create the encrypted string according to the Basic authentication format as\n    &#39; follows:\n    &#39; a)Concatenate the username and password separated by colon;\n    &#39; b)Apply ASCII encoding to obtain a stream of bytes;\n    &#39; c)Apply Base64 encoding to this array of bytes to obtain the encoded \n    &#39; authorization.\n    Dim BasicEncrypt As String = MyCreds.UserName + &quot;:&quot; + MyCreds.Password\n\n    Dim BasicToken As String = &quot;Basic &quot; + Convert.ToBase64String(ASCII.GetBytes(BasicEncrypt))\n\n    &#39; Create an Authorization object using the encoded authorization above.\n    Dim resourceAuthorization As New Authorization(BasicToken)\n\n    &#39; Get the Message property, which contains the authorization string that the \n    &#39; client returns to the server when accessing protected resources.\n    Console.WriteLine(ControlChars.Lf + &quot; Authorization Message:{0}&quot;, resourceAuthorization.Message)\n\n    &#39; Get the Complete property, which is set to true when the authentication process \n    &#39; between the client and the server is finished.\n    Console.WriteLine(ControlChars.Lf + &quot; Authorization Complete:{0}&quot;, resourceAuthorization.Complete)\n\n    Console.WriteLine(ControlChars.Lf + &quot; Authorization ConnectionGroupId:{0}&quot;, resourceAuthorization.ConnectionGroupId)\n\n\n    Return resourceAuthorization\n  End Function &#39;Authenticate\nEnd Class &#39;CustomBasic \n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The IAuthenticationModule interface defines the properties and methods that custom authentication modules must use.  </p>\n<p> Authentication modules conduct the entire authentication process with a server, responding to an authentication challenge as appropriate. This process may consist of requests to an authentication server separate from the resource server, as well as any other activities required to properly authenticate a request for a URI.  </p>\n<p> Custom authentication modules should implement the IAuthenticationModule interface and then register with the <a class=\"xref\" href=\"system.net.authenticationmanager#System_Net_AuthenticationManager_Register_\" data-linktype=\"relative-path\">Register</a> method. Authentication modules are also registered at program initialization by reading the configuration file.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_IAuthenticationModule_AuthenticationType\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AuthenticationType</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the authentication type provided by this authentication module.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string AuthenticationType { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string indicating the authentication type provided by this authentication module.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The AuthenticationType property identifies the authentication type implemented by this authentication module. The AuthenticationType property is used by the <a class=\"xref\" href=\"system.net.authenticationmanager#System_Net_AuthenticationManager_Register_\" data-linktype=\"relative-path\">Register</a> method to determine if the authentication module has been registered, and by the <a class=\"xref\" href=\"system.net.authenticationmanager#System_Net_AuthenticationManager_Unregister_\" data-linktype=\"relative-path\">Unregister</a> method to remove a registered authentication module.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_IAuthenticationModule_CanPreAuthenticate\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CanPreAuthenticate</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value indicating whether the authentication module supports preauthentication.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool CanPreAuthenticate { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the authorization module supports preauthentication; otherwise <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The CanPreAuthenticate property is set to <code>true</code> to indicate that the authentication module can respond with a valid <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> instance when the <a class=\"xref\" href=\"system.net.iauthenticationmodule#System_Net_IAuthenticationModule_PreAuthenticate_\" data-linktype=\"relative-path\">PreAuthenticate</a> method is called.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_IAuthenticationModule_Authenticate_System_String_System_Net_WebRequest_System_Net_ICredentials_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Authenticate(String, WebRequest, ICredentials)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns an instance of the <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> class in respose to an authentication challenge from a server.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Net.Authorization Authenticate (string challenge, System.Net.WebRequest request, System.Net.ICredentials credentials);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>challenge</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The authentication challenge sent by the server.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>request</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a> instance associated with the challenge.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>credentials</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.icredentials\" data-linktype=\"relative-path\">ICredentials</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The credentials associated with the challenge.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> instance containing the authorization message for the request, or <code>null</code> if the challenge cannot be handled.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Authenticate method conducts the authentication process with the server and returns an <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> instance to the <a class=\"xref\" href=\"system.net.authenticationmanager\" data-linktype=\"relative-path\">AuthenticationManager</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Net_IAuthenticationModule_PreAuthenticate_System_Net_WebRequest_System_Net_ICredentials_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PreAuthenticate(WebRequest, ICredentials)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns an instance of the <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> class for an authentication request to a server.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Net.Authorization PreAuthenticate (System.Net.WebRequest request, System.Net.ICredentials credentials);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>request</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.net.webrequest\" data-linktype=\"relative-path\">WebRequest</a> instance associated with the authentication request.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>credentials</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.icredentials\" data-linktype=\"relative-path\">ICredentials</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The credentials associated with the authentication request.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> instance containing the authorization message for the request.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When the <a class=\"xref\" href=\"system.net.iauthenticationmodule#System_Net_IAuthenticationModule_CanPreAuthenticate_\" data-linktype=\"relative-path\">CanPreAuthenticate</a> property is <code>true</code>, the PreAuthenticate method will return an instance of the <a class=\"xref\" href=\"system.net.authorization\" data-linktype=\"relative-path\">Authorization</a> class containing an authentication message.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Net.IAuthenticationModule.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.IAuthenticationModule\">\r\n<meta name=\"APIName\" content=\"System.Net.IAuthenticationModule.Authenticate\">\r\n<meta name=\"APIName\" content=\"System.Net.IAuthenticationModule.AuthenticationType\">\r\n<meta name=\"APIName\" content=\"System.Net.IAuthenticationModule.CanPreAuthenticate\">\r\n<meta name=\"APIName\" content=\"System.Net.IAuthenticationModule.PreAuthenticate\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"19312f3b-f5e9-572d-b001-9356e2bbc3e7\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides the base authentication interface for Web client authentication modules.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.net/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.IAuthenticationModule\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Net.IAuthenticationModule.yml","open_to_public_contributors":false,"api_name":["System.Net.IAuthenticationModule","System.Net.IAuthenticationModule.Authenticate","System.Net.IAuthenticationModule.AuthenticationType","System.Net.IAuthenticationModule.CanPreAuthenticate","System.Net.IAuthenticationModule.PreAuthenticate"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.IAuthenticationModule","System::Net::IAuthenticationModule","System.Net.IAuthenticationModule.Authenticate","System::Net::IAuthenticationModule::Authenticate","System.Net.IAuthenticationModule.AuthenticationType","System::Net::IAuthenticationModule::AuthenticationType","System.Net.IAuthenticationModule.CanPreAuthenticate","System::Net::IAuthenticationModule::CanPreAuthenticate","System.Net.IAuthenticationModule.PreAuthenticate","System::Net::IAuthenticationModule::PreAuthenticate"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"19312f3b-f5e9-572d-b001-9356e2bbc3e7","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Net/IAuthenticationModule.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IAuthenticationModule interface | Microsoft Docs","_op_ogTitle":"IAuthenticationModule interface","description":"Provides the base authentication interface for Web client authentication modules.\n","toc_asset_id":"api/_splitted/System.Net/toc.json","toc_rel":"_splitted/System.Net/toc.json","source_url":"","ms.assetid":"System.Net.IAuthenticationModule","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.net.iauthenticationmodule","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.net.iauthenticationmodule","fileRelativePath":"api/System.Net.IAuthenticationModule.html"},"themesRelativePathToOutputRoot":"_themes/"}