{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">Base64FormattingOptions</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies whether relevant <span class=\"xref\">stem.Convert.ToBase64CharArray*</span> and <span class=\"xref\">stem.Convert.ToBase64String*</span> methods insert line breaks in their output.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[ECMA2Yaml.Models.ECMAAttribute]\npublic enum Base64FormattingOptions</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">Base64FormattingOptions</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.flagsattribute\" title=\"System.FlagsAttribute\" data-linktype=\"relative-path\">FlagsAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example calls the [Convert.ToBase64String(Byte&lt;xref:System.Convert.ToBase64String%28System.Byte%5B%5D%2CSystem.Base64FormattingOptions%29?displayProperty=fullName&gt; with a InsertLineBreaks argument to insert line breaks in the string that is produced by encoding a 100-element byte array.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Convert.ToBase64String#3\">Module Example\n   Public Sub Main()\n       &#39; Define a byte array.\n       Dim bytes(99) As Byte\n       Dim originalTotal As Integer = 0\n       For ctr As Integer = 0 To bytes.GetUpperBound(0)\n          bytes(ctr) = CByte(ctr + 1)\n          originalTotal += bytes(ctr)\n       Next\n       &#39; Display summary information about the array.\n       Console.WriteLine(&quot;The original byte array:&quot;)\n       Console.WriteLine(&quot;   Total elements: {0}&quot;, bytes.Length)\n       Console.WriteLine(&quot;   Length of String Representation: {0}&quot;,\n                         BitConverter.ToString(bytes).Length)\n       Console.WriteLine(&quot;   Sum of elements: {0:N0}&quot;, originalTotal)                  \n       Console.WriteLine()\n       \n       &#39; Convert the array to a base 64 sring.\n       Dim s As String = Convert.ToBase64String(bytes, \n                                               Base64FormattingOptions.InsertLineBreaks)\n       Console.WriteLine(&quot;The base 64 string:{1}   {0}{1}&quot;, \n                         s, vbCrLf)\n       \n       &#39; Restore the byte array.\n       Dim newBytes() As Byte = Convert.FromBase64String(s)\n       Dim newTotal As Integer = 0\n       For Each newByte In newBytes\n          newTotal += newByte\n       Next\n       &#39; Display summary information about the restored array.\n       Console.WriteLine(&quot;   Total elements: {0}&quot;, newBytes.Length)\n       Console.WriteLine(&quot;   Length of String Representation: {0}&quot;,\n                         BitConverter.ToString(newBytes).Length)\n       Console.WriteLine(&quot;   Sum of elements: {0:N0}&quot;, newTotal)                  \n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;   The original byte array:\n&#39;      Total elements: 100\n&#39;      Length of String Representation: 299\n&#39;      Sum of elements: 5,050\n&#39;   \n&#39;   The base 64 string:\n&#39;      AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5\n&#39;   Ojs8PT4/QEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xdXl9gYWJjZA==\n&#39;   \n&#39;      Total elements: 100\n&#39;      Length of String Representation: 299\n&#39;      Sum of elements: 5,050\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Convert.ToBase64String#3\">using System;\n\npublic class Example\n{\n   public static void Main()\n   {\n       // Define a byte array.\n       Byte[] bytes = new Byte[100];\n       int originalTotal = 0;\n       for (int ctr = 0; ctr &lt;= bytes.GetUpperBound(0); ctr++) {\n          bytes[ctr] = (byte)(ctr + 1);\n          originalTotal += bytes[ctr];\n       }\n       // Display summary information about the array.\n       Console.WriteLine(&quot;The original byte array:&quot;);\n       Console.WriteLine(&quot;   Total elements: {0}&quot;, bytes.Length);\n       Console.WriteLine(&quot;   Length of String Representation: {0}&quot;,\n                         BitConverter.ToString(bytes).Length);\n       Console.WriteLine(&quot;   Sum of elements: {0:N0}&quot;, originalTotal);                  \n       Console.WriteLine();\n       \n       // Convert the array to a base 64 sring.\n       String s = Convert.ToBase64String(bytes, \n                                         Base64FormattingOptions.InsertLineBreaks);\n       Console.WriteLine(&quot;The base 64 string:\\n   {0}\\n&quot;, s);\n       \n       // Restore the byte array.\n       Byte[] newBytes = Convert.FromBase64String(s);\n       int newTotal = 0;\n       foreach (var newByte in newBytes)\n          newTotal += newByte;\n\n       // Display summary information about the restored array.\n       Console.WriteLine(&quot;   Total elements: {0}&quot;, newBytes.Length);\n       Console.WriteLine(&quot;   Length of String Representation: {0}&quot;,\n                         BitConverter.ToString(newBytes).Length);\n       Console.WriteLine(&quot;   Sum of elements: {0:N0}&quot;, newTotal);                  \n   }\n}\n// The example displays the following output:\n//   The original byte array:\n//      Total elements: 100\n//      Length of String Representation: 299\n//      Sum of elements: 5,050\n//   \n//   The base 64 string:\n//      AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5\n//   Ojs8PT4/QEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xdXl9gYWJjZA==\n//   \n//      Total elements: 100\n//      Length of String Representation: 299\n//      Sum of elements: 5,050\n</code></pre><p> As the output from the example shows, the <a class=\"xref\" href=\"system.convert#System_Convert_FromBase64String_\" data-linktype=\"relative-path\">FromBase64String</a> succeeds in restoring the original byte array; the line break characters are ignored during the conversion.</p>\n\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The <a class=\"xref\" href=\"system.convert#System_Convert_ToBase64CharArray_\" data-linktype=\"relative-path\">ToBase64CharArray</a> and <a class=\"xref\" href=\"system.convert#System_Convert_ToBase64String_\" data-linktype=\"relative-path\">ToBase64String</a> methods convert the value of an array of 8-bit unsigned integers to an equivalent string representation that consists of base 64 digits. The string representation can contain one or more line breaks, where a line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A). Because line breaks are considered whitespace characters in a base-64 encoding, they are ignored when converting a base-64 encoded string back to a byte array. The line breaks are simply convenient when displaying the encoded string to a control or a device such as a console window.  </p>\n<p> The None and InsertLineBreaks values are mutually exclusive. Therefore, although the Base64FormattingOptions enumeration is marked with the <a class=\"xref\" href=\"system.flagsattribute\" data-linktype=\"relative-path\">FlagsAttribute</a> attribute, it makes no sense to perform a bitwise combination of these two values.</p>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Base64FormattingOptions_InsertLineBreaks\">\r\n      \t\t\t<span class=\"lang-csharp\">InsertLineBreaks</span>\r\n      \t</td>\r\n      \t<td><p>Inserts line breaks after every 76 characters in the string representation.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Base64FormattingOptions_None\">\r\n      \t\t\t<span class=\"lang-csharp\">None</span>\r\n      \t</td>\r\n      \t<td><p>Does not insert line breaks after every 76 characters in the string representation.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Base64FormattingOptions.yml\">\r\n<meta name=\"APIName\" content=\"System.Base64FormattingOptions\">\r\n<meta name=\"APIName\" content=\"System.Base64FormattingOptions.InsertLineBreaks\">\r\n<meta name=\"APIName\" content=\"System.Base64FormattingOptions.None\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"5b3581d5-c6d2-b831-e7e4-d1760105d317\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies whether relevant  and  methods insert line breaks in their output.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Base64FormattingOptions\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Base64FormattingOptions.yml","open_to_public_contributors":false,"api_name":["System.Base64FormattingOptions","System.Base64FormattingOptions.InsertLineBreaks","System.Base64FormattingOptions.None"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Base64FormattingOptions","System::Base64FormattingOptions","System.Base64FormattingOptions.InsertLineBreaks","System::Base64FormattingOptions::InsertLineBreaks","System.Base64FormattingOptions.None","System::Base64FormattingOptions::None"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"5b3581d5-c6d2-b831-e7e4-d1760105d317","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System/Base64FormattingOptions.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Base64FormattingOptions enum | Microsoft Docs","_op_ogTitle":"Base64FormattingOptions enum","description":"Specifies whether relevant  and  methods insert line breaks in their output.\n","toc_asset_id":"api/_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Base64FormattingOptions","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.base64formattingoptions","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.base64formattingoptions","fileRelativePath":"api/System.Base64FormattingOptions.html"},"themesRelativePathToOutputRoot":"_themes/"}