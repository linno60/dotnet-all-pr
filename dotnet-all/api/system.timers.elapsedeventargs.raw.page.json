{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ElapsedEventArgs</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides data for the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class ElapsedEventArgs : EventArgs</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></span></div><span class=\"lang-csharp\">ElapsedEventArgs</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs#System_EventArgs_Empty\" data-linktype=\"relative-path\">Empty</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example instantiates a <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">Timer</a> object that fires its <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">System.Timers.Timer.Elapsed</a> event every two seconds (2000 milliseconds), sets up an event handler for the  event, and starts the timer. The event handler displays the value of the <a class=\"xref\" href=\"system.timers.elapsedeventargs#System_Timers_ElapsedEventArgs_SignalTime_\" data-linktype=\"relative-path\">SignalTime</a> property each time it is raised.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Timers.Timer#1\">using namespace System;\nusing namespace System::Timers;\n\npublic ref class Example\n{\nprivate:\n    static System::Timers::Timer^ aTimer;\n\npublic:\n    static void Demo()\n    {\n        // Create a timer and set a two second interval.\n        aTimer = gcnew System::Timers::Timer();\n        aTimer-&gt;Interval = 2000;\n\n        // Hook up the Elapsed event for the timer. \n        aTimer-&gt;Elapsed += gcnew System::Timers::ElapsedEventHandler(Example::OnTimedEvent);\n\n        // Have the timer fire repeated events (true is the default)\n        aTimer-&gt;AutoReset = true;\n\n        // Start the timer\n        aTimer-&gt;Enabled = true;\n\n        Console::WriteLine(&quot;Press the Enter key to exit the program at any time... &quot;);\n        Console::ReadLine();\n    }\n\nprivate:\n    static void OnTimedEvent(Object^ source, System::Timers::ElapsedEventArgs^ e)\n    {\n        Console::WriteLine(&quot;The Elapsed event was raised at {0}&quot;, e-&gt;SignalTime);\n    }\n};\n\nint main()\n{\n    Example::Demo();\n}\n// The example displays output like the following: \n//       Press the Enter key to exit the program at any time... \n//       The Elapsed event was raised at 5/20/2015 8:48:58 PM \n//       The Elapsed event was raised at 5/20/2015 8:49:00 PM \n//       The Elapsed event was raised at 5/20/2015 8:49:02 PM \n//       The Elapsed event was raised at 5/20/2015 8:49:04 PM \n//       The Elapsed event was raised at 5/20/2015 8:49:06 PM \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Timers.Timer#1\">using System;\nusing System.Timers;\n\npublic class Example\n{\n    private static Timer aTimer;\n\n    public static void Main()\n    {\n        // Create a timer and set a two second interval.\n        aTimer = new System.Timers.Timer();\n        aTimer.Interval = 2000;\n\n        // Hook up the Elapsed event for the timer. \n        aTimer.Elapsed += OnTimedEvent;\n\n        // Have the timer fire repeated events (true is the default)\n        aTimer.AutoReset = true;\n\n        // Start the timer\n        aTimer.Enabled = true;\n\n        Console.WriteLine(&quot;Press the Enter key to exit the program at any time... &quot;);\n        Console.ReadLine();\n    }\n\n    private static void OnTimedEvent(Object source, System.Timers.ElapsedEventArgs e)\n    {\n        Console.WriteLine(&quot;The Elapsed event was raised at {0}&quot;, e.SignalTime);\n    }\n}\n// The example displays output like the following: \n//       Press the Enter key to exit the program at any time... \n//       The Elapsed event was raised at 5/20/2015 8:48:58 PM \n//       The Elapsed event was raised at 5/20/2015 8:49:00 PM \n//       The Elapsed event was raised at 5/20/2015 8:49:02 PM \n//       The Elapsed event was raised at 5/20/2015 8:49:04 PM \n//       The Elapsed event was raised at 5/20/2015 8:49:06 PM \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Timers.Timer#1\">Imports System.Timers\n\nPublic Module Example\n    Private aTimer As Timer\n\n    Public Sub Main()\n        &#39; Create a timer and set a two second interval.\n        aTimer = New System.Timers.Timer()\n        aTimer.Interval = 2000\n\n        &#39; Hook up the Elapsed event for the timer.  \n        AddHandler aTimer.Elapsed, AddressOf OnTimedEvent\n\n        &#39; Have the timer fire repeated events (true is the default)\n        aTimer.AutoReset = True\n\n        &#39; Start the timer\n        aTimer.Enabled = True\n\n        Console.WriteLine(&quot;Press the Enter key to exit the program at any time... &quot;)\n        Console.ReadLine()\n    End Sub\n\n    Private Sub OnTimedEvent(source As Object, e As System.Timers.ElapsedEventArgs)\n        Console.WriteLine(&quot;The Elapsed event was raised at {0}&quot;, e.SignalTime)\n    End Sub\nEnd Module\n&#39; The example displays output like the following: \n&#39;       Press the Enter key to exit the program at any time... \n&#39;       The Elapsed event was raised at 5/20/2015 8:48:58 PM \n&#39;       The Elapsed event was raised at 5/20/2015 8:49:00 PM \n&#39;       The Elapsed event was raised at 5/20/2015 8:49:02 PM \n&#39;       The Elapsed event was raised at 5/20/2015 8:49:04 PM \n&#39;       The Elapsed event was raised at 5/20/2015 8:49:06 PM \n</code></pre>\r\n  \r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Timers_ElapsedEventArgs_SignalTime_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Timers_ElapsedEventArgs_SignalTime\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SignalTime</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the date/time when the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event was raised.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public DateTime SignalTime { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The time the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event was raised.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">System.Timers.Timer.Elapsed</a> event is raised on a <a class=\"xref\" href=\"system.threading.threadpool\" data-linktype=\"relative-path\">ThreadPool</a> thread, so the event-handling method might run on one thread at the same time that a call to the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Stop_\" data-linktype=\"relative-path\">Stop</a> method runs on another thread. This might result in the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event being raised after the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Stop_\" data-linktype=\"relative-path\">Stop</a> method is called. This race condition cannot be prevented simply by comparing the SignalTime property with the time when the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Stop_\" data-linktype=\"relative-path\">Stop</a> method is called, because the event-handling method might already be executing when the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Stop_\" data-linktype=\"relative-path\">Stop</a> method is called, or might begin executing between the moment when the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Stop_\" data-linktype=\"relative-path\">Stop</a> method is called and the moment when the stop time is saved. If it is critical to prevent the thread that calls the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Stop_\" data-linktype=\"relative-path\">Stop</a> method from proceeding while the event-handling method is still executing, use a more robust synchronization mechanism such as the <a class=\"xref\" href=\"system.threading.monitor\" data-linktype=\"relative-path\">Monitor</a> class or the <a class=\"xref\" href=\"system.threading.interlocked#System_Threading_Interlocked_CompareExchange_\" data-linktype=\"relative-path\">CompareExchange</a> method. Code that uses the <a class=\"xref\" href=\"system.threading.interlocked#System_Threading_Interlocked_CompareExchange_\" data-linktype=\"relative-path\">CompareExchange</a> method can be found in the example for the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Stop_\" data-linktype=\"relative-path\">Stop</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Timers.ElapsedEventArgs.yml\">\r\n<meta name=\"APIName\" content=\"System.Timers.ElapsedEventArgs\">\r\n<meta name=\"APIName\" content=\"System.Timers.ElapsedEventArgs.SignalTime\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"4999da8a-4a91-2460-8ced-769ed3c76f1a\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides data for the  event.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.timers/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Timers.ElapsedEventArgs\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Timers.ElapsedEventArgs.yml","open_to_public_contributors":false,"api_name":["System.Timers.ElapsedEventArgs","System.Timers.ElapsedEventArgs.SignalTime"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Timers.ElapsedEventArgs","System::Timers::ElapsedEventArgs","System.Timers.ElapsedEventArgs.SignalTime","System::Timers::ElapsedEventArgs::SignalTime"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"4999da8a-4a91-2460-8ced-769ed3c76f1a","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Timers/ElapsedEventArgs.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ElapsedEventArgs class | Microsoft Docs","_op_ogTitle":"ElapsedEventArgs class","description":"Provides data for the  event.\n","toc_asset_id":"api/_splitted/System.Timers/toc.json","toc_rel":"_splitted/System.Timers/toc.json","source_url":"","ms.assetid":"System.Timers.ElapsedEventArgs","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.timers.elapsedeventargs","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.timers.elapsedeventargs","fileRelativePath":"api/System.Timers.ElapsedEventArgs.html"},"themesRelativePathToOutputRoot":"_themes/"}