{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">EncryptionMethod</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Encapsulates the encryption algorithm used for XML encryption.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class EncryptionMethod</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">EncryptionMethod</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates how to create a simple utility class that uses the <a class=\"xref\" href=\"system.security.cryptography.tripledes\" data-linktype=\"relative-path\">TripleDES</a> algorithm to encrypt an XML document.  </p>\n<pre><code class=\"lang-cpp\" name=\"Cryptography.XML.MainXMLEncDecryptDataOOP#1\">#using &lt;System.Security.dll&gt;\n#using &lt;System.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Xml;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\n\nref class TrippleDESDocumentEncryption\n{\nprotected:\n   XmlDocument^ docValue;\n   TripleDES^ algValue;\n\npublic:\n   TrippleDESDocumentEncryption( XmlDocument^ Doc, TripleDES^ Key )\n   {\n      if ( Doc != nullptr )\n      {\n         docValue = Doc;\n      }\n      else\n      {\n         throw gcnew ArgumentNullException( L&quot;Doc&quot; );\n      }\n\n      if ( Key != nullptr )\n      {\n         algValue = Key;\n      }\n      else\n      {\n         throw gcnew ArgumentNullException( L&quot;Key&quot; );\n      }\n   }\n\n\n   property XmlDocument^ Doc\n   {\n      XmlDocument^ get()\n      {\n         return docValue;\n      }\n\n      void set( XmlDocument^ value )\n      {\n         docValue = value;\n      }\n\n   }\n\n   property TripleDES^ Alg\n   {\n      TripleDES^ get()\n      {\n         return algValue;\n      }\n\n      void set( TripleDES^ value )\n      {\n         algValue = value;\n      }\n\n   }\n   void Clear()\n   {\n      if ( algValue != nullptr )\n      {\n         algValue-&gt;Clear();\n      }\n      else\n      {\n         throw gcnew Exception( L&quot;No TripleDES key was found to clear.&quot; );\n      }\n   }\n\n   void Encrypt( String^ Element )\n   {\n\n      // Find the element by name and create a new\n      // XmlElement object.\n      XmlElement^ inputElement = dynamic_cast&lt;XmlElement^&gt;(docValue-&gt;GetElementsByTagName( Element )-&gt;Item( 0 ));\n\n      // If the element was not found, throw an exception.\n      if ( inputElement == nullptr )\n      {\n         throw gcnew Exception( L&quot;The element was not found.&quot; );\n      }\n\n\n      // Create a new EncryptedXml object.\n      EncryptedXml^ exml = gcnew EncryptedXml( docValue );\n\n      // Encrypt the element using the symmetric key.\n      array&lt;Byte&gt;^rgbOutput = exml-&gt;EncryptData( inputElement, algValue, false );\n\n      // Create an EncryptedData object and populate it.\n      EncryptedData^ ed = gcnew EncryptedData;\n\n      // Specify the namespace URI for XML encryption elements.\n      ed-&gt;Type = EncryptedXml::XmlEncElementUrl;\n\n      // Specify the namespace URI for the TrippleDES algorithm.\n      ed-&gt;EncryptionMethod = gcnew EncryptionMethod( EncryptedXml::XmlEncTripleDESUrl );\n\n      // Create a CipherData element.\n      ed-&gt;CipherData = gcnew CipherData;\n\n      // Set the CipherData element to the value of the encrypted XML element.\n      ed-&gt;CipherData-&gt;CipherValue = rgbOutput;\n\n      // Replace the plaintext XML elemnt with an EncryptedData element.\n      EncryptedXml::ReplaceElement( inputElement, ed, false );\n   }\n\n   void Decrypt()\n   {\n\n      // XmlElement object.\n      XmlElement^ encryptedElement = dynamic_cast&lt;XmlElement^&gt;(docValue-&gt;GetElementsByTagName( L&quot;EncryptedData&quot; )-&gt;Item( 0 ));\n\n      // If the EncryptedData element was not found, throw an exception.\n      if ( encryptedElement == nullptr )\n      {\n         throw gcnew Exception( L&quot;The EncryptedData element was not found.&quot; );\n      }\n\n\n      // Create an EncryptedData object and populate it.\n      EncryptedData^ ed = gcnew EncryptedData;\n      ed-&gt;LoadXml( encryptedElement );\n\n      // Create a new EncryptedXml object.\n      EncryptedXml^ exml = gcnew EncryptedXml;\n\n      // Decrypt the element using the symmetric key.\n      array&lt;Byte&gt;^rgbOutput = exml-&gt;DecryptData( ed, algValue );\n\n      // Replace the encryptedData element with the plaintext XML elemnt.\n      exml-&gt;ReplaceData( encryptedElement, rgbOutput );\n   }\n\n};\n\nint main()\n{\n\n   // Create an XmlDocument object.\n   XmlDocument^ xmlDoc = gcnew XmlDocument;\n\n   // Load an XML file into the XmlDocument object.\n   try\n   {\n      xmlDoc-&gt;PreserveWhitespace = true;\n      xmlDoc-&gt;Load( L&quot;test.xml&quot; );\n   }\n   catch ( Exception^ e )\n   {\n      Console::WriteLine( e-&gt;Message );\n      return 0;\n   }\n\n\n   // Create a new TripleDES key.\n   TripleDESCryptoServiceProvider^ tDESkey = gcnew TripleDESCryptoServiceProvider;\n\n   // Create a new instance of the TrippleDESDocumentEncryption object\n   // defined in this sample.\n   TrippleDESDocumentEncryption^ xmlTDES = gcnew TrippleDESDocumentEncryption( xmlDoc,tDESkey );\n   try\n   {\n\n      // Encrypt the &quot;creditcard&quot; element.\n      xmlTDES-&gt;Encrypt( L&quot;creditcard&quot; );\n\n      // Display the encrypted XML to the console.\n      Console::WriteLine( L&quot;Encrypted XML:&quot; );\n      Console::WriteLine();\n      Console::WriteLine( xmlTDES-&gt;Doc-&gt;OuterXml );\n\n      // Decrypt the &quot;creditcard&quot; element.\n      xmlTDES-&gt;Decrypt();\n\n      // Display the encrypted XML to the console.\n      Console::WriteLine();\n      Console::WriteLine( L&quot;Decrypted XML:&quot; );\n      Console::WriteLine();\n      Console::WriteLine( xmlTDES-&gt;Doc-&gt;OuterXml );\n   }\n   catch ( Exception^ e )\n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n   finally\n   {\n\n      // Clear the TripleDES key.\n      xmlTDES-&gt;Clear();\n   }\n\n   return 1;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.XML.MainXMLEncDecryptDataOOP#1\">Imports System\nImports System.Xml\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\n\n\n\nModule Program\n\n    Sub Main(ByVal args() As String)\n\n        &#39; Create an XmlDocument object.\n        Dim xmlDoc As New XmlDocument()\n\n        &#39; Load an XML file into the XmlDocument object.\n        xmlDoc.PreserveWhitespace = True\n        xmlDoc.Load(&quot;test.xml&quot;)\n\n\n        &#39; Create a new TripleDES key. \n        Dim tDESkey As New TripleDESCryptoServiceProvider()\n\n        &#39; Create a new instance of the TrippleDESDocumentEncryption object\n        &#39; defined in this sample.\n        Dim xmlTDES As New TrippleDESDocumentEncryption(xmlDoc, tDESkey)\n\n        Try\n            &#39; Encrypt the &quot;creditcard&quot; element.\n            xmlTDES.Encrypt(&quot;creditcard&quot;)\n\n            &#39; Display the encrypted XML to the console.\n            Console.WriteLine(&quot;Encrypted XML:&quot;)\n            Console.WriteLine()\n            Console.WriteLine(xmlTDES.Doc.OuterXml)\n\n            &#39; Decrypt the &quot;creditcard&quot; element.\n            xmlTDES.Decrypt()\n\n            &#39; Display the encrypted XML to the console.\n            Console.WriteLine()\n            Console.WriteLine(&quot;Decrypted XML:&quot;)\n            Console.WriteLine()\n            Console.WriteLine(xmlTDES.Doc.OuterXml)\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        Finally\n            &#39; Clear the TripleDES key.\n            xmlTDES.Clear()\n        End Try\n\n    End Sub &#39;Main \nEnd Module &#39;Program\n\n\n\nClass TrippleDESDocumentEncryption\n    Protected docValue As XmlDocument\n    Protected algValue As TripleDES\n\n\n    Public Sub New(ByVal Doc As XmlDocument, ByVal Key As TripleDES)\n        If Not (Doc Is Nothing) Then\n            docValue = Doc\n        Else\n            Throw New ArgumentNullException(&quot;Doc&quot;)\n        End If\n\n        If Not (Key Is Nothing) Then\n\n            algValue = Key\n        Else\n            Throw New ArgumentNullException(&quot;Key&quot;)\n        End If\n\n    End Sub\n\n\n    Public Property Doc() As XmlDocument\n        Get\n            Return docValue\n        End Get\n        Set(ByVal value As XmlDocument)\n            docValue = value\n        End Set\n    End Property\n\n    Public Property Alg() As TripleDES\n        Get\n            Return algValue\n        End Get\n        Set(ByVal value As TripleDES)\n            algValue = value\n        End Set\n    End Property\n\n    Public Sub Clear()\n        If Not (algValue Is Nothing) Then\n            algValue.Clear()\n        Else\n            Throw New Exception(&quot;No TripleDES key was found to clear.&quot;)\n        End If\n\n    End Sub\n\n\n    Public Sub Encrypt(ByVal Element As String)\n        &#39; Find the element by name and create a new\n        &#39; XmlElement object.\n        Dim inputElement As XmlElement = docValue.GetElementsByTagName(Element)(0)\n\n        &#39; If the element was not found, throw an exception.\n        If inputElement Is Nothing Then\n            Throw New Exception(&quot;The element was not found.&quot;)\n        End If\n\n        &#39; Create a new EncryptedXml object.\n        Dim exml As New EncryptedXml(docValue)\n\n        &#39; Encrypt the element using the symmetric key.\n        Dim rgbOutput As Byte() = exml.EncryptData(inputElement, algValue, False)\n\n        &#39; Create an EncryptedData object and populate it.\n        Dim ed As New EncryptedData()\n\n        &#39; Specify the namespace URI for XML encryption elements.\n        ed.Type = EncryptedXml.XmlEncElementUrl\n\n        &#39; Specify the namespace URI for the TrippleDES algorithm.\n        ed.EncryptionMethod = New EncryptionMethod(EncryptedXml.XmlEncTripleDESUrl)\n\n        &#39; Create a CipherData element.\n        ed.CipherData = New CipherData()\n\n        &#39; Set the CipherData element to the value of the encrypted XML element.\n        ed.CipherData.CipherValue = rgbOutput\n\n        &#39; Replace the plaintext XML elemnt with an EncryptedData element.\n        EncryptedXml.ReplaceElement(inputElement, ed, False)\n\n    End Sub\n\n\n    Public Sub Decrypt()\n\n        &#39; XmlElement object.\n        Dim encryptedElement As XmlElement = docValue.GetElementsByTagName(&quot;EncryptedData&quot;)(0)\n\n        &#39; If the EncryptedData element was not found, throw an exception.\n        If encryptedElement Is Nothing Then\n            Throw New Exception(&quot;The EncryptedData element was not found.&quot;)\n        End If\n\n        &#39; Create an EncryptedData object and populate it.\n        Dim ed As New EncryptedData()\n        ed.LoadXml(encryptedElement)\n\n        &#39; Create a new EncryptedXml object.\n        Dim exml As New EncryptedXml()\n\n        &#39; Decrypt the element using the symmetric key.\n        Dim rgbOutput As Byte() = exml.DecryptData(ed, algValue)\n\n        &#39; Replace the encryptedData element with the plaintext XML elemnt.\n        exml.ReplaceData(encryptedElement, rgbOutput)\n\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.XML.MainXMLEncDecryptDataOOP#1\">using System;\nusing System.Xml;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\n\n\tclass Program\n\t{\n\t\tstatic void Main(string[] args)\n\t\t{\n\n\t\t\t// Create an XmlDocument object.\n\t\t\tXmlDocument xmlDoc = new XmlDocument();\n\n\t\t\t// Load an XML file into the XmlDocument object.\n\t\t\ttry\n\t\t\t{\n\t\t\t\txmlDoc.PreserveWhitespace = true;\n\t\t\t\txmlDoc.Load(&quot;test.xml&quot;);\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Create a new TripleDES key. \n\t\t\tTripleDESCryptoServiceProvider tDESkey = new TripleDESCryptoServiceProvider();\n\n\t\t\t// Create a new instance of the TrippleDESDocumentEncryption object\n\t\t\t// defined in this sample.\n\t\t\tTrippleDESDocumentEncryption xmlTDES = new TrippleDESDocumentEncryption(xmlDoc, tDESkey);\n\t\t\t\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// Encrypt the &quot;creditcard&quot; element.\n\t\t\t\txmlTDES.Encrypt(&quot;creditcard&quot;);\n\n\t\t\t\t// Display the encrypted XML to the console.\n\t\t\t\tConsole.WriteLine(&quot;Encrypted XML:&quot;);\n\t\t\t\tConsole.WriteLine();\n\t\t\t\tConsole.WriteLine(xmlTDES.Doc.OuterXml);\n\n\t\t\t\t// Decrypt the &quot;creditcard&quot; element.\n\t\t\t\txmlTDES.Decrypt();\n\n\t\t\t\t// Display the encrypted XML to the console.\n\t\t\t\tConsole.WriteLine();\n\t\t\t\tConsole.WriteLine(&quot;Decrypted XML:&quot;);\n\t\t\t\tConsole.WriteLine();\n\t\t\t\tConsole.WriteLine(xmlTDES.Doc.OuterXml);\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(e.Message);\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\t// Clear the TripleDES key.\n\t\t\t\txmlTDES.Clear();\n\t\t\t}\n\n\t\t}\n\n\t}\n\nclass TrippleDESDocumentEncryption\n{\n\tprotected XmlDocument docValue;\n\tprotected TripleDES algValue;\n\n\tpublic TrippleDESDocumentEncryption(XmlDocument Doc, TripleDES Key)\n\t{\n\t\tif (Doc != null)\n\t\t{\n\t\t\tdocValue = Doc;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow new ArgumentNullException(&quot;Doc&quot;);\n\t\t}\n\n\t\tif (Key != null)\n\t\t{\n\n\t\t\talgValue = Key;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow new ArgumentNullException(&quot;Key&quot;);\n\t\t}\n\t}\n\n\tpublic XmlDocument Doc { set { docValue = value; } get { return docValue; } }\n\tpublic TripleDES Alg { set { algValue = value; } get { return algValue; } }\n\n\tpublic void Clear()\n\t{\n\t\tif (algValue != null)\n\t\t{\n\t\t\talgValue.Clear();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tthrow new Exception(&quot;No TripleDES key was found to clear.&quot;);\n\t\t}\n\t}\n\n\tpublic void Encrypt(string Element)\n\t{\n\t\t// Find the element by name and create a new\n\t\t// XmlElement object.\n\t\tXmlElement inputElement = docValue.GetElementsByTagName(Element)[0] as XmlElement;\n\n\t\t// If the element was not found, throw an exception.\n\t\tif (inputElement == null)\n\t\t{\n\t\t\tthrow new Exception(&quot;The element was not found.&quot;);\n\t\t}\n\n\t\t// Create a new EncryptedXml object.\n\t\tEncryptedXml exml = new EncryptedXml(docValue);\n\n\t\t// Encrypt the element using the symmetric key.\n\t\tbyte[] rgbOutput = exml.EncryptData(inputElement, algValue, false);\n\n\t\t// Create an EncryptedData object and populate it.\n\t\tEncryptedData ed = new EncryptedData();\n\n\t\t// Specify the namespace URI for XML encryption elements.\n\t\ted.Type = EncryptedXml.XmlEncElementUrl;\n\n\t\t// Specify the namespace URI for the TrippleDES algorithm.\n\t\ted.EncryptionMethod = new EncryptionMethod(EncryptedXml.XmlEncTripleDESUrl);\n\n\t\t// Create a CipherData element.\n\t\ted.CipherData = new CipherData();\n\n\t\t// Set the CipherData element to the value of the encrypted XML element.\n\t\ted.CipherData.CipherValue = rgbOutput;\n\n\t\t// Replace the plaintext XML elemnt with an EncryptedData element.\n\t\tEncryptedXml.ReplaceElement(inputElement, ed, false);\n\t}\n\n\tpublic void Decrypt()\n\t{\n\n\t\t// XmlElement object.\n\t\tXmlElement encryptedElement = docValue.GetElementsByTagName(&quot;EncryptedData&quot;)[0] as XmlElement;\n\n\t\t// If the EncryptedData element was not found, throw an exception.\n\t\tif (encryptedElement == null)\n\t\t{\n\t\t\tthrow new Exception(&quot;The EncryptedData element was not found.&quot;);\n\t\t}\n\n\t\t// Create an EncryptedData object and populate it.\n\t\tEncryptedData ed = new EncryptedData();\n\t\ted.LoadXml(encryptedElement);\n\n\t\t// Create a new EncryptedXml object.\n\t\tEncryptedXml exml = new EncryptedXml();\n\n\t\t// Decrypt the element using the symmetric key.\n\t\tbyte[] rgbOutput = exml.DecryptData(ed, algValue);\n\n\t\t// Replace the encryptedData element with the plaintext XML elemnt.\n\t\texml.ReplaceData(encryptedElement, rgbOutput);\n\n\t}\n\n}\n</code></pre><p> The following code example demonstrates how to encrypt an XML document using a symmetric key. This example does not include any key information in the encrypted XML document.  </p>\n<pre><code class=\"lang-cpp\" name=\"Cryptography.XML.XMLEncMinimalDecryptData#1\">#using &lt;System.Security.dll&gt;\n#using &lt;System.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Xml;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nstatic void Encrypt( XmlDocument^ Doc, String^ ElementToEncrypt, SymmetricAlgorithm^ Alg )\n{\n\n   // Check the arguments.\n   if ( Doc == nullptr )\n      throw gcnew ArgumentNullException( L&quot;Doc&quot; );\n\n   if ( ElementToEncrypt == nullptr )\n      throw gcnew ArgumentNullException( L&quot;ElementToEncrypt&quot; );\n\n   if ( Alg == nullptr )\n      throw gcnew ArgumentNullException( L&quot;Alg&quot; );\n\n\n   ////////////////////////////////////////////////\n   // Find the specified element in the XmlDocument\n   // object and create a new XmlElemnt object.\n   ////////////////////////////////////////////////\n   XmlElement^ elementToEncrypt = dynamic_cast&lt;XmlElement^&gt;(Doc-&gt;GetElementsByTagName( ElementToEncrypt )-&gt;Item( 0 ));\n\n   // Throw an XmlException if the element was not found.\n   if ( elementToEncrypt == nullptr )\n   {\n      throw gcnew XmlException( L&quot;The specified element was not found&quot; );\n   }\n\n\n   //////////////////////////////////////////////////\n   // Create a new instance of the EncryptedXml class\n   // and use it to encrypt the XmlElement with the\n   // symmetric key.\n   //////////////////////////////////////////////////\n   EncryptedXml^ eXml = gcnew EncryptedXml;\n   array&lt;Byte&gt;^encryptedElement = eXml-&gt;EncryptData( elementToEncrypt, Alg, false );\n\n   ////////////////////////////////////////////////\n   // Construct an EncryptedData object and populate\n   // it with the desired encryption information.\n   ////////////////////////////////////////////////\n   EncryptedData^ edElement = gcnew EncryptedData;\n   edElement-&gt;Type = EncryptedXml::XmlEncElementUrl;\n\n   // Create an EncryptionMethod element so that the\n   // receiver knows which algorithm to use for decryption.\n   // Determine what kind of algorithm is being used and\n   // supply the appropriate URL to the EncryptionMethod element.\n   String^ encryptionMethod = nullptr;\n   if ( dynamic_cast&lt;TripleDES^&gt;(Alg) )\n   {\n      encryptionMethod = EncryptedXml::XmlEncTripleDESUrl;\n   }\n   else\n   if ( dynamic_cast&lt;DES^&gt;(Alg) )\n   {\n      encryptionMethod = EncryptedXml::XmlEncDESUrl;\n   }\n   else\n   if ( dynamic_cast&lt;Rijndael^&gt;(Alg) )\n   {\n      switch ( Alg-&gt;KeySize )\n      {\n         case 128:\n            encryptionMethod = EncryptedXml::XmlEncAES128Url;\n            break;\n\n         case 192:\n            encryptionMethod = EncryptedXml::XmlEncAES192Url;\n            break;\n\n         case 256:\n            encryptionMethod = EncryptedXml::XmlEncAES256Url;\n            break;\n      }\n   }\n   else\n   {\n\n      // Throw an exception if the transform is not in the previous categories\n      throw gcnew CryptographicException( L&quot;The specified algorithm is not supported for XML Encryption.&quot; );\n   }\n\n\n\n   edElement-&gt;EncryptionMethod = gcnew EncryptionMethod( encryptionMethod );\n\n   // Add the encrypted element data to the\n   // EncryptedData object.\n   edElement-&gt;CipherData-&gt;CipherValue = encryptedElement;\n\n   ////////////////////////////////////////////////////\n   // Replace the element from the original XmlDocument\n   // object with the EncryptedData element.\n   ////////////////////////////////////////////////////\n   EncryptedXml::ReplaceElement( elementToEncrypt, edElement, false );\n}\n\nstatic void Decrypt( XmlDocument^ Doc, SymmetricAlgorithm^ Alg )\n{\n\n   // Check the arguments.\n   if ( Doc == nullptr )\n      throw gcnew ArgumentNullException( L&quot;Doc&quot; );\n\n   if ( Alg == nullptr )\n      throw gcnew ArgumentNullException( L&quot;Alg&quot; );\n\n\n   // Find the EncryptedData element in the XmlDocument.\n   XmlElement^ encryptedElement = dynamic_cast&lt;XmlElement^&gt;(Doc-&gt;GetElementsByTagName( L&quot;EncryptedData&quot; )-&gt;Item( 0 ));\n\n   // If the EncryptedData element was not found, throw an exception.\n   if ( encryptedElement == nullptr )\n   {\n      throw gcnew XmlException( L&quot;The EncryptedData element was not found.&quot; );\n   }\n\n\n   // Create an EncryptedData object and populate it.\n   EncryptedData^ edElement = gcnew EncryptedData;\n   edElement-&gt;LoadXml( encryptedElement );\n\n   // Create a new EncryptedXml object.\n   EncryptedXml^ exml = gcnew EncryptedXml;\n\n   // Decrypt the element using the symmetric key.\n   array&lt;Byte&gt;^rgbOutput = exml-&gt;DecryptData( edElement, Alg );\n\n   // Replace the encryptedData element with the plaintext XML element.\n   exml-&gt;ReplaceData( encryptedElement, rgbOutput );\n}\n\nint main()\n{\n\n   // Create an XmlDocument object.\n   XmlDocument^ xmlDoc = gcnew XmlDocument;\n\n   // Load an XML file into the XmlDocument object.\n   try\n   {\n      xmlDoc-&gt;PreserveWhitespace = true;\n      xmlDoc-&gt;Load( L&quot;test.xml&quot; );\n   }\n   catch ( Exception^ e )\n   {\n      Console::WriteLine( e-&gt;Message );\n      return 0;\n   }\n\n\n   // Create a new TripleDES key.\n   TripleDESCryptoServiceProvider^ tDESkey = gcnew TripleDESCryptoServiceProvider;\n   try\n   {\n\n      // Encrypt the &quot;creditcard&quot; element.\n      Encrypt( xmlDoc, L&quot;creditcard&quot;, tDESkey );\n\n      // Display the encrypted XML to the console.\n      Console::WriteLine( L&quot;Encrypted XML:&quot; );\n      Console::WriteLine();\n      Console::WriteLine( xmlDoc-&gt;OuterXml );\n\n      // Decrypt the &quot;creditcard&quot; element.\n      Decrypt( xmlDoc, tDESkey );\n\n      // Display the encrypted XML to the console.\n      Console::WriteLine();\n      Console::WriteLine( L&quot;Decrypted XML:&quot; );\n      Console::WriteLine();\n      Console::WriteLine( xmlDoc-&gt;OuterXml );\n   }\n   catch ( Exception^ e )\n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n   finally\n   {\n\n      // Clear the TripleDES key.\n      tDESkey-&gt;Clear();\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Cryptography.XML.XMLEncMinimalDecryptData#1\">Imports System\nImports System.Xml\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\n\n\n\nModule Program\n\n    Sub Main(ByVal args() As String)\n\n        &#39; Create an XmlDocument object.\n        Dim xmlDoc As New XmlDocument()\n\n        &#39; Load an XML file into the XmlDocument object.\n        Try\n            xmlDoc.PreserveWhitespace = True\n            xmlDoc.Load(&quot;test.xml&quot;)\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n            Return\n        End Try\n\n        &#39; Create a new TripleDES key. \n        Dim tDESkey As New TripleDESCryptoServiceProvider()\n\n\n        Try\n            &#39; Encrypt the &quot;creditcard&quot; element.\n            Encrypt(xmlDoc, &quot;creditcard&quot;, tDESkey)\n\n            &#39; Display the encrypted XML to the console.\n            Console.WriteLine(&quot;Encrypted XML:&quot;)\n            Console.WriteLine()\n            Console.WriteLine(xmlDoc.OuterXml)\n\n            &#39; Decrypt the &quot;creditcard&quot; element.\n            Decrypt(xmlDoc, tDESkey)\n\n            &#39; Display the encrypted XML to the console.\n            Console.WriteLine()\n            Console.WriteLine(&quot;Decrypted XML:&quot;)\n            Console.WriteLine()\n            Console.WriteLine(xmlDoc.OuterXml)\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        Finally\n            &#39; Clear the TripleDES key.\n            tDESkey.Clear()\n        End Try\n\n    End Sub\n\n\n    Sub Encrypt(ByVal Doc As XmlDocument, ByVal ElementToEncrypt As String, ByVal Alg As SymmetricAlgorithm)\n        &#39; Check the arguments.  \n        If Doc Is Nothing Then\n            Throw New ArgumentNullException(&quot;Doc&quot;)\n        End If\n        If ElementToEncrypt Is Nothing Then\n            Throw New ArgumentNullException(&quot;ElementToEncrypt&quot;)\n        End If\n        If Alg Is Nothing Then\n            Throw New ArgumentNullException(&quot;Alg&quot;)\n        End If\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Find the specified element in the XmlDocument\n        &#39; object and create a new XmlElemnt object.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        Dim elementEncrypt As XmlElement = Doc.GetElementsByTagName(ElementToEncrypt)(0)\n\n\n        &#39; Throw an XmlException if the element was not found.\n        If ElementToEncrypt Is Nothing Then\n            Throw New XmlException(&quot;The specified element was not found&quot;)\n        End If\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Create a new instance of the EncryptedXml class \n        &#39; and use it to encrypt the XmlElement with the \n        &#39; symmetric key.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        Dim eXml As New EncryptedXml()\n\n        Dim encryptedElement As Byte() = eXml.EncryptData(elementEncrypt, Alg, False)\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Construct an EncryptedData object and populate\n        &#39; it with the desired encryption information.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n\n        Dim edElement As New EncryptedData()\n        edElement.Type = EncryptedXml.XmlEncElementUrl\n\n        &#39; Create an EncryptionMethod element so that the \n        &#39; receiver knows which algorithm to use for decryption.\n        &#39; Determine what kind of algorithm is being used and\n        &#39; supply the appropriate URL to the EncryptionMethod element.\n        Dim encryptionMethod As String = Nothing\n\n        If TypeOf Alg Is TripleDES Then\n            encryptionMethod = EncryptedXml.XmlEncTripleDESUrl\n        ElseIf TypeOf Alg Is DES Then\n            encryptionMethod = EncryptedXml.XmlEncDESUrl\n        ElseIf TypeOf Alg Is Rijndael Then\n            Select Case Alg.KeySize\n                Case 128\n                    encryptionMethod = EncryptedXml.XmlEncAES128Url\n                Case 192\n                    encryptionMethod = EncryptedXml.XmlEncAES192Url\n                Case 256\n                    encryptionMethod = EncryptedXml.XmlEncAES256Url\n            End Select\n        Else\n            &#39; Throw an exception if the transform is not in the previous categories\n            Throw New CryptographicException(&quot;The specified algorithm is not supported for XML Encryption.&quot;)\n        End If\n\n        edElement.EncryptionMethod = New EncryptionMethod(encryptionMethod)\n\n        &#39; Add the encrypted element data to the \n        &#39; EncryptedData object.\n        edElement.CipherData.CipherValue = encryptedElement\n\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        &#39; Replace the element from the original XmlDocument\n        &#39; object with the EncryptedData element.\n        &#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;&#39;\n        EncryptedXml.ReplaceElement(elementEncrypt, edElement, False)\n\n    End Sub &#39;Encrypt\n\n\n    Sub Decrypt(ByVal Doc As XmlDocument, ByVal Alg As SymmetricAlgorithm)\n        &#39; Check the arguments.  \n        If Doc Is Nothing Then\n            Throw New ArgumentNullException(&quot;Doc&quot;)\n        End If\n        If Alg Is Nothing Then\n            Throw New ArgumentNullException(&quot;Alg&quot;)\n        End If\n        &#39; Find the EncryptedData element in the XmlDocument.\n        Dim encryptedElement As XmlElement = Doc.GetElementsByTagName(&quot;EncryptedData&quot;)(0)\n\n        &#39; If the EncryptedData element was not found, throw an exception.\n        If encryptedElement Is Nothing Then\n            Throw New XmlException(&quot;The EncryptedData element was not found.&quot;)\n        End If\n\n        &#39; Create an EncryptedData object and populate it.\n        Dim edElement As New EncryptedData()\n        edElement.LoadXml(encryptedElement)\n\n        &#39; Create a new EncryptedXml object.\n        Dim exml As New EncryptedXml()\n\n        &#39; Decrypt the element using the symmetric key.\n        Dim rgbOutput As Byte() = exml.DecryptData(edElement, Alg)\n\n        &#39; Replace the encryptedData element with the plaintext XML element.\n        exml.ReplaceData(encryptedElement, rgbOutput)\n\n    End Sub\nEnd Module\n</code></pre><pre><code class=\"lang-cs\" name=\"Cryptography.XML.XMLEncMinimalDecryptData#1\">using System;\nusing System.Xml;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n\n        // Create an XmlDocument object.\n        XmlDocument xmlDoc = new XmlDocument();\n\n        // Load an XML file into the XmlDocument object.\n        try\n        {\n            xmlDoc.PreserveWhitespace = true;\n            xmlDoc.Load(&quot;test.xml&quot;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.Message);\n            return;\n        }\n\n        // Create a new TripleDES key. \n        TripleDESCryptoServiceProvider tDESkey = new TripleDESCryptoServiceProvider();\n\n\n        try\n        {\n            // Encrypt the &quot;creditcard&quot; element.\n            Encrypt(xmlDoc, &quot;creditcard&quot;, tDESkey);\n\n            // Display the encrypted XML to the console.\n            Console.WriteLine(&quot;Encrypted XML:&quot;);\n            Console.WriteLine();\n            Console.WriteLine(xmlDoc.OuterXml);\n\n            // Decrypt the &quot;creditcard&quot; element.\n            Decrypt(xmlDoc, tDESkey);\n\n            // Display the encrypted XML to the console.\n            Console.WriteLine();\n            Console.WriteLine(&quot;Decrypted XML:&quot;);\n            Console.WriteLine();\n            Console.WriteLine(xmlDoc.OuterXml);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.Message);\n        }\n        finally\n        {\n            // Clear the TripleDES key.\n            tDESkey.Clear();\n        }\n\n    }\n\n    public static void Encrypt(XmlDocument Doc, string ElementToEncrypt, SymmetricAlgorithm Alg)\n    {\n        // Check the arguments.  \n        if (Doc == null)\n            throw new ArgumentNullException(&quot;Doc&quot;);\n        if (ElementToEncrypt == null)\n            throw new ArgumentNullException(&quot;ElementToEncrypt&quot;);\n        if (Alg == null)\n            throw new ArgumentNullException(&quot;Alg&quot;);\n\n        ////////////////////////////////////////////////\n        // Find the specified element in the XmlDocument\n        // object and create a new XmlElemnt object.\n        ////////////////////////////////////////////////\n\n        XmlElement elementToEncrypt = Doc.GetElementsByTagName(ElementToEncrypt)[0] as XmlElement;\n\n        // Throw an XmlException if the element was not found.\n        if (elementToEncrypt == null)\n        {\n            throw new XmlException(&quot;The specified element was not found&quot;);\n\n        }\n\n        //////////////////////////////////////////////////\n        // Create a new instance of the EncryptedXml class \n        // and use it to encrypt the XmlElement with the \n        // symmetric key.\n        //////////////////////////////////////////////////\n\n        EncryptedXml eXml = new EncryptedXml();\n\n        byte[] encryptedElement = eXml.EncryptData(elementToEncrypt, Alg, false);\n\n        ////////////////////////////////////////////////\n        // Construct an EncryptedData object and populate\n        // it with the desired encryption information.\n        ////////////////////////////////////////////////\n\n\n        EncryptedData edElement = new EncryptedData();\n        edElement.Type = EncryptedXml.XmlEncElementUrl;\n\n        // Create an EncryptionMethod element so that the \n        // receiver knows which algorithm to use for decryption.\n        // Determine what kind of algorithm is being used and\n        // supply the appropriate URL to the EncryptionMethod element.\n\n        string encryptionMethod = null;\n\n        if (Alg is TripleDES)\n        {\n            encryptionMethod = EncryptedXml.XmlEncTripleDESUrl;\n        }\n        else if (Alg is DES)\n        {\n            encryptionMethod = EncryptedXml.XmlEncDESUrl;\n        }\n        else if (Alg is Rijndael)\n        {\n            switch (Alg.KeySize)\n            {\n                case 128:\n                    encryptionMethod = EncryptedXml.XmlEncAES128Url;\n                    break;\n                case 192:\n                    encryptionMethod = EncryptedXml.XmlEncAES192Url;\n                    break;\n                case 256:\n                    encryptionMethod = EncryptedXml.XmlEncAES256Url;\n                    break;\n            }\n        }\n        else\n        {\n            // Throw an exception if the transform is not in the previous categories\n            throw new CryptographicException(&quot;The specified algorithm is not supported for XML Encryption.&quot;);\n        }\n\n        edElement.EncryptionMethod = new EncryptionMethod(encryptionMethod);\n\n        // Add the encrypted element data to the \n        // EncryptedData object.\n        edElement.CipherData.CipherValue = encryptedElement;\n\n        ////////////////////////////////////////////////////\n        // Replace the element from the original XmlDocument\n        // object with the EncryptedData element.\n        ////////////////////////////////////////////////////\n\n        EncryptedXml.ReplaceElement(elementToEncrypt, edElement, false);\n\n    }\n\n    public static void Decrypt(XmlDocument Doc, SymmetricAlgorithm Alg)\n    {\n        // Check the arguments.  \n        if (Doc == null)\n            throw new ArgumentNullException(&quot;Doc&quot;);\n        if (Alg == null)\n            throw new ArgumentNullException(&quot;Alg&quot;);\n\n        // Find the EncryptedData element in the XmlDocument.\n        XmlElement encryptedElement = Doc.GetElementsByTagName(&quot;EncryptedData&quot;)[0] as XmlElement;\n\n        // If the EncryptedData element was not found, throw an exception.\n        if (encryptedElement == null)\n        {\n            throw new XmlException(&quot;The EncryptedData element was not found.&quot;);\n        }\n\n        // Create an EncryptedData object and populate it.\n        EncryptedData edElement = new EncryptedData();\n        edElement.LoadXml(encryptedElement);\n\n        // Create a new EncryptedXml object.\n        EncryptedXml exml = new EncryptedXml();\n\n        // Decrypt the element using the symmetric key.\n        byte[] rgbOutput = exml.DecryptData(edElement, Alg);\n\n        // Replace the encryptedData element with the plaintext XML element.\n        exml.ReplaceData(encryptedElement, rgbOutput);\n\n    }\n\n\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The <code>&lt;EncryptionMethod&gt;</code> tag uses a Uniform Resource Identifier (URI) to identify the encryption algorithm that must be used to decrypt XML data.  The EncryptionMethod class encapsulates the <code>&lt;EncryptionMethod&gt;</code> tag defined by the World Wide Web Consortium XML Encryption specification located at <a href=\"http://www.w3.org/TR/xmlenc-core/\" data-linktype=\"external\">http://www.w3.org/TR/xmlenc-core/</a>.  </p>\n<p> Use the EncryptionMethod class to identify the encryption algorithm associated with the <a class=\"xref\" href=\"system.security.cryptography.xml.encrypteddata\" data-linktype=\"relative-path\">EncryptedData</a> element or the <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedkey\" data-linktype=\"relative-path\">EncryptedKey</a> element.  </p>\n<p> Use one of the URI identifiers defined by the World Wide Web Consortium XML Encryption specification located at <a href=\"http://www.w3.org/TR/xmlenc-core/\" data-linktype=\"external\">http://www.w3.org/TR/xmlenc-core/</a>.  All URI identifiers are accessible as static fields of the <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedxml\" data-linktype=\"relative-path\">EncryptedXml</a> class.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_EncryptionMethod__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">EncryptionMethod()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.encryptionmethod\" data-linktype=\"relative-path\">EncryptionMethod</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public EncryptionMethod ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.encryptionmethod\" data-linktype=\"relative-path\">EncryptionMethod</a> class without specifying the Uniform Resource Identifier (URI) of an encryption algorithm.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_EncryptionMethod__ctor_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">EncryptionMethod(String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.encryptionmethod\" data-linktype=\"relative-path\">EncryptionMethod</a> class specifying an algorithm Uniform Resource Identifier (URI).</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public EncryptionMethod (string algorithm);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>algorithm</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The Uniform Resource Identifier (URI) that describes the algorithm represented by an instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.encryptionmethod\" data-linktype=\"relative-path\">EncryptionMethod</a> class.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.encryptionmethod\" data-linktype=\"relative-path\">EncryptionMethod</a> class using the URI of an encryption algorithm.  </p>\n<p> Use one of the URI identifiers defined by the World Wide Web Consortium XML Encryption specification located at <a href=\"http://www.w3.org/TR/xmlenc-core/\" data-linktype=\"external\">http://www.w3.org/TR/xmlenc-core/</a>.  All URI identifiers are accessible as static fields of the <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedxml\" data-linktype=\"relative-path\">EncryptedXml</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_EncryptionMethod_KeyAlgorithm\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">KeyAlgorithm</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a Uniform Resource Identifier (URI) that describes the algorithm to use for XML encryption.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string KeyAlgorithm { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A Uniform Resource Identifier (URI) that describes the algorithm to use for XML encryption.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The KeyAlgorithm property describes the Uniform Resource Identifier (URI) of the encryption algorithm used to encrypt data associated with either the <a class=\"xref\" href=\"system.security.cryptography.xml.encrypteddata\" data-linktype=\"relative-path\">EncryptedData</a> element or the <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedkey\" data-linktype=\"relative-path\">EncryptedKey</a> element.  </p>\n<p> Use one of the URI identifiers defined by the World Wide Web Consortium XML Encryption specification located at <a href=\"http://www.w3.org/TR/xmlenc-core/\" data-linktype=\"external\">http://www.w3.org/TR/xmlenc-core/</a>.  All URI identifiers are accessible as static fields of the <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedxml\" data-linktype=\"relative-path\">EncryptedXml</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_EncryptionMethod_KeySize\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">KeySize</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the algorithm key size used for XML encryption.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int KeySize { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The algorithm key size, in bits, used for XML encryption.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The KeySize property was set to a value that was less than 0.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The KeySize property describes the key size of the encryption algorithm used to encrypt data associated with either the <a class=\"xref\" href=\"system.security.cryptography.xml.encrypteddata\" data-linktype=\"relative-path\">EncryptedData</a> element or the <a class=\"xref\" href=\"system.security.cryptography.xml.encryptedkey\" data-linktype=\"relative-path\">EncryptedKey</a> element.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_EncryptionMethod_GetXml\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetXml()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns an <a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a> object that encapsulates an instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.encryptionmethod\" data-linktype=\"relative-path\">EncryptionMethod</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Xml.XmlElement GetXml ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a> object that encapsulates an instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.encryptionmethod\" data-linktype=\"relative-path\">EncryptionMethod</a> class.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The GetXml method returns a representation of the <code>&lt;EncryptionMethod&gt;</code> element.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_EncryptionMethod_LoadXml_System_Xml_XmlElement_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LoadXml(XmlElement)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Parses the specified <a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a> object and configures the internal state of the <a class=\"xref\" href=\"system.security.cryptography.xml.encryptionmethod\" data-linktype=\"relative-path\">EncryptionMethod</a> object to match.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void LoadXml (System.Xml.XmlElement value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a> object to parse.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>value</code> parameter is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The key size expressed in the <code>value</code> parameter was less than 0.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The LoadXml method configures the <a class=\"xref\" href=\"system.security.cryptography.xml.encryptionmethod\" data-linktype=\"relative-path\">EncryptionMethod</a> object to match the state of an <a class=\"xref\" href=\"system.xml.xmlelement\" data-linktype=\"relative-path\">XmlElement</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.Xml.EncryptionMethod.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.EncryptionMethod\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.EncryptionMethod..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.EncryptionMethod.GetXml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.EncryptionMethod.KeyAlgorithm\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.EncryptionMethod.KeySize\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.EncryptionMethod.LoadXml\">\r\n<meta name=\"APILocation\" content=\"System.Security.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"31e153d3-a273-ae21-a60d-4b36875a1fb4\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Encapsulates the encryption algorithm used for XML encryption.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.security.cryptography.xml/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.Xml.EncryptionMethod\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.Xml.EncryptionMethod.yml","open_to_public_contributors":false,"api_name":["System.Security.Cryptography.Xml.EncryptionMethod","System.Security.Cryptography.Xml.EncryptionMethod..ctor","System.Security.Cryptography.Xml.EncryptionMethod.GetXml","System.Security.Cryptography.Xml.EncryptionMethod.KeyAlgorithm","System.Security.Cryptography.Xml.EncryptionMethod.KeySize","System.Security.Cryptography.Xml.EncryptionMethod.LoadXml"],"api_location":["System.Security.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.Xml.EncryptionMethod","System::Security::Cryptography::Xml::EncryptionMethod","System.Security.Cryptography.Xml.EncryptionMethod.#ctor","System::Security::Cryptography::Xml::EncryptionMethod::#ctor","System.Security.Cryptography.Xml.EncryptionMethod.GetXml","System::Security::Cryptography::Xml::EncryptionMethod::GetXml","System.Security.Cryptography.Xml.EncryptionMethod.KeyAlgorithm","System::Security::Cryptography::Xml::EncryptionMethod::KeyAlgorithm","System.Security.Cryptography.Xml.EncryptionMethod.KeySize","System::Security::Cryptography::Xml::EncryptionMethod::KeySize","System.Security.Cryptography.Xml.EncryptionMethod.LoadXml","System::Security::Cryptography::Xml::EncryptionMethod::LoadXml"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"31e153d3-a273-ae21-a60d-4b36875a1fb4","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Security.Cryptography.Xml/EncryptionMethod.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"EncryptionMethod class | Microsoft Docs","_op_ogTitle":"EncryptionMethod class","description":"Encapsulates the encryption algorithm used for XML encryption.\n","toc_asset_id":"api/_splitted/System.Security.Cryptography.Xml/toc.json","toc_rel":"_splitted/System.Security.Cryptography.Xml/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.Xml.EncryptionMethod","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.xml.encryptionmethod","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.xml.encryptionmethod","fileRelativePath":"api/System.Security.Cryptography.Xml.EncryptionMethod.html"},"themesRelativePathToOutputRoot":"_themes/"}