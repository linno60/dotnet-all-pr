{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">UTF32Encoding</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents a UTF-32 encoding of Unicode characters.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public sealed class UTF32Encoding : System.Text.Encoding</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a></span></div><span class=\"lang-csharp\">UTF32Encoding</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_ASCII\" data-linktype=\"relative-path\">ASCII</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_BigEndianUnicode\" data-linktype=\"relative-path\">BigEndianUnicode</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_BodyName\" data-linktype=\"relative-path\">BodyName</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_Clone\" data-linktype=\"relative-path\">Clone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_CodePage\" data-linktype=\"relative-path\">CodePage</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_Convert_System_Text_Encoding_System_Text_Encoding_System_Byte___\" data-linktype=\"relative-path\">Convert(Encoding, Encoding, Byte[])</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_Convert_System_Text_Encoding_System_Text_Encoding_System_Byte___System_Int32_System_Int32_\" data-linktype=\"relative-path\">Convert(Encoding, Encoding, Byte[], Int32, Int32)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_DecoderFallback\" data-linktype=\"relative-path\">DecoderFallback</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_Default\" data-linktype=\"relative-path\">Default</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_EncoderFallback\" data-linktype=\"relative-path\">EncoderFallback</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_EncodingName\" data-linktype=\"relative-path\">EncodingName</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetByteCount_System_Char___\" data-linktype=\"relative-path\">GetByteCount(Char[])</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_System_Char___\" data-linktype=\"relative-path\">GetBytes(Char[])</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_System_Char___System_Int32_System_Int32_\" data-linktype=\"relative-path\">GetBytes(Char[], Int32, Int32)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetBytes_System_String_\" data-linktype=\"relative-path\">GetBytes(String)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetCharCount_System_Byte___\" data-linktype=\"relative-path\">GetCharCount(Byte[])</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_System_Byte___\" data-linktype=\"relative-path\">GetChars(Byte[])</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetChars_System_Byte___System_Int32_System_Int32_\" data-linktype=\"relative-path\">GetChars(Byte[], Int32, Int32)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoding_System_Int32_\" data-linktype=\"relative-path\">GetEncoding(Int32)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoding_System_Int32_System_Text_EncoderFallback_System_Text_DecoderFallback_\" data-linktype=\"relative-path\">GetEncoding(Int32, EncoderFallback, DecoderFallback)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoding_System_String_\" data-linktype=\"relative-path\">GetEncoding(String)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncoding_System_String_System_Text_EncoderFallback_System_Text_DecoderFallback_\" data-linktype=\"relative-path\">GetEncoding(String, EncoderFallback, DecoderFallback)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetEncodings\" data-linktype=\"relative-path\">GetEncodings()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetString_System_Byte__System_Int32_\" data-linktype=\"relative-path\">GetString(Byte*, Int32)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_GetString_System_Byte___\" data-linktype=\"relative-path\">GetString(Byte[])</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_HeaderName\" data-linktype=\"relative-path\">HeaderName</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_IsAlwaysNormalized\" data-linktype=\"relative-path\">IsAlwaysNormalized()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_IsAlwaysNormalized_System_Text_NormalizationForm_\" data-linktype=\"relative-path\">IsAlwaysNormalized(NormalizationForm)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_IsBrowserDisplay\" data-linktype=\"relative-path\">IsBrowserDisplay</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_IsBrowserSave\" data-linktype=\"relative-path\">IsBrowserSave</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_IsMailNewsDisplay\" data-linktype=\"relative-path\">IsMailNewsDisplay</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_IsMailNewsSave\" data-linktype=\"relative-path\">IsMailNewsSave</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_IsReadOnly\" data-linktype=\"relative-path\">IsReadOnly</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_IsSingleByte\" data-linktype=\"relative-path\">IsSingleByte</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_RegisterProvider_System_Text_EncodingProvider_\" data-linktype=\"relative-path\">RegisterProvider(EncodingProvider)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_Unicode\" data-linktype=\"relative-path\">Unicode</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_UTF32\" data-linktype=\"relative-path\">UTF32</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_UTF7\" data-linktype=\"relative-path\">UTF7</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_UTF8\" data-linktype=\"relative-path\">UTF8</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_WebName\" data-linktype=\"relative-path\">WebName</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_WindowsCodePage\" data-linktype=\"relative-path\">WindowsCodePage</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example demonstrates the behavior of UTF32Encoding objects with and without error detection enabled. It creates a byte array whose last four bytes represent an invalid surrogate pair; the high surrogate U+D8FF is followed by an U+01FF, which is outside the range of low surrogates (0xDC00 through 0xDFFF). Without error detection, the UTF32 decoder uses replacement fallback to replace the invalid surrogate pair with REPLACEMENT CHARACTER (U+FFFD).  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.UTF32Encoding.ErrorDetection#1\">using System;\nusing System.Text;\n\npublic class Example\n{\n   public static void Main()\n   {\n     // Create a UTF32Encoding object with error detection enabled.\n      var encExc = new UTF32Encoding(! BitConverter.IsLittleEndian, true, true);\n      // Create a UTF32Encoding object with error detection disabled.\n      var encRepl = new UTF32Encoding(! BitConverter.IsLittleEndian, true, false);\n\n      // Create a byte arrays from a string, and add an invalid surrogate pair, as follows.\n      //    Latin Small Letter Z (U+007A)\n      //    Latin Small Letter A (U+0061)\n      //    Combining Breve (U+0306)\n      //    Latin Small Letter AE With Acute (U+01FD)\n      //    Greek Small Letter Beta (U+03B2)\n      //    a high-surrogate value (U+D8FF)\n      //    an invalid low surrogate (U+01FF)\n      String s = &quot;za\\u0306\\u01FD\\u03B2&quot;;\n\n      // Encode the string using little-endian byte order.\n      int index = encExc.GetByteCount(s);\n      Byte[] bytes = new Byte[index + 4];\n      encExc.GetBytes(s, 0, s.Length, bytes, 0);\n      bytes[index] = 0xFF;\n      bytes[index + 1] = 0xD8;\n      bytes[index + 2] = 0xFF;\n      bytes[index + 3] = 0x01;\n\n      // Decode the byte array with error detection.\n      Console.WriteLine(&quot;Decoding with error detection:&quot;);\n      PrintDecodedString(bytes, encExc);\n\n      // Decode the byte array without error detection.\n      Console.WriteLine(&quot;Decoding without error detection:&quot;);\n      PrintDecodedString(bytes, encRepl);\n   }\n\n   // Decode the bytes and display the string.\n   public static void PrintDecodedString(Byte[] bytes, Encoding enc)\n   {\n      try {\n         Console.WriteLine(&quot;   Decoded string: {0}&quot;, enc.GetString(bytes, 0, bytes.Length));\n      }\n      catch (DecoderFallbackException e) {\n         Console.WriteLine(e.ToString());\n      }\n      Console.WriteLine();\n   }\n}\n// The example displays the following output:\n//    Decoding with error detection:\n//    System.Text.DecoderFallbackException: Unable to translate bytes [FF][D8][FF][01] at index\n//    20 from specified code page to Unicode.\n//       at System.Text.DecoderExceptionFallbackBuffer.Throw(Byte[] bytesUnknown, Int32 index)\n//       at System.Text.DecoderExceptionFallbackBuffer.Fallback(Byte[] bytesUnknown, Int32 index\n//    )\n//       at System.Text.DecoderFallbackBuffer.InternalFallback(Byte[] bytes, Byte* pBytes)\n//       at System.Text.UTF32Encoding.GetCharCount(Byte* bytes, Int32 count, DecoderNLS baseDeco\n//    der)\n//       at System.Text.UTF32Encoding.GetString(Byte[] bytes, Int32 index, Int32 count)\n//       at Example.PrintDecodedString(Byte[] bytes, Encoding enc)\n//\n//    Decoding without error detection:\n//       Decoded string: zăǽβ�\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Text.UTF32Encoding.ErrorDetection#1\">using namespace System;\nusing namespace System::Text;\nvoid PrintDecodedString( array&lt;Byte&gt;^bytes, Encoding^ enc );\nint main()\n{\n   \n   // Create an instance of UTF32Encoding using little-endian byte order.\n   // This will be used for encoding.\n   UTF32Encoding^ u32LE = gcnew UTF32Encoding( false,true );\n   \n   // Create two instances of UTF32Encoding using big-endian byte order: one with error detection and one without.\n   // These will be used for decoding.\n   UTF32Encoding^ u32withED = gcnew UTF32Encoding( true,true,true );\n   UTF32Encoding^ u32noED = gcnew UTF32Encoding( true,true,false );\n   \n   // Create byte arrays from the same string containing the following characters:\n   //    Latin Small Letter Z (U+007A)\n   //    Latin Small Letter A (U+0061)\n   //    Combining Breve (U+0306)\n   //    Latin Small Letter AE With Acute (U+01FD)\n   //    Greek Small Letter Beta (U+03B2)\n   String^ myStr = L&quot;za\\u0306\\u01FD\\u03B2\\xD8FF\\xDCFF&quot;;\n   \n   // Encode the string using little-endian byte order.\n   array&lt;Byte&gt;^myBytes = gcnew array&lt;Byte&gt;(u32LE-&gt;GetByteCount( myStr ));\n   u32LE-&gt;GetBytes( myStr, 0, myStr-&gt;Length, myBytes, 0 );\n   \n   // Decode the byte array with error detection.\n   Console::WriteLine( &quot;Decoding with error detection:&quot; );\n   PrintDecodedString( myBytes, u32withED );\n   \n   // Decode the byte array without error detection.\n   Console::WriteLine( &quot;Decoding without error detection:&quot; );\n   PrintDecodedString( myBytes, u32noED );\n}\n\n\n// Decode the bytes and display the string.\nvoid PrintDecodedString( array&lt;Byte&gt;^bytes, Encoding^ enc )\n{\n   try\n   {\n      Console::WriteLine( &quot;   Decoded string: {0}&quot;, enc-&gt;GetString( bytes, 0, bytes-&gt;Length ) );\n   }\n   catch ( System::ArgumentException^ e ) \n   {\n      Console::WriteLine( e );\n   }\n\n   Console::WriteLine();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.UTF32Encoding.ErrorDetection#1\">Imports System.Text\n\nPublic Module Example\n   Public Sub Main()\n      &#39; Create a UTF32Encoding object with error detection enabled.\n      Dim encExc As New UTF32Encoding(Not BitConverter.IsLittleEndian, True, True)\n      &#39; Create a UTF32Encoding object with error detection disabled.\n      Dim encRepl As New UTF32Encoding(Not BitConverter.IsLittleEndian, True, False)\n\n      &#39; Create a byte arrays from a string, and add an invalid surrogate pair, as follows.\n      &#39;    Latin Small Letter Z (U+007A)\n      &#39;    Latin Small Letter A (U+0061)\n      &#39;    Combining Breve (U+0306)\n      &#39;    Latin Small Letter AE With Acute (U+01FD)\n      &#39;    Greek Small Letter Beta (U+03B2)\n      &#39;    a high-surrogate value (U+D8FF)\n      &#39;    an invalid low surrogate (U+01FF)\n      Dim s As String = &quot;za&quot; &amp; ChrW(&amp;H0306) &amp; ChrW(&amp;H01FD) &amp; ChrW(&amp;H03B2)\n\n      &#39; Encode the string using little-endian byte order.\n      Dim index As Integer = encExc.GetBytecount(s)\n      Dim bytes(index + 3) As Byte\n      encExc.GetBytes(s, 0, s.Length, bytes, 0)\n      bytes(index) = &amp;hFF\n      bytes(index + 1) = &amp;hD8\n      bytes(index + 2) = &amp;hFF\n      bytes(index + 3) = &amp;h01\n\n      &#39; Decode the byte array with error detection.\n      Console.WriteLine(&quot;Decoding with error detection:&quot;)\n      PrintDecodedString(bytes, encExc)\n\n      &#39; Decode the byte array without error detection.\n      Console.WriteLine(&quot;Decoding without error detection:&quot;)\n      PrintDecodedString(bytes, encRepl)\n   End Sub\n\n   &#39; Decode the bytes and display the string.\n   Public Sub PrintDecodedString(bytes() As Byte, enc As Encoding)\n      Try\n         Console.WriteLine(&quot;   Decoded string: {0}&quot;, enc.GetString(bytes, 0, bytes.Length))\n      Catch e As DecoderFallbackException\n         Console.WriteLine(e.ToString())\n      End Try\n      Console.WriteLine()\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Decoding with error detection:\n&#39;    System.Text.DecoderFallbackException: Unable to translate bytes [FF][D8][FF][01] at index\n&#39;    20 from specified code page to Unicode.\n&#39;       at System.Text.DecoderExceptionFallbackBuffer.Throw(Byte[] bytesUnknown, Int32 index)\n&#39;       at System.Text.DecoderExceptionFallbackBuffer.Fallback(Byte[] bytesUnknown, Int32 index\n&#39;    )\n&#39;       at System.Text.DecoderFallbackBuffer.InternalFallback(Byte[] bytes, Byte* pBytes)\n&#39;       at System.Text.UTF32Encoding.GetCharCount(Byte* bytes, Int32 count, DecoderNLS baseDeco\n&#39;    der)\n&#39;       at System.Text.UTF32Encoding.GetString(Byte[] bytes, Int32 index, Int32 count)\n&#39;       at Example.PrintDecodedString(Byte[] bytes, Encoding enc)\n&#39;\n&#39;    Decoding without error detection:\n&#39;       Decoded string: zăǽβ�\n</code></pre><p> The following example encodes a string of Unicode characters into a byte array by using a UTF32Encoding object. The byte array is then decoded into a string to demonstrate that there is no loss of data.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Text.UTF32Encoding.Class#1\">Imports System.Text\n\nClass Example\n    Public Shared Sub Main()\n        &#39; The encoding.\n        Dim enc As New UTF32Encoding()\n        \n        &#39; Create a string.\n        Dim s As String =\n            &quot;This string contains two characters &quot; &amp;\n            &quot;with codes outside the ASCII code range: &quot; &amp;\n            &quot;Pi (&quot; &amp; ChrW(&amp;h03A0) &amp; &quot;) and Sigma (&quot; &amp; ChrW(&amp;h03A3) &amp; &quot;).&quot;\n        Console.WriteLine(&quot;Original string:&quot;)\n        Console.WriteLine(&quot;   {0}&quot;, s)\n        \n        &#39; Encode the string.\n        Dim encodedBytes As Byte() = enc.GetBytes(s)\n        Console.WriteLine()\n        Console.WriteLine(&quot;Encoded bytes:&quot;)\n        For ctr As Integer = 0 To encodedBytes.Length - 1\n            Console.Write(&quot;[{0:X2}]{1}&quot;, encodedBytes(ctr),\n                                         If((ctr + 1) Mod 4 = 0, &quot; &quot;, &quot;&quot; ))\n            If (ctr + 1) Mod 16 = 0 Then Console.WriteLine()\n        Next\n        Console.WriteLine()\n        \n        &#39; Decode bytes back to string.\n        &#39; Notice Pi and Sigma characters are still present.\n        Dim decodedString As String = enc.GetString(encodedBytes)\n        Console.WriteLine()\n        Console.WriteLine(&quot;Decoded string:&quot;)\n        Console.WriteLine(&quot;   {0}&quot;, decodedString)\n    End Sub\nEnd Class\n&#39; The example displays the following output:\n&#39;    Original string:\n&#39;       This string contains two characters with codes outside the ASCII code range:\n&#39;    Pi (π) and Sigma (Σ).\n&#39;\n&#39;    Encoded bytes:\n&#39;    [54][00][00][00] [68][00][00][00] [69][00][00][00] [73][00][00][00]\n&#39;    [20][00][00][00] [73][00][00][00] [74][00][00][00] [72][00][00][00]\n&#39;    [69][00][00][00] [6E][00][00][00] [67][00][00][00] [20][00][00][00]\n&#39;    [63][00][00][00] [6F][00][00][00] [6E][00][00][00] [74][00][00][00]\n&#39;    [61][00][00][00] [69][00][00][00] [6E][00][00][00] [73][00][00][00]\n&#39;    [20][00][00][00] [74][00][00][00] [77][00][00][00] [6F][00][00][00]\n&#39;    [20][00][00][00] [63][00][00][00] [68][00][00][00] [61][00][00][00]\n&#39;    [72][00][00][00] [61][00][00][00] [63][00][00][00] [74][00][00][00]\n&#39;    [65][00][00][00] [72][00][00][00] [73][00][00][00] [20][00][00][00]\n&#39;    [77][00][00][00] [69][00][00][00] [74][00][00][00] [68][00][00][00]\n&#39;    [20][00][00][00] [63][00][00][00] [6F][00][00][00] [64][00][00][00]\n&#39;    [65][00][00][00] [73][00][00][00] [20][00][00][00] [6F][00][00][00]\n&#39;    [75][00][00][00] [74][00][00][00] [73][00][00][00] [69][00][00][00]\n&#39;    [64][00][00][00] [65][00][00][00] [20][00][00][00] [74][00][00][00]\n&#39;    [68][00][00][00] [65][00][00][00] [20][00][00][00] [41][00][00][00]\n&#39;    [53][00][00][00] [43][00][00][00] [49][00][00][00] [49][00][00][00]\n&#39;    [20][00][00][00] [63][00][00][00] [6F][00][00][00] [64][00][00][00]\n&#39;    [65][00][00][00] [20][00][00][00] [72][00][00][00] [61][00][00][00]\n&#39;    [6E][00][00][00] [67][00][00][00] [65][00][00][00] [3A][00][00][00]\n&#39;    [20][00][00][00] [50][00][00][00] [69][00][00][00] [20][00][00][00]\n&#39;    [28][00][00][00] [A0][03][00][00] [29][00][00][00] [20][00][00][00]\n&#39;    [61][00][00][00] [6E][00][00][00] [64][00][00][00] [20][00][00][00]\n&#39;    [53][00][00][00] [69][00][00][00] [67][00][00][00] [6D][00][00][00]\n&#39;    [61][00][00][00] [20][00][00][00] [28][00][00][00] [A3][03][00][00]\n&#39;    [29][00][00][00] [2E][00][00][00]\n&#39;\n&#39;    Decoded string:\n&#39;       This string contains two characters with codes outside the ASCII code range:\n&#39;    Pi (π) and Sigma (Σ).\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Text.UTF32Encoding.Class#1\">using System;\nusing System.Text;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // The encoding.\n        var enc = new UTF32Encoding();\n        \n        // Create a string.\n        String s = &quot;This string contains two characters &quot; +\n                   &quot;with codes outside the ASCII code range: &quot; +\n                   &quot;Pi (\\u03A0) and Sigma (\\u03A3).&quot;;\n        Console.WriteLine(&quot;Original string:&quot;);\n        Console.WriteLine(&quot;   {0}&quot;, s);\n        \n        // Encode the string.\n        Byte[] encodedBytes = enc.GetBytes(s);\n        Console.WriteLine();\n        Console.WriteLine(&quot;Encoded bytes:&quot;);\n        for (int ctr = 0; ctr &lt; encodedBytes.Length; ctr++) {\n            Console.Write(&quot;[{0:X2}]{1}&quot;, encodedBytes[ctr],\n                                         (ctr + 1) % 4 == 0 ? &quot; &quot; : &quot;&quot; );\n            if ((ctr + 1) % 16 == 0) Console.WriteLine();\n        }\n        Console.WriteLine();\n        \n        // Decode bytes back to string.\n        // Notice Pi and Sigma characters are still present.\n        String decodedString = enc.GetString(encodedBytes);\n        Console.WriteLine();\n        Console.WriteLine(&quot;Decoded string:&quot;);\n        Console.WriteLine(&quot;   {0}&quot;, decodedString);\n    }\n}\n// The example displays the following output:\n//    Original string:\n//       This string contains two characters with codes outside the ASCII code range:\n//    Pi (π) and Sigma (Σ).\n//\n//    Encoded bytes:\n//    [54][00][00][00] [68][00][00][00] [69][00][00][00] [73][00][00][00]\n//    [20][00][00][00] [73][00][00][00] [74][00][00][00] [72][00][00][00]\n//    [69][00][00][00] [6E][00][00][00] [67][00][00][00] [20][00][00][00]\n//    [63][00][00][00] [6F][00][00][00] [6E][00][00][00] [74][00][00][00]\n//    [61][00][00][00] [69][00][00][00] [6E][00][00][00] [73][00][00][00]\n//    [20][00][00][00] [74][00][00][00] [77][00][00][00] [6F][00][00][00]\n//    [20][00][00][00] [63][00][00][00] [68][00][00][00] [61][00][00][00]\n//    [72][00][00][00] [61][00][00][00] [63][00][00][00] [74][00][00][00]\n//    [65][00][00][00] [72][00][00][00] [73][00][00][00] [20][00][00][00]\n//    [77][00][00][00] [69][00][00][00] [74][00][00][00] [68][00][00][00]\n//    [20][00][00][00] [63][00][00][00] [6F][00][00][00] [64][00][00][00]\n//    [65][00][00][00] [73][00][00][00] [20][00][00][00] [6F][00][00][00]\n//    [75][00][00][00] [74][00][00][00] [73][00][00][00] [69][00][00][00]\n//    [64][00][00][00] [65][00][00][00] [20][00][00][00] [74][00][00][00]\n//    [68][00][00][00] [65][00][00][00] [20][00][00][00] [41][00][00][00]\n//    [53][00][00][00] [43][00][00][00] [49][00][00][00] [49][00][00][00]\n//    [20][00][00][00] [63][00][00][00] [6F][00][00][00] [64][00][00][00]\n//    [65][00][00][00] [20][00][00][00] [72][00][00][00] [61][00][00][00]\n//    [6E][00][00][00] [67][00][00][00] [65][00][00][00] [3A][00][00][00]\n//    [20][00][00][00] [50][00][00][00] [69][00][00][00] [20][00][00][00]\n//    [28][00][00][00] [A0][03][00][00] [29][00][00][00] [20][00][00][00]\n//    [61][00][00][00] [6E][00][00][00] [64][00][00][00] [20][00][00][00]\n//    [53][00][00][00] [69][00][00][00] [67][00][00][00] [6D][00][00][00]\n//    [61][00][00][00] [20][00][00][00] [28][00][00][00] [A3][03][00][00]\n//    [29][00][00][00] [2E][00][00][00]\n//\n//    Decoded string:\n//       This string contains two characters with codes outside the ASCII code range:\n//    Pi (π) and Sigma (Σ).\n</code></pre><p> The following example uses the same string as the previous one, except that it writes the encoded bytes to a file and prefixes the byte stream with a byte order mark (BOM). It then reads the file in two different ways: as a text file by using a <a class=\"xref\" href=\"system.io.streamreader\" data-linktype=\"relative-path\">StreamReader</a> object; and as a binary file. As you would expect, in neither case is the BOM included in the newly read string.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.UTF32Encoding.Class#2\">using System;\nusing System.IO;\nusing System.Text;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Create a UTF-32 encoding that supports a BOM.\n        var enc = new UTF32Encoding();\n        \n        // A Unicode string with two characters outside an 8-bit code range.\n        String s = &quot;This Unicode string has 2 characters &quot; +\n                   &quot;outside the ASCII range: \\n&quot; +\n                   &quot;Pi (\\u03A0), and Sigma (\\u03A3).&quot;;\n        Console.WriteLine(&quot;Original string:&quot;);\n        Console.WriteLine(s);\n        Console.WriteLine();\n        \n        // Encode the string.\n        Byte[] encodedBytes = enc.GetBytes(s);\n        Console.WriteLine(&quot;The encoded string has {0} bytes.\\n&quot;,\n                          encodedBytes.Length);\n\n        // Write the bytes to a file with a BOM.\n        var fs = new FileStream(@&quot;.\\UTF32Encoding.txt&quot;, FileMode.Create);\n        Byte[] bom = enc.GetPreamble();\n        fs.Write(bom, 0, bom.Length);\n        fs.Write(encodedBytes, 0, encodedBytes.Length);\n        Console.WriteLine(&quot;Wrote {0} bytes to the file.\\n&quot;, fs.Length);\n        fs.Close();\n\n        // Open the file using StreamReader.\n        var sr = new StreamReader(@&quot;.\\UTF32Encoding.txt&quot;);\n        String newString = sr.ReadToEnd();\n        sr.Close();\n        Console.WriteLine(&quot;String read using StreamReader:&quot;);\n        Console.WriteLine(newString);\n        Console.WriteLine();\n        \n        // Open the file as a binary file and decode the bytes back to a string.\n        fs = new FileStream(@&quot;.\\Utf32Encoding.txt&quot;, FileMode.Open);\n        Byte[] bytes = new Byte[fs.Length];\n        fs.Read(bytes, 0, (int)fs.Length);\n        fs.Close();\n\n        String decodedString = enc.GetString(encodedBytes);\n        Console.WriteLine(&quot;Decoded bytes from binary file:&quot;);\n        Console.WriteLine(decodedString);\n    }\n}\n// The example displays the following output:\n//    Original string:\n//    This Unicode string has 2 characters outside the ASCII range:\n//    Pi (π), and Sigma (Σ).\n//\n//    The encoded string has 340 bytes.\n//\n//    Wrote 344 bytes to the file.\n//\n//    String read using StreamReader:\n//    This Unicode string has 2 characters outside the ASCII range:\n//    Pi (π), and Sigma (Σ).\n//\n//    Decoded bytes from binary file:\n//    This Unicode string has 2 characters outside the ASCII range:\n//    Pi (π), and Sigma (Σ).\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.UTF32Encoding.Class#2\">Imports System.IO\nImports System.Text\n\nClass Example\n    Public Shared Sub Main()\n        &#39; Create a UTF-32 encoding that supports a BOM.\n        Dim enc As New UTF32Encoding()\n        \n        &#39; A Unicode string with two characters outside an 8-bit code range.\n        Dim s As String = _\n            &quot;This Unicode string has 2 characters outside the &quot; &amp;\n            &quot;ASCII range: &quot; &amp; vbCrLf &amp;\n            &quot;Pi (&quot; &amp; ChrW(&amp;h03A0) &amp; &quot;), and Sigma (&quot; &amp; ChrW(&amp;h03A3) &amp; &quot;).&quot;\n        Console.WriteLine(&quot;Original string:&quot;)\n        Console.WriteLine(s)\n        Console.WriteLine()\n        \n        &#39; Encode the string.\n        Dim encodedBytes As Byte() = enc.GetBytes(s)\n        Console.WriteLine(&quot;The encoded string has {0} bytes.&quot;,\n                          encodedBytes.Length)\n        Console.WriteLine()\n        \n        &#39; Write the bytes to a file with a BOM.\n        Dim fs As New FileStream(&quot;.\\UTF32Encoding.txt&quot;, FileMode.Create)\n        Dim bom() As Byte = enc.GetPreamble()\n        fs.Write(bom, 0, bom.Length)\n        fs.Write(encodedBytes, 0, encodedBytes.Length)\n        Console.WriteLine(&quot;Wrote {0} bytes to the file.&quot;, fs.Length)\n        fs.Close()\n        Console.WriteLine()\n        \n        &#39; Open the file using StreamReader.\n        Dim sr As New StreamReader(&quot;.\\UTF32Encoding.txt&quot;)\n        Dim newString As String = sr.ReadToEnd()\n        sr.Close()\n        Console.WriteLine(&quot;String read using StreamReader:&quot;)\n        Console.WriteLine(newString)\n        Console.WriteLine()\n        \n        &#39; Open the file as a binary file and decode the bytes back to a string.\n        fs = new FileStream(&quot;.\\Utf32Encoding.txt&quot;, FileMode.Open)\n        Dim bytes(fs.Length - 1) As Byte\n        fs.Read(bytes, 0, fs.Length)\n        fs.Close()\n\n        Dim decodedString As String = enc.GetString(encodedBytes)\n        Console.WriteLine(&quot;Decoded bytes from binary file:&quot;)\n        Console.WriteLine(decodedString)\n    End Sub\nEnd Class\n&#39; The example displays the following output:\n&#39;    Original string:\n&#39;    This Unicode string has 2 characters outside the ASCII range:\n&#39;    Pi (π), and Sigma (Σ).\n&#39;\n&#39;    The encoded string has 344 bytes.\n&#39;\n&#39;    Wrote 348 bytes to the file.\n&#39;\n&#39;    String read using StreamReader:\n&#39;    This Unicode string has 2 characters outside the ASCII range:\n&#39;    Pi (π), and Sigma (Σ).\n&#39;\n&#39;    Decoded bytes from binary file:\n&#39;    This Unicode string has 2 characters outside the ASCII range:\n&#39;    Pi (π), and Sigma (Σ).\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Encoding is the process of transforming a set of Unicode characters into a sequence of bytes. Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.  </p>\n<p> The <a href=\"http://go.microsoft.com/fwlink/?linkid=37123\" data-linktype=\"external\">Unicode Standard</a> assigns a code point (a number) to each character in every supported script. A Unicode Transformation Format (UTF) is a way to encode that code point. The <a href=\"http://go.microsoft.com/fwlink/?linkid=37123\" data-linktype=\"external\">Unicode Standard</a> uses the following UTFs:  </p>\n<ul>\n<li><p>UTF-8, which represents each code point as a sequence of one to four bytes.  </p>\n</li>\n<li><p>UTF-16, which represents each code point as a sequence of one to two 16-bit integers.  </p>\n</li>\n<li><p>UTF-32, which represents each code point as a 32-bit integer.  </p>\n</li>\n</ul>\n<p> For more information about the UTFs and other encodings supported by <a class=\"xref\" href=\"system.text\" data-linktype=\"relative-path\">System.Text</a>, see .  </p>\n<p> The UTF32Encoding class represents a UTF-32 encoding. The encoder can use the big endian byte order (most significant byte first) or the little endian byte order (least significant byte first). For example, the Latin Capital Letter A (code point U+0041) is serialized as follows (in hexadecimal):  </p>\n<ul>\n<li><p>Big endian byte order: 00 00 00 41  </p>\n</li>\n<li><p>Little endian byte order: 41 00 00 00  </p>\n</li>\n</ul>\n<p> It is generally more efficient to store Unicode characters using the native byte order. For example, it is better to use the little endian byte order on little endian platforms, such as Intel computers. UTF32Encoding corresponds to the Windows code pages 12000 (little endian byte order) and 12001 (big endian byte order). You can determine the &quot;endianness&quot; of a particular architecture by calling the <a class=\"xref\" href=\"system.bitconverter#System_BitConverter_IsLittleEndian\" data-linktype=\"relative-path\">System.BitConverter.IsLittleEndian</a> method.  </p>\n<p> Optionally, the UTF32Encoding object provides a byte order mark (BOM), which is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process. If the preamble contains a byte order mark (BOM), it helps the decoder determine the byte order and the transformation format or UTF of a byte array.  </p>\n<p> If the UTF32Encoding instance is configured to provide a BOM, you can retrieve it by calling the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetPreamble_\" data-linktype=\"relative-path\">GetPreamble</a> method; otherwise, the method returns an empty array. Note that, even if a UTF32Encoding object is configured for BOM support, you must include the BOM at the beginning of the encoded byte stream as appropriate; the encoding methods of the UTF32Encoding class do not do this automatically.  </p>\n<p> To enable error detection and to make the class instance more secure, you should instantiate a UTF32Encoding object by calling the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding__ctor_System_Boolean_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">UTF32Encoding(Boolean, Boolean, Boolean)</a> constructor and setting its <code>throwOnInvalidBytes</code> argument to <code>true</code>. With error detection, a method that detects an invalid sequence of characters or bytes throws an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> exception. Without error detection, no exception is thrown, and the invalid sequence is generally ignored.  </p>\n<p> You can instantiate a UTF32Encoding object in a number of ways, depending on whether you want to it to provide a byte order mark (BOM), whether you want big-endian or little-endian encoding, and whether you want to enable error detection. The following table lists the UTF32Encoding constructors and the <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> properties that return a <a class=\"xref\" href=\"system.text.unicodeencoding\" data-linktype=\"relative-path\">UnicodeEncoding</a> object.  </p>\n<table>\n<thead>\n<tr>\n<th>Member</th>\n<th>Endianness</th>\n<th>BOM</th>\n<th>Error detection</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_UTF32_\" data-linktype=\"relative-path\">UTF32</a></td>\n<td>Little-endian</td>\n<td>Yes</td>\n<td>No (Replacement fallback)</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding__ctor\" data-linktype=\"relative-path\">System.Text.UTF32Encoding.UTF32Encoding()</a></td>\n<td>Little-endian</td>\n<td>Yes</td>\n<td>No (Replacement fallback)</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding__ctor_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">System.Text.UTF32Encoding.UTF32Encoding(Boolean, Boolean)</a></td>\n<td>Configurable</td>\n<td>Configurable</td>\n<td>No (Replacement fallback)</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding__ctor_System_Boolean_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">System.Text.UTF32Encoding.UTF32Encoding(Boolean, Boolean, Boolean)</a></td>\n<td>Configurable</td>\n<td>Configurable</td>\n<td>Configurable</td>\n</tr>\n</tbody>\n</table>\n<p> The <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method determines how many bytes result in encoding a set of Unicode characters, and the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method performs the actual encoding.  </p>\n<p> Likewise, the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method determines how many characters result in decoding a sequence of bytes, and the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> and <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetString_\" data-linktype=\"relative-path\">GetString</a> methods perform the actual decoding.  </p>\n<p> For an encoder or decoder that is able to save state information when encoding or decoding data that spans multiple blocks (such as string of 1 million characters that is encoded in 100,000-character segments), use the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> and <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> properties, respectively.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Text_UTF32Encoding__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UTF32Encoding__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">UTF32Encoding()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public UTF32Encoding ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor creates an instance that uses the little endian byte order, provides a Unicode byte order mark, and does not throw an exception when an invalid encoding is detected.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For security reasons, you should enable error detection by calling the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding__ctor_System_Boolean_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">UTF32Encoding(Boolean, Boolean, Boolean)</a> constructor and setting its <code>throwOnInvalidCharacters</code> argument to <code>true</code>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Text_UTF32Encoding__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UTF32Encoding__ctor_System_Boolean_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">UTF32Encoding(Boolean, Boolean)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> class. Parameters specify whether to use the big endian byte order and whether the <span class=\"xref\">stem.Text.UTF32Encoding.GetPreamble*</span> method returns a Unicode Unicode byte order mark.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public UTF32Encoding (bool bigEndian, bool byteOrderMark);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>bigEndian</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to use the big endian byte order (most significant byte first), or <code>false</code> to use the little endian byte order (least significant byte first).</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>byteOrderMark</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to specify that a Unicode byte order mark is provided; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor creates an instance that does not throw an exception when an invalid encoding is detected.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For security reasons, you should enable error detection by calling the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding__ctor_System_Boolean_System_Boolean_System_Boolean_\" data-linktype=\"relative-path\">UTF32Encoding(Boolean, Boolean, Boolean)</a> constructor and setting its <code>throwOnInvalidCharacters</code> argument to <code>true</code>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Text_UTF32Encoding__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UTF32Encoding__ctor_System_Boolean_System_Boolean_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">UTF32Encoding(Boolean, Boolean, Boolean)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> class. Parameters specify whether to use the big endian byte order, whether to provide a Unicode byte order mark, and whether to throw an exception when an invalid encoding is detected.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public UTF32Encoding (bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>bigEndian</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to use the big endian byte order (most significant byte first), or <code>false</code> to use the little endian byte order (least significant byte first).</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>byteOrderMark</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to specify that a Unicode byte order mark is provided; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>throwOnInvalidCharacters</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to specify that an exception should be thrown when an invalid encoding is detected; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If <code>throwOnInvalidCharacters</code> is <code>true</code>, a method that detects an invalid byte sequence throws <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">System.ArgumentException</a>. Otherwise, the method does not throw an exception, and the invalid sequence is ignored.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> For security reasons, you should enable error detection by calling the UTF32Encoding constructor and setting its <code>throwOnInvalidCharacters</code> argument to <code>true</code>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Text_UTF32Encoding_Equals_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UTF32Encoding_Equals_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Equals(Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether the specified <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> is equal to the current <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override bool Equals (object value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> to compare with the current object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>value</code> is an instance of <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> and is equal to the current object; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Two <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> objects are considered equal if all of the following conditions are true:  </p>\n<ul>\n<li><p>Both objects use the same byte order.  </p>\n</li>\n<li><p>Both objects provide the byte order mark, or both do not.  </p>\n</li>\n<li><p>Both objects use the same encoder fallback.  </p>\n</li>\n<li><p>Both objects use the same decoder fallback.</p>\n</li>\n</ul>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Text_UTF32Encoding_GetByteCount_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UTF32Encoding_GetByteCount_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetByteCount(String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Calculates the number of bytes produced by encoding the characters in the specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetByteCount (string s);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>s</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> containing the set of characters to encode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The number of bytes produced by encoding the specified characters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.security.securitysafecriticalattribute\" title=\"System.Security.SecuritySafeCriticalAttribute\" data-linktype=\"relative-path\">SecuritySafeCriticalAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>s</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Error detection is enabled, and <code>s</code> contains an invalid sequence of characters.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A fallback occurred (see <a href=\"../topic/character%20encoding%20in%20the%20.net%20framework\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.EncoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>To calculate the exact array size required by <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> to store the resulting bytes, you call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method. To calculate the maximum array size, you call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method. The <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method generally allocates less memory, while the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method generally executes faster.  </p>\n<p> With error detection, an invalid sequence causes this method to throw a <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Without error detection, invalid sequences are ignored, and no exception is thrown.  </p>\n<p> To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer&#39;s responsibility, and the number of bytes in the preamble is not reflected in the value returned by the GetByteCount method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Text_UTF32Encoding_GetByteCount_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UTF32Encoding_GetByteCount_System_Char__System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetByteCount(Char*, Int32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetByteCount (char* chars, int count);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>chars</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>*</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A pointer to the first character to encode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>count</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of characters to encode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The number of bytes produced by encoding the specified characters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.clscompliantattribute\" title=\"System.CLSCompliantAttribute\" data-linktype=\"relative-path\">CLSCompliantAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.security.securitycriticalattribute\" title=\"System.Security.SecurityCriticalAttribute\" data-linktype=\"relative-path\">SecurityCriticalAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>chars</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> The resulting number of bytes is greater than the maximum number that can be returned as an integer.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Error detection is enabled, and <code>chars</code> contains an invalid sequence of characters.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A fallback occurred (see <a href=\"../topic/character%20encoding%20in%20the%20.net%20framework\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.EncoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>To calculate the exact array size required by <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> to store the resulting bytes, you call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method. To calculate the maximum array size, you call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a>. The <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method generally allocates less memory, while the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method generally executes faster.  </p>\n<p> With error detection, an invalid sequence causes this method to throw an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Without error detection, invalid sequences are ignored, and no exception is thrown.  </p>\n<p> To ensure that the encoded bytes are decoded properly when they are saved as a file or a stream, you can prefix a stream of encoded bytes with a preamble. Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer&#39;s responsibility, and the number of bytes in the preamble Is not reflected in the value returned by the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Text_UTF32Encoding_GetByteCount_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UTF32Encoding_GetByteCount_System_Char___System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetByteCount(Char[], Int32, Int32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Calculates the number of bytes produced by encoding a set of characters from the specified character array.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetByteCount (char[] chars, int index, int count);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>chars</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The character array containing the set of characters to encode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>index</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The index of the first character to encode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>count</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of characters to encode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The number of bytes produced by encoding the specified characters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.security.securitysafecriticalattribute\" title=\"System.Security.SecuritySafeCriticalAttribute\" data-linktype=\"relative-path\">SecuritySafeCriticalAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>chars</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>index</code> or <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> and <code>count</code> do not denote a valid range in <code>chars</code>.  </p>\n<p> -or-  </p>\n<p> The resulting number of bytes is greater than the maximum number that can be returned as an integer.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Error detection is enabled, and <code>chars</code> contains an invalid sequence of characters.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A fallback occurred (see <a href=\"../topic/character%20encoding%20in%20the%20.net%20framework\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.EncoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>To calculate the exact array size required by <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> to store the resulting bytes, you call the GetByteCount method. To calculate the maximum array size, you call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method. The GetByteCount method generally allocates less memory, while the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method generally executes faster.  </p>\n<p> With error detection, an invalid sequence causes this method to throw a <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Without error detection, invalid sequences are ignored, and no exception is thrown.  </p>\n<p> To ensure that the encoded bytes are decoded properly when they are saved as a file or a stream, you can prefix a stream of encoded bytes with a preamble. Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer&#39;s responsibility, and the number of bytes in the preamble Is not reflected in the value returned by the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Text_UTF32Encoding_GetBytes_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UTF32Encoding_GetBytes_System_Char__System_Int32_System_Byte__System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetBytes(Char*, Int32, Byte*, Int32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>chars</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>*</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A pointer to the first character to encode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>charCount</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of characters to encode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>bytes</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>*</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A pointer to the location at which to start writing the resulting sequence of bytes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>byteCount</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The maximum number of bytes to write.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The actual number of bytes written at the location indicated by the <code>bytes</code> parameter.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.clscompliantattribute\" title=\"System.CLSCompliantAttribute\" data-linktype=\"relative-path\">CLSCompliantAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.security.securitycriticalattribute\" title=\"System.Security.SecurityCriticalAttribute\" data-linktype=\"relative-path\">SecurityCriticalAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>chars</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>bytes</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>charCount</code> or <code>byteCount</code> is less than zero.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Error detection is enabled, and <code>chars</code> contains an invalid sequence of characters.  </p>\n<p> -or-  </p>\n<p> <code>byteCount</code> is less than the resulting number of bytes.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A fallback occurred (see <a href=\"../topic/character%20encoding%20in%20the%20.net%20framework\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.EncoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>To calculate the exact array size required by <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> to store the resulting bytes, you call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method. To calculate the maximum array size, you call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method. The <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method generally allocates less memory, while the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method generally executes faster.  </p>\n<p> With error detection, an invalid sequence causes this method to throw a <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Without error detection, invalid sequences are ignored, and no exception is thrown.  </p>\n<p> Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> or the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> provided by the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> method or the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> method, respectively.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer&#39;s responsibility. The <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Text_UTF32Encoding_GetBytes_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UTF32Encoding_GetBytes_System_Char___System_Int32_System_Int32_System_Byte___System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetBytes(Char[], Int32, Int32, Byte[], Int32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Encodes a set of characters from the specified character array into the specified byte array.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>chars</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The character array containing the set of characters to encode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>charIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The index of the first character to encode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>charCount</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of characters to encode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>bytes</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The byte array to contain the resulting sequence of bytes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>byteIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The index at which to start writing the resulting sequence of bytes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The actual number of bytes written into <code>bytes</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.security.securitysafecriticalattribute\" title=\"System.Security.SecuritySafeCriticalAttribute\" data-linktype=\"relative-path\">SecuritySafeCriticalAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>chars</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>bytes</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>.  </p>\n<p> -or-  </p>\n<p> <code>byteIndex</code> is not a valid index in <code>bytes</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Error detection is enabled, and <code>chars</code> contains an invalid sequence of characters.  </p>\n<p> -or-  </p>\n<p> <code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A fallback occurred (see <a href=\"../topic/character%20encoding%20in%20the%20.net%20framework\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.EncoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>To calculate the exact array size required by <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> to store the resulting bytes, you call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method. To calculate the maximum array size, you call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method. The <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method generally allocates less memory, while the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method generally executes faster.  </p>\n<p> With error detection, an invalid sequence causes this method to throw a <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Without error detection, invalid sequences are ignored, and no exception is thrown.  </p>\n<p> Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> or the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> provided by the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> method or the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> method, respectively.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer&#39;s responsibility. The <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method does not prepend a preamble to the beginning of a sequence of encoded bytes.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Text_UTF32Encoding_GetBytes_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UTF32Encoding_GetBytes_System_String_System_Int32_System_Int32_System_Byte___System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetBytes(String, Int32, Int32, Byte[], Int32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Encodes a set of characters from the specified <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> into the specified byte array.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>s</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> containing the set of characters to encode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>charIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The index of the first character to encode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>charCount</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of characters to encode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>bytes</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The byte array to contain the resulting sequence of bytes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>byteIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The index at which to start writing the resulting sequence of bytes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The actual number of bytes written into <code>bytes</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.security.securitysafecriticalattribute\" title=\"System.Security.SecuritySafeCriticalAttribute\" data-linktype=\"relative-path\">SecuritySafeCriticalAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>s</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>bytes</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>.  </p>\n<p> -or-  </p>\n<p> <code>byteIndex</code> is not a valid index in <code>bytes</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Error detection is enabled, and <code>s</code> contains an invalid sequence of characters.  </p>\n<p> -or-  </p>\n<p> <code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A fallback occurred (see <a href=\"../topic/character%20encoding%20in%20the%20.net%20framework\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.EncoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>To calculate the exact array size required by GetBytes to store the resulting bytes, you call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method. To calculate the maximum array size, you call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method. The <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method generally allocates less memory, while the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a> method generally executes faster.  </p>\n<p> With error detection, an invalid sequence causes this method to throw a <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Without error detection, invalid sequences are ignored, and no exception is thrown.  </p>\n<p> Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> or the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> provided by the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> method or the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> method, respectively.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer&#39;s responsibility. The GetBytes method does not prepend a preamble to the beginning of a sequence of encoded bytes.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Text_UTF32Encoding_GetCharCount_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UTF32Encoding_GetCharCount_System_Byte___System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetCharCount(Byte[], Int32, Int32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetCharCount (byte[] bytes, int index, int count);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>bytes</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The byte array containing the sequence of bytes to decode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>index</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The index of the first byte to decode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>count</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of bytes to decode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The number of characters produced by decoding the specified sequence of bytes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.security.securitysafecriticalattribute\" title=\"System.Security.SecuritySafeCriticalAttribute\" data-linktype=\"relative-path\">SecuritySafeCriticalAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>bytes</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>index</code> or <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>.  </p>\n<p> -or-  </p>\n<p> The resulting number of bytes is greater than the maximum number that can be returned as an integer.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A fallback occurred (see <a href=\"../topic/character%20encoding%20in%20the%20.net%20framework\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.DecoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The GetCharCount method calculates the exact array size required by the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> method to store the resulting characters. To calculate the maximum array size, call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a> method. The GetCharCount method generally allocates less memory, while the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a> method generally executes faster.  </p>\n<p> With error detection, an invalid sequence causes this method to throw a <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Without error detection, invalid sequences are ignored, and no exception is thrown.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Text_UTF32Encoding_GetCharCount_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UTF32Encoding_GetCharCount_System_Byte__System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetCharCount(Byte*, Int32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetCharCount (byte* bytes, int count);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>bytes</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>*</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A pointer to the first byte to decode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>count</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of bytes to decode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The number of characters produced by decoding the specified sequence of bytes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.clscompliantattribute\" title=\"System.CLSCompliantAttribute\" data-linktype=\"relative-path\">CLSCompliantAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.security.securitycriticalattribute\" title=\"System.Security.SecurityCriticalAttribute\" data-linktype=\"relative-path\">SecurityCriticalAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>bytes</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> The resulting number of bytes is greater than the maximum number that can be returned as an integer.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A fallback occurred (see <a href=\"../topic/character%20encoding%20in%20the%20.net%20framework\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.DecoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>GetCharCount calculates the exact array size required by the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> method to store the resulting characters. To calculate the maximum array size, call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a> method. The <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method generally allocates less memory, while the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a> method generally executes faster.  </p>\n<p> With error detection, an invalid sequence causes this method to throw a <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Without error detection, invalid sequences are ignored, and no exception is thrown.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Text_UTF32Encoding_GetChars_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UTF32Encoding_GetChars_System_Byte__System_Int32_System_Char__System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetChars(Byte*, Int32, Char*, Int32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>bytes</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>*</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A pointer to the first byte to decode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>byteCount</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of bytes to decode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>chars</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>*</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A pointer to the location at which to start writing the resulting set of characters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>charCount</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The maximum number of characters to write.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The actual number of characters written at the location indicated by <code>chars</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.clscompliantattribute\" title=\"System.CLSCompliantAttribute\" data-linktype=\"relative-path\">CLSCompliantAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.security.securitycriticalattribute\" title=\"System.Security.SecurityCriticalAttribute\" data-linktype=\"relative-path\">SecurityCriticalAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>bytes</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>chars</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>byteCount</code> or <code>charCount</code> is less than zero.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes.  </p>\n<p> -or-  </p>\n<p> <code>charCount</code> is less than the resulting number of characters.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A fallback occurred (see <a href=\"../topic/character%20encoding%20in%20the%20.net%20framework\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.DecoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>To calculate the exact array size required by <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> to store the resulting characters, call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method. To calculate the maximum array size, call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a> method. The <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method generally allocates less memory, while the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a> method generally executes faster.  </p>\n<p> With error detection, an invalid sequence causes this method to throw a <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Without error detection, invalid sequences are ignored, and no exception is thrown.  </p>\n<p> If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method. You can remove it by calling the <a class=\"xref\" href=\"system.string#System_String_TrimStart_\" data-linktype=\"relative-path\">TrimStart</a> method.  </p>\n<p> Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> or the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> provided by the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> method or the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> method, respectively.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Text_UTF32Encoding_GetChars_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UTF32Encoding_GetChars_System_Byte___System_Int32_System_Int32_System_Char___System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetChars(Byte[], Int32, Int32, Char[], Int32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Decodes a sequence of bytes from the specified byte array into the specified character array.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>bytes</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The byte array containing the sequence of bytes to decode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>byteIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The index of the first byte to decode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>byteCount</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of bytes to decode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>chars</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.char\" data-linktype=\"relative-path\">Char</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The character array to contain the resulting set of characters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>charIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The index at which to start writing the resulting set of characters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The actual number of characters written into <code>chars</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.security.securitysafecriticalattribute\" title=\"System.Security.SecuritySafeCriticalAttribute\" data-linktype=\"relative-path\">SecuritySafeCriticalAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>bytes</code> is <code>null</code>.  </p>\n<p> -or-  </p>\n<p> <code>chars</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>byteIndex</code> or <code>byteCount</code> or <code>charIndex</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>byteindex</code> and <code>byteCount</code> do not denote a valid range in <code>bytes</code>.  </p>\n<p> -or-  </p>\n<p> <code>charIndex</code> is not a valid index in <code>chars</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes.  </p>\n<p> -or-  </p>\n<p> <code>chars</code> does not have enough capacity from <code>charIndex</code> to the end of the array to accommodate the resulting characters.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A fallback occurred (see <a href=\"../topic/character%20encoding%20in%20the%20.net%20framework\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.DecoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>To calculate the exact array size required by GetChars to store the resulting characters, call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method. To calculate the maximum array size, call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a> method. The <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method generally allocates less memory, while the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a> method generally executes faster.  </p>\n<p> With error detection, an invalid sequence causes this method to throw a <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Without error detection, invalid sequences are ignored, and no exception is thrown.  </p>\n<p> If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method. You can remove it by calling the <a class=\"xref\" href=\"system.string#System_String_TrimStart_\" data-linktype=\"relative-path\">TrimStart</a> method.  </p>\n<p> Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> or the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> provided by the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> method or the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> method, respectively.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Text_UTF32Encoding_GetDecoder_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UTF32Encoding_GetDecoder\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetDecoder()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Obtains a decoder that converts a UTF-32 encoded sequence of bytes into a sequence of Unicode characters.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override System.Text.Decoder GetDecoder ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> that converts a UTF-32 encoded sequence of bytes into a sequence of Unicode characters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_GetChars_\" data-linktype=\"relative-path\">GetChars</a> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> method. However, a <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> maintains state information between calls so it can correctly decode byte sequences that span blocks. The <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, GetDecoder and <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.  </p>\n<p> If error detection is enabled, that is, the <code>throwOnInvalidCharacters</code> parameter of the constructor was set to <code>true</code>, error detection is also enabled in the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> returned by this method. If error detection is enabled and an invalid sequence is encountered, the state of the decoder is undefined and processing must stop.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Text_UTF32Encoding_GetEncoder_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UTF32Encoding_GetEncoder\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetEncoder()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Obtains an encoder that converts a sequence of Unicode characters into a UTF-32 encoded sequence of bytes.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override System.Text.Encoder GetEncoder ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> that converts a sequence of Unicode characters into a UTF-32 encoded sequence of bytes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method converts sequential blocks of characters into sequential blocks of bytes, in a manner similar to the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method. However, a <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> maintains state information between calls so it can correctly encode character sequences that span blocks. The <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation. For example, a data block might end with an unmatched high-surrogate, and the matching low-surrogate might be in the next data block. Therefore, <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> and GetEncoder are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.  </p>\n<p> If error detection is enabled, that is, the <code>throwOnInvalidCharacters</code> parameter of the constructor was set to <code>true</code>, error detection is also enabled in the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> returned by this method. If error detection is enabled and an invalid sequence is encountered, the state of the encoder is undefined and processing must stop.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Text_UTF32Encoding_GetHashCode_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UTF32Encoding_GetHashCode\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetHashCode()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the hash code for the current instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetHashCode ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The hash code for the current <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Text_UTF32Encoding_GetMaxByteCount_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UTF32Encoding_GetMaxByteCount_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetMaxByteCount(Int32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Calculates the maximum number of bytes produced by encoding the specified number of characters.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetMaxByteCount (int charCount);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>charCount</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of characters to encode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The maximum number of bytes produced by encoding the specified number of characters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>charCount</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> The resulting number of bytes is greater than the maximum number that can be returned as an integer.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.encoderfallbackexception\" data-linktype=\"relative-path\">EncoderFallbackException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A fallback occurred (see <a href=\"../topic/character%20encoding%20in%20the%20.net%20framework\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.EncoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.encoderexceptionfallback\" data-linktype=\"relative-path\">EncoderExceptionFallback</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>To calculate the exact array size required by <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> to store the resulting bytes, you call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method. To calculate the maximum array size, you call the GetMaxByteCount method. The <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> method generally allocates less memory, while the GetMaxByteCount method generally executes faster.  </p>\n<p> GetMaxByteCount is a worst-case number, including the worst case for the currently selected <a class=\"xref\" href=\"system.text.encoderfallback\" data-linktype=\"relative-path\">EncoderFallback</a>. If a fallback is chosen with a potentially large string,  GetMaxByteCount can return large values.  </p>\n<p> In most cases, this method returns reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded. You might also want to consider a different approach and use <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetByteCount_\" data-linktype=\"relative-path\">GetByteCount</a> or <a class=\"xref\" href=\"system.text.encoder#System_Text_Encoder_Convert_\" data-linktype=\"relative-path\">Convert</a>.  </p>\n<p> GetMaxByteCount has no relationship to <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a>. If you need a similar function to use with <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a>, use <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxCharCount_\" data-linktype=\"relative-path\">GetMaxCharCount</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> <code>GetMaxByteCount(N)</code> is not necessarily the same value as <code>N* GetMaxByteCount(1)</code>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Text_UTF32Encoding_GetMaxCharCount_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UTF32Encoding_GetMaxCharCount_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetMaxCharCount(Int32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Calculates the maximum number of characters produced by decoding the specified number of bytes.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetMaxCharCount (int byteCount);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>byteCount</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of bytes to decode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The maximum number of characters produced by decoding the specified number of bytes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>byteCount</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> The resulting number of bytes is greater than the maximum number that can be returned as an integer.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A fallback occurred (see <a href=\"../topic/character%20encoding%20in%20the%20.net%20framework\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.DecoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>To calculate the exact array size required by <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetChars_\" data-linktype=\"relative-path\">GetChars</a> to store the resulting characters, you call the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method. To calculate the maximum array size, you call the GetMaxCharCount method. The <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> method generally allocates less memory, while the GetMaxCharCount method generally executes faster.  </p>\n<p> GetMaxCharCount is a worst-case number, including the worst case for the currently selected <a class=\"xref\" href=\"system.text.decoderfallback\" data-linktype=\"relative-path\">DecoderFallback</a>. If a fallback is chosen with a potentially large string, GetMaxCharCount can return large values.  </p>\n<p> In most cases, this method returns reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded. You might also want to consider a different approach and use <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetCharCount_\" data-linktype=\"relative-path\">GetCharCount</a> or <a class=\"xref\" href=\"system.text.decoder#System_Text_Decoder_Convert_\" data-linktype=\"relative-path\">Convert</a>.  </p>\n<p> GetMaxCharCount has no relationship to <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a>. If you need a similar function to use with <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a>, use <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetMaxByteCount_\" data-linktype=\"relative-path\">GetMaxByteCount</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> <code>GetMaxCharCount(N)</code> is not necessarily the same value as <code>N* GetMaxCharCount(1)</code>.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Text_UTF32Encoding_GetPreamble_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UTF32Encoding_GetPreamble\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetPreamble()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a Unicode byte order mark encoded in UTF-32 format, if the <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> object is configured to supply one.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override byte[] GetPreamble ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A byte array containing the Unicode byte order mark, if the <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> object is configured to supply one. Otherwise, this method returns a zero-length byte array.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> object can provide a preamble, which is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process. Prefacing a sequence of encoded bytes with a byte order mark (code points U+0000 U+FEFF) helps the decoder determine the byte order and the transformation format, or UTF. The Unicode byte order mark (BOM) is serialized as follows (in hexadecimal):  </p>\n<ul>\n<li><p>Big endian byte order: 00 00 FE FF  </p>\n</li>\n<li><p>Little endian byte order: FF FE 00 00  </p>\n</li>\n</ul>\n<p> You can instantiate a <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> object whose GetPreamble method returns a valid BOM in the following ways:  </p>\n<ul>\n<li><p>By retrieving the <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> object returned by the <a class=\"xref\" href=\"system.text.encoding#System_Text_Encoding_UTF32_\" data-linktype=\"relative-path\">UTF32</a> property.  </p>\n</li>\n<li><p>By calling the parameterless <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding__ctor\" data-linktype=\"relative-path\">UTF32Encoding()</a> constructor to instantiate a <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> object.  </p>\n</li>\n<li><p>By supplying <code>true</code> as the value of the <code>byteOrderMark</code> argument to the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding__ctor_\" data-linktype=\"relative-path\">UTF32Encoding</a> and <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding__ctor_\" data-linktype=\"relative-path\">UTF32Encoding</a> constructors.  </p>\n</li>\n</ul>\n<p> We recommend that you use the BOM, since it provides nearly certain identification of an encoding for files that otherwise have lost reference to the <a class=\"xref\" href=\"system.text.utf32encoding\" data-linktype=\"relative-path\">UTF32Encoding</a> object, for example, untagged or improperly tagged web data, or random text files stored when a business did not have international concerns or other data. Often, user problems might be avoided if data is consistently and properly tagged.  </p>\n<p> For standards that provide an encoding type, a BOM is somewhat redundant. However, it can be used to help a server send the correct encoding header. Alternatively, it can be used as a fallback in case the encoding is otherwise lost.  </p>\n<p> There are some disadvantages to using a BOM. For example, knowing how to limit the database fields that use a BOM can be difficult. Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data. In spite of the few disadvantages, however, the use of a BOM is highly recommended.  </p>\n<p> For more information on byte order and the byte order mark, see The Unicode Standard at the <a href=\"http://go.microsoft.com/fwlink/?LinkId=37123\" data-linktype=\"external\">Unicode home page</a>.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> To ensure that the encoded bytes are decoded properly, you should prefix encoded bytes with a preamble. Note that the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetBytes_\" data-linktype=\"relative-path\">GetBytes</a> method does not prepend a BOM to a sequence of encoded bytes; supplying a BOM at the beginning of an appropriate byte stream is the developer&#39;s responsibility.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Text_UTF32Encoding_GetString_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_UTF32Encoding_GetString_System_Byte___System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetString(Byte[], Int32, Int32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Decodes a range of bytes from a byte array into a string.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override string GetString (byte[] bytes, int index, int count);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>bytes</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The byte array containing the sequence of bytes to decode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>index</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The index of the first byte to decode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>count</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of bytes to decode.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A string that contains the results of decoding the specified sequence of bytes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.security.securitysafecriticalattribute\" title=\"System.Security.SecuritySafeCriticalAttribute\" data-linktype=\"relative-path\">SecuritySafeCriticalAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>bytes</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>index</code> or <code>count</code> is less than zero.  </p>\n<p> -or-  </p>\n<p> <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A fallback occurred (see <a href=\"../topic/character%20encoding%20in%20the%20.net%20framework\" data-linktype=\"relative-path\">Character Encoding in the .NET Framework</a> for a complete explanation)  </p>\n<p> -and-  </p>\n<p> <span class=\"xref\">stem.Text.Encoding.DecoderFallback*</span> is set to <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>With error detection, an invalid sequence causes this method to throw a <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a>. Without error detection, invalid sequences are ignored, and no exception is thrown.  </p>\n<p> If the range of bytes to be decoded includes the byte order mark (BOM), and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method. You can remove it by calling the <a class=\"xref\" href=\"system.string#System_String_TrimStart_\" data-linktype=\"relative-path\">TrimStart</a> method.  </p>\n<p> Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <a class=\"xref\" href=\"system.text.decoder\" data-linktype=\"relative-path\">Decoder</a> or the <a class=\"xref\" href=\"system.text.encoder\" data-linktype=\"relative-path\">Encoder</a> provided by the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetDecoder_\" data-linktype=\"relative-path\">GetDecoder</a> method or the <a class=\"xref\" href=\"system.text.utf32encoding#System_Text_UTF32Encoding_GetEncoder_\" data-linktype=\"relative-path\">GetEncoder</a> method, respectively.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Text.UTF32Encoding.yml\">\r\n<meta name=\"APIName\" content=\"System.Text.UTF32Encoding\">\r\n<meta name=\"APIName\" content=\"System.Text.UTF32Encoding..ctor\">\r\n<meta name=\"APIName\" content=\"System.Text.UTF32Encoding.Equals\">\r\n<meta name=\"APIName\" content=\"System.Text.UTF32Encoding.GetByteCount\">\r\n<meta name=\"APIName\" content=\"System.Text.UTF32Encoding.GetBytes\">\r\n<meta name=\"APIName\" content=\"System.Text.UTF32Encoding.GetCharCount\">\r\n<meta name=\"APIName\" content=\"System.Text.UTF32Encoding.GetChars\">\r\n<meta name=\"APIName\" content=\"System.Text.UTF32Encoding.GetDecoder\">\r\n<meta name=\"APIName\" content=\"System.Text.UTF32Encoding.GetEncoder\">\r\n<meta name=\"APIName\" content=\"System.Text.UTF32Encoding.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Text.UTF32Encoding.GetMaxByteCount\">\r\n<meta name=\"APIName\" content=\"System.Text.UTF32Encoding.GetMaxCharCount\">\r\n<meta name=\"APIName\" content=\"System.Text.UTF32Encoding.GetPreamble\">\r\n<meta name=\"APIName\" content=\"System.Text.UTF32Encoding.GetString\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"1ea32bbb-83c1-e04d-95a3-359bee2dafbb\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a UTF-32 encoding of Unicode characters.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.text/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Text.UTF32Encoding\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Text.UTF32Encoding.yml","open_to_public_contributors":false,"api_name":["System.Text.UTF32Encoding","System.Text.UTF32Encoding..ctor","System.Text.UTF32Encoding.Equals","System.Text.UTF32Encoding.GetByteCount","System.Text.UTF32Encoding.GetBytes","System.Text.UTF32Encoding.GetCharCount","System.Text.UTF32Encoding.GetChars","System.Text.UTF32Encoding.GetDecoder","System.Text.UTF32Encoding.GetEncoder","System.Text.UTF32Encoding.GetHashCode","System.Text.UTF32Encoding.GetMaxByteCount","System.Text.UTF32Encoding.GetMaxCharCount","System.Text.UTF32Encoding.GetPreamble","System.Text.UTF32Encoding.GetString"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Text.UTF32Encoding","System::Text::UTF32Encoding","System.Text.UTF32Encoding.#ctor","System::Text::UTF32Encoding::#ctor","System.Text.UTF32Encoding.Equals","System::Text::UTF32Encoding::Equals","System.Text.UTF32Encoding.GetByteCount","System::Text::UTF32Encoding::GetByteCount","System.Text.UTF32Encoding.GetBytes","System::Text::UTF32Encoding::GetBytes","System.Text.UTF32Encoding.GetCharCount","System::Text::UTF32Encoding::GetCharCount","System.Text.UTF32Encoding.GetChars","System::Text::UTF32Encoding::GetChars","System.Text.UTF32Encoding.GetDecoder","System::Text::UTF32Encoding::GetDecoder","System.Text.UTF32Encoding.GetEncoder","System::Text::UTF32Encoding::GetEncoder","System.Text.UTF32Encoding.GetHashCode","System::Text::UTF32Encoding::GetHashCode","System.Text.UTF32Encoding.GetMaxByteCount","System::Text::UTF32Encoding::GetMaxByteCount","System.Text.UTF32Encoding.GetMaxCharCount","System::Text::UTF32Encoding::GetMaxCharCount","System.Text.UTF32Encoding.GetPreamble","System::Text::UTF32Encoding::GetPreamble","System.Text.UTF32Encoding.GetString","System::Text::UTF32Encoding::GetString"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"1ea32bbb-83c1-e04d-95a3-359bee2dafbb","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Text/UTF32Encoding.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"UTF32Encoding class | Microsoft Docs","_op_ogTitle":"UTF32Encoding class","description":"Represents a UTF-32 encoding of Unicode characters.\n","toc_asset_id":"api/_splitted/System.Text/toc.json","toc_rel":"_splitted/System.Text/toc.json","source_url":"","ms.assetid":"System.Text.UTF32Encoding","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.text.utf32encoding","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.text.utf32encoding","fileRelativePath":"api/System.Text.UTF32Encoding.html"},"themesRelativePathToOutputRoot":"_themes/"}