{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">FormViewCommandEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that handles the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_ItemCommand\" data-linktype=\"relative-path\">ItemCommand</a> event of a <a class=\"xref\" href=\"system.web.ui.webcontrols.formview\" data-linktype=\"relative-path\">FormView</a> control. This class cannot be inherited.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void FormViewCommandEventHandler(object sender, FormViewCommandEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">FormViewCommandEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example demonstrates how to programmatically add a FormViewCommandEventHandler delegate to the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_ItemCommand\" data-linktype=\"relative-path\">ItemCommand</a> event of a <a class=\"xref\" href=\"system.web.ui.webcontrols.formview\" data-linktype=\"relative-path\">FormView</a> control.  </p>\n<pre><code class=\"lang-vb\" name=\"FormViewCommandEventHandler#1\">&lt;%@ page language=&quot;VB&quot; %&gt;\n&lt;%@ import namespace=&quot;System.Data&quot;%&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n  &#39; To dynamically create a template for a FormView control,\n  &#39; you must create a custom template class to represent \n  &#39; the template. This template class represents the item\n  &#39; template for a FormView control.\n  Private NotInheritable Class EmployeeTemplate\n    Implements ITemplate\n    \n    &#39; When implementing the ITemplate interface, you must\n    &#39; implement the InstantiateIn method. The FormView\n    &#39; control calls this method to create the template&#39;s \n    &#39; content. \n    Sub InstantiateIn(ByVal container As Control) Implements ITemplate.InstantiateIn\n    \n      &#39; Create the child controls contained in the template.\n      &#39; For this example, the item template displays the\n      &#39; FirstName and LastName fields from the data source.\n      &#39; To support data-binding, create event handlers \n      &#39; for the DataBinding event of each child control.\n      &#39; The event handlers must bind the appropriate value \n      &#39; to each control.\n      Dim firstNameLabel As New Label()\n      firstNameLabel.ID = &quot;FirstNameLabel&quot;\n      AddHandler firstNameLabel.DataBinding, AddressOf FirstNameLabel_DataBinding\n      \n      Dim nameLineBreak As New LiteralControl(&quot;&lt;br/&gt;&quot;)\n      Dim buttonLineBreak As New LiteralControl(&quot;&lt;br/&gt;&quot;)\n\n      Dim lastNameLabel As New Label()\n      lastNameLabel.ID = &quot;LastNameLabel&quot;\n      AddHandler lastNameLabel.DataBinding, AddressOf LastNameLabel_DataBinding\n\n      &#39; Create a custom button control to display in the item\n      &#39; template. When a button within a FormView control is \n      &#39; clicked, the ItemCommand event is raised. The ItemCommand\n      &#39; event is used to handle the clicking of this button.\n      Dim displayButton As New Button()\n      displayButton.ID = &quot;AddButton&quot;\n      displayButton.CommandName = &quot;Display&quot;\n      displayButton.Text = &quot;Display Employee&quot;\n\n      &#39; Add the controls to the Controls collection of the \n      &#39; container control.\n      container.Controls.Add(firstNameLabel)\n      container.Controls.Add(nameLineBreak)\n      container.Controls.Add(lastNameLabel)\n      container.Controls.Add(buttonLineBreak)\n      container.Controls.Add(displayButton)\n\n    End Sub\n    \n    &#39; This event handler binds the value of the FirstName field\n    &#39; to the FirstNameLabel Label control displayed in the template.\n    Private Sub FirstNameLabel_DataBinding(ByVal sender As Object, ByVal e As EventArgs)\n\n      &#39; Use the sender parameter to retrieve the Label control\n      &#39; being bound to data.\n      Dim firstNameLabelControl As Label = CType(sender, Label)\n\n      &#39; Retrieve the value to bind to the Label control. First,\n      &#39; use the NamingContainer property to retrieve the parent \n      &#39; control of the Label control. In this example, the parent \n      &#39; control is the FormView control.\n      Dim formViewContainer As FormView = CType(firstNameLabelControl.NamingContainer, FormView)\n      \n      &#39; Get the data item bound to the FormView control.\n      Dim rowView As DataRowView = CType(formViewContainer.DataItem, DataRowView)\n\n      &#39; Use the data item to retrieve the value of the FirstName field.\n      &#39; Set the Text property of the Label control to this value.        \n      firstNameLabelControl.Text = rowView(&quot;FirstName&quot;).ToString()\n  \n    End Sub\n\n    &#39; This event handler binds the value of the LastName field\n    &#39; to the LastNameLabel Label control displayed in the template.\n    Private Sub LastNameLabel_DataBinding(ByVal sender As Object, ByVal e As EventArgs)\n\n      &#39; Use the sender parameter to retrieve the Label control\n      &#39; being bound to data.\n      Dim lastNameLabelControl As Label = CType(sender, Label)\n\n      &#39; Retrieve the value to bind to the Label control. First,\n      &#39; use the NamingContainer property to retrieve the parent \n      &#39; control of the Label control. In this example, the parent \n      &#39; control is the FormView control.\n      Dim formViewContainer As FormView = CType(lastNameLabelControl.NamingContainer, FormView)\n\n      &#39; Get the data item bound to the FormView control.\n      Dim rowView As DataRowView = CType(formViewContainer.DataItem, DataRowView)\n\n      &#39; Use the data item to retrieve the value of the LastName field.\n      &#39; Set the Text property of the Label control to this value.         \n      lastNameLabelControl.Text = rowView(&quot;LastName&quot;).ToString()\n    \n    End Sub\n\n  End Class\n  \n  Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)\n      \n    &#39; Create a new FormView object.\n    Dim employeesFormView As New FormView()\n    \n    &#39; Set the FormView object&#39;s properties.\n    employeesFormView.ID = &quot;EmployeesFormView&quot;\n    employeesFormView.DataSourceID = &quot;EmployeeSource&quot;\n    employeesFormView.AllowPaging = True\n    employeesFormView.HeaderText = &quot;Employee Name&quot;\n    \n    &#39; Programmatically register the event handlers for the \n    &#39; FormView control.\n    AddHandler employeesFormView.ItemCommand, AddressOf EmployeesFormView_ItemCommand\n    AddHandler employeesFormView.PageIndexChanged, AddressOf EmployeesFormView_PageIndexChanged\n\n    &#39; Create the dynamic template using the custom template class.\n    employeesFormView.ItemTemplate = New EmployeeTemplate()\n\n    &#39; Add the FormView object to the Controls collection\n    &#39; of the PlaceHolder control.\n    FormViewPlaceHolder.Controls.Add(employeesFormView)\n\n  End Sub\n\n  Sub EmployeesFormView_ItemCommand(ByVal sender As Object, ByVal e As FormViewCommandEventArgs)\n\n    &#39; The ItemCommand event is raised when any button within\n    &#39; the FormView control is clicked. Use the CommandName property \n    &#39; to determine which button was clicked. \n    If e.CommandName = &quot;Display&quot; Then\n      \n      &#39; Use the sender parameter to get the FormView control\n      &#39; that contains the button clicked.\n      Dim employeesFormView As FormView = CType(sender, FormView)\n\n      &#39; Use the Row property to retrieve the data row.\n      Dim row As FormViewRow = employeesFormView.Row\n\n      &#39; Retrieve the FirstNameLabel and LastNameLabel Label controls \n      &#39; from the data row.\n      Dim firstNameLabel As Label = CType(row.FindControl(&quot;FirstNameLabel&quot;), Label)\n      Dim lastNameLabel As Label = CType(row.FindControl(&quot;LastNameLabel&quot;), Label)\n\n      If firstNameLabel IsNot Nothing And lastNameLabel IsNot Nothing Then\n      \n        &#39; Display the employee&#39;s name.\n        MessageLabel.Text = firstNameLabel.Text &amp; &quot; &quot; &amp; _\n        lastNameLabel.Text()\n        \n      End If\n      \n    End If\n    \n  End Sub\n  \n  Sub EmployeesFormView_PageIndexChanged(ByVal sender As Object, ByVal e As EventArgs)\n    \n    &#39; Clear the message label when the user navigates to \n    &#39; a different record.\n    MessageLabel.Text = &quot;&quot;\n\n  End Sub\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt; \n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;FormViewCommandEventHandler Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;FormViewCommandEventHandler Example&lt;/h3&gt;\n        \n      &lt;!-- Use a PlaceHolder control as the container for the --&gt;\n      &lt;!-- dynamically generated FormView control.            --&gt;       \n      &lt;asp:placeholder id=&quot;FormViewPlaceHolder&quot;\n        runat=&quot;server&quot;/&gt;\n            \n      &lt;br/&gt;&lt;br/&gt;\n      \n      &lt;asp:label id=&quot;MessageLabel&quot;\n        forecolor=&quot;Red&quot;\n        runat=&quot;server&quot;/&gt;\n            \n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the Web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;EmployeeSource&quot;\n        selectcommand=&quot;Select [EmployeeID], [LastName], [FirstName] From [Employees]&quot;\n        connectionstring=&quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n          \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"FormViewCommandEventHandler#1\">&lt;%@ page language=&quot;C#&quot; %&gt;\n&lt;%@ import namespace=&quot;System.Data&quot;%&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n  // To dynamically create a template for a FormView control,\n  // you must create a custom template class to represent \n  // the template. This template class represents the item\n  // template for a FormView control.\n  private sealed class EmployeeTemplate : ITemplate\n  {\n    \n    // When implementing the ITemplate interface, you must\n    // implement the InstantiateIn method. The FormView\n    // control calls this method to create the template&#39;s \n    // content. \n    void ITemplate.InstantiateIn(Control container)\n    {\n      // Create the child controls contained in the template.\n      // For this example, the item template displays the\n      // FirstName and LastName fields from the data source.\n      // To support data binding, create event handlers \n      // for the DataBinding event of each child control.\n      // The event handlers must bind the appropriate value \n      // to each control.\n      Label firstNameLabel = new Label();\n      firstNameLabel.ID = &quot;FirstNameLabel&quot;;\n      firstNameLabel.DataBinding += new EventHandler(FirstNameLabel_DataBinding);\n      \n      LiteralControl nameLineBreak = new LiteralControl(&quot;&lt;br/&gt;&quot;);\n      LiteralControl buttonLineBreak = new LiteralControl(&quot;&lt;br/&gt;&quot;);\n\n      Label lastNameLabel = new Label();\n      lastNameLabel.ID = &quot;LastNameLabel&quot;;\n      lastNameLabel.DataBinding += new EventHandler(LastNameLabel_DataBinding);\n\n      // Create a custom button control to display in the item\n      // template. When a button within a FormView control is \n      // clicked, the ItemCommand event is raised. The ItemCommand\n      // event is used to handle the clicking of this button.\n      Button displayButton = new Button();\n      displayButton.ID = &quot;AddButton&quot;;\n      displayButton.CommandName = &quot;Display&quot;;\n      displayButton.Text = &quot;Display Employee&quot;;\n\n      // Add the controls to the Controls collection of the \n      // container control.\n      container.Controls.Add(firstNameLabel);\n      container.Controls.Add(nameLineBreak);\n      container.Controls.Add(lastNameLabel);\n      container.Controls.Add(buttonLineBreak);\n      container.Controls.Add(displayButton);\n\n    }\n    \n    // This event handler binds the value of the FirstName field\n    // to the FirstNameLabel Label control displayed in the template.\n    private void FirstNameLabel_DataBinding(Object sender, EventArgs e)\n    {\n      // Use the sender parameter to retrieve the Label control\n      // being bound to data.\n      Label firstNameLabelControl = (Label)sender;\n\n      // Retrieve the value to bind to the Label control. First,\n      // use the NamingContainer property to retrieve the parent \n      // control of the Label control. In this example, the parent \n      // control is the FormView control.\n      FormView formViewContainer = (FormView)firstNameLabelControl.NamingContainer;\n      \n      // Get the data item bound to the FormView control.\n      DataRowView rowView = (DataRowView)formViewContainer.DataItem;\n\n      // Use the data item to retrieve the value of the FirstName field.\n      // Set the Text property of the Label control to this value.        \n      firstNameLabelControl.Text = rowView[&quot;FirstName&quot;].ToString();\n    }\n\n    // This event handler binds the value of the LastName field\n    // to the LastNameLabel Label control displayed in the template.\n    private void LastNameLabel_DataBinding(Object sender, EventArgs e)\n    {\n      // Use the sender parameter to retrieve the Label control\n      // being bound to data.\n      Label lastNameLabelControl = (Label)sender;\n\n      // Retrieve the value to bind to the Label control. First,\n      // use the NamingContainer property to retrieve the parent \n      // control of the Label control. In this example, the parent \n      // control is the FormView control.\n      FormView formViewContainer = (FormView)lastNameLabelControl.NamingContainer;\n\n      // Get the data item bound to the FormView control.\n      DataRowView rowView = (DataRowView)formViewContainer.DataItem;\n\n      // Use the data item to retrieve the value of the LastName field.\n      // Set the Text property of the Label control to this value.         \n      lastNameLabelControl.Text = rowView[&quot;LastName&quot;].ToString();\n    }\n    \n  }\n\n  void Page_Load(Object sender, EventArgs e)\n  {\n    \n    // Create a new FormView object.\n    FormView employeesFormView = new FormView();\n    \n    // Set the FormView object&#39;s properties.\n    employeesFormView.ID = &quot;EmployeesFormView&quot;;\n    employeesFormView.DataSourceID = &quot;EmployeeSource&quot;;\n    employeesFormView.AllowPaging = true;\n    employeesFormView.HeaderText = &quot;Employee Name&quot;;\n    \n    // Programmatically register the event handlers for the \n    // FormView control.\n    employeesFormView.ItemCommand += new FormViewCommandEventHandler(EmployeesFormView_ItemCommand);\n    employeesFormView.PageIndexChanged += new EventHandler(EmployeesFormView_PageIndexChanged);\n\n    // Create the dynamic template using the custom template class.\n    employeesFormView.ItemTemplate = new EmployeeTemplate();\n\n    // Add the FormView object to the Controls collection\n    // of the PlaceHolder control.\n    FormViewPlaceHolder.Controls.Add(employeesFormView);\n\n  }\n\n  void EmployeesFormView_ItemCommand(Object sender, FormViewCommandEventArgs e)\n  {\n\n    // The ItemCommand event is raised when any button within\n    // the FormView control is clicked. Use the CommandName property \n    // to determine which button was clicked. \n    if (e.CommandName == &quot;Display&quot;)\n    {\n      \n      // Use the sender parameter to get the FormView control\n      // that contains the button clicked.\n      FormView employeesFormView = (FormView)sender;\n\n      // Use the Row property to retrieve the data row.\n      FormViewRow row = employeesFormView.Row;\n\n      // Retrieve the FirstNameLabel and LastNameLabel Label controls \n      // from the data row.\n      Label firstNameLabel = (Label)row.FindControl(&quot;FirstNameLabel&quot;);\n      Label lastNameLabel = (Label)row.FindControl(&quot;LastNameLabel&quot;);\n\n      if (firstNameLabel != null &amp;&amp; lastNameLabel != null)\n      {\n        // Display the employee&#39;s name.\n        MessageLabel.Text = firstNameLabel.Text + &quot; &quot; + \n          lastNameLabel.Text;\n      }\n      \n    }\n    \n  }\n\n  void EmployeesFormView_PageIndexChanged(Object sender, EventArgs e)\n  {\n    \n    // Clear the message label when the user navigates to \n    // a different record.\n    MessageLabel.Text = &quot;&quot;;\n\n  }\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt; \n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;FormViewCommandEventHandler Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;FormViewCommandEventHandler Example&lt;/h3&gt;\n        \n      &lt;!-- Use a PlaceHolder control as the container for the --&gt;\n      &lt;!-- dynamically generated FormView control.            --&gt;       \n      &lt;asp:placeholder id=&quot;FormViewPlaceHolder&quot;\n        runat=&quot;server&quot;/&gt;\n            \n      &lt;br/&gt;&lt;br/&gt;\n      \n      &lt;asp:label id=&quot;MessageLabel&quot;\n        forecolor=&quot;Red&quot;\n        runat=&quot;server&quot;/&gt;\n            \n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the Web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;EmployeeSource&quot;\n        selectcommand=&quot;Select [EmployeeID], [LastName], [FirstName] From [Employees]&quot;\n        connectionstring=&quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n          \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p> The following example demonstrates how to declaratively add a FormViewCommandEventHandler delegate to the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_ItemCommand\" data-linktype=\"relative-path\">ItemCommand</a> event of a <a class=\"xref\" href=\"system.web.ui.webcontrols.formview\" data-linktype=\"relative-path\">FormView</a> control.  </p>\n<pre><code class=\"lang-vb\" name=\"FormViewCommandEventHandlerDeclarative#1\">&lt;%@ page language=&quot;VB&quot; %&gt;\n&lt;%@ import namespace=&quot;System.Data&quot;%&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Sub EmployeesFormView_ItemCommand(ByVal sender As Object, ByVal e As FormViewCommandEventArgs) Handles EmployeesFormView.ItemCommand\n\n    &#39; The ItemCommand event is raised when any button within\n    &#39; the FormView control is clicked. Use the CommandName property \n    &#39; to determine which button was clicked. \n    If e.CommandName = &quot;Display&quot; Then\n\n      &#39; Use the Row property to retrieve the data row.\n      Dim row As FormViewRow = EmployeesFormView.Row\n\n      &#39; Retrieve the FirstNameLabel and LastNameLabel Label controls \n      &#39; from data row.\n      Dim firstNameLabel As Label = CType(row.FindControl(&quot;FirstNameLabel&quot;), Label)\n      Dim lastNameLabel As Label = CType(row.FindControl(&quot;LastNameLabel&quot;), Label)\n\n      If firstNameLabel IsNot Nothing And lastNameLabel IsNot Nothing Then\n\n        &#39; Display the employee&#39;s name.\n        MessageLabel.Text = firstNameLabel.Text &amp; &quot; &quot; &amp; _\n          lastNameLabel.Text()\n        \n      End If\n      \n    End If\n    \n  End Sub\n\n  Sub EmployeesFormView_PageIndexChanged(ByVal sender As Object, ByVal e As EventArgs) Handles EmployeesFormView.PageIndexChanged\n    \n    &#39; Clear the message label when the user navigates to \n    &#39; a different record.\n    MessageLabel.Text = &quot;&quot;\n\n  End Sub\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt; \n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;FormViewCommandEventHandler Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;FormViewCommandEventHandler Example&lt;/h3&gt;\n        \n      &lt;!-- Use a PlaceHolder control as the container for the --&gt;\n      &lt;!-- dynamically generated FormView control.            --&gt;       \n      &lt;asp:formview id=&quot;EmployeesFormView&quot;\n        datasourceid=&quot;EmployeeSource&quot;\n        allowpaging=&quot;True&quot;\n        headertext=&quot;Employee Name&quot;\n        runat=&quot;server&quot;&gt;\n      \n        &lt;itemtemplate&gt;\n        \n          &lt;asp:label id=&quot;FirstNameLabel&quot;\n            text=&#39;&lt;%# Eval(&quot;FirstName&quot;) %&gt;&#39;\n            runat=&quot;server&quot;/&gt;\n          &lt;br/&gt;\n          &lt;asp:label id=&quot;LastNameLabel&quot;\n            text=&#39;&lt;%# Eval(&quot;LastName&quot;) %&gt;&#39;\n            runat=&quot;server&quot;/&gt;\n          &lt;br/&gt;\n          &lt;asp:button\n            id=&quot;DisplayButton&quot;\n            text=&quot;Display Employee&quot;\n            commandname=&quot;Display&quot; \n            runat=&quot;server&quot;/&gt;\n        \n        &lt;/itemtemplate&gt;\n        \n      &lt;/asp:formview&gt;\n            \n      &lt;br/&gt;&lt;br/&gt;\n      \n      &lt;asp:label id=&quot;MessageLabel&quot;\n        forecolor=&quot;Red&quot;\n        runat=&quot;server&quot;/&gt;\n            \n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the Web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;EmployeeSource&quot;\n        selectcommand=&quot;Select [EmployeeID], [LastName], [FirstName] From [Employees]&quot;\n        connectionstring=&quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n          \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"FormViewCommandEventHandlerDeclarative#1\">&lt;%@ page language=&quot;C#&quot; %&gt;\n&lt;%@ import namespace=&quot;System.Data&quot;%&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  void EmployeesFormView_ItemCommand(Object sender, FormViewCommandEventArgs e)\n  {\n\n    // The ItemCommand event is raised when any button within\n    // the FormView control is clicked. Use the CommandName property \n    // to determine which button was clicked. \n    if (e.CommandName == &quot;Display&quot;)\n    {\n\n      // Use the Row property to retrieve the data row.\n      FormViewRow row = EmployeesFormView.Row;\n\n      // Retrieve the FirstNameLabel and LastNameLabel Label controls \n      // from data row.\n      Label firstNameLabel = (Label)row.FindControl(&quot;FirstNameLabel&quot;);\n      Label lastNameLabel = (Label)row.FindControl(&quot;LastNameLabel&quot;);\n\n      if (firstNameLabel != null &amp;&amp; lastNameLabel != null)\n      {\n        // Display the employee&#39;s name.\n        MessageLabel.Text = firstNameLabel.Text + &quot; &quot; + \n          lastNameLabel.Text;\n      }\n      \n    }\n    \n  }\n\n  void EmployeesFormView_PageIndexChanged(Object sender, EventArgs e)\n  {\n    \n    // Clear the message label when the user navigates to \n    // a different record.\n    MessageLabel.Text = &quot;&quot;;\n\n  }\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt; \n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;FormViewCommandEventHandler Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;FormViewCommandEventHandler Example&lt;/h3&gt;\n        \n      &lt;!-- Use a PlaceHolder control as the container for the --&gt;\n      &lt;!-- dynamically generated FormView control.            --&gt;       \n      &lt;asp:formview id=&quot;EmployeesFormView&quot;\n        datasourceid=&quot;EmployeeSource&quot;\n        allowpaging=&quot;True&quot;\n        headertext=&quot;Employee Name&quot;\n        onitemcommand=&quot;EmployeesFormView_ItemCommand&quot;\n        onpageindexchanged=&quot;EmployeesFormView_PageIndexChanged&quot;\n        runat=&quot;server&quot;&gt;\n      \n        &lt;itemtemplate&gt;\n        \n          &lt;asp:label id=&quot;FirstNameLabel&quot;\n            text=&#39;&lt;%# Eval(&quot;FirstName&quot;) %&gt;&#39;\n            runat=&quot;server&quot;/&gt;\n          &lt;br/&gt;\n          &lt;asp:label id=&quot;LastNameLabel&quot;\n            text=&#39;&lt;%# Eval(&quot;LastName&quot;) %&gt;&#39;\n            runat=&quot;server&quot;/&gt;\n          &lt;br/&gt;\n          &lt;asp:button\n            id=&quot;DisplayButton&quot;\n            text=&quot;Display Employee&quot;\n            commandname=&quot;Display&quot; \n            runat=&quot;server&quot;/&gt;\n        \n        &lt;/itemtemplate&gt;\n        \n      &lt;/asp:formview&gt;\n            \n      &lt;br/&gt;&lt;br/&gt;\n      \n      &lt;asp:label id=&quot;MessageLabel&quot;\n        forecolor=&quot;Red&quot;\n        runat=&quot;server&quot;/&gt;\n            \n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the Web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;EmployeeSource&quot;\n        selectcommand=&quot;Select [EmployeeID], [LastName], [FirstName] From [Employees]&quot;\n        connectionstring=&quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n          \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_ItemCommand\" data-linktype=\"relative-path\">ItemCommand</a> event is raised when a button within the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview\" data-linktype=\"relative-path\">FormView</a> control is clicked. This allows you to provide an event-handling method that performs a custom routine whenever this event occurs.  </p>\n<p> Buttons within a <a class=\"xref\" href=\"system.web.ui.webcontrols.formview\" data-linktype=\"relative-path\">FormView</a> control can also invoke some of the built-in functionality of the control. To perform one of these operations, set the <code>CommandName</code> property of a button to one of the values in the following table.  </p>\n<table>\n<thead>\n<tr>\n<th>CommandName value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&quot;Cancel&quot;</td>\n<td>Cancels an edit or insert operation and returns the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview\" data-linktype=\"relative-path\">FormView</a> control to the mode specified by the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_DefaultMode_\" data-linktype=\"relative-path\">DefaultMode</a> property. Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_ModeChanged\" data-linktype=\"relative-path\">ModeChanged</a> and <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_ModeChanging\" data-linktype=\"relative-path\">ModeChanging</a> events.</td>\n</tr>\n<tr>\n<td>&quot;Delete&quot;</td>\n<td>Deletes the current record. Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_ItemDeleted\" data-linktype=\"relative-path\">ItemDeleted</a> and <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_ItemDeleting\" data-linktype=\"relative-path\">ItemDeleting</a> events.</td>\n</tr>\n<tr>\n<td>&quot;Edit&quot;</td>\n<td>Puts the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview\" data-linktype=\"relative-path\">FormView</a> control in edit mode. Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_ModeChanged\" data-linktype=\"relative-path\">ModeChanged</a> and <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_ModeChanging\" data-linktype=\"relative-path\">ModeChanging</a> events.</td>\n</tr>\n<tr>\n<td>&quot;Insert&quot;</td>\n<td>Inserts the current record in the data source. Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_ItemInserted\" data-linktype=\"relative-path\">ItemInserted</a> and <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_ItemInserting\" data-linktype=\"relative-path\">ItemInserting</a> events.</td>\n</tr>\n<tr>\n<td>&quot;New&quot;</td>\n<td>Puts the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview\" data-linktype=\"relative-path\">FormView</a> control in insert mode. Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_ModeChanged\" data-linktype=\"relative-path\">ModeChanged</a> and <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_ModeChanging\" data-linktype=\"relative-path\">ModeChanging</a> events.</td>\n</tr>\n<tr>\n<td>&quot;Page&quot;</td>\n<td>Performs a paging operation. Set the <code>CommandArgument</code> property of the button to &quot;First&quot;, &quot;Last&quot;, &quot;Next&quot;, &quot;Prev&quot;, or a page number to specify the type of paging operation to perform. Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_PageIndexChanged\" data-linktype=\"relative-path\">PageIndexChanged</a> and <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_PageIndexChanging\" data-linktype=\"relative-path\">PageIndexChanging</a> events.</td>\n</tr>\n<tr>\n<td>&quot;Update&quot;</td>\n<td>Updates the current record in the data source. Raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_ItemUpdated\" data-linktype=\"relative-path\">ItemUpdated</a> and <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_ItemUpdating\" data-linktype=\"relative-path\">ItemUpdating</a> events.</td>\n</tr>\n</tbody>\n</table>\n<p> Although the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_ItemCommand\" data-linktype=\"relative-path\">ItemCommand</a> event is raised when a button listed in the previous table is clicked, it is recommended that you handle the events listed in the table for the operation.  </p>\n<p> When you create a FormViewCommandEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see <a href=\"http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115\" data-linktype=\"external\">NIB: Events and Delegates</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.FormViewCommandEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.FormViewCommandEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.FormViewCommandEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.FormViewCommandEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.FormViewCommandEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.FormViewCommandEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 05:47 AM\">\r\n<meta name=\"document_id\" content=\"9c60e8b6-6b05-c1d7-0b82-9231e01221b2\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that handles the  event of a  control. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.web.ui.webcontrols/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.WebControls.FormViewCommandEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.FormViewCommandEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Web.UI.WebControls.FormViewCommandEventHandler","System.Web.UI.WebControls.FormViewCommandEventHandler..ctor","System.Web.UI.WebControls.FormViewCommandEventHandler.Invoke","System.Web.UI.WebControls.FormViewCommandEventHandler.BeginInvoke","System.Web.UI.WebControls.FormViewCommandEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.WebControls.FormViewCommandEventHandler","System::Web::UI::WebControls::FormViewCommandEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-31 05:47 AM","document_id":"9c60e8b6-6b05-c1d7-0b82-9231e01221b2","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Web.UI.WebControls/FormViewCommandEventHandler.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"FormViewCommandEventHandler delegate | Microsoft Docs","_op_ogTitle":"FormViewCommandEventHandler delegate","description":"Represents the method that handles the  event of a  control. This class cannot be inherited.\n","toc_asset_id":"api/_splitted/System.Web.UI.WebControls/toc.json","toc_rel":"_splitted/System.Web.UI.WebControls/toc.json","source_url":"","ms.assetid":"System.Web.UI.WebControls.FormViewCommandEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.formviewcommandeventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.formviewcommandeventhandler","fileRelativePath":"api/System.Web.UI.WebControls.FormViewCommandEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}