{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">WaitOrTimerCallback</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents a method to be called when a <a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a> is signaled or times out.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic delegate void WaitOrTimerCallback(object state, bool timedOut);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">WaitOrTimerCallback</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example shows how to use the WaitOrTimerCallback delegate to represent a callback method that is executed when a wait handle is signaled.  </p>\n<p> The example also shows how to use the <a class=\"xref\" href=\"system.threading.threadpool#System_Threading_ThreadPool_RegisterWaitForSingleObject_\" data-linktype=\"relative-path\">RegisterWaitForSingleObject</a> method to execute a specified callback method when a specified wait handle is signaled. In this example, the callback method is <code>WaitProc</code> and the wait handle is an <a class=\"xref\" href=\"system.threading.autoresetevent\" data-linktype=\"relative-path\">AutoResetEvent</a>.  </p>\n<p> The example defines a <code>TaskInfo</code> class to hold the information that is passed to the callback when it executes. The example creates a <code>TaskInfo</code> object and assigns it some string data. The <a class=\"xref\" href=\"system.threading.registeredwaithandle\" data-linktype=\"relative-path\">RegisteredWaitHandle</a> that is returned by the <a class=\"xref\" href=\"system.threading.threadpool#System_Threading_ThreadPool_RegisterWaitForSingleObject_\" data-linktype=\"relative-path\">RegisterWaitForSingleObject</a> method is assigned to the <code>Handle</code> field of the <code>TaskInfo</code> object, so that the callback method has access to the <a class=\"xref\" href=\"system.threading.registeredwaithandle\" data-linktype=\"relative-path\">RegisteredWaitHandle</a>.  </p>\n<p> In addition to the <code>TaskInfo</code> object, the call to the <a class=\"xref\" href=\"system.threading.threadpool#System_Threading_ThreadPool_RegisterWaitForSingleObject_\" data-linktype=\"relative-path\">RegisterWaitForSingleObject</a> method specifies the <a class=\"xref\" href=\"system.threading.autoresetevent\" data-linktype=\"relative-path\">AutoResetEvent</a> the task waits on, a WaitOrTimerCallback delegate that represents the <code>WaitProc</code> callback method, a one-second timeout interval, and multiple callbacks.  </p>\n<p> When the main thread signals the <a class=\"xref\" href=\"system.threading.autoresetevent\" data-linktype=\"relative-path\">AutoResetEvent</a> by calling its <a class=\"xref\" href=\"system.threading.eventwaithandle#System_Threading_EventWaitHandle_Set_\" data-linktype=\"relative-path\">Set</a> method, the WaitOrTimerCallback delegate is invoked. The <code>WaitProc</code> method tests <a class=\"xref\" href=\"system.threading.registeredwaithandle\" data-linktype=\"relative-path\">RegisteredWaitHandle</a> to determine whether a timeout occurred. If the callback was invoked because the wait handle was signaled, the <code>WaitProc</code> method unregisters the <a class=\"xref\" href=\"system.threading.registeredwaithandle\" data-linktype=\"relative-path\">RegisteredWaitHandle</a>, stopping further callbacks. In the case of a timeout, the task continues waiting. The <code>WaitProc</code> method ends by printing a message to the console.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.ThreadPool RegisterWaitForSingleObject0#1\">using System;\nusing System.Threading;\n\n// TaskInfo contains data that will be passed to the callback\n// method.\npublic class TaskInfo {\n    public RegisteredWaitHandle Handle = null;\n    public string OtherInfo = &quot;default&quot;;\n}\n\npublic class Example {\n    public static void Main(string[] args) {\n        // The main thread uses AutoResetEvent to signal the\n        // registered wait handle, which executes the callback\n        // method.\n        AutoResetEvent ev = new AutoResetEvent(false);\n\n        TaskInfo ti = new TaskInfo();\n        ti.OtherInfo = &quot;First task&quot;;\n        // The TaskInfo for the task includes the registered wait\n        // handle returned by RegisterWaitForSingleObject.  This\n        // allows the wait to be terminated when the object has\n        // been signaled once (see WaitProc).\n        ti.Handle = ThreadPool.RegisterWaitForSingleObject(\n            ev,\n            new WaitOrTimerCallback(WaitProc),\n            ti,\n            1000,\n            false\n        );\n\n        // The main thread waits three seconds, to demonstrate the\n        // time-outs on the queued thread, and then signals.\n        Thread.Sleep(3100);\n        Console.WriteLine(&quot;Main thread signals.&quot;);\n        ev.Set();\n\n        // The main thread sleeps, which should give the callback\n        // method time to execute.  If you comment out this line, the\n        // program usually ends before the ThreadPool thread can execute.\n        Thread.Sleep(1000);\n        // If you start a thread yourself, you can wait for it to end\n        // by calling Thread.Join.  This option is not available with \n        // thread pool threads.\n    }\n   \n    // The callback method executes when the registered wait times out,\n    // or when the WaitHandle (in this case AutoResetEvent) is signaled.\n    // WaitProc unregisters the WaitHandle the first time the event is \n    // signaled.\n    public static void WaitProc(object state, bool timedOut) {\n        // The state object must be cast to the correct type, because the\n        // signature of the WaitOrTimerCallback delegate specifies type\n        // Object.\n        TaskInfo ti = (TaskInfo) state;\n\n        string cause = &quot;TIMED OUT&quot;;\n        if (!timedOut) {\n            cause = &quot;SIGNALED&quot;;\n            // If the callback method executes because the WaitHandle is\n            // signaled, stop future execution of the callback method\n            // by unregistering the WaitHandle.\n            if (ti.Handle != null)\n                ti.Handle.Unregister(null);\n        } \n\n        Console.WriteLine(&quot;WaitProc( {0} ) executes on thread {1}; cause = {2}.&quot;,\n            ti.OtherInfo, \n            Thread.CurrentThread.GetHashCode().ToString(), \n            cause\n        );\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Threading.ThreadPool RegisterWaitForSingleObject0#1\">using namespace System;\nusing namespace System::Threading;\n\n// TaskInfo contains data that will be passed to the callback\n// method.\npublic ref class TaskInfo\n{\npublic:\n   TaskInfo()\n   {\n      Handle = nullptr;\n      OtherInfo = &quot;default&quot;;\n   }\n\n   RegisteredWaitHandle^ Handle;\n   String^ OtherInfo;\n};\n\nref class Example\n{\npublic:\n\n   // The callback method executes when the registered wait times out,\n   // or when the WaitHandle (in this case AutoResetEvent) is signaled.\n   // WaitProc unregisters the WaitHandle the first time the event is \n   // signaled.\n   static void WaitProc( Object^ state, bool timedOut )\n   {\n      \n      // The state Object must be cast to the correct type, because the\n      // signature of the WaitOrTimerCallback delegate specifies type\n      // Object.\n      TaskInfo^ ti = static_cast&lt;TaskInfo^&gt;(state);\n      String^ cause = &quot;TIMED OUT&quot;;\n      if (  !timedOut )\n      {\n         cause = &quot;SIGNALED&quot;;\n         \n         // If the callback method executes because the WaitHandle is\n         // signaled, stop future execution of the callback method\n         // by unregistering the WaitHandle.\n         if ( ti-&gt;Handle != nullptr )\n                  ti-&gt;Handle-&gt;Unregister( nullptr );\n      }\n\n      Console::WriteLine( &quot;WaitProc( {0}) executes on thread {1}; cause = {2}.&quot;, ti-&gt;OtherInfo, Thread::CurrentThread-&gt;GetHashCode(), cause );\n   }\n\n};\n\nint main()\n{\n   \n   // The main thread uses AutoResetEvent to signal the\n   // registered wait handle, which executes the callback\n   // method.\n   AutoResetEvent^ ev = gcnew AutoResetEvent( false );\n   TaskInfo^ ti = gcnew TaskInfo;\n   ti-&gt;OtherInfo = &quot;First task&quot;;\n   \n   // The TaskInfo for the task includes the registered wait\n   // handle returned by RegisterWaitForSingleObject.  This\n   // allows the wait to be terminated when the object has\n   // been signaled once (see WaitProc).\n   ti-&gt;Handle = ThreadPool::RegisterWaitForSingleObject( ev, gcnew WaitOrTimerCallback( Example::WaitProc ), ti, 1000, false );\n   \n   // The main thread waits three seconds, to demonstrate the\n   // time-outs on the queued thread, and then signals.\n   Thread::Sleep( 3100 );\n   Console::WriteLine( &quot;Main thread signals.&quot; );\n   ev-&gt;Set();\n   \n   // The main thread sleeps, which should give the callback\n   // method time to execute.  If you comment out this line, the\n   // program usually ends before the ThreadPool thread can execute.\n   Thread::Sleep( 1000 );\n   \n   // If you start a thread yourself, you can wait for it to end\n   // by calling Thread::Join.  This option is not available with \n   // thread pool threads.\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ThreadPool RegisterWaitForSingleObject0#1\">Imports System\nImports System.Threading\n\n&#39; TaskInfo contains data that will be passed to the callback\n&#39; method.\nPublic Class TaskInfo\n    public Handle As RegisteredWaitHandle = Nothing\n    public OtherInfo As String = &quot;default&quot;\nEnd Class\n\nPublic Class Example\n\n    &lt;MTAThread&gt; _\n    Public Shared Sub Main()\n        &#39; The main thread uses AutoResetEvent to signal the\n        &#39; registered wait handle, which executes the callback\n        &#39; method.\n        Dim ev As New AutoResetEvent(false)\n\n        Dim ti As New TaskInfo()\n        ti.OtherInfo = &quot;First task&quot;\n        &#39; The TaskInfo for the task includes the registered wait\n        &#39; handle returned by RegisterWaitForSingleObject.  This\n        &#39; allows the wait to be terminated when the object has\n        &#39; been signaled once (see WaitProc).\n        ti.Handle = ThreadPool.RegisterWaitForSingleObject( _\n            ev, _\n            New WaitOrTimerCallback(AddressOf WaitProc), _\n            ti, _\n            1000, _\n            false _\n        )\n\n        &#39; The main thread waits about three seconds, to demonstrate \n        &#39; the time-outs on the queued task, and then signals.\n        Thread.Sleep(3100)\n        Console.WriteLine(&quot;Main thread signals.&quot;)\n        ev.Set()\n\n        &#39; The main thread sleeps, which should give the callback\n        &#39; method time to execute.  If you comment out this line, the\n        &#39; program usually ends before the ThreadPool thread can execute.\n        Thread.Sleep(1000)\n        &#39; If you start a thread yourself, you can wait for it to end\n        &#39; by calling Thread.Join.  This option is not available with \n        &#39; thread pool threads.\n    End Sub\n   \n    &#39; The callback method executes when the registered wait times out,\n    &#39; or when the WaitHandle (in this case AutoResetEvent) is signaled.\n    &#39; WaitProc unregisters the WaitHandle the first time the event is \n    &#39; signaled.\n    Public Shared Sub WaitProc(state As Object, timedOut As Boolean)\n        &#39; The state object must be cast to the correct type, because the\n        &#39; signature of the WaitOrTimerCallback delegate specifies type\n        &#39; Object.\n        Dim ti As TaskInfo = CType(state, TaskInfo)\n\n        Dim cause As String = &quot;TIMED OUT&quot;\n        If Not timedOut Then\n            cause = &quot;SIGNALED&quot;\n            &#39; If the callback method executes because the WaitHandle is\n            &#39; signaled, stop future execution of the callback method\n            &#39; by unregistering the WaitHandle.\n            If Not ti.Handle Is Nothing Then\n                ti.Handle.Unregister(Nothing)\n            End If\n        End If \n\n        Console.WriteLine(&quot;WaitProc( {0} ) executes on thread {1}; cause = {2}.&quot;, _\n            ti.OtherInfo, _\n            Thread.CurrentThread.GetHashCode().ToString(), _\n            cause _\n        )\n    End Sub\nEnd Class\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>WaitOrTimerCallback represents a callback method that you want to execute when a registered wait handle times out or is signaled. Create the delegate by passing your callback method to the WaitOrTimerCallback constructor. Your method must have the signature shown here.  </p>\n<p> Create the registered wait handle by passing the WaitOrTimerCallback delegate and a <a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a> to <a class=\"xref\" href=\"system.threading.threadpool#System_Threading_ThreadPool_RegisterWaitForSingleObject_\" data-linktype=\"relative-path\">RegisterWaitForSingleObject</a>. Your callback method executes each time the <a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">WaitHandle</a> times out or is signaled.  </p>\n<p> [Visual Basic]  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Visual Basic users can omit the WaitOrTimerCallback constructor, and simply use the <code>AddressOf</code> operator when passing the callback method to <a class=\"xref\" href=\"system.threading.threadpool#System_Threading_ThreadPool_RegisterWaitForSingleObject_\" data-linktype=\"relative-path\">RegisterWaitForSingleObject</a>. Visual Basic automatically calls the correct delegate constructor.  </p>\n</div>\n<p> If you want to pass information to your callback method, create an object that contains the necessary information and pass it to <a class=\"xref\" href=\"system.threading.threadpool#System_Threading_ThreadPool_RegisterWaitForSingleObject_\" data-linktype=\"relative-path\">RegisterWaitForSingleObject</a> when you create the registered wait handle. Each time your callback method executes, the <code>state</code> parameter contains this object.  </p>\n<p> For more information about using callback methods to synchronize thread pool threads, see <a href=\"../topic/the%20managed%20thread%20pool\" data-linktype=\"relative-path\">The Managed Thread Pool</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Threading.WaitOrTimerCallback.yml\">\r\n<meta name=\"APIName\" content=\"System.Threading.WaitOrTimerCallback\">\r\n<meta name=\"APIName\" content=\"System.Threading.WaitOrTimerCallback..ctor\">\r\n<meta name=\"APIName\" content=\"System.Threading.WaitOrTimerCallback.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Threading.WaitOrTimerCallback.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Threading.WaitOrTimerCallback.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"1dbcc784-7a09-e089-ab32-7a83a7aa948a\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a method to be called when a  is signaled or times out.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.threading/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Threading.WaitOrTimerCallback\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Threading.WaitOrTimerCallback.yml","open_to_public_contributors":false,"api_name":["System.Threading.WaitOrTimerCallback","System.Threading.WaitOrTimerCallback..ctor","System.Threading.WaitOrTimerCallback.Invoke","System.Threading.WaitOrTimerCallback.BeginInvoke","System.Threading.WaitOrTimerCallback.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Threading.WaitOrTimerCallback","System::Threading::WaitOrTimerCallback"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"1dbcc784-7a09-e089-ab32-7a83a7aa948a","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Threading/WaitOrTimerCallback.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"WaitOrTimerCallback delegate | Microsoft Docs","_op_ogTitle":"WaitOrTimerCallback delegate","description":"Represents a method to be called when a  is signaled or times out.\n","toc_asset_id":"api/_splitted/System.Threading/toc.json","toc_rel":"_splitted/System.Threading/toc.json","source_url":"","ms.assetid":"System.Threading.WaitOrTimerCallback","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.threading.waitortimercallback","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.threading.waitortimercallback","fileRelativePath":"api/System.Threading.WaitOrTimerCallback.html"},"themesRelativePathToOutputRoot":"_themes/"}