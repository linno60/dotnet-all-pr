{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">SafeWaitHandle</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents a wrapper class for a wait handle.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Security.SecurityCritical]\npublic sealed class SafeWaitHandle : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.constrainedexecution.criticalfinalizerobject\" data-linktype=\"relative-path\">CriticalFinalizerObject</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.safehandle\" data-linktype=\"relative-path\">SafeHandle</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.safehandles.safehandlezeroorminusoneisinvalid\" data-linktype=\"relative-path\">Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid</a></span></div><span class=\"lang-csharp\">SafeWaitHandle</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.win32.safehandles.safehandlezeroorminusoneisinvalid#Microsoft_Win32_SafeHandles_SafeHandleZeroOrMinusOneIsInvalid_IsInvalid\" data-linktype=\"relative-path\">IsInvalid</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.safehandle#System_Runtime_InteropServices_SafeHandle_Close\" data-linktype=\"relative-path\">Close()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.safehandle#System_Runtime_InteropServices_SafeHandle_DangerousAddRef_System_Boolean__\" data-linktype=\"relative-path\">DangerousAddRef(Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.safehandle#System_Runtime_InteropServices_SafeHandle_DangerousGetHandle\" data-linktype=\"relative-path\">DangerousGetHandle()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.safehandle#System_Runtime_InteropServices_SafeHandle_DangerousRelease\" data-linktype=\"relative-path\">DangerousRelease()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.safehandle#System_Runtime_InteropServices_SafeHandle_Dispose\" data-linktype=\"relative-path\">Dispose()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.safehandle#System_Runtime_InteropServices_SafeHandle_Dispose_System_Boolean_\" data-linktype=\"relative-path\">Dispose(Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.safehandle#System_Runtime_InteropServices_SafeHandle_handle\" data-linktype=\"relative-path\">handle</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.safehandle#System_Runtime_InteropServices_SafeHandle_IsClosed\" data-linktype=\"relative-path\">IsClosed</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.safehandle#System_Runtime_InteropServices_SafeHandle_SetHandle_System_IntPtr_\" data-linktype=\"relative-path\">SetHandle(IntPtr)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.interopservices.safehandle#System_Runtime_InteropServices_SafeHandle_SetHandleAsInvalid\" data-linktype=\"relative-path\">SetHandleAsInvalid()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates how to use interop to create a mutex using the SafeWaitHandle class and the unmanaged <code>CreateMutex</code> function.  </p>\n<pre><code class=\"lang-cs\" name=\"Microsoft.Win32.SafeHandles.SafeWaitHandle#1\">using System;\nusing Microsoft.Win32.SafeHandles;\nusing System.Runtime.InteropServices;\n\n\nclass SafeHandlesExample\n{\n\n    static void Main()\n    {\n        UnmanagedMutex uMutex = new UnmanagedMutex(&quot;YourCompanyName_SafeHandlesExample_MUTEX&quot;);\n\n        try\n        {\n\n            uMutex.Create();\n            Console.WriteLine(&quot;Mutex created. Press Enter to release it.&quot;);\n            Console.ReadLine();\n\n\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e);\n        }\n        finally\n        {\n            uMutex.Release();\n            Console.WriteLine(&quot;Mutex Released.&quot;);\n        }\n\n        Console.ReadLine();\n\n\n    }\n}\n\nclass UnmanagedMutex \n{\n\n\n    // Use interop to call the CreateMutex function.\n    // For more information about CreateMutex,\n    // see the unmanaged MSDN reference library.\n    [DllImport(&quot;kernel32.dll&quot;, CharSet=CharSet.Unicode)]\n    static extern SafeWaitHandle CreateMutex(IntPtr lpMutexAttributes, bool bInitialOwner,\n    string lpName);\n\n\n    // Use interop to call the ReleaseMutex function.\n    // For more information about ReleaseMutex,\n    // see the unmanaged MSDN reference library.\n    [DllImport(&quot;kernel32.dll&quot;)]\n    public static extern bool ReleaseMutex(SafeWaitHandle hMutex);\n\n\n\n    private SafeWaitHandle handleValue = null;\n    private IntPtr mutexAttrValue = IntPtr.Zero;\n    private string nameValue = null;\n\n    public UnmanagedMutex(string Name)\n    {\n        nameValue = Name;\n    }\n\n\n    public void Create()\n    {\n        if (nameValue == null &amp;&amp; nameValue.Length == 0)\n        {\n            throw new ArgumentNullException(&quot;nameValue&quot;);\n        }\n\n        handleValue = CreateMutex(mutexAttrValue,\n                                        true, nameValue);\n\n        // If the handle is invalid,\n        // get the last Win32 error \n        // and throw a Win32Exception.\n        if (handleValue.IsInvalid)\n        {\n            Marshal.ThrowExceptionForHR(Marshal.GetHRForLastWin32Error());\n        }\n    }\n\n    public SafeWaitHandle Handle\n    {\n        get\n        {\n            // If the handle is valid,\n            // return it.\n            if (!handleValue.IsInvalid)\n            {\n                return handleValue;\n            }\n            else\n            {\n                return null;\n            }\n        }\n\n    }\n\n    public string Name\n    {\n        get\n        {\n            return nameValue;\n        }\n\n    }\n\n\n    public void Release()\n    {\n        ReleaseMutex(handleValue);\n    }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Microsoft.Win32.SafeHandles.SafeWaitHandle#1\">Imports System\nImports Microsoft.Win32.SafeHandles\nImports System.Runtime.InteropServices\n\nClass SafeHandlesExample\n\n\n    Shared Sub Main()\n        Dim uMutex As New UnmanagedMutex(&quot;YourCompanyName_SafeHandlesExample_MUTEX&quot;)\n\n        Try\n\n            uMutex.Create()\n            Console.WriteLine(&quot;Mutex created. Press Enter to release it.&quot;)\n            Console.ReadLine()\n\n\n        Catch e As Exception\n            Console.WriteLine(e)\n        Finally\n            uMutex.Release()\n            Console.WriteLine(&quot;Mutex Released.&quot;)\n        End Try\n\n        Console.ReadLine()\n\n    End Sub\nEnd Class\n\n\nClass UnmanagedMutex\n\n\n\n    &#39; Use interop to call the CreateMutex function.\n    &#39; For more information about CreateMutex,\n    &#39; see the unmanaged MSDN reference library.\n    &lt;DllImport(&quot;kernel32.dll&quot;, CharSet:=CharSet.Unicode)&gt; _\n    Shared Function CreateMutex(ByVal lpMutexAttributes As IntPtr, ByVal bInitialOwner As Boolean, ByVal lpName As String) As SafeWaitHandle\n\n    End Function\n\n\n\n    &#39; Use interop to call the ReleaseMutex function.\n    &#39; For more information about ReleaseMutex,\n    &#39; see the unmanaged MSDN reference library.\n    &lt;DllImport(&quot;kernel32.dll&quot;)&gt; _\n    Public Shared Function ReleaseMutex(ByVal hMutex As SafeWaitHandle) As Boolean\n\n    End Function\n\n\n\n    Private handleValue As SafeWaitHandle = Nothing\n    Private mutexAttrValue As IntPtr = IntPtr.Zero\n    Private nameValue As String = Nothing\n\n\n    Public Sub New(ByVal Name As String)\n        nameValue = Name\n\n    End Sub\n\n\n\n    Public Sub Create()\n        If nameValue Is Nothing AndAlso nameValue.Length = 0 Then\n            Throw New ArgumentNullException(&quot;nameValue&quot;)\n        End If\n\n        handleValue = CreateMutex(mutexAttrValue, True, nameValue)\n\n        &#39; If the handle is invalid,\n        &#39; get the last Win32 error \n        &#39; and throw a Win32Exception.\n        If handleValue.IsInvalid Then\n            Marshal.ThrowExceptionForHR(Marshal.GetHRForLastWin32Error())\n        End If\n\n    End Sub\n\n\n    Public ReadOnly Property Handle() As SafeWaitHandle\n        Get\n            &#39; If the handle is valid,\n            &#39; return it.\n            If Not handleValue.IsInvalid Then\n                Return handleValue\n            Else\n                Return Nothing\n            End If\n        End Get\n    End Property\n\n\n    Public ReadOnly Property Name() As String\n        Get\n            Return nameValue\n        End Get\n    End Property\n\n\n\n    Public Sub Release()\n        ReleaseMutex(handleValue)\n\n    End Sub\nEnd Class\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The SafeWaitHandle class is used by the <a class=\"xref\" href=\"system.threading.waithandle\" data-linktype=\"relative-path\">System.Threading.WaitHandle</a> class. It is a wrapper for Win32 mutexes and auto and manual reset events.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> This type implements the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method in a <code>try</code>/<code>catch</code> block. To dispose of it indirectly, use a language construct such as <code>using</code> (in C#) or <code>Using</code> (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface topic.</p>\n</div>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_Win32_SafeHandles_SafeWaitHandle__ctor_System_IntPtr_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SafeWaitHandle(IntPtr,Boolean)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"microsoft.win32.safehandles.safewaithandle\" data-linktype=\"relative-path\">SafeWaitHandle</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public SafeWaitHandle (IntPtr existingHandle, bool ownsHandle);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>existingHandle</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a> object that represents the pre-existing handle to use.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>ownsHandle</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to reliably release the handle during the finalization phase; <code>false</code> to prevent reliable release (not recommended).</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"Microsoft_Win32_SafeHandles_SafeWaitHandle_ReleaseHandle\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ReleaseHandle()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected override bool ReleaseHandle ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>To be added.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/Microsoft.Win32.SafeHandles.SafeWaitHandle.yml\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SafeHandles.SafeWaitHandle\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SafeHandles.SafeWaitHandle..ctor\">\r\n<meta name=\"APIName\" content=\"Microsoft.Win32.SafeHandles.SafeWaitHandle.ReleaseHandle\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-24 01:41 AM\">\r\n<meta name=\"document_id\" content=\"4400d0ae-1cbf-3a42-ceb3-3924586296d4\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a wrapper class for a wait handle.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/microsoft.win32.safehandles/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"Microsoft.Win32.SafeHandles.SafeWaitHandle\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/Microsoft.Win32.SafeHandles.SafeWaitHandle.yml","open_to_public_contributors":false,"api_name":["Microsoft.Win32.SafeHandles.SafeWaitHandle","Microsoft.Win32.SafeHandles.SafeWaitHandle..ctor","Microsoft.Win32.SafeHandles.SafeWaitHandle.ReleaseHandle"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["Microsoft.Win32.SafeHandles.SafeWaitHandle","Microsoft::Win32::SafeHandles::SafeWaitHandle","Microsoft.Win32.SafeHandles.SafeWaitHandle.#ctor","Microsoft::Win32::SafeHandles::SafeWaitHandle::#ctor","Microsoft.Win32.SafeHandles.SafeWaitHandle.ReleaseHandle","Microsoft::Win32::SafeHandles::SafeWaitHandle::ReleaseHandle"],"dev_langs":["csharp"],"updated_at":"2017-03-24 01:41 AM","document_id":"4400d0ae-1cbf-3a42-ceb3-3924586296d4","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/Microsoft.Win32.SafeHandles/SafeWaitHandle.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SafeWaitHandle class | Microsoft Docs","_op_ogTitle":"SafeWaitHandle class","description":"Represents a wrapper class for a wait handle.\n","toc_asset_id":"api/_splitted/Microsoft.Win32.SafeHandles/toc.json","toc_rel":"_splitted/Microsoft.Win32.SafeHandles/toc.json","source_url":"","ms.assetid":"Microsoft.Win32.SafeHandles.SafeWaitHandle","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/microsoft.win32.safehandles.safewaithandle","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/microsoft.win32.safehandles.safewaithandle","fileRelativePath":"api/Microsoft.Win32.SafeHandles.SafeWaitHandle.html"},"themesRelativePathToOutputRoot":"_themes/"}