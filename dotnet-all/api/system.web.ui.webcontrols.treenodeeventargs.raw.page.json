{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">TreeNodeEventArgs</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides data for the <a class=\"xref\" href=\"system.web.ui.webcontrols.treeview#System_Web_UI_WebControls_TreeView_TreeNodeCheckChanged\" data-linktype=\"relative-path\">TreeNodeCheckChanged</a>, <a class=\"xref\" href=\"system.web.ui.webcontrols.treeview#System_Web_UI_WebControls_TreeView_TreeNodeCollapsed\" data-linktype=\"relative-path\">TreeNodeCollapsed</a>, <a class=\"xref\" href=\"system.web.ui.webcontrols.treeview#System_Web_UI_WebControls_TreeView_TreeNodeDataBound\" data-linktype=\"relative-path\">TreeNodeDataBound</a>, <a class=\"xref\" href=\"system.web.ui.webcontrols.treeview#System_Web_UI_WebControls_TreeView_TreeNodeExpanded\" data-linktype=\"relative-path\">TreeNodeExpanded</a>, and <a class=\"xref\" href=\"system.web.ui.webcontrols.treeview#System_Web_UI_WebControls_TreeView_TreeNodePopulate\" data-linktype=\"relative-path\">TreeNodePopulate</a> events of the <a class=\"xref\" href=\"system.web.ui.webcontrols.treeview\" data-linktype=\"relative-path\">TreeView</a> control. This class cannot be inherited.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public sealed class TreeNodeEventArgs : EventArgs</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></span></div><span class=\"lang-csharp\">TreeNodeEventArgs</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs#System_EventArgs_Empty\" data-linktype=\"relative-path\">Empty</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates how to populate a node dynamically using the TreeNodeEventArgs object that is passed to the event-handling method.  </p>\n<pre><code class=\"lang-cs\" name=\"TreeViewPopulateNodesFromClient#1\">\n&lt;%@ Page Language=&quot;C#&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data.SqlClient&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  void PopulateNode(Object sender, TreeNodeEventArgs e)\n  {\n\n    // Call the appropriate method to populate a node at a particular level.\n    switch(e.Node.Depth)\n    {\n      case 0:\n        // Populate the first-level nodes.\n        PopulateCategories(e.Node);\n        break;\n      case 1:\n        // Populate the second-level nodes.\n        PopulateProducts(e.Node);\n        break;\n      default:\n        // Do nothing.\n        break;\n    }\n    \n  }\n\n  void PopulateCategories(TreeNode node)\n  {\n    \n    // Query for the product categories. These are the values\n    // for the second-level nodes.\n    DataSet ResultSet = RunQuery(&quot;Select CategoryID, CategoryName From Categories&quot;);\n\n    // Create the second-level nodes.\n    if(ResultSet.Tables.Count &gt; 0)\n    {\n    \n      // Iterate through and create a new node for each row in the query results.\n      // Notice that the query results are stored in the table of the DataSet.\n      foreach (DataRow row in ResultSet.Tables[0].Rows)\n      {\n        \n        // Create the new node. Notice that the CategoryId is stored in the Value property \n        // of the node. This will make querying for items in a specific category easier when\n        // the third-level nodes are created. \n        TreeNode newNode = new TreeNode();\n        newNode.Text = row[&quot;CategoryName&quot;].ToString(); \n        newNode.Value = row[&quot;CategoryID&quot;].ToString();        \n\n        // Set the PopulateOnDemand property to true so that the child nodes can be \n        // dynamically populated.\n        newNode.PopulateOnDemand = true;\n        \n        // Set additional properties for the node.\n        newNode.SelectAction = TreeNodeSelectAction.Expand;\n        \n        // Add the new node to the ChildNodes collection of the parent node.\n        node.ChildNodes.Add(newNode);\n        \n      }\n      \n    }\n    \n  }\n\n  void PopulateProducts(TreeNode node)\n  {\n\n    // Query for the products of the current category. These are the values\n    // for the third-level nodes.\n    DataSet ResultSet = RunQuery(&quot;Select ProductName From Products Where CategoryID=&quot; + node.Value);\n\n    // Create the third-level nodes.\n    if(ResultSet.Tables.Count &gt; 0)\n    {\n    \n      // Iterate through and create a new node for each row in the query results.\n      // Notice that the query results are stored in the table of the DataSet.\n      foreach (DataRow row in ResultSet.Tables[0].Rows)\n      {\n      \n        // Create the new node.\n        TreeNode NewNode = new TreeNode(row[&quot;ProductName&quot;].ToString());\n        \n        // Set the PopulateOnDemand property to false, because these are leaf nodes and\n        // do not need to be populated.\n        NewNode.PopulateOnDemand = false;\n        \n        // Set additional properties for the node.\n        NewNode.SelectAction = TreeNodeSelectAction.None;\n        \n        // Add the new node to the ChildNodes collection of the parent node.\n        node.ChildNodes.Add(NewNode);\n        \n      }\n      \n    }\n\n  }\n\n  DataSet RunQuery(String QueryString)\n  {\n\n    // Declare the connection string. This example uses Microsoft SQL Server \n    // and connects to the Northwind sample database.\n    String ConnectionString = &quot;server=localhost;database=NorthWind;Integrated Security=SSPI&quot;; \n\n    SqlConnection DBConnection = new SqlConnection(ConnectionString);\n    SqlDataAdapter DBAdapter;\n    DataSet ResultsDataSet = new DataSet();\n\n    try\n    {\n\n      // Run the query and create a DataSet.\n      DBAdapter = new SqlDataAdapter(QueryString, DBConnection);\n      DBAdapter.Fill(ResultsDataSet);\n\n      // Close the database connection.\n      DBConnection.Close();\n\n    }\n    catch(Exception ex)\n    {\n\n      // Close the database connection if it is still open.\n      if(DBConnection.State == ConnectionState.Open)\n      {\n        DBConnection.Close();\n      }\n      \n      Message.Text = &quot;Unable to connect to the database.&quot;;\n\n    }\n\n    return ResultsDataSet;\n\n  }\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;TreeView PopulateNodesFromClient Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    \n      &lt;h3&gt;TreeView PopulateNodesFromClient Example&lt;/h3&gt;\n    \n      &lt;asp:TreeView id=&quot;LinksTreeView&quot;\n        Font-Names= &quot;Arial&quot;\n        ForeColor=&quot;Blue&quot;\n        EnableClientScript=&quot;true&quot;\n        PopulateNodesFromClient=&quot;true&quot;  \n        OnTreeNodePopulate=&quot;PopulateNode&quot;\n        runat=&quot;server&quot;&gt;\n         \n        &lt;Nodes&gt;\n        \n          &lt;asp:TreeNode Text=&quot;Inventory&quot; \n            SelectAction=&quot;Expand&quot;  \n            PopulateOnDemand=&quot;true&quot;/&gt;\n        \n        &lt;/Nodes&gt;\n        \n      &lt;/asp:TreeView&gt;\n      \n      &lt;br /&gt;&lt;br /&gt;\n      \n      &lt;asp:Label id=&quot;Message&quot; runat=&quot;server&quot;/&gt;\n\n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"TreeViewPopulateNodesFromClient#1\">\n&lt;%@ Page Language=&quot;VB&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data&quot; %&gt;\n&lt;%@ Import Namespace=&quot;System.Data.SqlClient&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Sub PopulateNode(ByVal sender As Object, ByVal e As TreeNodeEventArgs)\n\n    &#39; Call the appropriate method to populate a node at a particular level.\n    Select Case e.Node.Depth\n\n      Case 0\n        &#39; Populate the first-level nodes.\n        PopulateCategories(e.Node)\n\n      Case 1\n        &#39; Populate the second-level nodes.\n        PopulateProducts(e.Node)\n\n      Case Else\n        &#39; Do nothing.\n\n    End Select\n\n  End Sub\n\n  Sub PopulateCategories(ByVal node As TreeNode)\n\n    &#39; Query for the product categories. These are the values\n    &#39; for the second-level nodes.\n    Dim ResultSet As DataSet = RunQuery(&quot;Select CategoryID, CategoryName From Categories&quot;)\n\n    &#39; Create the second-level nodes.\n    If ResultSet.Tables.Count &gt; 0 Then\n\n      &#39; Iterate through and create a new node for each row in the query results.\n      &#39; Notice that the query results are stored in the table of the DataSet.\n      Dim row As DataRow\n\n      For Each row In ResultSet.Tables(0).Rows\n\n        &#39; Create the new node. Notice that the CategoryId is stored in the Value property \n        &#39; of the node. This will make querying for items in a specific category easier when\n        &#39; the third-level nodes are created. \n        Dim newNode As TreeNode = New TreeNode()\n        Newnode.Text = row(&quot;CategoryName&quot;).ToString() \n        Newnode.Value = row(&quot;CategoryID&quot;).ToString()\n\n        &#39; Set the PopulateOnDemand property to true so that the child nodes can be \n        &#39; dynamically populated.\n        newNode.PopulateOnDemand = True\n\n        &#39; Set additional properties for the node.\n        newNode.SelectAction = TreeNodeSelectAction.Expand\n\n        &#39; Add the new node to the ChildNodes collection of the parent node.\n        node.ChildNodes.Add(newNode)\n\n      Next\n\n    End If\n\n  End Sub\n\n  Sub PopulateProducts(ByVal node As TreeNode)\n\n    &#39; Query for the products of the current category. These are the values\n    &#39; for the third-level nodes.\n    Dim ResultSet As DataSet = RunQuery(&quot;Select ProductName From Products Where CategoryID=&quot; &amp; node.Value)\n\n    &#39; Create the third-level nodes.\n    If ResultSet.Tables.Count &gt; 0 Then\n\n      &#39; Iterate through and create a new node for each row in the query results.\n      &#39; Notice that the query results are stored in the table of the DataSet.\n      Dim row As DataRow\n\n      For Each row In ResultSet.Tables(0).Rows\n\n        &#39; Create the new node.\n        Dim NewNode As TreeNode = New TreeNode(row(&quot;ProductName&quot;).ToString())\n\n        &#39; Set the PopulateOnDemand property to false, because these are leaf nodes and\n        &#39; do not need to be populated.\n        NewNode.PopulateOnDemand = False\n\n        &#39; Set additional properties for the node.\n        NewNode.SelectAction = TreeNodeSelectAction.None\n\n        &#39; Add the new node to the ChildNodes collection of the parent node.\n        node.ChildNodes.Add(NewNode)\n\n      Next\n\n    End If\n\n  End Sub\n\n  Function RunQuery(ByVal QueryString As String) As DataSet\n\n    &#39; Declare the connection string. This example uses Microsoft SQL Server \n    &#39; and connects to the Northwind sample database.\n    Dim ConnectionString As String = &quot;server=localhost;database=NorthWind;Integrated Security=SSPI&quot;\n\n    Dim DBConnection As SqlConnection = New SqlConnection(ConnectionString)\n    Dim DBAdapter As SqlDataAdapter\n    Dim ResultsDataSet As DataSet = New DataSet\n\n    Try\n\n      &#39; Run the query and create a DataSet.\n      DBAdapter = New SqlDataAdapter(QueryString, DBConnection)\n      DBAdapter.Fill(ResultsDataSet)\n\n      &#39; Close the database connection.\n      DBConnection.Close()\n\n    Catch ex As Exception\n\n      &#39; Close the database connection if it is still open.\n      If DBConnection.State = ConnectionState.Open Then\n\n        DBConnection.Close()\n\n      End If\n\n      Message.Text = &quot;Unable to connect to the database.&quot;\n\n    End Try\n\n    Return ResultsDataSet\n\n  End Function\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;TreeView PopulateNodesFromClient Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    \n      &lt;h3&gt;TreeView PopulateNodesFromClient Example&lt;/h3&gt;\n    \n      &lt;asp:TreeView id=&quot;LinksTreeView&quot;\n        Font-Names= &quot;Arial&quot;\n        ForeColor=&quot;Blue&quot;\n        EnableClientScript=&quot;true&quot;\n        PopulateNodesFromClient=&quot;true&quot;  \n        OnTreeNodePopulate=&quot;PopulateNode&quot;\n        runat=&quot;server&quot;&gt;\n         \n        &lt;Nodes&gt;\n        \n          &lt;asp:TreeNode Text=&quot;Inventory&quot; \n            SelectAction=&quot;Expand&quot;  \n            PopulateOnDemand=&quot;true&quot;/&gt;\n        \n        &lt;/Nodes&gt;\n        \n      &lt;/asp:TreeView&gt;\n      \n      &lt;br /&gt;&lt;br /&gt;\n      \n      &lt;asp:Label id=&quot;Message&quot; runat=&quot;server&quot;/&gt;\n\n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The TreeNodeEventArgs class is used to store the event data that is passed to an event-handling method.  </p>\n<p> For a list of the initial property values for an instance of the TreeNodeEventArgs class, see <a class=\"xref\" href=\"system.web.ui.webcontrols.treenodeeventargs#System_Web_UI_WebControls_TreeNodeEventArgs__ctor_System_Web_UI_WebControls_TreeNode_\" data-linktype=\"relative-path\">TreeNodeEventArgs(TreeNode)</a>.  </p>\n<p> For more information about handling events, see <a href=\"http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67\" data-linktype=\"external\">NIB: Consuming Events</a>.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_WebControls_TreeNodeEventArgs__ctor_System_Web_UI_WebControls_TreeNode_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TreeNodeEventArgs(TreeNode)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.treenodeeventargs\" data-linktype=\"relative-path\">TreeNodeEventArgs</a> class using the specified <a class=\"xref\" href=\"system.web.ui.webcontrols.treenode\" data-linktype=\"relative-path\">TreeNode</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public TreeNodeEventArgs (System.Web.UI.WebControls.TreeNode node);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>node</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.treenode\" data-linktype=\"relative-path\">TreeNode</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.treenode\" data-linktype=\"relative-path\">TreeNode</a> that represents the current node when the event is raised.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use the TreeNodeEventArgs constructor to create and initialize a new instance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.treenodeeventargs\" data-linktype=\"relative-path\">TreeNodeEventArgs</a> class.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The TreeNodeEventArgs constructor is used primarily by control developers when raising events.  </p>\n</div>\n<p> The following table shows the initial property value for an instance of the <a class=\"xref\" href=\"system.web.ui.webcontrols.treenodeeventargs\" data-linktype=\"relative-path\">TreeNodeEventArgs</a> class.  </p>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Initial value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.web.ui.webcontrols.treenodeeventargs#System_Web_UI_WebControls_TreeNodeEventArgs_Node_\" data-linktype=\"relative-path\">Node</a></td>\n<td>The <a class=\"xref\" href=\"system.web.ui.webcontrols.treenode\" data-linktype=\"relative-path\">TreeNode</a> contained in <code>node</code>.</td>\n</tr>\n</tbody>\n</table>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_WebControls_TreeNodeEventArgs_Node\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Node</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the node that raised the event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Web.UI.WebControls.TreeNode Node { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.treenode\" data-linktype=\"relative-path\">TreeNode</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.treenode\" data-linktype=\"relative-path\">TreeNode</a> that represents the node that raised the event.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use the Node property to access the properties of the node that raised the event. The Node property returns a <a class=\"xref\" href=\"system.web.ui.webcontrols.treenode\" data-linktype=\"relative-path\">TreeNode</a> object and is commonly used to determine the contents of the node, to modify the properties of the node, or to add child nodes dynamically.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.TreeNodeEventArgs.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.TreeNodeEventArgs\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.TreeNodeEventArgs..ctor\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.TreeNodeEventArgs.Node\">\r\n<meta name=\"APILocation\" content=\"System.Web.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"a049cc94-ab81-9cfa-2601-db1ba8c627e1\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides data for the , , , , and  events of the  control. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.web.ui.webcontrols/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.WebControls.TreeNodeEventArgs\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.TreeNodeEventArgs.yml","open_to_public_contributors":false,"api_name":["System.Web.UI.WebControls.TreeNodeEventArgs","System.Web.UI.WebControls.TreeNodeEventArgs..ctor","System.Web.UI.WebControls.TreeNodeEventArgs.Node"],"api_location":["System.Web.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.WebControls.TreeNodeEventArgs","System::Web::UI::WebControls::TreeNodeEventArgs","System.Web.UI.WebControls.TreeNodeEventArgs.#ctor","System::Web::UI::WebControls::TreeNodeEventArgs::#ctor","System.Web.UI.WebControls.TreeNodeEventArgs.Node","System::Web::UI::WebControls::TreeNodeEventArgs::Node"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"a049cc94-ab81-9cfa-2601-db1ba8c627e1","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/TreeNodeEventArgs.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"TreeNodeEventArgs class | Microsoft Docs","_op_ogTitle":"TreeNodeEventArgs class","description":"Provides data for the , , , , and  events of the  control. This class cannot be inherited.\n","toc_asset_id":"api/_splitted/System.Web.UI.WebControls/toc.json","toc_rel":"_splitted/System.Web.UI.WebControls/toc.json","source_url":"","ms.assetid":"System.Web.UI.WebControls.TreeNodeEventArgs","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.treenodeeventargs","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.treenodeeventargs","fileRelativePath":"api/System.Web.UI.WebControls.TreeNodeEventArgs.html"},"themesRelativePathToOutputRoot":"_themes/"}