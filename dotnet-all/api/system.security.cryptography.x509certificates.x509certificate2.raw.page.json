{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">X509Certificate2</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents an X.509 certificate.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class X509Certificate2 : System.Security.Cryptography.X509Certificates.X509Certificate</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">System.Security.Cryptography.X509Certificates.X509Certificate</a></span></div><span class=\"lang-csharp\">X509Certificate2</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_CreateFromCertFile_System_String_\" data-linktype=\"relative-path\">CreateFromCertFile(String)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_CreateFromSignedFile_System_String_\" data-linktype=\"relative-path\">CreateFromSignedFile(String)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_Dispose\" data-linktype=\"relative-path\">Dispose()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_Dispose_System_Boolean_\" data-linktype=\"relative-path\">Dispose(Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_Equals_System_Security_Cryptography_X509Certificates_X509Certificate_\" data-linktype=\"relative-path\">Equals(X509Certificate)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_Export_System_Security_Cryptography_X509Certificates_X509ContentType_\" data-linktype=\"relative-path\">Export(X509ContentType)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_Export_System_Security_Cryptography_X509Certificates_X509ContentType_System_Security_SecureString_\" data-linktype=\"relative-path\">Export(X509ContentType,SecureString)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_Export_System_Security_Cryptography_X509Certificates_X509ContentType_System_String_\" data-linktype=\"relative-path\">Export(X509ContentType,String)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_FormatDate_System_DateTime_\" data-linktype=\"relative-path\">FormatDate(DateTime)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_GetCertHash\" data-linktype=\"relative-path\">GetCertHash()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_GetCertHashString\" data-linktype=\"relative-path\">GetCertHashString()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_GetEffectiveDateString\" data-linktype=\"relative-path\">GetEffectiveDateString()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_GetExpirationDateString\" data-linktype=\"relative-path\">GetExpirationDateString()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_GetFormat\" data-linktype=\"relative-path\">GetFormat()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_GetIssuerName\" data-linktype=\"relative-path\">GetIssuerName()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_GetKeyAlgorithm\" data-linktype=\"relative-path\">GetKeyAlgorithm()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_GetKeyAlgorithmParameters\" data-linktype=\"relative-path\">GetKeyAlgorithmParameters()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_GetKeyAlgorithmParametersString\" data-linktype=\"relative-path\">GetKeyAlgorithmParametersString()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_GetName\" data-linktype=\"relative-path\">GetName()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_GetPublicKey\" data-linktype=\"relative-path\">GetPublicKey()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_GetPublicKeyString\" data-linktype=\"relative-path\">GetPublicKeyString()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_GetRawCertData\" data-linktype=\"relative-path\">GetRawCertData()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_GetRawCertDataString\" data-linktype=\"relative-path\">GetRawCertDataString()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_GetSerialNumber\" data-linktype=\"relative-path\">GetSerialNumber()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_GetSerialNumberString\" data-linktype=\"relative-path\">GetSerialNumberString()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_Handle\" data-linktype=\"relative-path\">Handle</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_Issuer\" data-linktype=\"relative-path\">Issuer</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_Subject\" data-linktype=\"relative-path\">Subject</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_System_Runtime_Serialization_IDeserializationCallback_OnDeserialization_System_Object_\" data-linktype=\"relative-path\">IDeserializationCallback.OnDeserialization(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_System_Runtime_Serialization_ISerializable_GetObjectData_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\" data-linktype=\"relative-path\">ISerializable.GetObjectData(SerializationInfo,StreamingContext)</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example demonstrates how to use an X509Certificate2 object to encrypt and decrypt a file.  </p>\n<pre><code class=\"lang-vb\" name=\"X509Certificate2#1\">Imports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.X509Certificates\nImports System.IO\nImports System.Text\n\n\n&#39; To run this sample use the Certificate Creation Tool (Makecert.exe) to generate a test X.509 certificate and \n&#39; place it in the local user store. \n&#39; To generate an exchange key and make the key exportable run the following command from a Visual Studio command prompt: \n&#39;makecert -r -pe -n &quot;CN=CERT_SIGN_TEST_CERT&quot; -b 01/01/2010 -e 01/01/2012 -sky exchange -ss my\n\nClass Program\n\n    &#39; Path variables for source, encryption, and\n    &#39; decryption folders. Must end with a backslash.\n    Private Shared encrFolder As String = &quot;C:\\Encrypt\\&quot;\n    Private Shared decrFolder As String = &quot;C:\\Decrypt\\&quot;\n    Private Shared originalFile As String = &quot;TestData.txt&quot;\n    Private Shared encryptedFile As String = &quot;TestData.enc&quot;\n\n\n    Shared Sub Main(ByVal args() As String)\n\n        &#39; Create an input file with test data.\n        Dim sw As StreamWriter = File.CreateText(originalFile)\n        sw.WriteLine(&quot;Test data to be encrypted&quot;)\n        sw.Close()\n\n        &#39; Get the certifcate to use to encrypt the key.\n        Dim cert As X509Certificate2 = GetCertificateFromStore(&quot;CN=CERT_SIGN_TEST_CERT&quot;)\n        If cert Is Nothing Then\n            Console.WriteLine(&quot;Certificatge &#39;CN=CERT_SIGN_TEST_CERT&#39; not found.&quot;)\n            Console.ReadLine()\n        End If\n\n\n        &#39; Encrypt the file using the public key from the certificate.\n        EncryptFile(originalFile, CType(cert.PublicKey.Key, RSACryptoServiceProvider))\n\n        &#39; Decrypt the file using the private key from the certificate.\n        DecryptFile(encryptedFile, CType(cert.PrivateKey, RSACryptoServiceProvider))\n\n        &#39;Display the original data and the decrypted data.\n        Console.WriteLine(&quot;Original:   {0}&quot;, File.ReadAllText(originalFile))\n        Console.WriteLine(&quot;Round Trip: {0}&quot;, File.ReadAllText(decrFolder + originalFile))\n        Console.WriteLine(&quot;Press the Enter key to exit.&quot;)\n        Console.ReadLine()\n\n    End Sub &#39;Main\n\n    Private Shared Function GetCertificateFromStore(ByVal certName As String) As X509Certificate2\n        &#39; Get the certificate store for the current user.\n        Dim store As New X509Store(StoreLocation.CurrentUser)\n        Try\n            store.Open(OpenFlags.ReadOnly)\n\n            &#39; Place all certificates in an X509Certificate2Collection object.\n            Dim certCollection As X509Certificate2Collection = store.Certificates\n            &#39; If using a certificate with a trusted root you do not need to FindByTimeValid, instead use:\n            &#39; currentCerts.Find(X509FindType.FindBySubjectDistinguishedName, certName, true);\n            Dim currentCerts As X509Certificate2Collection = certCollection.Find(X509FindType.FindByTimeValid, DateTime.Now, False)\n            Dim signingCert As X509Certificate2Collection = currentCerts.Find(X509FindType.FindBySubjectDistinguishedName, certName, False)\n            If signingCert.Count = 0 Then\n                Return Nothing\n            End If &#39; Return the first certificate in the collection, has the right name and is current.\n            Return signingCert(0)\n        Finally\n            store.Close()\n        End Try\n\n\n    End Function &#39;GetCertificateFromStore\n\n    &#39; Encrypt a file using a public key.\n    Private Shared Sub EncryptFile(ByVal inFile As String, ByVal rsaPublicKey As RSACryptoServiceProvider)\n        Dim aesManaged As New AesManaged()\n        Try\n            &#39; Create instance of AesManaged for\n            &#39; symetric encryption of the data.\n            aesManaged.KeySize = 256\n            aesManaged.BlockSize = 128\n            aesManaged.Mode = CipherMode.CBC\n            Dim transform As ICryptoTransform = aesManaged.CreateEncryptor()\n            Try\n                Dim keyFormatter As New RSAPKCS1KeyExchangeFormatter(rsaPublicKey)\n                Dim keyEncrypted As Byte() = keyFormatter.CreateKeyExchange(aesManaged.Key, aesManaged.GetType())\n\n                &#39; Create byte arrays to contain\n                &#39; the length values of the key and IV.\n                Dim LenK(3) As Byte\n                Dim LenIV(3) As Byte\n\n                Dim lKey As Integer = keyEncrypted.Length\n                LenK = BitConverter.GetBytes(lKey)\n                Dim lIV As Integer = aesManaged.IV.Length\n                LenIV = BitConverter.GetBytes(lIV)\n\n                &#39; Write the following to the FileStream\n                &#39; for the encrypted file (outFs):\n                &#39; - length of the key\n                &#39; - length of the IV\n                &#39; - ecrypted key\n                &#39; - the IV\n                &#39; - the encrypted cipher content\n                Dim startFileName As Integer = inFile.LastIndexOf(&quot;\\&quot;) + 1\n                &#39; Change the file&#39;s extension to &quot;.enc&quot;\n                Dim outFile As String = encrFolder + inFile.Substring(startFileName, inFile.LastIndexOf(&quot;.&quot;) - startFileName) + &quot;.enc&quot;\n                Directory.CreateDirectory(encrFolder)\n\n                Dim outFs As New FileStream(outFile, FileMode.Create)\n                Try\n\n                    outFs.Write(LenK, 0, 4)\n                    outFs.Write(LenIV, 0, 4)\n                    outFs.Write(keyEncrypted, 0, lKey)\n                    outFs.Write(aesManaged.IV, 0, lIV)\n\n                    &#39; Now write the cipher text using\n                    &#39; a CryptoStream for encrypting.\n                    Dim outStreamEncrypted As New CryptoStream(outFs, transform, CryptoStreamMode.Write)\n                    Try\n\n                        &#39; By encrypting a chunk at\n                        &#39; a time, you can save memory\n                        &#39; and accommodate large files.\n                        Dim count As Integer = 0\n                        Dim offset As Integer = 0\n\n                        &#39; blockSizeBytes can be any arbitrary size.\n                        Dim blockSizeBytes As Integer = aesManaged.BlockSize / 8\n                        Dim data(blockSizeBytes) As Byte\n                        Dim bytesRead As Integer = 0\n\n                        Dim inFs As New FileStream(inFile, FileMode.Open)\n                        Try\n                            Do\n                                count = inFs.Read(data, 0, blockSizeBytes)\n                                offset += count\n                                outStreamEncrypted.Write(data, 0, count)\n                                bytesRead += blockSizeBytes\n                            Loop While count &gt; 0\n                            inFs.Close()\n                        Finally\n                            inFs.Dispose()\n                        End Try\n                        outStreamEncrypted.FlushFinalBlock()\n                        outStreamEncrypted.Close()\n                    Finally\n                        outStreamEncrypted.Dispose()\n                    End Try\n                    outFs.Close()\n                Finally\n                    outFs.Dispose()\n                End Try\n            Finally\n                transform.Dispose()\n            End Try\n        Finally\n            aesManaged.Dispose()\n        End Try\n\n    End Sub &#39;EncryptFile\n\n\n    &#39; Decrypt a file using a private key.\n    Private Shared Sub DecryptFile(ByVal inFile As String, ByVal rsaPrivateKey As RSACryptoServiceProvider)\n\n        &#39; Create instance of AesManaged for\n        &#39; symetric decryption of the data.\n        Dim aesManaged As New AesManaged()\n        Try\n            aesManaged.KeySize = 256\n            aesManaged.BlockSize = 128\n            aesManaged.Mode = CipherMode.CBC\n\n            &#39; Create byte arrays to get the length of\n            &#39; the encrypted key and IV.\n            &#39; These values were stored as 4 bytes each\n            &#39; at the beginning of the encrypted package.\n            Dim LenK() As Byte = New Byte(4 - 1) {}\n            Dim LenIV() As Byte = New Byte(4 - 1) {}\n\n            &#39; Consruct the file name for the decrypted file.\n            Dim outFile As String = decrFolder + inFile.Substring(0, inFile.LastIndexOf(&quot;.&quot;)) + &quot;.txt&quot;\n\n            &#39; Use FileStream objects to read the encrypted\n            &#39; file (inFs) and save the decrypted file (outFs).\n            Dim inFs As New FileStream(encrFolder + inFile, FileMode.Open)\n            Try\n\n                inFs.Seek(0, SeekOrigin.Begin)\n                inFs.Seek(0, SeekOrigin.Begin)\n                inFs.Read(LenK, 0, 3)\n                inFs.Seek(4, SeekOrigin.Begin)\n                inFs.Read(LenIV, 0, 3)\n\n                &#39; Convert the lengths to integer values.\n                Dim lengthK As Integer = BitConverter.ToInt32(LenK, 0)\n                Dim lengthIV As Integer = BitConverter.ToInt32(LenIV, 0)\n\n                &#39; Determine the start postition of\n                &#39; the ciphter text (startC)\n                &#39; and its length(lenC).\n                Dim startC As Integer = lengthK + lengthIV + 8\n                Dim lenC As Integer = (CType(inFs.Length, Integer) - startC)\n\n                &#39; Create the byte arrays for\n                &#39; the encrypted Rijndael key,\n                &#39; the IV, and the cipher text.\n                Dim KeyEncrypted() As Byte = New Byte(lengthK - 1) {}\n                Dim IV() As Byte = New Byte(lengthIV - 1) {}\n\n                &#39; Extract the key and IV\n                &#39; starting from index 8\n                &#39; after the length values.\n                inFs.Seek(8, SeekOrigin.Begin)\n                inFs.Read(KeyEncrypted, 0, lengthK)\n                inFs.Seek(8 + lengthK, SeekOrigin.Begin)\n                inFs.Read(IV, 0, lengthIV)\n                Directory.CreateDirectory(decrFolder)\n                &#39; Use RSACryptoServiceProvider\n                &#39; to decrypt the Rijndael key.\n                Dim KeyDecrypted As Byte() = rsaPrivateKey.Decrypt(KeyEncrypted, False)\n\n                &#39; Decrypt the key.\n                Dim transform As ICryptoTransform = aesManaged.CreateDecryptor(KeyDecrypted, IV)\n                &#39; Decrypt the cipher text from\n                &#39; from the FileSteam of the encrypted\n                &#39; file (inFs) into the FileStream\n                &#39; for the decrypted file (outFs).\n                Dim outFs As New FileStream(outFile, FileMode.Create)\n                Try\n                    &#39; Decrypt the cipher text from\n                    &#39; from the FileSteam of the encrypted\n                    &#39; file (inFs) into the FileStream\n                    &#39; for the decrypted file (outFs).\n\n                    Dim count As Integer = 0\n                    Dim offset As Integer = 0\n\n                    Dim blockSizeBytes As Integer = aesManaged.BlockSize / 8\n                    Dim data(blockSizeBytes) As Byte\n\n                    &#39; By decrypting a chunk a time,\n                    &#39; you can save memory and\n                    &#39; accommodate large files.\n                    &#39; Start at the beginning\n                    &#39; of the cipher text.\n                    inFs.Seek(startC, SeekOrigin.Begin)\n                    Dim outStreamDecrypted As New CryptoStream(outFs, transform, CryptoStreamMode.Write)\n                    Try\n                        Do\n                            count = inFs.Read(data, 0, blockSizeBytes)\n                            offset += count\n                            outStreamDecrypted.Write(data, 0, count)\n                        Loop While count &gt; 0\n\n                        outStreamDecrypted.FlushFinalBlock()\n                        outStreamDecrypted.Close()\n                    Finally\n                        outStreamDecrypted.Dispose()\n                    End Try\n                    outFs.Close()\n                Finally\n                    outFs.Dispose()\n                End Try\n                inFs.Close()\n\n            Finally\n                inFs.Dispose()\n\n            End Try\n\n        Finally\n            aesManaged.Dispose()\n        End Try\n\n\n    End Sub &#39;DecryptFile \nEnd Class &#39;Program\n</code></pre><pre><code class=\"lang-cs\" name=\"X509Certificate2#1\">using System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.X509Certificates;\nusing System.IO;\nusing System.Text;\n\n// To run this sample use the Certificate Creation Tool (Makecert.exe) to generate a test X.509 certificate and \n// place it in the local user store. \n// To generate an exchange key and make the key exportable run the following command from a Visual Studio command prompt: \n\n//makecert -r -pe -n &quot;CN=CERT_SIGN_TEST_CERT&quot; -b 01/01/2010 -e 01/01/2012 -sky exchange -ss my\nnamespace X509CertEncrypt\n{\n    class Program\n    {\n\n        // Path variables for source, encryption, and\n        // decryption folders. Must end with a backslash.\n        private static string encrFolder = @&quot;C:\\Encrypt\\&quot;;\n        private static string decrFolder = @&quot;C:\\Decrypt\\&quot;;\n        private static string originalFile = &quot;TestData.txt&quot;;\n        private static string encryptedFile = &quot;TestData.enc&quot;;\n\n        static void Main(string[] args)\n        {\n\n            // Create an input file with test data.\n            StreamWriter sw = File.CreateText(originalFile);\n            sw.WriteLine(&quot;Test data to be encrypted&quot;);\n            sw.Close();\n\n            // Get the certifcate to use to encrypt the key.\n            X509Certificate2 cert = GetCertificateFromStore(&quot;CN=CERT_SIGN_TEST_CERT&quot;);\n            if (cert == null)\n            {\n                Console.WriteLine(&quot;Certificatge &#39;CN=CERT_SIGN_TEST_CERT&#39; not found.&quot;);\n                Console.ReadLine();\n            }\n\n\n            // Encrypt the file using the public key from the certificate.\n            EncryptFile(originalFile, (RSACryptoServiceProvider)cert.PublicKey.Key);\n\n            // Decrypt the file using the private key from the certificate.\n            DecryptFile(encryptedFile, (RSACryptoServiceProvider)cert.PrivateKey);\n\n            //Display the original data and the decrypted data.\n            Console.WriteLine(&quot;Original:   {0}&quot;, File.ReadAllText(originalFile));\n            Console.WriteLine(&quot;Round Trip: {0}&quot;, File.ReadAllText(decrFolder + originalFile));\n            Console.WriteLine(&quot;Press the Enter key to exit.&quot;);\n            Console.ReadLine();\n        }\n        private static X509Certificate2 GetCertificateFromStore(string certName)\n        {\n\n            // Get the certificate store for the current user.\n            X509Store store = new X509Store(StoreLocation.CurrentUser);\n            try\n            {\n                store.Open(OpenFlags.ReadOnly);\n\n                // Place all certificates in an X509Certificate2Collection object.\n                X509Certificate2Collection certCollection = store.Certificates;\n                // If using a certificate with a trusted root you do not need to FindByTimeValid, instead:\n                // currentCerts.Find(X509FindType.FindBySubjectDistinguishedName, certName, true);\n                X509Certificate2Collection currentCerts = certCollection.Find(X509FindType.FindByTimeValid, DateTime.Now, false);\n                X509Certificate2Collection signingCert = currentCerts.Find(X509FindType.FindBySubjectDistinguishedName, certName, false);\n                if (signingCert.Count == 0)\n                    return null;\n                // Return the first certificate in the collection, has the right name and is current.\n                return signingCert[0];\n            }\n            finally\n            {\n                store.Close();\n            }\n\n        }\n\n        // Encrypt a file using a public key.\n        private static void EncryptFile(string inFile, RSACryptoServiceProvider rsaPublicKey)\n        {\n            using (AesManaged aesManaged = new AesManaged())\n            {\n                // Create instance of AesManaged for\n                // symetric encryption of the data.\n                aesManaged.KeySize = 256;\n                aesManaged.BlockSize = 128;\n                aesManaged.Mode = CipherMode.CBC;\n                using (ICryptoTransform transform = aesManaged.CreateEncryptor())\n                {\n                    RSAPKCS1KeyExchangeFormatter keyFormatter = new RSAPKCS1KeyExchangeFormatter(rsaPublicKey);\n                    byte[] keyEncrypted = keyFormatter.CreateKeyExchange(aesManaged.Key, aesManaged.GetType());\n\n                    // Create byte arrays to contain\n                    // the length values of the key and IV.\n                    byte[] LenK = new byte[4];\n                    byte[] LenIV = new byte[4];\n\n                    int lKey = keyEncrypted.Length;\n                    LenK = BitConverter.GetBytes(lKey);\n                    int lIV = aesManaged.IV.Length;\n                    LenIV = BitConverter.GetBytes(lIV);\n\n                    // Write the following to the FileStream\n                    // for the encrypted file (outFs):\n                    // - length of the key\n                    // - length of the IV\n                    // - ecrypted key\n                    // - the IV\n                    // - the encrypted cipher content\n\n                    int startFileName = inFile.LastIndexOf(&quot;\\\\&quot;) + 1;\n                    // Change the file&#39;s extension to &quot;.enc&quot;\n                    string outFile = encrFolder + inFile.Substring(startFileName, inFile.LastIndexOf(&quot;.&quot;) - startFileName) + &quot;.enc&quot;;\n                    Directory.CreateDirectory(encrFolder);\n\n                    using (FileStream outFs = new FileStream(outFile, FileMode.Create))\n                    {\n\n                        outFs.Write(LenK, 0, 4);\n                        outFs.Write(LenIV, 0, 4);\n                        outFs.Write(keyEncrypted, 0, lKey);\n                        outFs.Write(aesManaged.IV, 0, lIV);\n\n                        // Now write the cipher text using\n                        // a CryptoStream for encrypting.\n                        using (CryptoStream outStreamEncrypted = new CryptoStream(outFs, transform, CryptoStreamMode.Write))\n                        {\n\n                            // By encrypting a chunk at\n                            // a time, you can save memory\n                            // and accommodate large files.\n                            int count = 0;\n                            int offset = 0;\n\n                            // blockSizeBytes can be any arbitrary size.\n                            int blockSizeBytes = aesManaged.BlockSize / 8;\n                            byte[] data = new byte[blockSizeBytes];\n                            int bytesRead = 0;\n\n                            using (FileStream inFs = new FileStream(inFile, FileMode.Open))\n                            {\n                                do\n                                {\n                                    count = inFs.Read(data, 0, blockSizeBytes);\n                                    offset += count;\n                                    outStreamEncrypted.Write(data, 0, count);\n                                    bytesRead += blockSizeBytes;\n                                }\n                                while (count &gt; 0);\n                                inFs.Close();\n                            }\n                            outStreamEncrypted.FlushFinalBlock();\n                            outStreamEncrypted.Close();\n                        }\n                        outFs.Close();\n                    }\n                }\n            }\n        }\n\n\n        // Decrypt a file using a private key.\n        private static void DecryptFile(string inFile, RSACryptoServiceProvider rsaPrivateKey)\n        {\n\n            // Create instance of AesManaged for\n            // symetric decryption of the data.\n            using (AesManaged aesManaged = new AesManaged())\n            {\n                aesManaged.KeySize = 256;\n                aesManaged.BlockSize = 128;\n                aesManaged.Mode = CipherMode.CBC;\n\n                // Create byte arrays to get the length of\n                // the encrypted key and IV.\n                // These values were stored as 4 bytes each\n                // at the beginning of the encrypted package.\n                byte[] LenK = new byte[4];\n                byte[] LenIV = new byte[4];\n\n                // Consruct the file name for the decrypted file.\n                string outFile = decrFolder + inFile.Substring(0, inFile.LastIndexOf(&quot;.&quot;)) + &quot;.txt&quot;;\n\n                // Use FileStream objects to read the encrypted\n                // file (inFs) and save the decrypted file (outFs).\n                using (FileStream inFs = new FileStream(encrFolder + inFile, FileMode.Open))\n                {\n\n                    inFs.Seek(0, SeekOrigin.Begin);\n                    inFs.Seek(0, SeekOrigin.Begin);\n                    inFs.Read(LenK, 0, 3);\n                    inFs.Seek(4, SeekOrigin.Begin);\n                    inFs.Read(LenIV, 0, 3);\n\n                    // Convert the lengths to integer values.\n                    int lenK = BitConverter.ToInt32(LenK, 0);\n                    int lenIV = BitConverter.ToInt32(LenIV, 0);\n\n                    // Determine the start postition of\n                    // the ciphter text (startC)\n                    // and its length(lenC).\n                    int startC = lenK + lenIV + 8;\n                    int lenC = (int)inFs.Length - startC;\n\n                    // Create the byte arrays for\n                    // the encrypted AesManaged key,\n                    // the IV, and the cipher text.\n                    byte[] KeyEncrypted = new byte[lenK];\n                    byte[] IV = new byte[lenIV];\n\n                    // Extract the key and IV\n                    // starting from index 8\n                    // after the length values.\n                    inFs.Seek(8, SeekOrigin.Begin);\n                    inFs.Read(KeyEncrypted, 0, lenK);\n                    inFs.Seek(8 + lenK, SeekOrigin.Begin);\n                    inFs.Read(IV, 0, lenIV);\n                    Directory.CreateDirectory(decrFolder);\n                    // Use RSACryptoServiceProvider\n                    // to decrypt the AesManaged key.\n                    byte[] KeyDecrypted = rsaPrivateKey.Decrypt(KeyEncrypted, false);\n\n                    // Decrypt the key.\n                    using (ICryptoTransform transform = aesManaged.CreateDecryptor(KeyDecrypted, IV))\n                    {\n\n                        // Decrypt the cipher text from\n                        // from the FileSteam of the encrypted\n                        // file (inFs) into the FileStream\n                        // for the decrypted file (outFs).\n                        using (FileStream outFs = new FileStream(outFile, FileMode.Create))\n                        {\n\n                            int count = 0;\n                            int offset = 0;\n\n                            int blockSizeBytes = aesManaged.BlockSize / 8;\n                            byte[] data = new byte[blockSizeBytes];\n\n                            // By decrypting a chunk a time,\n                            // you can save memory and\n                            // accommodate large files.\n\n                            // Start at the beginning\n                            // of the cipher text.\n                            inFs.Seek(startC, SeekOrigin.Begin);\n                            using (CryptoStream outStreamDecrypted = new CryptoStream(outFs, transform, CryptoStreamMode.Write))\n                            {\n                                do\n                                {\n                                    count = inFs.Read(data, 0, blockSizeBytes);\n                                    offset += count;\n                                    outStreamDecrypted.Write(data, 0, count);\n\n                                }\n                                while (count &gt; 0);\n\n                                outStreamDecrypted.FlushFinalBlock();\n                                outStreamDecrypted.Close();\n                            }\n                            outFs.Close();\n                        }\n                        inFs.Close();\n                    }\n\n                }\n\n            }\n        }\n\n    }\n}\n</code></pre><p> The following example creates a command-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  </p>\n<pre><code class=\"lang-cpp\" name=\"CertInfo#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Permissions;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography::X509Certificates;\n\n//Reads a file.\narray&lt;Byte&gt;^ ReadFile( String^ fileName )\n{\n   FileStream^ f = gcnew FileStream( fileName,FileMode::Open,FileAccess::Read );\n   int size = (int)f-&gt;Length;\n   array&lt;Byte&gt;^data = gcnew array&lt;Byte&gt;(size);\n   size = f-&gt;Read( data, 0, size );\n   f-&gt;Close();\n   return data;\n}\n\n[SecurityPermissionAttribute(SecurityAction::LinkDemand, Unrestricted = true)]\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n\n   //Test for correct number of arguments.\n   if ( args-&gt;Length &lt; 2 )\n   {\n      Console::WriteLine( &quot;Usage: CertInfo &lt;filename&gt;&quot; );\n      return  -1;\n   }\n\n   try\n   {\n      System::Security::Cryptography::X509Certificates::X509Certificate2 ^ x509 =\n            gcnew System::Security::Cryptography::X509Certificates::X509Certificate2;\n\n      //Create X509Certificate2 object from .cer file.\n      array&lt;Byte&gt;^rawData = ReadFile( args[ 1 ] );\n\n      x509-&gt;Import(rawData);\n\n      //Print to console information contained in the certificate.\n      Console::WriteLine( &quot;{0}Subject: {1}{0}&quot;, Environment::NewLine, x509-&gt;Subject );\n      Console::WriteLine( &quot;{0}Issuer: {1}{0}&quot;, Environment::NewLine, x509-&gt;Issuer );\n      Console::WriteLine( &quot;{0}Version: {1}{0}&quot;, Environment::NewLine, x509-&gt;Version );\n      Console::WriteLine( &quot;{0}Valid Date: {1}{0}&quot;, Environment::NewLine, x509-&gt;NotBefore );\n      Console::WriteLine( &quot;{0}Expiry Date: {1}{0}&quot;, Environment::NewLine, x509-&gt;NotAfter );\n      Console::WriteLine( &quot;{0}Thumbprint: {1}{0}&quot;, Environment::NewLine, x509-&gt;Thumbprint );\n      Console::WriteLine( &quot;{0}Serial Number: {1}{0}&quot;, Environment::NewLine, x509-&gt;SerialNumber );\n      Console::WriteLine( &quot;{0}Friendly Name: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;Oid-&gt;FriendlyName );\n      Console::WriteLine( &quot;{0}Public Key Format: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;EncodedKeyValue-&gt;Format(true) );\n      Console::WriteLine( &quot;{0}Raw Data Length: {1}{0}&quot;, Environment::NewLine, x509-&gt;RawData-&gt;Length );\n      Console::WriteLine( &quot;{0}Certificate to string: {1}{0}&quot;, Environment::NewLine, x509-&gt;ToString( true ) );\n      Console::WriteLine( &quot;{0}Certificate to XML String: {1}{0}&quot;, Environment::NewLine, x509-&gt;PublicKey-&gt;Key-&gt;ToXmlString( false ) );\n\n      //Add the certificate to a X509Store.\n      X509Store ^ store = gcnew X509Store;\n      store-&gt;Open( OpenFlags::MaxAllowed );\n      store-&gt;Add( x509 );\n      store-&gt;Close();\n   }\n   catch ( DirectoryNotFoundException^ )\n   {\n      Console::WriteLine( &quot;Error: The directory specified could not be found.&quot; );\n   }\n   catch ( IOException^ )\n   {\n      Console::WriteLine( &quot;Error: A file in the directory could not be accessed.&quot; );\n   }\n   catch ( NullReferenceException^ )\n   {\n      Console::WriteLine( &quot;File must be a .cer file. Program does not have access to that type of file.&quot; );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"CertInfo#1\">using System;\nusing System.Security.Cryptography;\nusing System.Security.Permissions;\nusing System.IO;\nusing System.Security.Cryptography.X509Certificates;\n\n\nclass CertInfo\n{\n\t//Reads a file.\n\tinternal static byte[] ReadFile (string fileName)\n\t{\n\t\tFileStream f = new FileStream(fileName, FileMode.Open, FileAccess.Read);\n\t\tint size = (int)f.Length;\n\t\tbyte[] data = new byte[size];\n\t\tsize = f.Read(data, 0, size);\n\t\tf.Close();\n\t\treturn data;\n\t}\n\t//Main method begins here.\n\tstatic void Main(string[] args)\n\t{\n\t\t//Test for correct number of arguments.\n\t\tif (args.Length &lt; 1)\n\t\t{\n\t\t\tConsole.WriteLine(&quot;Usage: CertInfo &lt;filename&gt;&quot;);\n\t\t\treturn;\n\t\t}\n\t\ttry\n\t\t{\n\t\t\tX509Certificate2 x509 = new X509Certificate2();\n\t\t\t//Create X509Certificate2 object from .cer file.\n\t\t\tbyte[] rawData = ReadFile(args[0]);\n\n\t\t\tx509.Import(rawData);\n\n\t\t\t//Print to console information contained in the certificate.\n\t\t\tConsole.WriteLine(&quot;{0}Subject: {1}{0}&quot;, Environment.NewLine,x509.Subject);\n\t\t\tConsole.WriteLine(&quot;{0}Issuer: {1}{0}&quot;, Environment.NewLine,x509.Issuer);\n\t\t\tConsole.WriteLine(&quot;{0}Version: {1}{0}&quot;, Environment.NewLine,x509.Version);\n\t\t\tConsole.WriteLine(&quot;{0}Valid Date: {1}{0}&quot;, Environment.NewLine,x509.NotBefore);\n\t\t\tConsole.WriteLine(&quot;{0}Expiry Date: {1}{0}&quot;, Environment.NewLine,x509.NotAfter);\n\t\t\tConsole.WriteLine(&quot;{0}Thumbprint: {1}{0}&quot;, Environment.NewLine,x509.Thumbprint);\n\t\t\tConsole.WriteLine(&quot;{0}Serial Number: {1}{0}&quot;, Environment.NewLine,x509.SerialNumber);\n\t\t\tConsole.WriteLine(&quot;{0}Friendly Name: {1}{0}&quot;, \t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.Oid.FriendlyName);\n\t\t\tConsole.WriteLine(&quot;{0}Public Key Format: {1}{0}&quot;, \t\t\t\t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.EncodedKeyValue.Format(true));\n\t\t\tConsole.WriteLine(&quot;{0}Raw Data Length: {1}{0}&quot;, Environment.NewLine,x509.RawData.Length);\n\t\t\tConsole.WriteLine(&quot;{0}Certificate to string: {1}{0}&quot;, Environment.NewLine,x509.ToString(true));\n\n\t\t\tConsole.WriteLine(&quot;{0}Certificate to XML String: {1}{0}&quot;, \t\t\t\t\t\t\t\tEnvironment.NewLine,x509.PublicKey.Key.ToXmlString(false));\n\n\t\t\t//Add the certificate to a X509Store.\n\t\t\tX509Store store = new X509Store();\n\t\t\tstore.Open(OpenFlags.MaxAllowed);\n\t\t\tstore.Add(x509);\n\t\t\tstore.Close();\n\t\t}\n\n\t\tcatch (DirectoryNotFoundException)\n\t\t\t{\n\t\t\t\t   Console.WriteLine(&quot;Error: The directory specified could not be found.&quot;);\n\t\t\t}\n\t\tcatch (IOException)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;Error: A file in the directory could not be accessed.&quot;);\n\t\t\t}\n\t\tcatch (NullReferenceException)\n\t\t\t{\n\t\t\t\tConsole.WriteLine(&quot;File must be a .cer file. Program does not have access to that type of file.&quot;);\n\t\t\t}\n\t}\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"CertInfo#1\">Imports System\nImports System.Security.Cryptography\nImports System.Security.Permissions\nImports System.IO\nImports System.Security.Cryptography.X509Certificates\nImports Microsoft.VisualBasic\n\n\n\n\nClass CertInfo\n\n    &#39;Reads a file.\n    Friend Shared Function ReadFile(ByVal fileName As String) As Byte()\n        Dim f As New FileStream(fileName, FileMode.Open, FileAccess.Read)\n        Dim size As Integer = Fix(f.Length)\n        Dim data(size) As Byte\n        size = f.Read(data, 0, size)\n        f.Close()\n        Return data\n\n    End Function \n\n    &lt;SecurityPermission(SecurityAction.LinkDemand, Unrestricted:=True)&gt; _\n    Shared Sub Main(ByVal args() As String)\n        &#39;Test for correct number of arguments.\n        If args.Length &lt; 1 Then\n            Console.WriteLine(&quot;Usage: CertInfo &lt;filename&gt;&quot;)\n            Return\n        End If\n        Try\n            Dim x509 As New X509Certificate2()\n            &#39;Create X509Certificate2 object from .cer file.\n            Dim rawData As Byte() = ReadFile(args(0))\n            \n            x509.Import(rawData)\n\n            &#39;Print to console information contained in the certificate.\n            Console.WriteLine(&quot;{0}Subject: {1}{0}&quot;, Environment.NewLine, x509.Subject)\n            Console.WriteLine(&quot;{0}Issuer: {1}{0}&quot;, Environment.NewLine, x509.Issuer)\n            Console.WriteLine(&quot;{0}Version: {1}{0}&quot;, Environment.NewLine, x509.Version)\n            Console.WriteLine(&quot;{0}Valid Date: {1}{0}&quot;, Environment.NewLine, x509.NotBefore)\n            Console.WriteLine(&quot;{0}Expiry Date: {1}{0}&quot;, Environment.NewLine, x509.NotAfter)\n            Console.WriteLine(&quot;{0}Thumbprint: {1}{0}&quot;, Environment.NewLine, x509.Thumbprint)\n            Console.WriteLine(&quot;{0}Serial Number: {1}{0}&quot;, Environment.NewLine, x509.SerialNumber)\n            Console.WriteLine(&quot;{0}Friendly Name: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.Oid.FriendlyName)\n            Console.WriteLine(&quot;{0}Public Key Format: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.EncodedKeyValue.Format(True))\n            Console.WriteLine(&quot;{0}Raw Data Length: {1}{0}&quot;, Environment.NewLine, x509.RawData.Length)\n            Console.WriteLine(&quot;{0}Certificate to string: {1}{0}&quot;, Environment.NewLine, x509.ToString(True))\n\n            Console.WriteLine(&quot;{0}Certificate to XML String: {1}{0}&quot;, Environment.NewLine, x509.PublicKey.Key.ToXmlString(False))\n\n            &#39;Add the certificate to a X509Store.\n            Dim store As New X509Store()\n            store.Open(OpenFlags.MaxAllowed)\n            store.Add(x509)\n            store.Close()\n\n        Catch dnfExcept As DirectoryNotFoundException\n            Console.WriteLine(&quot;Error: The directory specified could not be found.&quot;)\n        Catch ioExpcept As IOException\n            Console.WriteLine(&quot;Error: A file in the directory could not be accessed.&quot;)\n        Catch nrExcept As NullReferenceException\n            Console.WriteLine(&quot;File must be a .cer file. Program does not have access to that type of file.&quot;)\n        End Try\n\n    End Sub\nEnd Class\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The X.509 structure originated in the International Organization for Standardization (ISO) working groups. This structure can be used to represent various types of information including identity, entitlement, and holder attributes (permissions, age, sex, location, affiliation, and so forth). Although the ISO specifications are most informative on the structure itself, the X509Certificate2 class is designed to model the usage scenarios defined in specifications issued by the Internet Engineering Task Force (IETF) Public Key Infrastructure, X.509 (PKIX) working group. The most informative of these specifications is RFC 3280, &quot;<a href=\"http://go.microsoft.com/fwlink/?LinkId=45286\" data-linktype=\"external\">Certificate and Certificate Revocation List (CRL) Profile</a>.&quot;  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Starting with the .NET Framework 4.6, this type implements the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <a class=\"xref\" href=\"system.idisposable#System_IDisposable_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method in a <code>try</code>/<code>catch</code> block. To dispose of it indirectly, use a language construct such as <code>using</code> (in C#) or <code>Using</code> (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface topic.  </p>\n<p> For apps that target the .NET Framework 4.5.2 and earlier versions, the X509Certificate2 class does not implement the <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a> interface and therefore does not have a <code>Dispose</code> method.</p>\n</div>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">X509Certificate2()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public X509Certificate2 ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor creates an empty <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object, unlike the other constructors for this class that use certificate information from a byte array, a pointer, or a certificate file.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_Byte___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">X509Certificate2(Byte[])</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using information from a byte array.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public X509Certificate2 (byte[] rawData);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>rawData</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A byte array containing data from an X.509 certificate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>An error with the certificate occurs. For example:  </p>\n<ul>\n<li><p>The certificate file does not exist.  </p>\n</li>\n<li><p>The certificate is invalid.  </p>\n</li>\n<li><p>The certificate&#39;s password is incorrect.</p>\n</li>\n</ul>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor creates a new <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object using certificate information from a byte array. The byte array can be binary (DER) encoded or Base64-encoded X.509 data. The byte array can also be a PKCS7 (Authenticode) signed file; the signer certificate is used to create the object.  </p>\n<p> If you create an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> certificate by specifying a PKCS7 signed file store for <code>rawData</code>, the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> is created for the certificate that signed the store rather than for any of the certificates within the store.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_IntPtr_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">X509Certificate2(IntPtr)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using an unmanaged handle.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public X509Certificate2 (IntPtr handle);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>handle</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A pointer to a certificate context in unmanaged code. The C structure is called <code>PCCERT_CONTEXT</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>An error with the certificate occurs. For example:  </p>\n<ul>\n<li><p>The certificate file does not exist.  </p>\n</li>\n<li><p>The certificate is invalid.  </p>\n</li>\n<li><p>The certificate&#39;s password is incorrect.</p>\n</li>\n</ul>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor creates a new <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object using a handle for the Microsoft Cryptographic API certificate context, <code>PCCERT_CONTEXT</code>. Note that the immediate caller of this constructor requires unmanaged code permission.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The constructor creates a copy of the certificate context. Do not assume that the context structure you passed to the constructor is valid; it may have been released. You can get a copy of the current <code>PCCERT_CONTEXT</code> structure from the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate#System_Security_Cryptography_X509Certificates_X509Certificate_Handle_\" data-linktype=\"relative-path\">Handle</a> property, but it is valid only during the lifetime of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_Security_Cryptography_X509Certificates_X509Certificate_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">X509Certificate2(X509Certificate)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">X509Certificate</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public X509Certificate2 (System.Security.Cryptography.X509Certificates.X509Certificate certificate);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>certificate</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">System.Security.Cryptography.X509Certificates.X509Certificate</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">X509Certificate</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>An error with the certificate occurs. For example:  </p>\n<ul>\n<li><p>The certificate file does not exist.  </p>\n</li>\n<li><p>The certificate is invalid.  </p>\n</li>\n<li><p>The certificate&#39;s password is incorrect.</p>\n</li>\n</ul>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method creates a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">X509Certificate</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">X509Certificate2(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using a certificate file name.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public X509Certificate2 (string fileName);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>fileName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of a certificate file.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>An error with the certificate occurs. For example:  </p>\n<ul>\n<li><p>The certificate file does not exist.  </p>\n</li>\n<li><p>The certificate is invalid.  </p>\n</li>\n<li><p>The certificate&#39;s password is incorrect.</p>\n</li>\n</ul>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor creates a new <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object using a certificate file name. It supports binary (DER) encoding or Base64 encoding.  </p>\n<p> If you create an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> certificate by specifying a PKCS7 signed file store for <code>fileName</code>, the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> is created for the certificate that signed the store rather than for any of the certificates within the store.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_Byte___System_Security_SecureString_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">X509Certificate2(Byte[],SecureString)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using a byte array and a password.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public X509Certificate2 (byte[] rawData, System.Security.SecureString password);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>rawData</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A byte array that contains data from an X.509 certificate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>password</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The password required to access the X.509 certificate data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>An error with the certificate occurs. For example:  </p>\n<ul>\n<li><p>The certificate file does not exist.  </p>\n</li>\n<li><p>The certificate is invalid.  </p>\n</li>\n<li><p>The certificate&#39;s password is incorrect.</p>\n</li>\n</ul>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor is used with PKCS12 (PFX) files that contain the certificate&#39;s private key. Calling this constructor with the correct password decrypts the private key and saves it to a key container.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the <a href=\"../topic/ildasm.exe%20(il%20disassembler)\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  </p>\n</div>\n<p> If you create an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">X509Certificate</a> certificate by specifying a PKCS7 signed file store for <code>rawData</code>, the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">X509Certificate</a> is created for the certificate that signed the store rather than for any of the certificates within the store.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_Byte___System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">X509Certificate2(Byte[],String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using a byte array and a password.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public X509Certificate2 (byte[] rawData, string password);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>rawData</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A byte array containing data from an X.509 certificate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>password</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The password required to access the X.509 certificate data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>An error with the certificate occurs. For example:  </p>\n<ul>\n<li><p>The certificate file does not exist.  </p>\n</li>\n<li><p>The certificate is invalid.  </p>\n</li>\n<li><p>The certificate&#39;s password is incorrect.</p>\n</li>\n</ul>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor creates a new <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object using a byte array and a password that is needed to access the certificate data. It is used with PKCS12 (PFX) files that contain the certificate&#39;s private key. Calling this constructor with the correct password decrypts the private key and saves it to a key container.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the <a href=\"../topic/ildasm.exe%20(il%20disassembler)\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  </p>\n</div>\n<p> If you create an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> certificate by specifying a PKCS7 signed file store for <code>rawData</code>, the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> is created for the certificate that signed the store rather than for any of the certificates within the store.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_Runtime_Serialization_SerializationInfo_System_Runtime_Serialization_StreamingContext_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">X509Certificate2(SerializationInfo,StreamingContext)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using the specified serialization and stream context information.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected X509Certificate2 (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>info</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.serializationinfo\" data-linktype=\"relative-path\">SerializationInfo</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The serialization information required to deserialize the new <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>context</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.streamingcontext\" data-linktype=\"relative-path\">StreamingContext</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Contextual information about the source of the stream to be deserialized.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_String_System_Security_SecureString_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">X509Certificate2(String,SecureString)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using a certificate file name and a password.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public X509Certificate2 (string fileName, System.Security.SecureString password);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>fileName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of a certificate file.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>password</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The password required to access the X.509 certificate data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>An error with the certificate occurs. For example:  </p>\n<ul>\n<li><p>The certificate file does not exist.  </p>\n</li>\n<li><p>The certificate is invalid.  </p>\n</li>\n<li><p>The certificate&#39;s password is incorrect.</p>\n</li>\n</ul>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor is used with PKCS12 (PFX) files that contain the certificate&#39;s private key. Calling this constructor with the correct password decrypts the private key and saves it to a key container.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the <a href=\"../topic/ildasm.exe%20(il%20disassembler)\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  </p>\n</div>\n<p> If you create an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">X509Certificate</a> certificate by specifying a PKCS7 signed file store for <code>fileName</code>, the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">X509Certificate</a> is created for the certificate that signed the store rather than for any of the certificates within the store.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_String_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">X509Certificate2(String,String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using a certificate file name and a password used to access the certificate.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public X509Certificate2 (string fileName, string password);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>fileName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of a certificate file.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>password</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The password required to access the X.509 certificate data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>An error with the certificate occurs. For example:  </p>\n<ul>\n<li><p>The certificate file does not exist.  </p>\n</li>\n<li><p>The certificate is invalid.  </p>\n</li>\n<li><p>The certificate&#39;s password is incorrect.</p>\n</li>\n</ul>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor creates a new <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object using a certificate file name and a password needed to access the certificate. It is used with PKCS12 (PFX) files that contain the certificate&#39;s private key. Calling this constructor with the correct password decrypts the private key and saves it to a key container.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the <a href=\"../topic/ildasm.exe%20(il%20disassembler)\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  </p>\n</div>\n<p> If you create an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> certificate by specifying a PKCS7 signed file store for <code>fileName</code>, the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> is created for the certificate that signed the store rather than for any of the certificates within the store.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_Byte___System_Security_SecureString_System_Security_Cryptography_X509Certificates_X509KeyStorageFlags_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">X509Certificate2(Byte[],SecureString,X509KeyStorageFlags)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using a byte array, a password, and a key storage flag.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public X509Certificate2 (byte[] rawData, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>rawData</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A byte array that contains data from an X.509 certificate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>password</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The password required to access the X.509 certificate data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>keyStorageFlags</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509keystorageflags\" data-linktype=\"relative-path\">X509KeyStorageFlags</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A bitwise combination of the enumeration values that control where and how to import the certificate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>An error with the certificate occurs. For example:  </p>\n<ul>\n<li><p>The certificate file does not exist.  </p>\n</li>\n<li><p>The certificate is invalid.  </p>\n</li>\n<li><p>The certificate&#39;s password is incorrect.</p>\n</li>\n</ul>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor is used with PKCS12 (PFX) files that contain the certificate&#39;s private key. Calling this constructor with the correct password decrypts the private key and saves it to a Microsoft Cryptographic API Cryptographic Service Provider (CSP).  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the <a href=\"../topic/ildasm.exe%20(il%20disassembler)\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  </p>\n</div>\n<p> If you create an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">X509Certificate</a> certificate by specifying a PKCS7 signed file store for <code>rawData</code>, the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">X509Certificate</a> is created for the certificate that signed the store rather than for any of the certificates within the store.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_Byte___System_String_System_Security_Cryptography_X509Certificates_X509KeyStorageFlags_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">X509Certificate2(Byte[],String,X509KeyStorageFlags)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using a byte array, a password, and a key storage flag.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public X509Certificate2 (byte[] rawData, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>rawData</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A byte array containing data from an X.509 certificate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>password</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The password required to access the X.509 certificate data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>keyStorageFlags</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509keystorageflags\" data-linktype=\"relative-path\">X509KeyStorageFlags</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A bitwise combination of the enumeration values that control where and how to import the certificate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>An error with the certificate occurs. For example:  </p>\n<ul>\n<li><p>The certificate file does not exist.  </p>\n</li>\n<li><p>The certificate is invalid.  </p>\n</li>\n<li><p>The certificate&#39;s password is incorrect.</p>\n</li>\n</ul>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor creates a new <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object using a byte array, a password that is needed to access the certificate data, and a key storage flag. It is used with PKCS12 (PFX) files that contain the certificate&#39;s private key. Calling this constructor with the correct password decrypts the private key and saves it to a Microsoft Cryptographic API Cryptographic Service Provider (CSP).  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the <a href=\"../topic/ildasm.exe%20(il%20disassembler)\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  </p>\n</div>\n<p> If you create an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> certificate by specifying a PKCS7 signed file store for <code>rawData</code>, the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> is created for the certificate that signed the store rather than for any of the certificates within the store.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_String_System_Security_SecureString_System_Security_Cryptography_X509Certificates_X509KeyStorageFlags_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">X509Certificate2(String,SecureString,X509KeyStorageFlags)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using a certificate file name, a password, and a key storage flag.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public X509Certificate2 (string fileName, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>fileName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of a certificate file.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>password</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The password required to access the X.509 certificate data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>keyStorageFlags</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509keystorageflags\" data-linktype=\"relative-path\">X509KeyStorageFlags</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A bitwise combination of the enumeration values that control where and how to import the certificate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>An error with the certificate occurs. For example:  </p>\n<ul>\n<li><p>The certificate file does not exist.  </p>\n</li>\n<li><p>The certificate is invalid.  </p>\n</li>\n<li><p>The certificate&#39;s password is incorrect.</p>\n</li>\n</ul>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If you create an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">X509Certificate</a> certificate by specifying a PKCS7 signed file store for <code>fileName</code>, the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate\" data-linktype=\"relative-path\">X509Certificate</a> is created for the certificate that signed the store rather than for any of the certificates within the store.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2__ctor_System_String_System_String_System_Security_Cryptography_X509Certificates_X509KeyStorageFlags_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">X509Certificate2(String,String,X509KeyStorageFlags)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class using a certificate file name, a password used to access the certificate, and a key storage flag.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public X509Certificate2 (string fileName, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>fileName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of a certificate file.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>password</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The password required to access the X.509 certificate data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>keyStorageFlags</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509keystorageflags\" data-linktype=\"relative-path\">X509KeyStorageFlags</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A bitwise combination of the enumeration values that control where and how to import the certificate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>An error with the certificate occurs. For example:  </p>\n<ul>\n<li><p>The certificate file does not exist.  </p>\n</li>\n<li><p>The certificate is invalid.  </p>\n</li>\n<li><p>The certificate&#39;s password is incorrect.</p>\n</li>\n</ul>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor creates a new <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object using a certificate file name, a password needed to access the certificate, and a key storage flag.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the <a href=\"../topic/ildasm.exe%20(il%20disassembler)\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.  </p>\n</div>\n<p> If you create an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> certificate by specifying a PKCS7 signed file store for <code>fileName</code>, the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> is created for the certificate that signed the store rather than for any of the certificates within the store.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Archived\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Archived</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value indicating that an X.509 certificate is archived.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool Archived { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the certificate is archived, <code>false</code> if the certificate is not archived.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The certificate is unreadable.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property is set only on a certificate that is associated with a store. If the property is set and the certificate is added to a certificate store, the value is persisted. If the property is set on a certificate retrieved from a store, the value is persisted immediately.  </p>\n<p> In an X.509 store, archived certificates are not included in the returned <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2collection\" data-linktype=\"relative-path\">X509Certificate2Collection</a> object unless the Archived property is set to <code>true</code>. No physical archival activity occurs when the Archived value is set or unset.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Extensions\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Extensions</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a collection of <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509extension\" data-linktype=\"relative-path\">X509Extension</a> objects.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Security.Cryptography.X509Certificates.X509ExtensionCollection Extensions { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509extensioncollection\" data-linktype=\"relative-path\">X509ExtensionCollection</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509extensioncollection\" data-linktype=\"relative-path\">X509ExtensionCollection</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The certificate is unreadable.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The extensions defined in the X.509 v3 certificate format allow additional data to be included in the certificate. A number of extensions are defined by ISO in the X.509 v3 definition as well as by PKIX in RFC 3280, &quot;<a href=\"http://go.microsoft.com/fwlink/?LinkId=45286\" data-linktype=\"external\">Certificate and Certificate Revocation List (CRL) Profile</a>.&quot; Common extensions include information regarding key usage (<a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509keyusageextension\" data-linktype=\"relative-path\">X509KeyUsageExtension</a>), key identifiers (<a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509subjectkeyidentifierextension\" data-linktype=\"relative-path\">X509SubjectKeyIdentifierExtension</a>), certificate policies, revocation information (CRL Distribution Point extension), and other uses.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_FriendlyName\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FriendlyName</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the associated alias for a certificate.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string FriendlyName { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The certificate&#39;s friendly name.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The certificate is unreadable.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Friendly names are properties in the X.509 certificate store that can be set. They are used to enable a user to associate aliases with certificates so they can be easily identified.  </p>\n<p> If no friendly name exists for the certificate, an empty string (&quot;&quot;) is returned.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_HasPrivateKey\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">HasPrivateKey</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object contains a private key.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool HasPrivateKey { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object contains a private key; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The certificate context is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_IssuerName\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IssuerName</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the distinguished name of the certificate issuer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Security.Cryptography.X509Certificates.X500DistinguishedName IssuerName { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x500distinguishedname\" data-linktype=\"relative-path\">X500DistinguishedName</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x500distinguishedname\" data-linktype=\"relative-path\">X500DistinguishedName</a> object that contains the name of the certificate issuer.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The certificate context is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property contains the name of the certificate authority (CA) that issued the certificate. To obtain the name of a certificate, use the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2#System_Security_Cryptography_X509Certificates_X509Certificate2_GetNameInfo_\" data-linktype=\"relative-path\">GetNameInfo</a> method.  </p>\n<p> The distinguished name for the certificate is a textual representation of the certificate subject or issuer. This representation consists of name attributes (for example, &quot;CN=MyName, OU=MyOrgUnit, C=US&quot;).</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_NotAfter\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">NotAfter</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the date in local time after which a certificate is no longer valid.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public DateTime NotAfter { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> object that represents the expiration date for the certificate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The certificate is unreadable.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property indicates an expiration date on which the certificate becomes invalid.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_NotBefore\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">NotBefore</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the date in local time on which a certificate becomes valid.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public DateTime NotBefore { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> object that represents the effective date of the certificate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The certificate is unreadable.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property indicates the date on which the certificate becomes valid.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_PrivateKey\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PrivateKey</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> object that represents the private key associated with a certificate.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Security.Cryptography.AsymmetricAlgorithm PrivateKey { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> object, which is either an RSA or DSA cryptographic service provider.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The key value is not an RSA or DSA key, or the key is unreadable.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The value being set for this property is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The key algorithm for this private key is not supported.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicunexpectedoperationexception\" data-linktype=\"relative-path\">CryptographicUnexpectedOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The X.509 keys do not match.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The cryptographic service provider key is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Currently this property supports only RSA or DSA keys, so it returns either an <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> or a <a class=\"xref\" href=\"system.security.cryptography.dsacryptoserviceprovider\" data-linktype=\"relative-path\">DSACryptoServiceProvider</a> object. If no private key is associated with the certificate, it returns <code>null</code>.  </p>\n<div class=\"WARNING\"><h5>Warning</h5><p> If you set this property to <code>null</code> or to another key without first deleting it, a private key file is left on the disk.  </p>\n</div>\n<p> To properly delete the private key associated with this property, set <code>PersistKeyInCsp</code> to <code>false</code>, and then call the <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm#System_Security_Cryptography_AsymmetricAlgorithm_Clear_\" data-linktype=\"relative-path\">Clear</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_PublicKey\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PublicKey</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a PublicKey object associated with a certificate.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Security.Cryptography.X509Certificates.PublicKey PublicKey { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.publickey\" data-linktype=\"relative-path\">PublicKey</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A PublicKey object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The key value is not an RSA or DSA key, or the key is unreadable.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property returns a PublicKey object, which contains the object identifier (<a class=\"xref\" href=\"system.security.cryptography.oid\" data-linktype=\"relative-path\">Oid</a>) representing the public key algorithm, the ASN.1-encoded parameters, and the ASN.1-encoded key value.  </p>\n<p> You can also obtain the key as an <a class=\"xref\" href=\"system.security.cryptography.asymmetricalgorithm\" data-linktype=\"relative-path\">AsymmetricAlgorithm</a> object by referencing the PublicKey property. This property supports only RSA or DSA keys, so it returns either an <a class=\"xref\" href=\"system.security.cryptography.rsacryptoserviceprovider\" data-linktype=\"relative-path\">RSACryptoServiceProvider</a> or a <a class=\"xref\" href=\"system.security.cryptography.dsacryptoserviceprovider\" data-linktype=\"relative-path\">DSACryptoServiceProvider</a> object that represents the public key.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_RawData\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">RawData</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the raw data of a certificate.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public byte[] RawData { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The raw data of the certificate as a byte array.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_SerialNumber\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SerialNumber</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the serial number of a certificate.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string SerialNumber { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The serial number of the certificate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The serial number of the certificate is part of the original X.509 protocol. The serial number is a unique number issued by the certificate issuer, which is also called the Certificate Authority (CA).</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_SignatureAlgorithm\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SignatureAlgorithm</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the algorithm used to create the signature of a certificate.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Security.Cryptography.Oid SignatureAlgorithm { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.oid\" data-linktype=\"relative-path\">Oid</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Returns the object identifier (<a class=\"xref\" href=\"system.security.cryptography.oid\" data-linktype=\"relative-path\">Oid</a>) of the signature algorithm.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The certificate is unreadable.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The object identifier (<a class=\"xref\" href=\"system.security.cryptography.oid\" data-linktype=\"relative-path\">Oid</a>) identifies the type of signature algorithm used by the certificate.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_SubjectName\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SubjectName</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the subject distinguished name from a certificate.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Security.Cryptography.X509Certificates.X500DistinguishedName SubjectName { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x500distinguishedname\" data-linktype=\"relative-path\">X500DistinguishedName</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x500distinguishedname\" data-linktype=\"relative-path\">X500DistinguishedName</a> object that represents the name of the certificate subject.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The certificate context is invalid.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The subject distinguished name is the name of the user of the certificate. The distinguished name for the certificate is a textual representation of the subject or issuer of the certificate. This representation consists of name attributes, for example, &quot;CN=MyName, OU=MyOrgUnit, C=US&quot;.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Thumbprint\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Thumbprint</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the thumbprint of a certificate.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string Thumbprint { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The thumbprint of the certificate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The thumbprint is dynamically generated using the SHA1 algorithm and does not physically exist in the certificate. Since the thumbprint is a unique value for the certificate, it is commonly used to find a particular certificate in a certificate store.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Version\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Version</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the X.509 format version of a certificate.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int Version { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The certificate format.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The certificate is unreadable.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>There are several versions of X.509 certificates. This property identifies which format the certificate uses. For example, &quot;3&quot; is returned for a version 3 certificate.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_GetCertContentType_System_Byte___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetCertContentType(Byte[])</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Indicates the type of certificate contained in a byte array.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Security.Cryptography.X509Certificates.X509ContentType GetCertContentType (byte[] rawData);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>rawData</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A byte array containing data from an X.509 certificate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509contenttype\" data-linktype=\"relative-path\">X509ContentType</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509contenttype\" data-linktype=\"relative-path\">X509ContentType</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>rawData</code> has a zero length or is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method enables you to discover the type of certificate in a file.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_GetCertContentType_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetCertContentType(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Indicates the type of certificate contained in a file.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Security.Cryptography.X509Certificates.X509ContentType GetCertContentType (string fileName);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>fileName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of a certificate file.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509contenttype\" data-linktype=\"relative-path\">X509ContentType</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509contenttype\" data-linktype=\"relative-path\">X509ContentType</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>fileName</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method enables you to discover the type of certificate in a file.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_GetNameInfo_System_Security_Cryptography_X509Certificates_X509NameType_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetNameInfo(X509NameType,Boolean)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the subject and issuer names from a certificate.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string GetNameInfo (System.Security.Cryptography.X509Certificates.X509NameType nameType, bool forIssuer);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>nameType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509nametype\" data-linktype=\"relative-path\">X509NameType</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509nametype\" data-linktype=\"relative-path\">X509NameType</a> value for the subject.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>forIssuer</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to include the issuer name; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of the certificate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method should always be used instead of parsing the certificate, since many of the name values can be located in multiple locations. Using this method ensures that the appropriate name is returned.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Import_System_Byte___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Import(Byte[])</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Populates an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object with data from a byte array.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override void Import (byte[] rawData);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>rawData</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A byte array containing data from an X.509 certificate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be used to take a raw byte array of an X.509 certificate and populate the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object with its associated values.  </p>\n<p> Since this method accepts only a byte array, it can be used only for certificate types that do not require a password, including a Base64-encoded or DER-encoded X.509 certificate or a PFX/PKCS12 certificate. Note that a PFX/PKCS12 certificate can contain more than one certificate. In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Import_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Import(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Populates an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object with information from a certificate file.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override void Import (string fileName);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>fileName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of a certificate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method uses a certificate file, such as a file with a .cer extension, that represents an X.509 certificate and populates the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object with the certificate the file contains.  </p>\n<p> This method can be used with several certificate types, including Base64-encoded or DER-encoded X.509 certificates, PFX/PKCS12 certificates, and signer certificates such as Authenticode. Note that a PFX/PKCS12 certificate can contain more than one certificate. In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Import_System_Byte___System_Security_SecureString_System_Security_Cryptography_X509Certificates_X509KeyStorageFlags_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Import(Byte[],SecureString,X509KeyStorageFlags)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Populates an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object using data from a byte array, a password, and a key storage flag.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override void Import (byte[] rawData, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>rawData</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A byte array that contains data from an X.509 certificate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>password</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The password required to access the X.509 certificate data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>keyStorageFlags</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509keystorageflags\" data-linktype=\"relative-path\">X509KeyStorageFlags</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A bitwise combination of the enumeration values that control where and how to import the certificate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>You can use this method for certificate types such as Base64-encoded or DER-encoded X.509 certificates, or PFX/PKCS12 certificates. Note that a PFX/PKCS12 certificate can contain more than one certificate. In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the <a href=\"../topic/ildasm.exe%20(il%20disassembler)\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Import_System_Byte___System_String_System_Security_Cryptography_X509Certificates_X509KeyStorageFlags_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Import(Byte[],String,X509KeyStorageFlags)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Populates an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object using data from a byte array, a password, and flags for determining how to import the private key.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override void Import (byte[] rawData, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>rawData</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A byte array containing data from an X.509 certificate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>password</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The password required to access the X.509 certificate data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>keyStorageFlags</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509keystorageflags\" data-linktype=\"relative-path\">X509KeyStorageFlags</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A bitwise combination of the enumeration values that control where and how to import the certificate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be used to populate an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object using a password for the certificate represented by the byte array. The <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509keystorageflags\" data-linktype=\"relative-path\">X509KeyStorageFlags</a> value can be used to control where and how to import the private key.  </p>\n<p> This method accepts a byte array and can be used for certificate types such as Base64-encoded or DER-encoded X.509 certificates or PFX/PKCS12 certificates. Note that a PFX/PKCS12 certificate can contain more than one certificate. In that case, the first certificate associated with a private key is used or, if no private key is found, the first certificate is used.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the <a href=\"../topic/ildasm.exe%20(il%20disassembler)\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Import_System_String_System_Security_SecureString_System_Security_Cryptography_X509Certificates_X509KeyStorageFlags_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Import(String,SecureString,X509KeyStorageFlags)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Populates an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object with information from a certificate file, a password, and a key storage flag.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override void Import (string fileName, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>fileName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of a certificate file.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>password</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securestring\" data-linktype=\"relative-path\">SecureString</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The password required to access the X.509 certificate data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>keyStorageFlags</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509keystorageflags\" data-linktype=\"relative-path\">X509KeyStorageFlags</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A bitwise combination of the enumeration values that control where and how to import the certificate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><strong>Security Note</strong> Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the <a href=\"../topic/ildasm.exe%20(il%20disassembler)\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Import_System_String_System_String_System_Security_Cryptography_X509Certificates_X509KeyStorageFlags_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Import(String,String,X509KeyStorageFlags)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Populates an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object with information from a certificate file, a password, and a <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509keystorageflags\" data-linktype=\"relative-path\">X509KeyStorageFlags</a> value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override void Import (string fileName, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>fileName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of a certificate file.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>password</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The password required to access the X.509 certificate data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>keyStorageFlags</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509keystorageflags\" data-linktype=\"relative-path\">X509KeyStorageFlags</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A bitwise combination of the enumeration values that control where and how to import the certificate.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be used populate an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object with information from a certificate file, a password, and an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509keystorageflags\" data-linktype=\"relative-path\">X509KeyStorageFlags</a> value.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Never hard code a password within your source code.  Hard-coded passwords can be retrieved from an assembly using the <a href=\"../topic/ildasm.exe%20(il%20disassembler)\" data-linktype=\"relative-path\">Ildasm.exe (IL Disassembler)</a>, a hex editor, or by simply opening up the assembly in a text editor such as Notepad.exe.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Reset\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Reset()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Resets the state of an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override void Reset ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be used to reset the state of the certificate. It also frees any resources associated with the certificate.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_ToString\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToString()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Displays an X.509 certificate in text format.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override string ToString ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The certificate information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>As with all <code>ToString</code> methods, the output might not be consistent across versions of the .NET Framework, so the method results should not be parsed for content. Use the properties on the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object to obtain precise information about the content or use the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2#System_Security_Cryptography_X509Certificates_X509Certificate2_ToString_\" data-linktype=\"relative-path\">ToString</a> method to obtain information about the certificate.  </p>\n<p> This method displays the certificate in text format.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_ToString_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToString(Boolean)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Displays an X.509 certificate in text format.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override string ToString (bool verbose);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>verbose</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to display the public key, private key, extensions, and so forth; <code>false</code> to display information that is similar to the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> class, including thumbprint, serial number, subject and issuer names, and so on.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The certificate information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>As with all <code>ToString</code> methods, the output might not be consistent across versions of the .NET Framework, so the method results should not be parsed for content. Use the properties on the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> object to obtain precise information.  </p>\n<p> This method displays the certificate in text format. If the <code>verbose</code> parameter is set to <code>true</code>, the text display includes the public key, private key, and extensions. If <code>verbose</code> is set to <code>false</code>, the text display includes those fields available from the X.509 certificate, including thumbprint, serial number, subject and issuer names, and validity date information.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_X509Certificates_X509Certificate2_Verify\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Verify()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Performs a X.509 chain validation using basic validation policy.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool Verify ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the validation succeeds; <code>false</code> if the validation fails.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The certificate is unreadable.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method builds a simple chain for the certificate and applies the base policy to that chain. If you need more information about a failure, validate the certificate directly using the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509chain\" data-linktype=\"relative-path\">X509Chain</a> object.  </p>\n<p> Note that the default chaining engine can be overridden using the <a class=\"xref\" href=\"system.security.cryptography.cryptoconfig\" data-linktype=\"relative-path\">CryptoConfig</a> class. On Microsoft Windows Server 2003, the default engine conforms to the specification described in RFC3280, &quot;<a href=\"http://go.microsoft.com/fwlink/?LinkId=45286\" data-linktype=\"external\">Certificate and Certificate Revocation List (CRL) Profile</a>.&quot;</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.X509Certificates.X509Certificate2.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.Archived\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.Import\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.RawData\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.Reset\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.ToString\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.Verify\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2.Version\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-24 01:41 AM\">\r\n<meta name=\"document_id\" content=\"3b9164e9-5eba-639b-5eb0-3b9a3da8a70f\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents an X.509 certificate.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.security.cryptography.x509certificates/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.X509Certificates.X509Certificate2\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.X509Certificates.X509Certificate2.yml","open_to_public_contributors":false,"api_name":["System.Security.Cryptography.X509Certificates.X509Certificate2","System.Security.Cryptography.X509Certificates.X509Certificate2..ctor","System.Security.Cryptography.X509Certificates.X509Certificate2.Archived","System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions","System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName","System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType","System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo","System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey","System.Security.Cryptography.X509Certificates.X509Certificate2.Import","System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName","System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter","System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore","System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey","System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey","System.Security.Cryptography.X509Certificates.X509Certificate2.RawData","System.Security.Cryptography.X509Certificates.X509Certificate2.Reset","System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber","System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm","System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName","System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint","System.Security.Cryptography.X509Certificates.X509Certificate2.ToString","System.Security.Cryptography.X509Certificates.X509Certificate2.Verify","System.Security.Cryptography.X509Certificates.X509Certificate2.Version"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.X509Certificates.X509Certificate2","System::Security::Cryptography::X509Certificates::X509Certificate2","System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor","System::Security::Cryptography::X509Certificates::X509Certificate2::#ctor","System.Security.Cryptography.X509Certificates.X509Certificate2.Archived","System::Security::Cryptography::X509Certificates::X509Certificate2::Archived","System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions","System::Security::Cryptography::X509Certificates::X509Certificate2::Extensions","System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName","System::Security::Cryptography::X509Certificates::X509Certificate2::FriendlyName","System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType","System::Security::Cryptography::X509Certificates::X509Certificate2::GetCertContentType","System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo","System::Security::Cryptography::X509Certificates::X509Certificate2::GetNameInfo","System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey","System::Security::Cryptography::X509Certificates::X509Certificate2::HasPrivateKey","System.Security.Cryptography.X509Certificates.X509Certificate2.Import","System::Security::Cryptography::X509Certificates::X509Certificate2::Import","System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName","System::Security::Cryptography::X509Certificates::X509Certificate2::IssuerName","System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter","System::Security::Cryptography::X509Certificates::X509Certificate2::NotAfter","System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore","System::Security::Cryptography::X509Certificates::X509Certificate2::NotBefore","System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey","System::Security::Cryptography::X509Certificates::X509Certificate2::PrivateKey","System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey","System::Security::Cryptography::X509Certificates::X509Certificate2::PublicKey","System.Security.Cryptography.X509Certificates.X509Certificate2.RawData","System::Security::Cryptography::X509Certificates::X509Certificate2::RawData","System.Security.Cryptography.X509Certificates.X509Certificate2.Reset","System::Security::Cryptography::X509Certificates::X509Certificate2::Reset","System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber","System::Security::Cryptography::X509Certificates::X509Certificate2::SerialNumber","System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm","System::Security::Cryptography::X509Certificates::X509Certificate2::SignatureAlgorithm","System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName","System::Security::Cryptography::X509Certificates::X509Certificate2::SubjectName","System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint","System::Security::Cryptography::X509Certificates::X509Certificate2::Thumbprint","System.Security.Cryptography.X509Certificates.X509Certificate2.ToString","System::Security::Cryptography::X509Certificates::X509Certificate2::ToString","System.Security.Cryptography.X509Certificates.X509Certificate2.Verify","System::Security::Cryptography::X509Certificates::X509Certificate2::Verify","System.Security.Cryptography.X509Certificates.X509Certificate2.Version","System::Security::Cryptography::X509Certificates::X509Certificate2::Version"],"dev_langs":["csharp"],"updated_at":"2017-03-24 01:41 AM","document_id":"3b9164e9-5eba-639b-5eb0-3b9a3da8a70f","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509Certificate2.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"X509Certificate2 class | Microsoft Docs","_op_ogTitle":"X509Certificate2 class","description":"Represents an X.509 certificate.\n","toc_asset_id":"api/_splitted/System.Security.Cryptography.X509Certificates/toc.json","toc_rel":"_splitted/System.Security.Cryptography.X509Certificates/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.X509Certificates.X509Certificate2","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.x509certificates.x509certificate2","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.x509certificates.x509certificate2","fileRelativePath":"api/System.Security.Cryptography.X509Certificates.X509Certificate2.html"},"themesRelativePathToOutputRoot":"_themes/"}