{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ElapsedEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that will handle the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">Elapsed</a> event of a <a class=\"xref\" href=\"system.timers.timer\" data-linktype=\"relative-path\">Timer</a>.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void ElapsedEventHandler(object sender, ElapsedEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">ElapsedEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example sets up an event handler for the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">System.Timers.Timer.Elapsed</a> event, creates a timer, and starts the timer. The event handler has the same signature as the ElapsedEventHandler delegate. The event handler displays the <a class=\"xref\" href=\"system.timers.elapsedeventargs#System_Timers_ElapsedEventArgs_SignalTime_\" data-linktype=\"relative-path\">SignalTime</a> property each time it is raised.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic Timer Example#1\">// Use this code inside a project created with the Visual C# &gt; Windows Desktop &gt; Console Application template. \n// Replace the code in Program.cs with this code. \n\nusing System;\n\n// To avoid confusion with other Timer classes, this sample always uses the fully-qualified\n// name of System.Timers.Timer instead of a using statement for System.Timers.\n\npublic class Example\n{\n    private static System.Timers.Timer aTimer;\n\n    public static void Main()\n    {\n        // Normally, the timer is declared at the class level, so that it stays in scope as long as it\n        // is needed. If the timer is declared in a long-running method, KeepAlive must be used to prevent\n        // the JIT compiler from allowing aggressive garbage collection to occur before the method ends.\n        // You can experiment with this by commenting out the class-level declaration and uncommenting \n        // the declaration below; then uncomment the GC.KeepAlive(aTimer) at the end of the method.        \n        //System.Timers.Timer aTimer;\n\n        // Create a timer and set a two second interval.\n        aTimer = new System.Timers.Timer();\n        aTimer.Interval = 2000;\n\n        // Alternate method: create a Timer with an interval argument to the constructor.\n        //aTimer = new System.Timers.Timer(2000);\n\n        // Create a timer with a two second interval.\n        aTimer = new System.Timers.Timer(2000);\n\n        // Hook up the Elapsed event for the timer. \n        aTimer.Elapsed += OnTimedEvent;\n\n        // Have the timer fire repeated events (true is the default)\n        aTimer.AutoReset = true;\n\n        // Start the timer\n        aTimer.Enabled = true;\n\n        Console.WriteLine(&quot;Press the Enter key to exit the program at any time... &quot;);\n        Console.ReadLine();\n\n        // If the timer is declared in a long-running method, use KeepAlive to prevent garbage collection\n        // from occurring before the method ends. \n        //GC.KeepAlive(aTimer) \n    }\n\n    private static void OnTimedEvent(Object source, System.Timers.ElapsedEventArgs e)\n    {\n        Console.WriteLine(&quot;The Elapsed event was raised at {0}&quot;, e.SignalTime);\n    }\n}\n\n// This example displays output like the following: \n//       Press the Enter key to exit the program at any time... \n//       The Elapsed event was raised at 5/20/2015 8:48:58 PM \n//       The Elapsed event was raised at 5/20/2015 8:49:00 PM \n//       The Elapsed event was raised at 5/20/2015 8:49:02 PM \n//       The Elapsed event was raised at 5/20/2015 8:49:04 PM \n//       The Elapsed event was raised at 5/20/2015 8:49:06 PM \n</code></pre><pre><code class=\"lang-cpp\" name=\"Classic Timer Example#1\">// Use this code inside a project created with the Visual C++ &gt; CLR &gt; CLR Console Application template. \n// Replace the code in the default .cpp file with this code. \n\n#include &quot;stdafx.h&quot;\n#using &lt;system.dll&gt;\n\nusing namespace System;\n\n// To avoid confusion with other Timer classes, this sample always uses the fully-qualified\n// name of System::Timers::Timer instead of a using statement for System::Timer.\n\npublic ref class Example\n{\nprivate:\n    static System::Timers::Timer^ aTimer;\n\npublic:\n    static void Demo()\n    {\n        // Normally, the timer is declared at the class level, so that it stays in scope as long as it\n        // is needed. If the timer is declared in a long-running method, KeepAlive must be used to prevent\n        // the JIT compiler from allowing aggressive garbage collection to occur before the method ends.\n        // You can experiment with this by commenting out the class-level declaration and uncommenting \n        // the declaration below; then uncomment the GC.KeepAlive(aTimer) at the end of the method.        \n        //System::Timers::Timer^ aTimer; \n\n        // Create a timer and set a two second interval.\n        aTimer = gcnew System::Timers::Timer();\n        aTimer-&gt;Interval = 2000;\n\n        // Alternate method: create a Timer with an interval argument to the constructor.\n        //aTimer = gcnew System::Timers::Timer(2000);\n\n        // Hook up the Elapsed event for the timer. \n        aTimer-&gt;Elapsed += gcnew System::Timers::ElapsedEventHandler(Example::OnTimedEvent);\n\n        // Have the timer fire repeated events (true is the default)\n        aTimer-&gt;AutoReset = true;\n\n        // Start the timer\n        aTimer-&gt;Enabled = true;\n\n        Console::WriteLine(&quot;Press the Enter key to exit the program at any time... &quot;);\n        Console::ReadLine();\n\n        // If the timer is declared in a long-running method, use KeepAlive to prevent garbage collection\n        // from occurring before the method ends.  \n        //GC::KeepAlive(aTimer);\n    }\n\nprivate:\n    static void OnTimedEvent(Object^ source, System::Timers::ElapsedEventArgs^ e)\n    {\n        Console::WriteLine(&quot;The Elapsed event was raised at {0}&quot;, e-&gt;SignalTime);\n    }\n\n};\n\nint main()\n{\n    Example::Demo();\n}\n\n// This example displays output like the following: \n//       Press the Enter key to exit the program at any time... \n//       The Elapsed event was raised at 5/20/2015 8:48:58 PM \n//       The Elapsed event was raised at 5/20/2015 8:49:00 PM \n//       The Elapsed event was raised at 5/20/2015 8:49:02 PM \n//       The Elapsed event was raised at 5/20/2015 8:49:04 PM \n//       The Elapsed event was raised at 5/20/2015 8:49:06 PM \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic Timer Example#1\">&#39; Use this code inside a project created with the Visual Basic &gt; Windows Desktop &gt; Console Application template. \n&#39; Replace the default code in Module1.vb with this code. Then right click the project in Solution Explorer, \n&#39; select Properties, and set the Startup Object to Timer1. \n\n&#39; To avoid confusion with other Timer classes, this sample always uses the fully-qualified\n&#39; name of System.Timers.Timer.\n\nImports System\n\nPublic Class Module1\n\n    Private Shared aTimer As System.Timers.Timer\n\n    Public Shared Sub Main()\n        &#39; Normally, the timer is declared at the class level, so that it stays in scope as long as it\n        &#39; is needed. If the timer is declared in a long-running method, KeepAlive must be used to prevent\n        &#39; the JIT compiler from allowing aggressive garbage collection to occur before the method ends.\n        &#39; You can experiment with this by commenting out the class-level declaration and uncommenting \n        &#39; the declaration below; then uncomment the GC.KeepAlive(aTimer) at the end of the method.        \n        &#39;Dim aTimer As System.Timers.Timer \n\n        &#39; Create a timer and set a two second interval.\n        aTimer = New System.Timers.Timer()\n        aTimer.Interval = 2000\n\n        &#39; Alternate method: create a Timer with an interval argument to the constructor.\n        &#39; aTimer = New System.Timers.Timer(2000)\n\n        &#39; Hook up the Elapsed event for the timer.  \n        AddHandler aTimer.Elapsed, AddressOf OnTimedEvent\n\n        &#39; Have the timer fire repeated events (true is the default)\n        aTimer.AutoReset = True\n\n        &#39; Start the timer\n        aTimer.Enabled = True\n\n        Console.WriteLine(&quot;Press the Enter key to exit the program at any time... &quot;)\n        Console.ReadLine()\n\n        &#39; If the timer is declared in a long-running method, use KeepAlive to prevent garbage collection\n        &#39; from occurring before the method ends. \n        &#39;GC.KeepAlive(aTimer) \n    End Sub\n\n    Private Shared Sub OnTimedEvent(source As Object, e As System.Timers.ElapsedEventArgs)\n        Console.WriteLine(&quot;The Elapsed event was raised at {0}&quot;, e.SignalTime)\n    End Sub\nEnd Class\n\n&#39; This example displays output like the following: \n&#39;       Press the Enter key to exit the program at any time... \n&#39;       The Elapsed event was raised at 5/20/2015 8:48:58 PM \n&#39;       The Elapsed event was raised at 5/20/2015 8:49:00 PM \n&#39;       The Elapsed event was raised at 5/20/2015 8:49:02 PM \n&#39;       The Elapsed event was raised at 5/20/2015 8:49:04 PM \n&#39;       The Elapsed event was raised at 5/20/2015 8:49:06 PM \n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>When you create an ElapsedEventHandler delegate, you identify the method that will handle the <a class=\"xref\" href=\"system.timers.timer#System_Timers_Timer_Elapsed\" data-linktype=\"relative-path\">System.Timers.Timer.Elapsed</a> event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event handler delegates, see <a href=\"../topic/handling%20and%20raising%20events\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Timers.ElapsedEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Timers.ElapsedEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Timers.ElapsedEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Timers.ElapsedEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Timers.ElapsedEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Timers.ElapsedEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"7b7b37d4-8080-7d87-0c0a-111307284b9c\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that will handle the  event of a .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.timers/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Timers.ElapsedEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Timers.ElapsedEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Timers.ElapsedEventHandler","System.Timers.ElapsedEventHandler..ctor","System.Timers.ElapsedEventHandler.Invoke","System.Timers.ElapsedEventHandler.BeginInvoke","System.Timers.ElapsedEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Timers.ElapsedEventHandler","System::Timers::ElapsedEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"7b7b37d4-8080-7d87-0c0a-111307284b9c","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Timers/ElapsedEventHandler.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ElapsedEventHandler delegate | Microsoft Docs","_op_ogTitle":"ElapsedEventHandler delegate","description":"Represents the method that will handle the  event of a .\n","toc_asset_id":"api/_splitted/System.Timers/toc.json","toc_rel":"_splitted/System.Timers/toc.json","source_url":"","ms.assetid":"System.Timers.ElapsedEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.timers.elapsedeventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.timers.elapsedeventhandler","fileRelativePath":"api/System.Timers.ElapsedEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}