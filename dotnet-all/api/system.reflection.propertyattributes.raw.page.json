{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">PropertyAttributes</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Defines the attributes that can be associated with a property. These attribute values are defined in corhdr.h.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Flags]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic enum PropertyAttributes</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">PropertyAttributes</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.flagsattribute\" title=\"System.FlagsAttribute\" data-linktype=\"relative-path\">FlagsAttribute</a></span>\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example builds three properties and displays the PropertyAttributes enumerated value. Note that the read-only property has no setter and thus cannot be changed by.<code>Caption = statement</code>.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic PropertyAttributes Example#1\">using namespace System;\nusing namespace System::Reflection;\n\n// Define three properties: one read-write, one default,\n// and one read only. \n// Define a read-write property.\npublic ref class Aproperty\n{\nprivate:\n   String^ caption;\n\npublic:\n   Aproperty()\n      : caption( &quot;A Default caption&quot; )\n   {}\n\n\n   property String^ Caption \n   {\n      String^ get()\n      {\n         return caption;\n      }\n\n      void set( String^ value )\n      {\n         if ( caption != value )\n         {\n            caption = value;\n         }\n      }\n\n   }\n\n};\n\n\n// Define a default property.\npublic ref class Bproperty\n{\nprivate:\n   String^ caption;\n\npublic:\n   Bproperty()\n      : caption( &quot;B Default caption&quot; )\n   {}\n\npublic:\n   property String^ Item\n   {\n      String^ get()\n      {\n         return &quot;1&quot;;\n      }\n\n   }\n\n   property String^ Caption \n   {\n      String^ get()\n      {\n         return caption;\n      }\n\n      void set( String^ value )\n      {\n         if ( caption != value )\n         {\n            caption = value;\n         }\n      }\n\n   }\n\n};\n\n\n// Define a read-only property.\npublic ref class Cproperty\n{\nprivate:\n   String^ caption;\n\npublic:\n   Cproperty()\n      : caption( &quot;C Default caption&quot; )\n   {}\n\n\n   property String^ Caption \n   {\n      String^ get()\n      {\n         return caption;\n      }\n\n   }\n\n};\n\nint main()\n{\n   Console::WriteLine( &quot;\\nReflection.PropertyAttributes&quot; );\n   \n   // Determine whether a property exists, and change its value.\n   Aproperty^ Mypropertya = gcnew Aproperty;\n   Bproperty^ Mypropertyb = gcnew Bproperty;\n   Cproperty^ Mypropertyc = gcnew Cproperty;\n   Console::Write( &quot;\\n1. Mypropertya-&gt;Caption = {0}&quot;, Mypropertya-&gt;Caption );\n   Console::Write( &quot;\\n1. Mypropertyb-&gt;Caption = {0}&quot;, Mypropertyb-&gt;Caption );\n   Console::Write( &quot;\\n1. Mypropertyc-&gt;Caption = {0}&quot;, Mypropertyc-&gt;Caption );\n   \n   // Only Mypropertya can be changed, as Mypropertyb is read-only.\n   Mypropertya-&gt;Caption = &quot;A- This is changed.&quot;;\n   Mypropertyb-&gt;Caption = &quot;B- This is changed.&quot;;\n   \n   // Note that Mypropertyc is not changed because it is read only\n   Console::Write( &quot;\\n\\n2. Mypropertya-&gt;Caption = {0}&quot;, Mypropertya-&gt;Caption );\n   Console::Write( &quot;\\n2. Mypropertyb-&gt;Caption = {0}&quot;, Mypropertyb-&gt;Caption );\n   Console::Write( &quot;\\n2. Mypropertyc-&gt;Caption = {0}&quot;, Mypropertyc-&gt;Caption );\n   \n   // Get the PropertyAttributes enumeration of the property.\n   // Get the type.\n   Type^ MyTypea = Type::GetType( &quot;Aproperty&quot; );\n   Type^ MyTypeb = Type::GetType( &quot;Bproperty&quot; );\n   Type^ MyTypec = Type::GetType( &quot;Cproperty&quot; );\n\n   // Get the property attributes.\n   PropertyInfo^ Mypropertyinfoa = MyTypea-&gt;GetProperty( &quot;Caption&quot; );\n   PropertyAttributes Myattributesa = Mypropertyinfoa-&gt;Attributes;\n   PropertyInfo^ Mypropertyinfob = MyTypeb-&gt;GetProperty( &quot;Item&quot; );\n   PropertyAttributes Myattributesb = Mypropertyinfob-&gt;Attributes;\n   PropertyInfo^ Mypropertyinfoc = MyTypec-&gt;GetProperty( &quot;Caption&quot; );\n   PropertyAttributes Myattributesc = Mypropertyinfoc-&gt;Attributes;\n\n   // Display the property attributes value.\n   Console::Write( &quot;\\n\\na- {0}&quot;, Myattributesa );\n   Console::Write( &quot;\\nb- {0}&quot;, Myattributesb );\n   Console::Write( &quot;\\nc- {0}&quot;, Myattributesc );\n   return 0;\n}\n\n// This example displays the following output to the console\n//\n// Reflection.PropertyAttributes\n//\n// 1. Mypropertya.Caption = A Default caption\n// 1. Mypropertyb.Caption = B Default caption\n// 1. Mypropertyc.Caption = C Default caption\n//\n// 2. Mypropertya.Caption = A- This is changed.\n// 2. Mypropertyb.Caption = B- This is changed.\n// 2. Mypropertyc.Caption = C Default caption\n//\n// a- None\n// b- None\n// c- None\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic PropertyAttributes Example#1\">using System;\nusing System.Reflection;\n \n // Define three properties: one read-write, one default,\n // and one read only. \npublic class Aproperty  \n    // Define a read-write property.\n{\n    private string caption = &quot;A Default caption&quot;;\n    public string Caption\n    {\n        get{return caption;}\n        set\n        {\n            if (caption != value){caption = value;}\n        }\n    }\n}\npublic class Bproperty  \n    // Define a default property.\n{\n    private string caption  = &quot;B Default caption&quot;;\n    public string this [int index]\n    {\n        get {return &quot;1&quot;;}\n    }\n    public string Caption\n    {\n  \n        get{return caption;}\n        set\n        {\n            if (caption != value){caption = value;}\n        }\n    }\n}\npublic class Cproperty  \n    // Define a read-only property.\n{\n    private string caption = &quot;C Default caption&quot;;\n    public string Caption\n    {\n        get{return caption;}\n        // No setting is allowed, because this is a read-only property.\n    }\n}\n  \nclass propertyattributesenum\n{\n    public static int Main(string[] args)\n    {\n        Console.WriteLine(&quot;\\nReflection.PropertyAttributes&quot;);\n  \n        // Determine whether a property exists, and change its value.\n        Aproperty Mypropertya = new Aproperty();\n        Bproperty Mypropertyb = new Bproperty();\n        Cproperty Mypropertyc = new Cproperty();\n  \n      \n        Console.Write(&quot;\\n1. Mypropertya.Caption = &quot; + Mypropertya.Caption );\n      \n        Console.Write(&quot;\\n1. Mypropertyb.Caption = &quot; + Mypropertyb.Caption );\n      \n        Console.Write(&quot;\\n1. Mypropertyc.Caption = &quot; + Mypropertyc.Caption );\n  \n        // Only Mypropertya can be changed, as Mypropertyb is read-only.\n        Mypropertya.Caption = &quot;A- This is changed.&quot;;\n        Mypropertyb.Caption = &quot;B- This is changed.&quot;;\n        // Note that Mypropertyc is not changed because it is read only\n  \n        Console.Write(&quot;\\n\\n2. Mypropertya.Caption = &quot; + Mypropertya.Caption );\n  \n        Console.Write(&quot;\\n2. Mypropertyb.Caption = &quot; + Mypropertyb.Caption );\n \n        Console.Write(&quot;\\n2. Mypropertyc.Caption = &quot; + Mypropertyc.Caption );\n  \n        // Get the PropertyAttributes enumeration of the property.\n        // Get the type.\n        Type MyTypea = Type.GetType(&quot;Aproperty&quot;);\n        Type MyTypeb = Type.GetType(&quot;Bproperty&quot;);\n        Type MyTypec = Type.GetType(&quot;Cproperty&quot;);\n  \n        // Get the property attributes.\n        PropertyInfo Mypropertyinfoa = MyTypea.GetProperty(&quot;Caption&quot;);\n        PropertyAttributes Myattributesa = Mypropertyinfoa.Attributes;\n        PropertyInfo Mypropertyinfob = MyTypeb.GetProperty(&quot;Item&quot;);\n        PropertyAttributes Myattributesb = Mypropertyinfob.Attributes;\n        PropertyInfo Mypropertyinfoc = MyTypec.GetProperty(&quot;Caption&quot;);\n        PropertyAttributes Myattributesc = Mypropertyinfoc.Attributes;\n  \n        // Display the property attributes value.\n      \n        Console.Write(&quot;\\n\\na- &quot; + Myattributesa.ToString());\n\n        Console.Write(&quot;\\nb- &quot; + Myattributesb.ToString());\n\n        Console.Write(&quot;\\nc- &quot; + Myattributesc.ToString());\n        return 0;\n    }\n}\n\n// This example displays the following output to the console\n//\n// Reflection.PropertyAttributes\n//\n// 1. Mypropertya.Caption = A Default caption\n// 1. Mypropertyb.Caption = B Default caption\n// 1. Mypropertyc.Caption = C Default caption\n//\n// 2. Mypropertya.Caption = A- This is changed.\n// 2. Mypropertyb.Caption = B- This is changed.\n// 2. Mypropertyc.Caption = C Default caption\n//\n// a- None\n// b- None\n// c- None\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic PropertyAttributes Example#1\">Imports System\nImports System.Reflection\nImports Microsoft.VisualBasic\n\n&#39; Make three properties, one read-write, one default,\n&#39; and one read-only. \nPublic Class Aproperty\n    &#39; Define a read-write property.\n    Private myCaption As String = &quot;A Default caption&quot;\n\n    Public Property Caption() As String\n        Get\n            Return myCaption\n        End Get\n        Set(ByVal Value As String)\n            If myCaption &lt;&gt; value Then\n                myCaption = value\n            End If\n        End Set\n    End Property\nEnd Class\n\nPublic Class Bproperty\n    &#39; Define a default property.\n    Private myCaption As String = &quot;B Default caption&quot;\n\n    Default Public ReadOnly Property Item(ByVal index As Integer) As String\n        Get\n            Return &quot;1&quot;\n        End Get\n    End Property\n\n    Public Property Caption() As String\n\n        Get\n            Return myCaption\n        End Get\n        Set(ByVal Value As String)\n            If myCaption &lt;&gt; value Then\n                myCaption = value\n            End If\n        End Set\n    End Property\nEnd Class\n\nPublic Class Cproperty\n    &#39; Define a read-only property.\n    Private myCaption As String = &quot;C Default caption&quot;\n\n    Public ReadOnly Property Caption() As String\n        Get\n            Return myCaption\n        End Get\n        &#39;No setting is allowed because this property is read-only.\n    End Property\nEnd Class\n\n\nClass propertyattributesenum\n\n    Public Shared Function Main() As Integer\n        Console.WriteLine(ControlChars.CrLf &amp; &quot;Reflection.PropertyAttributes&quot;)\n\n        &#39; Determine whether a property exists, and change its value.\n        Dim Mypropertya As New Aproperty()\n        Dim Mypropertyb As New Bproperty()\n        Dim Mypropertyc As New Cproperty()\n\n        Console.Write(ControlChars.CrLf &amp; &quot;1. Mypropertya.Caption = &quot; &amp; _\n           Mypropertya.Caption)\n\n        Console.Write(ControlChars.CrLf &amp; &quot;1. Mypropertyb.Caption = &quot; &amp; _\n           Mypropertyb.Caption)\n\n        Console.Write(ControlChars.CrLf &amp; &quot;1. Mypropertyc.Caption = &quot; &amp; _\n           Mypropertyc.Caption)\n\n        &#39; Only Mypropertya can be changed because Mypropertyb is read-only.\n        Mypropertya.Caption = &quot;A- This is changed.&quot;\n        Mypropertyb.Caption = &quot;B- This is changed.&quot;\n        &#39; Note that Mypropertyc is not changed, because it is read-only.\n        Console.Write(ControlChars.CrLf &amp; ControlChars.CrLf &amp; _\n           &quot;2. Mypropertya.Caption = &quot; &amp; Mypropertya.Caption)\n\n        Console.Write(ControlChars.CrLf &amp; &quot;2. Mypropertyb.Caption = &quot; &amp; _\n           Mypropertyb.Caption)\n\n        Console.Write(ControlChars.CrLf + &quot;2. Mypropertyc.Caption = &quot; &amp; _\n           Mypropertyc.Caption)\n\n        &#39; Get the PropertyAttributes Enumeration of the property.\n        &#39; Get the type.\n        Dim MyTypea As Type = Type.GetType(&quot;Aproperty&quot;)\n        Dim MyTypeb As Type = Type.GetType(&quot;Bproperty&quot;)\n        Dim MyTypec As Type = Type.GetType(&quot;Cproperty&quot;)\n\n        &#39; Get the property attributes.\n        Dim Mypropertyinfoa As PropertyInfo = MyTypea.GetProperty(&quot;Caption&quot;)\n        Dim Myattributesa As PropertyAttributes = Mypropertyinfoa.Attributes\n        Dim Mypropertyinfob As PropertyInfo = MyTypeb.GetProperty(&quot;Item&quot;)\n        Dim Myattributesb As PropertyAttributes = Mypropertyinfob.Attributes\n        Dim Mypropertyinfoc As PropertyInfo = MyTypec.GetProperty(&quot;Caption&quot;)\n        Dim Myattributesc As PropertyAttributes = Mypropertyinfoc.Attributes\n\n        &#39; Display the property attributes value.\n        Console.Write(ControlChars.CrLf &amp; ControlChars.CrLf &amp; &quot;a- &quot; &amp; _\n           Myattributesa.ToString())\n\n        Console.Write(ControlChars.CrLf &amp; &quot;b- &quot; &amp; Myattributesb.ToString())\n\n        Console.Write(ControlChars.CrLf &amp; &quot;c- &quot; &amp; Myattributesc.ToString())\n        Return 0\n    End Function&#39;    End Function\nEnd Class\n\n&#39; This example displays the following output to the console\n&#39;\n&#39; Reflection.PropertyAttributes\n&#39;\n&#39; 1. Mypropertya.Caption = A Default caption\n&#39; 1. Mypropertyb.Caption = B Default caption\n&#39; 1. Mypropertyc.Caption = C Default caption\n&#39;\n&#39; 2. Mypropertya.Caption = A- This is changed.\n&#39; 2. Mypropertyb.Caption = B- This is changed.\n&#39; 2. Mypropertyc.Caption = C Default caption\n&#39;\n&#39; a- None\n&#39; b- None\n&#39; c- None\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>To get the <code>PropertyAttributes</code>, first get the class <code>Type</code>. From the <code>Type</code>, get the <code>PropertyInfo</code>. From the <code>PropertyInfo</code>, get the <code>Attributes</code>.  </p>\n<p> The enumerated value is a number representing the bitwise OR of the attributes implemented on the method.</p>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Reflection_PropertyAttributes_HasDefault\">\r\n      \t\t\t<span class=\"lang-csharp\">HasDefault</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the property has a default value.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_PropertyAttributes_None\">\r\n      \t\t\t<span class=\"lang-csharp\">None</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that no attributes are associated with a property.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_PropertyAttributes_Reserved2\">\r\n      \t\t\t<span class=\"lang-csharp\">Reserved2</span>\r\n      \t</td>\r\n      \t<td><p>Reserved.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_PropertyAttributes_Reserved3\">\r\n      \t\t\t<span class=\"lang-csharp\">Reserved3</span>\r\n      \t</td>\r\n      \t<td><p>Reserved.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_PropertyAttributes_Reserved4\">\r\n      \t\t\t<span class=\"lang-csharp\">Reserved4</span>\r\n      \t</td>\r\n      \t<td><p>Reserved.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_PropertyAttributes_ReservedMask\">\r\n      \t\t\t<span class=\"lang-csharp\">ReservedMask</span>\r\n      \t</td>\r\n      \t<td><p>Specifies a flag reserved for runtime use only.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_PropertyAttributes_RTSpecialName\">\r\n      \t\t\t<span class=\"lang-csharp\">RTSpecialName</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the metadata internal APIs check the name encoding.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_PropertyAttributes_SpecialName\">\r\n      \t\t\t<span class=\"lang-csharp\">SpecialName</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the property is special, with the name describing how the property is special.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Reflection.PropertyAttributes.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyAttributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyAttributes.HasDefault\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyAttributes.None\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyAttributes.Reserved2\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyAttributes.Reserved3\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyAttributes.Reserved4\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyAttributes.ReservedMask\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyAttributes.RTSpecialName\">\r\n<meta name=\"APIName\" content=\"System.Reflection.PropertyAttributes.SpecialName\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 05:47 AM\">\r\n<meta name=\"document_id\" content=\"6b8a0132-2ad8-62c4-3936-c4d0fa111418\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines the attributes that can be associated with a property. These attribute values are defined in corhdr.h.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.reflection/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.PropertyAttributes\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Reflection.PropertyAttributes.yml","open_to_public_contributors":false,"api_name":["System.Reflection.PropertyAttributes","System.Reflection.PropertyAttributes.HasDefault","System.Reflection.PropertyAttributes.None","System.Reflection.PropertyAttributes.Reserved2","System.Reflection.PropertyAttributes.Reserved3","System.Reflection.PropertyAttributes.Reserved4","System.Reflection.PropertyAttributes.ReservedMask","System.Reflection.PropertyAttributes.RTSpecialName","System.Reflection.PropertyAttributes.SpecialName"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.PropertyAttributes","System::Reflection::PropertyAttributes","System.Reflection.PropertyAttributes.HasDefault","System::Reflection::PropertyAttributes::HasDefault","System.Reflection.PropertyAttributes.None","System::Reflection::PropertyAttributes::None","System.Reflection.PropertyAttributes.Reserved2","System::Reflection::PropertyAttributes::Reserved2","System.Reflection.PropertyAttributes.Reserved3","System::Reflection::PropertyAttributes::Reserved3","System.Reflection.PropertyAttributes.Reserved4","System::Reflection::PropertyAttributes::Reserved4","System.Reflection.PropertyAttributes.ReservedMask","System::Reflection::PropertyAttributes::ReservedMask","System.Reflection.PropertyAttributes.RTSpecialName","System::Reflection::PropertyAttributes::RTSpecialName","System.Reflection.PropertyAttributes.SpecialName","System::Reflection::PropertyAttributes::SpecialName"],"dev_langs":["csharp"],"updated_at":"2017-03-31 05:47 AM","document_id":"6b8a0132-2ad8-62c4-3936-c4d0fa111418","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Reflection/PropertyAttributes.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"PropertyAttributes enum | Microsoft Docs","_op_ogTitle":"PropertyAttributes enum","description":"Defines the attributes that can be associated with a property. These attribute values are defined in corhdr.h.\n","toc_asset_id":"api/_splitted/System.Reflection/toc.json","toc_rel":"_splitted/System.Reflection/toc.json","source_url":"","ms.assetid":"System.Reflection.PropertyAttributes","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.propertyattributes","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.propertyattributes","fileRelativePath":"api/System.Reflection.PropertyAttributes.html"},"themesRelativePathToOutputRoot":"_themes/"}