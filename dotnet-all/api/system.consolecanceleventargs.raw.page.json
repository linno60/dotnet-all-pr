{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ConsoleCancelEventArgs</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides data for the <a class=\"xref\" href=\"system.console#System_Console_CancelKeyPress\" data-linktype=\"relative-path\">CancelKeyPress</a> event. This class cannot be inherited.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public sealed class ConsoleCancelEventArgs : EventArgs</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></span></div><span class=\"lang-csharp\">ConsoleCancelEventArgs</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs#System_EventArgs_Empty\" data-linktype=\"relative-path\">Empty</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example demonstrates how to use the ConsoleCancelEventArgs class to handle an event.  </p>\n<pre><code class=\"lang-cs\" name=\"console.cancelkeypress#1\">using System;\n\nclass Sample \n{\n    public static void Main()\n    {\n        ConsoleKeyInfo cki;\n\n        Console.Clear();\n\n        // Establish an event handler to process key press events.\n        Console.CancelKeyPress += new ConsoleCancelEventHandler(myHandler);\n        while (true) {\n            Console.Write(&quot;Press any key, or &#39;X&#39; to quit, or &quot;);\n            Console.WriteLine(&quot;CTRL+C to interrupt the read operation:&quot;);\n\n            // Start a console read operation. Do not display the input.\n            cki = Console.ReadKey(true);\n\n            // Announce the name of the key that was pressed .\n            Console.WriteLine(&quot;  Key pressed: {0}\\n&quot;, cki.Key);\n\n            // Exit if the user pressed the &#39;X&#39; key.\n            if (cki.Key == ConsoleKey.X) break;\n        }\n    }\n\n    protected static void myHandler(object sender, ConsoleCancelEventArgs args)\n    {\n        Console.WriteLine(&quot;\\nThe read operation has been interrupted.&quot;);\n\n        Console.WriteLine(&quot;  Key pressed: {0}&quot;, args.SpecialKey);\n\n        Console.WriteLine(&quot;  Cancel property: {0}&quot;, args.Cancel);\n\n        // Set the Cancel property to true to prevent the process from terminating.\n        Console.WriteLine(&quot;Setting the Cancel property to true...&quot;);\n        args.Cancel = true;\n\n        // Announce the new value of the Cancel property.\n        Console.WriteLine(&quot;  Cancel property: {0}&quot;, args.Cancel);\n        Console.WriteLine(&quot;The read operation will resume...\\n&quot;);\n    }\n}\n// The example displays output similar to the follwoing:\n//    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n//      Key pressed: J\n//    \n//    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n//      Key pressed: Enter\n//    \n//    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n//    \n//    The read operation has been interrupted.\n//      Key pressed: ControlC\n//      Cancel property: False\n//    Setting the Cancel property to true...\n//      Cancel property: True\n//    The read operation will resume...\n//    \n//      Key pressed: Q\n//    \n//    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n//      Key pressed: X\n</code></pre><pre><code class=\"lang-cpp\" name=\"console.cancelkeypress#1\">using namespace System;\n\nvoid OnCancelKeyPressed(Object^ sender, \n    ConsoleCancelEventArgs^ args)\n{\n    Console::WriteLine(&quot;{0}The read operation has been interrupted.&quot;,\n        Environment::NewLine);\n\n    Console::WriteLine(&quot;  Key pressed: {0}&quot;, args-&gt;SpecialKey);\n\n    Console::WriteLine(&quot;  Cancel property: {0}&quot;, args-&gt;Cancel);\n\n    // Set the Cancel property to true to prevent the process from \n    // terminating.\n    Console::WriteLine(&quot;Setting the Cancel property to true...&quot;);\n    args-&gt;Cancel = true;\n\n    // Announce the new value of the Cancel property.\n    Console::WriteLine(&quot;  Cancel property: {0}&quot;, args-&gt;Cancel);\n    Console::WriteLine(&quot;The read operation will resume...{0}&quot;,\n        Environment::NewLine);\n}\n\nint main()\n{       \n    // Clear the screen.\n    Console::Clear();\n\n    // Establish an event handler to process key press events.\n    Console::CancelKeyPress += \n        gcnew ConsoleCancelEventHandler(OnCancelKeyPressed);\n\n    while (true)\n    {\n        // Prompt the user.\n        Console::Write(&quot;Press any key, or &#39;X&#39; to quit, or &quot;);\n        Console::WriteLine(&quot;CTRL+C to interrupt the read operation:&quot;);\n\n        // Start a console read operation. Do not display the input.\n        ConsoleKeyInfo^ keyInfo = Console::ReadKey(true);\n\n        // Announce the name of the key that was pressed .\n        Console::WriteLine(&quot;  Key pressed: {0}{1}&quot;, keyInfo-&gt;Key, \n            Environment::NewLine);\n\n        // Exit if the user pressed the &#39;X&#39; key.\n        if (keyInfo-&gt;Key == ConsoleKey::X)\n        {\n            break;\n        }\n    }\n}\n// The example displays output similar to the following:\n//    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n//    Key pressed: J\n//    \n//    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n//    Key pressed: Enter\n//    \n//    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n//    \n//    The read operation has been interrupted.\n//    Key pressed: ControlC\n//    Cancel property: False\n//    Setting the Cancel property to true...\n//    Cancel property: True\n//    The read operation will resume...\n//    \n//    Key pressed: Q\n//    \n//    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n//    Key pressed: X\n</code></pre><pre><code class=\"lang-vb\" name=\"console.cancelkeypress#1\">Class Sample\n    Public Shared Sub Main() \n        Dim cki As ConsoleKeyInfo\n        \n        Console.Clear()\n        \n        &#39; Establish an event handler to process key press events.\n        AddHandler Console.CancelKeyPress, AddressOf myHandler\n\n        While True\n            Console.Write(&quot;Press any key, or &#39;X&#39; to quit, or &quot;)\n            Console.WriteLine(&quot;CTRL+C to interrupt the read operation:&quot;)\n            \n            &#39; Start a console read operation. Do not display the input.\n            cki = Console.ReadKey(True)\n            \n            &#39; Announce the name of the key that was pressed .\n            Console.WriteLine(&quot;  Key pressed: {0}&quot; &amp; vbCrLf, cki.Key)\n            \n            &#39; Exit if the user pressed the &#39;X&#39; key.\n            If cki.Key = ConsoleKey.X Then Exit While\n        End While\n    End Sub\n\n    Protected Shared Sub myHandler(ByVal sender As Object, _\n                                   ByVal args As ConsoleCancelEventArgs) \n        Console.WriteLine(vbCrLf &amp; &quot;The read operation has been interrupted.&quot;)\n        \n        Console.WriteLine(&quot;  Key pressed: {0}&quot;, args.SpecialKey)\n        \n        Console.WriteLine(&quot;  Cancel property: {0}&quot;, args.Cancel)\n        \n        &#39; Set the Cancel property to true to prevent the process from terminating.\n        Console.WriteLine(&quot;Setting the Cancel property to true...&quot;)\n        args.Cancel = True\n        \n        &#39; Announce the new value of the Cancel property.\n        Console.WriteLine(&quot;  Cancel property: {0}&quot;, args.Cancel)\n        Console.WriteLine(&quot;The read operation will resume...&quot; &amp; vbCrLf)\n    End Sub\nEnd Class\n&#39; The example diplays output similar to the following:\n&#39;    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n&#39;     Key pressed: J\n&#39;    \n&#39;    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n&#39;     Key pressed: Enter\n&#39;    \n&#39;    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n&#39;    \n&#39;    The read operation has been interrupted.\n&#39;     Key pressed: ControlC\n&#39;     Cancel property: False\n&#39;    Setting the Cancel property to true...\n&#39;     Cancel property: True\n&#39;    The read operation will resume...\n&#39;    \n&#39;     Key pressed: Q\n&#39;    \n&#39;    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n&#39;     Key pressed: X\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>A user can interrupt a console application process by simultaneously pressing the <a class=\"xref\" href=\"system.consolemodifiers\" data-linktype=\"relative-path\">ConsoleModifiers</a> modifier key and the <a class=\"xref\" href=\"system.consolekey\" data-linktype=\"relative-path\">ConsoleKey</a> console key (Ctrl+C), or the <a class=\"xref\" href=\"system.consolemodifiers\" data-linktype=\"relative-path\">ConsoleModifiers</a> modifier key and the Break console key (Ctrl+Break). The .NET Framework consequently provides a ConsoleCancelEventArgs object to the event handler for the <a class=\"xref\" href=\"system.console#System_Console_CancelKeyPress\" data-linktype=\"relative-path\">System.Console.CancelKeyPress</a> event to specify whether the process should be cancelled.  </p>\n<p> If the <a class=\"xref\" href=\"system.consolecanceleventargs#System_ConsoleCancelEventArgs_Cancel_\" data-linktype=\"relative-path\">Cancel</a> property is set to <code>true</code> in the event handler, the process is resumed; otherwise, the process is terminated. By default, the value of the ConsoleCancelEventArgs property is <code>false</code>, and the process terminates.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ConsoleCancelEventArgs_Cancel\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Cancel</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value that indicates whether simultaneously pressing the <a class=\"xref\" href=\"system.consolemodifiers\" data-linktype=\"relative-path\">ConsoleModifiers</a> modifier key and the <a class=\"xref\" href=\"system.consolekey\" data-linktype=\"relative-path\">ConsoleKey</a> console key (Ctrl+C) or the Ctrl+Break keys terminates the current process. The default is <code>false</code>, which terminates the current process.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool Cancel { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the current process should resume when the event handler concludes; <code>false</code> if the current process should terminate. The default value is <code>false</code>; the current process terminates when the event handler returns. If <code>true</code>, the current process continues.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Cancel property is automatically initialized to <code>false</code> when the handler for the <a class=\"xref\" href=\"system.console#System_Console_CancelKeyPress\" data-linktype=\"relative-path\">CancelKeyPress</a> event is invoked. The value of the Cancel property when the event handler finishes determines whether the current process resumes or terminates.  </p>\n<p> In a set operation after Ctrl+C is pressed, specify <code>true</code> to indicate that the current process should resume when the event handler concludes, or <code>false</code> to indicate that the current process should terminate.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ConsoleCancelEventArgs_SpecialKey\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SpecialKey</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the combination of modifier and console keys that interrupted the current process.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public ConsoleSpecialKey SpecialKey { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.consolespecialkey\" data-linktype=\"relative-path\">ConsoleSpecialKey</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>One of the enumeration values that specifies the key combination that interrupted the current process. There is no default value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.ConsoleCancelEventArgs.yml\">\r\n<meta name=\"APIName\" content=\"System.ConsoleCancelEventArgs\">\r\n<meta name=\"APIName\" content=\"System.ConsoleCancelEventArgs.Cancel\">\r\n<meta name=\"APIName\" content=\"System.ConsoleCancelEventArgs.SpecialKey\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"06f7158c-c263-95a7-a5c9-8e3d469953f0\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides data for the  event. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.ConsoleCancelEventArgs\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.ConsoleCancelEventArgs.yml","open_to_public_contributors":false,"api_name":["System.ConsoleCancelEventArgs","System.ConsoleCancelEventArgs.Cancel","System.ConsoleCancelEventArgs.SpecialKey"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.ConsoleCancelEventArgs","System::ConsoleCancelEventArgs","System.ConsoleCancelEventArgs.Cancel","System::ConsoleCancelEventArgs::Cancel","System.ConsoleCancelEventArgs.SpecialKey","System::ConsoleCancelEventArgs::SpecialKey"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"06f7158c-c263-95a7-a5c9-8e3d469953f0","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System/ConsoleCancelEventArgs.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ConsoleCancelEventArgs class | Microsoft Docs","_op_ogTitle":"ConsoleCancelEventArgs class","description":"Provides data for the  event. This class cannot be inherited.\n","toc_asset_id":"api/_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.ConsoleCancelEventArgs","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.consolecanceleventargs","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.consolecanceleventargs","fileRelativePath":"api/System.ConsoleCancelEventArgs.html"},"themesRelativePathToOutputRoot":"_themes/"}