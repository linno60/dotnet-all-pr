{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">CustomAttributeNamedArgument</span>\r\n      Struct\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents a named argument of a custom attribute in the reflection-only context.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic struct CustomAttributeNamedArgument</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><span class=\"lang-csharp\">CustomAttributeNamedArgument</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example defines a custom attribute with four constructors and four properties. Two of the properties are read-only, and are set by using the positional parameters of the constructors. The other two properties are read/write, and can be set only by using named arguments. One positional property is an array of strings, and one named property is an array of integers.  </p>\n<p> The attribute is applied to the assembly, to a type declared in the assembly, to a method of the type, and to a parameter of the method. Different constructors are used for these cases. When executed, the assembly loads itself into the reflection-only context and displays information about the custom attributes that were applied to it and to the type and members it contains.  </p>\n<p> The attribute that is applied to the type demonstrates array properties, with both positional and named arguments.  </p>\n<pre><code class=\"lang-cs\" name=\"CustomAttributeData#1\">using System;\nusing System.Reflection;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\n\n// The example attribute is applied to the assembly.\n[assembly:Example(ExampleKind.ThirdKind, Note=&quot;This is a note on the assembly.&quot;)]\n\n// An enumeration used by the ExampleAttribute class.\npublic enum ExampleKind\n{\n    FirstKind, \n    SecondKind, \n    ThirdKind, \n    FourthKind\n};\n\n// An example attribute. The attribute can be applied to all\n// targets, from assemblies to parameters.\n//\n[AttributeUsage(AttributeTargets.All)]\npublic class ExampleAttribute : Attribute\n{\n    // Data for properties.\n    private ExampleKind kindValue;\n    private string noteValue;\n    private string[] arrayStrings;\n    private int[] arrayNumbers;\n\n    // Constructors. The parameterless constructor (.ctor) calls\n    // the constructor that specifies ExampleKind and an array of \n    // strings, and supplies the default values.\n    //\n    public ExampleAttribute(ExampleKind initKind, string[] initStrings)\n    {\n        kindValue = initKind;\n        arrayStrings = initStrings;\n    }\n    public ExampleAttribute(ExampleKind initKind) : this(initKind, null) {}\n    public ExampleAttribute() : this(ExampleKind.FirstKind, null) {}\n\n    // Properties. The Note and Numbers properties must be read/write, so they\n    // can be used as named parameters.\n    //\n    public ExampleKind Kind { get { return kindValue; }}\n    public string[] Strings { get { return arrayStrings; }}\n    public string Note    \n    {\n        get { return noteValue; }\n        set { noteValue = value; }\n    }\n    public int[] Numbers\n    {\n        get { return arrayNumbers; }\n        set { arrayNumbers = value; }\n    }\n}\n\n// The example attribute is applied to the test class.\n//\n[Example(ExampleKind.SecondKind, \n         new string[] { &quot;String array argument, line 1&quot;, \n                        &quot;String array argument, line 2&quot;, \n                        &quot;String array argument, line 3&quot; }, \n         Note=&quot;This is a note on the class.&quot;,\n         Numbers = new int[] { 53, 57, 59 })] \npublic class Test\n{\n    // The example attribute is applied to a method, using the\n    // parameterless constructor and supplying a named argument.\n    // The attribute is also applied to the method parameter.\n    //\n    [Example(Note=&quot;This is a note on a method.&quot;)]\n    public void TestMethod([Example] object arg) { }\n\n    // Main() gets objects representing the assembly, the test\n    // type, the test method, and the method parameter. Custom\n    // attribute data is displayed for each of these.\n    //\n    public static void Main()\n    {\n        Assembly asm = Assembly.ReflectionOnlyLoad(&quot;Source&quot;);\n        Type t = asm.GetType(&quot;Test&quot;);\n        MethodInfo m = t.GetMethod(&quot;TestMethod&quot;);\n        ParameterInfo[] p = m.GetParameters();\n\n        Console.WriteLine(&quot;\\r\\nAttributes for assembly: &#39;{0}&#39;&quot;, asm);\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(asm));\n        Console.WriteLine(&quot;\\r\\nAttributes for type: &#39;{0}&#39;&quot;, t);\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(t));\n        Console.WriteLine(&quot;\\r\\nAttributes for member: &#39;{0}&#39;&quot;, m);\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(m));\n        Console.WriteLine(&quot;\\r\\nAttributes for parameter: &#39;{0}&#39;&quot;, p);\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(p[0]));\n    }\n\n    private static void ShowAttributeData(\n        IList&lt;CustomAttributeData&gt; attributes)\n    {\n        foreach( CustomAttributeData cad in attributes )\n        {\n            Console.WriteLine(&quot;   {0}&quot;, cad);\n            Console.WriteLine(&quot;      Constructor: &#39;{0}&#39;&quot;, cad.Constructor);\n\n            Console.WriteLine(&quot;      Constructor arguments:&quot;);\n            foreach( CustomAttributeTypedArgument cata \n                in cad.ConstructorArguments )\n            {\n                ShowValueOrArray(cata);\n            }\n\n            Console.WriteLine(&quot;      Named arguments:&quot;);\n            foreach( CustomAttributeNamedArgument cana \n                in cad.NamedArguments )\n            {\n                Console.WriteLine(&quot;         MemberInfo: &#39;{0}&#39;&quot;, \n                    cana.MemberInfo);\n                ShowValueOrArray(cana.TypedValue);\n            }\n        }\n    }\n\n    private static void ShowValueOrArray(CustomAttributeTypedArgument cata)\n    {\n        if (cata.Value.GetType() == typeof(ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;))\n        {\n            Console.WriteLine(&quot;         Array of &#39;{0}&#39;:&quot;, cata.ArgumentType);\n\n            foreach (CustomAttributeTypedArgument cataElement in \n                (ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;) cata.Value)\n            {\n                Console.WriteLine(&quot;             Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;,\n                    cataElement.ArgumentType, cataElement.Value);\n            }\n        }\n        else\n        {\n            Console.WriteLine(&quot;         Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;, \n                cata.ArgumentType, cata.Value);\n        }\n    }\n}\n\n/* This code example produces output similar to the following:\n\nAttributes for assembly: &#39;source, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null&#39;\n   [System.Runtime.CompilerServices.CompilationRelaxationsAttribute((Int32)8)]\n      Constructor: &#39;Void .ctor(Int32)&#39;\n      Constructor arguments:\n         Type: &#39;System.Int32&#39;  Value: &#39;8&#39;\n      Named arguments:\n   [System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows = True)]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n         MemberInfo: &#39;Boolean WrapNonExceptionThrows&#39;\n         Type: &#39;System.Boolean&#39;  Value: &#39;True&#39;\n   [ExampleAttribute((ExampleKind)2, Note = &quot;This is a note on the assembly.&quot;)]\n      Constructor: &#39;Void .ctor(ExampleKind)&#39;\n      Constructor arguments:\n         Type: &#39;ExampleKind&#39;  Value: &#39;2&#39;\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on the assembly.&#39;\n\nAttributes for type: &#39;Test&#39;\n   [ExampleAttribute((ExampleKind)1, new String[3] { &quot;String array argument, line 1&quot;, &quot;String array argument, line 2&quot;, &quot;String array argument, line 3&quot; }, Note = &quot;This is a note on the class.&quot;, Numbers = new Int32[3] { 53, 57, 59 })]\n      Constructor: &#39;Void .ctor(ExampleKind, System.String[])&#39;\n      Constructor arguments:\n         Type: &#39;ExampleKind&#39;  Value: &#39;1&#39;\n         Array of &#39;System.String[]&#39;:\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 1&#39;\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 2&#39;\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 3&#39;\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on the class.&#39;\n         MemberInfo: &#39;Int32[] Numbers&#39;\n         Array of &#39;System.Int32[]&#39;:\n             Type: &#39;System.Int32&#39;  Value: &#39;53&#39;\n             Type: &#39;System.Int32&#39;  Value: &#39;57&#39;\n             Type: &#39;System.Int32&#39;  Value: &#39;59&#39;\n\nAttributes for member: &#39;Void TestMethod(System.Object)&#39;\n   [ExampleAttribute(Note = &quot;This is a note on a method.&quot;)]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on a method.&#39;\n\nAttributes for parameter: &#39;System.Object arg&#39;\n   [ExampleAttribute()]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n*/\n</code></pre><pre><code class=\"lang-cpp\" name=\"CustomAttributeData#1\">using namespace System;\nusing namespace System::Reflection;\nusing namespace System::Collections::Generic;\nusing namespace System::Collections::ObjectModel;\n\n// An enumeration used by the ExampleAttribute class.\npublic enum class ExampleKind\n{\n   FirstKind, SecondKind, ThirdKind, FourthKind\n};\n\n// An example attribute. The attribute can be applied to all\n// targets, from assemblies to parameters.\n//\n[AttributeUsage(AttributeTargets::All)]\npublic ref class ExampleAttribute: public Attribute\n{\nprivate:\n   // Data for properties.\n   ExampleKind kindValue;\n   String^ noteValue;\n   array&lt;String^&gt;^ arrayStrings;\n   array&lt;int&gt;^ arrayNumbers;\n\n   // Constructors. \n   void ExampleAttributeInitialize( ExampleKind initKind, array&lt;String^&gt;^ initStrings )\n   {\n      kindValue = initKind;\n      arrayStrings = initStrings;\n   }\npublic:\n   ExampleAttribute()\n   {\n      ExampleAttributeInitialize( ExampleKind::FirstKind, nullptr );\n   }\n   ExampleAttribute( ExampleKind initKind )\n   {\n      ExampleAttributeInitialize( initKind, nullptr );\n   }\n   ExampleAttribute( ExampleKind initKind, array&lt;String^&gt;^ initStrings )\n   {\n      ExampleAttributeInitialize( initKind, initStrings );\n   }\n\n   // Properties. The Note and Numbers properties must be read/write, so they\n   // can be used as named parameters.\n   //\n   property ExampleKind Kind \n   {\n      ExampleKind get()\n      {\n         return kindValue;\n      }\n   }\n   property array&lt;String^&gt;^ Strings\n   {\n      array&lt;String^&gt;^ get()\n      {\n         return arrayStrings;\n      }\n   }\n   property String^ Note \n   {\n      String^ get()\n      {\n         return noteValue;\n      }\n\n      void set( String^ value )\n      {\n         noteValue = value;\n      }\n   }\n   property array&lt;int&gt;^ Numbers\n   {\n      array&lt;int&gt;^ get()\n      {\n         return arrayNumbers;\n      }\n\n      void set( array&lt;int&gt;^ value )\n      {\n         arrayNumbers = value;\n      }\n   }\n};\n\n// The example attribute is applied to the assembly.\n[assembly:Example(ExampleKind::ThirdKind,Note=&quot;This is a note on the assembly.&quot;)];\n\n// The example attribute is applied to the test class.\n//\n[Example(ExampleKind::SecondKind, \n         gcnew array&lt;String^&gt; { &quot;String array argument, line 1&quot;, \n                        &quot;String array argument, line 2&quot;, \n                        &quot;String array argument, line 3&quot; }, \n         Note=&quot;This is a note on the class.&quot;,\n         Numbers = gcnew array&lt;int&gt; { 53, 57, 59 })] \npublic ref class Test\n{\npublic:\n   // The example attribute is applied to a method, using the\n   // parameterless constructor and supplying a named argument.\n   // The attribute is also applied to the method parameter.\n   //\n   [Example(Note=&quot;This is a note on a method.&quot;)]\n   void TestMethod( [Example] Object^ arg ){}\n\n   // Main() gets objects representing the assembly, the test\n   // type, the test method, and the method parameter. Custom\n   // attribute data is displayed for each of these.\n   //\n   static void Main()\n   {\n      Assembly^ assembly = Assembly::ReflectionOnlyLoad( &quot;Source&quot; );\n      Type^ t = assembly-&gt;GetType( &quot;Test&quot; );\n      MethodInfo^ m = t-&gt;GetMethod( &quot;TestMethod&quot; );\n      array&lt;ParameterInfo^&gt;^p = m-&gt;GetParameters();\n\n      Console::WriteLine( &quot;\\r\\nAttributes for assembly: &#39;{0}&#39;&quot;, assembly );\n      ShowAttributeData( CustomAttributeData::GetCustomAttributes( assembly ) );\n      Console::WriteLine( &quot;\\r\\nAttributes for type: &#39;{0}&#39;&quot;, t );\n      ShowAttributeData( CustomAttributeData::GetCustomAttributes( t ) );\n      Console::WriteLine( &quot;\\r\\nAttributes for member: &#39;{0}&#39;&quot;, m );\n      ShowAttributeData( CustomAttributeData::GetCustomAttributes( m ) );\n      Console::WriteLine( &quot;\\r\\nAttributes for parameter: &#39;{0}&#39;&quot;, p );\n      ShowAttributeData( CustomAttributeData::GetCustomAttributes( p[ 0 ] ) );\n   }\n\nprivate:\n    static void ShowValueOrArray(CustomAttributeTypedArgument^ cata)\n    {\n        if (cata-&gt;Value-&gt;GetType() == ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;::typeid)\n        {\n            Console::WriteLine(&quot;         Array of &#39;{0}&#39;:&quot;, cata-&gt;ArgumentType);\n\n            for each (CustomAttributeTypedArgument^ cataElement in \n                (ReadOnlyCollection&lt;CustomAttributeTypedArgument&gt;^) cata-&gt;Value)\n            {\n                Console::WriteLine(&quot;             Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;,\n                    cataElement-&gt;ArgumentType, cataElement-&gt;Value);\n            }\n        }\n        else\n        {\n            Console::WriteLine( &quot;         Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;,\n               cata-&gt;ArgumentType, cata-&gt;Value );\n        }\n    }\n\n   static void ShowAttributeData( IList&lt; CustomAttributeData^ &gt;^ attributes )\n   {\n      for each ( CustomAttributeData^ cad in attributes )\n      {\n         Console::WriteLine( &quot;   {0}&quot;, cad );\n         Console::WriteLine( &quot;      Constructor: &#39;{0}&#39;&quot;, cad-&gt;Constructor );\n\n         Console::WriteLine( &quot;      Constructor arguments:&quot; );\n         for each ( CustomAttributeTypedArgument^ cata in cad-&gt;ConstructorArguments )\n         {\n            ShowValueOrArray(cata);\n         }\n\n         Console::WriteLine( &quot;      Named arguments:&quot; );\n         for each ( CustomAttributeNamedArgument cana in cad-&gt;NamedArguments )\n         {\n            Console::WriteLine( &quot;         MemberInfo: &#39;{0}&#39;&quot;, cana.MemberInfo );\n            ShowValueOrArray(cana.TypedValue);\n         }\n      }\n   }\n};\n\nint main()\n{\n   Test::Main();\n}\n\n/* This code example produces output similar to the following:\n\nAttributes for assembly: &#39;source, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null&#39;\n   [System.Runtime.CompilerServices.CompilationRelaxationsAttribute((Int32)8)]\n      Constructor: &#39;Void .ctor(Int32)&#39;\n      Constructor arguments:\n         Type: &#39;System.Int32&#39;  Value: &#39;8&#39;\n      Named arguments:\n   [System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows = True)]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n         MemberInfo: &#39;Boolean WrapNonExceptionThrows&#39;\n         Type: &#39;System.Boolean&#39;  Value: &#39;True&#39;\n   [ExampleAttribute((ExampleKind)2, Note = &quot;This is a note on the assembly.&quot;)]\n      Constructor: &#39;Void .ctor(ExampleKind)&#39;\n      Constructor arguments:\n         Type: &#39;ExampleKind&#39;  Value: &#39;2&#39;\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on the assembly.&#39;\n\nAttributes for type: &#39;Test&#39;\n   [ExampleAttribute((ExampleKind)1, new String[3] { &quot;String array argument, line 1&quot;, &quot;String array argument, line 2&quot;, &quot;String array argument, line 3&quot; }, Note = &quot;This is a note on the class.&quot;, Numbers = new Int32[3] { 53, 57, 59 })]\n      Constructor: &#39;Void .ctor(ExampleKind, System.String[])&#39;\n      Constructor arguments:\n         Type: &#39;ExampleKind&#39;  Value: &#39;1&#39;\n         Array of &#39;System.String[]&#39;:\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 1&#39;\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 2&#39;\n             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 3&#39;\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on the class.&#39;\n         MemberInfo: &#39;Int32[] Numbers&#39;\n         Array of &#39;System.Int32[]&#39;:\n             Type: &#39;System.Int32&#39;  Value: &#39;53&#39;\n             Type: &#39;System.Int32&#39;  Value: &#39;57&#39;\n             Type: &#39;System.Int32&#39;  Value: &#39;59&#39;\n\nAttributes for member: &#39;Void TestMethod(System.Object)&#39;\n   [ExampleAttribute(Note = &quot;This is a note on a method.&quot;)]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n         MemberInfo: &#39;System.String Note&#39;\n         Type: &#39;System.String&#39;  Value: &#39;This is a note on a method.&#39;\n\nAttributes for parameter: &#39;System.Object arg&#39;\n   [ExampleAttribute()]\n      Constructor: &#39;Void .ctor()&#39;\n      Constructor arguments:\n      Named arguments:\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"CustomAttributeData#1\">Imports System\nImports System.Reflection\nImports System.Collections.Generic\nImports System.Collections.ObjectModel\n\n&#39; The example attribute is applied to the assembly.\n&lt;Assembly:Example(ExampleKind.ThirdKind, Note:=&quot;This is a note on the assembly.&quot;)&gt;\n\n&#39; An enumeration used by the ExampleAttribute class.\nPublic Enum ExampleKind\n    FirstKind\n    SecondKind\n    ThirdKind\n    FourthKind\nEnd Enum\n\n&#39; An example attribute. The attribute can be applied to all\n&#39; targets, from assemblies to parameters.\n&#39;\n&lt;AttributeUsage(AttributeTargets.All)&gt; _\nPublic Class ExampleAttribute\n    Inherits Attribute\n\n    &#39; Data for properties.\n    Private kindValue As ExampleKind\n    Private noteValue As String\n    Private arrayStrings() As String\n    Private arrayNumbers() As Integer\n\n    &#39; Constructors. The parameterless constructor (.ctor) calls\n    &#39; the constructor that specifies ExampleKind and an array of\n    &#39; strings, and supplies the default values.\n    &#39;\n    Public Sub New(ByVal initKind As ExampleKind, ByVal initStrings() As String)\n        kindValue = initKind\n        arrayStrings = initStrings\n    End Sub\n    Public Sub New(ByVal initKind As ExampleKind)\n        Me.New(initKind, Nothing)\n    End Sub\n    Public Sub New()\n        Me.New(ExampleKind.FirstKind, Nothing)\n    End Sub\n\n    &#39; Properties. The Note and Numbers properties must be read/write, so they \n    &#39; can be used as named parameters.\n    &#39;\n    Public ReadOnly Property Kind As ExampleKind\n        Get\n            Return kindValue \n        End Get\n    End Property\n    Public ReadOnly Property Strings As String()\n        Get\n            Return arrayStrings \n        End Get\n    End Property\n    Public Property Note As String\n        Get\n            Return noteValue \n        End Get\n        Set\n            noteValue = value\n        End Set\n    End Property\n    Public Property Numbers As Integer()\n        Get\n            Return arrayNumbers \n        End Get\n        Set\n            arrayNumbers = value\n        End Set\n    End Property\nEnd Class\n\n&#39; The example attribute is applied to the test class.\n&#39;\n&lt;Example(ExampleKind.SecondKind, _\n         New String() { &quot;String array argument, line 1&quot;, _\n                        &quot;String array argument, line 2&quot;, _\n                        &quot;String array argument, line 3&quot; }, _\n         Note := &quot;This is a note on the class.&quot;, _\n         Numbers := New Integer() { 53, 57, 59 })&gt; _\nPublic Class Test\n    &#39; The example attribute is applied to a method, using the\n    &#39; parameterless constructor and supplying a named argument.\n    &#39; The attribute is also applied to the method parameter.\n    &#39;\n    &lt;Example(Note:=&quot;This is a note on a method.&quot;)&gt; _\n    Public Sub TestMethod(&lt;Example()&gt; ByVal arg As Object)\n    End Sub\n\n    &#39; Sub Main gets objects representing the assembly, the test\n    &#39; type, the test method, and the method parameter. Custom\n    &#39; attribute data is displayed for each of these.\n    &#39;\n    Public Shared Sub Main()\n        Dim asm As [Assembly] = Assembly.ReflectionOnlyLoad(&quot;source&quot;)\n        Dim t As Type = asm.GetType(&quot;Test&quot;)\n        Dim m As MethodInfo = t.GetMethod(&quot;TestMethod&quot;)\n        Dim p() As ParameterInfo = m.GetParameters()\n\n        Console.WriteLine(vbCrLf &amp; &quot;Attributes for assembly: &#39;{0}&#39;&quot;, asm)\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(asm))\n        Console.WriteLine(vbCrLf &amp; &quot;Attributes for type: &#39;{0}&#39;&quot;, t)\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(t))\n        Console.WriteLine(vbCrLf &amp; &quot;Attributes for member: &#39;{0}&#39;&quot;, m)\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(m))\n        Console.WriteLine(vbCrLf &amp; &quot;Attributes for parameter: &#39;{0}&#39;&quot;, p)\n        ShowAttributeData(CustomAttributeData.GetCustomAttributes(p(0)))\n    End Sub\n\n    Private Shared Sub ShowAttributeData( _\n        ByVal attributes As IList(Of CustomAttributeData))\n\n        For Each cad As CustomAttributeData _\n            In CType(attributes, IEnumerable(Of CustomAttributeData))\n\n            Console.WriteLine(&quot;   {0}&quot;, cad)\n            Console.WriteLine(&quot;      Constructor: &#39;{0}&#39;&quot;, cad.Constructor)\n\n            Console.WriteLine(&quot;      Constructor arguments:&quot;)\n            For Each cata As CustomAttributeTypedArgument _\n                In CType(cad.ConstructorArguments, IEnumerable(Of CustomAttributeTypedArgument))\n\n                ShowValueOrArray(cata)\n            Next\n\n            Console.WriteLine(&quot;      Named arguments:&quot;)\n            For Each cana As CustomAttributeNamedArgument _\n                In CType(cad.NamedArguments, IEnumerable(Of CustomAttributeNamedArgument))\n\n                Console.WriteLine(&quot;         MemberInfo: &#39;{0}&#39;&quot;, _\n                    cana.MemberInfo)\n                ShowValueOrArray(cana.TypedValue)\n            Next\n        Next\n    End Sub\n\n    Private Shared Sub ShowValueOrArray(ByVal cata As CustomAttributeTypedArgument)\n        If cata.Value.GetType() Is GetType(ReadOnlyCollection(Of CustomAttributeTypedArgument)) Then\n            Console.WriteLine(&quot;         Array of &#39;{0}&#39;:&quot;, cata.ArgumentType)\n\n            For Each cataElement As CustomAttributeTypedArgument In cata.Value\n                Console.WriteLine(&quot;             Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;, _\n                    cataElement.ArgumentType, cataElement.Value)\n            Next\n        Else\n            Console.WriteLine(&quot;         Type: &#39;{0}&#39;  Value: &#39;{1}&#39;&quot;, _\n                cata.ArgumentType, cata.Value)\n        End If       \n    End Sub\nEnd Class\n\n&#39; This code example produces output similar to the following:\n&#39;\n&#39;Attributes for assembly: &#39;source, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null&#39;\n&#39;   [System.Runtime.CompilerServices.CompilationRelaxationsAttribute((Int32)8)]\n&#39;      Constructor: &#39;Void .ctor(Int32)&#39;\n&#39;      Constructor arguments:\n&#39;         Type: &#39;System.Int32&#39;  Value: &#39;8&#39;\n&#39;      Named arguments:\n&#39;   [System.Runtime.CompilerServices.RuntimeCompatibilityAttribute(WrapNonExceptionThrows = True)]\n&#39;      Constructor: &#39;Void .ctor()&#39;\n&#39;      Constructor arguments:\n&#39;      Named arguments:\n&#39;         MemberInfo: &#39;Boolean WrapNonExceptionThrows&#39;\n&#39;         Type: &#39;System.Boolean&#39;  Value: &#39;True&#39;\n&#39;   [ExampleAttribute((ExampleKind)2, Note = &quot;This is a note on the assembly.&quot;)]\n&#39;      Constructor: &#39;Void .ctor(ExampleKind)&#39;\n&#39;      Constructor arguments:\n&#39;         Type: &#39;ExampleKind&#39;  Value: &#39;2&#39;\n&#39;      Named arguments:\n&#39;         MemberInfo: &#39;System.String Note&#39;\n&#39;         Type: &#39;System.String&#39;  Value: &#39;This is a note on the assembly.&#39;\n&#39;\n&#39;Attributes for type: &#39;Test&#39;\n&#39;   [ExampleAttribute((ExampleKind)1, new String[3] { &quot;String array argument, line 1&quot;, &quot;String array argument, line 2&quot;, &quot;String array argument, line 3&quot; }, Note = &quot;This is a note on the class.&quot;, Numbers = new Int32[3] { 53, 57, 59 })]\n&#39;      Constructor: &#39;Void .ctor(ExampleKind, System.String[])&#39;\n&#39;      Constructor arguments:\n&#39;         Type: &#39;ExampleKind&#39;  Value: &#39;1&#39;\n&#39;         Array of &#39;System.String[]&#39;:\n&#39;             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 1&#39;\n&#39;             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 2&#39;\n&#39;             Type: &#39;System.String&#39;  Value: &#39;String array argument, line 3&#39;\n&#39;      Named arguments:\n&#39;         MemberInfo: &#39;System.String Note&#39;\n&#39;         Type: &#39;System.String&#39;  Value: &#39;This is a note on the class.&#39;\n&#39;         MemberInfo: &#39;Int32[] Numbers&#39;\n&#39;         Array of &#39;System.Int32[]&#39;:\n&#39;             Type: &#39;System.Int32&#39;  Value: &#39;53&#39;\n&#39;             Type: &#39;System.Int32&#39;  Value: &#39;57&#39;\n&#39;             Type: &#39;System.Int32&#39;  Value: &#39;59&#39;\n&#39;\n&#39;Attributes for member: &#39;Void TestMethod(System.Object)&#39;\n&#39;   [ExampleAttribute(Note = &quot;This is a note on a method.&quot;)]\n&#39;      Constructor: &#39;Void .ctor()&#39;\n&#39;      Constructor arguments:\n&#39;      Named arguments:\n&#39;         MemberInfo: &#39;System.String Note&#39;\n&#39;         Type: &#39;System.String&#39;  Value: &#39;This is a note on a method.&#39;\n&#39;\n&#39;Attributes for parameter: &#39;System.Object arg&#39;\n&#39;   [ExampleAttribute()]\n&#39;      Constructor: &#39;Void .ctor()&#39;\n&#39;      Constructor arguments:\n&#39;      Named arguments:\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Code that is being examined in the reflection-only context cannot be executed, so it is not always possible to examine custom attributes by creating instances of them and then examining their properties, using methods like <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a>, <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a>, and so on. If the code for the attribute type itself is loaded into the reflection-only context, it cannot be executed.  </p>\n<p> The CustomAttributeNamedArgument structure is used by the <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> class to provide access to a named argument specified for a custom attribute instance, without executing the code of the corresponding property of the custom attribute type. The <a class=\"xref\" href=\"system.reflection.customattributenamedargument#System_Reflection_CustomAttributeNamedArgument_TypedValue_\" data-linktype=\"relative-path\">TypedValue</a> property returns a <a class=\"xref\" href=\"system.reflection.customattributetypedargument\" data-linktype=\"relative-path\">CustomAttributeTypedArgument</a> structure that contains the type and value of the named argument.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Whether an argument is named or positional, you must access its type and value by using the <a class=\"xref\" href=\"system.reflection.customattributetypedargument\" data-linktype=\"relative-path\">CustomAttributeTypedArgument</a> structure.  </p>\n</div>\n<p> To create instances of the <a class=\"xref\" href=\"system.reflection.customattributedata\" data-linktype=\"relative-path\">CustomAttributeData</a> class, use the <code>static</code><a class=\"xref\" href=\"system.reflection.customattributedata#System_Reflection_CustomAttributeData_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> factory method.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Reflection_CustomAttributeNamedArgument__ctor_System_Reflection_MemberInfo_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CustomAttributeNamedArgument(MemberInfo, Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.reflection.customattributenamedargument\" data-linktype=\"relative-path\">CustomAttributeNamedArgument</a> class, which represents the specified field or property of the custom attribute, and specifies the value of the field or property.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public CustomAttributeNamedArgument (System.Reflection.MemberInfo memberInfo, object value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>memberInfo</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A field or property of the custom attribute. The new <a class=\"xref\" href=\"system.reflection.customattributenamedargument\" data-linktype=\"relative-path\">CustomAttributeNamedArgument</a> object represents this member and its value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value of the field or property of the custom attribute.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>memberInfo</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>memberInfo</code> is not a field or property of the custom attribute.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor is for use by inheritors of the <a class=\"xref\" href=\"system.reflection.customattributenamedargument\" data-linktype=\"relative-path\">CustomAttributeNamedArgument</a> class. It is not intended for use in application code.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Reflection_CustomAttributeNamedArgument__ctor_System_Reflection_MemberInfo_System_Reflection_CustomAttributeTypedArgument_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CustomAttributeNamedArgument(MemberInfo, CustomAttributeTypedArgument)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.reflection.customattributenamedargument\" data-linktype=\"relative-path\">CustomAttributeNamedArgument</a> class, which represents the specified field or property of the custom attribute, and specifies a <a class=\"xref\" href=\"system.reflection.customattributetypedargument\" data-linktype=\"relative-path\">CustomAttributeTypedArgument</a> object that describes the type and value of the field or property.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public CustomAttributeNamedArgument (System.Reflection.MemberInfo memberInfo, System.Reflection.CustomAttributeTypedArgument typedArgument);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>memberInfo</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A field or property of the custom attribute. The new <a class=\"xref\" href=\"system.reflection.customattributenamedargument\" data-linktype=\"relative-path\">CustomAttributeNamedArgument</a> object represents this member and its value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>typedArgument</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.customattributetypedargument\" data-linktype=\"relative-path\">CustomAttributeTypedArgument</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that describes the type and value of the field or property.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>memberInfo</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor is for use by inheritors of the <a class=\"xref\" href=\"system.reflection.customattributenamedargument\" data-linktype=\"relative-path\">CustomAttributeNamedArgument</a> class. It is not intended for use in application code.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Reflection_CustomAttributeNamedArgument_IsField\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsField</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether the named argument is a field.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsField { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the named argument is a field; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Reflection_CustomAttributeNamedArgument_MemberInfo\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MemberInfo</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the attribute member that would be used to set the named argument.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Reflection.MemberInfo MemberInfo { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The attribute member that would be used to set the named argument.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>In most cases, the member is a property.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Reflection_CustomAttributeNamedArgument_MemberName\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MemberName</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the name of the attribute member that would be used to set the named argument.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string MemberName { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of the attribute member that would be used to set the named argument.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Reflection_CustomAttributeNamedArgument_TypedValue\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TypedValue</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a <a class=\"xref\" href=\"system.reflection.customattributetypedargument\" data-linktype=\"relative-path\">CustomAttributeTypedArgument</a> structure that can be used to obtain the type and value of the current named argument.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Reflection.CustomAttributeTypedArgument TypedValue { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.customattributetypedargument\" data-linktype=\"relative-path\">CustomAttributeTypedArgument</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A structure that can be used to obtain the type and value of the current named argument.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.reflection.customattributenamedargument\" data-linktype=\"relative-path\">CustomAttributeNamedArgument</a> structure only contains information about how the argument value was set. Use this property to obtain a <a class=\"xref\" href=\"system.reflection.customattributetypedargument\" data-linktype=\"relative-path\">CustomAttributeTypedArgument</a> structure that contains the type and value.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Reflection_CustomAttributeNamedArgument_Equals_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Equals(Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether this instance is equal to a specified object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override bool Equals (object obj);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>obj</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object to compare with this instance, or <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>obj</code> equals the type and value of this instance; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Reflection_CustomAttributeNamedArgument_GetHashCode\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetHashCode()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the hash code for this instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetHashCode ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A 32-bit signed integer hash code.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Reflection_CustomAttributeNamedArgument_ToString\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToString()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a string that consists of the argument name, the equal sign, and a string representation of the argument value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override string ToString ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A string that consists of the argument name, the equal sign, and a string representation of the argument value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Operators\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Reflection_CustomAttributeNamedArgument_op_Equality_System_Reflection_CustomAttributeNamedArgument_System_Reflection_CustomAttributeNamedArgument_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Equality(CustomAttributeNamedArgument, CustomAttributeNamedArgument)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Tests whether two <a class=\"xref\" href=\"system.reflection.customattributenamedargument\" data-linktype=\"relative-path\">CustomAttributeNamedArgument</a> structures are equivalent.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_Equality (System.Reflection.CustomAttributeNamedArgument left, System.Reflection.CustomAttributeNamedArgument right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.customattributenamedargument\" data-linktype=\"relative-path\">CustomAttributeNamedArgument</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The structure to the left of the equality operator.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.customattributenamedargument\" data-linktype=\"relative-path\">CustomAttributeNamedArgument</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The structure to the right of the equality operator.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the two <a class=\"xref\" href=\"system.reflection.customattributenamedargument\" data-linktype=\"relative-path\">CustomAttributeNamedArgument</a> structures are equal; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Reflection_CustomAttributeNamedArgument_op_Inequality_System_Reflection_CustomAttributeNamedArgument_System_Reflection_CustomAttributeNamedArgument_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Inequality(CustomAttributeNamedArgument, CustomAttributeNamedArgument)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Tests whether two <a class=\"xref\" href=\"system.reflection.customattributenamedargument\" data-linktype=\"relative-path\">CustomAttributeNamedArgument</a> structures are different.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_Inequality (System.Reflection.CustomAttributeNamedArgument left, System.Reflection.CustomAttributeNamedArgument right);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>left</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.customattributenamedargument\" data-linktype=\"relative-path\">CustomAttributeNamedArgument</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The structure to the left of the inequality operator.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>right</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.customattributenamedargument\" data-linktype=\"relative-path\">CustomAttributeNamedArgument</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The structure to the right of the inequality operator.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the two <a class=\"xref\" href=\"system.reflection.customattributenamedargument\" data-linktype=\"relative-path\">CustomAttributeNamedArgument</a> structures are different; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Reflection.CustomAttributeNamedArgument.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.CustomAttributeNamedArgument\">\r\n<meta name=\"APIName\" content=\"System.Reflection.CustomAttributeNamedArgument..ctor\">\r\n<meta name=\"APIName\" content=\"System.Reflection.CustomAttributeNamedArgument.Equals\">\r\n<meta name=\"APIName\" content=\"System.Reflection.CustomAttributeNamedArgument.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Reflection.CustomAttributeNamedArgument.IsField\">\r\n<meta name=\"APIName\" content=\"System.Reflection.CustomAttributeNamedArgument.MemberInfo\">\r\n<meta name=\"APIName\" content=\"System.Reflection.CustomAttributeNamedArgument.MemberName\">\r\n<meta name=\"APIName\" content=\"System.Reflection.CustomAttributeNamedArgument.op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Reflection.CustomAttributeNamedArgument.op_op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Reflection.CustomAttributeNamedArgument.op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Reflection.CustomAttributeNamedArgument.op_op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Reflection.CustomAttributeNamedArgument.ToString\">\r\n<meta name=\"APIName\" content=\"System.Reflection.CustomAttributeNamedArgument.TypedValue\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"c08fff75-7fdb-962e-3b50-7e2dcb4c5ee1\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a named argument of a custom attribute in the reflection-only context.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.reflection/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.CustomAttributeNamedArgument\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Reflection.CustomAttributeNamedArgument.yml","open_to_public_contributors":false,"api_name":["System.Reflection.CustomAttributeNamedArgument","System.Reflection.CustomAttributeNamedArgument..ctor","System.Reflection.CustomAttributeNamedArgument.Equals","System.Reflection.CustomAttributeNamedArgument.GetHashCode","System.Reflection.CustomAttributeNamedArgument.IsField","System.Reflection.CustomAttributeNamedArgument.MemberInfo","System.Reflection.CustomAttributeNamedArgument.MemberName","System.Reflection.CustomAttributeNamedArgument.op_Equality","System.Reflection.CustomAttributeNamedArgument.op_op_Equality","System.Reflection.CustomAttributeNamedArgument.op_Inequality","System.Reflection.CustomAttributeNamedArgument.op_op_Inequality","System.Reflection.CustomAttributeNamedArgument.ToString","System.Reflection.CustomAttributeNamedArgument.TypedValue"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.CustomAttributeNamedArgument","System::Reflection::CustomAttributeNamedArgument","System.Reflection.CustomAttributeNamedArgument.#ctor","System::Reflection::CustomAttributeNamedArgument::#ctor","System.Reflection.CustomAttributeNamedArgument.Equals","System::Reflection::CustomAttributeNamedArgument::Equals","System.Reflection.CustomAttributeNamedArgument.GetHashCode","System::Reflection::CustomAttributeNamedArgument::GetHashCode","System.Reflection.CustomAttributeNamedArgument.IsField","System::Reflection::CustomAttributeNamedArgument::IsField","System.Reflection.CustomAttributeNamedArgument.MemberInfo","System::Reflection::CustomAttributeNamedArgument::MemberInfo","System.Reflection.CustomAttributeNamedArgument.MemberName","System::Reflection::CustomAttributeNamedArgument::MemberName","System.Reflection.CustomAttributeNamedArgument.op_Equality","System::Reflection::CustomAttributeNamedArgument::op_Equality","System.Reflection.CustomAttributeNamedArgument.op_Inequality","System::Reflection::CustomAttributeNamedArgument::op_Inequality","System.Reflection.CustomAttributeNamedArgument.ToString","System::Reflection::CustomAttributeNamedArgument::ToString","System.Reflection.CustomAttributeNamedArgument.TypedValue","System::Reflection::CustomAttributeNamedArgument::TypedValue"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"c08fff75-7fdb-962e-3b50-7e2dcb4c5ee1","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Reflection/CustomAttributeNamedArgument.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"CustomAttributeNamedArgument struct | Microsoft Docs","_op_ogTitle":"CustomAttributeNamedArgument struct","description":"Represents a named argument of a custom attribute in the reflection-only context.\n","toc_asset_id":"api/_splitted/System.Reflection/toc.json","toc_rel":"_splitted/System.Reflection/toc.json","source_url":"","ms.assetid":"System.Reflection.CustomAttributeNamedArgument","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.customattributenamedargument","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.customattributenamedargument","fileRelativePath":"api/System.Reflection.CustomAttributeNamedArgument.html"},"themesRelativePathToOutputRoot":"_themes/"}