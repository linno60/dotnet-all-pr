{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">DataGridViewCellContextMenuStripNeededEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that will handle a <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellContextMenuStripNeeded\" data-linktype=\"relative-path\">CellContextMenuStripNeeded</a> event of a <a class=\"xref\" href=\"system.windows.forms.datagridview\" data-linktype=\"relative-path\">DataGridView</a>.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void DataGridViewCellContextMenuStripNeededEventHandler(object sender, DataGridViewCellContextMenuStripNeededEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">System.Delegate</a></span></div><span class=\"lang-csharp\">DataGridViewCellContextMenuStripNeededEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example uses <a class=\"xref\" href=\"system.windows.forms.datagridviewcellcontextmenustripneededeventargs\" data-linktype=\"relative-path\">DataGridViewCellContextMenuStripNeededEventArgs</a> to set the context menu without unsharing the row.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.DataGridView_SharedRowScenarios#20\">    private ToolStripMenuItem wholeTable = new ToolStripMenuItem();\n    private ToolStripMenuItem lookUp = new ToolStripMenuItem();\n    private ContextMenuStrip strip;\n    private string cellErrorText;\n\n    private void dataGridView1_CellContextMenuStripNeeded(object sender,\n        DataGridViewCellContextMenuStripNeededEventArgs e)\n    {\n        cellErrorText = String.Empty;\n\n        if (strip == null)\n        {\n            strip = new ContextMenuStrip();\n            lookUp.Text = &quot;Look Up&quot;;\n            wholeTable.Text = &quot;See Whole Table&quot;;\n            strip.Items.Add(lookUp);\n            strip.Items.Add(wholeTable);\n        }\n        e.ContextMenuStrip = strip;\n    }\n\n    private void wholeTable_Click(object sender, EventArgs e)\n    {\n        dataGridView1.DataSource = Populate(&quot;Select * from employees&quot;, true);\n    }\n\n    private DataGridViewCellEventArgs theCellImHoveringOver;\n\n    private void dataGridView1_CellMouseEnter(object sender, DataGridViewCellEventArgs e)\n    {\n        theCellImHoveringOver = e;\n    }\n\n    private DataGridViewCellEventArgs cellErrorLocation;\n\n    private void lookUp_Click(object sender, EventArgs e)\n    {\n        try\n        {\n            dataGridView1.DataSource = Populate(&quot;Select * from employees where &quot; +\n                dataGridView1.Columns[theCellImHoveringOver.ColumnIndex].Name + &quot; = &#39;&quot; +\n                dataGridView1.Rows[theCellImHoveringOver.RowIndex].\n                Cells[theCellImHoveringOver.ColumnIndex].Value + &quot;&#39;&quot;,\n                true);\n        }\n        catch (SqlException)\n        {\n            cellErrorText = &quot;Can&#39;t look this cell up&quot;;\n            cellErrorLocation = theCellImHoveringOver;\n        }\n    }\n\n    private void dataGridView1_CellErrorTextNeeded(object sender,\n        DataGridViewCellErrorTextNeededEventArgs e)\n    {\n        if (cellErrorLocation != null)\n        {\n            if (e.ColumnIndex == cellErrorLocation.ColumnIndex &amp;&amp;\n                e.RowIndex == cellErrorLocation.RowIndex)\n            {\n                e.ErrorText = cellErrorText;\n            }\n        }\n    }\n\n    private DataTable Populate(string query, bool resetUnsharedCounter)\n    {\n        if (resetUnsharedCounter)\n        {\n            ResetCounter();\n        }\n\n        // Alter the data source as necessary\n        SqlDataAdapter adapter = new SqlDataAdapter(query,\n            new SqlConnection(&quot;Integrated Security=SSPI;Persist Security Info=False;&quot; +\n            &quot;Initial Catalog=Northwind;Data Source=localhost&quot;));\n\n        DataTable table = new DataTable();\n        table.Locale = System.Globalization.CultureInfo.InvariantCulture;\n        adapter.Fill(table);\n        return table;\n    }\n\n    private Label count = new Label();\n    private int unsharedRowCounter;\n\n    private void ResetCounter()\n    {\n        unsharedRowCounter = 0;\n        count.Text = unsharedRowCounter.ToString();\n    }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.DataGridView_SharedRowScenarios#20\">    ToolStripMenuItem^ wholeTable;\n    ToolStripMenuItem^ lookUp;\n    System::Windows::Forms::ContextMenuStrip^ strip;\n    String^ cellErrorText;\n\n    void dataGridView1_CellContextMenuStripNeeded( Object^ /*sender*/,\n        DataGridViewCellContextMenuStripNeededEventArgs^ e )\n    {\n        cellErrorText = String::Empty;\n        if ( strip == nullptr )\n        {\n            strip = gcnew System::Windows::Forms::ContextMenuStrip;\n            lookUp-&gt;Text = L&quot;Look Up&quot;;\n            wholeTable-&gt;Text = L&quot;See Whole Table&quot;;\n            strip-&gt;Items-&gt;Add( lookUp );\n            strip-&gt;Items-&gt;Add( wholeTable );\n        }\n\n        e-&gt;ContextMenuStrip = strip;\n    }\n\n    void wholeTable_Click( Object^ /*sender*/, EventArgs^ /*e*/ )\n    {\n        dataGridView1-&gt;DataSource = Populate( L&quot;Select * from employees&quot;, true );\n    }\n\n    DataGridViewCellEventArgs^ theCellImHoveringOver;\n    void dataGridView1_CellMouseEnter( Object^ /*sender*/, DataGridViewCellEventArgs^ e )\n    {\n        theCellImHoveringOver = e;\n    }\n\n    DataGridViewCellEventArgs^ cellErrorLocation;\n    void lookUp_Click( Object^ /*sender*/, EventArgs^ /*e*/ )\n    {\n        try\n        {\n            dataGridView1-&gt;DataSource = Populate( String::Format( L&quot;Select * from employees where {0} = &#39;{1}&#39;&quot;, dataGridView1-&gt;Columns[ theCellImHoveringOver-&gt;ColumnIndex ]-&gt;Name, dataGridView1-&gt;Rows[ theCellImHoveringOver-&gt;RowIndex ]-&gt;Cells[ theCellImHoveringOver-&gt;ColumnIndex ]-&gt;Value ), true );\n        }\n        catch ( ... ) \n        {\n            cellErrorText = L&quot;Can&#39;t look this cell up&quot;;\n            cellErrorLocation = theCellImHoveringOver;\n        }\n\n    }\n\n    void dataGridView1_CellErrorTextNeeded( Object^ /*sender*/, DataGridViewCellErrorTextNeededEventArgs^ e )\n    {\n        if ( cellErrorLocation != nullptr )\n        {\n            if ( e-&gt;ColumnIndex == cellErrorLocation-&gt;ColumnIndex &amp;&amp; e-&gt;RowIndex == cellErrorLocation-&gt;RowIndex )\n            {\n                e-&gt;ErrorText = cellErrorText;\n            }\n        }\n    }\n\n    DataTable^ Populate( String^ query, bool resetUnsharedCounter )\n    {\n        if ( resetUnsharedCounter )\n        {\n            ResetCounter();\n        }\n\n\n        // Alter the data source as necessary\n        SqlDataAdapter^ adapter = gcnew SqlDataAdapter( query,\n            gcnew SqlConnection( L&quot;Integrated Security=SSPI;Persist Security Info=False;&quot;\n            L&quot;Initial Catalog=Northwind;Data Source= localhost&quot; ) );\n        DataTable^ table = gcnew DataTable;\n        adapter-&gt;Fill( table );\n        return table;\n    }\n\n    Label^ count;\n    int unsharedRowCounter;\n    void ResetCounter()\n    {\n        unsharedRowCounter = 0;\n        count-&gt;Text = unsharedRowCounter.ToString();\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.DataGridView_SharedRowScenarios#20\">    Private WithEvents wholeTable As New ToolStripMenuItem()\n    Private WithEvents lookUp As New ToolStripMenuItem()\n    Private strip As ContextMenuStrip\n    Private cellErrorText As String\n\n    Private Sub dataGridView1_CellContextMenuStripNeeded(ByVal sender As Object, _\n        ByVal e As DataGridViewCellContextMenuStripNeededEventArgs) _\n        Handles dataGridView1.CellContextMenuStripNeeded\n\n        cellErrorText = String.Empty\n\n        If strip Is Nothing Then\n            strip = New ContextMenuStrip()\n            lookUp.Text = &quot;Look Up&quot;\n            wholeTable.Text = &quot;See Whole Table&quot;\n            strip.Items.Add(lookUp)\n            strip.Items.Add(wholeTable)\n        End If\n        e.ContextMenuStrip = strip\n    End Sub\n\n    Private Sub wholeTable_Click(ByVal sender As Object, ByVal e As EventArgs) Handles wholeTable.Click\n        dataGridView1.DataSource = Populate(&quot;Select * from employees&quot;, True)\n    End Sub\n\n    Private theCellImHoveringOver As DataGridViewCellEventArgs\n\n    Private Sub dataGridView1_CellMouseEnter(ByVal sender As Object, _\n        ByVal e As DataGridViewCellEventArgs) _\n        Handles dataGridView1.CellMouseEnter\n\n        theCellImHoveringOver = e\n    End Sub\n\n    Private cellErrorLocation As DataGridViewCellEventArgs\n\n    Private Sub lookUp_Click(ByVal sender As Object, ByVal e As EventArgs) Handles lookUp.Click\n        Try\n            dataGridView1.DataSource = Populate(&quot;Select * from employees where &quot; &amp; _\n                dataGridView1.Columns(theCellImHoveringOver.ColumnIndex).Name &amp; &quot; = &#39;&quot; &amp; _\n                dataGridView1.Rows(theCellImHoveringOver.RowIndex).Cells(theCellImHoveringOver.ColumnIndex).Value.ToString() &amp; _\n                &quot;&#39;&quot;, True)\n        Catch ex As SqlException\n            cellErrorText = &quot;Can&#39;t look this cell up&quot;\n            cellErrorLocation = theCellImHoveringOver\n        End Try\n    End Sub\n\n    Private Sub dataGridView1_CellErrorTextNeeded(ByVal sender As Object, _\n                ByVal e As DataGridViewCellErrorTextNeededEventArgs) _\n                Handles dataGridView1.CellErrorTextNeeded\n        If (Not cellErrorLocation Is Nothing) Then\n            If e.ColumnIndex = cellErrorLocation.ColumnIndex AndAlso _\n                e.RowIndex = cellErrorLocation.RowIndex Then\n                e.ErrorText = cellErrorText\n            End If\n        End If\n    End Sub\n\n    Private Function Populate(ByVal query As String, ByVal resetUnsharedCounter As Boolean) As DataTable\n\n        If resetUnsharedCounter Then\n            ResetCounter()\n        End If\n\n        &#39; Alter the data source as necessary\n        Dim adapter As New SqlDataAdapter(query, _\n            New SqlConnection(&quot;Integrated Security=SSPI;Persist Security Info=False;&quot; &amp; _\n            &quot;Initial Catalog=Northwind;Data Source=localhost&quot;))\n\n        Dim table As New DataTable()\n        table.Locale = System.Globalization.CultureInfo.InvariantCulture\n        adapter.Fill(table)\n        Return table\n    End Function\n\n    Private count As New Label()\n    Private unsharedRowCounter As Integer\n\n    Private Sub ResetCounter()\n        unsharedRowCounter = 0\n        count.Text = unsharedRowCounter.ToString()\n    End Sub\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellContextMenuStripNeeded\" data-linktype=\"relative-path\">CellContextMenuStripNeeded</a> event occurs only when the <a class=\"xref\" href=\"system.windows.forms.datagridview\" data-linktype=\"relative-path\">DataGridView</a> control <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_DataSource_\" data-linktype=\"relative-path\">DataSource</a> property is set or its <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_VirtualMode_\" data-linktype=\"relative-path\">VirtualMode</a> property is <code>true</code>.  </p>\n<p> When you handle the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellContextMenuStripNeeded\" data-linktype=\"relative-path\">CellContextMenuStripNeeded</a> event, the shortcut menu that you specify in the handler is shown whenever the user right-clicks a cell. This is useful when you want to display shortcut menus determined by the current state or value of a cell.  </p>\n<p> The <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellContextMenuStripNeeded\" data-linktype=\"relative-path\">CellContextMenuStripNeeded</a> event also occurs whenever the value of the <a class=\"xref\" href=\"system.windows.forms.datagridviewcell#System_Windows_Forms_DataGridViewCell_ContextMenuStrip_\" data-linktype=\"relative-path\">ContextMenuStrip</a> property is retrieved, either programmatically or when the user right-clicks the cell.  </p>\n<p> You can use the <a class=\"xref\" href=\"system.windows.forms.datagridviewcelleventargs#System_Windows_Forms_DataGridViewCellEventArgs_ColumnIndex_\" data-linktype=\"relative-path\">ColumnIndex</a> and <a class=\"xref\" href=\"system.windows.forms.datagridviewcelleventargs#System_Windows_Forms_DataGridViewCellEventArgs_RowIndex_\" data-linktype=\"relative-path\">RowIndex</a> properties to determine the state or value of a cell, and use this information to set the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellcontextmenustripneededeventargs#System_Windows_Forms_DataGridViewCellContextMenuStripNeededEventArgs_ContextMenuStrip_\" data-linktype=\"relative-path\">ContextMenuStrip</a> property. This property is initialized with the value of the cell <a class=\"xref\" href=\"system.windows.forms.datagridviewcell#System_Windows_Forms_DataGridViewCell_ContextMenuStrip_\" data-linktype=\"relative-path\">ContextMenuStrip</a> property, which the event value overrides.  </p>\n<p> Handle the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellContextMenuStripNeeded\" data-linktype=\"relative-path\">CellContextMenuStripNeeded</a> event when working with large amounts of data to avoid the performance penalties of setting the cell <a class=\"xref\" href=\"system.windows.forms.datagridviewcell#System_Windows_Forms_DataGridViewCell_ContextMenuStrip_\" data-linktype=\"relative-path\">ContextMenuStrip</a> value for multiple cells. For more information, see <a href=\"../topic/best%20practices%20for%20scaling%20the%20windows%20forms%20datagridview%20control\" data-linktype=\"relative-path\">Best Practices for Scaling the Windows Forms DataGridView Control</a>.  </p>\n<p> You can also specify shortcut menus for individual rows rather than individual cells by setting the row <a class=\"xref\" href=\"system.windows.forms.datagridviewrow#System_Windows_Forms_DataGridViewRow_ContextMenuStrip_\" data-linktype=\"relative-path\">ContextMenuStrip</a> property or handling the <a class=\"xref\" href=\"system.windows.forms.datagridview\" data-linktype=\"relative-path\">DataGridView</a> control&#39;s <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_RowContextMenuStripNeeded\" data-linktype=\"relative-path\">RowContextMenuStripNeeded</a> event. The cell <a class=\"xref\" href=\"system.windows.forms.datagridviewcell#System_Windows_Forms_DataGridViewCell_ContextMenuStrip_\" data-linktype=\"relative-path\">ContextMenuStrip</a> property setting overrides the row <a class=\"xref\" href=\"system.windows.forms.datagridviewrow#System_Windows_Forms_DataGridViewRow_ContextMenuStrip_\" data-linktype=\"relative-path\">ContextMenuStrip</a> property setting, and the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellContextMenuStripNeeded\" data-linktype=\"relative-path\">CellContextMenuStripNeeded</a> event overrides both the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_RowContextMenuStripNeeded\" data-linktype=\"relative-path\">RowContextMenuStripNeeded</a> event and the row <a class=\"xref\" href=\"system.windows.forms.datagridviewrow#System_Windows_Forms_DataGridViewRow_ContextMenuStrip_\" data-linktype=\"relative-path\">ContextMenuStrip</a> property setting. You can specify <code>null</code> for a cell shortcut menu, however, to prevent a row shortcut menu from being overridden.  </p>\n<p> For more information about handling events, see <a href=\"http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67\" data-linktype=\"external\">NIB: Consuming Events</a>.  </p>\n<p> When you create a DataGridViewCellContextMenuStripNeededEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see <a href=\"http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115\" data-linktype=\"external\">NIB: Events and Delegates</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-24 01:41 AM\">\r\n<meta name=\"document_id\" content=\"41acd075-a5e2-8f66-2111-97fe07aa3494\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that will handle a  event of a .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.windows.forms/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler","System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler..ctor","System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler.Invoke","System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler.BeginInvoke","System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler","System::Windows::Forms::DataGridViewCellContextMenuStripNeededEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-24 01:41 AM","document_id":"41acd075-a5e2-8f66-2111-97fe07aa3494","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/DataGridViewCellContextMenuStripNeededEventHandler.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DataGridViewCellContextMenuStripNeededEventHandler delegate | Microsoft Docs","_op_ogTitle":"DataGridViewCellContextMenuStripNeededEventHandler delegate","description":"Represents the method that will handle a  event of a .\n","toc_asset_id":"api/_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.datagridviewcellcontextmenustripneededeventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.datagridviewcellcontextmenustripneededeventhandler","fileRelativePath":"api/System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}