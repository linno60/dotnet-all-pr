{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">TaskStatus</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the current stage in the lifecycle of a <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public enum TaskStatus</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">TaskStatus</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example creates 20 tasks that will loop until a counter is incremented to a value of 2 million. When the first 10 tasks reach 2 million, the cancellation token is cancelled, and any tasks whose counters have not reached 2 million are cancelled. The example then examines the <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Status_\" data-linktype=\"relative-path\">Status</a> property of each task to indicate whether the task has completed successfully or been cancelled. For those that have completed, it displays the value returned by the task.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Threading.Tasks.Task.Run#7\">using System;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\n\npublic class Example\n{\n   public static void Main()\n   {\n      var tasks = new List&lt;Task&lt;int&gt;&gt;();\n      var source = new CancellationTokenSource();\n      var token = source.Token;\n      int completedIterations = 0;\n\n      for (int n = 0; n &lt;= 19; n++)\n         tasks.Add(Task.Run( () =&gt; { int iterations = 0;\n                                     for (int ctr = 1; ctr &lt;= 2000000; ctr++) {\n                                         token.ThrowIfCancellationRequested();\n                                         iterations++;\n                                     }\n                                     Interlocked.Increment(ref completedIterations);\n                                     if (completedIterations &gt;= 10)\n                                        source.Cancel();\n                                     return iterations; }, token));\n\n      Console.WriteLine(&quot;Waiting for the first 10 tasks to complete...\\n&quot;);\n      try  {\n         Task.WaitAll(tasks.ToArray());\n      }\n      catch (AggregateException) {\n         Console.WriteLine(&quot;Status of tasks:\\n&quot;);\n         Console.WriteLine(&quot;{0,10} {1,20} {2,14:N0}&quot;, &quot;Task Id&quot;,\n                           &quot;Status&quot;, &quot;Iterations&quot;);\n         foreach (var t in tasks)\n            Console.WriteLine(&quot;{0,10} {1,20} {2,14}&quot;,\n                              t.Id, t.Status,\n                              t.Status != TaskStatus.Canceled ? t.Result.ToString(&quot;N0&quot;) : &quot;n/a&quot;);\n      }\n   }\n}\n// The example displays output like the following:\n//    Waiting for the first 10 tasks to complete...\n//    Status of tasks:\n//\n//       Task Id               Status     Iterations\n//             1      RanToCompletion      2,000,000\n//             2      RanToCompletion      2,000,000\n//             3      RanToCompletion      2,000,000\n//             4      RanToCompletion      2,000,000\n//             5      RanToCompletion      2,000,000\n//             6      RanToCompletion      2,000,000\n//             7      RanToCompletion      2,000,000\n//             8      RanToCompletion      2,000,000\n//             9      RanToCompletion      2,000,000\n//            10             Canceled            n/a\n//            11             Canceled            n/a\n//            12             Canceled            n/a\n//            13             Canceled            n/a\n//            14             Canceled            n/a\n//            15             Canceled            n/a\n//            16      RanToCompletion      2,000,000\n//            17             Canceled            n/a\n//            18             Canceled            n/a\n//            19             Canceled            n/a\n//            20             Canceled            n/a\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.Tasks.Task.Run#7\">Imports System.Collections.Generic\nImports System.Threading\nImports System.Threading.Tasks\n\nModule Example\n\n   Public Sub Main()\n      Dim tasks As New List(Of Task(Of Integer))()\n      Dim source As New CancellationTokenSource\n      Dim token As CancellationToken = source.Token\n      Dim completedIterations As Integer = 0\n      \n      For n As Integer = 0 To 19\n         tasks.Add(Task.Run( Function()\n                                Dim iterations As Integer= 0\n                                For ctr As Long = 1 To 2000000\n                                   token.ThrowIfCancellationRequested()\n                                   iterations += 1\n                                Next\n                                Interlocked.Increment(completedIterations)\n                                If completedIterations &gt;= 10 Then source.Cancel()\n                                Return iterations\n                             End Function, token))\n      Next\n\n      Console.WriteLine(&quot;Waiting for the first 10 tasks to complete... &quot;)\n      Try\n         Task.WaitAll(tasks.ToArray())\n      Catch e As AggregateException\n         Console.WriteLine(&quot;Status of tasks:&quot;)\n         Console.WriteLine()\n         Console.WriteLine(&quot;{0,10} {1,20} {2,14}&quot;, &quot;Task Id&quot;,\n                           &quot;Status&quot;, &quot;Iterations&quot;)\n         For Each t In tasks\n            Console.WriteLine(&quot;{0,10} {1,20} {2,14}&quot;,\n                              t.Id, t.Status,\n                              If(t.Status &lt;&gt; TaskStatus.Canceled,\n                                 t.Result.ToString(&quot;N0&quot;), &quot;n/a&quot;))\n         Next\n      End Try\n   End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;    Waiting for the first 10 tasks to complete...\n&#39;    Status of tasks:\n&#39;\n&#39;       Task Id               Status     Iterations\n&#39;             1      RanToCompletion      2,000,000\n&#39;             2      RanToCompletion      2,000,000\n&#39;             3      RanToCompletion      2,000,000\n&#39;             4      RanToCompletion      2,000,000\n&#39;             5      RanToCompletion      2,000,000\n&#39;             6      RanToCompletion      2,000,000\n&#39;             7      RanToCompletion      2,000,000\n&#39;             8      RanToCompletion      2,000,000\n&#39;             9      RanToCompletion      2,000,000\n&#39;            10             Canceled            n/a\n&#39;            11             Canceled            n/a\n&#39;            12             Canceled            n/a\n&#39;            13             Canceled            n/a\n&#39;            14             Canceled            n/a\n&#39;            15             Canceled            n/a\n&#39;            16      RanToCompletion      2,000,000\n&#39;            17             Canceled            n/a\n&#39;            18             Canceled            n/a\n&#39;            19             Canceled            n/a\n&#39;            20             Canceled            n/a\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The <a class=\"xref\" href=\"system.threading.tasks.task#System_Threading_Tasks_Task_Status_\" data-linktype=\"relative-path\">Status</a> property returns a member of the TaskStatus enumeration to indicate the task&#39;s current status.</p>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Threading_Tasks_TaskStatus_Canceled\">\r\n      \t\t\t<span class=\"lang-csharp\">Canceled</span>\r\n      \t</td>\r\n      \t<td><p>The task acknowledged cancellation by throwing an OperationCanceledException with its own CancellationToken while the token was in signaled state, or the task&#39;s CancellationToken was already signaled before the task started executing. For more information, see <a href=\"../topic/task%20cancellation\" data-linktype=\"relative-path\">Task Cancellation</a>.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Threading_Tasks_TaskStatus_Created\">\r\n      \t\t\t<span class=\"lang-csharp\">Created</span>\r\n      \t</td>\r\n      \t<td><p>The task has been initialized but has not yet been scheduled.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Threading_Tasks_TaskStatus_Faulted\">\r\n      \t\t\t<span class=\"lang-csharp\">Faulted</span>\r\n      \t</td>\r\n      \t<td><p>The task completed due to an unhandled exception.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Threading_Tasks_TaskStatus_RanToCompletion\">\r\n      \t\t\t<span class=\"lang-csharp\">RanToCompletion</span>\r\n      \t</td>\r\n      \t<td><p>The task completed execution successfully.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Threading_Tasks_TaskStatus_Running\">\r\n      \t\t\t<span class=\"lang-csharp\">Running</span>\r\n      \t</td>\r\n      \t<td><p>The task is running but has not yet completed.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Threading_Tasks_TaskStatus_WaitingForActivation\">\r\n      \t\t\t<span class=\"lang-csharp\">WaitingForActivation</span>\r\n      \t</td>\r\n      \t<td><p>The task is waiting to be activated and scheduled internally by the .NET Framework infrastructure.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Threading_Tasks_TaskStatus_WaitingForChildrenToComplete\">\r\n      \t\t\t<span class=\"lang-csharp\">WaitingForChildrenToComplete</span>\r\n      \t</td>\r\n      \t<td><p>The task has finished executing and is implicitly waiting for attached child tasks to complete.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Threading_Tasks_TaskStatus_WaitingToRun\">\r\n      \t\t\t<span class=\"lang-csharp\">WaitingToRun</span>\r\n      \t</td>\r\n      \t<td><p>The task has been scheduled for execution but has not yet begun executing.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Threading.Tasks.TaskStatus.yml\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.TaskStatus\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.TaskStatus.Canceled\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.TaskStatus.Created\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.TaskStatus.Faulted\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.TaskStatus.RanToCompletion\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.TaskStatus.Running\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.TaskStatus.WaitingForActivation\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.TaskStatus.WaitingForChildrenToComplete\">\r\n<meta name=\"APIName\" content=\"System.Threading.Tasks.TaskStatus.WaitingToRun\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"40d3860a-b818-494d-8552-fd4a761da80d\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the current stage in the lifecycle of a .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.threading.tasks/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Threading.Tasks.TaskStatus\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Threading.Tasks.TaskStatus.yml","open_to_public_contributors":false,"api_name":["System.Threading.Tasks.TaskStatus","System.Threading.Tasks.TaskStatus.Canceled","System.Threading.Tasks.TaskStatus.Created","System.Threading.Tasks.TaskStatus.Faulted","System.Threading.Tasks.TaskStatus.RanToCompletion","System.Threading.Tasks.TaskStatus.Running","System.Threading.Tasks.TaskStatus.WaitingForActivation","System.Threading.Tasks.TaskStatus.WaitingForChildrenToComplete","System.Threading.Tasks.TaskStatus.WaitingToRun"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Threading.Tasks.TaskStatus","System::Threading::Tasks::TaskStatus","System.Threading.Tasks.TaskStatus.Canceled","System::Threading::Tasks::TaskStatus::Canceled","System.Threading.Tasks.TaskStatus.Created","System::Threading::Tasks::TaskStatus::Created","System.Threading.Tasks.TaskStatus.Faulted","System::Threading::Tasks::TaskStatus::Faulted","System.Threading.Tasks.TaskStatus.RanToCompletion","System::Threading::Tasks::TaskStatus::RanToCompletion","System.Threading.Tasks.TaskStatus.Running","System::Threading::Tasks::TaskStatus::Running","System.Threading.Tasks.TaskStatus.WaitingForActivation","System::Threading::Tasks::TaskStatus::WaitingForActivation","System.Threading.Tasks.TaskStatus.WaitingForChildrenToComplete","System::Threading::Tasks::TaskStatus::WaitingForChildrenToComplete","System.Threading.Tasks.TaskStatus.WaitingToRun","System::Threading::Tasks::TaskStatus::WaitingToRun"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"40d3860a-b818-494d-8552-fd4a761da80d","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Threading.Tasks/TaskStatus.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"TaskStatus enum | Microsoft Docs","_op_ogTitle":"TaskStatus enum","description":"Represents the current stage in the lifecycle of a .\n","toc_asset_id":"api/_splitted/System.Threading.Tasks/toc.json","toc_rel":"_splitted/System.Threading.Tasks/toc.json","source_url":"","ms.assetid":"System.Threading.Tasks.TaskStatus","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.taskstatus","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.taskstatus","fileRelativePath":"api/System.Threading.Tasks.TaskStatus.html"},"themesRelativePathToOutputRoot":"_themes/"}