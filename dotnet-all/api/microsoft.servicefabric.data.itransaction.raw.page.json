{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ITransaction</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>A sequence of operations performed as a single logical unit of work.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public interface ITransaction : IDisposable</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>A transaction must exhibit the following ACID properties. (see: <a href=\"https://technet.microsoft.com/en-us/library/ms190612\" data-linktype=\"external\">https://technet.microsoft.com/en-us/library/ms190612</a>)</p>\n<pre><code>                    Atomicity - A transaction must be an atomic unit of work; either all of its data modifications are\n                    performed, or none of them is performed.\n\n                    Consistency - When completed, a transaction must leave all data in a consistent state. All\n                    internal data structures must be correct at the end of the transaction.\n\n                    Isolation - Modifications made by concurrent transactions must be isolated from the\n                    modifications made by any other concurrent transactions. \n                    The isolation level used for an operation within an  is determined by the\n                     performing the operation.\n\n                    Durability - After a transaction has completed, its effects are permanently in place in the system.\n                    The modifications persist even in the event of a system failure.\n\n        Any instance member of this type is not guaranteed to be thread safe. \n        This makes transactions the unit of concurrency: Users can have multiple transactions in-flight at any given point of time, but for a given transaction each API must be called one at a time.\n        All  APIs that accept a transaction and return a Task must be awaited one at a time.\n\n        Following is an example of a correct usage.\n\n        using (var txn = this.StateManager.CreateTransaction())\n        {\n            var dequeueOutput = await concurrentQueue.DequeueAsync(txn, cancellationToken);\n            var dequeueOutput = await concurrentQueue.DequeueAsync(txn, cancellationToken);\n            await txn.CommitAsync();\n        }\n\n        The following is an example of incorrect usage that has undefined behavior.\n\n        using (var txn = this.StateManager.CreateTransaction())\n        {\n            List&lt;Task&gt; taskList = new List&lt;Task&gt;();\n            taskList.Add(concurrentQueue.DequeueAsync(txn, cancellationToken));\n            taskList.Add(concurrentQueue.DequeueAsync(txn, cancellationToken));\n\n            await Task.WhenAll(taskList);\n            await txn.CommitAsync();\n        }\n</code></pre>\r\n  \r\n  \t\t\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\t<table class=\"nameValue\">\r\n  \t\t\r\n  \t\t\t\t\t<tr data-moniker=\" 0\">\r\n  \t\t\t\t\t<td>\r\n  \t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.servicefabric.data.itransaction.commitsequencenumber#Microsoft_ServiceFabric_Data_ITransaction_CommitSequenceNumber\" data-linktype=\"relative-path\">CommitSequenceNumber</a></span>\r\n  \t\t\t\t</td>\r\n  \t\t\t\t\t<td>\r\n  \t\t\t\t\t\t<p>Sequence number for the commit operation.</p>\n\r\n  \t\t\t\t\t</td>\r\n  \t\t\t\t</tr>\r\n  \t\t\t\t\t<tr data-moniker=\" 0\">\r\n  \t\t\t\t\t<td>\r\n  \t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.servicefabric.data.itransaction.transactionid#Microsoft_ServiceFabric_Data_ITransaction_TransactionId\" data-linktype=\"relative-path\">TransactionId</a></span>\r\n  \t\t\t\t</td>\r\n  \t\t\t\t\t<td>\r\n  \t\t\t\t\t\t<p>Gets a value identifying the transaction.</p>\n\r\n  \t\t\t\t\t</td>\r\n  \t\t\t\t</tr>\r\n  \t\t</table>\t\t\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\t<table class=\"nameValue\">\r\n  \t\t\r\n  \t\t\t\t\t<tr data-moniker=\" 0\">\r\n  \t\t\t\t\t<td>\r\n  \t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.servicefabric.data.itransaction.abort#Microsoft_ServiceFabric_Data_ITransaction_Abort\" data-linktype=\"relative-path\">Abort()</a></span>\r\n  \t\t\t\t</td>\r\n  \t\t\t\t\t<td>\r\n  \t\t\t\t\t\t<p>Abort (rolls back) the transaction.</p>\n\r\n  \t\t\t\t\t</td>\r\n  \t\t\t\t</tr>\r\n  \t\t\t\t\t<tr data-moniker=\" 0\">\r\n  \t\t\t\t\t<td>\r\n  \t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.servicefabric.data.itransaction.commitasync#Microsoft_ServiceFabric_Data_ITransaction_CommitAsync\" data-linktype=\"relative-path\">CommitAsync()</a></span>\r\n  \t\t\t\t</td>\r\n  \t\t\t\t\t<td>\r\n  \t\t\t\t\t\t<p>Commit the transaction.</p>\n\r\n  \t\t\t\t\t</td>\r\n  \t\t\t\t</tr>\r\n  \t\t\t\t\t<tr data-moniker=\" 0\">\r\n  \t\t\t\t\t<td>\r\n  \t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.servicefabric.data.itransaction.getvisibilitysequencenumberasync#Microsoft_ServiceFabric_Data_ITransaction_GetVisibilitySequenceNumberAsync\" data-linktype=\"relative-path\">GetVisibilitySequenceNumberAsync()</a></span>\r\n  \t\t\t\t</td>\r\n  \t\t\t\t\t<td>\r\n  \t\t\t\t\t\t<p>Gets the visibility sequence number.</p>\n\r\n  \t\t\t\t\t</td>\r\n  \t\t\t\t</tr>\r\n  \t\t</table>\r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"./","pageMetadata":"<meta name=\"ms.devlang\" content=\"csharp\">\r\n<meta name=\"author\" content=\"erickson-doug\">\r\n<meta name=\"ms.author\" content=\"douge\">\r\n<meta name=\"manager\" content=\"douge\">\r\n<meta name=\"breadcrumb_path\" content=\"breadcrumb/toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"reference\">\r\n<meta name=\"ms.date\" content=\"11/16/2016\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"azuredotnet\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"Azure\">\r\n<meta name=\"depot_name\" content=\"Azure.azuredotnet\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/Azure/azure-docs-sdk-dotnet/blob/master/docs-ref-from-xml/Microsoft.ServiceFabric.Data.ITransaction.yml\">\r\n<meta name=\"APIName\" content=\"Microsoft.ServiceFabric.Data.ITransaction\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 08:52 AM\">\r\n<meta name=\"document_id\" content=\"4ef4dd94-6161-d442-e22c-b1abeea97865\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"A sequence of operations performed as a single logical unit of work.\n\">\r\n<meta name=\"toc_rel\" content=\"microsoft.servicefabric.data/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"Microsoft.ServiceFabric.Data.ITransaction\">\r\n","rawMetadata":{"ms.devlang":"csharp","author":"erickson-doug","ms.author":"douge","manager":"douge","breadcrumb_path":"breadcrumb/toc.json","apiPlatform":"dotnet","_op_documentIdPathDepotMapping":{"./":{"folder_relative_path_in_docset":"api-index"},"breadcrumb/":{"folder_relative_path_in_docset":"breadcrumb"},"docs-ref-autogen/":{"folder_relative_path_in_docset":"docs-ref-autogen"},"docs-ref-manual/":{"folder_relative_path_in_docset":"docs-ref-manual"},"docs-ref-overwrite/":{"folder_relative_path_in_docset":"docs-ref-overwrite"},"scripts/":{"folder_relative_path_in_docset":"scripts"}},"ms.topic":"reference","ms.date":"11/16/2016","search.ms_sitename":"Docs","search.ms_docsetname":"azuredotnet","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet/api/","locale":"en-us","site_name":"Docs","search.ms_product":"Azure","_op_openToPublicContributors":false,"depot_name":"Azure.azuredotnet","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/Azure/azure-docs-sdk-dotnet/blob/master/docs-ref-from-xml/Microsoft.ServiceFabric.Data.ITransaction.yml","open_to_public_contributors":false,"api_name":["Microsoft.ServiceFabric.Data.ITransaction"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["Microsoft.ServiceFabric.Data.ITransaction","Microsoft::ServiceFabric::Data::ITransaction"],"dev_langs":["csharp"],"updated_at":"2017-04-01 08:52 AM","document_id":"4ef4dd94-6161-d442-e22c-b1abeea97865","content_git_url":"https://github.com/Azure/azure-docs-sdk-dotnet/blob/master/xml/Microsoft.ServiceFabric.Data/ITransaction.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ITransaction interface | Microsoft Docs","_op_ogTitle":"ITransaction interface","description":"A sequence of operations performed as a single logical unit of work.\n","toc_asset_id":"Microsoft.ServiceFabric.Data/toc.json","toc_rel":"Microsoft.ServiceFabric.Data/toc.json","source_url":"","ms.assetid":"Microsoft.ServiceFabric.Data.ITransaction","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/microsoft.servicefabric.data.itransaction","_op_displayDate":"2016-11-16","_op_displayDate_source":"2016-11-16T00:00:00Z","_op_brand":"azure","_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/microsoft.servicefabric.data.itransaction","fileRelativePath":"Microsoft.ServiceFabric.Data.ITransaction.html"},"themesRelativePathToOutputRoot":"_themes/"}