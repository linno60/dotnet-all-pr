{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">IWebEventCustomEvaluator</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Evaluates whether an event should be sent to the related provider for processing.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public interface IWebEventCustomEvaluator</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example shows how to derive from the IWebEventCustomEvaluator interface when creating a custom event.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Web.Management.WebBaseEvent#1\">\nusing System;\nusing System.Text;\nusing System.Web;\nusing System.Web.Management;\n\nnamespace SamplesAspNet\n{\n  // Implements a custom WebBaseEvent class. \n    public class SampleWebBaseEvent :\n        System.Web.Management.WebBaseEvent, IWebEventCustomEvaluator\n    {\n        private string customCreatedMsg, customRaisedMsg;\n\n        // Store firing record info.\n        private static string firingRecordInfo;\n\n\n        // Implements the IWebEventCustomEvaluator.CanFire \n        // method. It is called by the ASP.NET if this custom\n        // type is configured in the profile\n        // element of the healthMonitoring section.\n        public bool CanFire(\n            System.Web.Management.WebBaseEvent e, \n            RuleFiringRecord rule)\n        {\n\n            bool fireEvent;\n            string lastFired = rule.LastFired.ToString();\n            string timesRaised = rule.TimesRaised.ToString();\n\n            // Fire every other event raised.\n            fireEvent =\n                (rule.TimesRaised % 2 == 0) ? true : false;\n\n            if (fireEvent)\n            {\n                firingRecordInfo =\n                    string.Format(&quot;Event last fired: {0}&quot;,\n                    lastFired) +\n                    string.Format(&quot;. Times raised: {0}&quot;,\n                    timesRaised);\n            }\n            else\n                firingRecordInfo =\n                  string.Format(\n                   &quot;Event not fired. Times raised: {0}&quot;,\n                   timesRaised);\n\n            return fireEvent;\n\n        }\n\n\n        // Invoked in case of events identified only by \n        // their event code.\n        public SampleWebBaseEvent(string msg, \n            object eventSource, int eventCode):\n          base(msg, eventSource, eventCode)\n        {\n            // Perform custom initialization.\n            customCreatedMsg =\n            string.Format(&quot;Event created at: {0}&quot;,\n            EventTime.ToString());\n        }\n\n\n        // Invoked in case of events identified by their \n        // event code.and related event detailed code.\n        public SampleWebBaseEvent(string msg, object eventSource, \n            int eventCode, int eventDetailCode):\n          base(msg, eventSource, eventCode, eventDetailCode)\n        {\n            // Perform custom initialization.\n            customCreatedMsg =\n             string.Format(&quot;Event created at: {0}&quot;,\n             EventTime.ToString());\n        }\n\n\n        // Raises the SampleWebBaseEvent.\n        public override void Raise()\n        {\n            // Perform custom processing. \n            customRaisedMsg =\n              string.Format(&quot;Event raised at: {0}&quot;,\n              EventTime.ToString());\n\n            // Raise the event.\n            base.Raise();\n        }\n\n\n        // Raises the SampleWebBaseEvent.\n        public void CustomRaise(\n            System.Web.Management.WebBaseEvent evnt)\n        {\n            \n            // Raise the event.\n            Raise(evnt);\n        }\n\n\n        // Gets the event code.\n        public int GetEventCode(bool detail)\n        {\n            int eCode;\n\n            if (!detail)\n                // Get the event code.\n                eCode = EventCode;\n\n            else\n                // Get the detail event code.\n                eCode = EventDetailCode;\n\n            return eCode;\n\n        }\n\n        // Gets the event sequence.\n        public long GetEventSequence()\n        {\n            // Get the event sequence.\n            long eventSequence = EventSequence;\n            return eventSequence;\n        }\n\n\n\n        // Gets the event source.\n        public Object GetEventSource()\n        {\n            // Get the event source.\n            Object source = this.EventSource;\n            return source;\n        }\n\n        // Gets the event time.\n        public DateTime GetEventTime()\n        {\n            // Get the event source.\n            DateTime eTime = EventTime;\n            return eTime;\n        }\n\n        // Gets the event time.\n        public DateTime GetEventTimeUtc()\n        {\n            // Get the event source.\n            DateTime eTime = EventTimeUtc;\n            return eTime;\n        }\n\n        // Gets the event sequence.\n        public string GetEventMessage()\n        {\n            // Get the event message.\n            string eventMsg = Message;\n            return eventMsg;\n        }\n\n        // Gets the current application information.\n        public WebApplicationInformation GetEventAppInfo()\n        {\n            // Get the event message.\n            WebApplicationInformation appImfo = \n                ApplicationInformation;\n            return appImfo;\n        }\n\n        // Implements the ToString() method.\n        public override string ToString()\n        {\n            return base.ToString();\n        }\n\n        // Implements the ToString(bool, bool) method.\n        public string customToString(bool includeAppInfo, \n            bool includeCustomInfo)\n        {\n            return (\n                base.ToString(includeAppInfo, \n                includeCustomInfo));\n        }\n\n        // Gets the event identifier.\n        public Guid GetEventId()\n        {\n            Guid evId =  EventID;\n            return evId;\n        }\n\n        //Formats Web request event information.\n        public override void FormatCustomEventDetails(\n            WebEventFormatter formatter)\n        {\n            base.FormatCustomEventDetails(formatter);\n\n            // Add custom data.\n            formatter.AppendLine(&quot;&quot;);\n\n            formatter.IndentationLevel += 1;\n\n            formatter.TabSize = 4;\n\n            formatter.AppendLine(\n                 &quot;*SampleWebBaseEvent Start *&quot;);\n\n            // Display custom event information.\n            formatter.AppendLine(customCreatedMsg);\n            formatter.AppendLine(customRaisedMsg);\n            formatter.AppendLine(firingRecordInfo);\n\n            formatter.AppendLine(\n          &quot;* SampleWebBaseEvent End *&quot;);\n\n\n            formatter.IndentationLevel -= 1;\n\n        }\n            \n    }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.Management.WebBaseEvent#1\">Imports System\nImports System.Text\nImports System.Web\nImports System.Web.Management\n\n\nPublic Class SampleWebBaseEvent\n    Inherits System.Web.Management.WebBaseEvent\n    Implements System.Web.Management.IWebEventCustomEvaluator\n\n\n    Private customCreatedMsg, customRaisedMsg As String\n\n    &#39; Store firing record info.\n    Private Shared firingRecordInfo As String\n\n    &#39; Implements the IWebEventCustomEvaluator.CanFire \n    &#39; method. It is called by the ASP.NET if this custom\n    &#39; type is configured in the profile\n    &#39; element of the healthMonitoring section.\n    Public Function CanFire( _\n    ByVal e As System.Web.Management.WebBaseEvent, _\n    ByVal rule As RuleFiringRecord) As Boolean _\n    Implements System.Web.Management.IWebEventCustomEvaluator.CanFire\n\n        Dim fireEvent As Boolean\n        Dim lastFired As String = _\n            rule.LastFired.ToString()\n        Dim timesRaised As String = _\n            rule.TimesRaised.ToString()\n\n        &#39; Fire every other event raised.\n        fireEvent = _\n        IIf(rule.TimesRaised Mod 2 = 0, True, False)\n\n        If fireEvent Then\n            firingRecordInfo = String.Format( _\n            &quot;Event last fired: {0}&quot;, lastFired) + _\n            String.Format( _\n            &quot;. Times raised: {0}&quot;,  timesRaised) \n          \n        Else\n            firingRecordInfo = String.Format( _\n            &quot;Event not fired. Times raised: {0}&quot;, _\n            timesRaised)\n        End If\n\n        Return fireEvent\n\n    End Function &#39;CanFire\n\n \n    &#39; Invoked in case of events identified only by \n    &#39; their event code.\n    Public Sub New(ByVal msg As String, _\n    ByVal eventSource As Object, _\n    ByVal eventCode As Integer)\n        MyBase.New(msg, eventSource, eventCode)\n        &#39; Perform custom initialization.\n        customCreatedMsg = String.Format( _\n        &quot;Event created at: {0}&quot;, DateTime.Now.TimeOfDay.ToString())\n\n    End Sub &#39;New\n\n\n    &#39; Invoked in case of events identified by their \n    &#39; event code.and related event detailed code.\n    Public Sub New(ByVal msg As String, _\n    ByVal eventSource As Object, _\n    ByVal eventCode As Integer, _\n    ByVal eventDetailCode As Integer)\n        MyBase.New(msg, eventSource, _\n        eventCode, eventDetailCode)\n        &#39; Perform custom initialization.\n        customCreatedMsg = String.Format( _\n        &quot;Event created at: {0}&quot;, DateTime.Now.TimeOfDay.ToString())\n\n    End Sub &#39;New\n\n\n    &#39; Raises the SampleWebBaseEvent.\n    Public Overrides Sub Raise()\n        &#39; Perform custom processing. \n        customRaisedMsg = String.Format( _\n        &quot;Event raised at: {0}&quot;, DateTime.Now.TimeOfDay.ToString())\n\n        &#39; Raise the event.\n        MyBase.Raise()\n\n    End Sub &#39;Raise\n\n    &#39; Raises the SampleWebBaseEvent.\n    Public Sub CustomRaise(ByVal evnt _\n    As System.Web.Management.WebBaseEvent)\n\n        &#39; Raise the event.\n        Raise(evnt)\n\n    End Sub &#39;CustomRaise\n\n\n    &#39; Gets the event code.\n    Public Function GetEventCode(ByVal detail _\n    As Boolean) As Integer\n        Dim eCode As Integer\n\n        If Not detail Then\n            &#39; Get the event code.\n            eCode = EventCode\n            &#39; Get the detail event code.\n        Else\n            eCode = EventDetailCode\n        End If\n        Return eCode\n\n    End Function &#39;GetEventCode\n\n\n    &#39; Gets the event sequence.\n    Public Function GetEventSequence() As Long\n        &#39; Get the event sequence.\n        Dim eventSequence As Long = eventSequence\n        Return eventSequence\n\n    End Function &#39;GetEventSequence\n\n\n\n    &#39; Gets the event source.\n    Public Function GetEventSource() As [Object]\n        &#39; Get the event source.\n        Dim [source] As [Object] = Me.EventSource\n        Return [source]\n\n    End Function &#39;GetEventSource\n\n    &#39; Gets the event time.\n    Public Function GetEventTime() As DateTime\n        &#39; Get the event source.\n        Dim eTime As DateTime = EventTime\n        Return eTime\n\n    End Function &#39;GetEventTime\n\n    &#39; Gets the event time.\n    Public Function GetEventTimeUtc() As DateTime\n        &#39; Get the event source.\n        Dim eTime As DateTime = EventTimeUtc\n        Return eTime\n\n    End Function &#39;GetEventTimeUtc\n\n    &#39; Gets the event sequence.\n    Public Function GetEventMessage() As String\n        &#39; Get the event message.\n        Dim eventMsg As String = Message\n        Return eventMsg\n\n    End Function &#39;GetEventMessage\n\n    &#39; Gets the current application information.\n    Public Function GetEventAppInfo() As WebApplicationInformation\n        &#39; Get the event message.\n        Dim appImfo As WebApplicationInformation = _\n        ApplicationInformation\n        Return appImfo\n\n    End Function &#39;GetEventAppInfo\n\n    &#39; Implements the ToString() method.\n    Public Overrides Function ToString() As String\n        Return MyBase.ToString()\n\n    End Function &#39;ToString\n\n    &#39; Implements the ToString(bool, bool) method.\n    Public Function customToString(ByVal includeAppInfo As Boolean, _\n    ByVal includeCustomInfo As Boolean) As String\n        Return MyBase.ToString(includeAppInfo, includeCustomInfo)\n\n    End Function &#39;customToString\n\n    &#39; Gets the event identifier.\n    Public Function GetEventId() As Guid\n        Dim evId As Guid = EventID\n        Return evId\n\n    End Function &#39;GetEventId\n\n    \n    &#39;Formats Web request event information.\n    Public Overrides Sub FormatCustomEventDetails( _\nByVal formatter As WebEventFormatter)\n        MyBase.FormatCustomEventDetails(formatter)\n\n        &#39; Add custom data.\n        formatter.AppendLine(&quot;&quot;)\n\n        formatter.IndentationLevel += 1\n        \n        formatter.TabSize = 4\n        \n        formatter.AppendLine(&quot;*SampleWebBaseEvent Start *&quot;)\n        formatter.AppendLine(&quot;Custom information goes here&quot;)\n        formatter.AppendLine(&quot;* SampleWebBaseEvent End *&quot;)\n        &#39; Display custom event timing.\n        formatter.AppendLine(customCreatedMsg)\n        formatter.AppendLine(customRaisedMsg)\n        formatter.IndentationLevel -= 1\n\n    End Sub &#39;FormatCustomEventDetails\n\nEnd Class &#39;SampleWebBaseEvent\n</code></pre><p> The following is an excerpt of the configuration file that enables ASP.NET to use the <a class=\"xref\" href=\"system.web.management.iwebeventcustomevaluator#System_Web_Management_IWebEventCustomEvaluator_CanFire_\" data-linktype=\"relative-path\">CanFire</a> method to decide whether the raised event must be sent to the provider for processing.  </p>\n<pre><code>&lt;healthMonitoring   \n  heartBeatInterval=&quot;0&quot; enabled=&quot;true&quot;&gt;  \n\n    &lt;providers&gt;  \n      &lt;add name=&quot;SampleWebEventProvider&quot;   \n        type=&quot;SamplesAspNet.SampleEventProvider, webeventprovider, Version=1.0.1741.20369, Culture=neutral, PublicKeyToken=cf85aa6c978d9dea, processorArchitecture=MSIL&quot; /&gt;  \n    &lt;/providers&gt;  \n\n    &lt;profiles&gt;  \n      &lt;add   \n        name=&quot;Custom&quot;   \n        minInstances=&quot;1&quot;   \n        maxLimit=&quot;Infinite&quot;   \n        minInterval=&quot;00:00:00&quot;   \n        custom =&quot;SamplesAspNet.SampleWebRequestEvent,webrequestevent&quot;   \n        /&gt;  \n    &lt;/profiles&gt;  \n\n    &lt;eventMappings&gt;  \n\n      &lt;add name=&quot;SampleWebRequestEvent&quot; type=&quot;SamplesAspNet.SampleWebRequestEvent,webrequestevent, Version=1.0.1759.20533, Culture=neutral, PublicKeyToken=0d72899b07049076, processorArchitecture=MSIL&quot; /&gt;  \n\n    &lt;/eventMappings&gt;  \n\n    &lt;rules&gt;  \n      &lt;clear /&gt;  \n\n        &lt;add name=&quot;Custom Web Request Event&quot;   \n          eventName=&quot;SampleWebRequestEvent&quot;  \n          provider=&quot;SampleWebEventProvider&quot; profile=&quot;Custom&quot; /&gt;  \n    &lt;/rules&gt;  \n\n&lt;/healthMonitoring&gt;  \n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The <a class=\"xref\" href=\"system.web.management\" data-linktype=\"relative-path\">System.Web.Management</a> namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events.  </p>\n<p> This interface allows enabling or disabling the firing of a specific event. This is especially useful when you implement your own custom event and want to control the rate at which it is sent to the related provider for processing.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This interface does not control how often the event is raised. It only controls how often the event information is sent to the provider for processing.</p>\n</div>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Web_Management_IWebEventCustomEvaluator_CanFire_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_Management_IWebEventCustomEvaluator_CanFire_System_Web_Management_WebBaseEvent_System_Web_Management_RuleFiringRecord_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CanFire(WebBaseEvent, RuleFiringRecord)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Evaluates whether an event should be raised.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool CanFire (System.Web.Management.WebBaseEvent raisedEvent, System.Web.Management.RuleFiringRecord record);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>raisedEvent</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.management.webbaseevent\" data-linktype=\"relative-path\">WebBaseEvent</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The event to raise.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>record</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.management.rulefiringrecord\" data-linktype=\"relative-path\">RuleFiringRecord</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.web.management.rulefiringrecord\" data-linktype=\"relative-path\">RuleFiringRecord</a> containing information about the event.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the event should be raised; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If the custom event evaluator returns <code>true</code>, the event is raised and then processed by the associated provider.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.Management.IWebEventCustomEvaluator.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.Management.IWebEventCustomEvaluator\">\r\n<meta name=\"APIName\" content=\"System.Web.Management.IWebEventCustomEvaluator.CanFire\">\r\n<meta name=\"APILocation\" content=\"System.Web.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 05:47 AM\">\r\n<meta name=\"document_id\" content=\"582e77a3-a505-5f1e-99f9-53023862d4f2\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Evaluates whether an event should be sent to the related provider for processing.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.web.management/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.Management.IWebEventCustomEvaluator\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.Management.IWebEventCustomEvaluator.yml","open_to_public_contributors":false,"api_name":["System.Web.Management.IWebEventCustomEvaluator","System.Web.Management.IWebEventCustomEvaluator.CanFire"],"api_location":["System.Web.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.Management.IWebEventCustomEvaluator","System::Web::Management::IWebEventCustomEvaluator","System.Web.Management.IWebEventCustomEvaluator.CanFire","System::Web::Management::IWebEventCustomEvaluator::CanFire"],"dev_langs":["csharp"],"updated_at":"2017-03-31 05:47 AM","document_id":"582e77a3-a505-5f1e-99f9-53023862d4f2","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Web.Management/IWebEventCustomEvaluator.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IWebEventCustomEvaluator interface | Microsoft Docs","_op_ogTitle":"IWebEventCustomEvaluator interface","description":"Evaluates whether an event should be sent to the related provider for processing.\n","toc_asset_id":"api/_splitted/System.Web.Management/toc.json","toc_rel":"_splitted/System.Web.Management/toc.json","source_url":"","ms.assetid":"System.Web.Management.IWebEventCustomEvaluator","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.web.management.iwebeventcustomevaluator","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.web.management.iwebeventcustomevaluator","fileRelativePath":"api/System.Web.Management.IWebEventCustomEvaluator.html"},"themesRelativePathToOutputRoot":"_themes/"}