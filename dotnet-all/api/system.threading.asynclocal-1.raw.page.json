{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">AsyncLocal&lt;T&gt;</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents ambient data that is local to a given asynchronous control flow, such as an asynchronous method.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public sealed class AsyncLocal&lt;T&gt;</code></pre>\r\n  \r\n  \r\n  \r\n  \t\t<h3 class=\"accented\">Type Parameters</h3>\r\n  \t\t<table class=\"nameValue stack\">\r\n  \t\t\t<tr>\r\n  \t\t\t<td>T</td>\r\n  \t\t\t<td><p>The type of the ambient data.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t</table>\r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span></div><span class=\"lang-csharp\">AsyncLocal&lt;T&gt;</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example uses the AsyncLocal(T) class to persist a string value across an asynchronous flow. It also contrasts the use of  AsyncLocal(T) with <a class=\"xref\" href=\"system.threading.threadlocal-1\" data-linktype=\"relative-path\">ThreadLocal&lt;T&gt;</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Threading.AsyncLocal#1\">Imports System.Threading\nImports System.Threading.Tasks\n\nModule Example\n    Dim _asyncLocalString As New AsyncLocal(Of String)()\n\n    Dim _threadLocalString As New ThreadLocal(Of String)()\n\n    Async Function AsyncMethodA() As Task\n        &#39; Start multiple async method calls, with different AsyncLocal values.\n        &#39; We also set ThreadLocal values, to demonstrate how the two mechanisms differ.\n        _asyncLocalString.Value = &quot;Value 1&quot;\n        _threadLocalString.Value = &quot;Value 1&quot;\n        Dim t1 = AsyncMethodB(&quot;Value 1&quot;)\n\n        _asyncLocalString.Value = &quot;Value 2&quot;\n        _threadLocalString.Value = &quot;Value 2&quot;\n        Dim t2 = AsyncMethodB(&quot;Value 2&quot;)\n\n        &#39; Await both calls\n        await t1\n        await t2\n     End Function\n\n    Async Function AsyncMethodB(expectedValue As String) As Task\n        Console.WriteLine(&quot;Entering AsyncMethodB.&quot;)\n        Console.WriteLine(&quot;   Expected &#39;{0}&#39;, AsyncLocal value is &#39;{1}&#39;, ThreadLocal value is &#39;{2}&#39;&quot;, \n                          expectedValue, _asyncLocalString.Value, _threadLocalString.Value)\n        await Task.Delay(100)\n        Console.WriteLine(&quot;Exiting AsyncMethodB.&quot;)\n        Console.WriteLine(&quot;   Expected &#39;{0}&#39;, got &#39;{1}&#39;, ThreadLocal value is &#39;{2}&#39;&quot;, \n                          expectedValue, _asyncLocalString.Value, _threadLocalString.Value)\n    End Function\n\n   Public Sub Main()\n       AsyncMethodA.Wait()\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;   Entering AsyncMethodB.\n&#39;      Expected &#39;Value 1&#39;, AsyncLocal value is &#39;Value 1&#39;, ThreadLocal value is &#39;Value 1&#39;\n&#39;   Entering AsyncMethodB.\n&#39;      Expected &#39;Value 2&#39;, AsyncLocal value is &#39;Value 2&#39;, ThreadLocal value is &#39;Value 2&#39;\n&#39;   Exiting AsyncMethodB.\n&#39;      Expected &#39;Value 2&#39;, got &#39;Value 2&#39;, ThreadLocal value is &#39;&#39;\n&#39;   Exiting AsyncMethodB.\n&#39;      Expected &#39;Value 1&#39;, got &#39;Value 1&#39;, ThreadLocal value is &#39;&#39;\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.AsyncLocal#1\">using System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nclass Example\n{\n    static AsyncLocal&lt;string&gt; _asyncLocalString = new AsyncLocal&lt;string&gt;();\n\n    static ThreadLocal&lt;string&gt; _threadLocalString = new ThreadLocal&lt;string&gt;();\n\n    static async Task AsyncMethodA()\n    {\n        // Start multiple async method calls, with different AsyncLocal values.\n        // We also set ThreadLocal values, to demonstrate how the two mechanisms differ.\n        _asyncLocalString.Value = &quot;Value 1&quot;;\n        _threadLocalString.Value = &quot;Value 1&quot;;\n        var t1 = AsyncMethodB(&quot;Value 1&quot;);\n\n        _asyncLocalString.Value = &quot;Value 2&quot;;\n        _threadLocalString.Value = &quot;Value 2&quot;;\n        var t2 = AsyncMethodB(&quot;Value 2&quot;);\n\n        // Await both calls\n        await t1;\n        await t2;\n     }\n\n    static async Task AsyncMethodB(string expectedValue)\n    {\n        Console.WriteLine(&quot;Entering AsyncMethodB.&quot;);\n        Console.WriteLine(&quot;   Expected &#39;{0}&#39;, AsyncLocal value is &#39;{1}&#39;, ThreadLocal value is &#39;{2}&#39;&quot;, \n                          expectedValue, _asyncLocalString.Value, _threadLocalString.Value);\n        await Task.Delay(100);\n        Console.WriteLine(&quot;Exiting AsyncMethodB.&quot;);\n        Console.WriteLine(&quot;   Expected &#39;{0}&#39;, got &#39;{1}&#39;, ThreadLocal value is &#39;{2}&#39;&quot;, \n                          expectedValue, _asyncLocalString.Value, _threadLocalString.Value);\n    }\n\n    static void Main(string[] args)\n    {\n        AsyncMethodA().Wait();\n    }\n}\n// The example displays the following output:\n//   Entering AsyncMethodB.\n//      Expected &#39;Value 1&#39;, AsyncLocal value is &#39;Value 1&#39;, ThreadLocal value is &#39;Value 1&#39;\n//   Entering AsyncMethodB.\n//      Expected &#39;Value 2&#39;, AsyncLocal value is &#39;Value 2&#39;, ThreadLocal value is &#39;Value 2&#39;\n//   Exiting AsyncMethodB.\n//      Expected &#39;Value 2&#39;, got &#39;Value 2&#39;, ThreadLocal value is &#39;&#39;\n//   Exiting AsyncMethodB.\n//      Expected &#39;Value 1&#39;, got &#39;Value 1&#39;, ThreadLocal value is &#39;&#39;\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Because the task-based asynchronous programming model tends to abstract the use of threads, AsyncLocal(T) instances can be used to persist data across threads.  </p>\n<p> The AsyncLocal(T) class also provides optional notifications when the value associated with the current thread changes, either because it was explicitly changed by setting the <a class=\"xref\" href=\"system.threading.asynclocal-1#System_Threading_AsyncLocal_1_Value_\" data-linktype=\"relative-path\">Value</a> property, or implicitly changed when the thread encountered an <code>await</code> or other context transition.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_AsyncLocal_1__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AsyncLocal&lt;T&gt;()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Instantiates an <span class=\"xref\">stem.Threading.AsyncLocal`1</span> instance that does not receive change notifications.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public AsyncLocal ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_AsyncLocal_1__ctor_System_Action_System_Threading_AsyncLocalValueChangedArgs__0___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AsyncLocal&lt;T&gt;(Action&lt;AsyncLocalValueChangedArgs&lt;T&gt;&gt;)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Instantiates an <span class=\"xref\">stem.Threading.AsyncLocal`1</span> local instance that receives change notifications.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public AsyncLocal (Action&lt;System.Threading.AsyncLocalValueChangedArgs&lt;T&gt;&gt; valueChangedHandler);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>valueChangedHandler</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.action-1\" data-linktype=\"relative-path\">Action</a>&lt;<a class=\"xref\" href=\"system.threading.asynclocalvaluechangedargs-1\" data-linktype=\"relative-path\">AsyncLocalValueChangedArgs</a>&lt;<span class=\"xref\">T</span>&gt;&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The delegate that is called whenever the current value changes on any thread.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The delegate&#39;s signature is <code>Action&lt;ASyncLocalValueChangedArgs&lt;T&gt;</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Threading_AsyncLocal_1_Value\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Value</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the value of the ambient data.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public T Value { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">T</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value of the ambient data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Threading.AsyncLocal-1.yml\">\r\n<meta name=\"APIName\" content=\"System.Threading.AsyncLocal&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Threading.AsyncLocal&lt;T&gt;..ctor\">\r\n<meta name=\"APIName\" content=\"System.Threading.AsyncLocal&lt;T&gt;.Value\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-24 01:41 AM\">\r\n<meta name=\"document_id\" content=\"1d57323a-5843-433f-fb3b-9d6b8cf0f397\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents ambient data that is local to a given asynchronous control flow, such as an asynchronous method.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.threading/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Threading.AsyncLocal`1\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Threading.AsyncLocal-1.yml","open_to_public_contributors":false,"api_name":["System.Threading.AsyncLocal<T>","System.Threading.AsyncLocal<T>..ctor","System.Threading.AsyncLocal<T>.Value"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Threading.AsyncLocal`1","System::Threading::AsyncLocal`1","System.Threading.AsyncLocal`1.#ctor","System::Threading::AsyncLocal`1::#ctor","System.Threading.AsyncLocal`1.Value","System::Threading::AsyncLocal`1::Value"],"dev_langs":["csharp"],"updated_at":"2017-03-24 01:41 AM","document_id":"1d57323a-5843-433f-fb3b-9d6b8cf0f397","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Threading/AsyncLocal`1.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"AsyncLocal<T> class | Microsoft Docs","_op_ogTitle":"AsyncLocal<T> class","description":"Represents ambient data that is local to a given asynchronous control flow, such as an asynchronous method.\n","toc_asset_id":"api/_splitted/System.Threading/toc.json","toc_rel":"_splitted/System.Threading/toc.json","source_url":"","ms.assetid":"System.Threading.AsyncLocal`1","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.threading.asynclocal-1","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.threading.asynclocal-1","fileRelativePath":"api/System.Threading.AsyncLocal-1.html"},"themesRelativePathToOutputRoot":"_themes/"}