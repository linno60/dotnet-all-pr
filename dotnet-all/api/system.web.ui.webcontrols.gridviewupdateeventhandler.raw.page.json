{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">GridViewUpdateEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that handles the <a class=\"xref\" href=\"system.web.ui.webcontrols.gridview#System_Web_UI_WebControls_GridView_RowUpdating\" data-linktype=\"relative-path\">RowUpdating</a> event of a <a class=\"xref\" href=\"system.web.ui.webcontrols.gridview\" data-linktype=\"relative-path\">GridView</a> control.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void GridViewUpdateEventHandler(object sender, GridViewUpdateEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">GridViewUpdateEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example demonstrates how to programmatically add a GridViewUpdateEventHandler delegate to the <a class=\"xref\" href=\"system.web.ui.webcontrols.gridview#System_Web_UI_WebControls_GridView_RowUpdating\" data-linktype=\"relative-path\">RowUpdating</a> event of a <a class=\"xref\" href=\"system.web.ui.webcontrols.gridview\" data-linktype=\"relative-path\">GridView</a> control.  </p>\n<pre><code class=\"lang-vb\" name=\"GridViewUpdateEventHandler#1\">\n&lt;%@ Page language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n    Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)\n        \n        &#39; Create a new GridView object.\n        Dim authorGridView As GridView = New GridView\n         \n        &#39; Set the GridView object&#39;s properties.\n        authorGridView.ID = &quot;AuthorGridView&quot;\n        authorGridView.DataSourceID = &quot;AuthorsSqlDataSource&quot;\n        authorGridView.AutoGenerateColumns = True\n        authorGridView.AutoGenerateEditButton = True\n        authorGridView.DataKeyNames = New [String]() {&quot;au_id&quot;}\n        \n        &#39; Programmatically register the event-handling method.\n        AddHandler authorGridView.RowUpdating, AddressOf AuthorsGridView_RowUpdating\n        \n        &#39; Add the GridView object to the Controls collection\n        &#39; of the PlaceHolder control.\n        GridViewPlaceHolder.Controls.Add(authorGridView)\n        \n    End Sub\n    \n    Sub AuthorsGridView_RowUpdating(ByVal sender As Object, ByVal e As GridViewUpdateEventArgs)\n     \n        &#39; HTML-encode all user-provided values before updating\n        &#39; the data source.\n        Dim i As Integer\n        \n        For i = 0 To e.NewValues.Count - 1\n            \n            Dim entry As DictionaryEntry = e.NewValues(i)\n            e.NewValues(entry.Key) = Server.HtmlEncode(entry.Value.ToString())\n    \n        Next i\n        \n    End Sub\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n    &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;GridViewUpdateEventHandler Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n        &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n            &lt;h3&gt;GridViewUpdateEventHandler Example&lt;/h3&gt;\n            \n            &lt;asp:label id=&quot;Message&quot;\n                forecolor=&quot;Red&quot;\n                runat=&quot;server&quot;/&gt;\n                \n            &lt;br/&gt;\n            \n            &lt;asp:placeholder id=&quot;GridViewPlaceHolder&quot;\n                runat=&quot;Server&quot;/&gt;\n            \n            &lt;!-- This example uses Microsoft SQL Server and connects --&gt;\n            &lt;!-- to the Pubs sample database.                        --&gt;\n            &lt;asp:sqldatasource id=&quot;AuthorsSqlDataSource&quot;  \n                selectcommand=&quot;SELECT [au_id], [au_lname], [au_fname], [address], [city], [state], [zip] FROM [authors]&quot;\n                updatecommand=&quot;UPDATE authors SET au_lname=@au_lname, au_fname=@au_fname, address=@address, city=@city, state=@state, zip=@zip WHERE (authors.au_id = @au_id)&quot;\n                connectionstring=&quot;server=localhost;database=pubs;integrated security=SSPI&quot;\n                runat=&quot;server&quot;&gt;\n            &lt;/asp:sqldatasource&gt;\n            \n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"GridViewUpdateEventHandler#1\">\n&lt;%@ Page language=&quot;C#&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n    void Page_Load(Object sender, EventArgs e)\n    {\n        \n        // Create a new GridView object.\n        GridView authorGridView = new GridView();\n         \n        // Set the GridView object&#39;s properties.\n        authorGridView.ID = &quot;AuthorGridView&quot;;\n        authorGridView.DataSourceID = &quot;AuthorsSqlDataSource&quot;; \n        authorGridView.AutoGenerateColumns = true;\n        authorGridView.AutoGenerateEditButton = true;\n        authorGridView.DataKeyNames = new String[] {&quot;au_id&quot;};\n        \n        // Programmatically register the event-handling method.\n        authorGridView.RowUpdating += new GridViewUpdateEventHandler(this.AuthorsGridView_RowUpdating);\n        \n        // Add the GridView object to the Controls collection\n        // of the PlaceHolder control.\n        GridViewPlaceHolder.Controls.Add(authorGridView);\n        \n    }\n    \n    void AuthorsGridView_RowUpdating(Object sender, GridViewUpdateEventArgs e)\n    {\n     \n        // HTML-encode all user-provided values before updating\n        // the data source.\n        foreach (DictionaryEntry entry in e.NewValues)\n        {\n    \n            e.NewValues[entry.Key] = Server.HtmlEncode(entry.Value.ToString());\n    \n        }\n        \n    }\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n    &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;GridViewUpdateEventHandler Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n        &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n            &lt;h3&gt;GridViewUpdateEventHandler Example&lt;/h3&gt;\n            \n            &lt;asp:label id=&quot;Message&quot;\n                forecolor=&quot;Red&quot;\n                runat=&quot;server&quot;/&gt;\n                \n            &lt;br/&gt;\n            \n            &lt;asp:placeholder id=&quot;GridViewPlaceHolder&quot;\n                runat=&quot;Server&quot;/&gt;\n            \n            &lt;!-- This example uses Microsoft SQL Server and connects --&gt;\n            &lt;!-- to the Pubs sample database.                        --&gt;\n            &lt;asp:sqldatasource id=&quot;AuthorsSqlDataSource&quot;  \n                selectcommand=&quot;SELECT [au_id], [au_lname], [au_fname], [address], [city], [state], [zip] FROM [authors]&quot;\n                updatecommand=&quot;UPDATE authors SET au_lname=@au_lname, au_fname=@au_fname, address=@address, city=@city, state=@state, zip=@zip WHERE (authors.au_id = @au_id)&quot;\n                connectionstring=&quot;server=localhost;database=pubs;integrated security=SSPI&quot;\n                runat=&quot;server&quot;&gt;\n            &lt;/asp:sqldatasource&gt;\n            \n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p> The following example demonstrates how to declaratively add a GridViewUpdateEventHandler delegate to the <a class=\"xref\" href=\"system.web.ui.webcontrols.gridview#System_Web_UI_WebControls_GridView_RowUpdating\" data-linktype=\"relative-path\">RowUpdating</a> event of a <a class=\"xref\" href=\"system.web.ui.webcontrols.gridview\" data-linktype=\"relative-path\">GridView</a> control.  </p>\n<pre><code class=\"lang-vb\" name=\"GridViewRowUpdating#1\">\n&lt;%@ Page language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Sub CustomersGridView_RowUpdating(ByVal sender As Object, ByVal e As GridViewUpdateEventArgs)\n    \n    &#39; Use the CopyTo method to copy the DictionaryEntry objects in the \n    &#39; NewValues collection to an array.\n    Dim records(e.NewValues.Count - 1) As DictionaryEntry\n    e.NewValues.CopyTo(records, 0)\n    \n    &#39; Iterate through the array and HTML encode all user-provided values \n    &#39; before updating the data source.\n    Dim entry As DictionaryEntry\n    For Each entry In records\n            \n      e.NewValues(entry.Key) = Server.HtmlEncode(entry.Value.ToString())\n      \n    Next\n        \n  End Sub\n       \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;GridView RowUpdating Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;GridView RowUpdating Example&lt;/h3&gt;\n            \n      &lt;!-- The GridView control automatically sets the columns     --&gt;\n      &lt;!-- specified in the datakeynames property as read-only.    --&gt;\n      &lt;!-- No input controls are rendered for these columns in     --&gt;\n      &lt;!-- edit mode.                                              --&gt;\n      &lt;asp:gridview id=&quot;CustomersGridView&quot; \n        datasourceid=&quot;CustomersSqlDataSource&quot; \n        autogeneratecolumns=&quot;true&quot;\n        autogenerateeditbutton=&quot;true&quot;\n        allowpaging=&quot;true&quot; \n        datakeynames=&quot;CustomerID&quot;\n        onrowupdating=&quot;CustomersGridView_RowUpdating&quot;  \n        runat=&quot;server&quot;&gt;\n      &lt;/asp:gridview&gt;\n            \n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the Web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;CustomersSqlDataSource&quot;  \n        selectcommand=&quot;Select [CustomerID], [CompanyName], [Address], [City], [PostalCode], [Country] From [Customers]&quot;\n        updatecommand=&quot;Update Customers SET CompanyName=@CompanyName, Address=@Address, City=@City, PostalCode=@PostalCode, Country=@Country WHERE (CustomerID = @CustomerID)&quot;\n        connectionstring=&quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot;\n        runat=&quot;server&quot;&gt;\n      &lt;/asp:sqldatasource&gt;\n            \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"GridViewRowUpdating#1\">\n&lt;%@ Page language=&quot;C#&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  void CustomersGridView_RowUpdating(Object sender, GridViewUpdateEventArgs e)\n  {\n     \n    // Iterate through the NewValues collection and HTML encode all \n    // user-provided values before updating the data source.\n    foreach (DictionaryEntry entry in e.NewValues)\n    {\n    \n      e.NewValues[entry.Key] = Server.HtmlEncode(entry.Value.ToString());\n    \n    }\n        \n  }\n       \n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;GridView RowUpdating Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;GridView RowUpdating Example&lt;/h3&gt;\n            \n      &lt;!-- The GridView control automatically sets the columns     --&gt;\n      &lt;!-- specified in the datakeynames property as read-only.    --&gt;\n      &lt;!-- No input controls are rendered for these columns in     --&gt;\n      &lt;!-- edit mode.                                              --&gt;\n      &lt;asp:gridview id=&quot;CustomersGridView&quot; \n        datasourceid=&quot;CustomersSqlDataSource&quot; \n        autogeneratecolumns=&quot;true&quot;\n        autogenerateeditbutton=&quot;true&quot;\n        allowpaging=&quot;true&quot; \n        datakeynames=&quot;CustomerID&quot;\n        onrowupdating=&quot;CustomersGridView_RowUpdating&quot;  \n        runat=&quot;server&quot;&gt;\n      &lt;/asp:gridview&gt;\n            \n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the Web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;CustomersSqlDataSource&quot;  \n        selectcommand=&quot;Select [CustomerID], [CompanyName], [Address], [City], [PostalCode], [Country] From [Customers]&quot;\n        updatecommand=&quot;Update Customers SET CompanyName=@CompanyName, Address=@Address, City=@City, PostalCode=@PostalCode, Country=@Country WHERE (CustomerID = @CustomerID)&quot;\n        connectionstring=&quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot;\n        runat=&quot;server&quot;&gt;\n      &lt;/asp:sqldatasource&gt;\n            \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The <a class=\"xref\" href=\"system.web.ui.webcontrols.gridview#System_Web_UI_WebControls_GridView_RowUpdating\" data-linktype=\"relative-path\">RowUpdating</a> event is raised when a row&#39;s Update button is clicked, but before the <a class=\"xref\" href=\"system.web.ui.webcontrols.gridview\" data-linktype=\"relative-path\">GridView</a> control updates the row. This allows you to provide an event-handling method that performs a custom routine, such as canceling the update operation, whenever this event occurs.  </p>\n<p> When you create a GridViewUpdateEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see <a href=\"http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115\" data-linktype=\"external\">NIB: Events and Delegates</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.GridViewUpdateEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.GridViewUpdateEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.GridViewUpdateEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.GridViewUpdateEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.GridViewUpdateEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.GridViewUpdateEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 05:47 AM\">\r\n<meta name=\"document_id\" content=\"a2b9b7cb-b019-ab43-fe88-ed2b13bf106a\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that handles the  event of a  control.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.web.ui.webcontrols/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.WebControls.GridViewUpdateEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.GridViewUpdateEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Web.UI.WebControls.GridViewUpdateEventHandler","System.Web.UI.WebControls.GridViewUpdateEventHandler..ctor","System.Web.UI.WebControls.GridViewUpdateEventHandler.Invoke","System.Web.UI.WebControls.GridViewUpdateEventHandler.BeginInvoke","System.Web.UI.WebControls.GridViewUpdateEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.WebControls.GridViewUpdateEventHandler","System::Web::UI::WebControls::GridViewUpdateEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-31 05:47 AM","document_id":"a2b9b7cb-b019-ab43-fe88-ed2b13bf106a","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Web.UI.WebControls/GridViewUpdateEventHandler.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"GridViewUpdateEventHandler delegate | Microsoft Docs","_op_ogTitle":"GridViewUpdateEventHandler delegate","description":"Represents the method that handles the  event of a  control.\n","toc_asset_id":"api/_splitted/System.Web.UI.WebControls/toc.json","toc_rel":"_splitted/System.Web.UI.WebControls/toc.json","source_url":"","ms.assetid":"System.Web.UI.WebControls.GridViewUpdateEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.gridviewupdateeventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.gridviewupdateeventhandler","fileRelativePath":"api/System.Web.UI.WebControls.GridViewUpdateEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}