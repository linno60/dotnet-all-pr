{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">FormViewDeletedEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that handles the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_ItemDeleted\" data-linktype=\"relative-path\">ItemDeleted</a> event of a <a class=\"xref\" href=\"system.web.ui.webcontrols.formview\" data-linktype=\"relative-path\">FormView</a> control.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void FormViewDeletedEventHandler(object sender, FormViewDeletedEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">FormViewDeletedEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example demonstrates how to programmatically add a FormViewDeletedEventHandler delegate to the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_ItemDeleted\" data-linktype=\"relative-path\">ItemDeleted</a> event of a <a class=\"xref\" href=\"system.web.ui.webcontrols.formview\" data-linktype=\"relative-path\">FormView</a> control.  </p>\n<pre><code class=\"lang-cs\" name=\"FormViewDeletedEventHandler2#1\">\n&lt;%@ page language=&quot;C#&quot; %&gt;\n&lt;%@ import namespace=&quot;System.Data&quot;%&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n  // To dynamically create a template for a FormView control,\n  // you must create a custom template class to represent \n  // the template. This template class represents the item\n  // template for a FormView control.\n  private sealed class EmployeeTemplate : ITemplate\n  {\n\n    // When implementing the ITemplate interface, you must\n    // the implement the InstantiateIn method. The FormView\n    // control calls this method to create the template&#39;s \n    // content. \n    void ITemplate.InstantiateIn(Control container)\n    {\n      // Create the child controls contained in the template.\n      // For this example, the item template displays the\n      // FirstName and LastName field from the data source.\n      // To support data-binding, create event handlers \n      // for the DataBinding event of the child child controls.\n      // The event handlers must bind the appropriate value \n      // to the control.\n      Label firstNameLabel = new Label();\n      firstNameLabel.ID = &quot;FirstNameLabel&quot;;\n      firstNameLabel.DataBinding += new EventHandler(FirstNameLabel_DataBinding);\n\n      LiteralControl nameLineBreak = new LiteralControl(&quot;&lt;br/&gt;&quot;);\n      LiteralControl buttonLineBreak = new LiteralControl(&quot;&lt;br/&gt;&quot;);\n\n      Label lastNameLabel = new Label();\n      lastNameLabel.ID = &quot;LastNameLabel&quot;;\n      lastNameLabel.DataBinding += new EventHandler(LastNameLabel_DataBinding);\n\n      Button deleteButton = new Button();\n      deleteButton.ID = &quot;DeleteButton&quot;;\n      deleteButton.CommandName = &quot;Delete&quot;;\n      deleteButton.Text = &quot;Delete&quot;;\n\n      // Add the controls to the Controls collection of the \n      // container control.\n      container.Controls.Add(firstNameLabel);\n      container.Controls.Add(nameLineBreak);\n      container.Controls.Add(lastNameLabel);\n      container.Controls.Add(buttonLineBreak);\n      container.Controls.Add(deleteButton);\n\n    }\n\n    // This event handler binds the value of the FirstName field\n    // to the FirstNameLabel Label control displayed in the template.\n    private void FirstNameLabel_DataBinding(Object sender, EventArgs e)\n    {\n      // Use the sender parameter to retrieve the Label control\n      // being bound to data.\n      Label firstNameLabelControl = (Label)sender;\n\n      // Retrieve the value to bind to the Label control. First,\n      // use the NamingContainer property to retrieve the parent \n      // control of the Label control. In this example, the parent \n      // control is the FormView control.\n      FormView formViewContainer = (FormView)firstNameLabelControl.NamingContainer;\n\n      // Get the data item bound to the FormView control.\n      DataRowView rowView = (DataRowView)formViewContainer.DataItem;\n\n      // Use the data item to retrieve the value of the FirstName field\n      // Set the Text property of the Label control to this value.        \n      firstNameLabelControl.Text = rowView[&quot;FirstName&quot;].ToString();\n    }\n\n    // This event handler binds the value of the LastName field\n    // to the LastNameLabel Label control displayed in the template.\n    private void LastNameLabel_DataBinding(Object sender, EventArgs e)\n    {\n      // Use the sender parameter to retrieve the Label control\n      // being bound to data.\n      Label lastNameLabelControl = (Label)sender;\n\n      // Retrieve the value to bind to the Label control. First,\n      // use the NamingContainer property to retrieve the parent \n      // control of the Label control. In this example, the parent \n      // control is the FormView control.\n      FormView formViewContainer = (FormView)lastNameLabelControl.NamingContainer;\n\n      // Get the data item bound to the FormView control.\n      DataRowView rowView = (DataRowView)formViewContainer.DataItem;\n\n      // Use the data item to retrieve the value of the LastName field\n      // Set the Text property of the Label control to this value.         \n      lastNameLabelControl.Text = rowView[&quot;LastName&quot;].ToString();\n    }\n\n  }\n\n  void Page_Load(Object sender, EventArgs e)\n  {\n\n    // Create a new FormView object.\n    FormView employeesFormView = new FormView();\n\n    // Set the FormView object&#39;s properties.\n    employeesFormView.ID = &quot;EmployeesFormView&quot;;\n    employeesFormView.DataSourceID = &quot;EmployeeSource&quot;;\n    employeesFormView.AllowPaging = true;\n    employeesFormView.HeaderText = &quot;Employee Name&quot;;\n    employeesFormView.DataKeyNames = new String[1] { &quot;EmployeeID&quot; };\n\n    // Programmatically register the event handler for the \n    // ItemDeleted event of the FormView control.\n    employeesFormView.ItemDeleted += new FormViewDeletedEventHandler(EmployeeFormView_ItemDeleted);\n\n    // Create the dynamic template using the custom template class.\n    employeesFormView.ItemTemplate = new EmployeeTemplate();\n\n    // Add the FormView object to the Controls collection\n    // of the PlaceHolder control.\n    FormViewPlaceHolder.Controls.Add(employeesFormView);\n\n  }\n\n  void EmployeeFormView_ItemDeleted(Object sender, FormViewDeletedEventArgs e)\n  {\n    // Use the Exception property to determine whether an exception\n    // occurred during the delete operation.\n    if (e.Exception == null)\n    {\n      // Use the AffectedRows property to determine whether the\n      // record was deleted. Sometimes an error might occur that \n      // does not raise an exception, but prevents the delete\n      // operation from completing.\n      if (e.AffectedRows == 1)\n      {\n        MessageLabel.Text = &quot;Record deleted successfully.&quot;;\n      }\n      else\n      {\n        MessageLabel.Text = &quot;An error occurred during the delete operation.&quot;;\n      }\n    }\n    else\n    {\n      // Insert the code to handle the exception.\n      MessageLabel.Text = e.Exception.Message;\n      \n      // Use the ExceptionHandled property to indicate that the \n      // exception is already handled.\n      e.ExceptionHandled = true;\n    }\n  }\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;FormViewDeletedEventHandler Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;FormViewDeletedEventHandler Example&lt;/h3&gt;\n      \n      &lt;!-- Use a PlaceHolder control as the container for the --&gt;\n      &lt;!-- dynamically generated FormView control.            --&gt;       \n      &lt;asp:placeholder id=&quot;FormViewPlaceHolder&quot;\n        runat=&quot;server&quot;/&gt;\n            \n      &lt;br/&gt;&lt;br/&gt;\n      \n      &lt;asp:label id=&quot;MessageLabel&quot;\n        forecolor=&quot;Red&quot;\n        runat=&quot;server&quot;/&gt;\n          \n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;EmployeeSource&quot;\n        selectcommand=&quot;Select [EmployeeID], [LastName], [FirstName], [Title], [PhotoPath] From [Employees]&quot;\n        deletecommand=&quot;Delete [Employees] Where [EmployeeID]=@EmployeeID&quot;\n        connectionstring=&quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n            \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"FormViewDeletedEventHandler2#1\">\n&lt;%@ page language=&quot;VB&quot; %&gt;\n&lt;%@ import namespace=&quot;System.Data&quot;%&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n  &#39; To dynamically create a template for a FormView control,\n  &#39; you must create a custom template class to represent \n  &#39; the template. This template class represents the item\n  &#39; template for a FormView control.\n  Private NotInheritable Class EmployeeTemplate\n    Implements ITemplate\n    \n    &#39; When implementing the ITemplate interface, you must\n    &#39; the implement the InstantiateIn method. The FormView\n    &#39; control calls this method to create the template&#39;s \n    &#39; content. \n    Sub InstantiateIn(ByVal container As Control) Implements ITemplate.InstantiateIn\n    \n      &#39; Create the child controls contained in the template.\n      &#39; For this example, the item template displays the\n      &#39; FirstName and LastName field from the data source.\n      &#39; To support data-binding, create event handlers \n      &#39; for the DataBinding event of the child child controls.\n      &#39; The event handlers must bind the appropriate value \n      &#39; to the control.\n      Dim firstNameLabel As New Label()\n      firstNameLabel.ID = &quot;FirstNameLabel&quot;\n      AddHandler firstNameLabel.DataBinding, AddressOf FirstNameLabel_DataBinding\n      \n      Dim nameLineBreak As New LiteralControl(&quot;&lt;br/&gt;&quot;)\n      Dim buttonLineBreak As New LiteralControl(&quot;&lt;br/&gt;&quot;)\n\n      Dim lastNameLabel As New Label()\n      lastNameLabel.ID = &quot;LastNameLabel&quot;\n      AddHandler lastNameLabel.DataBinding, AddressOf LastNameLabel_DataBinding\n\n      &#39; Create a custom button control to display in the item\n      &#39; template. When a button within a FormView control is \n      &#39; clicked, the ItemCommand event is raised. The ItemCommand\n      &#39; event is used to handle the clicking of this button.\n      Dim deleteButton As New Button()\n      deleteButton.ID = &quot;DeleteButton&quot;\n      deleteButton.CommandName = &quot;Delete&quot;\n      deleteButton.Text = &quot;Delete&quot;\n\n      &#39; Add the controls to the Controls collection of the \n      &#39; container control.\n      container.Controls.Add(firstNameLabel)\n      container.Controls.Add(nameLineBreak)\n      container.Controls.Add(lastNameLabel)\n      container.Controls.Add(buttonLineBreak)\n      container.Controls.Add(deleteButton)\n\n    End Sub\n    \n    &#39; This event handler binds the value of the FirstName field\n    &#39; to the FirstNameLabel Label control displayed in the template.\n    Private Sub FirstNameLabel_DataBinding(ByVal sender As Object, ByVal e As EventArgs)\n\n      &#39; Use the sender parameter to retrieve the Label control\n      &#39; being bound to data.\n      Dim firstNameLabelControl As Label = CType(sender, Label)\n\n      &#39; Retrieve the value to bind to the Label control. First,\n      &#39; use the NamingContainer property to retrieve the parent \n      &#39; control of the Label control. In this example, the parent \n      &#39; control is the FormView control.\n      Dim formViewContainer As FormView = CType(firstNameLabelControl.NamingContainer, FormView)\n      \n      &#39; Get the data item bound to the FormView control.\n      Dim rowView As DataRowView = CType(formViewContainer.DataItem, DataRowView)\n\n      &#39; Use the data item to retrieve the value of the FirstName field\n      &#39; Set the Text property of the Label control to this value.        \n      firstNameLabelControl.Text = rowView(&quot;FirstName&quot;).ToString()\n  \n    End Sub\n\n    &#39; This event handler binds the value of the LastName field\n    &#39; to the LastNameLabel Label control displayed in the template.\n    Private Sub LastNameLabel_DataBinding(ByVal sender As Object, ByVal e As EventArgs)\n\n      &#39; Use the sender parameter to retrieve the Label control\n      &#39; being bound to data.\n      Dim lastNameLabelControl As Label = CType(sender, Label)\n\n      &#39; Retrieve the value to bind to the Label control. First,\n      &#39; use the NamingContainer property to retrieve the parent \n      &#39; control of the Label control. In this example, the parent \n      &#39; control is the FormView control.\n      Dim formViewContainer As FormView = CType(lastNameLabelControl.NamingContainer, FormView)\n\n      &#39; Get the data item bound to the FormView control.\n      Dim rowView As DataRowView = CType(formViewContainer.DataItem, DataRowView)\n\n      &#39; Use the data item to retrieve the value of the LastName field\n      &#39; Set the Text property of the Label control to this value.         \n      lastNameLabelControl.Text = rowView(&quot;LastName&quot;).ToString()\n    \n    End Sub\n\n  End Class\n\n  Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)\n\n    &#39; Create a new FormView object.\n    Dim employeesFormView As New FormView()\n\n    &#39; Set the FormView object&#39;s properties.\n    employeesFormView.ID = &quot;EmployeesFormView&quot;\n    employeesFormView.DataSourceID = &quot;EmployeeSource&quot;\n    employeesFormView.AllowPaging = True\n    employeesFormView.HeaderText = &quot;Employee Name&quot;\n    \n    Dim keyArray() As String = {&quot;EmployeeID&quot;}\n    employeesFormView.DataKeyNames = keyArray\n\n    &#39; Programmatically register the event handler for the \n    &#39; ItemDeleted event of the FormView control.\n    AddHandler employeesFormView.ItemDeleted, AddressOf EmployeeFormView_ItemDeleted\n\n    &#39; Create the dynamic template using the custom template class.\n    employeesFormView.ItemTemplate = New EmployeeTemplate()\n\n    &#39; Add the FormView object to the Controls collection\n    &#39; of the PlaceHolder control.\n    FormViewPlaceHolder.Controls.Add(employeesFormView)\n\n  End Sub\n\n  Sub EmployeeFormView_ItemDeleted(ByVal sender As Object, ByVal e As FormViewDeletedEventArgs)\n  \n    &#39; Use the Exception property to determine whether an exception\n    &#39; occurred during the delete operation.\n    If e.Exception Is Nothing Then\n    \n      &#39; Use the AffectedRows property to determine whether the\n      &#39; record was deleted. Sometimes an error might occur that \n      &#39; does not raise an exception, but prevents the delete\n      &#39; operation from completing.\n      If e.AffectedRows = 1 Then\n      \n        MessageLabel.Text = &quot;Record deleted successfully.&quot;\n      \n      Else\n              \n        MessageLabel.Text = &quot;An error occurred during the delete operation.&quot;\n      \n      End If\n    \n    Else\n    \n      &#39; Insert the code to handle the exception.\n      MessageLabel.Text = e.Exception.Message\n      \n      &#39; Use the ExceptionHandled property to indicate that the \n      &#39; exception is already handled.\n      e.ExceptionHandled = True\n      \n    End If\n    \n  End Sub\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;FormViewDeletedEventHandler Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;FormViewDeletedEventHandler Example&lt;/h3&gt;\n      \n      &lt;!-- Use a PlaceHolder control as the container for the --&gt;\n      &lt;!-- dynamically generated FormView control.            --&gt;       \n      &lt;asp:placeholder id=&quot;FormViewPlaceHolder&quot;\n        runat=&quot;server&quot;/&gt;\n            \n      &lt;br/&gt;&lt;br/&gt;\n      \n      &lt;asp:label id=&quot;MessageLabel&quot;\n        forecolor=&quot;Red&quot;\n        runat=&quot;server&quot;/&gt;\n          \n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;EmployeeSource&quot;\n        selectcommand=&quot;Select [EmployeeID], [LastName], [FirstName], [Title], [PhotoPath] From [Employees]&quot;\n        deletecommand=&quot;Delete [Employees] Where [EmployeeID]=@EmployeeID&quot;\n        connectionstring=&quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n            \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p> The following example demonstrates how to declaratively add a FormViewDeletedEventHandler delegate to the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_ItemDeleted\" data-linktype=\"relative-path\">ItemDeleted</a> event of a <a class=\"xref\" href=\"system.web.ui.webcontrols.formview\" data-linktype=\"relative-path\">FormView</a> control.  </p>\n<pre><code class=\"lang-cs\" name=\"FormViewDeletedEventHandlerDeclarative2#1\">\n&lt;%@ Page language=&quot;C#&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  void EmployeeFormView_ItemDeleted(Object sender, FormViewDeletedEventArgs e)\n  {\n    // Use the Exception property to determine whether an exception\n    // occurred during the delete operation.\n    if (e.Exception == null)\n    {\n      // Use the AffectedRows property to determine whether the\n      // record was deleted. Sometimes an error might occur that \n      // does not raise an exception, but prevents the delete\n      // operation from completing.\n      if (e.AffectedRows == 1)\n      {\n        MessageLabel.Text = &quot;Record deleted successfully.&quot;;\n      }\n      else\n      {\n        MessageLabel.Text = &quot;An error occurred during the delete operation.&quot;;\n      }\n    }\n    else\n    {\n      // Insert the code to handle the exception.\n      MessageLabel.Text = e.Exception.Message;\n      \n      // Use the ExceptionHandled property to indicate that the \n      // exception has already been handled.\n      e.ExceptionHandled = true;\n    }\n  }\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;FormViewDeletedEventHandler Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;FormViewDeletedEventHandler Example&lt;/h3&gt;\n                       \n      &lt;asp:formview id=&quot;EmployeeFormView&quot;\n        datasourceid=&quot;EmployeeSource&quot;\n        allowpaging=&quot;true&quot;\n        datakeynames=&quot;EmployeeID&quot;\n        onitemdeleted=&quot;EmployeeFormView_ItemDeleted&quot;  \n        runat=&quot;server&quot;&gt;\n        \n        &lt;itemtemplate&gt;\n        \n          &lt;table&gt;\n            &lt;tr&gt;\n              &lt;td&gt;\n                &lt;asp:image id=&quot;EmployeeImage&quot;\n                  imageurl=&#39;&lt;%# Eval(&quot;PhotoPath&quot;) %&gt;&#39;\n                  alternatetext=&#39;&lt;%# Eval(&quot;LastName&quot;) %&gt;&#39; \n                  runat=&quot;server&quot;/&gt;\n              &lt;/td&gt;\n              &lt;td&gt;\n                &lt;h3&gt;&lt;%# Eval(&quot;FirstName&quot;) %&gt;&amp;nbsp;&lt;%# Eval(&quot;LastName&quot;) %&gt;&lt;/h3&gt;      \n                &lt;%# Eval(&quot;Title&quot;) %&gt;        \n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n              &lt;td colspan=&quot;2&quot;&gt;\n                &lt;asp:button id=&quot;DeleteButton&quot;\n                  text=&quot;Delete Record&quot;\n                  commandname=&quot;Delete&quot;\n                  runat=&quot;server&quot; /&gt;\n              &lt;/td&gt;\n            &lt;/tr&gt;\n          &lt;/table&gt;\n        \n        &lt;/itemtemplate&gt;         \n                  \n      &lt;/asp:formview&gt;\n      \n      &lt;asp:label id=&quot;MessageLabel&quot;\n        forecolor=&quot;Red&quot;\n        runat=&quot;server&quot;/&gt;\n          \n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the Web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;EmployeeSource&quot;\n        selectcommand=&quot;Select [EmployeeID], [LastName], [FirstName], [Title], [PhotoPath] From [Employees]&quot;\n        deletecommand=&quot;Delete [Employees] Where [EmployeeID]=@EmployeeID&quot;\n        connectionstring=&quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n            \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"FormViewDeletedEventHandlerDeclarative2#1\">\n&lt;%@ Page language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Sub EmployeeFormView_ItemDeleted(ByVal sender As Object, ByVal e As FormViewDeletedEventArgs) Handles EmployeeFormView.ItemDeleted\n  \n    &#39; Use the Exception property to determine whether an exception\n    &#39; occurred during the delete operation.\n    If e.Exception Is Nothing Then\n    \n      &#39; Use the AffectedRows property to determine whether the\n      &#39; record was deleted. Sometimes an error might occur that \n      &#39; does not raise an exception, but prevents the delete\n      &#39; operation from completing.\n      If e.AffectedRows = 1 Then\n      \n        MessageLabel.Text = &quot;Record deleted successfully.&quot;\n      \n      Else\n              \n        MessageLabel.Text = &quot;An error occurred during the delete operation.&quot;\n      \n      End If\n    \n    Else\n    \n      &#39; Insert the code to handle the exception.\n      MessageLabel.Text = e.Exception.Message\n      \n      &#39; Use the ExceptionHandled property to indicate that the \n      &#39; exception has already been handled.\n      e.ExceptionHandled = True\n      \n    End If\n    \n  End Sub\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;FormViewDeletedEventHandler Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;FormViewDeletedEventHandler Example&lt;/h3&gt;\n                       \n      &lt;asp:formview id=&quot;EmployeeFormView&quot;\n        datasourceid=&quot;EmployeeSource&quot;\n        allowpaging=&quot;true&quot;\n        datakeynames=&quot;EmployeeID&quot; \n        runat=&quot;server&quot;&gt;\n        \n        &lt;itemtemplate&gt;\n        \n          &lt;table&gt;\n            &lt;tr&gt;\n              &lt;td&gt;\n                &lt;asp:image id=&quot;EmployeeImage&quot;\n                  imageurl=&#39;&lt;%# Eval(&quot;PhotoPath&quot;) %&gt;&#39;\n                  alternatetext=&#39;&lt;%# Eval(&quot;LastName&quot;) %&gt;&#39; \n                  runat=&quot;server&quot;/&gt;\n              &lt;/td&gt;\n              &lt;td&gt;\n                &lt;h3&gt;&lt;%# Eval(&quot;FirstName&quot;) %&gt;&amp;nbsp;&lt;%# Eval(&quot;LastName&quot;) %&gt;&lt;/h3&gt;      \n                &lt;%# Eval(&quot;Title&quot;) %&gt;        \n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n              &lt;td colspan=&quot;2&quot;&gt;\n                &lt;asp:button id=&quot;DeleteButton&quot;\n                  text=&quot;Delete Record&quot;\n                  commandname=&quot;Delete&quot;\n                  runat=&quot;server&quot; /&gt;\n              &lt;/td&gt;\n            &lt;/tr&gt;\n          &lt;/table&gt;\n        \n        &lt;/itemtemplate&gt;         \n                  \n      &lt;/asp:formview&gt;\n      \n      &lt;asp:label id=&quot;MessageLabel&quot;\n        forecolor=&quot;Red&quot;\n        runat=&quot;server&quot;/&gt;\n          \n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the Web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;EmployeeSource&quot;\n        selectcommand=&quot;Select [EmployeeID], [LastName], [FirstName], [Title], [PhotoPath] From [Employees]&quot;\n        deletecommand=&quot;Delete [Employees] Where [EmployeeID]=@EmployeeID&quot;\n        connectionstring=&quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n            \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The <a class=\"xref\" href=\"system.web.ui.webcontrols.formview\" data-linktype=\"relative-path\">FormView</a> control raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_ItemDeleted\" data-linktype=\"relative-path\">ItemDeleted</a> event when a Delete button (a button with its <code>CommandName</code> property set to &quot;Delete&quot;) within the control is clicked, but after the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview\" data-linktype=\"relative-path\">FormView</a> control deletes the record. This allows you to provide an event-handling method that performs a custom routine, such as checking the results of a delete operation, whenever this event occurs.  </p>\n<p> When you create a FormViewDeletedEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see <a href=\"http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115\" data-linktype=\"external\">NIB: Events and Delegates</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.FormViewDeletedEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.FormViewDeletedEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.FormViewDeletedEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.FormViewDeletedEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.FormViewDeletedEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.FormViewDeletedEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:59 PM\">\r\n<meta name=\"document_id\" content=\"6bdde879-4a31-d8c5-9017-2ed785873865\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that handles the  event of a  control.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.web.ui.webcontrols/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.WebControls.FormViewDeletedEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","uhfHeaderId":"MSDocsHeader-DotNet","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.FormViewDeletedEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Web.UI.WebControls.FormViewDeletedEventHandler","System.Web.UI.WebControls.FormViewDeletedEventHandler..ctor","System.Web.UI.WebControls.FormViewDeletedEventHandler.Invoke","System.Web.UI.WebControls.FormViewDeletedEventHandler.BeginInvoke","System.Web.UI.WebControls.FormViewDeletedEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.WebControls.FormViewDeletedEventHandler","System::Web::UI::WebControls::FormViewDeletedEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-04-01 05:59 PM","document_id":"6bdde879-4a31-d8c5-9017-2ed785873865","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Web.UI.WebControls/FormViewDeletedEventHandler.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"FormViewDeletedEventHandler delegate | Microsoft Docs","_op_ogTitle":"FormViewDeletedEventHandler delegate","description":"Represents the method that handles the  event of a  control.\n","toc_asset_id":"api/_splitted/System.Web.UI.WebControls/toc.json","toc_rel":"_splitted/System.Web.UI.WebControls/toc.json","source_url":"","ms.assetid":"System.Web.UI.WebControls.FormViewDeletedEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.formviewdeletedeventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.formviewdeletedeventhandler","fileRelativePath":"api/System.Web.UI.WebControls.FormViewDeletedEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}