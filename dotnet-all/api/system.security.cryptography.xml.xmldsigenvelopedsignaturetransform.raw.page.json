{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">XmlDsigEnvelopedSignatureTransform</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the enveloped signature transform for an XML digital signature as defined by the W3C.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class XmlDsigEnvelopedSignatureTransform : System.Security.Cryptography.Xml.Transform</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.transform\" data-linktype=\"relative-path\">Transform</a></span></div><span class=\"lang-csharp\">XmlDsigEnvelopedSignatureTransform</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_Algorithm\" data-linktype=\"relative-path\">Algorithm</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_Context\" data-linktype=\"relative-path\">Context</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_GetDigestedOutput_System_Security_Cryptography_HashAlgorithm_\" data-linktype=\"relative-path\">GetDigestedOutput(HashAlgorithm)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_GetXml\" data-linktype=\"relative-path\">GetXml()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_PropagatedNamespaces\" data-linktype=\"relative-path\">PropagatedNamespaces</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.xml.transform#System_Security_Cryptography_Xml_Transform_Resolver\" data-linktype=\"relative-path\">Resolver</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>This section contains two code examples. The first example demonstrates how to sign an XML file using an envelope signature. The second example demonstrates how to use members of the XmlDsigEnvelopedSignatureTransform class.  </p>\n<p> <strong>Example #1</strong>  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.XML-XMLDsigEnvelope#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\nusing System;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.X509Certificates;\nusing System.Security.Cryptography.Xml;\nusing System.Text;\nusing System.Xml;\n\npublic class SignVerifyEnvelope\n{\n\n    public static void Main(String[] args)\n    {\n        try\n        {\n            // Generate a signing key.\n            RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n            // Create an XML file to sign.\n            CreateSomeXml(&quot;Example.xml&quot;);\n            Console.WriteLine(&quot;New XML file created.&quot;); \n\n            // Sign the XML that was just created and save it in a \n            // new file.\n            SignXmlFile(&quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, Key);\n            Console.WriteLine(&quot;XML file signed.&quot;); \n\n            // Verify the signature of the signed XML.\n            Console.WriteLine(&quot;Verifying signature...&quot;);\n            bool result = VerifyXmlFile(&quot;SignedExample.xml&quot;);\n\n            // Display the results of the signature verification to \\\n            // the console.\n            if(result)\n            {\n                Console.WriteLine(&quot;The XML signature is valid.&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;The XML signature is not valid.&quot;);\n            }\n        }\n        catch(CryptographicException e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n\n    // Sign an XML file and save the signature in a new file.\n    public static void SignXmlFile(string FileName, string SignedFileName, RSA Key)\n    {\n        // Create a new XML document.\n        XmlDocument doc = new XmlDocument();\n\n        // Format the document to ignore white spaces.\n        doc.PreserveWhitespace = false;\n\n        // Load the passed XML file using it&#39;s name.\n        doc.Load(new XmlTextReader(FileName));\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml(doc);\n\n        // Add the key to the SignedXml document. \n        signedXml.SigningKey = Key;\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n        reference.Uri = &quot;&quot;;\n\n        // Add an enveloped transformation to the reference.\n        XmlDsigEnvelopedSignatureTransform env = new XmlDsigEnvelopedSignatureTransform();\n        reference.AddTransform(env);\n\n        // Add the reference to the SignedXml object.\n        signedXml.AddReference(reference);\n\n\t\t\n        // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n        KeyInfo keyInfo = new KeyInfo();\n        keyInfo.AddClause(new RSAKeyValue((RSA)Key));\n        signedXml.KeyInfo = keyInfo;\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Get the XML representation of the signature and save\n        // it to an XmlElement object.\n        XmlElement xmlDigitalSignature = signedXml.GetXml();\n\n        // Append the element to the XML document.\n        doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, true));\n\t\t\n\t\t\n        if (doc.FirstChild is XmlDeclaration)  \n        {\n            doc.RemoveChild(doc.FirstChild);\n        }\n\n        // Save the signed XML document to a file specified\n        // using the passed string.\n        XmlTextWriter xmltw = new XmlTextWriter(SignedFileName, new UTF8Encoding(false));\n        doc.WriteTo(xmltw);\n        xmltw.Close();\n    }\n    // Verify the signature of an XML file and return the result.\n    public static Boolean VerifyXmlFile(String Name)\n    {\n        // Create a new XML document.\n        XmlDocument xmlDocument = new XmlDocument();\n\n        // Format using white spaces.\n        xmlDocument.PreserveWhitespace = true;\n\n        // Load the passed XML file into the document. \n        xmlDocument.Load(Name);\n\n        // Create a new SignedXml object and pass it\n        // the XML document class.\n        SignedXml signedXml = new SignedXml(xmlDocument);\n\n        // Find the &quot;Signature&quot; node and create a new\n        // XmlNodeList object.\n        XmlNodeList nodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;);\n\n        // Load the signature node.\n        signedXml.LoadXml((XmlElement)nodeList[0]);\n\n        // Check the signature and return the result.\n        return signedXml.CheckSignature();\n    }\n\n    // Create example data to sign.\n    public static void CreateSomeXml(string FileName)\n    {\n        // Create a new XmlDocument object.\n        XmlDocument document = new XmlDocument();\n\n        // Create a new XmlNode object.\n        XmlNode  node = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot;);\n\t\t\n        // Add some text to the node.\n        node.InnerText = &quot;Example text to be signed.&quot;;\n\n        // Append the node to the document.\n        document.AppendChild(node);\n\n        // Save the XML document to the file name specified.\n        XmlTextWriter xmltw = new XmlTextWriter(FileName, new UTF8Encoding(false));\n        document.WriteTo(xmltw);\n        xmltw.Close();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.XML-XMLDsigEnvelope#1\">//\n// This example signs an XML file using an\n// envelope signature. It then verifies the \n// signed XML.\n//\n#using &lt;System.Security.dll&gt;\n#using &lt;System.Xml.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::X509Certificates;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Text;\nusing namespace System::Xml;\n\n// Sign an XML file and save the signature in a new file.\nvoid SignXmlFile( String^ FileName, String^ SignedFileName, RSA^ Key )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ doc = gcnew XmlDocument;\n   \n   // Format the document to ignore white spaces.\n   doc-&gt;PreserveWhitespace = false;\n   \n   // Load the passed XML file using its name.\n   doc-&gt;Load( gcnew XmlTextReader( FileName ) );\n   \n   // Create a SignedXml object.\n   SignedXml^ signedXml = gcnew SignedXml( doc );\n   \n   // Add the key to the SignedXml document. \n   signedXml-&gt;SigningKey = Key;\n   \n   // Create a reference to be signed.\n   Reference^ reference = gcnew Reference;\n   reference-&gt;Uri = &quot;&quot;;\n   \n   // Add an enveloped transformation to the reference.\n   XmlDsigEnvelopedSignatureTransform^ env = gcnew XmlDsigEnvelopedSignatureTransform;\n   reference-&gt;AddTransform( env );\n   \n   // Add the reference to the SignedXml object.\n   signedXml-&gt;AddReference( reference );\n   \n   // Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n   KeyInfo^ keyInfo = gcnew KeyInfo;\n   keyInfo-&gt;AddClause( gcnew RSAKeyValue( safe_cast&lt;RSA^&gt;(Key) ) );\n   signedXml-&gt;KeyInfo = keyInfo;\n   \n   // Compute the signature.\n   signedXml-&gt;ComputeSignature();\n   \n   // Get the XML representation of the signature and save\n   // it to an XmlElement object.\n   XmlElement^ xmlDigitalSignature = signedXml-&gt;GetXml();\n   \n   // Append the element to the XML document.\n   doc-&gt;DocumentElement-&gt;AppendChild( doc-&gt;ImportNode( xmlDigitalSignature, true ) );\n   if ( (doc-&gt;FirstChild)-&gt;GetType() == XmlDeclaration::typeid )\n   {\n      doc-&gt;RemoveChild( doc-&gt;FirstChild );\n   }\n\n   \n   // Save the signed XML document to a file specified\n   // using the passed string.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( SignedFileName,gcnew UTF8Encoding( false ) );\n   doc-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\n\n// Verify the signature of an XML file and return the result.\nBoolean VerifyXmlFile( String^ Name )\n{\n   \n   // Create a new XML document.\n   XmlDocument^ xmlDocument = gcnew XmlDocument;\n   \n   // Format using white spaces.\n   xmlDocument-&gt;PreserveWhitespace = true;\n   \n   // Load the passed XML file into the document. \n   xmlDocument-&gt;Load( Name );\n   \n   // Create a new SignedXml object and pass it\n   // the XML document class.\n   SignedXml^ signedXml = gcnew SignedXml( xmlDocument );\n   \n   // Find the &quot;Signature&quot; node and create a new\n   // XmlNodeList object.\n   XmlNodeList^ nodeList = xmlDocument-&gt;GetElementsByTagName( &quot;Signature&quot; );\n   \n   // Load the signature node.\n   signedXml-&gt;LoadXml( safe_cast&lt;XmlElement^&gt;(nodeList-&gt;Item( 0 )) );\n   \n   // Check the signature and return the result.\n   return signedXml-&gt;CheckSignature();\n}\n\n\n// Create example data to sign.\nvoid CreateSomeXml( String^ FileName )\n{\n   \n   // Create a new XmlDocument object.\n   XmlDocument^ document = gcnew XmlDocument;\n   \n   // Create a new XmlNode object.\n   XmlNode^ node = document-&gt;CreateNode( XmlNodeType::Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot; );\n   \n   // Add some text to the node.\n   node-&gt;InnerText = &quot;Example text to be signed.&quot;;\n   \n   // Append the node to the document.\n   document-&gt;AppendChild( node );\n   \n   // Save the XML document to the file name specified.\n   XmlTextWriter^ xmltw = gcnew XmlTextWriter( FileName,gcnew UTF8Encoding( false ) );\n   document-&gt;WriteTo( xmltw );\n   xmltw-&gt;Close();\n}\n\nint main()\n{\n   try\n   {\n      \n      // Generate a signing key.\n      RSACryptoServiceProvider^ Key = gcnew RSACryptoServiceProvider;\n      \n      // Create an XML file to sign.\n      CreateSomeXml( &quot;Example.xml&quot; );\n      Console::WriteLine( &quot;New XML file created.&quot; );\n      \n      // Sign the XML that was just created and save it in a \n      // new file.\n      SignXmlFile( &quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, Key );\n      Console::WriteLine( &quot;XML file signed.&quot; );\n      \n      // Verify the signature of the signed XML.\n      Console::WriteLine( &quot;Verifying signature...&quot; );\n      bool result = VerifyXmlFile( &quot;SignedExample.xml&quot; );\n      \n      // Display the results of the signature verification to\n      // the console.\n      if ( result )\n      {\n         Console::WriteLine( &quot;The XML signature is valid.&quot; );\n      }\n      else\n      {\n         Console::WriteLine( &quot;The XML signature is not valid.&quot; );\n      }\n   }\n   catch ( CryptographicException^ e ) \n   {\n      Console::WriteLine( e-&gt;Message );\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.XML-XMLDsigEnvelope#1\">&#39;\n&#39; This example signs an XML file using an\n&#39; envelope signature. It then verifies the \n&#39; signed XML.\n&#39;\nImports System\nImports System.Security.Cryptography\nImports System.Security.Cryptography.X509Certificates\nImports System.Security.Cryptography.Xml\nImports System.Text\nImports System.Xml\n\n\n\nPublic Class SignVerifyEnvelope\n   \n   Overloads Public Shared Sub Main(args() As [String])\n      Try\n         &#39; Generate a signing key.\n         Dim Key As New RSACryptoServiceProvider()\n         \n         &#39; Create an XML file to sign.\n         CreateSomeXml(&quot;Example.xml&quot;)\n         Console.WriteLine(&quot;New XML file created.&quot;)\n         \n         &#39; Sign the XML that was just created and save it in a \n         &#39; new file.\n         SignXmlFile(&quot;Example.xml&quot;, &quot;SignedExample.xml&quot;, Key)\n         Console.WriteLine(&quot;XML file signed.&quot;)\n         \n         &#39; Verify the signature of the signed XML.\n         Console.WriteLine(&quot;Verifying signature...&quot;)\n         Dim result As Boolean = VerifyXmlFile(&quot;SignedExample.xml&quot;)\n         \n         &#39; Display the results of the signature verification to \\\n         &#39; the console.\n         If result Then\n            Console.WriteLine(&quot;The XML signature is valid.&quot;)\n         Else\n            Console.WriteLine(&quot;The XML signature is not valid.&quot;)\n         End If\n      Catch e As CryptographicException\n         Console.WriteLine(e.Message)\n      End Try\n   End Sub \n   \n   \n   &#39; Sign an XML file and save the signature in a new file.\n   Public Shared Sub SignXmlFile(FileName As String, SignedFileName As String, Key As RSA)\n      &#39; Create a new XML document.\n      Dim doc As New XmlDocument()\n      \n      &#39; Format the document to ignore white spaces.\n      doc.PreserveWhitespace = False\n      \n      &#39; Load the passed XML file using it&#39;s name.\n      doc.Load(New XmlTextReader(FileName))\n      \n      &#39; Create a SignedXml object.\n      Dim signedXml As New SignedXml(doc)\n      \n      &#39; Add the key to the SignedXml document. \n      signedXml.SigningKey = Key\n      \n      &#39; Create a reference to be signed.\n      Dim reference As New Reference()\n      reference.Uri = &quot;&quot;\n      \n      &#39; Add an enveloped transformation to the reference.\n      Dim env As New XmlDsigEnvelopedSignatureTransform()\n      reference.AddTransform(env)\n      \n      &#39; Add the reference to the SignedXml object.\n      signedXml.AddReference(reference)\n      \n      \n      &#39; Add an RSAKeyValue KeyInfo (optional; helps recipient find key to validate).\n      Dim keyInfo As New KeyInfo()\n      keyInfo.AddClause(New RSAKeyValue(CType(Key, RSA)))\n      signedXml.KeyInfo = keyInfo\n      \n      &#39; Compute the signature.\n      signedXml.ComputeSignature()\n      \n      &#39; Get the XML representation of the signature and save\n      &#39; it to an XmlElement object.\n      Dim xmlDigitalSignature As XmlElement = signedXml.GetXml()\n      \n      &#39; Append the element to the XML document.\n      doc.DocumentElement.AppendChild(doc.ImportNode(xmlDigitalSignature, True))\n      \n      \n      If TypeOf doc.FirstChild Is XmlDeclaration Then\n         doc.RemoveChild(doc.FirstChild)\n      End If\n      \n      &#39; Save the signed XML document to a file specified\n      &#39; using the passed string.\n      Dim xmltw As New XmlTextWriter(SignedFileName, New UTF8Encoding(False))\n      doc.WriteTo(xmltw)\n      xmltw.Close()\n   End Sub \n   &#39; Verify the signature of an XML file and return the result.\n   Public Shared Function VerifyXmlFile(Name As [String]) As [Boolean]\n      &#39; Create a new XML document.\n      Dim xmlDocument As New XmlDocument()\n      \n      &#39; Format using white spaces.\n      xmlDocument.PreserveWhitespace = True\n      \n      &#39; Load the passed XML file into the document. \n      xmlDocument.Load(Name)\n      \n      &#39; Create a new SignedXml object and pass it\n      &#39; the XML document class.\n      Dim signedXml As New SignedXml(xmlDocument)\n      \n      &#39; Find the &quot;Signature&quot; node and create a new\n      &#39; XmlNodeList object.\n      Dim nodeList As XmlNodeList = xmlDocument.GetElementsByTagName(&quot;Signature&quot;)\n      \n      &#39; Load the signature node.\n      signedXml.LoadXml(CType(nodeList(0), XmlElement))\n      \n      &#39; Check the signature and return the result.\n      Return signedXml.CheckSignature()\n   End Function \n   \n   \n   &#39; Create example data to sign.\n   Public Shared Sub CreateSomeXml(FileName As String)\n      &#39; Create a new XmlDocument object.\n      Dim document As New XmlDocument()\n      \n      &#39; Create a new XmlNode object.\n      Dim node As XmlNode = document.CreateNode(XmlNodeType.Element, &quot;&quot;, &quot;MyElement&quot;, &quot;samples&quot;)\n      \n      &#39; Add some text to the node.\n      node.InnerText = &quot;Example text to be signed.&quot;\n      \n      &#39; Append the node to the document.\n      document.AppendChild(node)\n      \n      &#39; Save the XML document to the file name specified.\n      Dim xmltw As New XmlTextWriter(FileName, New UTF8Encoding(False))\n      document.WriteTo(xmltw)\n      xmltw.Close()\n   End Sub \nEnd Class\n</code></pre><p> <strong>Example #2</strong>  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform#2\">using System;\nusing System.IO;\nusing System.Xml;\nusing System.Security.Cryptography;\nusing System.Security.Cryptography.Xml;\nusing System.Security.Cryptography.X509Certificates;\n\nclass Class1\n{\n    private static string Certificate =  &quot;..\\\\..\\\\my509.cer&quot;;\n\n    [STAThread]\n    static void Main(string[] args)\n    {\n        // Encrypt an XML message\n        XmlDocument productsXml = LoadProducts();\n        ShowTransformProperties(productsXml);\n\n        SignDocument(ref productsXml);\n        ShowTransformProperties(productsXml);\n\n        // Use XmlDsigEnvelopedSignatureTransform to resolve a Uri.\n        Uri baseUri = new Uri(&quot;http://www.contoso.com&quot;);\n        string relativeUri = &quot;xml&quot;;\n        Uri absoluteUri = ResolveUris(baseUri, relativeUri);\n\n        Console.WriteLine(&quot;This sample completed successfully; &quot; +\n            &quot;press Enter to exit.&quot;);\n        Console.ReadLine();\n    }\n\n    // Encrypt the text in the specified XmlDocument.\n    private static void ShowTransformProperties(XmlDocument xmlDoc)\n    {\n        XmlDsigEnvelopedSignatureTransform xmlTransform = \n            new XmlDsigEnvelopedSignatureTransform();\n\n        // Ensure the transform is using the proper algorithm.\n        xmlTransform.Algorithm =\n            SignedXml.XmlDsigEnvelopedSignatureTransformUrl;\n\n        // Retrieve the XML representation of the current transform.\n        XmlElement xmlInTransform = xmlTransform.GetXml();\n\n        Console.WriteLine(&quot;\\nXml representation of the current transform: &quot;);\n        Console.WriteLine(xmlInTransform.OuterXml);\n\n        // Retrieve the valid input types for the current transform.\n        Type[] validInTypes = xmlTransform.InputTypes;\n\n        // Verify the xmlTransform can accept the XMLDocument as an\n        // input type.\n        for (int i=0; i&lt;validInTypes.Length; i++)\n        {\n            if (validInTypes[i] == xmlDoc.GetType())\n            {\n                // Load the document into the transfrom.\n                xmlTransform.LoadInput(xmlDoc);\n\n                bool IncludeComments = true;\n                // This transform is created for demonstration purposes.\n                XmlDsigEnvelopedSignatureTransform secondTransform =\n                    new XmlDsigEnvelopedSignatureTransform(IncludeComments);\n\n                string classDescription = secondTransform.ToString();\n\n                // This call does not perform as expected.\n                // An enveloped signature has no inner XML elements\n                secondTransform.LoadInnerXml(xmlDoc.SelectNodes(&quot;//.&quot;));\n\n                break;\n            }\n        }\n\n        Type[] validOutTypes = xmlTransform.OutputTypes;\n\n        for (int i=validOutTypes.Length-1; i &gt;= 0; i--)\n        {\n            if (validOutTypes[i] == typeof(System.Xml.XmlDocument))\n            {\n                try \n                {\n                    Type xmlDocumentType = typeof(System.Xml.XmlDocument);\n                    XmlDocument xmlDocumentOutput = (XmlDocument) \n                        xmlTransform.GetOutput(xmlDocumentType);\n\n                    // Display to the console the Xml before and after\n                    // encryption.\n                    Console.WriteLine(&quot;Result of the GetOutput method call&quot; +\n                        &quot; from the current transform: &quot; + \n                        xmlDocumentOutput.OuterXml);\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(&quot;Unexpected exception caught: &quot; +\n                        ex.ToString());\n                }\n\n                break;\n            }\n            else if (validOutTypes[i] == typeof(System.Xml.XmlNodeList))\n            {\n                try \n                {\n                    Type xmlNodeListType = typeof(System.Xml.XmlNodeList);\n                    XmlNodeList xmlNodes = (XmlNodeList) \n                        xmlTransform.GetOutput(xmlNodeListType);\n\n                    // Display to the console the Xml before and after\n                    // encryption.\n                    Console.WriteLine(&quot;Encoding the following message: &quot; +\n                        xmlDoc.InnerText);\n\n                    Console.WriteLine(&quot;Nodes of the XmlNodeList retrieved &quot; +\n                        &quot;from GetOutput:&quot;);\n                    for (int j=0; j &lt; xmlNodes.Count; j++)\n                    {\n                        Console.WriteLine(&quot;Node &quot; + j + \n                            &quot; has the following name: &quot; + \n                            xmlNodes.Item(j).Name + \n                            &quot; and the following InnerXml: &quot; + \n                            xmlNodes.Item(j).InnerXml);\n                    }\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(&quot;Unexpected exception caught: &quot; +\n                        ex.ToString());\n                }\n\n                break;\n            }\n            else\n            {\n                object outputObject = xmlTransform.GetOutput();\n            }\n        }\n    }\n\n    // Create an XML document describing various products.\n    private static XmlDocument LoadProducts()\n    {\n        XmlDocument xmlDoc = new XmlDocument();\n\n        string contosoProducts = &quot;&lt;PRODUCTS&gt;&quot;;\n        contosoProducts += &quot;&lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&quot;;\n        contosoProducts += &quot;&lt;DESCRIPTION&gt;Router&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot;;\n        contosoProducts += &quot;&lt;PRODUCT&gt;&lt;ID&gt;456&lt;/ID&gt;&quot;;\n        contosoProducts += &quot;&lt;DESCRIPTION&gt;Keyboard&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot;;\n        contosoProducts += &quot;&lt;PRODUCT&gt;&lt;ID&gt;789&lt;/ID&gt;&quot;;\n        contosoProducts += &quot;&lt;DESCRIPTION&gt;Monitor&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot;;\n        contosoProducts += &quot;&lt;/PRODUCTS&gt;&quot;;\n\n        xmlDoc.LoadXml(contosoProducts);\n        return xmlDoc;\n    }\n\n    // Create a signature and add it to the specified document.\n    private static void SignDocument(ref XmlDocument xmlDoc)\n    {\n        // Generate a signing key.\n        RSACryptoServiceProvider Key = new RSACryptoServiceProvider();\n\n        // Create a SignedXml object.\n        SignedXml signedXml = new SignedXml(xmlDoc);\n\n        // Add the key to the SignedXml document. \n        signedXml.SigningKey = Key;\n\n        // Create a reference to be signed.\n        Reference reference = new Reference();\n        reference.Uri = &quot;&quot;;\n\n        // Add an enveloped transformation to the reference.\n        reference.AddTransform(new XmlDsigEnvelopedSignatureTransform());\n\n        // Add the reference to the SignedXml object.\n        signedXml.AddReference(reference);\n\n        try \n        {\n            // Create a new KeyInfo object.\n            KeyInfo keyInfo = new KeyInfo();\n\n            // Load the X509 certificate.\n            X509Certificate MSCert =\n                X509Certificate.CreateFromCertFile(Certificate);\n\n            // Load the certificate into a KeyInfoX509Data object\n            // and add it to the KeyInfo object.\n            keyInfo.AddClause(new KeyInfoX509Data(MSCert));\n\n            // Add the KeyInfo object to the SignedXml object.\n            signedXml.KeyInfo = keyInfo;\n        }\n        catch (FileNotFoundException ex)\n        {\n            Console.WriteLine(&quot;Unable to locate the following file: &quot; + \n                Certificate);\n        }\n\n        // Compute the signature.\n        signedXml.ComputeSignature();\n\n        // Add the signature branch to the original tree so it is enveloped.\n        xmlDoc.DocumentElement.AppendChild(signedXml.GetXml());\n    }\n\n    // Resolve the specified base and relative Uri&#39;s .\n    private static Uri ResolveUris(Uri baseUri, string relativeUri)\n    {\n        XmlUrlResolver xmlResolver = new XmlUrlResolver();\n        xmlResolver.Credentials = \n            System.Net.CredentialCache.DefaultCredentials;\n\n        XmlDsigEnvelopedSignatureTransform xmlTransform =\n            new XmlDsigEnvelopedSignatureTransform();\n        xmlTransform.Resolver = xmlResolver;\n\n        Uri absoluteUri = xmlResolver.ResolveUri(baseUri, relativeUri);\n\n        if (absoluteUri != null)\n        {\n            Console.WriteLine(\n                &quot;\\nResolved the base Uri and relative Uri to the following:&quot;);\n            Console.WriteLine(absoluteUri.ToString());\n        }\n        else\n        {\n            Console.WriteLine(\n                &quot;Unable to resolve the base Uri and relative Uri&quot;);\n        }\n        return absoluteUri;\n    }\n}\n//\n// This sample produces the following output:\n//\n// Xml representation of the current transform: \n// &lt;Transform Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#enveloped-\n// signature&quot; xmlns=&quot;http://www.w3.org/2000/09/xmldsig#&quot; /&gt;\n// Result of the GetOutput method call from the current transform: &lt;PRODUCTS&gt;\n// &lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&lt;DESCRIPTION&gt;Router&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;\n// &lt;ID&gt;456&lt;/ID&gt;&lt;DESCRIPTION&gt;Keyboard&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;&lt;ID&gt;789\n// &lt;/ID&gt;&lt;DESCRIPTION&gt;Monitor&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;/PRODUCTS&gt;\n// Unable to load the following file: ..\\\\my509.cer\n// \n// Xml representation of the current transform: \n// &lt;Transform Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#enveloped-\n// signature&quot; xmlns=&quot;http://www.w3.org/2000/09/xmldsig#&quot; /&gt;\n// Result of the GetOutput method call from the current transform: &lt;PRODUCTS&gt;\n// &lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&lt;DESCRIPTION&gt;Router&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;\n// &lt;ID&gt;456&lt;/ID&gt;&lt;DESCRIPTION&gt;Keyboard&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;&lt;ID&gt;789\n// &lt;/ID&gt;&lt;DESCRIPTION&gt;Monitor&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;Signature xmlns=\n// &quot;http://www.w3.org/2000/09/xmldsig#&quot;&gt;&lt;SignedInfo&gt;&lt;CanonicalizationMethod \n// Algorithm=&quot;http://www.w3.org/TR/2001/REC-xml-c14n-20010315&quot; /&gt;\n// &lt;SignatureMethod Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#rsa-sha1&quot; /&gt;\n// &lt;Reference URI=&quot;&quot;&gt;&lt;Transforms&gt;&lt;Transform Algorithm=&quot;http://www.w3.org/2000\n// /09/xmldsig#enveloped-signature&quot; /&gt;&lt;/Transforms&gt;&lt;DigestMethod Algorithm=\n// &quot;http://www.w3.org/2000/09/xmldsig#sha1&quot; /&gt;&lt;DigestValue&gt;KvPW6HUiIUMEDS0YSoT\n// gpo2JPbA=&lt;/DigestValue&gt;&lt;/Reference&gt;&lt;/SignedInfo&gt;&lt;SignatureValue&gt;c/njCGDru/a\n// WAmWG83I+mWO040xOzxvmNx0b0o8ZyPc9j5VwApdAt103OGBtB1H6EkOvt7Ekw+PVuUo8m5LzLP\n// yaTxUDMbb2kZZ5itSkGD4rmMUMUMuzrkAoquJZjxeOydBJ2CMehV2rE3RMPLIwRX176DZVy5JKU\n// 6Cb7PR2Rpw=&lt;/SignatureValue&gt;&lt;/Signature&gt;&lt;/PRODUCTS&gt;\n// \n// Resolved the base Uri and relative Uri to the following:\n// http://www.contoso.com/xml\n// This sample completed successfully; press Enter to exit.\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform#2\">#using &lt;System.dll&gt;\n#using &lt;System.Xml.dll&gt;\n#using &lt;System.Security.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Xml;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Cryptography::Xml;\nusing namespace System::Security::Cryptography::X509Certificates;\n\npublic ref class EnvelopedSignatureSample\n{\nprivate:\n    static String^ Certificate =  &quot;..\\\\..\\\\my509.cer&quot;;\n\n    // Encrypt the text in the specified XmlDocument.\npublic:\n    static void ShowTransformProperties(XmlDocument^ xmlDoc)\n    {\n        XmlDsigEnvelopedSignatureTransform^ xmlTransform =\n            gcnew XmlDsigEnvelopedSignatureTransform();\n\n        // Ensure the transform is using the proper algorithm.\n        xmlTransform-&gt;Algorithm =\n            SignedXml::XmlDsigEnvelopedSignatureTransformUrl;\n\n        // Retrieve the XML representation of the current transform.\n        XmlElement^ xmlInTransform = xmlTransform-&gt;GetXml();\n\n        Console::WriteLine(&quot;\\nXml representation of the current transform: &quot;);\n        Console::WriteLine(xmlInTransform-&gt;OuterXml);\n\n        // Retrieve the valid input types for the current transform.\n        array&lt;Type^&gt;^ validInTypes = xmlTransform-&gt;InputTypes;\n\n        // Verify the xmlTransform can accept the XMLDocument as an\n        // input type.\n        for (int i = 0; i &lt; validInTypes-&gt;Length; i++)\n        {\n            if (validInTypes[i] == xmlDoc-&gt;GetType())\n            {\n                // Load the document into the transfrom.\n                xmlTransform-&gt;LoadInput(xmlDoc);\n\n                bool IncludeComments = true;\n                // This transform is created for demonstration purposes.\n                XmlDsigEnvelopedSignatureTransform^ secondTransform =\n                    gcnew XmlDsigEnvelopedSignatureTransform(IncludeComments);\n\n                String^ classDescription = secondTransform-&gt;ToString();\n\n                // This call does not perform as expected.\n                // An enveloped signature has no inner XML elements\n                secondTransform-&gt;LoadInnerXml(xmlDoc-&gt;SelectNodes(&quot;//.&quot;));\n\n                break;\n            }\n        }\n\n        array&lt;Type^&gt;^ validOutTypes = xmlTransform-&gt;OutputTypes;\n\n        for (int i = validOutTypes-&gt;Length-1; i &gt;= 0; i--)\n        {\n            if (validOutTypes[i] == System::Xml::XmlDocument::typeid)\n            {\n                Type^ xmlDocumentType = System::Xml::XmlDocument::typeid;\n                XmlDocument^ xmlDocumentOutput = (XmlDocument^)\n                    xmlTransform-&gt;GetOutput(xmlDocumentType);\n\n                // Display to the console the Xml before and after\n                // encryption.\n                Console::WriteLine(&quot;Result of the GetOutput method call&quot; +\n                    &quot; from the current transform: &quot; +\n                    xmlDocumentOutput-&gt;OuterXml);\n\n                break;\n            }\n            else if (validOutTypes[i] == System::Xml::XmlNodeList::typeid)\n            {\n                Type^ xmlNodeListType = System::Xml::XmlNodeList::typeid;\n                XmlNodeList^ xmlNodes = (XmlNodeList^)\n                    xmlTransform-&gt;GetOutput(xmlNodeListType);\n\n                // Display to the console the Xml before and after\n                // encryption.\n                Console::WriteLine(&quot;Encoding the following message: &quot; +\n                    xmlDoc-&gt;InnerText);\n\n                Console::WriteLine(&quot;Nodes of the XmlNodeList retrieved &quot; +\n                    &quot;from GetOutput:&quot;);\n                for (int j = 0; j &lt; xmlNodes-&gt;Count; j++)\n                {\n                    Console::WriteLine(&quot;Node &quot; + j +\n                        &quot; has the following name: &quot; +\n                        xmlNodes-&gt;Item(j)-&gt;Name +\n                        &quot; and the following InnerXml: &quot; +\n                        xmlNodes-&gt;Item(j)-&gt;InnerXml);\n                }\n\n                break;\n            }\n            else\n            {\n                Object^ outputObject = xmlTransform-&gt;GetOutput();\n            }\n        }\n    }\n\n    // Create an XML document describing various products.\npublic:\n    static XmlDocument^ LoadProducts()\n    {\n        XmlDocument^ xmlDoc = gcnew XmlDocument();\n\n        String^ contosoProducts = &quot;&lt;PRODUCTS&gt;&quot; +\n            &quot;&lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&lt;DESCRIPTION&gt;Router&quot; + \n            &quot;&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot; +\n            &quot;&lt;PRODUCT&gt;&lt;ID&gt;456&lt;/ID&gt;&lt;DESCRIPTION&gt;Keyboard&quot; +\n            &quot;&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot; +\n            &quot;&lt;PRODUCT&gt;&lt;ID&gt;789&lt;/ID&gt;&lt;DESCRIPTION&gt;Monitor&quot; +\n            &quot;&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot; +\n            &quot;&lt;/PRODUCTS&gt;&quot;;\n\n        xmlDoc-&gt;LoadXml(contosoProducts);\n        return xmlDoc;\n    }\n\n    // Create a signature and add it to the specified document.\npublic:\n    static void SignDocument(XmlDocument^ xmlDoc)\n    {\n        // Generate a signing key.\n        RSACryptoServiceProvider^ key = gcnew RSACryptoServiceProvider();\n\n        // Create a SignedXml object.\n        SignedXml^ signedDocument = gcnew SignedXml(xmlDoc);\n\n        // Add the key to the SignedXml document.\n        signedDocument-&gt;SigningKey = key;\n\n        // Create a reference to be signed.\n        Reference^ referenceToBeSigned = gcnew Reference();\n        referenceToBeSigned-&gt;Uri = &quot;&quot;;\n\n        // Add an enveloped transformation to the reference.\n        referenceToBeSigned-&gt;AddTransform(\n            gcnew XmlDsigEnvelopedSignatureTransform());\n\n        // Add the reference to the SignedXml object.\n        signedDocument-&gt;AddReference(referenceToBeSigned);\n\n        if(File::Exists(Certificate))\n        {\n            // Create a new KeyInfo object.\n            KeyInfo^ info = gcnew KeyInfo();\n\n            // Load the X509 certificate.\n            X509Certificate^ certFromFile =\n                X509Certificate::CreateFromCertFile(Certificate);\n\n            // Load the certificate into a KeyInfoX509Data object\n            // and add it to the KeyInfo object.\n            info-&gt;AddClause(gcnew KeyInfoX509Data(certFromFile));\n\n            // Add the KeyInfo object to the SignedXml object.\n            signedDocument-&gt;KeyInfo = info;\n        }\n        else\n        {\n            Console::WriteLine(&quot;Unable to locate the following file: &quot; +\n                Certificate);\n        }\n\n        // Compute the signature.\n        signedDocument-&gt;ComputeSignature();\n\n        // Add the signature branch to the original tree so it is enveloped.\n        xmlDoc-&gt;DocumentElement-&gt;AppendChild(signedDocument-&gt;GetXml());\n    }\n\n    // Resolve the specified base and relative Uri&#39;s .\npublic:\n    static Uri^ ResolveUris(Uri^ baseUri, String^ relativeUri)\n    {\n        XmlUrlResolver^ xmlResolver = gcnew XmlUrlResolver();\n        xmlResolver-&gt;Credentials =\n            System::Net::CredentialCache::DefaultCredentials;\n\n        XmlDsigEnvelopedSignatureTransform^ xmlTransform =\n            gcnew XmlDsigEnvelopedSignatureTransform();\n        xmlTransform-&gt;Resolver = xmlResolver;\n\n        Uri^ absoluteUri = xmlResolver-&gt;ResolveUri(baseUri, relativeUri);\n\n        if (absoluteUri != nullptr)\n        {\n            Console::WriteLine(\n                &quot;\\nResolved the base Uri and relative Uri to the following:&quot;);\n            Console::WriteLine(absoluteUri-&gt;ToString());\n        }\n        else\n        {\n            Console::WriteLine(\n                &quot;Unable to resolve the base Uri and relative Uri&quot;);\n        }\n        return absoluteUri;\n    }\n};\n\n[STAThread]\nint main()\n{\n    // Encrypt an XML message\n    XmlDocument^ productsXml = EnvelopedSignatureSample::LoadProducts();\n    EnvelopedSignatureSample::ShowTransformProperties(productsXml);\n\n    EnvelopedSignatureSample::SignDocument(productsXml);\n    EnvelopedSignatureSample::ShowTransformProperties(productsXml);\n\n    // Use XmlDsigEnvelopedSignatureTransform to resolve a Uri.\n    Uri^ baseUri = gcnew Uri(&quot;http://www.contoso.com&quot;);\n    String^ relativeUri = &quot;xml&quot;;\n    Uri^ absoluteUri = \n        EnvelopedSignatureSample::ResolveUris(baseUri, relativeUri);\n\n    Console::WriteLine(&quot;This sample completed successfully; &quot; +\n        &quot;press Enter to exit.&quot;);\n    Console::ReadLine();\n}\n\n//\n// This sample produces the following output:\n//\n// Xml representation of the current transform:\n// &lt;Transform Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#enveloped-\n// signature&quot; xmlns=&quot;http://www.w3.org/2000/09/xmldsig#&quot; /&gt;\n// Result of the GetOutput method call from the current transform: &lt;PRODUCTS&gt;\n// &lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&lt;DESCRIPTION&gt;Router&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;\n// &lt;ID&gt;456&lt;/ID&gt;&lt;DESCRIPTION&gt;Keyboard&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;&lt;ID&gt;789\n// &lt;/ID&gt;&lt;DESCRIPTION&gt;Monitor&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;/PRODUCTS&gt;\n// Unable to load the following file: ..\\\\my509.cer\n//\n// Xml representation of the current transform:\n// &lt;Transform Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#enveloped-\n// signature&quot; xmlns=&quot;http://www.w3.org/2000/09/xmldsig#&quot; /&gt;\n// Result of the GetOutput method call from the current transform: &lt;PRODUCTS&gt;\n// &lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&lt;DESCRIPTION&gt;Router&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;\n// &lt;ID&gt;456&lt;/ID&gt;&lt;DESCRIPTION&gt;Keyboard&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;&lt;ID&gt;789\n// &lt;/ID&gt;&lt;DESCRIPTION&gt;Monitor&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;Signature xmlns=\n// &quot;http://www.w3.org/2000/09/xmldsig#&quot;&gt;&lt;SignedInfo&gt;&lt;CanonicalizationMethod\n// Algorithm=&quot;http://www.w3.org/TR/2001/REC-xml-c14n-20010315&quot; /&gt;\n// &lt;SignatureMethod Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#rsa-sha1&quot; /&gt;\n// &lt;Reference URI=&quot;&quot;&gt;&lt;Transforms&gt;&lt;Transform Algorithm=&quot;http://www.w3.org/2000\n// /09/xmldsig#enveloped-signature&quot; /&gt;&lt;/Transforms&gt;&lt;DigestMethod Algorithm=\n// &quot;http://www.w3.org/2000/09/xmldsig#sha1&quot; /&gt;&lt;DigestValue&gt;KvPW6HUiIUMEDS0YSoT\n// gpo2JPbA=&lt;/DigestValue&gt;&lt;/Reference&gt;&lt;/SignedInfo&gt;&lt;SignatureValue&gt;c/njCGDru/a\n// WAmWG83I+mWO040xOzxvmNx0b0o8ZyPc9j5VwApdAt103OGBtB1H6EkOvt7Ekw+PVuUo8m5LzLP\n// yaTxUDMbb2kZZ5itSkGD4rmMUMUMuzrkAoquJZjxeOydBJ2CMehV2rE3RMPLIwRX176DZVy5JKU\n// 6Cb7PR2Rpw=&lt;/SignatureValue&gt;&lt;/Signature&gt;&lt;/PRODUCTS&gt;\n//\n// Resolved the base Uri and relative Uri to the following:\n// http://www.contoso.com/xml\n// This sample completed successfully; press Enter to exit.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform#2\">Imports System\nImports System.IO\nImports System.Xml\nImports System.Security.Cryptography\nImports System.Security.Cryptography.Xml\nImports System.Security.Cryptography.X509Certificates\n\nPublic Class Form1\n    Inherits System.Windows.Forms.Form\n\n    Private certificatePath As String = &quot;..\\\\my509.cer&quot;\n\n    &#39; Event handler for Run button.\n    Private Sub Button1_Click( _\n        ByVal sender As System.Object, _\n        ByVal e As System.EventArgs) Handles Button1.Click\n\n        tbxOutput.Cursor = Cursors.WaitCursor\n        tbxOutput.Text = &quot;&quot;\n\n        &#39; Encrypt an XML message\n        Dim productsXml As XmlDocument = LoadProducts()\n        ShowTransformProperties(productsXml)\n\n        SignDocument(productsXml)\n        ShowTransformProperties(productsXml)\n\n        &#39; Use XmlDsigEnvelopedSignatureTransform to resolve a Uri.\n        Dim baseUri As New Uri(&quot;http://www.contoso.com&quot;)\n        Dim relativeUri As String = &quot;xml&quot;\n        Dim absoluteUri As Uri = ResolveUris(baseUri, relativeUri)\n\n        &#39; Align interface and conclude application.\n        WriteLine(vbCrLf + &quot;This sample completed successfully;&quot; + _\n            &quot; press Exit to continue.&quot;)\n\n        &#39; Reset the cursor.\n        tbxOutput.Cursor = Cursors.Default\n    End Sub\n\n    &#39; Encrypt the text in the specified XmlDocument.\n    Private Sub ShowTransformProperties(ByVal xmlDoc As XmlDocument)\n        Dim xmlTransform As New XmlDsigEnvelopedSignatureTransform\n\n        &#39; Ensure the transform is using the proper algorithm.\n        xmlTransform.Algorithm = _\n            SignedXml.XmlDsigEnvelopedSignatureTransformUrl\n\n        &#39; Retrieve the XML representation of the current transform.\n        Dim xmlInTransform As XmlElement = xmlTransform.GetXml()\n\n        WriteLine(vbCrLf + &quot;Xml representation of the current transform: &quot;)\n        WriteLine(xmlInTransform.OuterXml)\n\n        &#39; Retrieve the valid input types for the current transform.\n        Dim validInTypes() As Type = xmlTransform.InputTypes\n\n        &#39; Verify the xmlTransform can accept the XMLDocument as an\n        &#39; input type.\n        For i As Int16 = 0 To validInTypes.Length Step 1\n            If (validInTypes(i).Equals(xmlDoc.GetType())) Then\n                &#39; Load the document into the transfrom.\n                xmlTransform.LoadInput(xmlDoc)\n\n                Dim IncludeComments As Boolean = True\n                &#39; This transform is created for demonstration purposes.\n                Dim secondTransform As _\n                    New XmlDsigEnvelopedSignatureTransform(IncludeComments)\n\n                Dim classDescription As String = secondTransform.ToString()\n\n                &#39; This call does not perform as expected.\n                &#39; An enveloped signature has no inner XML elements\n                secondTransform.LoadInnerXml(xmlDoc.SelectNodes(&quot;//.&quot;))\n                Exit For\n            End If\n        Next\n\n        Dim validOutTypes() As Type = xmlTransform.OutputTypes\n        For i As Int16 = validOutTypes.Length - 1 To 0 Step -1\n            If (validOutTypes(i).Equals(GetType(System.Xml.XmlDocument))) Then\n                Try\n                    Dim xmlDocumentType As Type\n                    xmlDocumentType = GetType(System.Xml.XmlDocument)\n\n                    Dim xmlDocumentOutput As XmlDocument\n                    xmlDocumentOutput = CType( _\n                        xmlTransform.GetOutput(xmlDocumentType), _\n                        XmlDocument)\n\n                    &#39; Display to the console the Xml before and after\n                    &#39; encryption.\n                    WriteLine(&quot;Result of the GetOutput method call from &quot; + _\n                        &quot;the current transform: &quot; + _\n                        xmlDocumentOutput.OuterXml)\n                Catch ex As Exception\n                    WriteLine(&quot;Unexpected exception caught: &quot; + ex.ToString())\n\n                End Try\n                Exit For\n            ElseIf (validOutTypes(i).Equals( _\n                GetType(System.Xml.XmlNodeList))) Then\n\n                Try\n                    Dim xmlNodeListType As Type\n                    xmlNodeListType = GetType(System.Xml.XmlNodeList)\n                    Dim xmlNodes As XmlNodeList\n                    xmlNodes = CType( _\n                        xmlTransform.GetOutput(xmlNodeListType), _\n                        System.Xml.XmlNodeList)\n\n                    &#39; Display to the console the Xml before and after\n                    &#39; encryption.\n                    WriteLine(&quot;Encoding the following message: &quot; + _\n                        xmlDoc.InnerText)\n\n                    WriteLine(&quot;Nodes of the XmlNodeList retrieved from &quot; + _\n                        &quot;GetOutput:&quot;)\n\n                    For j As Int16 = 0 To xmlNodes.Count - 1 Step 1\n                        WriteLine(&quot;Node &quot; + j.ToString() + &quot; has the &quot; + _\n                            &quot;following name: &quot; + xmlNodes.Item(j).Name + _\n                            &quot; and the following InnerXml: &quot; + _\n                            xmlNodes.Item(j).InnerXml)\n                    Next\n                Catch ex As Exception\n                    WriteLine(&quot;Unexpected exception caught: &quot; + ex.ToString())\n                End Try\n\n                Exit For\n            Else\n                Dim outputObject As Object = xmlTransform.GetOutput()\n            End If\n        Next\n    End Sub\n\n    Private Function LoadProducts() As XmlDocument\n        Dim xmlDoc As New XmlDocument\n\n        Dim contosoProducts As String = &quot;&lt;PRODUCTS&gt;&quot;\n        contosoProducts += &quot;&lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&quot;\n        contosoProducts += &quot;&lt;DESCRIPTION&gt;Router&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot;\n        contosoProducts += &quot;&lt;PRODUCT&gt;&lt;ID&gt;456&lt;/ID&gt;&quot;\n        contosoProducts += &quot;&lt;DESCRIPTION&gt;Keyboard&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot;\n        contosoProducts += &quot;&lt;PRODUCT&gt;&lt;ID&gt;789&lt;/ID&gt;&quot;\n        contosoProducts += &quot;&lt;DESCRIPTION&gt;Monitor&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&quot;\n        contosoProducts += &quot;&lt;/PRODUCTS&gt;&quot;\n\n        xmlDoc.LoadXml(contosoProducts)\n        Return xmlDoc\n    End Function\n\n    &#39; Create a signature and add it to the specified document.\n    Private Sub SignDocument(ByRef xmlDoc As XmlDocument)\n        &#39; Generate a signing key.\n        Dim Key As New RSACryptoServiceProvider\n\n        &#39; Create a SignedXml object.\n        Dim signedXml As New SignedXml(xmlDoc)\n\n        &#39; Add the key to the SignedXml document. \n        signedXml.SigningKey = Key\n\n        &#39; Create a reference to be signed.\n        Dim reference As New Reference\n        Reference.Uri = &quot;&quot;\n\n        &#39; Add an enveloped transformation to the reference.\n        Reference.AddTransform(New XmlDsigEnvelopedSignatureTransform)\n\n        &#39; Add the reference to the SignedXml object.\n        SignedXml.AddReference(Reference)\n\n        Try\n            &#39; Create a new KeyInfo object.\n            Dim keyInfo As New keyInfo\n\n            &#39; Load the X509 certificate.\n            Dim MSCert As X509Certificate\n            MSCert = X509Certificate.CreateFromCertFile(certificatePath)\n\n            &#39; Load the certificate into a KeyInfoX509Data object\n            &#39; and add it to the KeyInfo object.\n            keyInfo.AddClause(New KeyInfoX509Data(MSCert))\n\n            &#39; Add the KeyInfo object to the SignedXml object.\n            signedXml.KeyInfo = keyInfo\n\n        Catch ex As FileNotFoundException\n            WriteLine(&quot;Unable to load the following file: &quot; + certificatePath)\n\n        End Try\n        &#39; Compute the signature.\n        signedXml.ComputeSignature()\n\n        &#39; Add the signature branch to the original tree so it is enveloped.\n        xmlDoc.DocumentElement.AppendChild(signedXml.GetXml())\n    End Sub\n\n    &#39; Resolve the specified base and relative Uri&#39;s .\n    Private Function ResolveUris( _\n        ByVal baseUri As Uri, _\n        ByVal relativeUri As String) As Uri\n\n        Dim xmlResolver As New XmlUrlResolver\n\n        xmlResolver.Credentials = _\n            System.Net.CredentialCache.DefaultCredentials\n\n        Dim xmlTransform As New XmlDsigEnvelopedSignatureTransform\n        xmlTransform.Resolver = xmlResolver\n\n        Dim absoluteUri As Uri = xmlResolver.ResolveUri(baseUri, relativeUri)\n\n        If Not absoluteUri Is Nothing Then\n            WriteLine(vbCrLf + &quot;Resolved the base Uri and relative Uri &quot; + _\n                &quot;to the following:&quot;)\n            WriteLine(absoluteUri.ToString())\n        Else\n            WriteLine(&quot;Unable to resolve the base Uri and relative Uri&quot;)\n        End If\n\n        Return absoluteUri\n    End Function\n\n    &#39; Write specified message and carriage return to the output textbox.\n    Private Sub WriteLine(ByVal message As String)\n        tbxOutput.AppendText(Message + vbCrLf)\n\n    End Sub\n\n    &#39; Event handler for Exit button.\n    Private Sub Button2_Click( _\n        ByVal sender As System.Object, _\n        ByVal e As System.EventArgs) Handles Button2.Click\n\n        Application.Exit()\n    End Sub\n#Region &quot; Windows Form Designer generated code &quot;\n\n    Public Sub New()\n        MyBase.New()\n\n        &#39;This call is required by the Windows Form Designer.\n        InitializeComponent()\n\n        &#39;Add any initialization after the InitializeComponent() call\n\n    End Sub\n\n    &#39;Form overrides dispose to clean up the component list.\n    Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)\n        If disposing Then\n            If Not (components Is Nothing) Then\n                components.Dispose()\n            End If\n        End If\n        MyBase.Dispose(disposing)\n    End Sub\n\n    &#39;Required by the Windows Form Designer\n    Private components As System.ComponentModel.IContainer\n\n    &#39;NOTE: The following procedure is required by the Windows Form Designer\n    &#39;It can be modified using the Windows Form Designer.  \n    &#39;Do not modify it using the code editor.\n    Friend WithEvents Panel2 As System.Windows.Forms.Panel\n    Friend WithEvents Panel1 As System.Windows.Forms.Panel\n    Friend WithEvents Button1 As System.Windows.Forms.Button\n    Friend WithEvents Button2 As System.Windows.Forms.Button\n    Friend WithEvents tbxOutput As System.Windows.Forms.RichTextBox\n    &lt;System.Diagnostics.DebuggerStepThrough()&gt; _\n    Private Sub InitializeComponent()\n        Me.Panel2 = New System.Windows.Forms.Panel\n        Me.Button1 = New System.Windows.Forms.Button\n        Me.Button2 = New System.Windows.Forms.Button\n        Me.Panel1 = New System.Windows.Forms.Panel\n        Me.tbxOutput = New System.Windows.Forms.RichTextBox\n        Me.Panel2.SuspendLayout()\n        Me.Panel1.SuspendLayout()\n        Me.SuspendLayout()\n        &#39;\n        &#39;Panel2\n        &#39;\n        Me.Panel2.Controls.Add(Me.Button1)\n        Me.Panel2.Controls.Add(Me.Button2)\n        Me.Panel2.Dock = System.Windows.Forms.DockStyle.Bottom\n        Me.Panel2.DockPadding.All = 20\n        Me.Panel2.Location = New System.Drawing.Point(0, 320)\n        Me.Panel2.Name = &quot;Panel2&quot;\n        Me.Panel2.Size = New System.Drawing.Size(616, 64)\n        Me.Panel2.TabIndex = 1\n        &#39;\n        &#39;Button1\n        &#39;\n        Me.Button1.Dock = System.Windows.Forms.DockStyle.Right\n        Me.Button1.Font = New System.Drawing.Font( _\n            &quot;Microsoft Sans Serif&quot;, _\n            9.0!, _\n            System.Drawing.FontStyle.Regular, _\n            System.Drawing.GraphicsUnit.Point, _\n            CType(0, Byte))\n        Me.Button1.Location = New System.Drawing.Point(446, 20)\n        Me.Button1.Name = &quot;Button1&quot;\n        Me.Button1.Size = New System.Drawing.Size(75, 24)\n        Me.Button1.TabIndex = 2\n        Me.Button1.Text = &quot;&amp;Run&quot;\n        &#39;\n        &#39;Button2\n        &#39;\n        Me.Button2.Dock = System.Windows.Forms.DockStyle.Right\n        Me.Button2.Font = New System.Drawing.Font( _\n            &quot;Microsoft Sans Serif&quot;, _\n            9.0!, _\n            System.Drawing.FontStyle.Regular, _\n            System.Drawing.GraphicsUnit.Point, _\n            CType(0, Byte))\n        Me.Button2.Location = New System.Drawing.Point(521, 20)\n        Me.Button2.Name = &quot;Button2&quot;\n        Me.Button2.Size = New System.Drawing.Size(75, 24)\n        Me.Button2.TabIndex = 3\n        Me.Button2.Text = &quot;E&amp;xit&quot;\n        &#39;\n        &#39;Panel1\n        &#39;\n        Me.Panel1.Controls.Add(Me.tbxOutput)\n        Me.Panel1.Dock = System.Windows.Forms.DockStyle.Fill\n        Me.Panel1.DockPadding.All = 20\n        Me.Panel1.Location = New System.Drawing.Point(0, 0)\n        Me.Panel1.Name = &quot;Panel1&quot;\n        Me.Panel1.Size = New System.Drawing.Size(616, 320)\n        Me.Panel1.TabIndex = 2\n        &#39;\n        &#39;tbxOutput\n        &#39;\n        Me.tbxOutput.AccessibleDescription = _\n            &quot;Displays output from application.&quot;\n        Me.tbxOutput.AccessibleName = &quot;Output textbox.&quot;\n        Me.tbxOutput.Dock = System.Windows.Forms.DockStyle.Fill\n        Me.tbxOutput.Location = New System.Drawing.Point(20, 20)\n        Me.tbxOutput.Name = &quot;tbxOutput&quot;\n        Me.tbxOutput.Size = New System.Drawing.Size(576, 280)\n        Me.tbxOutput.TabIndex = 1\n        Me.tbxOutput.Text = &quot;Click the Run button to run the application.&quot;\n        &#39;\n        &#39;Form1\n        &#39;\n        Me.AutoScaleBaseSize = New System.Drawing.Size(6, 15)\n        Me.ClientSize = New System.Drawing.Size(616, 384)\n        Me.Controls.Add(Me.Panel1)\n        Me.Controls.Add(Me.Panel2)\n        Me.Name = &quot;Form1&quot;\n        Me.Text = &quot;XmlDsigEnvelopedSignatureTransform&quot;\n        Me.Panel2.ResumeLayout(False)\n        Me.Panel1.ResumeLayout(False)\n        Me.ResumeLayout(False)\n\n    End Sub\n\n#End Region\nEnd Class\n&#39;\n&#39; This sample produces the following output:\n&#39;\n&#39; Xml representation of the current transform: \n&#39; &lt;Transform Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#enveloped-signature&quot;\n&#39; xmlns=&quot;http://www.w3.org/2000/09/xmldsig#&quot; /&gt;\n&#39; Result of the GetOutput method call from the current transform: &lt;PRODUCTS&gt;\n&#39; &lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&lt;DESCRIPTION&gt;Router&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;\n&#39; &lt;ID&gt;456&lt;/ID&gt;&lt;DESCRIPTION&gt;Keyboard&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;&lt;ID&gt;789\n&#39; &lt;/ID&gt;&lt;DESCRIPTION&gt;Monitor&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;/PRODUCTS&gt;\n&#39; Unable to load the following file: ..\\\\my509.cer\n&#39; \n&#39; Xml representation of the current transform: \n&#39; &lt;Transform Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#enveloped-signature&quot;\n&#39;  xmlns=&quot;http://www.w3.org/2000/09/xmldsig#&quot; /&gt;\n&#39; Result of the GetOutput method call from the current transform: &lt;PRODUCTS&gt;\n&#39; &lt;PRODUCT&gt;&lt;ID&gt;123&lt;/ID&gt;&lt;DESCRIPTION&gt;Router&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;\n&#39; &lt;ID&gt;456&lt;/ID&gt;&lt;DESCRIPTION&gt;Keyboard&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;PRODUCT&gt;&lt;ID&gt;789\n&#39; &lt;/ID&gt;&lt;DESCRIPTION&gt;Monitor&lt;/DESCRIPTION&gt;&lt;/PRODUCT&gt;&lt;Signature xmlns=\n&#39; &quot;http://www.w3.org/2000/09/xmldsig#&quot;&gt;&lt;SignedInfo&gt;&lt;CanonicalizationMethod \n&#39; Algorithm=&quot;http://www.w3.org/TR/2001/REC-xml-c14n-20010315&quot; /&gt;\n&#39; &lt;SignatureMethod Algorithm=&quot;http://www.w3.org/2000/09/xmldsig#rsa-sha1&quot; /&gt;\n&#39; &lt;Reference URI=&quot;&quot;&gt;&lt;Transforms&gt;&lt;Transform Algorithm=&quot;http://www.w3.org/2000\n&#39; /09/xmldsig#enveloped-signature&quot; /&gt;&lt;/Transforms&gt;&lt;DigestMethod Algorithm=\n&#39; &quot;http://www.w3.org/2000/09/xmldsig#sha1&quot; /&gt;&lt;DigestValue&gt;KvPW6HUiIUMEDS0YSoTg\n&#39; po2JPbA=&lt;/DigestValue&gt;&lt;/Reference&gt;&lt;/SignedInfo&gt;&lt;SignatureValue&gt;c/njCGDru/aWA\n&#39; mWG83I+mWO040xOzxvmNx0b0o8ZyPc9j5VwApdAt103OGBtB1H6EkOvt7Ekw+PVuUo8m5LzLPyaT\n&#39; xUDMbb2kZZ5itSkGD4rmMUMUMuzrkAoquJZjxeOydBJ2CMehV2rE3RMPLIwRX176DZVy5JKU6Cb7\n&#39; PR2Rpw=&lt;/SignatureValue&gt;&lt;/Signature&gt;&lt;/PRODUCTS&gt;\n&#39; \n&#39; Resolved the base Uri and relative Uri to the following:\n&#39; http://www.contoso.com/xml\n&#39; \n&#39; This sample completed successfully; press Exit to continue.\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The XmlDsigEnvelopedSignatureTransform class removes the &lt;<code>Signatur</code>e&gt; element from an XML document before the digest is computed. With this transform, you can sign and verify all elements of an XML document except the XML digital signature elements.  </p>\n<p> Although you can create and insert a signature into an XML document, verifying the modified document using the embedded signature will fail because the document now has additional elements.  This transform removes the &lt;<code>Signatur</code>e&gt; element and allows you to verify the document using its original form.  </p>\n<p> Use the XmlDsigEnvelopedSignatureTransform class whenever you create an enveloped signature.  </p>\n<p> For more information about the enveloped signature transform, see Section 6.6.4 of the XMLDSIG specification, which is available from the W3C at www.w3.org/TR/xmldsig-core/.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_XmlDsigEnvelopedSignatureTransform__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">XmlDsigEnvelopedSignatureTransform()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigenvelopedsignaturetransform\" data-linktype=\"relative-path\">XmlDsigEnvelopedSignatureTransform</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public XmlDsigEnvelopedSignatureTransform ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_XmlDsigEnvelopedSignatureTransform__ctor_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">XmlDsigEnvelopedSignatureTransform(Boolean)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigenvelopedsignaturetransform\" data-linktype=\"relative-path\">XmlDsigEnvelopedSignatureTransform</a> class with comments, if specified.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public XmlDsigEnvelopedSignatureTransform (bool includeComments);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>includeComments</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to include comments; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_XmlDsigEnvelopedSignatureTransform_InputTypes\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">InputTypes</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets an array of types that are valid inputs to the <span class=\"xref\">stem.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.LoadInput*</span> method of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigenvelopedsignaturetransform\" data-linktype=\"relative-path\">XmlDsigEnvelopedSignatureTransform</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override Type[] InputTypes { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array of valid input types for the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigenvelopedsignaturetransform\" data-linktype=\"relative-path\">XmlDsigEnvelopedSignatureTransform</a> object; you can pass only objects of one of these types to the <span class=\"xref\">stem.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.LoadInput*</span> method of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigenvelopedsignaturetransform\" data-linktype=\"relative-path\">XmlDsigEnvelopedSignatureTransform</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The valid input types to <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigenvelopedsignaturetransform\" data-linktype=\"relative-path\">XmlDsigEnvelopedSignatureTransform</a> are <a class=\"xref\" href=\"system.io.stream\" data-linktype=\"relative-path\">Stream</a>, <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a>, and <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_XmlDsigEnvelopedSignatureTransform_OutputTypes\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OutputTypes</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets an array of types that are possible outputs from the <span class=\"xref\">stem.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.GetOutput*</span> methods of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigenvelopedsignaturetransform\" data-linktype=\"relative-path\">XmlDsigEnvelopedSignatureTransform</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override Type[] OutputTypes { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array of valid output types for the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigenvelopedsignaturetransform\" data-linktype=\"relative-path\">XmlDsigEnvelopedSignatureTransform</a> object; only objects of one of these types are returned from the <span class=\"xref\">stem.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.GetOutput*</span> methods of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigenvelopedsignaturetransform\" data-linktype=\"relative-path\">XmlDsigEnvelopedSignatureTransform</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The valid output types for <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigenvelopedsignaturetransform\" data-linktype=\"relative-path\">XmlDsigEnvelopedSignatureTransform</a> are <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> and <a class=\"xref\" href=\"system.xml.xmldocument\" data-linktype=\"relative-path\">XmlDocument</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_XmlDsigEnvelopedSignatureTransform_GetInnerXml\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetInnerXml()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns an XML representation of the parameters of an <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigenvelopedsignaturetransform\" data-linktype=\"relative-path\">XmlDsigEnvelopedSignatureTransform</a> object that are suitable to be included as subelements of an XMLDSIG <code>&lt;Transform&gt;</code> element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected override System.Xml.XmlNodeList GetInnerXml ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A list of the XML nodes that represent the transform-specific content needed to describe the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigenvelopedsignaturetransform\" data-linktype=\"relative-path\">XmlDsigEnvelopedSignatureTransform</a> object in an XMLDSIG <code>&lt;Transform&gt;</code> element.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_XmlDsigEnvelopedSignatureTransform_GetOutput\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetOutput()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the output of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigenvelopedsignaturetransform\" data-linktype=\"relative-path\">XmlDsigEnvelopedSignatureTransform</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override object GetOutput ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The output of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigenvelopedsignaturetransform\" data-linktype=\"relative-path\">XmlDsigEnvelopedSignatureTransform</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The containing XML document is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The type of the returned object must be <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_XmlDsigEnvelopedSignatureTransform_GetOutput_System_Type_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetOutput(Type)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the output of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigenvelopedsignaturetransform\" data-linktype=\"relative-path\">XmlDsigEnvelopedSignatureTransform</a> object of type <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override object GetOutput (Type type);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>type</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The type of the output to return. <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> is the only valid type for this parameter.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The output of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigenvelopedsignaturetransform\" data-linktype=\"relative-path\">XmlDsigEnvelopedSignatureTransform</a> object of type <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>type</code> parameter is not an <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> object.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The type of the returned object must be <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_XmlDsigEnvelopedSignatureTransform_LoadInnerXml_System_Xml_XmlNodeList_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LoadInnerXml(XmlNodeList)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Parses the specified <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> as transform-specific content of a <code>&lt;Transform&gt;</code> element and configures the internal state of the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigenvelopedsignaturetransform\" data-linktype=\"relative-path\">XmlDsigEnvelopedSignatureTransform</a> object to match the <code>&lt;Transform&gt;</code> element.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override void LoadInnerXml (System.Xml.XmlNodeList nodeList);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>nodeList</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.xml.xmlnodelist\" data-linktype=\"relative-path\">XmlNodeList</a> to load into the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigenvelopedsignaturetransform\" data-linktype=\"relative-path\">XmlDsigEnvelopedSignatureTransform</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Because no transform-specific content is defined for <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigenvelopedsignaturetransform\" data-linktype=\"relative-path\">XmlDsigEnvelopedSignatureTransform</a>, a call to this method does not change the state of the transform.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_Xml_XmlDsigEnvelopedSignatureTransform_LoadInput_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LoadInput(Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Loads the specified input into the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigenvelopedsignaturetransform\" data-linktype=\"relative-path\">XmlDsigEnvelopedSignatureTransform</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override void LoadInput (object obj);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>obj</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The input to load into the current <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigenvelopedsignaturetransform\" data-linktype=\"relative-path\">XmlDsigEnvelopedSignatureTransform</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>obj</code> parameter is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.cryptographicexception\" data-linktype=\"relative-path\">CryptographicException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The containing XML document is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The type of the input object must be one of the types in the <a class=\"xref\" href=\"system.security.cryptography.xml.xmldsigenvelopedsignaturetransform#System_Security_Cryptography_Xml_XmlDsigEnvelopedSignatureTransform_InputTypes_\" data-linktype=\"relative-path\">InputTypes</a> property.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.GetInnerXml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.GetOutput\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.InputTypes\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.LoadInnerXml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.LoadInput\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.OutputTypes\">\r\n<meta name=\"APILocation\" content=\"System.Security.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"a212e46c-9324-334c-a286-3820764f05f5\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the enveloped signature transform for an XML digital signature as defined by the W3C.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.security.cryptography.xml/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.yml","open_to_public_contributors":false,"api_name":["System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform","System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform..ctor","System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.GetInnerXml","System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.GetOutput","System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.InputTypes","System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.LoadInnerXml","System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.LoadInput","System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.OutputTypes"],"api_location":["System.Security.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform","System::Security::Cryptography::Xml::XmlDsigEnvelopedSignatureTransform","System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.#ctor","System::Security::Cryptography::Xml::XmlDsigEnvelopedSignatureTransform::#ctor","System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.GetInnerXml","System::Security::Cryptography::Xml::XmlDsigEnvelopedSignatureTransform::GetInnerXml","System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.GetOutput","System::Security::Cryptography::Xml::XmlDsigEnvelopedSignatureTransform::GetOutput","System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.InputTypes","System::Security::Cryptography::Xml::XmlDsigEnvelopedSignatureTransform::InputTypes","System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.LoadInnerXml","System::Security::Cryptography::Xml::XmlDsigEnvelopedSignatureTransform::LoadInnerXml","System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.LoadInput","System::Security::Cryptography::Xml::XmlDsigEnvelopedSignatureTransform::LoadInput","System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.OutputTypes","System::Security::Cryptography::Xml::XmlDsigEnvelopedSignatureTransform::OutputTypes"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"a212e46c-9324-334c-a286-3820764f05f5","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Security.Cryptography.Xml/XmlDsigEnvelopedSignatureTransform.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"XmlDsigEnvelopedSignatureTransform class | Microsoft Docs","_op_ogTitle":"XmlDsigEnvelopedSignatureTransform class","description":"Represents the enveloped signature transform for an XML digital signature as defined by the W3C.\n","toc_asset_id":"api/_splitted/System.Security.Cryptography.Xml/toc.json","toc_rel":"_splitted/System.Security.Cryptography.Xml/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.xml.xmldsigenvelopedsignaturetransform","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.xml.xmldsigenvelopedsignaturetransform","fileRelativePath":"api/System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform.html"},"themesRelativePathToOutputRoot":"_themes/"}