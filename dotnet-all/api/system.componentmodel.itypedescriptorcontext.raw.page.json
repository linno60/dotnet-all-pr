{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ITypeDescriptorContext</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides contextual information about a component, such as its container and property descriptor.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[ECMA2Yaml.Models.ECMAAttribute]\npublic interface ITypeDescriptorContext : IServiceProvider</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates how to use the ITypeDescriptorContext interface to support type conversion.  </p>\n<pre><code class=\"lang-cpp\" name=\"InstanceDescriptorSample#1\">#using &lt;system.dll&gt;\n#using &lt;system.drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::ComponentModel;\nusing namespace System::ComponentModel::Design::Serialization;\nusing namespace System::Drawing;\nusing namespace System::Globalization;\nusing namespace System::Collections;\nusing namespace System::Reflection;\n\n/*   This sample shows how to support code generation for a custom type of object \n         using a type converter and InstanceDescriptor objects.\n\n         To use this code, copy it to a file and add the file to a project. Then add\n         a component to the project and declare a Triangle field and a public property \n         with accessors for the Triangle field on the component.\n\n         The Triangle property will be persisted using code generation.\n    */\nref class TriangleConverter;\n\n[TypeConverter(TriangleConverter::typeid)]\npublic ref class Triangle\n{\nprivate:\n\n   // Triangle members\n   Point P1;\n   Point P2;\n   Point P3;\n\npublic:\n\n   property Point Point1 \n   {\n      Point get()\n      {\n         return P1;\n      }\n\n      void set( Point value )\n      {\n         P1 = value;\n      }\n   }\n\n   property Point Point2 \n   {\n      Point get()\n      {\n         return P2;\n      }\n\n      void set( Point value )\n      {\n         P2 = value;\n      }\n   }\n\n   property Point Point3 \n   {\n      Point get()\n      {\n         return P3;\n      }\n\n      void set( Point value )\n      {\n         P3 = value;\n      }\n\n   }\n   Triangle( Point point1, Point point2, Point point3 )\n   {\n      P1 = point1;\n      P2 = point2;\n      P3 = point3;\n   }\n\n\n   /* A TypeConverter for the Triangle object.  Note that you can make it internal,\n      private, or any scope you want and the designers will still be able to use\n      it through the TypeDescriptor object.  This type converter provides the\n      capability to convert to an InstanceDescriptor.  This object can be used by \n      the .NET Framework to generate source code that creates an instance of a \n      Triangle object. */\n   [System::Security::Permissions::PermissionSet(System::Security::\n      Permissions::SecurityAction::Demand, Name = &quot;FullTrust&quot;)]\n   ref class TriangleConverter: public TypeConverter\n   {\n   public:\n\n      /* This method overrides CanConvertTo from TypeConverter. This is called when someone\n            wants to convert an instance of Triangle to another type.  Here,\n            only conversion to an InstanceDescriptor is supported. */\n      virtual bool CanConvertTo( ITypeDescriptorContext^ context, Type^ destinationType ) override\n      {\n         if ( destinationType == InstanceDescriptor::typeid )\n         {\n            return true;\n         }\n\n         \n         // Always call the base to see if it can perform the conversion.\n         return TypeConverter::CanConvertTo( context, destinationType );\n      }\n\n      /* This code performs the actual conversion from a Triangle to an InstanceDescriptor. */\n      virtual Object^ ConvertTo( ITypeDescriptorContext^ context, CultureInfo^ culture, Object^ value, Type^ destinationType ) override\n      {\n         if ( destinationType == InstanceDescriptor::typeid )\n         {\n            array&lt;Type^&gt;^type1 = {Point::typeid,Point::typeid,Point::typeid};\n            ConstructorInfo^ ci = Triangle::typeid-&gt;GetConstructor( type1 );\n            Triangle^ t = safe_cast&lt;Triangle^&gt;(value);\n            array&lt;Object^&gt;^obj1 = {t-&gt;Point1,t-&gt;Point2,t-&gt;Point3};\n            return gcnew InstanceDescriptor( ci,safe_cast&lt;ICollection^&gt;(obj1) );\n         }\n\n         // Always call base, even if you can&#39;t convert.\n         return TypeConverter::ConvertTo( context, culture, value, destinationType );\n      }\n   };\n};\n\npublic ref class TestComponent: public System::ComponentModel::Component\n{\nprivate:\n   Triangle^ myTriangle;\n\npublic:\n   TestComponent()\n   {\n      myTriangle = gcnew Triangle( Point(5,5),Point(10,10),Point(1,8) );\n   }\n\n   property Triangle^ MyTriangle \n   {\n      Triangle^ get()\n      {\n         return myTriangle;\n      }\n\n      void set( Triangle^ value )\n      {\n         myTriangle = value;\n      }\n   }\n};\n</code></pre><pre><code class=\"lang-vb\" name=\"InstanceDescriptorSample#1\">Imports System\nImports System.ComponentModel\nImports System.ComponentModel.Design.Serialization\nImports System.Drawing\nImports System.Globalization\nImports System.Reflection\nNamespace Microsoft.Samples.InstanceDescriptorSample\n\n   &#39;  This sample shows how to support code generation for a custom type \n   &#39;  of object using a type converter and InstanceDescriptor objects.\n   &#39;\n   &#39;  To use this code, copy it to a file and add the file to a project.  \n   &#39;  Then add a component to the project and declare a Triangle field and \n   &#39;  a public property with accessors for the Triangle field on the component.\n   &#39;\n   &#39;  The Triangle property will be persisted using code generation.\n\n   &lt;TypeConverter(GetType(Triangle.TriangleConverter))&gt; _\n   Public Class Triangle\n      &#39; Triangle members.\n      Private P1 As Point\n      Private P2 As Point\n      Private P3 As Point\n\n      Public Property Point1() As Point\n         Get\n            Return P1\n         End Get\n         Set(ByVal Value As Point)\n            P1 = Value\n         End Set\n      End Property\n\n      Public Property Point2() As Point\n         Get\n            Return P2\n         End Get\n         Set(ByVal Value As Point)\n            P2 = Value\n         End Set\n      End Property\n\n      Public Property Point3() As Point\n         Get\n            Return P3\n         End Get\n         Set(ByVal Value As Point)\n            P3 = Value\n         End Set\n      End Property\n\n      Public Sub New(ByVal point1 As Point, ByVal point2 As Point, ByVal point3 As Point)\n         P1 = point1\n         P2 = point2\n         P3 = point3\n      End Sub &#39;New\n\n      &#39; A TypeConverter for the Triangle object.  Note that you can make it internal,\n      &#39;  private, or any scope you want and the designers will still be able to use\n      &#39;  it through the TypeDescriptor object.  This type converter provides the\n      &#39;  capability to convert to an InstanceDescriptor.  This object can be used by \n      &#39;  the .NET Framework to generate source code that creates an instance of a \n      &#39;  Triangle object.\n\n      Friend Class TriangleConverter\n         Inherits TypeConverter\n\n         &#39; This method overrides CanConvertTo from TypeConverter.  This is called when someone\n         &#39;  wants to convert an instance of Triangle to another type.  Here,\n         &#39;  only coversition to an InstanceDescriptor is supported.\n         Public Overloads Overrides Function CanConvertTo(ByVal context As ITypeDescriptorContext, ByVal destinationType As Type) As Boolean\n            If destinationType Is GetType(InstanceDescriptor) Then\n               Return True\n            End If\n\n            &#39; Always call the base to see if it can perform the conversion.\n            Return MyBase.CanConvertTo(context, destinationType)\n         End Function\n\n         &#39; This code performs the actual conversion from a Triangle to an InstanceDescriptor.\n         Public Overloads Overrides Function ConvertTo(ByVal context As ITypeDescriptorContext, ByVal culture As CultureInfo, ByVal value As Object, ByVal destinationType As Type) As Object\n            If destinationType Is GetType(InstanceDescriptor) Then\n               Dim ci As ConstructorInfo = GetType(Triangle).GetConstructor(New Type() {GetType(Point), GetType(Point), GetType(Point)})\n               Dim t As Triangle = CType(value, Triangle)\n               Return New InstanceDescriptor(ci, New Object() {t.Point1, t.Point2, t.Point3})\n            End If\n\n            &#39; Always call base, even if you can&#39;t convert.\n            Return MyBase.ConvertTo(context, culture, value, destinationType)\n         End Function \n      End Class \n   End Class \n\n   Public Class TestComponent\n      Inherits System.ComponentModel.Component\n      Private myTriangleProp As Triangle\n\n      Public Sub New()\n         myTriangleProp = New Triangle(New Point(5, 5), _\n                                    New Point(10, 10), New Point(1, 8))\n      End Sub\n\n      Public Property MyTriangle() As Triangle\n         Get\n            Return myTriangleProp\n         End Get\n         Set(ByVal Value As Triangle)\n            myTriangleProp = Value\n         End Set\n      End Property\n\n   End Class\n\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"InstanceDescriptorSample#1\">namespace Microsoft.Samples.InstanceDescriptorSample\n{\n    using System;\n    using System.ComponentModel;\n    using System.ComponentModel.Design.Serialization;\n    using System.Drawing;\n    using System.Globalization;\n    using System.Reflection;\n\n    //  This sample shows how to support code generation for a custom type \n    //  of object using a type converter and InstanceDescriptor objects.\n\n    //  To use this code, copy it to a file and add the file to a project. \n    //  Then add a component to the project and declare a Triangle field and \n    //  a public property with accessors for the Triangle field on the component.\n\n    //  The Triangle property will be persisted using code generation.\n\n    [TypeConverter(typeof(Triangle.TriangleConverter))]\n    public class Triangle\n    {\n        // Triangle members.\n        Point P1;\n        Point P2;\n        Point P3;\n\n        public Point Point1 {\n            get {\n                return P1;\n            }\n            set {\n                P1 = value;\n            }\n        }\n        public Point Point2 {\n            get \n            {\n                return P2;\n            }\n            set \n            {\n                P2 = value;\n            }\n        }\n        public Point Point3 {\n            get \n            {\n                return P3;\n            }\n            set \n            {\n                P3 = value;\n            }\n        }\n\n        public Triangle(Point point1,Point point2,Point point3) {\n            P1 = point1;\n            P2 = point2;\n            P3 = point3;\n        }\n\n        // A TypeConverter for the Triangle object.  Note that you can make it internal,\n        //  private, or any scope you want and the designers will still be able to use\n        //  it through the TypeDescriptor object.  This type converter provides the\n        //  capability to convert to an InstanceDescriptor.  This object can be used by \n\t//  the .NET Framework to generate source code that creates an instance of a \n\t//  Triangle object.\n        internal class TriangleConverter : TypeConverter\n        {\n            // This method overrides CanConvertTo from TypeConverter. This is called when someone\n            //  wants to convert an instance of Triangle to another type.  Here,\n            //  only conversion to an InstanceDescriptor is supported.\n            public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)\n            {\n                if (destinationType == typeof(InstanceDescriptor))\n                {\n                    return true;\n                }\n\n                // Always call the base to see if it can perform the conversion.\n                return base.CanConvertTo(context, destinationType);\n            }\n\n            // This code performs the actual conversion from a Triangle to an InstanceDescriptor.\n            public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)\n            {\n                if (destinationType == typeof(InstanceDescriptor))\n                {\n                    ConstructorInfo ci = typeof(Triangle).GetConstructor(new Type[]{typeof(Point),\n                                                    typeof(Point),typeof(Point)});\n                    Triangle t = (Triangle) value;\n                    return new InstanceDescriptor(ci,new object[]{t.Point1,t.Point2,t.Point3});\n                }\n\n                // Always call base, even if you can&#39;t convert.\n                return base.ConvertTo(context, culture, value, destinationType);\n            }\n        }\n    }\n\n    public class TestComponent : System.ComponentModel.Component \n    {\n        Triangle myTriangle;\n\n        public TestComponent() {\n            myTriangle = new Triangle(\n                new Point(5,5),\n                new Point(10,10),\n                new Point(1,8)\n                );\n        }\n\n        public Triangle MyTriangle {\n            get {\n                return myTriangle;\n            }\n            set {\n                myTriangle = value;\n            }\n        }\n    }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The ITypeDescriptorContext interface provides contextual information about a component. ITypeDescriptorContext is typically used at design time to provide information about a design-time container. This interface is commonly used in type conversion. For details, see <a class=\"xref\" href=\"system.componentmodel.typeconverter\" data-linktype=\"relative-path\">TypeConverter</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Do not rely on the presence of this interface when you design a type converter. If a particular interface, property, or service is necessary but not available, the type converter should return <code>null</code> rather than throw an exception. This interface&#39;s properties can return <code>null</code> at any time, and you should plan for this.</p>\n</div>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_ITypeDescriptorContext_Container_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_ITypeDescriptorContext_Container\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Container</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the container representing this <a class=\"xref\" href=\"system.componentmodel.typedescriptor\" data-linktype=\"relative-path\">TypeDescriptor</a> request.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.ComponentModel.IContainer Container { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.icontainer\" data-linktype=\"relative-path\">IContainer</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.componentmodel.icontainer\" data-linktype=\"relative-path\">IContainer</a> with the set of objects for this <a class=\"xref\" href=\"system.componentmodel.typedescriptor\" data-linktype=\"relative-path\">TypeDescriptor</a>; otherwise, <code>null</code> if there is no container or if the <a class=\"xref\" href=\"system.componentmodel.typedescriptor\" data-linktype=\"relative-path\">TypeDescriptor</a> does not use outside objects.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Container property gets the logical container of the component associated with the type descriptor.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_ITypeDescriptorContext_Instance_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_ITypeDescriptorContext_Instance\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Instance</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the object that is connected with this type descriptor request.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public object Instance { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object that invokes the method on the <a class=\"xref\" href=\"system.componentmodel.typedescriptor\" data-linktype=\"relative-path\">TypeDescriptor</a>; otherwise, <code>null</code> if there is no object responsible for the call.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Instance property gets the object that is invoking the <a class=\"xref\" href=\"system.componentmodel.itypedescriptorcontext\" data-linktype=\"relative-path\">ITypeDescriptorContext</a> interface. For example, if a type converter is given a <a class=\"xref\" href=\"system.drawing.color\" data-linktype=\"relative-path\">Color</a> to convert, Instance returns the actual instance of the control that is using the <a class=\"xref\" href=\"system.drawing.color\" data-linktype=\"relative-path\">Color</a>. You can subsequently query the control for further information about its services and its <a class=\"xref\" href=\"system.componentmodel.itypedescriptorcontext#System_ComponentModel_ITypeDescriptorContext_Container_\" data-linktype=\"relative-path\">Container</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_ITypeDescriptorContext_PropertyDescriptor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_ITypeDescriptorContext_PropertyDescriptor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PropertyDescriptor</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the <a class=\"xref\" href=\"system.componentmodel.propertydescriptor\" data-linktype=\"relative-path\">PropertyDescriptor</a> that is associated with the given context item.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.ComponentModel.PropertyDescriptor PropertyDescriptor { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.propertydescriptor\" data-linktype=\"relative-path\">PropertyDescriptor</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.componentmodel.propertydescriptor\" data-linktype=\"relative-path\">PropertyDescriptor</a> that describes the given context item; otherwise, <code>null</code> if there is no <a class=\"xref\" href=\"system.componentmodel.propertydescriptor\" data-linktype=\"relative-path\">PropertyDescriptor</a> responsible for the call.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_ITypeDescriptorContext_OnComponentChanged_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_ITypeDescriptorContext_OnComponentChanged\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnComponentChanged()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Raises the <a class=\"xref\" href=\"system.componentmodel.design.icomponentchangeservice#System_ComponentModel_Design_IComponentChangeService_ComponentChanged\" data-linktype=\"relative-path\">ComponentChanged</a> event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void OnComponentChanged ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use the OnComponentChanged method to send notification that an instance of an object has changed.  </p>\n<p> Raising an event invokes the event handler through a delegate. For more information, see <a href=\"http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2\" data-linktype=\"external\">NIB: Raising an Event</a>.  </p>\n<p> The OnComponentChanged method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_ITypeDescriptorContext_OnComponentChanging_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_ITypeDescriptorContext_OnComponentChanging\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnComponentChanging()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Raises the <a class=\"xref\" href=\"system.componentmodel.design.icomponentchangeservice#System_ComponentModel_Design_IComponentChangeService_ComponentChanging\" data-linktype=\"relative-path\">ComponentChanging</a> event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool OnComponentChanging ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this object can be changed; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use the OnComponentChanging method to send notification that an instance of an object is about to be changed. This method also returns a value indicating whether this object can be changed. When <code>false</code> is returned, do not change the object.  </p>\n<p> Raising an event invokes the event handler through a delegate. For more information, see <a href=\"http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2\" data-linktype=\"external\">NIB: Raising an Event</a>.  </p>\n<p> The OnComponentChanging method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.ITypeDescriptorContext.yml\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.ITypeDescriptorContext\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.ITypeDescriptorContext.Container\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.ITypeDescriptorContext.Instance\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.ITypeDescriptorContext.OnComponentChanged\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.ITypeDescriptorContext.OnComponentChanging\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"4b6dde39-6dac-fbca-796c-21a367613d39\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides contextual information about a component, such as its container and property descriptor.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.componentmodel/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.ComponentModel.ITypeDescriptorContext\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.ITypeDescriptorContext.yml","open_to_public_contributors":false,"api_name":["System.ComponentModel.ITypeDescriptorContext","System.ComponentModel.ITypeDescriptorContext.Container","System.ComponentModel.ITypeDescriptorContext.Instance","System.ComponentModel.ITypeDescriptorContext.OnComponentChanged","System.ComponentModel.ITypeDescriptorContext.OnComponentChanging","System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.ComponentModel.ITypeDescriptorContext","System::ComponentModel::ITypeDescriptorContext","System.ComponentModel.ITypeDescriptorContext.Container","System::ComponentModel::ITypeDescriptorContext::Container","System.ComponentModel.ITypeDescriptorContext.Instance","System::ComponentModel::ITypeDescriptorContext::Instance","System.ComponentModel.ITypeDescriptorContext.OnComponentChanged","System::ComponentModel::ITypeDescriptorContext::OnComponentChanged","System.ComponentModel.ITypeDescriptorContext.OnComponentChanging","System::ComponentModel::ITypeDescriptorContext::OnComponentChanging","System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor","System::ComponentModel::ITypeDescriptorContext::PropertyDescriptor"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"4b6dde39-6dac-fbca-796c-21a367613d39","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.ComponentModel/ITypeDescriptorContext.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ITypeDescriptorContext interface | Microsoft Docs","_op_ogTitle":"ITypeDescriptorContext interface","description":"Provides contextual information about a component, such as its container and property descriptor.\n","toc_asset_id":"api/_splitted/System.ComponentModel/toc.json","toc_rel":"_splitted/System.ComponentModel/toc.json","source_url":"","ms.assetid":"System.ComponentModel.ITypeDescriptorContext","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.itypedescriptorcontext","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.itypedescriptorcontext","fileRelativePath":"api/System.ComponentModel.ITypeDescriptorContext.html"},"themesRelativePathToOutputRoot":"_themes/"}