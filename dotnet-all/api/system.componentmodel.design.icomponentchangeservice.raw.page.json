{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">IComponentChangeService</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides an interface to add and remove the event handlers for events that add, change, remove or rename components, and provides methods to raise a <a class=\"xref\" href=\"system.componentmodel.design.icomponentchangeservice#System_ComponentModel_Design_IComponentChangeService_ComponentChanged\" data-linktype=\"relative-path\">ComponentChanged</a> or <a class=\"xref\" href=\"system.componentmodel.design.icomponentchangeservice#System_ComponentModel_Design_IComponentChangeService_ComponentChanging\" data-linktype=\"relative-path\">ComponentChanging</a> event.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[ECMA2Yaml.Models.ECMAAttribute]\npublic interface IComponentChangeService</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>This following example demonstrates how to use the IComponentChangeService interface to receive notifications about the addition of, removal of, and changes to components in design mode.  </p>\n<pre><code class=\"lang-vb\" name=\"IComponentChangeServiceSample2#1\">Imports System\nImports System.Data\nImports System.Drawing\nImports System.Collections\nImports System.ComponentModel\nImports System.ComponentModel.Design\nImports System.Windows.Forms\n\n&#39;  This sample illustrates how to use the IComponentChangeService interface \n&#39;    to handle component change events.  The ComponentClass control attaches \n&#39;    event handlers when it is sited in a document, and displays a message \n&#39;    when notification that a component has been added, removed, or changed\n&#39;    is received from the IComponentChangeService.\n\n&#39;    To run this sample, add the ComponentClass control to a Form and\n&#39;    add, remove, or change components to see the behavior of the\n&#39;    component change event handlers. \n\nNamespace IComponentChangeServiceExample\n    _\n   Public Class ComponentClass\n      Inherits System.Windows.Forms.UserControl\n      Private components As System.ComponentModel.Container = Nothing\n      Private listBox1 As System.Windows.Forms.ListBox\n      Private m_changeService As IComponentChangeService    \n      \n      Public Sub New()\n         InitializeComponent()\n        End Sub\n\n        Private Sub InitializeComponent()\n            Me.listBox1 = New System.Windows.Forms.ListBox()\n            Me.SuspendLayout()\n\n            &#39; listBox1.\n            Me.listBox1.Location = New System.Drawing.Point(24, 16)\n            Me.listBox1.Name = &quot;listBox1&quot;\n            Me.listBox1.Size = New System.Drawing.Size(576, 277)\n            Me.listBox1.TabIndex = 0\n\n            &#39; ComponentClass.\n            Me.Controls.AddRange(New System.Windows.Forms.Control() {Me.listBox1})\n            Me.Name = &quot;ComponentClass&quot;\n            Me.Size = New System.Drawing.Size(624, 320)\n\n            Me.ResumeLayout(False)\n        End Sub\n\n        &#39; This override allows the control to register event handlers for IComponentChangeService events\n        &#39; at the time the control is sited, which happens only in design mode.\n        Public Overrides Property Site() As ISite\n            Get\n                Return MyBase.Site\n            End Get\n            Set(ByVal Value As ISite)\n                &#39; Clear any component change event handlers.\n                ClearChangeNotifications()\n\n                &#39; Set the new Site value.\n                MyBase.Site = Value\n\n                m_changeService = CType(GetService(GetType(IComponentChangeService)), IComponentChangeService)\n\n                &#39; Register event handlers for component change events.\n                RegisterChangeNotifications()\n            End Set\n        End Property\n\n        Private Sub ClearChangeNotifications()\n            &#39; The m_changeService value is null when not in design mode, \n            &#39; as the IComponentChangeService is only available at design time.\t\n            m_changeService = CType(GetService(GetType(IComponentChangeService)), IComponentChangeService)\n\n            &#39; Clear our the component change events to prepare for re-siting.\t\t\t\t\n            If (m_changeService IsNot Nothing) Then\n                RemoveHandler m_changeService.ComponentChanged, AddressOf OnComponentChanged\n                RemoveHandler m_changeService.ComponentChanging, AddressOf OnComponentChanging\n                RemoveHandler m_changeService.ComponentAdded, AddressOf OnComponentAdded\n                RemoveHandler m_changeService.ComponentAdding, AddressOf OnComponentAdding\n                RemoveHandler m_changeService.ComponentRemoved, AddressOf OnComponentRemoved\n                RemoveHandler m_changeService.ComponentRemoving, AddressOf OnComponentRemoving\n                RemoveHandler m_changeService.ComponentRename, AddressOf OnComponentRename\n            End If\n        End Sub\n\n        Private Sub RegisterChangeNotifications()\n            &#39; Register the event handlers for the IComponentChangeService events\n            If (m_changeService IsNot Nothing) Then\n                AddHandler m_changeService.ComponentChanged, AddressOf OnComponentChanged\n                AddHandler m_changeService.ComponentChanging, AddressOf OnComponentChanging\n                AddHandler m_changeService.ComponentAdded, AddressOf OnComponentAdded\n                AddHandler m_changeService.ComponentAdding, AddressOf OnComponentAdding\n                AddHandler m_changeService.ComponentRemoved, AddressOf OnComponentRemoved\n                AddHandler m_changeService.ComponentRemoving, AddressOf OnComponentRemoving\n                AddHandler m_changeService.ComponentRename, AddressOf OnComponentRename\n            End If\n        End Sub\n\n        &#39; This method handles the OnComponentChanged event to display a notification. \n        Private Sub OnComponentChanged(ByVal sender As Object, ByVal ce As ComponentChangedEventArgs)\n            If (ce.Component IsNot Nothing) And (CType(ce.Component, IComponent).Site IsNot Nothing) And (ce.Member IsNot Nothing) Then\n                OnUserChange((&quot;The &quot; + ce.Member.Name + &quot; member of the &quot; + CType(ce.Component, IComponent).Site.Name + &quot; component has been changed.&quot;))\n            End If\n        End Sub\n\n        &#39; This method handles the OnComponentChanging event to display a notification. \n        Private Sub OnComponentChanging(ByVal sender As Object, ByVal ce As ComponentChangingEventArgs)\n            If (ce.Component IsNot Nothing) And (CType(ce.Component, IComponent).Site IsNot Nothing) And (ce.Member IsNot Nothing) Then\n                OnUserChange((&quot;The &quot; + ce.Member.Name + &quot; member of the &quot; + CType(ce.Component, IComponent).Site.Name + &quot; component is being changed.&quot;))\n            End If\n        End Sub\n\n        &#39; This method handles the OnComponentAdded event to display a notification. \n        Private Sub OnComponentAdded(ByVal sender As Object, ByVal ce As ComponentEventArgs)\n            OnUserChange((&quot;A component, &quot; + ce.Component.Site.Name + &quot;, has been added.&quot;))\n        End Sub\n\n        &#39; This method handles the OnComponentAdding event to display a notification. \n        Private Sub OnComponentAdding(ByVal sender As Object, ByVal ce As ComponentEventArgs)\n            OnUserChange((&quot;A component of type &quot; + (CType(ce.Component, Component)).GetType().FullName + &quot; is being added.&quot;))\n        End Sub\n\n        &#39; This method handles the OnComponentRemoved event to display a notification. \n        Private Sub OnComponentRemoved(ByVal sender As Object, ByVal ce As ComponentEventArgs)\n            OnUserChange((&quot;A component, &quot; + ce.Component.Site.Name + &quot;, has been removed.&quot;))\n        End Sub\n\n        &#39; This method handles the OnComponentRemoving event to display a notification. \n        Private Sub OnComponentRemoving(ByVal sender As Object, ByVal ce As ComponentEventArgs)\n            OnUserChange((&quot;A component, &quot; + ce.Component.Site.Name + &quot;, is being removed.&quot;))\n        End Sub\n\n        &#39; This method handles the OnComponentRename event to display a notification. \n        Private Sub OnComponentRename(ByVal sender As Object, ByVal ce As ComponentRenameEventArgs)\n            OnUserChange((&quot;A component, &quot; + ce.OldName + &quot;, was renamed to &quot; + ce.NewName + &quot;.&quot;))\n        End Sub\n\n        &#39; This method adds a specified notification message to the control&#39;s listbox.\n        Private Sub OnUserChange(ByVal [text] As String)\n            listBox1.Items.Add([text])\n        End Sub\n\n        &#39; Clean up any resources being used.\n        Protected Overloads Sub Dispose(ByVal disposing As Boolean)\n            If disposing Then\n                ClearChangeNotifications()\n\n                If (components IsNot Nothing) Then\n                    components.Dispose()\n                End If\n            End If\n            MyBase.Dispose(disposing)\n        End Sub\n\n    End Class\nEnd Namespace\n</code></pre><pre><code class=\"lang-cpp\" name=\"IComponentChangeServiceSample2#1\">#using &lt;system.dll&gt;\n#using &lt;system.windows.forms.dll&gt;\n#using &lt;system.drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::Drawing;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::ComponentModel::Design;\nusing namespace System::Windows::Forms;\n\n/*  This sample illustrates how to use the IComponentChangeService interface\n    to handle component change events.  The ComponentClass control attaches\n    event handlers when it is sited in a document, and displays a message\n    when notification that a component has been added, removed, or changed\n    is received from the IComponentChangeService.\n\n    To run this sample, add the ComponentClass control to a Form and\n    add, remove, or change components to see the behavior of the\n    component change event handlers. */\n\npublic ref class ComponentClass: public UserControl\n{\nprivate:\n   System::ComponentModel::Container^ components;\n   ListBox^ listBox1;\n   IComponentChangeService^ m_changeService;\n   void InitializeComponent()\n   {\n      this-&gt;listBox1 = gcnew ListBox;\n      this-&gt;SuspendLayout();\n\n      // listBox1.\n      this-&gt;listBox1-&gt;Location = System::Drawing::Point( 24, 16 );\n      this-&gt;listBox1-&gt;Name = &quot;listBox1&quot;;\n      this-&gt;listBox1-&gt;Size = System::Drawing::Size( 576, 277 );\n      this-&gt;listBox1-&gt;TabIndex = 0;\n\n      // ComponentClass.\n      array&lt;Control^&gt;^myArray = {listBox1};\n      this-&gt;Controls-&gt;AddRange( myArray );\n      this-&gt;Name = &quot;ComponentClass&quot;;\n      this-&gt;Size = System::Drawing::Size( 624, 320 );\n      this-&gt;ResumeLayout( false );\n   }\n\n   void ClearChangeNotifications()\n   {\n      // The m_changeService value is 0 when not in design mode,\n      // as the IComponentChangeService is only available at design time.\n      m_changeService = dynamic_cast&lt;IComponentChangeService^&gt;(GetService( IComponentChangeService::typeid ));\n\n      // Clear our the component change events to prepare for re-siting.\n      if ( m_changeService != nullptr )\n      {\n         m_changeService-&gt;ComponentChanged -= gcnew ComponentChangedEventHandler( this, &amp;ComponentClass::OnComponentChanged );\n         m_changeService-&gt;ComponentChanging -= gcnew ComponentChangingEventHandler( this, &amp;ComponentClass::OnComponentChanging );\n         m_changeService-&gt;ComponentAdded -= gcnew ComponentEventHandler( this, &amp;ComponentClass::OnComponentAdded );\n         m_changeService-&gt;ComponentAdding -= gcnew ComponentEventHandler( this, &amp;ComponentClass::OnComponentAdding );\n         m_changeService-&gt;ComponentRemoved -= gcnew ComponentEventHandler( this, &amp;ComponentClass::OnComponentRemoved );\n         m_changeService-&gt;ComponentRemoving -= gcnew ComponentEventHandler( this, &amp;ComponentClass::OnComponentRemoving );\n         m_changeService-&gt;ComponentRename -= gcnew ComponentRenameEventHandler( this, &amp;ComponentClass::OnComponentRename );\n      }\n   }\n\n   void RegisterChangeNotifications()\n   {\n      // Register the event handlers for the IComponentChangeService events\n      if ( m_changeService != nullptr )\n      {\n         m_changeService-&gt;ComponentChanged += gcnew ComponentChangedEventHandler( this, &amp;ComponentClass::OnComponentChanged );\n         m_changeService-&gt;ComponentChanging += gcnew ComponentChangingEventHandler( this, &amp;ComponentClass::OnComponentChanging );\n         m_changeService-&gt;ComponentAdded += gcnew ComponentEventHandler( this, &amp;ComponentClass::OnComponentAdded );\n         m_changeService-&gt;ComponentAdding += gcnew ComponentEventHandler( this, &amp;ComponentClass::OnComponentAdding );\n         m_changeService-&gt;ComponentRemoved += gcnew ComponentEventHandler( this, &amp;ComponentClass::OnComponentRemoved );\n         m_changeService-&gt;ComponentRemoving += gcnew ComponentEventHandler( this, &amp;ComponentClass::OnComponentRemoving );\n         m_changeService-&gt;ComponentRename += gcnew ComponentRenameEventHandler( this, &amp;ComponentClass::OnComponentRename );\n      }\n   }\n\n   /* This method handles the OnComponentChanged event to display a notification. */\n   void OnComponentChanged( Object^ /*sender*/, ComponentChangedEventArgs^ ce )\n   {\n      if ( ce-&gt;Component != nullptr &amp;&amp; static_cast&lt;IComponent^&gt;(ce-&gt;Component)-&gt;Site != nullptr &amp;&amp; ce-&gt;Member != nullptr )\n            OnUserChange( &quot;The &quot; + ce-&gt;Member-&gt;Name + &quot; member of the &quot; + static_cast&lt;IComponent^&gt;(ce-&gt;Component)-&gt;Site-&gt;Name + &quot; component has been changed.&quot; );\n   }\n\n\n   /* This method handles the OnComponentChanging event to display a notification. */\n   void OnComponentChanging( Object^ /*sender*/, ComponentChangingEventArgs^ ce )\n   {\n      if ( ce-&gt;Component != nullptr &amp;&amp; static_cast&lt;IComponent^&gt;(ce-&gt;Component)-&gt;Site != nullptr &amp;&amp; ce-&gt;Member != nullptr )\n            OnUserChange( &quot;The &quot; + ce-&gt;Member-&gt;Name + &quot; member of the &quot; + static_cast&lt;IComponent^&gt;(ce-&gt;Component)-&gt;Site-&gt;Name + &quot; component is being changed.&quot; );\n   }\n\n   /* This method handles the OnComponentAdded event to display a notification. */\n   void OnComponentAdded( Object^ /*sender*/, ComponentEventArgs^ ce )\n   {\n      OnUserChange( &quot;A component, &quot; + ce-&gt;Component-&gt;Site-&gt;Name + &quot;, has been added.&quot; );\n   }\n\n   /* This method handles the OnComponentAdding event to display a notification. */\n   void OnComponentAdding( Object^ /*sender*/, ComponentEventArgs^ ce )\n   {\n      OnUserChange( &quot;A component of type &quot; + ce-&gt;Component-&gt;GetType()-&gt;FullName + &quot; is being added.&quot; );\n   }\n\n   /* This method handles the OnComponentRemoved event to display a notification. */\n   void OnComponentRemoved( Object^ /*sender*/, ComponentEventArgs^ ce )\n   {\n      OnUserChange( &quot;A component, &quot; + ce-&gt;Component-&gt;Site-&gt;Name + &quot;, has been removed.&quot; );\n   }\n\n   /* This method handles the OnComponentRemoving event to display a notification. */\n   void OnComponentRemoving( Object^ /*sender*/, ComponentEventArgs^ ce )\n   {\n      OnUserChange( &quot;A component, &quot; + ce-&gt;Component-&gt;Site-&gt;Name + &quot;, is being removed.&quot; );\n   }\n\n   /* This method handles the OnComponentRename event to display a notification. */\n   void OnComponentRename( Object^ /*sender*/, ComponentRenameEventArgs^ ce )\n   {\n      OnUserChange( &quot;A component, &quot; + ce-&gt;OldName + &quot;, was renamed to &quot; + ce-&gt;NewName + &quot;.&quot; );\n   }\n\n   // This method adds a specified notification message to the control&#39;s listbox.\n   void OnUserChange( String^ text )\n   {\n      listBox1-&gt;Items-&gt;Add( text );\n   }\n\npublic:\n   ComponentClass()\n   {\n      InitializeComponent();\n   }\n\n   property ISite^ Site \n   {\n      // This override allows the control to register event handlers for IComponentChangeService events\n      // at the time the control is sited, which happens only in design mode.\n      virtual ISite^ get() override\n      {\n         return Site;\n      }\n\n      virtual void set( ISite^ value ) override\n      {\n         // Clear any component change event handlers.\n         ClearChangeNotifications();\n\n         // Set the new Site value.\n         Site = value;\n         m_changeService = static_cast&lt;IComponentChangeService^&gt;(GetService( IComponentChangeService::typeid ));\n\n         // Register event handlers for component change events.\n         RegisterChangeNotifications();\n      }\n   }\n\n   // Clean up any resources being used.\npublic:\n   ~ComponentClass()\n   {\n      ClearChangeNotifications();\n      if ( components != nullptr )\n      {\n         delete components;\n      }\n   }\n};\n</code></pre><pre><code class=\"lang-cs\" name=\"IComponentChangeServiceSample2#1\">using System;\nusing System.Data;\nusing System.Drawing;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.ComponentModel.Design;\nusing System.Windows.Forms;\n\n/*  This sample illustrates how to use the IComponentChangeService interface \n    to handle component change events.  The ComponentClass control attaches \n    event handlers when it is sited in a document, and displays a message \n    when notification that a component has been added, removed, or changed\n    is received from the IComponentChangeService.\n\n    To run this sample, add the ComponentClass control to a Form and\n    add, remove, or change components to see the behavior of the\n    component change event handlers. */\n\nnamespace IComponentChangeServiceExample \n{\n    public class ComponentClass : System.Windows.Forms.UserControl \n    {\n        private System.ComponentModel.Container components = null;\n\tprivate System.Windows.Forms.ListBox listBox1;\n\tprivate IComponentChangeService m_changeService;\n \n\tpublic ComponentClass() \n\t{\n\t    InitializeComponent();\n\t}\n\n\tprivate void InitializeComponent() \n\t{\n  \t    this.listBox1 = new System.Windows.Forms.ListBox();\n\t    this.SuspendLayout();\n\n \t    // listBox1.\n\t    this.listBox1.Location = new System.Drawing.Point(24, 16);\n\t    this.listBox1.Name = &quot;listBox1&quot;;\n\t    this.listBox1.Size = new System.Drawing.Size(576, 277);\n\t    this.listBox1.TabIndex = 0;\n\t\t   \n\t    // ComponentClass.\n\t    this.Controls.AddRange(new System.Windows.Forms.Control[] {this.listBox1});\n\t    this.Name = &quot;ComponentClass&quot;;\n\t    this.Size = new System.Drawing.Size(624, 320);\n\n            this.ResumeLayout(false);\n\t}\n\n\t// This override allows the control to register event handlers for IComponentChangeService events\n\t// at the time the control is sited, which happens only in design mode.\n\tpublic override ISite Site \n\t{\n\t    get \n\t    {\n\t\treturn base.Site;\n\t    }\n\t    set \n\t    {\t\t\n\t\t// Clear any component change event handlers.\n\t\tClearChangeNotifications();\t\t\n\t\t\t\t\n\t\t// Set the new Site value.\n\t\tbase.Site = value;\n\n\t\tm_changeService = (IComponentChangeService)GetService(typeof(IComponentChangeService));\n\n\t\t// Register event handlers for component change events.\n\t\tRegisterChangeNotifications();\t\t\t\n\t    }\n\t}\n\n\tprivate void ClearChangeNotifications()\n\t{\n\t    // The m_changeService value is null when not in design mode, \n\t    // as the IComponentChangeService is only available at design time.\t\n\t    m_changeService = (IComponentChangeService)GetService(typeof(IComponentChangeService));\n\n \t    // Clear our the component change events to prepare for re-siting.\t\t\t\t\n\t    if (m_changeService != null) \n\t    {\n\t \tm_changeService.ComponentChanged -= new ComponentChangedEventHandler(OnComponentChanged);\n\t\tm_changeService.ComponentChanging -= new ComponentChangingEventHandler(OnComponentChanging);\n\t\tm_changeService.ComponentAdded -= new ComponentEventHandler(OnComponentAdded);\n\t\tm_changeService.ComponentAdding -= new ComponentEventHandler(OnComponentAdding);\n\t\tm_changeService.ComponentRemoved -= new ComponentEventHandler(OnComponentRemoved);\n\t\tm_changeService.ComponentRemoving -= new ComponentEventHandler(OnComponentRemoving);\n\t\tm_changeService.ComponentRename -= new ComponentRenameEventHandler(OnComponentRename);\n\t    }\n\t}\n\n\tprivate void RegisterChangeNotifications()\n\t{\n\t    // Register the event handlers for the IComponentChangeService events\n\t    if (m_changeService != null) \n\t    {\n\t\tm_changeService.ComponentChanged += new ComponentChangedEventHandler(OnComponentChanged);\n\t\tm_changeService.ComponentChanging += new ComponentChangingEventHandler(OnComponentChanging);\n\t\tm_changeService.ComponentAdded += new ComponentEventHandler(OnComponentAdded);\n\t\tm_changeService.ComponentAdding += new ComponentEventHandler(OnComponentAdding);\n\t\tm_changeService.ComponentRemoved += new ComponentEventHandler(OnComponentRemoved);\n\t\tm_changeService.ComponentRemoving += new ComponentEventHandler(OnComponentRemoving);\n\t\tm_changeService.ComponentRename += new ComponentRenameEventHandler(OnComponentRename);\n\t    }\n\t}\n\n\t/* This method handles the OnComponentChanged event to display a notification. */\n\tprivate void OnComponentChanged(object sender, ComponentChangedEventArgs ce) \n\t{\n \t    if( ce.Component != null &amp;&amp; ((IComponent)ce.Component).Site != null &amp;&amp; ce.Member != null ) \n\t    OnUserChange(&quot;The &quot; + ce.Member.Name + &quot; member of the &quot; + ((IComponent)ce.Component).Site.Name + &quot; component has been changed.&quot;);\n\t}\n\n\t/* This method handles the OnComponentChanging event to display a notification. */\n\tprivate void OnComponentChanging(object sender, ComponentChangingEventArgs ce) \n\t{\n\t    if( ce.Component != null &amp;&amp; ((IComponent)ce.Component).Site != null &amp;&amp; ce.Member != null ) \n\t    OnUserChange(&quot;The &quot; + ce.Member.Name + &quot; member of the &quot; + ((IComponent)ce.Component).Site.Name + &quot; component is being changed.&quot;);\n\t}\n\n\t/* This method handles the OnComponentAdded event to display a notification. */\n\tprivate void OnComponentAdded(object sender, ComponentEventArgs ce) \n\t{\t\t\t\n\t    OnUserChange(&quot;A component, &quot; + ce.Component.Site.Name + &quot;, has been added.&quot;);\n\t}\n\n\t/* This method handles the OnComponentAdding event to display a notification. */\t\t\n\tprivate void OnComponentAdding(object sender, ComponentEventArgs ce) \n\t{\t\t\t\n\t    OnUserChange(&quot;A component of type &quot; + ce.Component.GetType().FullName + &quot; is being added.&quot;);\n\t}\n\n\t/* This method handles the OnComponentRemoved event to display a notification. */\n\tprivate void OnComponentRemoved(object sender, ComponentEventArgs ce) \n\t{\n\t    OnUserChange(&quot;A component, &quot; + ce.Component.Site.Name + &quot;, has been removed.&quot;);\n\t}\n\n\t/* This method handles the OnComponentRemoving event to display a notification. */\n\tprivate void OnComponentRemoving(object sender, ComponentEventArgs ce) \n\t{\n\t    OnUserChange(&quot;A component, &quot; + ce.Component.Site.Name + &quot;, is being removed.&quot;);\n\t}\n\n\t/* This method handles the OnComponentRename event to display a notification. */\n\tprivate void OnComponentRename(object sender, ComponentRenameEventArgs ce) \n\t{\n\t    OnUserChange(&quot;A component, &quot; + ce.OldName + &quot;, was renamed to &quot; + ce.NewName +&quot;.&quot;);\n\t}\n\n\t// This method adds a specified notification message to the control&#39;s listbox.\n\tprivate void OnUserChange(string text) \n\t{\n\t    listBox1.Items.Add(text);\n\t}\n\n\t// Clean up any resources being used.\n\tprotected override void Dispose( bool disposing ) \n\t{\n\t    if( disposing ) \n\t    {\n\t\tClearChangeNotifications();\n\t        \n\t\tif(components != null) \n\t\t{\n\t\t    components.Dispose();\n\t\t}\n\t    }\n\t    base.Dispose( disposing );\n\t}\n    }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>IComponentChangeService provides an interface that can be used to indicate the methods that handle the following events:  </p>\n<ul>\n<li><p><a class=\"xref\" href=\"system.componentmodel.design.icomponentchangeservice#System_ComponentModel_Design_IComponentChangeService_ComponentAdded\" data-linktype=\"relative-path\">ComponentAdded</a>, raised when a component is added.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.componentmodel.design.icomponentchangeservice#System_ComponentModel_Design_IComponentChangeService_ComponentAdding\" data-linktype=\"relative-path\">ComponentAdding</a>, raised when a component is about to be added.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.componentmodel.design.icomponentchangeservice#System_ComponentModel_Design_IComponentChangeService_ComponentChanged\" data-linktype=\"relative-path\">ComponentChanged</a>, raised when a component is changed.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.componentmodel.design.icomponentchangeservice#System_ComponentModel_Design_IComponentChangeService_ComponentChanging\" data-linktype=\"relative-path\">ComponentChanging</a>, raised when a component is about to be changed.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.componentmodel.design.icomponentchangeservice#System_ComponentModel_Design_IComponentChangeService_ComponentRemoved\" data-linktype=\"relative-path\">ComponentRemoved</a>, raised when a component is removed.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.componentmodel.design.icomponentchangeservice#System_ComponentModel_Design_IComponentChangeService_ComponentRemoving\" data-linktype=\"relative-path\">ComponentRemoving</a>, raised when a component is about to be removed.  </p>\n</li>\n<li><p><a class=\"xref\" href=\"system.componentmodel.design.icomponentchangeservice#System_ComponentModel_Design_IComponentChangeService_ComponentRename\" data-linktype=\"relative-path\">ComponentRename</a>, raised when a component is renamed.  </p>\n</li>\n</ul>\n<p> Typically, the design environment raises these component add, change, remove, or rename events. Designers should call the methods of this interface when using <a class=\"xref\" href=\"system.componentmodel.design.designertransaction\" data-linktype=\"relative-path\">DesignerTransaction</a> objects to provide undo and redo functionality for design-time actions that affect components. More information is available in the documentation for <a class=\"xref\" href=\"system.componentmodel.design.designertransaction\" data-linktype=\"relative-path\">DesignerTransaction</a>. Generally, only the root designer handles these change notifications.  </p>\n<p> This service also provides methods that raise a component changed event or component changing event. A <a class=\"xref\" href=\"system.componentmodel.propertydescriptor\" data-linktype=\"relative-path\">PropertyDescriptor</a> or a component can indicate that a component has changed or is changing with the <a class=\"xref\" href=\"system.componentmodel.design.icomponentchangeservice#System_ComponentModel_Design_IComponentChangeService_OnComponentChanged_\" data-linktype=\"relative-path\">OnComponentChanged</a> and <a class=\"xref\" href=\"system.componentmodel.design.icomponentchangeservice#System_ComponentModel_Design_IComponentChangeService_OnComponentChanging_\" data-linktype=\"relative-path\">OnComponentChanging</a> methods, respectively.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_Design_IComponentChangeService_OnComponentChanged_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_IComponentChangeService_OnComponentChanged_System_Object_System_ComponentModel_MemberDescriptor_System_Object_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnComponentChanged(Object, MemberDescriptor, Object, Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Announces to the component change service that a particular component has changed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void OnComponentChanged (object component, System.ComponentModel.MemberDescriptor member, object oldValue, object newValue);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>component</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The component that has changed.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>member</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.memberdescriptor\" data-linktype=\"relative-path\">MemberDescriptor</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The member that has changed. This is <code>null</code> if this change is not related to a single member.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>oldValue</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The old value of the member. This is valid only if the member is not <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>newValue</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The new value of the member. This is valid only if the member is not <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method raises the <a class=\"xref\" href=\"system.componentmodel.design.icomponentchangeservice#System_ComponentModel_Design_IComponentChangeService_ComponentChanged\" data-linktype=\"relative-path\">ComponentChanged</a> event.  </p>\n<p> Most designers that ship with the Windows Software Development Kit (SDK), as well as the Visual Studio design-time environment, typically raise this event for you when a component in a project is changed, so most of the time you do not need to explicitly call this method. The appropriate <a class=\"xref\" href=\"system.componentmodel.design.icomponentchangeservice\" data-linktype=\"relative-path\">IComponentChangeService</a> events are automatically raised when a <a class=\"xref\" href=\"system.componentmodel.propertydescriptor\" data-linktype=\"relative-path\">PropertyDescriptor</a> is used to change a property value or components are added or removed from the <a class=\"xref\" href=\"system.componentmodel.design.idesignerhost\" data-linktype=\"relative-path\">IDesignerHost</a> container.  </p>\n<p> Before calling OnComponentChanged, first call <a class=\"xref\" href=\"system.componentmodel.design.icomponentchangeservice#System_ComponentModel_Design_IComponentChangeService_OnComponentChanging_\" data-linktype=\"relative-path\">OnComponentChanging</a> to indicate that a component is about to change, and make the change. Then call OnComponentChanged to raise the <a class=\"xref\" href=\"system.componentmodel.design.icomponentchangeservice#System_ComponentModel_Design_IComponentChangeService_ComponentChanged\" data-linktype=\"relative-path\">ComponentChanged</a> event.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_Design_IComponentChangeService_OnComponentChanging_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_IComponentChangeService_OnComponentChanging_System_Object_System_ComponentModel_MemberDescriptor_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OnComponentChanging(Object, MemberDescriptor)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Announces to the component change service that a particular component is changing.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void OnComponentChanging (object component, System.ComponentModel.MemberDescriptor member);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>component</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The component that is about to change.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>member</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.memberdescriptor\" data-linktype=\"relative-path\">MemberDescriptor</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The member that is changing. This is <code>null</code> if this change is not related to a single member.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method raises the <a class=\"xref\" href=\"system.componentmodel.design.icomponentchangeservice#System_ComponentModel_Design_IComponentChangeService_ComponentChanging\" data-linktype=\"relative-path\">ComponentChanging</a> event.  </p>\n<p> Most designers included with the Windows Software Development Kit (SDK), as well as the Visual Studio design-time environment, typically raise this event automatically; so most of the time, you do not need to explicitly call this method. The appropriate <a class=\"xref\" href=\"system.componentmodel.design.icomponentchangeservice\" data-linktype=\"relative-path\">IComponentChangeService</a> events are automatically raised when a <a class=\"xref\" href=\"system.componentmodel.propertydescriptor\" data-linktype=\"relative-path\">PropertyDescriptor</a> is used to change a property value or components are added or removed from the <a class=\"xref\" href=\"system.componentmodel.design.idesignerhost\" data-linktype=\"relative-path\">IDesignerHost</a> container.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Events\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_IComponentChangeService_ComponentAdded\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ComponentAdded</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when a component has been added.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.ComponentModel.Design.ComponentEventHandler ComponentAdded;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event occurs during load and when new components are created by the user, after the component has been sited.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_IComponentChangeService_ComponentAdding\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ComponentAdding</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when a component is in the process of being added.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.ComponentModel.Design.ComponentEventHandler ComponentAdding;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event occurs during load and when the user creates a new component. You can cancel the process of adding a component by throwing an exception here.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_IComponentChangeService_ComponentChanged\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ComponentChanged</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when a component has been changed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.ComponentModel.Design.ComponentChangedEventHandler ComponentChanged;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event occurs when any component on the form changes. This event will not occur during form load and unload, because changes are expected at this time.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> A <a class=\"xref\" href=\"system.componentmodel.design.designertransaction\" data-linktype=\"relative-path\">DesignerTransaction</a> can raise multiple ComponentChanged events. Some ComponentChanged event handlers can interfere with expected sequences of events, such as if your code alters the values of properties while a transaction is occurring. A ComponentChanged event handler can also impair performance if it draws after each change while a <a class=\"xref\" href=\"system.componentmodel.design.designertransaction\" data-linktype=\"relative-path\">DesignerTransaction</a> is in progress. In order to allow a <a class=\"xref\" href=\"system.componentmodel.design.designertransaction\" data-linktype=\"relative-path\">DesignerTransaction</a> in process to complete without interruption or interference by your ComponentChanged event handler, you can test the state of the <a class=\"xref\" href=\"system.componentmodel.design.idesignerhost#System_ComponentModel_Design_IDesignerHost_InTransaction_\" data-linktype=\"relative-path\">InTransaction</a> property, and defer handling the change events until the completion of the transaction by adding a <a class=\"xref\" href=\"system.componentmodel.design.designertransactioncloseeventhandler\" data-linktype=\"relative-path\">DesignerTransactionCloseEventHandler</a> which will raise your ComponentChanged event handler and remove itself upon completion of the transaction.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_IComponentChangeService_ComponentChanging\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ComponentChanging</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when a component is in the process of being changed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.ComponentModel.Design.ComponentChangingEventHandler ComponentChanging;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event occurs before the component is actually changed, and gives the designer a chance to abort the change or perform any pre-change processing. This event does not occur during form load and unload, because changes are expected at this time.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_IComponentChangeService_ComponentRemoved\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ComponentRemoved</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when a component has been removed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.ComponentModel.Design.ComponentEventHandler ComponentRemoved;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event occurs during unload and when a component is deleted by the user. The event occurs before the site has been removed from the component.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_IComponentChangeService_ComponentRemoving\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ComponentRemoving</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when a component is in the process of being removed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.ComponentModel.Design.ComponentEventHandler ComponentRemoving;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event occurs during unload and when the user deletes a component. You can cancel the process of removing a component by throwing an exception here.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_IComponentChangeService_ComponentRename\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ComponentRename</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when a component is renamed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.ComponentModel.Design.ComponentRenameEventHandler ComponentRename;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This event occurs after the <a class=\"xref\" href=\"system.componentmodel.design.icomponentchangeservice#System_ComponentModel_Design_IComponentChangeService_ComponentChanged\" data-linktype=\"relative-path\">ComponentChanged</a> event when a component has been renamed.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.Design.IComponentChangeService.yml\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IComponentChangeService\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IComponentChangeService.ComponentAdded\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IComponentChangeService.add_ComponentAdded\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IComponentChangeService.remove_ComponentAdded\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IComponentChangeService.ComponentAdding\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IComponentChangeService.add_ComponentAdding\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IComponentChangeService.remove_ComponentAdding\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IComponentChangeService.ComponentChanged\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IComponentChangeService.add_ComponentChanged\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IComponentChangeService.remove_ComponentChanged\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IComponentChangeService.ComponentChanging\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IComponentChangeService.add_ComponentChanging\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IComponentChangeService.remove_ComponentChanging\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IComponentChangeService.ComponentRemoved\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IComponentChangeService.add_ComponentRemoved\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IComponentChangeService.remove_ComponentRemoved\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IComponentChangeService.ComponentRemoving\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IComponentChangeService.add_ComponentRemoving\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IComponentChangeService.remove_ComponentRemoving\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IComponentChangeService.ComponentRename\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IComponentChangeService.add_ComponentRename\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IComponentChangeService.remove_ComponentRename\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IComponentChangeService.OnComponentChanged\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IComponentChangeService.OnComponentChanging\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"f60cf8c3-cfa2-8a4f-7445-2ecec1f33521\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides an interface to add and remove the event handlers for events that add, change, remove or rename components, and provides methods to raise a  or  event.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.componentmodel.design/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.ComponentModel.Design.IComponentChangeService\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.Design.IComponentChangeService.yml","open_to_public_contributors":false,"api_name":["System.ComponentModel.Design.IComponentChangeService","System.ComponentModel.Design.IComponentChangeService.ComponentAdded","System.ComponentModel.Design.IComponentChangeService.add_ComponentAdded","System.ComponentModel.Design.IComponentChangeService.remove_ComponentAdded","System.ComponentModel.Design.IComponentChangeService.ComponentAdding","System.ComponentModel.Design.IComponentChangeService.add_ComponentAdding","System.ComponentModel.Design.IComponentChangeService.remove_ComponentAdding","System.ComponentModel.Design.IComponentChangeService.ComponentChanged","System.ComponentModel.Design.IComponentChangeService.add_ComponentChanged","System.ComponentModel.Design.IComponentChangeService.remove_ComponentChanged","System.ComponentModel.Design.IComponentChangeService.ComponentChanging","System.ComponentModel.Design.IComponentChangeService.add_ComponentChanging","System.ComponentModel.Design.IComponentChangeService.remove_ComponentChanging","System.ComponentModel.Design.IComponentChangeService.ComponentRemoved","System.ComponentModel.Design.IComponentChangeService.add_ComponentRemoved","System.ComponentModel.Design.IComponentChangeService.remove_ComponentRemoved","System.ComponentModel.Design.IComponentChangeService.ComponentRemoving","System.ComponentModel.Design.IComponentChangeService.add_ComponentRemoving","System.ComponentModel.Design.IComponentChangeService.remove_ComponentRemoving","System.ComponentModel.Design.IComponentChangeService.ComponentRename","System.ComponentModel.Design.IComponentChangeService.add_ComponentRename","System.ComponentModel.Design.IComponentChangeService.remove_ComponentRename","System.ComponentModel.Design.IComponentChangeService.OnComponentChanged","System.ComponentModel.Design.IComponentChangeService.OnComponentChanging"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.ComponentModel.Design.IComponentChangeService","System::ComponentModel::Design::IComponentChangeService","System.ComponentModel.Design.IComponentChangeService.ComponentAdded","System::ComponentModel::Design::IComponentChangeService::ComponentAdded","System.ComponentModel.Design.IComponentChangeService.ComponentAdding","System::ComponentModel::Design::IComponentChangeService::ComponentAdding","System.ComponentModel.Design.IComponentChangeService.ComponentChanged","System::ComponentModel::Design::IComponentChangeService::ComponentChanged","System.ComponentModel.Design.IComponentChangeService.ComponentChanging","System::ComponentModel::Design::IComponentChangeService::ComponentChanging","System.ComponentModel.Design.IComponentChangeService.ComponentRemoved","System::ComponentModel::Design::IComponentChangeService::ComponentRemoved","System.ComponentModel.Design.IComponentChangeService.ComponentRemoving","System::ComponentModel::Design::IComponentChangeService::ComponentRemoving","System.ComponentModel.Design.IComponentChangeService.ComponentRename","System::ComponentModel::Design::IComponentChangeService::ComponentRename","System.ComponentModel.Design.IComponentChangeService.OnComponentChanged","System::ComponentModel::Design::IComponentChangeService::OnComponentChanged","System.ComponentModel.Design.IComponentChangeService.OnComponentChanging","System::ComponentModel::Design::IComponentChangeService::OnComponentChanging"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"f60cf8c3-cfa2-8a4f-7445-2ecec1f33521","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.ComponentModel.Design/IComponentChangeService.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IComponentChangeService interface | Microsoft Docs","_op_ogTitle":"IComponentChangeService interface","description":"Provides an interface to add and remove the event handlers for events that add, change, remove or rename components, and provides methods to raise a  or  event.\n","toc_asset_id":"api/_splitted/System.ComponentModel.Design/toc.json","toc_rel":"_splitted/System.ComponentModel.Design/toc.json","source_url":"","ms.assetid":"System.ComponentModel.Design.IComponentChangeService","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.design.icomponentchangeservice","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.design.icomponentchangeservice","fileRelativePath":"api/System.ComponentModel.Design.IComponentChangeService.html"},"themesRelativePathToOutputRoot":"_themes/"}