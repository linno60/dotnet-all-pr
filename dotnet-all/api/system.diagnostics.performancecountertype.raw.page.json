{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">PerformanceCounterType</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies the formula used to calculate the <span class=\"xref\">stem.Diagnostics.PerformanceCounter.NextValue*</span> method for a <a class=\"xref\" href=\"system.diagnostics.performancecounter\" data-linktype=\"relative-path\">PerformanceCounter</a> instance.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[ECMA2Yaml.Models.ECMAAttribute]\npublic enum PerformanceCounterType</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">PerformanceCounterType</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.componentmodel.typeconverterattribute\" title=\"System.ComponentModel.TypeConverterAttribute\" data-linktype=\"relative-path\">TypeConverterAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following examples demonstrate several of the counter types in the PerformanceCounterType enumeration.  </p>\n<p> <code>AverageCount64</code>  </p>\n<pre><code class=\"lang-cpp\" name=\"PerformanceCounterType.AverageCounter64#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\nusing namespace System::Diagnostics;\n\n// Output information about the counter sample.\nvoid OutputSample( CounterSample s )\n{\n   Console::WriteLine( &quot;\\r\\n+++++++++++&quot; );\n   Console::WriteLine( &quot;Sample values - \\r\\n&quot; );\n   Console::WriteLine( &quot;   BaseValue        = {0}&quot;, s.BaseValue );\n   Console::WriteLine( &quot;   CounterFrequency = {0}&quot;, s.CounterFrequency );\n   Console::WriteLine( &quot;   CounterTimeStamp = {0}&quot;, s.CounterTimeStamp );\n   Console::WriteLine( &quot;   CounterType      = {0}&quot;, s.CounterType );\n   Console::WriteLine( &quot;   RawValue         = {0}&quot;, s.RawValue );\n   Console::WriteLine( &quot;   SystemFrequency  = {0}&quot;, s.SystemFrequency );\n   Console::WriteLine( &quot;   TimeStamp        = {0}&quot;, s.TimeStamp );\n   Console::WriteLine( &quot;   TimeStamp100nSec = {0}&quot;, s.TimeStamp100nSec );\n   Console::WriteLine( &quot;++++++++++++++++++++++&quot; );\n}\n\n//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n//    Description - This counter type shows how many items are processed, on average,\n//        during an operation. Counters of this type display a ratio of the items \n//        processed (such as bytes sent) to the number of operations completed. The  \n//        ratio is calculated by comparing the number of items processed during the \n//        last interval to the number of operations completed during the last interval. \n// Generic type - Average\n//      Formula - (N1 - N0) / (D1 - D0), where the numerator (N) represents the number \n//        of items processed during the last sample interval and the denominator (D) \n//        represents the number of operations completed during the last two sample \n//        intervals. \n//    Average (Nx - N0) / (Dx - D0)  \n//    Example PhysicalDisk\\ Avg. Disk Bytes/Transfer \n//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\nfloat MyComputeCounterValue( CounterSample s0, CounterSample s1 )\n{\n   float numerator = (float)s1.RawValue - (float)s0.RawValue;\n   float denomenator = (float)s1.BaseValue - (float)s0.BaseValue;\n   float counterValue = numerator / denomenator;\n   return counterValue;\n}\n\nbool SetupCategory()\n{\n   if (  !PerformanceCounterCategory::Exists( &quot;AverageCounter64SampleCategory&quot; ) )\n   {\n      CounterCreationDataCollection^ CCDC = gcnew CounterCreationDataCollection;\n      \n      // Add the counter.\n      CounterCreationData^ averageCount64 = gcnew CounterCreationData;\n      averageCount64-&gt;CounterType = PerformanceCounterType::AverageCount64;\n      averageCount64-&gt;CounterName = &quot;AverageCounter64Sample&quot;;\n      CCDC-&gt;Add( averageCount64 );\n      \n      // Add the base counter.\n      CounterCreationData^ averageCount64Base = gcnew CounterCreationData;\n      averageCount64Base-&gt;CounterType = PerformanceCounterType::AverageBase;\n      averageCount64Base-&gt;CounterName = &quot;AverageCounter64SampleBase&quot;;\n      CCDC-&gt;Add( averageCount64Base );\n      \n      // Create the category.\n      PerformanceCounterCategory::Create( &quot;AverageCounter64SampleCategory&quot;, &quot;Demonstrates usage of the AverageCounter64 performance counter type.&quot;, CCDC );\n      return (true);\n   }\n   else\n   {\n      Console::WriteLine( &quot;Category exists - AverageCounter64SampleCategory&quot; );\n      return (false);\n   }\n}\n\nvoid CreateCounters( PerformanceCounter^% PC, PerformanceCounter^% BPC )\n{\n   \n   // Create the counters.\n   PC = gcnew PerformanceCounter( &quot;AverageCounter64SampleCategory&quot;,&quot;AverageCounter64Sample&quot;,false );\n\n   BPC = gcnew PerformanceCounter( &quot;AverageCounter64SampleCategory&quot;,&quot;AverageCounter64SampleBase&quot;,false );\n   PC-&gt;RawValue = 0;\n   BPC-&gt;RawValue = 0;\n}\nvoid CollectSamples( ArrayList^ samplesList, PerformanceCounter^ PC, PerformanceCounter^ BPC )\n{\n   Random^ r = gcnew Random( DateTime::Now.Millisecond );\n\n   // Loop for the samples.\n   for ( int j = 0; j &lt; 100; j++ )\n   {\n      int value = r-&gt;Next( 1, 10 );\n      Console::Write( &quot;{0} = {1}&quot;, j, value );\n      PC-&gt;IncrementBy( value );\n      BPC-&gt;Increment();\n      if ( (j % 10) == 9 )\n      {\n         OutputSample( PC-&gt;NextSample() );\n         samplesList-&gt;Add( PC-&gt;NextSample() );\n      }\n      else\n            Console::WriteLine();\n      System::Threading::Thread::Sleep( 50 );\n   }\n}\n\nvoid CalculateResults( ArrayList^ samplesList )\n{\n   for ( int i = 0; i &lt; (samplesList-&gt;Count - 1); i++ )\n   {\n      // Output the sample.\n      OutputSample(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i ]) );\n      OutputSample(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i + 1 ]) );\n      \n      // Use .NET to calculate the counter value.\n      Console::WriteLine( &quot;.NET computed counter value = {0}&quot;, CounterSampleCalculator::ComputeCounterValue(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i ]),  *safe_cast&lt;CounterSample^&gt;(samplesList[ i + 1 ]) ) );\n      \n      // Calculate the counter value manually.\n      Console::WriteLine( &quot;My computed counter value = {0}&quot;, MyComputeCounterValue(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i ]),  *safe_cast&lt;CounterSample^&gt;(samplesList[ i + 1 ]) ) );\n   }\n}\n\nint main()\n{\n   ArrayList^ samplesList = gcnew ArrayList;\n   PerformanceCounter^ PC;\n   PerformanceCounter^ BPC;\n   SetupCategory();\n   CreateCounters( PC, BPC );\n   CollectSamples( samplesList, PC, BPC );\n   CalculateResults( samplesList );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"PerformanceCounterType.AverageCounter64#1\">\nusing System;\nusing System.Collections;\nusing System.Collections.Specialized;\nusing System.Diagnostics;\n\npublic class App {\n\n    private static PerformanceCounter avgCounter64Sample;\n    private static PerformanceCounter avgCounter64SampleBase;\n\n    public static void Main()\n    {\n    \n        ArrayList samplesList = new ArrayList();\n\n        // If the category does not exist, create the category and exit.\n        // Performance counters should not be created and immediately used.\n        // There is a latency time to enable the counters, they should be created\n        // prior to executing the application that uses the counters.\n        // Execute this sample a second time to use the category.\n        if (SetupCategory())\n            return;\n        CreateCounters();\n        CollectSamples(samplesList);\n        CalculateResults(samplesList);\n\n    }\n\n    private static bool SetupCategory()\n    {\n        if ( !PerformanceCounterCategory.Exists(&quot;AverageCounter64SampleCategory&quot;) ) \n        {\n\n            CounterCreationDataCollection counterDataCollection = new CounterCreationDataCollection();\n\n            // Add the counter.\n            CounterCreationData averageCount64 = new CounterCreationData();\n            averageCount64.CounterType = PerformanceCounterType.AverageCount64;\n            averageCount64.CounterName = &quot;AverageCounter64Sample&quot;;\n            counterDataCollection.Add(averageCount64);\n\n            // Add the base counter.\n            CounterCreationData averageCount64Base = new CounterCreationData();\n            averageCount64Base.CounterType = PerformanceCounterType.AverageBase;\n            averageCount64Base.CounterName = &quot;AverageCounter64SampleBase&quot;;\n            counterDataCollection.Add(averageCount64Base);\n\n            // Create the category.\n            PerformanceCounterCategory.Create(&quot;AverageCounter64SampleCategory&quot;,\n                &quot;Demonstrates usage of the AverageCounter64 performance counter type.&quot;,\n                PerformanceCounterCategoryType.SingleInstance, counterDataCollection);\n\n            return(true);\n        }\n        else\n        {\n            Console.WriteLine(&quot;Category exists - AverageCounter64SampleCategory&quot;);\n            return(false);\n        }\n    }\n\n    private static void CreateCounters()\n    {\n        // Create the counters.\n\n        avgCounter64Sample = new PerformanceCounter(&quot;AverageCounter64SampleCategory&quot;, \n            &quot;AverageCounter64Sample&quot;, \n            false);\n\n\n        avgCounter64SampleBase = new PerformanceCounter(&quot;AverageCounter64SampleCategory&quot;, \n            &quot;AverageCounter64SampleBase&quot;, \n            false);\n\n        avgCounter64Sample.RawValue=0;\n        avgCounter64SampleBase.RawValue=0;\n    }\n    private static void CollectSamples(ArrayList samplesList)\n    {\n\n        Random r = new Random( DateTime.Now.Millisecond );\n\n        // Loop for the samples.\n        for (int j = 0; j &lt; 100; j++) \n        {\n\n            int value = r.Next(1, 10);\n            Console.Write(j + &quot; = &quot; + value);\n\n            avgCounter64Sample.IncrementBy(value);\n\n            avgCounter64SampleBase.Increment();\n\n            if ((j % 10) == 9) \n            {\n                OutputSample(avgCounter64Sample.NextSample());\n                samplesList.Add( avgCounter64Sample.NextSample() );\n            }\n            else\n                Console.WriteLine();\n\n            System.Threading.Thread.Sleep(50);\n        }\n\n    }\n\n    private static void CalculateResults(ArrayList samplesList)\n    {\n        for(int i = 0; i &lt; (samplesList.Count - 1); i++)\n        {\n            // Output the sample.\n            OutputSample( (CounterSample)samplesList[i] );\n            OutputSample( (CounterSample)samplesList[i+1] );\n\n            // Use .NET to calculate the counter value.\n            Console.WriteLine(&quot;.NET computed counter value = &quot; +\n                CounterSampleCalculator.ComputeCounterValue((CounterSample)samplesList[i],\n                (CounterSample)samplesList[i+1]) );\n\n            // Calculate the counter value manually.\n            Console.WriteLine(&quot;My computed counter value = &quot; + \n                MyComputeCounterValue((CounterSample)samplesList[i],\n                (CounterSample)samplesList[i+1]) );\n\n        }\n    }\n\n    //++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n    //    Description - This counter type shows how many items are processed, on average,\n    //        during an operation. Counters of this type display a ratio of the items \n    //        processed (such as bytes sent) to the number of operations completed. The  \n    //        ratio is calculated by comparing the number of items processed during the \n    //        last interval to the number of operations completed during the last interval. \n    // Generic type - Average\n    //      Formula - (N1 - N0) / (D1 - D0), where the numerator (N) represents the number \n    //        of items processed during the last sample interval and the denominator (D) \n    //        represents the number of operations completed during the last two sample \n    //        intervals. \n    //    Average (Nx - N0) / (Dx - D0)  \n    //    Example PhysicalDisk\\ Avg. Disk Bytes/Transfer \n    //++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n    private static Single MyComputeCounterValue(CounterSample s0, CounterSample s1)\n    {\n        Single numerator = (Single)s1.RawValue - (Single)s0.RawValue;\n        Single denomenator = (Single)s1.BaseValue - (Single)s0.BaseValue;\n        Single counterValue = numerator / denomenator;\n        return(counterValue);\n    }\n\n    // Output information about the counter sample.\n    private static void OutputSample(CounterSample s)\n    {\n        Console.WriteLine(&quot;\\r\\n+++++++++++&quot;);\n        Console.WriteLine(&quot;Sample values - \\r\\n&quot;);\n        Console.WriteLine(&quot;   BaseValue        = &quot; + s.BaseValue);\n        Console.WriteLine(&quot;   CounterFrequency = &quot; + s.CounterFrequency);\n        Console.WriteLine(&quot;   CounterTimeStamp = &quot; + s.CounterTimeStamp);\n        Console.WriteLine(&quot;   CounterType      = &quot; + s.CounterType);\n        Console.WriteLine(&quot;   RawValue         = &quot; + s.RawValue);\n        Console.WriteLine(&quot;   SystemFrequency  = &quot; + s.SystemFrequency);\n        Console.WriteLine(&quot;   TimeStamp        = &quot; + s.TimeStamp);\n        Console.WriteLine(&quot;   TimeStamp100nSec = &quot; + s.TimeStamp100nSec);\n        Console.WriteLine(&quot;++++++++++++++++++++++&quot;);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"PerformanceCounterType.AverageCounter64#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\nImports System.Diagnostics\n\n _\n\nPublic Class App\n\n    Private Shared avgCounter64Sample As PerformanceCounter\n    Private Shared avgCounter64SampleBase As PerformanceCounter\n\n\n    Public Shared Sub Main()\n\n        Dim samplesList As New ArrayList()\n        &#39;If the category does not exist, create the category and exit.\n        &#39;Performance counters should not be created and immediately used.\n        &#39;There is a latency time to enable the counters, they should be created\n        &#39;prior to executing the application that uses the counters.\n        &#39;Execute this sample a second time to use the counters.\n        If Not (SetupCategory()) Then\n            CreateCounters()\n            CollectSamples(samplesList)\n            CalculateResults(samplesList)\n        End If\n\n    End Sub &#39;Main\n\n    Private Shared Function SetupCategory() As Boolean\n        If Not PerformanceCounterCategory.Exists(&quot;AverageCounter64SampleCategory&quot;) Then\n\n            Dim counterDataCollection As New CounterCreationDataCollection()\n\n            &#39; Add the counter.\n            Dim averageCount64 As New CounterCreationData()\n            averageCount64.CounterType = PerformanceCounterType.AverageCount64\n            averageCount64.CounterName = &quot;AverageCounter64Sample&quot;\n            counterDataCollection.Add(averageCount64)\n\n            &#39; Add the base counter.\n            Dim averageCount64Base As New CounterCreationData()\n            averageCount64Base.CounterType = PerformanceCounterType.AverageBase\n            averageCount64Base.CounterName = &quot;AverageCounter64SampleBase&quot;\n            counterDataCollection.Add(averageCount64Base)\n\n            &#39; Create the category.\n            PerformanceCounterCategory.Create(&quot;AverageCounter64SampleCategory&quot;, _\n               &quot;Demonstrates usage of the AverageCounter64 performance counter type.&quot;, _\n                      PerformanceCounterCategoryType.SingleInstance, counterDataCollection)\n\n            Return True\n        Else\n            Console.WriteLine(&quot;Category exists - AverageCounter64SampleCategory&quot;)\n            Return False\n        End If\n    End Function &#39;SetupCategory\n\n    Private Shared Sub CreateCounters()\n        &#39; Create the counters.\n\n        avgCounter64Sample = New PerformanceCounter(&quot;AverageCounter64SampleCategory&quot;, &quot;AverageCounter64Sample&quot;, False)\n\n        avgCounter64SampleBase = New PerformanceCounter(&quot;AverageCounter64SampleCategory&quot;, &quot;AverageCounter64SampleBase&quot;, False)\n\n        avgCounter64Sample.RawValue = 0\n        avgCounter64SampleBase.RawValue = 0\n    End Sub &#39;CreateCounters\n\n    Private Shared Sub CollectSamples(ByVal samplesList As ArrayList)\n\n        Dim r As New Random(DateTime.Now.Millisecond)\n\n        &#39; Loop for the samples.\n        Dim j As Integer\n        For j = 0 To 99\n\n            Dim value As Integer = r.Next(1, 10)\n            Console.Write(j.ToString() + &quot; = &quot; + value.ToString())\n\n            avgCounter64Sample.IncrementBy(value)\n\n            avgCounter64SampleBase.Increment()\n\n            If j Mod 10 = 9 Then\n                OutputSample(avgCounter64Sample.NextSample())\n                samplesList.Add(avgCounter64Sample.NextSample())\n            Else\n                Console.WriteLine()\n            End If\n            System.Threading.Thread.Sleep(50)\n        Next j\n    End Sub &#39;CollectSamples\n\n    Private Shared Sub CalculateResults(ByVal samplesList As ArrayList)\n        Dim i As Integer\n        For i = 0 To (samplesList.Count - 1) - 1\n            &#39; Output the sample.\n            OutputSample(CType(samplesList(i), CounterSample))\n            OutputSample(CType(samplesList((i + 1)), CounterSample))\n\n            &#39; Use .NET to calculate the counter value.\n            Console.WriteLine(&quot;.NET computed counter value = &quot; + CounterSampleCalculator.ComputeCounterValue(CType(samplesList(i), CounterSample), CType(samplesList((i + 1)), CounterSample)).ToString())\n\n            &#39; Calculate the counter value manually.\n            Console.WriteLine(&quot;My computed counter value = &quot; + MyComputeCounterValue(CType(samplesList(i), CounterSample), CType(samplesList((i + 1)), CounterSample)).ToString())\n        Next i\n    End Sub &#39;CalculateResults\n\n    &#39;++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n    &#39;\tDescription - This counter type shows how many items are processed, on average,\n    &#39;\t\tduring an operation. Counters of this type display a ratio of the items \n    &#39;\t\tprocessed (such as bytes sent) to the number of operations completed. The  \n    &#39;\t\tratio is calculated by comparing the number of items processed during the \n    &#39;\t\tlast interval to the number of operations completed during the last interval. \n    &#39; Generic type - Average\n    &#39;  \tFormula - (N1 - N0) / (D1 - D0), where the numerator (N) represents the number \n    &#39;\t\tof items processed during the last sample interval and the denominator (D) \n    &#39;\t\trepresents the number of operations completed during the last two sample \n    &#39;\t\tintervals. \n    &#39;\tAverage (Nx - N0) / (Dx - D0)  \n    &#39;\tExample PhysicalDisk\\ Avg. Disk Bytes/Transfer \n    &#39;++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n    Private Shared Function MyComputeCounterValue(ByVal s0 As CounterSample, ByVal s1 As CounterSample) As [Single]\n        Dim numerator As [Single] = CType(s1.RawValue, [Single]) - CType(s0.RawValue, [Single])\n        Dim denomenator As [Single] = CType(s1.BaseValue, [Single]) - CType(s0.BaseValue, [Single])\n        Dim counterValue As [Single] = numerator / denomenator\n        Return counterValue\n    End Function &#39;MyComputeCounterValue\n\n    &#39; Output information about the counter sample.\n    Private Shared Sub OutputSample(ByVal s As CounterSample)\n        Console.WriteLine(ControlChars.Lf + ControlChars.Cr + &quot;+++++++++++&quot;)\n        Console.WriteLine(&quot;Sample values - &quot; + ControlChars.Lf + ControlChars.Cr)\n        Console.WriteLine((&quot;   BaseValue        = &quot; + s.BaseValue.ToString()))\n        Console.WriteLine((&quot;   CounterFrequency = &quot; + s.CounterFrequency.ToString()))\n        Console.WriteLine((&quot;   CounterTimeStamp = &quot; + s.CounterTimeStamp.ToString()))\n        Console.WriteLine((&quot;   CounterType      = &quot; + s.CounterType.ToString()))\n        Console.WriteLine((&quot;   RawValue         = &quot; + s.RawValue.ToString()))\n        Console.WriteLine((&quot;   SystemFrequency  = &quot; + s.SystemFrequency.ToString()))\n        Console.WriteLine((&quot;   TimeStamp        = &quot; + s.TimeStamp.ToString()))\n        Console.WriteLine((&quot;   TimeStamp100nSec = &quot; + s.TimeStamp100nSec.ToString()))\n        Console.WriteLine(&quot;++++++++++++++++++++++&quot;)\n    End Sub &#39;OutputSample\nEnd Class &#39;App\n</code></pre><p> <code>AverageTimer32</code>  </p>\n<pre><code class=\"lang-vb\" name=\"PerformanceCounterType.AverageTimer32#2\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\nImports System.Diagnostics\nImports System.Runtime.InteropServices\nImports Microsoft.VisualBasic\n\nPublic Class App\n\n    Private Const categoryName As String = &quot;AverageTimer32SampleCategory&quot;\n    Private Const counterName As String = &quot;AverageTimer32Sample&quot;\n    Private Const baseCounterName As String = &quot;AverageTimer32SampleBase&quot;\n\n    Private Shared PC As PerformanceCounter\n    Private Shared BPC As PerformanceCounter\n\n\n    Public Shared Sub Main()\n        Dim samplesList As New ArrayList()\n\n        SetupCategory()\n        CreateCounters()\n        CollectSamples(samplesList)\n        CalculateResults(samplesList)\n    End Sub\n\n\n    Private Shared Function SetupCategory() As Boolean\n\n        If Not PerformanceCounterCategory.Exists(categoryName) Then\n\n            Dim CCDC As New CounterCreationDataCollection()\n\n            &#39; Add the counter.\n            Dim averageTimer32 As New CounterCreationData()\n            averageTimer32.CounterType = PerformanceCounterType.AverageTimer32\n            averageTimer32.CounterName = counterName\n            CCDC.Add(averageTimer32)\n\n            &#39; Add the base counter.\n            Dim averageTimer32Base As New CounterCreationData()\n            averageTimer32Base.CounterType = PerformanceCounterType.AverageBase\n            averageTimer32Base.CounterName = baseCounterName\n            CCDC.Add(averageTimer32Base)\n\n            &#39; Create the category.\n            PerformanceCounterCategory.Create( _\n               categoryName, _\n               &quot;Demonstrates usage of the AverageTimer32 performance counter type&quot;, _\n                 PerformanceCounterCategoryType.SingleInstance, CCDC)\n\n            Console.WriteLine(&quot;Category created - &quot; + categoryName)\n\n            Return True\n        Else\n            Console.WriteLine((&quot;Category exists - &quot; + _\n               categoryName))\n            Return False\n        End If\n    End Function\n\n\n    Private Shared Sub CreateCounters()\n        &#39; Create the counters.\n        PC = New PerformanceCounter(categoryName, _\n              counterName, False)\n\n        BPC = New PerformanceCounter(categoryName, _\n              baseCounterName, False)\n\n        PC.RawValue = 0\n        BPC.RawValue = 0\n    End Sub\n\n\n    Private Shared Sub CollectSamples(ByVal samplesList As ArrayList)\n\n        Dim r As New Random(DateTime.Now.Millisecond)\n\n        &#39; Loop for the samples.\n        Dim i As Integer\n        For i = 0 To 9\n\n            PC.RawValue = Stopwatch.GetTimeStamp()\n\n            BPC.IncrementBy(10)\n\n            System.Threading.Thread.Sleep(1000)\n            Console.WriteLine((&quot;Next value = &quot; + PC.NextValue().ToString()))\n            samplesList.Add(PC.NextSample())\n        Next i\n    End Sub\n\n\n    Private Shared Sub CalculateResults(ByVal samplesList As ArrayList)\n        Dim i As Integer\n        Dim sample1 As CounterSample\n        Dim sample2 As CounterSample\n        For i = 0 To (samplesList.Count - 1) - 1\n            &#39; Output the sample.\n            sample1 = CType(samplesList(i), CounterSample)\n            sample2 = CType(samplesList(i + 1), CounterSample)\n            OutputSample(sample1)\n            OutputSample(sample2)\n\n            &#39; Use .NET to calculate the counter value.\n            Console.WriteLine((&quot;.NET computed counter value = &quot; _\n               + CounterSample.Calculate(sample1, sample2).ToString()))\n\n            &#39; Calculate the counter value manually.\n            Console.WriteLine((&quot;My computed counter value = &quot; _\n               + MyComputeCounterValue(sample1, sample2).ToString()))\n\n        Next i\n    End Sub\n\n\n    &#39;++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//+++++++\n    &#39; PERF_AVERAGE_TIMER\n    &#39;  Description - This counter type measures the time it takes, on \n    &#39;     average, to complete a process or operation. Counters of this\n    &#39;     type display a ratio of the total elapsed time of the sample \n    &#39;     interval to the number of processes or operations completed\n    &#39;     during that time. This counter type measures time in ticks \n    &#39;     of the system clock. The F variable represents the number of\n    &#39;     ticks per second. The value of F is factored into the equation\n    &#39;     so that the result can be displayed in seconds.\n    &#39;\n    &#39;  Generic type - Average\n    &#39;\n    &#39;  Formula - ((N1 - N0) / F) / (D1 - D0), where the numerator (N)\n    &#39;     represents the number of ticks counted during the last \n    &#39;     sample interval, F represents the frequency of the ticks, \n    &#39;     and the denominator (D) represents the number of operations\n    &#39;     completed during the last sample interval.\n    &#39;\n    &#39;  Average - ((Nx - N0) / F) / (Dx - D0)\n    &#39;\n    &#39;  Example - PhysicalDisk\\ Avg. Disk sec/Transfer \n    &#39;++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//+++++++\n    Private Shared Function MyComputeCounterValue( _\n    ByVal s0 As CounterSample, _\n    ByVal s1 As CounterSample) As Single\n        Dim n1 As Int64 = s1.RawValue\n        Dim n0 As Int64 = s0.RawValue\n        Dim f As Decimal = CType(s1.SystemFrequency, Decimal)\n        Dim d1 As Int64 = s1.BaseValue\n        Dim d0 As Int64 = s0.BaseValue\n\n        Dim numerator As Double = System.Convert.ToDouble(n1 - n0)\n        Dim denominator As Double = System.Convert.ToDouble(d1 - d0)\n        Dim counterValue As Single = CType(numerator, Single)\n        counterValue = counterValue / CType(f, Single)\n        counterValue = counterValue / CType(denominator, Single)\n\n        Return counterValue\n    End Function\n\n\n    &#39; Output information about the counter sample.\n    Private Shared Sub OutputSample(ByVal s As CounterSample)\n        Console.WriteLine(&quot;+++++++++++&quot;)\n        Console.WriteLine(&quot;Sample values - &quot; + ControlChars.Cr _\n              + ControlChars.Lf)\n        Console.WriteLine((&quot;   CounterType      = &quot; + _\n              s.CounterType.ToString()))\n        Console.WriteLine((&quot;   RawValue         = &quot; + _\n              s.RawValue.ToString()))\n        Console.WriteLine((&quot;   BaseValue        = &quot; _\n              + s.BaseValue.ToString()))\n        Console.WriteLine((&quot;   CounterFrequency = &quot; + _\n              s.CounterFrequency.ToString()))\n        Console.WriteLine((&quot;   CounterTimeStamp = &quot; + _\n              s.CounterTimeStamp.ToString()))\n        Console.WriteLine((&quot;   SystemFrequency  = &quot; + _\n              s.SystemFrequency.ToString()))\n        Console.WriteLine((&quot;   TimeStamp        = &quot; + _\n              s.TimeStamp.ToString()))\n        Console.WriteLine((&quot;   TimeStamp100nSec = &quot; + _\n              s.TimeStamp100nSec.ToString()))\n        Console.WriteLine(&quot;++++++++++++++++++++++&quot;)\n    End Sub\n\n\nEnd Class\n</code></pre><pre><code class=\"lang-cpp\" name=\"PerformanceCounterType.AverageTimer32#2\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\nusing namespace System::Diagnostics;\nusing namespace System::Runtime::InteropServices;\n\n//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//+++++++\n// PERF_AVERAGE_TIMER\n//  Description - This counter type measures the time it takes, on \n//     average, to complete a process or operation. Counters of this\n//     type display a ratio of the total elapsed time of the sample \n//     interval to the number of processes or operations completed\n//     during that time. This counter type measures time in ticks \n//     of the system clock. The F variable represents the number of\n//     ticks per second. The value of F is factored into the equation\n//     so that the result can be displayed in seconds.\n//    \n//  Generic type - Average\n//    \n//  Formula - ((N1 - N0) / F) / (D1 - D0), where the numerator (N)\n//     represents the number of ticks counted during the last \n//     sample interval, F represents the frequency of the ticks, \n//     and the denominator (D) represents the number of operations\n//     completed during the last sample interval.\n//    \n//  Average - ((Nx - N0) / F) / (Dx - D0)\n//    \n//  Example - PhysicalDisk\\ Avg. Disk sec/Transfer \n//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//+++++++\nfloat MyComputeCounterValue( CounterSample s0, CounterSample s1 )\n{\n    __int64 n1 = s1.RawValue;\n    __int64 n0 = s0.RawValue;\n    unsigned __int64 f = s1.SystemFrequency;\n    __int64 d1 = s1.BaseValue;\n    __int64 d0 = s0.BaseValue;\n    double numerator = (double)(n1 - n0);\n    double denominator = (double)(d1 - d0);\n    float counterValue = (float)((numerator / f) / denominator);\n    return counterValue;\n}\n\n// Output information about the counter sample.\nvoid OutputSample( CounterSample s )\n{\n    Console::WriteLine( &quot;+++++++++++&quot; );\n    Console::WriteLine( &quot;Sample values - \\r\\n&quot; );\n    Console::WriteLine( &quot;   CounterType      = {0}&quot;, s.CounterType );\n    Console::WriteLine( &quot;   RawValue         = {0}&quot;, s.RawValue.ToString() );\n    Console::WriteLine( &quot;   BaseValue        = {0}&quot;, s.BaseValue.ToString() );\n    Console::WriteLine( &quot;   CounterFrequency = {0}&quot;, s.CounterFrequency.ToString() );\n    Console::WriteLine( &quot;   CounterTimeStamp = {0}&quot;, s.CounterTimeStamp.ToString() );\n    Console::WriteLine( &quot;   SystemFrequency  = {0}&quot;, s.SystemFrequency.ToString() );\n    Console::WriteLine( &quot;   TimeStamp        = {0}&quot;, s.TimeStamp.ToString() );\n    Console::WriteLine( &quot;   TimeStamp100nSec = {0}&quot;, s.TimeStamp100nSec.ToString() );\n    Console::WriteLine( &quot;++++++++++++++++++++++&quot; );\n}\n\nbool SetupCategory()\n{\n    if (  !PerformanceCounterCategory::Exists( &quot;AverageTimer32SampleCategory&quot;) )\n       {\n        CounterCreationDataCollection^ CCDC = gcnew CounterCreationDataCollection;\n\n        // Add the counter.\n        CounterCreationData^ averageTimer32 = gcnew CounterCreationData;\n        averageTimer32-&gt;CounterType = PerformanceCounterType::AverageTimer32;\n        averageTimer32-&gt;CounterName = &quot;AverageTimer32Sample&quot;;\n        CCDC-&gt;Add( averageTimer32 );\n\n        // Add the base counter.\n        CounterCreationData^ averageTimer32Base = gcnew CounterCreationData;\n        averageTimer32Base-&gt;CounterType = PerformanceCounterType::AverageBase;\n        averageTimer32Base-&gt;CounterName = &quot;AverageTimer32SampleBase&quot;;\n        CCDC-&gt;Add( averageTimer32Base );\n\n        // Create the category.\n        PerformanceCounterCategory::Create( &quot;AverageTimer32SampleCategory&quot;, \n            &quot;Demonstrates usage of the AverageTimer32 performance counter type&quot;, \n            PerformanceCounterCategoryType::SingleInstance, CCDC );\n        Console::WriteLine( &quot;Category created - AverageTimer32SampleCategory&quot; );\n        return (true);\n        }\n\n    Console::WriteLine( &quot;Category exists - AverageTimer32SampleCategory&quot; );\n    return (false);\n}\n\nvoid CreateCounters( PerformanceCounter^% PC, PerformanceCounter^% BPC )\n{\n    // Create the counters.\n    PC = gcnew PerformanceCounter( &quot;AverageTimer32SampleCategory&quot;,&quot;AverageTimer32Sample&quot;,false );\n    BPC = gcnew PerformanceCounter( &quot;AverageTimer32SampleCategory&quot;,&quot;AverageTimer32SampleBase&quot;,false );\n    PC-&gt;RawValue = 0;\n    BPC-&gt;RawValue = 0;\n}\n\nvoid CollectSamples( ArrayList^ samplesList, PerformanceCounter^ PC, \nPerformanceCounter^ BPC )\n{\n    __int64 perfTime = 0;\n    Random^ r = gcnew Random( DateTime::Now.Millisecond );\n\n    // Loop for the samples.\n    for ( int i = 0; i &lt; 10; i++ )\n        {\n        PC-&gt;RawValue = Stopwatch::GetTimestamp();\n        BPC-&gt;IncrementBy( 10 );\n        System::Threading::Thread::Sleep( 1000 );\n        Console::WriteLine( &quot;Next value = {0}&quot;, PC-&gt;NextValue().ToString() );\n        samplesList-&gt;Add( PC-&gt;NextSample() );\n        }\n}\n\nvoid CalculateResults( ArrayList^ samplesList )\n{\n    for ( int i = 0; i &lt; (samplesList-&gt;Count - 1); i++ )\n        {\n        // Output the sample.\n        OutputSample(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i ]) );\n        OutputSample(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i + 1 ]) );\n\n        // Use .NET to calculate the counter value.\n        Console::WriteLine( &quot;.NET computed counter value = {0}&quot;,\n           CounterSample::Calculate(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i ]),\n           *safe_cast&lt;CounterSample^&gt;(samplesList[ i + 1 ]) ) );\n\n        // Calculate the counter value manually.\n        Console::WriteLine( &quot;My computed counter value = {0}&quot;, \n            MyComputeCounterValue(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i ]),\n           *safe_cast&lt;CounterSample^&gt;(samplesList[ i + 1 ]) ) );\n        }\n}\n\nint main()\n{\n    ArrayList^ samplesList = gcnew ArrayList;\n    PerformanceCounter^ PC;\n    PerformanceCounter^ BPC;\n    SetupCategory();\n    CreateCounters( PC, BPC );\n    CollectSamples( samplesList, PC, BPC );\n    CalculateResults( samplesList );\n\n    Console::WriteLine(&quot;\\n\\nHit ENTER to return&quot;);\n    Console::ReadLine();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"PerformanceCounterType.AverageTimer32#2\">\nusing System;\nusing System.Collections;\nusing System.Collections.Specialized;\nusing System.Diagnostics;\nusing System.Runtime.InteropServices;\n\npublic class App\n{\n\n    private static PerformanceCounter PC;\n    private static PerformanceCounter BPC;\n\n    private const String categoryName = &quot;AverageTimer32SampleCategory&quot;;\n    private const String counterName = &quot;AverageTimer32Sample&quot;;\n    private const String baseCounterName = &quot;AverageTimer32SampleBase&quot;;\n\n    public static void Main()\n    {\n        ArrayList samplesList = new ArrayList();\n\n        // If the category does not exist, create the category and exit.\n        // Performance counters should not be created and immediately used.\n        // There is a latency time to enable the counters, they should be created\n        // prior to executing the application that uses the counters.\n        // Execute this sample a second time to use the category.\n        if (SetupCategory())\n            return;\n        CreateCounters();\n        CollectSamples(samplesList);\n        CalculateResults(samplesList);\n    }\n\n\n\n\n    private static bool SetupCategory()\n    {\n\n        if (!PerformanceCounterCategory.Exists(categoryName))\n        {\n\n            CounterCreationDataCollection CCDC = new CounterCreationDataCollection();\n\n            // Add the counter.\n            CounterCreationData averageTimer32 = new CounterCreationData();\n            averageTimer32.CounterType = PerformanceCounterType.AverageTimer32;\n            averageTimer32.CounterName = counterName;\n            CCDC.Add(averageTimer32);\n\n            // Add the base counter.\n            CounterCreationData averageTimer32Base = new CounterCreationData();\n            averageTimer32Base.CounterType = PerformanceCounterType.AverageBase;\n            averageTimer32Base.CounterName = baseCounterName;\n            CCDC.Add(averageTimer32Base);\n\n            // Create the category.\n            PerformanceCounterCategory.Create(categoryName, \n                &quot;Demonstrates usage of the AverageTimer32 performance counter type&quot;, \n                PerformanceCounterCategoryType.SingleInstance, CCDC);\n\n            Console.WriteLine(&quot;Category created - &quot; + categoryName);\n\n            return (true);\n        }\n        else\n        {\n            Console.WriteLine(&quot;Category exists - &quot; + categoryName);\n            return (false);\n        }\n    }\n\n    private static void CreateCounters()\n    {\n        // Create the counters.\n        PC = new PerformanceCounter(categoryName,\n                 counterName,\n                 false);\n\n        BPC = new PerformanceCounter(categoryName,\n            baseCounterName,\n            false);\n\n        PC.RawValue = 0;\n        BPC.RawValue = 0;\n    }\n\n\n    private static void CollectSamples(ArrayList samplesList)\n    {\n\n        Random r = new Random(DateTime.Now.Millisecond);\n\n        // Loop for the samples.\n        for (int i = 0; i &lt; 10; i++)\n        {\n\n            PC.RawValue = Stopwatch.GetTimestamp();\n\n            BPC.IncrementBy(10);\n\n            System.Threading.Thread.Sleep(1000);\n\n            Console.WriteLine(&quot;Next value = &quot; + PC.NextValue().ToString());\n            samplesList.Add(PC.NextSample());\n\n        }\n\n    }\n\n    private static void CalculateResults(ArrayList samplesList)\n    {\n        for (int i = 0; i &lt; (samplesList.Count - 1); i++)\n        {\n            // Output the sample.\n            OutputSample((CounterSample)samplesList[i]);\n            OutputSample((CounterSample)samplesList[i + 1]);\n\n            // Use .NET to calculate the counter value.\n            Console.WriteLine(&quot;.NET computed counter value = &quot; +\n                CounterSample.Calculate((CounterSample)samplesList[i],\n                (CounterSample)samplesList[i + 1]));\n\n            // Calculate the counter value manually.\n            Console.WriteLine(&quot;My computed counter value = &quot; +\n                MyComputeCounterValue((CounterSample)samplesList[i],\n                (CounterSample)samplesList[i + 1]));\n\n        }\n    }\n\n\n\n    //++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//+++++++\n    // PERF_AVERAGE_TIMER\n    //  Description - This counter type measures the time it takes, on \n    //     average, to complete a process or operation. Counters of this\n    //     type display a ratio of the total elapsed time of the sample \n    //     interval to the number of processes or operations completed\n    //     during that time. This counter type measures time in ticks \n    //     of the system clock. The F variable represents the number of\n    //     ticks per second. The value of F is factored into the equation\n    //     so that the result can be displayed in seconds.\n    //    \n    //  Generic type - Average\n    //    \n    //  Formula - ((N1 - N0) / F) / (D1 - D0), where the numerator (N)\n    //     represents the number of ticks counted during the last \n    //     sample interval, F represents the frequency of the ticks, \n    //     and the denominator (D) represents the number of operations\n    //     completed during the last sample interval.\n    //    \n    //  Average - ((Nx - N0) / F) / (Dx - D0)\n    //    \n    //  Example - PhysicalDisk\\ Avg. Disk sec/Transfer \n    //++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//+++++++\n    private static Single MyComputeCounterValue(CounterSample s0, CounterSample s1)\n    {\n        Int64 n1 = s1.RawValue;\n        Int64 n0 = s0.RawValue;\n        ulong f = (ulong)s1.SystemFrequency;\n        Int64 d1 = s1.BaseValue;\n        Int64 d0 = s0.BaseValue;\n\n        double numerator = (double)(n1 - n0);\n        double denominator = (double)(d1 - d0);\n        Single counterValue = (Single)((numerator / f) / denominator);\n        return (counterValue);\n    }\n\n    // Output information about the counter sample.\n    private static void OutputSample(CounterSample s)\n    {\n        Console.WriteLine(&quot;+++++++++++&quot;);\n        Console.WriteLine(&quot;Sample values - \\r\\n&quot;);\n        Console.WriteLine(&quot;   CounterType      = &quot; + s.CounterType);\n        Console.WriteLine(&quot;   RawValue         = &quot; + s.RawValue);\n        Console.WriteLine(&quot;   BaseValue        = &quot; + s.BaseValue);\n        Console.WriteLine(&quot;   CounterFrequency = &quot; + s.CounterFrequency);\n        Console.WriteLine(&quot;   CounterTimeStamp = &quot; + s.CounterTimeStamp);\n        Console.WriteLine(&quot;   SystemFrequency  = &quot; + s.SystemFrequency);\n        Console.WriteLine(&quot;   TimeStamp        = &quot; + s.TimeStamp);\n        Console.WriteLine(&quot;   TimeStamp100nSec = &quot; + s.TimeStamp100nSec);\n        Console.WriteLine(&quot;++++++++++++++++++++++&quot;);\n    }\n}\n</code></pre><p> <code>ElapsedTime</code>  </p>\n<pre><code class=\"lang-cs\" name=\"PerformanceCounterType.ElapsedTime#2\">\nusing System;\nusing System.Collections;\nusing System.Collections.Specialized;\nusing System.Diagnostics;\nusing System.Runtime.InteropServices;\n\npublic class App \n{\n\n    public static void Main()\n    {\t\n        CollectSamples();\n    }\n\n   \n    public static void CollectSamples()\n    {\n        const String categoryName = &quot;ElapsedTimeSampleCategory&quot;;\n        const String counterName = &quot;ElapsedTimeSample&quot;;\n\n        // If the category does not exist, create the category and exit.\n        // Performance counters should not be created and immediately used.\n        // There is a latency time to enable the counters, they should be created\n        // prior to executing the application that uses the counters.\n        // Execute this sample a second time to use the category.\n        if ( !PerformanceCounterCategory.Exists(categoryName) ) \n        {\n\n            CounterCreationDataCollection CCDC = new CounterCreationDataCollection();\n\n            // Add the counter.\n            CounterCreationData ETimeData = new CounterCreationData();\n            ETimeData.CounterType = PerformanceCounterType.ElapsedTime;\n            ETimeData.CounterName = counterName;\n            CCDC.Add(ETimeData);\t   \n\t\t\n            // Create the category.\n            PerformanceCounterCategory.Create(categoryName,\n                    &quot;Demonstrates ElapsedTime performance counter usage.&quot;,\n                PerformanceCounterCategoryType.SingleInstance, CCDC);\n            // Return, rerun the application to make use of the new counters.\n            return;\n\n        }\n        else\n        {\n            Console.WriteLine(&quot;Category exists - {0}&quot;, categoryName);\n        }        \n\n        // Create the performance counter.\n        PerformanceCounter PC = new PerformanceCounter(categoryName, \n                                                       counterName, \n                                                       false);\n        // Initialize the counter.\n        PC.RawValue = Stopwatch.GetTimestamp();\n\n        DateTime Start = DateTime.Now;\n\n        // Loop for the samples.\n        for (int j = 0; j &lt; 100; j++) \n        {\n            // Output the values.\n            if ((j % 10) == 9) \n            {\n                Console.WriteLine(&quot;NextValue() = &quot; + PC.NextValue().ToString());\n                Console.WriteLine(&quot;Actual elapsed time = &quot; + DateTime.Now.Subtract(Start).ToString());\n                OutputSample(PC.NextSample());\n            }\n\n            // Reset the counter on every 20th iteration.\n            if (j % 20 == 0)\n            {\n                PC.RawValue = Stopwatch.GetTimestamp();\n                Start = DateTime.Now;\n            }\n            System.Threading.Thread.Sleep(50);\n        }\n\n        Console.WriteLine(&quot;Elapsed time = &quot; + DateTime.Now.Subtract(Start).ToString());\n    }\n\n\t\n    private static void OutputSample(CounterSample s)\n    {\n        Console.WriteLine(&quot;\\r\\n+++++++++++&quot;);\n        Console.WriteLine(&quot;Sample values - \\r\\n&quot;);\n        Console.WriteLine(&quot;   BaseValue        = &quot; + s.BaseValue);\n        Console.WriteLine(&quot;   CounterFrequency = &quot; + s.CounterFrequency);\n        Console.WriteLine(&quot;   CounterTimeStamp = &quot; + s.CounterTimeStamp);\n        Console.WriteLine(&quot;   CounterType      = &quot; + s.CounterType);\n        Console.WriteLine(&quot;   RawValue         = &quot; + s.RawValue);\n        Console.WriteLine(&quot;   SystemFrequency  = &quot; + s.SystemFrequency);\n        Console.WriteLine(&quot;   TimeStamp        = &quot; + s.TimeStamp);\n        Console.WriteLine(&quot;   TimeStamp100nSec = &quot; + s.TimeStamp100nSec);\n        Console.WriteLine(&quot;++++++++++++++++++++++&quot;);\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"PerformanceCounterType.ElapsedTime#2\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\nusing namespace System::Diagnostics;\nusing namespace System::Runtime::InteropServices;\n\nvoid OutputSample( CounterSample s )\n{\n   Console::WriteLine( &quot;\\r\\n+++++++++++&quot; );\n   Console::WriteLine( &quot;Sample values - \\r\\n&quot; );\n   Console::WriteLine( &quot;   BaseValue        = {0}&quot;, s.BaseValue );\n   Console::WriteLine( &quot;   CounterFrequency = {0}&quot;, s.CounterFrequency );\n   Console::WriteLine( &quot;   CounterTimeStamp = {0}&quot;, s.CounterTimeStamp );\n   Console::WriteLine( &quot;   CounterType      = {0}&quot;, s.CounterType );\n   Console::WriteLine( &quot;   RawValue         = {0}&quot;, s.RawValue );\n   Console::WriteLine( &quot;   SystemFrequency  = {0}&quot;, s.SystemFrequency );\n   Console::WriteLine( &quot;   TimeStamp        = {0}&quot;, s.TimeStamp );\n   Console::WriteLine( &quot;   TimeStamp100nSec = {0}&quot;, s.TimeStamp100nSec );\n   Console::WriteLine( &quot;++++++++++++++++++++++&quot; );\n}\n\nvoid CollectSamples()\n{\n   String^ categoryName = &quot;ElapsedTimeSampleCategory&quot;;\n   String^ counterName = &quot;ElapsedTimeSample&quot;;\n   \n   // Create the performance counter category.\n   if (  !PerformanceCounterCategory::Exists( categoryName ) )\n   {\n      CounterCreationDataCollection^ CCDC = gcnew CounterCreationDataCollection;\n      \n      // Add the counter.\n      CounterCreationData^ ETimeData = gcnew CounterCreationData;\n      ETimeData-&gt;CounterType = PerformanceCounterType::ElapsedTime;\n      ETimeData-&gt;CounterName = counterName;\n      CCDC-&gt;Add( ETimeData );\n      \n      // Create the category.\n      PerformanceCounterCategory::Create( categoryName,\n         &quot;Demonstrates ElapsedTime performance counter usage.&quot;,\n         CCDC );\n   }\n   else\n   {\n      Console::WriteLine( &quot;Category exists - {0}&quot;, categoryName );\n   }\n\n   \n   // Create the performance counter.\n   PerformanceCounter^ PC = gcnew PerformanceCounter( categoryName,\n                                                      counterName,\n                                                      false );\n   // Initialize the counter.\n   PC-&gt;RawValue = Stopwatch::GetTimestamp();\n\n   DateTime Start = DateTime::Now;\n   \n   // Loop for the samples.\n   for ( int j = 0; j &lt; 100; j++ )\n   {\n      // Output the values.\n      if ( (j % 10) == 9 )\n      {\n         Console::WriteLine( &quot;NextValue() = {0}&quot;, PC-&gt;NextValue() );\n         Console::WriteLine( &quot;Actual elapsed time = {0}&quot;, DateTime::Now.Subtract( Start ) );\n         OutputSample( PC-&gt;NextSample() );\n      }\n      \n      // Reset the counter on every 20th iteration.\n      if ( j % 20 == 0 )\n      {\n         PC-&gt;RawValue = Stopwatch::GetTimestamp();\n         Start = DateTime::Now;\n      }\n      System::Threading::Thread::Sleep( 50 );\n   }\n\n   Console::WriteLine( &quot;Elapsed time = {0}&quot;, DateTime::Now.Subtract( Start ) );\n}\n\nint main()\n{\n   CollectSamples();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"PerformanceCounterType.ElapsedTime#2\">\nImports System\nImports System.Collections\nImports System.Collections.Specialized\nImports System.Diagnostics\nImports System.Runtime.InteropServices\nImports Microsoft.VisualBasic\n\nPublic Class App\n\n    Public Shared Sub Main()\n        CollectSamples()\n    End Sub\n\n    Private Shared Sub CollectSamples()\n\n        Dim categoryName As String = &quot;ElapsedTimeSampleCategory&quot;\n        Dim counterName As String = &quot;ElapsedTimeSample&quot;\n\n        If Not PerformanceCounterCategory.Exists(categoryName) Then\n\n            Dim CCDC As New CounterCreationDataCollection()\n\n            &#39; Add the counter.\n            Dim ETimeData As New CounterCreationData()\n            ETimeData.CounterType = PerformanceCounterType.ElapsedTime\n            ETimeData.CounterName = counterName\n            CCDC.Add(ETimeData)\n\n            &#39; Create the category.\n            PerformanceCounterCategory.Create(categoryName, _\n               &quot;Demonstrates ElapsedTime performance counter usage.&quot;, _\n                   PerformanceCounterCategoryType.SingleInstance, CCDC)\n\n        Else\n            Console.WriteLine(&quot;Category exists - {0}&quot;, categoryName)\n        End If\n\n        &#39; Create the counter.\n        Dim PC As PerformanceCounter\n        PC = New PerformanceCounter(categoryName, counterName, False)\n\n        &#39; Initialize the counter.\n        PC.RawValue = Stopwatch.GetTimestamp()\n\n        Dim Start As DateTime = DateTime.Now\n\n        &#39; Loop for the samples.\n        Dim j As Integer\n        For j = 0 To 99\n            &#39; Output the values.\n            If j Mod 10 = 9 Then\n                Console.WriteLine((&quot;NextValue() = &quot; _\n                    + PC.NextValue().ToString()))\n                Console.WriteLine((&quot;Actual elapsed time = &quot; _\n                    + DateTime.Now.Subtract(Start).ToString()))\n                OutputSample(PC.NextSample())\n            End If\n\n            &#39; Reset the counter every 20th iteration.\n            If j Mod 20 = 0 Then\n                PC.RawValue = Stopwatch.GetTimestamp()\n                Start = DateTime.Now\n            End If\n            System.Threading.Thread.Sleep(50)\n        Next j\n\n        Console.WriteLine((&quot;Elapsed time = &quot; + _\n              DateTime.Now.Subtract(Start).ToString()))\n    End Sub\n\n\n    Private Shared Sub OutputSample(ByVal s As CounterSample)\n        Console.WriteLine(ControlChars.Lf + ControlChars.Cr + &quot;+++++++&quot;)\n\n        Console.WriteLine(&quot;Sample values - &quot; + ControlChars.Cr _\n              + ControlChars.Lf)\n        Console.WriteLine((&quot;   BaseValue        = &quot; _\n              + s.BaseValue.ToString()))\n        Console.WriteLine((&quot;   CounterFrequency = &quot; + _\n              s.CounterFrequency.ToString()))\n        Console.WriteLine((&quot;   CounterTimeStamp = &quot; + _\n              s.CounterTimeStamp.ToString()))\n        Console.WriteLine((&quot;   CounterType      = &quot; + _\n              s.CounterType.ToString()))\n        Console.WriteLine((&quot;   RawValue         = &quot; + _\n              s.RawValue.ToString()))\n        Console.WriteLine((&quot;   SystemFrequency  = &quot; + _\n              s.SystemFrequency.ToString()))\n        Console.WriteLine((&quot;   TimeStamp        = &quot; + _\n              s.TimeStamp.ToString()))\n        Console.WriteLine((&quot;   TimeStamp100nSec = &quot; + _\n              s.TimeStamp100nSec.ToString()))\n\n        Console.WriteLine(&quot;+++++++&quot;)\n    End Sub\nEnd Class\n</code></pre><p> <code>NumberOfItems32</code>  </p>\n<pre><code class=\"lang-cs\" name=\"PerformanceCounterType.NumberOfItems32#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\nusing System.Diagnostics;\n\npublic class NumberOfItems64\n{\n\n\tprivate static PerformanceCounter PC;\n\n\tpublic static void Main()\n\t{\t\n\t\tArrayList samplesList = new ArrayList();\n\n        // If the category does not exist, create the category and exit.\n        // Performance counters should not be created and immediately used.\n        // There is a latency time to enable the counters, they should be created\n        // prior to executing the application that uses the counters.\n        // Execute this sample a second time to use the category.\n        if (SetupCategory())\n            return;\n        CreateCounters();\n\t\tCollectSamples(samplesList);\n\t\tCalculateResults(samplesList);\n\t}\n\n    private static bool SetupCategory()\n    {\t\t\n        if ( !PerformanceCounterCategory.Exists(&quot;NumberOfItems32SampleCategory&quot;) ) \n        {\n\n            CounterCreationDataCollection CCDC = new CounterCreationDataCollection();\n\n            // Add the counter.\n            CounterCreationData NOI64 = new CounterCreationData();\n            NOI64.CounterType = PerformanceCounterType.NumberOfItems64;\n            NOI64.CounterName = &quot;NumberOfItems32Sample&quot;;\n            CCDC.Add(NOI64);\n\n            // Create the category.\n            PerformanceCounterCategory.Create(&quot;NumberOfItems32SampleCategory&quot;,\n                &quot;Demonstrates usage of the NumberOfItems32 performance counter type.&quot;,\n                PerformanceCounterCategoryType.SingleInstance, CCDC);\n\n            return(true);\n        }\n        else\n        {\n            Console.WriteLine(&quot;Category exists - NumberOfItems32SampleCategory&quot;);\n            return(false);\n        }\n    }\n\n    private static void CreateCounters()\n    {\n        // Create the counter.\n        PC = new PerformanceCounter(&quot;NumberOfItems32SampleCategory&quot;, \n\t\t\t&quot;NumberOfItems32Sample&quot;, \n\t\t\tfalse);\n\n        PC.RawValue=0;\n        \n    }\n\n\tprivate static void CollectSamples(ArrayList samplesList)\n\t{\n\t\n\t\t\n\t\t\n\t\tRandom r = new Random( DateTime.Now.Millisecond );\n\n\t\t// Loop for the samples.\n\t\tfor (int j = 0; j &lt; 100; j++) \n\t\t{\n\t        \n\t\t\tint value = r.Next(1, 10);\n\t\t\tConsole.Write(j + &quot; = &quot; + value);\n\n\t\t\tPC.IncrementBy(value);\n\n\t\t\tif ((j % 10) == 9) \n\t\t\t{\n\t\t\t\tOutputSample(PC.NextSample());\n\t\t\t\tsamplesList.Add( PC.NextSample() );\n\t\t\t}\n\t\t\telse\n\t\t\t\tConsole.WriteLine();\n\t        \n\t\t\tSystem.Threading.Thread.Sleep(50);\n\t\t}\n\n\t\t\n\t}\n\n\n    private static void CalculateResults(ArrayList samplesList)\n    {\n        for(int i = 0; i &lt; (samplesList.Count - 1); i++)\n        {\n            // Output the sample.\n            OutputSample( (CounterSample)samplesList[i] );\n            OutputSample( (CounterSample)samplesList[i+1] );\n\n\t\t\t// Use .NET to calculate the counter value.\n            Console.WriteLine(&quot;.NET computed counter value = &quot; + \n                CounterSampleCalculator.ComputeCounterValue((CounterSample)samplesList[i],\n                (CounterSample)samplesList[i+1]) );\n\n\t\t\t// Calculate the counter value manually.\n            Console.WriteLine(&quot;My computed counter value = &quot; + \n                MyComputeCounterValue((CounterSample)samplesList[i],\n                (CounterSample)samplesList[i+1]) );\n\n        }\n    }\n\t\n\n\t//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n\t//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n\tprivate static Single MyComputeCounterValue(CounterSample s0, CounterSample s1)\n\t{\n\t\tSingle counterValue = s1.RawValue;\n\t\treturn(counterValue);\n\t}\n\t\n\t// Output information about the counter sample.\n\tprivate static void OutputSample(CounterSample s)\n\t{\n\t\tConsole.WriteLine(&quot;\\r\\n+++++++++++&quot;);\n\t\tConsole.WriteLine(&quot;Sample values - \\r\\n&quot;);\n\t\tConsole.WriteLine(&quot;   BaseValue        = &quot; + s.BaseValue);\n\t\tConsole.WriteLine(&quot;   CounterFrequency = &quot; + s.CounterFrequency);\n\t\tConsole.WriteLine(&quot;   CounterTimeStamp = &quot; + s.CounterTimeStamp);\n\t\tConsole.WriteLine(&quot;   CounterType      = &quot; + s.CounterType);\n\t\tConsole.WriteLine(&quot;   RawValue         = &quot; + s.RawValue);\n\t\tConsole.WriteLine(&quot;   SystemFrequency  = &quot; + s.SystemFrequency);\n\t\tConsole.WriteLine(&quot;   TimeStamp        = &quot; + s.TimeStamp);\n\t\tConsole.WriteLine(&quot;   TimeStamp100nSec = &quot; + s.TimeStamp100nSec);\n\t\tConsole.WriteLine(&quot;++++++++++++++++++++++&quot;);\n\t}\n\n\n\t\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"PerformanceCounterType.NumberOfItems32#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\nusing namespace System::Diagnostics;\nfloat MyComputeCounterValue( CounterSample s0, CounterSample s1 )\n{\n   float counterValue = (float)s1.RawValue;\n   return counterValue;\n}\n\n// Output information about the counter sample.\nvoid OutputSample( CounterSample s )\n{\n   Console::WriteLine( &quot;\\r\\n+++++++++++&quot; );\n   Console::WriteLine( &quot;Sample values - \\r\\n&quot; );\n   Console::WriteLine( &quot;   BaseValue        = {0}&quot;, s.BaseValue );\n   Console::WriteLine( &quot;   CounterFrequency = {0}&quot;, s.CounterFrequency );\n   Console::WriteLine( &quot;   CounterTimeStamp = {0}&quot;, s.CounterTimeStamp );\n   Console::WriteLine( &quot;   CounterType      = {0}&quot;, s.CounterType );\n   Console::WriteLine( &quot;   RawValue         = {0}&quot;, s.RawValue );\n   Console::WriteLine( &quot;   SystemFrequency  = {0}&quot;, s.SystemFrequency );\n   Console::WriteLine( &quot;   TimeStamp        = {0}&quot;, s.TimeStamp );\n   Console::WriteLine( &quot;   TimeStamp100nSec = {0}&quot;, s.TimeStamp100nSec );\n   Console::WriteLine( &quot;++++++++++++++++++++++&quot; );\n}\n\nbool SetupCategory()\n{\n   if (  !PerformanceCounterCategory::Exists( &quot;NumberOfItems32SampleCategory&quot; ) )\n   {\n      CounterCreationDataCollection^ CCDC = gcnew CounterCreationDataCollection;\n\n      // Add the counter.\n      CounterCreationData^ NOI64 = gcnew CounterCreationData;\n      NOI64-&gt;CounterType = PerformanceCounterType::NumberOfItems64;\n      NOI64-&gt;CounterName = &quot;NumberOfItems32Sample&quot;;\n      CCDC-&gt;Add( NOI64 );\n\n      // Create the category.\n      PerformanceCounterCategory::Create( &quot;NumberOfItems32SampleCategory&quot;, &quot;Demonstrates usage of the NumberOfItems32 performance counter type.&quot;, CCDC );\n      return true;\n   }\n   else\n   {\n      Console::WriteLine( &quot;Category exists - NumberOfItems32SampleCategory&quot; );\n      return false;\n   }\n}\n\nvoid CreateCounters( PerformanceCounter^% PC )\n{\n   // Create the counter.\n   PC = gcnew PerformanceCounter( &quot;NumberOfItems32SampleCategory&quot;,&quot;NumberOfItems32Sample&quot;,false );\n   PC-&gt;RawValue = 0;\n}\n\nvoid CollectSamples( ArrayList^ samplesList, PerformanceCounter^ PC )\n{\n   Random^ r = gcnew Random( DateTime::Now.Millisecond );\n\n   // Loop for the samples.\n   for ( int j = 0; j &lt; 100; j++ )\n   {\n      int value = r-&gt;Next( 1, 10 );\n      Console::Write( &quot;{0} = {1}&quot;, j, value );\n      PC-&gt;IncrementBy( value );\n      if ( (j % 10) == 9 )\n      {\n         OutputSample( PC-&gt;NextSample() );\n         samplesList-&gt;Add( PC-&gt;NextSample() );\n      }\n      else\n            Console::WriteLine();\n      System::Threading::Thread::Sleep( 50 );\n\n   }\n}\n\nvoid CalculateResults( ArrayList^ samplesList )\n{\n   for ( int i = 0; i &lt; (samplesList-&gt;Count - 1); i++ )\n   {\n      // Output the sample.\n      OutputSample(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i ]) );\n      OutputSample(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i + 1 ]) );\n\n      // Use .NET to calculate the counter value.\n      Console::WriteLine( &quot;.NET computed counter value = {0}&quot;, CounterSampleCalculator::ComputeCounterValue(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i ]),  *safe_cast&lt;CounterSample^&gt;(samplesList[ i + 1 ]) ) );\n\n      // Calculate the counter value manually.\n      Console::WriteLine( &quot;My computed counter value = {0}&quot;, MyComputeCounterValue(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i ]),  *safe_cast&lt;CounterSample^&gt;(samplesList[ i + 1 ]) ) );\n   }\n}\n\nvoid main()\n{\n   ArrayList^ samplesList = gcnew ArrayList;\n   PerformanceCounter^ PC;\n   SetupCategory();\n   CreateCounters( PC );\n   CollectSamples( samplesList, PC );\n   CalculateResults( samplesList );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"PerformanceCounterType.NumberOfItems32#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\nImports System.Diagnostics\n\n _\n\nPublic Class NumberOfItems64\n\n    Private Shared PC As PerformanceCounter\n\n\n    Public Shared Sub Main()\n        Dim samplesList As New ArrayList()\n        &#39;If the category does not exist, create the category and exit.\n        &#39;Performance counters should not be created and immediately used.\n        &#39;There is a latency time to enable the counters, they should be created\n        &#39;prior to executing the application that uses the counters.\n        &#39;Execute this sample a second time to use the counters.\n        If Not (SetupCategory()) Then\n            CreateCounters()\n            CollectSamples(samplesList)\n            CalculateResults(samplesList)\n        End If\n    End Sub &#39;Main\n\n\n    Private Shared Function SetupCategory() As Boolean\n        If Not PerformanceCounterCategory.Exists(&quot;NumberOfItems32SampleCategory&quot;) Then\n\n            Dim CCDC As New CounterCreationDataCollection()\n\n            &#39; Add the counter.\n            Dim NOI64 As New CounterCreationData()\n            NOI64.CounterType = PerformanceCounterType.NumberOfItems64\n            NOI64.CounterName = &quot;NumberOfItems32Sample&quot;\n            CCDC.Add(NOI64)\n\n            &#39; Create the category.\n            PerformanceCounterCategory.Create(&quot;NumberOfItems32SampleCategory&quot;, _\n            &quot;Demonstrates usage of the NumberOfItems32 performance counter type.&quot;, _\n                      PerformanceCounterCategoryType.SingleInstance, CCDC)\n\n            Return True\n        Else\n            Console.WriteLine(&quot;Category exists - NumberOfItems32SampleCategory&quot;)\n            Return False\n        End If\n    End Function &#39;SetupCategory\n\n\n    Private Shared Sub CreateCounters()\n        &#39; Create the counter.\n        PC = New PerformanceCounter(&quot;NumberOfItems32SampleCategory&quot;, &quot;NumberOfItems32Sample&quot;, False)\n\n        PC.RawValue = 0\n    End Sub &#39;CreateCounters\n\n\n    Private Shared Sub CollectSamples(ByVal samplesList As ArrayList)\n\n\n\n        Dim r As New Random(DateTime.Now.Millisecond)\n\n        &#39; Loop for the samples.\n        Dim j As Integer\n        For j = 0 To 99\n\n            Dim value As Integer = r.Next(1, 10)\n            Console.Write(j.ToString() + &quot; = &quot; + value.ToString())\n\n            PC.IncrementBy(value)\n\n            If j Mod 10 = 9 Then\n                OutputSample(PC.NextSample())\n                samplesList.Add(PC.NextSample())\n            Else\n                Console.WriteLine()\n            End If\n            System.Threading.Thread.Sleep(50)\n        Next j\n    End Sub &#39;CollectSamples\n\n\n\n\n    Private Shared Sub CalculateResults(ByVal samplesList As ArrayList)\n        Dim i As Integer\n        For i = 0 To (samplesList.Count - 1) - 1\n            &#39; Output the sample.\n            OutputSample(CType(samplesList(i), CounterSample))\n            OutputSample(CType(samplesList((i + 1)), CounterSample))\n\n            &#39; Use .NET to calculate the counter value.\n            Console.WriteLine(&quot;.NET computed counter value = &quot; + CounterSampleCalculator.ComputeCounterValue(CType(samplesList(i), CounterSample), CType(samplesList((i + 1)), CounterSample)).ToString())\n\n            &#39; Calculate the counter value manually.\n            Console.WriteLine(&quot;My computed counter value = &quot; + MyComputeCounterValue(CType(samplesList(i), CounterSample), CType(samplesList((i + 1)), CounterSample)).ToString())\n        Next i\n    End Sub &#39;CalculateResults\n\n\n\n\n    &#39;++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n    &#39;++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n    Private Shared Function MyComputeCounterValue(ByVal s0 As CounterSample, ByVal s1 As CounterSample) As [Single]\n        Dim counterValue As [Single] = s1.RawValue\n        Return counterValue\n    End Function &#39;MyComputeCounterValue\n\n\n    &#39; Output information about the counter sample.\n    Private Shared Sub OutputSample(ByVal s As CounterSample)\n        Console.WriteLine(ControlChars.Lf + ControlChars.Cr + &quot;+++++++++++&quot;)\n        Console.WriteLine(&quot;Sample values - &quot; + ControlChars.Lf + ControlChars.Cr)\n        Console.WriteLine(&quot;   BaseValue        = &quot; + s.BaseValue.ToString())\n        Console.WriteLine(&quot;   CounterFrequency = &quot; + s.CounterFrequency.ToString())\n        Console.WriteLine(&quot;   CounterTimeStamp = &quot; + s.CounterTimeStamp.ToString())\n        Console.WriteLine(&quot;   CounterType      = &quot; + s.CounterType.ToString())\n        Console.WriteLine(&quot;   RawValue         = &quot; + s.RawValue.ToString())\n        Console.WriteLine(&quot;   SystemFrequency  = &quot; + s.SystemFrequency.ToString())\n        Console.WriteLine(&quot;   TimeStamp        = &quot; + s.TimeStamp.ToString())\n        Console.WriteLine(&quot;   TimeStamp100nSec = &quot; + s.TimeStamp100nSec.ToString())\n        Console.WriteLine(&quot;++++++++++++++++++++++&quot;)\n    End Sub &#39;OutputSample\nEnd Class &#39;NumberOfItems64 \n\n</code></pre><p> <code>NumberOfItems64</code>  </p>\n<pre><code class=\"lang-cpp\" name=\"PerformanceCounterType.NumberOfItems64#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\nusing namespace System::Diagnostics;\nfloat MyComputeCounterValue( CounterSample s0, CounterSample s1 )\n{\n   float counterValue = (float)s1.RawValue;\n   return counterValue;\n}\n\n\n// Output information about the counter sample.\nvoid OutputSample( CounterSample s )\n{\n   Console::WriteLine( &quot;\\r\\n+++++++++++&quot; );\n   Console::WriteLine( &quot;Sample values - \\r\\n&quot; );\n   Console::WriteLine( &quot;   BaseValue        = {0}&quot;, s.BaseValue );\n   Console::WriteLine( &quot;   CounterFrequency = {0}&quot;, s.CounterFrequency );\n   Console::WriteLine( &quot;   CounterTimeStamp = {0}&quot;, s.CounterTimeStamp );\n   Console::WriteLine( &quot;   CounterType      = {0}&quot;, s.CounterType );\n   Console::WriteLine( &quot;   RawValue         = {0}&quot;, s.RawValue );\n   Console::WriteLine( &quot;   SystemFrequency  = {0}&quot;, s.SystemFrequency );\n   Console::WriteLine( &quot;   TimeStamp        = {0}&quot;, s.TimeStamp );\n   Console::WriteLine( &quot;   TimeStamp100nSec = {0}&quot;, s.TimeStamp100nSec );\n   Console::WriteLine( &quot;++++++++++++++++++++++&quot; );\n}\n\nbool SetupCategory()\n{\n   if (  !PerformanceCounterCategory::Exists( &quot;NumberOfItems64SampleCategory&quot; ) )\n   {\n      CounterCreationDataCollection^ CCDC = gcnew CounterCreationDataCollection;\n\n      // Add the counter.\n      CounterCreationData^ NOI64 = gcnew CounterCreationData;\n      NOI64-&gt;CounterType = PerformanceCounterType::NumberOfItems64;\n      NOI64-&gt;CounterName = &quot;NumberOfItems64Sample&quot;;\n      CCDC-&gt;Add( NOI64 );\n\n      // Create the category.\n      PerformanceCounterCategory::Create( &quot;NumberOfItems64SampleCategory&quot;, &quot;Demonstrates usage of the NumberOfItems64 performance counter type.&quot;, CCDC );\n      return true;\n   }\n   else\n   {\n      Console::WriteLine( &quot;Category exists - NumberOfItems64SampleCategory&quot; );\n      return false;\n   }\n}\n\nvoid CreateCounters( PerformanceCounter^% PC )\n{\n   // Create the counters.\n   PC = gcnew PerformanceCounter( &quot;NumberOfItems64SampleCategory&quot;,&quot;NumberOfItems64Sample&quot;,false );\n   PC-&gt;RawValue = 0;\n}\n\nvoid CollectSamples( ArrayList^ samplesList, PerformanceCounter^ PC )\n{\n   Random^ r = gcnew Random( DateTime::Now.Millisecond );\n\n   // Loop for the samples.\n   for ( int j = 0; j &lt; 100; j++ )\n   {\n      int value = r-&gt;Next( 1, 10 );\n      Console::Write( &quot;{0} = {1}&quot;, j, value );\n      PC-&gt;IncrementBy( value );\n      if ( (j % 10) == 9 )\n      {\n         OutputSample( PC-&gt;NextSample() );\n         samplesList-&gt;Add( PC-&gt;NextSample() );\n      }\n      else\n            Console::WriteLine();\n      System::Threading::Thread::Sleep( 50 );\n   }\n}\n\nvoid CalculateResults( ArrayList^ samplesList )\n{\n   for ( int i = 0; i &lt; (samplesList-&gt;Count - 1); i++ )\n   {\n      // Output the sample.\n      OutputSample(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i ]) );\n      OutputSample(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i + 1 ]) );\n\n      // Use .NET to calculate the counter value.\n      Console::WriteLine( &quot;.NET computed counter value = {0}&quot;, CounterSampleCalculator::ComputeCounterValue(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i ]),  *safe_cast&lt;CounterSample^&gt;(samplesList[ i + 1 ]) ) );\n\n      // Calculate the counter value manually.\n      Console::WriteLine( &quot;My computed counter value = {0}&quot;, MyComputeCounterValue(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i ]),  *safe_cast&lt;CounterSample^&gt;(samplesList[ i + 1 ]) ) );\n   }\n}\n\nint main()\n{\n   ArrayList^ samplesList = gcnew ArrayList;\n   PerformanceCounter^ PC;\n   SetupCategory();\n   CreateCounters( PC );\n   CollectSamples( samplesList, PC );\n   CalculateResults( samplesList );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"PerformanceCounterType.NumberOfItems64#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\nusing System.Diagnostics;\n\npublic class NumberOfItems64\n{\n\n\tprivate static PerformanceCounter PC;\n\n\tpublic static void Main()\n\t{\t\n\t\tArrayList samplesList = new ArrayList();\n\n        // If the category does not exist, create the category and exit.\n        // Perfomance counters should not be created and immediately used.\n        // There is a latency time to enable the counters, they should be created\n        // prior to executing the application that uses the counters.\n        // Execute this sample a second time to use the category.\n        if (SetupCategory())\n            return;\n\t\tCreateCounters();\n\t\tCollectSamples(samplesList);\n\t\tCalculateResults(samplesList);\n\t}\n\n\tprivate static bool SetupCategory()\n\t{\t\t\n\t\tif ( !PerformanceCounterCategory.Exists(&quot;NumberOfItems64SampleCategory&quot;) ) \n\t\t{\n\n\t\t\tCounterCreationDataCollection CCDC = new CounterCreationDataCollection();\n\n\t\t\t// Add the counter.\n\t\t\tCounterCreationData NOI64 = new CounterCreationData();\n\t\t\tNOI64.CounterType = PerformanceCounterType.NumberOfItems64;\n\t\t\tNOI64.CounterName = &quot;NumberOfItems64Sample&quot;;\n\t\t\tCCDC.Add(NOI64);\n\n\t\t\t// Create the category.\n\t\t\tPerformanceCounterCategory.Create(&quot;NumberOfItems64SampleCategory&quot;,\n                &quot;Demonstrates usage of the NumberOfItems64 performance counter type.&quot;,\n                PerformanceCounterCategoryType.SingleInstance, CCDC);\n\t\t\treturn(true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tConsole.WriteLine(&quot;Category exists - NumberOfItems64SampleCategory&quot;);\n\t\t\treturn(false);\n\t\t}\n\t}\n\n    private static void CreateCounters()\n    {\n        // Create the counters.\n        PC = new PerformanceCounter(&quot;NumberOfItems64SampleCategory&quot;, \n            &quot;NumberOfItems64Sample&quot;, \n            false);\n\n        PC.RawValue=0;\n        \n    }\n\n    private static void CollectSamples(ArrayList samplesList)\n    {\n\t\t\n        Random r = new Random( DateTime.Now.Millisecond );\n\n        // Loop for the samples.\n        for (int j = 0; j &lt; 100; j++) \n        {\n\t        \n            int value = r.Next(1, 10);\n            Console.Write(j + &quot; = &quot; + value);\n\n            PC.IncrementBy(value);\n\n            if ((j % 10) == 9) \n            {\n                OutputSample(PC.NextSample());\n                samplesList.Add( PC.NextSample() );\n            }\n            else\n                Console.WriteLine();\n\t        \n            System.Threading.Thread.Sleep(50);\n        }\n\n    }\n\n\tprivate static void CalculateResults(ArrayList samplesList)\n\t{\n\t\tfor(int i = 0; i &lt; (samplesList.Count - 1); i++)\n\t\t{\n\t\t\t// Output the sample.\n\t\t\tOutputSample( (CounterSample)samplesList[i] );\n\t\t\tOutputSample( (CounterSample)samplesList[i+1] );\n\n            // Use .NET to calculate the counter value.\n\t\t\tConsole.WriteLine(&quot;.NET computed counter value = &quot; + \n\t\t\t\tCounterSampleCalculator.ComputeCounterValue((CounterSample)samplesList[i],\n\t\t\t\t(CounterSample)samplesList[i+1]) );\n\n            // Calculate the counter value manually.\n\t\t\tConsole.WriteLine(&quot;My computed counter value = &quot; + \n\t\t\t\tMyComputeCounterValue((CounterSample)samplesList[i],\n\t\t\t\t(CounterSample)samplesList[i+1]) );\n\n\t\t}\n\t}\n\n\t\n\t//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n\t//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n\tprivate static Single MyComputeCounterValue(CounterSample s0, CounterSample s1)\n\t{\n\t\tSingle counterValue = s1.RawValue;\n\t\treturn(counterValue);\n\t}\n\t\n\t// Output information about the counter sample.\n    private static void OutputSample(CounterSample s)\n\t{\n\t\tConsole.WriteLine(&quot;\\r\\n+++++++++++&quot;);\n\t\tConsole.WriteLine(&quot;Sample values - \\r\\n&quot;);\n\t\tConsole.WriteLine(&quot;   BaseValue        = &quot; + s.BaseValue);\n\t\tConsole.WriteLine(&quot;   CounterFrequency = &quot; + s.CounterFrequency);\n\t\tConsole.WriteLine(&quot;   CounterTimeStamp = &quot; + s.CounterTimeStamp);\n\t\tConsole.WriteLine(&quot;   CounterType      = &quot; + s.CounterType);\n\t\tConsole.WriteLine(&quot;   RawValue         = &quot; + s.RawValue);\n\t\tConsole.WriteLine(&quot;   SystemFrequency  = &quot; + s.SystemFrequency);\n\t\tConsole.WriteLine(&quot;   TimeStamp        = &quot; + s.TimeStamp);\n\t\tConsole.WriteLine(&quot;   TimeStamp100nSec = &quot; + s.TimeStamp100nSec);\n\t\tConsole.WriteLine(&quot;++++++++++++++++++++++&quot;);\n\t}\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"PerformanceCounterType.NumberOfItems64#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\nImports System.Diagnostics\n\n _\n\nPublic Class NumberOfItems64\n\n    Private Shared PC As PerformanceCounter\n\n\n    Public Shared Sub Main()\n        Dim samplesList As New ArrayList()\n\n        &#39;If the category does not exist, create the category and exit.\n        &#39;Performance counters should not be created and immediately used.\n        &#39;There is a latency time to enable the counters, they should be created\n        &#39;prior to executing the application that uses the counters.\n        &#39;Execute this sample a second time to use the counters.\n        If Not (SetupCategory()) Then\n            CreateCounters()\n            CollectSamples(samplesList)\n            CalculateResults(samplesList)\n        End If\n\n    End Sub &#39;Main\n\n\n    Private Shared Function SetupCategory() As Boolean\n        If Not PerformanceCounterCategory.Exists(&quot;NumberOfItems64SampleCategory&quot;) Then\n\n            Dim CCDC As New CounterCreationDataCollection()\n\n            &#39; Add the counter.\n            Dim NOI64 As New CounterCreationData()\n            NOI64.CounterType = PerformanceCounterType.NumberOfItems64\n            NOI64.CounterName = &quot;NumberOfItems64Sample&quot;\n            CCDC.Add(NOI64)\n\n            &#39; Create the category.\n            PerformanceCounterCategory.Create(&quot;NumberOfItems64SampleCategory&quot;, _\n            &quot;Demonstrates usage of the NumberOfItems64 performance counter type.&quot;, _\n                   PerformanceCounterCategoryType.SingleInstance, CCDC)\n\n            Return True\n        Else\n            Console.WriteLine(&quot;Category exists - NumberOfItems64SampleCategory&quot;)\n            Return False\n        End If\n    End Function &#39;SetupCategory\n\n\n    Private Shared Sub CreateCounters()\n        &#39; Create the counters.\n        PC = New PerformanceCounter(&quot;NumberOfItems64SampleCategory&quot;, &quot;NumberOfItems64Sample&quot;, False)\n\n        PC.RawValue = 0\n    End Sub &#39;CreateCounters\n\n\n    Private Shared Sub CollectSamples(ByVal samplesList As ArrayList)\n\n        Dim r As New Random(DateTime.Now.Millisecond)\n\n        &#39; Loop for the samples.\n        Dim j As Integer\n        For j = 0 To 99\n\n            Dim value As Integer = r.Next(1, 10)\n            Console.Write((j.ToString() + &quot; = &quot; + value.ToString()))\n\n            PC.IncrementBy(value)\n\n            If j Mod 10 = 9 Then\n                OutputSample(PC.NextSample())\n                samplesList.Add(PC.NextSample())\n            Else\n                Console.WriteLine()\n            End If\n            System.Threading.Thread.Sleep(50)\n        Next j\n    End Sub &#39;CollectSamples\n\n\n    Private Shared Sub CalculateResults(ByVal samplesList As ArrayList)\n        Dim i As Integer\n        For i = 0 To (samplesList.Count - 1) - 1\n            &#39; Output the sample.\n            OutputSample(CType(samplesList(i), CounterSample))\n            OutputSample(CType(samplesList((i + 1)), CounterSample))\n\n            &#39; Use .NET to calculate the counter value.\n            Console.WriteLine(&quot;.NET computed counter value = &quot; + CounterSampleCalculator.ComputeCounterValue(CType(samplesList(i), CounterSample), CType(samplesList((i + 1)), CounterSample)).ToString())\n\n            &#39; Calculate the counter value manually.\n            Console.WriteLine(&quot;My computed counter value = &quot; + MyComputeCounterValue(CType(samplesList(i), CounterSample), CType(samplesList((i + 1)), CounterSample)).ToString())\n        Next i\n    End Sub &#39;CalculateResults\n\n\n\n\n    &#39;++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n    &#39;++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n    Private Shared Function MyComputeCounterValue(ByVal s0 As CounterSample, ByVal s1 As CounterSample) As [Single]\n        Dim counterValue As [Single] = s1.RawValue\n        Return counterValue\n    End Function &#39;MyComputeCounterValue\n\n\n    &#39; Output information about the counter sample.\n    Private Shared Sub OutputSample(ByVal s As CounterSample)\n        Console.WriteLine(ControlChars.Lf + ControlChars.Cr + &quot;+++++++++++&quot;)\n        Console.WriteLine(&quot;Sample values - &quot; + ControlChars.Lf + ControlChars.Cr)\n        Console.WriteLine((&quot;   BaseValue        = &quot; + s.BaseValue.ToString()))\n        Console.WriteLine((&quot;   CounterFrequency = &quot; + s.CounterFrequency.ToString()))\n        Console.WriteLine((&quot;   CounterTimeStamp = &quot; + s.CounterTimeStamp.ToString()))\n        Console.WriteLine((&quot;   CounterType      = &quot; + s.CounterType.ToString()))\n        Console.WriteLine((&quot;   RawValue         = &quot; + s.RawValue.ToString()))\n        Console.WriteLine((&quot;   SystemFrequency  = &quot; + s.SystemFrequency.ToString()))\n        Console.WriteLine((&quot;   TimeStamp        = &quot; + s.TimeStamp.ToString()))\n        Console.WriteLine((&quot;   TimeStamp100nSec = &quot; + s.TimeStamp100nSec.ToString()))\n        Console.WriteLine(&quot;++++++++++++++++++++++&quot;)\n    End Sub &#39;OutputSample\nEnd Class &#39;NumberOfItems64 \n</code></pre><p> <code>SampleFraction</code>  </p>\n<pre><code class=\"lang-vb\" name=\"PerformanceCounterType.SampleFraction#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\nImports System.Diagnostics\n\n\n&#39; Provides a SampleFraction counter to measure the percentage of the user processor \n&#39; time for this process to total processor time for the process.\n\nPublic Class App\n\n    Private Shared perfCounter As PerformanceCounter\n    Private Shared basePerfCounter As PerformanceCounter\n    Private Shared thisProcess As Process = Process.GetCurrentProcess()\n\n\n    Public Shared Sub Main()\n\n        Dim samplesList As New ArrayList()\n\n        &#39; If the category does not exist, create the category and exit.\n        &#39; Performance counters should not be created and immediately used.\n        &#39; There is a latency time to enable the counters, they should be created\n        &#39; prior to executing the application that uses the counters.\n        &#39; Execute this sample a second time to use the category.\n        If SetupCategory() Then\n            Return\n        End If\n        CreateCounters()\n        CollectSamples(samplesList)\n        CalculateResults(samplesList)\n\n    End Sub &#39;Main\n\n\n\n    Private Shared Function SetupCategory() As Boolean\n        If Not PerformanceCounterCategory.Exists(&quot;SampleFractionCategory&quot;) Then\n\n            Dim CCDC As New CounterCreationDataCollection()\n\n            &#39; Add the counter.\n            Dim sampleFraction As New CounterCreationData()\n            sampleFraction.CounterType = PerformanceCounterType.SampleFraction\n            sampleFraction.CounterName = &quot;SampleFractionSample&quot;\n            CCDC.Add(sampleFraction)\n\n            &#39; Add the base counter.\n            Dim sampleFractionBase As New CounterCreationData()\n            sampleFractionBase.CounterType = PerformanceCounterType.SampleBase\n            sampleFractionBase.CounterName = &quot;SampleFractionSampleBase&quot;\n            CCDC.Add(sampleFractionBase)\n\n            &#39; Create the category.\n            PerformanceCounterCategory.Create(&quot;SampleFractionCategory&quot;, &quot;Demonstrates usage of the SampleFraction performance counter type.&quot;, PerformanceCounterCategoryType.SingleInstance, CCDC)\n\n            Return True\n        Else\n            Console.WriteLine(&quot;Category exists - SampleFractionCategory&quot;)\n            Return False\n        End If\n\n    End Function &#39;SetupCategory\n\n\n    Private Shared Sub CreateCounters()\n        &#39; Create the counters.\n        perfCounter = New PerformanceCounter(&quot;SampleFractionCategory&quot;, &quot;SampleFractionSample&quot;, False)\n\n\n        basePerfCounter = New PerformanceCounter(&quot;SampleFractionCategory&quot;, &quot;SampleFractionSampleBase&quot;, False)\n\n\n        perfCounter.RawValue = thisProcess.UserProcessorTime.Ticks\n        basePerfCounter.RawValue = thisProcess.TotalProcessorTime.Ticks\n\n    End Sub &#39;CreateCounters\n\n    Private Shared Sub CollectSamples(ByVal samplesList As ArrayList)\n\n\n        &#39; Loop for the samples.\n        Dim j As Integer\n        For j = 0 To 99\n\n            perfCounter.IncrementBy(thisProcess.UserProcessorTime.Ticks)\n\n            basePerfCounter.IncrementBy(thisProcess.TotalProcessorTime.Ticks)\n\n            If j Mod 10 = 9 Then\n                OutputSample(perfCounter.NextSample())\n                samplesList.Add(perfCounter.NextSample())\n            Else\n                Console.WriteLine()\n            End If\n            System.Threading.Thread.Sleep(50)\n        Next j\n\n    End Sub &#39;CollectSamples\n\n\n    Private Shared Sub CalculateResults(ByVal samplesList As ArrayList)\n        Dim i As Integer\n        For i = 0 To (samplesList.Count - 1)\n            &#39; Output the sample.\n            OutputSample(CType(samplesList(i), CounterSample))\n            OutputSample(CType(samplesList((i + 1)), CounterSample))\n\n            &#39; Use .NET to calculate the counter value.\n            Console.WriteLine(&quot;.NET computed counter value = &quot; + CounterSampleCalculator.ComputeCounterValue(CType(samplesList(i), CounterSample), CType(samplesList((i + 1)), CounterSample)))\n\n            &#39; Calculate the counter value manually.\n            Console.WriteLine(&quot;My computed counter value = &quot; + MyComputeCounterValue(CType(samplesList(i), CounterSample), CType(samplesList((i + 1)), CounterSample)))\n        Next i\n\n    End Sub &#39;CalculateResults\n\n\n\n\n    &#39;++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n    &#39; Description - This counter type provides A percentage counter that shows the \n    &#39; average ratio of user proccessor time to total processor time  during the last \n    &#39; two sample intervals.\n    &#39;++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n    Private Shared Function MyComputeCounterValue(ByVal s0 As CounterSample, ByVal s1 As CounterSample) As [Single]\n        Dim numerator As [Single] = CType(s1.RawValue, [Single]) - CType(s0.RawValue, [Single])\n        Dim denomenator As [Single] = CType(s1.BaseValue, [Single]) - CType(s0.BaseValue, [Single])\n        Dim counterValue As [Single] = 100 * (numerator / denomenator)\n        Return counterValue\n\n    End Function &#39;MyComputeCounterValue\n\n\n    &#39; Output information about the counter sample.\n    Private Shared Sub OutputSample(ByVal s As CounterSample)\n        Console.WriteLine(vbCr + vbLf + &quot;+++++++++++&quot;)\n        Console.WriteLine(&quot;Sample values - &quot; + vbCr + vbLf)\n        Console.WriteLine(&quot;   BaseValue        = &quot; + s.BaseValue)\n        Console.WriteLine(&quot;   CounterFrequency = &quot; + s.CounterFrequency)\n        Console.WriteLine(&quot;   CounterTimeStamp = &quot; + s.CounterTimeStamp)\n        Console.WriteLine(&quot;   CounterType      = &quot; + s.CounterType)\n        Console.WriteLine(&quot;   RawValue         = &quot; + s.RawValue)\n        Console.WriteLine(&quot;   SystemFrequency  = &quot; + s.SystemFrequency)\n        Console.WriteLine(&quot;   TimeStamp        = &quot; + s.TimeStamp)\n        Console.WriteLine(&quot;   TimeStamp100nSec = &quot; + s.TimeStamp100nSec)\n        Console.WriteLine(&quot;++++++++++++++++++++++&quot;)\n\n    End Sub &#39;OutputSample\nEnd Class &#39;App\n</code></pre><pre><code class=\"lang-cs\" name=\"PerformanceCounterType.SampleFraction#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\nusing System.Diagnostics;\n\n// Provides a SampleFraction counter to measure the percentage of the user processor \n// time for this process to total processor time for the process.\npublic class App\n{\n\n    private static PerformanceCounter perfCounter;\n    private static PerformanceCounter basePerfCounter;\n    private static Process thisProcess = Process.GetCurrentProcess();\n\n    public static void Main()\n    {\n\n        ArrayList samplesList = new ArrayList();\n\n        // If the category does not exist, create the category and exit.\n        // Performance counters should not be created and immediately used.\n        // There is a latency time to enable the counters, they should be created\n        // prior to executing the application that uses the counters.\n        // Execute this sample a second time to use the category.\n        if (SetupCategory())\n            return;\n        CreateCounters();\n        CollectSamples(samplesList);\n        CalculateResults(samplesList);\n\n    }\n\n\n    private static bool SetupCategory()\n    {\n        if (!PerformanceCounterCategory.Exists(&quot;SampleFractionCategory&quot;))\n        {\n\n            CounterCreationDataCollection CCDC = new CounterCreationDataCollection();\n\n            // Add the counter.\n            CounterCreationData sampleFraction = new CounterCreationData();\n            sampleFraction.CounterType = PerformanceCounterType.SampleFraction;\n            sampleFraction.CounterName = &quot;SampleFractionSample&quot;;\n            CCDC.Add(sampleFraction);\n\n            // Add the base counter.\n            CounterCreationData sampleFractionBase = new CounterCreationData();\n            sampleFractionBase.CounterType = PerformanceCounterType.SampleBase;\n            sampleFractionBase.CounterName = &quot;SampleFractionSampleBase&quot;;\n            CCDC.Add(sampleFractionBase);\n\n            // Create the category.\n            PerformanceCounterCategory.Create(&quot;SampleFractionCategory&quot;,\n                &quot;Demonstrates usage of the SampleFraction performance counter type.&quot;,\n                PerformanceCounterCategoryType.SingleInstance, CCDC);\n\n            return (true);\n        }\n        else\n        {\n            Console.WriteLine(&quot;Category exists - SampleFractionCategory&quot;);\n            return (false);\n        }\n    }\n\n    private static void CreateCounters()\n    {\n        // Create the counters.\n\n        perfCounter = new PerformanceCounter(&quot;SampleFractionCategory&quot;,\n            &quot;SampleFractionSample&quot;,\n            false);\n\n\n        basePerfCounter = new PerformanceCounter(&quot;SampleFractionCategory&quot;,\n            &quot;SampleFractionSampleBase&quot;,\n            false);\n\n\n        perfCounter.RawValue = thisProcess.UserProcessorTime.Ticks;\n        basePerfCounter.RawValue = thisProcess.TotalProcessorTime.Ticks;\n    }\n    private static void CollectSamples(ArrayList samplesList)\n    {\n\n\n        // Loop for the samples.\n        for (int j = 0; j &lt; 100; j++)\n        {\n\n            perfCounter.IncrementBy(thisProcess.UserProcessorTime.Ticks);\n\n            basePerfCounter.IncrementBy(thisProcess.TotalProcessorTime.Ticks);\n\n            if ((j % 10) == 9)\n            {\n                OutputSample(perfCounter.NextSample());\n                samplesList.Add(perfCounter.NextSample());\n            }\n            else\n                Console.WriteLine();\n\n            System.Threading.Thread.Sleep(50);\n        }\n\n    }\n\n    private static void CalculateResults(ArrayList samplesList)\n    {\n        for (int i = 0; i &lt; (samplesList.Count - 1); i++)\n        {\n            // Output the sample.\n            OutputSample((CounterSample)samplesList[i]);\n            OutputSample((CounterSample)samplesList[i + 1]);\n\n            // Use .NET to calculate the counter value.\n            Console.WriteLine(&quot;.NET computed counter value = &quot; +\n                CounterSampleCalculator.ComputeCounterValue((CounterSample)samplesList[i],\n                (CounterSample)samplesList[i + 1]));\n\n            // Calculate the counter value manually.\n            Console.WriteLine(&quot;My computed counter value = &quot; +\n                MyComputeCounterValue((CounterSample)samplesList[i],\n                (CounterSample)samplesList[i + 1]));\n\n        }\n    }\n\n\n    //++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n    // Description - This counter type provides A percentage counter that shows the \n    // average ratio of user proccessor time to total processor time  during the last \n    // two sample intervals.\n    //++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n    private static Single MyComputeCounterValue(CounterSample s0, CounterSample s1)\n    {\n        Single numerator = (Single)s1.RawValue - (Single)s0.RawValue;\n        Single denomenator = (Single)s1.BaseValue - (Single)s0.BaseValue;\n        Single counterValue = 100 * (numerator / denomenator);\n        return (counterValue);\n    }\n\n    // Output information about the counter sample.\n    private static void OutputSample(CounterSample s)\n    {\n        Console.WriteLine(&quot;\\r\\n+++++++++++&quot;);\n        Console.WriteLine(&quot;Sample values - \\r\\n&quot;);\n        Console.WriteLine(&quot;   BaseValue        = &quot; + s.BaseValue);\n        Console.WriteLine(&quot;   CounterFrequency = &quot; + s.CounterFrequency);\n        Console.WriteLine(&quot;   CounterTimeStamp = &quot; + s.CounterTimeStamp);\n        Console.WriteLine(&quot;   CounterType      = &quot; + s.CounterType);\n        Console.WriteLine(&quot;   RawValue         = &quot; + s.RawValue);\n        Console.WriteLine(&quot;   SystemFrequency  = &quot; + s.SystemFrequency);\n        Console.WriteLine(&quot;   TimeStamp        = &quot; + s.TimeStamp);\n        Console.WriteLine(&quot;   TimeStamp100nSec = &quot; + s.TimeStamp100nSec);\n        Console.WriteLine(&quot;++++++++++++++++++++++&quot;);\n    }\n}\n</code></pre><p> <code>RateOfCountsPerSecond32</code>  </p>\n<pre><code class=\"lang-cs\" name=\"PerformanceCounterType.RateOfCountsPerSecond#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\nusing System.Diagnostics;\n\npublic class App \n{\n    private static PerformanceCounter PC;\n\n\tpublic static void Main()\n\t{\t\n\t\tArrayList samplesList = new ArrayList();\n\n        // If the category does not exist, create the category and exit.\n        // Perfomance counters should not be created and immediately used.\n        // There is a latency time to enable the counters, they should be created\n        // prior to executing the application that uses the counters.\n        // Execute this sample a second time to use the category.\n        if (SetupCategory())\n            return;\n        CreateCounters();\n\t\tCollectSamples(samplesList);\n\t\tCalculateResults(samplesList);\n\t}\n\n    private static bool SetupCategory()\n    {\n\t\t\n        if ( !PerformanceCounterCategory.Exists(&quot;RateOfCountsPerSecond32SampleCategory&quot;) ) \n        {\n\n\n            CounterCreationDataCollection CCDC = new CounterCreationDataCollection();\n\n            // Add the counter.\n            CounterCreationData rateOfCounts32 = new CounterCreationData();\n            rateOfCounts32.CounterType = PerformanceCounterType.RateOfCountsPerSecond32;\n            rateOfCounts32.CounterName = &quot;RateOfCountsPerSecond32Sample&quot;;\n            CCDC.Add(rateOfCounts32);\n\t        \n             // Create the category.\n            PerformanceCounterCategory.Create(&quot;RateOfCountsPerSecond32SampleCategory&quot;, \n                &quot;Demonstrates usage of the RateOfCountsPerSecond32 performance counter type.&quot;,\n                PerformanceCounterCategoryType.SingleInstance, CCDC); \n              return(true);\n        }\n        else\n        {\n            Console.WriteLine(&quot;Category exists - RateOfCountsPerSecond32SampleCategory&quot;);\n            return(false);\n        }\n    }\n\n    private static void CreateCounters()\n    {\n        // Create the counter.\n        PC = new PerformanceCounter(&quot;RateOfCountsPerSecond32SampleCategory&quot;, \n            &quot;RateOfCountsPerSecond32Sample&quot;, \n            false);\n\n        PC.RawValue=0;\n        \n    }\n\n    private static void CollectSamples(ArrayList samplesList)\n    {\n\t\n        Random r = new Random( DateTime.Now.Millisecond );\n\n        // Initialize the performance counter.\n        PC.NextSample();\n\n        // Loop for the samples.\n        for (int j = 0; j &lt; 100; j++) \n        {\n\t        \n            int value = r.Next(1, 10);\n            PC.IncrementBy(value);\n            Console.Write(j + &quot; = &quot; + value);\n\n            if ((j % 10) == 9) \n            {\n                Console.WriteLine(&quot;;       NextValue() = &quot; + PC.NextValue().ToString());\n                OutputSample(PC.NextSample());\n                samplesList.Add( PC.NextSample() );\n            }\n            else\n                Console.WriteLine();\n\t        \n            System.Threading.Thread.Sleep(50);\n        }\n    }\n\n\tprivate static void CalculateResults(ArrayList samplesList)\n\t{\n\t\tfor(int i = 0; i &lt; (samplesList.Count - 1); i++)\n\t\t{\n\t\t\t// Output the sample.\n\t\t\tOutputSample( (CounterSample)samplesList[i] );\n\t\t\tOutputSample( (CounterSample)samplesList[i+1] );\n\n\n            // Use .NET to calculate the counter value.\n\t\t\tConsole.WriteLine(&quot;.NET computed counter value = &quot; + \n\t\t\t\tCounterSampleCalculator.ComputeCounterValue((CounterSample)samplesList[i],\n\t\t\t\t(CounterSample)samplesList[i+1]) );\n\n            // Calculate the counter value manually.\n            Console.WriteLine(&quot;My computed counter value = &quot; + \n\t\t\t\tMyComputeCounterValue((CounterSample)samplesList[i],\n\t\t\t\t(CounterSample)samplesList[i+1]) );\n\n\n\t\t}\n\t}\n\n\n\t//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n\t//\tPERF_COUNTER_COUNTER\n\t//\tDescription\t - This counter type shows the average number of operations completed\n\t//\t\tduring each second of the sample interval. Counters of this type\n\t//\t\tmeasure time in ticks of the system clock. The F variable represents\n\t//\t\tthe number of ticks per second. The value of F is factored into the\n\t//\t\tequation so that the result can be displayed in seconds.\n\t//\n    //\tGeneric type - Difference\n\t//\n\t//\tFormula - (N1 - N0) / ( (D1 - D0) / F), where the numerator (N) represents the number\n\t//\t\tof operations performed during the last sample interval, the denominator\n\t//\t\t(D) represents the number of ticks elapsed during the last sample\n\t//\t\tinterval, and F is the frequency of the ticks.\n\t//\n\t//\t     Average - (Nx - N0) / ((Dx - D0) / F) \n\t//\n\t//       Example - System\\ File Read Operations/sec \n\t//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n\tprivate static Single MyComputeCounterValue(CounterSample s0, CounterSample s1)\n\t{\n\t\tSingle numerator = (Single)(s1.RawValue - s0.RawValue);\n\t\tSingle denomenator = (Single)(s1.TimeStamp - s0.TimeStamp) / (Single)s1.SystemFrequency;\n\t\tSingle counterValue = numerator / denomenator;\n\t\treturn(counterValue);\n\t}\n\t\n    // Output information about the counter sample.\n\tprivate static void OutputSample(CounterSample s)\n\t{\n\t\tConsole.WriteLine(&quot;\\r\\n+++++++++++&quot;);\n\t\tConsole.WriteLine(&quot;Sample values - \\r\\n&quot;);\n\t\tConsole.WriteLine(&quot;   BaseValue        = &quot; + s.BaseValue);\n\t\tConsole.WriteLine(&quot;   CounterFrequency = &quot; + s.CounterFrequency);\n\t\tConsole.WriteLine(&quot;   CounterTimeStamp = &quot; + s.CounterTimeStamp);\n\t\tConsole.WriteLine(&quot;   CounterType      = &quot; + s.CounterType);\n\t\tConsole.WriteLine(&quot;   RawValue         = &quot; + s.RawValue);\n\t\tConsole.WriteLine(&quot;   SystemFrequency  = &quot; + s.SystemFrequency);\n\t\tConsole.WriteLine(&quot;   TimeStamp        = &quot; + s.TimeStamp);\n\t\tConsole.WriteLine(&quot;   TimeStamp100nSec = &quot; + s.TimeStamp100nSec);\n\t\tConsole.WriteLine(&quot;++++++++++++++++++++++&quot;);\n\t}\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"PerformanceCounterType.RateOfCountsPerSecond#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\nImports System.Diagnostics\n\n _\n\nPublic Class App\n    Private Shared PC As PerformanceCounter\n\n\n    Public Shared Sub Main()\n        Dim samplesList As New ArrayList()\n\n        &#39;If the category does not exist, create the category and exit.\n        &#39;Performance counters should not be created and immediately used.\n        &#39;There is a latency time to enable the counters, they should be created\n        &#39;prior to executing the application that uses the counters.\n        &#39;Execute this sample a second time to use the counters.\n        If Not (SetupCategory()) Then\n            CreateCounters()\n            CollectSamples(samplesList)\n            CalculateResults(samplesList)\n        End If\n    End Sub &#39;Main\n\n\n    Private Shared Function SetupCategory() As Boolean\n\n        If Not PerformanceCounterCategory.Exists(&quot;RateOfCountsPerSecond32SampleCategory&quot;) Then\n\n\n            Dim CCDC As New CounterCreationDataCollection()\n\n            &#39; Add the counter.\n            Dim rateOfCounts32 As New CounterCreationData()\n            rateOfCounts32.CounterType = PerformanceCounterType.RateOfCountsPerSecond32\n            rateOfCounts32.CounterName = &quot;RateOfCountsPerSecond32Sample&quot;\n            CCDC.Add(rateOfCounts32)\n\n            &#39; Create the category.\n            PerformanceCounterCategory.Create(&quot;RateOfCountsPerSecond32SampleCategory&quot;, _\n                &quot;Demonstrates usage of the RateOfCountsPerSecond32 performance counter type.&quot;, _\n                PerformanceCounterCategoryType.SingleInstance, CCDC)\n            Return True\n        Else\n            Console.WriteLine(&quot;Category exists - RateOfCountsPerSecond32SampleCategory&quot;)\n            Return False\n        End If\n    End Function &#39;SetupCategory\n\n\n    Private Shared Sub CreateCounters()\n        &#39; Create the counter.\n        PC = New PerformanceCounter(&quot;RateOfCountsPerSecond32SampleCategory&quot;, &quot;RateOfCountsPerSecond32Sample&quot;, False)\n\n        PC.RawValue = 0\n    End Sub &#39;CreateCounters\n\n\n    Private Shared Sub CollectSamples(ByVal samplesList As ArrayList)\n\n        Dim r As New Random(DateTime.Now.Millisecond)\n\n        &#39; Initialize the performance counter.\n        PC.NextSample()\n\n        &#39; Loop for the samples.\n        Dim j As Integer\n        For j = 0 To 99\n\n            Dim value As Integer = r.Next(1, 10)\n            PC.IncrementBy(value)\n            Console.Write((j.ToString() + &quot; = &quot; + value.ToString()))\n\n            If j Mod 10 = 9 Then\n                Console.WriteLine((&quot;;       NextValue() = &quot; + PC.NextValue().ToString()))\n                OutputSample(PC.NextSample())\n                samplesList.Add(PC.NextSample())\n            Else\n                Console.WriteLine()\n            End If\n            System.Threading.Thread.Sleep(50)\n        Next j\n    End Sub &#39;CollectSamples\n\n\n    Private Shared Sub CalculateResults(ByVal samplesList As ArrayList)\n        Dim i As Integer\n        For i = 0 To (samplesList.Count - 1) - 1\n            &#39; Output the sample.\n            OutputSample(CType(samplesList(i), CounterSample))\n            OutputSample(CType(samplesList((i + 1)), CounterSample))\n\n\n            &#39; Use .NET to calculate the counter value.\n            Console.WriteLine(&quot;.NET computed counter value = &quot; + CounterSampleCalculator.ComputeCounterValue(CType(samplesList(i), CounterSample), CType(samplesList((i + 1)), CounterSample)).ToString())\n\n            &#39; Calculate the counter value manually.\n            Console.WriteLine(&quot;My computed counter value = &quot; + MyComputeCounterValue(CType(samplesList(i), CounterSample), CType(samplesList((i + 1)), CounterSample)).ToString())\n        Next i\n    End Sub &#39;CalculateResults\n\n\n\n\n\n    &#39;++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n    &#39;\tPERF_COUNTER_COUNTER\n    &#39;\tDescription\t - This counter type shows the average number of operations completed\n    &#39;\t\tduring each second of the sample interval. Counters of this type\n    &#39;\t\tmeasure time in ticks of the system clock. The F variable represents\n    &#39;\t\tthe number of ticks per second. The value of F is factored into the\n    &#39;\t\tequation so that the result can be displayed in seconds.\n    &#39;\n    &#39;\tGeneric type - Difference\n    &#39;\n    &#39;\tFormula - (N1 - N0) / ( (D1 - D0) / F), where the numerator (N) represents the number\n    &#39;\t\tof operations performed during the last sample interval, the denominator\n    &#39;\t\t(D) represents the number of ticks elapsed during the last sample\n    &#39;\t\tinterval, and F is the frequency of the ticks.\n    &#39;\n    &#39;\t     Average - (Nx - N0) / ((Dx - D0) / F) \n    &#39;\n    &#39;       Example - System\\ File Read Operations/sec \n    &#39;++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n    Private Shared Function MyComputeCounterValue(ByVal s0 As CounterSample, ByVal s1 As CounterSample) As [Single]\n        Dim numerator As [Single] = CType(s1.RawValue - s0.RawValue, [Single])\n        Dim denomenator As [Single] = CType(s1.TimeStamp - s0.TimeStamp, [Single]) / CType(s1.SystemFrequency, [Single])\n        Dim counterValue As [Single] = numerator / denomenator\n        Return counterValue\n    End Function &#39;MyComputeCounterValue\n\n\n    &#39; Output information about the counter sample.\n    Private Shared Sub OutputSample(ByVal s As CounterSample)\n        Console.WriteLine(ControlChars.Lf + ControlChars.Cr + &quot;+++++++++++&quot;)\n        Console.WriteLine(&quot;Sample values - &quot; + ControlChars.Lf + ControlChars.Cr)\n        Console.WriteLine((&quot;   BaseValue        = &quot; + s.BaseValue.ToString()))\n        Console.WriteLine((&quot;   CounterFrequency = &quot; + s.CounterFrequency.ToString()))\n        Console.WriteLine((&quot;   CounterTimeStamp = &quot; + s.CounterTimeStamp.ToString()))\n        Console.WriteLine((&quot;   CounterType      = &quot; + s.CounterType.ToString()))\n        Console.WriteLine((&quot;   RawValue         = &quot; + s.RawValue.ToString()))\n        Console.WriteLine((&quot;   SystemFrequency  = &quot; + s.SystemFrequency.ToString()))\n        Console.WriteLine((&quot;   TimeStamp        = &quot; + s.TimeStamp.ToString()))\n        Console.WriteLine((&quot;   TimeStamp100nSec = &quot; + s.TimeStamp100nSec.ToString()))\n        Console.WriteLine(&quot;++++++++++++++++++++++&quot;)\n    End Sub &#39;OutputSample\nEnd Class &#39;App \n</code></pre><pre><code class=\"lang-cpp\" name=\"PerformanceCounterType.RateOfCountsPerSecond#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\nusing namespace System::Diagnostics;\n\n//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n//    PERF_COUNTER_COUNTER\n//    Description     - This counter type shows the average number of operations completed\n//        during each second of the sample interval. Counters of this type\n//        measure time in ticks of the system clock. The F variable represents\n//        the number of ticks per second. The value of F is factored into the\n//        equation so that the result can be displayed in seconds.\n//\n//    Generic type - Difference\n//\n//    Formula - (N1 - N0) / ( (D1 - D0) / F), where the numerator (N) represents the number\n//        of operations performed during the last sample interval, the denominator\n//        (D) represents the number of ticks elapsed during the last sample\n//        interval, and F is the frequency of the ticks.\n//\n//         Average - (Nx - N0) / ((Dx - D0) / F) \n//\n//       Example - System\\ File Read Operations/sec \n//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\nfloat MyComputeCounterValue( CounterSample s0, CounterSample s1 )\n{\n   float numerator = (float)(s1.RawValue - s0.RawValue);\n   float denomenator = (float)(s1.TimeStamp - s0.TimeStamp) / (float)s1.SystemFrequency;\n   float counterValue = numerator / denomenator;\n   return counterValue;\n}\n\n\n// Output information about the counter sample.\nvoid OutputSample( CounterSample s )\n{\n   Console::WriteLine( &quot;\\r\\n+++++++++++&quot; );\n   Console::WriteLine( &quot;Sample values - \\r\\n&quot; );\n   Console::WriteLine( &quot;   BaseValue        = {0}&quot;, s.BaseValue );\n   Console::WriteLine( &quot;   CounterFrequency = {0}&quot;, s.CounterFrequency );\n   Console::WriteLine( &quot;   CounterTimeStamp = {0}&quot;, s.CounterTimeStamp );\n   Console::WriteLine( &quot;   CounterType      = {0}&quot;, s.CounterType );\n   Console::WriteLine( &quot;   RawValue         = {0}&quot;, s.RawValue );\n   Console::WriteLine( &quot;   SystemFrequency  = {0}&quot;, s.SystemFrequency );\n   Console::WriteLine( &quot;   TimeStamp        = {0}&quot;, s.TimeStamp );\n   Console::WriteLine( &quot;   TimeStamp100nSec = {0}&quot;, s.TimeStamp100nSec );\n   Console::WriteLine( &quot;++++++++++++++++++++++&quot; );\n}\n\nbool SetupCategory()\n{\n   if (  !PerformanceCounterCategory::Exists( &quot;RateOfCountsPerSecond32SampleCategory&quot; ) )\n   {\n      CounterCreationDataCollection^ CCDC = gcnew CounterCreationDataCollection;\n\n      // Add the counter.\n      CounterCreationData^ rateOfCounts32 = gcnew CounterCreationData;\n      rateOfCounts32-&gt;CounterType = PerformanceCounterType::RateOfCountsPerSecond32;\n      rateOfCounts32-&gt;CounterName = &quot;RateOfCountsPerSecond32Sample&quot;;\n      CCDC-&gt;Add( rateOfCounts32 );\n\n      // Create the category.\n      PerformanceCounterCategory::Create( &quot;RateOfCountsPerSecond32SampleCategory&quot;, &quot;Demonstrates usage of the RateOfCountsPerSecond32 performance counter type.&quot;, CCDC );\n      return true;\n   }\n   else\n   {\n      Console::WriteLine( &quot;Category exists - RateOfCountsPerSecond32SampleCategory&quot; );\n      return false;\n   }\n}\n\nvoid CreateCounters( PerformanceCounter^% PC )\n{\n   // Create the counter.\n   PC = gcnew PerformanceCounter( &quot;RateOfCountsPerSecond32SampleCategory&quot;,&quot;RateOfCountsPerSecond32Sample&quot;,false );\n   PC-&gt;RawValue = 0;\n}\n\nvoid CollectSamples( ArrayList^ samplesList, PerformanceCounter^ PC )\n{\n   Random^ r = gcnew Random( DateTime::Now.Millisecond );\n\n   // Initialize the performance counter.\n   PC-&gt;NextSample();\n\n   // Loop for the samples.\n   for ( int j = 0; j &lt; 100; j++ )\n   {\n      int value = r-&gt;Next( 1, 10 );\n      PC-&gt;IncrementBy( value );\n      Console::Write( &quot;{0} = {1}&quot;, j, value );\n      if ( (j % 10) == 9 )\n      {\n         Console::WriteLine( &quot;;       NextValue() = {0}&quot;, PC-&gt;NextValue() );\n         OutputSample( PC-&gt;NextSample() );\n         samplesList-&gt;Add( PC-&gt;NextSample() );\n      }\n      else\n            Console::WriteLine();\n      System::Threading::Thread::Sleep( 50 );\n   }\n}\n\nvoid CalculateResults( ArrayList^ samplesList )\n{\n   for ( int i = 0; i &lt; (samplesList-&gt;Count - 1); i++ )\n   {\n      // Output the sample.\n      OutputSample(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i ]) );\n      OutputSample(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i + 1 ]) );\n\n      // Use .NET to calculate the counter value.\n      Console::WriteLine( &quot;.NET computed counter value = {0}&quot;, CounterSampleCalculator::ComputeCounterValue(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i ]),  *safe_cast&lt;CounterSample^&gt;(samplesList[ i + 1 ]) ) );\n\n      // Calculate the counter value manually.\n      Console::WriteLine( &quot;My computed counter value = {0}&quot;, MyComputeCounterValue(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i ]),  *safe_cast&lt;CounterSample^&gt;(samplesList[ i + 1 ]) ) );\n   }\n}\n\nint main()\n{\n   ArrayList^ samplesList = gcnew ArrayList;\n   PerformanceCounter^ PC;\n   SetupCategory();\n   CreateCounters( PC );\n   CollectSamples( samplesList, PC );\n   CalculateResults( samplesList );\n}\n</code></pre><p> <code>RateOfCountsPerSecond64</code>  </p>\n<pre><code class=\"lang-vb\" name=\"PerformanceCounterType.RateOfCountsPerSecond64#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\nImports System.Diagnostics\n\n _\n\nPublic Class App\n    Private Shared PC As PerformanceCounter\n\n\n    Public Shared Sub Main()\n        Dim samplesList As New ArrayList()\n        &#39;If the category does not exist, create the category and exit.\n        &#39;Performance counters should not be created and immediately used.\n        &#39;There is a latency time to enable the counters, they should be created\n        &#39;prior to executing the application that uses the counters.\n        &#39;Execute this sample a second time to use the counters.\n        If Not (SetupCategory()) Then\n            CreateCounters()\n            CollectSamples(samplesList)\n            CalculateResults(samplesList)\n        End If\n    End Sub &#39;Main\n\n\n    Private Shared Function SetupCategory() As Boolean\n\n\n        If Not PerformanceCounterCategory.Exists(&quot;RateOfCountsPerSecond64SampleCategory&quot;) Then\n\n\n            Dim CCDC As New CounterCreationDataCollection()\n\n            &#39; Add the counter.\n            Dim rateOfCounts64 As New CounterCreationData()\n            rateOfCounts64.CounterType = PerformanceCounterType.RateOfCountsPerSecond64\n            rateOfCounts64.CounterName = &quot;RateOfCountsPerSecond64Sample&quot;\n            CCDC.Add(rateOfCounts64)\n\n            &#39; Create the category.\n            PerformanceCounterCategory.Create(&quot;RateOfCountsPerSecond64SampleCategory&quot;, _\n            &quot;Demonstrates usage of the RateOfCountsPerSecond64 performance counter type.&quot;, _\n                PerformanceCounterCategoryType.SingleInstance, CCDC)\n            Return True\n        Else\n            Console.WriteLine(&quot;Category exists - RateOfCountsPerSecond64SampleCategory&quot;)\n            Return False\n        End If\n    End Function &#39;SetupCategory\n\n\n    Private Shared Sub CreateCounters()\n        &#39; Create the counter.\n        PC = New PerformanceCounter(&quot;RateOfCountsPerSecond64SampleCategory&quot;, &quot;RateOfCountsPerSecond64Sample&quot;, False)\n\n        PC.RawValue = 0\n    End Sub &#39;CreateCounters\n\n\n    Private Shared Sub CollectSamples(ByVal samplesList As ArrayList)\n\n        Dim r As New Random(DateTime.Now.Millisecond)\n\n        &#39; Initialize the performance counter.\n        PC.NextSample()\n\n        &#39; Loop for the samples.\n        Dim j As Integer\n        For j = 0 To 99\n\n            Dim value As Integer = r.Next(1, 10)\n            PC.IncrementBy(value)\n            Console.Write((j.ToString() + &quot; = &quot; + value.ToString()))\n\n            If j Mod 10 = 9 Then\n                Console.WriteLine((&quot;;       NextValue() = &quot; + PC.NextValue().ToString()))\n                OutputSample(PC.NextSample())\n                samplesList.Add(PC.NextSample())\n            Else\n                Console.WriteLine()\n            End If\n            System.Threading.Thread.Sleep(50)\n        Next j\n    End Sub &#39;CollectSamples\n\n\n    Private Shared Sub CalculateResults(ByVal samplesList As ArrayList)\n        Dim i As Integer\n        For i = 0 To (samplesList.Count - 1) - 1\n            &#39; Output the sample.\n            OutputSample(CType(samplesList(i), CounterSample))\n            OutputSample(CType(samplesList((i + 1)), CounterSample))\n\n\n            &#39; Use .NET to calculate the counter value.\n            Console.WriteLine(&quot;.NET computed counter value = &quot; + _\n            CounterSampleCalculator.ComputeCounterValue(CType(samplesList(i), CounterSample), CType(samplesList((i + 1)), CounterSample)).ToString())\n\n            &#39; Calculate the counter value manually.\n            Console.WriteLine(&quot;My computed counter value = &quot; + _\n            MyComputeCounterValue(CType(samplesList(i), CounterSample), CType(samplesList((i + 1)), CounterSample)).ToString())\n        Next i\n    End Sub &#39;CalculateResults\n\n\n\n\n    &#39;++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n    &#39;\tPERF_COUNTER_COUNTER\n    &#39;\tDescription\t - This counter type shows the average number of operations completed\n    &#39;\t\tduring each second of the sample interval. Counters of this type\n    &#39;\t\tmeasure time in ticks of the system clock. The F variable represents\n    &#39;\t\tthe number of ticks per second. The value of F is factored into the\n    &#39;\t\tequation so that the result can be displayed in seconds.\n    &#39;\n    &#39;\tGeneric type - Difference\n    &#39;\n    &#39;\tFormula - (N1 - N0) / ( (D1 - D0) / F), where the numerator (N) represents the number\n    &#39;\t\tof operations performed during the last sample interval, the denominator\n    &#39;\t\t(D) represents the number of ticks elapsed during the last sample\n    &#39;\t\tinterval, and F is the frequency of the ticks.\n    &#39;\n    &#39;\tAverage - (Nx - N0) / ((Dx - D0) / F) \n    &#39;\n    &#39;  Example - System\\ File Read Operations/sec \n    &#39;++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n    Private Shared Function MyComputeCounterValue(ByVal s0 As CounterSample, ByVal s1 As CounterSample) As [Single]\n        Dim numerator As [Single] = CType(s1.RawValue - s0.RawValue, [Single])\n        Dim denomenator As [Single] = CType(s1.TimeStamp - s0.TimeStamp, [Single]) / CType(s1.SystemFrequency, [Single])\n        Dim counterValue As [Single] = numerator / denomenator\n        Return counterValue\n    End Function &#39;MyComputeCounterValue\n\n\n    Private Shared Sub OutputSample(ByVal s As CounterSample)\n        Console.WriteLine(ControlChars.Lf + ControlChars.Cr + &quot;+++++++++++&quot;)\n        Console.WriteLine(&quot;Sample values - &quot; + ControlChars.Lf + ControlChars.Cr)\n        Console.WriteLine((&quot;   BaseValue        = &quot; + s.BaseValue.ToString()))\n        Console.WriteLine((&quot;   CounterFrequency = &quot; + s.CounterFrequency.ToString()))\n        Console.WriteLine((&quot;   CounterTimeStamp = &quot; + s.CounterTimeStamp.ToString()))\n        Console.WriteLine((&quot;   CounterType      = &quot; + s.CounterType.ToString()))\n        Console.WriteLine((&quot;   RawValue         = &quot; + s.RawValue.ToString()))\n        Console.WriteLine((&quot;   SystemFrequency  = &quot; + s.SystemFrequency.ToString()))\n        Console.WriteLine((&quot;   TimeStamp        = &quot; + s.TimeStamp.ToString()))\n        Console.WriteLine((&quot;   TimeStamp100nSec = &quot; + s.TimeStamp100nSec.ToString()))\n        Console.WriteLine(&quot;++++++++++++++++++++++&quot;)\n    End Sub &#39;OutputSample\nEnd Class &#39;App\n</code></pre><pre><code class=\"lang-cs\" name=\"PerformanceCounterType.RateOfCountsPerSecond64#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\nusing System.Diagnostics;\n\npublic class App\n{\n    private static PerformanceCounter PC;\n\n    public static void Main()\n    {\n        ArrayList samplesList = new ArrayList();\n\n        // If the category does not exist, create the category and exit.\n        // Perfomance counters should not be created and immediately used.\n        // There is a latency time to enable the counters, they should be created\n        // prior to executing the application that uses the counters.\n        // Execute this sample a second time to use the category.\n        if (SetupCategory())\n            return;\n        CreateCounters();\n        CollectSamples(samplesList);\n        CalculateResults(samplesList);\n    }\n\n    private static bool SetupCategory()\n    {\n\n\n        if (!PerformanceCounterCategory.Exists(&quot;RateOfCountsPerSecond64SampleCategory&quot;))\n        {\n\n\n            CounterCreationDataCollection CCDC = new CounterCreationDataCollection();\n\n            // Add the counter.\n            CounterCreationData rateOfCounts64 = new CounterCreationData();\n            rateOfCounts64.CounterType = PerformanceCounterType.RateOfCountsPerSecond64;\n            rateOfCounts64.CounterName = &quot;RateOfCountsPerSecond64Sample&quot;;\n            CCDC.Add(rateOfCounts64);\n\n            // Create the category.\n            PerformanceCounterCategory.Create(&quot;RateOfCountsPerSecond64SampleCategory&quot;,\n                &quot;Demonstrates usage of the RateOfCountsPerSecond64 performance counter type.&quot;,\n                PerformanceCounterCategoryType.SingleInstance, CCDC);\n            return (true);\n        }\n        else\n        {\n            Console.WriteLine(&quot;Category exists - RateOfCountsPerSecond64SampleCategory&quot;);\n            return (false);\n        }\n    }\n\n    private static void CreateCounters()\n    {\n        // Create the counter.\n        PC = new PerformanceCounter(&quot;RateOfCountsPerSecond64SampleCategory&quot;,\n            &quot;RateOfCountsPerSecond64Sample&quot;,\n            false);\n\n        PC.RawValue = 0;\n\n    }\n\n    private static void CollectSamples(ArrayList samplesList)\n    {\n\n        Random r = new Random(DateTime.Now.Millisecond);\n\n        // Initialize the performance counter.\n        PC.NextSample();\n\n        // Loop for the samples.\n        for (int j = 0; j &lt; 100; j++)\n        {\n\n            int value = r.Next(1, 10);\n            PC.IncrementBy(value);\n            Console.Write(j + &quot; = &quot; + value);\n\n            if ((j % 10) == 9)\n            {\n                Console.WriteLine(&quot;;       NextValue() = &quot; + PC.NextValue().ToString());\n                OutputSample(PC.NextSample());\n                samplesList.Add(PC.NextSample());\n            }\n            else\n                Console.WriteLine();\n\n            System.Threading.Thread.Sleep(50);\n        }\n\n    }\n\n    private static void CalculateResults(ArrayList samplesList)\n    {\n        for (int i = 0; i &lt; (samplesList.Count - 1); i++)\n        {\n            // Output the sample.\n            OutputSample((CounterSample)samplesList[i]);\n            OutputSample((CounterSample)samplesList[i + 1]);\n\n\n            // Use .NET to calculate the counter value.\n            Console.WriteLine(&quot;.NET computed counter value = &quot; +\n                CounterSampleCalculator.ComputeCounterValue((CounterSample)samplesList[i],\n                (CounterSample)samplesList[i + 1]));\n\n            // Calculate the counter value manually.\n            Console.WriteLine(&quot;My computed counter value = &quot; +\n                MyComputeCounterValue((CounterSample)samplesList[i],\n                (CounterSample)samplesList[i + 1]));\n\n\n        }\n    }\n\n    //++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n    //\tPERF_COUNTER_COUNTER\n    //\tDescription\t - This counter type shows the average number of operations completed\n    //\t\tduring each second of the sample interval. Counters of this type\n    //\t\tmeasure time in ticks of the system clock. The F variable represents\n    //\t\tthe number of ticks per second. The value of F is factored into the\n    //\t\tequation so that the result can be displayed in seconds.\n    //\n    //\tGeneric type - Difference\n    //\n    //\tFormula - (N1 - N0) / ( (D1 - D0) / F), where the numerator (N) represents the number\n    //\t\tof operations performed during the last sample interval, the denominator\n    //\t\t(D) represents the number of ticks elapsed during the last sample\n    //\t\tinterval, and F is the frequency of the ticks.\n    //\n    //\tAverage - (Nx - N0) / ((Dx - D0) / F) \n    //\n    //  Example - System\\ File Read Operations/sec \n    //++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n    private static Single MyComputeCounterValue(CounterSample s0, CounterSample s1)\n    {\n        Single numerator = (Single)(s1.RawValue - s0.RawValue);\n        Single denomenator = (Single)(s1.TimeStamp - s0.TimeStamp) / (Single)s1.SystemFrequency;\n        Single counterValue = numerator / denomenator;\n        return (counterValue);\n    }\n\n    private static void OutputSample(CounterSample s)\n    {\n        Console.WriteLine(&quot;\\r\\n+++++++++++&quot;);\n        Console.WriteLine(&quot;Sample values - \\r\\n&quot;);\n        Console.WriteLine(&quot;   BaseValue        = &quot; + s.BaseValue);\n        Console.WriteLine(&quot;   CounterFrequency = &quot; + s.CounterFrequency);\n        Console.WriteLine(&quot;   CounterTimeStamp = &quot; + s.CounterTimeStamp);\n        Console.WriteLine(&quot;   CounterType      = &quot; + s.CounterType);\n        Console.WriteLine(&quot;   RawValue         = &quot; + s.RawValue);\n        Console.WriteLine(&quot;   SystemFrequency  = &quot; + s.SystemFrequency);\n        Console.WriteLine(&quot;   TimeStamp        = &quot; + s.TimeStamp);\n        Console.WriteLine(&quot;   TimeStamp100nSec = &quot; + s.TimeStamp100nSec);\n        Console.WriteLine(&quot;++++++++++++++++++++++&quot;);\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"PerformanceCounterType.RateOfCountsPerSecond64#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\nusing namespace System::Diagnostics;\n\n//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n//    PERF_COUNTER_COUNTER\n//    Description     - This counter type shows the average number of operations completed\n//        during each second of the sample interval. Counters of this type\n//        measure time in ticks of the system clock. The F variable represents\n//        the number of ticks per second. The value of F is factored into the\n//        equation so that the result can be displayed in seconds.\n//\n//    Generic type - Difference\n//\n//    Formula - (N1 - N0) / ( (D1 - D0) / F), where the numerator (N) represents the number\n//        of operations performed during the last sample interval, the denominator\n//        (D) represents the number of ticks elapsed during the last sample\n//        interval, and F is the frequency of the ticks.\n//\n//    Average - (Nx - N0) / ((Dx - D0) / F) \n//\n//  Example - System\\ File Read Operations/sec \n//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\nfloat MyComputeCounterValue( CounterSample s0, CounterSample s1 )\n{\n   float numerator = (float)(s1.RawValue - s0.RawValue);\n   float denomenator = (float)(s1.TimeStamp - s0.TimeStamp) / (float)s1.SystemFrequency;\n   float counterValue = numerator / denomenator;\n   return counterValue;\n}\n\nvoid OutputSample( CounterSample s )\n{\n   Console::WriteLine( &quot;\\r\\n+++++++++++&quot; );\n   Console::WriteLine( &quot;Sample values - \\r\\n&quot; );\n   Console::WriteLine( &quot;   BaseValue        = {0}&quot;, s.BaseValue );\n   Console::WriteLine( &quot;   CounterFrequency = {0}&quot;, s.CounterFrequency );\n   Console::WriteLine( &quot;   CounterTimeStamp = {0}&quot;, s.CounterTimeStamp );\n   Console::WriteLine( &quot;   CounterType      = {0}&quot;, s.CounterType );\n   Console::WriteLine( &quot;   RawValue         = {0}&quot;, s.RawValue );\n   Console::WriteLine( &quot;   SystemFrequency  = {0}&quot;, s.SystemFrequency );\n   Console::WriteLine( &quot;   TimeStamp        = {0}&quot;, s.TimeStamp );\n   Console::WriteLine( &quot;   TimeStamp100nSec = {0}&quot;, s.TimeStamp100nSec );\n   Console::WriteLine( &quot;++++++++++++++++++++++&quot; );\n}\n\nbool SetupCategory()\n{\n   if (  !PerformanceCounterCategory::Exists( &quot;RateOfCountsPerSecond64SampleCategory&quot; ) )\n   {\n      CounterCreationDataCollection^ CCDC = gcnew CounterCreationDataCollection;\n\n      // Add the counter.\n      CounterCreationData^ rateOfCounts64 = gcnew CounterCreationData;\n      rateOfCounts64-&gt;CounterType = PerformanceCounterType::RateOfCountsPerSecond64;\n      rateOfCounts64-&gt;CounterName = &quot;RateOfCountsPerSecond64Sample&quot;;\n      CCDC-&gt;Add( rateOfCounts64 );\n\n      // Create the category.\n      PerformanceCounterCategory::Create( &quot;RateOfCountsPerSecond64SampleCategory&quot;, &quot;Demonstrates usage of the RateOfCountsPerSecond64 performance counter type.&quot;, CCDC );\n      return true;\n   }\n   else\n   {\n      Console::WriteLine( &quot;Category exists - RateOfCountsPerSecond64SampleCategory&quot; );\n      return false;\n   }\n}\n\nvoid CreateCounters( PerformanceCounter^% PC )\n{\n   // Create the counter.\n   PC = gcnew PerformanceCounter( &quot;RateOfCountsPerSecond64SampleCategory&quot;,&quot;RateOfCountsPerSecond64Sample&quot;,false );\n   PC-&gt;RawValue = 0;\n}\n\nvoid CollectSamples( ArrayList^ samplesList, PerformanceCounter^ PC )\n{\n   Random^ r = gcnew Random( DateTime::Now.Millisecond );\n\n   // Initialize the performance counter.\n   PC-&gt;NextSample();\n\n   // Loop for the samples.\n   for ( int j = 0; j &lt; 100; j++ )\n   {\n      int value = r-&gt;Next( 1, 10 );\n      PC-&gt;IncrementBy( value );\n      Console::Write( &quot;{0} = {1}&quot;, j, value );\n      if ( (j % 10) == 9 )\n      {\n         Console::WriteLine( &quot;;       NextValue() = {0}&quot;, PC-&gt;NextValue() );\n         OutputSample( PC-&gt;NextSample() );\n         samplesList-&gt;Add( PC-&gt;NextSample() );\n      }\n      else\n            Console::WriteLine();\n      System::Threading::Thread::Sleep( 50 );\n   }\n}\n\nvoid CalculateResults( ArrayList^ samplesList )\n{\n   for ( int i = 0; i &lt; (samplesList-&gt;Count - 1); i++ )\n   {\n      // Output the sample.\n      OutputSample(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i ]) );\n      OutputSample(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i + 1 ]) );\n\n      // Use .NET to calculate the counter value.\n      Console::WriteLine( &quot;.NET computed counter value = {0}&quot;, CounterSampleCalculator::ComputeCounterValue(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i ]),  *safe_cast&lt;CounterSample^&gt;(samplesList[ i + 1 ]) ) );\n\n      // Calculate the counter value manually.\n      Console::WriteLine( &quot;My computed counter value = {0}&quot;, MyComputeCounterValue(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i ]),  *safe_cast&lt;CounterSample^&gt;(samplesList[ i + 1 ]) ) );\n   }\n}\n\nint main()\n{\n   ArrayList^ samplesList = gcnew ArrayList;\n   PerformanceCounter^ PC;\n   SetupCategory();\n   CreateCounters( PC );\n   CollectSamples( samplesList, PC );\n   CalculateResults( samplesList );\n}\n</code></pre><p> <code>RawFraction</code>  </p>\n<pre><code class=\"lang-cs\" name=\"PerformanceCounterType.RawFraction#1\">using System;\nusing System.Collections;\nusing System.Collections.Specialized;\nusing System.Diagnostics;\n\n\npublic class App\n{\n    private static PerformanceCounter PC;\n    private static PerformanceCounter BPC;\n\n    public static void Main()\n    {\n        ArrayList samplesList = new ArrayList();\n\n        // If the category does not exist, create the category and exit.\n        // Performance counters should not be created and immediately used.\n        // There is a latency time to enable the counters, they should be created\n        // prior to executing the application that uses the counters.\n        // Execute this sample a second time to use the counters.\n        if (SetupCategory())\n            return;\n        CreateCounters();\n        CollectSamples(samplesList);\n        CalculateResults(samplesList);\n    }\n\n    private static bool SetupCategory()\n    {\n\n\n        if (!PerformanceCounterCategory.Exists(&quot;RawFractionSampleCategory&quot;))\n        {\n\n\n            CounterCreationDataCollection CCDC = new CounterCreationDataCollection();\n\n            // Add the counter.\n            CounterCreationData rf = new CounterCreationData();\n            rf.CounterType = PerformanceCounterType.RawFraction;\n            rf.CounterName = &quot;RawFractionSample&quot;;\n            CCDC.Add(rf);\n\n            // Add the base counter.\n            CounterCreationData rfBase = new CounterCreationData();\n            rfBase.CounterType = PerformanceCounterType.RawBase;\n            rfBase.CounterName = &quot;RawFractionSampleBase&quot;;\n            CCDC.Add(rfBase);\n\n            // Create the category.\n            PerformanceCounterCategory.Create(&quot;RawFractionSampleCategory&quot;,\n                &quot;Demonstrates usage of the RawFraction performance counter type.&quot;,\n                PerformanceCounterCategoryType.SingleInstance, CCDC);\n\n            return (true);\n        }\n        else\n        {\n            Console.WriteLine(&quot;Category exists - RawFractionSampleCategory&quot;);\n            return (false);\n        }\n    }\n\n    private static void CreateCounters()\n    {\n        // Create the counters.\n        PC = new PerformanceCounter(&quot;RawFractionSampleCategory&quot;,\n            &quot;RawFractionSample&quot;,\n            false);\n\n        BPC = new PerformanceCounter(&quot;RawFractionSampleCategory&quot;,\n            &quot;RawFractionSampleBase&quot;,\n            false);\n\n        PC.RawValue = 0;\n        BPC.RawValue = 0;\n    }\n\n    private static void CollectSamples(ArrayList samplesList)\n    {\n\n        Random r = new Random(DateTime.Now.Millisecond);\n\n        // Initialize the performance counter.\n        PC.NextSample();\n\n        // Loop for the samples.\n        for (int j = 0; j &lt; 100; j++)\n        {\n            int value = r.Next(1, 10);\n            Console.Write(j + &quot; = &quot; + value);\n\n            // Increment the base every time, because the counter measures the number \n            // of high hits (raw fraction value) against all the hits (base value).\n            BPC.Increment();\n\n            // Get the % of samples that are 9 or 10 out of all the samples taken.\n            if (value &gt;= 9)\n                PC.Increment();\n\n            // Copy out the next value every ten times around the loop.\n            if ((j % 10) == 9)\n            {\n                Console.WriteLine(&quot;;       NextValue() = &quot; + PC.NextValue().ToString());\n                OutputSample(PC.NextSample());\n                samplesList.Add(PC.NextSample());\n            }\n            else\n                Console.WriteLine();\n\n            System.Threading.Thread.Sleep(50);\n        }\n\n    }\n\n\n    private static void CalculateResults(ArrayList samplesList)\n    {\n        for (int i = 0; i &lt; samplesList.Count; i++)\n        {\n            // Output the sample.\n            OutputSample((CounterSample)samplesList[i]);\n\n            // Use .NET to calculate the counter value.\n            Console.WriteLine(&quot;.NET computed counter value = &quot; +\n                CounterSampleCalculator.ComputeCounterValue((CounterSample)samplesList[i]));\n\n            // Calculate the counter value manually.\n            Console.WriteLine(&quot;My computed counter value = &quot; +\n                MyComputeCounterValue((CounterSample)samplesList[i]));\n\n        }\n    }\n\n    //++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n    // Formula from MSDN -\n    //      Description - This counter type shows the ratio of a subset to its set as a percentage.\n    //\t\t\tFor example, it compares the number of bytes in use on a disk to the\n    //\t\t\ttotal number of bytes on the disk. Counters of this type display the \n    //\t\t\tcurrent percentage only, not an average over time.\n    //\n    // Generic type - Instantaneous, Percentage \n    //\t    Formula - (N0 / D0), where D represents a measured attribute and N represents one\n    //\t\t\tcomponent of that attribute.\n    //\n    //\t\tAverage - SUM (N / D) /x \n    //\t\tExample - Paging File\\% Usage Peak\n    //++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n    private static Single MyComputeCounterValue(CounterSample rfSample)\n    {\n        Single numerator = (Single)rfSample.RawValue;\n        Single denomenator = (Single)rfSample.BaseValue;\n        Single counterValue = (numerator / denomenator) * 100;\n        return (counterValue);\n    }\n\n    // Output information about the counter sample.\n    private static void OutputSample(CounterSample s)\n    {\n        Console.WriteLine(&quot;+++++++++++&quot;);\n        Console.WriteLine(&quot;Sample values - \\r\\n&quot;);\n        Console.WriteLine(&quot;   BaseValue        = &quot; + s.BaseValue);\n        Console.WriteLine(&quot;   CounterFrequency = &quot; + s.CounterFrequency);\n        Console.WriteLine(&quot;   CounterTimeStamp = &quot; + s.CounterTimeStamp);\n        Console.WriteLine(&quot;   CounterType      = &quot; + s.CounterType);\n        Console.WriteLine(&quot;   RawValue         = &quot; + s.RawValue);\n        Console.WriteLine(&quot;   SystemFrequency  = &quot; + s.SystemFrequency);\n        Console.WriteLine(&quot;   TimeStamp        = &quot; + s.TimeStamp);\n        Console.WriteLine(&quot;   TimeStamp100nSec = &quot; + s.TimeStamp100nSec);\n        Console.WriteLine(&quot;++++++++++++++++++++++&quot;);\n    }\n\n\n\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"PerformanceCounterType.RawFraction#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\nusing namespace System::Diagnostics;\n\n//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n// Formula from MSDN -\n//      Description - This counter type shows the ratio of a subset to its set as a percentage.\n//            For example, it compares the number of bytes in use on a disk to the\n//            total number of bytes on the disk. Counters of this type display the \n//            current percentage only, not an average over time.\n//\n// Generic type - Instantaneous, Percentage \n//        Formula - (N0 / D0), where D represents a measured attribute and N represents one\n//            component of that attribute.\n//\n//        Average - SUM (N / D) /x \n//        Example - Paging File\\% Usage Peak\n//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\nfloat MyComputeCounterValue( CounterSample rfSample )\n{\n   float numerator = (float)rfSample.RawValue;\n   float denomenator = (float)rfSample.BaseValue;\n   float counterValue = (numerator / denomenator) * 100;\n   return counterValue;\n}\n\n\n// Output information about the counter sample.\nvoid OutputSample( CounterSample s )\n{\n   Console::WriteLine( &quot;+++++++++++&quot; );\n   Console::WriteLine( &quot;Sample values - \\r\\n&quot; );\n   Console::WriteLine( &quot;   BaseValue        = {0}&quot;, s.BaseValue );\n   Console::WriteLine( &quot;   CounterFrequency = {0}&quot;, s.CounterFrequency );\n   Console::WriteLine( &quot;   CounterTimeStamp = {0}&quot;, s.CounterTimeStamp );\n   Console::WriteLine( &quot;   CounterType      = {0}&quot;, s.CounterType );\n   Console::WriteLine( &quot;   RawValue         = {0}&quot;, s.RawValue );\n   Console::WriteLine( &quot;   SystemFrequency  = {0}&quot;, s.SystemFrequency );\n   Console::WriteLine( &quot;   TimeStamp        = {0}&quot;, s.TimeStamp );\n   Console::WriteLine( &quot;   TimeStamp100nSec = {0}&quot;, s.TimeStamp100nSec );\n   Console::WriteLine( &quot;++++++++++++++++++++++&quot; );\n}\n\nbool SetupCategory()\n{\n   if (  !PerformanceCounterCategory::Exists( &quot;RawFractionSampleCategory&quot; ) )\n   {\n      CounterCreationDataCollection^ CCDC = gcnew CounterCreationDataCollection;\n      \n      // Add the counter.\n      CounterCreationData^ rf = gcnew CounterCreationData;\n      rf-&gt;CounterType = PerformanceCounterType::RawFraction;\n      rf-&gt;CounterName = &quot;RawFractionSample&quot;;\n      CCDC-&gt;Add( rf );\n      \n      // Add the base counter.\n      CounterCreationData^ rfBase = gcnew CounterCreationData;\n      rfBase-&gt;CounterType = PerformanceCounterType::RawBase;\n      rfBase-&gt;CounterName = &quot;RawFractionSampleBase&quot;;\n      CCDC-&gt;Add( rfBase );\n      \n      // Create the category.\n      PerformanceCounterCategory::Create( &quot;RawFractionSampleCategory&quot;, &quot;Demonstrates usage of the RawFraction performance counter type.&quot;, CCDC );\n      return true;\n   }\n   else\n   {\n      Console::WriteLine( &quot;Category exists - RawFractionSampleCategory&quot; );\n      return false;\n   }\n}\n\nvoid CreateCounters( PerformanceCounter^% PC, PerformanceCounter^% BPC )\n{\n   \n   // Create the counters.\n   PC = gcnew PerformanceCounter( &quot;RawFractionSampleCategory&quot;,&quot;RawFractionSample&quot;,false );\n   BPC = gcnew PerformanceCounter( &quot;RawFractionSampleCategory&quot;,&quot;RawFractionSampleBase&quot;,false );\n   PC-&gt;RawValue = 0;\n   BPC-&gt;RawValue = 0;\n}\n\nvoid CollectSamples( ArrayList^ samplesList, PerformanceCounter^ PC, PerformanceCounter^ BPC )\n{\n   Random^ r = gcnew Random( DateTime::Now.Millisecond );\n   \n   // Initialize the performance counter.\n   PC-&gt;NextSample();\n   \n   // Loop for the samples.\n   for ( int j = 0; j &lt; 100; j++ )\n   {\n      int value = r-&gt;Next( 1, 10 );\n      Console::Write( &quot;{0} = {1}&quot;, j, value );\n      \n      // Increment the base every time, because the counter measures the number \n      // of high hits (raw fraction value) against all the hits (base value).\n      BPC-&gt;Increment();\n      \n      // Get the % of samples that are 9 or 10 out of all the samples taken.\n      if ( value &gt;= 9 )\n            PC-&gt;Increment();\n      \n      // Copy out the next value every ten times around the loop.\n      if ( (j % 10) == 9 )\n      {\n         Console::WriteLine( &quot;;       NextValue() = {0}&quot;, PC-&gt;NextValue() );\n         OutputSample( PC-&gt;NextSample() );\n         samplesList-&gt;Add( PC-&gt;NextSample() );\n      }\n      else\n            Console::WriteLine();\n      System::Threading::Thread::Sleep( 50 );\n\n   }\n}\n\nvoid CalculateResults( ArrayList^ samplesList )\n{\n   for ( int i = 0; i &lt; samplesList-&gt;Count; i++ )\n   {\n      \n      // Output the sample.\n      OutputSample(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i ]) );\n      \n      // Use .NET to calculate the counter value.\n      Console::WriteLine( &quot;.NET computed counter value = {0}&quot;, CounterSampleCalculator::ComputeCounterValue(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i ]) ) );\n      \n      // Calculate the counter value manually.\n      Console::WriteLine( &quot;My computed counter value = {0}&quot;, MyComputeCounterValue(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i ]) ) );\n\n   }\n}\n\nint main()\n{\n   ArrayList^ samplesList = gcnew ArrayList;\n   PerformanceCounter^ PC;\n   PerformanceCounter^ BPC;\n   SetupCategory();\n   CreateCounters( PC, BPC );\n   CollectSamples( samplesList, PC, BPC );\n   CalculateResults( samplesList );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"PerformanceCounterType.RawFraction#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\nImports System.Diagnostics\n\n _\n\n\nPublic Class App\n    Private Shared PC As PerformanceCounter\n    Private Shared BPC As PerformanceCounter\n\n\n    Public Shared Sub Main()\n        Dim samplesList As New ArrayList()\n\n        &#39;If the category does not exist, create the category and exit.\n        &#39;Performance counters should not be created and immediately used.\n        &#39;There is a latency time to enable the counters, they should be created\n        &#39;prior to executing the application that uses the counters.\n        &#39;Execute this sample a second time to use the counters.\n        If Not (SetupCategory()) Then\n            CreateCounters()\n            CollectSamples(samplesList)\n            CalculateResults(samplesList)\n        End If\n\n    End Sub &#39;Main\n\n\n    Private Shared Function SetupCategory() As Boolean\n\n\n        If Not PerformanceCounterCategory.Exists(&quot;RawFractionSampleCategory&quot;) Then\n\n\n            Dim CCDC As New CounterCreationDataCollection()\n\n            &#39; Add the counter.\n            Dim rf As New CounterCreationData()\n            rf.CounterType = PerformanceCounterType.RawFraction\n            rf.CounterName = &quot;RawFractionSample&quot;\n            CCDC.Add(rf)\n\n            &#39; Add the base counter.\n            Dim rfBase As New CounterCreationData()\n            rfBase.CounterType = PerformanceCounterType.RawBase\n            rfBase.CounterName = &quot;RawFractionSampleBase&quot;\n            CCDC.Add(rfBase)\n\n            &#39; Create the category.\n            PerformanceCounterCategory.Create(&quot;RawFractionSampleCategory&quot;, _\n            &quot;Demonstrates usage of the RawFraction performance counter type.&quot;, _\n                PerformanceCounterCategoryType.SingleInstance, CCDC)\n\n            Return True\n        Else\n            Console.WriteLine(&quot;Category exists - RawFractionSampleCategory&quot;)\n            Return False\n        End If\n    End Function &#39;SetupCategory\n\n\n    Private Shared Sub CreateCounters()\n        &#39; Create the counters.\n        PC = New PerformanceCounter(&quot;RawFractionSampleCategory&quot;, &quot;RawFractionSample&quot;, False)\n\n        BPC = New PerformanceCounter(&quot;RawFractionSampleCategory&quot;, &quot;RawFractionSampleBase&quot;, False)\n\n        PC.RawValue = 0\n        BPC.RawValue = 0\n    End Sub &#39;CreateCounters\n\n\n    Private Shared Sub CollectSamples(ByVal samplesList As ArrayList)\n\n        Dim r As New Random(DateTime.Now.Millisecond)\n\n        &#39; Initialize the performance counter.\n        PC.NextSample()\n\n        &#39; Loop for the samples.\n        Dim j As Integer\n        For j = 0 To 99\n            Dim value As Integer = r.Next(1, 10)\n            Console.Write((j.ToString() + &quot; = &quot; + value.ToString()))\n\n            &#39; Increment the base every time, because the counter measures the number \n            &#39; of high hits (raw fraction value) against all the hits (base value).\n            BPC.Increment()\n\n            &#39; Get the % of samples that are 9 or 10 out of all the samples taken.\n            If value &gt;= 9 Then\n                PC.Increment()\n            End If\n            &#39; Copy out the next value every ten times around the loop.\n            If j Mod 10 = 9 Then\n                Console.WriteLine((&quot;;       NextValue() = &quot; + PC.NextValue().ToString()))\n                OutputSample(PC.NextSample())\n                samplesList.Add(PC.NextSample())\n            Else\n                Console.WriteLine()\n            End If\n            System.Threading.Thread.Sleep(50)\n        Next j\n    End Sub &#39;CollectSamples\n\n\n\n    Private Shared Sub CalculateResults(ByVal samplesList As ArrayList)\n        Dim i As Integer\n        For i = 0 To samplesList.Count - 1\n            &#39; Output the sample.\n            OutputSample(CType(samplesList(i), CounterSample))\n\n            &#39; Use .NET to calculate the counter value.\n            Console.WriteLine(&quot;.NET computed counter value = &quot; + CounterSampleCalculator.ComputeCounterValue(CType(samplesList(i), CounterSample)).ToString())\n\n            &#39; Calculate the counter value manually.\n            Console.WriteLine(&quot;My computed counter value = &quot; + MyComputeCounterValue(CType(samplesList(i), CounterSample)).ToString())\n        Next i\n    End Sub &#39;CalculateResults\n\n\n    &#39;++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n    &#39; Formula from MSDN -\n    &#39;      Description - This counter type shows the ratio of a subset to its set as a percentage.\n    &#39;\t\t\tFor example, it compares the number of bytes in use on a disk to the\n    &#39;\t\t\ttotal number of bytes on the disk. Counters of this type display the \n    &#39;\t\t\tcurrent percentage only, not an average over time.\n    &#39;\n    &#39; Generic type - Instantaneous, Percentage \n    &#39;\t    Formula - (N0 / D0), where D represents a measured attribute and N represents one\n    &#39;\t\t\tcomponent of that attribute.\n    &#39;\n    &#39;\t\tAverage - SUM (N / D) /x \n    &#39;\t\tExample - Paging File\\% Usage Peak\n    &#39;++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n    Private Shared Function MyComputeCounterValue(ByVal rfSample As CounterSample) As [Single]\n        Dim numerator As [Single] = CType(rfSample.RawValue, [Single])\n        Dim denomenator As [Single] = CType(rfSample.BaseValue, [Single])\n        Dim counterValue As [Single] = numerator / denomenator * 100\n        Return counterValue\n    End Function &#39;MyComputeCounterValue\n\n\n    &#39; Output information about the counter sample.\n    Private Shared Sub OutputSample(ByVal s As CounterSample)\n        Console.WriteLine(&quot;+++++++++++&quot;)\n        Console.WriteLine(&quot;Sample values - &quot; + ControlChars.Lf + ControlChars.Cr)\n        Console.WriteLine((&quot;   BaseValue        = &quot; + s.BaseValue.ToString()))\n        Console.WriteLine((&quot;   CounterFrequency = &quot; + s.CounterFrequency.ToString()))\n        Console.WriteLine((&quot;   CounterTimeStamp = &quot; + s.CounterTimeStamp.ToString()))\n        Console.WriteLine((&quot;   CounterType      = &quot; + s.CounterType.ToString()))\n        Console.WriteLine((&quot;   RawValue         = &quot; + s.RawValue.ToString()))\n        Console.WriteLine((&quot;   SystemFrequency  = &quot; + s.SystemFrequency.ToString()))\n        Console.WriteLine((&quot;   TimeStamp        = &quot; + s.TimeStamp.ToString()))\n        Console.WriteLine((&quot;   TimeStamp100nSec = &quot; + s.TimeStamp100nSec.ToString()))\n        Console.WriteLine(&quot;++++++++++++++++++++++&quot;)\n    End Sub &#39;OutputSample\nEnd Class &#39;App \n\n\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Some counter types represent raw data, while others represent calculated values that are based on one or more counter samples. The following categories classify the types of counters available.  </p>\n<ul>\n<li><p>Average: measure a value over time and display the average of the last two measurements. Associated with each average counter is a base counter that tracks the number of samples involved.  </p>\n</li>\n<li><p>Difference: subtract the last measurement from the previous one and display the difference, if it is positive; if negative, they display a zero.  </p>\n</li>\n<li><p>Instantaneous: display the most recent measurement.  </p>\n</li>\n<li><p>Percentage: display calculated values as a percentage.  </p>\n</li>\n<li><p>Rate: sample an increasing count of events over time and divide the change in count values by the change in time to display a rate of activity.  </p>\n</li>\n</ul>\n<p> When sampling performance counter data, using a counter type that represents an average can make raw data values meaningful for your use. For example, the raw data counter <code>NumberOfItems64</code> can expose data that is fairly random from sample to sample. The formula for an average calculation of the values that the counter returns would be (X 0 +X 1 +…+X n)/n, where each X i is a raw counter sample.  </p>\n<p> Rate counters are similar to average counters, but more useful for situations in which the rate increases as a resource is used. A formula that quickly calculates the average is ((X n -X 0)/(T n -T 0)) / frequency, where each X i is a counter sample and each T i is the time that the corresponding sample was taken. The result is the average usage per second.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Unless otherwise indicated, the time base is seconds.  </p>\n</div>\n<p> When instrumenting applications (creating and writing custom performance counters), you might be working with performance counter types that rely on an accompanying base counter that is used in the calculations. The base counter must be immediately after its associated counter in the <a class=\"xref\" href=\"system.diagnostics.countercreationdatacollection\" data-linktype=\"relative-path\">CounterCreationDataCollection</a> collection your application uses. The following table lists the base counter types with their corresponding performance counter types.  </p>\n<table>\n<thead>\n<tr>\n<th>Base counter type</th>\n<th>Performance counter types</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>AverageBase</code></td>\n<td><code>AverageTimer32</code><br><br> <code>AverageCount64</code></td>\n</tr>\n<tr>\n<td><code>CounterMultiBase</code></td>\n<td><code>CounterMultiTimer</code><br><br> <code>CounterMultiTimerInverse</code><br><br> <code>CounterMultiTimer100Ns</code><br><br> <code>CounterMultiTimer100NsInverse</code></td>\n</tr>\n<tr>\n<td><code>RawBase</code></td>\n<td><code>RawFraction</code></td>\n</tr>\n<tr>\n<td><code>SampleBase</code></td>\n<td><code>SampleFraction</code></td>\n</tr>\n</tbody>\n</table>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_AverageBase\">\r\n      \t\t\t<span class=\"lang-csharp\">AverageBase</span>\r\n      \t</td>\r\n      \t<td><p>A base counter that is used in the calculation of time or count averages, such as <code>AverageTimer32</code> and <code>AverageCount64</code>. Stores the denominator for calculating a counter to present &quot;time per operation&quot; or &quot;count per operation&quot;.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_AverageCount64\">\r\n      \t\t\t<span class=\"lang-csharp\">AverageCount64</span>\r\n      \t</td>\r\n      \t<td><p>An average counter that shows how many items are processed, on average, during an operation. Counters of this type display a ratio of the items processed to the number of operations completed. The ratio is calculated by comparing the number of items processed during the last interval to the number of operations completed during the last interval.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_AverageTimer32\">\r\n      \t\t\t<span class=\"lang-csharp\">AverageTimer32</span>\r\n      \t</td>\r\n      \t<td><p>An average counter that measures the time it takes, on average, to complete a process or operation. Counters of this type display a ratio of the total elapsed time of the sample interval to the number of processes or operations completed during that time. This counter type measures time in ticks of the system clock.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_CounterDelta32\">\r\n      \t\t\t<span class=\"lang-csharp\">CounterDelta32</span>\r\n      \t</td>\r\n      \t<td><p>A difference counter that shows the change in the measured attribute between the two most recent sample intervals.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_CounterDelta64\">\r\n      \t\t\t<span class=\"lang-csharp\">CounterDelta64</span>\r\n      \t</td>\r\n      \t<td><p>A difference counter that shows the change in the measured attribute between the two most recent sample intervals. It is the same as the <code>CounterDelta32</code> counter type except that is uses larger fields to accomodate larger values.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_CounterMultiBase\">\r\n      \t\t\t<span class=\"lang-csharp\">CounterMultiBase</span>\r\n      \t</td>\r\n      \t<td><p>A base counter that indicates the number of items sampled. It is used as the denominator in the calculations to get an average among the items sampled when taking timings of multiple, but similar items. Used with <code>CounterMultiTimer</code>, <code>CounterMultiTimerInverse</code>, <code>CounterMultiTimer100Ns</code>, and <code>CounterMultiTimer100NsInverse</code>.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_CounterMultiTimer\">\r\n      \t\t\t<span class=\"lang-csharp\">CounterMultiTimer</span>\r\n      \t</td>\r\n      \t<td><p>A percentage counter that displays the active time of one or more components as a percentage of the total time of the sample interval. Because the numerator records the active time of components operating simultaneously, the resulting percentage can exceed 100 percent.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_CounterMultiTimer100Ns\">\r\n      \t\t\t<span class=\"lang-csharp\">CounterMultiTimer100Ns</span>\r\n      \t</td>\r\n      \t<td><p>A percentage counter that shows the active time of one or more components as a percentage of the total time of the sample interval. It measures time in 100 nanosecond (ns) units.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_CounterMultiTimer100NsInverse\">\r\n      \t\t\t<span class=\"lang-csharp\">CounterMultiTimer100NsInverse</span>\r\n      \t</td>\r\n      \t<td><p>A percentage counter that shows the active time of one or more components as a percentage of the total time of the sample interval. Counters of this type measure time in 100 nanosecond (ns) units. They derive the active time by measuring the time that the components were not active and subtracting the result from multiplying 100 percent by the number of objects monitored.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_CounterMultiTimerInverse\">\r\n      \t\t\t<span class=\"lang-csharp\">CounterMultiTimerInverse</span>\r\n      \t</td>\r\n      \t<td><p>A percentage counter that shows the active time of one or more components as a percentage of the total time of the sample interval. It derives the active time by measuring the time that the components were not active and subtracting the result from 100 percent by the number of objects monitored.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_CounterTimer\">\r\n      \t\t\t<span class=\"lang-csharp\">CounterTimer</span>\r\n      \t</td>\r\n      \t<td><p>A percentage counter that shows the average time that a component is active as a percentage of the total sample time.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_CounterTimerInverse\">\r\n      \t\t\t<span class=\"lang-csharp\">CounterTimerInverse</span>\r\n      \t</td>\r\n      \t<td><p>A percentage counter that displays the average percentage of active time observed during sample interval. The value of these counters is calculated by monitoring the percentage of time that the service was inactive and then subtracting that value from 100 percent.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_CountPerTimeInterval32\">\r\n      \t\t\t<span class=\"lang-csharp\">CountPerTimeInterval32</span>\r\n      \t</td>\r\n      \t<td><p>An average counter designed to monitor the average length of a queue to a resource over time. It shows the difference between the queue lengths observed during the last two sample intervals divided by the duration of the interval. This type of counter is typically used to track the number of items that are queued or waiting.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_CountPerTimeInterval64\">\r\n      \t\t\t<span class=\"lang-csharp\">CountPerTimeInterval64</span>\r\n      \t</td>\r\n      \t<td><p>An average counter that monitors the average length of a queue to a resource over time. Counters of this type display the difference between the queue lengths observed during the last two sample intervals, divided by the duration of the interval. This counter type is the same as <code>CountPerTimeInterval32</code> except that it uses larger fields to accommodate larger values. This type of counter is typically used to track a high-volume or very large number of items that are queued or waiting.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_ElapsedTime\">\r\n      \t\t\t<span class=\"lang-csharp\">ElapsedTime</span>\r\n      \t</td>\r\n      \t<td><p>A difference timer that shows the total time between when the component or process started and the time when this value is calculated.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_NumberOfItems32\">\r\n      \t\t\t<span class=\"lang-csharp\">NumberOfItems32</span>\r\n      \t</td>\r\n      \t<td><p>An instantaneous counter that shows the most recently observed value. Used, for example, to maintain a simple count of items or operations.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_NumberOfItems64\">\r\n      \t\t\t<span class=\"lang-csharp\">NumberOfItems64</span>\r\n      \t</td>\r\n      \t<td><p>An instantaneous counter that shows the most recently observed value. Used, for example, to maintain a simple count of a very large number of items or operations. It is the same as <code>NumberOfItems32</code> except that it uses larger fields to accommodate larger values.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_NumberOfItemsHEX32\">\r\n      \t\t\t<span class=\"lang-csharp\">NumberOfItemsHEX32</span>\r\n      \t</td>\r\n      \t<td><p>An instantaneous counter that shows the most recently observed value in hexadecimal format. Used, for example, to maintain a simple count of items or operations.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_NumberOfItemsHEX64\">\r\n      \t\t\t<span class=\"lang-csharp\">NumberOfItemsHEX64</span>\r\n      \t</td>\r\n      \t<td><p>An instantaneous counter that shows the most recently observed value. Used, for example, to maintain a simple count of a very large number of items or operations. It is the same as <code>NumberOfItemsHEX32</code> except that it uses larger fields to accommodate larger values.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_RateOfCountsPerSecond32\">\r\n      \t\t\t<span class=\"lang-csharp\">RateOfCountsPerSecond32</span>\r\n      \t</td>\r\n      \t<td><p>A difference counter that shows the average number of operations completed during each second of the sample interval. Counters of this type measure time in ticks of the system clock.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_RateOfCountsPerSecond64\">\r\n      \t\t\t<span class=\"lang-csharp\">RateOfCountsPerSecond64</span>\r\n      \t</td>\r\n      \t<td><p>A difference counter that shows the average number of operations completed during each second of the sample interval. Counters of this type measure time in ticks of the system clock. This counter type is the same as the <code>RateOfCountsPerSecond32</code> type, but it uses larger fields to accommodate larger values to track a high-volume number of items or operations per second, such as a byte-transmission rate.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_RawBase\">\r\n      \t\t\t<span class=\"lang-csharp\">RawBase</span>\r\n      \t</td>\r\n      \t<td><p>A base counter that stores the denominator of a counter that presents a general arithmetic fraction. Check that this value is greater than zero before using it as the denominator in a <code>RawFraction</code> value calculation.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_RawFraction\">\r\n      \t\t\t<span class=\"lang-csharp\">RawFraction</span>\r\n      \t</td>\r\n      \t<td><p>An instantaneous percentage counter that shows the ratio of a subset to its set as a percentage. For example, it compares the number of bytes in use on a disk to the total number of bytes on the disk. Counters of this type display the current percentage only, not an average over time.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_SampleBase\">\r\n      \t\t\t<span class=\"lang-csharp\">SampleBase</span>\r\n      \t</td>\r\n      \t<td><p>A base counter that stores the number of sampling interrupts taken and is used as a denominator in the sampling fraction. The sampling fraction is the number of samples that were 1 (or <code>true</code>) for a sample interrupt. Check that this value is greater than zero before using it as the denominator in a calculation of <code>SampleFraction</code>.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_SampleCounter\">\r\n      \t\t\t<span class=\"lang-csharp\">SampleCounter</span>\r\n      \t</td>\r\n      \t<td><p>An average counter that shows the average number of operations completed in one second. When a counter of this type samples the data, each sampling interrupt returns one or zero. The counter data is the number of ones that were sampled. It measures time in units of ticks of the system performance timer.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_SampleFraction\">\r\n      \t\t\t<span class=\"lang-csharp\">SampleFraction</span>\r\n      \t</td>\r\n      \t<td><p>A percentage counter that shows the average ratio of hits to all operations during the last two sample intervals.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_Timer100Ns\">\r\n      \t\t\t<span class=\"lang-csharp\">Timer100Ns</span>\r\n      \t</td>\r\n      \t<td><p>A percentage counter that shows the active time of a component as a percentage of the total elapsed time of the sample interval. It measures time in units of 100 nanoseconds (ns). Counters of this type are designed to measure the activity of one component at a time.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_Timer100NsInverse\">\r\n      \t\t\t<span class=\"lang-csharp\">Timer100NsInverse</span>\r\n      \t</td>\r\n      \t<td><p>A percentage counter that shows the average percentage of active time observed during the sample interval.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Diagnostics.PerformanceCounterType.yml\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.AverageBase\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.AverageCount64\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.AverageTimer32\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.CounterDelta32\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.CounterDelta64\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.CounterMultiBase\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.CounterMultiTimer\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.CounterMultiTimer100Ns\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.CounterMultiTimer100NsInverse\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.CounterMultiTimerInverse\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.CounterTimer\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.CounterTimerInverse\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.CountPerTimeInterval32\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.CountPerTimeInterval64\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.ElapsedTime\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.NumberOfItems32\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.NumberOfItems64\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX32\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX64\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond32\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond64\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.RawBase\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.RawFraction\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.SampleBase\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.SampleCounter\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.SampleFraction\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.Timer100Ns\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.Timer100NsInverse\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"1efbf512-e6d9-2afe-2636-dbc6177647e7\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies the formula used to calculate the  method for a  instance.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.diagnostics/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Diagnostics.PerformanceCounterType\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Diagnostics.PerformanceCounterType.yml","open_to_public_contributors":false,"api_name":["System.Diagnostics.PerformanceCounterType","System.Diagnostics.PerformanceCounterType.AverageBase","System.Diagnostics.PerformanceCounterType.AverageCount64","System.Diagnostics.PerformanceCounterType.AverageTimer32","System.Diagnostics.PerformanceCounterType.CounterDelta32","System.Diagnostics.PerformanceCounterType.CounterDelta64","System.Diagnostics.PerformanceCounterType.CounterMultiBase","System.Diagnostics.PerformanceCounterType.CounterMultiTimer","System.Diagnostics.PerformanceCounterType.CounterMultiTimer100Ns","System.Diagnostics.PerformanceCounterType.CounterMultiTimer100NsInverse","System.Diagnostics.PerformanceCounterType.CounterMultiTimerInverse","System.Diagnostics.PerformanceCounterType.CounterTimer","System.Diagnostics.PerformanceCounterType.CounterTimerInverse","System.Diagnostics.PerformanceCounterType.CountPerTimeInterval32","System.Diagnostics.PerformanceCounterType.CountPerTimeInterval64","System.Diagnostics.PerformanceCounterType.ElapsedTime","System.Diagnostics.PerformanceCounterType.NumberOfItems32","System.Diagnostics.PerformanceCounterType.NumberOfItems64","System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX32","System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX64","System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond32","System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond64","System.Diagnostics.PerformanceCounterType.RawBase","System.Diagnostics.PerformanceCounterType.RawFraction","System.Diagnostics.PerformanceCounterType.SampleBase","System.Diagnostics.PerformanceCounterType.SampleCounter","System.Diagnostics.PerformanceCounterType.SampleFraction","System.Diagnostics.PerformanceCounterType.Timer100Ns","System.Diagnostics.PerformanceCounterType.Timer100NsInverse"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Diagnostics.PerformanceCounterType","System::Diagnostics::PerformanceCounterType","System.Diagnostics.PerformanceCounterType.AverageBase","System::Diagnostics::PerformanceCounterType::AverageBase","System.Diagnostics.PerformanceCounterType.AverageCount64","System::Diagnostics::PerformanceCounterType::AverageCount64","System.Diagnostics.PerformanceCounterType.AverageTimer32","System::Diagnostics::PerformanceCounterType::AverageTimer32","System.Diagnostics.PerformanceCounterType.CounterDelta32","System::Diagnostics::PerformanceCounterType::CounterDelta32","System.Diagnostics.PerformanceCounterType.CounterDelta64","System::Diagnostics::PerformanceCounterType::CounterDelta64","System.Diagnostics.PerformanceCounterType.CounterMultiBase","System::Diagnostics::PerformanceCounterType::CounterMultiBase","System.Diagnostics.PerformanceCounterType.CounterMultiTimer","System::Diagnostics::PerformanceCounterType::CounterMultiTimer","System.Diagnostics.PerformanceCounterType.CounterMultiTimer100Ns","System::Diagnostics::PerformanceCounterType::CounterMultiTimer100Ns","System.Diagnostics.PerformanceCounterType.CounterMultiTimer100NsInverse","System::Diagnostics::PerformanceCounterType::CounterMultiTimer100NsInverse","System.Diagnostics.PerformanceCounterType.CounterMultiTimerInverse","System::Diagnostics::PerformanceCounterType::CounterMultiTimerInverse","System.Diagnostics.PerformanceCounterType.CounterTimer","System::Diagnostics::PerformanceCounterType::CounterTimer","System.Diagnostics.PerformanceCounterType.CounterTimerInverse","System::Diagnostics::PerformanceCounterType::CounterTimerInverse","System.Diagnostics.PerformanceCounterType.CountPerTimeInterval32","System::Diagnostics::PerformanceCounterType::CountPerTimeInterval32","System.Diagnostics.PerformanceCounterType.CountPerTimeInterval64","System::Diagnostics::PerformanceCounterType::CountPerTimeInterval64","System.Diagnostics.PerformanceCounterType.ElapsedTime","System::Diagnostics::PerformanceCounterType::ElapsedTime","System.Diagnostics.PerformanceCounterType.NumberOfItems32","System::Diagnostics::PerformanceCounterType::NumberOfItems32","System.Diagnostics.PerformanceCounterType.NumberOfItems64","System::Diagnostics::PerformanceCounterType::NumberOfItems64","System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX32","System::Diagnostics::PerformanceCounterType::NumberOfItemsHEX32","System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX64","System::Diagnostics::PerformanceCounterType::NumberOfItemsHEX64","System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond32","System::Diagnostics::PerformanceCounterType::RateOfCountsPerSecond32","System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond64","System::Diagnostics::PerformanceCounterType::RateOfCountsPerSecond64","System.Diagnostics.PerformanceCounterType.RawBase","System::Diagnostics::PerformanceCounterType::RawBase","System.Diagnostics.PerformanceCounterType.RawFraction","System::Diagnostics::PerformanceCounterType::RawFraction","System.Diagnostics.PerformanceCounterType.SampleBase","System::Diagnostics::PerformanceCounterType::SampleBase","System.Diagnostics.PerformanceCounterType.SampleCounter","System::Diagnostics::PerformanceCounterType::SampleCounter","System.Diagnostics.PerformanceCounterType.SampleFraction","System::Diagnostics::PerformanceCounterType::SampleFraction","System.Diagnostics.PerformanceCounterType.Timer100Ns","System::Diagnostics::PerformanceCounterType::Timer100Ns","System.Diagnostics.PerformanceCounterType.Timer100NsInverse","System::Diagnostics::PerformanceCounterType::Timer100NsInverse"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"1efbf512-e6d9-2afe-2636-dbc6177647e7","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Diagnostics/PerformanceCounterType.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"PerformanceCounterType enum | Microsoft Docs","_op_ogTitle":"PerformanceCounterType enum","description":"Specifies the formula used to calculate the  method for a  instance.\n","toc_asset_id":"api/_splitted/System.Diagnostics/toc.json","toc_rel":"_splitted/System.Diagnostics/toc.json","source_url":"","ms.assetid":"System.Diagnostics.PerformanceCounterType","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.performancecountertype","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.performancecountertype","fileRelativePath":"api/System.Diagnostics.PerformanceCounterType.html"},"themesRelativePathToOutputRoot":"_themes/"}