{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">PerformanceCounterType</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies the formula used to calculate the <span class=\"xref\">stem.Diagnostics.PerformanceCounter.NextValue*</span> method for a <a class=\"xref\" href=\"system.diagnostics.performancecounter\" data-linktype=\"relative-path\">PerformanceCounter</a> instance.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.ComponentModel.TypeConverter(typeof(System.Diagnostics.AlphabeticalEnumConverter))]\npublic enum PerformanceCounterType</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">System.Enum</a></span></div><span class=\"lang-csharp\">PerformanceCounterType</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Some counter types represent raw data, while others represent calculated values that are based on one or more counter samples. The following categories classify the types of counters available.  </p>\n<ul>\n<li><p>Average: measure a value over time and display the average of the last two measurements. Associated with each average counter is a base counter that tracks the number of samples involved.  </p>\n</li>\n<li><p>Difference: subtract the last measurement from the previous one and display the difference, if it is positive; if negative, they display a zero.  </p>\n</li>\n<li><p>Instantaneous: display the most recent measurement.  </p>\n</li>\n<li><p>Percentage: display calculated values as a percentage.  </p>\n</li>\n<li><p>Rate: sample an increasing count of events over time and divide the change in count values by the change in time to display a rate of activity.  </p>\n<p>When sampling performance counter data, using a counter type that represents an average can make raw data values meaningful for your use. For example, the raw data counter <code>NumberOfItems64</code> can expose data that is fairly random from sample to sample. The formula for an average calculation of the values that the counter returns would be (X 0 +X 1 +â€¦+X n)/n, where each X i is a raw counter sample.  </p>\n<p>Rate counters are similar to average counters, but more useful for situations in which the rate increases as a resource is used. A formula that quickly calculates the average is ((X n -X 0)/(T n -T 0)) / frequency, where each X i is a counter sample and each T i is the time that the corresponding sample was taken. The result is the average usage per second.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> Unless otherwise indicated, the time base is seconds.  </p>\n</div>\n<p> When instrumenting applications (creating and writing custom performance counters), you might be working with performance counter types that rely on an accompanying base counter that is used in the calculations. The base counter must be immediately after its associated counter in the <a class=\"xref\" href=\"system.diagnostics.countercreationdatacollection\" data-linktype=\"relative-path\">CounterCreationDataCollection</a> collection your application uses. The following table lists the base counter types with their corresponding performance counter types.  </p>\n<table>\n<thead>\n<tr>\n<th>Base counter type</th>\n<th>Performance counter types</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>AverageBase</code></td>\n<td><code>AverageTimer32</code><br><br> <code>AverageCount64</code></td>\n</tr>\n<tr>\n<td><code>CounterMultiBase</code></td>\n<td><code>CounterMultiTimer</code><br><br> <code>CounterMultiTimerInverse</code><br><br> <code>CounterMultiTimer100Ns</code><br><br> <code>CounterMultiTimer100NsInverse</code></td>\n</tr>\n<tr>\n<td><code>RawBase</code></td>\n<td><code>RawFraction</code></td>\n</tr>\n<tr>\n<td><code>SampleBase</code></td>\n<td><code>SampleFraction</code></td>\n</tr>\n</tbody>\n</table>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_AverageBase\">\r\n      \t\t\t<span class=\"lang-csharp\">AverageBase</span>\r\n      \t</td>\r\n      \t<td><p>A base counter that is used in the calculation of time or count averages, such as <code>AverageTimer32</code> and <code>AverageCount64</code>. Stores the denominator for calculating a counter to present &quot;time per operation&quot; or &quot;count per operation&quot;.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_AverageCount64\">\r\n      \t\t\t<span class=\"lang-csharp\">AverageCount64</span>\r\n      \t</td>\r\n      \t<td><p>An average counter that shows how many items are processed, on average, during an operation. Counters of this type display a ratio of the items processed to the number of operations completed. The ratio is calculated by comparing the number of items processed during the last interval to the number of operations completed during the last interval.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_AverageTimer32\">\r\n      \t\t\t<span class=\"lang-csharp\">AverageTimer32</span>\r\n      \t</td>\r\n      \t<td><p>An average counter that measures the time it takes, on average, to complete a process or operation. Counters of this type display a ratio of the total elapsed time of the sample interval to the number of processes or operations completed during that time. This counter type measures time in ticks of the system clock.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_CounterDelta32\">\r\n      \t\t\t<span class=\"lang-csharp\">CounterDelta32</span>\r\n      \t</td>\r\n      \t<td><p>A difference counter that shows the change in the measured attribute between the two most recent sample intervals.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_CounterDelta64\">\r\n      \t\t\t<span class=\"lang-csharp\">CounterDelta64</span>\r\n      \t</td>\r\n      \t<td><p>A difference counter that shows the change in the measured attribute between the two most recent sample intervals. It is the same as the <code>CounterDelta32</code> counter type except that is uses larger fields to accomodate larger values.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_CounterMultiBase\">\r\n      \t\t\t<span class=\"lang-csharp\">CounterMultiBase</span>\r\n      \t</td>\r\n      \t<td><p>A base counter that indicates the number of items sampled. It is used as the denominator in the calculations to get an average among the items sampled when taking timings of multiple, but similar items. Used with <code>CounterMultiTimer</code>, <code>CounterMultiTimerInverse</code>, <code>CounterMultiTimer100Ns</code>, and <code>CounterMultiTimer100NsInverse</code>.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_CounterMultiTimer\">\r\n      \t\t\t<span class=\"lang-csharp\">CounterMultiTimer</span>\r\n      \t</td>\r\n      \t<td><p>A percentage counter that displays the active time of one or more components as a percentage of the total time of the sample interval. Because the numerator records the active time of components operating simultaneously, the resulting percentage can exceed 100 percent.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_CounterMultiTimer100Ns\">\r\n      \t\t\t<span class=\"lang-csharp\">CounterMultiTimer100Ns</span>\r\n      \t</td>\r\n      \t<td><p>A percentage counter that shows the active time of one or more components as a percentage of the total time of the sample interval. It measures time in 100 nanosecond (ns) units.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_CounterMultiTimer100NsInverse\">\r\n      \t\t\t<span class=\"lang-csharp\">CounterMultiTimer100NsInverse</span>\r\n      \t</td>\r\n      \t<td><p>A percentage counter that shows the active time of one or more components as a percentage of the total time of the sample interval. Counters of this type measure time in 100 nanosecond (ns) units. They derive the active time by measuring the time that the components were not active and subtracting the result from multiplying 100 percent by the number of objects monitored.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_CounterMultiTimerInverse\">\r\n      \t\t\t<span class=\"lang-csharp\">CounterMultiTimerInverse</span>\r\n      \t</td>\r\n      \t<td><p>A percentage counter that shows the active time of one or more components as a percentage of the total time of the sample interval. It derives the active time by measuring the time that the components were not active and subtracting the result from 100 percent by the number of objects monitored.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_CounterTimer\">\r\n      \t\t\t<span class=\"lang-csharp\">CounterTimer</span>\r\n      \t</td>\r\n      \t<td><p>A percentage counter that shows the average time that a component is active as a percentage of the total sample time.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_CounterTimerInverse\">\r\n      \t\t\t<span class=\"lang-csharp\">CounterTimerInverse</span>\r\n      \t</td>\r\n      \t<td><p>A percentage counter that displays the average percentage of active time observed during sample interval. The value of these counters is calculated by monitoring the percentage of time that the service was inactive and then subtracting that value from 100 percent.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_CountPerTimeInterval32\">\r\n      \t\t\t<span class=\"lang-csharp\">CountPerTimeInterval32</span>\r\n      \t</td>\r\n      \t<td><p>An average counter designed to monitor the average length of a queue to a resource over time. It shows the difference between the queue lengths observed during the last two sample intervals divided by the duration of the interval. This type of counter is typically used to track the number of items that are queued or waiting.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_CountPerTimeInterval64\">\r\n      \t\t\t<span class=\"lang-csharp\">CountPerTimeInterval64</span>\r\n      \t</td>\r\n      \t<td><p>An average counter that monitors the average length of a queue to a resource over time. Counters of this type display the difference between the queue lengths observed during the last two sample intervals, divided by the duration of the interval. This counter type is the same as <code>CountPerTimeInterval32</code> except that it uses larger fields to accommodate larger values. This type of counter is typically used to track a high-volume or very large number of items that are queued or waiting.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_ElapsedTime\">\r\n      \t\t\t<span class=\"lang-csharp\">ElapsedTime</span>\r\n      \t</td>\r\n      \t<td><p>A difference timer that shows the total time between when the component or process started and the time when this value is calculated.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_NumberOfItems32\">\r\n      \t\t\t<span class=\"lang-csharp\">NumberOfItems32</span>\r\n      \t</td>\r\n      \t<td><p>An instantaneous counter that shows the most recently observed value. Used, for example, to maintain a simple count of items or operations.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_NumberOfItems64\">\r\n      \t\t\t<span class=\"lang-csharp\">NumberOfItems64</span>\r\n      \t</td>\r\n      \t<td><p>An instantaneous counter that shows the most recently observed value. Used, for example, to maintain a simple count of a very large number of items or operations. It is the same as <code>NumberOfItems32</code> except that it uses larger fields to accommodate larger values.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_NumberOfItemsHEX32\">\r\n      \t\t\t<span class=\"lang-csharp\">NumberOfItemsHEX32</span>\r\n      \t</td>\r\n      \t<td><p>An instantaneous counter that shows the most recently observed value in hexadecimal format. Used, for example, to maintain a simple count of items or operations.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_NumberOfItemsHEX64\">\r\n      \t\t\t<span class=\"lang-csharp\">NumberOfItemsHEX64</span>\r\n      \t</td>\r\n      \t<td><p>An instantaneous counter that shows the most recently observed value. Used, for example, to maintain a simple count of a very large number of items or operations. It is the same as <code>NumberOfItemsHEX32</code> except that it uses larger fields to accommodate larger values.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_RateOfCountsPerSecond32\">\r\n      \t\t\t<span class=\"lang-csharp\">RateOfCountsPerSecond32</span>\r\n      \t</td>\r\n      \t<td><p>A difference counter that shows the average number of operations completed during each second of the sample interval. Counters of this type measure time in ticks of the system clock.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_RateOfCountsPerSecond64\">\r\n      \t\t\t<span class=\"lang-csharp\">RateOfCountsPerSecond64</span>\r\n      \t</td>\r\n      \t<td><p>A difference counter that shows the average number of operations completed during each second of the sample interval. Counters of this type measure time in ticks of the system clock. This counter type is the same as the <code>RateOfCountsPerSecond32</code> type, but it uses larger fields to accommodate larger values to track a high-volume number of items or operations per second, such as a byte-transmission rate.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_RawBase\">\r\n      \t\t\t<span class=\"lang-csharp\">RawBase</span>\r\n      \t</td>\r\n      \t<td><p>A base counter that stores the denominator of a counter that presents a general arithmetic fraction. Check that this value is greater than zero before using it as the denominator in a <code>RawFraction</code> value calculation.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_RawFraction\">\r\n      \t\t\t<span class=\"lang-csharp\">RawFraction</span>\r\n      \t</td>\r\n      \t<td><p>An instantaneous percentage counter that shows the ratio of a subset to its set as a percentage. For example, it compares the number of bytes in use on a disk to the total number of bytes on the disk. Counters of this type display the current percentage only, not an average over time.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_SampleBase\">\r\n      \t\t\t<span class=\"lang-csharp\">SampleBase</span>\r\n      \t</td>\r\n      \t<td><p>A base counter that stores the number of sampling interrupts taken and is used as a denominator in the sampling fraction. The sampling fraction is the number of samples that were 1 (or <code>true</code>) for a sample interrupt. Check that this value is greater than zero before using it as the denominator in a calculation of <code>SampleFraction</code>.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_SampleCounter\">\r\n      \t\t\t<span class=\"lang-csharp\">SampleCounter</span>\r\n      \t</td>\r\n      \t<td><p>An average counter that shows the average number of operations completed in one second. When a counter of this type samples the data, each sampling interrupt returns one or zero. The counter data is the number of ones that were sampled. It measures time in units of ticks of the system performance timer.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_SampleFraction\">\r\n      \t\t\t<span class=\"lang-csharp\">SampleFraction</span>\r\n      \t</td>\r\n      \t<td><p>A percentage counter that shows the average ratio of hits to all operations during the last two sample intervals.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_Timer100Ns\">\r\n      \t\t\t<span class=\"lang-csharp\">Timer100Ns</span>\r\n      \t</td>\r\n      \t<td><p>A percentage counter that shows the active time of a component as a percentage of the total elapsed time of the sample interval. It measures time in units of 100 nanoseconds (ns). Counters of this type are designed to measure the activity of one component at a time.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Diagnostics_PerformanceCounterType_Timer100NsInverse\">\r\n      \t\t\t<span class=\"lang-csharp\">Timer100NsInverse</span>\r\n      \t</td>\r\n      \t<td><p>A percentage counter that shows the average percentage of active time observed during the sample interval.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Diagnostics.PerformanceCounterType.yml\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.AverageBase\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.AverageCount64\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.AverageTimer32\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.CounterDelta32\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.CounterDelta64\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.CounterMultiBase\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.CounterMultiTimer\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.CounterMultiTimer100Ns\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.CounterMultiTimer100NsInverse\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.CounterMultiTimerInverse\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.CounterTimer\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.CounterTimerInverse\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.CountPerTimeInterval32\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.CountPerTimeInterval64\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.ElapsedTime\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.NumberOfItems32\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.NumberOfItems64\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX32\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX64\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond32\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond64\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.RawBase\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.RawFraction\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.SampleBase\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.SampleCounter\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.SampleFraction\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.Timer100Ns\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.PerformanceCounterType.Timer100NsInverse\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-23 08:04 AM\">\r\n<meta name=\"document_id\" content=\"1efbf512-e6d9-2afe-2636-dbc6177647e7\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies the formula used to calculate the  method for a  instance.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.diagnostics/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Diagnostics.PerformanceCounterType\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Diagnostics.PerformanceCounterType.yml","open_to_public_contributors":false,"api_name":["System.Diagnostics.PerformanceCounterType","System.Diagnostics.PerformanceCounterType.AverageBase","System.Diagnostics.PerformanceCounterType.AverageCount64","System.Diagnostics.PerformanceCounterType.AverageTimer32","System.Diagnostics.PerformanceCounterType.CounterDelta32","System.Diagnostics.PerformanceCounterType.CounterDelta64","System.Diagnostics.PerformanceCounterType.CounterMultiBase","System.Diagnostics.PerformanceCounterType.CounterMultiTimer","System.Diagnostics.PerformanceCounterType.CounterMultiTimer100Ns","System.Diagnostics.PerformanceCounterType.CounterMultiTimer100NsInverse","System.Diagnostics.PerformanceCounterType.CounterMultiTimerInverse","System.Diagnostics.PerformanceCounterType.CounterTimer","System.Diagnostics.PerformanceCounterType.CounterTimerInverse","System.Diagnostics.PerformanceCounterType.CountPerTimeInterval32","System.Diagnostics.PerformanceCounterType.CountPerTimeInterval64","System.Diagnostics.PerformanceCounterType.ElapsedTime","System.Diagnostics.PerformanceCounterType.NumberOfItems32","System.Diagnostics.PerformanceCounterType.NumberOfItems64","System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX32","System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX64","System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond32","System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond64","System.Diagnostics.PerformanceCounterType.RawBase","System.Diagnostics.PerformanceCounterType.RawFraction","System.Diagnostics.PerformanceCounterType.SampleBase","System.Diagnostics.PerformanceCounterType.SampleCounter","System.Diagnostics.PerformanceCounterType.SampleFraction","System.Diagnostics.PerformanceCounterType.Timer100Ns","System.Diagnostics.PerformanceCounterType.Timer100NsInverse"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Diagnostics.PerformanceCounterType","System::Diagnostics::PerformanceCounterType","System.Diagnostics.PerformanceCounterType.AverageBase","System::Diagnostics::PerformanceCounterType::AverageBase","System.Diagnostics.PerformanceCounterType.AverageCount64","System::Diagnostics::PerformanceCounterType::AverageCount64","System.Diagnostics.PerformanceCounterType.AverageTimer32","System::Diagnostics::PerformanceCounterType::AverageTimer32","System.Diagnostics.PerformanceCounterType.CounterDelta32","System::Diagnostics::PerformanceCounterType::CounterDelta32","System.Diagnostics.PerformanceCounterType.CounterDelta64","System::Diagnostics::PerformanceCounterType::CounterDelta64","System.Diagnostics.PerformanceCounterType.CounterMultiBase","System::Diagnostics::PerformanceCounterType::CounterMultiBase","System.Diagnostics.PerformanceCounterType.CounterMultiTimer","System::Diagnostics::PerformanceCounterType::CounterMultiTimer","System.Diagnostics.PerformanceCounterType.CounterMultiTimer100Ns","System::Diagnostics::PerformanceCounterType::CounterMultiTimer100Ns","System.Diagnostics.PerformanceCounterType.CounterMultiTimer100NsInverse","System::Diagnostics::PerformanceCounterType::CounterMultiTimer100NsInverse","System.Diagnostics.PerformanceCounterType.CounterMultiTimerInverse","System::Diagnostics::PerformanceCounterType::CounterMultiTimerInverse","System.Diagnostics.PerformanceCounterType.CounterTimer","System::Diagnostics::PerformanceCounterType::CounterTimer","System.Diagnostics.PerformanceCounterType.CounterTimerInverse","System::Diagnostics::PerformanceCounterType::CounterTimerInverse","System.Diagnostics.PerformanceCounterType.CountPerTimeInterval32","System::Diagnostics::PerformanceCounterType::CountPerTimeInterval32","System.Diagnostics.PerformanceCounterType.CountPerTimeInterval64","System::Diagnostics::PerformanceCounterType::CountPerTimeInterval64","System.Diagnostics.PerformanceCounterType.ElapsedTime","System::Diagnostics::PerformanceCounterType::ElapsedTime","System.Diagnostics.PerformanceCounterType.NumberOfItems32","System::Diagnostics::PerformanceCounterType::NumberOfItems32","System.Diagnostics.PerformanceCounterType.NumberOfItems64","System::Diagnostics::PerformanceCounterType::NumberOfItems64","System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX32","System::Diagnostics::PerformanceCounterType::NumberOfItemsHEX32","System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX64","System::Diagnostics::PerformanceCounterType::NumberOfItemsHEX64","System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond32","System::Diagnostics::PerformanceCounterType::RateOfCountsPerSecond32","System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond64","System::Diagnostics::PerformanceCounterType::RateOfCountsPerSecond64","System.Diagnostics.PerformanceCounterType.RawBase","System::Diagnostics::PerformanceCounterType::RawBase","System.Diagnostics.PerformanceCounterType.RawFraction","System::Diagnostics::PerformanceCounterType::RawFraction","System.Diagnostics.PerformanceCounterType.SampleBase","System::Diagnostics::PerformanceCounterType::SampleBase","System.Diagnostics.PerformanceCounterType.SampleCounter","System::Diagnostics::PerformanceCounterType::SampleCounter","System.Diagnostics.PerformanceCounterType.SampleFraction","System::Diagnostics::PerformanceCounterType::SampleFraction","System.Diagnostics.PerformanceCounterType.Timer100Ns","System::Diagnostics::PerformanceCounterType::Timer100Ns","System.Diagnostics.PerformanceCounterType.Timer100NsInverse","System::Diagnostics::PerformanceCounterType::Timer100NsInverse"],"dev_langs":["csharp"],"updated_at":"2017-03-23 08:04 AM","document_id":"1efbf512-e6d9-2afe-2636-dbc6177647e7","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/PerformanceCounterType.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"PerformanceCounterType enum | Microsoft Docs","_op_ogTitle":"PerformanceCounterType enum","description":"Specifies the formula used to calculate the  method for a  instance.\n","toc_asset_id":"api/_splitted/System.Diagnostics/toc.json","toc_rel":"_splitted/System.Diagnostics/toc.json","source_url":"","ms.assetid":"System.Diagnostics.PerformanceCounterType","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.performancecountertype","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.performancecountertype","fileRelativePath":"api/System.Diagnostics.PerformanceCounterType.html"},"themesRelativePathToOutputRoot":"_themes/"}