{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">EndEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that handles asynchronous events such as application events.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void EndEventHandler(IAsyncResult ar);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">EndEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example uses the EndEventHandler delegate to register a handler for an asynchronous page.  </p>\n<pre><code class=\"lang-vb\" name=\"PageAddOnPreRenderCompleteAsync#1\">&lt;%@ page language=&quot;VB&quot; Async=&quot;true&quot;%&gt;\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  Dim myRequest As System.Net.WebRequest\n  \n  Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)\n    Label1.Text = &quot;Page_Load: Thread #&quot; &amp; System.Threading.Thread.CurrentThread.GetHashCode()\n    \n    Dim bh As New BeginEventHandler(AddressOf Me.BeginGetAsyncData)\n    Dim eh As New EndEventHandler(AddressOf Me.EndGetAsyncData)\n    \n    Me.AddOnPreRenderCompleteAsync(bh, eh)\n    \n    &#39; Initialize the WebRequest object.\n    Dim address As String\n    address = &quot;http://localhost/&quot;\n    myRequest = System.Net.WebRequest.Create(address)\n    \n  End Sub\n  \n  Function BeginGetAsyncData(ByVal src As Object, ByVal args As EventArgs, ByVal cb As AsyncCallback, ByVal state As Object) As IAsyncResult\n    Label2.Text = &quot;BeginGetAsyncData: Thread #&quot; &amp; System.Threading.Thread.CurrentThread.GetHashCode()\n    Return Me.myRequest.BeginGetResponse(cb, state)\n  End Function\n  \n  Sub EndGetAsyncData(ByVal ar As IAsyncResult)\n    Label3.Text = &quot;EndGetAsyncData: Thread #&quot; &amp; System.Threading.Thread.CurrentThread.GetHashCode()\n    \n    Dim myResponse As System.Net.WebResponse\n    myResponse = Me.myRequest.EndGetResponse(ar)\n    \n    Dim reader As New System.IO.StreamReader(myResponse.GetResponseStream())\n    result.Text = reader.ReadToEnd()\n    myResponse.Close()\n  End Sub\n  \n&lt;/script&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;\n      Page.AddOnPreRenderCompleteAsync Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n      &lt;asp:label id=&quot;Label1&quot; runat=&quot;server&quot;&gt;\n        Label 1&lt;/asp:label&gt;&lt;br /&gt;\n      &lt;asp:label id=&quot;Label2&quot; runat=&quot;server&quot;&gt;\n        Label 2&lt;/asp:label&gt;&lt;br /&gt;\n      &lt;asp:label id=&quot;Label3&quot; runat=&quot;server&quot;&gt;\n        Label 3&lt;/asp:label&gt;&lt;br /&gt;\n      &lt;asp:textbox id=&quot;result&quot; runat=&quot;server&quot; textMode=&quot;multiLine&quot; ReadOnly=&quot;true&quot; columns=&quot;80&quot; rows=&quot;25&quot; /&gt;\n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"PageAddOnPreRenderCompleteAsync#1\">&lt;%@ page language=&quot;C#&quot; Async=&quot;true&quot;%&gt;\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  System.Net.WebRequest myRequest;\n\n  void Page_Load(object sender, EventArgs e)\n  {\n    Label1.Text = &quot;Page_Load: thread #&quot; + System.Threading.Thread.CurrentThread.GetHashCode();\n\n    BeginEventHandler bh = new BeginEventHandler(this.BeginGetAsyncData);\n    EndEventHandler eh = new EndEventHandler(this.EndGetAsyncData);\n\n    AddOnPreRenderCompleteAsync(bh, eh);\n\n    // Initialize the WebRequest.\n    string address = &quot;http://localhost/&quot;;\n\n    myRequest = System.Net.WebRequest.Create(address);\n  }\n\n  IAsyncResult BeginGetAsyncData(Object src, EventArgs args, AsyncCallback cb, Object state)\n  {\n    Label2.Text = &quot;BeginGetAsyncData: thread #&quot; + System.Threading.Thread.CurrentThread.GetHashCode();\n    return myRequest.BeginGetResponse(cb, state);\n  }\n\n  void EndGetAsyncData(IAsyncResult ar)\n  {\n    Label3.Text = &quot;EndGetAsyncData: thread #&quot; + System.Threading.Thread.CurrentThread.GetHashCode();\n\n    System.Net.WebResponse myResponse = myRequest.EndGetResponse(ar);\n\n    result.Text = new System.IO.StreamReader(myResponse.GetResponseStream()).ReadToEnd();\n    myResponse.Close();\n  }\n\n&lt;/script&gt;\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;\n      Page.AddOnPreRenderCompleteAsync Example&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n      &lt;asp:label id=&quot;Label1&quot; runat=&quot;server&quot;&gt;\n        Label 1&lt;/asp:label&gt;&lt;br /&gt;\n      &lt;asp:label id=&quot;Label2&quot; runat=&quot;server&quot;&gt;\n        Label 2&lt;/asp:label&gt;&lt;br /&gt;\n      &lt;asp:label id=&quot;Label3&quot; runat=&quot;server&quot;&gt;\n        Label 3&lt;/asp:label&gt;&lt;br /&gt;\n      &lt;asp:textbox id=&quot;result&quot; runat=&quot;server&quot; textMode=&quot;multiLine&quot; ReadOnly=&quot;true&quot; columns=&quot;80&quot; rows=&quot;25&quot; /&gt;\n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>This delegate is called by the event source when completion of the asynchronous operation is signaled by a callback to the <a class=\"xref\" href=\"system.web.begineventhandler\" data-linktype=\"relative-path\">BeginEventHandler</a> delegate.  </p>\n<p> When you create an EndEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see <a href=\"http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115\" data-linktype=\"external\">NIB: Events and Delegates</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.EndEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.EndEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Web.EndEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Web.EndEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Web.EndEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Web.EndEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"1291753b-8d29-f494-4249-8fa713594e56\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that handles asynchronous events such as application events.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.web/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.EndEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.EndEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Web.EndEventHandler","System.Web.EndEventHandler..ctor","System.Web.EndEventHandler.Invoke","System.Web.EndEventHandler.BeginInvoke","System.Web.EndEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.EndEventHandler","System::Web::EndEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"1291753b-8d29-f494-4249-8fa713594e56","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Web/EndEventHandler.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"EndEventHandler delegate | Microsoft Docs","_op_ogTitle":"EndEventHandler delegate","description":"Represents the method that handles asynchronous events such as application events.\n","toc_asset_id":"api/_splitted/System.Web/toc.json","toc_rel":"_splitted/System.Web/toc.json","source_url":"","ms.assetid":"System.Web.EndEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.web.endeventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.web.endeventhandler","fileRelativePath":"api/System.Web.EndEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}