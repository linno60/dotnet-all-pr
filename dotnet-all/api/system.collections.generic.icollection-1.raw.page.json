{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ICollection&lt;T&gt;</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Defines methods to manipulate generic collections.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public interface ICollection&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;</code></pre>\r\n  \r\n  \r\n  \r\n  \t\t<h3 class=\"accented\">Type Parameters</h3>\r\n  \t\t<table class=\"nameValue stack\">\r\n  \t\t\t<tr>\r\n  \t\t\t<td>T</td>\r\n  \t\t\t<td><p>The type of the elements in the collection.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t</table>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example implements the ICollection(T) interface to create a collection of custom <code>Box</code> objects named <code>BoxCollection</code>. Each <code>Box</code> has height, length, and width properties, which are used to define equality. Equality can be defined as all dimensions being the same or the volume being the same. The <code>Box</code> class implements the <a class=\"xref\" href=\"system.iequatable-1\" data-linktype=\"relative-path\">IEquatable&lt;T&gt;</a> interface to define the default equality as the dimensions being the same.  </p>\n<p> The <code>BoxCollection</code> class implements the <a class=\"xref\" href=\"system.collections.generic.icollection-1#System_Collections_Generic_ICollection_1_Contains_\" data-linktype=\"relative-path\">Contains</a> method to use the default equality to determine whether a <code>Box</code> is in the collection. This method is used by the <a class=\"xref\" href=\"system.collections.generic.icollection-1#System_Collections_Generic_ICollection_1_Add_\" data-linktype=\"relative-path\">Add</a> method so that each <code>Box</code> added to the collection has a unique set of dimensions. The <code>BoxCollection</code> class also provides an overload of the  <a class=\"xref\" href=\"system.collections.generic.icollection-1#System_Collections_Generic_ICollection_1_Contains_\" data-linktype=\"relative-path\">Contains</a> method that takes a specified <a class=\"xref\" href=\"system.collections.generic.equalitycomparer-1\" data-linktype=\"relative-path\">EqualityComparer&lt;T&gt;</a> object, such as <code>BoxSameDimensions</code> and <code>BoxSameVol</code> classes in the example.  </p>\n<p> This example also implements an <a class=\"xref\" href=\"system.collections.generic.ienumerator-1\" data-linktype=\"relative-path\">IEnumerator&lt;T&gt;</a> interface for the <code>BoxCollection</code> class so that the collection can be enumerated.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Collections.Generic.BoxExamples#1\">using System;\nusing System.Collections;\nusing System.Collections.Generic;\n\nclass Program\n{\n\n    static void Main(string[] args)\n    {\n\n        BoxCollection bxList = new BoxCollection();\n\n        bxList.Add(new Box(10, 4, 6));\n        bxList.Add(new Box(4, 6, 10));\n        bxList.Add(new Box(6, 10, 4));\n        bxList.Add(new Box(12, 8, 10));\n\n        // Same dimensions. Cannot be added:\n        bxList.Add(new Box(10, 4, 6));\n\n        // Test the Remove method.\n        Display(bxList);\n        Console.WriteLine(&quot;Removing 6x10x4&quot;);\n        bxList.Remove(new Box(6, 10, 4));\n        Display(bxList);\n\n        // Test the Contains method.\n        Box BoxCheck = new Box(8, 12, 10);\n        Console.WriteLine(&quot;Contains {0}x{1}x{2} by dimensions: {3}&quot;, \n            BoxCheck.Height.ToString(), BoxCheck.Length.ToString(), \n            BoxCheck.Width.ToString(), bxList.Contains(BoxCheck).ToString());\n\n        // Test the Contains method overload with a specified equality comparer.\n        Console.WriteLine(&quot;Contains {0}x{1}x{2} by volume: {3}&quot;, \n            BoxCheck.Height.ToString(), BoxCheck.Length.ToString(), \n            BoxCheck.Width.ToString(), bxList.Contains(BoxCheck, \n            new BoxSameVol()).ToString());\n\n    }\n    public static void Display(BoxCollection bxList)\n    {\n        Console.WriteLine(&quot;\\nHeight\\tLength\\tWidth\\tHash Code&quot;);\n        foreach (Box bx in bxList)\n        {\n            Console.WriteLine(&quot;{0}\\t{1}\\t{2}\\t{3}&quot;,\n                bx.Height.ToString(), bx.Length.ToString(), \n                bx.Width.ToString(), bx.GetHashCode().ToString());\n        }\n\n        // Results by manipulating the enumerator directly:\n\n        //IEnumerator enumerator = bxList.GetEnumerator();\n        //Console.WriteLine(&quot;\\nHeight\\tLength\\tWidth\\tHash Code&quot;);\n        //while (enumerator.MoveNext())\n        //{\n        //    Box b = (Box)enumerator.Current;\n        //    Console.WriteLine(&quot;{0}\\t{1}\\t{2}\\t{3}&quot;,\n        //    b.Height.ToString(), b.Length.ToString(), \n        //    b.Width.ToString(), b.GetHashCode().ToString());\n        //}\n\n        Console.WriteLine();\n    }\n\n}\n\npublic class Box : IEquatable&lt;Box&gt;\n{\n\n    public Box(int h, int l, int w)\n    {\n        this.Height = h;\n        this.Length = l;\n        this.Width = w;\n    }\n    public int Height { get; set; }\n    public int Length { get; set; }\n    public int Width { get; set; }\n\n    // Defines equality using the\n    // BoxSameDimensions equality comparer.\n    public bool Equals(Box other)\n    {\n        if (new BoxSameDimensions().Equals(this, other))\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    public override bool Equals(object obj)\n    {\n        return base.Equals(obj);\n    }\n\n    public override int GetHashCode()\n    {\n        return base.GetHashCode();\n    }\n}\n\npublic class BoxCollection : ICollection&lt;Box&gt;\n{\n    // The generic enumerator obtained from IEnumerator&lt;Box&gt;\n    // by GetEnumerator can also be used with the non-generic IEnumerator.\n    // To avoid a naming conflict, the non-generic IEnumerable method\n    // is explicitly implemented.\n\n    public IEnumerator&lt;Box&gt; GetEnumerator()\n    {\n        return new BoxEnumerator(this);\n    }\n    IEnumerator IEnumerable.GetEnumerator()\n    {\n        return new BoxEnumerator(this);\n    }\n\n    // The inner collection to store objects.\n    private List&lt;Box&gt; innerCol;\n\n    public BoxCollection()\n    {\n        innerCol = new List&lt;Box&gt;();\n    }\n\n    // Adds an index to the collection.\n    public Box this[int index]\n    {\n        get { return (Box)innerCol[index]; }\n        set { innerCol[index] = value; }\n    }\n\n    // Determines if an item is in the collection\n    // by using the BoxSameDimensions equality comparer.\n    public bool Contains(Box item)\n    {\n        bool found = false;\n\n        foreach (Box bx in innerCol)\n        {\n            // Equality defined by the Box\n            // class&#39;s implmentation of IEquitable&lt;T&gt;.\n            if (bx.Equals(item))\n            {\n                found = true;\n            }\n        }\n\n        return found;\n    }\n\n    // Determines if an item is in the \n    // collection by using a specified equality comparer.\n    public bool Contains(Box item, EqualityComparer&lt;Box&gt; comp)\n    {\n        bool found = false;\n\n        foreach (Box bx in innerCol)\n        {\n            if (comp.Equals(bx, item))\n            {\n                found = true;\n            }\n        }\n\n        return found;\n    }\n\n    // Adds an item if it is not already in the collection\n    // as determined by calling the Contains method.\n    public void Add(Box item)\n    {\n\n        if (!Contains(item))\n        {\n            innerCol.Add(item);\n        }\n        else\n        {\n            Console.WriteLine(&quot;A box with {0}x{1}x{2} dimensions was already added to the collection.&quot;,\n                item.Height.ToString(), item.Length.ToString(), item.Width.ToString());\n        }\n    }\n\n    public void Clear()\n    {\n        innerCol.Clear();\n    }\n\n    public void CopyTo(Box[] array, int arrayIndex)\n    {\n        if (array == null)\n           throw new ArgumentNullException(&quot;The array cannot be null.&quot;);\n        if (arrayIndex &lt; 0)\n           throw new ArgumentOutOfRangeException(&quot;The starting array index cannot be negative.&quot;);\n        if (Count &gt; array.Length - arrayIndex + 1)\n           throw new ArgumentException(&quot;The destination array has fewer elements than the collection.&quot;);\n           \n        for (int i = 0; i &lt; innerCol.Count; i++) {\n            array[i + arrayIndex] = innerCol[i];\n        }\n    }\n\n    public int Count\n    {\n        get\n        {\n            return innerCol.Count;\n        }\n    }\n\n    public bool IsReadOnly\n    {\n        get { return false; }\n    }\n\n    public bool Remove(Box item)\n    {\n        bool result = false;\n\n        // Iterate the inner collection to \n        // find the box to be removed.\n        for (int i = 0; i &lt; innerCol.Count; i++)\n        {\n\n            Box curBox = (Box)innerCol[i];\n\n            if (new BoxSameDimensions().Equals(curBox, item))\n            {\n                innerCol.RemoveAt(i);\n                result = true;\n                break;\n            }\n        }\n        return result;\n    }\n}\n\n\n// Defines the enumerator for the Boxes collection.\n// (Some prefer this class nested in the collection class.)\npublic class BoxEnumerator : IEnumerator&lt;Box&gt;\n{\n    private BoxCollection _collection;\n    private int curIndex;\n    private Box curBox;\n\n\n    public BoxEnumerator(BoxCollection collection)\n    {\n        _collection = collection;\n        curIndex = -1;\n        curBox = default(Box);\n\n    }\n\n    public bool MoveNext()\n    {\n        //Avoids going beyond the end of the collection.\n        if (++curIndex &gt;= _collection.Count)\n        {\n            return false;\n        }\n        else\n        {\n            // Set current box to next item in collection.\n            curBox = _collection[curIndex];\n        }\n        return true;\n    }\n\n    public void Reset() { curIndex = -1; }\n\n    void IDisposable.Dispose() { }\n\n    public Box Current\n    {\n        get { return curBox; }\n    }\n\n\n    object IEnumerator.Current\n    {\n        get { return Current; }\n    }\n\n}\n\n// Defines two boxes as equal if they have the same dimensions.\npublic class BoxSameDimensions : EqualityComparer&lt;Box&gt;\n{\n\n    public override bool Equals(Box b1, Box b2)\n    {\n        if (b1.Height == b2.Height &amp;&amp; b1.Length == b2.Length\n                            &amp;&amp; b1.Width == b2.Width)\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n\n    public override int GetHashCode(Box bx)\n    {\n        int hCode = bx.Height ^ bx.Length ^ bx.Width;\n        return hCode.GetHashCode();\n    }\n\n}\n\n// Defines two boxes as equal if they have the same volume.\npublic class BoxSameVol : EqualityComparer&lt;Box&gt;\n{\n\n    public override bool Equals(Box b1, Box b2)\n    {\n        if ((b1.Height * b1.Length * b1.Width) ==\n                (b2.Height * b2.Length * b2.Width))\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n\n    public override int GetHashCode(Box bx)\n    {\n        int hCode = bx.Height ^ bx.Length ^ bx.Width;\n        Console.WriteLine(&quot;HC: {0}&quot;, hCode.GetHashCode());\n        return hCode.GetHashCode();\n    }\n}\n\n\n/* \nThis code example displays the following output:\n================================================\n\nA box with 10x4x6 dimensions was already added to the collection.\n\nHeight  Length  Width   Hash Code\n10      4       6       46104728\n4       6       10      12289376\n6       10      4       43495525\n12      8       10      55915408\n\nRemoving 6x10x4\n\nHeight  Length  Width   Hash Code\n10      4       6       46104728\n4       6       10      12289376\n12      8       10      55915408\n\nContains 8x12x10 by dimensions: False\nContains 8x12x10 by volume: True \n */\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Collections.Generic.BoxExamples#1\">Imports System.Collections\nImports System.Collections.Generic\n\nClass Program\n    Public Shared Sub Main(ByVal args() As String)\n\n        Dim bxList As BoxCollection = New BoxCollection()\n\n        bxList.Add(New Box(10, 4, 6))\n        bxList.Add(New Box(4, 6, 10))\n        bxList.Add(New Box(6, 10, 4))\n        bxList.Add(New Box(12, 8, 10))\n\n        &#39; Same dimensions. Cannot be added:\n        bxList.Add(New Box(10, 4, 6))\n\n        &#39; Test the Remove method.\n        Display(bxList)\n        Console.WriteLine(&quot;Removing 6x10x4&quot;)\n        bxList.Remove(New Box(6, 10, 4))\n        Display(bxList)\n\n        &#39; Test the Contains method\n        Dim BoxCheck As Box = New Box(8, 12, 10)\n        Console.WriteLine(&quot;Contains {0}x{1}x{2} by dimensions: {3}&quot;, BoxCheck.Height.ToString(),\n            BoxCheck.Length.ToString(), BoxCheck.Width.ToString(), bxList.Contains(BoxCheck).ToString())\n\n        &#39; Test the Contains method overload with a specified equality comparer.\n        Console.WriteLine(&quot;Contains {0}x{1}x{2} by volume: {3}&quot;, BoxCheck.Height.ToString(),\n            BoxCheck.Length.ToString(), BoxCheck.Width.ToString(),\n            bxList.Contains(BoxCheck, New BoxSameVol()).ToString())\n\n    End Sub\n\n    Public Shared Sub Display(ByVal bxList As BoxCollection)\n        Console.WriteLine(vbLf &amp; &quot;Height&quot; &amp; vbTab &amp; &quot;Length&quot; &amp; vbTab &amp; &quot;Width&quot; &amp; vbTab &amp; &quot;Hash Code&quot;)\n        For Each bx As Box In bxList\n            Console.WriteLine(&quot;{0}&quot; &amp; vbTab &amp; &quot;{1}&quot; &amp; vbTab &amp; &quot;{2}&quot; &amp; vbTab &amp; &quot;{3}&quot;, bx.Height.ToString(), bx.Length.ToString(), bx.Width.ToString(), bx.GetHashCode().ToString())\n        Next\n        Console.WriteLine()\n    End Sub\nEnd Class\n\nPublic Class Box : Implements IEquatable(Of Box)\n    Public Sub New(ByVal h As Integer, ByVal l As Integer, ByVal w As Integer)\n        Me.Height = h\n        Me.Length = l\n        Me.Width = w\n    End Sub\n\n    Private _Height As Integer\n    Public Property Height() As Integer\n        Get\n            Return _Height\n        End Get\n        Set(ByVal value As Integer)\n            _Height = value\n        End Set\n    End Property\n\n    Private _Length As Integer\n    Public Property Length() As Integer\n        Get\n            Return _Length\n        End Get\n        Set(ByVal value As Integer)\n            _Length = value\n        End Set\n    End Property\n\n    Private _Width As Integer\n    Public Property Width() As Integer\n        Get\n            Return _Width\n        End Get\n        Set(ByVal value As Integer)\n            _Width = value\n        End Set\n    End Property\n\n    Public Overloads Function Equals(ByVal other As Box) As Boolean Implements IEquatable(Of Box).Equals\n        Dim BoxSameDim = New BoxSameDimensions()\n        If BoxSameDim.Equals(Me, other) Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n\n    Public Overrides Function Equals(ByVal obj As Object) As Boolean\n        Return MyBase.Equals(obj)\n    End Function\n\n    Public Overrides Function GetHashCode() As Integer\n        Return MyBase.GetHashCode()\n    End Function\nEnd Class\n\nPublic Class BoxCollection : Implements ICollection(Of Box)\n    &#39; The generic enumerator obtained from IEnumerator&lt;Box&gt; by GetEnumerator can also\n    &#39; be used with the non-generic IEnumerator. To avoid a naming conflict, \n    &#39; the non-generic IEnumerable method is explicitly implemented.\n\n    Public Function GetEnumerator() As IEnumerator(Of Box) _\n        Implements IEnumerable(Of Box).GetEnumerator\n\n        Return New BoxEnumerator(Me)\n    End Function\n\n    Private Function GetEnumerator1() As IEnumerator _\n        Implements IEnumerable.GetEnumerator\n\n        Return Me.GetEnumerator()\n    End Function\n\n    &#39; The inner collection to store objects.\n    Private innerCol As List(Of Box)\n\n    Public Sub New()\n        innerCol = New List(Of Box)\n    End Sub\n\n    &#39; Adds an index to the collection.\n    Default Public Property Item(ByVal index As Integer) As Box\n        Get\n            &#39;If index &lt;&gt; -1 Then\n            Return CType(innerCol(index), Box)\n            &#39;End If\n            &#39;Return Nothing\n        End Get\n        Set(ByVal Value As Box)\n            innerCol(index) = Value\n        End Set\n    End Property\n\n    &#39; Determines if an item is in the collection\n    &#39; by using the BoxSameDimensions equality comparer.\n    Public Function Contains(ByVal item As Box) As Boolean _\n            Implements ICollection(Of Box).Contains\n        Dim found As Boolean = False\n\n        Dim bx As Box\n        For Each bx In innerCol\n            If New BoxSameDimensions().Equals(bx, item) Then\n                found = True\n            End If\n        Next\n\n        Return found\n    End Function\n\n    &#39; Determines if an item is in the \n    &#39; collection by using a specified equality comparer.\n    Public Function Contains(ByVal item As Box, _\n    \tByVal comp As EqualityComparer(Of Box)) As Boolean\n        Dim found As Boolean = False\n\n        Dim bx As Box\n        For Each bx In innerCol\n            If comp.Equals(bx, item) Then\n                found = True\n            End If\n        Next\n\n        Return found\n    End Function\n\n    &#39; Adds an item if it is not already in the collection\n    &#39; as determined by calling the Contains method.\n    Public Sub Add(ByVal item As Box) _\n        Implements ICollection(Of Box).Add\n\n        If Not Me.Contains(item) Then\n            innerCol.Add(item)\n        Else\n            Console.WriteLine(&quot;A box with {0}x{1}x{2} dimensions was already added to the collection.&quot;,\n                item.Height.ToString(), item.Length.ToString(), item.Width.ToString())\n        End If\n    End Sub\n\n    Public Sub Clear() Implements ICollection(Of Box).Clear\n        innerCol.Clear()\n    End Sub\n\n    Public Sub CopyTo(array As Box(), arrayIndex As Integer) _\n            Implements ICollection(Of Box).CopyTo\n        If array Is Nothing Then\n           Throw New ArgumentNullException(&quot;The array cannot be null.&quot;)\n        Else If arrayIndex &lt; 0 Then\n           Throw New ArgumentOutOfRangeException(&quot;The starting array index cannot be negative.&quot;)\n        Else If Count &gt; array.Length - arrayIndex + 1 Then\n           Throw New ArgumentException(&quot;The destination array has fewer elements than the collection.&quot;)\n        End If\n        \n        For i As Integer = 0 To innerCol.Count - 1\n            array(i + arrayIndex) = innerCol(i)\n        Next\n    End Sub\n\n    Public ReadOnly Property Count() As Integer _\n            Implements ICollection(Of Box).Count\n        Get\n            Return innerCol.Count\n        End Get\n    End Property\n\n    Public ReadOnly Property IsReadOnly() As Boolean _\n           Implements ICollection(Of Box).IsReadOnly\n        Get\n            Return False\n        End Get\n    End Property\n\n    Public Function Remove(ByVal item As Box) As Boolean _\n            Implements ICollection(Of Box).Remove\n        Dim result As Boolean = False\n\n        &#39; Iterate the inner collection to \n        &#39; find the box to be removed.\n\n        Dim i As Integer\n        For i = 0 To innerCol.Count - 1\n\n            Dim curBox As Box = CType(innerCol(i), Box)\n\n            If New BoxSameDimensions().Equals(curBox, item) Then\n                innerCol.RemoveAt(i)\n                result = True\n                Exit For\n            End If\n        Next\n        Return result\n    End Function\nEnd Class\n\n&#39; Defines the enumerator for the Boxes collection.\n&#39; (Some prefer this class nested in the collection class.)\nPublic Class BoxEnumerator\n    Implements IEnumerator(Of Box)\n    Private _collection As BoxCollection\n    Private curIndex As Integer\n    Private curBox As Box\n\n\n    Public Sub New(ByVal collection As BoxCollection)\n        MyBase.New()\n        _collection = collection\n        curIndex = -1\n        curBox = Nothing\n\n    End Sub\n\n    Private Property Box As Box\n    Public Function MoveNext() As Boolean _\n        Implements IEnumerator(Of Box).MoveNext\n        curIndex = curIndex + 1\n        If curIndex = _collection.Count Then\n            &#39; Avoids going beyond the end of the collection.\n            Return False\n        Else\n            &#39;Set current box to next item in collection.\n            curBox = _collection(curIndex)\n        End If\n        Return True\n    End Function\n\n    Public Sub Reset() _\n        Implements IEnumerator(Of Box).Reset\n        curIndex = -1\n    End Sub\n\n    Public Sub Dispose() _\n        Implements IEnumerator(Of Box).Dispose\n\n    End Sub\n\n    Public ReadOnly Property Current() As Box _\n        Implements IEnumerator(Of Box).Current\n\n        Get\n            If curBox Is Nothing Then\n                Throw New InvalidOperationException()\n            End If\n\n            Return curBox\n        End Get\n    End Property\n\n    Private ReadOnly Property Current1() As Object _\n        Implements IEnumerator.Current\n\n        Get\n            Return Me.Current\n        End Get\n    End Property\nEnd Class\n\n&#39; Defines two boxes as equal if they have the same dimensions.\nPublic Class BoxSameDimensions\n    Inherits EqualityComparer(Of Box)\n\n    Public Overrides Function Equals(ByVal b1 As Box, ByVal b2 As Box) As Boolean\n        If b1.Height = b2.Height And b1.Length = b2.Length And b1.Width = b2.Width Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n\n    Public Overrides Function GetHashCode(ByVal bx As Box) As Integer\n        Dim hCode As Integer = bx.Height ^ bx.Length ^ bx.Width\n        Return hCode.GetHashCode()\n    End Function\nEnd Class\n\n&#39; Defines two boxes as equal if they have the same volume.\nPublic Class BoxSameVol\n    Inherits EqualityComparer(Of Box)\n\n    Public Overrides Function Equals(ByVal b1 As Box, ByVal b2 As Box) As Boolean\n        If (b1.Height * b1.Length * b1.Width) _\n            = (b2.Height * b2.Length * b2.Width) Then\n            Return True\n        Else\n            Return False\n        End If\n    End Function\n\n    Public Overrides Function GetHashCode(ByVal bx As Box) As Integer\n        Dim hCode As Integer = bx.Height ^ bx.Length ^ bx.Width\n        Console.WriteLine(&quot;HC: {0}&quot;, hCode.GetHashCode())\n        Return hCode.GetHashCode()\n    End Function\nEnd Class\n\n\n&#39;  This code example displays the following output:\n&#39;  ================================================\n&#39;\n&#39;  A box with 10x4x6 dimensions was already added to the collection.\n&#39;\n&#39;  Height  Length  Width   Hash Code\n&#39;  10      4       6       46104728\n&#39;  4       6       10      12289376\n&#39;  6       10      4       43495525\n&#39;  12      8       10      55915408\n&#39;\n&#39;  Removing 6x10x4\n&#39;\n&#39;  Height  Length  Width   Hash Code\n&#39;  10      4       6       46104728\n&#39;  4       6       10      12289376\n&#39;  12      8       10      55915408\n&#39;\n&#39;  Contains 8x12x10 by dimensions: False\n&#39;  Contains 8x12x10 by volume: True\n&#39;\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The ICollection(T) interface is the base interface for classes in the <a class=\"xref\" href=\"system.collections.generic\" data-linktype=\"relative-path\">System.Collections.Generic</a> namespace.  </p>\n<p> The ICollection(T) interface extends <a class=\"xref\" href=\"system.collections.generic.ienumerable-1\" data-linktype=\"relative-path\">IEnumerable&lt;T&gt;</a>; <a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary&lt;TKey,TValue&gt;</a> and <a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList&lt;T&gt;</a> are more specialized interfaces that extend ICollection(T). A <a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary&lt;TKey,TValue&gt;</a> implementation is a collection of key/value pairs, like the <a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a> class. A <a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList&lt;T&gt;</a> implementation is a collection of values, and its members can be accessed by index, like the <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> class.  </p>\n<p> If neither the <a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary&lt;TKey,TValue&gt;</a> interface nor the <a class=\"xref\" href=\"system.collections.generic.ilist-1\" data-linktype=\"relative-path\">IList&lt;T&gt;</a> interface meet the requirements of the required collection, derive the new collection class from the ICollection(T) interface instead for more flexibility.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Collections_Generic_ICollection_1_Count_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_Generic_ICollection_1_Count\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Count</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the number of elements contained in the <span class=\"xref\">stem.Collections.Generic.ICollection`1</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int Count { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of elements contained in the <span class=\"xref\">stem.Collections.Generic.ICollection`1</span>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Collections_Generic_ICollection_1_IsReadOnly_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_Generic_ICollection_1_IsReadOnly\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsReadOnly</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value indicating whether the <span class=\"xref\">stem.Collections.Generic.ICollection`1</span> is read-only.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsReadOnly { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <span class=\"xref\">stem.Collections.Generic.ICollection`1</span> is read-only; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>A collection that is read-only does not allow the addition or removal of elements after the collection is created. Note that read-only in this context does not indicate whether individual elements of the collection can be modified, since the <a class=\"xref\" href=\"system.collections.generic.icollection-1\" data-linktype=\"relative-path\">ICollection&lt;T&gt;</a> interface only supports addition and removal operations. For example, the IsReadOnly property of an array that is cast or converted to an <a class=\"xref\" href=\"system.collections.generic.icollection-1\" data-linktype=\"relative-path\">ICollection&lt;T&gt;</a> object returns <code>true</code>, even though individual array elements can be modified.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Collections_Generic_ICollection_1_Add_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_Generic_ICollection_1_Add__0_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Add(T)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Adds an item to the <span class=\"xref\">stem.Collections.Generic.ICollection`1</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Add (T item);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>item</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">T</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object to add to the <span class=\"xref\">stem.Collections.Generic.ICollection`1</span>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <span class=\"xref\">stem.Collections.Generic.ICollection`1</span> is read-only.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Collections_Generic_ICollection_1_Clear_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_Generic_ICollection_1_Clear\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Clear()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Removes all items from the <span class=\"xref\">stem.Collections.Generic.ICollection`1</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Clear ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <span class=\"xref\">stem.Collections.Generic.ICollection`1</span> is read-only.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.collections.generic.icollection-1#System_Collections_Generic_ICollection_1_Count_\" data-linktype=\"relative-path\">Count</a> must be set to 0, and references to other objects from elements of the collection must be released.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Collections_Generic_ICollection_1_Contains_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_Generic_ICollection_1_Contains__0_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Contains(T)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether the <span class=\"xref\">stem.Collections.Generic.ICollection`1</span> contains a specific value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool Contains (T item);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>item</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">T</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object to locate in the <span class=\"xref\">stem.Collections.Generic.ICollection`1</span>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>item</code> is found in the <span class=\"xref\">stem.Collections.Generic.ICollection`1</span>; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Implementations can vary in how they determine equality of objects; for example, <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> uses <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a>, whereas <a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a> allows the user to specify the <a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer&lt;T&gt;</a> implementation to use for comparing keys.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Collections_Generic_ICollection_1_CopyTo_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_Generic_ICollection_1_CopyTo__0___System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CopyTo(T[], Int32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Copies the elements of the <span class=\"xref\">stem.Collections.Generic.ICollection`1</span> to an <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a>, starting at a particular <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> index.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void CopyTo (T[] array, int arrayIndex);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>array</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">T</span>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The one-dimensional <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> that is the destination of the elements copied from <span class=\"xref\">stem.Collections.Generic.ICollection`1</span>. The <a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a> must have zero-based indexing.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>arrayIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The zero-based index in <code>array</code> at which copying begins.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>array</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>arrayIndex</code> is less than 0.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The number of elements in the source <span class=\"xref\">stem.Collections.Generic.ICollection`1</span> is greater than the available space from <code>arrayIndex</code> to the end of the destination <code>array</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Collections_Generic_ICollection_1_Remove_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Collections_Generic_ICollection_1_Remove__0_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Remove(T)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Removes the first occurrence of a specific object from the <span class=\"xref\">stem.Collections.Generic.ICollection`1</span>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool Remove (T item);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>item</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><span class=\"xref\">T</span></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object to remove from the <span class=\"xref\">stem.Collections.Generic.ICollection`1</span>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>item</code> was successfully removed from the <span class=\"xref\">stem.Collections.Generic.ICollection`1</span>; otherwise, <code>false</code>. This method also returns <code>false</code> if <code>item</code> is not found in the original <span class=\"xref\">stem.Collections.Generic.ICollection`1</span>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <span class=\"xref\">stem.Collections.Generic.ICollection`1</span> is read-only.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Implementations can vary in how they determine equality of objects; for example, <a class=\"xref\" href=\"system.collections.generic.list-1\" data-linktype=\"relative-path\">List&lt;T&gt;</a> uses <a class=\"xref\" href=\"system.collections.generic.comparer-1#System_Collections_Generic_Comparer_1_Default_\" data-linktype=\"relative-path\">Default</a>, whereas, <a class=\"xref\" href=\"system.collections.generic.dictionary-2\" data-linktype=\"relative-path\">Dictionary&lt;TKey,TValue&gt;</a> allows the user to specify the <a class=\"xref\" href=\"system.collections.generic.icomparer-1\" data-linktype=\"relative-path\">IComparer&lt;T&gt;</a> implementation to use for comparing keys.  </p>\n<p> In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Collections.Generic.ICollection-1.yml\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.ICollection&lt;T&gt;\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.ICollection&lt;T&gt;.Add\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.ICollection&lt;T&gt;.Clear\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.ICollection&lt;T&gt;.Contains\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.ICollection&lt;T&gt;.CopyTo\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.ICollection&lt;T&gt;.Count\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Collections.Generic.ICollection&lt;T&gt;.Remove\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"b8cbacad-94d9-e7df-9fd9-489a341cbb13\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines methods to manipulate generic collections.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.collections.generic/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Collections.Generic.ICollection`1\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Collections.Generic.ICollection-1.yml","open_to_public_contributors":false,"api_name":["System.Collections.Generic.ICollection<T>","System.Collections.Generic.ICollection<T>.Add","System.Collections.Generic.ICollection<T>.Clear","System.Collections.Generic.ICollection<T>.Contains","System.Collections.Generic.ICollection<T>.CopyTo","System.Collections.Generic.ICollection<T>.Count","System.Collections.Generic.ICollection<T>.IsReadOnly","System.Collections.Generic.ICollection<T>.Remove"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Collections.Generic.ICollection`1","System::Collections::Generic::ICollection`1","System.Collections.Generic.ICollection`1.Add","System::Collections::Generic::ICollection`1::Add","System.Collections.Generic.ICollection`1.Clear","System::Collections::Generic::ICollection`1::Clear","System.Collections.Generic.ICollection`1.Contains","System::Collections::Generic::ICollection`1::Contains","System.Collections.Generic.ICollection`1.CopyTo","System::Collections::Generic::ICollection`1::CopyTo","System.Collections.Generic.ICollection`1.Count","System::Collections::Generic::ICollection`1::Count","System.Collections.Generic.ICollection`1.IsReadOnly","System::Collections::Generic::ICollection`1::IsReadOnly","System.Collections.Generic.ICollection`1.Remove","System::Collections::Generic::ICollection`1::Remove"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"b8cbacad-94d9-e7df-9fd9-489a341cbb13","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Collections.Generic/ICollection`1.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ICollection<T> interface | Microsoft Docs","_op_ogTitle":"ICollection<T> interface","description":"Defines methods to manipulate generic collections.\n","toc_asset_id":"api/_splitted/System.Collections.Generic/toc.json","toc_rel":"_splitted/System.Collections.Generic/toc.json","source_url":"","ms.assetid":"System.Collections.Generic.ICollection`1","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.icollection-1","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.icollection-1","fileRelativePath":"api/System.Collections.Generic.ICollection-1.html"},"themesRelativePathToOutputRoot":"_themes/"}