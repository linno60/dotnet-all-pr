{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">EventArgs</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the base class for classes that contain event data, and provides a value to use for events that do not include event data.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic class EventArgs</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">EventArgs</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example shows a custom event data class named <code>ThresholdReachedEventArgs</code> that derives from the EventArgs class. An instance of the event data class is passed to the event handler for the <code>ThresholdReached</code> event.  </p>\n<pre><code class=\"lang-cs\" name=\"EventsOverview#6\">using System;\n\nnamespace ConsoleApplication1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Counter c = new Counter(new Random().Next(10));\n            c.ThresholdReached += c_ThresholdReached;\n\n            Console.WriteLine(&quot;press &#39;a&#39; key to increase total&quot;);\n            while (Console.ReadKey(true).KeyChar == &#39;a&#39;)\n            {\n                Console.WriteLine(&quot;adding one&quot;);\n                c.Add(1);\n            }\n        }\n\n        static void c_ThresholdReached(object sender, ThresholdReachedEventArgs e)\n        {\n            Console.WriteLine(&quot;The threshold of {0} was reached at {1}.&quot;, e.Threshold,  e.TimeReached);\n            Environment.Exit(0);\n        }\n    }\n\n    class Counter\n    {\n        private int threshold;\n        private int total;\n\n        public Counter(int passedThreshold)\n        {\n            threshold = passedThreshold;\n        }\n\n        public void Add(int x)\n        {\n            total += x;\n            if (total &gt;= threshold)\n            {\n                ThresholdReachedEventArgs args = new ThresholdReachedEventArgs();\n                args.Threshold = threshold;\n                args.TimeReached = DateTime.Now;\n                OnThresholdReached(args);\n            }\n        }\n\n        protected virtual void OnThresholdReached(ThresholdReachedEventArgs e)\n        {\n            EventHandler&lt;ThresholdReachedEventArgs&gt; handler = ThresholdReached;\n            if (handler != null)\n            {\n                handler(this, e);\n            }\n        }\n\n        public event EventHandler&lt;ThresholdReachedEventArgs&gt; ThresholdReached;\n    }\n\n    public class ThresholdReachedEventArgs : EventArgs\n    {\n        public int Threshold { get; set; }\n        public DateTime TimeReached { get; set; }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"EventsOverview#6\">using namespace System;\n\npublic ref class ThresholdReachedEventArgs : public EventArgs\n{\n   public:\n      property int Threshold;\n      property DateTime TimeReached;\n};\n\npublic ref class Counter\n{\n   private:\n      int threshold;\n      int total;\n\n   public:\n      Counter() {};\n\n      Counter(int passedThreshold)\n      {\n         threshold = passedThreshold;\n      }\n\n      void Add(int x)\n      {\n          total += x;\n          if (total &gt;= threshold) {\n             ThresholdReachedEventArgs^ args = gcnew ThresholdReachedEventArgs();\n             args-&gt;Threshold = threshold;\n             args-&gt;TimeReached = DateTime::Now;\n             OnThresholdReached(args);\n          }\n      }\n\n      event EventHandler&lt;ThresholdReachedEventArgs^&gt;^ ThresholdReached;\n\n   protected:\n      virtual void OnThresholdReached(ThresholdReachedEventArgs^ e)\n      {\n         ThresholdReached(this, e);\n      }\n};\n\npublic ref class SampleHandler\n{\n   public:\n      static void c_ThresholdReached(Object^ sender, ThresholdReachedEventArgs^ e)\n      {\n         Console::WriteLine(&quot;The threshold of {0} was reached at {1}.&quot;,\n                            e-&gt;Threshold,  e-&gt;TimeReached);\n         Environment::Exit(0);\n      }\n};\n\nvoid main()\n{\n   Counter^ c = gcnew Counter((gcnew Random())-&gt;Next(10));\n   c-&gt;ThresholdReached += gcnew EventHandler&lt;ThresholdReachedEventArgs^&gt;(SampleHandler::c_ThresholdReached);\n\n   Console::WriteLine(&quot;press &#39;a&#39; key to increase total&quot;);\n   while (Console::ReadKey(true).KeyChar == &#39;a&#39;) {\n      Console::WriteLine(&quot;adding one&quot;);\n      c-&gt;Add(1);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"EventsOverview#6\">Module Module1\n\n    Sub Main()\n        Dim c As Counter = New Counter(New Random().Next(10))\n        AddHandler c.ThresholdReached, AddressOf c_ThresholdReached\n\n        Console.WriteLine(&quot;press &#39;a&#39; key to increase total&quot;)\n        While Console.ReadKey(True).KeyChar = &quot;a&quot;\n            Console.WriteLine(&quot;adding one&quot;)\n            c.Add(1)\n        End While\n    End Sub\n\n    Sub c_ThresholdReached(sender As Object, e As ThresholdReachedEventArgs)\n        Console.WriteLine(&quot;The threshold of {0} was reached at {1}.&quot;, e.Threshold, e.TimeReached)\n        Environment.Exit(0)\n    End Sub\nEnd Module\n\nClass Counter\n    Private threshold As Integer\n    Private total As Integer\n\n    Public Sub New(passedThreshold As Integer)\n        threshold = passedThreshold\n    End Sub\n\n    Public Sub Add(x As Integer)\n        total = total + x\n        If (total &gt;= threshold) Then\n            Dim args As ThresholdReachedEventArgs = New ThresholdReachedEventArgs()\n            args.Threshold = threshold\n            args.TimeReached = DateTime.Now\n            OnThresholdReached(args)\n        End If\n    End Sub\n\n    Protected Overridable Sub OnThresholdReached(e As ThresholdReachedEventArgs)\n        RaiseEvent ThresholdReached(Me, e)\n    End Sub\n\n    Public Event ThresholdReached As EventHandler(Of ThresholdReachedEventArgs)\nEnd Class\n\nClass ThresholdReachedEventArgs\n    Inherits EventArgs\n\n    Public Property Threshold As Integer\n    Public Property TimeReached As DateTime\nEnd Class\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>This class serves as the base class for all classes that represent event data. For example, the <a class=\"xref\" href=\"system.assemblyloadeventargs\" data-linktype=\"relative-path\">System.AssemblyLoadEventArgs</a> class derives from EventArgs and is used to hold the data for assembly load events. To create a custom event data class, create a class that derives from the EventArgs class and provide the properties to store the necessary data. The name of your custom event data class should end with <code>EventArgs</code>.  </p>\n<p> To pass an object that does not contain any data, use the <a class=\"xref\" href=\"system.eventargs#System_EventArgs_Empty\" data-linktype=\"relative-path\">Empty</a> field.  </p>\n<p> For more information about events, see the <a href=\"../topic/handling%20and%20raising%20events\" data-linktype=\"relative-path\">Events</a> article.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_EventArgs__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">EventArgs()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public EventArgs ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>To pass an object that does not contain any data, use the <a class=\"xref\" href=\"system.eventargs#System_EventArgs_Empty\" data-linktype=\"relative-path\">Empty</a> field.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Fields\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_EventArgs_Empty\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Empty</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Provides a value to use with events that do not have event data.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static readonly EventArgs Empty;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Pass this value to event handlers that are associated with events that do not have data.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.EventArgs.yml\">\r\n<meta name=\"APIName\" content=\"System.EventArgs\">\r\n<meta name=\"APIName\" content=\"System.EventArgs..ctor\">\r\n<meta name=\"APIName\" content=\"System.EventArgs.Empty\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"538ee6f9-01c6-4811-0276-29c6dad1f4e7\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the base class for classes that contain event data, and provides a value to use for events that do not include event data.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.EventArgs\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.EventArgs.yml","open_to_public_contributors":false,"api_name":["System.EventArgs","System.EventArgs..ctor","System.EventArgs.Empty"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.EventArgs","System::EventArgs","System.EventArgs.#ctor","System::EventArgs::#ctor","System.EventArgs.Empty","System::EventArgs::Empty"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"538ee6f9-01c6-4811-0276-29c6dad1f4e7","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System/EventArgs.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"EventArgs class | Microsoft Docs","_op_ogTitle":"EventArgs class","description":"Represents the base class for classes that contain event data, and provides a value to use for events that do not include event data.\n","toc_asset_id":"api/_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.EventArgs","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.eventargs","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.eventargs","fileRelativePath":"api/System.EventArgs.html"},"themesRelativePathToOutputRoot":"_themes/"}