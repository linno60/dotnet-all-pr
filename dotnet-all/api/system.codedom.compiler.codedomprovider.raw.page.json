{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">CodeDomProvider</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides a base class for CodeDomProvider implementations. This class is abstract.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[ECMA2Yaml.Models.ECMAAttribute]\n[ECMA2Yaml.Models.ECMAAttribute]\npublic abstract class CodeDomProvider : System.ComponentModel.Component</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.component\" data-linktype=\"relative-path\">Component</a></span></div><span class=\"lang-csharp\">CodeDomProvider</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Derived</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n        \t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.csharp.csharpcodeprovider\" data-linktype=\"relative-path\">CSharpCodeProvider</a></span></div>\r\n        \t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.jscript.jscriptcodeprovider\" data-linktype=\"relative-path\">JScriptCodeProvider</a></span></div>\r\n        \t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"microsoft.visualbasic.vbcodeprovider\" data-linktype=\"relative-path\">VBCodeProvider</a></span></div>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.componentmodel.toolboxitemattribute\" title=\"System.ComponentModel.ToolboxItemAttribute\" data-linktype=\"relative-path\">ToolboxItemAttribute</a></span>\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_CanRaiseEvents\" data-linktype=\"relative-path\">CanRaiseEvents</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Container\" data-linktype=\"relative-path\">Container</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_DesignMode\" data-linktype=\"relative-path\">DesignMode</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Dispose\" data-linktype=\"relative-path\">Dispose()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Dispose_System_Boolean_\" data-linktype=\"relative-path\">Dispose(Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Disposed\" data-linktype=\"relative-path\">Disposed</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Events\" data-linktype=\"relative-path\">Events</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_GetService_System_Type_\" data-linktype=\"relative-path\">GetService(Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_Site\" data-linktype=\"relative-path\">Site</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_InitializeLifetimeService\" data-linktype=\"relative-path\">InitializeLifetimeService()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example program can generate and compile source code based on a CodeDOM model of a program that prints &quot;Hello World&quot; using the <a class=\"xref\" href=\"system.console\" data-linktype=\"relative-path\">Console</a> class. A Windows Forms user interface is provided. The user can select the target programming language from several selections: C#, Visual Basic, and JScript.  </p>\n<pre><code class=\"lang-cpp\" name=\"CodeDomExample#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n#using &lt;System.dll&gt;\n#using &lt;Microsoft.JScript.dll&gt;\n\nusing namespace System;\nusing namespace System::CodeDom;\nusing namespace System::CodeDom::Compiler;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::Diagnostics;\nusing namespace System::Drawing;\nusing namespace System::IO;\nusing namespace System::Windows::Forms;\nusing namespace Microsoft::CSharp;\nusing namespace Microsoft::VisualBasic;\nusing namespace Microsoft::JScript;\nusing namespace System::Security::Permissions;\n\n// This example demonstrates building a Hello World program graph \n// using System.CodeDom elements. It calls code generator and\n// code compiler methods to build the program using CSharp, VB, or\n// JScript.  A Windows Forms interface is included. Note: Code\n// must be compiled and linked with the Microsoft.JScript assembly. \nnamespace CodeDOMExample\n{\n    [PermissionSet(SecurityAction::Demand, Name=&quot;FullTrust&quot;)]\n    public ref class CodeDomExample\n    {\n    public:\n        // Build a Hello World program graph using \n        // System::CodeDom types.\n        static CodeCompileUnit^ BuildHelloWorldGraph()\n        {\n            // Create a new CodeCompileUnit to contain \n            // the program graph.\n            CodeCompileUnit^ compileUnit = gcnew CodeCompileUnit;\n\n            // Declare a new namespace called Samples.\n            CodeNamespace^ samples = gcnew CodeNamespace( &quot;Samples&quot; );\n\n            // Add the new namespace to the compile unit.\n            compileUnit-&gt;Namespaces-&gt;Add( samples );\n\n            // Add the new namespace import for the System namespace.\n            samples-&gt;Imports-&gt;Add( gcnew CodeNamespaceImport( &quot;System&quot; ) );\n\n            // Declare a new type called Class1.\n            CodeTypeDeclaration^ class1 = gcnew CodeTypeDeclaration( &quot;Class1&quot; );\n\n            // Add the new type to the namespace&#39;s type collection.\n            samples-&gt;Types-&gt;Add( class1 );\n\n            // Declare a new code entry point method.\n            CodeEntryPointMethod^ start = gcnew CodeEntryPointMethod;\n\n            // Create a type reference for the System::Console class.\n            CodeTypeReferenceExpression^ csSystemConsoleType = gcnew CodeTypeReferenceExpression( &quot;System.Console&quot; );\n\n            // Build a Console::WriteLine statement.\n            CodeMethodInvokeExpression^ cs1 = gcnew CodeMethodInvokeExpression( csSystemConsoleType,&quot;WriteLine&quot;, gcnew CodePrimitiveExpression(&quot;Hello World!&quot;) );\n\n            // Add the WriteLine call to the statement collection.\n            start-&gt;Statements-&gt;Add( cs1 );\n\n            // Build another Console::WriteLine statement.\n            CodeMethodInvokeExpression^ cs2 = gcnew CodeMethodInvokeExpression( csSystemConsoleType,&quot;WriteLine&quot;, gcnew CodePrimitiveExpression( &quot;Press the Enter key to continue.&quot; ) );\n\n            // Add the WriteLine call to the statement collection.\n            start-&gt;Statements-&gt;Add( cs2 );\n\n            // Build a call to System::Console::ReadLine.\n            CodeMethodReferenceExpression^ csReadLine = gcnew CodeMethodReferenceExpression( csSystemConsoleType, &quot;ReadLine&quot; );\n            CodeMethodInvokeExpression^ cs3 = gcnew CodeMethodInvokeExpression( csReadLine, gcnew array&lt;CodeExpression^&gt;(0) );\n\n            // Add the ReadLine statement.\n            start-&gt;Statements-&gt;Add( cs3 );\n\n            // Add the code entry point method to\n            // the Members collection of the type.\n            class1-&gt;Members-&gt;Add( start );\n            return compileUnit;\n        }\n\n        static void GenerateCode( CodeDomProvider^ provider, CodeCompileUnit^ compileunit )\n        {\n            // Build the source file name with the appropriate\n            // language extension.\n            String^ sourceFile;\n            if ( provider-&gt;FileExtension-&gt;StartsWith( &quot;.&quot; ) )\n            {\n                sourceFile = String::Concat( &quot;TestGraph&quot;, provider-&gt;FileExtension );\n            }\n            else\n            {\n                sourceFile = String::Concat( &quot;TestGraph.&quot;, provider-&gt;FileExtension );\n            }\n\n            // Create an IndentedTextWriter, constructed with\n            // a StreamWriter to the source file.\n            IndentedTextWriter^ tw = gcnew IndentedTextWriter( gcnew StreamWriter( sourceFile,false ),&quot;    &quot; );\n\n            // Generate source code using the code generator.\n            provider-&gt;GenerateCodeFromCompileUnit( compileunit, tw, gcnew CodeGeneratorOptions );\n\n            // Close the output file.\n            tw-&gt;Close();\n        }\n\n        static CompilerResults^ CompileCode( CodeDomProvider^ provider, String^ sourceFile, String^ exeFile )\n        {\n            // Configure a CompilerParameters that links System.dll\n            // and produces the specified executable file.\n            array&lt;String^&gt;^referenceAssemblies = {&quot;System.dll&quot;};\n            CompilerParameters^ cp = gcnew CompilerParameters( referenceAssemblies,exeFile,false );\n\n            // Generate an executable rather than a DLL file.\n            cp-&gt;GenerateExecutable = true;\n\n            // Invoke compilation.\n            CompilerResults^ cr = provider-&gt;CompileAssemblyFromFile( cp, sourceFile );\n\n            // Return the results of compilation.\n            return cr;\n        }\n    };\n\n    public ref class CodeDomExampleForm: public System::Windows::Forms::Form\n    {\n    private:\n        static System::Windows::Forms::Button^ run_button = gcnew System::Windows::Forms::Button;\n        static System::Windows::Forms::Button^ compile_button = gcnew System::Windows::Forms::Button;\n        static System::Windows::Forms::Button^ generate_button = gcnew System::Windows::Forms::Button;\n        static System::Windows::Forms::TextBox^ textBox1 = gcnew System::Windows::Forms::TextBox;\n        static System::Windows::Forms::ComboBox^ comboBox1 = gcnew System::Windows::Forms::ComboBox;\n        static System::Windows::Forms::Label^ label1 = gcnew System::Windows::Forms::Label;\n        void generate_button_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n        {\n            CodeDomProvider^ provider = GetCurrentProvider();\n            CodeDomExample::GenerateCode( provider, CodeDomExample::BuildHelloWorldGraph() );\n\n            // Build the source file name with the appropriate\n            // language extension.\n            String^ sourceFile;\n            if ( provider-&gt;FileExtension-&gt;StartsWith( &quot;.&quot; ) )\n            {\n                sourceFile = String::Concat( &quot;TestGraph&quot;, provider-&gt;FileExtension );\n            }\n            else\n            {\n                sourceFile = String::Concat( &quot;TestGraph.&quot;, provider-&gt;FileExtension );\n            }\n\n\n            // Read in the generated source file and\n            // display the source text.\n            StreamReader^ sr = gcnew StreamReader( sourceFile );\n            textBox1-&gt;Text = sr-&gt;ReadToEnd();\n            sr-&gt;Close();\n        }\n\n        CodeDomProvider^ GetCurrentProvider()\n        {\n            CodeDomProvider^ provider;\n            if ( String::Compare( dynamic_cast&lt;String^&gt;(this-&gt;comboBox1-&gt;SelectedItem), &quot;CSharp&quot; ) == 0 )\n                provider = CodeDomProvider::CreateProvider(&quot;CSharp&quot;);\n            else\n                if ( String::Compare( dynamic_cast&lt;String^&gt;(this-&gt;comboBox1-&gt;SelectedItem), &quot;Visual Basic&quot; ) == 0 )\n                    provider = CodeDomProvider::CreateProvider(&quot;VisualBasic&quot;);\n                else\n                    if ( String::Compare( dynamic_cast&lt;String^&gt;(this-&gt;comboBox1-&gt;SelectedItem), &quot;JScript&quot; ) == 0 )\n                        provider = CodeDomProvider::CreateProvider(&quot;JScript&quot;);\n                    else\n                        provider = CodeDomProvider::CreateProvider(&quot;CSharp&quot;);\n\n            return provider;\n        }\n\n        void compile_button_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n        {\n            CodeDomProvider^ provider = GetCurrentProvider();\n\n            // Build the source file name with the appropriate\n            // language extension.\n            String^ sourceFile = String::Concat( &quot;TestGraph.&quot;, provider-&gt;FileExtension );\n\n            // Compile the source file into an executable output file.\n            CompilerResults^ cr = CodeDomExample::CompileCode( provider, sourceFile, &quot;TestGraph.exe&quot; );\n            if ( cr-&gt;Errors-&gt;Count &gt; 0 )\n            {\n                // Display compilation errors.\n                textBox1-&gt;Text = String::Concat( &quot;Errors encountered while building &quot;, sourceFile, &quot; into &quot;, cr-&gt;PathToAssembly, &quot;: \\r\\n\\n&quot; );\n                System::CodeDom::Compiler::CompilerError^ ce;\n                for ( int i = 0; i &lt; cr-&gt;Errors-&gt;Count; i++ )\n                {\n                    ce = cr-&gt;Errors[i];\n                    textBox1-&gt;AppendText( String::Concat( ce-&gt;ToString(), &quot;\\r\\n&quot; ) );\n\n                }\n                run_button-&gt;Enabled = false;\n            }\n            else\n            {\n                textBox1-&gt;Text = String::Concat( &quot;Source &quot;, sourceFile, &quot; built into &quot;, cr-&gt;PathToAssembly, &quot; with no errors.&quot; );\n                run_button-&gt;Enabled = true;\n            }\n        }\n\n        void run_button_Click( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n        {\n            Process::Start( &quot;TestGraph.exe&quot; );\n        }\n\n    public:\n        CodeDomExampleForm()\n        {\n            this-&gt;SuspendLayout();\n\n            // Set properties for label1.\n            this-&gt;label1-&gt;Location = System::Drawing::Point( 395, 20 );\n            this-&gt;label1-&gt;Size = System::Drawing::Size( 180, 22 );\n            this-&gt;label1-&gt;Text = &quot;Select a programming language:&quot;;\n\n            // Set properties for comboBox1.\n            this-&gt;comboBox1-&gt;Location = System::Drawing::Point( 560, 16 );\n            this-&gt;comboBox1-&gt;Size = System::Drawing::Size( 190, 23 );\n            this-&gt;comboBox1-&gt;Name = &quot;comboBox1&quot;;\n            array&lt;String^&gt;^temp1 = {&quot;CSharp&quot;,&quot;Visual Basic&quot;,&quot;JScript&quot;};\n            this-&gt;comboBox1-&gt;Items-&gt;AddRange( temp1 );\n            this-&gt;comboBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right | System::Windows::Forms::AnchorStyles::Top);\n            this-&gt;comboBox1-&gt;SelectedIndex = 0;\n\n            // Set properties for generate_button.\n            this-&gt;generate_button-&gt;Location = System::Drawing::Point( 8, 16 );\n            this-&gt;generate_button-&gt;Name = &quot;generate_button&quot;;\n            this-&gt;generate_button-&gt;Size = System::Drawing::Size( 120, 23 );\n            this-&gt;generate_button-&gt;Text = &quot;Generate Code&quot;;\n            this-&gt;generate_button-&gt;Click += gcnew System::EventHandler( this, &amp;CodeDomExampleForm::generate_button_Click );\n\n            // Set properties for compile_button.\n            this-&gt;compile_button-&gt;Location = System::Drawing::Point( 136, 16 );\n            this-&gt;compile_button-&gt;Name = &quot;compile_button&quot;;\n            this-&gt;compile_button-&gt;Size = System::Drawing::Size( 120, 23 );\n            this-&gt;compile_button-&gt;Text = &quot;Compile&quot;;\n            this-&gt;compile_button-&gt;Click += gcnew System::EventHandler( this, &amp;CodeDomExampleForm::compile_button_Click );\n\n            // Set properties for run_button.\n            this-&gt;run_button-&gt;Enabled = false;\n            this-&gt;run_button-&gt;Location = System::Drawing::Point( 264, 16 );\n            this-&gt;run_button-&gt;Name = &quot;run_button&quot;;\n            this-&gt;run_button-&gt;Size = System::Drawing::Size( 120, 23 );\n            this-&gt;run_button-&gt;Text = &quot;Run&quot;;\n            this-&gt;run_button-&gt;Click += gcnew System::EventHandler( this, &amp;CodeDomExampleForm::run_button_Click );\n\n            // Set properties for textBox1.\n            this-&gt;textBox1-&gt;Anchor = (System::Windows::Forms::AnchorStyles)(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n            this-&gt;textBox1-&gt;Location = System::Drawing::Point( 8, 48 );\n            this-&gt;textBox1-&gt;Multiline = true;\n            this-&gt;textBox1-&gt;ScrollBars = System::Windows::Forms::ScrollBars::Vertical;\n            this-&gt;textBox1-&gt;Name = &quot;textBox1&quot;;\n            this-&gt;textBox1-&gt;Size = System::Drawing::Size( 744, 280 );\n            this-&gt;textBox1-&gt;Text = &quot;&quot;;\n\n            // Set properties for the CodeDomExampleForm.\n            this-&gt;AutoScaleBaseSize = System::Drawing::Size( 5, 13 );\n            this-&gt;ClientSize = System::Drawing::Size( 768, 340 );\n            this-&gt;MinimumSize = System::Drawing::Size( 750, 340 );\n            array&lt;System::Windows::Forms::Control^&gt;^myControl = {this-&gt;textBox1,this-&gt;run_button,this-&gt;compile_button,this-&gt;generate_button,this-&gt;comboBox1,this-&gt;label1};\n            this-&gt;Controls-&gt;AddRange( myControl );\n            this-&gt;Name = &quot;CodeDomExampleForm&quot;;\n            this-&gt;Text = &quot;CodeDom Hello World Example&quot;;\n            this-&gt;ResumeLayout( false );\n        }\n\n    public:\n        ~CodeDomExampleForm()\n        {\n        }\n    };\n\n}\n\n[STAThread]\nint main()\n{\n    Application::Run( gcnew CodeDOMExample::CodeDomExampleForm );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"CodeDomExample#1\">using System;\nusing System.CodeDom;\nusing System.CodeDom.Compiler;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.Diagnostics;\nusing System.Drawing;\nusing System.IO;\nusing System.Windows.Forms;\nusing Microsoft.CSharp;\nusing Microsoft.VisualBasic;\nusing Microsoft.JScript;\n\n// This example demonstrates building a Hello World program graph \n// using System.CodeDom elements. It calls code generator and\n// code compiler methods to build the program using CSharp, VB, or\n// JScript.  A Windows Forms interface is included. Note: Code\n// must be compiled and linked with the Microsoft.JScript assembly. \nnamespace CodeDOMExample\n{\n    class CodeDomExample\n    {\n        // Build a Hello World program graph using \n        // System.CodeDom types.\n        public static CodeCompileUnit BuildHelloWorldGraph()\n        {\n            // Create a new CodeCompileUnit to contain \n            // the program graph.\n            CodeCompileUnit compileUnit = new CodeCompileUnit();\n\n            // Declare a new namespace called Samples.\n            CodeNamespace samples = new CodeNamespace(&quot;Samples&quot;);\n            // Add the new namespace to the compile unit.\n            compileUnit.Namespaces.Add(samples);\n\n            // Add the new namespace import for the System namespace.\n            samples.Imports.Add(new CodeNamespaceImport(&quot;System&quot;));\n\n            // Declare a new type called Class1.\n            CodeTypeDeclaration class1 = new CodeTypeDeclaration(&quot;Class1&quot;);\n            // Add the new type to the namespace type collection.\n            samples.Types.Add(class1);\n\n            // Declare a new code entry point method.\n            CodeEntryPointMethod start = new CodeEntryPointMethod();\n\n            // Create a type reference for the System.Console class.\n            CodeTypeReferenceExpression csSystemConsoleType = new CodeTypeReferenceExpression(&quot;System.Console&quot;);\n\n            // Build a Console.WriteLine statement.\n            CodeMethodInvokeExpression cs1 = new CodeMethodInvokeExpression(\n                csSystemConsoleType, &quot;WriteLine&quot;,\n                new CodePrimitiveExpression(&quot;Hello World!&quot;));\n\n            // Add the WriteLine call to the statement collection.\n            start.Statements.Add(cs1);\n\n            // Build another Console.WriteLine statement.\n            CodeMethodInvokeExpression cs2 = new CodeMethodInvokeExpression(\n                csSystemConsoleType, &quot;WriteLine&quot;,\n                new CodePrimitiveExpression(&quot;Press the Enter key to continue.&quot;));\n\n            // Add the WriteLine call to the statement collection.\n            start.Statements.Add(cs2);\n\n            // Build a call to System.Console.ReadLine.\n            CodeMethodInvokeExpression csReadLine = new CodeMethodInvokeExpression(\n                csSystemConsoleType, &quot;ReadLine&quot;);\n\n            // Add the ReadLine statement.\n            start.Statements.Add(csReadLine);\n\n            // Add the code entry point method to\n            // the Members collection of the type.\n            class1.Members.Add(start);\n\n            return compileUnit;\n        }\n\n        public static void GenerateCode(CodeDomProvider provider,\n            CodeCompileUnit compileunit)\n        {\n            // Build the source file name with the appropriate\n            // language extension.\n            String sourceFile;\n            if (provider.FileExtension[0] == &#39;.&#39;)\n            {\n                sourceFile = &quot;TestGraph&quot; + provider.FileExtension;\n            }\n            else\n            {\n                sourceFile = &quot;TestGraph.&quot; + provider.FileExtension;\n            }\n\n            // Create an IndentedTextWriter, constructed with\n            // a StreamWriter to the source file.\n            IndentedTextWriter tw = new IndentedTextWriter(new StreamWriter(sourceFile, false), &quot;    &quot;);\n            // Generate source code using the code generator.\n            provider.GenerateCodeFromCompileUnit(compileunit, tw, new CodeGeneratorOptions());\n            // Close the output file.\n            tw.Close();\n        }\n\n        public static CompilerResults CompileCode(CodeDomProvider provider,\n                                                  String sourceFile,\n                                                  String exeFile)\n        {\n            // Configure a CompilerParameters that links System.dll\n            // and produces the specified executable file.\n            String[] referenceAssemblies = { &quot;System.dll&quot; };\n            CompilerParameters cp = new CompilerParameters(referenceAssemblies,\n                                                           exeFile, false);\n            // Generate an executable rather than a DLL file.\n            cp.GenerateExecutable = true;\n\n            // Invoke compilation.\n            CompilerResults cr = provider.CompileAssemblyFromFile(cp, sourceFile);\n            // Return the results of compilation.\n            return cr;\n        }\n    }\n\n    public class CodeDomExampleForm : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.Button run_button = new System.Windows.Forms.Button();\n        private System.Windows.Forms.Button compile_button = new System.Windows.Forms.Button();\n        private System.Windows.Forms.Button generate_button = new System.Windows.Forms.Button();\n        private System.Windows.Forms.TextBox textBox1 = new System.Windows.Forms.TextBox();\n        private System.Windows.Forms.ComboBox comboBox1 = new System.Windows.Forms.ComboBox();\n        private System.Windows.Forms.Label label1 = new System.Windows.Forms.Label();\n\n        private void generate_button_Click(object sender, System.EventArgs e)\n        {\n            CodeDomProvider provider = GetCurrentProvider();\n            CodeDomExample.GenerateCode(provider, CodeDomExample.BuildHelloWorldGraph());\n\n            // Build the source file name with the appropriate\n            // language extension.\n            String sourceFile;\n            if (provider.FileExtension[0] == &#39;.&#39;)\n            {\n                sourceFile = &quot;TestGraph&quot; + provider.FileExtension;\n            }\n            else\n            {\n                sourceFile = &quot;TestGraph.&quot; + provider.FileExtension;\n            }\n\n            // Read in the generated source file and\n            // display the source text.\n            StreamReader sr = new StreamReader(sourceFile);\n            textBox1.Text = sr.ReadToEnd();\n            sr.Close();\n        }\n\n        private void compile_button_Click(object sender, System.EventArgs e)\n        {\n            CodeDomProvider provider = GetCurrentProvider();\n\n            // Build the source file name with the appropriate\n            // language extension.\n            String sourceFile;\n            if (provider.FileExtension[0] == &#39;.&#39;)\n            {\n                sourceFile = &quot;TestGraph&quot; + provider.FileExtension;\n            }\n            else\n            {\n                sourceFile = &quot;TestGraph.&quot; + provider.FileExtension;\n            }\n\n            // Compile the source file into an executable output file.\n            CompilerResults cr = CodeDomExample.CompileCode(provider,\n                                                            sourceFile,\n                                                            &quot;TestGraph.exe&quot;);\n\n            if (cr.Errors.Count &gt; 0)\n            {\n                // Display compilation errors.\n                textBox1.Text = &quot;Errors encountered while building &quot; +\n                                sourceFile + &quot; into &quot; + cr.PathToAssembly + &quot;: \\r\\n\\n&quot;;\n                foreach (CompilerError ce in cr.Errors)\n                    textBox1.AppendText(ce.ToString() + &quot;\\r\\n&quot;);\n                run_button.Enabled = false;\n            }\n            else\n            {\n                textBox1.Text = &quot;Source &quot; + sourceFile + &quot; built into &quot; +\n                                cr.PathToAssembly + &quot; with no errors.&quot;;\n                run_button.Enabled = true;\n            }\n        }\n\n        private void run_button_Click(object sender,\n            System.EventArgs e)\n        {\n            Process.Start(&quot;TestGraph.exe&quot;);\n        }\n\n        private CodeDomProvider GetCurrentProvider()\n        {\n            CodeDomProvider provider;\n            switch ((string)this.comboBox1.SelectedItem)\n            {\n                case &quot;CSharp&quot;:\n                    provider = CodeDomProvider.CreateProvider(&quot;CSharp&quot;);\n                    break;\n                case &quot;Visual Basic&quot;:\n                    provider = CodeDomProvider.CreateProvider(&quot;VisualBasic&quot;);\n                    break;\n                case &quot;JScript&quot;:\n                    provider = CodeDomProvider.CreateProvider(&quot;JScript&quot;);\n                    break;\n                default:\n                    provider = CodeDomProvider.CreateProvider(&quot;CSharp&quot;);\n                    break;\n            }\n            return provider;\n        }\n\n        public CodeDomExampleForm()\n        {\n            this.SuspendLayout();\n            // Set properties for label1\n            this.label1.Location = new System.Drawing.Point(395, 20);\n            this.label1.Size = new Size(180, 22);\n            this.label1.Text = &quot;Select a programming language:&quot;;\n            // Set properties for comboBox1\n            this.comboBox1.Location = new System.Drawing.Point(560, 16);\n            this.comboBox1.Size = new Size(190, 23);\n            this.comboBox1.Name = &quot;comboBox1&quot;;\n            this.comboBox1.Items.AddRange(new string[] { &quot;CSharp&quot;, &quot;Visual Basic&quot;, &quot;JScript&quot; });\n            this.comboBox1.Anchor = System.Windows.Forms.AnchorStyles.Left\n                                    | System.Windows.Forms.AnchorStyles.Right\n                                    | System.Windows.Forms.AnchorStyles.Top;\n            this.comboBox1.SelectedIndex = 0;\n            // Set properties for generate_button. \n            this.generate_button.Location = new System.Drawing.Point(8, 16);\n            this.generate_button.Name = &quot;generate_button&quot;;\n            this.generate_button.Size = new System.Drawing.Size(120, 23);\n            this.generate_button.Text = &quot;Generate Code&quot;;\n            this.generate_button.Click += new System.EventHandler(this.generate_button_Click);\n            // Set properties for compile_button.\n            this.compile_button.Location = new System.Drawing.Point(136, 16);\n            this.compile_button.Name = &quot;compile_button&quot;;\n            this.compile_button.Size = new System.Drawing.Size(120, 23);\n            this.compile_button.Text = &quot;Compile&quot;;\n            this.compile_button.Click += new System.EventHandler(this.compile_button_Click);\n            // Set properties for run_button.\n            this.run_button.Enabled = false;\n            this.run_button.Location = new System.Drawing.Point(264, 16);\n            this.run_button.Name = &quot;run_button&quot;;\n            this.run_button.Size = new System.Drawing.Size(120, 23);\n            this.run_button.Text = &quot;Run&quot;;\n            this.run_button.Click += new System.EventHandler(this.run_button_Click);\n            // Set properties for textBox1.        \n            this.textBox1.Anchor = (System.Windows.Forms.AnchorStyles.Top\n                                     | System.Windows.Forms.AnchorStyles.Bottom\n                                     | System.Windows.Forms.AnchorStyles.Left\n                                     | System.Windows.Forms.AnchorStyles.Right);\n            this.textBox1.Location = new System.Drawing.Point(8, 48);\n            this.textBox1.Multiline = true;\n            this.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;\n            this.textBox1.Name = &quot;textBox1&quot;;\n            this.textBox1.Size = new System.Drawing.Size(744, 280);\n            this.textBox1.Text = &quot;&quot;;\n            // Set properties for the CodeDomExampleForm.\n            this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);\n            this.ClientSize = new System.Drawing.Size(768, 340);\n            this.MinimumSize = new System.Drawing.Size(750, 340);\n            this.Controls.AddRange(new System.Windows.Forms.Control[] {this.textBox1, \n                this.run_button, this.compile_button, this.generate_button,\n                this.comboBox1, this.label1 });\n            this.Name = &quot;CodeDomExampleForm&quot;;\n            this.Text = &quot;CodeDom Hello World Example&quot;;\n            this.ResumeLayout(false);\n        }\n\n        protected override void Dispose(bool disposing)\n        {\n            base.Dispose(disposing);\n        }\n\n        [STAThread]\n        static void Main()\n        {\n            Application.Run(new CodeDomExampleForm());\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"CodeDomExample#1\">Imports System\nImports System.CodeDom\nImports System.CodeDom.Compiler\nImports System.Collections\nImports System.ComponentModel\nImports System.Diagnostics\nImports System.Drawing\nImports System.IO\nImports System.Windows.Forms\nImports Microsoft.CSharp\nImports Microsoft.VisualBasic\nImports Microsoft.JScript\n\n&#39; This example demonstrates building a Hello World program graph \n&#39; using System.CodeDom elements. It calls code generator and\n&#39; code compiler methods to build the program using CSharp, VB, or\n&#39; JScript.  A Windows Forms interface is included. Note: Code\n&#39; must be compiled and linked with the Microsoft.JScript assembly. \nNamespace CodeDOMExample\n\n    Class CodeDomExample\n        &#39; Build a Hello World program graph using \n        &#39; System.CodeDom types.\n        Public Shared Function BuildHelloWorldGraph() As CodeCompileUnit\n\n            &#39; Create a new CodeCompileUnit to contain \n            &#39; the program graph.\n            Dim compileUnit As New CodeCompileUnit()\n\n            &#39; Declare a new namespace called Samples.\n            Dim samples As New CodeNamespace(&quot;Samples&quot;)\n\n            &#39; Add the new namespace to the compile unit.\n            compileUnit.Namespaces.Add(samples)\n\n            &#39; Add the new namespace import for the System namespace.\n            samples.Imports.Add(New CodeNamespaceImport(&quot;System&quot;))\n\n            &#39; Declare a new type called Class1.\n            Dim class1 As New CodeTypeDeclaration(&quot;Class1&quot;)\n\n            &#39; Add the new type to the namespace type collection.\n            samples.Types.Add(class1)\n\n            &#39; Declare a new code entry point method.\n            Dim start As New CodeEntryPointMethod()\n\n            &#39; Create a type reference for the System.Console class.\n            Dim csSystemConsoleType As New CodeTypeReferenceExpression( _\n                &quot;System.Console&quot;)\n\n            &#39; Build a Console.WriteLine statement.\n            Dim cs1 As New CodeMethodInvokeExpression( _\n                csSystemConsoleType, &quot;WriteLine&quot;, _\n                New CodePrimitiveExpression(&quot;Hello World!&quot;))\n\n            &#39; Add the WriteLine call to the statement collection.\n            start.Statements.Add(cs1)\n\n            &#39; Build another Console.WriteLine statement.\n            Dim cs2 As New CodeMethodInvokeExpression( _\n                csSystemConsoleType, &quot;WriteLine&quot;, _\n                New CodePrimitiveExpression(&quot;Press the Enter key to continue.&quot;))\n\n            &#39; Add the WriteLine call to the statement collection.\n            start.Statements.Add(cs2)\n\n            &#39; Build a call to System.Console.ReadLine.\n            Dim csReadLine As New CodeMethodInvokeExpression( _\n                csSystemConsoleType, &quot;ReadLine&quot;)\n\n            &#39; Add the ReadLine statement.\n            start.Statements.Add(csReadLine)\n\n            &#39; Add the code entry point method to\n            &#39; the Members collection of the type.\n            class1.Members.Add(start)\n\n            Return compileUnit\n        End Function\n\n        Public Shared Sub GenerateCode(ByVal provider As CodeDomProvider, ByVal compileunit As CodeCompileUnit)\n\n            &#39; Build the source file name with the appropriate\n            &#39; language extension.\n            Dim sourceFile As String\n            If provider.FileExtension.StartsWith(&quot;.&quot;) Then\n                sourceFile = &quot;TestGraph&quot; + provider.FileExtension\n            Else\n                sourceFile = &quot;TestGraph.&quot; + provider.FileExtension\n            End If\n\n            &#39; Create an IndentedTextWriter, constructed with\n            &#39; a StreamWriter to the source file.\n            Dim tw As New IndentedTextWriter(New StreamWriter(sourceFile, False), &quot;    &quot;)\n            &#39; Generate source code using the code generator.\n            provider.GenerateCodeFromCompileUnit(compileunit, tw, New CodeGeneratorOptions())\n            &#39; Close the output file.\n            tw.Close()\n        End Sub\n\n        Public Shared Function CompileCode(ByVal provider As CodeDomProvider, _\n                                           ByVal sourceFile As String, _\n                                           ByVal exeFile As String) As CompilerResults\n\n            &#39; Configure a CompilerParameters that links System.dll\n            &#39; and produces the specified executable file.\n            Dim referenceAssemblies As String() = {&quot;System.dll&quot;}\n            Dim cp As New CompilerParameters(referenceAssemblies, exeFile, False)\n\n            &#39; Generate an executable rather than a DLL file.\n            cp.GenerateExecutable = True\n\n            &#39; Invoke compilation.\n            Dim cr As CompilerResults = provider.CompileAssemblyFromFile(cp, _\n                sourceFile)\n            &#39; Return the results of compilation.\n            Return cr\n        End Function\n    End Class\n\n    Public Class CodeDomExampleForm\n        Inherits System.Windows.Forms.Form\n        Private run_button As New System.Windows.Forms.Button()\n        Private compile_button As New System.Windows.Forms.Button()\n        Private generate_button As New System.Windows.Forms.Button()\n        Private textBox1 As New System.Windows.Forms.TextBox()\n        Private comboBox1 As New System.Windows.Forms.ComboBox()\n        Private label1 As New System.Windows.Forms.Label()\n\n        Private Sub generate_button_Click(ByVal sender As Object, ByVal e As System.EventArgs)\n            Dim provider As CodeDomProvider = GetCurrentProvider()\n            CodeDomExample.GenerateCode(provider, CodeDomExample.BuildHelloWorldGraph())\n\n            &#39; Build the source file name with the appropriate\n            &#39; language extension.\n            Dim sourceFile As String\n            If provider.FileExtension.StartsWith(&quot;.&quot;) Then\n                sourceFile = &quot;TestGraph&quot; + provider.FileExtension\n            Else\n                sourceFile = &quot;TestGraph.&quot; + provider.FileExtension\n            End If\n\n            &#39; Read in the generated source file and\n            &#39; display the source text.\n            Dim sr As New StreamReader(sourceFile)\n            textBox1.Text = sr.ReadToEnd()\n            sr.Close()\n        End Sub\n\n        Private Sub compile_button_Click(ByVal sender As Object, ByVal e As System.EventArgs)\n            Dim provider As CodeDomProvider = GetCurrentProvider()\n\n            &#39; Build the source file name with the appropriate\n            &#39; language extension.\n            Dim sourceFile As String\n            If provider.FileExtension.StartsWith(&quot;.&quot;) Then\n                sourceFile = &quot;TestGraph&quot; + provider.FileExtension\n            Else\n                sourceFile = &quot;TestGraph.&quot; + provider.FileExtension\n            End If\n\n            Dim cr As CompilerResults = CodeDomExample.CompileCode(provider, _\n                                                                   sourceFile, _\n                                                                   &quot;TestGraph.EXE&quot;)\n\n            If cr.Errors.Count &gt; 0 Then\n                &#39; Display compilation errors.\n                textBox1.Text = &quot;Errors encountered while building &quot; + _\n                                sourceFile + &quot; into &quot; + _\n                                cr.PathToAssembly + &quot;: &quot; + ControlChars.CrLf\n\n                Dim ce As System.CodeDom.Compiler.CompilerError\n                For Each ce In cr.Errors\n                    textBox1.AppendText(ce.ToString() + ControlChars.CrLf)\n                Next ce\n                run_button.Enabled = False\n            Else\n                textBox1.Text = &quot;Source &quot; + sourceFile + &quot; built into &quot; + _\n                                cr.PathToAssembly + &quot; with no errors.&quot;\n                run_button.Enabled = True\n            End If\n        End Sub\n\n        Private Sub run_button_Click(ByVal sender As Object, _\n            ByVal e As System.EventArgs)\n\n            Process.Start(&quot;TestGraph.EXE&quot;)\n        End Sub\n\n        Private Function GetCurrentProvider() As CodeDomProvider\n\n            Dim provider As CodeDomProvider\n            Select Case CStr(Me.comboBox1.SelectedItem)\n                Case &quot;CSharp&quot;\n                    provider = CodeDomProvider.CreateProvider(&quot;CSharp&quot;)\n                Case &quot;Visual Basic&quot;\n                    provider = CodeDomProvider.CreateProvider(&quot;VisualBasic&quot;)\n                Case &quot;JScript&quot;\n                    provider = CodeDomProvider.CreateProvider(&quot;JScript&quot;)\n                Case Else\n                    provider = CodeDomProvider.CreateProvider(&quot;CSharp&quot;)\n            End Select\n            Return provider\n        End Function\n\n        Public Sub New()\n            Me.SuspendLayout()\n            &#39; Set properties for label1.\n            Me.label1.Location = New System.Drawing.Point(395, 20)\n            Me.label1.Size = New Size(180, 22)\n            Me.label1.Text = &quot;Select a programming language:&quot;\n            &#39; Set properties for comboBox1.\n            Me.comboBox1.Location = New System.Drawing.Point(560, 16)\n            Me.comboBox1.Size = New Size(190, 23)\n            Me.comboBox1.Name = &quot;comboBox1&quot;\n            Me.comboBox1.Items.AddRange(New String() {&quot;CSharp&quot;, &quot;Visual Basic&quot;, &quot;JScript&quot;})\n            Me.comboBox1.Anchor = System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right Or System.Windows.Forms.AnchorStyles.Top\n            Me.comboBox1.SelectedIndex = 0\n            &#39; Set properties for generate_button.\n            Me.generate_button.Location = New System.Drawing.Point(8, 16)\n            Me.generate_button.Name = &quot;generate_button&quot;\n            Me.generate_button.Size = New System.Drawing.Size(120, 23)\n            Me.generate_button.Text = &quot;Generate Code&quot;\n            AddHandler generate_button.Click, AddressOf Me.generate_button_Click\n            &#39; Set properties for compile_button.\n            Me.compile_button.Location = New System.Drawing.Point(136, 16)\n            Me.compile_button.Name = &quot;compile_button&quot;\n            Me.compile_button.Size = New System.Drawing.Size(120, 23)\n            Me.compile_button.Text = &quot;Compile&quot;\n            AddHandler compile_button.Click, AddressOf Me.compile_button_Click\n            &#39; Set properties for run_button.\n            Me.run_button.Enabled = False\n            Me.run_button.Location = New System.Drawing.Point(264, 16)\n            Me.run_button.Name = &quot;run_button&quot;\n            Me.run_button.Size = New System.Drawing.Size(120, 23)\n            Me.run_button.Text = &quot;Run&quot;\n            AddHandler run_button.Click, AddressOf Me.run_button_Click\n            &#39; Set properties for textBox1.\n            Me.textBox1.Anchor = System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right\n            Me.textBox1.Location = New System.Drawing.Point(8, 48)\n            Me.textBox1.Multiline = True\n            Me.textBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical\n            Me.textBox1.Name = &quot;textBox1&quot;\n            Me.textBox1.Size = New System.Drawing.Size(744, 280)\n            Me.textBox1.Text = &quot;&quot;\n            &#39; Set properties for the CodeDomExampleForm.\n            Me.AutoScaleBaseSize = New System.Drawing.Size(5, 13)\n            Me.ClientSize = New System.Drawing.Size(768, 340)\n            Me.MinimumSize = New System.Drawing.Size(750, 340)\n            Me.Controls.AddRange(New System.Windows.Forms.Control() {Me.textBox1, _\n                Me.run_button, Me.compile_button, Me.generate_button, _\n                Me.comboBox1, Me.label1})\n            Me.Name = &quot;CodeDomExampleForm&quot;\n            Me.Text = &quot;CodeDom Hello World Example&quot;\n            Me.ResumeLayout(False)\n        End Sub\n\n        Protected Overloads Sub Dispose(ByVal disposing As Boolean)\n            MyBase.Dispose(disposing)\n        End Sub\n\n        &lt;STAThread()&gt; _\n        Shared Sub Main()\n            Application.Run(New CodeDomExampleForm())\n        End Sub\n    End Class\nEnd Namespace\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>A CodeDomProvider can be used to create and retrieve instances of code generators and code compilers. Code generators can be used to generate code in a particular language, and code compilers can be used to compile code into assemblies.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the methods made available in the code generator and code compiler are available directly from the code provider. You do not need to call <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_\" data-linktype=\"relative-path\">CreateGenerator</a> or <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateCompiler_\" data-linktype=\"relative-path\">CreateCompiler</a> to access the methods, and those methods are marked as obsolete. This applies to preexisting as well as new code provider implementations.  </p>\n</div>\n<p> A CodeDomProvider implementation typically provides code generation and/or code compilation interfaces for generating code and managing compilation for a single programming language. Several languages are supported by CodeDomProvider implementations that ship with the Windows Software Development Kit (SDK). These languages include C#, Visual Basic, C++, and JScript. Developers or compiler vendors can implement the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> and <a class=\"xref\" href=\"system.codedom.compiler.icodecompiler\" data-linktype=\"relative-path\">ICodeCompiler</a> interfaces and provide a CodeDomProvider that extends CodeDOM support to other programming languages.  </p>\n<p> The <a href=\"../Topic/%3Csystem.codedom%3E%20Element.md\" data-linktype=\"relative-path\">&amp;lt;system.codedom&amp;gt; Element</a> in the machine configuration file (Machine.config) provides a mechanism for developers and compiler vendors to add configuration settings for additional CodeDomProvider implementations.  </p>\n<p> The CodeDomProvider class provides static methods to discover and enumerate the CodeDomProvider implementations on a computer. The <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_GetAllCompilerInfo_\" data-linktype=\"relative-path\">GetAllCompilerInfo</a> method returns the settings for all CodeDomProvider implementations on a computer. The <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_GetCompilerInfo_\" data-linktype=\"relative-path\">GetCompilerInfo</a> method returns the settings for a specific CodeDomProvider implementation, based on the programming language name. The <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateProvider_\" data-linktype=\"relative-path\">CreateProvider</a> method returns an instance of a CodeDomProvider implementation for a specific language.  </p>\n<p> For more details on language provider settings in the configuration file, see <a href=\"../topic/compiler%20and%20language%20provider%20settings%20schema\" data-linktype=\"relative-path\">Compiler and Language Provider Settings Schema</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This class makes a link demand and an inheritance demand at the class level. A <a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a> is thrown if either the immediate caller or the derived class does not have full trust permission. For details about security demands, see <a href=\"../topic/link%20demands\" data-linktype=\"relative-path\">Link Demands</a> and <a href=\"http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9\" data-linktype=\"external\">Inheritance Demands</a>.</p>\n</div>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CodeDomProvider__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CodeDomProvider__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CodeDomProvider()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected CodeDomProvider ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.componentmodel.toolboxitemattribute\" title=\"System.ComponentModel.ToolboxItemAttribute\" data-linktype=\"relative-path\">ToolboxItemAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CodeDomProvider_FileExtension_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CodeDomProvider_FileExtension\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FileExtension</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the default file name extension to use for source code files in the current language.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual string FileExtension { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A file name extension corresponding to the extension of the source files of the current language. The base implementation always returns <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.componentmodel.toolboxitemattribute\" title=\"System.ComponentModel.ToolboxItemAttribute\" data-linktype=\"relative-path\">ToolboxItemAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property is used by code generators and code compilers to indicate what file extensions should be generated or used.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CodeDomProvider_LanguageOptions_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CodeDomProvider_LanguageOptions\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">LanguageOptions</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a language features identifier.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual System.CodeDom.Compiler.LanguageOptions LanguageOptions { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.languageoptions\" data-linktype=\"relative-path\">LanguageOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.codedom.compiler.languageoptions\" data-linktype=\"relative-path\">LanguageOptions</a> that indicates special features of the language.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.componentmodel.toolboxitemattribute\" title=\"System.ComponentModel.ToolboxItemAttribute\" data-linktype=\"relative-path\">ToolboxItemAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CodeDomProvider_CompileAssemblyFromDom_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CodeDomProvider_CompileAssemblyFromDom_System_CodeDom_Compiler_CompilerParameters_System_CodeDom_CodeCompileUnit___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CompileAssemblyFromDom(CompilerParameters, CodeCompileUnit[])</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compiles an assembly based on the <a class=\"xref\" href=\"system.codedom\" data-linktype=\"relative-path\">System.CodeDom</a> trees contained in the specified array of <a class=\"xref\" href=\"system.codedom.codecompileunit\" data-linktype=\"relative-path\">CodeCompileUnit</a> objects, using the specified compiler settings.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromDom (System.CodeDom.Compiler.CompilerParameters options, System.CodeDom.CodeCompileUnit[] compilationUnits);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>options</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.compilerparameters\" data-linktype=\"relative-path\">CompilerParameters</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.codedom.compiler.compilerparameters\" data-linktype=\"relative-path\">CompilerParameters</a> object that indicates the settings for the compilation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>compilationUnits</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codecompileunit\" data-linktype=\"relative-path\">CodeCompileUnit</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array of type <a class=\"xref\" href=\"system.codedom.codecompileunit\" data-linktype=\"relative-path\">CodeCompileUnit</a> that indicates the code to compile.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.compilerresults\" data-linktype=\"relative-path\">CompilerResults</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.codedom.compiler.compilerresults\" data-linktype=\"relative-path\">CompilerResults</a> object that indicates the results of the compilation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.componentmodel.toolboxitemattribute\" title=\"System.ComponentModel.ToolboxItemAttribute\" data-linktype=\"relative-path\">ToolboxItemAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Neither this method nor the <span class=\"xref\">stem.CodeDom.Compiler.CodeDomProvider.CreateCompiler*</span> method is overridden in a derived class.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 and 1.1, this method is provided by the <a class=\"xref\" href=\"system.codedom.compiler.icodecompiler\" data-linktype=\"relative-path\">ICodeCompiler</a> implementation that is returned by the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateCompiler_\" data-linktype=\"relative-path\">CreateCompiler</a> method of the provider. In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider. If the code provider does not override this method, the <a class=\"xref\" href=\"system.codedom.compiler.icodecompiler\" data-linktype=\"relative-path\">ICodeCompiler</a> implementation is called by the base class.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CodeDomProvider_CompileAssemblyFromFile_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CodeDomProvider_CompileAssemblyFromFile_System_CodeDom_Compiler_CompilerParameters_System_String___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CompileAssemblyFromFile(CompilerParameters, String[])</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compiles an assembly from the source code contained in the specified files, using the specified compiler settings.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromFile (System.CodeDom.Compiler.CompilerParameters options, string[] fileNames);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>options</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.compilerparameters\" data-linktype=\"relative-path\">CompilerParameters</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.codedom.compiler.compilerparameters\" data-linktype=\"relative-path\">CompilerParameters</a> object that indicates the settings for the compilation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>fileNames</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array of the names of the files to compile.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.compilerresults\" data-linktype=\"relative-path\">CompilerResults</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.codedom.compiler.compilerresults\" data-linktype=\"relative-path\">CompilerResults</a> object that indicates the results of compilation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.componentmodel.toolboxitemattribute\" title=\"System.ComponentModel.ToolboxItemAttribute\" data-linktype=\"relative-path\">ToolboxItemAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Neither this method nor the <span class=\"xref\">stem.CodeDom.Compiler.CodeDomProvider.CreateCompiler*</span> method is overridden in a derived class.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 and 1.1, this method is provided by the <a class=\"xref\" href=\"system.codedom.compiler.icodecompiler\" data-linktype=\"relative-path\">ICodeCompiler</a> implementation that is returned by the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateCompiler_\" data-linktype=\"relative-path\">CreateCompiler</a> method of the provider. In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider. If the code provider does not override this method, the <a class=\"xref\" href=\"system.codedom.compiler.icodecompiler\" data-linktype=\"relative-path\">ICodeCompiler</a> implementation is called by the base class.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CodeDomProvider_CompileAssemblyFromSource_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CodeDomProvider_CompileAssemblyFromSource_System_CodeDom_Compiler_CompilerParameters_System_String___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CompileAssemblyFromSource(CompilerParameters, String[])</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compiles an assembly from the specified array of strings containing source code, using the specified compiler settings.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromSource (System.CodeDom.Compiler.CompilerParameters options, string[] sources);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>options</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.compilerparameters\" data-linktype=\"relative-path\">CompilerParameters</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.codedom.compiler.compilerparameters\" data-linktype=\"relative-path\">CompilerParameters</a> object that indicates the compiler settings for this compilation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>sources</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array of source code strings to compile.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.compilerresults\" data-linktype=\"relative-path\">CompilerResults</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.codedom.compiler.compilerresults\" data-linktype=\"relative-path\">CompilerResults</a> object that indicates the results of compilation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.componentmodel.toolboxitemattribute\" title=\"System.ComponentModel.ToolboxItemAttribute\" data-linktype=\"relative-path\">ToolboxItemAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Neither this method nor the <span class=\"xref\">stem.CodeDom.Compiler.CodeDomProvider.CreateCompiler*</span> method is overridden in a derived class.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 and 1.1, this method is provided by the <a class=\"xref\" href=\"system.codedom.compiler.icodecompiler\" data-linktype=\"relative-path\">ICodeCompiler</a> implementation that is returned by the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateCompiler_\" data-linktype=\"relative-path\">CreateCompiler</a> method of the provider. In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider. If the code provider does not override this method, the <a class=\"xref\" href=\"system.codedom.compiler.icodecompiler\" data-linktype=\"relative-path\">ICodeCompiler</a> implementation is called by the base class.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CodeDomProvider_CreateCompiler_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CodeDomProvider_CreateCompiler\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CreateCompiler()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>When overridden in a derived class, creates a new code compiler.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public abstract System.CodeDom.Compiler.ICodeCompiler CreateCompiler ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.icodecompiler\" data-linktype=\"relative-path\">ICodeCompiler</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.codedom.compiler.icodecompiler\" data-linktype=\"relative-path\">ICodeCompiler</a> that can be used for compilation of <a class=\"xref\" href=\"system.codedom\" data-linktype=\"relative-path\">System.CodeDom</a> based source code representations.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.obsoleteattribute\" title=\"System.ObsoleteAttribute\" data-linktype=\"relative-path\">ObsoleteAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is obsolete in the .NET Framework 2.0. The recommended alternative is to call the <a class=\"xref\" href=\"system.codedom.compiler.icodecompiler\" data-linktype=\"relative-path\">ICodeCompiler</a> methods that are directly available in the code provider.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CodeDomProvider_CreateEscapedIdentifier_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CodeDomProvider_CreateEscapedIdentifier_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CreateEscapedIdentifier(String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Creates an escaped identifier for the specified value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual string CreateEscapedIdentifier (string value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string for which to create an escaped identifier.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The escaped identifier for the value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.componentmodel.toolboxitemattribute\" title=\"System.ComponentModel.ToolboxItemAttribute\" data-linktype=\"relative-path\">ToolboxItemAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Neither this method nor the <span class=\"xref\">stem.CodeDom.Compiler.CodeDomProvider.CreateGenerator*</span> method is overridden in a derived class.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>CreateEscapedIdentifier tests whether the identifier conflicts with any reserved or language keywords, and if so, returns an equivalent name with language-specific escape code formatting. This is referred to an escaped identifier. The escaped identifier contains the same <code>value</code> but has escape-code formatting added to differentiate the identifier from the keyword. Two implementation examples are preceding the <code>value</code> with &quot;@&quot; or bracketing the `value` with &quot;[&quot; and &quot;]&quot;.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 and 1.1, this method is provided by the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation that is returned by the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_\" data-linktype=\"relative-path\">CreateGenerator</a> method of the provider. In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider. If the code provider does not override this method, the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation is called by the base class.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CodeDomProvider_CreateGenerator\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CreateGenerator()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>When overridden in a derived class, creates a new code generator.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public abstract System.CodeDom.Compiler.ICodeGenerator CreateGenerator ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> that can be used to generate <a class=\"xref\" href=\"system.codedom\" data-linktype=\"relative-path\">System.CodeDom</a> based source code representations.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.obsoleteattribute\" title=\"System.ObsoleteAttribute\" data-linktype=\"relative-path\">ObsoleteAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is obsolete in the .NET Framework 2.0. The recommended alternative is to call the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> methods that are directly available in the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_System_IO_TextWriter_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CreateGenerator(TextWriter)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>When overridden in a derived class, creates a new code generator using the specified <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> for output.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual System.CodeDom.Compiler.ICodeGenerator CreateGenerator (System.IO.TextWriter output);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>output</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> to use to output.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> that can be used to generate <a class=\"xref\" href=\"system.codedom\" data-linktype=\"relative-path\">System.CodeDom</a> based source code representations.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.componentmodel.toolboxitemattribute\" title=\"System.ComponentModel.ToolboxItemAttribute\" data-linktype=\"relative-path\">ToolboxItemAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method uses the specified <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> for output. This method supports more optimized code generation that incrementally updates the source code.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The base class implementation calls the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_\" data-linktype=\"relative-path\">CreateGenerator</a> method, which is obsolete in the .NET Framework 2.0 and results in a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a> if an <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> object is not returned.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CreateGenerator(String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>When overridden in a derived class, creates a new code generator using the specified file name for output.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual System.CodeDom.Compiler.ICodeGenerator CreateGenerator (string fileName);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>fileName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The file name to output to.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> that can be used to generate <a class=\"xref\" href=\"system.codedom\" data-linktype=\"relative-path\">System.CodeDom</a> based source code representations.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.componentmodel.toolboxitemattribute\" title=\"System.ComponentModel.ToolboxItemAttribute\" data-linktype=\"relative-path\">ToolboxItemAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method uses the specified file name for output.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The base class implementation calls the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_\" data-linktype=\"relative-path\">CreateGenerator</a> method, which is obsolete in the .NET Framework 2.0 and results in a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a> if an <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> object is not returned.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CodeDomProvider_CreateParser_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CodeDomProvider_CreateParser\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CreateParser()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>When overridden in a derived class, creates a new code parser.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual System.CodeDom.Compiler.ICodeParser CreateParser ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.icodeparser\" data-linktype=\"relative-path\">ICodeParser</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.codedom.compiler.icodeparser\" data-linktype=\"relative-path\">ICodeParser</a> that can be used to parse source code. The base implementation always returns <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.obsoleteattribute\" title=\"System.ObsoleteAttribute\" data-linktype=\"relative-path\">ObsoleteAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CodeDomProvider_CreateProvider_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CodeDomProvider_CreateProvider_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CreateProvider(String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> instance for the specified language.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.CodeDom.Compiler.CodeDomProvider CreateProvider (string language);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>language</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The language name.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A CodeDOM provider that is implemented for the specified language name.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configurationerrorsexception\" data-linktype=\"relative-path\">ConfigurationErrorsException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>language</code> does not have a configured provider on this computer.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>language</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The caller does not have the required permission.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> This method is most commonly used to create an instance of a code provider in an application that may optionally use one of several providers. CreateProvider allows you to specify at run time the code provider you wish to instantiate. If you know at design time which code provider is to be used, you should create an instance of that code provider rather than use the CreateProvider method.  </p>\n</div>\n<p> The CreateProvider method returns a <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> instance for a specific language name; it is similar to calling the <a class=\"xref\" href=\"system.activator#System_Activator_CreateInstance_\" data-linktype=\"relative-path\">CreateInstance</a> method with the language provider type. Use CreateProvider when you want to dynamically find a configured provider implementation for a language name.  </p>\n<p> If more than one provider implementation is configured for the language name, CreateProvider returns a provider instance for the last matching configuration element.  </p>\n<p> Use the [Activator.CreateInstance(Type, BindingFlags, Binder, Object&lt;xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=fullName&gt; method overload when you want a specific language provider implementation. For example, use the CreateProvider method to get a provider instance that supports the language name <code>&quot;CSharp&quot;</code>; use the [Activator.CreateInstance(Type, BindingFlags, Binder, Object&lt;xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=fullName&gt; method overload to get a provider instance specifically for the <a class=\"xref\" href=\"microsoft.csharp.csharpcodeprovider\" data-linktype=\"relative-path\">Microsoft.CSharp.CSharpCodeProvider</a> implementation. You should use the [Activator.CreateInstance(Type, BindingFlags, Binder, Object[], CultureInfo, Object&lt;xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%2CSystem.Object%5B%5D%29?displayProperty=fullName&gt; method if you have multiple code providers for a language and you desire to instantiate a specific code provider.  </p>\n<p> The <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_IsDefinedLanguage_\" data-linktype=\"relative-path\">IsDefinedLanguage</a> method checks whether at least one provider implementation supports a specific language. You can validate a language name using <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_IsDefinedLanguage_\" data-linktype=\"relative-path\">IsDefinedLanguage</a> before passing it to CreateProvider. If you pass an unsupported language name to CreateProvider a <a class=\"xref\" href=\"system.configuration.configurationexception\" data-linktype=\"relative-path\">System.Configuration.ConfigurationException</a> is thrown.  </p>\n<p> The <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_GetAllCompilerInfo_\" data-linktype=\"relative-path\">GetAllCompilerInfo</a> method can be used to determine all <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementations on a computer, including additional implementations provided by developers and compiler vendors that are identified in the <a href=\"../Topic/%3Csystem.codedom%3E%20Element.md\" data-linktype=\"relative-path\">&amp;lt;system.codedom&amp;gt; Element</a> in the machine configuration file (Machine.config).  </p>\n<p> The CreateProvider method returns an instance of a <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation for a specific language.  </p>\n<p> Language names are case-insensitive.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CodeDomProvider_CreateProvider_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CodeDomProvider_CreateProvider_System_String_System_Collections_Generic_IDictionary_System_String_System_String__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CreateProvider(String, IDictionary&lt;String,String&gt;)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> instance for the specified language and provider options.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.CodeDom.Compiler.CodeDomProvider CreateProvider (string language, System.Collections.Generic.IDictionary&lt;string,string&gt; providerOptions);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>language</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The language name.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>providerOptions</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.generic.idictionary-2\" data-linktype=\"relative-path\">IDictionary</a>&lt;<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>,<a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A collection of provider options from the configuration file.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A CodeDOM provider that is implemented for the specified language name and options.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> This method is most commonly used to create an instance of a code provider in an application that may optionally use one of several providers. CreateProvider enables you to specify at run time the version of the code provider you want to instantiate. If you know at design time which code provider is to be used, you should create an instance of that code provider instead of using the CreateProvider method.  </p>\n</div>\n<p> Use CreateProvider when you want to dynamically find a configured provider implementation for a specific language and options. Language names are case-insensitive. For information about supported provider options, see the specific CodeDOM provider documentation.  </p>\n<p> For information about validating a provider and calling a provider if more than one provider implementation is configured for the language name, see the Remarks section of the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateProvider_System_String_\" data-linktype=\"relative-path\">CreateProvider(String)</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CodeDomProvider_CreateValidIdentifier_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CodeDomProvider_CreateValidIdentifier_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CreateValidIdentifier(String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Creates a valid identifier for the specified value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual string CreateValidIdentifier (string value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string for which to generate a valid identifier.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A valid identifier for the specified value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.componentmodel.toolboxitemattribute\" title=\"System.ComponentModel.ToolboxItemAttribute\" data-linktype=\"relative-path\">ToolboxItemAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Neither this method nor the <span class=\"xref\">stem.CodeDom.Compiler.CodeDomProvider.CreateGenerator*</span> method is overridden in a derived class.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>CreateValidIdentifier tests whether the identifier conflicts with reserved or language keywords, and if so, attempts to return a valid identifier name that does not conflict. Usually the returned identifier is only slightly modified to differentiate the identifier from the keyword; for example, the name might be preceded by the underscore (&quot;_&quot;) character.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 and 1.1, this method is provided by the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation that is returned by the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_\" data-linktype=\"relative-path\">CreateGenerator</a> method of the provider. In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider. If the code provider does not override this method, the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation is called by the base class.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CodeDomProvider_GenerateCodeFromCompileUnit_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CodeDomProvider_GenerateCodeFromCompileUnit_System_CodeDom_CodeCompileUnit_System_IO_TextWriter_System_CodeDom_Compiler_CodeGeneratorOptions_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GenerateCodeFromCompileUnit(CodeCompileUnit, TextWriter, CodeGeneratorOptions)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and sends it to the specified text writer, using the specified options.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual void GenerateCodeFromCompileUnit (System.CodeDom.CodeCompileUnit compileUnit, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>compileUnit</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codecompileunit\" data-linktype=\"relative-path\">CodeCompileUnit</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.codedom.codecompileunit\" data-linktype=\"relative-path\">CodeCompileUnit</a> for which to generate code.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>writer</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> to which the output code is sent.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>options</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.codegeneratoroptions\" data-linktype=\"relative-path\">CodeGeneratorOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.codedom.compiler.codegeneratoroptions\" data-linktype=\"relative-path\">CodeGeneratorOptions</a> that indicates the options to use for generating code.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.componentmodel.toolboxitemattribute\" title=\"System.ComponentModel.ToolboxItemAttribute\" data-linktype=\"relative-path\">ToolboxItemAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Neither this method nor the <span class=\"xref\">stem.CodeDom.Compiler.CodeDomProvider.CreateGenerator*</span> method is overridden in a derived class.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 and 1.1, this method is provided by the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation that is returned by the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_\" data-linktype=\"relative-path\">CreateGenerator</a> method of the provider. In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider. If the code provider does not override this method, the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation is called by the base class.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CodeDomProvider_GenerateCodeFromExpression_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CodeDomProvider_GenerateCodeFromExpression_System_CodeDom_CodeExpression_System_IO_TextWriter_System_CodeDom_Compiler_CodeGeneratorOptions_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GenerateCodeFromExpression(CodeExpression, TextWriter, CodeGeneratorOptions)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Generates code for the specified Code Document Object Model (CodeDOM) expression and sends it to the specified text writer, using the specified options.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual void GenerateCodeFromExpression (System.CodeDom.CodeExpression expression, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>expression</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codeexpression\" data-linktype=\"relative-path\">CodeExpression</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.codedom.codeexpression\" data-linktype=\"relative-path\">CodeExpression</a> object that indicates the expression for which to generate code.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>writer</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> to which output code is sent.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>options</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.codegeneratoroptions\" data-linktype=\"relative-path\">CodeGeneratorOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.codedom.compiler.codegeneratoroptions\" data-linktype=\"relative-path\">CodeGeneratorOptions</a> that indicates the options to use for generating code.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.componentmodel.toolboxitemattribute\" title=\"System.ComponentModel.ToolboxItemAttribute\" data-linktype=\"relative-path\">ToolboxItemAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Neither this method nor the <span class=\"xref\">stem.CodeDom.Compiler.CodeDomProvider.CreateGenerator*</span> method is overridden in a derived class.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 and 1.1, this method is provided by the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation that is returned by the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_\" data-linktype=\"relative-path\">CreateGenerator</a> method of the provider. In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider. If the code provider does not override this method, the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation is called by the base class.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CodeDomProvider_GenerateCodeFromMember_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CodeDomProvider_GenerateCodeFromMember_System_CodeDom_CodeTypeMember_System_IO_TextWriter_System_CodeDom_Compiler_CodeGeneratorOptions_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GenerateCodeFromMember(CodeTypeMember, TextWriter, CodeGeneratorOptions)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Generates code for the specified Code Document Object Model (CodeDOM) member declaration and sends it to the specified text writer, using the specified options.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual void GenerateCodeFromMember (System.CodeDom.CodeTypeMember member, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>member</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codetypemember\" data-linktype=\"relative-path\">CodeTypeMember</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.codedom.codetypemember\" data-linktype=\"relative-path\">CodeTypeMember</a> object that indicates the member for which to generate code.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>writer</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> to which output code is sent.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>options</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.codegeneratoroptions\" data-linktype=\"relative-path\">CodeGeneratorOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.codedom.compiler.codegeneratoroptions\" data-linktype=\"relative-path\">CodeGeneratorOptions</a> that indicates the options to use for generating code.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.componentmodel.toolboxitemattribute\" title=\"System.ComponentModel.ToolboxItemAttribute\" data-linktype=\"relative-path\">ToolboxItemAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>This method is not overridden in a derived class.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The base class implementation throws a <a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a>. See <a class=\"xref\" href=\"microsoft.csharp.csharpcodeprovider#Microsoft_CSharp_CSharpCodeProvider_GenerateCodeFromMember_\" data-linktype=\"relative-path\">GenerateCodeFromMember</a> for documentation describing an implementation of this method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CodeDomProvider_GenerateCodeFromNamespace_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CodeDomProvider_GenerateCodeFromNamespace_System_CodeDom_CodeNamespace_System_IO_TextWriter_System_CodeDom_Compiler_CodeGeneratorOptions_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GenerateCodeFromNamespace(CodeNamespace, TextWriter, CodeGeneratorOptions)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Generates code for the specified Code Document Object Model (CodeDOM) namespace and sends it to the specified text writer, using the specified options.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual void GenerateCodeFromNamespace (System.CodeDom.CodeNamespace codeNamespace, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>codeNamespace</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codenamespace\" data-linktype=\"relative-path\">CodeNamespace</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.codedom.codenamespace\" data-linktype=\"relative-path\">CodeNamespace</a> object that indicates the namespace for which to generate code.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>writer</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> to which output code is sent.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>options</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.codegeneratoroptions\" data-linktype=\"relative-path\">CodeGeneratorOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.codedom.compiler.codegeneratoroptions\" data-linktype=\"relative-path\">CodeGeneratorOptions</a> that indicates the options to use for generating code.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.componentmodel.toolboxitemattribute\" title=\"System.ComponentModel.ToolboxItemAttribute\" data-linktype=\"relative-path\">ToolboxItemAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Neither this method nor the <span class=\"xref\">stem.CodeDom.Compiler.CodeDomProvider.CreateGenerator*</span> method is overridden in a derived class.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 and 1.1, this method is provided by the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation that is returned by the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_\" data-linktype=\"relative-path\">CreateGenerator</a> method of the provider. In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider. If the code provider does not override this method, the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation is called by the base class.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CodeDomProvider_GenerateCodeFromStatement_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CodeDomProvider_GenerateCodeFromStatement_System_CodeDom_CodeStatement_System_IO_TextWriter_System_CodeDom_Compiler_CodeGeneratorOptions_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GenerateCodeFromStatement(CodeStatement, TextWriter, CodeGeneratorOptions)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Generates code for the specified Code Document Object Model (CodeDOM) statement and sends it to the specified text writer, using the specified options.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual void GenerateCodeFromStatement (System.CodeDom.CodeStatement statement, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>statement</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codestatement\" data-linktype=\"relative-path\">CodeStatement</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.codedom.codestatement\" data-linktype=\"relative-path\">CodeStatement</a> containing the CodeDOM elements for which to generate code.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>writer</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> to which output code is sent.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>options</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.codegeneratoroptions\" data-linktype=\"relative-path\">CodeGeneratorOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.codedom.compiler.codegeneratoroptions\" data-linktype=\"relative-path\">CodeGeneratorOptions</a> that indicates the options to use for generating code.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.componentmodel.toolboxitemattribute\" title=\"System.ComponentModel.ToolboxItemAttribute\" data-linktype=\"relative-path\">ToolboxItemAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Neither this method nor the <span class=\"xref\">stem.CodeDom.Compiler.CodeDomProvider.CreateGenerator*</span> method is overridden in a derived class.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 and 1.1, this method is provided by the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation that is returned by the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_\" data-linktype=\"relative-path\">CreateGenerator</a> method of the provider. In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider. If the code provider does not override this method, the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation is called by the base class.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CodeDomProvider_GenerateCodeFromType_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CodeDomProvider_GenerateCodeFromType_System_CodeDom_CodeTypeDeclaration_System_IO_TextWriter_System_CodeDom_Compiler_CodeGeneratorOptions_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GenerateCodeFromType(CodeTypeDeclaration, TextWriter, CodeGeneratorOptions)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Generates code for the specified Code Document Object Model (CodeDOM) type declaration and sends it to the specified text writer, using the specified options.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual void GenerateCodeFromType (System.CodeDom.CodeTypeDeclaration codeType, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>codeType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codetypedeclaration\" data-linktype=\"relative-path\">CodeTypeDeclaration</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.codedom.codetypedeclaration\" data-linktype=\"relative-path\">CodeTypeDeclaration</a> object that indicates the type for which to generate code.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>writer</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.io.textwriter\" data-linktype=\"relative-path\">TextWriter</a> to which output code is sent.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>options</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.codegeneratoroptions\" data-linktype=\"relative-path\">CodeGeneratorOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.codedom.compiler.codegeneratoroptions\" data-linktype=\"relative-path\">CodeGeneratorOptions</a> that indicates the options to use for generating code.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.componentmodel.toolboxitemattribute\" title=\"System.ComponentModel.ToolboxItemAttribute\" data-linktype=\"relative-path\">ToolboxItemAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Neither this method nor the <span class=\"xref\">stem.CodeDom.Compiler.CodeDomProvider.CreateGenerator*</span> method is overridden in a derived class.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 and 1.1, this method is provided by the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation that is returned by the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_\" data-linktype=\"relative-path\">CreateGenerator</a> method of the provider. In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider. If the code provider does not override this method, the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation is called by the base class.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CodeDomProvider_GetAllCompilerInfo_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CodeDomProvider_GetAllCompilerInfo\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetAllCompilerInfo()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the language provider and compiler configuration settings for this computer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.CodeDom.Compiler.CompilerInfo[] GetAllCompilerInfo ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a>[]</span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An array of type <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a> representing the settings of all configured <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementations.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The caller does not have the required permission.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use the GetAllCompilerInfo method to enumerate the language provider settings on a computer.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework 2.0, the default language providers supplied by the .NET Framework are not specified in the <a href=\"../Topic/%3Csystem.codedom%3E%20Element.md\" data-linktype=\"relative-path\">&amp;lt;system.codedom&amp;gt; Element</a> compiler configuration section and cannot be removed, so this method returns information about the default providers and any specified in the configuration file.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CodeDomProvider_GetCompilerInfo_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CodeDomProvider_GetCompilerInfo_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetCompilerInfo(String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the language provider and compiler configuration settings for the specified language.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.CodeDom.Compiler.CompilerInfo GetCompilerInfo (string language);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>language</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A language name.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a> object populated with settings of the configured <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configurationexception\" data-linktype=\"relative-path\">ConfigurationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>language</code> does not have a configured provider on this computer.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configurationerrorsexception\" data-linktype=\"relative-path\">ConfigurationErrorsException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>language</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The caller does not have the required permission.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a href=\"../Topic/%3Csystem.codedom%3E%20Element.md\" data-linktype=\"relative-path\">&amp;lt;system.codedom&amp;gt; Element</a> in the machine configuration file contains the language provider and compiler configuration settings for each <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation on the computer. For information about machine configuration files, see the Machine Configuration Files section in <a href=\"../topic/configuring%20apps%20by%20using%20configuration%20files\" data-linktype=\"relative-path\">Configuring Apps</a>. The GetCompilerInfo method searches each provider configuration element for the specified language name. The returned <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a> instance contains the configured language provider and compiler settings.  </p>\n<p> The <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_IsDefinedLanguage_\" data-linktype=\"relative-path\">IsDefinedLanguage</a> method checks whether at least one provider implementation supports a specific language. You can validate a language name using <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_IsDefinedLanguage_\" data-linktype=\"relative-path\">IsDefinedLanguage</a> before passing it to GetCompilerInfo. This prevents throwing a <a class=\"xref\" href=\"system.configuration.configurationexception\" data-linktype=\"relative-path\">System.Configuration.ConfigurationException</a> when you access the <a class=\"xref\" href=\"system.codedom.compiler.compilerinfo\" data-linktype=\"relative-path\">CompilerInfo</a> instance for an unsupported language name.  </p>\n<p> If more than one provider implementation is configured for the input language name, GetCompilerInfo returns the settings from the last matching provider configuration element.  </p>\n<p> Language names are case-insensitive.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CodeDomProvider_GetConverter_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CodeDomProvider_GetConverter_System_Type_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetConverter(Type)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a <a class=\"xref\" href=\"system.componentmodel.typeconverter\" data-linktype=\"relative-path\">TypeConverter</a> for the specified data type.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual System.ComponentModel.TypeConverter GetConverter (Type type);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>type</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The type of object to retrieve a type converter for.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.typeconverter\" data-linktype=\"relative-path\">TypeConverter</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.componentmodel.typeconverter\" data-linktype=\"relative-path\">TypeConverter</a> for the specified type, or <code>null</code> if a <a class=\"xref\" href=\"system.componentmodel.typeconverter\" data-linktype=\"relative-path\">TypeConverter</a> for the specified type cannot be found.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.componentmodel.toolboxitemattribute\" title=\"System.ComponentModel.ToolboxItemAttribute\" data-linktype=\"relative-path\">ToolboxItemAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>A derived class can override this method to provide specific types of type converters for specific data types.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CodeDomProvider_GetLanguageFromExtension_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CodeDomProvider_GetLanguageFromExtension_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetLanguageFromExtension(String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a language name associated with the specified file name extension, as configured in the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> compiler configuration section.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static string GetLanguageFromExtension (string extension);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>extension</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A file name extension.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A language name associated with the file name extension, as configured in the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> compiler configuration settings.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configurationexception\" data-linktype=\"relative-path\">ConfigurationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>extension</code> does not have a configured language provider on this computer.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configurationerrorsexception\" data-linktype=\"relative-path\">ConfigurationErrorsException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>extension</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The caller does not have the required permission.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a href=\"../Topic/%3Csystem.codedom%3E%20Element.md\" data-linktype=\"relative-path\">&amp;lt;system.codedom&amp;gt; Element</a> in the machine configuration file (Machine.config) contains the language provider and compiler configuration settings for each <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation on the computer. The GetLanguageFromExtension method searches each provider configuration element for the specified file name extension.  </p>\n<p> The <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_IsDefinedExtension_\" data-linktype=\"relative-path\">IsDefinedExtension</a> method checks whether at least one provider implementation supports a specific file name extension. You can validate a file name extension using <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_IsDefinedExtension_\" data-linktype=\"relative-path\">IsDefinedExtension</a> before passing it to GetLanguageFromExtension. This prevents GetLanguageFromExtension from throwing a <a class=\"xref\" href=\"system.configuration.configurationexception\" data-linktype=\"relative-path\">System.Configuration.ConfigurationException</a> for an unsupported file name extension.  </p>\n<p> If a provider implementation supports the input file name extension, and there are multiple supported languages configured for that provider, then GetLanguageFromExtension returns the first language name for that provider. If more than one provider implementation is configured for the input file name extension, GetLanguageFromExtension returns the language name from the last matching provider configuration element.  </p>\n<p> Language names and file name extensions are case-insensitive.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CodeDomProvider_GetTypeOutput_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CodeDomProvider_GetTypeOutput_System_CodeDom_CodeTypeReference_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetTypeOutput(CodeTypeReference)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the type indicated by the specified <a class=\"xref\" href=\"system.codedom.codetypereference\" data-linktype=\"relative-path\">CodeTypeReference</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual string GetTypeOutput (System.CodeDom.CodeTypeReference type);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>type</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codetypereference\" data-linktype=\"relative-path\">CodeTypeReference</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.codedom.codetypereference\" data-linktype=\"relative-path\">CodeTypeReference</a> that indicates the type to return.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A text representation of the specified type, formatted for the language in which code is generated by this code generator. In Visual Basic, for example, passing in a <a class=\"xref\" href=\"system.codedom.codetypereference\" data-linktype=\"relative-path\">CodeTypeReference</a> for the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> type will return &quot;Integer&quot;.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.componentmodel.toolboxitemattribute\" title=\"System.ComponentModel.ToolboxItemAttribute\" data-linktype=\"relative-path\">ToolboxItemAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Neither this method nor the <span class=\"xref\">stem.CodeDom.Compiler.CodeDomProvider.CreateGenerator*</span> method is overridden in a derived class.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 and 1.1, this method is provided by the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation that is returned by the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_\" data-linktype=\"relative-path\">CreateGenerator</a> method of the provider. In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider. If the code provider does not override this method, the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation is called by the base class.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CodeDomProvider_IsDefinedExtension_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CodeDomProvider_IsDefinedExtension_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsDefinedExtension(String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Tests whether a file name extension has an associated <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation configured on the computer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool IsDefinedExtension (string extension);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>extension</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A file name extension.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if a <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation is configured for the specified file name extension; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>extension</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The caller does not have the required permission.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a href=\"../Topic/%3Csystem.codedom%3E%20Element.md\" data-linktype=\"relative-path\">&amp;lt;system.codedom&amp;gt; Element</a> in the machine configuration file (Machine.config) contains the language provider and compiler configuration settings for each <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation on the computer. The IsDefinedExtension method searches the provider configuration elements for the specified file name extension.  </p>\n<p> File name extensions are case-insensitive.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CodeDomProvider_IsDefinedLanguage_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CodeDomProvider_IsDefinedLanguage_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsDefinedLanguage(String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Tests whether a language has a <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation configured on the computer.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool IsDefinedLanguage (string language);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>language</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The language name.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if a <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation is configured for the specified language; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <code>language</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.securityexception\" data-linktype=\"relative-path\">SecurityException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The caller does not have the required permission.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a href=\"../Topic/%3Csystem.codedom%3E%20Element.md\" data-linktype=\"relative-path\">&amp;lt;system.codedom&amp;gt; Element</a> in the machine configuration file (Machine.config) contains the language provider and compiler configuration settings for each <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider\" data-linktype=\"relative-path\">CodeDomProvider</a> implementation on the computer. The IsDefinedLanguage method searches the provider configuration elements for the specified language name.  </p>\n<p> Language names are case-insensitive.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CodeDomProvider_IsValidIdentifier_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CodeDomProvider_IsValidIdentifier_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsValidIdentifier(String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether the specified value is a valid identifier for the current language.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual bool IsValidIdentifier (string value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value to verify as a valid identifier.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <code>value</code> parameter is a valid identifier; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.componentmodel.toolboxitemattribute\" title=\"System.ComponentModel.ToolboxItemAttribute\" data-linktype=\"relative-path\">ToolboxItemAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Neither this method nor the <span class=\"xref\">stem.CodeDom.Compiler.CodeDomProvider.CreateGenerator*</span> method is overridden in a derived class.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method tests whether an identifier is valid. The IsValidIdentifier method is provider specific. Identifiers that are valid for one provider might not be valid for other providers. If <code>value</code> contains characters outside of the ASCII character range, check the identifier for all the languages that might be used to compile the code.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 and 1.1, this method is provided by the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation that is returned by the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_\" data-linktype=\"relative-path\">CreateGenerator</a> method of the provider. In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider. If the code provider does not override this method, the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation is called by the base class.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CodeDomProvider_Parse_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CodeDomProvider_Parse_System_IO_TextReader_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Parse(TextReader)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Compiles the code read from the specified text stream into a <a class=\"xref\" href=\"system.codedom.codecompileunit\" data-linktype=\"relative-path\">CodeCompileUnit</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual System.CodeDom.CodeCompileUnit Parse (System.IO.TextReader codeStream);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>codeStream</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.io.textreader\" data-linktype=\"relative-path\">TextReader</a> object that is used to read the code to be parsed.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codecompileunit\" data-linktype=\"relative-path\">CodeCompileUnit</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.codedom.codecompileunit\" data-linktype=\"relative-path\">CodeCompileUnit</a> that contains a representation of the parsed code.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.componentmodel.toolboxitemattribute\" title=\"System.ComponentModel.ToolboxItemAttribute\" data-linktype=\"relative-path\">ToolboxItemAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Neither this method nor the <span class=\"xref\">stem.CodeDom.Compiler.CodeDomProvider.CreateGenerator*</span> method is overridden in a derived class.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 and 1.1, this method is provided by the <a class=\"xref\" href=\"system.codedom.compiler.icodeparser\" data-linktype=\"relative-path\">ICodeParser</a> implementation that is returned by the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateParser_\" data-linktype=\"relative-path\">CreateParser</a> method of the provider. In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider. If the code provider does not override this method, the <a class=\"xref\" href=\"system.codedom.compiler.icodeparser\" data-linktype=\"relative-path\">ICodeParser</a> implementation is called by the base class.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_CodeDom_Compiler_CodeDomProvider_Supports_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_CodeDom_Compiler_CodeDomProvider_Supports_System_CodeDom_Compiler_GeneratorSupport_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Supports(GeneratorSupport)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value indicating whether the specified code generation support is provided.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual bool Supports (System.CodeDom.Compiler.GeneratorSupport generatorSupport);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>generatorSupport</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.compiler.generatorsupport\" data-linktype=\"relative-path\">GeneratorSupport</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.codedom.compiler.generatorsupport\" data-linktype=\"relative-path\">GeneratorSupport</a> object that indicates the type of code generation support to verify.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the specified code generation support is provided; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.componentmodel.toolboxitemattribute\" title=\"System.ComponentModel.ToolboxItemAttribute\" data-linktype=\"relative-path\">ToolboxItemAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Neither this method nor the <span class=\"xref\">stem.CodeDom.Compiler.CodeDomProvider.CreateGenerator*</span> method is overridden in a derived class.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method can be called with a number of <a class=\"xref\" href=\"system.codedom.compiler.generatorsupport\" data-linktype=\"relative-path\">GeneratorSupport</a> flags at once to test for a set of capabilities by joining a set of appropriate capability flags together with a binary <code>OR</code> operator (&#124;).  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In the .NET Framework versions 1.0 and 1.1, this method is provided by the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation that is returned by the <a class=\"xref\" href=\"system.codedom.compiler.codedomprovider#System_CodeDom_Compiler_CodeDomProvider_CreateGenerator_\" data-linktype=\"relative-path\">CreateGenerator</a> method of the provider. In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider. If the code provider does not override this method, the <a class=\"xref\" href=\"system.codedom.compiler.icodegenerator\" data-linktype=\"relative-path\">ICodeGenerator</a> implementation is called by the base class.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.CodeDom.Compiler.CodeDomProvider.yml\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider..ctor\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.CreateCompiler\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.CreateGenerator\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.CreateParser\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.CreateProvider\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.FileExtension\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.GetConverter\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.LanguageOptions\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.Parse\">\r\n<meta name=\"APIName\" content=\"System.CodeDom.Compiler.CodeDomProvider.Supports\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"8c2ce175-7a8a-546e-2024-5bc31e2cbf1c\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a base class for CodeDomProvider implementations. This class is abstract.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.codedom.compiler/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.CodeDom.Compiler.CodeDomProvider\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.CodeDom.Compiler.CodeDomProvider.yml","open_to_public_contributors":false,"api_name":["System.CodeDom.Compiler.CodeDomProvider","System.CodeDom.Compiler.CodeDomProvider..ctor","System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom","System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile","System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource","System.CodeDom.Compiler.CodeDomProvider.CreateCompiler","System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier","System.CodeDom.Compiler.CodeDomProvider.CreateGenerator","System.CodeDom.Compiler.CodeDomProvider.CreateParser","System.CodeDom.Compiler.CodeDomProvider.CreateProvider","System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier","System.CodeDom.Compiler.CodeDomProvider.FileExtension","System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit","System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression","System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember","System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace","System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement","System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType","System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo","System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo","System.CodeDom.Compiler.CodeDomProvider.GetConverter","System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension","System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput","System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension","System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage","System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier","System.CodeDom.Compiler.CodeDomProvider.LanguageOptions","System.CodeDom.Compiler.CodeDomProvider.Parse","System.CodeDom.Compiler.CodeDomProvider.Supports"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.CodeDom.Compiler.CodeDomProvider","System::CodeDom::Compiler::CodeDomProvider","System.CodeDom.Compiler.CodeDomProvider.#ctor","System::CodeDom::Compiler::CodeDomProvider::#ctor","System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom","System::CodeDom::Compiler::CodeDomProvider::CompileAssemblyFromDom","System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile","System::CodeDom::Compiler::CodeDomProvider::CompileAssemblyFromFile","System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource","System::CodeDom::Compiler::CodeDomProvider::CompileAssemblyFromSource","System.CodeDom.Compiler.CodeDomProvider.CreateCompiler","System::CodeDom::Compiler::CodeDomProvider::CreateCompiler","System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier","System::CodeDom::Compiler::CodeDomProvider::CreateEscapedIdentifier","System.CodeDom.Compiler.CodeDomProvider.CreateGenerator","System::CodeDom::Compiler::CodeDomProvider::CreateGenerator","System.CodeDom.Compiler.CodeDomProvider.CreateParser","System::CodeDom::Compiler::CodeDomProvider::CreateParser","System.CodeDom.Compiler.CodeDomProvider.CreateProvider","System::CodeDom::Compiler::CodeDomProvider::CreateProvider","System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier","System::CodeDom::Compiler::CodeDomProvider::CreateValidIdentifier","System.CodeDom.Compiler.CodeDomProvider.FileExtension","System::CodeDom::Compiler::CodeDomProvider::FileExtension","System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit","System::CodeDom::Compiler::CodeDomProvider::GenerateCodeFromCompileUnit","System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression","System::CodeDom::Compiler::CodeDomProvider::GenerateCodeFromExpression","System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember","System::CodeDom::Compiler::CodeDomProvider::GenerateCodeFromMember","System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace","System::CodeDom::Compiler::CodeDomProvider::GenerateCodeFromNamespace","System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement","System::CodeDom::Compiler::CodeDomProvider::GenerateCodeFromStatement","System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType","System::CodeDom::Compiler::CodeDomProvider::GenerateCodeFromType","System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo","System::CodeDom::Compiler::CodeDomProvider::GetAllCompilerInfo","System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo","System::CodeDom::Compiler::CodeDomProvider::GetCompilerInfo","System.CodeDom.Compiler.CodeDomProvider.GetConverter","System::CodeDom::Compiler::CodeDomProvider::GetConverter","System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension","System::CodeDom::Compiler::CodeDomProvider::GetLanguageFromExtension","System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput","System::CodeDom::Compiler::CodeDomProvider::GetTypeOutput","System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension","System::CodeDom::Compiler::CodeDomProvider::IsDefinedExtension","System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage","System::CodeDom::Compiler::CodeDomProvider::IsDefinedLanguage","System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier","System::CodeDom::Compiler::CodeDomProvider::IsValidIdentifier","System.CodeDom.Compiler.CodeDomProvider.LanguageOptions","System::CodeDom::Compiler::CodeDomProvider::LanguageOptions","System.CodeDom.Compiler.CodeDomProvider.Parse","System::CodeDom::Compiler::CodeDomProvider::Parse","System.CodeDom.Compiler.CodeDomProvider.Supports","System::CodeDom::Compiler::CodeDomProvider::Supports"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"8c2ce175-7a8a-546e-2024-5bc31e2cbf1c","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.CodeDom.Compiler/CodeDomProvider.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"CodeDomProvider class | Microsoft Docs","_op_ogTitle":"CodeDomProvider class","description":"Provides a base class for CodeDomProvider implementations. This class is abstract.\n","toc_asset_id":"api/_splitted/System.CodeDom.Compiler/toc.json","toc_rel":"_splitted/System.CodeDom.Compiler/toc.json","source_url":"","ms.assetid":"System.CodeDom.Compiler.CodeDomProvider","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.codedom.compiler.codedomprovider","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.codedom.compiler.codedomprovider","fileRelativePath":"api/System.CodeDom.Compiler.CodeDomProvider.html"},"themesRelativePathToOutputRoot":"_themes/"}