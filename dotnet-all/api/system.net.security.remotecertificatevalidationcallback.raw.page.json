{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">RemoteCertificateValidationCallback</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Verifies the remote Secure Sockets Layer (SSL) certificate used for authentication.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate bool RemoteCertificateValidationCallback(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">RemoteCertificateValidationCallback</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example implements a method that is invoked by an instance of the RemoteCertificateValidationCallback class. If there are validation errors, this method displays them and returns <code>false</code>, which prevents communication with the unauthenticated server.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLSslClientSync#1\">    // Load a table of errors that might cause \n    // the certificate authentication to fail.\n    static void InitializeCertificateErrors()\n    {\n        certificateErrors-&gt;Add(0x800B0101,\n            &quot;The certification has expired.&quot;);\n        certificateErrors-&gt;Add(0x800B0104,\n            &quot;A path length constraint &quot;\n            &quot;in the certification chain has been violated.&quot;);\n        certificateErrors-&gt;Add(0x800B0105,\n            &quot;A certificate contains an unknown extension &quot;\n            &quot;that is marked critical.&quot;);\n        certificateErrors-&gt;Add(0x800B0107,\n            &quot;A parent of a given certificate in fact &quot;\n            &quot;did not issue that child certificate.&quot;);\n        certificateErrors-&gt;Add(0x800B0108,\n            &quot;A certificate is missing or has an empty value &quot;\n            &quot;for a necessary field.&quot;);\n        certificateErrors-&gt;Add(0x800B0109,\n            &quot;The certificate root is not trusted.&quot;);\n        certificateErrors-&gt;Add(0x800B010C,\n            &quot;The certificate has been revoked.&quot;);\n        certificateErrors-&gt;Add(0x800B010F,\n            &quot;The name in the certificate does not not match &quot;\n            &quot;the host name requested by the client.&quot;);\n        certificateErrors-&gt;Add(0x800B0111,\n            &quot;The certificate was explicitly marked &quot;\n            &quot;as untrusted by the user.&quot;);\n        certificateErrors-&gt;Add(0x800B0112,\n            &quot;A certification chain processed correctly, &quot;\n            &quot;but one of the CA certificates is not trusted.&quot;);\n        certificateErrors-&gt;Add(0x800B0113,\n            &quot;The certificate has an invalid policy.&quot;);\n        certificateErrors-&gt;Add(0x800B0114,\n            &quot;The certificate name is either not &quot;\n            &quot;in the permitted list or is explicitly excluded.&quot;);\n        certificateErrors-&gt;Add(0x80092012,\n            &quot;The revocation function was unable to check &quot;\n            &quot;revocation for the certificate.&quot;);\n        certificateErrors-&gt;Add(0x80090327,\n            &quot;An unknown error occurred while &quot;\n            &quot;processing the certificate.&quot;);\n        certificateErrors-&gt;Add(0x80096001,\n            &quot;A system-level error occurred &quot;\n            &quot;while verifying trust.&quot;);\n        certificateErrors-&gt;Add(0x80096002,\n            &quot;The certificate for the signer of the message &quot;\n            &quot;is invalid or not found.&quot;);\n        certificateErrors-&gt;Add(0x80096003,\n            &quot;One of the counter signatures was invalid.&quot;);\n        certificateErrors-&gt;Add(0x80096004,\n            &quot;The signature of the certificate &quot;\n            &quot;cannot be verified.&quot;);\n        certificateErrors-&gt;Add(0x80096005,\n            &quot;The time stamp signature or certificate &quot;\n            &quot;could not be verified or is malformed.&quot;);\n        certificateErrors-&gt;Add(0x80096010,\n            &quot;The digital signature of the object &quot;\n            &quot;was not verified.&quot;);\n        certificateErrors-&gt;Add(0x80096019,\n            &quot;The basic constraint extension of a certificate &quot;\n            &quot;has not been observed.&quot;);\n    }\n\n    static String^ CertificateErrorDescription(UInt32 problem)\n    {\n        // Initialize the error message dictionary \n        // if it is not yet available.\n        if (certificateErrors-&gt;Count == 0)\n        {\n            InitializeCertificateErrors();\n        }\n\n        String^ description = safe_cast&lt;String^&gt;(\n            certificateErrors[problem]);\n        if (description == nullptr)\n        {\n            description = String::Format(\n                CultureInfo::CurrentCulture,\n                &quot;Unknown certificate error - 0x{0:x8}&quot;,\n                problem);\n        }\n\n        return description;\n    }\n\npublic:\n    // The following method is invoked \n    // by the CertificateValidationDelegate.\nstatic bool ValidateServerCertificate(\n        Object^ sender,\n        X509Certificate^ certificate,\n        X509Chain^ chain,\n        SslPolicyErrors sslPolicyErrors)\n    {\n    \n        Console::WriteLine(&quot;Validating the server certificate.&quot;);\n        if (sslPolicyErrors == SslPolicyErrors::None)\n            return true;\n\n        Console::WriteLine(&quot;Certificate error: {0}&quot;, sslPolicyErrors);\n\n        // Do not allow this client to communicate with unauthenticated servers.\n        return false;\n    }\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLSslClientSync#1\">\n// The following method is invoked by the RemoteCertificateValidationDelegate.\npublic static bool ValidateServerCertificate(\n      object sender,\n      X509Certificate certificate,\n      X509Chain chain,\n      SslPolicyErrors sslPolicyErrors)\n{\n   if (sslPolicyErrors == SslPolicyErrors.None)\n        return true;\n\n    Console.WriteLine(&quot;Certificate error: {0}&quot;, sslPolicyErrors);\n    \n    // Do not allow this client to communicate with unauthenticated servers.\n    return false;\n}\n</code></pre><p> The following code example creates the delegate using the method defined in the preceding code example.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLSslClientSync#4\">// Create a TCP/IP client socket.\n// machineName is the host running the server application.\nTcpClient^ client = gcnew TcpClient(machineName, 8080);\nConsole::WriteLine(&quot;Client connected.&quot;);\n  \n// Create an SSL stream that will close \n// the client&#39;s stream.\nSslStream^ sslStream = gcnew SslStream(\n    client-&gt;GetStream(), false,\n    gcnew RemoteCertificateValidationCallback(ValidateServerCertificate),\n    nullptr);\n  \n// The server name must match the name\n// on the server certificate.\ntry\n{\n    sslStream-&gt;AuthenticateAsClient(serverName);\n}\ncatch (AuthenticationException^ ex) \n{\n    Console::WriteLine(&quot;Exception: {0}&quot;, ex-&gt;Message);\n    if (ex-&gt;InnerException != nullptr)\n    {\n        Console::WriteLine(&quot;Inner exception: {0}&quot;, \n            ex-&gt;InnerException-&gt;Message);\n    }\n\n    Console::WriteLine(&quot;Authentication failed - &quot;\n        &quot;closing the connection.&quot;);\n    sslStream-&gt;Close();\n    client-&gt;Close();\n    return;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLSslClientSync#4\">// Create a TCP/IP client socket.\n// machineName is the host running the server application.\nTcpClient client = new TcpClient(machineName,443);\nConsole.WriteLine(&quot;Client connected.&quot;);\n// Create an SSL stream that will close the client&#39;s stream.\nSslStream sslStream = new SslStream(\n    client.GetStream(), \n    false, \n    new RemoteCertificateValidationCallback (ValidateServerCertificate), \n    null\n    );\n// The server name must match the name on the server certificate.\ntry \n{\n    sslStream.AuthenticateAsClient(serverName);\n} \ncatch (AuthenticationException e)\n{\n    Console.WriteLine(&quot;Exception: {0}&quot;, e.Message);\n    if (e.InnerException != null)\n    {\n        Console.WriteLine(&quot;Inner exception: {0}&quot;, e.InnerException.Message);\n    }\n    Console.WriteLine (&quot;Authentication failed - closing the connection.&quot;);\n    client.Close();\n    return;\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The delegate&#39;s <code>sslPolicyErrors</code> argument contains any certificate errors returned by SSPI while authenticating the client or server. The <a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a> value returned by the method invoked by this delegate determines whether the authentication is allowed to succeed.  </p>\n<p> This delegate is used with the <a class=\"xref\" href=\"system.net.security.sslstream\" data-linktype=\"relative-path\">SslStream</a> class.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Net.Security.RemoteCertificateValidationCallback.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.RemoteCertificateValidationCallback\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.RemoteCertificateValidationCallback..ctor\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.RemoteCertificateValidationCallback.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.RemoteCertificateValidationCallback.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Net.Security.RemoteCertificateValidationCallback.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"8c9dd479-46ab-2a8d-8676-47bc7b3b8a75\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Verifies the remote Secure Sockets Layer (SSL) certificate used for authentication.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.net.security/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.Security.RemoteCertificateValidationCallback\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Net.Security.RemoteCertificateValidationCallback.yml","open_to_public_contributors":false,"api_name":["System.Net.Security.RemoteCertificateValidationCallback","System.Net.Security.RemoteCertificateValidationCallback..ctor","System.Net.Security.RemoteCertificateValidationCallback.Invoke","System.Net.Security.RemoteCertificateValidationCallback.BeginInvoke","System.Net.Security.RemoteCertificateValidationCallback.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.Security.RemoteCertificateValidationCallback","System::Net::Security::RemoteCertificateValidationCallback"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"8c9dd479-46ab-2a8d-8676-47bc7b3b8a75","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Net.Security/RemoteCertificateValidationCallback.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"RemoteCertificateValidationCallback delegate | Microsoft Docs","_op_ogTitle":"RemoteCertificateValidationCallback delegate","description":"Verifies the remote Secure Sockets Layer (SSL) certificate used for authentication.\n","toc_asset_id":"api/_splitted/System.Net.Security/toc.json","toc_rel":"_splitted/System.Net.Security/toc.json","source_url":"","ms.assetid":"System.Net.Security.RemoteCertificateValidationCallback","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.net.security.remotecertificatevalidationcallback","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.net.security.remotecertificatevalidationcallback","fileRelativePath":"api/System.Net.Security.RemoteCertificateValidationCallback.html"},"themesRelativePathToOutputRoot":"_themes/"}