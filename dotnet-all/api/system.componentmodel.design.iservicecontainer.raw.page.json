{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">IServiceContainer</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides a container for services.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic interface IServiceContainer : IServiceProvider</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example contains the code for a <a class=\"xref\" href=\"system.windows.forms.form\" data-linktype=\"relative-path\">Form</a> that is configured to demonstrate the behavior of a network of linked service containers.  </p>\n<pre><code class=\"lang-cs\" name=\"IServiceContainerExample#1\">using System;\nusing System.Drawing;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.ComponentModel.Design;\nusing System.Windows.Forms;\nusing System.Windows.Forms.Design;\n\nnamespace ServiceArchitectureExample\n{\n    // This sample contains a Form class that is configured to demonstrate \n    // the behavior of a network of linked service containers.   \n    \n    // Notes regarding this IServiceContainer and IServiceProvider \n    // implementation:\n    //\n    // When implementing the IServiceContainer interface, you may want to \n    // implement support for a linked service container system\n    // which enables access to and sharing of services throughout a \n    // container tree or network.\n    //\n    // To effectively share a service, a GetService, AddService or \n    // RemoveService method must be able to locate a service \n    // that has been added to a shared service container tree or network.\n    //        \n    // One simple approach to sharing services, suitable for container networks \n    // where each container has one parent and the tree has\n    // one parentless container, is to store services only at the top node \n    // (the root or grandparent) of a tree.\n    //\n    // To store services in the root node of a tree, two types of \n    // consistencies must be maintained in the implementation:        \n    //\n    //   &gt;   The GetService, AddService and RemoveService implementations \n    //       must access the root through some mechanism.\n    //         The ServiceContainerControl&#39;s implementations of these \n    //         standard IServiceContainer methods call \n    //         the same method of a parent container, if the container \n    //         has been parented, to route methods to the root.  \n    //\n    //   &gt;   The services must be maintained at the root of the tree; \n    //       therefore, any new child&#39;s services should be copied to the root.                \n\n\n    // ServiceContainerControl provides an example user control implmentation \n    // of the IServiceContainer interface. This implementation of \n    // IServiceContainer supports a root-node linked service distribution, \n    // access. and removal architecture.\n    public class ServiceContainerControl : System.Windows.Forms.UserControl, IServiceContainer\n    {                        \n        // List of service instances sorted by key of service type&#39;s full name.\n        private SortedList localServices;               \n        // List that contains the Type for each service sorted by each \n        // service type&#39;s full name.\n        private SortedList localServiceTypes;           \n\n        // The parent IServiceContainer, or null.\n        private IServiceContainer parentServiceContainer;   \n        public IServiceContainer serviceParent              \n        {\n            get\n            {\n                return parentServiceContainer;\n            }\n            set\n            {\n                parentServiceContainer = value;\n                // Move any services to parent.\n                for( int i=0; i&lt;localServices.Count; i++ )\n                    parentServiceContainer.AddService(\n                        (Type)localServiceTypes.GetByIndex(i), \n                        localServices.GetByIndex(i));\n                localServices.Clear();\n                localServiceTypes.Clear();\n            }\n        }\n        \n        // The current state of the control reflecting whether it has \n        // obtained or provided a text service.\n        private TextServiceState state_;\n        public TextServiceState state              \n        {                                          \n            get\n            {\n                return state_;\n            }\n            set\n            {\n                if( (TextServiceState)value == \n                        TextServiceState.ServiceProvided )\n                    this.BackColor = Color.LightGreen;\n                else if( (TextServiceState)value == \n                        TextServiceState.ServiceNotObtained )                \n                    this.BackColor = Color.White;                                   \n                else if( (TextServiceState)value == \n                        TextServiceState.ServiceObtained )\n                    this.BackColor = Color.LightBlue;\n                else if( (TextServiceState)value == \n                        TextServiceState.ServiceNotFound )                                    \n                    this.BackColor = Color.SeaShell;                \n                state_ = value;\n            }\n        }\n        \n        // Parent form reference for main program function access.\n        private ServiceForm parent;                 \n        // String for label displayed on the control to indicate \n        // the control&#39;s current service-related configuration state.\n        public string label;  \n        \n        public ServiceContainerControl(Size size, Point location, \n            ServiceForm parent) : this(null, size, location, parent){}      \n        public ServiceContainerControl(IServiceContainer ParentServiceContainer, \n            Size size, Point location, ServiceForm parent)\n        {\n            this.state_ = TextServiceState.ServiceNotObtained;\n            localServices = new SortedList();\n            localServiceTypes = new SortedList();\n\n            this.BackColor = Color.Beige;            \n            this.label = string.Empty;            \n            this.Size = size;\n            this.Location = location;\n            this.parent = parent;\n            this.serviceParent = ParentServiceContainer;\n            \n            // If a parent is specified, set the parent property of this \n            // linkable IServiceContainer implementation.\n            if( ParentServiceContainer != null )\n                serviceParent = ParentServiceContainer;\n        }\n\n        // IServiceProvider.GetService implementation for a linked \n        // service container architecture.\n        public new object GetService(System.Type serviceType)\n        {\n            if( parentServiceContainer != null )\n                return parentServiceContainer.GetService(serviceType);            \n\n            object serviceInstance = localServices[serviceType.FullName];\n            if( serviceInstance == null )\n                return null;\n            else if( serviceInstance.GetType() == typeof(ServiceCreatorCallback) )\n            {\n                // If service instance is a ServiceCreatorCallback, invoke \n                // it to create the service.\n                return ((ServiceCreatorCallback)serviceInstance)(this, serviceType);                                \n            }\n            return serviceInstance;\n        }\n        \n        // IServiceContainer.AddService implementation for a linked \n        // service container architecture.\n        public void AddService(System.Type serviceType, \n            System.ComponentModel.Design.ServiceCreatorCallback callback, bool promote)\n        {\n            if( promote &amp;&amp; parentServiceContainer != null )            \n                parentServiceContainer.AddService(serviceType, callback, true);            \n            else\n            {\n                localServiceTypes[serviceType.FullName] = serviceType;\n                localServices[serviceType.FullName] = callback;\n            }\n        }\n        \n        // IServiceContainer.AddService implementation for a linked \n        // service container architecture.\n        public void AddService(System.Type serviceType, \n            System.ComponentModel.Design.ServiceCreatorCallback callback)\n        {\n            AddService(serviceType, callback, true);\n        }\n\n        // IServiceContainer.AddService implementation for a linked \n        // service container architecture.\n        public void AddService(System.Type serviceType, \n            object serviceInstance, bool promote)\n        {\n            if( promote &amp;&amp; parentServiceContainer != null )            \n                parentServiceContainer.AddService(serviceType, serviceInstance, true);            \n            else\n            {\n                localServiceTypes[serviceType.FullName] = serviceType;\n                localServices[serviceType.FullName] = serviceInstance;\n            }\n        }\n\n        // IServiceContainer.AddService (defaults to promote service addition).\n        public void AddService(System.Type serviceType, object serviceInstance)\n        {\n            AddService(serviceType, serviceInstance, true);\n        }\n\n        // IServiceContainer.RemoveService implementation for a linked \n        // service container architecture.\n        public void RemoveService(System.Type serviceType, bool promote)\n        {\n            if( localServices[serviceType.FullName] != null )\n            {\n                localServices.Remove(serviceType.FullName);\n                localServiceTypes.Remove(serviceType.FullName);\n            }\n            if( promote )\n            {\n                if( parentServiceContainer != null )\n                    parentServiceContainer.RemoveService(serviceType);\n            }\n        }\n\n        // IServiceContainer.RemoveService (defaults to promote \n        // service removal)\n        public void RemoveService(System.Type serviceType)\n        {\n            RemoveService(serviceType, true);\n        }\n\n        // Paint method override draws the label string on the control.\n        protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)\n        {\n            e.Graphics.DrawString(label, new Font(&quot;Arial&quot;, 8), \n                new SolidBrush(Color.Black), 5, 5);            \n        }\n\n        // Process mouse-down behavior for click.\n        protected override void OnMouseDown(\n            System.Windows.Forms.MouseEventArgs e)\n        {\n            //  This example control responds to mouse clicks as follows:\n            //\n            //      Left click - control attempts to obtain a text service \n            //      and sets its label text to the text provided by the service\n            //      Right click - if the control has already provided a text \n            //      service, this control does nothing. Otherwise, the control \n            //      shows a dialog box to specify text to provide as a new text \n            //      service, after clearing the tree&#39;s services.\n\n            if( e.Button == MouseButtons.Left )\n            {\n                if( state_ != TextServiceState.ServiceProvided )\n                {\n                    // Attempt to update text from service, and set \n                    // color state accordingly.\n                    TextService ts = \n                        (TextService)GetService(typeof(TextService));\n                    if( ts != null )\n                    {\n                        this.label = ts.text;\n                        state = TextServiceState.ServiceObtained;\n                    }\n                    else\n                    {                    \n                        this.label = &quot;Service Not Found&quot;;                        \n                        state = TextServiceState.ServiceNotFound;\n                    }\n                }\n            }\n            if( e.Button == MouseButtons.Right )\n            {\n                if( state_ == TextServiceState.ServiceProvided )\n                {\n                    // Remove the service if the container provided it.\n                    if( GetService(typeof(TextService)) != null )\n                    {\n                        RemoveService(typeof(TextService), true);\n                        state = TextServiceState.ServiceNotObtained; \n                        this.label = &quot;Service Removed&quot;;                                                                   \n                    }                    \n                }\n                else\n                {\n                    // Obtain string and provide text service.\n                    using (StringInputDialog form =\n                        new StringInputDialog(&quot;Test String&quot;))\n                    {\n                        form.StartPosition = FormStartPosition.CenterParent;\n                        if (form.ShowDialog() == DialogResult.OK)\n                        {\n                            if (GetService(typeof(TextService)) != null)\n                                RemoveService(typeof(TextService), true);\n                            parent.ResetServiceTree(this, new EventArgs());\n\n                            AddService(typeof(TextService),\n                                new TextService(form.inputTextBox.Text), true);\n\n                            // The following commented method uses a service creator callback.\n                            // AddService(typeof(TextService), \n                            //  new ServiceCreatorCallback(this.CreateTextService));                                                \n\n                            state = TextServiceState.ServiceProvided;\n                            this.label = &quot;Provided Text: &quot; + form.inputTextBox.Text;\n                        }\n                    }\n                }\n            }\n            parent.UpdateServiceCoverage();\n        }\n\n        // Method accesses the TextService to test the visibility of the \n        // service from the control, and sets the UI state accordingly.\n        public void ReflectServiceVisibility()\n        {\n            if( state_ == TextServiceState.ServiceObtained )\n            {\n                if( GetService(typeof(TextService)) == null )  \n                    this.BackColor = Color.CadetBlue;\n            }\n            else if( state_ != TextServiceState.ServiceProvided )\n            {\n                if( GetService(typeof(TextService)) == null )\n                {\n                    this.BackColor = Color.White;\n                    return;\n                }\n\n                // Service available.        \n                if( state_ == TextServiceState.ServiceNotFound )                \n                    this.BackColor = Color.Khaki;                \n                else if( state_ == TextServiceState.ServiceNotObtained \n                         &amp;&amp; label != &quot;Service Removed&quot; )\n                    this.BackColor = Color.Khaki;       \n            }\n        }\n        \n        // ServiceCreatorCallback method creates a text service.\n        private object CreateTextService(IServiceContainer container, \n            System.Type serviceType)\n        {\n            return new TextService(&quot;Test Callback&quot;);\n        }\n    }\n\n    // Example form provides UI for demonstrating service sharing behavior \n    // of a network of IServiceContainer/IServiceProvider controls.\n    public class ServiceForm : System.Windows.Forms.Form\n    {\n        // Root service container control for tree.\n        private ServiceContainerControl root;                \n        // Button for clearing any provided services and resetting tree states.\n        private System.Windows.Forms.Button reset_button;   \n        // Color list used to color code controls.\n        private Color[] colorkeys;                       \n        // Strings used to reflect text service.\n        private string[] keystrings;                         \n\n        public ServiceForm()\n        {\n        InitializeComponent();        \n            colorkeys = new Color[] { Color.Beige, Color.SeaShell, Color.LightGreen, Color.LightBlue, Color.Khaki, Color.CadetBlue };\n            keystrings = new string[] { &quot;No service use&quot;, &quot;Service not accessible&quot;, &quot;Service provided&quot;, &quot;Service obtained&quot;, &quot;Service accessible&quot;, &quot;No further access&quot; };\n            CreateServiceControlTree();                        \n\t\t}\n\n        private void CreateServiceControlTree()\n        {\n            // Create root service control\n            ServiceContainerControl control1 = new ServiceContainerControl(\n                null, new Size(300, 40), new Point(10, 80), this);\n            root = control1;\n            // Create first tier - pass parent with service object control 1.\n            ServiceContainerControl control2 = new ServiceContainerControl(\n                control1, new Size(200, 30), new Point(50, 160), this);\n            ServiceContainerControl control3 = new ServiceContainerControl(\n                control1, new Size(200, 30), new Point(50, 240), this);\n            // Create second tier A - pass parent with service object control 2.\n            ServiceContainerControl control4 = new ServiceContainerControl(\n                control2, new Size(180, 20), new Point(300, 145), this);\n            ServiceContainerControl control5 = new ServiceContainerControl(\n                control2, new Size(180, 20), new Point(300, 185), this);\n            // Create second tier B - pass parent with service object control 3.\n            ServiceContainerControl control6 = new ServiceContainerControl(\n                control3, new Size(180, 20), new Point(300, 225), this);\n            ServiceContainerControl control7 = new ServiceContainerControl(\n                control3, new Size(180, 20), new Point(300, 265), this);\n            // Add controls\n            this.Controls.AddRange( new Control[] { control1, control2, \n                control3, control4, control5, control6, control7 } );\n        }\n\n        internal void ResetServiceTree(object sender, EventArgs e)\n        {\n            // Remove the service from the service tree.\n            if( root.GetService(typeof(TextService)) != null )            \n                root.RemoveService(typeof(TextService), true);\n\n            // Set all controls to &quot;not obtained&quot; and clear their labels.\n            for( int i=0; i&lt;Controls.Count; i++ )\n                if( !Controls[i].Equals(reset_button) ) \n                {\n                    ((ServiceContainerControl)Controls[i]).state = \n                        TextServiceState.ServiceNotObtained;\n                    ((ServiceContainerControl)Controls[i]).label = string.Empty;\n                    ((ServiceContainerControl)Controls[i]).BackColor = \n                        Color.Beige;\n                }\n        }\n\n        public void UpdateServiceCoverage()\n        {\n            // Have each control set state to reflect service availability.\n            for( int i=0; i&lt;Controls.Count; i++ )\n                if( !Controls[i].Equals(reset_button) )                 \n                    ((ServiceContainerControl)Controls[i]).ReflectServiceVisibility();                                 \n        }\n\n            #region Windows Form Designer generated code\n            private void InitializeComponent()\n            {\n            this.reset_button = new System.Windows.Forms.Button();\n            this.SuspendLayout();\n            // \n            // reset_button\n            // \n            this.reset_button.Location = new System.Drawing.Point(392, 88);\n            this.reset_button.Name = &quot;reset_button&quot;;\n            this.reset_button.TabIndex = 0;\n            this.reset_button.TabStop = false;\n            this.reset_button.Text = &quot;Reset&quot;;\n            this.reset_button.Click += new System.EventHandler(this.ResetServiceTree);\n            // \n            // ServiceForm\n            // \n            this.ClientSize = new System.Drawing.Size(512, 373);\n            this.Controls.AddRange(new System.Windows.Forms.Control[] {\n                                                                          this.reset_button});\n            this.MinimumSize = new System.Drawing.Size(520, 400);\n            this.Name = &quot;ServiceForm&quot;;\n            this.Text = &quot;Service Container Architecture Example&quot;;\n            this.ResumeLayout(false);\n\n            }\n            #endregion\n\n            [STAThread]\n            static void Main() \n            {\n                Application.Run(new ServiceForm());\n            }\n\n        protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)\n        {            \n            e.Graphics.DrawString(&quot;The following tree diagram represents a &quot;+\n                &quot;hierarchy of linked service containers in controls.&quot;, \n                new Font(&quot;Arial&quot;, 9), new SolidBrush(Color.Black), 4, 4);\n            e.Graphics.DrawString(&quot;This example demonstrates the propagation &quot;+\n                &quot;behavior of services through a linked service object tree.&quot;, \n                new Font(&quot;Arial&quot;, 8), new SolidBrush(Color.Black), 4, 26);            \n            e.Graphics.DrawString(&quot;Right-click a component to add or replace a &quot;+\n                &quot;text service, or to remove it if the component provided it.&quot;, \n                new Font(&quot;Arial&quot;, 8), new SolidBrush(Color.Black), 4, 38);\n            e.Graphics.DrawString(&quot;Left-click a component to update text from &quot;+\n                &quot;the text service if available.&quot;, new Font(&quot;Arial&quot;, 8), \n                new SolidBrush(Color.Black), 4, 50);\n\n            // Draw lines to represent tree branches.\n            e.Graphics.DrawLine(new Pen(new SolidBrush(Color.Black), 1), \n                20, 125, 20, 258);\n            e.Graphics.DrawLine(new Pen(new SolidBrush(Color.Black), 1), \n                21, 175, 45, 175);\n            e.Graphics.DrawLine(new Pen(new SolidBrush(Color.Black), 1), \n                21, 258, 45, 258);\n            e.Graphics.DrawLine(new Pen(new SolidBrush(Color.Black), 1), \n                255, 175, 285, 175);\n            e.Graphics.DrawLine(new Pen(new SolidBrush(Color.Black), 1), \n                255, 258, 285, 258);\n            e.Graphics.DrawLine(new Pen(new SolidBrush(Color.Black), 1), \n                285, 155, 285, 195);\n            e.Graphics.DrawLine(new Pen(new SolidBrush(Color.Black), 1), \n                285, 238, 285, 278);            \n            e.Graphics.DrawLine(new Pen(new SolidBrush(Color.Black), 1), \n                285, 155, 290, 155);\n            e.Graphics.DrawLine(new Pen(new SolidBrush(Color.Black), 1), \n                285, 195, 290, 195);\n            e.Graphics.DrawLine(new Pen(new SolidBrush(Color.Black), 1), \n                285, 238, 290, 238);\n            e.Graphics.DrawLine(new Pen(new SolidBrush(Color.Black), 1), \n                285, 278, 290, 278);\n\n            // Draw color key.\n            e.Graphics.DrawRectangle(new Pen(new SolidBrush(Color.Black), 1), 20, 305, 410, 60);\n            int y=0;\n            for( int i=0; i&lt;3; i++ )\n            {\n                e.Graphics.FillRectangle(new SolidBrush(colorkeys[y]), \n                    25+(i*140), 310, 20, 20);           \n                e.Graphics.DrawRectangle(new Pen(new SolidBrush(Color.Black), 1), \n                    25+(i*140), 310, 20, 20);     \n                e.Graphics.DrawString(keystrings[y], new Font(&quot;Arial&quot;, 8), \n                    new SolidBrush(Color.Black), 50+(i*140), 315);\n                y++;\n                e.Graphics.FillRectangle(new SolidBrush(colorkeys[y]), \n                    25+(i*140), 340, 20, 20);           \n                e.Graphics.DrawRectangle(new Pen(new SolidBrush(Color.Black), 1), \n                    25+(i*140), 340, 20, 20);              \n                e.Graphics.DrawString(keystrings[y], new Font(&quot;Arial&quot;, 8), \n                    new SolidBrush(Color.Black), 50+(i*140), 345);\n                y++;\n            }\n        }\n\t}   \n   \n    // Example service type contains a text string, sufficient to \n    // demonstrate service sharing.\n    public class TextService\n    {\n        public string text;\n\n        public TextService() : this(string.Empty)\n        {\n        }\n\n        public TextService(string text)\n        {\n            this.text = text;\n        }\n    }\n\n    public enum TextServiceState\n    {\n        ServiceNotObtained,\n        ServiceObtained,\n        ServiceProvided,\n        ServiceNotFound\n    }\n\n    // Example Form for entering a string.\n    internal class StringInputDialog : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.Button ok_button;\n        private System.Windows.Forms.Button cancel_button;\n        public System.Windows.Forms.TextBox inputTextBox;\n\n        public StringInputDialog(string text)\n        {\n            InitializeComponent();\n            inputTextBox.Text = text;\n        }\n\n        private void InitializeComponent()\n        {\n            this.ok_button = new System.Windows.Forms.Button();\n            this.cancel_button = new System.Windows.Forms.Button();\n            this.inputTextBox = new System.Windows.Forms.TextBox();\n            this.SuspendLayout();\n            this.ok_button.Anchor = (System.Windows.Forms.AnchorStyles.Bottom | \n                System.Windows.Forms.AnchorStyles.Right);\n            this.ok_button.Location = new System.Drawing.Point(180, 43);\n            this.ok_button.Name = &quot;ok_button&quot;;\n            this.ok_button.TabIndex = 1;\n            this.ok_button.Text = &quot;OK&quot;;      \n            this.ok_button.DialogResult = System.Windows.Forms.DialogResult.OK;            \n            this.cancel_button.Anchor = (System.Windows.Forms.AnchorStyles.Bottom | \n                System.Windows.Forms.AnchorStyles.Right);\n            this.cancel_button.Location = new System.Drawing.Point(260, 43);\n            this.cancel_button.Name = &quot;cancel_button&quot;;\n            this.cancel_button.TabIndex = 2;\n            this.cancel_button.Text = &quot;Cancel&quot;;            \n            this.cancel_button.DialogResult = System.Windows.Forms.DialogResult.Cancel;\n            this.inputTextBox.Location = new System.Drawing.Point(6, 9);\n            this.inputTextBox.Name = &quot;inputTextBox&quot;;\n            this.inputTextBox.Size = new System.Drawing.Size(327, 20);\n            this.inputTextBox.TabIndex = 0;\n            this.inputTextBox.Text = &quot;&quot;;            \n            this.inputTextBox.Anchor = ((System.Windows.Forms.AnchorStyles.Top | \n                System.Windows.Forms.AnchorStyles.Left) \n                | System.Windows.Forms.AnchorStyles.Right);\n            this.ClientSize = new System.Drawing.Size(342, 73);\n            this.Controls.AddRange(new System.Windows.Forms.Control[] {\n                                                                          this.inputTextBox,\n                                                                          this.cancel_button,\n                                                                          this.ok_button});\n            this.MinimumSize = new System.Drawing.Size(350, 100);\n            this.Name = &quot;StringInputDialog&quot;;\n            this.Text = &quot;Text Service Provide String Dialog&quot;;\n            this.ResumeLayout(false);\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"IServiceContainerExample#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::Drawing;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::ComponentModel::Design;\nusing namespace System::Windows::Forms;\nusing namespace System::Windows::Forms::Design;\n\n// This sample contains a Form class that is configured to demonstrate \n// the behavior of a network of linked service containers.   \n// Notes regarding this IServiceContainer and IServiceProvider \n// implementation:\n//\n// When implementing the IServiceContainer interface, you may want to \n// implement support for a linked service container system\n// which enables access to and sharing of services throughout a \n// container tree or network.\n//\n// To effectively share a service, a GetService, AddService or \n// RemoveService method must be able to locate a service \n// that has been added to a shared service container tree or network.\n//        \n// One simple approach to sharing services, suitable for container networks \n// where each container has one parent and the tree has\n// one parentless container, is to store services only at the top node \n// (the root or grandparent) of a tree.\n//\n// To store services in the root node of a tree, two types of \n// consistencies must be maintained in the implementation:        \n//\n//   &gt;   The GetService, AddService and RemoveService implementations \n//       must access the root through some mechanism.\n//         The ServiceContainerControl&#39;s implementations of these \n//         standard IServiceContainer methods call \n//         the same method of a parent container, if the container \n//         has been parented, to route methods to the root.  \n//\n//   &gt;   The services must be maintained at the root of the tree; \n//       therefore, any new child&#39;s services should be copied to the root.                \nref class ServiceForm;\n\n// forward declaration\npublic enum class TextServiceState\n{\n   ServiceNotObtained, ServiceObtained, ServiceProvided, ServiceNotFound\n};\n\n// Example service type contains a text string, sufficient to \n// demonstrate service sharing.\npublic ref class TextService\n{\npublic:\n   String^ text;\n   TextService()\n   {\n      this-&gt;text = String::Empty;\n   }\n\n   TextService( String^ text )\n   {\n      this-&gt;text = text;\n   }\n};\n\n// ServiceContainerControl provides an example user control implmentation \n// of the IServiceContainer interface. This implementation of \n// IServiceContainer supports a root-node linked service distribution, \n// access. and removal architecture.\npublic ref class ServiceContainerControl: public System::Windows::Forms::UserControl, public IServiceContainer\n{\nprivate:\n\n   // List of service instances sorted by key of service type&#39;s full name.\n   SortedList^ localServices;\n\n   // List that contains the Type for each service sorted by each \n   // service type&#39;s full name.\n   SortedList^ localServiceTypes;\n\n   // The parent IServiceContainer, or null.\n   IServiceContainer^ parentServiceContainer;\n\npublic:\n\n   property IServiceContainer^ serviceParent \n   {\n      IServiceContainer^ get()\n      {\n         return parentServiceContainer;\n      }\n\n      void set( IServiceContainer^ value )\n      {\n         parentServiceContainer = value;\n\n         // Move any services to parent.\n         for ( int i = 0; i &lt; localServices-&gt;Count; i++ )\n            parentServiceContainer-&gt;AddService( dynamic_cast&lt;Type^&gt;(localServiceTypes-&gt;GetByIndex( i )), localServices-&gt;GetByIndex( i ) );\n         localServices-&gt;Clear();\n         localServiceTypes-&gt;Clear();\n      }\n   }\n\nprivate:\n\n   // The current state of the control reflecting whether it has \n   // obtained or provided a text service.\n   TextServiceState state_;\n\npublic:\n\n   property TextServiceState state \n   {\n      TextServiceState get()\n      {\n         return state_;\n      }\n\n      void set( TextServiceState value )\n      {\n         if ( (TextServiceState)value == TextServiceState::ServiceProvided )\n                  this-&gt;BackColor = Color::LightGreen;\n         else\n         if ( (TextServiceState)value == TextServiceState::ServiceNotObtained )\n                  this-&gt;BackColor = Color::White;\n         else\n         if ( (TextServiceState)value == TextServiceState::ServiceObtained )\n                  this-&gt;BackColor = Color::LightBlue;\n         else\n         if ( (TextServiceState)value == TextServiceState::ServiceNotFound )\n                  this-&gt;BackColor = Color::SeaShell;\n\n         state_ = value;\n      }\n   }\n\nprivate:\n\n   // Parent form reference for main program function access.\n   ServiceForm^ parent;\n\npublic:\n\n   // String for label displayed on the control to indicate \n   // the control&#39;s current service-related configuration state.\n   String^ label;\n   ServiceContainerControl( IServiceContainer^ ParentServiceContainer, System::Drawing::Size size, Point location, ServiceForm^ parent )\n   {\n      this-&gt;state_ = TextServiceState::ServiceNotObtained;\n      localServices = gcnew SortedList;\n      localServiceTypes = gcnew SortedList;\n      this-&gt;BackColor = Color::Beige;\n      this-&gt;label = String::Empty;\n      this-&gt;Size = size;\n      this-&gt;Location = location;\n      this-&gt;parent = parent;\n      this-&gt;serviceParent = ParentServiceContainer;\n\n      // If a parent is specified, set the parent property of this \n      // linkable IServiceContainer implementation.\n      if ( ParentServiceContainer != nullptr )\n            serviceParent = ParentServiceContainer;\n   }\n\n   // IServiceProvider.GetService implementation for a linked \n   // service container architecture.\n   virtual Object^ GetService( System::Type^ serviceType ) override\n   {\n      if ( parentServiceContainer != nullptr )\n            return parentServiceContainer-&gt;GetService( serviceType );\n\n      Object^ serviceInstance = localServices[ serviceType-&gt;FullName ];\n      if ( serviceInstance == nullptr )\n            return nullptr;\n      else\n      if ( serviceInstance-&gt;GetType() == ServiceCreatorCallback::typeid )\n      {\n         // If service instance is a ServiceCreatorCallback, invoke \n         // it to create the service.\n         return (dynamic_cast&lt;ServiceCreatorCallback^&gt;(serviceInstance));\n         (this,serviceType);\n      }\n\n      return serviceInstance;\n   }\n\n   // IServiceContainer.AddService implementation for a linked \n   // service container architecture.\n   virtual void AddService( System::Type^ serviceType, System::ComponentModel::Design::ServiceCreatorCallback^ callback, bool promote )\n   {\n      if ( promote &amp;&amp; parentServiceContainer != nullptr )\n            parentServiceContainer-&gt;AddService( serviceType, callback, true );\n      else\n      {\n         localServiceTypes[ serviceType-&gt;FullName ] = serviceType;\n         localServices[ serviceType-&gt;FullName ] = callback;\n      }\n   }\n\n   // IServiceContainer.AddService implementation for a linked \n   // service container architecture.\n   virtual void AddService( System::Type^ serviceType, System::ComponentModel::Design::ServiceCreatorCallback^ callback )\n   {\n      AddService( serviceType, callback, true );\n   }\n\n   // IServiceContainer.AddService implementation for a linked \n   // service container architecture.\n   virtual void AddService( System::Type^ serviceType, Object^ serviceInstance, bool promote )\n   {\n      if ( promote &amp;&amp; parentServiceContainer != nullptr )\n            parentServiceContainer-&gt;AddService( serviceType, serviceInstance, true );\n      else\n      {\n         localServiceTypes[ serviceType-&gt;FullName ] = serviceType;\n         localServices[ serviceType-&gt;FullName ] = serviceInstance;\n      }\n   }\n\n   // IServiceContainer.AddService (defaults to promote service addition).\n   virtual void AddService( System::Type^ serviceType, Object^ serviceInstance )\n   {\n      AddService( serviceType, serviceInstance, true );\n   }\n\n   // IServiceContainer.RemoveService implementation for a linked \n   // service container architecture.\n   virtual void RemoveService( System::Type^ serviceType, bool promote )\n   {\n      if ( localServices[ serviceType-&gt;FullName ] != nullptr )\n      {\n         localServices-&gt;Remove( serviceType-&gt;FullName );\n         localServiceTypes-&gt;Remove( serviceType-&gt;FullName );\n      }\n\n      if ( promote )\n      {\n         if ( parentServiceContainer != nullptr )\n                  parentServiceContainer-&gt;RemoveService( serviceType );\n      }\n   }\n\n   // IServiceContainer.RemoveService (defaults to promote \n   // service removal)\n   virtual void RemoveService( System::Type^ serviceType )\n   {\n      RemoveService( serviceType, true );\n   }\n\nprotected:\n\n   // Paint method override draws the label string on the control.\n   virtual void OnPaint( System::Windows::Forms::PaintEventArgs^ e ) override\n   {\n      e-&gt;Graphics-&gt;DrawString( label, gcnew System::Drawing::Font( &quot;Arial&quot;,8 ), gcnew SolidBrush( Color::Black ), 5, 5 );\n   }\n\n   // Process mouse-down behavior for click.\n   virtual void OnMouseDown( System::Windows::Forms::MouseEventArgs^ e ) override;\n\npublic:\n\n   // Method accesses the TextService to test the visibility of the \n   // service from the control, and sets the UI state accordingly.\n   void ReflectServiceVisibility()\n   {\n      if ( state_ == TextServiceState::ServiceObtained )\n      {\n         if ( GetService( TextService::typeid ) == nullptr )\n                  this-&gt;BackColor = Color::CadetBlue;\n      }\n      else\n      if ( state_ != TextServiceState::ServiceProvided )\n      {\n         if ( GetService( TextService::typeid ) == nullptr )\n         {\n            this-&gt;BackColor = Color::White;\n            return;\n         }\n         \n         // Service available.        \n         if ( state_ == TextServiceState::ServiceNotFound )\n                  this-&gt;BackColor = Color::Khaki;\n         else\n         if ( state_ == TextServiceState::ServiceNotObtained &amp;&amp;  !label-&gt;Equals( &quot;Service Removed&quot; ) )\n                  this-&gt;BackColor = Color::Khaki;\n      }\n   }\n\nprivate:\n\n   // ServiceCreatorCallback method creates a text service.\n   Object^ CreateTextService( IServiceContainer^ /*container*/, System::Type^ /*serviceType*/ )\n   {\n      return gcnew TextService( &quot;Test Callback&quot; );\n   }\n};\n\n// Example form provides UI for demonstrating service sharing behavior \n// of a network of IServiceContainer/IServiceProvider controls.\npublic ref class ServiceForm: public System::Windows::Forms::Form\n{\nprivate:\n\n   // Root service container control for tree.\n   ServiceContainerControl^ root;\n\n   // Button for clearing any provided services and resetting tree states.\n   System::Windows::Forms::Button^ reset_button;\n\n   // Color list used to color code controls.\n   array&lt;Color&gt;^colorkeys;\n\n   // Strings used to reflect text service.\n   array&lt;String^&gt;^keystrings;\n\npublic:\n   ServiceForm()\n   {\n      InitializeComponent();\n      colorkeys = gcnew array&lt;Color&gt;(6);\n      colorkeys[ 0 ] = Color::Beige;\n      colorkeys[ 1 ] = Color::SeaShell;\n      colorkeys[ 2 ] = Color::LightGreen;\n      colorkeys[ 3 ] = Color::LightBlue;\n      colorkeys[ 4 ] = Color::Khaki;\n      colorkeys[ 5 ] = Color::CadetBlue;\n      array&lt;String^&gt;^temp3 = {&quot;No service use&quot;,&quot;Service not accessible&quot;,&quot;Service provided&quot;,&quot;Service obtained&quot;,&quot;Service accessible&quot;,&quot;No further access&quot;};\n      keystrings = temp3;\n      CreateServiceControlTree();\n   }\n\nprivate:\n   void CreateServiceControlTree()\n   {\n      // Create root service control\n      ServiceContainerControl^ control1 = gcnew ServiceContainerControl( nullptr,System::Drawing::Size( 300, 40 ),Point(10,80),this );\n      root = control1;\n\n      // Create first tier - pass parent with service object control 1.\n      ServiceContainerControl^ control2 = gcnew ServiceContainerControl( control1,System::Drawing::Size( 200, 30 ),Point(50,160),this );\n      ServiceContainerControl^ control3 = gcnew ServiceContainerControl( control1,System::Drawing::Size( 200, 30 ),Point(50,240),this );\n\n      // Create second tier A - pass parent with service object control 2.\n      ServiceContainerControl^ control4 = gcnew ServiceContainerControl( control2,System::Drawing::Size( 180, 20 ),Point(300,145),this );\n      ServiceContainerControl^ control5 = gcnew ServiceContainerControl( control2,System::Drawing::Size( 180, 20 ),Point(300,185),this );\n\n      // Create second tier B - pass parent with service object control 3.\n      ServiceContainerControl^ control6 = gcnew ServiceContainerControl( control3,System::Drawing::Size( 180, 20 ),Point(300,225),this );\n      ServiceContainerControl^ control7 = gcnew ServiceContainerControl( control3,System::Drawing::Size( 180, 20 ),Point(300,265),this );\n\n      // Add controls\n      array&lt;Control^&gt;^temp0 = {control1,control2,control3,control4,control5,control6,control7};\n      this-&gt;Controls-&gt;AddRange( temp0 );\n   }\n\ninternal:\n   void ResetServiceTree( Object^ /*sender*/, EventArgs^ /*e*/ )\n   {\n      // Remove the service from the service tree.\n      if ( root-&gt;GetService( TextService::typeid ) != nullptr )\n            root-&gt;RemoveService( TextService::typeid, true );\n\n      // Set all controls to &quot;not obtained&quot; and clear their labels.\n      for ( int i = 0; i &lt; Controls-&gt;Count; i++ )\n         if (  !Controls[ i ]-&gt;Equals( reset_button ) )\n         {\n            (dynamic_cast&lt;ServiceContainerControl^&gt;(Controls[ i ]))-&gt;state = TextServiceState::ServiceNotObtained;\n            (dynamic_cast&lt;ServiceContainerControl^&gt;(Controls[ i ]))-&gt;label = String::Empty;\n            (dynamic_cast&lt;ServiceContainerControl^&gt;(Controls[ i ]))-&gt;BackColor = Color::Beige;\n         }\n   }\n\npublic:\n   void UpdateServiceCoverage()\n   {\n      // Have each control set state to reflect service availability.\n      for ( int i = 0; i &lt; Controls-&gt;Count; i++ )\n         if (  !Controls[ i ]-&gt;Equals( reset_button ) )\n                  (dynamic_cast&lt;ServiceContainerControl^&gt;(Controls[ i ]))-&gt;ReflectServiceVisibility();\n   }\n\nprivate:\n   void InitializeComponent()\n   {\n      this-&gt;reset_button = gcnew System::Windows::Forms::Button;\n      this-&gt;SuspendLayout();\n\n      // \n      // reset_button\n      // \n      this-&gt;reset_button-&gt;Location = System::Drawing::Point( 392, 88 );\n      this-&gt;reset_button-&gt;Name = &quot;reset_button&quot;;\n      this-&gt;reset_button-&gt;TabIndex = 0;\n      this-&gt;reset_button-&gt;TabStop = false;\n      this-&gt;reset_button-&gt;Text = &quot;Reset&quot;;\n      this-&gt;reset_button-&gt;Click += gcnew System::EventHandler( this, &amp;ServiceForm::ResetServiceTree );\n\n      // \n      // ServiceForm\n      // \n      this-&gt;ClientSize = System::Drawing::Size( 512, 373 );\n      array&lt;System::Windows::Forms::Control^&gt;^temp1 = {this-&gt;reset_button};\n      this-&gt;Controls-&gt;AddRange( temp1 );\n      this-&gt;MinimumSize = System::Drawing::Size( 520, 400 );\n      this-&gt;Name = &quot;ServiceForm&quot;;\n      this-&gt;Text = &quot;Service Container Architecture Example&quot;;\n      this-&gt;ResumeLayout( false );\n   }\n\nprotected:\n   virtual void OnPaint( System::Windows::Forms::PaintEventArgs^ e ) override\n   {\n      e-&gt;Graphics-&gt;DrawString( &quot;The following tree diagram represents a &quot;\n      &quot;hierarchy of linked service containers in controls.&quot;, gcnew System::Drawing::Font( &quot;Arial&quot;,9 ), gcnew SolidBrush( Color::Black ), 4, 4 );\n      e-&gt;Graphics-&gt;DrawString( &quot;This example demonstrates the propagation &quot;\n      &quot;behavior of services through a linked service object tree.&quot;, gcnew System::Drawing::Font( &quot;Arial&quot;,8 ), gcnew SolidBrush( Color::Black ), 4, 26 );\n      e-&gt;Graphics-&gt;DrawString( &quot;Right-click a component to add or replace a &quot;\n      &quot;text service, or to remove it if the component provided it.&quot;, gcnew System::Drawing::Font( &quot;Arial&quot;,8 ), gcnew SolidBrush( Color::Black ), 4, 38 );\n      e-&gt;Graphics-&gt;DrawString( &quot;Left-click a component to update text from &quot;\n      &quot;the text service if available.&quot;, gcnew System::Drawing::Font( &quot;Arial&quot;,8 ), gcnew SolidBrush( Color::Black ), 4, 50 );\n\n      // Draw lines to represent tree branches.\n      e-&gt;Graphics-&gt;DrawLine( gcnew Pen( gcnew SolidBrush( Color::Black ),1 ), 20, 125, 20, 258 );\n      e-&gt;Graphics-&gt;DrawLine( gcnew Pen( gcnew SolidBrush( Color::Black ),1 ), 21, 175, 45, 175 );\n      e-&gt;Graphics-&gt;DrawLine( gcnew Pen( gcnew SolidBrush( Color::Black ),1 ), 21, 258, 45, 258 );\n      e-&gt;Graphics-&gt;DrawLine( gcnew Pen( gcnew SolidBrush( Color::Black ),1 ), 255, 175, 285, 175 );\n      e-&gt;Graphics-&gt;DrawLine( gcnew Pen( gcnew SolidBrush( Color::Black ),1 ), 255, 258, 285, 258 );\n      e-&gt;Graphics-&gt;DrawLine( gcnew Pen( gcnew SolidBrush( Color::Black ),1 ), 285, 155, 285, 195 );\n      e-&gt;Graphics-&gt;DrawLine( gcnew Pen( gcnew SolidBrush( Color::Black ),1 ), 285, 238, 285, 278 );\n      e-&gt;Graphics-&gt;DrawLine( gcnew Pen( gcnew SolidBrush( Color::Black ),1 ), 285, 155, 290, 155 );\n      e-&gt;Graphics-&gt;DrawLine( gcnew Pen( gcnew SolidBrush( Color::Black ),1 ), 285, 195, 290, 195 );\n      e-&gt;Graphics-&gt;DrawLine( gcnew Pen( gcnew SolidBrush( Color::Black ),1 ), 285, 238, 290, 238 );\n      e-&gt;Graphics-&gt;DrawLine( gcnew Pen( gcnew SolidBrush( Color::Black ),1 ), 285, 278, 290, 278 );\n\n      // Draw color key.\n      e-&gt;Graphics-&gt;DrawRectangle( gcnew Pen( gcnew SolidBrush( Color::Black ),1 ), 20, 305, 410, 60 );\n      int y = 0;\n      for ( int i = 0; i &lt; 3; i++ )\n      {\n         e-&gt;Graphics-&gt;FillRectangle( gcnew SolidBrush( colorkeys[ y ] ), 25 + (i * 140), 310, 20, 20 );\n         e-&gt;Graphics-&gt;DrawRectangle( gcnew Pen( gcnew SolidBrush( Color::Black ),1 ), 25 + (i * 140), 310, 20, 20 );\n         e-&gt;Graphics-&gt;DrawString( keystrings[ y ], gcnew System::Drawing::Font( &quot;Arial&quot;,8 ), gcnew SolidBrush( Color::Black ), 50.0f + (i * 140), 315.0f );\n         y++;\n         e-&gt;Graphics-&gt;FillRectangle( gcnew SolidBrush( colorkeys[ y ] ), 25 + (i * 140), 340, 20, 20 );\n         e-&gt;Graphics-&gt;DrawRectangle( gcnew Pen( gcnew SolidBrush( Color::Black ),1 ), 25 + (i * 140), 340, 20, 20 );\n         e-&gt;Graphics-&gt;DrawString( keystrings[ y ], gcnew System::Drawing::Font( &quot;Arial&quot;,8 ), gcnew SolidBrush( Color::Black ), 50.0f + (i * 140), 345.0f );\n         y++;\n\n      }\n   }\n};\n\n// Example Form for entering a string.\nprivate ref class StringInputDialog: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::Button^ ok_button;\n   System::Windows::Forms::Button^ cancel_button;\n\npublic:\n   System::Windows::Forms::TextBox^ inputTextBox;\n   StringInputDialog( String^ text )\n   {\n      InitializeComponent();\n      inputTextBox-&gt;Text = text;\n   }\n\nprivate:\n   void InitializeComponent()\n   {\n      this-&gt;ok_button = gcnew System::Windows::Forms::Button;\n      this-&gt;cancel_button = gcnew System::Windows::Forms::Button;\n      this-&gt;inputTextBox = gcnew System::Windows::Forms::TextBox;\n      this-&gt;SuspendLayout();\n      this-&gt;ok_button-&gt;Anchor = static_cast&lt;System::Windows::Forms::AnchorStyles&gt;(System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;ok_button-&gt;Location = System::Drawing::Point( 180, 43 );\n      this-&gt;ok_button-&gt;Name = &quot;ok_button&quot;;\n      this-&gt;ok_button-&gt;TabIndex = 1;\n      this-&gt;ok_button-&gt;Text = &quot;OK&quot;;\n      this-&gt;ok_button-&gt;DialogResult = System::Windows::Forms::DialogResult::OK;\n      this-&gt;cancel_button-&gt;Anchor = static_cast&lt;System::Windows::Forms::AnchorStyles&gt;(System::Windows::Forms::AnchorStyles::Bottom | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;cancel_button-&gt;Location = System::Drawing::Point( 260, 43 );\n      this-&gt;cancel_button-&gt;Name = &quot;cancel_button&quot;;\n      this-&gt;cancel_button-&gt;TabIndex = 2;\n      this-&gt;cancel_button-&gt;Text = &quot;Cancel&quot;;\n      this-&gt;cancel_button-&gt;DialogResult = System::Windows::Forms::DialogResult::Cancel;\n      this-&gt;inputTextBox-&gt;Location = System::Drawing::Point( 6, 9 );\n      this-&gt;inputTextBox-&gt;Name = &quot;inputTextBox&quot;;\n      this-&gt;inputTextBox-&gt;Size = System::Drawing::Size( 327, 20 );\n      this-&gt;inputTextBox-&gt;TabIndex = 0;\n      this-&gt;inputTextBox-&gt;Text = &quot;&quot;;\n      this-&gt;inputTextBox-&gt;Anchor = static_cast&lt;System::Windows::Forms::AnchorStyles&gt;(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;ClientSize = System::Drawing::Size( 342, 73 );\n      array&lt;System::Windows::Forms::Control^&gt;^temp4 = {this-&gt;inputTextBox,this-&gt;cancel_button,this-&gt;ok_button};\n      this-&gt;Controls-&gt;AddRange( temp4 );\n      this-&gt;MinimumSize = System::Drawing::Size( 350, 100 );\n      this-&gt;Name = &quot;StringInputDialog&quot;;\n      this-&gt;Text = &quot;Text Service Provide String Dialog&quot;;\n      this-&gt;ResumeLayout( false );\n   }\n};\n\nvoid ServiceContainerControl::OnMouseDown( System::Windows::Forms::MouseEventArgs^ e )\n{\n   //  This example control responds to mouse clicks as follows:\n   //\n   //      Left click - control attempts to obtain a text service \n   //      and sets its label text to the text provided by the service\n   //      Right click - if the control has already provided a text \n   //      service, this control does nothing. Otherwise, the control \n   //      shows a dialog box to specify text to provide as a new text \n   //      service, after clearing the tree&#39;s services.\n   if ( e-&gt;Button == ::MouseButtons::Left )\n   {\n      if ( state_ != TextServiceState::ServiceProvided )\n      {\n         // Attempt to update text from service, and set \n         // color state accordingly.\n         TextService^ ts = dynamic_cast&lt;TextService^&gt;(GetService( TextService::typeid ));\n         if ( ts != nullptr )\n         {\n            this-&gt;label = ts-&gt;text;\n            state = TextServiceState::ServiceObtained;\n         }\n         else\n         {\n            this-&gt;label = &quot;Service Not Found&quot;;\n            state = TextServiceState::ServiceNotFound;\n         }\n      }\n   }\n\n   if ( e-&gt;Button == ::MouseButtons::Right )\n   {\n      if ( state_ == TextServiceState::ServiceProvided )\n      {\n         // Remove the service if the container provided it.\n         if ( GetService( TextService::typeid ) != nullptr )\n         {\n            RemoveService( TextService::typeid, true );\n            state = TextServiceState::ServiceNotObtained;\n            this-&gt;label = &quot;Service Removed&quot;;\n         }\n      }\n      else\n      {\n         // Obtain string and provide text service.\n         StringInputDialog^ form = gcnew StringInputDialog( &quot;Test String&quot; );\n         form-&gt;StartPosition = FormStartPosition::CenterParent;\n         if ( form-&gt;ShowDialog() == DialogResult::OK )\n         {\n            if ( GetService( TextService::typeid ) != nullptr )\n                        RemoveService( TextService::typeid, true );\n            parent-&gt;ResetServiceTree( this, gcnew EventArgs );\n            AddService( TextService::typeid, gcnew TextService( form-&gt;inputTextBox-&gt;Text ), true );\n\n            // The following commented method uses a service creator callback.\n            // AddService(typeof(TextService), \n            //  new ServiceCreatorCallback(this.CreateTextService));                                                \n            state = TextServiceState::ServiceProvided;\n            this-&gt;label = String::Format( &quot;Provided Text: {0}&quot;, form-&gt;inputTextBox-&gt;Text );\n         }\n      }\n   }\n\n   parent-&gt;UpdateServiceCoverage();\n}\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew ServiceForm );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"IServiceContainerExample#1\">Imports System\nImports System.Drawing\nImports System.Collections\nImports System.ComponentModel\nImports System.ComponentModel.Design\nImports System.Windows.Forms\nImports System.Windows.Forms.Design\n\n&#39; This sample contains a Form class that is configured to demonstrate \n&#39; the behavior of a network of linked service containers.   \n\n&#39; Notes regarding this IServiceContainer and IServiceProvider implementation:\n&#39;\n&#39; When implementing the IServiceContainer interface, you may want to \n&#39; implement support for a linked service container system\n&#39; which enables access to and sharing of services throughout a \n&#39; container tree or network.\n&#39;\n&#39; To effectively share a service, a GetService, AddService or \n&#39; RemoveService method must be able to locate a service \n&#39; that has been added to a shared service container tree or network.\n&#39;        \n&#39; One simple approach to sharing services, suitable for container networks \n&#39; where each container has one parent and the tree has\n&#39; one parentless container, is to store services only at the top node \n&#39; (the root or grandparent) of a tree.\n&#39;\n&#39; To store services in the root node of a tree, two types of \n&#39; consistencies must be maintained in the implementation:        \n&#39;\n&#39;   &gt;   The GetService, AddService and RemoveService implementations \n&#39;       must access the root through some mechanism.\n&#39;         The ServiceContainerControl&#39;s implementations of these \n&#39;         standard IServiceContainer methods call \n&#39;         the same method of a parent container, if the container \n&#39;         has been parented, to route methods to the root.  \n&#39;\n&#39;   &gt;   The services must be maintained at the root of the tree; \n&#39;       therefore any new child&#39;s services should be copied to the root.                \n\n&#39; ServiceContainerControl provides an example user control implmentation \n&#39; of the IServiceContainer interface. This implementation of \n&#39; IServiceContainer supports a root-node linked service distribution, \n&#39; access and removal architecture.\nPublic Class ServiceContainerControl\n    Inherits System.Windows.Forms.UserControl\n    Implements IServiceContainer\n\n    &#39; List of service instances sorted by key of service type&#39;s full name.\n    Private localServices As SortedList\n    &#39; List contains the Type for each service sorted by each service type&#39;s full name.\n    Private localServiceTypes As SortedList\n\n    &#39; The parent IServiceContainer, or null.\n    Private parentServiceContainer As IServiceContainer\n\n    Public Property serviceParent() As IServiceContainer\n        Get\n            Return parentServiceContainer\n        End Get\n        Set(ByVal Value As IServiceContainer)\n            parentServiceContainer = Value\n            &#39; Move any services to parent.\n            Dim i As Integer\n            For i = 0 To localServices.Count - 1\n                parentServiceContainer.AddService( _\n                    CType(localServiceTypes.GetByIndex(i), Type), _\n                    localServices.GetByIndex(i))\n            Next i\n            localServices.Clear()\n            localServiceTypes.Clear()\n        End Set\n    End Property\n\n    &#39; The current state of the control, reflecting whether it has \n    &#39; obtained or provided a text service.\n    Private state_ As TextServiceState\n\n    Public Property state() As TextServiceState\n        Get\n            Return state_\n        End Get\n        Set(ByVal Value As TextServiceState)\n            If CType(Value, TextServiceState) = _\n                    TextServiceState.ServiceProvided Then\n                Me.BackColor = Color.LightGreen\n            ElseIf CType(Value, TextServiceState) = _\n                    TextServiceState.ServiceNotObtained Then\n                Me.BackColor = Color.White\n            ElseIf CType(Value, TextServiceState) = _\n                    TextServiceState.ServiceObtained Then\n                Me.BackColor = Color.LightBlue\n            ElseIf CType(Value, TextServiceState) = _\n                    TextServiceState.ServiceNotFound Then\n                Me.BackColor = Color.SeaShell\n            End If\n            state_ = Value\n        End Set\n    End Property\n\n    &#39; Parent form reference for main program function access.\n    Private Shadows parent As ServiceForm\n    &#39; String for label displayed on the control to indicate \n    &#39; the control&#39;s current service-related configuration state.\n    Public label As String\n\n    Public Sub New(ByVal size As Size, ByVal location As Point, _\n                    ByVal parent As ServiceForm)\n        MyClass.New(Nothing, size, location, parent)\n    End Sub\n\n    Public Sub New(ByVal ParentServiceContainer As IServiceContainer, _\n        ByVal size As Size, ByVal location As Point, ByVal parent As ServiceForm)\n\n        Me.state_ = TextServiceState.ServiceNotObtained\n        localServices = New SortedList()\n        localServiceTypes = New SortedList()\n\n        Me.BackColor = Color.Beige\n        Me.label = String.Empty\n        Me.Size = size\n        Me.Location = location\n        Me.parent = parent\n        Me.serviceParent = ParentServiceContainer\n\n        &#39; If a parent is specified, set the parent property of this \n        &#39; linkable IServiceContainer implementation.\n        If (ParentServiceContainer IsNot Nothing) Then\n            serviceParent = ParentServiceContainer\n        End If\n    End Sub\n\n    &#39; IServiceProvider.GetService implementation for a linked \n    &#39; service container architecture.\n    Public Shadows Function GetService(ByVal serviceType As System.Type) As Object Implements IServiceProvider.GetService\n        If (parentServiceContainer IsNot Nothing) Then\n            Return parentServiceContainer.GetService(serviceType)\n        End If\n        Dim serviceInstance As Object = localServices(serviceType.FullName)\n        If serviceInstance Is Nothing Then\n            Return Nothing\n        ElseIf serviceInstance.GetType() Is GetType(ServiceCreatorCallback) Then\n            &#39; If service instance is a ServiceCreatorCallback, invoke it to create the service\n            Return CType(serviceInstance, ServiceCreatorCallback)(Me, serviceType)\n        End If\n        Return serviceInstance\n    End Function\n\n    &#39; IServiceContainer.AddService implementation for a linked \n    &#39; service container architecture.\n    Public Overloads Sub AddService(ByVal serviceType As System.Type, ByVal callback As System.ComponentModel.Design.ServiceCreatorCallback, ByVal promote As Boolean) Implements IServiceContainer.AddService\n        If promote AndAlso (parentServiceContainer IsNot Nothing) Then\n            parentServiceContainer.AddService(serviceType, callback, True)\n        Else\n            localServiceTypes(serviceType.FullName) = serviceType\n            localServices(serviceType.FullName) = callback\n        End If\n    End Sub\n\n    &#39; IServiceContainer.AddService implementation for a linked \n    &#39; service container architecture.\n    Public Overloads Sub AddService(ByVal serviceType As System.Type, _\n        ByVal callback As System.ComponentModel.Design.ServiceCreatorCallback) _\n        Implements IServiceContainer.AddService\n        AddService(serviceType, callback, True)\n    End Sub\n\n    &#39; IServiceContainer.AddService implementation for a linked \n    &#39; service container architecture.\n    Public Overloads Sub AddService(ByVal serviceType As System.Type, _\n        ByVal serviceInstance As Object, ByVal promote As Boolean) _\n        Implements IServiceContainer.AddService\n        If promote AndAlso (parentServiceContainer IsNot Nothing) Then\n            parentServiceContainer.AddService(serviceType, serviceInstance, True)\n        Else\n            localServiceTypes(serviceType.FullName) = serviceType\n            localServices(serviceType.FullName) = serviceInstance\n        End If\n    End Sub\n\n    &#39; IServiceContainer.AddService (defaults to promote service addition).\n    Public Overloads Sub AddService(ByVal serviceType As System.Type, _\n        ByVal serviceInstance As Object) Implements IServiceContainer.AddService\n        AddService(serviceType, serviceInstance, True)\n    End Sub\n\n    &#39; IServiceContainer.RemoveService implementation for a linked \n    &#39; service container architecture.\n    Public Overloads Sub RemoveService(ByVal serviceType As System.Type, _\n        ByVal promote As Boolean) Implements IServiceContainer.RemoveService\n        If (localServices(serviceType.FullName) IsNot Nothing) Then\n            localServices.Remove(serviceType.FullName)\n            localServiceTypes.Remove(serviceType.FullName)\n        End If\n        If promote Then\n            If (parentServiceContainer IsNot Nothing) Then\n                parentServiceContainer.RemoveService(serviceType)\n            End If\n        End If\n    End Sub\n\n    &#39; IServiceContainer.RemoveService (defaults to promote service removal)\n    Public Overloads Sub RemoveService(ByVal serviceType As System.Type) _\n        Implements IServiceContainer.RemoveService\n        RemoveService(serviceType, True)\n    End Sub\n\n    &#39; Paint method override draws the label string on the control.\n    Protected Overrides Sub OnPaint(ByVal e As System.Windows.Forms.PaintEventArgs)\n        e.Graphics.DrawString(label, New Font(&quot;Arial&quot;, 8), New SolidBrush(Color.Black), 5, 5)\n    End Sub\n\n    &#39; Process mouse-down behavior for click.\n    Protected Overrides Sub OnMouseDown(ByVal e As System.Windows.Forms.MouseEventArgs)\n\n        &#39;  This example control responds to mouse clicks as follows:\n        &#39;\n        &#39;      Left click - control attempts to obtain a text service \n        &#39;      and sets its label text to the text provided by the service\n        &#39;      Right click - if the control has already provided a text \n        &#39;      service, this control does nothing. Otherwise, the control \n        &#39;      shows a dialog to specify text to provide as a new text \n        &#39;      service, after clearing the tree&#39;s services.\n\n        If e.Button = System.Windows.Forms.MouseButtons.Left Then\n            If state_ &lt;&gt; TextServiceState.ServiceProvided Then\n                &#39; Attempt to update text from the service, and set \n                &#39; color state accordingly.\n                Dim ts As TextService = CType(GetService(GetType(TextService)), TextService)\n                If (ts IsNot Nothing) Then\n                    Me.label = ts.text\n                    state = TextServiceState.ServiceObtained\n                Else\n                    Me.label = &quot;Service Not Found&quot;\n                    state = TextServiceState.ServiceNotFound\n                End If\n            End If\n        End If\n        If e.Button = System.Windows.Forms.MouseButtons.Right Then\n            If state_ = TextServiceState.ServiceProvided Then\n                &#39; Remove the service the if the container provided it.\n                If (GetService(GetType(TextService)) IsNot Nothing) Then\n                    RemoveService(GetType(TextService), True)\n                    state = TextServiceState.ServiceNotObtained\n                    Me.label = &quot;Service Removed&quot;\n                End If\n            Else\n                &#39; Obtain string and provide text service.\n                Using form As New StringInputDialog(&quot;Test String&quot;)\n                    form.StartPosition = FormStartPosition.CenterParent\n                    If form.ShowDialog() = DialogResult.OK Then\n                        If (GetService(GetType(TextService)) IsNot Nothing) Then\n                            RemoveService(GetType(TextService), True)\n                        End If\n                        parent.ResetServiceTree(Me, New EventArgs())\n\n                        AddService(GetType(TextService), _\n                            New TextService(form.inputTextBox.Text), True)\n\n                        &#39; The following commented method uses a service creator callback.\n                        &#39; AddService(typeof(TextService), \n                        &#39;   new ServiceCreatorCallback(this.CreateTextService));                                                \n                        state = TextServiceState.ServiceProvided\n                        Me.label = &quot;Provided Text: &quot; + form.inputTextBox.Text\n                    End If\n                End Using\n            End If\n        End If\n        parent.UpdateServiceCoverage()\n    End Sub\n\n    &#39; Method accesses the TextService to test the visibility of the service \n    &#39; from the control, and sets the UI state accordingly.\n    Public Sub ReflectServiceVisibility()\n        If state_ = TextServiceState.ServiceObtained Then\n            If GetService(GetType(TextService)) Is Nothing Then\n                Me.BackColor = Color.CadetBlue\n            End If\n        ElseIf state_ &lt;&gt; TextServiceState.ServiceProvided Then\n            If GetService(GetType(TextService)) Is Nothing Then\n                Me.BackColor = Color.White\n                Return\n            End If\n\n            &#39; Service available.    \n            If state_ = TextServiceState.ServiceNotFound Then\n                Me.BackColor = Color.Khaki\n            ElseIf state_ = TextServiceState.ServiceNotObtained _\n                AndAlso label &lt;&gt; &quot;Service Removed&quot; Then\n                Me.BackColor = Color.Khaki\n            End If\n        End If\n    End Sub\n\n    &#39; ServiceCreatorCallback method creates a text service.\n    Private Function CreateTextService(ByVal container As IServiceContainer, _\n        ByVal serviceType As System.Type) As Object\n        Return New TextService(&quot;Test Callback&quot;)\n    End Function\nEnd Class\n\n&#39; Example form provides UI for demonstrating service sharing behavior \n&#39; of a network of IServiceContainer/IServiceProvider controls.\nPublic Class ServiceForm\n    Inherits System.Windows.Forms.Form\n    \n    &#39; Root service container control for tree.\n    Private root As ServiceContainerControl  \n    &#39; Button for clearing any provided services and resetting tree states.\n    Private WithEvents reset_button As System.Windows.Forms.Button \n    &#39; Color list used to color code controls.\n    Private colorkeys() As Color\n    Private keystrings() As String\n    &#39; Strings used to reflect text service \n    Public Sub New()\n        InitializeComponent()\n        colorkeys = New Color() {Color.Beige, Color.SeaShell, _\n            Color.LightGreen, Color.LightBlue, Color.Khaki, Color.CadetBlue}\n        keystrings = New String() {&quot;No service use&quot;, &quot;Service not accessible&quot;, _\n            &quot;Service provided&quot;, &quot;Service obtained&quot;, &quot;Service accessible&quot;, _\n            &quot;No further access&quot;}\n        CreateServiceControlTree()\n    End Sub\n\n    Private Sub CreateServiceControlTree()\n        &#39; Create root service control\n        Dim control1 As New ServiceContainerControl(Nothing, New Size(300, 40), New Point(10, 80), Me)\n        root = control1\n        &#39; Create first tier - pass parent with service object control 1.\n        Dim control2 As New ServiceContainerControl(control1, New Size(200, 30), New Point(50, 160), Me)\n        Dim control3 As New ServiceContainerControl(control1, New Size(200, 30), New Point(50, 240), Me)\n        &#39; Create second tier A - pass parent with service object control 2.\n        Dim control4 As New ServiceContainerControl(control2, New Size(180, 20), New Point(300, 145), Me)\n        Dim control5 As New ServiceContainerControl(control2, New Size(180, 20), New Point(300, 185), Me)\n        &#39; Create second tier B - pass parent with service object control 3.\n        Dim control6 As New ServiceContainerControl(control3, New Size(180, 20), New Point(300, 225), Me)\n        Dim control7 As New ServiceContainerControl(control3, New Size(180, 20), New Point(300, 265), Me)\n        &#39; Add controls\n        Me.Controls.AddRange(New Control() {control1, control2, control3, control4, control5, control6, control7})\n    End Sub\n\n    Friend Sub ResetServiceTree(ByVal sender As Object, ByVal e As EventArgs) Handles reset_button.Click\n        &#39; Remove the service from the service tree.\n        If (root.GetService(GetType(TextService)) IsNot Nothing) Then\n            root.RemoveService(GetType(TextService), True)\n        End If\n        &#39; Set all controls to &quot;not obtained&quot; and clear their labels.\n        Dim i As Integer\n        For i = 0 To Controls.Count - 1\n            If Not Controls(i).Equals(reset_button) Then\n                CType(Controls(i), ServiceContainerControl).state = TextServiceState.ServiceNotObtained\n                CType(Controls(i), ServiceContainerControl).label = String.Empty\n                CType(Controls(i), ServiceContainerControl).BackColor = Color.Beige\n            End If\n        Next i\n    End Sub\n\n    Public Sub UpdateServiceCoverage()\n        &#39; Have each control set state to reflect service availability.\n        Dim i As Integer\n        For i = 0 To Controls.Count - 1\n            If Not Controls(i).Equals(reset_button) Then\n                CType(Controls(i), ServiceContainerControl).ReflectServiceVisibility()\n            End If\n        Next i\n    End Sub\n\n    Private Sub InitializeComponent()\n        Me.reset_button = New System.Windows.Forms.Button()\n        Me.SuspendLayout()\n        &#39; \n        &#39; reset_button\n        &#39; \n        Me.reset_button.Location = New System.Drawing.Point(392, 88)\n        Me.reset_button.Name = &quot;reset_button&quot;\n        Me.reset_button.TabIndex = 0\n        Me.reset_button.TabStop = False\n        Me.reset_button.Text = &quot;Reset&quot;\n        &#39; \n        &#39; ServiceForm\n        &#39; \n        Me.ClientSize = New System.Drawing.Size(512, 373)\n        Me.Controls.AddRange(New System.Windows.Forms.Control() {Me.reset_button})\n        Me.MinimumSize = New System.Drawing.Size(520, 400)\n        Me.Name = &quot;ServiceForm&quot;\n        Me.Text = &quot;Service Container Architecture Example&quot;\n        Me.ResumeLayout(False)\n    End Sub\n\n    &lt;STAThread()&gt; _\n    Shared Sub Main()\n        Application.Run(New ServiceForm())\n    End Sub\n\n    Protected Overrides Sub OnPaint(ByVal e As System.Windows.Forms.PaintEventArgs)\n        e.Graphics.DrawString(&quot;The following tree diagram represents a hierarchy of linked service containers in controls.&quot;, New Font(&quot;Arial&quot;, 9), New SolidBrush(Color.Black), 4, 4)\n        e.Graphics.DrawString(&quot;This example demonstrates the propagation behavior of services through a linked service object tree.&quot;, New Font(&quot;Arial&quot;, 8), New SolidBrush(Color.Black), 4, 26)\n        e.Graphics.DrawString(&quot;Right-click a component to add or replace a text service, or to remove it if the component provided it.&quot;, New Font(&quot;Arial&quot;, 8), New SolidBrush(Color.Black), 4, 38)\n        e.Graphics.DrawString(&quot;Left-click a component to update text from the text service if available.&quot;, New Font(&quot;Arial&quot;, 8), New SolidBrush(Color.Black), 4, 50)\n\n        &#39; Draw lines to represent tree branches.\n        e.Graphics.DrawLine(New Pen(New SolidBrush(Color.Black), 1), 20, 125, 20, 258)\n        e.Graphics.DrawLine(New Pen(New SolidBrush(Color.Black), 1), 21, 175, 45, 175)\n        e.Graphics.DrawLine(New Pen(New SolidBrush(Color.Black), 1), 21, 258, 45, 258)\n        e.Graphics.DrawLine(New Pen(New SolidBrush(Color.Black), 1), 255, 175, 285, 175)\n        e.Graphics.DrawLine(New Pen(New SolidBrush(Color.Black), 1), 255, 258, 285, 258)\n        e.Graphics.DrawLine(New Pen(New SolidBrush(Color.Black), 1), 285, 155, 285, 195)\n        e.Graphics.DrawLine(New Pen(New SolidBrush(Color.Black), 1), 285, 238, 285, 278)\n        e.Graphics.DrawLine(New Pen(New SolidBrush(Color.Black), 1), 285, 155, 290, 155)\n        e.Graphics.DrawLine(New Pen(New SolidBrush(Color.Black), 1), 285, 195, 290, 195)\n        e.Graphics.DrawLine(New Pen(New SolidBrush(Color.Black), 1), 285, 238, 290, 238)\n        e.Graphics.DrawLine(New Pen(New SolidBrush(Color.Black), 1), 285, 278, 290, 278)\n\n        &#39; Draw color key.\n        e.Graphics.DrawRectangle(New Pen(New SolidBrush(Color.Black), 1), 20, 305, 410, 60)\n        Dim y As Integer = 0\n        Dim i As Integer\n        For i = 0 To 2\n            e.Graphics.FillRectangle(New SolidBrush(colorkeys(y)), _\n                25 + i * 140, 310, 20, 20)\n            e.Graphics.DrawRectangle(New Pen(New SolidBrush(Color.Black), 1), _\n                25 + i * 140, 310, 20, 20)\n            e.Graphics.DrawString(keystrings(y), New Font(&quot;Arial&quot;, 8), _\n                New SolidBrush(Color.Black), 50 + i * 140, 315)\n            y += 1\n            e.Graphics.FillRectangle(New SolidBrush(colorkeys(y)), _\n                25 + i * 140, 340, 20, 20)\n            e.Graphics.DrawRectangle(New Pen(New SolidBrush(Color.Black), 1), _\n                25 + i * 140, 340, 20, 20)\n            e.Graphics.DrawString(keystrings(y), New Font(&quot;Arial&quot;, 8), _\n                New SolidBrush(Color.Black), 50 + i * 140, 345)\n            y += 1\n        Next i\n    End Sub\nEnd Class\n\n&#39; Example service type contains a text string, sufficient to \n&#39; demonstrate service sharing.\nPublic Class TextService\n    Public [text] As String\n\n    Public Sub New()\n        MyClass.New(String.Empty)\n    End Sub\n\n    Public Sub New(ByVal [text] As String)\n        Me.text = [text]\n    End Sub\nEnd Class\n\nPublic Enum TextServiceState\n    ServiceNotObtained\n    ServiceObtained\n    ServiceProvided\n    ServiceNotFound\nEnd Enum\n\n&#39; Example Form for entering a string.\nFriend Class StringInputDialog\n    Inherits System.Windows.Forms.Form\n    Private ok_button As System.Windows.Forms.Button\n    Private cancel_button As System.Windows.Forms.Button\n    Public inputTextBox As System.Windows.Forms.TextBox\n\n    Public Sub New(ByVal [text] As String)\n        InitializeComponent()\n        inputTextBox.Text = [text]\n    End Sub\n\n    Private Sub InitializeComponent()\n        Me.ok_button = New System.Windows.Forms.Button()\n        Me.cancel_button = New System.Windows.Forms.Button()\n        Me.inputTextBox = New System.Windows.Forms.TextBox()\n        Me.SuspendLayout()\n        Me.ok_button.Anchor = System.Windows.Forms.AnchorStyles.Bottom _\n            Or System.Windows.Forms.AnchorStyles.Right\n        Me.ok_button.Location = New System.Drawing.Point(180, 43)\n        Me.ok_button.Name = &quot;ok_button&quot;\n        Me.ok_button.TabIndex = 1\n        Me.ok_button.Text = &quot;OK&quot;\n        Me.ok_button.DialogResult = System.Windows.Forms.DialogResult.OK\n        Me.cancel_button.Anchor = System.Windows.Forms.AnchorStyles.Bottom _\n            Or System.Windows.Forms.AnchorStyles.Right\n        Me.cancel_button.Location = New System.Drawing.Point(260, 43)\n        Me.cancel_button.Name = &quot;cancel_button&quot;\n        Me.cancel_button.TabIndex = 2\n        Me.cancel_button.Text = &quot;Cancel&quot;\n        Me.cancel_button.DialogResult = System.Windows.Forms.DialogResult.Cancel\n        Me.inputTextBox.Location = New System.Drawing.Point(6, 9)\n        Me.inputTextBox.Name = &quot;inputTextBox&quot;\n        Me.inputTextBox.Size = New System.Drawing.Size(327, 20)\n        Me.inputTextBox.TabIndex = 0\n        Me.inputTextBox.Text = &quot;&quot;\n        Me.inputTextBox.Anchor = System.Windows.Forms.AnchorStyles.Top _\n            Or System.Windows.Forms.AnchorStyles.Left Or _\n            System.Windows.Forms.AnchorStyles.Right\n        Me.ClientSize = New System.Drawing.Size(342, 73)\n        Me.Controls.AddRange(New System.Windows.Forms.Control() _\n            {Me.inputTextBox, Me.cancel_button, Me.ok_button})\n        Me.MinimumSize = New System.Drawing.Size(350, 100)\n        Me.Name = &quot;StringInputDialog&quot;\n        Me.Text = &quot;Text Service Provide String Dialog&quot;\n        Me.ResumeLayout(False)\n    End Sub\nEnd Class\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>A service container is, by definition, a service provider. In addition to providing services, it also provides a mechanism for adding and removing services. Services are a foundation of the .NET Framework design-time architecture. Services provide design-time objects access to specific features and methods implemented by a service object that provides a service or services.  </p>\n<p> To obtain a service at design time, call the <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_GetService_\" data-linktype=\"relative-path\">GetService</a> method of a component sited in design mode. Designers and other objects can add or remove services at design time through the <a class=\"xref\" href=\"system.componentmodel.design.idesignerhost\" data-linktype=\"relative-path\">IDesignerHost</a> interface.  </p>\n<p> Service containers can be contained by other service containers, forming a tree of service containers. By default, the IServiceContainer interface adds services to the closest service container. When a service is added, it can be added with instructions to promote it. When a service is promoted, it is added to any parent service container, on up until the top of the service container tree is reached. This allows a designer to provide a global service that other objects in the process can use.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_IServiceContainer_AddService_System_Type_System_ComponentModel_Design_ServiceCreatorCallback_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AddService(Type, ServiceCreatorCallback)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Adds the specified service to the service container.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void AddService (Type serviceType, System.ComponentModel.Design.ServiceCreatorCallback callback);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>serviceType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The type of service to add.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>callback</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.design.servicecreatorcallback\" data-linktype=\"relative-path\">ServiceCreatorCallback</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_IServiceContainer_AddService_System_Type_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AddService(Type, Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Adds the specified service to the service container.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void AddService (Type serviceType, object serviceInstance);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>serviceType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The type of service to add.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>serviceInstance</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An instance of the service type to add. This object must implement or inherit from the type indicated by the <code>serviceType</code> parameter.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_IServiceContainer_AddService_System_Type_System_ComponentModel_Design_ServiceCreatorCallback_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AddService(Type, ServiceCreatorCallback, Boolean)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Adds the specified service to the service container, and optionally promotes the service to parent service containers.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void AddService (Type serviceType, System.ComponentModel.Design.ServiceCreatorCallback callback, bool promote);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>serviceType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The type of service to add.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>callback</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.design.servicecreatorcallback\" data-linktype=\"relative-path\">ServiceCreatorCallback</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>promote</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to promote this request to any parent service containers; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_IServiceContainer_AddService_System_Type_System_Object_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AddService(Type, Object, Boolean)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Adds the specified service to the service container, and optionally promotes the service to any parent service containers.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void AddService (Type serviceType, object serviceInstance, bool promote);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>serviceType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The type of service to add.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>serviceInstance</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An instance of the service type to add. This object must implement or inherit from the type indicated by the <code>serviceType</code> parameter.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>promote</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to promote this request to any parent service containers; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_IServiceContainer_RemoveService_System_Type_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">RemoveService(Type)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Removes the specified service type from the service container.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void RemoveService (Type serviceType);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>serviceType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The type of service to remove.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_IServiceContainer_RemoveService_System_Type_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">RemoveService(Type, Boolean)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Removes the specified service type from the service container, and optionally promotes the service to parent service containers.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void RemoveService (Type serviceType, bool promote);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>serviceType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The type of service to remove.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>promote</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to promote this request to any parent service containers; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.Design.IServiceContainer.yml\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IServiceContainer\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IServiceContainer.AddService\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IServiceContainer.RemoveService\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"99a535f7-7a8d-0cd4-45f5-4023dabd13bc\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a container for services.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.componentmodel.design/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.ComponentModel.Design.IServiceContainer\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.Design.IServiceContainer.yml","open_to_public_contributors":false,"api_name":["System.ComponentModel.Design.IServiceContainer","System.ComponentModel.Design.IServiceContainer.AddService","System.ComponentModel.Design.IServiceContainer.RemoveService"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.ComponentModel.Design.IServiceContainer","System::ComponentModel::Design::IServiceContainer","System.ComponentModel.Design.IServiceContainer.AddService","System::ComponentModel::Design::IServiceContainer::AddService","System.ComponentModel.Design.IServiceContainer.RemoveService","System::ComponentModel::Design::IServiceContainer::RemoveService"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"99a535f7-7a8d-0cd4-45f5-4023dabd13bc","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design/IServiceContainer.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IServiceContainer interface | Microsoft Docs","_op_ogTitle":"IServiceContainer interface","description":"Provides a container for services.\n","toc_asset_id":"api/_splitted/System.ComponentModel.Design/toc.json","toc_rel":"_splitted/System.ComponentModel.Design/toc.json","source_url":"","ms.assetid":"System.ComponentModel.Design.IServiceContainer","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.design.iservicecontainer","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.design.iservicecontainer","fileRelativePath":"api/System.ComponentModel.Design.IServiceContainer.html"},"themesRelativePathToOutputRoot":"_themes/"}