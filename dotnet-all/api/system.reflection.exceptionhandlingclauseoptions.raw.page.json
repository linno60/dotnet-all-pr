{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ExceptionHandlingClauseOptions</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Identifies kinds of exception-handling clauses.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Flags]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic enum ExceptionHandlingClauseOptions</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">ExceptionHandlingClauseOptions</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.flagsattribute\" title=\"System.FlagsAttribute\" data-linktype=\"relative-path\">FlagsAttribute</a></span>\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example defines a test method named <code>MethodBodyExample</code>, and displays its local variable information and exception-handling clauses. The <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetMethodBody_\" data-linktype=\"relative-path\">GetMethodBody</a> method is used to obtain a <a class=\"xref\" href=\"system.reflection.methodbody\" data-linktype=\"relative-path\">MethodBody</a> object for the test method. The <a class=\"xref\" href=\"system.reflection.methodbody#System_Reflection_MethodBody_ExceptionHandlingClauses_\" data-linktype=\"relative-path\">ExceptionHandlingClauses</a> property is used to obtain a list of <a class=\"xref\" href=\"system.reflection.exceptionhandlingclause\" data-linktype=\"relative-path\">ExceptionHandlingClause</a> objects and display their properties.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Not all computer languages can generate Filter clauses. The Visual Basic example shows a filter clause, using a Visual Basic <code>When</code> expression, which is omitted from the examples for other languages.  </p>\n</div>\n<p> This code is part of a larger example provided for the <a class=\"xref\" href=\"system.reflection.methodbody\" data-linktype=\"relative-path\">MethodBody</a> class.  </p>\n<pre><code class=\"lang-cpp\" name=\"MethodBody#2\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Reflection;\n\npublic ref class Example\n{\n    // The Main method contains code to analyze this method, using\n    // the properties and methods of the MethodBody class.\npublic:\n    void MethodBodyExample(Object^ arg)\n    {\n        // Define some local variables. In addition to these variables,\n        // the local variable list includes the variables scoped to \n        // the catch clauses.\n        int var1 = 42;\n        String^ var2 = &quot;Forty-two&quot;;\n\n        try\n        {\n            // Depending on the input value, throw an ArgumentException or \n            // an ArgumentNullException to test the Catch clauses.\n            if (arg == nullptr)\n            {\n                throw gcnew ArgumentNullException(&quot;The argument cannot &quot; +\n                    &quot;be null.&quot;);\n            }\n            if (arg-&gt;GetType() == String::typeid)\n            {\n                throw gcnew ArgumentException(&quot;The argument cannot &quot; + \n                    &quot;be a string.&quot;);\n            }        \n        }\n\n        // There is no Filter clause in this code example. See the Visual \n        // Basic code for an example of a Filter clause.\n\n        // This catch clause handles the ArgumentException class, and\n        // any other class derived from Exception.\n        catch (ArgumentException^ ex)\n        {\n            Console::WriteLine(&quot;Ordinary exception-handling clause caught:&quot; +\n                &quot; {0}&quot;, ex-&gt;GetType());\n        }        \n        finally\n        {\n            var1 = 3033;\n            var2 = &quot;Another string.&quot;;\n        }\n    }\n};\n\nint main()\n{ \n    // Get method body information.\n    MethodInfo^ mi = \n        Example::typeid-&gt;GetMethod(&quot;MethodBodyExample&quot;);\n\n    MethodBody^ mb = mi-&gt;GetMethodBody();\n    Console::WriteLine(&quot;\\r\\nMethod: {0}&quot;, mi);\n\n    // Display the general information included in the \n    // MethodBody object.\n    Console::WriteLine(&quot;    Local variables are initialized: {0}&quot;, \n        mb-&gt;InitLocals);\n    Console::WriteLine(&quot;    Maximum number of items on the operand &quot; +\n        &quot;stack: {0}&quot;, mb-&gt;MaxStackSize);\n</code></pre><pre><code class=\"lang-vb\" name=\"MethodBody#2\">Imports System\nImports System.Reflection\n\nPublic Class Example\n\n    Public Shared Sub Main()\n\n        &#39; Demonstrate the effect of the Visual Basic When keyword, which\n        &#39; generates a Filter clause in the Try block.\n        Dim e As New Example()\n        Console.WriteLine()\n        e.MethodBodyExample(&quot;String argument&quot;)\n        e.MethodBodyExample(Nothing)\n\n        &#39; Get method body information.\n        Dim mi As MethodInfo = _\n            GetType(Example).GetMethod(&quot;MethodBodyExample&quot;)\n        Dim mb As MethodBody = mi.GetMethodBody()\n        Console.WriteLine(vbCrLf &amp; &quot;Method: {0}&quot;, mi)\n\n        &#39; Display the general information included in the \n        &#39; MethodBody object.\n        Console.WriteLine(&quot;    Local variables are initialized: {0}&quot;, _\n            mb.InitLocals)\n        Console.WriteLine(&quot;    Maximum number of items on the operand stack: {0}&quot;, _\n            mb.MaxStackSize)\n</code></pre><pre><code class=\"lang-cs\" name=\"MethodBody#2\">using System;\nusing System.Reflection;\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Get method body information.\n        MethodInfo mi = typeof(Example).GetMethod(&quot;MethodBodyExample&quot;);\n        MethodBody mb = mi.GetMethodBody();\n        Console.WriteLine(&quot;\\r\\nMethod: {0}&quot;, mi);\n\n        // Display the general information included in the \n        // MethodBody object.\n        Console.WriteLine(&quot;    Local variables are initialized: {0}&quot;, \n            mb.InitLocals);\n        Console.WriteLine(&quot;    Maximum number of items on the operand stack: {0}&quot;, \n            mb.MaxStackSize);\n</code></pre><pre><code class=\"lang-cpp\" name=\"MethodBody#4\">\n// Display exception handling clauses.\nConsole::WriteLine();\nfor each(ExceptionHandlingClause^ exhc in mb-&gt;ExceptionHandlingClauses)\n{\n    Console::WriteLine(exhc-&gt;Flags.ToString());\n\n    // The FilterOffset property is meaningful only for Filter\n    // clauses. The CatchType property is not meaningful for \n    // Filter or Finally clauses. \n    switch(exhc-&gt;Flags)\n    {\n    case ExceptionHandlingClauseOptions::Filter:\n        Console::WriteLine(&quot;        Filter Offset: {0}&quot;, \n            exhc-&gt;FilterOffset);\n        break;\n    case ExceptionHandlingClauseOptions::Finally:\n        break;\n    default:\n        Console::WriteLine(&quot;    Type of exception: {0}&quot;, \n            exhc-&gt;CatchType);\n        break;\n    }\n\n    Console::WriteLine(&quot;       Handler Length: {0}&quot;,\n        exhc-&gt;HandlerLength);\n    Console::WriteLine(&quot;       Handler Offset: {0}&quot;, \n        exhc-&gt;HandlerOffset);\n    Console::WriteLine(&quot;     Try Block Length: {0}&quot;, exhc-&gt;TryLength);\n    Console::WriteLine(&quot;     Try Block Offset: {0}&quot;, exhc-&gt;TryOffset);\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MethodBody#4\">\n&#39; Display exception handling clauses.\nConsole.WriteLine()\nFor Each ehc As ExceptionHandlingClause In mb.ExceptionHandlingClauses\n    Console.WriteLine(ehc.Flags.ToString())\n\n    &#39; The FilterOffset property is meaningful only for Filter\n    &#39; clauses. The CatchType property is not meaningful for \n    &#39; Filter or Finally clauses. \n    Select Case ehc.Flags\n        Case ExceptionHandlingClauseOptions.Filter\n            Console.WriteLine(&quot;        Filter Offset: {0}&quot;, _\n                ehc.FilterOffset)\n        Case ExceptionHandlingClauseOptions.Finally\n        Case Else\n            Console.WriteLine(&quot;    Type of exception: {0}&quot;, _\n                ehc.CatchType)\n    End Select\n\n    Console.WriteLine(&quot;       Handler Length: {0}&quot;, ehc.HandlerLength)\n    Console.WriteLine(&quot;       Handler Offset: {0}&quot;, ehc.HandlerOffset)\n    Console.WriteLine(&quot;     Try Block Length: {0}&quot;, ehc.TryLength)\n    Console.WriteLine(&quot;     Try Block Offset: {0}&quot;, ehc.TryOffset)\nNext\n</code></pre><pre><code class=\"lang-cs\" name=\"MethodBody#4\">\n// Display exception handling clauses.\nConsole.WriteLine();\nforeach (ExceptionHandlingClause ehc in mb.ExceptionHandlingClauses)\n{\n    Console.WriteLine(ehc.Flags.ToString());\n\n    // The FilterOffset property is meaningful only for Filter\n    // clauses. The CatchType property is not meaningful for \n    // Filter or Finally clauses. \n    switch (ehc.Flags)\n    {\n        case ExceptionHandlingClauseOptions.Filter:\n            Console.WriteLine(&quot;        Filter Offset: {0}&quot;, \n                ehc.FilterOffset);\n            break;\n        case ExceptionHandlingClauseOptions.Finally:\n            break;\n        default:\n            Console.WriteLine(&quot;    Type of exception: {0}&quot;, \n                ehc.CatchType);\n            break;\n    }\n\n    Console.WriteLine(&quot;       Handler Length: {0}&quot;, ehc.HandlerLength);\n    Console.WriteLine(&quot;       Handler Offset: {0}&quot;, ehc.HandlerOffset);\n    Console.WriteLine(&quot;     Try Block Length: {0}&quot;, ehc.TryLength);\n    Console.WriteLine(&quot;     Try Block Offset: {0}&quot;, ehc.TryOffset);\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"MethodBody#5\">    // The Main method contains code to analyze this method, using\n    // the properties and methods of the MethodBody class.\npublic:\n    void MethodBodyExample(Object^ arg)\n    {\n        // Define some local variables. In addition to these variables,\n        // the local variable list includes the variables scoped to \n        // the catch clauses.\n        int var1 = 42;\n        String^ var2 = &quot;Forty-two&quot;;\n\n        try\n        {\n            // Depending on the input value, throw an ArgumentException or \n            // an ArgumentNullException to test the Catch clauses.\n            if (arg == nullptr)\n            {\n                throw gcnew ArgumentNullException(&quot;The argument cannot &quot; +\n                    &quot;be null.&quot;);\n            }\n            if (arg-&gt;GetType() == String::typeid)\n            {\n                throw gcnew ArgumentException(&quot;The argument cannot &quot; + \n                    &quot;be a string.&quot;);\n            }        \n        }\n\n        // There is no Filter clause in this code example. See the Visual \n        // Basic code for an example of a Filter clause.\n\n        // This catch clause handles the ArgumentException class, and\n        // any other class derived from Exception.\n        catch (ArgumentException^ ex)\n        {\n            Console::WriteLine(&quot;Ordinary exception-handling clause caught:&quot; +\n                &quot; {0}&quot;, ex-&gt;GetType());\n        }        \n        finally\n        {\n            var1 = 3033;\n            var2 = &quot;Another string.&quot;;\n        }\n    }\n</code></pre><pre><code class=\"lang-vb\" name=\"MethodBody#5\">    End Sub\n\n    &#39; This test method is executed at the beginning of Main, to show\n    &#39; how the Filter clause works. The Filter clause is generated by \n    &#39; a Visual Basic When expression. If arg is Nothing, this method\n    &#39; throws ArgumentNullException, which is caught by the filter\n    &#39; clause. If arg is a string, the method throws ArgumentException,\n    &#39; which does not match the filter clause.\n    &#39;\n    &#39; Sub Main also contains code to analyze this method, using \n    &#39; the properties and methods of the MethodBody class.\n    Public Sub MethodBodyExample(ByVal arg As Object)\n\n        &#39; Define some local variables. In addition to these variables,\n        &#39; the local variable list includes the variables scoped to \n        &#39; the catch clauses.\n        Dim var1 As Integer = 42\n        Dim var2 As String = &quot;Forty-two&quot;\n\n        Try\n            &#39; Depending on the input value, throw an ArgumentException or \n            &#39; an ArgumentNullException to test the Catch clauses.\n            &#39;\n            If arg Is Nothing Then\n                Throw New ArgumentNullException(&quot;The argument cannot be Nothing.&quot;)\n            End If\n            If arg.GetType() Is GetType(String) Then\n                Throw New ArgumentException(&quot;The argument cannot be a string.&quot;)\n            End If\n        \n        &#39; The When expression makes this a filter clause. The expression \n        &#39; selects only exceptions that derive from the ArgumentException\n        &#39; class. Other exceptions, including ArgumentException itself, \n        &#39; are not handled by this filter clause.\n        Catch ex As ArgumentException _\n            When ex.GetType().IsSubclassOf(GetType(ArgumentException))\n\n            Console.WriteLine(&quot;Filter clause caught: {0}&quot;, ex.GetType())\n        \n        &#39; This catch clause handles the ArgumentException class, and\n        &#39; any other class derived from Exception.\n        Catch ex As Exception\n            Console.WriteLine(&quot;Ordinary exception-handling clause caught: {0}&quot;, _\n                ex.GetType())\n\n        Finally\n            var1 = 3033\n            var2 = &quot;Another string.&quot;\n        End Try\n    End Sub\nEnd Class\n\n&#39; This code example produces output similar to the following:\n&#39;\n&#39;Ordinary exception-handling clause caught: System.ArgumentException\n&#39;Filter clause caught: System.ArgumentNullException\n&#39;\n&#39;Method: Void MethodBodyExample(System.Object)\n&#39;    Local variables are initialized: True\n&#39;    Maximum number of items on the operand stack: 3\n</code></pre><pre><code class=\"lang-cs\" name=\"MethodBody#5\">    }\n\n    // The Main method contains code to analyze this method, using\n    // the properties and methods of the MethodBody class.\n    public void MethodBodyExample(object arg)\n    {\n        // Define some local variables. In addition to these variables,\n        // the local variable list includes the variables scoped to \n        // the catch clauses.\n        int var1 = 42;\n        string var2 = &quot;Forty-two&quot;;\n\n        try\n        {\n            // Depending on the input value, throw an ArgumentException or \n            // an ArgumentNullException to test the Catch clauses.\n            if (arg == null)\n            {\n                throw new ArgumentNullException(&quot;The argument cannot be null.&quot;);\n            }\n            if (arg.GetType() == typeof(string))\n            {\n                throw new ArgumentException(&quot;The argument cannot be a string.&quot;);\n            }        \n        }\n\n        // There is no Filter clause in this code example. See the Visual \n        // Basic code for an example of a Filter clause.\n\n        // This catch clause handles the ArgumentException class, and\n        // any other class derived from Exception.\n        catch(Exception ex)\n        {\n            Console.WriteLine(&quot;Ordinary exception-handling clause caught: {0}&quot;, \n                ex.GetType());\n        }        \n        finally\n        {\n            var1 = 3033;\n            var2 = &quot;Another string.&quot;;\n        }\n    }\n}\n\n// This code example produces output similar to the following:\n//\n//Method: Void MethodBodyExample(System.Object)\n//    Local variables are initialized: True\n//    Maximum number of items on the operand stack: 2\n</code></pre><pre><code class=\"lang-cpp\" name=\"MethodBody#7\">//Clause\n//    Type of exception: System.ArgumentException\n//       Handler Length: 29\n//       Handler Offset: 78\n//     Try Block Length: 65\n//     Try Block Offset: 13\n//Finally\n//       Handler Length: 13\n//       Handler Offset: 113\n//     Try Block Length: 100\n//     Try Block Offset: 13\n</code></pre><pre><code class=\"lang-vb\" name=\"MethodBody#7\">&#39;\n&#39;Filter\n&#39;        Filter Offset: 0\n&#39;       Handler Length: 19\n&#39;       Handler Offset: 99\n&#39;     Try Block Length: 45\n&#39;     Try Block Offset: 9\n&#39;Clause\n&#39;    Type of exception: System.Exception\n&#39;       Handler Length: 25\n&#39;       Handler Offset: 118\n&#39;     Try Block Length: 45\n&#39;     Try Block Offset: 9\n&#39;Finally\n&#39;       Handler Length: 13\n&#39;       Handler Offset: 153\n&#39;     Try Block Length: 144\n&#39;     Try Block Offset: 9\n</code></pre><pre><code class=\"lang-cs\" name=\"MethodBody#7\">//\n//Clause\n//    Type of exception: System.Exception\n//       Handler Length: 21\n//       Handler Offset: 70\n//     Try Block Length: 61\n//     Try Block Offset: 9\n//Finally\n//       Handler Length: 14\n//       Handler Offset: 94\n//     Try Block Length: 85\n//     Try Block Offset: 9\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>To examine the exception-handling clauses in a method, obtain a <a class=\"xref\" href=\"system.reflection.methodinfo\" data-linktype=\"relative-path\">MethodInfo</a> object and call the <a class=\"xref\" href=\"system.reflection.methodbase#System_Reflection_MethodBase_GetMethodBody_\" data-linktype=\"relative-path\">GetMethodBody</a> method to obtain the method body. Use the <a class=\"xref\" href=\"system.reflection.methodbody#System_Reflection_MethodBody_ExceptionHandlingClauses_\" data-linktype=\"relative-path\">ExceptionHandlingClauses</a> property to obtain a list of <a class=\"xref\" href=\"system.reflection.exceptionhandlingclause\" data-linktype=\"relative-path\">ExceptionHandlingClause</a> objects.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially &quot;Partition II: Metadata Definition and Semantics&quot; and &quot;Partition III: CIL Instruction Set&quot;. The documentation is available online; see <a href=\"http://go.microsoft.com/fwlink/?LinkID=99212\" data-linktype=\"external\">ECMA C# and Common Language Infrastructure Standards</a> on MSDN and <a href=\"http://go.microsoft.com/fwlink/?LinkID=65552\" data-linktype=\"external\">Standard ECMA-335 - Common Language Infrastructure (CLI)</a> on the Ecma International Web site.</p>\n</div>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Reflection_ExceptionHandlingClauseOptions_Clause\">\r\n      \t\t\t<span class=\"lang-csharp\">Clause</span>\r\n      \t</td>\r\n      \t<td><p>The clause accepts all exceptions that derive from a specified type.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_ExceptionHandlingClauseOptions_Fault\">\r\n      \t\t\t<span class=\"lang-csharp\">Fault</span>\r\n      \t</td>\r\n      \t<td><p>The clause is executed if an exception occurs, but not on completion of normal control flow.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_ExceptionHandlingClauseOptions_Filter\">\r\n      \t\t\t<span class=\"lang-csharp\">Filter</span>\r\n      \t</td>\r\n      \t<td><p>The clause contains user-specified instructions that determine whether the exception should be ignored (that is, whether normal execution should resume), be handled by the associated handler, or be passed on to the next clause.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_ExceptionHandlingClauseOptions_Finally\">\r\n      \t\t\t<span class=\"lang-csharp\">Finally</span>\r\n      \t</td>\r\n      \t<td><p>The clause is executed whenever the try block exits, whether through normal control flow or because of an unhandled exception.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Reflection.ExceptionHandlingClauseOptions.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ExceptionHandlingClauseOptions\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ExceptionHandlingClauseOptions.Clause\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ExceptionHandlingClauseOptions.Fault\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ExceptionHandlingClauseOptions.Filter\">\r\n<meta name=\"APIName\" content=\"System.Reflection.ExceptionHandlingClauseOptions.Finally\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 05:47 AM\">\r\n<meta name=\"document_id\" content=\"454fa79b-4b34-62f0-2880-c96014fdde86\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Identifies kinds of exception-handling clauses.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.reflection/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.ExceptionHandlingClauseOptions\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Reflection.ExceptionHandlingClauseOptions.yml","open_to_public_contributors":false,"api_name":["System.Reflection.ExceptionHandlingClauseOptions","System.Reflection.ExceptionHandlingClauseOptions.Clause","System.Reflection.ExceptionHandlingClauseOptions.Fault","System.Reflection.ExceptionHandlingClauseOptions.Filter","System.Reflection.ExceptionHandlingClauseOptions.Finally"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.ExceptionHandlingClauseOptions","System::Reflection::ExceptionHandlingClauseOptions","System.Reflection.ExceptionHandlingClauseOptions.Clause","System::Reflection::ExceptionHandlingClauseOptions::Clause","System.Reflection.ExceptionHandlingClauseOptions.Fault","System::Reflection::ExceptionHandlingClauseOptions::Fault","System.Reflection.ExceptionHandlingClauseOptions.Filter","System::Reflection::ExceptionHandlingClauseOptions::Filter","System.Reflection.ExceptionHandlingClauseOptions.Finally","System::Reflection::ExceptionHandlingClauseOptions::Finally"],"dev_langs":["csharp"],"updated_at":"2017-03-31 05:47 AM","document_id":"454fa79b-4b34-62f0-2880-c96014fdde86","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Reflection/ExceptionHandlingClauseOptions.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ExceptionHandlingClauseOptions enum | Microsoft Docs","_op_ogTitle":"ExceptionHandlingClauseOptions enum","description":"Identifies kinds of exception-handling clauses.\n","toc_asset_id":"api/_splitted/System.Reflection/toc.json","toc_rel":"_splitted/System.Reflection/toc.json","source_url":"","ms.assetid":"System.Reflection.ExceptionHandlingClauseOptions","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.exceptionhandlingclauseoptions","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.exceptionhandlingclauseoptions","fileRelativePath":"api/System.Reflection.ExceptionHandlingClauseOptions.html"},"themesRelativePathToOutputRoot":"_themes/"}