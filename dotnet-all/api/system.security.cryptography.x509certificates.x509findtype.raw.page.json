{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">X509FindType</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies the type of value the <span class=\"xref\">stem.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find*</span> method searches for.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public enum X509FindType</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">System.Enum</a></span></div><span class=\"lang-csharp\">X509FindType</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example opens the current user&#39;s personal certificate store, finds only valid certificates, allows the user to select a certificate, and then writes certificate information to the console. The output depends on the certificate you select.  </p>\n<pre><code class=\"lang-vb\" name=\"certselect#1\">Imports System\nImports System.Security.Cryptography\nImports System.Security.Permissions\nImports System.IO\nImports System.Security.Cryptography.X509Certificates\n\nClass CertSelect\n\n    Shared Sub Main()\n\n        Dim store As New X509Store(&quot;MY&quot;, StoreLocation.CurrentUser)\n        store.Open(OpenFlags.ReadOnly Or OpenFlags.OpenExistingOnly)\n\n        Dim collection As X509Certificate2Collection = CType(store.Certificates, X509Certificate2Collection)\n        Dim fcollection As X509Certificate2Collection = CType(collection.Find(X509FindType.FindByTimeValid, DateTime.Now, False), X509Certificate2Collection)\n        Dim scollection As X509Certificate2Collection = X509Certificate2UI.SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;, &quot;Select a certificate from the following list to get information on that certificate&quot;, X509SelectionFlag.MultiSelection)\n        Console.WriteLine(&quot;Number of certificates: {0}{1}&quot;, scollection.Count, Environment.NewLine)\n         \n        For Each x509 As X509Certificate2 In scollection\n            Try\n                Dim rawdata As Byte() = x509.RawData\n                Console.WriteLine(&quot;Content Type: {0}{1}&quot;, X509Certificate2.GetCertContentType(rawdata), Environment.NewLine)\n                Console.WriteLine(&quot;Friendly Name: {0}{1}&quot;, x509.FriendlyName, Environment.NewLine)\n                Console.WriteLine(&quot;Certificate Verified?: {0}{1}&quot;, x509.Verify(), Environment.NewLine)\n                Console.WriteLine(&quot;Simple Name: {0}{1}&quot;, x509.GetNameInfo(X509NameType.SimpleName, True), Environment.NewLine)\n                Console.WriteLine(&quot;Signature Algorithm: {0}{1}&quot;, x509.SignatureAlgorithm.FriendlyName, Environment.NewLine)\n                Console.WriteLine(&quot;Private Key: {0}{1}&quot;, x509.PrivateKey.ToXmlString(False), Environment.NewLine)\n                Console.WriteLine(&quot;Public Key: {0}{1}&quot;, x509.PublicKey.Key.ToXmlString(False), Environment.NewLine)\n                Console.WriteLine(&quot;Certificate Archived?: {0}{1}&quot;, x509.Archived, Environment.NewLine)\n                Console.WriteLine(&quot;Length of Raw Data: {0}{1}&quot;, x509.RawData.Length, Environment.NewLine)\n                X509Certificate2UI.DisplayCertificate(x509)\n                x509.Reset()         \n             Catch cExcept As CryptographicException\n                 Console.WriteLine(&quot;Information could not be written out for this certificate.&quot;)\n             End Try\n        Next x509\n\n        store.Close()\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"certselect#1\">using System;\nusing System.Security.Cryptography;\nusing System.Security.Permissions;\nusing System.IO;\nusing System.Security.Cryptography.X509Certificates;\n\nclass CertSelect\n{\n    static void Main()\n    {\n        X509Store store = new X509Store(&quot;MY&quot;,StoreLocation.CurrentUser);\n        store.Open(OpenFlags.ReadOnly | OpenFlags.OpenExistingOnly);\n\n        X509Certificate2Collection collection = (X509Certificate2Collection)store.Certificates;\n        X509Certificate2Collection fcollection = (X509Certificate2Collection)collection.Find(X509FindType.FindByTimeValid,DateTime.Now,false);\n        X509Certificate2Collection scollection = X509Certificate2UI.SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;,&quot;Select a certificate from the following list to get information on that certificate&quot;,X509SelectionFlag.MultiSelection);\n        Console.WriteLine(&quot;Number of certificates: {0}{1}&quot;,scollection.Count,Environment.NewLine);\n\n        foreach (X509Certificate2 x509 in scollection)\n        {\n            try\n            {\n                byte[] rawdata = x509.RawData;\n                Console.WriteLine(&quot;Content Type: {0}{1}&quot;,X509Certificate2.GetCertContentType(rawdata),Environment.NewLine);\n                Console.WriteLine(&quot;Friendly Name: {0}{1}&quot;,x509.FriendlyName,Environment.NewLine);\n                Console.WriteLine(&quot;Certificate Verified?: {0}{1}&quot;,x509.Verify(),Environment.NewLine);\n                Console.WriteLine(&quot;Simple Name: {0}{1}&quot;,x509.GetNameInfo(X509NameType.SimpleName,true),Environment.NewLine);\n                Console.WriteLine(&quot;Signature Algorithm: {0}{1}&quot;,x509.SignatureAlgorithm.FriendlyName,Environment.NewLine);\n                Console.WriteLine(&quot;Private Key: {0}{1}&quot;,x509.PrivateKey.ToXmlString(false),Environment.NewLine);\n                Console.WriteLine(&quot;Public Key: {0}{1}&quot;,x509.PublicKey.Key.ToXmlString(false),Environment.NewLine);\n                Console.WriteLine(&quot;Certificate Archived?: {0}{1}&quot;,x509.Archived,Environment.NewLine);\n                Console.WriteLine(&quot;Length of Raw Data: {0}{1}&quot;,x509.RawData.Length,Environment.NewLine);\n                X509Certificate2UI.DisplayCertificate(x509);\n                x509.Reset();\n            }\n            catch (CryptographicException)\n            {\n                Console.WriteLine(&quot;Information could not be written out for this certificate.&quot;);\n            }\n        }\n        store.Close();\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"certselect#1\">#using &lt;System.dll&gt;\n#using &lt;System.Security.dll&gt;\n\nusing namespace System;\nusing namespace System::Security::Cryptography;\nusing namespace System::Security::Permissions;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography::X509Certificates;\nint main()\n{\n   try\n   {\n      X509Store ^ store = gcnew X509Store( &quot;MY&quot;,StoreLocation::CurrentUser );\n      store-&gt;Open( static_cast&lt;OpenFlags&gt;(OpenFlags::ReadOnly | OpenFlags::OpenExistingOnly) );\n      X509Certificate2Collection ^ collection = dynamic_cast&lt;X509Certificate2Collection^&gt;(store-&gt;Certificates);\n      X509Certificate2Collection ^ fcollection = dynamic_cast&lt;X509Certificate2Collection^&gt;(collection-&gt;Find( X509FindType::FindByTimeValid, DateTime::Now, false ));\n      X509Certificate2Collection ^ scollection = X509Certificate2UI::SelectFromCollection(fcollection, &quot;Test Certificate Select&quot;,&quot;Select a certificate from the following list to get information on that certificate&quot;,X509SelectionFlag::MultiSelection);\n      Console::WriteLine( &quot;Number of certificates: {0}{1}&quot;, scollection-&gt;Count, Environment::NewLine );\n      System::Collections::IEnumerator^ myEnum = scollection-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         X509Certificate2 ^ x509 = safe_cast&lt;X509Certificate2 ^&gt;(myEnum-&gt;Current);\n         array&lt;Byte&gt;^rawdata = x509-&gt;RawData;\n         Console::WriteLine( &quot;Content Type: {0}{1}&quot;, X509Certificate2::GetCertContentType( rawdata ), Environment::NewLine );\n         Console::WriteLine( &quot;Friendly Name: {0}{1}&quot;, x509-&gt;FriendlyName, Environment::NewLine );\n         Console::WriteLine( &quot;Certificate Verified?: {0}{1}&quot;, x509-&gt;Verify(), Environment::NewLine );\n         Console::WriteLine( &quot;Simple Name: {0}{1}&quot;, x509-&gt;GetNameInfo( X509NameType::SimpleName, true ), Environment::NewLine );\n         Console::WriteLine( &quot;Signature Algorithm: {0}{1}&quot;, x509-&gt;SignatureAlgorithm-&gt;FriendlyName, Environment::NewLine );\n         Console::WriteLine( &quot;Private Key: {0}{1}&quot;, x509-&gt;PrivateKey-&gt;ToXmlString( false ), Environment::NewLine );\n         Console::WriteLine( &quot;Public Key: {0}{1}&quot;, x509-&gt;PublicKey-&gt;Key-&gt;ToXmlString( false ), Environment::NewLine );\n         Console::WriteLine( &quot;Certificate Archived?: {0}{1}&quot;, x509-&gt;Archived, Environment::NewLine );\n         Console::WriteLine( &quot;Length of Raw Data: {0}{1}&quot;, x509-&gt;RawData-&gt;Length, Environment::NewLine );\n         x509-&gt;Reset();\n      }\n      store-&gt;Close();\n   }\n   catch ( CryptographicException^ ) \n   {\n      Console::WriteLine( &quot;Information could not be written out for this certificate.&quot; );\n   }\n\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>X509FindType identifies the type of value provided in the <code>findValue</code> parameter for the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2collection#System_Security_Cryptography_X509Certificates_X509Certificate2Collection_Find_\" data-linktype=\"relative-path\">Find</a> method. You can use X509FindType to search an <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509certificate2\" data-linktype=\"relative-path\">X509Certificate2</a> collection by subject name, thumbprint, serial number, valid date range, or other value.  </p>\n<p> You can use a combination of <code>FindByTime</code> value types to find certificates that are valid in a given time range. The union of certificates returned using FindByTimeValid, FindByTimeNotYetValid, and FindByTimeExpired for a given time represents all certificates in the queried collection.</p>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Security_Cryptography_X509Certificates_X509FindType_FindByApplicationPolicy\">\r\n      \t\t\t<span class=\"lang-csharp\">FindByApplicationPolicy</span>\r\n      \t</td>\r\n      \t<td><p>The <code>findValue</code> parameter for the <span class=\"xref\">stem.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find*</span> method must be a string representing either the application policy friendly name or the object identifier (OID, or <a class=\"xref\" href=\"system.security.cryptography.oid\" data-linktype=\"relative-path\">Oid</a>) of the certificate. For example, &quot;Encrypting File System&quot; or &quot;1.3.6.1.4.1.311.10.3.4&quot; can be used. For an application that will be localized, the OID value must be used, because the friendly name is localized.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Cryptography_X509Certificates_X509FindType_FindByCertificatePolicy\">\r\n      \t\t\t<span class=\"lang-csharp\">FindByCertificatePolicy</span>\r\n      \t</td>\r\n      \t<td><p>The <code>findValue</code> parameter for the <span class=\"xref\">stem.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find*</span> method must be a string representing either the friendly name or the object identifier (OID, or <a class=\"xref\" href=\"system.security.cryptography.oid\" data-linktype=\"relative-path\">Oid</a>) of the certificate policy. The best practice is to use the OID, such as &quot;1.3.6.1.4.1.311.10.3.4&quot;. For an application that will be localized, the OID must be used, because the friendly name is localized.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Cryptography_X509Certificates_X509FindType_FindByExtension\">\r\n      \t\t\t<span class=\"lang-csharp\">FindByExtension</span>\r\n      \t</td>\r\n      \t<td><p>The <code>findValue</code> parameter for the <span class=\"xref\">stem.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find*</span> method must be a string describing the extension to find. The object identifier (OID) is most commonly used to direct the <span class=\"xref\">stem.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find*</span> method to search for all certificates that have an extension matching that OID value.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Cryptography_X509Certificates_X509FindType_FindByIssuerDistinguishedName\">\r\n      \t\t\t<span class=\"lang-csharp\">FindByIssuerDistinguishedName</span>\r\n      \t</td>\r\n      \t<td><p>The <code>findValue</code> parameter for the <span class=\"xref\">stem.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find*</span> method must be a string representing the issuer distinguished name of the certificate. This is a more specific search than that provided by the FindByIssuerName enumeration value. Using the FindByIssuerDistinguishedName value, the <span class=\"xref\">stem.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find*</span> method performs a case-insensitive string comparison for the entire distinguished name. Searching by issuer name is a less precise search.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Cryptography_X509Certificates_X509FindType_FindByIssuerName\">\r\n      \t\t\t<span class=\"lang-csharp\">FindByIssuerName</span>\r\n      \t</td>\r\n      \t<td><p>The <code>findValue</code> parameter for the <span class=\"xref\">stem.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find*</span> method must be a string representing the issuer name of the certificate. This is a less specific search than that provided by the FindByIssuerDistinguishedName enumeration value. Using the FindByIssuerName value, the <span class=\"xref\">stem.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find*</span> method performs a case-insensitive string comparison using the supplied value. For example, if you pass &quot;MyCA&quot; to the <span class=\"xref\">stem.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find*</span> method, it will find all certificates with the issuer name containing that string, regardless of other issuer values.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Cryptography_X509Certificates_X509FindType_FindByKeyUsage\">\r\n      \t\t\t<span class=\"lang-csharp\">FindByKeyUsage</span>\r\n      \t</td>\r\n      \t<td><p>The <code>findValue</code> parameter for the <span class=\"xref\">stem.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find*</span> method must be either a string representing the key usage or an integer representing a bit mask containing all the requested key usages. For the string value, only one key usage at a time can be specified, but the <span class=\"xref\">stem.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find*</span> method can be used in a cascading sequence to get the intersection of the requested usages. For example, the <code>findValue</code> parameter can be set to &quot;KeyEncipherment&quot; or an integer (0x30 indicates &quot;KeyEncipherment&quot; and &quot;DataEncipherment&quot;). Values of the <a class=\"xref\" href=\"system.security.cryptography.x509certificates.x509keyusageflags\" data-linktype=\"relative-path\">X509KeyUsageFlags</a> enumeration can also be used.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Cryptography_X509Certificates_X509FindType_FindBySerialNumber\">\r\n      \t\t\t<span class=\"lang-csharp\">FindBySerialNumber</span>\r\n      \t</td>\r\n      \t<td><p>The <code>findValue</code> parameter for the <span class=\"xref\">stem.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find*</span> method must be a string that represents the serial number of the certificate as displayed by the certificate dialog box, but without the spaces, or as returned by the <span class=\"xref\">stem.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumberString*</span> method.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Cryptography_X509Certificates_X509FindType_FindBySubjectDistinguishedName\">\r\n      \t\t\t<span class=\"lang-csharp\">FindBySubjectDistinguishedName</span>\r\n      \t</td>\r\n      \t<td><p>The <code>findValue</code> parameter for the <span class=\"xref\">stem.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find*</span> method must be a string representing the subject distinguished name of the certificate. This is a more specific search than that provided by the FindBySubjectName enumeration value. Using the FindBySubjectDistinguishedName value, the <span class=\"xref\">stem.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find*</span> method performs a case-insensitive string comparison for the entire distinguished name. Searching by subject name is a less precise search.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Cryptography_X509Certificates_X509FindType_FindBySubjectKeyIdentifier\">\r\n      \t\t\t<span class=\"lang-csharp\">FindBySubjectKeyIdentifier</span>\r\n      \t</td>\r\n      \t<td><p>The <code>findValue</code> parameter for the <span class=\"xref\">stem.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find*</span> method must be a string representing the subject key identifier in hexadecimal, such as &quot;F3E815D45E83B8477B9284113C64EF208E897112&quot;, as displayed in the UI.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Cryptography_X509Certificates_X509FindType_FindBySubjectName\">\r\n      \t\t\t<span class=\"lang-csharp\">FindBySubjectName</span>\r\n      \t</td>\r\n      \t<td><p>The <code>findValue</code> parameter for the <span class=\"xref\">stem.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find*</span> method must be a string representing the subject name of the certificate. This is a less specific search than that provided by the FindBySubjectDistinguishedName enumeration value. Using the FindBySubjectName value, the <span class=\"xref\">stem.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find*</span> method performs a case-insensitive string comparison using the supplied value. For example, if you pass &quot;MyCert&quot; to the <span class=\"xref\">stem.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find*</span> method, it will find all certificates with the subject name containing that string, regardless of other subject values. Searching by distinguished name is a more precise search.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Cryptography_X509Certificates_X509FindType_FindByTemplateName\">\r\n      \t\t\t<span class=\"lang-csharp\">FindByTemplateName</span>\r\n      \t</td>\r\n      \t<td><p>The <code>findValue</code> parameter for the <span class=\"xref\">stem.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find*</span> method must be a string representing the template name of the certificate, such as &quot;ClientAuth&quot;. A template name is an X509 version 3 extension that specifies the uses of the certificate.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Cryptography_X509Certificates_X509FindType_FindByThumbprint\">\r\n      \t\t\t<span class=\"lang-csharp\">FindByThumbprint</span>\r\n      \t</td>\r\n      \t<td><p>The <code>findValue</code> parameter for the <span class=\"xref\">stem.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find*</span> method must be a string representing the thumbprint of the certificate.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Cryptography_X509Certificates_X509FindType_FindByTimeExpired\">\r\n      \t\t\t<span class=\"lang-csharp\">FindByTimeExpired</span>\r\n      \t</td>\r\n      \t<td><p>The <code>findValue</code> parameter for the <span class=\"xref\">stem.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find*</span> method must be a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value in local time. For example, you can find all the certificates that will be valid until the end of the year by eliminating the results of a <span class=\"xref\">stem.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find*</span> operation for FindByTimeExpired of the last day of the year from the results of a <span class=\"xref\">stem.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find*</span> operation for <span class=\"xref\">stem.DateTime.Now*</span>.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Cryptography_X509Certificates_X509FindType_FindByTimeNotYetValid\">\r\n      \t\t\t<span class=\"lang-csharp\">FindByTimeNotYetValid</span>\r\n      \t</td>\r\n      \t<td><p>The <code>findValue</code> parameter for the <span class=\"xref\">stem.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find*</span> method must be a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value in local time. The value does not have to be in the future. For example, you can use FindByTimeNotYetValid to find certificates that became valid in the current year by taking the intersection of the results of a <span class=\"xref\">stem.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find*</span> operation for FindByTimeNotYetValid for the last day of last year with the results of a <span class=\"xref\">stem.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find*</span> operation for FindByTimeValid of <span class=\"xref\">stem.DateTime.Now*</span>.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Security_Cryptography_X509Certificates_X509FindType_FindByTimeValid\">\r\n      \t\t\t<span class=\"lang-csharp\">FindByTimeValid</span>\r\n      \t</td>\r\n      \t<td><p>The <code>findValue</code> parameter for the <span class=\"xref\">stem.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find*</span> method must be a <a class=\"xref\" href=\"system.datetime\" data-linktype=\"relative-path\">DateTime</a> value in local time. You can use <span class=\"xref\">stem.DateTime.Now*</span> to find all the currently valid certificates.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.X509Certificates.X509FindType.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509FindType\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509FindType.FindByApplicationPolicy\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509FindType.FindByCertificatePolicy\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509FindType.FindByExtension\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509FindType.FindByIssuerDistinguishedName\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509FindType.FindByIssuerName\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509FindType.FindByKeyUsage\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509FindType.FindBySerialNumber\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectDistinguishedName\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectKeyIdentifier\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509FindType.FindByTemplateName\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509FindType.FindByThumbprint\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeExpired\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeNotYetValid\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeValid\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-24 01:41 AM\">\r\n<meta name=\"document_id\" content=\"f17f3074-0f42-168b-1412-c15f627f16c0\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies the type of value the  method searches for.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.security.cryptography.x509certificates/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.X509Certificates.X509FindType\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.X509Certificates.X509FindType.yml","open_to_public_contributors":false,"api_name":["System.Security.Cryptography.X509Certificates.X509FindType","System.Security.Cryptography.X509Certificates.X509FindType.FindByApplicationPolicy","System.Security.Cryptography.X509Certificates.X509FindType.FindByCertificatePolicy","System.Security.Cryptography.X509Certificates.X509FindType.FindByExtension","System.Security.Cryptography.X509Certificates.X509FindType.FindByIssuerDistinguishedName","System.Security.Cryptography.X509Certificates.X509FindType.FindByIssuerName","System.Security.Cryptography.X509Certificates.X509FindType.FindByKeyUsage","System.Security.Cryptography.X509Certificates.X509FindType.FindBySerialNumber","System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectDistinguishedName","System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectKeyIdentifier","System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName","System.Security.Cryptography.X509Certificates.X509FindType.FindByTemplateName","System.Security.Cryptography.X509Certificates.X509FindType.FindByThumbprint","System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeExpired","System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeNotYetValid","System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeValid"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.X509Certificates.X509FindType","System::Security::Cryptography::X509Certificates::X509FindType","System.Security.Cryptography.X509Certificates.X509FindType.FindByApplicationPolicy","System::Security::Cryptography::X509Certificates::X509FindType::FindByApplicationPolicy","System.Security.Cryptography.X509Certificates.X509FindType.FindByCertificatePolicy","System::Security::Cryptography::X509Certificates::X509FindType::FindByCertificatePolicy","System.Security.Cryptography.X509Certificates.X509FindType.FindByExtension","System::Security::Cryptography::X509Certificates::X509FindType::FindByExtension","System.Security.Cryptography.X509Certificates.X509FindType.FindByIssuerDistinguishedName","System::Security::Cryptography::X509Certificates::X509FindType::FindByIssuerDistinguishedName","System.Security.Cryptography.X509Certificates.X509FindType.FindByIssuerName","System::Security::Cryptography::X509Certificates::X509FindType::FindByIssuerName","System.Security.Cryptography.X509Certificates.X509FindType.FindByKeyUsage","System::Security::Cryptography::X509Certificates::X509FindType::FindByKeyUsage","System.Security.Cryptography.X509Certificates.X509FindType.FindBySerialNumber","System::Security::Cryptography::X509Certificates::X509FindType::FindBySerialNumber","System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectDistinguishedName","System::Security::Cryptography::X509Certificates::X509FindType::FindBySubjectDistinguishedName","System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectKeyIdentifier","System::Security::Cryptography::X509Certificates::X509FindType::FindBySubjectKeyIdentifier","System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName","System::Security::Cryptography::X509Certificates::X509FindType::FindBySubjectName","System.Security.Cryptography.X509Certificates.X509FindType.FindByTemplateName","System::Security::Cryptography::X509Certificates::X509FindType::FindByTemplateName","System.Security.Cryptography.X509Certificates.X509FindType.FindByThumbprint","System::Security::Cryptography::X509Certificates::X509FindType::FindByThumbprint","System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeExpired","System::Security::Cryptography::X509Certificates::X509FindType::FindByTimeExpired","System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeNotYetValid","System::Security::Cryptography::X509Certificates::X509FindType::FindByTimeNotYetValid","System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeValid","System::Security::Cryptography::X509Certificates::X509FindType::FindByTimeValid"],"dev_langs":["csharp"],"updated_at":"2017-03-24 01:41 AM","document_id":"f17f3074-0f42-168b-1412-c15f627f16c0","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography.X509Certificates/X509FindType.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"X509FindType enum | Microsoft Docs","_op_ogTitle":"X509FindType enum","description":"Specifies the type of value the  method searches for.\n","toc_asset_id":"api/_splitted/System.Security.Cryptography.X509Certificates/toc.json","toc_rel":"_splitted/System.Security.Cryptography.X509Certificates/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.X509Certificates.X509FindType","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.x509certificates.x509findtype","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.x509certificates.x509findtype","fileRelativePath":"api/System.Security.Cryptography.X509Certificates.X509FindType.html"},"themesRelativePathToOutputRoot":"_themes/"}