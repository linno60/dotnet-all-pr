{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ServiceContainer</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides a simple implementation of the <a class=\"xref\" href=\"system.componentmodel.design.iservicecontainer\" data-linktype=\"relative-path\">IServiceContainer</a> interface. This class cannot be inherited.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class ServiceContainer : IDisposable, IServiceProvider, System.ComponentModel.Design.IServiceContainer</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">ServiceContainer</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example program demonstrates service chaining and the resultant service availability of a chain of linked ServiceContainer objects. The program provides a user interface that allows you to see the availability of services within a chain of linked services, and uses the <a class=\"xref\" href=\"system.componentmodel.design.servicecontainer#System_ComponentModel_Design_ServiceContainer_AddService_\" data-linktype=\"relative-path\">AddService</a>, <a class=\"xref\" href=\"system.componentmodel.design.servicecontainer#System_ComponentModel_Design_ServiceContainer_GetService_\" data-linktype=\"relative-path\">GetService</a>, and <a class=\"xref\" href=\"system.componentmodel.design.servicecontainer#System_ComponentModel_Design_ServiceContainer_RemoveService_\" data-linktype=\"relative-path\">RemoveService</a> methods as well as linked service containers.  </p>\n<pre><code class=\"lang-cpp\" name=\"ServiceArchitectureExample#1\">#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::Drawing;\nusing namespace System::Collections;\nusing namespace System::ComponentModel;\nusing namespace System::ComponentModel::Design;\nusing namespace System::Windows::Forms;\nusing namespace System::Windows::Forms::Design;\n\nref class ServiceObjectControl;\n\n// Example form provides UI for demonstrating service sharing behavior\n// of a network of IServiceContainer/IServiceProvider controls.\npublic ref class ServiceForm: public System::Windows::Forms::Form\n{\nprivate:\n\n   // Root service container control for tree.\n   ServiceObjectControl^ root;\n\n   // Button for clearing any provided services and resetting tree states.\n   System::Windows::Forms::Button^ reset_button;\n\n   // Color list used to color code controls.\n   array&lt;Color&gt;^colorkeys;\n\n   // Strings used to reflect text service.\n   array&lt;String^&gt;^keystrings;\n\npublic:\n   ServiceForm()\n   {\n      InitializeComponent();\n      CreateServiceControlTree();\n      colorkeys = gcnew array&lt;Color&gt;(6);\n      colorkeys[ 0 ] = Color::Beige;\n      colorkeys[ 1 ] = Color::SeaShell;\n      colorkeys[ 2 ] = Color::LightGreen;\n      colorkeys[ 3 ] = Color::LightBlue;\n      colorkeys[ 4 ] = Color::Khaki;\n      colorkeys[ 5 ] = Color::CadetBlue;\n      array&lt;String^&gt;^stringstemp = {&quot;No service use&quot;,&quot;Service not accessible&quot;,&quot;Service provided&quot;,\n            &quot;Service obtained&quot;,&quot;Service accessible&quot;,&quot;No further access&quot;};\n      keystrings = stringstemp;\n   }\n\nprivate:\n   void CreateServiceControlTree();\n   void InitializeComponent();\n\ninternal:\n   void ResetServiceTree( Object^ sender, EventArgs^ e );\npublic:\n   void UpdateServiceCoverage();\n\nprotected:\n   virtual void OnPaint( System::Windows::Forms::PaintEventArgs^ e ) override;\n};\n\n// Example service type contains a text string, sufficient\n// to demonstrate service sharing.\npublic ref class TextService\n{\npublic:\n   String^ text;\n   TextService()\n      : text( String::Empty )\n   {}\n\n   TextService( String^ text )\n   {\n      this-&gt;text = text;\n   }\n};\n\npublic enum class TextServiceState\n{\n   ServiceNotObtained, ServiceObtained, ServiceProvided, ServiceNotFound\n};\n\n// Example Form for entering a string.\nprivate ref class StringInputDialog: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::Button^ ok_button;\n   System::Windows::Forms::Button^ cancel_button;\n\npublic:\n   System::Windows::Forms::TextBox^ inputTextBox;\n   StringInputDialog( String^ text )\n   {\n      InitializeComponent();\n      inputTextBox-&gt;Text = text;\n   }\n\nprivate:\n   void InitializeComponent()\n   {\n      this-&gt;ok_button = gcnew System::Windows::Forms::Button;\n      this-&gt;cancel_button = gcnew System::Windows::Forms::Button;\n      this-&gt;inputTextBox = gcnew System::Windows::Forms::TextBox;\n      this-&gt;SuspendLayout();\n      this-&gt;ok_button-&gt;Anchor = static_cast&lt;AnchorStyles&gt;(System::Windows::Forms::AnchorStyles::Bottom |\n            System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;ok_button-&gt;Location = System::Drawing::Point( 180, 43 );\n      this-&gt;ok_button-&gt;Name = &quot;ok_button&quot;;\n      this-&gt;ok_button-&gt;TabIndex = 1;\n      this-&gt;ok_button-&gt;Text = &quot;OK&quot;;\n      this-&gt;ok_button-&gt;DialogResult = System::Windows::Forms::DialogResult::OK;\n      this-&gt;cancel_button-&gt;Anchor = static_cast&lt;AnchorStyles&gt;(System::Windows::Forms::AnchorStyles::Bottom |\n            System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;cancel_button-&gt;Location = System::Drawing::Point( 260, 43 );\n      this-&gt;cancel_button-&gt;Name = &quot;cancel_button&quot;;\n      this-&gt;cancel_button-&gt;TabIndex = 2;\n      this-&gt;cancel_button-&gt;Text = &quot;Cancel&quot;;\n      this-&gt;cancel_button-&gt;DialogResult = System::Windows::Forms::DialogResult::Cancel;\n      this-&gt;inputTextBox-&gt;Location = System::Drawing::Point( 6, 9 );\n      this-&gt;inputTextBox-&gt;Name = &quot;inputTextBox&quot;;\n      this-&gt;inputTextBox-&gt;Size = System::Drawing::Size( 327, 20 );\n      this-&gt;inputTextBox-&gt;TabIndex = 0;\n      this-&gt;inputTextBox-&gt;Text = &quot;&quot;;\n      this-&gt;inputTextBox-&gt;Anchor = static_cast&lt;AnchorStyles&gt;((System::Windows::Forms::AnchorStyles::Top |\n            System::Windows::Forms::AnchorStyles::Left) | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;ClientSize = System::Drawing::Size( 342, 73 );\n      array&lt;System::Windows::Forms::Control^&gt;^temp0 = {this-&gt;inputTextBox,this-&gt;cancel_button,this-&gt;ok_button};\n      this-&gt;Controls-&gt;AddRange( temp0 );\n      this-&gt;MinimumSize = System::Drawing::Size( 350, 100 );\n      this-&gt;Name = &quot;StringInputDialog&quot;;\n      this-&gt;Text = &quot;Text Service Provide String Dialog&quot;;\n      this-&gt;ResumeLayout( false );\n   }\n};\n\n\n// An example user control that uses ServiceContainer to add, remove,\n// and access services through a linkable service container network.\npublic ref class ServiceObjectControl: public System::Windows::Forms::UserControl\n{\npublic:\n\n   // This example user control implementation provides a wrapper for\n   // ServiceContainer, supporting a linked service container network.\n   ServiceContainer^ serviceContainer;\n\nprivate:\n\n   // Parent form reference for main program function access.\n   ServiceForm^ parent;\n\npublic:\n\n   // String for label displayed on the control to indicate the\n   // control&#39;s current service-related configuration state.\n   String^ label;\n\nprivate:\n\n   // The current state of the control reflecting whether it has\n   // obtained or provided a text service.\n   TextServiceState state_;\n\npublic:\n\n   property TextServiceState state \n   {\n      TextServiceState get()\n      {\n         return state_;\n      }\n\n      void set( TextServiceState value )\n      {\n         if ( (TextServiceState)value == TextServiceState::ServiceProvided )\n                  this-&gt;BackColor = Color::LightGreen;\n         else\n         if ( (TextServiceState)value == TextServiceState::ServiceNotObtained )\n                  this-&gt;BackColor = Color::White;\n         else\n         if ( (TextServiceState)value == TextServiceState::ServiceObtained )\n                  this-&gt;BackColor = Color::LightBlue;\n         else\n         if ( (TextServiceState)value == TextServiceState::ServiceNotFound )\n                  this-&gt;BackColor = Color::SeaShell;\n\n         state_ = value;\n      }\n   }\n   ServiceObjectControl( ServiceObjectControl^ serviceContainerParent, System::Drawing::Size size,\n         Point location, ServiceForm^ parent )\n   {\n      this-&gt;state_ = TextServiceState::ServiceNotObtained;\n      this-&gt;BackColor = Color::Beige;\n      this-&gt;label = String::Empty;\n      this-&gt;Size = size;\n      this-&gt;Location = location;\n      this-&gt;parent = parent;\n      if ( serviceContainerParent == nullptr )\n            serviceContainer = gcnew ServiceContainer;\n      else\n            serviceContainer = gcnew ServiceContainer( serviceContainerParent-&gt;serviceContainer );\n   }\n\nprotected:\n\n   // Paint method override draws the label string on the control.\n   virtual void OnPaint( System::Windows::Forms::PaintEventArgs^ e ) override\n   {\n      e-&gt;Graphics-&gt;DrawString( label, gcnew System::Drawing::Font( &quot;Arial&quot;,8 ), gcnew SolidBrush( Color::Black ), 5, 5 );\n   }\n\n   // Process mouse-down behavior for click.\n   virtual void OnMouseDown( System::Windows::Forms::MouseEventArgs^ e ) override\n   {\n      if ( e-&gt;Button == ::MouseButtons::Left )\n      {\n         if ( state_ != TextServiceState::ServiceProvided )\n         {\n            // Attempt to update text from service, and set color\n            // state accordingly.\n            TextService^ ts = dynamic_cast&lt;TextService^&gt;(serviceContainer-&gt;GetService( TextService::typeid ));\n            if ( ts != nullptr )\n            {\n               this-&gt;label = ts-&gt;text;\n               state = TextServiceState::ServiceObtained;\n            }\n            else\n            {\n               this-&gt;label = &quot;Service Not Found&quot;;\n               state = TextServiceState::ServiceNotFound;\n            }\n         }\n      }\n\n      if ( e-&gt;Button == ::MouseButtons::Right )\n      {\n         if ( state_ == TextServiceState::ServiceProvided )\n         {\n            // Remove service if the container provided it.\n            if ( serviceContainer-&gt;GetService( TextService::typeid ) != nullptr )\n            {\n               serviceContainer-&gt;RemoveService( TextService::typeid, true );\n               state = TextServiceState::ServiceNotObtained;\n               this-&gt;label = &quot;Service Removed&quot;;\n            }\n         }\n         else\n         {\n            // Obtain string and provide text service.\n            StringInputDialog^ form = gcnew StringInputDialog( &quot;Test String&quot; );\n            form-&gt;StartPosition = FormStartPosition::CenterParent;\n            if ( form-&gt;ShowDialog() == DialogResult::OK )\n            {\n               if ( serviceContainer-&gt;GetService( TextService::typeid ) != nullptr )\n                              serviceContainer-&gt;RemoveService( TextService::typeid, true );\n               parent-&gt;ResetServiceTree( this, gcnew EventArgs );\n               serviceContainer-&gt;AddService( TextService::typeid, gcnew TextService( form-&gt;inputTextBox-&gt;Text ), true );\n               state = TextServiceState::ServiceProvided;\n               this-&gt;label = String::Format( &quot;Provided Text: {0}&quot;, form-&gt;inputTextBox-&gt;Text );\n            }\n         }\n      }\n\n      parent-&gt;UpdateServiceCoverage();\n   }\n\npublic:\n\n   // Method accesses the TextService to test the visibility of the service\n   // from the control, and sets the UI state accordingly.\n   void ReflectServiceVisibility()\n   {\n      if ( state_ == TextServiceState::ServiceObtained )\n      {\n         if ( serviceContainer-&gt;GetService( TextService::typeid ) == nullptr )\n                  this-&gt;BackColor = Color::CadetBlue;\n      }\n      else\n      if ( state_ != TextServiceState::ServiceProvided )\n      {\n         if ( serviceContainer-&gt;GetService( TextService::typeid ) == nullptr )\n         {\n            this-&gt;BackColor = Color::White;\n            return;\n         }\n         \n         // Service available.\n         if ( state_ == TextServiceState::ServiceNotFound )\n                  this-&gt;BackColor = Color::Khaki;\n         else\n         if ( state_ == TextServiceState::ServiceNotObtained &amp;&amp;  !label-&gt;Equals( &quot;Service Removed&quot; ) )\n                  this-&gt;BackColor = Color::Khaki;\n      }\n   }\n};\n\nvoid ServiceForm::CreateServiceControlTree()\n{\n   // Create root service control.\n   ServiceObjectControl^ control1 = gcnew ServiceObjectControl( nullptr,System::Drawing::Size( 300, 40 ),Point(10,80),this );\n   root = control1;\n\n   // Create first tier - pass parent with service object control 1\n   ServiceObjectControl^ control2 = gcnew ServiceObjectControl( control1,System::Drawing::Size( 200, 30 ),Point(50,160),this );\n   ServiceObjectControl^ control3 = gcnew ServiceObjectControl( control1,System::Drawing::Size( 200, 30 ),Point(50,240),this );\n\n   // Create second tier A - pass parent with service object control 2\n   ServiceObjectControl^ control4 = gcnew ServiceObjectControl( control2,System::Drawing::Size( 180, 20 ),Point(300,145),this );\n   ServiceObjectControl^ control5 = gcnew ServiceObjectControl( control2,System::Drawing::Size( 180, 20 ),Point(300,185),this );\n\n   // Create second tier B - pass parent with service object control 3\n   ServiceObjectControl^ control6 = gcnew ServiceObjectControl( control3,System::Drawing::Size( 180, 20 ),Point(300,225),this );\n   ServiceObjectControl^ control7 = gcnew ServiceObjectControl( control3,System::Drawing::Size( 180, 20 ),Point(300,265),this );\n\n   // Add controls.\n   array&lt;Control^&gt;^temp1 = {control1,control2,control3,control4,control5,control6,control7};\n   this-&gt;Controls-&gt;AddRange( temp1 );\n}\n\nvoid ServiceForm::ResetServiceTree( Object^ /*sender*/, EventArgs^ /*e*/ )\n{\n   // Remove the service from the service tree.\n   if ( root-&gt;serviceContainer-&gt;GetService( TextService::typeid ) != nullptr )\n      root-&gt;serviceContainer-&gt;RemoveService( TextService::typeid, true );\n\n   // Set all controls to &quot;not obtained&quot; and clear their labels.\n   for ( int i = 0; i &lt; Controls-&gt;Count; i++ )\n      if (  !Controls[ i ]-&gt;Equals( reset_button ) )\n      {\n         (dynamic_cast&lt;ServiceObjectControl^&gt;(Controls[ i ]))-&gt;state = TextServiceState::ServiceNotObtained;\n         (dynamic_cast&lt;ServiceObjectControl^&gt;(Controls[ i ]))-&gt;label = String::Empty;\n         (dynamic_cast&lt;ServiceObjectControl^&gt;(Controls[ i ]))-&gt;BackColor = Color::Beige;\n      }\n}\n\nvoid ServiceForm::UpdateServiceCoverage()\n{\n   // Have each control set state to reflect service availability.\n   for ( int i = 0; i &lt; Controls-&gt;Count; i++ )\n      if (  !Controls[ i ]-&gt;Equals( reset_button ) )\n            (dynamic_cast&lt;ServiceObjectControl^&gt;(Controls[ i ]))-&gt;ReflectServiceVisibility();\n}\n\nvoid ServiceForm::InitializeComponent()\n{\n   this-&gt;reset_button = gcnew System::Windows::Forms::Button;\n   this-&gt;SuspendLayout();\n\n   //\n   // reset_button\n   //\n   this-&gt;reset_button-&gt;Location = System::Drawing::Point( 392, 88 );\n   this-&gt;reset_button-&gt;Name = &quot;reset_button&quot;;\n   this-&gt;reset_button-&gt;TabIndex = 0;\n   this-&gt;reset_button-&gt;TabStop = false;\n   this-&gt;reset_button-&gt;Text = &quot;Reset&quot;;\n   this-&gt;reset_button-&gt;Click += gcnew System::EventHandler( this, &amp;ServiceForm::ResetServiceTree );\n\n   //\n   // ServiceForm\n   //\n   this-&gt;ClientSize = System::Drawing::Size( 512, 373 );\n   array&lt;System::Windows::Forms::Control^&gt;^temp2 = {this-&gt;reset_button};\n   this-&gt;Controls-&gt;AddRange( temp2 );\n   this-&gt;MinimumSize = System::Drawing::Size( 520, 400 );\n   this-&gt;Name = &quot;ServiceForm&quot;;\n   this-&gt;Text = &quot;Service Container Architecture Example&quot;;\n   this-&gt;ResumeLayout( false );\n}\n\nvoid ServiceForm::OnPaint( System::Windows::Forms::PaintEventArgs^ e )\n{\n   e-&gt;Graphics-&gt;DrawString( &quot;The following tree diagram represents a hierarchy of linked service containers in controls.&quot;,\n         gcnew System::Drawing::Font( &quot;Arial&quot;,9 ), gcnew SolidBrush( Color::Black ), 4, 4 );\n   e-&gt;Graphics-&gt;DrawString( &quot;This example demonstrates the propagation behavior of services through a linked service object tree.&quot;,\n         gcnew System::Drawing::Font( &quot;Arial&quot;,8 ), gcnew SolidBrush( Color::Black ), 4, 26 );\n   e-&gt;Graphics-&gt;DrawString( &quot;Right-click a component to add or replace a text service, or to remove it if the component provided it.&quot;,\n         gcnew System::Drawing::Font( &quot;Arial&quot;,8 ), gcnew SolidBrush( Color::Black ), 4, 38 );\n   e-&gt;Graphics-&gt;DrawString( &quot;Left-click a component to update text from the text service if available.&quot;,\n         gcnew System::Drawing::Font( &quot;Arial&quot;,8 ), gcnew SolidBrush( Color::Black ), 4, 50 );\n\n   // Draw lines to represent tree branches.\n   e-&gt;Graphics-&gt;DrawLine( gcnew Pen( gcnew SolidBrush( Color::Black ),1 ), 20, 125, 20, 258 );\n   e-&gt;Graphics-&gt;DrawLine( gcnew Pen( gcnew SolidBrush( Color::Black ),1 ), 21, 175, 45, 175 );\n   e-&gt;Graphics-&gt;DrawLine( gcnew Pen( gcnew SolidBrush( Color::Black ),1 ), 21, 258, 45, 258 );\n   e-&gt;Graphics-&gt;DrawLine( gcnew Pen( gcnew SolidBrush( Color::Black ),1 ), 255, 175, 285, 175 );\n   e-&gt;Graphics-&gt;DrawLine( gcnew Pen( gcnew SolidBrush( Color::Black ),1 ), 255, 258, 285, 258 );\n   e-&gt;Graphics-&gt;DrawLine( gcnew Pen( gcnew SolidBrush( Color::Black ),1 ), 285, 155, 285, 195 );\n   e-&gt;Graphics-&gt;DrawLine( gcnew Pen( gcnew SolidBrush( Color::Black ),1 ), 285, 238, 285, 278 );\n   e-&gt;Graphics-&gt;DrawLine( gcnew Pen( gcnew SolidBrush( Color::Black ),1 ), 285, 155, 290, 155 );\n   e-&gt;Graphics-&gt;DrawLine( gcnew Pen( gcnew SolidBrush( Color::Black ),1 ), 285, 195, 290, 195 );\n   e-&gt;Graphics-&gt;DrawLine( gcnew Pen( gcnew SolidBrush( Color::Black ),1 ), 285, 238, 290, 238 );\n   e-&gt;Graphics-&gt;DrawLine( gcnew Pen( gcnew SolidBrush( Color::Black ),1 ), 285, 278, 290, 278 );\n\n   // Draw color key.\n   e-&gt;Graphics-&gt;DrawRectangle( gcnew Pen( gcnew SolidBrush( Color::Black ),1 ), 20, 305, 410, 60 );\n   int y = 0;\n   for ( int i = 0; i &lt; 3; i++ )\n   {\n      e-&gt;Graphics-&gt;FillRectangle( gcnew SolidBrush( colorkeys[ y ] ), 25 + (i * 140), 310, 20, 20 );\n      e-&gt;Graphics-&gt;DrawRectangle( gcnew Pen( gcnew SolidBrush( Color::Black ),1 ), 25 + (i * 140), 310, 20, 20 );\n      e-&gt;Graphics-&gt;DrawString( keystrings[ y ], gcnew System::Drawing::Font( &quot;Arial&quot;,8 ), gcnew SolidBrush( Color::Black ),\n            (float)50 + (i * 140), 315 );\n      y++;\n      e-&gt;Graphics-&gt;FillRectangle( gcnew SolidBrush( colorkeys[ y ] ), 25 + (i * 140), 340, 20, 20 );\n      e-&gt;Graphics-&gt;DrawRectangle( gcnew Pen( gcnew SolidBrush( Color::Black ),1 ), 25 + (i * 140), 340, 20, 20 );\n      e-&gt;Graphics-&gt;DrawString( keystrings[ y ], gcnew System::Drawing::Font( &quot;Arial&quot;,8 ), gcnew SolidBrush( Color::Black ),\n            (float)50 + (i * 140), 345 );\n      y++;\n   }\n}\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew ServiceForm );\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"ServiceArchitectureExample#1\">Imports System\nImports System.Drawing\nImports System.Collections\nImports System.ComponentModel\nImports System.ComponentModel.Design\nImports System.Windows.Forms\nImports System.Windows.Forms.Design\n\n&#39; Example form provides UI for demonstrating service sharing behavior \n&#39; of a network of IServiceContainer/IServiceProvider controls.\nPublic Class ServiceForm\n    Inherits System.Windows.Forms.Form\n   \n    &#39; Root service container control for tree.\n    Private root As ServiceObjectControl      \n    \n    &#39; Button for clearing any provided services and resetting tree states.\n    Private WithEvents reset_button As System.Windows.Forms.Button\n\n    &#39; Color list used to color code controls.\n    Private colorkeys() As Color\n\n    &#39; Strings used to reflect text service.\n    Private keystrings() As String          \n   \n   Public Sub New()\n      InitializeComponent()\n      CreateServiceControlTree()\n      colorkeys = New Color() {Color.Beige, Color.SeaShell, Color.LightGreen, Color.LightBlue, Color.Khaki, Color.CadetBlue}\n      keystrings = New String() {&quot;No service use&quot;, &quot;Service not accessible&quot;, &quot;Service provided&quot;, &quot;Service obtained&quot;, &quot;Service accessible&quot;, &quot;No further access&quot;}\n    End Sub\n\n    Private Sub CreateServiceControlTree()\n        &#39; Create root service control.\n        Dim control1 As New ServiceObjectControl(Nothing, New Size(300, 40), New Point(10, 80), Me)\n        root = control1\n        &#39; Create first tier - pass parent with service object control 1\n        Dim control2 As New ServiceObjectControl(control1, New Size(200, 30), New Point(50, 160), Me)\n        Dim control3 As New ServiceObjectControl(control1, New Size(200, 30), New Point(50, 240), Me)\n        &#39; Create second tier A - pass parent with service object control 2\n        Dim control4 As New ServiceObjectControl(control2, New Size(180, 20), New Point(300, 145), Me)\n        Dim control5 As New ServiceObjectControl(control2, New Size(180, 20), New Point(300, 185), Me)\n        &#39; Create second tier B - pass parent with service object control 3\n        Dim control6 As New ServiceObjectControl(control3, New Size(180, 20), New Point(300, 225), Me)\n        Dim control7 As New ServiceObjectControl(control3, New Size(180, 20), New Point(300, 265), Me)\n        &#39; Add controls.\n        Me.Controls.AddRange(New Control() {control1, control2, control3, control4, control5, control6, control7})\n    End Sub\n\n    Friend Sub ResetServiceTree(ByVal sender As Object, ByVal e As EventArgs) Handles reset_button.Click\n        &#39; Remove the service from the service tree.\n        If (root.serviceContainer.GetService(GetType(TextService)) IsNot Nothing) Then\n            root.serviceContainer.RemoveService(GetType(TextService), True)\n        End If\n        &#39; Set all controls to &quot;not obtained&quot; and clear their labels.\n        Dim i As Integer\n        For i = 0 To Controls.Count - 1\n            If Not Controls(i).Equals(reset_button) Then\n                CType(Controls(i), ServiceObjectControl).state = TextServiceState.ServiceNotObtained\n                CType(Controls(i), ServiceObjectControl).label = String.Empty\n                CType(Controls(i), ServiceObjectControl).BackColor = Color.Beige\n            End If\n        Next i\n    End Sub\n\n    Public Sub UpdateServiceCoverage()\n        &#39; Have each control set state to reflect service availability.\n        Dim i As Integer\n        For i = 0 To Controls.Count - 1\n            If Not Controls(i).Equals(reset_button) Then\n                CType(Controls(i), ServiceObjectControl).ReflectServiceVisibility()\n            End If\n        Next i\n    End Sub\n\n    Private Sub InitializeComponent()\n        Me.reset_button = New System.Windows.Forms.Button()\n        Me.SuspendLayout()\n        &#39;\n        &#39;reset_button\n        &#39;\n        Me.reset_button.Location = New System.Drawing.Point(392, 88)\n        Me.reset_button.Name = &quot;reset_button&quot;\n        Me.reset_button.TabIndex = 0\n        Me.reset_button.TabStop = False\n        Me.reset_button.Text = &quot;Reset&quot;\n        &#39;\n        &#39;ServiceForm\n        &#39;\n        Me.ClientSize = New System.Drawing.Size(512, 373)\n        Me.Controls.AddRange(New System.Windows.Forms.Control() {Me.reset_button})\n        Me.MinimumSize = New System.Drawing.Size(520, 400)\n        Me.Name = &quot;ServiceForm&quot;\n        Me.Text = &quot;Service Container Architecture Example&quot;\n        Me.ResumeLayout(False)\n\n    End Sub\n\n    &lt;STAThread()&gt; _\n    Shared Sub Main()\n        Application.Run(New ServiceForm())\n    End Sub\n\n    Protected Overrides Sub OnPaint(ByVal e As System.Windows.Forms.PaintEventArgs)\n        e.Graphics.DrawString(&quot;The following tree diagram represents a hierarchy of linked service containers in controls.&quot;, New Font(&quot;Arial&quot;, 9), New SolidBrush(Color.Black), 4, 4)\n        e.Graphics.DrawString(&quot;This example demonstrates the propagation behavior of services through a linked service object tree.&quot;, New Font(&quot;Arial&quot;, 8), New SolidBrush(Color.Black), 4, 26)\n        e.Graphics.DrawString(&quot;Right-click a component to add or replace a text service, or to remove it if the component provided it.&quot;, New Font(&quot;Arial&quot;, 8), New SolidBrush(Color.Black), 4, 38)\n        e.Graphics.DrawString(&quot;Left-click a component to update text from the text service if available.&quot;, New Font(&quot;Arial&quot;, 8), New SolidBrush(Color.Black), 4, 50)\n\n        &#39; Draw lines to represent tree branches.\n        e.Graphics.DrawLine(New Pen(New SolidBrush(Color.Black), 1), 20, 125, 20, 258)\n        e.Graphics.DrawLine(New Pen(New SolidBrush(Color.Black), 1), 21, 175, 45, 175)\n        e.Graphics.DrawLine(New Pen(New SolidBrush(Color.Black), 1), 21, 258, 45, 258)\n        e.Graphics.DrawLine(New Pen(New SolidBrush(Color.Black), 1), 255, 175, 285, 175)\n        e.Graphics.DrawLine(New Pen(New SolidBrush(Color.Black), 1), 255, 258, 285, 258)\n        e.Graphics.DrawLine(New Pen(New SolidBrush(Color.Black), 1), 285, 155, 285, 195)\n        e.Graphics.DrawLine(New Pen(New SolidBrush(Color.Black), 1), 285, 238, 285, 278)\n        e.Graphics.DrawLine(New Pen(New SolidBrush(Color.Black), 1), 285, 155, 290, 155)\n        e.Graphics.DrawLine(New Pen(New SolidBrush(Color.Black), 1), 285, 195, 290, 195)\n        e.Graphics.DrawLine(New Pen(New SolidBrush(Color.Black), 1), 285, 238, 290, 238)\n        e.Graphics.DrawLine(New Pen(New SolidBrush(Color.Black), 1), 285, 278, 290, 278)\n\n        &#39; Draw color key.\n        e.Graphics.DrawRectangle(New Pen(New SolidBrush(Color.Black), 1), 20, 305, 410, 60)\n        Dim y As Integer = 0\n        Dim i As Integer\n        For i = 0 To 2\n            e.Graphics.FillRectangle(New SolidBrush(colorkeys(y)), 25 + i * 140, 310, 20, 20)\n            e.Graphics.DrawRectangle(New Pen(New SolidBrush(Color.Black), 1), 25 + i * 140, 310, 20, 20)\n            e.Graphics.DrawString(keystrings(y), New Font(&quot;Arial&quot;, 8), New SolidBrush(Color.Black), 50 + i * 140, 315)\n            y += 1\n            e.Graphics.FillRectangle(New SolidBrush(colorkeys(y)), 25 + i * 140, 340, 20, 20)\n            e.Graphics.DrawRectangle(New Pen(New SolidBrush(Color.Black), 1), 25 + i * 140, 340, 20, 20)\n            e.Graphics.DrawString(keystrings(y), New Font(&quot;Arial&quot;, 8), New SolidBrush(Color.Black), 50 + i * 140, 345)\n            y += 1\n        Next i\n    End Sub\nEnd Class\n\n&#39; An example user control that uses ServiceContainer to add, remove, \n&#39; and access services through a linkable service container network.\nPublic Class ServiceObjectControl\n    Inherits System.Windows.Forms.UserControl\n\n    &#39; This example user control implementation provides a wrapper for \n    &#39; ServiceContainer, supporting a linked service container network.\n    Public serviceContainer As serviceContainer\n    &#39; Parent form reference for main program function access.\n    Private parentserviceForm As ServiceForm\n    &#39; String for label displayed on the control to indicate the \n    &#39; control&#39;s current service-related configuration state.\n    Public label As String    \n    &#39; The current state of the control reflecting whether it has \n    &#39; obtained or provided a text service.\n    Private state_ As TextServiceState\n    Public Property state() As TextServiceState\n        Get\n            Return state_\n        End Get\n        Set(ByVal Value As TextServiceState)\n            If CType(Value, TextServiceState) = TextServiceState.ServiceProvided Then\n                Me.BackColor = Color.LightGreen\n            ElseIf CType(Value, TextServiceState) = TextServiceState.ServiceNotObtained Then\n                Me.BackColor = Color.White\n            ElseIf CType(Value, TextServiceState) = TextServiceState.ServiceObtained Then\n                Me.BackColor = Color.LightBlue\n            ElseIf CType(Value, TextServiceState) = TextServiceState.ServiceNotFound Then\n                Me.BackColor = Color.SeaShell\n            End If\n            state_ = Value\n        End Set\n    End Property    \n\n    Public Sub New(ByVal serviceContainerParent As ServiceObjectControl, ByVal size As Size, ByVal location As Point, ByVal parent As ServiceForm)\n        Me.state_ = TextServiceState.ServiceNotObtained\n        Me.BackColor = Color.Beige\n        Me.label = String.Empty\n        Me.Size = size\n        Me.Location = location\n        Me.parentserviceForm = parent        \n        If serviceContainerParent Is Nothing Then\n            serviceContainer = New ServiceContainer()\n        Else\n            serviceContainer = New ServiceContainer(serviceContainerParent.serviceContainer)\n        End If\n    End Sub\n\n    &#39; Paint method override draws the label string on the control.\n    Protected Overrides Sub OnPaint(ByVal e As System.Windows.Forms.PaintEventArgs)\n        e.Graphics.DrawString(label, New Font(&quot;Arial&quot;, 8), New SolidBrush(Color.Black), 5, 5)\n    End Sub\n\n    &#39; Process mouse-down behavior for click.\n    Protected Overrides Sub OnMouseDown(ByVal e As System.Windows.Forms.MouseEventArgs)\n        If e.Button = System.Windows.Forms.MouseButtons.Left Then\n            If state_ &lt;&gt; TextServiceState.ServiceProvided Then\n                &#39; Attempt to update text from service, and set color \n                &#39; state accordingly.\n                Dim ts As TextService = CType(serviceContainer.GetService(GetType(TextService)), TextService)\n                If (ts IsNot Nothing) Then\n                    Me.label = ts.text\n                    state = TextServiceState.ServiceObtained\n                Else\n                    Me.label = &quot;Service Not Found&quot;\n                    state = TextServiceState.ServiceNotFound\n                End If\n            End If\n        End If\n        If e.Button = System.Windows.Forms.MouseButtons.Right Then\n            If state_ = TextServiceState.ServiceProvided Then\n                &#39; Remove service if the container provided it.\n                If (serviceContainer.GetService(GetType(TextService)) IsNot Nothing) Then\n                    serviceContainer.RemoveService(GetType(TextService), True)\n                    state = TextServiceState.ServiceNotObtained\n                    Me.label = &quot;Service Removed&quot;\n                End If\n            Else\n                &#39; Obtain string and provide text service.\n                Using form As New StringInputDialog(&quot;Test String&quot;)\n                    form.StartPosition = FormStartPosition.CenterParent\n                    If form.ShowDialog() = DialogResult.OK Then\n                        If (serviceContainer.GetService(GetType(TextService)) IsNot Nothing) Then\n                            serviceContainer.RemoveService(GetType(TextService), True)\n                        End If\n                        parentserviceForm.ResetServiceTree(Me, New EventArgs())\n                        serviceContainer.AddService(GetType(TextService), New TextService(form.inputTextBox.Text), True)\n                        state = TextServiceState.ServiceProvided\n                        Me.label = &quot;Provided Text: &quot; + form.inputTextBox.Text\n                    End If\n                End Using\n            End If\n        End If\n        parentserviceForm.UpdateServiceCoverage()\n    End Sub\n\n    &#39; Method accesses the TextService to test the visibility of the service \n    &#39; from the control, and sets the UI state accordingly.\n    Public Sub ReflectServiceVisibility()\n        If state_ = TextServiceState.ServiceObtained Then\n            If serviceContainer.GetService(GetType(TextService)) Is Nothing Then\n                Me.BackColor = Color.CadetBlue\n            End If\n        ElseIf state_ &lt;&gt; TextServiceState.ServiceProvided Then\n            If serviceContainer.GetService(GetType(TextService)) Is Nothing Then\n                Me.BackColor = Color.White\n                Return\n            End If\n\n            &#39; Service available.                   \n            If state_ = TextServiceState.ServiceNotFound Then\n                Me.BackColor = Color.Khaki\n            ElseIf state_ = TextServiceState.ServiceNotObtained AndAlso label &lt;&gt; &quot;Service Removed&quot; Then\n                Me.BackColor = Color.Khaki\n            End If\n        End If\n    End Sub\n\nEnd Class\n\n&#39; Example service type contains a text string, sufficient \n&#39; for use to demonstrate service sharing.\nPublic Class TextService\n    Public [text] As String\n\n    Public Sub New()\n        MyClass.New(String.Empty)\n    End Sub\n\n    Public Sub New(ByVal [text] As String)\n        Me.text = [text]\n    End Sub\nEnd Class\n\nPublic Enum TextServiceState\n    ServiceNotObtained\n    ServiceObtained\n    ServiceProvided\n    ServiceNotFound\nEnd Enum\n\n&#39; Example Form for entering a string.\nFriend Class StringInputDialog\n    Inherits System.Windows.Forms.Form\n\n    Private ok_button As System.Windows.Forms.Button\n    Private cancel_button As System.Windows.Forms.Button\n    Public inputTextBox As System.Windows.Forms.TextBox\n\n    Public Sub New(ByVal [text] As String)\n        InitializeComponent()\n        inputTextBox.Text = [text]\n    End Sub\n\n    Private Sub InitializeComponent()\n        Me.ok_button = New System.Windows.Forms.Button()\n        Me.cancel_button = New System.Windows.Forms.Button()\n        Me.inputTextBox = New System.Windows.Forms.TextBox()\n        Me.SuspendLayout()\n        Me.ok_button.Anchor = System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right\n        Me.ok_button.Location = New System.Drawing.Point(180, 43)\n        Me.ok_button.Name = &quot;ok_button&quot;\n        Me.ok_button.TabIndex = 1\n        Me.ok_button.Text = &quot;OK&quot;\n        Me.ok_button.DialogResult = System.Windows.Forms.DialogResult.OK\n        Me.cancel_button.Anchor = System.Windows.Forms.AnchorStyles.Bottom Or System.Windows.Forms.AnchorStyles.Right\n        Me.cancel_button.Location = New System.Drawing.Point(260, 43)\n        Me.cancel_button.Name = &quot;cancel_button&quot;\n        Me.cancel_button.TabIndex = 2\n        Me.cancel_button.Text = &quot;Cancel&quot;\n        Me.cancel_button.DialogResult = System.Windows.Forms.DialogResult.Cancel\n        Me.inputTextBox.Location = New System.Drawing.Point(6, 9)\n        Me.inputTextBox.Name = &quot;inputTextBox&quot;\n        Me.inputTextBox.Size = New System.Drawing.Size(327, 20)\n        Me.inputTextBox.TabIndex = 0\n        Me.inputTextBox.Text = &quot;&quot;\n        Me.inputTextBox.Anchor = System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right\n        Me.ClientSize = New System.Drawing.Size(342, 73)\n        Me.Controls.AddRange(New System.Windows.Forms.Control() {Me.inputTextBox, Me.cancel_button, Me.ok_button})\n        Me.MinimumSize = New System.Drawing.Size(350, 100)\n        Me.Name = &quot;StringInputDialog&quot;\n        Me.Text = &quot;Text Service Provide String Dialog&quot;\n        Me.ResumeLayout(False)\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"ServiceArchitectureExample#1\">using System;\nusing System.Drawing;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.ComponentModel.Design;\nusing System.Windows.Forms;\nusing System.Windows.Forms.Design;\n\nnamespace ServiceArchitectureExample\n{\n    // Example form provides UI for demonstrating service sharing behavior \n    // of a network of IServiceContainer/IServiceProvider controls.\n\tpublic class ServiceForm : System.Windows.Forms.Form\n\t{                \n        // Root service container control for tree.\n        private ServiceObjectControl root;         \n             \n        // Button for clearing any provided services and resetting tree states.\n        private System.Windows.Forms.Button reset_button;       \n\n        // Color list used to color code controls.\n        private Color[] colorkeys;                              \n\n        // Strings used to reflect text service.\n        private string[] keystrings;                            \n\n\t\tpublic ServiceForm()\n\t\t{\n\t\t\tInitializeComponent();\n            CreateServiceControlTree();\n            colorkeys = new Color[] { Color.Beige, Color.SeaShell, Color.LightGreen, Color.LightBlue, Color.Khaki, Color.CadetBlue };\n            keystrings = new string[] { &quot;No service use&quot;, &quot;Service not accessible&quot;, &quot;Service provided&quot;, &quot;Service obtained&quot;, &quot;Service accessible&quot;, &quot;No further access&quot; };\n\t\t}\n\n        private void CreateServiceControlTree()\n        {\n            // Create root service control.\n            ServiceObjectControl control1 = new ServiceObjectControl(null, new Size(300, 40), new Point(10, 80), this);\n            root = control1;\n            // Create first tier - pass parent with service object control 1\n            ServiceObjectControl control2 = new ServiceObjectControl(control1, new Size(200, 30), new Point(50, 160), this);\n            ServiceObjectControl control3 = new ServiceObjectControl(control1, new Size(200, 30), new Point(50, 240), this);\n            // Create second tier A - pass parent with service object control 2\n            ServiceObjectControl control4 = new ServiceObjectControl(control2, new Size(180, 20), new Point(300, 145), this);\n            ServiceObjectControl control5 = new ServiceObjectControl(control2, new Size(180, 20), new Point(300, 185), this);\n            // Create second tier B - pass parent with service object control 3\n            ServiceObjectControl control6 = new ServiceObjectControl(control3, new Size(180, 20), new Point(300, 225), this);\n            ServiceObjectControl control7 = new ServiceObjectControl(control3, new Size(180, 20), new Point(300, 265), this);\n            // Add controls.\n            this.Controls.AddRange( new Control[] { control1, control2, control3, control4, control5, control6, control7 } );\n        }\n\n        internal void ResetServiceTree(object sender, EventArgs e)\n        {\n            // Remove the service from the service tree.\n            if( root.serviceContainer.GetService(typeof(TextService)) != null )            \n                root.serviceContainer.RemoveService(typeof(TextService), true);\n\n            // Set all controls to &quot;not obtained&quot; and clear their labels.\n            for( int i=0; i&lt;Controls.Count; i++ )\n                if( !Controls[i].Equals(reset_button) ) \n                {\n                    ((ServiceObjectControl)Controls[i]).state = TextServiceState.ServiceNotObtained;\n                    ((ServiceObjectControl)Controls[i]).label = string.Empty;\n                    ((ServiceObjectControl)Controls[i]).BackColor = Color.Beige;\n                }\n        }\n\n        public void UpdateServiceCoverage()\n        {\n            // Have each control set state to reflect service availability.\n            for( int i=0; i&lt;Controls.Count; i++ )\n                if( !Controls[i].Equals(reset_button) )                 \n                    ((ServiceObjectControl)Controls[i]).ReflectServiceVisibility();                                 \n        }\n\n\t\t#region Windows Form Designer generated code\n\t\tprivate void InitializeComponent()\n\t\t{\n            this.reset_button = new System.Windows.Forms.Button();\n            this.SuspendLayout();\n            // \n            // reset_button\n            // \n            this.reset_button.Location = new System.Drawing.Point(392, 88);\n            this.reset_button.Name = &quot;reset_button&quot;;\n            this.reset_button.TabIndex = 0;\n            this.reset_button.TabStop = false;\n            this.reset_button.Text = &quot;Reset&quot;;\n            this.reset_button.Click += new System.EventHandler(this.ResetServiceTree);\n            // \n            // ServiceForm\n            // \n            this.ClientSize = new System.Drawing.Size(512, 373);\n            this.Controls.AddRange(new System.Windows.Forms.Control[] {\n                                                                          this.reset_button});\n            this.MinimumSize = new System.Drawing.Size(520, 400);\n            this.Name = &quot;ServiceForm&quot;;\n            this.Text = &quot;Service Container Architecture Example&quot;;\n            this.ResumeLayout(false);\n\n        }\n\t\t#endregion\n\n\t\t[STAThread]\n\t\tstatic void Main() \n\t\t{\n\t\t\tApplication.Run(new ServiceForm());\n\t\t}\n\n        protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)\n        {            \n            e.Graphics.DrawString(&quot;The following tree diagram represents a hierarchy of linked service containers in controls.&quot;, new Font(&quot;Arial&quot;, 9), new SolidBrush(Color.Black), 4, 4);\n            e.Graphics.DrawString(&quot;This example demonstrates the propagation behavior of services through a linked service object tree.&quot;, new Font(&quot;Arial&quot;, 8), new SolidBrush(Color.Black), 4, 26);            \n            e.Graphics.DrawString(&quot;Right-click a component to add or replace a text service, or to remove it if the component provided it.&quot;, new Font(&quot;Arial&quot;, 8), new SolidBrush(Color.Black), 4, 38);\n            e.Graphics.DrawString(&quot;Left-click a component to update text from the text service if available.&quot;, new Font(&quot;Arial&quot;, 8), new SolidBrush(Color.Black), 4, 50);\n\n            // Draw lines to represent tree branches.\n            e.Graphics.DrawLine(new Pen(new SolidBrush(Color.Black), 1), 20, 125, 20, 258);\n            e.Graphics.DrawLine(new Pen(new SolidBrush(Color.Black), 1), 21, 175, 45, 175);\n            e.Graphics.DrawLine(new Pen(new SolidBrush(Color.Black), 1), 21, 258, 45, 258);\n            e.Graphics.DrawLine(new Pen(new SolidBrush(Color.Black), 1), 255, 175, 285, 175);\n            e.Graphics.DrawLine(new Pen(new SolidBrush(Color.Black), 1), 255, 258, 285, 258);\n            e.Graphics.DrawLine(new Pen(new SolidBrush(Color.Black), 1), 285, 155, 285, 195);\n            e.Graphics.DrawLine(new Pen(new SolidBrush(Color.Black), 1), 285, 238, 285, 278);            \n            e.Graphics.DrawLine(new Pen(new SolidBrush(Color.Black), 1), 285, 155, 290, 155);\n            e.Graphics.DrawLine(new Pen(new SolidBrush(Color.Black), 1), 285, 195, 290, 195);\n            e.Graphics.DrawLine(new Pen(new SolidBrush(Color.Black), 1), 285, 238, 290, 238);\n            e.Graphics.DrawLine(new Pen(new SolidBrush(Color.Black), 1), 285, 278, 290, 278);\n\n            // Draw color key.\n            e.Graphics.DrawRectangle(new Pen(new SolidBrush(Color.Black), 1), 20, 305, 410, 60);\n            int y=0;\n            for( int i=0; i&lt;3; i++ )\n            {\n                e.Graphics.FillRectangle(new SolidBrush(colorkeys[y]), 25+(i*140), 310, 20, 20);           \n                e.Graphics.DrawRectangle(new Pen(new SolidBrush(Color.Black), 1), 25+(i*140), 310, 20, 20);     \n                e.Graphics.DrawString(keystrings[y], new Font(&quot;Arial&quot;, 8), new SolidBrush(Color.Black), 50+(i*140), 315);\n                y++;\n                e.Graphics.FillRectangle(new SolidBrush(colorkeys[y]), 25+(i*140), 340, 20, 20);           \n                e.Graphics.DrawRectangle(new Pen(new SolidBrush(Color.Black), 1), 25+(i*140), 340, 20, 20);              \n                e.Graphics.DrawString(keystrings[y], new Font(&quot;Arial&quot;, 8), new SolidBrush(Color.Black), 50+(i*140), 345);\n                y++;\n            }\n        }\n\t}\n\n    // An example user control that uses ServiceContainer to add, remove,\n    // and access services through a linkable service container network.\n    public class ServiceObjectControl : System.Windows.Forms.UserControl\n    {\n        // This example user control implementation provides a wrapper for \n        // ServiceContainer, supporting a linked service container network.    \n        public ServiceContainer serviceContainer;        \n        // Parent form reference for main program function access.\n        private ServiceForm parent;                  \n        // String for label displayed on the control to indicate the \n        // control&#39;s current service-related configuration state.\n        public string label;               \n        // The current state of the control reflecting whether it has \n        // obtained or provided a text service.\n        private TextServiceState state_;\n        public TextServiceState state\n        {\n            get\n            {\n                return state_;\n            }\n            set\n            {\n                if( (TextServiceState)value == TextServiceState.ServiceProvided )\n                    this.BackColor = Color.LightGreen;\n                else if( (TextServiceState)value == TextServiceState.ServiceNotObtained )                \n                    this.BackColor = Color.White;                                   \n                else if( (TextServiceState)value == TextServiceState.ServiceObtained )\n                    this.BackColor = Color.LightBlue;\n                else if( (TextServiceState)value == TextServiceState.ServiceNotFound )                                    \n                    this.BackColor = Color.SeaShell;                \n                state_ = value;\n            }\n        }        \n        \n        public ServiceObjectControl(ServiceObjectControl serviceContainerParent, Size size, Point location, ServiceForm parent)\n        {\n            this.state_ = TextServiceState.ServiceNotObtained;\n            this.BackColor = Color.Beige;            \n            this.label = string.Empty;            \n            this.Size = size;\n            this.Location = location;\n            this.parent = parent;            \n            if( serviceContainerParent == null )\n                serviceContainer = new ServiceContainer();\n            else\n                serviceContainer = new ServiceContainer(serviceContainerParent.serviceContainer);\n        }\n\n        // Paint method override draws the label string on the control.\n        protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)\n        {\n            e.Graphics.DrawString(label, new Font(&quot;Arial&quot;, 8), new SolidBrush(Color.Black), 5, 5);            \n        }\n\n        // Process mouse-down behavior for click.\n        protected override void OnMouseDown(System.Windows.Forms.MouseEventArgs e)\n        {\n            if( e.Button == MouseButtons.Left )\n            {\n                if( state_ != TextServiceState.ServiceProvided )\n                {\n                    // Attempt to update text from service, and set color \n                    // state accordingly.\n                    TextService ts = (TextService)serviceContainer.GetService(typeof(TextService));\n                    if( ts != null )\n                    {\n                        this.label = ts.text;\n                        state = TextServiceState.ServiceObtained;\n                    }\n                    else\n                    {                    \n                        this.label = &quot;Service Not Found&quot;;                        \n                        state = TextServiceState.ServiceNotFound;\n                    }\n                }\n            }\n            if( e.Button == MouseButtons.Right )\n            {\n                if( state_ == TextServiceState.ServiceProvided )\n                {\n                    // Remove service if the container provided it.\n                    if( serviceContainer.GetService(typeof(TextService)) != null )\n                    {\n                        serviceContainer.RemoveService(typeof(TextService), true);\n                        state = TextServiceState.ServiceNotObtained; \n                        this.label = &quot;Service Removed&quot;;                                                                   \n                    }                    \n                }\n                else\n                {\n                    // Obtain string and provide text service.\n                    using (StringInputDialog form = new StringInputDialog(&quot;Test String&quot;))\n                    {\n                        form.StartPosition = FormStartPosition.CenterParent;\n                        if (form.ShowDialog() == DialogResult.OK)\n                        {\n                            if (serviceContainer.GetService(typeof(TextService)) != null)\n                                serviceContainer.RemoveService(typeof(TextService), true);\n                            parent.ResetServiceTree(this, new EventArgs());\n                            serviceContainer.AddService(typeof(TextService), new TextService(form.inputTextBox.Text), true);\n                            state = TextServiceState.ServiceProvided;\n                            this.label = &quot;Provided Text: &quot; + form.inputTextBox.Text;\n                        }\n                    }\n                }\n            }\n            parent.UpdateServiceCoverage();\n        }\n\n        // Method accesses the TextService to test the visibility of the service \n        // from the control, and sets the UI state accordingly.\n        public void ReflectServiceVisibility()\n        {\n            if( state_ == TextServiceState.ServiceObtained )\n            {\n                if( serviceContainer.GetService(typeof(TextService)) == null )  \n                    this.BackColor = Color.CadetBlue;\n            }\n            else if( state_ != TextServiceState.ServiceProvided )\n            {\n                if( serviceContainer.GetService(typeof(TextService)) == null )\n                {\n                    this.BackColor = Color.White;\n                    return;\n                }\n\n                // Service available.                  \n                if( state_ == TextServiceState.ServiceNotFound )                \n                    this.BackColor = Color.Khaki;                \n                else if( state_ == TextServiceState.ServiceNotObtained &amp;&amp; label != &quot;Service Removed&quot; )\n                    this.BackColor = Color.Khaki;       \n            }            \n        }\n    }\n\n    // Example service type contains a text string, sufficient \n    // to demonstrate service sharing.\n    public class TextService\n    {\n        public string text;\n\n        public TextService() : this(string.Empty)\n        {\n        }\n\n        public TextService(string text)\n        {\n            this.text = text;\n        }\n    }\n\n    public enum TextServiceState\n    {\n        ServiceNotObtained,\n        ServiceObtained,\n        ServiceProvided,\n        ServiceNotFound\n    }\n\n    // Example Form for entering a string.\n    internal class StringInputDialog : System.Windows.Forms.Form\n    {\n        private System.Windows.Forms.Button ok_button;\n        private System.Windows.Forms.Button cancel_button;\n        public System.Windows.Forms.TextBox inputTextBox;\n\n        public StringInputDialog(string text)\n        {\n            InitializeComponent();\n            inputTextBox.Text = text;\n        }\n\n        private void InitializeComponent()\n        {\n            this.ok_button = new System.Windows.Forms.Button();\n            this.cancel_button = new System.Windows.Forms.Button();\n            this.inputTextBox = new System.Windows.Forms.TextBox();\n            this.SuspendLayout();\n            this.ok_button.Anchor = (System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right);\n            this.ok_button.Location = new System.Drawing.Point(180, 43);\n            this.ok_button.Name = &quot;ok_button&quot;;\n            this.ok_button.TabIndex = 1;\n            this.ok_button.Text = &quot;OK&quot;;      \n            this.ok_button.DialogResult = System.Windows.Forms.DialogResult.OK;            \n            this.cancel_button.Anchor = (System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right);\n            this.cancel_button.Location = new System.Drawing.Point(260, 43);\n            this.cancel_button.Name = &quot;cancel_button&quot;;\n            this.cancel_button.TabIndex = 2;\n            this.cancel_button.Text = &quot;Cancel&quot;;            \n            this.cancel_button.DialogResult = System.Windows.Forms.DialogResult.Cancel;\n            this.inputTextBox.Location = new System.Drawing.Point(6, 9);\n            this.inputTextBox.Name = &quot;inputTextBox&quot;;\n            this.inputTextBox.Size = new System.Drawing.Size(327, 20);\n            this.inputTextBox.TabIndex = 0;\n            this.inputTextBox.Text = &quot;&quot;;            \n            this.inputTextBox.Anchor = ((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) \n                | System.Windows.Forms.AnchorStyles.Right);\n            this.ClientSize = new System.Drawing.Size(342, 73);\n            this.Controls.AddRange(new System.Windows.Forms.Control[] {\n                                                                          this.inputTextBox,\n                                                                          this.cancel_button,\n                                                                          this.ok_button});\n            this.MinimumSize = new System.Drawing.Size(350, 100);\n            this.Name = &quot;StringInputDialog&quot;;\n            this.Text = &quot;Text Service Provide String Dialog&quot;;\n            this.ResumeLayout(false);\n        }\t\t\n    }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The ServiceContainer object can be used to store and provide services. ServiceContainer implements the <a class=\"xref\" href=\"system.componentmodel.design.iservicecontainer\" data-linktype=\"relative-path\">IServiceContainer</a> interface.  </p>\n<p> The ServiceContainer object can be created using a constructor that adds a parent <a class=\"xref\" href=\"system.componentmodel.design.iservicecontainer\" data-linktype=\"relative-path\">IServiceContainer</a> through which services can be optionally added to or removed from all parent <a class=\"xref\" href=\"system.componentmodel.design.iservicecontainer\" data-linktype=\"relative-path\">IServiceContainer</a> objects, including the immediate parent <a class=\"xref\" href=\"system.componentmodel.design.iservicecontainer\" data-linktype=\"relative-path\">IServiceContainer</a>. To add or remove a service from all <a class=\"xref\" href=\"system.componentmodel.design.iservicecontainer\" data-linktype=\"relative-path\">IServiceContainer</a> implementations that are linked to this <a class=\"xref\" href=\"system.componentmodel.design.iservicecontainer\" data-linktype=\"relative-path\">IServiceContainer</a> through parenting, call the <a class=\"xref\" href=\"system.componentmodel.design.servicecontainer#System_ComponentModel_Design_ServiceContainer_AddService_\" data-linktype=\"relative-path\">AddService</a> or <a class=\"xref\" href=\"system.componentmodel.design.servicecontainer#System_ComponentModel_Design_ServiceContainer_RemoveService_\" data-linktype=\"relative-path\">RemoveService</a> method overload that accepts a Boolean value indicating whether to promote the service request.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> The <a class=\"xref\" href=\"system.security.permissions.hostprotectionattribute\" data-linktype=\"relative-path\">HostProtectionAttribute</a> attribute applied to this class has the following <a class=\"xref\" href=\"system.security.permissions.hostprotectionattribute#System_Security_Permissions_HostProtectionAttribute_Resources_\" data-linktype=\"relative-path\">Resources</a> property value: <a class=\"xref\" href=\"system.security.permissions.hostprotectionresource\" data-linktype=\"relative-path\">HostProtectionResource</a>. The <a class=\"xref\" href=\"system.security.permissions.hostprotectionattribute\" data-linktype=\"relative-path\">HostProtectionAttribute</a> does not affect desktop applications (which are typically started by double-clicking an icon, typing a command, or entering a URL in a browser). For more information, see the <a class=\"xref\" href=\"system.security.permissions.hostprotectionattribute\" data-linktype=\"relative-path\">HostProtectionAttribute</a> class or <a href=\"../topic/sql%20server%20programming%20and%20host%20protection%20attributes\" data-linktype=\"relative-path\">SQL Server Programming and Host Protection Attributes</a>.</p>\n</div>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_Design_ServiceContainer__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_ServiceContainer__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ServiceContainer()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.componentmodel.design.servicecontainer\" data-linktype=\"relative-path\">ServiceContainer</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public ServiceContainer ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_Design_ServiceContainer__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_ServiceContainer__ctor_System_IServiceProvider_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ServiceContainer(IServiceProvider)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.componentmodel.design.servicecontainer\" data-linktype=\"relative-path\">ServiceContainer</a> class using the specified parent service provider.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public ServiceContainer (IServiceProvider parentProvider);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>parentProvider</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.iserviceprovider\" data-linktype=\"relative-path\">IServiceProvider</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A parent service provider.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The service container uses this service object provider to retrieve services, if they are not available locally in the container.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_Design_ServiceContainer_DefaultServices_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_ServiceContainer_DefaultServices\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">DefaultServices</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the default services implemented directly by <a class=\"xref\" href=\"system.componentmodel.design.servicecontainer\" data-linktype=\"relative-path\">ServiceContainer</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual Type[] DefaultServices { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The default services.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property returns the default services that are implemented directly on this <a class=\"xref\" href=\"system.componentmodel.design.iservicecontainer\" data-linktype=\"relative-path\">IServiceContainer</a>. the default implementation of this property is to return the <a class=\"xref\" href=\"system.componentmodel.design.iservicecontainer\" data-linktype=\"relative-path\">IServiceContainer</a> and <a class=\"xref\" href=\"system.componentmodel.design.servicecontainer\" data-linktype=\"relative-path\">ServiceContainer</a> types. You may override this property and return your own types, modifying the default behavior of <a class=\"xref\" href=\"system.componentmodel.component#System_ComponentModel_Component_GetService_\" data-linktype=\"relative-path\">GetService</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_Design_ServiceContainer_AddService_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_ServiceContainer_AddService_System_Type_System_ComponentModel_Design_ServiceCreatorCallback_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AddService(Type, ServiceCreatorCallback)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Adds the specified service to the service container.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void AddService (Type serviceType, System.ComponentModel.Design.ServiceCreatorCallback callback);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>serviceType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The type of service to add.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>callback</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.design.servicecreatorcallback\" data-linktype=\"relative-path\">ServiceCreatorCallback</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A callback object that can create the service. This allows a service to be declared as available, but delays creation of the object until the service is requested.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>serviceType</code> or <code>callback</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A service of type <code>serviceType</code> already exists in the container.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_Design_ServiceContainer_AddService_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_ServiceContainer_AddService_System_Type_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AddService(Type, Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Adds the specified service to the service container.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void AddService (Type serviceType, object serviceInstance);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>serviceType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The type of service to add.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>serviceInstance</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An instance of the service to add. This object must implement or inherit from the type indicated by the <code>serviceType</code> parameter.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>serviceType</code> or <code>serviceInstance</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A service of type <code>serviceType</code> already exists in the container.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_Design_ServiceContainer_AddService_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_ServiceContainer_AddService_System_Type_System_ComponentModel_Design_ServiceCreatorCallback_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AddService(Type, ServiceCreatorCallback, Boolean)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Adds the specified service to the service container.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual void AddService (Type serviceType, System.ComponentModel.Design.ServiceCreatorCallback callback, bool promote);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>serviceType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The type of service to add.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>callback</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.design.servicecreatorcallback\" data-linktype=\"relative-path\">ServiceCreatorCallback</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A callback object that can create the service. This allows a service to be declared as available, but delays creation of the object until the service is requested.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>promote</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this service should be added to any parent service containers; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>serviceType</code> or <code>callback</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A service of type <code>serviceType</code> already exists in the container.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_Design_ServiceContainer_AddService_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_ServiceContainer_AddService_System_Type_System_Object_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AddService(Type, Object, Boolean)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Adds the specified service to the service container.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual void AddService (Type serviceType, object serviceInstance, bool promote);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>serviceType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The type of service to add.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>serviceInstance</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An instance of the service type to add. This object must implement or inherit from the type indicated by the <code>serviceType</code> parameter.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>promote</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this service should be added to any parent service containers; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>serviceType</code> or <code>serviceInstance</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>A service of type <code>serviceType</code> already exists in the container.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_Design_ServiceContainer_Dispose_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_ServiceContainer_Dispose\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Dispose()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Disposes this service container.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Dispose ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Dispose walks all instantiated services within the container and disposes any that implement <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a>, and clears the service list.  </p>\n<p> Call <a class=\"xref\" href=\"system.componentmodel.design.servicecontainer#System_ComponentModel_Design_ServiceContainer_Dispose_\" data-linktype=\"relative-path\">Dispose</a> when you are finished using the <a class=\"xref\" href=\"system.componentmodel.design.servicecontainer\" data-linktype=\"relative-path\">ServiceContainer</a>. The <a class=\"xref\" href=\"system.componentmodel.design.servicecontainer#System_ComponentModel_Design_ServiceContainer_Dispose_\" data-linktype=\"relative-path\">Dispose</a> method leaves the <a class=\"xref\" href=\"system.componentmodel.design.servicecontainer\" data-linktype=\"relative-path\">ServiceContainer</a> in an unusable state. After calling <a class=\"xref\" href=\"system.componentmodel.design.servicecontainer#System_ComponentModel_Design_ServiceContainer_Dispose_\" data-linktype=\"relative-path\">Dispose</a>, you must release all references to the <a class=\"xref\" href=\"system.componentmodel.design.servicecontainer\" data-linktype=\"relative-path\">ServiceContainer</a> so the garbage collector can reclaim the memory that the <a class=\"xref\" href=\"system.componentmodel.design.servicecontainer\" data-linktype=\"relative-path\">ServiceContainer</a> was occupying. For more information, see <a href=\"../topic/cleaning%20up%20unmanaged%20resources\" data-linktype=\"relative-path\">Cleaning Up Unmanaged Resources</a> and <a href=\"../topic/implementing%20a%20dispose%20method\" data-linktype=\"relative-path\">Implementing a Dispose Method</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Always call <a class=\"xref\" href=\"system.componentmodel.design.servicecontainer#System_ComponentModel_Design_ServiceContainer_Dispose_\" data-linktype=\"relative-path\">Dispose</a> before you release your last reference to the <a class=\"xref\" href=\"system.componentmodel.design.servicecontainer\" data-linktype=\"relative-path\">ServiceContainer</a>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <a class=\"xref\" href=\"system.componentmodel.design.servicecontainer\" data-linktype=\"relative-path\">ServiceContainer</a> object&#39;s <code>Finalize</code> method.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_Design_ServiceContainer_Dispose_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_ServiceContainer_Dispose_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Dispose(Boolean)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Disposes this service container.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected virtual void Dispose (bool disposing);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>disposing</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <a class=\"xref\" href=\"system.componentmodel.design.servicecontainer\" data-linktype=\"relative-path\">ServiceContainer</a> is in the process of being disposed of; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.componentmodel.design.servicecontainer#System_ComponentModel_Design_ServiceContainer_Dispose_\" data-linktype=\"relative-path\">Dispose</a> walks all instantiated services within the container and disposes any that implement <a class=\"xref\" href=\"system.idisposable\" data-linktype=\"relative-path\">IDisposable</a>, and clears the service list.  </p>\n<p> This method is called by the public <code>Dispose()</code>method and the <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> method. <code>Dispose()</code> invokes the protected <code>Dispose(Boolean)</code> method with the <code>disposing</code> parameter set to <code>true</code>. <a class=\"xref\" href=\"system.object#System_Object_Finalize_\" data-linktype=\"relative-path\">Finalize</a> invokes <code>Dispose</code> with <code>disposing</code> set to <code>false</code>.  </p>\n<p> When the <code>disposing</code> parameter is true, this method releases all resources held by any managed objects that this <a class=\"xref\" href=\"system.componentmodel.design.servicecontainer\" data-linktype=\"relative-path\">ServiceContainer</a> references. This method invokes the <code>Dispose()</code> method of each referenced object.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_Design_ServiceContainer_GetService_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_ServiceContainer_GetService_System_Type_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetService(Type)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the requested service.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual object GetService (Type serviceType);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>serviceType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The type of service to retrieve.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An instance of the service if it could be found, or <code>null</code> if it could not be found.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_Design_ServiceContainer_RemoveService_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_ServiceContainer_RemoveService_System_Type_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">RemoveService(Type)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Removes the specified service type from the service container.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void RemoveService (Type serviceType);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>serviceType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The type of service to remove.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>serviceType</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_Design_ServiceContainer_RemoveService_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_ServiceContainer_RemoveService_System_Type_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">RemoveService(Type, Boolean)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Removes the specified service type from the service container.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual void RemoveService (Type serviceType, bool promote);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>serviceType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The type of service to remove.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>promote</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this service should be removed from any parent service containers; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>serviceType</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.Design.ServiceContainer.yml\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.ServiceContainer\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.ServiceContainer..ctor\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.ServiceContainer.AddService\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.ServiceContainer.DefaultServices\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.ServiceContainer.Dispose\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.ServiceContainer.GetService\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.ServiceContainer.RemoveService\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"5730b3a0-f6ed-ebc1-098e-1b4b7471187a\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a simple implementation of the  interface. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.componentmodel.design/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.ComponentModel.Design.ServiceContainer\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.Design.ServiceContainer.yml","open_to_public_contributors":false,"api_name":["System.ComponentModel.Design.ServiceContainer","System.ComponentModel.Design.ServiceContainer..ctor","System.ComponentModel.Design.ServiceContainer.AddService","System.ComponentModel.Design.ServiceContainer.DefaultServices","System.ComponentModel.Design.ServiceContainer.Dispose","System.ComponentModel.Design.ServiceContainer.GetService","System.ComponentModel.Design.ServiceContainer.RemoveService"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.ComponentModel.Design.ServiceContainer","System::ComponentModel::Design::ServiceContainer","System.ComponentModel.Design.ServiceContainer.#ctor","System::ComponentModel::Design::ServiceContainer::#ctor","System.ComponentModel.Design.ServiceContainer.AddService","System::ComponentModel::Design::ServiceContainer::AddService","System.ComponentModel.Design.ServiceContainer.DefaultServices","System::ComponentModel::Design::ServiceContainer::DefaultServices","System.ComponentModel.Design.ServiceContainer.Dispose","System::ComponentModel::Design::ServiceContainer::Dispose","System.ComponentModel.Design.ServiceContainer.GetService","System::ComponentModel::Design::ServiceContainer::GetService","System.ComponentModel.Design.ServiceContainer.RemoveService","System::ComponentModel::Design::ServiceContainer::RemoveService"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"5730b3a0-f6ed-ebc1-098e-1b4b7471187a","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.ComponentModel.Design/ServiceContainer.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ServiceContainer class | Microsoft Docs","_op_ogTitle":"ServiceContainer class","description":"Provides a simple implementation of the  interface. This class cannot be inherited.\n","toc_asset_id":"api/_splitted/System.ComponentModel.Design/toc.json","toc_rel":"_splitted/System.ComponentModel.Design/toc.json","source_url":"","ms.assetid":"System.ComponentModel.Design.ServiceContainer","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.design.servicecontainer","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.design.servicecontainer","fileRelativePath":"api/System.ComponentModel.Design.ServiceContainer.html"},"themesRelativePathToOutputRoot":"_themes/"}