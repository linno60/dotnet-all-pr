{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">FormViewInsertEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that handles the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_ItemInserting\" data-linktype=\"relative-path\">ItemInserting</a> event of a <a class=\"xref\" href=\"system.web.ui.webcontrols.formview\" data-linktype=\"relative-path\">FormView</a> control.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void FormViewInsertEventHandler(object sender, FormViewInsertEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">System.Delegate</a></span></div><span class=\"lang-csharp\">FormViewInsertEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example demonstrates how to programmatically add a FormViewInsertEventHandler delegate to the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_ItemInserting\" data-linktype=\"relative-path\">ItemInserting</a> event of a <a class=\"xref\" href=\"system.web.ui.webcontrols.formview\" data-linktype=\"relative-path\">FormView</a> control.  </p>\n<pre><code class=\"lang-vb\" name=\"FormViewInsertedEventHandler#1\">\n&lt;%@ Page language=&quot;VB&quot; %&gt;\n&lt;%@ import namespace=&quot;System.Data&quot;%&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  &#39; To dynamically create a template for a FormView control,\n  &#39; you must create a custom template class to represent \n  &#39; the template. This template class represents the item\n  &#39; template for a FormView control.\n  Private NotInheritable Class EmployeeItemTemplate\n    Implements ITemplate\n\n    &#39; When implementing the ITemplate interface, you must\n    &#39; implement the InstantiateIn method. The FormView\n    &#39; control calls this method to create the template&#39;s \n    &#39; content. \n    Sub InstantiateIn(ByVal container As Control) Implements ITemplate.InstantiateIn\n      \n      &#39; Create the child controls contained in the template.\n      &#39; For this example, the item template displays the\n      &#39; FirstName and LastName fields from the data source.\n      &#39; To support data binding, create event handlers \n      &#39; for the DataBinding event of each child control.\n      &#39; The event handlers must bind the appropriate value \n      &#39; to each control.\n      Dim firstNameLabel As New Label()\n      firstNameLabel.ID = &quot;FirstNameLabel&quot;\n      AddHandler firstNameLabel.DataBinding, AddressOf FirstNameLabel_DataBinding\n\n      Dim nameLineBreak As New LiteralControl(&quot;&lt;br/&gt;&quot;)\n      Dim buttonLineBreak As New LiteralControl(&quot;&lt;br/&gt;&quot;)\n\n      Dim lastNameLabel As New Label()\n      lastNameLabel.ID = &quot;LastNameLabel&quot;\n      AddHandler lastNameLabel.DataBinding, AddressOf LastNameLabel_DataBinding\n\n      Dim newButton As New Button()\n      newButton.ID = &quot;NewButton&quot;\n      newButton.CommandName = &quot;New&quot;\n      newButton.Text = &quot;New&quot;\n\n      &#39; Add the controls to the Controls collection of the \n      &#39; container control.\n      container.Controls.Add(firstNameLabel)\n      container.Controls.Add(nameLineBreak)\n      container.Controls.Add(lastNameLabel)\n      container.Controls.Add(buttonLineBreak)\n      container.Controls.Add(newButton)\n      \n    End Sub\n\n    &#39; This event handler binds the value of the FirstName field\n    &#39; to the FirstNameLabel Label control displayed in the template.\n    Private Sub FirstNameLabel_DataBinding(ByVal sender As Object, ByVal e As EventArgs)\n\n      &#39; Use the sender parameter to retrieve the Label control\n      &#39; being bound to data.\n      Dim firstNameLabelControl As Label = CType(sender, Label)\n\n      &#39; Retrieve the value to bind to the Label control. First,\n      &#39; use the NamingContainer property to retrieve the parent \n      &#39; control of the Label control. In this example, the parent \n      &#39; control is the FormView control.\n      Dim formViewContainer As FormView = CType(firstNameLabelControl.NamingContainer, FormView)\n      \n      &#39; Get the data item bound to the FormView control.\n      Dim rowView As DataRowView = CType(formViewContainer.DataItem, DataRowView)\n\n      &#39; Use the data item to retrieve the value of the FirstName field.\n      &#39; Set the Text property of the Label control to this value.        \n      firstNameLabelControl.Text = rowView(&quot;FirstName&quot;).ToString()\n  \n    End Sub\n\n    &#39; This event handler binds the value of the LastName field\n    &#39; to the LastNameLabel Label control displayed in the template.\n    Private Sub LastNameLabel_DataBinding(ByVal sender As Object, ByVal e As EventArgs)\n\n      &#39; Use the sender parameter to retrieve the Label control\n      &#39; being bound to data.\n      Dim lastNameLabelControl As Label = CType(sender, Label)\n\n      &#39; Retrieve the value to bind to the Label control. First,\n      &#39; use the NamingContainer property to retrieve the parent \n      &#39; control of the Label control. In this example, the parent \n      &#39; control is the FormView control.\n      Dim formViewContainer As FormView = CType(lastNameLabelControl.NamingContainer, FormView)\n\n      &#39; Get the data item bound to the FormView control.\n      Dim rowView As DataRowView = CType(formViewContainer.DataItem, DataRowView)\n\n      &#39; Use the data item to retrieve the value of the LastName field.\n      &#39; Set the Text property of the Label control to this value.         \n      lastNameLabelControl.Text = rowView(&quot;LastName&quot;).ToString()\n    \n    End Sub\n\n  End Class\n  \n  &#39; This template class represents the insert item\n  &#39; template for a FormView control.\n  Private NotInheritable Class EmployeeInsertItemTemplate\n    Implements ITemplate\n\n    Sub InstantiateIn(ByVal container As Control) Implements ITemplate.InstantiateIn\n      \n      &#39; Create the child controls contained in the template.\n      &#39; The insert item template should contain the input \n      &#39; controls for the user to enter a record.\n      Dim firstNameTextBox As New TextBox()\n      firstNameTextBox.ID = &quot;FirstNameTextBox&quot;\n\n      Dim nameLineBreak As New LiteralControl(&quot;&lt;br/&gt;&quot;)\n      Dim buttonLineBreak As New LiteralControl(&quot;&lt;br/&gt;&quot;)\n\n      Dim lastNameTextBox As New TextBox()\n      lastNameTextBox.ID = &quot;LastNameTextBox&quot;\n\n      Dim insertButton As New Button()\n      insertButton.ID = &quot;InsertButton&quot;\n      insertButton.CommandName = &quot;Insert&quot;\n      insertButton.Text = &quot;Insert&quot;\n\n      Dim cancelButton As New Button()\n      cancelButton.ID = &quot;CancelButton&quot;\n      cancelButton.CommandName = &quot;Cancel&quot;\n      cancelButton.Text = &quot;Cancel&quot;\n\n      &#39; Add the controls to the Controls collection of the \n      &#39; container control.\n      container.Controls.Add(firstNameTextBox)\n      container.Controls.Add(nameLineBreak)\n      container.Controls.Add(lastNameTextBox)\n      container.Controls.Add(buttonLineBreak)\n      container.Controls.Add(insertButton)\n      container.Controls.Add(cancelButton)\n\n    End Sub\n    \n  End Class\n\n  Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)\n\n    &#39; Create a new FormView object.\n    Dim employeesFormView As New FormView()\n\n    &#39; Set the FormView object&#39;s properties.\n    employeesFormView.ID = &quot;EmployeesFormView&quot;\n    employeesFormView.DataSourceID = &quot;EmployeeSource&quot;\n    employeesFormView.AllowPaging = True\n    employeesFormView.HeaderText = &quot;Employee Name&quot;\n    \n    Dim keyArray() As String = {&quot;EmployeeID&quot;}\n    employeesFormView.DataKeyNames = keyArray\n\n    &#39; Programmatically register the event handlers for the \n    &#39; FormView control.\n    AddHandler employeesFormView.ItemInserted, AddressOf EmployeeFormView_ItemInserted\n    AddHandler employeesFormView.ItemInserting, AddressOf EmployeeFormView_ItemInserting\n\n    &#39; Create the dynamic templates using the custom template classes.\n    employeesFormView.ItemTemplate = New EmployeeItemTemplate()\n    employeesFormView.InsertItemTemplate = New EmployeeInsertItemTemplate()\n    \n    &#39; Add the FormView object to the Controls collection\n    &#39; of the PlaceHolder control.\n    FormViewPlaceHolder.Controls.Add(employeesFormView)\n\n  End Sub\n\n  Sub EmployeeFormView_ItemInserting(ByVal sender As Object, ByVal e As FormViewInsertEventArgs)\n    \n    &#39; Because the FormView control is dynamically generated, \n    &#39; the Values collection must be programmatically populated\n    &#39; with the values for the record to insert.\n\n    &#39; Use the sender argument to retrieve the FormView\n    &#39; control that raised the event.\n    Dim employeeFormView As FormView = CType(sender, FormView)\n    \n    &#39; Retrieve the data row from the FormView control.\n    Dim row As FormViewRow = employeeFormView.Row\n\n    &#39; Retrieve the TextBox controls that contain the values \n    &#39; entered by the user for the new record. \n    Dim firstNameTextBox As TextBox = CType(row.FindControl(&quot;FirstNameTextBox&quot;), TextBox)\n    Dim lastNameTextBox As TextBox = CType(row.FindControl(&quot;LastNameTextBox&quot;), TextBox)\n\n    If firstNameTextBox IsNot Nothing And lastNameTextBox IsNot Nothing Then\n    \n      &#39; Add the new values to the Values collections.\n      e.Values.Add(&quot;FirstName&quot;, firstNameTextBox.Text)\n      e.Values.Add(&quot;LastName&quot;, lastNameTextBox.Text)\n      \n    End If\n\n  End Sub\n\n  Sub EmployeeFormView_ItemInserted(ByVal sender As Object, ByVal e As FormViewInsertedEventArgs)\n  \n    &#39; Use the Exception property to determine whether an exception\n    &#39; occurred during the insert operation.\n    If e.Exception Is Nothing Then\n    \n      &#39; Use the AffectedRows property to determine whether the\n      &#39; record was inserted. Sometimes an error might occur that \n      &#39; does not raise an exception, but prevents the insert\n      &#39; operation from completing.\n      If e.AffectedRows = 1 Then\n      \n        MessageLabel.Text = &quot;Record inserted successfully.&quot;\n      \n      Else\n      \n        MessageLabel.Text = &quot;An error occurred during the insert operation.&quot;\n        \n        &#39; Use the KeepInInsertMode property to keep the control in insert  \n        &#39; mode when an error occurs during the insert operation.\n        e.KeepInInsertMode = True\n      \n      End If\n    \n    Else\n    \n      &#39; Insert the code to handle the exception.\n      MessageLabel.Text = e.Exception.Message\n      \n      &#39; Use the ExceptionHandled property to indicate that the \n      &#39; exception has already been handled.\n      e.ExceptionHandled = True\n      e.KeepInInsertMode = True\n    \n    End If\n        \n  End Sub\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;FormView Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;FormView Example&lt;/h3&gt;\n      \n      &lt;!-- Use a PlaceHolder control as the container for the --&gt;\n      &lt;!-- dynamically generated FormView control.            --&gt;       \n      &lt;asp:placeholder id=&quot;FormViewPlaceHolder&quot;\n        runat=&quot;server&quot;/&gt;\n      \n      &lt;br/&gt;&lt;br/&gt;\n      \n      &lt;asp:label id=&quot;MessageLabel&quot;\n        forecolor=&quot;Red&quot;\n        runat=&quot;server&quot;/&gt;\n\n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the Web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;EmployeeSource&quot;\n        selectcommand=&quot;Select [EmployeeID], [LastName], [FirstName] From [Employees]&quot;\n        insertcommand=&quot;Insert Into [Employees] ([LastName], [FirstName]) VALUES (@LastName, @FirstName)&quot;\n        connectionstring=&quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n            \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"FormViewInsertedEventHandler#1\">\n&lt;%@ Page language=&quot;C#&quot; %&gt;\n&lt;%@ import namespace=&quot;System.Data&quot;%&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  // To dynamically create a template for a FormView control,\n  // you must create a custom template class to represent \n  // the template. This template class represents the item\n  // template for a FormView control.\n  private sealed class EmployeeItemTemplate : ITemplate\n  {\n\n    // When implementing the ITemplate interface, you must\n    // implement the InstantiateIn method. The FormView\n    // control calls this method to create the template&#39;s \n    // content. \n    void ITemplate.InstantiateIn(Control container)\n    {\n      // Create the child controls contained in the template.\n      // For this example, the item template displays the\n      // FirstName and LastName fields from the data source.\n      // To support data binding, create event handlers \n      // for the DataBinding event of each child control.\n      // The event handlers must bind the appropriate value \n      // to each control.\n      Label firstNameLabel = new Label();\n      firstNameLabel.ID = &quot;FirstNameLabel&quot;;\n      firstNameLabel.DataBinding += new EventHandler(FirstNameLabel_DataBinding);\n\n      LiteralControl nameLineBreak = new LiteralControl(&quot;&lt;br/&gt;&quot;);\n      LiteralControl buttonLineBreak = new LiteralControl(&quot;&lt;br/&gt;&quot;);\n\n      Label lastNameLabel = new Label();\n      lastNameLabel.ID = &quot;LastNameLabel&quot;;\n      lastNameLabel.DataBinding += new EventHandler(LastNameLabel_DataBinding);\n\n      Button newButton = new Button();\n      newButton.ID = &quot;NewButton&quot;;\n      newButton.CommandName = &quot;New&quot;;\n      newButton.Text = &quot;New&quot;;\n\n      // Add the controls to the Controls collection of the \n      // container control.\n      container.Controls.Add(firstNameLabel);\n      container.Controls.Add(nameLineBreak);\n      container.Controls.Add(lastNameLabel);\n      container.Controls.Add(buttonLineBreak);\n      container.Controls.Add(newButton);\n\n    }\n\n    // This event handler binds the value of the FirstName field\n    // to the FirstNameLabel Label control displayed in the template.\n    private void FirstNameLabel_DataBinding(Object sender, EventArgs e)\n    {\n      // Use the sender parameter to retrieve the Label control\n      // being bound to data.\n      Label firstNameLabelControl = (Label)sender;\n\n      // Retrieve the value to bind to the Label control. First,\n      // use the NamingContainer property to retrieve the parent \n      // control of the Label control. In this example, the parent \n      // control is the FormView control.\n      FormView formViewContainer = (FormView)firstNameLabelControl.NamingContainer;\n\n      // Get the data item bound to the FormView control.\n      DataRowView rowView = (DataRowView)formViewContainer.DataItem;\n\n      // Use the data item to retrieve the value of the FirstName field.\n      // Set the Text property of the Label control to this value.        \n      firstNameLabelControl.Text = rowView[&quot;FirstName&quot;].ToString();\n    }\n\n    // This event handler binds the value of the LastName field\n    // to the LastNameLabel Label control displayed in the template.\n    private void LastNameLabel_DataBinding(Object sender, EventArgs e)\n    {\n      // Use the sender parameter to retrieve the Label control\n      // being bound to data.\n      Label lastNameLabelControl = (Label)sender;\n\n      // Retrieve the value to bind to the Label control. First,\n      // use the NamingContainer property to retrieve the parent \n      // control of the Label control. In this example, the parent \n      // control is the FormView control.\n      FormView formViewContainer = (FormView)lastNameLabelControl.NamingContainer;\n\n      // Get the data item bound to the FormView control.\n      DataRowView rowView = (DataRowView)formViewContainer.DataItem;\n\n      // Use the data item to retrieve the value of the LastName field.\n      // Set the Text property of the Label control to this value.         \n      lastNameLabelControl.Text = rowView[&quot;LastName&quot;].ToString();\n    }\n\n  }\n  \n  // This template class represents the insert item\n  // template for a FormView control.\n  private sealed class EmployeeInsertItemTemplate : ITemplate\n  {\n\n    void ITemplate.InstantiateIn(Control container)\n    {\n      // Create the child controls contained in the template.\n      // The insert item template should contain the input \n      // controls for the user to enter a record.\n      TextBox firstNameTextBox = new TextBox();\n      firstNameTextBox.ID = &quot;FirstNameTextBox&quot;;\n\n      LiteralControl nameLineBreak = new LiteralControl(&quot;&lt;br/&gt;&quot;);\n      LiteralControl buttonLineBreak = new LiteralControl(&quot;&lt;br/&gt;&quot;);\n\n      TextBox lastNameTextBox = new TextBox();\n      lastNameTextBox.ID = &quot;LastNameTextBox&quot;;\n\n      Button insertButton = new Button();\n      insertButton.ID = &quot;InsertButton&quot;;\n      insertButton.CommandName = &quot;Insert&quot;;\n      insertButton.Text = &quot;Insert&quot;;\n\n      Button cancelButton = new Button();\n      cancelButton.ID = &quot;CancelButton&quot;;\n      cancelButton.CommandName = &quot;Cancel&quot;;\n      cancelButton.Text = &quot;Cancel&quot;;\n\n      // Add the controls to the Controls collection of the \n      // container control.\n      container.Controls.Add(firstNameTextBox);\n      container.Controls.Add(nameLineBreak);\n      container.Controls.Add(lastNameTextBox);\n      container.Controls.Add(buttonLineBreak);\n      container.Controls.Add(insertButton);\n      container.Controls.Add(cancelButton);\n\n    }\n  }\n\n  void Page_Load(Object sender, EventArgs e)\n  {\n\n    // Create a new FormView object.\n    FormView employeesFormView = new FormView();\n\n    // Set the FormView object&#39;s properties.\n    employeesFormView.ID = &quot;EmployeesFormView&quot;;\n    employeesFormView.DataSourceID = &quot;EmployeeSource&quot;;\n    employeesFormView.AllowPaging = true;\n    employeesFormView.HeaderText = &quot;Employee Name&quot;;\n    employeesFormView.DataKeyNames = new String[1] { &quot;EmployeeID&quot; };\n\n    // Programmatically register the event handlers for the \n    // the FormView control.\n    employeesFormView.ItemInserted += new FormViewInsertedEventHandler(EmployeeFormView_ItemInserted);\n    employeesFormView.ItemInserting += new FormViewInsertEventHandler(EmployeeFormView_ItemInserting);\n\n    // Create the dynamic templates using the custom template classes.\n    employeesFormView.ItemTemplate = new EmployeeItemTemplate();\n    employeesFormView.InsertItemTemplate = new EmployeeInsertItemTemplate();\n    \n    // Add the FormView object to the Controls collection\n    // of the PlaceHolder control.\n    FormViewPlaceHolder.Controls.Add(employeesFormView);\n\n  }\n\n  void EmployeeFormView_ItemInserting(Object sender, FormViewInsertEventArgs e)\n  {\n    \n    // Because the FormView control is dynamically generated, \n    // the Values collection must be programmatically populated\n    // with the values for the record to insert.\n\n    // Use the sender argument to retrieve the FormView\n    // control that raised the event.\n    FormView employeeFormView = (FormView)sender;\n    \n    // Retrieve the data row from the FormView control.\n    FormViewRow row = employeeFormView.Row;\n\n    // Retrieve the TextBox controls that contain the values \n    // entered by the user for the new record. \n    TextBox firstNameTextBox = (TextBox)row.FindControl(&quot;FirstNameTextBox&quot;);\n    TextBox lastNameTextBox = (TextBox)row.FindControl(&quot;LastNameTextBox&quot;);\n\n    if (firstNameTextBox != null &amp;&amp; lastNameTextBox != null)\n    {\n      // Add the new values to the Values collections.\n      e.Values.Add(&quot;FirstName&quot;, firstNameTextBox.Text);\n      e.Values.Add(&quot;LastName&quot;, lastNameTextBox.Text);\n    }\n\n  }\n\n  void EmployeeFormView_ItemInserted(Object sender, FormViewInsertedEventArgs e)\n  {\n    // Use the Exception property to determine whether an exception\n    // occurred during the insert operation.\n    if (e.Exception == null)\n    {\n      // Use the AffectedRows property to determine whether the\n      // record was inserted. Sometimes an error might occur that \n      // does not raise an exception, but prevents the insert\n      // operation from completing.\n      if (e.AffectedRows == 1)\n      {\n        MessageLabel.Text = &quot;Record inserted successfully.&quot;;\n      }\n      else\n      {\n        MessageLabel.Text = &quot;An error occurred during the insert operation.&quot;;\n        \n        // Use the KeepInInsertMode property to keep the control in \n        // insert mode when an error occurs during the insert operation.\n        e.KeepInInsertMode = true;\n      }\n    }\n    else\n    {\n      // Insert the code to handle the exception.\n      MessageLabel.Text = e.Exception.Message;\n      \n      // Use the ExceptionHandled property to indicate that the \n      // exception has already been handled.\n      e.ExceptionHandled = true;\n      e.KeepInInsertMode = true;\n    }\n  }\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;FormView Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;FormView Example&lt;/h3&gt;\n      \n      &lt;!-- Use a PlaceHolder control as the container for the --&gt;\n      &lt;!-- dynamically generated FormView control.            --&gt;       \n      &lt;asp:placeholder id=&quot;FormViewPlaceHolder&quot;\n        runat=&quot;server&quot;/&gt;\n      \n      &lt;br/&gt;&lt;br/&gt;\n      \n      &lt;asp:label id=&quot;MessageLabel&quot;\n        forecolor=&quot;Red&quot;\n        runat=&quot;server&quot;/&gt;\n\n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the Web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;EmployeeSource&quot;\n        selectcommand=&quot;Select [EmployeeID], [LastName], [FirstName] From [Employees]&quot;\n        insertcommand=&quot;Insert Into [Employees] ([LastName], [FirstName]) VALUES (@LastName, @FirstName)&quot;\n        connectionstring=&quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n            \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p> The following example demonstrates how to declaratively add a FormViewInsertEventHandler delegate to the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_ItemInserting\" data-linktype=\"relative-path\">ItemInserting</a> event of a <a class=\"xref\" href=\"system.web.ui.webcontrols.formview\" data-linktype=\"relative-path\">FormView</a> control.  </p>\n<pre><code class=\"lang-vb\" name=\"FormViewInsertEventArgs#1\">\n&lt;%@ Page language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Sub EmployeeFormView_ItemInserting(ByVal sender As Object, ByVal e As FormViewInsertEventArgs)\n\n    MessageLabel.Text = &quot;&quot;\n\n    &#39; Iterate through the items in the Values collection\n    &#39; and verify that the user entered a value for each \n    &#39; text box displayed in the insert item template. Cancel\n    &#39; the insert operation if the user left a text box empty.\n    \n    &#39; In Visual Basic, the DictionaryItem objects contained in \n    &#39; the Values collection must be copied to an array before\n    &#39; you can iterate through the collection.\n    Dim itemArray(e.Values.Count - 1) As DictionaryEntry\n    e.Values.CopyTo(itemArray, 0)\n    \n    Dim entry As DictionaryEntry\n    For Each entry In itemArray\n    \n      If entry.Value.Equals(&quot;&quot;) Then\n      \n        &#39; Use the Cancel property to cancel the \n        &#39; insert operation.\n        e.Cancel = True\n\n        MessageLabel.Text &amp;= &quot;Please enter a value for the &quot; &amp; _\n          entry.Key.ToString() &amp; &quot; field.&lt;br/&gt;&quot;\n      \n      End If\n      \n    Next\n    \n  End Sub\n\n  Sub EmployeeFormView_ModeChanged(ByVal sender As Object, ByVal e As EventArgs)\n  \n    &#39; Clear the MessageLabel Label control when the FormView\n    &#39; control changes modes.\n    MessageLabel.Text = &quot;&quot;\n  \n  End Sub\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;FormViewInsertEventArgs Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;FormViewInsertEventArgs Example&lt;/h3&gt;\n                       \n      &lt;asp:formview id=&quot;EmployeeFormView&quot;\n        datasourceid=&quot;EmployeeSource&quot;\n        allowpaging=&quot;true&quot;\n        datakeynames=&quot;EmployeeID&quot;\n        emptydatatext=&quot;No employees found.&quot;\n        oniteminserting=&quot;EmployeeFormView_ItemInserting&quot;\n        onmodechanged=&quot;EmployeeFormView_ModeChanged&quot;\n        runat=&quot;server&quot;&gt;\n\n        &lt;itemtemplate&gt;\n          &lt;table&gt;\n            &lt;tr&gt;\n              &lt;td rowspan=&quot;5&quot;&gt;\n                &lt;asp:image id=&quot;CompanyLogoImage&quot;\n                  imageurl=&quot;~/Images/Logo.jpg&quot;\n                  alternatetext=&quot;Company logo&quot;\n                  runat=&quot;server&quot;/&gt;\n              &lt;/td&gt;\n              &lt;td colspan=&quot;2&quot;&gt;\n                  &amp;nbsp; \n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n              &lt;td&gt;\n                &lt;b&gt;Name:&lt;/b&gt;\n              &lt;/td&gt;\n              &lt;td&gt;\n                &lt;%# Eval(&quot;FirstName&quot;) %&gt; &lt;%# Eval(&quot;LastName&quot;) %&gt;\n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n              &lt;td&gt;\n                &lt;b&gt;Title:&lt;/b&gt;\n              &lt;/td&gt;\n              &lt;td&gt;\n                &lt;%# Eval(&quot;Title&quot;) %&gt;\n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n              &lt;td colspan=&quot;2&quot;&gt;\n                &lt;asp:linkbutton id=&quot;NewButton&quot;\n                  text=&quot;New&quot;\n                  commandname=&quot;New&quot;\n                  runat=&quot;server&quot;/&gt; \n              &lt;/td&gt;\n            &lt;/tr&gt;\n          &lt;/table&gt;       \n        &lt;/itemtemplate&gt;\n        &lt;insertitemtemplate&gt;\n          &lt;table&gt;\n            &lt;tr&gt;\n              &lt;td rowspan=&quot;4&quot;&gt;\n                &lt;asp:image id=&quot;CompanyLogoEditImage&quot;\n                  imageurl=&quot;~/Images/Logo.jpg&quot;\n                  alternatetext=&quot;Company logo&quot;\n                  runat=&quot;server&quot;/&gt;\n              &lt;/td&gt;\n              &lt;td colspan=&quot;2&quot;&gt;\n                  &amp;nbsp; \n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n              &lt;td&gt;\n                &lt;b&gt;&lt;asp:Label\n                  runat=&quot;server&quot; \n                  AssociatedControlID=&quot;FirstNameInsertTextBox&quot; \n                  Text=&quot;Name&quot; /&gt;:&lt;/b&gt;\n              &lt;/td&gt;\n              &lt;td&gt;\n                &lt;asp:textbox id=&quot;FirstNameInsertTextBox&quot;\n                  text=&#39;&lt;%# Bind(&quot;FirstName&quot;) %&gt;&#39;\n                  runat=&quot;server&quot;/&gt;\n                &lt;asp:textbox id=&quot;LastNameInsertTextBox&quot;\n                  text=&#39;&lt;%# Bind(&quot;LastName&quot;) %&gt;&#39;\n                  runat=&quot;server&quot;/&gt;\n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n              &lt;td&gt;\n                &lt;b&gt;&lt;asp:Label\n                  runat=&quot;server&quot; \n                  AssociatedControlID=&quot;TitleInsertTextBox&quot; \n                  Text=&quot;Title&quot; /&gt;:&lt;/b&gt;\n              &lt;/td&gt;\n              &lt;td&gt;\n                &lt;asp:textbox id=&quot;TitleInsertTextBox&quot;\n                  text=&#39;&lt;%# Bind(&quot;Title&quot;) %&gt;&#39;\n                  runat=&quot;server&quot;/&gt; \n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n              &lt;td colspan=&quot;2&quot;&gt;\n                &lt;asp:linkbutton id=&quot;InsertButton&quot;\n                  text=&quot;Insert&quot;\n                  commandname=&quot;Insert&quot;\n                  runat=&quot;server&quot;/&gt;\n                &lt;asp:linkbutton id=&quot;CancelButton&quot;\n                  text=&quot;Cancel&quot;\n                  commandname=&quot;Cancel&quot;\n                  runat=&quot;server&quot;/&gt; \n              &lt;/td&gt;\n            &lt;/tr&gt;\n          &lt;/table&gt;       \n        &lt;/insertitemtemplate&gt; \n                  \n      &lt;/asp:formview&gt;\n      \n      &lt;br/&gt;&lt;br/&gt;\n      \n      &lt;asp:label id=&quot;MessageLabel&quot;\n        forecolor=&quot;Red&quot;\n        runat=&quot;server&quot;/&gt;\n\n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the Web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;EmployeeSource&quot;\n        selectcommand=&quot;Select [EmployeeID], [LastName], [FirstName], [Title], [PhotoPath] From [Employees]&quot;\n        insertcommand=&quot;Insert Into [Employees] ([LastName], [FirstName], [Title]) VALUES (@LastName, @FirstName, @Title)&quot;\n        connectionstring=&quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n            \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"FormViewInsertEventArgs#1\">\n&lt;%@ Page language=&quot;C#&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  void EmployeeFormView_ItemInserting(Object sender, FormViewInsertEventArgs e)\n  {\n\n    MessageLabel.Text = &quot;&quot;;\n\n    // Iterate through the items in the Values collection\n    // and verify that the user entered a value for each \n    // text box displayed in the insert item template. Cancel\n    // the insert operation if the user left a text box empty.\n    foreach (DictionaryEntry entry in e.Values)\n    {\n      if (entry.Value.Equals(&quot;&quot;))\n      {\n        // Use the Cancel property to cancel the \n        // insert operation.\n        e.Cancel = true;\n\n        MessageLabel.Text += &quot;Please enter a value for the &quot; +\n          entry.Key.ToString() + &quot; field.&lt;br/&gt;&quot;;\n\n      }\n    }\n  }\n\n  void EmployeeFormView_ModeChanged(Object sender, EventArgs e)\n  {\n    // Clear the MessageLabel Label control when the FormView\n    // control changes modes.\n    MessageLabel.Text = &quot;&quot;;\n  }\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;FormViewInsertEventArgs Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;FormViewInsertEventArgs Example&lt;/h3&gt;\n                       \n      &lt;asp:formview id=&quot;EmployeeFormView&quot;\n        datasourceid=&quot;EmployeeSource&quot;\n        allowpaging=&quot;true&quot;\n        datakeynames=&quot;EmployeeID&quot;\n        emptydatatext=&quot;No employees found.&quot;\n        oniteminserting=&quot;EmployeeFormView_ItemInserting&quot;\n        onmodechanged=&quot;EmployeeFormView_ModeChanged&quot;\n        runat=&quot;server&quot;&gt;\n\n        &lt;itemtemplate&gt;\n          &lt;table&gt;\n            &lt;tr&gt;\n              &lt;td rowspan=&quot;5&quot;&gt;\n                &lt;asp:image id=&quot;CompanyLogoImage&quot;\n                  imageurl=&quot;~/Images/Logo.jpg&quot;\n                  alternatetext=&quot;Company logo&quot;\n                  runat=&quot;server&quot;/&gt;\n              &lt;/td&gt;\n              &lt;td colspan=&quot;2&quot;&gt;\n                  &amp;nbsp; \n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n              &lt;td&gt;\n                &lt;b&gt;Name:&lt;/b&gt;\n              &lt;/td&gt;\n              &lt;td&gt;\n                &lt;%# Eval(&quot;FirstName&quot;) %&gt; &lt;%# Eval(&quot;LastName&quot;) %&gt;\n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n              &lt;td&gt;\n                &lt;b&gt;Title:&lt;/b&gt;\n              &lt;/td&gt;\n              &lt;td&gt;\n                &lt;%# Eval(&quot;Title&quot;) %&gt;\n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n              &lt;td colspan=&quot;2&quot;&gt;\n                &lt;asp:linkbutton id=&quot;NewButton&quot;\n                  text=&quot;New&quot;\n                  commandname=&quot;New&quot;\n                  runat=&quot;server&quot;/&gt; \n              &lt;/td&gt;\n            &lt;/tr&gt;\n          &lt;/table&gt;       \n        &lt;/itemtemplate&gt;\n        &lt;insertitemtemplate&gt;\n          &lt;table&gt;\n            &lt;tr&gt;\n              &lt;td rowspan=&quot;4&quot;&gt;\n                &lt;asp:image id=&quot;CompanyLogoEditImage&quot;\n                  imageurl=&quot;~/Images/Logo.jpg&quot;\n                  alternatetext=&quot;Company logo&quot;\n                  runat=&quot;server&quot;/&gt;\n              &lt;/td&gt;\n              &lt;td colspan=&quot;2&quot;&gt;\n                  &amp;nbsp; \n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n              &lt;td&gt;\n                &lt;b&gt;&lt;asp:Label\n                  runat=&quot;server&quot; \n                  AssociatedControlID=&quot;FirstNameInsertTextBox&quot; \n                  Text=&quot;Name&quot; /&gt;:&lt;/b&gt;\n              &lt;/td&gt;\n              &lt;td&gt;\n                &lt;asp:textbox id=&quot;FirstNameInsertTextBox&quot;\n                  text=&#39;&lt;%# Bind(&quot;FirstName&quot;) %&gt;&#39;\n                  runat=&quot;server&quot;/&gt;\n                &lt;asp:textbox id=&quot;LastNameInsertTextBox&quot;\n                  text=&#39;&lt;%# Bind(&quot;LastName&quot;) %&gt;&#39;\n                  runat=&quot;server&quot;/&gt;\n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n              &lt;td&gt;\n                &lt;b&gt;&lt;asp:Label\n                  runat=&quot;server&quot; \n                  AssociatedControlID=&quot;TitleInsertTextBox&quot; \n                  Text=&quot;Title&quot; /&gt;:&lt;/b&gt;\n              &lt;/td&gt;\n              &lt;td&gt;\n                &lt;asp:textbox id=&quot;TitleInsertTextBox&quot;\n                  text=&#39;&lt;%# Bind(&quot;Title&quot;) %&gt;&#39;\n                  runat=&quot;server&quot;/&gt; \n              &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n              &lt;td colspan=&quot;2&quot;&gt;\n                &lt;asp:linkbutton id=&quot;InsertButton&quot;\n                  text=&quot;Insert&quot;\n                  commandname=&quot;Insert&quot;\n                  runat=&quot;server&quot;/&gt;\n                &lt;asp:linkbutton id=&quot;CancelButton&quot;\n                  text=&quot;Cancel&quot;\n                  commandname=&quot;Cancel&quot;\n                  runat=&quot;server&quot;/&gt; \n              &lt;/td&gt;\n            &lt;/tr&gt;\n          &lt;/table&gt;       \n        &lt;/insertitemtemplate&gt; \n                  \n      &lt;/asp:formview&gt;\n      \n      &lt;br/&gt;&lt;br/&gt;\n      \n      &lt;asp:label id=&quot;MessageLabel&quot;\n        forecolor=&quot;Red&quot;\n        runat=&quot;server&quot;/&gt;\n\n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the Web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;EmployeeSource&quot;\n        selectcommand=&quot;Select [EmployeeID], [LastName], [FirstName], [Title], [PhotoPath] From [Employees]&quot;\n        insertcommand=&quot;Insert Into [Employees] ([LastName], [FirstName], [Title]) VALUES (@LastName, @FirstName, @Title)&quot;\n        connectionstring=&quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n            \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The <a class=\"xref\" href=\"system.web.ui.webcontrols.formview\" data-linktype=\"relative-path\">FormView</a> control raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview#System_Web_UI_WebControls_FormView_ItemInserting\" data-linktype=\"relative-path\">ItemInserting</a> event when an Insert button (a button with its <code>CommandName</code> property set to &quot;Insert&quot;) within the control is clicked, but before the <a class=\"xref\" href=\"system.web.ui.webcontrols.formview\" data-linktype=\"relative-path\">FormView</a> control inserts the record. This allows you to provide an event-handling method that performs a custom routine, such as HTML encoding or validating the values of a record before inserting it in the data source, whenever this event occurs.  </p>\n<p> When you create a FormViewInsertEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see <a href=\"http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115\" data-linktype=\"external\">NIB: Events and Delegates</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.FormViewInsertEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.FormViewInsertEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.FormViewInsertEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.FormViewInsertEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.FormViewInsertEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.FormViewInsertEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-24 01:41 AM\">\r\n<meta name=\"document_id\" content=\"0399be24-6bfa-da1c-f5f9-556ee4d7bd20\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that handles the  event of a  control.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.web.ui.webcontrols/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.WebControls.FormViewInsertEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.FormViewInsertEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Web.UI.WebControls.FormViewInsertEventHandler","System.Web.UI.WebControls.FormViewInsertEventHandler..ctor","System.Web.UI.WebControls.FormViewInsertEventHandler.Invoke","System.Web.UI.WebControls.FormViewInsertEventHandler.BeginInvoke","System.Web.UI.WebControls.FormViewInsertEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.WebControls.FormViewInsertEventHandler","System::Web::UI::WebControls::FormViewInsertEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-24 01:41 AM","document_id":"0399be24-6bfa-da1c-f5f9-556ee4d7bd20","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/FormViewInsertEventHandler.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"FormViewInsertEventHandler delegate | Microsoft Docs","_op_ogTitle":"FormViewInsertEventHandler delegate","description":"Represents the method that handles the  event of a  control.\n","toc_asset_id":"api/_splitted/System.Web.UI.WebControls/toc.json","toc_rel":"_splitted/System.Web.UI.WebControls/toc.json","source_url":"","ms.assetid":"System.Web.UI.WebControls.FormViewInsertEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.formviewinserteventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.formviewinserteventhandler","fileRelativePath":"api/System.Web.UI.WebControls.FormViewInsertEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}