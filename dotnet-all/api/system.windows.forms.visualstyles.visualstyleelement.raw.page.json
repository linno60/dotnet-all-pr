{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">VisualStyleElement</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Identifies a control or user interface (UI) element that is drawn with visual styles.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class VisualStyleElement</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">VisualStyleElement</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example is a complete application that provides a UI for browsing and drawing all of the VisualStyleElement objects exposed by the <a class=\"xref\" href=\"system.windows.forms.visualstyles\" data-linktype=\"relative-path\">System.Windows.Forms.VisualStyles</a> namespace. To view an element, use the <a class=\"xref\" href=\"system.windows.forms.listview\" data-linktype=\"relative-path\">ListView</a> control on the left side of the window to navigate to the node that represents the state of the element you want to draw, and then click the node. This sample will draw the selected element only if the element is defined by the current visual style.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.VisualStyles.VisualStyleElement#0\">#using &lt;System.Drawing.dll&gt;\n#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Text;\nusing namespace System::Drawing;\nusing namespace System::Collections::Generic;\nusing namespace System::Reflection;\nusing namespace System::Windows::Forms;\nusing namespace System::Windows::Forms::VisualStyles;\n\nnamespace VisualStyleElementViewer\n{\n    public ref class ElementViewer : public UserControl\n    {\n    private:\n        VisualStyleElement^ element;\n        VisualStyleRenderer^ renderer;\n        Dictionary&lt;String^, VisualStyleElement^&gt;^ elementDictionary;\n        Rectangle descriptionRect;\n        Rectangle displayRect;\n        Rectangle displayRectFull;\n        System::Drawing::Size currentTrueSize;\n        StringBuilder^ elementDescription;\n        Label^ infoLabel;\n        TreeView^ treeView;\n        DomainUpDown^ domainUpDown;\n        bool drawElement;\n\n    public:\n        ElementViewer():UserControl()\n        {\n            elementDictionary = \n                gcnew Dictionary&lt;String^, VisualStyleElement^&gt;();\n            currentTrueSize = System::Drawing::Size();\n            elementDescription = gcnew StringBuilder();\n            infoLabel = gcnew Label();\n            treeView = gcnew TreeView();\n            domainUpDown = gcnew DomainUpDown();\n\n            this-&gt;Location = Point(10, 10);\n            this-&gt;Size = System::Drawing::Size(650, 500);\n            this-&gt;Text = &quot;VisualStyleElement Viewer&quot;;\n            this-&gt;Font = SystemFonts::IconTitleFont;\n            this-&gt;BackColor = Color::White;\n            this-&gt;BorderStyle = System::Windows::Forms::BorderStyle::Fixed3D;\n            this-&gt;AutoSize = true;\n            this-&gt;Load += gcnew EventHandler(this, \n                &amp;ElementViewer::ElementViewer_Load);\n        }\n\n    private:\n        void ElementViewer_Load(Object^ sender, EventArgs^ e)\n        {\n            // Make sure the visual styles are enabled before\n            // going any further.\n            if (!Application::RenderWithVisualStyles)\n            {\n                return;\n            }\n\n            infoLabel-&gt;Location = Point(320, 10);\n            infoLabel-&gt;Size = System::Drawing::Size(300, 60);\n            infoLabel-&gt;Text = &quot;Expand the element class nodes &quot; +\n                &quot;in the tree view to access visual style elements. &quot; +\n                &quot;Click an element name to draw the element below. To &quot; +\n                &quot;change the size of a resizable element, use the &quot; +\n                &quot;spin control.&quot;;\n\n            domainUpDown-&gt;Location = Point(320, 80);\n            domainUpDown-&gt;Size = System::Drawing::Size(70, 30);\n            domainUpDown-&gt;ReadOnly = true;\n            domainUpDown-&gt;Items-&gt;Add(elementSizes::Large);\n            domainUpDown-&gt;Items-&gt;Add(elementSizes::Medium);\n            domainUpDown-&gt;Items-&gt;Add(elementSizes::TrueSize);\n            domainUpDown-&gt;SelectedIndex = 2;\n            domainUpDown-&gt;SelectedItemChanged +=\n                gcnew EventHandler(this, \n                    &amp;ElementViewer::DomainUpDown_SelectedItemChanged);\n            domainUpDown-&gt;DownButton();\n\n            descriptionRect = Rectangle(320, 120, 250, 50);\n            displayRect = Rectangle(320, 160, 0, 0);\n            displayRectFull = Rectangle(320, 160, 300, 200);\n\n            // Initialize the element and renderer to known good values.\n            element = VisualStyleElement::Button::PushButton::Normal;\n            renderer = gcnew VisualStyleRenderer(element);\n\n            SetupElementCollection();\n            SetupTreeView();\n\n            this-&gt;Controls-&gt;AddRange(gcnew array&lt;Control^&gt;{treeView,\n                domainUpDown, infoLabel });\n        }\n\n        // Use reflection to build a Dictionary of all\n        // VisualStyleElement objects exposed in the\n        // System.Windows.Forms.VisualStyles namespace.\n    private:\n        void SetupElementCollection()\n        {\n            StringBuilder^ elementName = gcnew StringBuilder();\n            VisualStyleElement^ currentElement;\n            int plusSignIndex = 0;\n\n            // Get array of first-level nested types within\n            // VisualStyleElement; these are the element classes.\n            array&lt;Type^&gt;^ elementClasses =\n                VisualStyleElement::typeid-&gt;GetNestedTypes();\n\n            for each (Type^ elementClass in elementClasses)\n            {\n                // Get an array of second-level nested types within\n                // VisualStyleElement; these are the element parts.\n                array&lt;Type^&gt;^ elementParts = elementClass-&gt;GetNestedTypes();\n\n                // Get the index of the first &#39;+&#39; character in\n                // the full element class name.\n                plusSignIndex = elementClass-&gt;FullName-&gt;IndexOf(&#39;+&#39;);\n\n                for each (Type^ elementPart in elementParts)\n                {\n                    // Get an array of static property details\n                    // for  the current type. Each of these types have\n                    // properties that return VisualStyleElement objects.\n                    array&lt;PropertyInfo^&gt;^ elementProperties =\n                        elementPart-&gt;GetProperties(BindingFlags::Static |\n                        BindingFlags::Public);\n\n                    // For each property, insert the unique full element\n                    // name and the element into the collection.\n                    for each(PropertyInfo^ elementProperty in\n                        elementProperties)\n                    {\n                        // Get the element.\n                        currentElement =\n                            (VisualStyleElement^)elementProperty-&gt;\n                            GetValue(nullptr, BindingFlags::Static, nullptr,\n                            nullptr, nullptr);\n\n                        // Append the full element name.\n                        elementName-&gt;Append(elementClass-&gt;FullName,\n                            plusSignIndex + 1,\n                            elementClass-&gt;FullName-&gt;Length -\n                            plusSignIndex - 1);\n                        elementName-&gt;Append(&quot;.&quot; +\n                            elementPart-&gt;Name + &quot;.&quot; +\n                            elementProperty-&gt;Name);\n\n                        // Add the element and element name to\n                        // the Dictionary.\n                        elementDictionary-&gt;Add(elementName-&gt;ToString(),\n                            currentElement);\n\n                        // Clear the element name for the\n                        // next iteration.\n                        elementName-&gt;Remove(0, elementName-&gt;Length);\n                    }\n                }\n            }\n        }\n\n        // Initialize the tree view with the element names.\n    private:\n        void SetupTreeView()\n        {\n            treeView-&gt;Location = Point(10, 10);\n            treeView-&gt;Size = System::Drawing::Size(300, 450);\n            //    treeView-&gt;BorderStyle = BorderStyle.FixedSingle;\n            treeView-&gt;BackColor = Color::WhiteSmoke;\n            treeView-&gt;SelectedNode = nullptr;\n            treeView-&gt;AfterSelect +=\n                gcnew TreeViewEventHandler(this, \n                &amp;ElementViewer::TreeView_AfterSelect);\n\n            treeView-&gt;BeginUpdate();\n\n            // An index into the top-level tree nodes.\n            int nodeIndex = 0;\n\n            // An index into the first &#39;.&#39; character in an element name.\n            int firstDotIndex = 0;\n\n            // Initialize the element class name to compare\n            // with the class name of the first element\n            // in the Dictionary, and set this name to the first\n            // top-level node.\n            StringBuilder^ compareClassName =\n                gcnew StringBuilder(&quot;Button&quot;);\n            treeView-&gt;Nodes-&gt;Add(\n                gcnew TreeNode(compareClassName-&gt;ToString()));\n\n            // The current element class name.\n            StringBuilder^ currentClassName = gcnew StringBuilder();\n\n            // The text for each second-level node.\n            StringBuilder^ nodeText = gcnew StringBuilder();\n\n            for each(KeyValuePair&lt;String^, VisualStyleElement^&gt;^ entry \n                in elementDictionary)\n            {\n                // Isolate the class name of the current element.\n                firstDotIndex = entry-&gt;Key-&gt;IndexOf(&#39;.&#39;);\n                currentClassName-&gt;Append(entry-&gt;Key, 0, firstDotIndex);\n\n                // Determine whether we need to increment to the next\n                // element class.\n                if (currentClassName-&gt;ToString() !=\n                    compareClassName-&gt;ToString())\n                {\n                    // Increment the index to the next top-level node\n                    // in the tree view.\n                    nodeIndex++;\n\n                    // Get the new class name to compare with.\n                    compareClassName-&gt;Remove(0, compareClassName-&gt;Length);\n                    compareClassName-&gt;Append(entry-&gt;Key);\n                    compareClassName-&gt;Remove(firstDotIndex,\n                        compareClassName-&gt;Length - firstDotIndex);\n\n                    // Add a new top-level node to the tree view.\n                    treeView-&gt;Nodes-&gt;Add(\n                        gcnew TreeNode(compareClassName-&gt;ToString()));\n                }\n\n                // Get the text for the new second-level node.\n                nodeText-&gt;Append(entry-&gt;Key, firstDotIndex + 1,\n                    entry-&gt;Key-&gt;Length - firstDotIndex - 1);\n\n                // Create and insert the new second-level node.\n                TreeNode^ newNode = gcnew TreeNode(nodeText-&gt;ToString());\n                newNode-&gt;Name = entry-&gt;Key;\n                treeView-&gt;Nodes[nodeIndex]-&gt;Nodes-&gt;Add(newNode);\n\n                currentClassName-&gt;Remove(0, currentClassName-&gt;Length);\n                nodeText-&gt;Remove(0, nodeText-&gt;Length);\n            }\n            treeView-&gt;EndUpdate();\n        }\n\n    protected:\n        virtual void OnPaint(PaintEventArgs^ e) override\n        {\n            __super::OnPaint(e);\n\n            // Do nothing further if visual styles are disabled.\n            if (!Application::RenderWithVisualStyles)\n            {\n                this-&gt;Text = &quot;Visual styles are disabled.&quot;;\n                TextRenderer::DrawText(e-&gt;Graphics, this-&gt;Text, this-&gt;Font,\n                    this-&gt;Location, this-&gt;ForeColor);\n                return;\n            }\n\n            // Draw the element description.\n            TextRenderer::DrawText(e-&gt;Graphics, elementDescription-&gt;ToString(),\n                this-&gt;Font, descriptionRect, this-&gt;ForeColor,\n                TextFormatFlags::WordBreak);\n\n            // Draw the element, if an element is selected.\n            if (drawElement)\n            {\n                renderer-&gt;DrawBackground(e-&gt;Graphics, this-&gt;displayRect);\n            }\n        }\n\n        // Set the element to draw.\n    private:\n        void TreeView_AfterSelect(Object^ sender, TreeViewEventArgs^ e)\n        {\n            // Clear the element description.\n            elementDescription-&gt;Remove(0, elementDescription-&gt;Length);\n\n            // If the user clicked a first-level node, disable drawing.\n            if (e-&gt;Node-&gt;Nodes-&gt;Count &gt; 0)\n            {\n                drawElement = false;\n                elementDescription-&gt;Append(&quot;No element is selected&quot;);\n                domainUpDown-&gt;Enabled = false;\n            }\n\n            // The user clicked an element node.\n            else\n            {\n                // Add the element name to the description.\n                elementDescription-&gt;Append(e-&gt;Node-&gt;Text);\n\n                // Get the element that corresponds to the selected\n                // node&#39;s name.\n                String^ key = e-&gt;Node-&gt;Name;\n                element = elementDictionary[key];\n\n                // Disable resizing if the element is not defined.\n                if (!VisualStyleRenderer::IsElementDefined(element))\n                {\n                    drawElement = false;\n                    elementDescription-&gt;Append(&quot; is not defined.&quot;);\n                    domainUpDown-&gt;Enabled = false;\n                }\n                else\n                {\n                    // Set the element to the renderer.\n                    drawElement = true;\n                    renderer-&gt;SetParameters(element);\n                    elementDescription-&gt;Append(&quot; is defined.&quot;);\n\n                    // Get the system-defined size of the element.\n                    Graphics^ g = this-&gt;CreateGraphics();\n                    currentTrueSize = renderer-&gt;GetPartSize(g,\n                        ThemeSizeType::True);\n                    delete g;\n                    displayRect.Size = currentTrueSize;\n\n                    domainUpDown-&gt;Enabled = true;\n                    domainUpDown-&gt;SelectedIndex = 2;\n                }\n            }\n\n            Invalidate();\n        }\n\n        // Resize the element display area.\n    private:\n        void DomainUpDown_SelectedItemChanged(Object^ sender,\n            EventArgs^ e)\n        {\n            switch ((int)domainUpDown-&gt;SelectedItem)\n            {\n            case this-&gt;elementSizes::TrueSize:\n                displayRect.Size = currentTrueSize;\n                break;\n            case this-&gt;elementSizes::Medium:\n                displayRect.Size = \n                    System::Drawing::Size(displayRectFull.Width / 2, \n                        displayRectFull.Height / 2);\n                break;\n            case this-&gt;elementSizes::Large:\n                displayRect.Size = displayRectFull.Size;\n                break;\n            }\n\n            Invalidate();\n        }\n\n        // These values represent the options in the UpDown control.\n    private:\n        enum class elementSizes\n        {\n            TrueSize,\n            Medium,\n            Large\n        };\n    };\n    public ref class ElementViewerForm : public Form\n    {\n    public:\n        ElementViewerForm()\n        {\n            ElementViewer^ elementViewer = gcnew ElementViewer();\n            this-&gt;Controls-&gt;Add(elementViewer);\n            this-&gt;Text = elementViewer-&gt;Text;\n            this-&gt;Size = System::Drawing::Size(700, 550);\n        }\n    };\n}\n\nusing namespace VisualStyleElementViewer;\n\n[STAThread]\nint main()\n{\n    Application::EnableVisualStyles();\n    Application::Run(gcnew ElementViewerForm());\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.VisualStyles.VisualStyleElement#0\">using System;\nusing System.Text;\nusing System.Drawing;\nusing System.Collections.Generic;\nusing System.Reflection;\nusing System.Windows.Forms;\nusing System.Windows.Forms.VisualStyles;\n\nnamespace VisualStyleElementViewer\n{\n    class Form1 : Form\n    {\n        public Form1()\n        {\n            ElementViewer ElementViewer1 = new ElementViewer();\n            this.Controls.Add(ElementViewer1);\n            this.Text = ElementViewer1.Text;\n            this.Size = new Size(700, 550);\n        }\n\n        [STAThread]\n        static void Main()\n        {\n            Application.EnableVisualStyles();\n            Application.Run(new Form1());\n        }\n    }\n\n    public class ElementViewer : UserControl\n    {\n        private VisualStyleElement element;\n        private VisualStyleRenderer renderer;\n        private Dictionary&lt;string, VisualStyleElement&gt; elementDictionary =\n            new Dictionary&lt;string, VisualStyleElement&gt;();\n\n        private Rectangle descriptionRect;\n        private Rectangle displayRect;\n        private Rectangle displayRectFull;\n        private Size currentTrueSize = new Size();\n        private StringBuilder elementDescription = new StringBuilder();\n        private Label label1 = new Label();\n        private TreeView treeView1 = new TreeView();\n        private DomainUpDown domainUpDown1 = new DomainUpDown();\n        private bool drawElement = false;\n\n        public ElementViewer()\n            : base()\n        {\n            this.Location = new Point(10, 10);\n            this.Size = new Size(650, 500);\n            this.Text = &quot;VisualStyleElement Viewer&quot;;\n            this.Font = SystemFonts.IconTitleFont;\n            this.BackColor = Color.White;\n            this.BorderStyle = BorderStyle.Fixed3D;\n            this.AutoSize = true;\n            this.Load += new EventHandler(ElementViewer_Load);\n        }\n\n        void ElementViewer_Load(object sender, EventArgs e)\n        {\n            // Make sure the visual styles are enabled before \n            // going any further.\n            if (!Application.RenderWithVisualStyles)\n            {\n                return;\n            }\n\n            label1.Location = new Point(320, 10);\n            label1.Size = new Size(300, 60);\n            label1.Text = &quot;Expand the element class nodes &quot; +\n                &quot;in the tree view to access visual style elements. &quot; +\n                &quot;Click an element name to draw the element below. To &quot; +\n                &quot;change the size of a resizable element, use the &quot; +\n                &quot;spin control.&quot;;\n\n            domainUpDown1.Location = new Point(320, 80);\n            domainUpDown1.Size = new Size(70, 30);\n            domainUpDown1.ReadOnly = true;\n            domainUpDown1.Items.Add(elementSizes.Large);\n            domainUpDown1.Items.Add(elementSizes.Medium);\n            domainUpDown1.Items.Add(elementSizes.TrueSize);\n            domainUpDown1.SelectedIndex = 2;\n            domainUpDown1.SelectedItemChanged +=\n                new EventHandler(domainUpDown1_SelectedItemChanged);\n            domainUpDown1.DownButton();\n\n            descriptionRect = new Rectangle(320, 120, 250, 50);\n            displayRect = new Rectangle(320, 160, 0, 0);\n            displayRectFull = new Rectangle(320, 160, 300, 200);\n\n            // Initialize the element and renderer to known good values.\n            element = VisualStyleElement.Button.PushButton.Normal;\n            renderer = new VisualStyleRenderer(element);\n\n            SetupElementCollection();\n            SetupTreeView();\n\n            this.Controls.AddRange(new Control[] { treeView1, \n                domainUpDown1, label1 });\n        }\n\n        // Use reflection to build a Dictionary of all \n        // VisualStyleElement objects exposed in the \n        // System.Windows.Forms.VisualStyles namespace.\n        private void SetupElementCollection()\n        {\n            StringBuilder elementName = new StringBuilder();\n            VisualStyleElement currentElement;\n            int plusSignIndex = 0;\n\n            // Get array of first-level nested types within \n            // VisualStyleElement; these are the element classes.\n            Type[] elementClasses =\n                typeof(VisualStyleElement).GetNestedTypes();\n\n            foreach (Type elementClass in elementClasses)\n            {\n                // Get an array of second-level nested types within\n                // VisualStyleElement; these are the element parts.\n                Type[] elementParts = elementClass.GetNestedTypes();\n\n                // Get the index of the first &#39;+&#39; character in \n                // the full element class name.\n                plusSignIndex = elementClass.FullName.IndexOf(&#39;+&#39;);\n\n                foreach (Type elementPart in elementParts)\n                {\n                    // Get an array of static property details \n                    // for  the current type. Each of these types have \n                    // properties that return VisualStyleElement objects.\n                    PropertyInfo[] elementProperties =\n                        elementPart.GetProperties(BindingFlags.Static |\n                        BindingFlags.Public);\n\n                    // For each property, insert the unique full element   \n                    // name and the element into the collection.\n                    foreach (PropertyInfo elementProperty in\n                        elementProperties)\n                    {\n                        // Get the element.\n                        currentElement =\n                            (VisualStyleElement)elementProperty.\n                            GetValue(null, BindingFlags.Static, null,\n                            null, null);\n\n                        // Append the full element name.\n                        elementName.Append(elementClass.FullName,\n                            plusSignIndex + 1,\n                            elementClass.FullName.Length -\n                            plusSignIndex - 1);\n                        elementName.Append(&quot;.&quot; +\n                            elementPart.Name.ToString() + &quot;.&quot; +\n                            elementProperty.Name);\n\n                        // Add the element and element name to \n                        // the Dictionary.\n                        elementDictionary.Add(elementName.ToString(),\n                            currentElement);\n\n                        // Clear the element name for the \n                        // next iteration.\n                        elementName.Remove(0, elementName.Length);\n                    }\n                }\n            }\n        }\n\n        // Initialize the tree view with the element names.\n        private void SetupTreeView()\n        {\n            treeView1.Location = new Point(10, 10);\n            treeView1.Size = new Size(300, 450);\n            treeView1.BorderStyle = BorderStyle.FixedSingle;\n            treeView1.BackColor = Color.WhiteSmoke;\n            treeView1.SelectedNode = null;\n            treeView1.AfterSelect +=\n                new TreeViewEventHandler(treeView1_AfterSelect);\n\n            treeView1.BeginUpdate();\n\n            // An index into the top-level tree nodes.\n            int nodeIndex = 0;\n\n            // An index into the first &#39;.&#39; character in an element name.\n            int firstDotIndex = 0;\n\n            // Initialize the element class name to compare \n            // with the class name of the first element  \n            // in the Dictionary, and set this name to the first \n            // top-level node.\n            StringBuilder compareClassName =\n                new StringBuilder(&quot;Button&quot;);\n            treeView1.Nodes.Add(\n                new TreeNode(compareClassName.ToString()));\n\n            // The current element class name.\n            StringBuilder currentClassName = new StringBuilder();\n\n            // The text for each second-level node.\n            StringBuilder nodeText = new StringBuilder();\n\n            foreach (KeyValuePair&lt;string, VisualStyleElement&gt; entry\n                in elementDictionary)\n            {\n                // Isolate the class name of the current element.\n                firstDotIndex = entry.Key.IndexOf(&#39;.&#39;);\n                currentClassName.Append(entry.Key, 0, firstDotIndex);\n\n                // Determine whether we need to increment to the next \n                // element class.\n                if (currentClassName.ToString() !=\n                    compareClassName.ToString())\n                {\n                    // Increment the index to the next top-level node \n                    // in the tree view.\n                    nodeIndex++;\n\n                    // Get the new class name to compare with.\n                    compareClassName.Remove(0, compareClassName.Length);\n                    compareClassName.Append(entry.Key);\n                    compareClassName.Remove(firstDotIndex,\n                        compareClassName.Length - firstDotIndex);\n\n                    // Add a new top-level node to the tree view.\n                    treeView1.Nodes.Add(\n                        new TreeNode(compareClassName.ToString()));\n                }\n\n                // Get the text for the new second-level node.\n                nodeText.Append(entry.Key, firstDotIndex + 1,\n                    entry.Key.Length - firstDotIndex - 1);\n\n                // Create and insert the new second-level node.\n                TreeNode newNode = new TreeNode(nodeText.ToString());\n                newNode.Name = entry.Key;\n                treeView1.Nodes[nodeIndex].Nodes.Add(newNode);\n\n                currentClassName.Remove(0, currentClassName.Length);\n                nodeText.Remove(0, nodeText.Length);\n            }\n\n            treeView1.EndUpdate();\n        }\n\n        protected override void OnPaint(PaintEventArgs e)\n        {\n            base.OnPaint(e);\n\n            // Do nothing further if visual styles are disabled.\n            if (!Application.RenderWithVisualStyles)\n            {\n                this.Text = &quot;Visual styles are disabled.&quot;;\n                TextRenderer.DrawText(e.Graphics, this.Text, this.Font,\n                    this.Location, this.ForeColor);\n                return;\n            }\n\n            // Draw the element description.\n            TextRenderer.DrawText(e.Graphics, elementDescription.ToString(),\n                this.Font, descriptionRect, this.ForeColor,\n                TextFormatFlags.WordBreak);\n\n            // Draw the element, if an element is selected.\n            if (drawElement)\n            {\n                renderer.DrawBackground(e.Graphics, this.displayRect);\n            }\n        }\n\n        // Set the element to draw.\n        void treeView1_AfterSelect(object sender, TreeViewEventArgs e)\n        {\n            // Clear the element description.\n            elementDescription.Remove(0, elementDescription.Length);\n\n            // If the user clicked a first-level node, disable drawing.\n            if (e.Node.Nodes.Count &gt; 0)\n            {\n                drawElement = false;\n                elementDescription.Append(&quot;No element is selected&quot;);\n                domainUpDown1.Enabled = false;\n            }\n\n            // The user clicked an element node.\n            else\n            {\n                // Add the element name to the description.\n                elementDescription.Append(e.Node.Text);\n\n                // Get the element that corresponds to the selected  \n                // node&#39;s name.\n                String key = e.Node.Name;\n                element = elementDictionary[key];\n\n                // Disable resizing if the element is not defined.\n                if (!VisualStyleRenderer.IsElementDefined(element))\n                {\n                    drawElement = false;\n                    elementDescription.Append(&quot; is not defined.&quot;);\n                    domainUpDown1.Enabled = false;\n                }\n                else\n                {\n                    // Set the element to the renderer.\n                    drawElement = true;\n                    renderer.SetParameters(element);\n                    elementDescription.Append(&quot; is defined.&quot;);\n\n                    // Get the system-defined size of the element.\n                    Graphics g = this.CreateGraphics();\n                    currentTrueSize = renderer.GetPartSize(g,\n                        ThemeSizeType.True);\n                    g.Dispose();\n                    displayRect.Size = currentTrueSize;\n\n                    domainUpDown1.Enabled = true;\n                    domainUpDown1.SelectedIndex = 2;\n                }\n            }\n\n            Invalidate();\n        }\n\n        // Resize the element display area.\n        void domainUpDown1_SelectedItemChanged(object sender,\n            EventArgs e)\n        {\n            switch ((int)domainUpDown1.SelectedItem)\n            {\n                case (int)elementSizes.TrueSize:\n                    displayRect.Size = currentTrueSize;\n                    break;\n                case (int)elementSizes.Medium:\n                    displayRect.Size =\n                        new Size(displayRectFull.Width / 2,\n                        displayRectFull.Height / 2);\n                    break;\n                case (int)elementSizes.Large:\n                    displayRect.Size = displayRectFull.Size;\n                    break;\n            }\n\n            Invalidate();\n        }\n\n        // These values represent the options in the UpDown control.\n        private enum elementSizes\n        {\n            TrueSize,\n            Medium,\n            Large\n        };\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.VisualStyles.VisualStyleElement#0\">Imports System\nImports System.Text\nImports System.Drawing\nImports System.Collections.Generic\nImports System.Reflection\nImports System.Windows.Forms\nImports System.Windows.Forms.VisualStyles\n\nNamespace VisualStyleElementViewer\n\n    Class Form1\n        Inherits Form\n\n        Public Sub New()\n            Dim ElementViewer1 As New ElementViewer()\n            With Me\n                .Controls.Add(ElementViewer1)\n                .Text = ElementViewer1.Text\n                .Size = New Size(700, 550)\n            End With\n        End Sub\n\n        &lt;STAThread()&gt; Shared Sub Main()\n            Application.EnableVisualStyles()\n            Application.Run(New Form1())\n        End Sub\n    End Class\n\n    Public Class ElementViewer\n        Inherits UserControl\n\n        Private element As VisualStyleElement\n        Private renderer As VisualStyleRenderer\n        Private elementDictionary As New Dictionary(Of String, _\n            VisualStyleElement)\n        Private descriptionRect As Rectangle\n        Private displayRect As Rectangle\n        Private displayRectFull As Rectangle\n        Private currentTrueSize As New Size()\n        Private elementDescription As New StringBuilder()\n        Private label1 As New Label()\n        Private WithEvents treeView1 As New TreeView()\n        Private WithEvents domainUpDown1 As New DomainUpDown()\n        Private drawElement As Boolean = False\n\n        Public Sub New()\n            With Me\n                .Location = New Point(10, 10)\n                .Size = New Size(650, 500)\n                .Text = &quot;VisualStyleElement Viewer&quot;\n                .Font = SystemFonts.IconTitleFont\n                .BackColor = Color.White\n                .BorderStyle = BorderStyle.Fixed3D\n                .AutoSize = True\n            End With\n        End Sub &#39;New\n\n        Private Sub ElementViewer_Load(ByVal sender As Object, _\n            ByVal e As EventArgs) Handles Me.Load\n\n            &#39; Make sure the visual styles are enabled before \n            &#39; going any further.\n            If Not Application.RenderWithVisualStyles Then\n                Return\n            End If\n\n            With label1\n                .Location = New Point(320, 10)\n                .Size = New Size(300, 60)\n                .Text = &quot;Expand the element class nodes in the &quot; + _\n                    &quot;tree view to access visual style elements. &quot; + _\n                    &quot;Click an element name to draw the element &quot; + _\n                    &quot;below. To change the size of a resizable &quot; + _\n                    &quot;element, use the spin control.&quot;\n            End With\n\n            With domainUpDown1\n                .Location = New Point(320, 80)\n                .Size = New Size(70, 30)\n                .ReadOnly = True\n                .Items.Add(elementSizes.Large)\n                .Items.Add(elementSizes.Medium)\n                .Items.Add(elementSizes.TrueSize)\n                .SelectedIndex = 2\n                .DownButton()\n            End With\n\n            descriptionRect = New Rectangle(320, 120, 250, 50)\n            displayRect = New Rectangle(320, 160, 0, 0)\n            displayRectFull = New Rectangle(320, 160, 300, 200)\n\n            &#39; Initialize the element and renderer to known good values.\n            element = VisualStyleElement.Button.PushButton.Normal\n            renderer = New VisualStyleRenderer(element)\n\n            SetupElementCollection()\n            SetupTreeView()\n\n            Me.Controls.AddRange(New Control() {treeView1, _\n                domainUpDown1, label1})\n        End Sub\n\n        &#39; Use reflection to build a Dictionary of all \n        &#39; VisualStyleElement objects exposed in the \n        &#39; System.Windows.Forms.VisualStyles namespace.\n        Private Sub SetupElementCollection()\n            Dim elementName As New StringBuilder()\n            Dim currentElement As VisualStyleElement\n            Dim tempObject As Object\n            Dim plusSignIndex As Integer = 0\n\n            &#39; Get array of first-level nested types within \n            &#39; VisualStyleElement; these are the element classes.\n            Dim elementClasses As Type() = _\n                GetType(VisualStyleElement).GetNestedTypes()\n\n            Dim elementClass As Type\n            For Each elementClass In elementClasses\n\n                &#39; Get an array of second-level nested types within\n                &#39; VisualStyleElement; these are the element parts.\n                Dim elementParts As Type() = _\n                    elementClass.GetNestedTypes()\n\n                &#39; Get the index of the first &#39;+&#39; character in \n                &#39; the full element class name.\n                plusSignIndex = elementClass.FullName.IndexOf(&quot;+&quot;)\n\n                Dim elementPart As Type\n                For Each elementPart In elementParts\n\n                    &#39; Get an array of Shared property details \n                    &#39; for  the current type. Each of these types have \n                    &#39; properties that return VisualStyleElement objects.\n                    Dim elementProperties As PropertyInfo() = _\n                        elementPart.GetProperties( _\n                        (BindingFlags.Static Or BindingFlags.Public))\n\n                    &#39; For each property, insert the unique full element   \n                    &#39; name and the element into the collection.\n                    Dim elementProperty As PropertyInfo\n                    For Each elementProperty In elementProperties\n\n                        &#39; Get the element.\n                        tempObject = elementProperty.GetValue( _\n                            Nothing, BindingFlags.Static, Nothing, _\n                            Nothing, Nothing)\n                        currentElement = CType(tempObject, _\n                            VisualStyleElement)\n\n                        &#39; Append the full element name.\n                        elementName.Append(elementClass.FullName, _\n                            plusSignIndex + 1, _\n                            elementClass.FullName.Length - _\n                            plusSignIndex - 1)\n                        elementName.Append((&quot;.&quot; + _\n                            elementPart.Name.ToString() + _\n                            &quot;.&quot; + elementProperty.Name))\n\n                        &#39; Add the element and element name to \n                        &#39; the Dictionary.\n                        elementDictionary.Add(elementName.ToString(), _\n                            currentElement)\n\n                        &#39; Clear the element name for the next iteration.\n                        elementName.Remove(0, elementName.Length)\n                    Next elementProperty\n                Next elementPart\n            Next elementClass\n        End Sub\n\n        &#39; Initialize the tree view with the element names.\n        Private Sub SetupTreeView()\n\n            With treeView1\n                .Location = New Point(10, 10)\n                .Size = New Size(300, 450)\n                .BorderStyle = BorderStyle.FixedSingle\n                .BackColor = Color.WhiteSmoke\n                .SelectedNode = Nothing\n                .BeginUpdate()\n            End With\n\n            &#39; An index into the top-level tree nodes.\n            Dim nodeIndex As Integer = 0\n\n            &#39; An index into the first &#39;.&#39; character in an element name.\n            Dim firstDotIndex As Integer = 0\n\n            &#39; Initialize the element class name to compare \n            &#39; with the class name of the first element \n            &#39; in the Dictionary, and set this name to the first \n            &#39; top-level node.\n            Dim compareClassName As New StringBuilder(&quot;Button&quot;)\n            treeView1.Nodes.Add( _\n                New TreeNode(compareClassName.ToString()))\n\n            &#39; The current element class name.\n            Dim currentClassName As New StringBuilder()\n\n            &#39; The text for each second-level node.\n            Dim nodeText As New StringBuilder()\n\n            Dim entry As KeyValuePair(Of String, VisualStyleElement)\n            For Each entry In elementDictionary\n\n                &#39; Isolate the class name of the current element.\n                firstDotIndex = entry.Key.IndexOf(&quot;.&quot;)\n                currentClassName.Append(entry.Key, 0, firstDotIndex)\n\n                &#39; Determine whether we need to increment to the next \n                &#39; element class.\n                If currentClassName.ToString() &lt;&gt; _\n                    compareClassName.ToString() Then\n\n                    &#39; Increment the index to the next top-level node \n                    &#39; in the tree view.\n                    nodeIndex += 1\n\n                    &#39; Update the class name to compare with.\n                    compareClassName.Remove(0, compareClassName.Length)\n                    compareClassName.Append(entry.Key)\n                    compareClassName.Remove(firstDotIndex, _\n                        compareClassName.Length - firstDotIndex)\n\n                    &#39; Add a new top-level node to the tree view.\n                    Dim node As New TreeNode(compareClassName.ToString())\n                    treeView1.Nodes.Add(node)\n                End If\n\n                &#39; Get the text for the new second-level node.\n                nodeText.Append(entry.Key, firstDotIndex + 1, _\n                    entry.Key.Length - firstDotIndex - 1)\n\n                &#39; Create and insert the new second-level node.\n                Dim newNode As New TreeNode(nodeText.ToString())\n                newNode.Name = entry.Key\n                treeView1.Nodes(nodeIndex).Nodes.Add(newNode)\n\n                currentClassName.Remove(0, currentClassName.Length)\n                nodeText.Remove(0, nodeText.Length)\n            Next entry\n\n            treeView1.EndUpdate()\n        End Sub\n\n        Protected Overrides Sub OnPaint(ByVal e As PaintEventArgs)\n            MyBase.OnPaint(e)\n\n            &#39; Do nothing further if visual styles are disabled.\n            If Not Application.RenderWithVisualStyles Then\n                Me.Text = &quot;Visual styles are disabled.&quot;\n                TextRenderer.DrawText(e.Graphics, Me.Text, Me.Font, _\n                    Me.Location, Me.ForeColor)\n                Return\n            End If\n\n            &#39; Draw the element description.\n            TextRenderer.DrawText(e.Graphics, _\n                elementDescription.ToString(), Me.Font, _\n                descriptionRect, Me.ForeColor, _\n                TextFormatFlags.WordBreak)\n\n            &#39; Draw the element, if an element is selected.\n            If drawElement Then\n                renderer.DrawBackground(e.Graphics, Me.displayRect)\n            End If\n        End Sub\n\n        &#39; Set the element to draw.\n        Private Sub treeView1_AfterSelect(ByVal sender As Object, _\n            ByVal e As TreeViewEventArgs) Handles treeView1.AfterSelect\n\n            &#39; Clear the element description.\n            elementDescription.Remove(0, elementDescription.Length)\n\n            &#39; If the user clicked a first-level node, disable drawing.\n            If e.Node.Nodes.Count &gt; 0 Then\n                drawElement = False\n                elementDescription.Append(&quot;No element is selected&quot;)\n                domainUpDown1.Enabled = False\n\n            &#39; The user clicked an element node.\n            Else\n                &#39; Add the element name to the description.\n                elementDescription.Append(e.Node.Text)\n\n                &#39; Get the element that corresponds to the selected  \n                &#39; node&#39;s name.\n                Dim key As String = e.Node.Name\n                element = elementDictionary(key)\n\n                &#39; Disable resizing if the element is not defined.\n                If Not VisualStyleRenderer.IsElementDefined(element) Then\n                    drawElement = False\n                    elementDescription.Append(&quot; is not defined.&quot;)\n                    domainUpDown1.Enabled = False\n                Else\n                    &#39; Set the element to the renderer.\n                    drawElement = True\n                    renderer.SetParameters(element)\n                    elementDescription.Append(&quot; is defined.&quot;)\n\n                    &#39; Get the system-defined size of the element.\n                    Dim g As Graphics = Me.CreateGraphics()\n                    currentTrueSize = renderer.GetPartSize(g, _\n                        ThemeSizeType.True)\n                    g.Dispose()\n                    displayRect.Size = currentTrueSize\n\n                    domainUpDown1.Enabled = True\n                    domainUpDown1.SelectedIndex = 2\n                End If\n            End If\n            Invalidate()\n        End Sub\n\n        &#39; Resize the element display area.\n        Private Sub domainUpDown1_SelectedItemChanged(ByVal sender As Object, _\n            ByVal e As EventArgs) _\n            Handles domainUpDown1.SelectedItemChanged\n\n            Select Case CInt(domainUpDown1.SelectedItem)\n                Case CInt(elementSizes.TrueSize)\n                    displayRect.Size = currentTrueSize\n                Case CInt(elementSizes.Medium)\n                    displayRect.Size = _\n                        New Size(displayRectFull.Width / 2, _\n                        displayRectFull.Height / 2)\n                Case CInt(elementSizes.Large)\n                    displayRect.Size = displayRectFull.Size\n            End Select\n\n            Invalidate()\n        End Sub\n\n        &#39; These values represent the options in the UpDown control.\n        Private Enum elementSizes\n            TrueSize\n            Medium\n            Large\n        End Enum\n\n    End Class\nEnd Namespace\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The VisualStyleElement class identifies a Windows control or user interface (UI) element that is defined by the current visual style of the operating system. A visual style element is defined in terms of <em>class</em>, <em>part</em>, and <em>state</em>:  </p>\n<ul>\n<li><p>The <em>class</em> identifies a group of related visual style elements that are typically drawn together. The class is specified by the <a class=\"xref\" href=\"system.windows.forms.visualstyles.visualstyleelement#System_Windows_Forms_VisualStyles_VisualStyleElement_ClassName_\" data-linktype=\"relative-path\">ClassName</a> property.  </p>\n</li>\n<li><p>The <em>part</em> defines a discrete member of a class. The part is specified by the <a class=\"xref\" href=\"system.windows.forms.visualstyles.visualstyleelement#System_Windows_Forms_VisualStyles_VisualStyleElement_Part_\" data-linktype=\"relative-path\">Part</a> property.  </p>\n</li>\n<li><p>The <em>state</em> describes the current visual state of the element defined by the class and part. The state is specified by the <a class=\"xref\" href=\"system.windows.forms.visualstyles.visualstyleelement#System_Windows_Forms_VisualStyles_VisualStyleElement_State_\" data-linktype=\"relative-path\">State</a> property.  </p>\n</li>\n</ul>\n<p> The <a class=\"xref\" href=\"system.windows.forms.visualstyles\" data-linktype=\"relative-path\">System.Windows.Forms.VisualStyles</a> namespace exposes hundreds of VisualStyleElement objects that represent the controls and user interface elements that can be defined by a visual style. These objects are exposed as <code>static</code> properties of nested classes of VisualStyleElement. For each property, the qualified name of the owning class represents the class and the part of the drawn element, and the property name represents the state of the element. For example, the <a class=\"xref\" href=\"system.windows.forms.visualstyles.visualstyleelement.button.pushbutton#System_Windows_Forms_VisualStyles_VisualStyleElement_Button_PushButton_Pressed_\" data-linktype=\"relative-path\">Pressed</a> property returns a VisualStyleElement that can be used to draw a button in the pressed state with visual styles. The <code>Pressed</code> property name corresponds to the state, <code>PushButton</code> corresponds to the part, and <code>Button</code> identifies the class of the visual style element.  </p>\n<p> To draw a visual style element, create a <a class=\"xref\" href=\"system.windows.forms.visualstyles.visualstylerenderer\" data-linktype=\"relative-path\">VisualStyleRenderer</a>, set it to the VisualStyleElement you wish to draw, and then call the <a class=\"xref\" href=\"system.windows.forms.visualstyles.visualstylerenderer#System_Windows_Forms_VisualStyles_VisualStyleRenderer_DrawBackground_\" data-linktype=\"relative-path\">DrawBackground</a> method. To determine whether the current visual style provides a definition for a particular element, call the <a class=\"xref\" href=\"system.windows.forms.visualstyles.visualstylerenderer#System_Windows_Forms_VisualStyles_VisualStyleRenderer_IsElementDefined_\" data-linktype=\"relative-path\">IsElementDefined</a> method with the element as the argument.  </p>\n<p> VisualStyleElement and <a class=\"xref\" href=\"system.windows.forms.visualstyles.visualstylerenderer\" data-linktype=\"relative-path\">VisualStyleRenderer</a> wrap the functionality of the visual styles API from the Windows Shell portion of the Windows Platform SDK. For more information on visual styles, see &quot;Using Windows XP Visual Styles&quot; in the Platform SDK portion of the MSDN Library at <a href=\"http://msdn.microsoft.com/library/\" data-linktype=\"external\">http://msdn.microsoft.com/library</a>.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Windows_Forms_VisualStyles_VisualStyleElement_ClassName_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_VisualStyles_VisualStyleElement_ClassName\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ClassName</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the class name of the visual style element that this <a class=\"xref\" href=\"system.windows.forms.visualstyles.visualstyleelement\" data-linktype=\"relative-path\">VisualStyleElement</a> represents.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string ClassName { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string that represents the class name of a visual style element.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>A class name refers to a group of related visual style elements that are typically drawn together. A class name can correspond to a control, such as &quot;SCROLLBAR&quot; and &quot;TRACKBAR&quot;, but a class name can also refer to a group of elements that do not correspond to a particular control, such as &quot;EXPLORERBAR&quot; and &quot;STARTPANEL&quot;.  </p>\n<p> For more information on visual style classes, parts, and states, see &quot;Parts and States&quot; in the Windows Shell documentation at <a href=\"http://msdn.microsoft.com/library\" data-linktype=\"external\">http://msdn.microsoft.com/library</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Windows_Forms_VisualStyles_VisualStyleElement_Part_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_VisualStyles_VisualStyleElement_Part\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Part</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value indicating the part of the visual style element that this <a class=\"xref\" href=\"system.windows.forms.visualstyles.visualstyleelement\" data-linktype=\"relative-path\">VisualStyleElement</a> represents.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int Part { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A value that represents the part of a visual style element.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>A part is a discrete member of a class of visual style elements. For example, visual style elements that represent a check box, radio button, and push button are all considered parts of the &quot;BUTTON&quot; class.  </p>\n<p> Part values are integers that range from 1 to the number of parts defined for a particular class. For more information on visual style classes, parts, and states, see &quot;Parts and States&quot; in the Windows Shell documentation at <a href=\"http://msdn.microsoft.com/library\" data-linktype=\"external\">http://msdn.microsoft.com/library</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Windows_Forms_VisualStyles_VisualStyleElement_State_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_VisualStyles_VisualStyleElement_State\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">State</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value indicating the state of the visual style element that this <a class=\"xref\" href=\"system.windows.forms.visualstyles.visualstyleelement\" data-linktype=\"relative-path\">VisualStyleElement</a> represents.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int State { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A value that represents the state of a visual style element.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>A visual style part can have one or more visual states. For example, a visual style element that represents a radio button can be in the disabled, checked, or unchecked state.  </p>\n<p> State values are integers that range from 1 to the number of states defined for a particular part. For more information on visual style classes, parts, and states, see &quot;Parts and States&quot; in the Windows Shell documentation located at <a href=\"http://msdn.microsoft.com/library\" data-linktype=\"external\">http://msdn.microsoft.com/library</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Windows_Forms_VisualStyles_VisualStyleElement_CreateElement_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Forms_VisualStyles_VisualStyleElement_CreateElement_System_String_System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CreateElement(String, Int32, Int32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Creates a new visual style element from the specified class, part, and state values.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Windows.Forms.VisualStyles.VisualStyleElement CreateElement (string className, int part, int state);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>className</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A string that represents the class name of the visual style element to be created.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>part</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A value that represents the part of the visual style element to be created.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>state</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A value that represents the state of the visual style element to be created.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.windows.forms.visualstyles.visualstyleelement\" data-linktype=\"relative-path\">VisualStyleElement</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.windows.forms.visualstyles.visualstyleelement\" data-linktype=\"relative-path\">VisualStyleElement</a> with the <span class=\"xref\">stem.Windows.Forms.VisualStyles.VisualStyleElement.ClassName*</span>, <span class=\"xref\">stem.Windows.Forms.VisualStyles.VisualStyleElement.Part*</span>, and <span class=\"xref\">stem.Windows.Forms.VisualStyles.VisualStyleElement.State*</span> properties initialized to the <code>className</code>, <code>part</code>, and <code>state</code> parameters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.VisualStyles.VisualStyleElement.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.VisualStyles.VisualStyleElement\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.VisualStyles.VisualStyleElement.ClassName\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.VisualStyles.VisualStyleElement.CreateElement\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.VisualStyles.VisualStyleElement.Part\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.VisualStyles.VisualStyleElement.State\">\r\n<meta name=\"APILocation\" content=\"System.Windows.Forms.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"82a7cbf0-0e75-be78-3164-e9fad7ed0ba6\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Identifies a control or user interface (UI) element that is drawn with visual styles.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.windows.forms.visualstyles/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.VisualStyles.VisualStyleElement\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.VisualStyles.VisualStyleElement.yml","open_to_public_contributors":false,"api_name":["System.Windows.Forms.VisualStyles.VisualStyleElement","System.Windows.Forms.VisualStyles.VisualStyleElement.ClassName","System.Windows.Forms.VisualStyles.VisualStyleElement.CreateElement","System.Windows.Forms.VisualStyles.VisualStyleElement.Part","System.Windows.Forms.VisualStyles.VisualStyleElement.State"],"api_location":["System.Windows.Forms.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.VisualStyles.VisualStyleElement","System::Windows::Forms::VisualStyles::VisualStyleElement","System.Windows.Forms.VisualStyles.VisualStyleElement.ClassName","System::Windows::Forms::VisualStyles::VisualStyleElement::ClassName","System.Windows.Forms.VisualStyles.VisualStyleElement.CreateElement","System::Windows::Forms::VisualStyles::VisualStyleElement::CreateElement","System.Windows.Forms.VisualStyles.VisualStyleElement.Part","System::Windows::Forms::VisualStyles::VisualStyleElement::Part","System.Windows.Forms.VisualStyles.VisualStyleElement.State","System::Windows::Forms::VisualStyles::VisualStyleElement::State"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"82a7cbf0-0e75-be78-3164-e9fad7ed0ba6","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Windows.Forms.VisualStyles/VisualStyleElement.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"VisualStyleElement class | Microsoft Docs","_op_ogTitle":"VisualStyleElement class","description":"Identifies a control or user interface (UI) element that is drawn with visual styles.\n","toc_asset_id":"api/_splitted/System.Windows.Forms.VisualStyles/toc.json","toc_rel":"_splitted/System.Windows.Forms.VisualStyles/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.VisualStyles.VisualStyleElement","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.visualstyles.visualstyleelement","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.visualstyles.visualstyleelement","fileRelativePath":"api/System.Windows.Forms.VisualStyles.VisualStyleElement.html"},"themesRelativePathToOutputRoot":"_themes/"}