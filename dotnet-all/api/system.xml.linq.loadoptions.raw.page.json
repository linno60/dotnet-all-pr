{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">LoadOptions</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies load options when parsing XML.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Flags]\npublic enum LoadOptions</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">LoadOptions</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>This example loads a small XML tree from a file, setting the options to set base URI and retain line information. It then adds another element that does not have line information. It then prints the line information for each element in the tree.  </p>\n<pre><code class=\"lang-c#\">\n                string markup = @&quot;&lt;Root&gt;  \n    &lt;Child1 /&gt;  \n    &lt;Child2 /&gt;  \n    &lt;Child4 /&gt;  \n&lt;/Root&gt;&quot;;  \n\nFile.WriteAllText(&quot;Test.xml&quot;, markup);  \n\nXElement po = XElement.Load(&quot;Test.xml&quot;,  \n    LoadOptions.SetBaseUri | LoadOptions.SetLineInfo);  \n\n// add a node to the tree.  \n// the newly added node will not have line information.  \npo.Element(&quot;Child2&quot;).AddAfterSelf(new XElement(&quot;Child3&quot;));  \n\nstring[] splitUri = po.BaseUri.Split(&#39;/&#39;);  \nConsole.WriteLine(&quot;BaseUri: {0}&quot;, splitUri[splitUri.Length - 1]);  \nConsole.WriteLine();  \nConsole.WriteLine(&quot;{0}{1}{2}&quot;,  \n    &quot;Element Name&quot;.PadRight(20),  \n    &quot;Line&quot;.PadRight(5),  \n    &quot;Position&quot;);  \nConsole.WriteLine(&quot;{0}{1}{2}&quot;,  \n    &quot;------------&quot;.PadRight(20),  \n    &quot;----&quot;.PadRight(5),  \n    &quot;--------&quot;);  \nforeach (XElement e in po.DescendantsAndSelf())  \n    Console.WriteLine(&quot;{0}{1}{2}&quot;,  \n        (&quot;&quot;.PadRight(e.Ancestors().Count() * 2) + e.Name).PadRight(20),  \n        ((IXmlLineInfo)e).HasLineInfo() ?  \n            ((IXmlLineInfo)e).LineNumber.ToString().PadRight(5) :  \n            &quot;&quot;,  \n        ((IXmlLineInfo)e).HasLineInfo() ?  \n            ((IXmlLineInfo)e).LinePosition.ToString() :  \n            &quot;No Line Information&quot;);  \n</code></pre><pre><code class=\"lang-vb\">\n                Dim markup As String = _  \n    &quot;&lt;Root&gt;&quot; + Environment.NewLine &amp; _  \n    &quot;    &lt;Child1 /&gt;&quot; + Environment.NewLine &amp; _  \n    &quot;    &lt;Child2 /&gt;&quot; + Environment.NewLine &amp; _  \n    &quot;    &lt;Child4 /&gt;&quot; + Environment.NewLine &amp; _  \n    &quot;&lt;/Root&gt;&quot;  \n\nFile.WriteAllText(&quot;Test.xml&quot;, markup)  \n\nDim po As XElement = XElement.Load(&quot;Test.xml&quot;, LoadOptions.SetBaseUri Or LoadOptions.SetLineInfo)  \n\n&#39; add a node to the tree.  \n&#39; the newly added node will not have line information.  \npo.Element(&quot;Child2&quot;).AddAfterSelf(New XElement(&quot;Child3&quot;))  \n\nDim splitUri() As String = po.BaseUri.Split(&quot;/&quot;c)  \nConsole.WriteLine(&quot;BaseUri: {0}&quot;, splitUri(splitUri.Length - 1))  \nConsole.WriteLine()  \nConsole.WriteLine(&quot;{0}{1}{2}&quot;, _  \n    &quot;Element Name&quot;.PadRight(20), _  \n    &quot;Line&quot;.PadRight(5), _  \n    &quot;Position&quot;)  \nConsole.WriteLine(&quot;{0}{1}{2}&quot;, _  \n    &quot;------------&quot;.PadRight(20), _  \n    &quot;----&quot;.PadRight(5), _  \n    &quot;--------&quot;)  \nFor Each e As XElement In po.DescendantsAndSelf()  \n    Console.WriteLine(&quot;{0}{1}{2}&quot;, _  \n        (&quot;&quot;.PadRight(e.Ancestors().Count() * 2) &amp; e.Name.ToString).PadRight(20), _  \n        IIf(DirectCast(e, IXmlLineInfo).HasLineInfo(), _  \n            DirectCast(e, IXmlLineInfo).LineNumber.ToString().PadRight(5), _  \n            &quot;&quot;), _  \n        IIf(DirectCast(e, IXmlLineInfo).HasLineInfo(), _  \n            DirectCast(e, IXmlLineInfo).LinePosition.ToString(), _  \n            &quot;No Line Information&quot;))  \nNext  \n</code></pre><p> This example produces the following output:  </p>\n<pre><code>BaseUri: Test.xml  \n\nElement Name        Line Position  \n------------        ---- --------  \nRoot                1    2  \n  Child1            2    6  \n  Child2            3    6  \n  Child3            No Line Information  \n  Child4            4    6  \n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>If you preserve white space when loading, all insignificant white space in the XML tree is materialized in the XML tree as is. If you do not preserve white space, then all insignificant white space is discarded.  </p>\n<p> There is a performance penalty if you set the SetBaseUri and the SetLineInfo flags.  </p>\n<p> The base URI and the line information are accurate immediately after loading the XML document. If you modify the XML tree after loading the document, the base URI and line information may become meaningless.  </p>\n<p> If the underlying <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> does not have base URI or line information, setting the SetBaseUri and the SetLineInfo flags will have no effect.  </p>\n<p> This type allows you to control how LINQ to XML handles white space when loading or parsing. For more information, see <a href=\"../topic/preserving%20white%20space%20while%20loading%20or%20parsing%20xml3\" data-linktype=\"relative-path\">Preserving White Space while Loading or Parsing XML</a> and <a href=\"../topic/preserving%20white%20space%20while%20serializing1\" data-linktype=\"relative-path\">Preserving White Space While Serializing</a>.</p>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Xml_Linq_LoadOptions_None\">\r\n      \t\t\t<span class=\"lang-csharp\">None</span>\r\n      \t</td>\r\n      \t<td><p>Does not preserve insignificant white space or load base URI and line information.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Xml_Linq_LoadOptions_PreserveWhitespace\">\r\n      \t\t\t<span class=\"lang-csharp\">PreserveWhitespace</span>\r\n      \t</td>\r\n      \t<td><p>Preserves insignificant white space while parsing.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Xml_Linq_LoadOptions_SetBaseUri\">\r\n      \t\t\t<span class=\"lang-csharp\">SetBaseUri</span>\r\n      \t</td>\r\n      \t<td><p>Requests the base URI information from the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a>, and makes it available via the <span class=\"xref\">stem.Xml.Linq.XObject.BaseUri*</span> property.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Xml_Linq_LoadOptions_SetLineInfo\">\r\n      \t\t\t<span class=\"lang-csharp\">SetLineInfo</span>\r\n      \t</td>\r\n      \t<td><p>Requests the line information from the <a class=\"xref\" href=\"system.xml.xmlreader\" data-linktype=\"relative-path\">XmlReader</a> and makes it available via properties on <a class=\"xref\" href=\"system.xml.linq.xobject\" data-linktype=\"relative-path\">XObject</a>.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Xml.Linq.LoadOptions.yml\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.LoadOptions\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.LoadOptions.None\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.LoadOptions.PreserveWhitespace\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.LoadOptions.SetBaseUri\">\r\n<meta name=\"APIName\" content=\"System.Xml.Linq.LoadOptions.SetLineInfo\">\r\n<meta name=\"APILocation\" content=\"System.Xml.Linq.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"125ba0a6-6141-8781-3f59-155da94bc3e9\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies load options when parsing XML.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.xml.linq/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Xml.Linq.LoadOptions\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Xml.Linq.LoadOptions.yml","open_to_public_contributors":false,"api_name":["System.Xml.Linq.LoadOptions","System.Xml.Linq.LoadOptions.None","System.Xml.Linq.LoadOptions.PreserveWhitespace","System.Xml.Linq.LoadOptions.SetBaseUri","System.Xml.Linq.LoadOptions.SetLineInfo"],"api_location":["System.Xml.Linq.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Xml.Linq.LoadOptions","System::Xml::Linq::LoadOptions","System.Xml.Linq.LoadOptions.None","System::Xml::Linq::LoadOptions::None","System.Xml.Linq.LoadOptions.PreserveWhitespace","System::Xml::Linq::LoadOptions::PreserveWhitespace","System.Xml.Linq.LoadOptions.SetBaseUri","System::Xml::Linq::LoadOptions::SetBaseUri","System.Xml.Linq.LoadOptions.SetLineInfo","System::Xml::Linq::LoadOptions::SetLineInfo"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"125ba0a6-6141-8781-3f59-155da94bc3e9","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Xml.Linq/LoadOptions.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"LoadOptions enum | Microsoft Docs","_op_ogTitle":"LoadOptions enum","description":"Specifies load options when parsing XML.\n","toc_asset_id":"api/_splitted/System.Xml.Linq/toc.json","toc_rel":"_splitted/System.Xml.Linq/toc.json","source_url":"","ms.assetid":"System.Xml.Linq.LoadOptions","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.xml.linq.loadoptions","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.xml.linq.loadoptions","fileRelativePath":"api/System.Xml.Linq.LoadOptions.html"},"themesRelativePathToOutputRoot":"_themes/"}