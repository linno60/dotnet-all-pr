{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">LayoutEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that will handle the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_Layout\" data-linktype=\"relative-path\">Layout</a> event of a <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a>.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void LayoutEventHandler(object sender, LayoutEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">LayoutEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<pre><code class=\"lang-vb\" name=\"LayoutEventArgs#1\">Public Class Form1\n    Inherits System.Windows.Forms.Form\n    Private WithEvents textBox1 As System.Windows.Forms.TextBox\n    Private label1 As System.Windows.Forms.Label\n    Private layoutButton As System.Windows.Forms.Button\n    Private components As System.ComponentModel.Container = Nothing\n\n\n    Public Sub New()\n        InitializeComponent()\n    End Sub\n\n    Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)\n        If disposing Then\n            If (components IsNot Nothing) Then\n                components.Dispose()\n            End If\n        End If\n        MyBase.Dispose(disposing)\n    End Sub\n\n    Private Sub InitializeComponent()\n        Me.layoutButton = New System.Windows.Forms.Button()\n        Me.textBox1 = New System.Windows.Forms.TextBox()\n        Me.label1 = New System.Windows.Forms.Label()\n        Me.SuspendLayout()\n        &#39; \n        &#39; layoutButton\n        &#39; \n        Me.layoutButton.Anchor = System.Windows.Forms.AnchorStyles.Bottom\n        Me.layoutButton.Location = New System.Drawing.Point(72, 88)\n        Me.layoutButton.Name = &quot;layoutButton&quot;\n        Me.layoutButton.Size = New System.Drawing.Size(150, 23)\n        Me.layoutButton.TabIndex = 0\n        Me.layoutButton.Text = &quot;Hello&quot;\n        &#39; \n        &#39; textBox1\n        &#39; \n        Me.textBox1.Anchor = System.Windows.Forms.AnchorStyles.Top Or System.Windows.Forms.AnchorStyles.Left Or System.Windows.Forms.AnchorStyles.Right\n        Me.textBox1.Location = New System.Drawing.Point(24, 40)\n        Me.textBox1.Name = &quot;textBox1&quot;\n        Me.textBox1.Size = New System.Drawing.Size(248, 20)\n        Me.textBox1.TabIndex = 1\n        Me.textBox1.Text = &quot;Hello&quot;\n        &#39; \n        &#39; label1\n        &#39; \n        Me.label1.Location = New System.Drawing.Point(24, 16)\n        Me.label1.Name = &quot;label1&quot;\n        Me.label1.TabIndex = 2\n        Me.label1.Text = &quot;Button&#39;s Text:&quot;\n        &#39; \n        &#39; Form1\n        &#39; \n        Me.ClientSize = New System.Drawing.Size(292, 129)\n        Me.Controls.AddRange(New System.Windows.Forms.Control() {Me.label1, Me.textBox1, Me.layoutButton})\n        Me.Name = &quot;Form1&quot;\n        Me.Text = &quot;Layout Sample&quot;\n        Me.ResumeLayout(False)\n    End Sub\n\n   &#39; This method ensures that the form&#39;s width is the preferred size of 300 pixels\n   &#39; or the size of the button plus 50 pixels, whichever amount is less.\n    Private Sub Form1_Layout(ByVal sender As Object, ByVal e As System.Windows.Forms.LayoutEventArgs) Handles MyBase.Layout\n      &#39; This event is raised once at startup with the AffectedControl\n      &#39; and AffectedProperty properties on the LayoutEventArgs as null. \n      &#39; The event provides size preferences for that case.\n        If (e.AffectedControl IsNot Nothing) And (e.AffectedProperty IsNot Nothing) Then\n            &#39; Ensure that the affected property is the Bounds property\n            &#39; of the form.\n            If e.AffectedProperty.ToString() = &quot;Bounds&quot; Then\n             &#39; If layoutButton&#39;s width plus a padding of 50 pixels is greater than the preferred \n             &#39; size of 300 pixels, increase the form&#39;s width.\n                If Me.layoutButton.Width + 50 &gt; 300 Then\n                    Me.Width = Me.layoutButton.Width + 50\n                    &#39; If not, keep the form&#39;s width at 300 pixels.\n                Else\n                    Me.Width = 300\n                End If\n\n                &#39; Center layoutButton on the form.\n                Me.layoutButton.Left = (Me.ClientSize.Width - Me.layoutButton.Width) / 2\n            End If\n        End If\n    End Sub\n\n    &#39; This method sets the Text property of layoutButton to the Text property\n    &#39; of textBox1.  If the new text plus a padding of 20 pixels is larger than \n    &#39; the preferred size of 150 pixels, increase layoutButton&#39;s Width property.\n    Private Sub textBox1_TextChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles textBox1.TextChanged\n        &#39; Set the Text property of layoutButton.\n        Me.layoutButton.Text = Me.textBox1.Text\n        &#39; Get the width of the text using the proper font.\n        Dim textWidth As Integer = CInt(Me.CreateGraphics().MeasureString(layoutButton.Text, layoutButton.Font).Width)\n\n        &#39; If the width of the text plus a padding of 20 pixels is greater than the preferred size of\n        &#39; 150 pixels, increase layoutButton&#39;s width.\n        If textWidth + 20 &gt; 150 Then\n            &#39; Setting the size property on any control raises \n            &#39; the Layout event for its container.\n            Me.layoutButton.Width = textWidth + 20\n            &#39; If not, keep layoutButton&#39;s width at 150 pixels.\n        Else\n            Me.layoutButton.Width = 150\n        End If\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"LayoutEventArgs#1\">public class Form1 : System.Windows.Forms.Form\n{\n   private System.Windows.Forms.TextBox textBox1;\n   private System.Windows.Forms.Label label1;\n   private System.Windows.Forms.Button layoutButton;\n   private System.ComponentModel.Container components = null;\n\n   public Form1()\n   {\n      InitializeComponent();\n   }\n\n   protected override void Dispose( bool disposing )\n   {\n      if( disposing )\n      {\n         if (components != null) \n         {\n            components.Dispose();\n         }\n      }\n      base.Dispose( disposing );\n   }\n\n   private void InitializeComponent()\n   {\n      this.layoutButton = new System.Windows.Forms.Button();\n      this.textBox1 = new System.Windows.Forms.TextBox();\n      this.label1 = new System.Windows.Forms.Label();\n      this.SuspendLayout();\n      // \n      // layoutButton\n      // \n      this.layoutButton.Anchor = System.Windows.Forms.AnchorStyles.Bottom;\n      this.layoutButton.Location = new System.Drawing.Point(72, 88);\n      this.layoutButton.Name = &quot;layoutButton&quot;;\n      this.layoutButton.Size = new System.Drawing.Size(150, 23);\n      this.layoutButton.TabIndex = 0;\n      this.layoutButton.Text = &quot;Hello&quot;;\n      // \n      // textBox1\n      // \n      this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) \n         | System.Windows.Forms.AnchorStyles.Right);\n      this.textBox1.Location = new System.Drawing.Point(24, 40);\n      this.textBox1.Name = &quot;textBox1&quot;;\n      this.textBox1.Size = new System.Drawing.Size(248, 20);\n      this.textBox1.TabIndex = 1;\n      this.textBox1.Text = &quot;Hello&quot;;\n      this.textBox1.TextChanged += new System.EventHandler(this.textBox1_TextChanged);\n      // \n      // label1\n      // \n      this.label1.Location = new System.Drawing.Point(24, 16);\n      this.label1.Name = &quot;label1&quot;;\n      this.label1.TabIndex = 2;\n      this.label1.Text = &quot;Button\\&#39;s Text:&quot;;\n      // \n      // Form1\n      // \n      this.ClientSize = new System.Drawing.Size(292, 129);\n      this.Controls.AddRange(new System.Windows.Forms.Control[] {\n                                                                   this.label1,\n                                                                   this.textBox1,\n                                                                   this.layoutButton});\n      this.Name = &quot;Form1&quot;;\n      this.Text = &quot;Layout Sample&quot;;\n      this.Layout += new System.Windows.Forms.LayoutEventHandler(this.Form1_Layout);\n      this.ResumeLayout(false);\n\n   }\n\n   [STAThread]\n   static void Main() \n   {\n      Application.Run(new Form1());\n   }\n   \n   // This method ensures that the form&#39;s width is the preferred size of 300 pixels\n   // or the size of the button plus 50 pixels, whichever amount is less.\n   private void Form1_Layout(object sender, System.Windows.Forms.LayoutEventArgs e)\n   {\n      // This event is raised once at startup with the AffectedControl\n      // and AffectedProperty properties on the LayoutEventArgs as null. \n      // The event provides size preferences for that case.\n      if ((e.AffectedControl != null) &amp;&amp; (e.AffectedProperty != null))\n      {\n         // Ensure that the affected property is the Bounds property\n         // of the form.\n         if (e.AffectedProperty.ToString() == &quot;Bounds&quot;) \n         {\n            // If layoutButton&#39;s width plus a padding of 50 pixels is greater than the preferred \n            // size of 300 pixels, increase the form&#39;s width.\n            if ((this.layoutButton.Width + 50) &gt; 300) \n            {\n               this.Width = this.layoutButton.Width + 50;\n            }\n               // If not, keep the form&#39;s width at 300 pixels.\n            else \n            {\n               this.Width = 300;\n            }\n\n            // Center layoutButton on the form.\n            this.layoutButton.Left = (this.ClientSize.Width - this.layoutButton.Width) / 2;\n         }\n      }\n   }\n\n   // This method sets the Text property of layoutButton to the Text property\n   // of textBox1.  If the new text plus a padding of 20 pixels is larger than \n   // the preferred size of 150 pixels, increase layoutButton&#39;s Width property.\n   private void textBox1_TextChanged(object sender, System.EventArgs e)\n   {\n      // Set the Text property of layoutButton.\n      this.layoutButton.Text = this.textBox1.Text;\n      // Get the width of the text using the proper font.\n      int textWidth = (int)this.CreateGraphics().MeasureString(layoutButton.Text, layoutButton.Font).Width;\n\n      // If the width of the text plus a padding of 20 pixels is greater than the preferred size of\n      // 150 pixels, increase layoutButton&#39;s width.\n      if ((textWidth + 20) &gt; 150)\n      {\n         // Setting the size property on any control raises \n         // the Layout event for its container.\n         this.layoutButton.Width = textWidth + 20;\n      }\n         // If not, keep layoutButton&#39;s width at 150 pixels.\n      else \n      {\n         this.layoutButton.Width = 150;\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"LayoutEventArgs#1\">public ref class Form1: public System::Windows::Forms::Form\n{\nprivate:\n   System::Windows::Forms::TextBox^ textBox1;\n   System::Windows::Forms::Label ^ label1;\n   System::Windows::Forms::Button^ layoutButton;\n   System::ComponentModel::Container^ components;\n\npublic:\n   Form1()\n   {\n      InitializeComponent();\n   }\n\nprotected:\n   ~Form1()\n   {\n      if ( components != nullptr )\n      {\n         delete components;\n      }\n   }\n\nprivate:\n   void InitializeComponent()\n   {\n      this-&gt;layoutButton = gcnew System::Windows::Forms::Button;\n      this-&gt;textBox1 = gcnew System::Windows::Forms::TextBox;\n      this-&gt;label1 = gcnew System::Windows::Forms::Label;\n      this-&gt;SuspendLayout();\n\n      // \n      // layoutButton\n      // \n      this-&gt;layoutButton-&gt;Anchor = System::Windows::Forms::AnchorStyles::Bottom;\n      this-&gt;layoutButton-&gt;Location = System::Drawing::Point( 72, 88 );\n      this-&gt;layoutButton-&gt;Name = &quot;layoutButton&quot;;\n      this-&gt;layoutButton-&gt;Size = System::Drawing::Size( 150, 23 );\n      this-&gt;layoutButton-&gt;TabIndex = 0;\n      this-&gt;layoutButton-&gt;Text = &quot;Hello&quot;;\n\n      // \n      // textBox1\n      // \n      this-&gt;textBox1-&gt;Anchor = static_cast&lt;System::Windows::Forms::AnchorStyles&gt;(System::Windows::Forms::AnchorStyles::Top | System::Windows::Forms::AnchorStyles::Left | System::Windows::Forms::AnchorStyles::Right);\n      this-&gt;textBox1-&gt;Location = System::Drawing::Point( 24, 40 );\n      this-&gt;textBox1-&gt;Name = &quot;textBox1&quot;;\n      this-&gt;textBox1-&gt;Size = System::Drawing::Size( 248, 20 );\n      this-&gt;textBox1-&gt;TabIndex = 1;\n      this-&gt;textBox1-&gt;Text = &quot;Hello&quot;;\n      this-&gt;textBox1-&gt;TextChanged += gcnew System::EventHandler( this, &amp;Form1::textBox1_TextChanged );\n\n      // \n      // label1\n      // \n      this-&gt;label1-&gt;Location = System::Drawing::Point( 24, 16 );\n      this-&gt;label1-&gt;Name = &quot;label1&quot;;\n      this-&gt;label1-&gt;TabIndex = 2;\n      this-&gt;label1-&gt;Text = &quot;Button&#39;s Text:&quot;;\n\n      // \n      // Form1\n      // \n      this-&gt;ClientSize = System::Drawing::Size( 292, 129 );\n      array&lt;System::Windows::Forms::Control^&gt;^temp0 = {this-&gt;label1,this-&gt;textBox1,this-&gt;layoutButton};\n      this-&gt;Controls-&gt;AddRange( temp0 );\n      this-&gt;Name = &quot;Form1&quot;;\n      this-&gt;Text = &quot;Layout Sample&quot;;\n      this-&gt;Layout += gcnew System::Windows::Forms::LayoutEventHandler( this, &amp;Form1::Form1_Layout );\n      this-&gt;ResumeLayout( false );\n   }\n\n   // This method ensures that the form&#39;s width is the preferred size of 300 pixels\n   // or the size of the button plus 50 pixels, whichever amount is less.\n   void Form1_Layout( Object^ /*sender*/, System::Windows::Forms::LayoutEventArgs^ e )\n   {\n      // This event is raised once at startup with the AffectedControl\n      // and AffectedProperty properties on the LayoutEventArgs as null. \n      // The event provides size preferences for that case.\n      if ( (e-&gt;AffectedControl != nullptr) &amp;&amp; (e-&gt;AffectedProperty != nullptr) )\n      {\n         // Ensure that the affected property is the Bounds property\n         // of the form.\n         if ( e-&gt;AffectedProperty-&gt;ToString()-&gt;Equals( &quot;Bounds&quot; ) )\n         {\n            // If layoutButton&#39;s width plus a padding of 50 pixels is greater than the preferred \n            // size of 300 pixels, increase the form&#39;s width.\n            if ( (this-&gt;layoutButton-&gt;Width + 50) &gt; 300 )\n            {\n               this-&gt;Width = this-&gt;layoutButton-&gt;Width + 50;\n            }\n            // If not, keep the form&#39;s width at 300 pixels.\n            else\n            {\n               this-&gt;Width = 300;\n            }\n\n            // Center layoutButton on the form.\n            this-&gt;layoutButton-&gt;Left = (this-&gt;ClientSize.Width - this-&gt;layoutButton-&gt;Width) / 2;\n         }\n      }\n   }\n\n   // This method sets the Text property of layoutButton to the Text property\n   // of textBox1.  If the new text plus a padding of 20 pixels is larger than \n   // the preferred size of 150 pixels, increase layoutButton&#39;s Width property.\n   void textBox1_TextChanged( Object^ /*sender*/, System::EventArgs^ /*e*/ )\n   {\n      // Set the Text property of layoutButton.\n      this-&gt;layoutButton-&gt;Text = this-&gt;textBox1-&gt;Text;\n\n      // Get the width of the text using the proper font.\n      int textWidth = (int)this-&gt;CreateGraphics()-&gt;MeasureString( layoutButton-&gt;Text, layoutButton-&gt;Font ).Width;\n\n      // If the width of the text plus a padding of 20 pixels is greater than the preferred size of\n      // 150 pixels, increase layoutButton&#39;s width.\n      if ( (textWidth + 20) &gt; 150 )\n      {\n         // Setting the size property on any control raises \n         // the Layout event for its container.\n         this-&gt;layoutButton-&gt;Width = textWidth + 20;\n      }\n      // If not, keep layoutButton&#39;s width at 150 pixels.\n      else\n      {\n         this-&gt;layoutButton-&gt;Width = 150;\n      }\n   }\n};\n\n[STAThread]\nint main()\n{\n   Application::Run( gcnew Form1 );\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>When you create a <a class=\"xref\" href=\"system.windows.forms.layouteventargs\" data-linktype=\"relative-path\">LayoutEventArgs</a> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event handler delegates, see <a href=\"../topic/handling%20and%20raising%20events\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.LayoutEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.LayoutEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.LayoutEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.LayoutEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.LayoutEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.LayoutEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"fd9352ea-de13-20c0-6c38-219ef4b7ad90\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that will handle the  event of a .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.windows.forms/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.LayoutEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.LayoutEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Windows.Forms.LayoutEventHandler","System.Windows.Forms.LayoutEventHandler..ctor","System.Windows.Forms.LayoutEventHandler.Invoke","System.Windows.Forms.LayoutEventHandler.BeginInvoke","System.Windows.Forms.LayoutEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.LayoutEventHandler","System::Windows::Forms::LayoutEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"fd9352ea-de13-20c0-6c38-219ef4b7ad90","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Windows.Forms/LayoutEventHandler.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"LayoutEventHandler delegate | Microsoft Docs","_op_ogTitle":"LayoutEventHandler delegate","description":"Represents the method that will handle the  event of a .\n","toc_asset_id":"api/_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.LayoutEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.layouteventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.layouteventhandler","fileRelativePath":"api/System.Windows.Forms.LayoutEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}