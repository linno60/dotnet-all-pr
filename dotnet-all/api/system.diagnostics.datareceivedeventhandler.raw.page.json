{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">DataReceivedEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that will handle the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_OutputDataReceived\" data-linktype=\"relative-path\">OutputDataReceived</a> event or <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_ErrorDataReceived\" data-linktype=\"relative-path\">ErrorDataReceived</a> event of a <a class=\"xref\" href=\"system.diagnostics.process\" data-linktype=\"relative-path\">Process</a>.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void DataReceivedEventHandler(object sender, DataReceivedEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">System.Delegate</a></span></div><span class=\"lang-csharp\">DataReceivedEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example illustrates how to perform asynchronous read operations on the redirected <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> stream of the <strong>sort</strong> command. The <strong>sort</strong> command is a console application that reads and sorts text input.  </p>\n<p> The example creates a DataReceivedEventHandler delegate for the <code>SortOutputHandler</code> event handler and associates the delegate with the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_OutputDataReceived\" data-linktype=\"relative-path\">OutputDataReceived</a> event. The event handler receives text lines from the redirected <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> stream, formats the text, and writes the text to the screen.  </p>\n<pre><code class=\"lang-cpp\" name=\"Process_AsyncStreams#1\">// Define the namespaces used by this sample.\n#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Text;\nusing namespace System::IO;\nusing namespace System::Diagnostics;\nusing namespace System::Threading;\nusing namespace System::ComponentModel;\n\nref class SortOutputRedirection\n{\nprivate:\n   // Define static variables shared by class methods.\n   static StringBuilder^ sortOutput = nullptr;\n   static int numOutputLines = 0;\n\npublic:\n   static void SortInputListText()\n   {\n      // Initialize the process and its StartInfo properties.\n      // The sort command is a console application that\n      // reads and sorts text input.\n\n      Process^ sortProcess;\n      sortProcess = gcnew Process;\n      sortProcess-&gt;StartInfo-&gt;FileName = &quot;Sort.exe&quot;;\n      \n      // Set UseShellExecute to false for redirection.\n      sortProcess-&gt;StartInfo-&gt;UseShellExecute = false;\n      \n      // Redirect the standard output of the sort command.  \n      // This stream is read asynchronously using an event handler.\n      sortProcess-&gt;StartInfo-&gt;RedirectStandardOutput = true;\n      sortOutput = gcnew StringBuilder;\n      \n      // Set our event handler to asynchronously read the sort output.\n      sortProcess-&gt;OutputDataReceived += gcnew DataReceivedEventHandler( SortOutputHandler );\n      \n      // Redirect standard input as well.  This stream\n      // is used synchronously.\n      sortProcess-&gt;StartInfo-&gt;RedirectStandardInput = true;\n      \n      // Start the process.\n      sortProcess-&gt;Start();\n      \n      // Use a stream writer to synchronously write the sort input.\n      StreamWriter^ sortStreamWriter = sortProcess-&gt;StandardInput;\n      \n      // Start the asynchronous read of the sort output stream.\n      sortProcess-&gt;BeginOutputReadLine();\n      \n      // Prompt the user for input text lines.  Write each \n      // line to the redirected input stream of the sort command.\n      Console::WriteLine( &quot;Ready to sort up to 50 lines of text&quot; );\n\n      String^ inputText;\n      int numInputLines = 0;\n      do\n      {\n         Console::WriteLine( &quot;Enter a text line (or press the Enter key to stop):&quot; );\n\n         inputText = Console::ReadLine();\n         if (  !String::IsNullOrEmpty( inputText ) )\n         {\n            numInputLines++;\n            sortStreamWriter-&gt;WriteLine( inputText );\n         }\n      }\n      while (  !String::IsNullOrEmpty( inputText ) &amp;&amp; (numInputLines &lt; 50) );\n\n      Console::WriteLine( &quot;&lt;end of input stream&gt;&quot; );\n      Console::WriteLine();\n      \n      // End the input stream to the sort command.\n      sortStreamWriter-&gt;Close();\n      \n      // Wait for the sort process to write the sorted text lines.\n      sortProcess-&gt;WaitForExit();\n\n      if ( numOutputLines &gt; 0 )\n      {\n         \n         // Write the formatted and sorted output to the console.\n         Console::WriteLine( &quot; Sort results = {0} sorted text line(s) &quot;,\n            numOutputLines.ToString() );\n         Console::WriteLine( &quot;----------&quot; );\n         Console::WriteLine( sortOutput-&gt;ToString() );\n      }\n      else\n      {\n         Console::WriteLine( &quot; No input lines were sorted.&quot; );\n      }\n\n      sortProcess-&gt;Close();\n   }\n\nprivate:\n   static void SortOutputHandler( Object^ /*sendingProcess*/,\n      DataReceivedEventArgs^ outLine )\n   {\n      // Collect the sort command output.\n      if (  !String::IsNullOrEmpty( outLine-&gt;Data ) )\n      {\n         numOutputLines++;\n         \n         // Add the text to the collected output.\n         sortOutput-&gt;AppendFormat( &quot;\\n[{0}] {1}&quot;,\n            numOutputLines.ToString(), outLine-&gt;Data );\n      }\n   }\n};\n\n/// The main entry point for the application.\nvoid main()\n{\n   try\n   {\n      SortOutputRedirection::SortInputListText();\n   }\n   catch ( InvalidOperationException^ e ) \n   {\n      Console::WriteLine( &quot;Exception:&quot; );\n      Console::WriteLine( e );\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Process_AsyncStreams#1\">&#39; Define the namespaces used by this sample.\nImports System\nImports System.Text\nImports System.IO\nImports System.Diagnostics\nImports System.Threading\nImports System.ComponentModel\nImports Microsoft.VisualBasic\n\nNamespace ProcessAsyncStreamSamples\n   \n   Class ProcessAsyncOutputRedirection\n      &#39; Define static variables shared by class methods.\n      Private Shared sortOutput As StringBuilder = Nothing\n      Private Shared numOutputLines As Integer = 0\n      \n      Public Shared Sub SortInputListText()\n         \n         &#39; Initialize the process and its StartInfo properties.\n         &#39; The sort command is a console application that\n         &#39; reads and sorts text input.\n         Dim sortProcess As New Process()\n         sortProcess.StartInfo.FileName = &quot;Sort.exe&quot;\n         \n         &#39; Set UseShellExecute to false for redirection.\n         sortProcess.StartInfo.UseShellExecute = False\n         \n         &#39; Redirect the standard output of the sort command.  \n         &#39; Read the stream asynchronously using an event handler.\n         sortProcess.StartInfo.RedirectStandardOutput = True\n         sortOutput = new StringBuilder()\n\n         &#39; Set our event handler to asynchronously read the sort output.\n         AddHandler sortProcess.OutputDataReceived, _\n                    AddressOf SortOutputHandler\n         \n         &#39; Redirect standard input as well.  This stream\n         &#39; is used synchronously.\n         sortProcess.StartInfo.RedirectStandardInput = True\n         \n         &#39; Start the process.\n         sortProcess.Start()\n         \n         &#39; Use a stream writer to synchronously write the sort input.\n         Dim sortStreamWriter As StreamWriter = sortProcess.StandardInput\n     \n         &#39; Start the asynchronous read of the sort output stream.\n         sortProcess.BeginOutputReadLine()\n         \n         &#39; Prompt the user for input text lines.  Write each \n         &#39; line to the redirected input stream of the sort command.\n         Console.WriteLine(&quot;Ready to sort up to 50 lines of text&quot;)\n         \n         Dim inputText As String\n         Dim numInputLines As Integer = 0\n         Do\n            Console.WriteLine(&quot;Enter a text line (or press the Enter key to stop):&quot;)\n            \n            inputText = Console.ReadLine()\n            If Not String.IsNullOrEmpty(inputText) Then\n               numInputLines += 1\n               sortStreamWriter.WriteLine(inputText)\n            End If\n         Loop While Not String.IsNullOrEmpty(inputText) AndAlso numInputLines &lt; 50\n         Console.WriteLine(&quot;&lt;end of input stream&gt;&quot;)\n         Console.WriteLine()\n         \n         &#39; End the input stream to the sort command.\n         sortStreamWriter.Close()\n         \n         &#39; Wait for the sort process to write the sorted text lines.\n         sortProcess.WaitForExit()\n         \n         If Not String.IsNullOrEmpty(numOutputLines) Then\n            &#39; Write the formatted and sorted output to the console.\n            Console.WriteLine(&quot; Sort results = {0} sorted text line(s) &quot;, _\n                              numOutputLines)\n            Console.WriteLine(&quot;----------&quot;)\n            Console.WriteLine(sortOutput)\n         Else\n            Console.WriteLine(&quot; No input lines were sorted.&quot;)\n         End If\n         \n         sortProcess.Close()\n      End Sub \n      \n      Private Shared Sub SortOutputHandler(sendingProcess As Object, _\n         outLine As DataReceivedEventArgs)\n\n         &#39; Collect the sort command output.\n         If Not String.IsNullOrEmpty(outLine.Data) Then\n            numOutputLines += 1\n            \n            &#39; Add the text to the collected output.\n            sortOutput.Append(Environment.NewLine + &quot;[&quot; _\n                         + numOutputLines.ToString() + &quot;] - &quot; _\n                         + outLine.Data)\n         End If\n      End Sub \n   End Class  \nEnd Namespace \n\nNamespace ProcessAsyncStreamSamples\n  \n   Class ProcessSampleMain\n\n      &#39; The main entry point for the application.\n      Shared Sub Main()\n         Try\n            ProcessAsyncOutputRedirection.SortInputListText()\n         \n         Catch e As InvalidOperationException\n            Console.WriteLine(&quot;Exception:&quot;)\n            Console.WriteLine(e.ToString())\n         End Try\n      End Sub &#39;Main\n   End Class  &#39;ProcessSampleMain\nEnd Namespace &#39;Process_AsyncStream_Sample\n</code></pre><pre><code class=\"lang-cs\" name=\"Process_AsyncStreams#1\">// Define the namespaces used by this sample.\nusing System;\nusing System.Text;\nusing System.IO;\nusing System.Diagnostics;\nusing System.Threading;\nusing System.ComponentModel;\n\nnamespace ProcessAsyncStreamSamples\n{\n    class SortOutputRedirection\n    {\n        // Define static variables shared by class methods.\n        private static StringBuilder sortOutput = null;\n        private static int numOutputLines = 0;\n      \n        public static void SortInputListText()\n        {\n            // Initialize the process and its StartInfo properties.\n            // The sort command is a console application that\n            // reads and sorts text input.\n\n            Process sortProcess;\n            sortProcess = new Process();\n            sortProcess.StartInfo.FileName = &quot;Sort.exe&quot;;\n            \n            // Set UseShellExecute to false for redirection.\n            sortProcess.StartInfo.UseShellExecute = false;\n\n            // Redirect the standard output of the sort command.  \n            // This stream is read asynchronously using an event handler.\n            sortProcess.StartInfo.RedirectStandardOutput = true;\n            sortOutput = new StringBuilder(&quot;&quot;);\n\n            // Set our event handler to asynchronously read the sort output.\n            sortProcess.OutputDataReceived += new DataReceivedEventHandler(SortOutputHandler);\n\n            // Redirect standard input as well.  This stream\n            // is used synchronously.\n            sortProcess.StartInfo.RedirectStandardInput = true;\n  \n            // Start the process.\n            sortProcess.Start();\n\n            // Use a stream writer to synchronously write the sort input.\n            StreamWriter sortStreamWriter = sortProcess.StandardInput;\n\n            // Start the asynchronous read of the sort output stream.\n            sortProcess.BeginOutputReadLine();\n\n            // Prompt the user for input text lines.  Write each \n            // line to the redirected input stream of the sort command.\n            Console.WriteLine(&quot;Ready to sort up to 50 lines of text&quot;);\n\n            String inputText;\n            int numInputLines = 0;\n            do \n            {\n                Console.WriteLine(&quot;Enter a text line (or press the Enter key to stop):&quot;);\n            \n                inputText = Console.ReadLine();\n                if (!String.IsNullOrEmpty(inputText))\n                {\n                    numInputLines ++;\n                    sortStreamWriter.WriteLine(inputText);\n                }\n            }\n            while (!String.IsNullOrEmpty(inputText) &amp;&amp; (numInputLines &lt; 50));\n            Console.WriteLine(&quot;&lt;end of input stream&gt;&quot;);\n            Console.WriteLine();\n\n            // End the input stream to the sort command.\n            sortStreamWriter.Close();\n\n            // Wait for the sort process to write the sorted text lines.\n            sortProcess.WaitForExit();\n\n            if (numOutputLines &gt; 0)\n            {\n                // Write the formatted and sorted output to the console.\n                Console.WriteLine(&quot; Sort results = {0} sorted text line(s) &quot;, \n                    numOutputLines);\n                Console.WriteLine(&quot;----------&quot;);\n                Console.WriteLine(sortOutput);\n            }\n            else \n            {\n                Console.WriteLine(&quot; No input lines were sorted.&quot;);\n            }\n\n            sortProcess.Close();\n        }\n\n        private static void SortOutputHandler(object sendingProcess, \n            DataReceivedEventArgs outLine)\n        {\n            // Collect the sort command output.\n            if (!String.IsNullOrEmpty(outLine.Data))\n            {\n                numOutputLines++;\n    \n                // Add the text to the collected output.\n                sortOutput.Append(Environment.NewLine + \n                    &quot;[&quot; + numOutputLines.ToString() + &quot;] - &quot; + outLine.Data);\n            }\n        }\n    }\n}\n\nnamespace ProcessAsyncStreamSamples\n{\n\n    class ProcessSampleMain\n    {\n        /// The main entry point for the application.\n        static void Main()\n        {\n            try \n            {\n                SortOutputRedirection.SortInputListText();\n            }\n            catch (InvalidOperationException e)\n            {\n                Console.WriteLine(&quot;Exception:&quot;);\n                Console.WriteLine(e.ToString());\n            }\n        }\n    }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>When you create a DataReceivedEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see <a href=\"../topic/handling%20and%20raising%20events\" data-linktype=\"relative-path\">Events</a>.  </p>\n<p> To asynchronously collect the redirected <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardOutput_\" data-linktype=\"relative-path\">StandardOutput</a> or <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_StandardError_\" data-linktype=\"relative-path\">StandardError</a> stream output of a process, add your event handler to the <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_OutputDataReceived\" data-linktype=\"relative-path\">OutputDataReceived</a> or <a class=\"xref\" href=\"system.diagnostics.process#System_Diagnostics_Process_ErrorDataReceived\" data-linktype=\"relative-path\">ErrorDataReceived</a> event. These events are raised each time the process writes a line to the corresponding redirected stream. When the redirected stream is closed, a null line is sent to the event handler. Ensure that your event handler checks for this condition before accessing the <a class=\"xref\" href=\"system.diagnostics.datareceivedeventargs#System_Diagnostics_DataReceivedEventArgs_Data_\" data-linktype=\"relative-path\">Data</a> property. For example, you can use the <code>static</code> method <a class=\"xref\" href=\"system.string#System_String_IsNullOrEmpty_\" data-linktype=\"relative-path\">IsNullOrEmpty</a> to validate the <a class=\"xref\" href=\"system.diagnostics.datareceivedeventargs#System_Diagnostics_DataReceivedEventArgs_Data_\" data-linktype=\"relative-path\">Data</a> property in your event handler.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Diagnostics.DataReceivedEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.DataReceivedEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.DataReceivedEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.DataReceivedEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.DataReceivedEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.DataReceivedEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-24 01:41 AM\">\r\n<meta name=\"document_id\" content=\"88dd2dee-af2c-624c-b29e-e9d52d1789af\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that will handle the  event or  event of a .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.diagnostics/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Diagnostics.DataReceivedEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Diagnostics.DataReceivedEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Diagnostics.DataReceivedEventHandler","System.Diagnostics.DataReceivedEventHandler..ctor","System.Diagnostics.DataReceivedEventHandler.Invoke","System.Diagnostics.DataReceivedEventHandler.BeginInvoke","System.Diagnostics.DataReceivedEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Diagnostics.DataReceivedEventHandler","System::Diagnostics::DataReceivedEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-24 01:41 AM","document_id":"88dd2dee-af2c-624c-b29e-e9d52d1789af","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics/DataReceivedEventHandler.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DataReceivedEventHandler delegate | Microsoft Docs","_op_ogTitle":"DataReceivedEventHandler delegate","description":"Represents the method that will handle the  event or  event of a .\n","toc_asset_id":"api/_splitted/System.Diagnostics/toc.json","toc_rel":"_splitted/System.Diagnostics/toc.json","source_url":"","ms.assetid":"System.Diagnostics.DataReceivedEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.datareceivedeventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.datareceivedeventhandler","fileRelativePath":"api/System.Diagnostics.DataReceivedEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}