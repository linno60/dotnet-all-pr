{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">FrameStyle</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies the frame style of the selected control.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public enum FrameStyle</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">FrameStyle</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates using the FrameStyle enumeration. To run the example, paste the following code in a form called Form1 containing several controls.This example assumes the MouseDown, MouseMove, and MouseUp events are connected to the event-handler methods defined in the example.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.RectangleToScreen#2\">  // The following three methods will draw a rectangle and allow \n  // the user to use the mouse to resize the rectangle.  If the \n  // rectangle intersects a control&#39;s client rectangle, the \n  // control&#39;s color will change.\n\n  bool isDrag = false;\n  Rectangle theRectangle = new Rectangle\n(new Point(0, 0), new Size(0, 0));\n  Point startPoint;\n\n  private void Form1_MouseDown(object sender, \nSystem.Windows.Forms.MouseEventArgs e)\n  {\n\n      // Set the isDrag variable to true and get the starting point \n      // by using the PointToScreen method to convert form \n// coordinates to screen coordinates.\n      if (e.Button==MouseButtons.Left)\n      {\n          isDrag = true;\n      }\n\n      Control control = (Control) sender;\n\n      // Calculate the startPoint by using the PointToScreen \n      // method.\n      startPoint = control.PointToScreen(new Point(e.X, e.Y));\n  }\n\n  private void Form1_MouseMove(object sender, \nSystem.Windows.Forms.MouseEventArgs e)\n  {\n\n      // If the mouse is being dragged, \n// undraw and redraw the rectangle as the mouse moves.\n      if (isDrag)\n\n          // Hide the previous rectangle by calling the \n\t// DrawReversibleFrame method with the same parameters.\n      {\n          ControlPaint.DrawReversibleFrame(theRectangle, \n\t\tthis.BackColor, FrameStyle.Dashed);\n\n          // Calculate the endpoint and dimensions for the new \n       // rectangle, again using the PointToScreen method.\n          Point endPoint = ((Control) sender).PointToScreen(new Point(e.X, e.Y));\n\n          int width = endPoint.X-startPoint.X;\n          int height = endPoint.Y-startPoint.Y;\n          theRectangle = new Rectangle(startPoint.X, \n\t\tstartPoint.Y, width, height);\n\n          // Draw the new rectangle by calling DrawReversibleFrame\n\t// again.  \n          ControlPaint.DrawReversibleFrame(theRectangle, \n\t\tthis.BackColor, FrameStyle.Dashed);\n      }\n  }\n\n  private void Form1_MouseUp(object sender, \nSystem.Windows.Forms.MouseEventArgs e)\n  {\n\n      // If the MouseUp event occurs, the user is not dragging.\n      isDrag = false;\n\n      // Draw the rectangle to be evaluated. Set a dashed frame style \n      // using the FrameStyle enumeration.\n      ControlPaint.DrawReversibleFrame(theRectangle, \n\tthis.BackColor, FrameStyle.Dashed);\n\n      // Find out which controls intersect the rectangle and \n      // change their color. The method uses the RectangleToScreen  \n      // method to convert the Control&#39;s client coordinates \n// to screen coordinates.\n   Rectangle controlRectangle;\n      for(int i = 0; i &lt; Controls.Count; i++)\n      {\n          controlRectangle = Controls[i].RectangleToScreen\n\t\t(Controls[i].ClientRectangle);\n          if (controlRectangle.IntersectsWith(theRectangle))\n          {\n              Controls[i].BackColor = Color.BurlyWood;\n          }\n      }\n\n      // Reset the rectangle.\n      theRectangle = new Rectangle(0, 0, 0, 0);\n  }\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.RectangleToScreen#2\">private:\n   // The following three methods will draw a rectangle and allow \n   // the user to use the mouse to resize the rectangle.  If the \n   // rectangle intersects a control&#39;s client rectangle, the \n   // control&#39;s color will change.\n   bool isDrag;\n   Rectangle theRectangle;\n   Point startPoint;\n   void Form1_MouseDown( Object^ sender, System::Windows::Forms::MouseEventArgs^ e )\n   {\n      \n      // Set the isDrag variable to true and get the starting point \n      // by using the PointToScreen method to convert form \n      // coordinates to screen coordinates.\n      if ( e-&gt;Button == ::MouseButtons::Left )\n      {\n         isDrag = true;\n      }\n\n      Control^ control = dynamic_cast&lt;Control^&gt;(sender);\n      \n      // Calculate the startPoint by using the PointToScreen \n      // method.\n      startPoint = control-&gt;PointToScreen( Point(e-&gt;X,e-&gt;Y) );\n   }\n\n   void Form1_MouseMove( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ e )\n   {\n      \n      // If the mouse is being dragged, \n      // undraw and redraw the rectangle as the mouse moves.\n      if ( isDrag )\n      {\n         ControlPaint::DrawReversibleFrame( theRectangle, this-&gt;BackColor, FrameStyle::Dashed );\n         \n         // Calculate the endpoint and dimensions for the new \n         // rectangle, again using the PointToScreen method.\n         Point endPoint = this-&gt;PointToScreen( Point(e-&gt;X,e-&gt;Y) );\n         int width = endPoint.X - startPoint.X;\n         int height = endPoint.Y - startPoint.Y;\n         theRectangle = Rectangle(startPoint.X,startPoint.Y,width,height);\n         \n         // Draw the new rectangle by calling DrawReversibleFrame\n         // again.  \n         ControlPaint::DrawReversibleFrame( theRectangle, this-&gt;BackColor, FrameStyle::Dashed );\n      }\n   }\n\n   void Form1_MouseUp( Object^ /*sender*/, System::Windows::Forms::MouseEventArgs^ /*e*/ )\n   {\n      \n      // If the MouseUp event occurs, the user is not dragging.\n      isDrag = false;\n      \n      // Draw the rectangle to be evaluated. Set a dashed frame style \n      // using the FrameStyle enumeration.\n      ControlPaint::DrawReversibleFrame( theRectangle, this-&gt;BackColor, FrameStyle::Dashed );\n      \n      // Find out which controls intersect the rectangle and \n      // change their color. The method uses the RectangleToScreen  \n      // method to convert the Control&#39;s client coordinates \n      // to screen coordinates.\n      Rectangle controlRectangle;\n      for ( int i = 0; i &lt; Controls-&gt;Count; i++ )\n      {\n         controlRectangle = Controls[ i ]-&gt;RectangleToScreen( Controls[ i ]-&gt;ClientRectangle );\n         if ( controlRectangle.IntersectsWith( theRectangle ) )\n         {\n            Controls[ i ]-&gt;BackColor = Color::BurlyWood;\n         }\n\n      }\n      \n      // Reset the rectangle.\n      theRectangle = Rectangle(0,0,0,0);\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.RectangleToScreen#2\">&#39; The following three methods will draw a rectangle and allow \n&#39; the user to use the mouse to resize the rectangle.  If the \n&#39; rectangle intersects a control&#39;s client rectangle, the \n&#39; control&#39;s color will change.\n\nDim isDrag As Boolean = False\nDim theRectangle As New rectangle(New Point(0, 0), New Size(0, 0))\nDim startPoint As Point\n\nPrivate Sub Form1_MouseDown(ByVal sender As Object, ByVal e As _\n    System.Windows.Forms.MouseEventArgs) Handles MyBase.MouseDown\n\n    &#39; Set the isDrag variable to true and get the starting point \n    &#39; by using the PointToScreen method to convert form coordinates to\n    &#39; screen coordinates.\n    If (e.Button = MouseButtons.Left) Then\n        isDrag = True\n    End If\n\n    Dim control As Control = CType(sender, Control)\n\n    &#39; Calculate the startPoint by using the PointToScreen \n    &#39; method.\n    startPoint = control.PointToScreen(New Point(e.X, e.Y))\nEnd Sub\n\nPrivate Sub Form1_MouseMove(ByVal sender As Object, ByVal e As _\nSystem.Windows.Forms.MouseEventArgs) Handles MyBase.MouseMove\n\n    &#39; If the mouse is being dragged, undraw and redraw the rectangle\n    &#39; as the mouse moves.\n    If (isDrag) Then\n\n        &#39; Hide the previous rectangle by calling the DrawReversibleFrame \n        &#39; method with the same parameters.\n        ControlPaint.DrawReversibleFrame(theRectangle, Me.BackColor, _\n            FrameStyle.Dashed)\n\n        &#39; Calculate the endpoint and dimensions for the new rectangle, \n        &#39; again using the PointToScreen method.\n        Dim endPoint As Point = CType(sender, Control).PointToScreen(New Point(e.X, e.Y))\n        Dim width As Integer = endPoint.X - startPoint.X\n        Dim height As Integer = endPoint.Y - startPoint.Y\n        theRectangle = New Rectangle(startPoint.X, startPoint.Y, _\n            width, height)\n\n        &#39; Draw the new rectangle by calling DrawReversibleFrame again.  \n        ControlPaint.DrawReversibleFrame(theRectangle, Me.BackColor, _\n             FrameStyle.Dashed)\n    End If\nEnd Sub\n\nPrivate Sub Form1_MouseUp(ByVal sender As Object, ByVal e As _\nSystem.Windows.Forms.MouseEventArgs) Handles MyBase.MouseUp\n\n    &#39; If the MouseUp event occurs, the user is not dragging.\n    isDrag = False\n\n    &#39; Draw the rectangle to be evaluated. Set a dashed frame style \n    &#39; using the FrameStyle enumeration.\n    ControlPaint.DrawReversibleFrame(theRectangle, Me.BackColor, _\n        FrameStyle.Dashed)\n\n    &#39; Find out which controls intersect the rectangle and change their color.\n    &#39; The method uses the RectangleToScreen method to convert the \n    &#39; Control&#39;s client coordinates to screen coordinates.\n    Dim i As Integer\n    Dim controlRectangle As Rectangle\n    For i = 0 To Controls.Count - 1\n        controlRectangle = Controls(i).RectangleToScreen _\n            (Controls(i).ClientRectangle)\n        If controlRectangle.IntersectsWith(theRectangle) Then\n            Controls(i).BackColor = Color.BurlyWood\n        End If\n    Next\n\n    &#39; Reset the rectangle.\n    theRectangle = New Rectangle(0, 0, 0, 0)\nEnd Sub\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>This enumeration is used by <a class=\"xref\" href=\"system.windows.forms.controlpaint#System_Windows_Forms_ControlPaint_DrawReversibleFrame_\" data-linktype=\"relative-path\">DrawReversibleFrame</a>.  </p>\n<p> <a class=\"xref\" href=\"system.windows.forms.controlpaint#System_Windows_Forms_ControlPaint_DrawReversibleFrame_\" data-linktype=\"relative-path\">DrawReversibleFrame</a> is used when selecting objects or during drag-and-drop operations.</p>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Windows_Forms_FrameStyle_Dashed\">\r\n      \t\t\t<span class=\"lang-csharp\">Dashed</span>\r\n      \t</td>\r\n      \t<td><p>A thin, dashed border.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_FrameStyle_Thick\">\r\n      \t\t\t<span class=\"lang-csharp\">Thick</span>\r\n      \t</td>\r\n      \t<td><p>A thick, solid border.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.FrameStyle.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.FrameStyle\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.FrameStyle.Dashed\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.FrameStyle.Thick\">\r\n<meta name=\"APILocation\" content=\"System.Windows.Forms.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 05:47 AM\">\r\n<meta name=\"document_id\" content=\"04046add-b79d-3403-d7be-e85c7769ccac\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies the frame style of the selected control.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.windows.forms/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.FrameStyle\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.FrameStyle.yml","open_to_public_contributors":false,"api_name":["System.Windows.Forms.FrameStyle","System.Windows.Forms.FrameStyle.Dashed","System.Windows.Forms.FrameStyle.Thick"],"api_location":["System.Windows.Forms.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.FrameStyle","System::Windows::Forms::FrameStyle","System.Windows.Forms.FrameStyle.Dashed","System::Windows::Forms::FrameStyle::Dashed","System.Windows.Forms.FrameStyle.Thick","System::Windows::Forms::FrameStyle::Thick"],"dev_langs":["csharp"],"updated_at":"2017-03-31 05:47 AM","document_id":"04046add-b79d-3403-d7be-e85c7769ccac","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Windows.Forms/FrameStyle.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"FrameStyle enum | Microsoft Docs","_op_ogTitle":"FrameStyle enum","description":"Specifies the frame style of the selected control.\n","toc_asset_id":"api/_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.FrameStyle","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.framestyle","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.framestyle","fileRelativePath":"api/System.Windows.Forms.FrameStyle.html"},"themesRelativePathToOutputRoot":"_themes/"}