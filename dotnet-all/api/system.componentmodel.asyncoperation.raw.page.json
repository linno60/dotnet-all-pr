{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">AsyncOperation</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Tracks the lifetime of an asynchronous operation.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public sealed class AsyncOperation</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">AsyncOperation</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates using an AsyncOperation object to track the lifetime of asynchronous operations. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.componentmodel.asyncoperationmanager\" data-linktype=\"relative-path\">System.ComponentModel.AsyncOperationManager</a> class.  </p>\n<p> For a full code listing, see <a href=\"../Topic/How%20to:%20Implement%20a%20Component%20That%20Supports%20the%20Event-based%20Asynchronous%20Pattern.md\" data-linktype=\"relative-path\">How to: Implement a Component That Supports the Event-based Asynchronous Pattern</a>. For a full code listing of a client form, see <a href=\"../Topic/How%20to:%20Implement%20a%20Client%20of%20the%20Event-based%20Asynchronous%20Pattern.md\" data-linktype=\"relative-path\">How to: Implement a Client of the Event-based Asynchronous Pattern</a>.  </p>\n<pre><code class=\"lang-vb\" name=\"System.ComponentModel.AsyncOperationManager#3\">&#39; This method starts an asynchronous calculation. \n&#39; First, it checks the supplied task ID for uniqueness.\n&#39; If taskId is unique, it creates a new WorkerEventHandler \n&#39; and calls its BeginInvoke method to start the calculation.\nPublic Overridable Sub CalculatePrimeAsync( _\n    ByVal numberToTest As Integer, _\n    ByVal taskId As Object)\n\n    &#39; Create an AsyncOperation for taskId.\n    Dim asyncOp As AsyncOperation = _\n        AsyncOperationManager.CreateOperation(taskId)\n\n    &#39; Multiple threads will access the task dictionary,\n    &#39; so it must be locked to serialize access.\n    SyncLock userStateToLifetime.SyncRoot\n        If userStateToLifetime.Contains(taskId) Then\n            Throw New ArgumentException( _\n                &quot;Task ID parameter must be unique&quot;, _\n                &quot;taskId&quot;)\n        End If\n\n        userStateToLifetime(taskId) = asyncOp\n    End SyncLock\n\n    &#39; Start the asynchronous operation.\n    Dim workerDelegate As New WorkerEventHandler( _\n        AddressOf CalculateWorker)\n\n    workerDelegate.BeginInvoke( _\n        numberToTest, _\n        asyncOp, _\n        Nothing, _\n        Nothing)\n\nEnd Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.ComponentModel.AsyncOperationManager#3\">// This method starts an asynchronous calculation. \n// First, it checks the supplied task ID for uniqueness.\n// If taskId is unique, it creates a new WorkerEventHandler \n// and calls its BeginInvoke method to start the calculation.\npublic virtual void CalculatePrimeAsync(\n    int numberToTest,\n    object taskId)\n{\n    // Create an AsyncOperation for taskId.\n    AsyncOperation asyncOp =\n        AsyncOperationManager.CreateOperation(taskId);\n\n    // Multiple threads will access the task dictionary,\n    // so it must be locked to serialize access.\n    lock (userStateToLifetime.SyncRoot)\n    {\n        if (userStateToLifetime.Contains(taskId))\n        {\n            throw new ArgumentException(\n                &quot;Task ID parameter must be unique&quot;, \n                &quot;taskId&quot;);\n        }\n\n        userStateToLifetime[taskId] = asyncOp;\n    }\n\n    // Start the asynchronous operation.\n    WorkerEventHandler workerDelegate = new WorkerEventHandler(CalculateWorker);\n    workerDelegate.BeginInvoke(\n        numberToTest,\n        asyncOp,\n        null,\n        null);\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>When you implement a class according to the <a href=\"../topic/event-based%20asynchronous%20pattern%20overview\" data-linktype=\"relative-path\">Event-based Asynchronous Pattern Overview</a>, you may need to track the lifetime of each asynchronous operation invoked on an instance of your class. The AsyncOperation class provides ways to track and report the progress of an asynchronous task.  </p>\n<p> The following list identifies ways to use an AsyncOperation object:  </p>\n<ul>\n<li><p>To report progress and interim results to the client, call <a class=\"xref\" href=\"system.componentmodel.asyncoperation#System_ComponentModel_AsyncOperation_Post_\" data-linktype=\"relative-path\">Post</a> from your asynchronous worker code.  </p>\n</li>\n<li><p>To indicate that an asynchronous task has completed, or to cancel a pending asynchronous task, call <a class=\"xref\" href=\"system.componentmodel.asyncoperation#System_ComponentModel_AsyncOperation_PostOperationCompleted_\" data-linktype=\"relative-path\">PostOperationCompleted</a>.  </p>\n</li>\n</ul>\n<p> Your class should get an AsyncOperation object for each asynchronous task by calling <a class=\"xref\" href=\"system.componentmodel.asyncoperationmanager#System_ComponentModel_AsyncOperationManager_CreateOperation_\" data-linktype=\"relative-path\">CreateOperation</a> when each task starts. To allow the client to distinguish separate asynchronous tasks, <a class=\"xref\" href=\"system.componentmodel.asyncoperationmanager#System_ComponentModel_AsyncOperationManager_CreateOperation_\" data-linktype=\"relative-path\">CreateOperation</a> takes a parameter for a unique client-provided token, which becomes the <a class=\"xref\" href=\"system.componentmodel.asyncoperation#System_ComponentModel_AsyncOperation_UserSuppliedState_\" data-linktype=\"relative-path\">UserSuppliedState</a> property. It can then be used by client code to identify the particular asynchronous task that is raising progress or completion events.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_AsyncOperation_SynchronizationContext_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_AsyncOperation_SynchronizationContext\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SynchronizationContext</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the <a class=\"xref\" href=\"system.threading.synchronizationcontext\" data-linktype=\"relative-path\">SynchronizationContext</a> object that was passed to the constructor.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Threading.SynchronizationContext SynchronizationContext { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.synchronizationcontext\" data-linktype=\"relative-path\">SynchronizationContext</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.threading.synchronizationcontext\" data-linktype=\"relative-path\">SynchronizationContext</a> object that was passed to the constructor.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_AsyncOperation_UserSuppliedState_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_AsyncOperation_UserSuppliedState\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">UserSuppliedState</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets an object used to uniquely identify an asynchronous operation.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public object UserSuppliedState { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The state object passed to the asynchronous method invocation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If your class supports multiple asynchronous methods or multiple invocations of a single asynchronous method, clients will need a way to determine which asynchronous task is raising events. Your <code>MethodNameAsync</code> method should take a parameter of type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> that will act as a task ID. You will use this task ID when you call the <a class=\"xref\" href=\"system.componentmodel.asyncoperationmanager#System_ComponentModel_AsyncOperationManager_CreateOperation_\" data-linktype=\"relative-path\">CreateOperation</a>, method and this will associate the client&#39;s task ID with a particular invocation of your asynchronous operation. This task ID is made available to your implementation through the UserSuppliedState property.  </p>\n<div class=\"CAUTION\"><h5>Caution</h5><p> Client code must be careful to provide a unique value for the UserSuppliedState property. Non-unique task IDs may cause your implementation to report progress and other events incorrectly. Your code should check for a non-unique task ID and raise an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> if one is detected.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_AsyncOperation_Finalize_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_AsyncOperation_Finalize\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Finalize()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Finalizes the asynchronous operation.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">~AsyncOperation ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_AsyncOperation_OperationCompleted_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_AsyncOperation_OperationCompleted\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OperationCompleted()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Ends the lifetime of an asynchronous operation.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void OperationCompleted ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>OperationCompleted has been called previously for this task.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Call the OperationCompleted method to end the lifetime of an asynchronous operation. After this method is called for a particular task, calls to its corresponding <a class=\"xref\" href=\"system.componentmodel.asyncoperation\" data-linktype=\"relative-path\">AsyncOperation</a> will raise an exception.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_AsyncOperation_Post_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_AsyncOperation_Post_System_Threading_SendOrPostCallback_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Post(SendOrPostCallback, Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Invokes a delegate on the thread or context appropriate for the application model.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Post (System.Threading.SendOrPostCallback d, object arg);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>d</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.sendorpostcallback\" data-linktype=\"relative-path\">SendOrPostCallback</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.threading.sendorpostcallback\" data-linktype=\"relative-path\">SendOrPostCallback</a> object that wraps the delegate to be called when the operation ends.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>arg</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An argument for the delegate contained in the <code>d</code> parameter.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The <span class=\"xref\">stem.ComponentModel.AsyncOperation.PostOperationCompleted*</span> method has been called previously for this task.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>d</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The Post method invokes the delegate specified by the <code>arg</code> parameter without ending the lifetime of the asynchronous operation.  </p>\n<p> You can call the Post method as often as you like while the lifetime of the asynchronous operation has not been ended by a call to <a class=\"xref\" href=\"system.componentmodel.asyncoperation#System_ComponentModel_AsyncOperation_PostOperationCompleted_\" data-linktype=\"relative-path\">PostOperationCompleted</a>. You can use the method to report progress or interim results back to clients.  </p>\n<p> The <code>d</code> parameter wraps the delegate you want called when you want to post an update about the status of the asynchronous task. The <a class=\"xref\" href=\"system.componentmodel.asyncoperation\" data-linktype=\"relative-path\">AsyncOperation</a> object will ensure that your delegate is invoked on the thread or context appropriate for the application model. Your method can optionally raise an event that notifies clients of a status change, progress update, or newly available incremental results.  </p>\n<p> The <code>arg</code> parameter should be used to pass state to the delegate wrapped by the <code>d</code> parameter. It might be a reference to an <a class=\"xref\" href=\"system.componentmodel.asyncoperation\" data-linktype=\"relative-path\">AsyncOperation</a>, or it might be a <a class=\"xref\" href=\"system.componentmodel.progresschangedeventargs\" data-linktype=\"relative-path\">System.ComponentModel.ProgressChangedEventArgs</a> object. It may be desirable to derive your own class from <a class=\"xref\" href=\"system.componentmodel.progresschangedeventargs\" data-linktype=\"relative-path\">System.ComponentModel.ProgressChangedEventArgs</a> to provide additional state storage.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_AsyncOperation_PostOperationCompleted_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_AsyncOperation_PostOperationCompleted_System_Threading_SendOrPostCallback_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PostOperationCompleted(SendOrPostCallback, Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Ends the lifetime of an asynchronous operation.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void PostOperationCompleted (System.Threading.SendOrPostCallback d, object arg);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>d</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.sendorpostcallback\" data-linktype=\"relative-path\">SendOrPostCallback</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.threading.sendorpostcallback\" data-linktype=\"relative-path\">SendOrPostCallback</a> object that wraps the delegate to be called when the operation ends.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>arg</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An argument for the delegate contained in the <code>d</code> parameter.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><span class=\"xref\">stem.ComponentModel.AsyncOperation.OperationCompleted*</span> has been called previously for this task.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>d</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Call the PostOperationCompleted method to end the lifetime of an asynchronous operation. After this method is called for a particular task, calls to its corresponding <a class=\"xref\" href=\"system.componentmodel.asyncoperation\" data-linktype=\"relative-path\">AsyncOperation</a> object will raise an exception.  </p>\n<p> The <code>d</code> parameter wraps the delegate you want your class to call when the task&#39;s lifetime ends due to completion, cancellation, or failure of the task. The <a class=\"xref\" href=\"system.componentmodel.asyncoperation\" data-linktype=\"relative-path\">AsyncOperation</a> object will ensure that your delegate is invoked on the thread or context appropriate for the application model. Your delegate can optionally raise an event that notifies clients that the asynchronous task&#39;s lifetime has ended.  </p>\n<p> The <code>arg</code> parameter is used to pass state information to the completion delegate <code>d</code>. You can use an <a class=\"xref\" href=\"system.componentmodel.asyncoperation\" data-linktype=\"relative-path\">AsyncOperation</a> object, or an <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs\" data-linktype=\"relative-path\">System.ComponentModel.AsyncCompletedEventArgs</a> object as the parameter value. Alternatively, if you want to provide additional state storage, you can use an instance of a class you derive from the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs\" data-linktype=\"relative-path\">System.ComponentModel.AsyncCompletedEventArgs</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.AsyncOperation.yml\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.AsyncOperation\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.AsyncOperation.Finalize\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.AsyncOperation.OperationCompleted\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.AsyncOperation.Post\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.AsyncOperation.PostOperationCompleted\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.AsyncOperation.SynchronizationContext\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.AsyncOperation.UserSuppliedState\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"32fbe394-2d9a-5995-d6d0-aa3d2bbdf628\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Tracks the lifetime of an asynchronous operation.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.componentmodel/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.ComponentModel.AsyncOperation\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.AsyncOperation.yml","open_to_public_contributors":false,"api_name":["System.ComponentModel.AsyncOperation","System.ComponentModel.AsyncOperation.Finalize","System.ComponentModel.AsyncOperation.OperationCompleted","System.ComponentModel.AsyncOperation.Post","System.ComponentModel.AsyncOperation.PostOperationCompleted","System.ComponentModel.AsyncOperation.SynchronizationContext","System.ComponentModel.AsyncOperation.UserSuppliedState"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.ComponentModel.AsyncOperation","System::ComponentModel::AsyncOperation","System.ComponentModel.AsyncOperation.Finalize","System::ComponentModel::AsyncOperation::Finalize","System.ComponentModel.AsyncOperation.OperationCompleted","System::ComponentModel::AsyncOperation::OperationCompleted","System.ComponentModel.AsyncOperation.Post","System::ComponentModel::AsyncOperation::Post","System.ComponentModel.AsyncOperation.PostOperationCompleted","System::ComponentModel::AsyncOperation::PostOperationCompleted","System.ComponentModel.AsyncOperation.SynchronizationContext","System::ComponentModel::AsyncOperation::SynchronizationContext","System.ComponentModel.AsyncOperation.UserSuppliedState","System::ComponentModel::AsyncOperation::UserSuppliedState"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"32fbe394-2d9a-5995-d6d0-aa3d2bbdf628","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.ComponentModel/AsyncOperation.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"AsyncOperation class | Microsoft Docs","_op_ogTitle":"AsyncOperation class","description":"Tracks the lifetime of an asynchronous operation.\n","toc_asset_id":"api/_splitted/System.ComponentModel/toc.json","toc_rel":"_splitted/System.ComponentModel/toc.json","source_url":"","ms.assetid":"System.ComponentModel.AsyncOperation","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.asyncoperation","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.asyncoperation","fileRelativePath":"api/System.ComponentModel.AsyncOperation.html"},"themesRelativePathToOutputRoot":"_themes/"}