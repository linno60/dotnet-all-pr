{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ITemplate</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Defines the behavior for populating a templated ASP.NET server control with child controls. The child controls represent the inline templates defined on the page.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public interface ITemplate</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates a simple templated server control that uses the ITemplate interface to create a templated property.  </p>\n<pre><code class=\"lang-cs\" name=\"Classic ITemplate Example#1\">using System;\nusing System.Web;\nusing System.Web.UI;\n\nnamespace TemplateControlSamples {\n\n    public class TemplateItem : Control, INamingContainer {\n        private String     _message         = null;\n\n        public TemplateItem(String message) {\n            _message = message;\n        }\n\n        public String Message {\n\n           get {\n              return _message;\n           }\n           set {\n              _message = value;\n           }\n        }\n    }\n\n    [System.Security.Permissions.PermissionSet(System.Security.Permissions.SecurityAction.Demand, Name=&quot;FullTrust&quot;)]\n    [ParseChildren(true)]\n    public class Template1 : Control, INamingContainer {\n\n        private ITemplate  _messageTemplate = null;\n        private String     _message         = null;\n\n        public String Message {\n\n           get {\n              return _message;\n           }\n           set {\n              _message = value;\n           }\n        }\n\n        [\n            PersistenceMode(PersistenceMode.InnerProperty),\n            TemplateContainer(typeof(TemplateItem))\n        ]\n        public ITemplate MessageTemplate {\n           get {\n              return _messageTemplate;\n           }\n           set {\n              _messageTemplate = value;\n           }\n        }\n\n        protected override void CreateChildControls() {\n\n           // If a template has been specified, use it to create children.\n           // Otherwise, create a single LiteralControl with the message value.\n\n           if (MessageTemplate != null) {\n              Controls.Clear();\n              TemplateItem i = new TemplateItem(this.Message);\n              MessageTemplate.InstantiateIn(i);\n              Controls.Add(i);\n           }\n           else {\n              this.Controls.Add(new LiteralControl(this.Message));\n           }\n        }\n    }\n}\n   \n</code></pre><pre><code class=\"lang-vb\" name=\"Classic ITemplate Example#1\">Imports System\nImports System.Web\nImports System.Web.UI\n\nNamespace TemplateControlSamplesVB\n\n    Public Class TemplateItem\n        Inherits Control\n        Implements INamingContainer\n\n        Private _message As String = Nothing\n\n        Public Sub New(Message As String)\n            _message = message\n        End Sub\n\n        Public Property Message As String\n           Get\n              Return _message\n           End Get\n           Set\n              _message = Value\n           End Set\n        End Property\n    End Class\n    &lt;System.Security.Permissions.PermissionSetAttribute(System.Security.Permissions.SecurityAction.Demand, Name:=&quot;FullTrust&quot;), _\n    ParseChildren(true)&gt; _\n    Public Class Template1VB\n        Inherits Control\n        Implements INamingContainer\n\n        Private _messageTemplate As ITemplate = Nothing\n        Private _message As String = Nothing\n\n        Public Property Message As String\n\n           Get\n              Return _message\n           End Get\n           Set\n              _message = Value\n           End Set\n        End Property\n\n        &lt;TemplateContainer(GetType(TemplateItem))&gt; _\n        Public Property MessageTemplate As ITemplate\n\n           Get\n              Return _messageTemplate\n           End Get\n           Set\n              _messageTemplate = Value\n           End Set\n        End Property\n\n        Protected Overrides Sub CreateChildControls()\n\n           &#39; If a template has been specified, use it to create children.\n           &#39; Otherwise, create a single LiteralControl with the message value.\n\n           If Not (MessageTemplate Is Nothing)\n              Controls.Clear()\n              Dim I As New TemplateItem(Me.Message)\n              MessageTemplate.InstantiateIn(I)\n              Controls.Add(I)\n           Else\n              Me.Controls.Add(New LiteralControl(Me.Message))\n           End If\n        End Sub\n\n    End Class\n\nEnd Namespace\n   \n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>This interface is used by custom server controls, but never implemented by them. ASP.NET always implements it.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_ITemplate_InstantiateIn_System_Web_UI_Control_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">InstantiateIn(Control)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>When implemented by a class, defines the <a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a> object that child controls and templates belong to. These child controls are in turn defined within an inline template.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void InstantiateIn (System.Web.UI.Control container);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>container</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a> object to contain the instances of controls from the inline template.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When developing templated server controls, you do not need to implement this method; the .NET Framework provides the implementation for you.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.ITemplate.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.ITemplate\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.ITemplate.InstantiateIn\">\r\n<meta name=\"APILocation\" content=\"System.Web.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"75e89f00-775d-7580-0dd8-2adb2b61fd79\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines the behavior for populating a templated ASP.NET server control with child controls. The child controls represent the inline templates defined on the page.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.web.ui/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.ITemplate\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.ITemplate.yml","open_to_public_contributors":false,"api_name":["System.Web.UI.ITemplate","System.Web.UI.ITemplate.InstantiateIn"],"api_location":["System.Web.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.ITemplate","System::Web::UI::ITemplate","System.Web.UI.ITemplate.InstantiateIn","System::Web::UI::ITemplate::InstantiateIn"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"75e89f00-775d-7580-0dd8-2adb2b61fd79","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Web.UI/ITemplate.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ITemplate interface | Microsoft Docs","_op_ogTitle":"ITemplate interface","description":"Defines the behavior for populating a templated ASP.NET server control with child controls. The child controls represent the inline templates defined on the page.\n","toc_asset_id":"api/_splitted/System.Web.UI/toc.json","toc_rel":"_splitted/System.Web.UI/toc.json","source_url":"","ms.assetid":"System.Web.UI.ITemplate","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.itemplate","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.itemplate","fileRelativePath":"api/System.Web.UI.ITemplate.html"},"themesRelativePathToOutputRoot":"_themes/"}