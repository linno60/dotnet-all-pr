{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">Func&lt;TResult&gt;</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Encapsulates a method that has no parameters and returns a value of the type specified by the <code>TResult</code> parameter.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.CompilerServices.TypeForwardedFrom(&quot;System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089&quot;)]\npublic delegate TResult Func&lt;out TResult&gt;();</code></pre>\r\n  \r\n  \r\n  \r\n  \t\t<h3 class=\"accented\">Type Parameters</h3>\r\n  \t\t<table class=\"nameValue stack\">\r\n  \t\t\t<tr>\r\n  \t\t\t<td>TResult</td>\r\n  \t\t\t<td><p>The type of the return value of the method that this delegate encapsulates.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t</table>\r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">Func&lt;TResult&gt;</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example demonstrates how to use a delegate that takes no parameters. This code creates a generic class named <code>LazyValue</code> that has a field of type Func(TResult). This delegate field can store a reference to any function that returns a value of the type that corresponds to the type parameter of the <code>LazyValue</code> object. The <code>LazyValue</code> type also has a <code>Value</code> property that executes the function (if it has not already been executed) and returns the resulting value.  </p>\n<p> The example creates two methods and instantiates two <code>LazyValue</code> objects with lambda expressions that call these methods. The lambda expressions do not take parameters because they just need to call a method. As the output shows, the two methods are executed only when the value of each <code>LazyValue</code> object is retrieved.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Func~1#5\">using System;\n\nstatic class Func1\n{\n   public static void Main()\n   {\n      // Note that each lambda expression has no parameters.\n      LazyValue&lt;int&gt; lazyOne = new LazyValue&lt;int&gt;(() =&gt; ExpensiveOne());\n      LazyValue&lt;long&gt; lazyTwo = new LazyValue&lt;long&gt;(() =&gt; ExpensiveTwo(&quot;apple&quot;));\n\n      Console.WriteLine(&quot;LazyValue objects have been created.&quot;);\n\n      // Get the values of the LazyValue objects.\n      Console.WriteLine(lazyOne.Value);\n      Console.WriteLine(lazyTwo.Value);\n   }\n      \n   static int ExpensiveOne()\n   {\n      Console.WriteLine(&quot;\\nExpensiveOne() is executing.&quot;);\n      return 1;\n   }\n\n   static long ExpensiveTwo(string input)\n   {\n      Console.WriteLine(&quot;\\nExpensiveTwo() is executing.&quot;);\n      return (long)input.Length;\n   }\n}\n\nclass LazyValue&lt;T&gt; where T : struct\n{\n   private Nullable&lt;T&gt; val;\n   private Func&lt;T&gt; getValue;\n\n   // Constructor.\n   public LazyValue(Func&lt;T&gt; func)\n   {\n      val = null;\n      getValue = func;\n   }\n\n   public T Value\n   {\n      get\n      {\n         if (val == null)\n            // Execute the delegate.\n            val = getValue();\n         return (T)val;\n      }\n   }\n}\n/* The example produces the following output:\n\n    LazyValue objects have been created.\n    \n    ExpensiveOne() is executing.\n    1\n    \n    ExpensiveTwo() is executing.\n    5\n*/    \n</code></pre><pre><code class=\"lang-vb\" name=\"System.Func~1#5\">Public Module Func\n   Public Sub Main()\n      &#39; Note that each lambda expression has no parameters.\n      Dim lazyOne As New LazyValue(Of Integer)(Function() ExpensiveOne())\n      Dim lazyTwo As New LazyValue(Of Long)(Function() ExpensiveTwo(&quot;apple&quot;)) \n\n      Console.WriteLine(&quot;LazyValue objects have been created.&quot;)\n\n      &#39; Get the values of the LazyValue objects.\n      Console.WriteLine(lazyOne.Value)\n      Console.WriteLine(lazyTwo.Value)\n   End Sub\n\n   Public Function ExpensiveOne() As Integer\n      Console.WriteLine()\n      Console.WriteLine(&quot;ExpensiveOne() is executing.&quot;)\n      Return 1\n   End Function\n\n   Public Function ExpensiveTwo(input As String) As Long\n      Console.WriteLine() \n      Console.WriteLine(&quot;ExpensiveTwo() is executing.&quot;)\n      Return input.Length\n   End Function\nEnd Module\n\nPublic Class LazyValue(Of T As Structure)\n   Private val As Nullable(Of T)\n   Private getValue As Func(Of T)\n\n   &#39; Constructor.\n   Public Sub New(func As Func(Of T))\n      Me.val = Nothing\n      Me.getValue = func\n   End Sub\n\n   Public ReadOnly Property Value() As T\n      Get\n         If Me.val Is Nothing Then\n            &#39; Execute the delegate.\n            Me.val = Me.getValue()\n         End If   \n         Return CType(val, T)\n      End Get\n   End Property\nEnd Class\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have no parameters and must return a value.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To reference a method that has no parameters and returns <code>void</code> (or in Visual Basic, that is declared as a <code>Sub</code> rather than as a <code>Function</code>), use the <a class=\"xref\" href=\"system.action\" data-linktype=\"relative-path\">Action</a> delegate instead.  </p>\n</div>\n<p> When you use the Func(TResult) delegate, you do not have to explicitly define a delegate that encapsulates a parameterless method. For example, the following code explicitly declares a delegate named <code>WriteMethod</code> and assigns a reference to the <code>OutputTarget.SendToFile</code> instance method to its delegate instance.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Func~1#1\">using System;\nusing System.IO;\n\ndelegate bool WriteMethod();\n\npublic class TestDelegate\n{\n   public static void Main()\n   {\n      OutputTarget output = new OutputTarget();\n      WriteMethod methodCall = output.SendToFile;\n      if (methodCall())\n         Console.WriteLine(&quot;Success!&quot;); \n      else\n         Console.WriteLine(&quot;File write operation failed.&quot;);\n   }\n}\n\npublic class OutputTarget\n{\n   public bool SendToFile()\n   {\n      try\n      {\n         string fn = Path.GetTempFileName();\n         StreamWriter sw = new StreamWriter(fn);\n         sw.WriteLine(&quot;Hello, World!&quot;);\n         sw.Close();\n         return true;\n      }  \n      catch\n      {\n         return false;\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Func~1#1\">Imports System.IO\n\nDelegate Function WriteMethod As Boolean\n\nModule TestDelegate\n   Public Sub Main()\n      Dim output As New OutputTarget()\n      Dim methodCall As WriteMethod = AddressOf output.SendToFile\n      If methodCall() Then \n         Console.WriteLine(&quot;Success!&quot;)\n      Else\n         Console.WriteLine(&quot;File write operation failed.&quot;)\n      End If      \n   End Sub\nEnd Module\n\nPublic Class OutputTarget\n   Public Function SendToFile() As Boolean\n      Try\n         Dim fn As String = Path.GetTempFileName\n         Dim sw As StreamWriter = New StreamWriter(fn)\n         sw.WriteLine(&quot;Hello, World!&quot;)\n         sw.Close      \n         Return True\n      Catch\n         Return False\n      End Try\n   End Function\nEnd Class\n</code></pre><p> The following example simplifies this code by instantiating the Func(TResult) delegate instead of explicitly defining a new delegate and assigning a named method to it.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Func~1#2\">using System;\nusing System.IO;\n\npublic class TestDelegate\n{\n   public static void Main()\n   {\n      OutputTarget output = new OutputTarget();\n      Func&lt;bool&gt; methodCall = output.SendToFile;\n      if (methodCall())\n         Console.WriteLine(&quot;Success!&quot;); \n      else\n         Console.WriteLine(&quot;File write operation failed.&quot;);\n   }\n}\n\npublic class OutputTarget\n{\n   public bool SendToFile()\n   {\n      try\n      {\n         string fn = Path.GetTempFileName();\n         StreamWriter sw = new StreamWriter(fn);\n         sw.WriteLine(&quot;Hello, World!&quot;);\n         sw.Close();\n         return true;\n      }  \n      catch\n      {\n         return false;\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Func~1#2\">Imports System.IO\n\nModule TestDelegate\n   Public Sub Main()\n      Dim output As New OutputTarget()\n      Dim methodCall As Func(Of Boolean) = AddressOf output.SendToFile\n      If methodCall() Then \n         Console.WriteLine(&quot;Success!&quot;)\n      Else\n         Console.WriteLine(&quot;File write operation failed.&quot;)\n      End If      \n   End Sub\nEnd Module\n\nPublic Class OutputTarget\n   Public Function SendToFile() As Boolean\n      Try\n         Dim fn As String = Path.GetTempFileName\n         Dim sw As StreamWriter = New StreamWriter(fn)\n         sw.WriteLine(&quot;Hello, World!&quot;)\n         sw.Close      \n         Return True\n      Catch\n         Return False\n      End Try\n   End Function\nEnd Class\n</code></pre><p> You can use the Func(TResult) delegate with anonymous methods in C#, as the following example illustrates. (For an introduction to anonymous methods, see <a href=\"../topic/anonymous%20methods%20(c%23%20programming%20guide)\" data-linktype=\"relative-path\">Anonymous Methods</a>.)  </p>\n<pre><code class=\"lang-cs\" name=\"System.Func~1#3\">using System;\nusing System.IO;\n\npublic class Anonymous\n{\n   public static void Main()\n   {\n      OutputTarget output = new OutputTarget();\n      Func&lt;bool&gt; methodCall = delegate() { return output.SendToFile(); };\n      if (methodCall())\n         Console.WriteLine(&quot;Success!&quot;); \n      else\n         Console.WriteLine(&quot;File write operation failed.&quot;);\n   }\n}\n\npublic class OutputTarget\n{\n   public bool SendToFile()\n   {\n      try\n      {\n         string fn = Path.GetTempFileName();\n         StreamWriter sw = new StreamWriter(fn);\n         sw.WriteLine(&quot;Hello, World!&quot;);\n         sw.Close();\n         return true;\n      }  \n      catch\n      {\n         return false;\n      }\n   }\n}\n</code></pre><p> You can also assign a lambda expression to a <a class=\"xref\" href=\"system.func-2\" data-linktype=\"relative-path\">Func&lt;T,TResult&gt;</a> delegate, as the following example illustrates. (For an introduction to lambda expressions, see <a href=\"../topic/lambda%20expressions%20(visual%20basic)\" data-linktype=\"relative-path\">Lambda Expressions</a> and <a href=\"../topic/lambda%20expressions%20(c%23%20programming%20guide)\" data-linktype=\"relative-path\">Lambda Expressions</a>.)  </p>\n<pre><code class=\"lang-cs\" name=\"System.Func~1#4\">using System;\nusing System.IO;\n\npublic class Anonymous\n{\n   public static void Main()\n   {\n      OutputTarget output = new OutputTarget();\n      Func&lt;bool&gt; methodCall = () =&gt; output.SendToFile(); \n      if (methodCall())\n         Console.WriteLine(&quot;Success!&quot;); \n      else\n         Console.WriteLine(&quot;File write operation failed.&quot;);\n   }\n}\n\npublic class OutputTarget\n{\n   public bool SendToFile()\n   {\n      try\n      {\n         string fn = Path.GetTempFileName();\n         StreamWriter sw = new StreamWriter(fn);\n         sw.WriteLine(&quot;Hello, World!&quot;);\n         sw.Close();\n         return true;\n      }  \n      catch\n      {\n         return false;\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Func~1#4\">Imports System.IO\n\nModule TestDelegate\n   Public Sub Main()\n      Dim output As New OutputTarget()\n      Dim methodCall As Func(Of Boolean) = Function() output.SendToFile()\n      If methodCall() Then \n         Console.WriteLine(&quot;Success!&quot;)\n      Else\n         Console.WriteLine(&quot;File write operation failed.&quot;)\n      End If      \n   End Sub\nEnd Module\n\nPublic Class OutputTarget\n   Public Function SendToFile() As Boolean\n      Try\n         Dim fn As String = Path.GetTempFileName\n         Dim sw As StreamWriter = New StreamWriter(fn)\n         sw.WriteLine(&quot;Hello, World!&quot;)\n         sw.Close      \n         Return True\n      Catch\n         Return False\n      End Try\n   End Function\nEnd Class\n</code></pre><p> The underlying type of a lambda expression is one of the generic <code>Func</code> delegates. This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate. In particular, because many methods of types in the <a class=\"xref\" href=\"system.linq\" data-linktype=\"relative-path\">System.Linq</a> namespace have <code>Func</code> parameters, you can pass these methods a lambda expression without explicitly instantiating a <code>Func</code> delegate.  </p>\n<p> If you have an expensive computation that you want to execute only if the result is actually needed, you can assign the expensive function to a Func(TResult) delegate. The execution of the function can then be delayed until a property that accesses the value is used in an expression. The example in the next section demonstrates how to do this.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Func-1.yml\">\r\n<meta name=\"APIName\" content=\"System.Func&lt;TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Func&lt;TResult&gt;..ctor\">\r\n<meta name=\"APIName\" content=\"System.Func&lt;TResult&gt;.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Func&lt;TResult&gt;.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Func&lt;TResult&gt;.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"49e11e3a-923f-01d3-88fc-7b9029537341\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Encapsulates a method that has no parameters and returns a value of the type specified by the TResult parameter.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Func`1\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Func-1.yml","open_to_public_contributors":false,"api_name":["System.Func<TResult>","System.Func<TResult>..ctor","System.Func<TResult>.Invoke","System.Func<TResult>.BeginInvoke","System.Func<TResult>.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Func`1","System::Func`1"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"49e11e3a-923f-01d3-88fc-7b9029537341","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System/Func`1.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Func<TResult> delegate | Microsoft Docs","_op_ogTitle":"Func<TResult> delegate","description":"Encapsulates a method that has no parameters and returns a value of the type specified by the TResult parameter.\n","toc_asset_id":"api/_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Func`1","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.func-1","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.func-1","fileRelativePath":"api/System.Func-1.html"},"themesRelativePathToOutputRoot":"_themes/"}