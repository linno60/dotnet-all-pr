{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">IDataContractSurrogate</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides the methods needed to substitute one type for another by the <a class=\"xref\" href=\"system.runtime.serialization.datacontractserializer\" data-linktype=\"relative-path\">DataContractSerializer</a> during serialization, deserialization, and export and import of XML schema documents (XSD).</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public interface IDataContractSurrogate</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example shows an implementation of the IDataContractSurrogate interface. The code substitutes the serialization of the <code>Person</code> type for a <code>PersonSurrogated</code> class.  </p>\n<pre><code class=\"lang-vb\" name=\"IDataContractSurrogate#0\">Class Program\n\n    Public Shared Sub Main(ByVal args() As String)\n\n        SerializeWithSurrogate(&quot;surrogateEmployee.xml&quot;)\n        DeserializeSurrogate(&quot;surrogateEmployee.xml&quot;)\n        &#39; Create an XmlSchemaSet to hold schemas from the\n        &#39; schema exporter. \n        &#39;Dim schemas As New XmlSchemaSet\n        &#39;ExportSchemas(&quot;surrogateEmployee.xml&quot;, schemas)\n        &#39; Pass the schemas to the importer.\n        &#39;ImportSchemas(schemas)\n\n    End Sub\n\n\n    Shared Function CreateSurrogateSerializer() As DataContractSerializer\n        &#39; Create an instance of the DataContractSerializer. The \n        &#39; constructor demands a knownTypes and surrogate. \n        &#39; Create a Generic List for the knownTypes. \n        Dim knownTypes As List(Of Type) = New List(Of Type)()\n        Dim surrogate As New LegacyPersonTypeSurrogate()\n        Dim surrogateSerializer As New  _\n        DataContractSerializer(GetType(Employee), _\n           knownTypes, Integer.MaxValue, False, True, surrogate)\n        Return surrogateSerializer\n    End Function\n\n    Shared Sub SerializeWithSurrogate(ByVal filename As String)\n        &#39; Create and populate an Employee instance.\n        Dim emp As New Employee()\n        emp.date_hired = New DateTime(1999, 10, 14)\n        emp.salary = 33000\n\n        &#39; Note that the Person class is a legacy XmlSerializable class\n        &#39; without a DataContract.\n        emp.person = New Person()\n        emp.person.first_name = &quot;Mike&quot;\n        emp.person.last_name = &quot;Ray&quot;\n        emp.person.age = 44\n\n        &#39; Create a new writer. Then serialize with the \n        &#39; surrogate serializer.\n        Dim fs As New FileStream(filename, FileMode.Create)\n        Dim surrogateSerializer As DataContractSerializer = CreateSurrogateSerializer()\n        Try\n            surrogateSerializer.WriteObject(fs, emp)\n            Console.WriteLine(&quot;Serialization succeeded. &quot;)\n            fs.Close()\n        Catch exc As SerializationException\n\n            Console.WriteLine(exc.Message)\n        End Try\n    End Sub\n\n    Shared Sub DeserializeSurrogate(ByVal filename As String)\n\n        &#39; Create a new reader object.\n        Dim fs2 As New FileStream(filename, FileMode.Open)\n        Dim reader As XmlDictionaryReader = _\n            XmlDictionaryReader.CreateTextReader(fs2, New XmlDictionaryReaderQuotas())\n\n        Console.WriteLine(&quot;Trying to deserialize with surrogate.&quot;)\n        Try\n            Dim surrogateSerializer As DataContractSerializer = CreateSurrogateSerializer()\n            Dim newemp As Employee = CType _\n                (surrogateSerializer.ReadObject(reader, False), Employee)\n\n            reader.Close()\n            fs2.Close()\n\n            Console.WriteLine(&quot;Deserialization succeeded. &quot; + vbLf + vbLf)\n            Console.WriteLine(&quot;Deserialized Person data: &quot; + vbLf + vbTab + _\n                &quot; {0} {1}&quot;, newemp.person.first_name, newemp.person.last_name)\n            Console.WriteLine(vbTab + &quot; Age: {0} &quot; + vbLf, newemp.person.age)\n            Console.WriteLine(vbTab &amp; &quot;Date Hired: {0}&quot;, newemp.date_hired.ToShortDateString())\n            Console.WriteLine(vbTab &amp; &quot;Salary: {0}&quot;, newemp.salary)\n            Console.WriteLine(&quot;Press Enter to end or continue&quot;)\n            Console.ReadLine()\n        Catch serEx As SerializationException\n            Console.WriteLine(serEx.Message)\n            Console.WriteLine(serEx.StackTrace)\n        End Try\n    End Sub\n\n    Shared Sub ExportSchemas(ByVal filename As String, ByRef Schemas As XmlSchemaSet)\n        Console.WriteLine(&quot;Now doing schema export.&quot;)\n        &#39; The following code demonstrates schema export with a surrogate.\n        &#39; The surrogate indicates how to export the non-DataContract Person type.\n        &#39; Without the surrogate, schema export would fail.\n        Dim xsdexp As New XsdDataContractExporter()\n        xsdexp.Options = New ExportOptions()\n        xsdexp.Options.DataContractSurrogate = New LegacyPersonTypeSurrogate()\n        xsdexp.Export(GetType(Employee))\n\n        &#39; Write out the exported schema to a file.\n        Dim fs3 As New FileStream(&quot;sample.xsd&quot;, FileMode.Create)\n        Try\n            Dim sch As XmlSchema\n            For Each sch In xsdexp.Schemas.Schemas()\n                sch.Write(fs3)\n            Next sch\n            Schemas = xsdexp.Schemas\n        Catch serEx As SerializationException\n            Console.WriteLine(&quot;Message: {0}&quot;, serEx.Message)\n            Console.WriteLine(&quot;Inner Text: {0}&quot;, serEx.InnerException)\n\n        Finally\n            fs3.Dispose()\n        End Try\n    End Sub\n\n    Shared Sub ImportSchemas(ByVal schemas As XmlSchemaSet)\n        Console.WriteLine(&quot;Now doing schema import.&quot;)\n        &#39; The following code demonstrates schema import with \n        &#39; a surrogate. The surrogate is used to indicate that \n        &#39; the Person class already exists and that there is no \n        &#39; need to generate a new class when importing the\n        &#39; PersonSurrogated data contract. If the surrogate \n        &#39; was not used, schema import would generate a \n        &#39; PersonSurrogated class, and the person field \n        &#39; of Employee would be imported as \n        &#39; PersonSurrogated and not Person.\n        Dim xsdimp As New XsdDataContractImporter()\n        xsdimp.Options = New ImportOptions()\n        xsdimp.Options.DataContractSurrogate = New LegacyPersonTypeSurrogate()\n        xsdimp.Import(schemas)\n\n        &#39; Write out the imported schema to a C-Sharp file.\n        &#39; The code contains data contract types.\n        Dim fs4 As FileStream = New FileStream(&quot;sample.cs&quot;, FileMode.Create)\n        Try\n            Dim tw As New StreamWriter(fs4)\n            Dim cdp As New Microsoft.CSharp.CSharpCodeProvider()\n            cdp.GenerateCodeFromCompileUnit(xsdimp.CodeCompileUnit, tw, Nothing)\n            tw.Flush()\n        Finally\n            fs4.Dispose()\n        End Try\n\n        Console.WriteLine(vbLf + &quot; To see the results of schema export and import,&quot;)\n        Console.WriteLine(&quot; see SAMPLE.XSD and SAMPLE.CS.&quot; + vbLf)\n\n        Console.WriteLine(&quot; Press ENTER to terminate the sample.&quot; + vbLf)\n        Console.ReadLine()\n    End Sub\n\n\nEnd Class\n\n\n&#39; This is the Employee (outer) type used in the sample.\n\n&lt;DataContract()&gt; Class Employee\n    &lt;DataMember()&gt; _\n    Public date_hired As DateTime\n\n    &lt;DataMember()&gt; _\n    Public salary As [Decimal]\n\n    &lt;DataMember()&gt; _\n    Public person As Person\nEnd Class\n\n\n&#39; This is the Person (inner) type used in the sample.\n&#39; Note that it is a legacy XmlSerializable type and not a DataContract type.\n\nPublic Class Person\n    &lt;XmlElement(&quot;FirstName&quot;)&gt; _\n    Public first_name As String\n\n    &lt;XmlElement(&quot;LastName&quot;)&gt; _\n    Public last_name As String\n\n    &lt;XmlAttribute(&quot;Age&quot;)&gt; _\n    Public age As Integer\n\n\n    Public Sub New()\n\n    End Sub\nEnd Class\n\n&#39; This is the surrogated version of the Person type\n&#39; that will be used for its serialization/deserialization.\n\n&lt;DataContract()&gt; Class PersonSurrogated\n\n    &#39; xmlData will store the XML returned for a Person instance \n    &#39; by the XmlSerializer.\n    &lt;DataMember()&gt; _\n    Public xmlData As String\n\nEnd Class\n\n&#39; This is the surrogate that substitutes PersonSurrogated for Person.\nClass LegacyPersonTypeSurrogate\n    Implements IDataContractSurrogate\n\n    Public Function GetDataContractType(ByVal type As Type) As Type _\n       Implements IDataContractSurrogate.GetDataContractType\n        Console.WriteLine(&quot;GetDataContractType invoked&quot;)\n        Console.WriteLine(vbTab &amp; &quot;type name: {0}&quot;, type.Name)\n        &#39; &quot;Person&quot; will be serialized as &quot;PersonSurrogated&quot;\n        &#39; This method is called during serialization,\n        &#39; deserialization, and schema export.\n        If GetType(Person).IsAssignableFrom(type) Then\n            Console.WriteLine(vbTab &amp; &quot;returning PersonSurrogated&quot;)\n            Return GetType(PersonSurrogated)\n        End If\n        Return type\n\n    End Function\n\n    Public Function GetObjectToSerialize(ByVal obj As Object, _\n        ByVal targetType As Type) As Object _\n        Implements IDataContractSurrogate.GetObjectToSerialize\n        Console.WriteLine(&quot;GetObjectToSerialize Invoked&quot;)\n        Console.WriteLine(vbTab &amp; &quot;type name: {0}&quot;, obj.ToString)\n        Console.WriteLine(vbTab &amp; &quot;target type: {0}&quot;, targetType.Name)\n        &#39; This method is called on serialization.\n        &#39; If Person is not being serialized...\n        If TypeOf obj Is Person Then\n            Console.WriteLine(vbTab &amp; &quot;returning PersonSurrogated&quot;)\n            &#39; ... use the XmlSerializer to perform the actual serialization.\n            Dim ps As New PersonSurrogated()\n            Dim xs As New XmlSerializer(GetType(Person))\n            Dim sw As New StringWriter()\n            xs.Serialize(sw, CType(obj, Person))\n            ps.xmlData = sw.ToString()\n            Return ps\n        End If\n        Return obj\n\n    End Function\n\n    Public Function GetDeserializedObject(ByVal obj As Object, _\n        ByVal targetType As Type) As Object Implements _\n        IDataContractSurrogate.GetDeserializedObject\n        Console.WriteLine(&quot;GetDeserializedObject invoked&quot;)\n        &#39; This method is called on deserialization.\n        &#39; If PersonSurrogated is being deserialized...\n        If TypeOf obj Is PersonSurrogated Then\n            Console.WriteLine(vbTab &amp; &quot;returning PersonSurrogated&quot;)\n            &#39;... use the XmlSerializer to do the actual deserialization.\n            Dim ps As PersonSurrogated = CType(obj, PersonSurrogated)\n            Dim xs As New XmlSerializer(GetType(Person))\n            Return CType(xs.Deserialize(New StringReader(ps.xmlData)), Person)\n        End If\n        Return obj\n\n    End Function\n\n    Public Function GetReferencedTypeOnImport(ByVal typeName As String, _\n        ByVal typeNamespace As String, ByVal customData As Object) As Type _\n        Implements IDataContractSurrogate.GetReferencedTypeOnImport\n        Console.WriteLine(&quot;GetReferencedTypeOnImport invoked&quot;)\n        &#39; This method is called on schema import.\n        &#39; If a PersonSurrogated data contract is \n        &#39; in the specified namespace, do not create a new type for it \n        &#39; because there is already an existing type, &quot;Person&quot;.\n        Console.WriteLine(vbTab &amp; &quot;Type Name: {0}&quot;, typeName)\n\n        &#39;If typeNamespace.Equals(&quot;http://schemas.datacontract.org/2004/07/DCSurrogateSample&quot;) Then\n        If typeName.Equals(&quot;PersonSurrogated&quot;) Then\n            Console.WriteLine(&quot;Returning Person&quot;)\n            Return GetType(Person)\n        End If\n        &#39;End If\n        Return Nothing\n\n    End Function\n\n    Public Function ProcessImportedType(ByVal typeDeclaration _\n        As System.CodeDom.CodeTypeDeclaration, _\n        ByVal compileUnit As System.CodeDom.CodeCompileUnit) _\n        As System.CodeDom.CodeTypeDeclaration _\n        Implements IDataContractSurrogate.ProcessImportedType\n        &#39;Console.WriteLine(&quot;ProcessImportedType invoked&quot;)\n        &#39; Not used in this sample.\n        &#39; You could use this method to construct an entirely new CLR \n        &#39; type when a certain type is imported, or modify a \n        &#39; generated type in some way.\n        Return typeDeclaration\n    End Function\n\n\n    Public Overloads Function GetCustomDataToExport _\n        (ByVal clrType As Type, ByVal dataContractType As Type) As Object _\n        Implements IDataContractSurrogate.GetCustomDataToExport\n        &#39; Console.WriteLine(&quot;GetCustomDataToExport invoked&quot;)\n        &#39; Not used in this sample\n        Return Nothing\n    End Function\n\n\n    Public Overloads Function GetCustomDataToExport _\n       (ByVal memberInfo As System.Reflection.MemberInfo, _\n       ByVal dataContractType As Type) As Object _\n        Implements IDataContractSurrogate.GetCustomDataToExport\n        &#39; Console.WriteLine(&quot;GetCustomDataToExport invoked&quot;)\n        &#39; Not used in this sample\n        Return Nothing\n\n    End Function\n\n\n    Public Sub GetKnownCustomDataTypes(ByVal customDataTypes As Collection(Of Type)) _\n Implements IDataContractSurrogate.GetKnownCustomDataTypes\n        Console.WriteLine(&quot;GetKnownCustomDataTypes invoked&quot;)\n        &#39; Not used in this sample\n\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"IDataContractSurrogate#0\">\nclass program\n{\n    static void Main(string[] args)\n    {\n        SerializeWithSurrogate(&quot;surrogateEmployee.xml&quot;);\n        DeserializeSurrogate(&quot;surrogateEmployee.xml&quot;);\n        // Create an XmlSchemaSet to hold schemas from the\n        // schema exporter. \n        //XmlSchemaSet schemas = new XmlSchemaSet();\n        //ExportSchemas(&quot;surrogateEmployee.xml&quot;, ref schemas);\n        //// Pass the schemas to the importer.\n        //ImportSchemas(schemas);\n\n    }\n\n\n    static  DataContractSerializer CreateSurrogateSerializer()  \n    {\n        // Create an instance of the DataContractSerializer. The \n        // constructor demands a knownTypes and surrogate. \n        // Create a Generic List for the knownTypes. \n        List&lt;Type&gt; knownTypes = new List&lt;Type&gt;();\n        LegacyPersonTypeSurrogate surrogate = new LegacyPersonTypeSurrogate ();\n        DataContractSerializer surrogateSerializer = \n            new DataContractSerializer(typeof(Employee), \n           knownTypes, Int16.MaxValue, false, true, surrogate);\n        return surrogateSerializer;\n    }\n\n    static void SerializeWithSurrogate(string filename )\n    {\n        // Create and populate an Employee instance.\n        Employee emp = new Employee();\n        emp.date_hired = new DateTime(1999, 10, 14);\n        emp.salary = 33000;\n\n        // Note that the Person class is a legacy XmlSerializable class\n        // without a DataContract.\n        emp.person = new Person();\n        emp.person.first_name = &quot;Mike&quot;;\n        emp.person.last_name = &quot;Ray&quot;;\n        emp.person.age = 44;\n\n        // Create a new writer. Then serialize with the \n        // surrogate serializer.\n        FileStream  fs =new FileStream(filename, FileMode.Create);\n        DataContractSerializer surrogateSerializer = CreateSurrogateSerializer();\n        try{\n            surrogateSerializer.WriteObject(fs, emp);\n            Console.WriteLine(&quot;Serialization succeeded. &quot;);\n            fs.Close();\n        }\n        catch (SerializationException exc )\n            {\n            Console.WriteLine(exc.Message);\n            }\n\n    }\n\n    static void DeserializeSurrogate( string filename )\n    {\n        // Create a new reader object.\n        FileStream fs2 = new FileStream(filename, FileMode.Open);\n        XmlDictionaryReader reader = \n            XmlDictionaryReader.CreateTextReader(fs2, new XmlDictionaryReaderQuotas());\n\n        Console.WriteLine(&quot;Trying to deserialize with surrogate.&quot;);\n        try\n        {\n            DataContractSerializer surrogateSerializer = CreateSurrogateSerializer();\n            Employee newemp = (Employee) surrogateSerializer.ReadObject(reader, false);\n\n            reader.Close();\n            fs2.Close();\n\n            Console.WriteLine(&quot;Deserialization succeeded. \\n\\n&quot;);\n            Console.WriteLine(&quot;Deserialized Person data: \\n\\t {0} {1}&quot;,\n                    newemp.person.first_name, newemp.person.last_name);\n                Console.WriteLine(&quot;\\t Age: {0} \\n&quot;, newemp.person.age);\n            Console.WriteLine(&quot;\\t Date Hired: {0}&quot;, newemp.date_hired.ToShortDateString());\n            Console.WriteLine(&quot;\\t Salary: {0}&quot;, newemp.salary);\n            Console.WriteLine(&quot;Press Enter to end or continue&quot;);\n            Console.ReadLine();\n        }\n        catch (SerializationException serEx  )\n        {\n            Console.WriteLine(serEx.Message);\n            Console.WriteLine(serEx.StackTrace);\n        }\n        \n    }\n\n    static void ExportSchemas(string filename , ref XmlSchemaSet schemas)\n{\n        Console.WriteLine(&quot;Now doing schema export.&quot;);\n        // The following code demonstrates schema export with a surrogate.\n        // The surrogate indicates how to export the non-DataContract Person type.\n        // Without the surrogate, schema export would fail.\n        XsdDataContractExporter xsdexp = new XsdDataContractExporter();\n        xsdexp.Options = new ExportOptions();\n        xsdexp.Options.DataContractSurrogate = new LegacyPersonTypeSurrogate();\n        xsdexp.Export(typeof(Employee));\n\n        // Write out the exported schema to a file.\n        using (FileStream fs3 = new FileStream(&quot;sample.xsd&quot;, FileMode.Create))\n        {\n            foreach (XmlSchema sch in xsdexp.Schemas.Schemas())\n            {\n                sch.Write(fs3);\n            }\n        } \n    }\n\n    static void ImportSchemas(XmlSchemaSet schemas ){\n        Console.WriteLine(&quot;Now doing schema import.&quot;);\n        // The following code demonstrates schema import with \n        // a surrogate. The surrogate is used to indicate that \n        // the Person class already exists and that there is no \n        // need to generate a new class when importing the\n        // PersonSurrogated data contract. If the surrogate \n        // was not used, schema import would generate a \n        // PersonSurrogated class, and the person field \n        // of Employee would be imported as \n        // PersonSurrogated and not Person.\n        XsdDataContractImporter xsdimp = new XsdDataContractImporter();\n        xsdimp.Options = new ImportOptions();\n        xsdimp.Options.DataContractSurrogate = new LegacyPersonTypeSurrogate();\n        xsdimp.Import(schemas);\n\n        // Write out the imported schema to a C-Sharp file.\n        // The code contains data contract types.\n        FileStream fs4 = new FileStream(&quot;sample.cs&quot;, FileMode.Create);\n        try\n        {\n            StreamWriter tw = new StreamWriter(fs4);\n            Microsoft.CSharp.CSharpCodeProvider cdp = new Microsoft.CSharp.CSharpCodeProvider();\n            cdp.GenerateCodeFromCompileUnit(xsdimp.CodeCompileUnit, tw, null);\n            tw.Flush();\n        }\n        finally\n        {\n            fs4.Dispose();\n        }\n        \n\n        Console.WriteLine( &quot;\\t  To see the results of schema export and import,&quot;);\n        Console.WriteLine(&quot; see SAMPLE.XSD and SAMPLE.CS.&quot; );\n\n        Console.WriteLine(&quot; Press ENTER to terminate the sample.&quot; );\n        Console.ReadLine();\n    }\n\n\n}\n\n\n// This is the Employee (outer) type used in the sample.\n\n[DataContract()] \npublic class Employee\n{\n    [DataMember()] \n    public DateTime date_hired ;\n\n    [DataMember()]\npublic decimal salary ;\n\n    [DataMember()]\n    public Person person;\n}\n\n\n// This is the Person (inner) type used in the sample.\n// Note that it is a legacy XmlSerializable type and not a DataContract type.\n\npublic class Person\n{\n    [XmlElement(&quot;FirstName&quot;)]\n    public string first_name ;\n\n    [XmlElement(&quot;LastName&quot;)]\n    public string last_name ;\n\n    [XmlAttribute(&quot;Age&quot;)]\n    public Int16 age ;\n\n    public Person()  {}   \n}\n\n// This is the surrogated version of the Person type\n// that will be used for its serialization/deserialization.\n\n[DataContract] class PersonSurrogated\n{\n    // xmlData will store the XML returned for a Person instance \n    // by the XmlSerializer.\n    [DataMember()]\n    public string xmlData;\n\n}\n\n //This is the surrogate that substitutes PersonSurrogated for Person.\npublic class LegacyPersonTypeSurrogate:IDataContractSurrogate\n{\n    public Type GetDataContractType(Type type) \n{\n        Console.WriteLine(&quot;GetDataContractType invoked&quot;);\n        Console.WriteLine(&quot;\\t type name: {0}&quot;, type.Name);\n        // &quot;Person&quot; will be serialized as &quot;PersonSurrogated&quot;\n        // This method is called during serialization,\n        // deserialization, and schema export.\n        if (typeof(Person).IsAssignableFrom(type)) \n{\nConsole.WriteLine(&quot;\\t returning PersonSurrogated&quot;);\n            return typeof(PersonSurrogated);\n        }\n        return type;\n\n    }\n\npublic object GetObjectToSerialize(object obj, Type targetType)\n{ \n        Console.WriteLine(&quot;GetObjectToSerialize Invoked&quot;);\n        Console.WriteLine(&quot;\\t type name: {0}&quot;, obj.ToString());\n        Console.WriteLine(&quot;\\t target type: {0}&quot;, targetType.Name);\n        // This method is called on serialization.\n        // If Person is not being serialized...\n        if (obj is Person )\n        {\n            Console.WriteLine(&quot;\\t returning PersonSurrogated&quot;);\n            // ... use the XmlSerializer to perform the actual serialization.\n            PersonSurrogated  ps = new PersonSurrogated();\n            XmlSerializer xs = new XmlSerializer(typeof(Person));\n            StringWriter sw = new StringWriter();\n            xs.Serialize(sw, (Person)obj );\n            ps.xmlData = sw.ToString();\n            return ps;\n        }\n        return obj;\n\n    }\n\n    public object GetDeserializedObject(Object obj , Type targetType) \n    {\n        Console.WriteLine(&quot;GetDeserializedObject invoked&quot;);\n        // This method is called on deserialization.\n        // If PersonSurrogated is being deserialized...\n        if (obj is PersonSurrogated)\n            {\n                //... use the XmlSerializer to do the actual deserialization.\n                PersonSurrogated ps = (PersonSurrogated)obj;\n                XmlSerializer xs = new XmlSerializer(typeof(Person));\n                return (Person)xs.Deserialize(new StringReader(ps.xmlData));\n            }\n            return obj;\n\n    }\n\n    public Type GetReferencedTypeOnImport(string typeName,\n        string typeNamespace, object customData)\n    {\n        Console.WriteLine(&quot;GetReferencedTypeOnImport invoked&quot;);\n        // This method is called on schema import.\n        // If a PersonSurrogated data contract is \n        // in the specified namespace, do not create a new type for it \n        // because there is already an existing type, &quot;Person&quot;.\n        Console.WriteLine( &quot;\\t Type Name: {0}&quot;, typeName);\n        \n        if (typeName.Equals(&quot;PersonSurrogated&quot;) )\n        {\n            Console.WriteLine(&quot;Returning Person&quot;);\n            return typeof(Person);\n        }        \n        return null;\n    }\n\n    public System.CodeDom.CodeTypeDeclaration ProcessImportedType(\n        System.CodeDom.CodeTypeDeclaration typeDeclaration, \n        System.CodeDom.CodeCompileUnit compileUnit)\n    {\n        // Console.WriteLine(&quot;ProcessImportedType invoked&quot;)\n        // Not used in this sample.\n        // You could use this method to construct an entirely new CLR \n        // type when a certain type is imported, or modify a \n        // generated type in some way.\n        return typeDeclaration;\n    }\n\n\n\n        public object GetCustomDataToExport(Type clrType, Type dataContractType)\n        {\n            // Not used in this sample\n            return null;\n        }\n\n        public object GetCustomDataToExport(System.Reflection.MemberInfo memberInfo, Type dataContractType)\n        {\n            // Not used in this sample\n            return null;\n        }\n\n        public void GetKnownCustomDataTypes(Collection&lt;Type&gt; customDataTypes)\n        {\n            // Not used in this sample\n        }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Use the IDataContractSurrogate when using the <a class=\"xref\" href=\"system.runtime.serialization.datacontractserializer\" data-linktype=\"relative-path\">DataContractSerializer</a> if you need to do one of the following: substitute one type or object for another, or to dynamically generate schema variations. For a sample application, see <a href=\"../topic/datacontract%20surrogate\" data-linktype=\"relative-path\">DataContract Surrogate</a>. For more information about data contracts, see <a href=\"../topic/using%20data%20contracts\" data-linktype=\"relative-path\">Using Data Contracts</a>.  </p>\n<p> At run time, you can find the specific <a class=\"xref\" href=\"system.runtime.serialization.datacontractserializer\" data-linktype=\"relative-path\">DataContractSerializer</a> for any operation in a service by using the <a class=\"xref\" href=\"system.servicemodel.description.operationdescription\" data-linktype=\"relative-path\">OperationDescription</a> to find the <a class=\"xref\" href=\"system.servicemodel.description.datacontractserializeroperationbehavior\" data-linktype=\"relative-path\">DataContractSerializerOperationBehavior</a> instance. For more information about implementing the interface to create a surrogate, see <a href=\"../topic/data%20contract%20surrogates\" data-linktype=\"relative-path\">Data Contract Surrogates</a>.  </p>\n<p> You can also use the IDataContractSurrogate to affect the import and export of XML schemas when you are using the <a class=\"xref\" href=\"system.runtime.serialization.xsddatacontractexporter\" data-linktype=\"relative-path\">XsdDataContractExporter</a> and <a class=\"xref\" href=\"system.runtime.serialization.xsddatacontractimporter\" data-linktype=\"relative-path\">XsdDataContractImporter</a> classes. You can do so by assigning the IDataContractSurrogate to the <a class=\"xref\" href=\"system.runtime.serialization.exportoptions#System_Runtime_Serialization_ExportOptions_DataContractSurrogate_\" data-linktype=\"relative-path\">DataContractSurrogate</a> property of the <a class=\"xref\" href=\"system.runtime.serialization.exportoptions\" data-linktype=\"relative-path\">ExportOptions</a> class, or to the <a class=\"xref\" href=\"system.runtime.serialization.importoptions#System_Runtime_Serialization_ImportOptions_DataContractSurrogate_\" data-linktype=\"relative-path\">DataContractSurrogate</a> property of the <a class=\"xref\" href=\"system.runtime.serialization.importoptions\" data-linktype=\"relative-path\">ImportOptions</a> class.  For more information, see <a href=\"../topic/schema%20import%20and%20export\" data-linktype=\"relative-path\">Schema Import and Export</a>.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Runtime_Serialization_IDataContractSurrogate_GetCustomDataToExport_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_Serialization_IDataContractSurrogate_GetCustomDataToExport_System_Reflection_MemberInfo_System_Type_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetCustomDataToExport(MemberInfo, Type)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>During schema export operations, inserts annotations into the schema for non-null return values.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public object GetCustomDataToExport (System.Reflection.MemberInfo memberInfo, Type dataContractType);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>memberInfo</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.reflection.memberinfo\" data-linktype=\"relative-path\">MemberInfo</a> that describes the member.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>dataContractType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An object that represents the annotation to be inserted into the XML schema definition.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Runtime_Serialization_IDataContractSurrogate_GetCustomDataToExport_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_Serialization_IDataContractSurrogate_GetCustomDataToExport_System_Type_System_Type_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetCustomDataToExport(Type, Type)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>During schema export operations, inserts annotations into the schema for non-null return values.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public object GetCustomDataToExport (Type clrType, Type dataContractType);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>clrType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The CLR type to be replaced.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>dataContractType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The data contract type to be annotated.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An object that represents the annotation to be inserted into the XML schema definition.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Runtime_Serialization_IDataContractSurrogate_GetDataContractType_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_Serialization_IDataContractSurrogate_GetDataContractType_System_Type_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetDataContractType(Type)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>During serialization, deserialization, and schema import and export, returns a data contract type that substitutes the specified type.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Type GetDataContractType (Type type);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>type</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The CLR type <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> to substitute.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> to substitute for the <code>type</code> value. This type must be serializable by the <a class=\"xref\" href=\"system.runtime.serialization.datacontractserializer\" data-linktype=\"relative-path\">DataContractSerializer</a>. For example, it must be marked with the <a class=\"xref\" href=\"system.runtime.serialization.datacontractattribute\" data-linktype=\"relative-path\">DataContractAttribute</a> attribute or other mechanisms that the serializer recognizes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Runtime_Serialization_IDataContractSurrogate_GetDeserializedObject_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_Serialization_IDataContractSurrogate_GetDeserializedObject_System_Object_System_Type_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetDeserializedObject(Object, Type)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>During deserialization, returns an object that is a substitute for the specified object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public object GetDeserializedObject (object obj, Type targetType);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>obj</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The deserialized object to be substituted.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>targetType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> that the substituted object should be assigned to.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The substituted deserialized object. This object must be of a type that is serializable by the <a class=\"xref\" href=\"system.runtime.serialization.datacontractserializer\" data-linktype=\"relative-path\">DataContractSerializer</a>. For example, it must be marked with the <a class=\"xref\" href=\"system.runtime.serialization.datacontractattribute\" data-linktype=\"relative-path\">DataContractAttribute</a> attribute or other mechanisms that the serializer recognizes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>In a simple implementation, use an if…then…else control structure to test whether the <code>obj</code> value is of the surrogated type. If so, transform it as necessary and return the substituted object. The substituted object can be a new instance or the same <code>obj</code> instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Runtime_Serialization_IDataContractSurrogate_GetKnownCustomDataTypes_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_Serialization_IDataContractSurrogate_GetKnownCustomDataTypes_System_Collections_ObjectModel_Collection_System_Type__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetKnownCustomDataTypes(Collection&lt;Type&gt;)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Sets the collection of known types to use for serialization and deserialization of the custom data objects.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void GetKnownCustomDataTypes (System.Collections.ObjectModel.Collection&lt;Type&gt; customDataTypes);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>customDataTypes</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.objectmodel.collection-1\" data-linktype=\"relative-path\">Collection</a>&lt;<a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>&gt;</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <span class=\"xref\">stem.Collections.ObjectModel.Collection`1</span> of <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> to add known types to.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is required during schema export or schema import only if annotations are inserted into the schema using the <a class=\"xref\" href=\"system.runtime.serialization.idatacontractsurrogate#System_Runtime_Serialization_IDataContractSurrogate_GetCustomDataToExport_\" data-linktype=\"relative-path\">GetCustomDataToExport</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Runtime_Serialization_IDataContractSurrogate_GetObjectToSerialize_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_Serialization_IDataContractSurrogate_GetObjectToSerialize_System_Object_System_Type_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetObjectToSerialize(Object, Type)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>During serialization, returns an object that substitutes the specified object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public object GetObjectToSerialize (object obj, Type targetType);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>obj</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object to substitute.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>targetType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> that the substituted object should be assigned to.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The substituted object that will be serialized. The object must be serializable by the <a class=\"xref\" href=\"system.runtime.serialization.datacontractserializer\" data-linktype=\"relative-path\">DataContractSerializer</a>. For example, it must be marked with the <a class=\"xref\" href=\"system.runtime.serialization.datacontractattribute\" data-linktype=\"relative-path\">DataContractAttribute</a> attribute or other mechanisms that the serializer recognizes.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method must not return <code>null</code> because on deserialization the data will be cast to type <a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a> and an <a class=\"xref\" href=\"system.invalidcastexception\" data-linktype=\"relative-path\">InvalidCastException</a> is thrown.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Runtime_Serialization_IDataContractSurrogate_GetReferencedTypeOnImport_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_Serialization_IDataContractSurrogate_GetReferencedTypeOnImport_System_String_System_String_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetReferencedTypeOnImport(String, String, Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>During schema import, returns the type referenced by the schema.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Type GetReferencedTypeOnImport (string typeName, string typeNamespace, object customData);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>typeName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The name of the type in schema.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>typeNamespace</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The namespace of the type in schema.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>customData</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object that represents the annotation inserted into the XML schema definition, which is data that can be used for finding the referenced type.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> to use for the referenced type.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><code>Null</code> should be returned if a CLR type does not exist for representing the schema type. This will cause a new type to be generated during schema import.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Runtime_Serialization_IDataContractSurrogate_ProcessImportedType_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_Serialization_IDataContractSurrogate_ProcessImportedType_System_CodeDom_CodeTypeDeclaration_System_CodeDom_CodeCompileUnit_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ProcessImportedType(CodeTypeDeclaration, CodeCompileUnit)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Processes the type that has been generated from the imported schema.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.CodeDom.CodeTypeDeclaration ProcessImportedType (System.CodeDom.CodeTypeDeclaration typeDeclaration, System.CodeDom.CodeCompileUnit compileUnit);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>typeDeclaration</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codetypedeclaration\" data-linktype=\"relative-path\">CodeTypeDeclaration</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.codedom.codetypedeclaration\" data-linktype=\"relative-path\">CodeTypeDeclaration</a> to process that represents the type declaration generated during schema import.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>compileUnit</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codecompileunit\" data-linktype=\"relative-path\">CodeCompileUnit</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.codedom.codecompileunit\" data-linktype=\"relative-path\">CodeCompileUnit</a> that contains the other code generated during schema import.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.codedom.codetypedeclaration\" data-linktype=\"relative-path\">CodeTypeDeclaration</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.codedom.codetypedeclaration\" data-linktype=\"relative-path\">CodeTypeDeclaration</a> that contains the processed type.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The input <a class=\"xref\" href=\"system.codedom.codetypedeclaration\" data-linktype=\"relative-path\">CodeTypeDeclaration</a> or other information in the <a class=\"xref\" href=\"system.codedom.codecompileunit\" data-linktype=\"relative-path\">CodeCompileUnit</a> can be modified by the user in this method. If <code>null</code> is returned, it will cause the type to not be generated. If a new <a class=\"xref\" href=\"system.codedom.codetypedeclaration\" data-linktype=\"relative-path\">CodeTypeDeclaration</a> is returned, it will replace the original type generated.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Runtime.Serialization.IDataContractSurrogate.yml\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Serialization.IDataContractSurrogate\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Serialization.IDataContractSurrogate.GetKnownCustomDataTypes\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Serialization.IDataContractSurrogate.ProcessImportedType\">\r\n<meta name=\"APILocation\" content=\"System.Runtime.Serialization.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"c92f45e3-b856-004d-f58c-a2d3de6f8e6b\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides the methods needed to substitute one type for another by the  during serialization, deserialization, and export and import of XML schema documents (XSD).\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.runtime.serialization/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Runtime.Serialization.IDataContractSurrogate\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Runtime.Serialization.IDataContractSurrogate.yml","open_to_public_contributors":false,"api_name":["System.Runtime.Serialization.IDataContractSurrogate","System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport","System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType","System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject","System.Runtime.Serialization.IDataContractSurrogate.GetKnownCustomDataTypes","System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize","System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport","System.Runtime.Serialization.IDataContractSurrogate.ProcessImportedType"],"api_location":["System.Runtime.Serialization.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Runtime.Serialization.IDataContractSurrogate","System::Runtime::Serialization::IDataContractSurrogate","System.Runtime.Serialization.IDataContractSurrogate.GetCustomDataToExport","System::Runtime::Serialization::IDataContractSurrogate::GetCustomDataToExport","System.Runtime.Serialization.IDataContractSurrogate.GetDataContractType","System::Runtime::Serialization::IDataContractSurrogate::GetDataContractType","System.Runtime.Serialization.IDataContractSurrogate.GetDeserializedObject","System::Runtime::Serialization::IDataContractSurrogate::GetDeserializedObject","System.Runtime.Serialization.IDataContractSurrogate.GetKnownCustomDataTypes","System::Runtime::Serialization::IDataContractSurrogate::GetKnownCustomDataTypes","System.Runtime.Serialization.IDataContractSurrogate.GetObjectToSerialize","System::Runtime::Serialization::IDataContractSurrogate::GetObjectToSerialize","System.Runtime.Serialization.IDataContractSurrogate.GetReferencedTypeOnImport","System::Runtime::Serialization::IDataContractSurrogate::GetReferencedTypeOnImport","System.Runtime.Serialization.IDataContractSurrogate.ProcessImportedType","System::Runtime::Serialization::IDataContractSurrogate::ProcessImportedType"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"c92f45e3-b856-004d-f58c-a2d3de6f8e6b","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Runtime.Serialization/IDataContractSurrogate.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IDataContractSurrogate interface | Microsoft Docs","_op_ogTitle":"IDataContractSurrogate interface","description":"Provides the methods needed to substitute one type for another by the  during serialization, deserialization, and export and import of XML schema documents (XSD).\n","toc_asset_id":"api/_splitted/System.Runtime.Serialization/toc.json","toc_rel":"_splitted/System.Runtime.Serialization/toc.json","source_url":"","ms.assetid":"System.Runtime.Serialization.IDataContractSurrogate","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.idatacontractsurrogate","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.serialization.idatacontractsurrogate","fileRelativePath":"api/System.Runtime.Serialization.IDataContractSurrogate.html"},"themesRelativePathToOutputRoot":"_themes/"}