{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">CustomAttributeBuilder</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Helps build custom attributes.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n[System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._CustomAttributeBuilder))]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic class CustomAttributeBuilder : System.Runtime.InteropServices._CustomAttributeBuilder</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">CustomAttributeBuilder</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code sample illustrates the use of <code>CustomAttributeBuilder</code>.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Reflection.Emit.CustomAttributeBuilder Example#1\">\nusing System;\nusing System.Threading;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\n\n// We will apply this custom attribute to our dynamic type.\npublic class ClassCreator: Attribute\n\n{\n   private string creator;\n   public string Creator \n   {\n\tget\n\t{\n\t   return creator;\n\t}\n   }\t\n\n   public ClassCreator(string name)\n   {\n      this.creator = name;\n   }\n\n}\n\n// We will apply this dynamic attribute to our dynamic method.\npublic class DateLastUpdated: Attribute\n\n{\n   private string dateUpdated;\n   public string DateUpdated\n   {\n   \tget\n\t{\n\t   return dateUpdated;\n\t}\n   }\n\n   public DateLastUpdated(string theDate)\n   {\n\tthis.dateUpdated = theDate;\n   } \n\n}\n\nclass MethodBuilderCustomAttributesDemo\n\n{\n\n   public static Type BuildTypeWithCustomAttributesOnMethod()\n   {\n\t\n\tAppDomain currentDomain = Thread.GetDomain();\n\t\n\tAssemblyName myAsmName = new AssemblyName();\n\tmyAsmName.Name = &quot;MyAssembly&quot;;\n\n\tAssemblyBuilder myAsmBuilder = currentDomain.DefineDynamicAssembly(\n\t\t\t\t       myAsmName, AssemblyBuilderAccess.Run);\n\n\tModuleBuilder myModBuilder = myAsmBuilder.DefineDynamicModule(&quot;MyModule&quot;);\n\n\t// First, we&#39;ll build a type with a custom attribute attached.\n\n\tTypeBuilder myTypeBuilder = myModBuilder.DefineType(&quot;MyType&quot;,\n\t\t\t\t\t\tTypeAttributes.Public);\n\t\n\tType[] ctorParams = new Type[] { typeof(string) };\n\tConstructorInfo classCtorInfo = typeof(ClassCreator).GetConstructor(ctorParams);\n\n\tCustomAttributeBuilder myCABuilder = new CustomAttributeBuilder(\n\t\t\t\t\t\tclassCtorInfo,\n\t\t\t\t\t\tnew object[] { &quot;Joe Programmer&quot; });\n\n\tmyTypeBuilder.SetCustomAttribute(myCABuilder);\n\n\t// Now, let&#39;s build a method and add a custom attribute to it.\n\n\tMethodBuilder myMethodBuilder = myTypeBuilder.DefineMethod(&quot;HelloWorld&quot;,\n\t\t\t\t\tMethodAttributes.Public,\n\t\t\t\t\tnull,\n\t\t\t\t\tnew Type[] { });\n\n\tctorParams = new Type[] { typeof(string) };\n\tclassCtorInfo = typeof(DateLastUpdated).GetConstructor(ctorParams);\n\n\tCustomAttributeBuilder myCABuilder2 = new CustomAttributeBuilder(\n\t\t\t\t\t\tclassCtorInfo,\n\t\t\t\t\t\tnew object[] { DateTime.Now.ToString() });\n\n\tmyMethodBuilder.SetCustomAttribute(myCABuilder2);\n\n\tILGenerator myIL = myMethodBuilder.GetILGenerator();\n\n\tmyIL.EmitWriteLine(&quot;Hello, world!&quot;);\n\tmyIL.Emit(OpCodes.Ret);\n\n\treturn myTypeBuilder.CreateType();\n\t\n   }\n\n   public static void Main() \n   {\n\n\tType myType = BuildTypeWithCustomAttributesOnMethod();\n\n\tobject myInstance = Activator.CreateInstance(myType);\n\n\tobject[] customAttrs = myType.GetCustomAttributes(true);\n\n\tConsole.WriteLine(&quot;Custom Attributes for Type &#39;MyType&#39;:&quot;);\n\n\tobject attrVal = null;\n\n\tforeach (object customAttr in customAttrs) \n   \t{\n\t   attrVal = typeof(ClassCreator).InvokeMember(&quot;Creator&quot;, \n\t\t\t\t\t  BindingFlags.GetProperty,\n\t\t\t\t\t  null, customAttr, new object[] { });\n\t   Console.WriteLine(&quot;-- Attribute: [{0} = \\&quot;{1}\\&quot;]&quot;, customAttr, attrVal);\n        }\n\n\tConsole.WriteLine(&quot;Custom Attributes for Method &#39;HelloWorld()&#39; in &#39;MyType&#39;:&quot;);\n\n\tcustomAttrs = myType.GetMember(&quot;HelloWorld&quot;)[0].GetCustomAttributes(true);\t\n\n\tforeach (object customAttr in customAttrs) \n   \t{\n\t   attrVal = typeof(DateLastUpdated).InvokeMember(&quot;DateUpdated&quot;, \n\t\t\t\t\t  BindingFlags.GetProperty,\n\t\t\t\t\t  null, customAttr, new object[] { });\n\t   Console.WriteLine(&quot;-- Attribute: [{0} = \\&quot;{1}\\&quot;]&quot;, customAttr, attrVal);\n        }\n\n\tConsole.WriteLine(&quot;---&quot;);\n\n\tConsole.WriteLine(myType.InvokeMember(&quot;HelloWorld&quot;,\n\t\t\t  BindingFlags.InvokeMethod,\n\t\t\t  null, myInstance, new object[] { }));\n\t\t\t\t\t\t   \n\t\n   }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Reflection.Emit.CustomAttributeBuilder Example#1\">\nImports System\nImports System.Threading\nImports System.Reflection\nImports System.Reflection.Emit\n\n _\n\n\n&#39; We will apply this custom attribute to our dynamic type.\nPublic Class ClassCreator\n\n   Inherits Attribute\n   \n   Private creator As String\n   \n   Public ReadOnly Property GetCreator() As String\n      Get\n         Return creator\n      End Get\n   End Property\n   \n   \n   Public Sub New(name As String)\n      Me.creator = name\n   End Sub &#39;New\n\nEnd Class &#39;ClassCreator\n _ \n\n&#39; We will apply this dynamic attribute to our dynamic method.\nPublic Class DateLastUpdated\n\n   Inherits Attribute\n   \n   Private dateUpdated As String\n   \n   Public ReadOnly Property GetDateUpdated() As String\n      Get\n         Return dateUpdated\n      End Get\n   End Property\n   \n   \n   Public Sub New(theDate As String)\n      Me.dateUpdated = theDate\n   End Sub &#39;New\n\nEnd Class &#39;DateLastUpdated\n _ \n\nClass MethodBuilderCustomAttributesDemo\n   \n   Public Shared Function BuildTypeWithCustomAttributesOnMethod() As Type\n      \n      Dim currentDomain As AppDomain = Thread.GetDomain()\n      \n      Dim myAsmName As New AssemblyName()\n      myAsmName.Name = &quot;MyAssembly&quot;\n      \n      Dim myAsmBuilder As AssemblyBuilder = currentDomain.DefineDynamicAssembly(myAsmName, _\n\t\t\t\t\t\t\tAssemblyBuilderAccess.Run)\n      \n      Dim myModBuilder As ModuleBuilder = myAsmBuilder.DefineDynamicModule(&quot;MyModule&quot;)\n      \n      &#39; First, we&#39;ll build a type with a custom attribute attached.\n      Dim myTypeBuilder As TypeBuilder = myModBuilder.DefineType(&quot;MyType&quot;, _\n\t\t\t\t\t\t\tTypeAttributes.Public)\n      \n      Dim ctorParams() As Type = {GetType(String)}\n      Dim classCtorInfo As ConstructorInfo = GetType(ClassCreator).GetConstructor(ctorParams)\n      \n      Dim myCABuilder As New CustomAttributeBuilder(classCtorInfo, _\n\t\t\t\t\t\tNew Object() {&quot;Joe Programmer&quot;})\n      \n      myTypeBuilder.SetCustomAttribute(myCABuilder)\n      \n      &#39; Now, let&#39;s build a method and add a custom attribute to it.\n      Dim myMethodBuilder As MethodBuilder = myTypeBuilder.DefineMethod(&quot;HelloWorld&quot;, _\n\t\t\t\t\tMethodAttributes.Public, Nothing, New Type() {})\n      \n      ctorParams = New Type() {GetType(String)}\n      classCtorInfo = GetType(DateLastUpdated).GetConstructor(ctorParams)\n      \n      Dim myCABuilder2 As New CustomAttributeBuilder(classCtorInfo, _\n\t\t\t\t\t\tNew Object() {DateTime.Now.ToString()})\n      \n      myMethodBuilder.SetCustomAttribute(myCABuilder2)\n      \n      Dim myIL As ILGenerator = myMethodBuilder.GetILGenerator()\n      \n      myIL.EmitWriteLine(&quot;Hello, world!&quot;)\n      myIL.Emit(OpCodes.Ret)\n      \n      Return myTypeBuilder.CreateType()\n\n   End Function &#39;BuildTypeWithCustomAttributesOnMethod\n    \n   \n   Public Shared Sub Main()\n      \n      Dim myType As Type = BuildTypeWithCustomAttributesOnMethod()\n      \n      Dim myInstance As Object = Activator.CreateInstance(myType)\n      \n      Dim customAttrs As Object() = myType.GetCustomAttributes(True)\n      \n      Console.WriteLine(&quot;Custom Attributes for Type &#39;MyType&#39;:&quot;)\n      \n      Dim attrVal As Object = Nothing\n      \n      Dim customAttr As Object\n      For Each customAttr In  customAttrs\n         attrVal = GetType(ClassCreator).InvokeMember(&quot;GetCreator&quot;, _\n\t\t\t\t\t\tBindingFlags.GetProperty, _\n\t\t\t\t\t\tNothing, customAttr, New Object() {})\n         Console.WriteLine(&quot;-- Attribute: [{0} = &quot;&quot;{1}&quot;&quot;]&quot;, customAttr, attrVal)\n      Next customAttr\n      \n      Console.WriteLine(&quot;Custom Attributes for Method &#39;HelloWorld()&#39; in &#39;MyType&#39;:&quot;)\n      \n      customAttrs = myType.GetMember(&quot;HelloWorld&quot;)(0).GetCustomAttributes(True)\n      \n      For Each customAttr In  customAttrs\n         attrVal = GetType(DateLastUpdated).InvokeMember(&quot;GetDateUpdated&quot;, _\n\t\t\t\t\t\tBindingFlags.GetProperty, _\n\t\t\t\t\t\tNothing, customAttr, New Object() {})\n         Console.WriteLine(&quot;-- Attribute: [{0} = &quot;&quot;{1}&quot;&quot;]&quot;, customAttr, attrVal)\n      Next customAttr\n      \n      Console.WriteLine(&quot;---&quot;)\n      \n      Console.WriteLine(myType.InvokeMember(&quot;HelloWorld&quot;, BindingFlags.InvokeMethod, _\n\t\t\t\t\t\tNothing, myInstance, New Object() {}))\n   End Sub &#39;Main\n\nEnd Class &#39;MethodBuilderCustomAttributesDemo\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Reflection.Emit.CustomAttributeBuilder Example#1\">using namespace System;\nusing namespace System::Threading;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\n\n// We will apply this custom attribute to our dynamic type.\npublic ref class ClassCreator: public Attribute\n{\nprivate:\n   String^ creator;\n\npublic:\n\n   property String^ Creator \n   {\n      String^ get()\n      {\n         return creator;\n      }\n\n   }\n   ClassCreator( String^ name )\n   {\n      this-&gt;creator = name;\n   }\n\n};\n\n\n// We will apply this dynamic attribute to our dynamic method.\npublic ref class DateLastUpdated: public Attribute\n{\nprivate:\n   String^ dateUpdated;\n\npublic:\n\n   property String^ DateUpdated \n   {\n      String^ get()\n      {\n         return dateUpdated;\n      }\n\n   }\n   DateLastUpdated( String^ theDate )\n   {\n      this-&gt;dateUpdated = theDate;\n   }\n\n};\n\nType^ BuildTypeWithCustomAttributesOnMethod()\n{\n   AppDomain^ currentDomain = Thread::GetDomain();\n   AssemblyName^ myAsmName = gcnew AssemblyName;\n   myAsmName-&gt;Name = &quot;MyAssembly&quot;;\n   AssemblyBuilder^ myAsmBuilder = currentDomain-&gt;DefineDynamicAssembly( myAsmName, AssemblyBuilderAccess::Run );\n   ModuleBuilder^ myModBuilder = myAsmBuilder-&gt;DefineDynamicModule( &quot;MyModule&quot; );\n   \n   // First, we&#39;ll build a type with a custom attribute attached.\n   TypeBuilder^ myTypeBuilder = myModBuilder-&gt;DefineType( &quot;MyType&quot;, TypeAttributes::Public );\n   array&lt;Type^&gt;^temp6 = {String::typeid};\n   array&lt;Type^&gt;^ctorParams = temp6;\n   ConstructorInfo^ classCtorInfo = ClassCreator::typeid-&gt;GetConstructor( ctorParams );\n   array&lt;Object^&gt;^temp0 = {&quot;Joe Programmer&quot;};\n   CustomAttributeBuilder^ myCABuilder = gcnew CustomAttributeBuilder( classCtorInfo,temp0 );\n   myTypeBuilder-&gt;SetCustomAttribute( myCABuilder );\n   \n   // Now, let&#39;s build a method and add a custom attribute to it.\n   array&lt;Type^&gt;^temp1 = gcnew array&lt;Type^&gt;(0);\n   MethodBuilder^ myMethodBuilder = myTypeBuilder-&gt;DefineMethod( &quot;HelloWorld&quot;, MethodAttributes::Public, nullptr, temp1 );\n   array&lt;Type^&gt;^temp7 = {String::typeid};\n   ctorParams = temp7;\n   classCtorInfo = DateLastUpdated::typeid-&gt;GetConstructor( ctorParams );\n   array&lt;Object^&gt;^temp2 = {DateTime::Now.ToString()};\n   CustomAttributeBuilder^ myCABuilder2 = gcnew CustomAttributeBuilder( classCtorInfo,temp2 );\n   myMethodBuilder-&gt;SetCustomAttribute( myCABuilder2 );\n   ILGenerator^ myIL = myMethodBuilder-&gt;GetILGenerator();\n   myIL-&gt;EmitWriteLine( &quot;Hello, world!&quot; );\n   myIL-&gt;Emit( OpCodes::Ret );\n   return myTypeBuilder-&gt;CreateType();\n}\n\nint main()\n{\n   Type^ myType = BuildTypeWithCustomAttributesOnMethod();\n   Object^ myInstance = Activator::CreateInstance( myType );\n   array&lt;Object^&gt;^customAttrs = myType-&gt;GetCustomAttributes( true );\n   Console::WriteLine( &quot;Custom Attributes for Type &#39;MyType&#39;:&quot; );\n   Object^ attrVal = nullptr;\n   System::Collections::IEnumerator^ myEnum = customAttrs-&gt;GetEnumerator();\n   while ( myEnum-&gt;MoveNext() )\n   {\n      Object^ customAttr = safe_cast&lt;Object^&gt;(myEnum-&gt;Current);\n      array&lt;Object^&gt;^temp3 = gcnew array&lt;Object^&gt;(0);\n      attrVal = ClassCreator::typeid-&gt;InvokeMember( &quot;Creator&quot;, BindingFlags::GetProperty, nullptr, customAttr, temp3 );\n      Console::WriteLine( &quot;-- Attribute: [{0} = \\&quot;{1}\\&quot;]&quot;, customAttr, attrVal );\n   }\n\n   Console::WriteLine( &quot;Custom Attributes for Method &#39;HelloWorld()&#39; in &#39;MyType&#39;:&quot; );\n   customAttrs = myType-&gt;GetMember( &quot;HelloWorld&quot; )[ 0 ]-&gt;GetCustomAttributes( true );\n   System::Collections::IEnumerator^ myEnum2 = customAttrs-&gt;GetEnumerator();\n   while ( myEnum2-&gt;MoveNext() )\n   {\n      Object^ customAttr = safe_cast&lt;Object^&gt;(myEnum2-&gt;Current);\n      array&lt;Object^&gt;^temp4 = gcnew array&lt;Object^&gt;(0);\n      attrVal = DateLastUpdated::typeid-&gt;InvokeMember( &quot;DateUpdated&quot;, BindingFlags::GetProperty, nullptr, customAttr, temp4 );\n      Console::WriteLine( &quot;-- Attribute: [{0} = \\&quot;{1}\\&quot;]&quot;, customAttr, attrVal );\n   }\n\n   Console::WriteLine( &quot;---&quot; );\n   array&lt;Object^&gt;^temp5 = gcnew array&lt;Object^&gt;(0);\n   Console::WriteLine( myType-&gt;InvokeMember( &quot;HelloWorld&quot;, BindingFlags::InvokeMethod, nullptr, myInstance, temp5 ) );\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Use the <code>CustomAttributeBuilder</code> object returned by the constructor to describe the custom attribute. Associate the <code>CustomAttribute</code> with a builder instance by calling the <code>SetCustomAttribute</code> method on that builder instance. For example, create a <code>CustomAttributeBuilder</code> to describe an instance of <code>AssemblyCultureAttribute</code> by supplying the constructor of <a class=\"xref\" href=\"system.reflection.assemblycultureattribute\" data-linktype=\"relative-path\">AssemblyCultureAttribute</a> and its argument. Then call <a class=\"xref\" href=\"system.reflection.emit.assemblybuilder#System_Reflection_Emit_AssemblyBuilder_SetCustomAttribute_\" data-linktype=\"relative-path\">SetCustomAttribute</a> on an <code>AssemblyBuilder</code> to establish the association.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Reflection_Emit_CustomAttributeBuilder__ctor_System_Reflection_ConstructorInfo_System_Object___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CustomAttributeBuilder(ConstructorInfo, Object[])</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes an instance of the <code>CustomAttributeBuilder</code> class given the constructor for the custom attribute and the arguments to the constructor.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public CustomAttributeBuilder (System.Reflection.ConstructorInfo con, object[] constructorArgs);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>con</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The constructor for the custom attribute.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>constructorArgs</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The arguments to the constructor of the custom attribute.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>con</code> is static or private.  </p>\n<p> -or-  </p>\n<p> The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  </p>\n<p> -or-  </p>\n<p> The type of supplied argument does not match the type of the parameter declared in the constructor.  </p>\n<p> -or-  </p>\n<p> A supplied argument is a reference type other than <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> or <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>con</code> or <code>constructorArgs</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The elements of the <code>constructorArgs</code> array are restricted to element types. They can be <code>byte</code>, <code>sbyte</code>, <code>int</code>, <code>uint</code>, <code>long</code>, <code>ulong</code>, <code>float</code>, <code>double</code>, <code>String</code>, <code>char</code>, <code>bool</code>, an enum, a type, any of the previous types that was cast to an object, or a single-dimension, zero-based array of any of the previous types.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Reflection_Emit_CustomAttributeBuilder__ctor_System_Reflection_ConstructorInfo_System_Object___System_Reflection_FieldInfo___System_Object___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CustomAttributeBuilder(ConstructorInfo, Object[], FieldInfo[], Object[])</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes an instance of the <code>CustomAttributeBuilder</code> class given the constructor for the custom attribute, the arguments to the constructor, and a set of named field/value pairs.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public CustomAttributeBuilder (System.Reflection.ConstructorInfo con, object[] constructorArgs, System.Reflection.FieldInfo[] namedFields, object[] fieldValues);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>con</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The constructor for the custom attribute.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>constructorArgs</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The arguments to the constructor of the custom attribute.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>namedFields</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Named fields of the custom attribute.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>fieldValues</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Values for the named fields of the custom attribute.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The lengths of the <code>namedFields</code> and <code>fieldValues</code> arrays are different.  </p>\n<p> -or-  </p>\n<p> <code>con</code> is static or private.  </p>\n<p> -or-  </p>\n<p> The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  </p>\n<p> -or-  </p>\n<p> The type of supplied argument does not match the type of the parameter declared in the constructor.  </p>\n<p> -or-  </p>\n<p> The types of the field values do not match the types of the named fields.  </p>\n<p> -or-  </p>\n<p> The field does not belong to the same class or base class as the constructor.  </p>\n<p> -or-  </p>\n<p> A supplied argument or named field is a reference type other than <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> or <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>One of the parameters is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The elements of the <code>constructorArgs</code> and <code>fieldValues</code> arrays are restricted to element types. They can be <code>byte</code>, <code>sbyte</code>, <code>int</code>, <code>uint</code>, <code>long</code>, <code>ulong</code>, <code>float</code>, <code>double</code>, <code>String</code>, <code>char</code>, <code>bool</code>, an enum, a type, any of the previous types that was cast to an object, or a single-dimension, zero-based array of any of the previous types.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Do not include private fields in <code>namedFields</code>. Doing so will cause <a class=\"xref\" href=\"system.reflection.customattributeformatexception\" data-linktype=\"relative-path\">CustomAttributeFormatException</a> to be thrown when the <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> method is later called on the completed type.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Reflection_Emit_CustomAttributeBuilder__ctor_System_Reflection_ConstructorInfo_System_Object___System_Reflection_PropertyInfo___System_Object___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CustomAttributeBuilder(ConstructorInfo, Object[], PropertyInfo[], Object[])</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes an instance of the <code>CustomAttributeBuilder</code> class given the constructor for the custom attribute, the arguments to the constructor, and a set of named property or value pairs.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public CustomAttributeBuilder (System.Reflection.ConstructorInfo con, object[] constructorArgs, System.Reflection.PropertyInfo[] namedProperties, object[] propertyValues);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>con</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The constructor for the custom attribute.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>constructorArgs</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The arguments to the constructor of the custom attribute.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>namedProperties</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Named properties of the custom attribute.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>propertyValues</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Values for the named properties of the custom attribute.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The lengths of the <code>namedProperties</code> and <code>propertyValues</code> arrays are different.  </p>\n<p> -or-  </p>\n<p> <code>con</code> is static or private.  </p>\n<p> -or-  </p>\n<p> The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  </p>\n<p> -or-  </p>\n<p> The type of supplied argument does not match the type of the parameter declared in the constructor.  </p>\n<p> -or-  </p>\n<p> The types of the property values do not match the types of the named properties.  </p>\n<p> -or-  </p>\n<p> A property has no setter method.  </p>\n<p> -or-  </p>\n<p> The property does not belong to the same class or base class as the constructor.  </p>\n<p> -or-  </p>\n<p> A supplied argument or named property is a reference type other than <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> or <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>One of the parameters is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The elements of the <code>constructorArgs</code> and <code>propertyValues</code> arrays are restricted to element types. They can be <code>byte</code>, <code>sbyte</code>, <code>int</code>, <code>uint</code>, <code>long</code>, <code>ulong</code>, <code>float</code>, <code>double</code>, <code>String</code>, <code>char</code>, <code>bool</code>, an enum, a type, any of the previous types that was cast to an object, or a single-dimension, zero-based array of any of the previous types.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Do not include private properties in <code>namedProperties</code>. Doing so will cause <a class=\"xref\" href=\"system.reflection.customattributeformatexception\" data-linktype=\"relative-path\">CustomAttributeFormatException</a> to be thrown when the <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> method is later called on the completed type.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Reflection_Emit_CustomAttributeBuilder__ctor_System_Reflection_ConstructorInfo_System_Object___System_Reflection_PropertyInfo___System_Object___System_Reflection_FieldInfo___System_Object___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CustomAttributeBuilder(ConstructorInfo, Object[], PropertyInfo[], Object[], FieldInfo[], Object[])</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes an instance of the <code>CustomAttributeBuilder</code> class given the constructor for the custom attribute, the arguments to the constructor, a set of named property or value pairs, and a set of named field or value pairs.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public CustomAttributeBuilder (System.Reflection.ConstructorInfo con, object[] constructorArgs, System.Reflection.PropertyInfo[] namedProperties, object[] propertyValues, System.Reflection.FieldInfo[] namedFields, object[] fieldValues);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>con</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.constructorinfo\" data-linktype=\"relative-path\">ConstructorInfo</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The constructor for the custom attribute.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>constructorArgs</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The arguments to the constructor of the custom attribute.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>namedProperties</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.propertyinfo\" data-linktype=\"relative-path\">PropertyInfo</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Named properties of the custom attribute.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>propertyValues</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Values for the named properties of the custom attribute.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>namedFields</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.fieldinfo\" data-linktype=\"relative-path\">FieldInfo</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Named fields of the custom attribute.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>fieldValues</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Values for the named fields of the custom attribute.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The lengths of the <code>namedProperties</code> and <code>propertyValues</code> arrays are different.  </p>\n<p> -or-  </p>\n<p> The lengths of the <code>namedFields</code> and <code>fieldValues</code> arrays are different.  </p>\n<p> -or-  </p>\n<p> <code>con</code> is static or private.  </p>\n<p> -or-  </p>\n<p> The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.  </p>\n<p> -or-  </p>\n<p> The type of supplied argument does not match the type of the parameter declared in the constructor.  </p>\n<p> -or-  </p>\n<p> The types of the property values do not match the types of the named properties.  </p>\n<p> -or-  </p>\n<p> The types of the field values do not match the types of the corresponding field types.  </p>\n<p> -or-  </p>\n<p> A property has no setter.  </p>\n<p> -or-  </p>\n<p> The property or field does not belong to the same class or base class as the constructor.  </p>\n<p> -or-  </p>\n<p> A supplied argument, named property, or named field is a reference type other than <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> or <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>One of the parameters is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The elements of the <code>constructorArgs</code>, <code>propertyValues</code>, or <code>fieldValues</code> arrays are restricted to element types. They can be <code>byte</code>, <code>sbyte</code>, <code>int</code>, <code>uint</code>, <code>long</code>, <code>ulong</code>, <code>float</code>, <code>double</code>, <code>String</code>, <code>char</code>, <code>bool</code>, an enum, a type, any of the previous types that was cast to an object, or a single-dimension, zero-based array of any of the previous types.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> Do not include private properties or fields in <code>namedProperties</code> or <code>namedFields</code>. Doing so will cause <a class=\"xref\" href=\"system.reflection.customattributeformatexception\" data-linktype=\"relative-path\">CustomAttributeFormatException</a> to be thrown when the <a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_\" data-linktype=\"relative-path\">GetCustomAttributes</a> method is later called on the completed type.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Explicit Interface Implementations\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Reflection_Emit_CustomAttributeBuilder_System_Runtime_InteropServices__CustomAttributeBuilder_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">_CustomAttributeBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Maps a set of names to a corresponding set of dispatch identifiers.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">void _CustomAttributeBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>riid</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Reserved for future use. Must be IID_NULL.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>rgszNames</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Passed-in array of names to be mapped.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>cNames</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Count of the names to be mapped.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>lcid</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The locale context in which to interpret the names.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>rgDispId</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Caller-allocated array which receives the IDs corresponding to the names.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The method is called late-bound using the COM <code>IDispatch</code> interface.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetIDsOfNames</code>, see the MSDN Library.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Reflection_Emit_CustomAttributeBuilder_System_Runtime_InteropServices__CustomAttributeBuilder_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">_CustomAttributeBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Retrieves the type information for an object, which can then be used to get the type information for an interface.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">void _CustomAttributeBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>iTInfo</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The type information to return.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>lcid</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The locale identifier for the type information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>ppTInfo</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Receives a pointer to the requested type information object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The method is called late-bound using the COM <code>IDispatch</code> interface.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfo</code>, see the MSDN Library.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Reflection_Emit_CustomAttributeBuilder_System_Runtime_InteropServices__CustomAttributeBuilder_GetTypeInfoCount_System_UInt32__\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">_CustomAttributeBuilder.GetTypeInfoCount(UInt32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">void _CustomAttributeBuilder.GetTypeInfoCount (out uint pcTInfo);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>pcTInfo</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Points to a location that receives the number of type information interfaces provided by the object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The method is called late-bound using the COM <code>IDispatch</code> interface.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::GetTypeInfoCount</code>, see the MSDN Library.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Reflection_Emit_CustomAttributeBuilder_System_Runtime_InteropServices__CustomAttributeBuilder_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">_CustomAttributeBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Provides access to properties and methods exposed by an object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">void _CustomAttributeBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>dispIdMember</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Identifies the member.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>riid</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.guid\" data-linktype=\"relative-path\">Guid</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Reserved for future use. Must be IID_NULL.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>lcid</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The locale context in which to interpret arguments.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>wFlags</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int16\" data-linktype=\"relative-path\">Int16</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Flags describing the context of the call.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>pDispParams</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>pVarResult</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Pointer to the location where the result is to be stored.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>pExcepInfo</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Pointer to a structure that contains exception information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>puArgErr</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.intptr\" data-linktype=\"relative-path\">IntPtr</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The index of the first argument that has an error.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.notimplementedexception\" data-linktype=\"relative-path\">NotImplementedException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The method is called late-bound using the COM <code>IDispatch</code> interface.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about <code>IDispatch::Invoke</code>, see the MSDN Library.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Reflection.Emit.CustomAttributeBuilder.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.CustomAttributeBuilder\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.CustomAttributeBuilder..ctor\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.CustomAttributeBuilder._CustomAttributeBuilder.GetIDsOfNames\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.CustomAttributeBuilder._CustomAttributeBuilder.GetTypeInfo\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.CustomAttributeBuilder._CustomAttributeBuilder.GetTypeInfoCount\">\r\n<meta name=\"APIName\" content=\"System.Reflection.Emit.CustomAttributeBuilder._CustomAttributeBuilder.Invoke\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"4e2bd348-7aa8-c17f-64dc-3d462bf2fea0\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Helps build custom attributes.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.reflection.emit/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.Emit.CustomAttributeBuilder\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Reflection.Emit.CustomAttributeBuilder.yml","open_to_public_contributors":false,"api_name":["System.Reflection.Emit.CustomAttributeBuilder","System.Reflection.Emit.CustomAttributeBuilder..ctor","System.Reflection.Emit.CustomAttributeBuilder._CustomAttributeBuilder.GetIDsOfNames","System.Reflection.Emit.CustomAttributeBuilder._CustomAttributeBuilder.GetTypeInfo","System.Reflection.Emit.CustomAttributeBuilder._CustomAttributeBuilder.GetTypeInfoCount","System.Reflection.Emit.CustomAttributeBuilder._CustomAttributeBuilder.Invoke"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.Emit.CustomAttributeBuilder","System::Reflection::Emit::CustomAttributeBuilder","System.Reflection.Emit.CustomAttributeBuilder.#ctor","System::Reflection::Emit::CustomAttributeBuilder::#ctor","System.Reflection.Emit.CustomAttributeBuilder.System#Runtime#InteropServices#_CustomAttributeBuilder#GetIDsOfNames","System::Reflection::Emit::CustomAttributeBuilder::System#Runtime#InteropServices#_CustomAttributeBuilder#GetIDsOfNames","System.Reflection.Emit.CustomAttributeBuilder.System#Runtime#InteropServices#_CustomAttributeBuilder#GetTypeInfo","System::Reflection::Emit::CustomAttributeBuilder::System#Runtime#InteropServices#_CustomAttributeBuilder#GetTypeInfo","System.Reflection.Emit.CustomAttributeBuilder.System#Runtime#InteropServices#_CustomAttributeBuilder#GetTypeInfoCount","System::Reflection::Emit::CustomAttributeBuilder::System#Runtime#InteropServices#_CustomAttributeBuilder#GetTypeInfoCount","System.Reflection.Emit.CustomAttributeBuilder.System#Runtime#InteropServices#_CustomAttributeBuilder#Invoke","System::Reflection::Emit::CustomAttributeBuilder::System#Runtime#InteropServices#_CustomAttributeBuilder#Invoke"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"4e2bd348-7aa8-c17f-64dc-3d462bf2fea0","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Reflection.Emit/CustomAttributeBuilder.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"CustomAttributeBuilder class | Microsoft Docs","_op_ogTitle":"CustomAttributeBuilder class","description":"Helps build custom attributes.\n","toc_asset_id":"api/_splitted/System.Reflection.Emit/toc.json","toc_rel":"_splitted/System.Reflection.Emit/toc.json","source_url":"","ms.assetid":"System.Reflection.Emit.CustomAttributeBuilder","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.customattributebuilder","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.emit.customattributebuilder","fileRelativePath":"api/System.Reflection.Emit.CustomAttributeBuilder.html"},"themesRelativePathToOutputRoot":"_themes/"}