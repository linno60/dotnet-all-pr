{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">DrawItemEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that will handle the <code>DrawItem</code> event of a <a class=\"xref\" href=\"system.windows.forms.combobox\" data-linktype=\"relative-path\">ComboBox</a>, <a class=\"xref\" href=\"system.windows.forms.listbox\" data-linktype=\"relative-path\">ListBox</a>, <a class=\"xref\" href=\"system.windows.forms.menuitem\" data-linktype=\"relative-path\">MenuItem</a>, or <a class=\"xref\" href=\"system.windows.forms.tabcontrol\" data-linktype=\"relative-path\">TabControl</a> control.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void DrawItemEventHandler(object sender, DrawItemEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">DrawItemEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates a menu with an owner-drawn menu item. This example uses the <code>AddHandler</code> statement and the <code>AddressOf</code> operator to designate a delegate to handle the <a class=\"xref\" href=\"system.windows.forms.menuitem#System_Windows_Forms_MenuItem_DrawItem\" data-linktype=\"relative-path\">System.Windows.Forms.MenuItem.DrawItem</a> event. To run the example place paste it in a form that imports the System, System.Windows.Forms, and System.Drawing namespaces. Ensure all events are associated with their event-handling methods.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.MenuItemOwnerDraw#1\">// Declare the MainMenu control.\ninternal System.Windows.Forms.MainMenu MainMenu1;\n\n// Declare MenuItem2 as With-Events because it will be user drawn.\ninternal System.Windows.Forms.MenuItem MenuItem2;\n\n\nprivate void InitializeMenu()\n{\n\n\t// Create MenuItem1, which will be drawn by the operating system.\n\tMenuItem MenuItem1 = new MenuItem(&quot;Regular Menu Item&quot;);\n\n\t// Create MenuItem2.\n\tMenuItem2 = new MenuItem(&quot;Custom Menu Item&quot;);\n\n\t// Set OwnerDraw property to true. This requires handling the\n\t// DrawItem event for this menu item.\n\tMenuItem2.OwnerDraw = true;\n\n\t//Add the event-handler delegate to handle the DrawItem event.\n       MenuItem2.DrawItem += new DrawItemEventHandler(DrawCustomMenuItem);\n\t\n     // Add the items to the menu.\n\tMainMenu1 = new MainMenu(new MenuItem[]{MenuItem1, MenuItem2});\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \n\n\t// Add the menu to the form.\n\tthis.Menu = this.MainMenu1;\n}\n\n// Draw the custom menu item.\nprivate void DrawCustomMenuItem(object sender, \n\tDrawItemEventArgs e)\n{\n\n\t// Cast the sender to MenuItem so you can access text property.\n\tMenuItem customItem = (MenuItem) sender;\n\n\t// Create a Brush and a Font to draw the MenuItem.\n\tSystem.Drawing.Brush aBrush = System.Drawing.Brushes.DarkMagenta;\n\tFont aFont = new Font(&quot;Garamond&quot;, 10, \n\t\tFontStyle.Italic, GraphicsUnit.Point);\n\n\t// Get the size of the text to use later to draw an ellipse\n\t// around the item.\n\tSizeF stringSize = e.Graphics.MeasureString(\n\t\tcustomItem.Text, aFont);\n\n\t// Draw the item and then draw the ellipse.\n\te.Graphics.DrawString(customItem.Text, aFont, \n\t\taBrush, e.Bounds.X, e.Bounds.Y);\n\te.Graphics.DrawEllipse(new Pen(System.Drawing.Color.Black, 2),\n\t\tnew Rectangle(e.Bounds.X, e.Bounds.Y, \n\t\t(System.Int32)stringSize.Width,\n\t\t(System.Int32)stringSize.Height));\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.MenuItemOwnerDraw#1\">internal:\n   // Declare the MainMenu control.\n   System::Windows::Forms::MainMenu^ MainMenu1;\n\n   // Declare MenuItem2 as With-Events because it will be user drawn.\n   System::Windows::Forms::MenuItem^ MenuItem2;\n\nprivate:\n   void InitializeMenu()\n   {\n      \n      // Create MenuItem1, which will be drawn by the operating system.\n      MenuItem^ MenuItem1 = gcnew MenuItem( &quot;Regular Menu Item&quot; );\n      \n      // Create MenuItem2.\n      MenuItem2 = gcnew MenuItem( &quot;Custom Menu Item&quot; );\n      \n      // Set OwnerDraw property to true. This requires handling the\n      // DrawItem event for this menu item.\n      MenuItem2-&gt;OwnerDraw = true;\n      \n      //Add the event-handler delegate to handle the DrawItem event.\n      MenuItem2-&gt;DrawItem += gcnew DrawItemEventHandler( this, &amp;Form1::DrawCustomMenuItem );\n      \n      // Add the items to the menu.\n      array&lt;MenuItem^&gt;^temp0 = {MenuItem1,MenuItem2};\n      MainMenu1 = gcnew MainMenu( temp0 );\n      \n      // Add the menu to the form.\n      this-&gt;Menu = this-&gt;MainMenu1;\n   }\n\n   // Draw the custom menu item.\n   void DrawCustomMenuItem( Object^ sender, DrawItemEventArgs^ e )\n   {\n      // Cast the sender to MenuItem so you can access text property.\n      MenuItem^ customItem = dynamic_cast&lt;MenuItem^&gt;(sender);\n      \n      // Create a Brush and a Font to draw the MenuItem.\n      System::Drawing::Brush^ aBrush = System::Drawing::Brushes::DarkMagenta;\n      System::Drawing::Font^ aFont = gcnew System::Drawing::Font( &quot;Garamond&quot;,10,FontStyle::Italic,GraphicsUnit::Point );\n      \n      // Get the size of the text to use later to draw an ellipse\n      // around the item.\n      SizeF stringSize = e-&gt;Graphics-&gt;MeasureString( customItem-&gt;Text, aFont );\n      \n      // Draw the item and then draw the ellipse.\n      e-&gt;Graphics-&gt;DrawString( customItem-&gt;Text, aFont, aBrush, (float)e-&gt;Bounds.X, (float)e-&gt;Bounds.Y );\n      e-&gt;Graphics-&gt;DrawEllipse( gcnew Pen( System::Drawing::Color::Black,2 ), Rectangle(e-&gt;Bounds.X,e-&gt;Bounds.Y,(System::Int32)stringSize.Width,(System::Int32)stringSize.Height) );\n   }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.MenuItemOwnerDraw#1\">&#39; Declare the MainMenu control.\nFriend WithEvents MainMenu1 As System.Windows.Forms.MainMenu\n\n&#39; Declare MenuItem2 as With-Events because it will be user drawn.\nFriend WithEvents MenuItem2 As System.Windows.Forms.MenuItem\n\n\nPrivate Sub InitializeMenu()\n\n    &#39; Create MenuItem1, which will be drawn by the operating system.\n    Dim MenuItem1 As New MenuItem(&quot;Regular Menu Item&quot;)\n\n    &#39; Create MenuItem2.\n    MenuItem2 = New MenuItem(&quot;Custom Menu Item&quot;)\n\n    &#39; Set OwnerDraw property to true. This requires handling the\n    &#39; DrawItem event for this menu item.\n    MenuItem2.OwnerDraw = True\n\n    &#39;Add the event-handler delegate to handle the DrawItem event.\n    AddHandler MenuItem2.DrawItem, New DrawItemEventHandler(AddressOf DrawCustomMenuItem)\n\n    &#39; Add the items to the menu.\n    MainMenu1 = New MainMenu(New MenuItem() {MenuItem1, MenuItem2})\n\n    &#39; Add the menu to the form.\n    Me.Menu = Me.MainMenu1\nEnd Sub\n\n&#39; Draw the custom menu item.\nPrivate Sub DrawCustomMenuItem(ByVal sender As Object, ByVal e As _\n        System.Windows.Forms.DrawItemEventArgs)\n\n    &#39; Cast the sender to MenuItem so you can access text property.\n    Dim customItem As MenuItem = CType(sender, MenuItem)\n\n    &#39; Create a Brush and a Font to draw the MenuItem.\n    Dim aBrush As System.Drawing.Brush = System.Drawing.Brushes.DarkMagenta\n    Dim aFont As New Font(&quot;Garamond&quot;, 10, FontStyle.Italic, _\n        GraphicsUnit.Point)\n\n    &#39; Get the size of the text to use later to draw an ellipse\n    &#39; around the item.\n    Dim stringSize As SizeF = e.Graphics.MeasureString( _\n        customItem.Text, aFont)\n\n    &#39; Draw the item and then draw the ellipse.\n    e.Graphics.DrawString(customItem.Text, aFont, _\n        aBrush, e.Bounds.X, e.Bounds.Y)\n    e.Graphics.DrawEllipse(New Pen(System.Drawing.Color.Black, 2), _\n        New Rectangle(e.Bounds.X, e.Bounds.Y, CInt(stringSize.Width), _\n        CInt(stringSize.Height)))\nEnd Sub\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>When you create a <a class=\"xref\" href=\"system.windows.forms.drawitemeventargs\" data-linktype=\"relative-path\">DrawItemEventArgs</a> delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event handler delegates, see <a href=\"../topic/handling%20and%20raising%20events\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.DrawItemEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DrawItemEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DrawItemEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DrawItemEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DrawItemEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DrawItemEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"6851a018-1dc5-c172-ab1c-5f15b27b838c\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that will handle the DrawItem event of a , , , or  control.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.windows.forms/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.DrawItemEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.DrawItemEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Windows.Forms.DrawItemEventHandler","System.Windows.Forms.DrawItemEventHandler..ctor","System.Windows.Forms.DrawItemEventHandler.Invoke","System.Windows.Forms.DrawItemEventHandler.BeginInvoke","System.Windows.Forms.DrawItemEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.DrawItemEventHandler","System::Windows::Forms::DrawItemEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"6851a018-1dc5-c172-ab1c-5f15b27b838c","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Windows.Forms/DrawItemEventHandler.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DrawItemEventHandler delegate | Microsoft Docs","_op_ogTitle":"DrawItemEventHandler delegate","description":"Represents the method that will handle the DrawItem event of a , , , or  control.\n","toc_asset_id":"api/_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.DrawItemEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.drawitemeventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.drawitemeventhandler","fileRelativePath":"api/System.Windows.Forms.DrawItemEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}