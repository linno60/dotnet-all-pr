{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">AssemblyFlagsAttribute</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies a bitwise combination of <a class=\"xref\" href=\"system.reflection.assemblynameflags\" data-linktype=\"relative-path\">AssemblyNameFlags</a> flags for an assembly, describing just-in-time (JIT) compiler options, whether the assembly is retargetable, and whether it has a full or tokenized public key. This class cannot be inherited.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.AttributeUsage(System.AttributeTargets.Assembly, Inherited=false)]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class AssemblyFlagsAttribute : Attribute</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">System.Attribute</a></span></div><span class=\"lang-csharp\">AssemblyFlagsAttribute</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_Assembly_System_Type_\" data-linktype=\"relative-path\">GetCustomAttribute(Assembly,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_Assembly_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttribute(Assembly,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_MemberInfo_System_Type_\" data-linktype=\"relative-path\">GetCustomAttribute(MemberInfo,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_MemberInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttribute(MemberInfo,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_Module_System_Type_\" data-linktype=\"relative-path\">GetCustomAttribute(Module,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_Module_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttribute(Module,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_ParameterInfo_System_Type_\" data-linktype=\"relative-path\">GetCustomAttribute(ParameterInfo,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_ParameterInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttribute(ParameterInfo,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_\" data-linktype=\"relative-path\">GetCustomAttributes(Assembly)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Assembly,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_System_Type_\" data-linktype=\"relative-path\">GetCustomAttributes(Assembly,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Assembly,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_\" data-linktype=\"relative-path\">GetCustomAttributes(MemberInfo)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(MemberInfo,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_System_Type_\" data-linktype=\"relative-path\">GetCustomAttributes(MemberInfo,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(MemberInfo,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Module_\" data-linktype=\"relative-path\">GetCustomAttributes(Module)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Module_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Module,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Module_System_Type_\" data-linktype=\"relative-path\">GetCustomAttributes(Module,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Module_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Module,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_\" data-linktype=\"relative-path\">GetCustomAttributes(ParameterInfo)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(ParameterInfo,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_System_Type_\" data-linktype=\"relative-path\">GetCustomAttributes(ParameterInfo,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(ParameterInfo,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefaultAttribute\" data-linktype=\"relative-path\">IsDefaultAttribute()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_Assembly_System_Type_\" data-linktype=\"relative-path\">IsDefined(Assembly,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_Assembly_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(Assembly,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_MemberInfo_System_Type_\" data-linktype=\"relative-path\">IsDefined(MemberInfo,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_MemberInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(MemberInfo,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_Module_System_Type_\" data-linktype=\"relative-path\">IsDefined(Module,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_Module_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(Module,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_ParameterInfo_System_Type_\" data-linktype=\"relative-path\">IsDefined(ParameterInfo,Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_ParameterInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(ParameterInfo,Type,Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_Match_System_Object_\" data-linktype=\"relative-path\">Match(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_System_Runtime_InteropServices__Attribute_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_Attribute.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_System_Runtime_InteropServices__Attribute_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_Attribute.GetTypeInfo(UInt32,UInt32,IntPtr)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_System_Runtime_InteropServices__Attribute_GetTypeInfoCount_System_UInt32__\" data-linktype=\"relative-path\">_Attribute.GetTypeInfoCount(UInt32)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_System_Runtime_InteropServices__Attribute_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"relative-path\">_Attribute.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_TypeId\" data-linktype=\"relative-path\">TypeId</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example shows how to apply the AssemblyFlagsAttribute to an assembly, and how to read the flags at run time. The example also creates an instance of the attribute, and uses the <a class=\"xref\" href=\"system.reflection.assemblyflagsattribute#System_Reflection_AssemblyFlagsAttribute_AssemblyFlags_\" data-linktype=\"relative-path\">AssemblyFlags</a> property to display the flags. For an example of how to apply the AssemblyFlagsAttribute to a dynamic assembly, see the <a class=\"xref\" href=\"system.reflection.assemblyname#System_Reflection_AssemblyName_Flags_\" data-linktype=\"relative-path\">Flags</a> property.  </p>\n<pre><code class=\"lang-cpp\" name=\"AssemblyFlagsAttribute#1\">using namespace System;\nusing namespace System::Reflection;\n\n// Specify a combination of AssemblyNameFlags for this\n// assembly.\n[assembly:AssemblyFlagsAttribute(\n     AssemblyNameFlags::EnableJITcompileOptimizer\n   | AssemblyNameFlags::Retargetable)];\n\npublic ref class Example\n{\npublic:\n   static void Main()\n   {\n      // Get this assembly.\n      Assembly^ thisAsm = Example::typeid-&gt;Assembly;\n      \n      // Get the AssemblyName for this assembly.\n      AssemblyName^ thisAsmName = thisAsm-&gt;GetName( false );\n      \n      // Display the flags that were set for this assembly.\n      ListFlags( thisAsmName-&gt;Flags );\n      \n      // Create an instance of AssemblyFlagsAttribute with the\n      // same combination of flags that was specified for this\n      // assembly. Note that PublicKey is included automatically\n      // for the assembly, but not for this instance of\n      // AssemblyFlagsAttribute.\n      AssemblyFlagsAttribute^ afa = gcnew AssemblyFlagsAttribute( \n         static_cast&lt;AssemblyNameFlags&gt; (AssemblyNameFlags::EnableJITcompileOptimizer\n                                       | AssemblyNameFlags::Retargetable) );\n      \n      // Get the flags. The property returns an integer, so\n      // the return value must be cast to AssemblyNameFlags.\n      AssemblyNameFlags anf = static_cast&lt;AssemblyNameFlags&gt;(afa-&gt;AssemblyFlags);\n      \n      // Display the flags.\n      Console::WriteLine();\n      ListFlags( anf );\n   }\n\nprivate:\n   static void ListFlags( AssemblyNameFlags anf )\n   {\n      if ( anf == AssemblyNameFlags::None )\n      {\n         Console::WriteLine( L&quot;AssemblyNameFlags.None&quot; );\n      }\n      else\n      {\n         if ( 0 != static_cast&lt;Int32&gt;(anf &amp; AssemblyNameFlags::Retargetable) )\n                  Console::WriteLine( L&quot;AssemblyNameFlags.Retargetable&quot; );\n         if ( 0 != static_cast&lt;Int32&gt;(anf &amp; AssemblyNameFlags::PublicKey) )\n                  Console::WriteLine( L&quot;AssemblyNameFlags.PublicKey&quot; );\n         if ( 0 != static_cast&lt;Int32&gt;(anf &amp; AssemblyNameFlags::EnableJITcompileOptimizer) )\n                  Console::WriteLine( L&quot;AssemblyNameFlags.EnableJITcompileOptimizer&quot; );\n         if ( 0 != static_cast&lt;Int32&gt;(anf &amp; AssemblyNameFlags::EnableJITcompileTracking) )\n                  Console::WriteLine( L&quot;AssemblyNameFlags.EnableJITcompileTracking&quot; );\n      }\n   }\n\n};\n\nint main()\n{\n   Example::Main();\n}\n\n/* This code example produces the following output:\n\nAssemblyNameFlags.Retargetable\nAssemblyNameFlags.PublicKey\nAssemblyNameFlags.EnableJITcompileOptimizer\n\nAssemblyNameFlags.Retargetable\nAssemblyNameFlags.EnableJITcompileOptimizer\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"AssemblyFlagsAttribute#1\">using System;\nusing System.Reflection;\n\n// Specify a combination of AssemblyNameFlags for this \n// assembly.\n[assembly:AssemblyFlagsAttribute(\n    AssemblyNameFlags.EnableJITcompileOptimizer |\n    AssemblyNameFlags.Retargetable)]\n\npublic class Example\n{\n    public static void Main()\n    {\n        // Get this assembly.\n        Assembly thisAsm = typeof(Example).Assembly;\n\n        // Get the AssemblyName for this assembly.\n        AssemblyName thisAsmName = thisAsm.GetName(false);\n\n        // Display the flags that were set for this assembly.\n        ListFlags(thisAsmName.Flags);\n\n        // Create an instance of AssemblyFlagsAttribute with the\n        // same combination of flags that was specified for this\n        // assembly. Note that PublicKey is included automatically\n        // for the assembly, but not for this instance of\n        // AssemblyFlagsAttribute.\n        AssemblyFlagsAttribute afa = new AssemblyFlagsAttribute(\n            AssemblyNameFlags.EnableJITcompileOptimizer |\n            AssemblyNameFlags.Retargetable);\n\n        // Get the flags. The property returns an integer, so\n        // the return value must be cast to AssemblyNameFlags.\n        AssemblyNameFlags anf = (AssemblyNameFlags) afa.AssemblyFlags;\n\n        // Display the flags.\n        Console.WriteLine();\n        ListFlags(anf);\n    }\n\n    private static void ListFlags(AssemblyNameFlags anf)\n    {\n        if (anf == AssemblyNameFlags.None)\n        {\n            Console.WriteLine(&quot;AssemblyNameFlags.None&quot;);\n        }\n        else\n        {\n            if (0!=(anf &amp; AssemblyNameFlags.Retargetable)) \n                Console.WriteLine(&quot;AssemblyNameFlags.Retargetable&quot;);\n            if (0!=(anf &amp; AssemblyNameFlags.PublicKey)) \n                Console.WriteLine(&quot;AssemblyNameFlags.PublicKey&quot;);\n            if (0!=(anf &amp; AssemblyNameFlags.EnableJITcompileOptimizer)) \n                Console.WriteLine(&quot;AssemblyNameFlags.EnableJITcompileOptimizer&quot;);\n            if (0!=(anf &amp; AssemblyNameFlags.EnableJITcompileTracking)) \n                Console.WriteLine(&quot;AssemblyNameFlags.EnableJITcompileTracking&quot;);\n        }\n    }\n}\n\n/* This code example produces the following output:\n\nAssemblyNameFlags.Retargetable\nAssemblyNameFlags.PublicKey\nAssemblyNameFlags.EnableJITcompileOptimizer\n\nAssemblyNameFlags.Retargetable\nAssemblyNameFlags.EnableJITcompileOptimizer\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"AssemblyFlagsAttribute#1\">Imports System\nImports System.Reflection\n\n&#39; Specify a combination of AssemblyNameFlags for this \n&#39; assembly.\n&lt;Assembly:AssemblyFlagsAttribute( _\n       AssemblyNameFlags.EnableJITcompileOptimizer _\n    Or AssemblyNameFlags.Retargetable)&gt;\n\nPublic Class Example\n    Public Shared Sub Main()\n        &#39; Get this assembly.\n        Dim thisAsm As Assembly = GetType(Example).Assembly\n\n        &#39; Get the AssemblyName for this assembly.\n        Dim thisAsmName As AssemblyName = thisAsm.GetName(False)\n\n        &#39; Display the flags that were set for this assembly.\n        ListFlags(thisAsmName.Flags)\n\n        &#39; Create an instance of AssemblyFlagsAttribute with the\n        &#39; same combination of flags that was specified for this\n        &#39; assembly. Note that PublicKey is included automatically\n        &#39; for the assembly, but not for this instance of\n        &#39; AssemblyFlagsAttribute.\n        Dim afa As New AssemblyFlagsAttribute( _\n               AssemblyNameFlags.EnableJITcompileOptimizer _\n            Or AssemblyNameFlags.Retargetable)\n\n        &#39; Get the flags. The property returns an integer, so\n        &#39; the return value must be cast to AssemblyNameFlags.\n        Dim anf As AssemblyNameFlags = _\n            CType(afa.AssemblyFlags, AssemblyNameFlags)\n\n        &#39; Display the flags.\n        Console.WriteLine()\n        ListFlags(anf)\n    End Sub\n\n    Private Shared Sub ListFlags(ByVal anf As AssemblyNameFlags)\n\n        If anf = AssemblyNameFlags.None Then\n            Console.WriteLine(&quot;AssemblyNameFlags.None&quot;)\n        Else\n            If 0 &lt;&gt; (anf And AssemblyNameFlags.Retargetable) Then _\n                Console.WriteLine(&quot;AssemblyNameFlags.Retargetable&quot;)\n            If 0 &lt;&gt; (anf And AssemblyNameFlags.PublicKey) Then _\n                Console.WriteLine(&quot;AssemblyNameFlags.PublicKey&quot;)\n            If 0 &lt;&gt; (anf And AssemblyNameFlags.EnableJITcompileOptimizer) Then _\n                Console.WriteLine(&quot;AssemblyNameFlags.EnableJITcompileOptimizer&quot;)\n            If 0 &lt;&gt; (anf And AssemblyNameFlags.EnableJITcompileTracking) Then _\n                Console.WriteLine(&quot;AssemblyNameFlags.EnableJITcompileTracking&quot;)\n        End If\n\n    End SUb\nEnd Class\n\n&#39; This code example produces the following output:\n&#39;\n&#39;AssemblyNameFlags.Retargetable\n&#39;AssemblyNameFlags.PublicKey\n&#39;AssemblyNameFlags.EnableJITcompileOptimizer\n&#39;\n&#39;AssemblyNameFlags.Retargetable\n&#39;AssemblyNameFlags.EnableJITcompileOptimizer\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The <a class=\"xref\" href=\"system.reflection.assemblynameflags\" data-linktype=\"relative-path\">AssemblyNameFlags</a> enumeration describes the assembly characteristics that can be set using this attribute.  </p>\n<p> To access the flags that have been specified for an assembly, use the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_GetName_\" data-linktype=\"relative-path\">GetName</a> property to obtain an <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> object, then use the <a class=\"xref\" href=\"system.reflection.assemblyname#System_Reflection_AssemblyName_Flags_\" data-linktype=\"relative-path\">Flags</a> property to obtain an <a class=\"xref\" href=\"system.reflection.assemblynameflags\" data-linktype=\"relative-path\">AssemblyNameFlags</a> value.  </p>\n<p> To specify <a class=\"xref\" href=\"system.reflection.assemblynameflags\" data-linktype=\"relative-path\">AssemblyNameFlags</a> flags for a dynamic assembly, set the <a class=\"xref\" href=\"system.reflection.assemblyname#System_Reflection_AssemblyName_Flags_\" data-linktype=\"relative-path\">Flags</a> property of the <a class=\"xref\" href=\"system.reflection.assemblyname\" data-linktype=\"relative-path\">AssemblyName</a> object that you pass to the <a class=\"xref\" href=\"system.appdomain#System_AppDomain_DefineDynamicAssembly_\" data-linktype=\"relative-path\">DefineDynamicAssembly</a> method.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Reflection_AssemblyFlagsAttribute__ctor_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AssemblyFlagsAttribute(Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.reflection.assemblyflagsattribute\" data-linktype=\"relative-path\">AssemblyFlagsAttribute</a> class with the specified combination of <a class=\"xref\" href=\"system.reflection.assemblynameflags\" data-linktype=\"relative-path\">AssemblyNameFlags</a> flags, cast as an integer value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public AssemblyFlagsAttribute (int assemblyFlags);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>assemblyFlags</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A bitwise combination of <a class=\"xref\" href=\"system.reflection.assemblynameflags\" data-linktype=\"relative-path\">AssemblyNameFlags</a> flags, cast as an integer value, representing just-in-time (JIT) compiler options, longevity, whether an assembly is retargetable, and whether it has a full or tokenized public key.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This untyped constructor is now obsolete. Do not use.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Reflection_AssemblyFlagsAttribute__ctor_System_Reflection_AssemblyNameFlags_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AssemblyFlagsAttribute(AssemblyNameFlags)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.reflection.assemblyflagsattribute\" data-linktype=\"relative-path\">AssemblyFlagsAttribute</a> class with the specified combination of <a class=\"xref\" href=\"system.reflection.assemblynameflags\" data-linktype=\"relative-path\">AssemblyNameFlags</a> flags.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public AssemblyFlagsAttribute (System.Reflection.AssemblyNameFlags assemblyFlags);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>assemblyFlags</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.assemblynameflags\" data-linktype=\"relative-path\">AssemblyNameFlags</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A bitwise combination of <a class=\"xref\" href=\"system.reflection.assemblynameflags\" data-linktype=\"relative-path\">AssemblyNameFlags</a> flags representing just-in-time (JIT) compiler options, longevity, whether an assembly is retargetable, and whether it has a full or tokenized public key.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Reflection_AssemblyFlagsAttribute__ctor_System_UInt32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AssemblyFlagsAttribute(UInt32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.reflection.assemblyflagsattribute\" data-linktype=\"relative-path\">AssemblyFlagsAttribute</a> class with the specified combination of <a class=\"xref\" href=\"system.reflection.assemblynameflags\" data-linktype=\"relative-path\">AssemblyNameFlags</a> flags, cast as an unsigned integer value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public AssemblyFlagsAttribute (uint flags);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>flags</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A bitwise combination of <a class=\"xref\" href=\"system.reflection.assemblynameflags\" data-linktype=\"relative-path\">AssemblyNameFlags</a> flags, cast as an unsigned integer value, representing just-in-time (JIT) compiler options, longevity, whether an assembly is retargetable, and whether it has a full or tokenized public key.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This untyped constructor is now obsolete. Do not use.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Reflection_AssemblyFlagsAttribute_AssemblyFlags\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AssemblyFlags</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets an integer value representing the combination of <a class=\"xref\" href=\"system.reflection.assemblynameflags\" data-linktype=\"relative-path\">AssemblyNameFlags</a> flags specified when this attribute instance was created.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int AssemblyFlags { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An integer value representing a bitwise combination of <a class=\"xref\" href=\"system.reflection.assemblynameflags\" data-linktype=\"relative-path\">AssemblyNameFlags</a> flags.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property returns an integer for backward compatibility. Cast the value to the <a class=\"xref\" href=\"system.reflection.assemblynameflags\" data-linktype=\"relative-path\">AssemblyNameFlags</a> type before using it.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Reflection_AssemblyFlagsAttribute_Flags\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Flags</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets an unsigned integer value representing the combination of <a class=\"xref\" href=\"system.reflection.assemblynameflags\" data-linktype=\"relative-path\">AssemblyNameFlags</a> flags specified when this attribute instance was created.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public uint Flags { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.uint32\" data-linktype=\"relative-path\">UInt32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An unsigned integer value representing a bitwise combination of <a class=\"xref\" href=\"system.reflection.assemblynameflags\" data-linktype=\"relative-path\">AssemblyNameFlags</a> flags.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property returns an integer for backward compatibility. Cast the value to the <a class=\"xref\" href=\"system.reflection.assemblynameflags\" data-linktype=\"relative-path\">AssemblyNameFlags</a> type before using it.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Reflection.AssemblyFlagsAttribute.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.AssemblyFlagsAttribute\">\r\n<meta name=\"APIName\" content=\"System.Reflection.AssemblyFlagsAttribute..ctor\">\r\n<meta name=\"APIName\" content=\"System.Reflection.AssemblyFlagsAttribute.AssemblyFlags\">\r\n<meta name=\"APIName\" content=\"System.Reflection.AssemblyFlagsAttribute.Flags\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-24 01:41 AM\">\r\n<meta name=\"document_id\" content=\"8a7f39b4-efbb-735e-61bb-d4cd05b6241e\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies a bitwise combination of  flags for an assembly, describing just-in-time (JIT) compiler options, whether the assembly is retargetable, and whether it has a full or tokenized public key. Thi…\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.reflection/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.AssemblyFlagsAttribute\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Reflection.AssemblyFlagsAttribute.yml","open_to_public_contributors":false,"api_name":["System.Reflection.AssemblyFlagsAttribute","System.Reflection.AssemblyFlagsAttribute..ctor","System.Reflection.AssemblyFlagsAttribute.AssemblyFlags","System.Reflection.AssemblyFlagsAttribute.Flags"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.AssemblyFlagsAttribute","System::Reflection::AssemblyFlagsAttribute","System.Reflection.AssemblyFlagsAttribute.#ctor","System::Reflection::AssemblyFlagsAttribute::#ctor","System.Reflection.AssemblyFlagsAttribute.AssemblyFlags","System::Reflection::AssemblyFlagsAttribute::AssemblyFlags","System.Reflection.AssemblyFlagsAttribute.Flags","System::Reflection::AssemblyFlagsAttribute::Flags"],"dev_langs":["csharp"],"updated_at":"2017-03-24 01:41 AM","document_id":"8a7f39b4-efbb-735e-61bb-d4cd05b6241e","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Reflection/AssemblyFlagsAttribute.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"AssemblyFlagsAttribute class | Microsoft Docs","_op_ogTitle":"AssemblyFlagsAttribute class","description":"Specifies a bitwise combination of  flags for an assembly, describing just-in-time (JIT) compiler options, whether the assembly is retargetable, and whether it has a full or tokenized public key. Thi…","toc_asset_id":"api/_splitted/System.Reflection/toc.json","toc_rel":"_splitted/System.Reflection/toc.json","source_url":"","ms.assetid":"System.Reflection.AssemblyFlagsAttribute","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assemblyflagsattribute","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.assemblyflagsattribute","fileRelativePath":"api/System.Reflection.AssemblyFlagsAttribute.html"},"themesRelativePathToOutputRoot":"_themes/"}