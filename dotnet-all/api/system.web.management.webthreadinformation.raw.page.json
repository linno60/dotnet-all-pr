{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">WebThreadInformation</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides information about the state of a thread in an ASP.NET process.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public sealed class WebThreadInformation</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">WebThreadInformation</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example has two parts. The first is an excerpt of a configuration file that enables ASP.NET to use a custom event that uses the WebThreadInformation type. The second shows how to implement the custom event that uses the WebThreadInformation type.  </p>\n<p> Ensure that your custom event is raised at the proper time, that is, when the equivalent system health event it replaces would be raised.  </p>\n<pre><code>&lt;healthMonitoring  \n    heartBeatInterval=&quot;0&quot; enabled=&quot;true&quot;&gt;  \n\n  &lt;profiles&gt;  \n    &lt;add name=&quot;Custom&quot;   \n      minInstances=&quot;1&quot;   \n      maxLimit=&quot;Infinite&quot;   \n      minInterval=&quot;00:00:00&quot; /&gt;  \n  &lt;/profiles&gt;  \n\n  &lt;eventMappings&gt;  \n\n    &lt;add   \n      name=&quot;SampleWebThreadInformation&quot;   \ntype=&quot;SamplesAspNet.SampleWebThreadInformation,webthreadinformation, Version=1.0.1782.29648, Culture=neutral, PublicKeyToken=b3283a2de7dd3f27, processorArchitecture=MSIL&quot; /&gt;  \n\n  &lt;/eventMappings&gt;  \n\n  &lt;rules&gt;  \n\n    &lt;add name=&quot;Custom Web Thread Info Event&quot;   \n      eventName=&quot;SampleWebThreadInformation&quot;   \n      provider=&quot;EventLogProvider&quot;  \n      profile=&quot;Custom&quot; /&gt;  \n\n  &lt;/rules&gt;  \n\n&lt;/healthMonitoring&gt;  \n</code></pre><pre><code class=\"lang-cs\" name=\"System.Web.Management.WebThreadInformation#1\">\nusing System;\nusing System.Text;\nusing System.Web;\nusing System.Web.Management;\n\n\nnamespace SamplesAspNet\n{\n    // Implements a custom WebErrorstEvent that uses the \n    // WebThreadInformation. \n    public class SampleWebThreadInformation :\n        WebErrorEvent\n    {\n        private StringBuilder eventInfo;\n\n        // Instantiate events identified \n        // only by their event code.\n        public SampleWebThreadInformation(\n            string msg, object eventSource,\n            int eventCode, Exception e)\n            :\n            base(msg, eventSource, eventCode, e)\n        {\n            // Perform custom initialization.\n            eventInfo = new StringBuilder();\n            eventInfo.Append(string.Format(\n            &quot;Event created at: {0}&quot;,\n            EventTime.ToString()));\n\n        }\n\n\n        // Raises the event.\n        public override void Raise()\n        {\n            // Perform custom processing. \n            eventInfo.Append(string.Format(\n                &quot;Event raised at: {0}&quot;,\n               EventTime.ToString()));\n            // Raise the event.\n            base.Raise();\n        }\n\n        // Get the impersonation mode.\n        public string GetThreadImpersonation()\n        {\n            return (string.Format(\n                &quot;Is impersonating: {0}&quot;,\n                ThreadInformation.IsImpersonating.ToString()));\n        }\n\n        // Get the stack trace.\n        public string GetThreadStackTrace()\n        {\n            return (string.Format(\n                &quot;Stack trace: {0}&quot;,\n                ThreadInformation.StackTrace));\n        }\n\n        // Get the account name.\n        public string GetThreadAccountName()\n        {\n            return (string.Format(\n                &quot;Request user host address: {0}&quot;,\n                ThreadInformation.ThreadAccountName));\n        }\n\n        // Get the task Id.\n        public string GetThreadId()\n        {\n            // Get the request principal.\n            return (string.Format(\n                &quot;Thread Id: {0}&quot;,\n                ThreadInformation.ThreadID.ToString()));\n        }\n\n\n        // Formats Web request event information.\n        public override void FormatCustomEventDetails(\n         WebEventFormatter formatter)\n        {\n\n            // Add custom data.\n\n            formatter.AppendLine(&quot;&quot;);\n            formatter.AppendLine(\n                &quot;Custom Thread Information:&quot;);\n\n            formatter.IndentationLevel += 1;\n\n            // Display the thread information obtained \n            formatter.AppendLine(GetThreadImpersonation());\n            formatter.AppendLine(GetThreadStackTrace());\n            formatter.AppendLine(GetThreadAccountName());\n            formatter.AppendLine(GetThreadId());\n            formatter.IndentationLevel -= 1;\n\n            formatter.AppendLine(eventInfo.ToString());\n\n        }\n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Web.Management.WebThreadInformation#1\">Imports System\nImports System.Text\nImports System.Web\nImports System.Web.Management\n\n\n\n&#39; Implements a custom WebErrorstEvent that uses the \n&#39; WebThreadInformation. \n\nPublic Class SampleWebThreadInformation\n   Inherits WebErrorEvent\n   Private eventInfo As StringBuilder\n   \n   \n   &#39; Instantiate events identified \n   &#39; only by their event code.\n    Public Sub New(ByVal msg As String, _\n    ByVal eventSource As Object, _\n    ByVal eventCode As Integer, ByVal e As Exception)\n        MyBase.New(msg, eventSource, eventCode, e)\n        &#39; Perform custom initialization.\n        eventInfo = New StringBuilder()\n        eventInfo.Append(String.Format(&quot;Event created at: {0}&quot;, EventTime.ToString()))\n    End Sub &#39;New\n   \n   \n   \n   &#39; Raises the event.\n   Public Overrides Sub Raise()\n      &#39; Perform custom processing. \n        eventInfo.Append(String.Format( _\n        &quot;Event raised at: {0}&quot;, EventTime.ToString()))\n      &#39; Raise the event.\n      MyBase.Raise()\n   End Sub &#39;Raise\n   \n   &#39; Get the impersonation mode.\n   Public Function GetThreadImpersonation() As String\n        Return String.Format( _\n        &quot;Is impersonating: {0}&quot;, _\n        ThreadInformation.IsImpersonating.ToString())\n   End Function &#39;GetThreadImpersonation\n   \n   &#39; Get the stack trace.\n   Public Function GetThreadStackTrace() As String\n        Return String.Format( _\n        &quot;Stack trace: {0}&quot;, _\n        ThreadInformation.StackTrace)\n   End Function &#39;GetThreadStackTrace\n   \n   &#39; Get the account name.\n   Public Function GetThreadAccountName() As String\n        Return String.Format( _\n        &quot;Request user host address: {0}&quot;, _\n        ThreadInformation.ThreadAccountName)\n   End Function &#39;GetThreadAccountName\n   \n   &#39; Get the task Id.\n   Public Function GetThreadId() As String\n      &#39; Get the request principal.\n        Return String.Format( _\n        &quot;Thread Id: {0}&quot;, _\n        ThreadInformation.ThreadID.ToString())\n   End Function &#39;GetThreadId\n   \n   &#39; Formats Web request event information.\n    Public Overrides Sub FormatCustomEventDetails( _\n    ByVal formatter As WebEventFormatter)\n\n        &#39; Add custom data.\n        formatter.AppendLine(&quot;&quot;)\n        formatter.AppendLine( _\n        &quot;Custom Thread Information:&quot;)\n\n        formatter.IndentationLevel += 1\n\n        &#39; Display the thread information obtained \n        formatter.AppendLine(GetThreadImpersonation())\n        formatter.AppendLine(GetThreadStackTrace())\n        formatter.AppendLine(GetThreadAccountName())\n        formatter.AppendLine(GetThreadId())\n        formatter.IndentationLevel -= 1\n\n        formatter.AppendLine(eventInfo.ToString())\n    End Sub &#39;FormatCustomEventDetails \n\nEnd Class &#39;SampleWebThreadInformation\n\n\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>ASP.NET health monitoring allows production and operations staff to manage deployed Web applications. The <a class=\"xref\" href=\"system.web.management\" data-linktype=\"relative-path\">System.Web.Management</a> namespace contains the health-event types responsible for packaging application health-status data and the provider types responsible for processing this data. It also contains supporting types that help during the management of health events.  </p>\n<p> Instances of the WebThreadInformation class contain information that is obtained using either the <a class=\"xref\" href=\"system.web.management.weberrorevent\" data-linktype=\"relative-path\">WebErrorEvent</a> type or the <a class=\"xref\" href=\"system.web.management.webrequesterrorevent\" data-linktype=\"relative-path\">WebRequestErrorEvent</a> type.  </p>\n<p> Your application needs the appropriate permissions to access protected information provided by this type.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> In most cases you will be able to use the ASP.NET health-monitoring types as implemented, and you will control the health-monitoring system by specifying values in the <code>healthMonitoring</code> configuration section. You can also derive from the health-monitoring types to create your own custom events and providers. For an example of creating a custom event class, see the example provided in this topic.</p>\n</div>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Web_Management_WebThreadInformation_IsImpersonating_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_Management_WebThreadInformation_IsImpersonating\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsImpersonating</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the current thread-impersonation mode.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsImpersonating { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the thread is executing in impersonation mode; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Web_Management_WebThreadInformation_StackTrace_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_Management_WebThreadInformation_StackTrace\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StackTrace</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the current thread-managed stack trace.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string StackTrace { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The thread-managed stack trace.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Web_Management_WebThreadInformation_ThreadAccountName_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_Management_WebThreadInformation_ThreadAccountName\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ThreadAccountName</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the thread account name.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string ThreadAccountName { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The thread account name.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The account returned by this property might be arbitrary if the thread is executing in impersonation mode.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Web_Management_WebThreadInformation_ThreadID_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_Management_WebThreadInformation_ThreadID\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ThreadID</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the current thread identifier.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int ThreadID { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The current thread identifier.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Even if managed threads might not have direct mapping to the OS threads, for debugging purposes, it is always useful to isolate a specific thread where problems might exist.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Web_Management_WebThreadInformation_FormatToString_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_Management_WebThreadInformation_FormatToString_System_Web_Management_WebEventFormatter_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">FormatToString(WebEventFormatter)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Formats thread-related information.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void FormatToString (System.Web.Management.WebEventFormatter formatter);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>formatter</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.management.webeventformatter\" data-linktype=\"relative-path\">WebEventFormatter</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.web.management.webeventformatter\" data-linktype=\"relative-path\">WebEventFormatter</a> that contains the tab and indentation settings used to format the Web health event information.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The FormatToString method provides a uniform format for event information, which is useful if the event data must be logged and later presented to the user. It is called internally when the provider invokes one of the <a class=\"xref\" href=\"system.web.management.webbaseevent#System_Web_Management_WebBaseEvent_ToString_\" data-linktype=\"relative-path\">ToString</a> methods.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.Management.WebThreadInformation.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.Management.WebThreadInformation\">\r\n<meta name=\"APIName\" content=\"System.Web.Management.WebThreadInformation.FormatToString\">\r\n<meta name=\"APIName\" content=\"System.Web.Management.WebThreadInformation.IsImpersonating\">\r\n<meta name=\"APIName\" content=\"System.Web.Management.WebThreadInformation.StackTrace\">\r\n<meta name=\"APIName\" content=\"System.Web.Management.WebThreadInformation.ThreadAccountName\">\r\n<meta name=\"APIName\" content=\"System.Web.Management.WebThreadInformation.ThreadID\">\r\n<meta name=\"APILocation\" content=\"System.Web.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"e419fb40-53a7-12f4-b6fb-31c4580f4a72\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides information about the state of a thread in an ASP.NET process.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.web.management/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.Management.WebThreadInformation\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.Management.WebThreadInformation.yml","open_to_public_contributors":false,"api_name":["System.Web.Management.WebThreadInformation","System.Web.Management.WebThreadInformation.FormatToString","System.Web.Management.WebThreadInformation.IsImpersonating","System.Web.Management.WebThreadInformation.StackTrace","System.Web.Management.WebThreadInformation.ThreadAccountName","System.Web.Management.WebThreadInformation.ThreadID"],"api_location":["System.Web.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.Management.WebThreadInformation","System::Web::Management::WebThreadInformation","System.Web.Management.WebThreadInformation.FormatToString","System::Web::Management::WebThreadInformation::FormatToString","System.Web.Management.WebThreadInformation.IsImpersonating","System::Web::Management::WebThreadInformation::IsImpersonating","System.Web.Management.WebThreadInformation.StackTrace","System::Web::Management::WebThreadInformation::StackTrace","System.Web.Management.WebThreadInformation.ThreadAccountName","System::Web::Management::WebThreadInformation::ThreadAccountName","System.Web.Management.WebThreadInformation.ThreadID","System::Web::Management::WebThreadInformation::ThreadID"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"e419fb40-53a7-12f4-b6fb-31c4580f4a72","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Web.Management/WebThreadInformation.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"WebThreadInformation class | Microsoft Docs","_op_ogTitle":"WebThreadInformation class","description":"Provides information about the state of a thread in an ASP.NET process.\n","toc_asset_id":"api/_splitted/System.Web.Management/toc.json","toc_rel":"_splitted/System.Web.Management/toc.json","source_url":"","ms.assetid":"System.Web.Management.WebThreadInformation","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.web.management.webthreadinformation","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.web.management.webthreadinformation","fileRelativePath":"api/System.Web.Management.WebThreadInformation.html"},"themesRelativePathToOutputRoot":"_themes/"}