{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ConfigurationValidatorAttribute</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Serves as the base class for the <a class=\"xref\" href=\"system.configuration\" data-linktype=\"relative-path\">System.Configuration</a> validator attribute types.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.AttributeUsage(System.AttributeTargets.Property)]\npublic class ConfigurationValidatorAttribute : Attribute</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a></span></div><span class=\"lang-csharp\">ConfigurationValidatorAttribute</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_Assembly_System_Type_\" data-linktype=\"relative-path\">GetCustomAttribute(Assembly, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_Assembly_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttribute(Assembly, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_MemberInfo_System_Type_\" data-linktype=\"relative-path\">GetCustomAttribute(MemberInfo, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_MemberInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttribute(MemberInfo, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_Module_System_Type_\" data-linktype=\"relative-path\">GetCustomAttribute(Module, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_Module_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttribute(Module, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_ParameterInfo_System_Type_\" data-linktype=\"relative-path\">GetCustomAttribute(ParameterInfo, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_ParameterInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttribute(ParameterInfo, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_\" data-linktype=\"relative-path\">GetCustomAttributes(Assembly)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Assembly, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_System_Type_\" data-linktype=\"relative-path\">GetCustomAttributes(Assembly, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Assembly, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_\" data-linktype=\"relative-path\">GetCustomAttributes(MemberInfo)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(MemberInfo, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_System_Type_\" data-linktype=\"relative-path\">GetCustomAttributes(MemberInfo, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(MemberInfo, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Module_\" data-linktype=\"relative-path\">GetCustomAttributes(Module)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Module_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Module, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Module_System_Type_\" data-linktype=\"relative-path\">GetCustomAttributes(Module, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Module_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Module, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_\" data-linktype=\"relative-path\">GetCustomAttributes(ParameterInfo)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(ParameterInfo, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_System_Type_\" data-linktype=\"relative-path\">GetCustomAttributes(ParameterInfo, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(ParameterInfo, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefaultAttribute\" data-linktype=\"relative-path\">IsDefaultAttribute()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_Assembly_System_Type_\" data-linktype=\"relative-path\">IsDefined(Assembly, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_Assembly_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(Assembly, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_MemberInfo_System_Type_\" data-linktype=\"relative-path\">IsDefined(MemberInfo, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_MemberInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(MemberInfo, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_Module_System_Type_\" data-linktype=\"relative-path\">IsDefined(Module, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_Module_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(Module, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_ParameterInfo_System_Type_\" data-linktype=\"relative-path\">IsDefined(ParameterInfo, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_ParameterInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(ParameterInfo, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_Match_System_Object_\" data-linktype=\"relative-path\">Match(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_System_Runtime_InteropServices__Attribute_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_System_Runtime_InteropServices__Attribute_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_System_Runtime_InteropServices__Attribute_GetTypeInfoCount_System_UInt32__\" data-linktype=\"relative-path\">_Attribute.GetTypeInfoCount(UInt32)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_System_Runtime_InteropServices__Attribute_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"relative-path\">_Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_TypeId\" data-linktype=\"relative-path\">TypeId</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code examples demonstrate how to create two custom validators using the ConfigurationValidatorAttribute type. The first example performs validation using hard-coded parameters; the second example performs validation using the parameters assigned to it at the time it is applied to the related section property. This code example also contains three supporting files. The first file contains the custom section that uses the validators described above, the second file contains a custom converter type, and the third file contains the console application that builds and uses the custom validators and the section that contains them.  </p>\n<p> The following code example shows how to create a fixed validator with hard-coded parameters.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Configuration.ConfigValidatorAttribute#21\">using System;\nusing System.Collections.Generic;\nusing System.Collections;\nusing System.Text;\nusing System.Configuration;\n\nnamespace Samples.AspNet\n{\n    // Show how to create a custom fixed \n    // validator. That is a validator whose\n    // validation parameters are hard code in this\n    // type.\n    public class FixedValidator :\n            ConfigurationValidatorBase\n    {\n       \n        public override bool CanValidate(Type type)\n        {\n            return type == typeof(Automobile);\n        }\n\n        public override void Validate(object value)\n        {\n\n            ArrayList make = new ArrayList();\n\n            make.Add(&quot;Ferrari&quot;);\n            make.Add(&quot;Porsche&quot;);\n            make.Add(&quot;Lamborghini&quot;);\n\n            int minYear = 2004;\n            long maxMiles = 100;\n            string color = &quot;red&quot;;\n            \n            Automobile car = (Automobile)value;\n\n\n            try\n            {\n                if (!make.Contains(car.Make))\n                {\n                    throw new ConfigurationErrorsException(\n                       &quot;My dream car is not made by &quot; + car.Make);\n                }\n\n                // Make sure the year is valid \n                if (car.Year &lt; minYear)\n                {\n\n                    throw new ConfigurationErrorsException(\n                       &quot;My dream car cannot be older than &quot; + minYear.ToString());\n\n                }\n\n                // Make sure the car can still run on its own\n                if (car.Miles &gt; maxMiles)\n                {\n                  throw new ConfigurationErrorsException(\n                        &quot;My dream car drive odometer cannot read more than &quot; + \n                        maxMiles.ToString() + &quot; miles&quot;);\n  \n                }\n\n                // Validate color\n                if (car.Color.ToLower() != color)\n                {\n                    throw new ConfigurationErrorsException(\n                        &quot;My dream car can oly be &quot; + color);\n                }\n\n            }\n            catch (ConfigurationErrorsException err)\n            {\n                Console.WriteLine(err.ToString());\n            }\n        }\n\n    }\n\n  }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Configuration.ConfigValidatorAttribute#21\">Imports System\nImports System.Collections.Generic\nImports System.Collections\nImports System.Text\nImports System.Configuration\n\n\n&#39; Show how to create a custom fixed \n&#39; validator. That is a validator whose\n&#39; validation parameters are hard code in this\n&#39; type.\n\nPublic Class FixedValidator\n    Inherits ConfigurationValidatorBase\n    \n    \n    Public Overrides Function CanValidate( _\n    ByVal type As Type) As Boolean\n        Return type Is GetType(Automobile)\n\n    End Function &#39;CanValidate\n    \n    \n    Public Overrides Sub Validate(ByVal value _\n    As Object)\n\n        Dim make As New ArrayList()\n\n        make.Add(&quot;Ferrari&quot;)\n        make.Add(&quot;Porsche&quot;)\n        make.Add(&quot;Lamborghini&quot;)\n\n        Dim minYear As Integer = 2004\n        Dim maxMiles As Long = 100\n        Dim color As String = &quot;red&quot;\n\n        Dim car As Automobile = CType(value, Automobile)\n\n\n        Try\n            If Not make.Contains(car.Make) Then\n                Throw New ConfigurationErrorsException( _\n                &quot;My dream car is not made by &quot; + car.Make)\n            End If\n\n            &#39; Make sure the year is valid \n            If car.Year &lt; minYear Then\n                Throw New ConfigurationErrorsException( _\n                &quot;My dream car cannot be older than &quot; + _\n                minYear.ToString())\n            End If\n\n\n            &#39; Make sure the car can still run on its own\n            If car.Miles &gt; maxMiles Then\n                Throw New ConfigurationErrorsException( _\n                &quot;My dream car drive odometer cannot read more than &quot; + _\n                maxMiles.ToString() + &quot; miles&quot;)\n            End If\n\n\n            &#39; Validate color\n            If car.Color.ToLower() &lt;&gt; color Then\n                Throw New ConfigurationErrorsException( _\n                &quot;My dream car can oly be &quot; + color)\n            End If\n\n        Catch err As ConfigurationErrorsException\n            Console.WriteLine(err.ToString())\n        End Try\n\n    End Sub &#39;Validate\nEnd Class &#39;FixedValidator \n</code></pre><p> The following code example shows how to create a programmable validator.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Configuration.ConfigValidatorAttribute#31\">\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Configuration;\n\nnamespace Samples.AspNet\n{\n\n    // Show how to create a custom programmable \n    // validator. That is a validator whose\n    // validation parameters can be passed when the\n    // validator is applied to a property.\n    public class ProgrammableValidator : \n        ConfigurationValidatorBase\n    {\n        private string pmake;\n        private string pcolor;\n        private long pmaxMiles;\n        private int pminYear;\n\n        public ProgrammableValidator(string make, string color, \n            long maxMiles, int minYear)\n        {\n            pmake = make;\n            pcolor = color;\n            pminYear = minYear;\n            pmaxMiles = maxMiles;\n        }\n\n        public override bool CanValidate(Type type)\n        {\n            return type == typeof(Automobile);\n        }\n\n        public override void Validate(object value)\n        {\n\n            Automobile car = (Automobile)value;\n\n            try\n            {\n\n                // Validate make\n                if (car.Make != pmake)\n                {\n                    throw new ConfigurationErrorsException(\n                       &quot;I do not by cars made by &quot; + car.Make);\n                }\n\n                // Validate color\n                if (car.Color != pcolor)\n                {\n                    throw new ConfigurationErrorsException(\n                        &quot;My commute car must be &quot; + pcolor);\n                }\n\n                // Validate year\n                if (car.Year &lt; pminYear)\n                {\n                    throw new ConfigurationErrorsException(\n                        &quot;It&#39;s about time you get a new car.&quot;);\n                }\n\n                // Validate miles\n                if (car.Miles &gt; pmaxMiles)\n                {\n                    throw new ConfigurationErrorsException(\n                        &quot;Don&#39;t take too long trips with that car.&quot;);\n                }\n\n            }\n            catch (ConfigurationErrorsException err)\n            {\n                Console.WriteLine(err.ToString());\n            }\n        }\n    }\n\n\n    public class ProgrammableValidatorAttribute : \n        ConfigurationValidatorAttribute\n    {\n        private string pmake;\n        private string pcolor;\n        private int pminYear;\n        private long pmaxMiles;\n\n\n        public string Make\n        {\n            get { return pmake; }\n            set { pmake = value; }\n        }\n\n        public string Color\n        {\n            get { return pcolor; }\n            set { pcolor = value; }\n        }\n\n        public int MinYear\n        {\n            get { return pminYear; }\n            set { pminYear = value; }\n        }\n        public long MaxMiles\n        {\n            get { return pmaxMiles; }\n            set { pmaxMiles = value; }\n        }\n\n        public ProgrammableValidatorAttribute(string make, string color,\n            long miles, int year)\n        {\n            pmake = make;\n            pcolor = color;\n            pminYear = year;\n            pmaxMiles = miles;\n            \n        }\n        \n\n        public override ConfigurationValidatorBase ValidatorInstance\n        {\n            get\n            {\n                return new ProgrammableValidator(pmake, pcolor, pmaxMiles, pminYear);\n            }\n        }\n    }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Configuration.ConfigValidatorAttribute#31\">Imports System\nImports System.Collections.Generic\nImports System.Text\nImports System.Configuration\n\n\n\n&#39; Show how to create a custom programmable \n&#39; validator. That is a validator whose\n&#39; validation parameters can be passed when the\n&#39; validator is applied to a property.\n\nPublic Class ProgrammableValidator\n    Inherits ConfigurationValidatorBase\n    Private pmake As String\n    Private pcolor As String\n    Private pmaxMiles As Long\n    Private pminYear As Integer\n    \n    \n    Public Sub New(ByVal make As String, ByVal color As String, ByVal maxMiles As Long, ByVal minYear As Integer) \n        pmake = make\n        pcolor = color\n        pminYear = minYear\n        pmaxMiles = maxMiles\n    \n    End Sub &#39;New\n    \n    \n    Public Overrides Function CanValidate( _\n    ByVal type As Type) As Boolean\n        Return type Is GetType(Automobile)\n\n    End Function &#39;CanValidate\n    \n    \n    Public Overrides Sub Validate(ByVal value As Object) \n        \n        Dim car As Automobile = CType(value, Automobile)\n        \n        Try\n            \n            &#39; Validate make\n            If car.Make &lt;&gt; pmake Then\n                Throw New ConfigurationErrorsException( _\n                &quot;I do not by cars made by &quot; + car.Make)\n            End If\n            \n            &#39; Validate color\n            If car.Color &lt;&gt; pcolor Then\n                Throw New ConfigurationErrorsException( _\n                &quot;My commute car must be &quot; + pcolor)\n            End If\n            \n            &#39; Validate year\n            If car.Year &lt; pminYear Then\n                Throw New ConfigurationErrorsException( _\n                &quot;It&#39;s about time you get a new car.&quot;)\n            End If\n            \n            &#39; Validate miles\n            If car.Miles &gt; pmaxMiles Then\n                Throw New ConfigurationErrorsException( _\n                &quot;Don&#39;t take too long trips with that car.&quot;)\n            End If\n        \n        Catch err As ConfigurationErrorsException\n            Console.WriteLine(err.ToString())\n        End Try\n    \n    End Sub &#39;Validate\nEnd Class &#39;ProgrammableValidator\n\n\n\nPublic Class ProgrammableValidatorAttribute\n    Inherits ConfigurationValidatorAttribute\n    Private pmake As String\n    Private pcolor As String\n    Private pminYear As Integer\n    Private pmaxMiles As Long\n    \n    \n    \n    Public Property Make() As String \n        Get\n            Return pmake\n        End Get\n        Set\n            pmake = value\n        End Set\n    End Property \n    \n    Public Property Color() As String \n        Get\n            Return pcolor\n        End Get\n        Set\n            pcolor = value\n        End Set\n    End Property \n    \n    Public Property MinYear() As Integer \n        Get\n            Return pminYear\n        End Get\n        Set\n            pminYear = value\n        End Set\n    End Property\n    \n    Public Property MaxMiles() As Long \n        Get\n            Return pmaxMiles\n        End Get\n        Set\n            pmaxMiles = value\n        End Set\n    End Property\n     \n    Public Sub New(ByVal make As String, _\n    ByVal color As String, ByVal miles As Long, _\n    ByVal year As Integer)\n        pmake = make\n        pcolor = color\n        pminYear = year\n        pmaxMiles = miles\n\n    End Sub &#39;New \n    \n\n    Public Overrides ReadOnly Property ValidatorInstance() _\n    As ConfigurationValidatorBase\n        Get\n            Return New ProgrammableValidator(pmake, _\n            pcolor, pmaxMiles, pminYear)\n        End Get\n    End Property\nEnd Class &#39;ProgrammableValidatorAttribute\n</code></pre><p> The following code example shows how to create a custom section using the previous validators.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Configuration.ConfigValidatorAttribute#11\">using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Configuration;\nusing System.ComponentModel;\nusing System.Globalization;\n\nnamespace Samples.AspNet\n{\n    // Define the distinctive \n    // charecteristics of a car.\n    public sealed class Automobile\n    {\n        public enum specification\n        {\n            make=0, color=1, miles=2, year=3, picture=4\n        };\n\n        public string Make;\n        public string Color;\n        public int Year;\n        public long Miles;\n        public string Picture;\n    }\n\n    // Define a custom section to select a car.\n    // This section contains two properties one\n    // to define a commute car the other \n    // to define a dream car.\n    // This generates a configuration section such as:\n    // &lt;Cars commute=&quot;Make:AlfaRomeo Color:Blue Miles:10000 Year:2002&quot;\n    // dream=&quot;Make:Ferrari Color:Red Miles:10 Year:2005&quot; /&gt;\n    public sealed class SelectCar :\n        ConfigurationSection\n    {\n        // Define your commute car.\n        // The ProgrammableValidatorAttribute allows you to define the \n        // chracteristics of your commute car by changing\n        // the values you pass to the next.\n        // See the ProgrammableValidatorAttribute for details.\n        [ProgrammableValidator(&quot;AlfaRomeo&quot;, &quot;Blue&quot;, 10000, 2002)]\n        \n        // The AutomobileConverter converts between the Automobile\n        // object and its related configuration commute attribute \n        // string value. \n        // Refer to AutomobileConverter for details.\n        [TypeConverter(typeof(AutomobileConverter))]\n        \n        // Define the name of the configuration attribute to associate\n        // with this property. Enter the default values.\n        // Remember these default values must reflect the parameters\n        // you entered in the ProgrammableValidator above.\n        [ConfigurationProperty(&quot;commute&quot;, DefaultValue = &quot;Make:AlfaRomeo Color:Blue Miles:10000 Year:2002&quot;)]\n        public Automobile Commute\n        {\n            get\n            {\n                return (Automobile)this[&quot;commute&quot;];\n            }\n            set\n            {\n                this[&quot;commute&quot;] = value;\n            }\n\n        }\n\n        // Apply the FixedValidatorAttribute. Here your choice \n        // (dream) is predetermined by the values contained in the\n        // FixedValidatorAttribute. Being a dream, you would think \n        // otherwise but that&#39;s not the case.\n        // See the FixedValidatorAttribute to choose your dream.\n         [ConfigurationValidatorAttribute(\n          typeof(FixedValidator))]\n\n        // The AutomobileConverter converts between the Automobile\n        // object and its related configuration dream attribute \n        // string value. \n        // Refer to AutomobileConverter for details.\n        [TypeConverter(typeof(AutomobileConverter))]\n        \n        [ConfigurationProperty(&quot;dream&quot;, DefaultValue = &quot;Make:Ferrari Color:Red Miles:10 Year:2005&quot;)]\n        public Automobile Dream\n        {\n            get\n            {\n                return (Automobile)this[&quot;dream&quot;];\n            }\n            set\n            {\n                this[&quot;dream&quot;] = value;\n            }\n\n        }\n\n        public SelectCar()\n        {\n            // Here you put your \n            // initializations, if necessary.\n        }\n    }    \n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Configuration.ConfigValidatorAttribute#11\">Imports System\nImports System.Collections.Generic\nImports System.Text\nImports System.Configuration\nImports System.ComponentModel\nImports System.Globalization\n\n\n&#39; Define the distinctive \n&#39; charecteristics of a car.\n\nNotInheritable Public Class Automobile\n    \n    Public Enum specification\n        make = 0\n        color = 1\n        miles = 2\n        year = 3\n        picture = 4\n    End Enum &#39;specification\n\n    Public Make As String\n    Public Color As String\n    Public Year As Integer\n    Public Miles As Long\n    Public Picture As String\nEnd Class &#39;Automobile\n\n&#39; Define a custom section to select a car.\n&#39; This section contains two properties one\n&#39; to define a commute car the other \n&#39; to define a dream car.\n&#39; This generates a configuration section such as:\n&#39; &lt;Cars commute=&quot;Make:AlfaRomeo Color:Blue Miles:10000 Year:2002&quot;\n&#39; dream=&quot;Make:Ferrari Color:Red Miles:10 Year:2005&quot; /&gt;\n\nNotInheritable Public Class SelectCar\n    Inherits ConfigurationSection\n    &#39; Define your commute car.\n    &#39; The ProgrammableValidatorAttribute allows you to define the \n    &#39; chracteristics of your commute car by changing\n    &#39; the values you pass to the next.\n    &#39; See the ProgrammableValidatorAttribute for details.\n    \n    &lt;ProgrammableValidator(&quot;AlfaRomeo&quot;, &quot;Blue&quot;, 10000, 2002), _\n    TypeConverter(GetType(AutomobileConverter)), _\n    ConfigurationProperty(&quot;commute&quot;, _\n    DefaultValue:=&quot;Make:AlfaRomeo Color:Blue Miles:10000 Year:2002&quot;)&gt; _\n    Public Property Commute() As Automobile\n\n        &#39; The AutomobileConverter converts between the Automobile\n        &#39; object and its related configuration commute attribute \n        &#39; string value. \n        &#39; Refer to AutomobileConverter for details.\n\n        &#39; Define the name of the configuration attribute to associate\n        &#39; with this property. Enter the default values.\n        &#39; Remember these default values must reflect the parameters\n        &#39; you entered in the ProgrammableValidator above.\n        Get\n            Return CType(Me(&quot;commute&quot;), Automobile)\n        End Get\n        Set(ByVal value As Automobile)\n            Me(&quot;commute&quot;) = value\n        End Set\n    End Property\n    \n    &#39; Apply the FixedValidatorAttribute. Here your choice \n    &#39; (dream) is predetermined by the values contained in the\n    &#39; FixedValidatorAttribute. Being a dream, you would think \n    &#39; otherwise but that&#39;s not the case.\n    &#39; See the FixedValidatorAttribute to choose your dream.\n    \n    &lt;ConfigurationValidatorAttribute(GetType(FixedValidator)), _\n    TypeConverter(GetType(AutomobileConverter)), _\n    ConfigurationProperty(&quot;dream&quot;, _\n    DefaultValue:=&quot;Make:Ferrari Color:Red Miles:10 Year:2005&quot;)&gt; _\n    Public Property Dream() As Automobile\n\n        &#39; The AutomobileConverter converts between the Automobile\n        &#39; object and its related configuration dream attribute \n        &#39; string value. \n        &#39; Refer to AutomobileConverter for details.\n\n        Get\n            Return CType(Me(&quot;dream&quot;), Automobile)\n        End Get\n        Set(ByVal value As Automobile)\n            Me(&quot;dream&quot;) = value\n        End Set\n    End Property\n     \n    \n    Public Sub New() \n    \n    End Sub &#39;New\nEnd Class &#39;SelectCar &#39; Here you put your \n&#39; initializations, if necessary.\n</code></pre><p> The following code example shows how to create a custom converter.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Configuration.ConfigValidatorAttribute#1\">using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Configuration;\nusing System.ComponentModel;\nusing System.Globalization;\n\nnamespace Samples.AspNet\n{\n    // The AutomobileConverter converts between the Automobile\n    // object and its related configuration commute and\n    // dream attribute string values. \n    public sealed class AutomobileConverter :\n    ConfigurationConverterBase\n    {\n       \n        internal bool ValidateType(object value,\n            Type expected)\n        {\n            bool result;\n\n            if ((value != null) &amp;&amp;\n                (value.GetType() != expected))\n                result = false;\n            else\n                result = true;\n\n            return result;\n        }\n\n\n\n        public override bool CanConvertTo(\n            ITypeDescriptorContext ctx, Type type)\n        {\n            return (type == typeof(Automobile));\n        }\n\n\n        public override bool CanConvertFrom(\n            ITypeDescriptorContext ctx, Type type)\n        {\n            return (type == typeof(Automobile));\n        }\n\n\n\n        public override object ConvertTo(\n            ITypeDescriptorContext ctx, CultureInfo ci,\n            object value, Type type)\n        {\n            string data;\n\n            if (ValidateType(value, typeof(Automobile)))\n            {\n                string make = (string)(((Automobile)value).Make);\n                string color = (string)(((Automobile)value).Color);\n                string miles = (string)(((Automobile)value).Miles.ToString());\n                string year = (string)(((Automobile)value).Year.ToString());\n\n                data = &quot;Make:&quot; + make + &quot; Color:&quot; + color + \n                        &quot; Miles:&quot; + miles + &quot; Year:&quot; + year;\n\n            }\n            else\n                data = &quot;Invalid type&quot;;\n\n            return data;\n        }\n\n        public override object ConvertFrom(\n            ITypeDescriptorContext ctx, CultureInfo ci, object data)\n        {\n            Automobile selectedCar = \n                new Automobile();\n \n            string carInfo  = (string)data;\n\n            string[] carSpecs = carInfo.Split(new Char[] { &#39; &#39; });\n\n            // selectedCar.Make = carSpecs[0].ToString();\n            // selectedCar.Make = carSpecs[0].ToString();\n\n            string make = \n                carSpecs[(int)Automobile.specification.make].ToString();\n            string color =\n                carSpecs[(int)Automobile.specification.color].ToString();\n            string miles =\n                carSpecs[(int)Automobile.specification.miles].ToString();\n            string year =\n                carSpecs[(int)Automobile.specification.year].ToString();\n            \n           \n            selectedCar.Make = \n                make.Substring(make.IndexOf(&quot;:&quot;)+1);\n            selectedCar.Color = \n                color.Substring(color.IndexOf(&quot;:&quot;) + 1);\n            selectedCar.Miles = \n                Convert.ToInt32(miles.Substring(miles.IndexOf(&quot;:&quot;) + 1));\n            selectedCar.Year = \n                Convert.ToInt32(year.Substring(year.IndexOf(&quot;:&quot;) + 1));\n            \n            return selectedCar;\n        }\n\n\n    }\n\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Configuration.ConfigValidatorAttribute#1\">Imports System\nImports System.Collections.Generic\nImports System.Text\nImports System.Configuration\nImports System.ComponentModel\nImports System.Globalization\n\n\n&#39; The AutomobileConverter converts between the Automobile\n&#39; object and its related configuration commute and\n&#39; dream attribute string values. \n\nNotInheritable Public Class AutomobileConverter\n    Inherits ConfigurationConverterBase\n    \n    \n    Friend Function ValidateType(ByVal value As Object, _\n    ByVal expected As Type) As Boolean\n        Dim result As Boolean\n\n        If Not (value Is Nothing) _\n        AndAlso value.GetType() IsNot expected Then\n            result = False\n        Else\n            result = True\n        End If\n        Return result\n\n    End Function &#39;ValidateType\n    \n    \n    Public Overrides Function CanConvertTo(ByVal ctx _\n    As ITypeDescriptorContext, ByVal type As Type) As Boolean\n        Return type Is GetType(Automobile)\n\n    End Function &#39;CanConvertTo\n    \n    \n    \n    Public Overrides Function CanConvertFrom(ByVal ctx _\n    As ITypeDescriptorContext, ByVal type As Type) As Boolean\n        Return type Is GetType(Automobile)\n\n    End Function &#39;CanConvertFrom\n    \n    \n    Public Overrides Function ConvertTo(ByVal ctx _\n    As ITypeDescriptorContext, ByVal ci As CultureInfo, _\n    ByVal value As Object, ByVal type As Type) As Object\n        Dim data As String\n\n        If ValidateType(value, GetType(Automobile)) Then\n            Dim make As String = _\n            CStr(CType(value, Automobile).Make)\n            Dim color As String = _\n            CStr(CType(value, Automobile).Color)\n            Dim miles As String = _\n            CStr(CType(value, Automobile).Miles.ToString())\n            Dim year As String = _\n            CStr(CType(value, Automobile).Year.ToString())\n\n            data = &quot;Make:&quot; + make + &quot; Color:&quot; + color + _\n            &quot; Miles:&quot; + miles + &quot; Year:&quot; + year\n\n        Else\n            data = &quot;Invalid type&quot;\n        End If\n        Return data\n\n    End Function &#39;ConvertTo\n    \n    \n    Public Overrides Function ConvertFrom(ByVal ctx _\n    As ITypeDescriptorContext, ByVal ci As CultureInfo, _\n    ByVal data As Object) As Object\n        Dim selectedCar As New Automobile()\n\n        Dim carInfo As String = CStr(data)\n\n        Dim carSpecs As String() = carInfo.Split(New [Char]() {&quot; &quot;c})\n\n        &#39; selectedCar.Make = carSpecs[0].ToString();\n        &#39; selectedCar.Make = carSpecs[0].ToString();\n        Dim make As String = _\n        carSpecs(Fix(Automobile.specification.make)).ToString()\n        Dim color As String = _\n        carSpecs(Fix(Automobile.specification.color)).ToString()\n        Dim miles As String = _\n        carSpecs(Fix(Automobile.specification.miles)).ToString()\n        Dim year As String = _\n        carSpecs(Fix(Automobile.specification.year)).ToString()\n\n\n        selectedCar.Make = _\n        make.Substring(make.IndexOf(&quot;:&quot;) + 1)\n        selectedCar.Color = _\n        color.Substring(color.IndexOf(&quot;:&quot;) + 1)\n        selectedCar.Miles = _\n        Convert.ToInt32(miles.Substring(miles.IndexOf(&quot;:&quot;) + 1))\n        selectedCar.Year = _\n        Convert.ToInt32(year.Substring(year.IndexOf(&quot;:&quot;) + 1))\n\n        Return selectedCar\n\n    End Function &#39;ConvertFrom\nEnd Class &#39;AutomobileConverter \n</code></pre><p> The following code example shows how to create the console application that builds and uses the custom validators and their containing section.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Configuration.ConfigValidatorAttribute#41\">\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Configuration;\n\nnamespace Samples.AspNet\n{\n\n    class TestingConfigValidatorAttribute\n    {\n        static TestingConfigValidatorAttribute()\n        {\n            try\n            {\n\n                SelectCar car;\n\n                // Get the current configuration file.\n                System.Configuration.Configuration config =\n                    ConfigurationManager.OpenExeConfiguration(\n                    ConfigurationUserLevel.None);\n\n                // Create the section entry for the selected car.\n                if (config.Sections[&quot;Cars&quot;] == null)\n                {\n                    \n                    car = new SelectCar();\n                    \n                    config.Sections.Add(&quot;Cars&quot;, car);\n                    \n                    car.SectionInformation.ForceSave = true;\n                    config.Save(ConfigurationSaveMode.Full);\n\n                }\n\n            }\n            catch (ConfigurationErrorsException err)\n            {\n                Console.WriteLine(err.ToString());\n            }\n        }\n\n      \n        private static void GetCars()\n        {\n\n            try\n            {\n                // Get the current configuration file.\n                System.Configuration.Configuration config =\n                    ConfigurationManager.OpenExeConfiguration(\n                    ConfigurationUserLevel.None);\n\n                // Get the Cars section.\n                SelectCar cars =\n                    config.GetSection(&quot;Cars&quot;) as SelectCar;\n\n                Console.WriteLine(&quot;Dream Make: {0} Color: {1} Miles: {2} Year: {3}&quot;,\n                    cars.Dream.Make, cars.Dream.Color,\n                    cars.Dream.Miles, cars.Dream.Year);\n\n                Console.WriteLine(&quot;Commute Make: {0} Color: {1} Miles: {2} Year: {3}&quot;,\n                    cars.Commute.Make, cars.Commute.Color,\n                    cars.Commute.Miles, cars.Commute.Year);\n\n            }\n            catch (ConfigurationErrorsException err)\n            {\n                Console.WriteLine(err.ToString());\n            }\n        }\n\n\n        private static void NotAllowedCars()\n        {\n\n            try\n            {\n                // Get the current configuration file.\n                System.Configuration.Configuration config =\n                    ConfigurationManager.OpenExeConfiguration(\n                    ConfigurationUserLevel.None);\n\n                Automobile dreamCar = new Automobile();\n                dreamCar.Color = &quot;Red&quot;;\n                dreamCar.Make = &quot;BMW&quot;;\n                dreamCar.Miles = 10;\n                dreamCar.Year = 2005;\n\n                Automobile commuteCar = new Automobile();\n                commuteCar.Color = &quot;Blue&quot;;\n                commuteCar.Make = &quot;Yugo&quot;;\n                commuteCar.Miles = 10;\n                commuteCar.Year = 1990;\n\n                // Get the Cars section.\n                SelectCar cars =\n                    config.GetSection(&quot;Cars&quot;) as SelectCar;\n\n                cars.Dream = dreamCar;\n                cars.Commute = commuteCar;\n\n            }\n            catch (ConfigurationErrorsException err)\n            {\n                Console.WriteLine(err.ToString());\n            }\n        }\n\n        static void Main(string[] args)\n        {\n            GetCars();\n            NotAllowedCars();\n    \n        }\n\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Configuration.ConfigValidatorAttribute#41\">Imports System\nImports System.Collections.Generic\nImports System.Text\nImports System.Configuration\n\n\n\n\nClass TestingConfigValidatorAttribute\n    \n    Shared Sub New() \n        Try\n            \n            Dim car As SelectCar\n            \n            &#39; Get the current configuration file.\n            Dim config As System.Configuration.Configuration = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None)\n            \n            &#39; Create the section entry for the selected car.\n            If config.Sections(&quot;Cars&quot;) Is Nothing Then\n                \n                car = New SelectCar()\n                \n                config.Sections.Add(&quot;Cars&quot;, car)\n                \n                car.SectionInformation.ForceSave = True\n                config.Save(ConfigurationSaveMode.Full)\n            End If \n        \n        Catch err As ConfigurationErrorsException\n            Console.WriteLine(err.ToString())\n        End Try\n    \n    End Sub &#39;New\n    \n    \n    \n    Private Shared Sub GetCars() \n        \n        Try\n            &#39; Get the current configuration file.\n            Dim config As System.Configuration.Configuration = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None)\n            \n            &#39; Get the Cars section.\n            Dim cars As SelectCar = config.GetSection(&quot;Cars&quot;)\n            \n            Console.WriteLine(&quot;Dream Make: {0} Color: {1} Miles: {2} Year: {3}&quot;, cars.Dream.Make, cars.Dream.Color, cars.Dream.Miles, cars.Dream.Year)\n            \n            Console.WriteLine(&quot;Commute Make: {0} Color: {1} Miles: {2} Year: {3}&quot;, cars.Commute.Make, cars.Commute.Color, cars.Commute.Miles, cars.Commute.Year)\n        \n        Catch err As ConfigurationErrorsException\n            Console.WriteLine(err.ToString())\n        End Try\n    \n    End Sub &#39;GetCars\n    \n    \n    \n    Private Shared Sub NotAllowedCars() \n        \n        Try\n            &#39; Get the current configuration file.\n            Dim config As System.Configuration.Configuration = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None)\n            \n            Dim dreamCar As New Automobile()\n            dreamCar.Color = &quot;Red&quot;\n            dreamCar.Make = &quot;BMW&quot;\n            dreamCar.Miles = 10\n            dreamCar.Year = 2005\n            \n            Dim commuteCar As New Automobile()\n            commuteCar.Color = &quot;Blue&quot;\n            commuteCar.Make = &quot;Yugo&quot;\n            commuteCar.Miles = 10\n            commuteCar.Year = 1990\n            \n            &#39; Get the Cars section.\n            Dim cars As SelectCar = config.GetSection(&quot;Cars&quot;)\n              \n            cars.Dream = dreamCar\n            cars.Commute = commuteCar\n        \n        Catch err As ConfigurationErrorsException\n            Console.WriteLine(err.ToString())\n        End Try\n    \n    End Sub &#39;NotAllowedCars\n    \n    \n    Shared Sub Main(ByVal args() As String) \n        GetCars()\n        NotAllowedCars()\n    \n    End Sub &#39;Main \nEnd Class &#39;TestingConfigValidatorAttribute\n</code></pre><p> The following code example is a configuration excerpt used by the previous example.  </p>\n<pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;  \n&lt;configuration&gt;  \n    &lt;configSections&gt;  \n        &lt;section name=&quot;Cars&quot; type=&quot;Samples.AspNet.SelectCar, ConfigValidatorAttribute, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null&quot; allowLocation=&quot;false&quot; allowDefinition=&quot;Everywhere&quot; allowExeDefinition=&quot;MachineToApplication&quot; restartOnExternalChanges=&quot;true&quot; requirePermission=&quot;true&quot; /&gt;  \n    &lt;/configSections&gt;  \n    &lt;Cars commute=&quot;Make:AlfaRomeo Color:Blue Miles:10000 Year:2002&quot;  \n        dream=&quot;Make:Ferrari Color:Red Miles:10 Year:2005&quot; /&gt;  \n&lt;/configuration&gt;  \n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>All the ASP.NET configuration standard validator attribute types derive from ConfigurationValidatorAttribute. You can use this type to create your own custom validator attribute.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Configuration_ConfigurationValidatorAttribute__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ConfigurationValidatorAttribute()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.configuration.configurationvalidatorattribute\" data-linktype=\"relative-path\">ConfigurationValidatorAttribute</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected ConfigurationValidatorAttribute ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>You use this constructor in the attributed model to ensure that the value assigned to the related property is an integer.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Configuration_ConfigurationValidatorAttribute__ctor_System_Type_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ConfigurationValidatorAttribute(Type)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.configuration.configurationvalidatorattribute\" data-linktype=\"relative-path\">ConfigurationValidatorAttribute</a> class using the specified validator type.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public ConfigurationValidatorAttribute (Type validator);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>validator</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The validator type to use when creating an instance of <a class=\"xref\" href=\"system.configuration.configurationvalidatorattribute\" data-linktype=\"relative-path\">ConfigurationValidatorAttribute</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>validator</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>validator</code> is not derived from <a class=\"xref\" href=\"system.configuration.configurationvalidatorbase\" data-linktype=\"relative-path\">ConfigurationValidatorBase</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor determines whether a validator instance can be created from an instance of the specified <code>validator</code> type.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Configuration_ConfigurationValidatorAttribute_ValidatorInstance\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ValidatorInstance</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the validator attribute instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual System.Configuration.ConfigurationValidatorBase ValidatorInstance { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configurationvalidatorbase\" data-linktype=\"relative-path\">ConfigurationValidatorBase</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The current <a class=\"xref\" href=\"system.configuration.configurationvalidatorbase\" data-linktype=\"relative-path\">ConfigurationValidatorBase</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Configuration_ConfigurationValidatorAttribute_ValidatorType\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ValidatorType</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the type of the validator attribute.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Type ValidatorType { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of the current validator attribute instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Configuration.ConfigurationValidatorAttribute.yml\">\r\n<meta name=\"APIName\" content=\"System.Configuration.ConfigurationValidatorAttribute\">\r\n<meta name=\"APIName\" content=\"System.Configuration.ConfigurationValidatorAttribute..ctor\">\r\n<meta name=\"APIName\" content=\"System.Configuration.ConfigurationValidatorAttribute.ValidatorInstance\">\r\n<meta name=\"APIName\" content=\"System.Configuration.ConfigurationValidatorAttribute.ValidatorType\">\r\n<meta name=\"APILocation\" content=\"System.Configuration.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"7e8e62a9-5114-bb67-c6fa-154649a9aa47\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Serves as the base class for the  validator attribute types.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.configuration/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Configuration.ConfigurationValidatorAttribute\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Configuration.ConfigurationValidatorAttribute.yml","open_to_public_contributors":false,"api_name":["System.Configuration.ConfigurationValidatorAttribute","System.Configuration.ConfigurationValidatorAttribute..ctor","System.Configuration.ConfigurationValidatorAttribute.ValidatorInstance","System.Configuration.ConfigurationValidatorAttribute.ValidatorType"],"api_location":["System.Configuration.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Configuration.ConfigurationValidatorAttribute","System::Configuration::ConfigurationValidatorAttribute","System.Configuration.ConfigurationValidatorAttribute.#ctor","System::Configuration::ConfigurationValidatorAttribute::#ctor","System.Configuration.ConfigurationValidatorAttribute.ValidatorInstance","System::Configuration::ConfigurationValidatorAttribute::ValidatorInstance","System.Configuration.ConfigurationValidatorAttribute.ValidatorType","System::Configuration::ConfigurationValidatorAttribute::ValidatorType"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"7e8e62a9-5114-bb67-c6fa-154649a9aa47","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Configuration/ConfigurationValidatorAttribute.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ConfigurationValidatorAttribute class | Microsoft Docs","_op_ogTitle":"ConfigurationValidatorAttribute class","description":"Serves as the base class for the  validator attribute types.\n","toc_asset_id":"api/_splitted/System.Configuration/toc.json","toc_rel":"_splitted/System.Configuration/toc.json","source_url":"","ms.assetid":"System.Configuration.ConfigurationValidatorAttribute","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.configuration.configurationvalidatorattribute","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.configuration.configurationvalidatorattribute","fileRelativePath":"api/System.Configuration.ConfigurationValidatorAttribute.html"},"themesRelativePathToOutputRoot":"_themes/"}