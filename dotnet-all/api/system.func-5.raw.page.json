{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">Func&lt;T1,T2,T3,T4,TResult&gt;</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Encapsulates a method that has four parameters and returns a value of the type specified by the <code>TResult</code> parameter.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.CompilerServices.TypeForwardedFrom(&quot;System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089&quot;)]\npublic delegate TResult Func&lt;in T1,in T2,in T3,in T4,out TResult&gt;(T1 arg1, T2 arg2, T3 arg3, T4 arg4);</code></pre>\r\n  \r\n  \r\n  \r\n  \t\t<h3 class=\"accented\">Type Parameters</h3>\r\n  \t\t<table class=\"nameValue stack\">\r\n  \t\t\t<tr>\r\n  \t\t\t<td>T1</td>\r\n  \t\t\t<td><p>The type of the first parameter of the method that this delegate encapsulates.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t\t<tr>\r\n  \t\t\t<td>T2</td>\r\n  \t\t\t<td><p>The type of the second parameter of the method that this delegate encapsulates.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t\t<tr>\r\n  \t\t\t<td>T3</td>\r\n  \t\t\t<td><p>The type of the third parameter of the method that this delegate encapsulates.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t\t<tr>\r\n  \t\t\t<td>T4</td>\r\n  \t\t\t<td><p>The type of the fourth parameter of the method that this delegate encapsulates.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t\t<tr>\r\n  \t\t\t<td>TResult</td>\r\n  \t\t\t<td><p>The type of the return value of the method that this delegate encapsulates.</p>\n</td>\r\n  \t\t\t</tr>\r\n  \t\t</table>\r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">Func&lt;T1,T2,T3,T4,TResult&gt;</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example demonstrates how to declare and use a <a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func&lt;T1,T2,TResult&gt;</a> delegate. This example declares a <a class=\"xref\" href=\"system.func-3\" data-linktype=\"relative-path\">Func&lt;T1,T2,TResult&gt;</a> variable and assigns it a lambda expression that takes a <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> value and an <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> value as parameters. The lambda expression returns <code>true</code> if the length of the <a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a> parameter is equal to the value of the <a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a> parameter. The delegate that encapsulates this method is subsequently used in a query to filter strings in an array of strings.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Func~3#5\">using System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Func3Example\n{\n   public static void Main()\n   {\n      Func&lt;String, int, bool&gt; predicate = (str, index) =&gt; str.Length == index;\n\n      String[] words = { &quot;orange&quot;, &quot;apple&quot;, &quot;Article&quot;, &quot;elephant&quot;, &quot;star&quot;, &quot;and&quot; };\n      IEnumerable&lt;String&gt; aWords = words.Where(predicate).Select(str =&gt; str);\n\n      foreach (String word in aWords)\n         Console.WriteLine(word);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Func~3#5\">Imports System.Collections.Generic\nImports System.Linq\n\nPublic Module Func3Example\n\n   Public Sub Main()\n      Dim predicate As Func(Of String, Integer, Boolean) = Function(str, index) str.Length = index\n\n      Dim words() As String = { &quot;orange&quot;, &quot;apple&quot;, &quot;Article&quot;, &quot;elephant&quot;, &quot;star&quot;, &quot;and&quot; }\n      Dim aWords As IEnumerable(Of String) = words.Where(predicate)\n\n      For Each word As String In aWords\n         Console.WriteLine(word)\n      Next   \n   End Sub\nEnd Module\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have four parameters, each of which is passed to it by value, and that it must return a value.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> To reference a method that has four parameters and returns <code>void</code> (or in Visual Basic, that is declared as a <code>Sub</code> rather than as a <code>Function</code>), use the generic <a class=\"xref\" href=\"system.action-4\" data-linktype=\"relative-path\">Action&lt;T1,T2,T3,T4&gt;</a> delegate instead.  </p>\n</div>\n<p> When you use the Func(T1, delegate, you do not have to explicitly define a delegate that encapsulates a method with four parameters. For example, the following code explicitly declares a generic delegate named <code>Searcher</code> and assigns a reference to the <a class=\"xref\" href=\"system.string#System_String_IndexOf_\" data-linktype=\"relative-path\">IndexOf</a> method to its delegate instance.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Func~5#1\">using System;\n\ndelegate int Searcher(string searchString, int start, int count, \n                         StringComparison type);\n                         \npublic class DelegateExample\n{\n   public static void Main()\n   {\n      string title = &quot;The House of the Seven Gables&quot;;\n      int position = 0;\n      Searcher finder = title.IndexOf;\n      do\n      {\n         int characters = title.Length - position;\n         position = finder(&quot;the&quot;, position, characters, \n                         StringComparison.InvariantCultureIgnoreCase);\n         if (position &gt;= 0)\n         {\n            position++;\n            Console.WriteLine(&quot;&#39;The&#39; found at position {0} in {1}.&quot;, \n                              position, title);\n         }\n      } while (position &gt; 0);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Func~5#1\">Delegate Function Searcher(searchString As String, _\n                           start As Integer,  _\n                           count As Integer, _\n                           type As StringComparison) As Integer\n\nModule DelegateExample\n   Public Sub Main()\n      Dim title As String = &quot;The House of the Seven Gables&quot;\n      Dim position As Integer = 0\n      Dim finder As Searcher = AddressOf title.IndexOf\n      Do\n         Dim characters As Integer = title.Length - position\n         position = finder(&quot;the&quot;, position, characters, _\n                         StringComparison.InvariantCultureIgnoreCase) \n         If position &gt;= 0 Then\n            position += 1\n            Console.WriteLine(&quot;&#39;The&#39; found at position {0} in {1}.&quot;, _\n                              position, title)\n         End If   \n      Loop While position &gt; 0   \n   End Sub\nEnd Module\n</code></pre><p> The following example simplifies this code by instantiating the Func(T1, delegate instead of explicitly defining a new delegate and assigning a named method to it.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Func~5#2\">using System;\n\npublic class DelegateExample\n{\n   public static void Main()\n   {\n      string title = &quot;The House of the Seven Gables&quot;;\n      int position = 0;\n      Func&lt;string, int, int, StringComparison, int&gt; finder = title.IndexOf;\n      do\n      {\n         int characters = title.Length - position;\n         position = finder(&quot;the&quot;, position, characters, \n                         StringComparison.InvariantCultureIgnoreCase);\n         if (position &gt;= 0)\n         {\n            position++;\n            Console.WriteLine(&quot;&#39;The&#39; found at position {0} in {1}.&quot;, \n                              position, title);\n         }\n      } while (position &gt; 0);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Func~5#2\">Module DelegateExample\n   Public Sub Main()\n      Dim title As String = &quot;The House of the Seven Gables&quot;\n      Dim position As Integer = 0\n      Dim finder As Func(Of String, Integer, Integer, StringComparison, Integer) _\n                    = AddressOf title.IndexOf\n      Do\n         Dim characters As Integer = title.Length - position\n         position = finder(&quot;the&quot;, position, characters, _\n                         StringComparison.InvariantCultureIgnoreCase) \n         If position &gt;= 0 Then\n            position += 1\n            Console.WriteLine(&quot;&#39;The&#39; found at position {0} in {1}.&quot;, _\n                              position, title)\n         End If   \n      Loop While position &gt; 0   \n   End Sub\nEnd Module\n</code></pre><p> You can use the Func(T1, delegate with anonymous methods in C#, as the following example illustrates. (For an introduction to anonymous methods, see <a href=\"../topic/anonymous%20methods%20(c%23%20programming%20guide)\" data-linktype=\"relative-path\">Anonymous Methods</a>.)  </p>\n<pre><code class=\"lang-cs\" name=\"System.Func~5#3\">using System;\n\npublic class DelegateExample\n{\n   public static void Main()\n   {\n      string title = &quot;The House of the Seven Gables&quot;;\n      int position = 0;\n      Func&lt;string, int, int, StringComparison, int&gt; finder = \n           delegate(string s, int pos, int chars, StringComparison type) \n           { return title.IndexOf(s, pos, chars, type); };\n      do\n      {\n         int characters = title.Length - position;\n         position = finder(&quot;the&quot;, position, characters, \n                         StringComparison.InvariantCultureIgnoreCase);\n         if (position &gt;= 0)\n         {\n            position++;\n            Console.WriteLine(&quot;&#39;The&#39; found at position {0} in {1}.&quot;, \n                              position, title);\n         }\n      } while (position &gt; 0);\n   }\n}\n</code></pre><p> You can also assign a lambda expression to a Func(T1, delegate, as the following example illustrates. (For an introduction to lambda expressions, see <a href=\"../topic/lambda%20expressions%20(visual%20basic)\" data-linktype=\"relative-path\">Lambda Expressions</a> and <a href=\"../topic/lambda%20expressions%20(c%23%20programming%20guide)\" data-linktype=\"relative-path\">Lambda Expressions</a>.)  </p>\n<pre><code class=\"lang-cs\" name=\"System.Func~5#4\">using System;\n\npublic class DelegateExample\n{\n   public static void Main()\n   {\n      string title = &quot;The House of the Seven Gables&quot;;\n      int position = 0;\n      Func&lt;string, int, int, StringComparison, int&gt; finder = \n           (s, pos, chars, type) =&gt; title.IndexOf(s, pos, chars, type); \n      do\n      {\n         int characters = title.Length - position;\n         position = finder(&quot;the&quot;, position, characters, \n                         StringComparison.InvariantCultureIgnoreCase);\n         if (position &gt;= 0)\n         {\n            position++;\n            Console.WriteLine(&quot;&#39;The&#39; found at position {0} in {1}.&quot;, \n                              position, title);\n         }\n      } while (position &gt; 0);\n   }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Func~5#4\">Module DelegateExample\n   Public Sub Main()\n      Dim title As String = &quot;The House of the Seven Gables&quot;\n      Dim position As Integer = 0\n      Dim finder As Func(Of String, Integer, Integer, StringComparison, Integer) _\n                    = Function(s, pos, chars, type) _\n                    title.IndexOf(s, pos, chars, type)\n      Do\n         Dim characters As Integer = title.Length - position\n         position = finder(&quot;the&quot;, position, characters, _\n                         StringComparison.InvariantCultureIgnoreCase) \n         If position &gt;= 0 Then\n            position += 1\n            Console.WriteLine(&quot;&#39;The&#39; found at position {0} in {1}.&quot;, _\n                              position, title)\n         End If   \n      Loop While position &gt; 0   \n   End Sub\nEnd Module\n</code></pre><p> The underlying type of a lambda expression is one of the generic <code>Func</code> delegates. This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate. In particular, because many methods of types in the <a class=\"xref\" href=\"system.linq\" data-linktype=\"relative-path\">System.Linq</a> namespace have <code>Func</code> parameters, you can pass these methods a lambda expression without explicitly instantiating a <code>Func</code> delegate.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Func-5.yml\">\r\n<meta name=\"APIName\" content=\"System.Func&lt;T1,T2,T3,T4,TResult&gt;\">\r\n<meta name=\"APIName\" content=\"System.Func&lt;T1,T2,T3,T4,TResult&gt;..ctor\">\r\n<meta name=\"APIName\" content=\"System.Func&lt;T1,T2,T3,T4,TResult&gt;.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Func&lt;T1,T2,T3,T4,TResult&gt;.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Func&lt;T1,T2,T3,T4,TResult&gt;.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"f7d39f68-23ee-eab7-4ef3-2a522cae0248\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Encapsulates a method that has four parameters and returns a value of the type specified by the TResult parameter.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Func`5\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Func-5.yml","open_to_public_contributors":false,"api_name":["System.Func<T1,T2,T3,T4,TResult>","System.Func<T1,T2,T3,T4,TResult>..ctor","System.Func<T1,T2,T3,T4,TResult>.Invoke","System.Func<T1,T2,T3,T4,TResult>.BeginInvoke","System.Func<T1,T2,T3,T4,TResult>.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Func`5","System::Func`5"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"f7d39f68-23ee-eab7-4ef3-2a522cae0248","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System/Func`5.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"Func<T1,T2,T3,T4,TResult> delegate | Microsoft Docs","_op_ogTitle":"Func<T1,T2,T3,T4,TResult> delegate","description":"Encapsulates a method that has four parameters and returns a value of the type specified by the TResult parameter.\n","toc_asset_id":"api/_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.Func`5","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.func-5","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.func-5","fileRelativePath":"api/System.Func-5.html"},"themesRelativePathToOutputRoot":"_themes/"}