{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">PositiveTimeSpanValidator</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides validation of a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object. This class cannot be inherited.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class PositiveTimeSpanValidator : System.Configuration.ConfigurationValidatorBase</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.configuration.configurationvalidatorbase\" data-linktype=\"relative-path\">ConfigurationValidatorBase</a></span></div><span class=\"lang-csharp\">PositiveTimeSpanValidator</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates how to use the PositiveTimeSpanValidator type.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Configuration.PositiveTimeSpanValidator#1\">using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Configuration;\nusing System.ComponentModel;\n\nnamespace Samples.AspNet\n{\n    // Implements a custom validator attribute. \n    [AttributeUsage(AttributeTargets.Property)]\n    public sealed class CustomValidatorAttribute :\n        ConfigurationValidatorAttribute\n    {\n        public CustomValidatorAttribute()\n        {\n        }\n\n        public CustomValidatorAttribute(Type validator)\n            : base(validator)\n        {\n        }\n\n        new public Type ValidatorType\n        {\n            get\n            { return GetType(); }\n        }\n\n\n        public override ConfigurationValidatorBase ValidatorInstance\n        {\n            get\n            {\n                // Create validator.\n                return new PositiveTimeSpanValidator();\n            }\n        }\n    }\n\n    // Implements a custom section class.\n    public class SampleSection : ConfigurationSection\n    {\n        [ConfigurationProperty(&quot;name&quot;, DefaultValue = &quot;MyBuildRoutine&quot;,\n                   IsRequired = true)]\n        [StringValidator(InvalidCharacters = &quot; ~!@#$%^&amp;*()[]{}/;&#39;\\&quot;|\\\\&quot;,\n      MinLength = 1, MaxLength = 60)]\n        public string Name\n        {\n            get\n            {\n                return (string)this[&quot;name&quot;];\n            }\n            set\n            {\n                this[&quot;name&quot;] = value;\n            }\n        }\n\n        [ConfigurationProperty(&quot;BuildStartTime&quot;, IsRequired = true,\n          DefaultValue = &quot;09:00:00&quot;)]\n        public TimeSpan BuildStartTime\n        {\n            get\n            {\n                TimeSpanConverter myTSC = new TimeSpanConverter();\n                return (TimeSpan)this[&quot;BuildStartTime&quot;];\n            }\n            set\n            {\n                this[&quot;BuildStartTime&quot;] = value.ToString();\n            }\n        }\n\n        [ConfigurationProperty(&quot;BuildEndTime&quot;, IsRequired = true,\n          DefaultValue = &quot;17:00:00&quot;)]\n        public TimeSpan BuildEndTime\n        {\n            get\n            {\n                TimeSpanConverter myTSC = new TimeSpanConverter();\n                return (TimeSpan)this[&quot;BuildEndTime&quot;];\n            }\n            set\n            {\n                this[&quot;BuildEndTime&quot;] = value.ToString();\n            }\n\n        }\n    }\n\n    // Implements the console user interface.\n    class TestingCustomValidatorAttribute\n    {\n        // Shows how to use the ValidatorInstance method.\n        public static void GetCustomValidatorInstance()\n        {\n            ConfigurationValidatorBase valBase;\n            CustomValidatorAttribute customValAttr;\n            customValAttr = new CustomValidatorAttribute();\n\n            SampleSection sampleSection =\n              ConfigurationManager.GetSection(&quot;MyDailyProcess&quot;) as SampleSection;\n\n            TimeSpanConverter myTSC = new TimeSpanConverter();\n            TimeSpan StartTimeSpan = (TimeSpan)myTSC.ConvertFromString(sampleSection.BuildStartTime.ToString());\n            TimeSpan EndTimeSpan = (TimeSpan)myTSC.ConvertFromString(sampleSection.BuildEndTime.ToString());\n            TimeSpan resultTimeSpan = EndTimeSpan - StartTimeSpan;\n\n            try\n            {\n                // Determine if the Validator can validate\n                // the type it contains.\n                valBase = customValAttr.ValidatorInstance;\n                if (valBase.CanValidate(resultTimeSpan.GetType()))\n                {\n                    // Validate the TimeSpan using a\n                    // custom PositiveTimeSpanValidator.\n                    valBase.Validate(resultTimeSpan);\n                }\n            }\n            catch (ArgumentException e)\n            {\n                // Store error message.\n                string msg = e.Message.ToString();\n#if DEBUG\n                Console.WriteLine(&quot;Error: {0}&quot;, msg);\n#endif\n            }\n        }\n\n        // Create required sections.\n        static void CreateSection()\n        {\n            // Get the current configuration (file).\n            System.Configuration.Configuration config =\n              ConfigurationManager.OpenExeConfiguration(\n              ConfigurationUserLevel.None);\n\n            // Define the sample section.\n            SampleSection sampleSection;\n\n            // Create the handler section named MyDailyProcess \n            // in the &lt;configSections&gt;. Also, create the \n            // &lt;MyDailyProcess&gt; target section\n            // in &lt;configuration&gt;.\n            if (config.Sections[&quot;MyDailyProcess&quot;] == null)\n            {\n                sampleSection = new SampleSection();\n                config.Sections.Add(&quot;MyDailyProcess&quot;, sampleSection);\n                sampleSection.SectionInformation.ForceSave = true;\n                config.Save(ConfigurationSaveMode.Full);\n            }\n        }\n\n        static void DisplaySectionProperties()\n        {\n            SampleSection sampleSection =\n               ConfigurationManager.GetSection(&quot;MyDailyProcess&quot;) as SampleSection;\n\n            if (sampleSection == null)\n                Console.WriteLine(&quot;Failed to load section.&quot;);\n            else\n            {\n                Console.WriteLine(&quot;Defaults:&quot;);\n                Console.WriteLine(&quot;  Name: {0}&quot;, sampleSection.Name);\n                Console.WriteLine(&quot;  BuildStartTime: {0}&quot;, sampleSection.BuildStartTime);\n                Console.WriteLine(&quot;  BuildEndTime: {0}&quot;, sampleSection.BuildEndTime);\n            }\n        }\n\n        static void Main(string[] args)\n        {\n            Console.WriteLine(&quot;[Create a section]&quot;);\n            CreateSection();\n\n            Console.WriteLine(&quot;[Display section information]&quot;);\n            DisplaySectionProperties();\n\n            // Show how to use the ValidatorInstance method.\n            GetCustomValidatorInstance();\n\n            // Display and wait.\n            Console.ReadLine();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Configuration.PositiveTimeSpanValidator#1\">Imports System\nImports System.Collections.Generic\nImports System.Text\nImports System.Configuration\nImports System.ComponentModel\n\nNamespace Samples.AspNet.Configuration\n\n    &#39; Implements a custom validator attribute. \n    &lt;AttributeUsage(AttributeTargets.Property)&gt; _\n      Public NotInheritable Class CustomValidatorAttribute\n        Inherits ConfigurationValidatorAttribute\n\n        Public Sub New()\n        End Sub &#39;New\n\n        Public Sub New(ByVal validator As Type)\n            MyBase.New(validator)\n        End Sub &#39;New\n\n        Public Shadows ReadOnly Property _\n        ValidatorType() As Type\n            Get\n                Return [GetType]()\n            End Get\n        End Property\n\n        Public Overrides ReadOnly Property ValidatorInstance() As ConfigurationValidatorBase\n            Get\n                &#39; Create validator.\n                Return New PositiveTimeSpanValidator()\n            End Get\n        End Property\n    End Class\n\n    &#39; Implements a custom section class.\n    Public Class SampleSection\n        Inherits ConfigurationSection\n        &lt;ConfigurationProperty(&quot;name&quot;, DefaultValue:=&quot;MyBuildRoutine&quot;, IsRequired:=True), _\n        StringValidator(InvalidCharacters:=&quot; ~!@#$%^&amp;*()[]{}/;&#39;&quot;&quot;|\\&quot;, _\n        MinLength:=1, MaxLength:=60)&gt; _\n         Public Property Name() As String\n            Get\n                Return CType(Me(&quot;name&quot;), String)\n            End Get\n            Set(ByVal Value As String)\n                Me(&quot;name&quot;) = Value\n            End Set\n        End Property\n\n        &lt;ConfigurationProperty(&quot;BuildStartTime&quot;, IsRequired:=True, _\n          DefaultValue:=&quot;09:00:00&quot;)&gt; _\n        Public Property BuildStartTime() As TimeSpan\n            Get\n                Dim myTSC As TimeSpanConverter = New TimeSpanConverter()\n                Return CType(Me(&quot;BuildStartTime&quot;), TimeSpan)\n            End Get\n            Set(ByVal Value As TimeSpan)\n                Me(&quot;BuildStartTime&quot;) = Value.ToString()\n            End Set\n        End Property\n\n        &lt;ConfigurationProperty(&quot;BuildEndTime&quot;, IsRequired:=True, _\n          DefaultValue:=&quot;17:00:00&quot;)&gt; _\n        Public Property BuildEndTime() As TimeSpan\n            Get\n                Dim myTSC As TimeSpanConverter = New TimeSpanConverter()\n                Return CType(Me(&quot;BuildEndTime&quot;), TimeSpan)\n            End Get\n            Set(ByVal Value As TimeSpan)\n                Me(&quot;BuildEndTime&quot;) = Value.ToString()\n            End Set\n        End Property\n    End Class\n\n    &#39; Implements the console user interface.\n    Class TestingCustomValidatorAttribute\n        &#39; Shows how to use the ValidatorInstance method.\n        Public Shared Sub GetCustomValidatorInstance()\n            Dim valBase As ConfigurationValidatorBase\n            Dim customValAttr As CustomValidatorAttribute\n            customValAttr = New CustomValidatorAttribute()\n\n            Dim sampleSection As SampleSection = ConfigurationManager.GetSection(&quot;MyDailyProcess&quot;)\n\n            Dim myTSC As TimeSpanConverter = New TimeSpanConverter()\n            Dim StartTimeSpan As TimeSpan = CType(myTSC.ConvertFromString(SampleSection.BuildStartTime.ToString()), TimeSpan)\n            Dim EndTimeSpan As TimeSpan = CType(myTSC.ConvertFromString(SampleSection.BuildEndTime.ToString()), TimeSpan)\n            Dim resultTimeSpan As TimeSpan = EndTimeSpan - StartTimeSpan\n\n            Try\n                &#39; Determine if the Validator can validate\n                &#39; the type it contains.\n                valBase = customValAttr.ValidatorInstance\n                If valBase.CanValidate(resultTimeSpan.GetType()) Then\n                    &#39; Validate the TimeSpan using a\n                    &#39; custom PositiveTimeSpanValidator.\n                    valBase.Validate(resultTimeSpan)\n                End If\n            Catch e As ArgumentException\n                &#39; Store error message.\n                Dim msg As String = e.Message.ToString()\n#If DEBUG Then\n                Console.WriteLine(&quot;Error: {0}&quot;, msg)\n#End If\n            End Try\n        End Sub\n\n        &#39; Create required sections.\n        Shared Sub CreateSection()\n            &#39; Get the current configuration (file).\n            Dim config As System.Configuration.Configuration = _\n              ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None)\n\n            &#39; Define the sample section.\n            Dim sampleSection As SampleSection\n\n            &#39; Create the handler section named MyDailyProcess \n            &#39; in the &lt;configSections&gt;. Also, create the \n            &#39; &lt;MyDailyProcess&gt; target section\n            &#39; in &lt;configuration&gt;.\n            If config.Sections(&quot;MyDailyProcess&quot;) Is Nothing Then\n                sampleSection = New SampleSection()\n                config.Sections.Add(&quot;MyDailyProcess&quot;, sampleSection)\n                sampleSection.SectionInformation.ForceSave = True\n                config.Save(ConfigurationSaveMode.Full)\n            End If\n        End Sub\n\n        Shared Sub DisplaySectionProperties()\n            Dim sampleSection As SampleSection = ConfigurationManager.GetSection(&quot;MyDailyProcess&quot;)\n\n            If SampleSection Is Nothing Then\n                Console.WriteLine(&quot;Failed to load section.&quot;)\n            Else\n                Console.WriteLine(&quot;Defaults:&quot;)\n                Console.WriteLine(&quot;  Name: {0}&quot;, SampleSection.Name)\n                Console.WriteLine(&quot;  BuildStartTime: {0}&quot;, SampleSection.BuildStartTime)\n                Console.WriteLine(&quot;  BuildEndTime: {0}&quot;, SampleSection.BuildEndTime)\n            End If\n        End Sub\n\n        Shared Sub Main(ByVal args() As String)\n            Console.WriteLine(&quot;[Create a section]&quot;)\n            CreateSection()\n\n            Console.WriteLine(&quot;[Display section information]&quot;)\n            DisplaySectionProperties()\n\n            &#39; Show how to use the ValidatorInstance method.\n            GetCustomValidatorInstance()\n\n            &#39; Display and wait.\n            Console.ReadLine()\n        End Sub\n    End Class\nEnd Namespace\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The PositiveTimeSpanValidator is used to ensure a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object meets specific criteria. The <a class=\"xref\" href=\"system.configuration.positivetimespanvalidator#System_Configuration_PositiveTimeSpanValidator_CanValidate_\" data-linktype=\"relative-path\">CanValidate</a> method determines whether the object type being validated matches the expected type. The object being validated is passed as a parameter of the <a class=\"xref\" href=\"system.configuration.positivetimespanvalidator#System_Configuration_PositiveTimeSpanValidator_Validate_\" data-linktype=\"relative-path\">Validate</a> method. To pass validation, the object being validated must be a positive <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Configuration_PositiveTimeSpanValidator__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Configuration_PositiveTimeSpanValidator__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PositiveTimeSpanValidator()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.configuration.positivetimespanvalidator\" data-linktype=\"relative-path\">PositiveTimeSpanValidator</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public PositiveTimeSpanValidator ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Configuration_PositiveTimeSpanValidator_CanValidate_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Configuration_PositiveTimeSpanValidator_CanValidate_System_Type_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CanValidate(Type)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether the object type can be validated.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override bool CanValidate (Type type);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>type</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object type.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the <code>type</code> parameter matches a <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> object; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Configuration_PositiveTimeSpanValidator_Validate_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Configuration_PositiveTimeSpanValidator_Validate_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Validate(Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether the value of an object is valid.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override void Validate (object value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The value of an object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>value</code> cannot be resolved as a positive <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The object to validate is passed as a parameter of the Validate method. To pass validation, the object being validated must be a positive <a class=\"xref\" href=\"system.timespan\" data-linktype=\"relative-path\">TimeSpan</a> value.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Configuration.PositiveTimeSpanValidator.yml\">\r\n<meta name=\"APIName\" content=\"System.Configuration.PositiveTimeSpanValidator\">\r\n<meta name=\"APIName\" content=\"System.Configuration.PositiveTimeSpanValidator..ctor\">\r\n<meta name=\"APIName\" content=\"System.Configuration.PositiveTimeSpanValidator.CanValidate\">\r\n<meta name=\"APIName\" content=\"System.Configuration.PositiveTimeSpanValidator.Validate\">\r\n<meta name=\"APILocation\" content=\"System.Configuration.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 05:47 AM\">\r\n<meta name=\"document_id\" content=\"53e151c4-5ce6-122e-1c42-9ff19fe83af6\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides validation of a  object. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.configuration/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Configuration.PositiveTimeSpanValidator\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Configuration.PositiveTimeSpanValidator.yml","open_to_public_contributors":false,"api_name":["System.Configuration.PositiveTimeSpanValidator","System.Configuration.PositiveTimeSpanValidator..ctor","System.Configuration.PositiveTimeSpanValidator.CanValidate","System.Configuration.PositiveTimeSpanValidator.Validate"],"api_location":["System.Configuration.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Configuration.PositiveTimeSpanValidator","System::Configuration::PositiveTimeSpanValidator","System.Configuration.PositiveTimeSpanValidator.#ctor","System::Configuration::PositiveTimeSpanValidator::#ctor","System.Configuration.PositiveTimeSpanValidator.CanValidate","System::Configuration::PositiveTimeSpanValidator::CanValidate","System.Configuration.PositiveTimeSpanValidator.Validate","System::Configuration::PositiveTimeSpanValidator::Validate"],"dev_langs":["csharp"],"updated_at":"2017-03-31 05:47 AM","document_id":"53e151c4-5ce6-122e-1c42-9ff19fe83af6","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Configuration/PositiveTimeSpanValidator.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"PositiveTimeSpanValidator class | Microsoft Docs","_op_ogTitle":"PositiveTimeSpanValidator class","description":"Provides validation of a  object. This class cannot be inherited.\n","toc_asset_id":"api/_splitted/System.Configuration/toc.json","toc_rel":"_splitted/System.Configuration/toc.json","source_url":"","ms.assetid":"System.Configuration.PositiveTimeSpanValidator","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.configuration.positivetimespanvalidator","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.configuration.positivetimespanvalidator","fileRelativePath":"api/System.Configuration.PositiveTimeSpanValidator.html"},"themesRelativePathToOutputRoot":"_themes/"}