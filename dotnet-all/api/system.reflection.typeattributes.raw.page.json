{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">TypeAttributes</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies type attributes.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Flags]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic enum TypeAttributes</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">System.Enum</a></span></div><span class=\"lang-csharp\">TypeAttributes</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example retrieves the value of the <a class=\"xref\" href=\"system.type#System_Type_Attributes_\" data-linktype=\"relative-path\">Attributes</a> property for <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> objects that represent a number of different types, and then determines whether individual attribute flags have been set.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Type.Attributes#1\">Imports System.Reflection\n\nFriend Structure S\n    Public X As Integer\nEnd Structure\n\nPublic MustInherit Class Example\n    Protected NotInheritable Class NestedClass\n    End Class\n\n    Public Interface INested\n    End Interface\n\n    Public Shared Sub Main()\n        &#39; Create an array of types.\n        Dim types() As Type = { GetType(Example), GetType(NestedClass),\n                                GetType(INested), GetType(S) }\n\n        For Each t In types\n           Console.WriteLine(&quot;Attributes for type {0}:&quot;, t.Name)\n\n           Dim attr As TypeAttributes = t.Attributes\n\n           &#39; Use the visibility mask to test for visibility attributes.\n           Dim visibility As TypeAttributes = attr And TypeAttributes.VisibilityMask\n           Select Case visibility\n               Case TypeAttributes.NotPublic:\n                   Console.WriteLine(&quot;   ...is not Public&quot;)\n               Case TypeAttributes.Public:\n                   Console.WriteLine(&quot;   ...is Public&quot;)\n               Case TypeAttributes.NestedPublic:\n                   Console.WriteLine(&quot;   ...is nested and Public&quot;)\n               Case TypeAttributes.NestedPrivate:\n                   Console.WriteLine(&quot;   ...is nested and Private&quot;)\n               Case TypeAttributes.NestedFamANDAssem:\n                   Console.WriteLine(&quot;   ...is nested, and inheritable only within the assembly&quot; &amp; _\n                      vbLf &amp; &quot;         (cannot be declared in Visual Basic)&quot;)\n               Case TypeAttributes.NestedAssembly:\n                   Console.WriteLine(&quot;   ...is nested and Friend&quot;)\n               Case TypeAttributes.NestedFamily:\n                   Console.WriteLine(&quot;   ...is nested and Protected&quot;)\n               Case TypeAttributes.NestedFamORAssem:\n                   Console.WriteLine(&quot;   ...is nested and Protected Friend&quot;)\n           End Select\n\n           &#39; Use the layout mask to test for layout attributes.\n           Dim layout As TypeAttributes = attr And TypeAttributes.LayoutMask\n           Select Case layout\n               Case TypeAttributes.AutoLayout:\n                   Console.WriteLine(&quot;   ...is AutoLayout&quot;)\n               Case TypeAttributes.SequentialLayout:\n                   Console.WriteLine(&quot;   ...is SequentialLayout&quot;)\n               Case TypeAttributes.ExplicitLayout:\n                   Console.WriteLine(&quot;   ...is ExplicitLayout&quot;)\n           End Select\n\n           &#39; Use the class semantics mask to test for class semantics attributes.\n           Dim classSemantics As TypeAttributes = attr And TypeAttributes.ClassSemanticsMask\n           Select Case classSemantics\n               Case TypeAttributes.Class:\n                   If t.IsValueType Then\n                       Console.WriteLine(&quot;   ...is a value type&quot;)\n                   Else\n                       Console.WriteLine(&quot;   ...is a class&quot;)\n                   End If\n               Case TypeAttributes.Interface:\n                   Console.WriteLine(&quot;   ...is an interface&quot;)\n           End Select\n\n           If 0 &lt;&gt; (attr And TypeAttributes.Abstract) Then _\n               Console.WriteLine(&quot;   ...is MustInherit&quot;)\n\n           If 0 &lt;&gt; (attr And TypeAttributes.Sealed) Then _\n               Console.WriteLine(&quot;   ...is NotInheritable&quot;)\n           Console.WriteLine()\n       Next\n    End Sub\nEnd Class\n&#39; The example displays the following output:\n&#39;       Attributes for type Example:\n&#39;          ...is Public\n&#39;          ...is AutoLayout\n&#39;          ...is a class\n&#39;          ...is MustInherit\n&#39;\n&#39;       Attributes for type NestedClass:\n&#39;          ...is nested and Protected\n&#39;          ...is AutoLayout\n&#39;          ...is a class\n&#39;          ...is NotInheritable\n&#39;\n&#39;       Attributes for type INested:\n&#39;          ...is nested and Public\n&#39;          ...is AutoLayout\n&#39;          ...is an interface\n&#39;          ...is MustInherit\n&#39;\n&#39;       Attributes for type S:\n&#39;          ...is not Public\n&#39;          ...is SequentialLayout\n&#39;          ...is a value type\n&#39;          ...is NotInheritable\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Type.Attributes#1\">using System;\nusing System.Reflection;\n\ninternal struct S\n{\n    public int X;\n}\n\npublic abstract class Example\n{\n    protected sealed class NestedClass {}\n\n    public interface INested {}\n\n    public static void Main()\n    {\n        // Create an array of types.\n        Type[] types = { typeof(Example), typeof(NestedClass),\n                         typeof(INested), typeof(S) };\n\n        foreach (var t in types) {\n           Console.WriteLine(&quot;Attributes for type {0}:&quot;, t.Name);\n\n           TypeAttributes attr = t.Attributes;\n\n           // To test for visibility attributes, you must use the visibility mask.\n           TypeAttributes visibility = attr &amp; TypeAttributes.VisibilityMask;\n           switch (visibility)\n           {\n               case TypeAttributes.NotPublic:\n                   Console.WriteLine(&quot;   ...is not public&quot;);\n                   break;\n               case TypeAttributes.Public:\n                   Console.WriteLine(&quot;   ...is public&quot;);\n                   break;\n               case TypeAttributes.NestedPublic:\n                   Console.WriteLine(&quot;   ...is nested and public&quot;);\n                   break;\n               case TypeAttributes.NestedPrivate:\n                   Console.WriteLine(&quot;   ...is nested and private&quot;);\n                   break;\n               case TypeAttributes.NestedFamANDAssem:\n                   Console.WriteLine(&quot;   ...is nested, and inheritable only within the assembly&quot; +\n                      &quot;\\n         (cannot be declared in C#)&quot;);\n                   break;\n               case TypeAttributes.NestedAssembly:\n                   Console.WriteLine(&quot;   ...is nested and internal&quot;);\n                   break;\n               case TypeAttributes.NestedFamily:\n                   Console.WriteLine(&quot;   ...is nested and protected&quot;);\n                   break;\n               case TypeAttributes.NestedFamORAssem:\n                   Console.WriteLine(&quot;   ...is nested and protected internal&quot;);\n                   break;\n           }\n\n           &#39; Use the layout mask to test for layout attributes.\n           TypeAttributes layout = attr &amp; TypeAttributes.LayoutMask;\n           switch (layout)\n           {\n               case TypeAttributes.AutoLayout:\n                   Console.WriteLine(&quot;   ...is AutoLayout&quot;);\n                   break;\n               case TypeAttributes.SequentialLayout:\n                   Console.WriteLine(&quot;   ...is SequentialLayout&quot;);\n                   break;\n               case TypeAttributes.ExplicitLayout:\n                   Console.WriteLine(&quot;   ...is ExplicitLayout&quot;);\n                   break;\n           }\n\n           &#39; Use the class semantics mask to test for class semantics attributes.\n           TypeAttributes classSemantics = attr &amp; TypeAttributes.ClassSemanticsMask;\n           switch (classSemantics)\n           {\n               case TypeAttributes.Class:\n                   if (t.IsValueType)\n                   {\n                       Console.WriteLine(&quot;   ...is a value type&quot;);\n                   }\n                   else\n                   {\n                       Console.WriteLine(&quot;   ...is a class&quot;);\n                   }\n                   break;\n               case TypeAttributes.Interface:\n                   Console.WriteLine(&quot;   ...is an interface&quot;);\n                   break;\n           }\n\n           if (0!=(attr &amp; TypeAttributes.Abstract))\n           {\n               Console.WriteLine(&quot;   ...is abstract&quot;);\n           }\n\n           if (0!=(attr &amp; TypeAttributes.Sealed))\n           {\n               Console.WriteLine(&quot;   ...is sealed&quot;);\n           }\n           Console.WriteLine();\n       }\n    }\n}\n// The example displays the following output:\n//       Attributes for type Example:\n//          ...is Public\n//          ...is AutoLayout\n//          ...is a class\n//          ...is MustInherit\n//\n//       Attributes for type NestedClass:\n//          ...is nested and Protected\n//          ...is AutoLayout\n//          ...is a class\n//          ...is NotInheritable\n//\n//       Attributes for type INested:\n//          ...is nested and Public\n//          ...is AutoLayout\n//          ...is an interface\n//          ...is MustInherit\n//\n//       Attributes for type S:\n//          ...is not Public\n//          ...is SequentialLayout\n//          ...is a value type\n//          ...is NotInheritable\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Some of the members of the TypeAttributes enumeration are masks that represent a set of mutually exclusive attributes. For example, the VisibilityMask member includes the NotPublic, Public, NestedPublic, NestedPrivate, NestedFamily, NestedAssembly, NestedFamANDAssem, and NestedFamORAssem members,  Because each attribute set includes a member whose underlying value is zero, you should first <code>And</code> the value of the mask with the specific TypeAttributes value retrieved from a property such as <a class=\"xref\" href=\"system.type#System_Type_Attributes_\" data-linktype=\"relative-path\">Attributes</a>. The following table lists the masks and the individual members that they include:  </p>\n<table>\n<thead>\n<tr>\n<th>Mask</th>\n<th>Includes</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>VisibilityMask</td>\n<td>NotPublic <br> Public <br> NestedPublic <br> NestedPrivate <br> NestedFamily <br> NestedAssembly <br> NestedFamANDAssem <br> NestedFamORAssem</td>\n</tr>\n<tr>\n<td>LayoutMask</td>\n<td>AutoLayout <br> SequentialLayout <br> ExplicitLayout</td>\n</tr>\n<tr>\n<td>ClassSemanticsMask</td>\n<td>Class <br> Interface</td>\n</tr>\n<tr>\n<td>StringFormatMask</td>\n<td>AnsiClass <br> UnicodeClass <br> AutoClass <br> CustomFormatClass</td>\n</tr>\n<tr>\n<td>CustomFormatMask</td>\n<td>No members.</td>\n</tr>\n</tbody>\n</table>\n<p> The members of this enumerator class match the CorTypeAttr enumerator as defined in the corhdr.h file.</p>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Reflection_TypeAttributes_Abstract\">\r\n      \t\t\t<span class=\"lang-csharp\">Abstract</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the type is abstract.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_TypeAttributes_AnsiClass\">\r\n      \t\t\t<span class=\"lang-csharp\">AnsiClass</span>\r\n      \t</td>\r\n      \t<td><p>LPTSTR is interpreted as ANSI.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_TypeAttributes_AutoClass\">\r\n      \t\t\t<span class=\"lang-csharp\">AutoClass</span>\r\n      \t</td>\r\n      \t<td><p>LPTSTR is interpreted automatically.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_TypeAttributes_AutoLayout\">\r\n      \t\t\t<span class=\"lang-csharp\">AutoLayout</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that class fields are automatically laid out by the common language runtime.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_TypeAttributes_BeforeFieldInit\">\r\n      \t\t\t<span class=\"lang-csharp\">BeforeFieldInit</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that calling static methods of the type does not force the system to initialize the type.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_TypeAttributes_Class\">\r\n      \t\t\t<span class=\"lang-csharp\">Class</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the type is a class.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_TypeAttributes_ClassSemanticsMask\">\r\n      \t\t\t<span class=\"lang-csharp\">ClassSemanticsMask</span>\r\n      \t</td>\r\n      \t<td><p>Specifies class semantics information; the current class is contextful (else agile).</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_TypeAttributes_CustomFormatClass\">\r\n      \t\t\t<span class=\"lang-csharp\">CustomFormatClass</span>\r\n      \t</td>\r\n      \t<td><p>LPSTR is interpreted by some implementation-specific means, which includes the possibility of throwing a <a class=\"xref\" href=\"system.notsupportedexception\" data-linktype=\"relative-path\">NotSupportedException</a>. Not used in the Microsoft implementation of the .NET Framework.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_TypeAttributes_CustomFormatMask\">\r\n      \t\t\t<span class=\"lang-csharp\">CustomFormatMask</span>\r\n      \t</td>\r\n      \t<td><p>Used to retrieve non-standard encoding information for native interop. The meaning of the values of these 2 bits is unspecified. Not used in the Microsoft implementation of the .NET Framework.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_TypeAttributes_ExplicitLayout\">\r\n      \t\t\t<span class=\"lang-csharp\">ExplicitLayout</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that class fields are laid out at the specified offsets.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_TypeAttributes_HasSecurity\">\r\n      \t\t\t<span class=\"lang-csharp\">HasSecurity</span>\r\n      \t</td>\r\n      \t<td><p>Type has security associate with it.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_TypeAttributes_Import\">\r\n      \t\t\t<span class=\"lang-csharp\">Import</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the class or interface is imported from another module.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_TypeAttributes_Interface\">\r\n      \t\t\t<span class=\"lang-csharp\">Interface</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the type is an interface.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_TypeAttributes_LayoutMask\">\r\n      \t\t\t<span class=\"lang-csharp\">LayoutMask</span>\r\n      \t</td>\r\n      \t<td><p>Specifies class layout information.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_TypeAttributes_NestedAssembly\">\r\n      \t\t\t<span class=\"lang-csharp\">NestedAssembly</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the class is nested with assembly visibility, and is thus accessible only by methods within its assembly.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_TypeAttributes_NestedFamANDAssem\">\r\n      \t\t\t<span class=\"lang-csharp\">NestedFamANDAssem</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the class is nested with assembly and family visibility, and is thus accessible only by methods lying in the intersection of its family and assembly.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_TypeAttributes_NestedFamily\">\r\n      \t\t\t<span class=\"lang-csharp\">NestedFamily</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the class is nested with family visibility, and is thus accessible only by methods within its own type and any derived types.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_TypeAttributes_NestedFamORAssem\">\r\n      \t\t\t<span class=\"lang-csharp\">NestedFamORAssem</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the class is nested with family or assembly visibility, and is thus accessible only by methods lying in the union of its family and assembly.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_TypeAttributes_NestedPrivate\">\r\n      \t\t\t<span class=\"lang-csharp\">NestedPrivate</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the class is nested with private visibility.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_TypeAttributes_NestedPublic\">\r\n      \t\t\t<span class=\"lang-csharp\">NestedPublic</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the class is nested with public visibility.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_TypeAttributes_NotPublic\">\r\n      \t\t\t<span class=\"lang-csharp\">NotPublic</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the class is not public.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_TypeAttributes_Public\">\r\n      \t\t\t<span class=\"lang-csharp\">Public</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the class is public.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_TypeAttributes_ReservedMask\">\r\n      \t\t\t<span class=\"lang-csharp\">ReservedMask</span>\r\n      \t</td>\r\n      \t<td><p>Attributes reserved for runtime use.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_TypeAttributes_RTSpecialName\">\r\n      \t\t\t<span class=\"lang-csharp\">RTSpecialName</span>\r\n      \t</td>\r\n      \t<td><p>Runtime should check name encoding.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_TypeAttributes_Sealed\">\r\n      \t\t\t<span class=\"lang-csharp\">Sealed</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the class is concrete and cannot be extended.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_TypeAttributes_SequentialLayout\">\r\n      \t\t\t<span class=\"lang-csharp\">SequentialLayout</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that class fields are laid out sequentially, in the order that the fields were emitted to the metadata.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_TypeAttributes_Serializable\">\r\n      \t\t\t<span class=\"lang-csharp\">Serializable</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the class can be serialized.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_TypeAttributes_SpecialName\">\r\n      \t\t\t<span class=\"lang-csharp\">SpecialName</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the class is special in a way denoted by the name.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_TypeAttributes_StringFormatMask\">\r\n      \t\t\t<span class=\"lang-csharp\">StringFormatMask</span>\r\n      \t</td>\r\n      \t<td><p>Used to retrieve string information for native interoperability.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_TypeAttributes_UnicodeClass\">\r\n      \t\t\t<span class=\"lang-csharp\">UnicodeClass</span>\r\n      \t</td>\r\n      \t<td><p>LPTSTR is interpreted as UNICODE.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_TypeAttributes_VisibilityMask\">\r\n      \t\t\t<span class=\"lang-csharp\">VisibilityMask</span>\r\n      \t</td>\r\n      \t<td><p>Specifies type visibility information.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_TypeAttributes_WindowsRuntime\">\r\n      \t\t\t<span class=\"lang-csharp\">WindowsRuntime</span>\r\n      \t</td>\r\n      \t<td><p>Specifies a Windows Runtime type.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Reflection.TypeAttributes.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeAttributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeAttributes.Abstract\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeAttributes.AnsiClass\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeAttributes.AutoClass\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeAttributes.AutoLayout\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeAttributes.BeforeFieldInit\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeAttributes.Class\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeAttributes.ClassSemanticsMask\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeAttributes.CustomFormatClass\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeAttributes.CustomFormatMask\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeAttributes.ExplicitLayout\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeAttributes.HasSecurity\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeAttributes.Import\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeAttributes.Interface\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeAttributes.LayoutMask\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeAttributes.NestedAssembly\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeAttributes.NestedFamANDAssem\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeAttributes.NestedFamily\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeAttributes.NestedFamORAssem\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeAttributes.NestedPrivate\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeAttributes.NestedPublic\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeAttributes.NotPublic\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeAttributes.Public\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeAttributes.ReservedMask\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeAttributes.RTSpecialName\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeAttributes.Sealed\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeAttributes.SequentialLayout\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeAttributes.Serializable\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeAttributes.SpecialName\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeAttributes.StringFormatMask\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeAttributes.UnicodeClass\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeAttributes.VisibilityMask\">\r\n<meta name=\"APIName\" content=\"System.Reflection.TypeAttributes.WindowsRuntime\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-24 01:41 AM\">\r\n<meta name=\"document_id\" content=\"bdfbd96c-9823-b9f5-febc-f8011f2fa167\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies type attributes.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.reflection/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.TypeAttributes\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Reflection.TypeAttributes.yml","open_to_public_contributors":false,"api_name":["System.Reflection.TypeAttributes","System.Reflection.TypeAttributes.Abstract","System.Reflection.TypeAttributes.AnsiClass","System.Reflection.TypeAttributes.AutoClass","System.Reflection.TypeAttributes.AutoLayout","System.Reflection.TypeAttributes.BeforeFieldInit","System.Reflection.TypeAttributes.Class","System.Reflection.TypeAttributes.ClassSemanticsMask","System.Reflection.TypeAttributes.CustomFormatClass","System.Reflection.TypeAttributes.CustomFormatMask","System.Reflection.TypeAttributes.ExplicitLayout","System.Reflection.TypeAttributes.HasSecurity","System.Reflection.TypeAttributes.Import","System.Reflection.TypeAttributes.Interface","System.Reflection.TypeAttributes.LayoutMask","System.Reflection.TypeAttributes.NestedAssembly","System.Reflection.TypeAttributes.NestedFamANDAssem","System.Reflection.TypeAttributes.NestedFamily","System.Reflection.TypeAttributes.NestedFamORAssem","System.Reflection.TypeAttributes.NestedPrivate","System.Reflection.TypeAttributes.NestedPublic","System.Reflection.TypeAttributes.NotPublic","System.Reflection.TypeAttributes.Public","System.Reflection.TypeAttributes.ReservedMask","System.Reflection.TypeAttributes.RTSpecialName","System.Reflection.TypeAttributes.Sealed","System.Reflection.TypeAttributes.SequentialLayout","System.Reflection.TypeAttributes.Serializable","System.Reflection.TypeAttributes.SpecialName","System.Reflection.TypeAttributes.StringFormatMask","System.Reflection.TypeAttributes.UnicodeClass","System.Reflection.TypeAttributes.VisibilityMask","System.Reflection.TypeAttributes.WindowsRuntime"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.TypeAttributes","System::Reflection::TypeAttributes","System.Reflection.TypeAttributes.Abstract","System::Reflection::TypeAttributes::Abstract","System.Reflection.TypeAttributes.AnsiClass","System::Reflection::TypeAttributes::AnsiClass","System.Reflection.TypeAttributes.AutoClass","System::Reflection::TypeAttributes::AutoClass","System.Reflection.TypeAttributes.AutoLayout","System::Reflection::TypeAttributes::AutoLayout","System.Reflection.TypeAttributes.BeforeFieldInit","System::Reflection::TypeAttributes::BeforeFieldInit","System.Reflection.TypeAttributes.Class","System::Reflection::TypeAttributes::Class","System.Reflection.TypeAttributes.ClassSemanticsMask","System::Reflection::TypeAttributes::ClassSemanticsMask","System.Reflection.TypeAttributes.CustomFormatClass","System::Reflection::TypeAttributes::CustomFormatClass","System.Reflection.TypeAttributes.CustomFormatMask","System::Reflection::TypeAttributes::CustomFormatMask","System.Reflection.TypeAttributes.ExplicitLayout","System::Reflection::TypeAttributes::ExplicitLayout","System.Reflection.TypeAttributes.HasSecurity","System::Reflection::TypeAttributes::HasSecurity","System.Reflection.TypeAttributes.Import","System::Reflection::TypeAttributes::Import","System.Reflection.TypeAttributes.Interface","System::Reflection::TypeAttributes::Interface","System.Reflection.TypeAttributes.LayoutMask","System::Reflection::TypeAttributes::LayoutMask","System.Reflection.TypeAttributes.NestedAssembly","System::Reflection::TypeAttributes::NestedAssembly","System.Reflection.TypeAttributes.NestedFamANDAssem","System::Reflection::TypeAttributes::NestedFamANDAssem","System.Reflection.TypeAttributes.NestedFamily","System::Reflection::TypeAttributes::NestedFamily","System.Reflection.TypeAttributes.NestedFamORAssem","System::Reflection::TypeAttributes::NestedFamORAssem","System.Reflection.TypeAttributes.NestedPrivate","System::Reflection::TypeAttributes::NestedPrivate","System.Reflection.TypeAttributes.NestedPublic","System::Reflection::TypeAttributes::NestedPublic","System.Reflection.TypeAttributes.NotPublic","System::Reflection::TypeAttributes::NotPublic","System.Reflection.TypeAttributes.Public","System::Reflection::TypeAttributes::Public","System.Reflection.TypeAttributes.ReservedMask","System::Reflection::TypeAttributes::ReservedMask","System.Reflection.TypeAttributes.RTSpecialName","System::Reflection::TypeAttributes::RTSpecialName","System.Reflection.TypeAttributes.Sealed","System::Reflection::TypeAttributes::Sealed","System.Reflection.TypeAttributes.SequentialLayout","System::Reflection::TypeAttributes::SequentialLayout","System.Reflection.TypeAttributes.Serializable","System::Reflection::TypeAttributes::Serializable","System.Reflection.TypeAttributes.SpecialName","System::Reflection::TypeAttributes::SpecialName","System.Reflection.TypeAttributes.StringFormatMask","System::Reflection::TypeAttributes::StringFormatMask","System.Reflection.TypeAttributes.UnicodeClass","System::Reflection::TypeAttributes::UnicodeClass","System.Reflection.TypeAttributes.VisibilityMask","System::Reflection::TypeAttributes::VisibilityMask","System.Reflection.TypeAttributes.WindowsRuntime","System::Reflection::TypeAttributes::WindowsRuntime"],"dev_langs":["csharp"],"updated_at":"2017-03-24 01:41 AM","document_id":"bdfbd96c-9823-b9f5-febc-f8011f2fa167","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeAttributes.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"TypeAttributes enum | Microsoft Docs","_op_ogTitle":"TypeAttributes enum","description":"Specifies type attributes.\n","toc_asset_id":"api/_splitted/System.Reflection/toc.json","toc_rel":"_splitted/System.Reflection/toc.json","source_url":"","ms.assetid":"System.Reflection.TypeAttributes","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.typeattributes","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.typeattributes","fileRelativePath":"api/System.Reflection.TypeAttributes.html"},"themesRelativePathToOutputRoot":"_themes/"}