{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">SqlBulkCopy</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Lets you efficiently bulk load a SQL Server table with data from another source.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public sealed class SqlBulkCopy : IDisposable</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span></div><span class=\"lang-csharp\">SqlBulkCopy</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Microsoft SQL Server includes a popular command-prompt utility named <strong>bcp</strong> for moving data from one table to another, whether on a single server or between servers. The SqlBulkCopy class lets you write managed code solutions that provide similar functionality. There are other ways to load data into a SQL Server table (INSERT statements, for example), but SqlBulkCopy offers a significant performance advantage over them.  </p>\n<p> The SqlBulkCopy class can be used to write data only to SQL Server tables. However, the data source is not limited to SQL Server; any data source can be used, as long as the data can be loaded to a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> instance or read with a <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> instance.  </p>\n<p> SqlBulkCopy will fail when bulk loading a <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> column of type <a class=\"xref\" href=\"system.data.sqltypes.sqldatetime\" data-linktype=\"relative-path\">SqlDateTime</a> into a SQL Server column whose type is one of the date/time types added in SQL Server 2008.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Data_SqlClient_SqlBulkCopy__ctor_System_Data_SqlClient_SqlConnection_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SqlBulkCopy(SqlConnection)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> class using the specified open instance of <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>connection</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The already open <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> instance that will be used to perform the bulk copy operation. If your connection string does not use <code>Integrated Security = true</code>, you can use <a class=\"xref\" href=\"system.data.sqlclient.sqlcredential\" data-linktype=\"relative-path\">SqlCredential</a> to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Because the connection is already open when the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> instance is initialized, the connection remains open after the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> instance is closed.  </p>\n<p> If the <code>connection</code> argument is null, an <a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a> is thrown.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Data_SqlClient_SqlBulkCopy__ctor_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SqlBulkCopy(String)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes and opens a new instance of <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> based on the supplied <code>connectionString</code>. The constructor uses the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> to initialize a new instance of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public SqlBulkCopy (string connectionString);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>connectionString</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string defining the connection that will be opened for use by the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> instance. If your connection string does not use <code>Integrated Security = true</code>, you can use <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.#ctor*</span> or <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.#ctor*</span> and <a class=\"xref\" href=\"system.data.sqlclient.sqlcredential\" data-linktype=\"relative-path\">SqlCredential</a> to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The connection is automatically closed at the end of the bulk copy operation.  </p>\n<p> If <code>connectionString</code> is null, an <a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a> is thrown. If <code>connectionString</code> is an empty string, an <a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a> is thrown.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Data_SqlClient_SqlBulkCopy__ctor_System_String_System_Data_SqlClient_SqlBulkCopyOptions_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SqlBulkCopy(String,SqlBulkCopyOptions)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes and opens a new instance of <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> based on the supplied <code>connectionString</code>. The constructor uses that <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> to initialize a new instance of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> class. The <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> instance behaves according to options supplied in the <code>copyOptions</code> parameter.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public SqlBulkCopy (string connectionString, System.Data.SqlClient.SqlBulkCopyOptions copyOptions);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>connectionString</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string defining the connection that will be opened for use by the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> instance. If your connection string does not use <code>Integrated Security = true</code>, you can use <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.#ctor*</span> or <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.#ctor*</span> and <a class=\"xref\" href=\"system.data.sqlclient.sqlcredential\" data-linktype=\"relative-path\">SqlCredential</a> to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>copyOptions</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopyoptions\" data-linktype=\"relative-path\">SqlBulkCopyOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A combination of values from the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopyoptions\" data-linktype=\"relative-path\">SqlBulkCopyOptions</a> enumeration that determines which data source rows are copied to the destination table.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>You can obtain detailed information about all the bulk copy options in the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopyoptions\" data-linktype=\"relative-path\">SqlBulkCopyOptions</a> topic.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Data_SqlClient_SqlBulkCopy__ctor_System_Data_SqlClient_SqlConnection_System_Data_SqlClient_SqlBulkCopyOptions_System_Data_SqlClient_SqlTransaction_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> class using the supplied existing open instance of <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a>. The <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> instance behaves according to options supplied in the <code>copyOptions</code> parameter. If a non-null <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction\" data-linktype=\"relative-path\">SqlTransaction</a> is supplied, the copy operations will be performed within that transaction.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlBulkCopyOptions copyOptions, System.Data.SqlClient.SqlTransaction externalTransaction);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>connection</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The already open <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> instance that will be used to perform the bulk copy. If your connection string does not use <code>Integrated Security = true</code>, you can use <a class=\"xref\" href=\"system.data.sqlclient.sqlcredential\" data-linktype=\"relative-path\">SqlCredential</a> to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>copyOptions</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopyoptions\" data-linktype=\"relative-path\">SqlBulkCopyOptions</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A combination of values from the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopyoptions\" data-linktype=\"relative-path\">SqlBulkCopyOptions</a> enumeration that determines which data source rows are copied to the destination table.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>externalTransaction</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqltransaction\" data-linktype=\"relative-path\">SqlTransaction</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An existing <a class=\"xref\" href=\"system.data.sqlclient.sqltransaction\" data-linktype=\"relative-path\">SqlTransaction</a> instance under which the bulk copy will occur.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If options include <code>UseInternalTransaction</code> and the <code>externalTransaction</code> argument is not null, an <strong>InvalidArgumentException</strong> is thrown.  </p>\n<p> For examples demonstrating how to use <code>SqlBulkCopy</code> in a transaction, see <a href=\"../topic/transaction%20and%20bulk%20copy%20operations\" data-linktype=\"relative-path\">Transaction and Bulk Copy Operations</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Data_SqlClient_SqlBulkCopy_BatchSize\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">BatchSize</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Number of rows in each batch. At the end of each batch, the rows in the batch are sent to the server.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int BatchSize { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The integer value of the BatchSize property, or zero if no value has been set.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>A batch is complete when BatchSize rows have been processed or there are no more rows to send to the destination data source.  </p>\n<p> Zero (the default) indicates that each <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_WriteToServer_\" data-linktype=\"relative-path\">WriteToServer</a> operation is a single batch.  </p>\n<p> If the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> instance has been declared without the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopyoptions\" data-linktype=\"relative-path\">SqlBulkCopyOptions</a> option in effect, rows are sent to the server BatchSize rows at a time, but no transaction-related action is taken. If <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopyoptions\" data-linktype=\"relative-path\">SqlBulkCopyOptions</a> is in effect, each batch of rows is inserted as a separate transaction.  </p>\n<p> The BatchSize property can be set at any time. If a bulk copy is already in progress, the current batch is sized according to the previous batch size. Subsequent batches use the new size. If the BatchSize is initially zero and changed while a <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_WriteToServer_\" data-linktype=\"relative-path\">WriteToServer</a> operation is already in progress, that operation loads the data as a single batch. Any subsequent <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_WriteToServer_\" data-linktype=\"relative-path\">WriteToServer</a> operations on the same <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> instance use the new BatchSize.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Data_SqlClient_SqlBulkCopy_BulkCopyTimeout\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">BulkCopyTimeout</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Number of seconds for the operation to complete before it times out.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int BulkCopyTimeout { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The integer value of the BulkCopyTimeout property. The default is 30 seconds. A value of 0 indicates no limit; the bulk copy will wait indefinitely.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If the operation does time out, the transaction is not committed and all copied rows are removed from the destination table.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Data_SqlClient_SqlBulkCopy_ColumnMappings\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ColumnMappings</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a collection of <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmapping\" data-linktype=\"relative-path\">SqlBulkCopyColumnMapping</a> items. Column mappings define the relationships between columns in the data source and columns in the destination.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopycolumnmappingcollection\" data-linktype=\"relative-path\">SqlBulkCopyColumnMappingCollection</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A collection of column mappings. By default, it is an empty collection.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If the data source and the destination table have the same number of columns, and the ordinal position of each source column within the data source matches the ordinal position of the corresponding destination column, the ColumnMappings collection is unnecessary. However, if the column counts differ, or the ordinal positions are not consistent, you must use ColumnMappings to make sure that data is copied into the correct columns.  </p>\n<p> During the execution of a bulk copy operation, this collection can be accessed, but it cannot be changed. Any attempt to change it will throw an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Data_SqlClient_SqlBulkCopy_DestinationTableName\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">DestinationTableName</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Name of the destination table on the server.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string DestinationTableName { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The string value of the DestinationTableName property, or null if none as been supplied.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>If DestinationTableName has not been set when <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_WriteToServer_\" data-linktype=\"relative-path\">WriteToServer</a> is called, an <a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a> is thrown.  </p>\n<p> If DestinationTableName is modified while a <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_WriteToServer_\" data-linktype=\"relative-path\">WriteToServer</a> operation is running, the change does not affect the current operation. The new DestinationTableName value is used the next time a <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_WriteToServer_\" data-linktype=\"relative-path\">WriteToServer</a> method is called.  </p>\n<p> DestinationTableName is a three-part name (<code>&lt;database&gt;.&lt;owningschema&gt;.&lt;name&gt;</code>). You can qualify the table name with its database and owning schema if you choose. However, if the table name uses an underscore (&quot;_&quot;) or any other special characters, you must escape the name using surrounding brackets as in (<code>[&lt;database&gt;.&lt;owningschema&gt;.&lt;name_01&gt;]</code>). For more information, see &quot;Identifiers&quot; in SQL Server Books Online.  </p>\n<p> You can bulk-copy data to a temporary table by using a value such as <code>tempdb..#table</code> or <code>tempdb.&lt;owner&gt;.#table</code> for the DestinationTableName property.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Data_SqlClient_SqlBulkCopy_EnableStreaming\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">EnableStreaming</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Enables or disables a <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object to stream data from an <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> object</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool EnableStreaming { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if a <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object can stream data from an <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> object; otherwise, false. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When EnableStreaming is <code>true</code>, <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> reads from an <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> object using <a class=\"xref\" href=\"system.data.commandbehavior\" data-linktype=\"relative-path\">CommandBehavior</a>, optimizing memory usage by using the <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> streaming capabilities. When it’s set to false, the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> class loads all the data returned by the <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> object into memory before sending it to SQL Server or SQL Azure.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Data_SqlClient_SqlBulkCopy_NotifyAfter\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">NotifyAfter</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Defines the number of rows to be processed before generating a notification event.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int NotifyAfter { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The integer value of the NotifyAfter property, or zero if the property has not been set.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This property is designed for user interface components that illustrate the progress of a bulk copy operation. It indicates the number of rows to be processed before generating a notification event. The NotifyAfter property can be set at any time, even while a bulk copy operation is underway. Changes made during a bulk copy operation take effect after the next notification. The new setting applies to all subsequent operations on the same instance.  </p>\n<p> If NotifyAfter is set to a number less than zero, an <a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a> is thrown.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Data_SqlClient_SqlBulkCopy_Close\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Close()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Closes the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Close ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>After you call a Close on the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object, no other operation will succeed. Calls to the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_WriteToServer_\" data-linktype=\"relative-path\">WriteToServer</a> method will throw an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a>.  </p>\n<p> Calling the Close method from the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_SqlRowsCopied\" data-linktype=\"relative-path\">SqlRowsCopied</a> event causes an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> to be thrown.  </p>\n<p> Note that open <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> instances are closed implicitly at the end of a <code>using</code> block.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServer_System_Data_Common_DbDataReader_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">WriteToServer(DbDataReader)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Copies all rows from the supplied <a class=\"xref\" href=\"system.data.common.dbdatareader\" data-linktype=\"relative-path\">DbDataReader</a> array to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void WriteToServer (System.Data.Common.DbDataReader reader);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>reader</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.common.dbdatareader\" data-linktype=\"relative-path\">DbDataReader</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.data.common.dbdatareader\" data-linktype=\"relative-path\">DbDataReader</a> whose rows will be copied to the destination table.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServer_System_Data_DataRow___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">WriteToServer(DataRow[])</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Copies all rows from the supplied <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> array to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void WriteToServer (System.Data.DataRow[] rows);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>rows</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array of <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects that will be copied to the destination table.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>While the bulk copy operation is in progress, the associated destination <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> is busy serving it, and no other operations can be performed on the connection.  </p>\n<p> The <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_ColumnMappings_\" data-linktype=\"relative-path\">ColumnMappings</a> collection maps from the <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> columns to the destination database table.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServer_System_Data_DataTable_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">WriteToServer(DataTable)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Copies all rows in the supplied <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void WriteToServer (System.Data.DataTable table);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>table</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> whose rows will be copied to the destination table.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>All rows in the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> are copied to the destination table except those that have been deleted.  </p>\n<p> While the bulk copy operation is in progress, the associated destination <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> is busy serving it, and no other operations can be performed on the connection.  </p>\n<p> The <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_ColumnMappings_\" data-linktype=\"relative-path\">ColumnMappings</a> collection maps from the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> columns to the destination database table.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServer_System_Data_IDataReader_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">WriteToServer(IDataReader)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Copies all rows in the supplied <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void WriteToServer (System.Data.IDataReader reader);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>reader</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> whose rows will be copied to the destination table.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The copy operation starts at the next available row in the reader. Most of the time, the reader was just returned by <a class=\"xref\" href=\"system.data.idbcommand#System_Data_IDbCommand_ExecuteReader_\" data-linktype=\"relative-path\">ExecuteReader</a> or a similar call, so the next available row is the first row. To process multiple results, call <a class=\"xref\" href=\"system.data.idatareader#System_Data_IDataReader_NextResult_\" data-linktype=\"relative-path\">NextResult</a> on the data reader and call WriteToServer again.  </p>\n<p> Note that using WriteToServer modifies the state of the reader. The method will call <a class=\"xref\" href=\"system.data.idatareader#System_Data_IDataReader_Read_\" data-linktype=\"relative-path\">Read</a> until it returns false, the operation is aborted, or an error occurs. This means that the data reader will be in a different state, probably at the end of the result set, when the WriteToServer operation is complete.  </p>\n<p> While the bulk copy operation is in progress, the associated destination <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> is busy serving it, and no other operations can be performed on the connection.  </p>\n<p> The <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_ColumnMappings_\" data-linktype=\"relative-path\">ColumnMappings</a> collection maps from the data reader columns to the destination database table.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServer_System_Data_DataTable_System_Data_DataRowState_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">WriteToServer(DataTable,DataRowState)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Copies only rows that match the supplied row state in the supplied <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void WriteToServer (System.Data.DataTable table, System.Data.DataRowState rowState);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>table</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> whose rows will be copied to the destination table.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>rowState</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A value from the <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> enumeration. Only rows matching the row state are copied to the destination.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Only rows in the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> that are in the states indicated in the <code>rowState</code> argument and have not been deleted are copied to the destination table.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> If <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> is specified, any <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a>, <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a>, and <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> rows will also be copied to the server. No exception will be raised.  </p>\n</div>\n<p> While the bulk copy operation is in progress, the associated destination <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> is busy serving it, and no other operations can be performed on the connection.  </p>\n<p> The <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_ColumnMappings_\" data-linktype=\"relative-path\">ColumnMappings</a> collection maps from the <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> columns to the destination database table.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_System_Data_Common_DbDataReader_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">WriteToServerAsync(DbDataReader)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>The asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span>, which copies all rows from the supplied <a class=\"xref\" href=\"system.data.common.dbdatareader\" data-linktype=\"relative-path\">DbDataReader</a> array to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>reader</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.common.dbdatareader\" data-linktype=\"relative-path\">DbDataReader</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.data.common.dbdatareader\" data-linktype=\"relative-path\">DbDataReader</a> whose rows will be copied to the destination table.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A task representing the asynchronous operation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_System_Data_DataRow___\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">WriteToServerAsync(DataRow[])</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>The asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span>, which copies all rows from the supplied <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> array to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>rows</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array of <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects that will be copied to the destination table.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A task representing the asynchronous operation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Calling WriteToServerAsync multiple times for the same instance before task completion.  </p>\n<p> Calling WriteToServerAsync and <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span> for the same instance before task completion.  </p>\n<p> The connection drops or is closed during WriteToServerAsync execution.  </p>\n<p> Returned in the task object, the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object was closed during the method execution.  </p>\n<p> Returned in the task object, there was a connection pool timeout.  </p>\n<p> Returned in the task object, the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> object is closed before method execution.  </p>\n<p> <code>Context Connection=true</code> is specified in the connection string.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Returned in the task object, any error returned by SQL Server that occurred while opening the connection.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see <a href=\"../topic/asynchronous%20programming\" data-linktype=\"relative-path\">Asynchronous Programming</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_System_Data_DataTable_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">WriteToServerAsync(DataTable)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>The asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span>, which copies all rows in the supplied <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>table</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> whose rows will be copied to the destination table.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A task representing the asynchronous operation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Calling WriteToServerAsync multiple times for the same instance before task completion.  </p>\n<p> Calling WriteToServerAsync and <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span> for the same instance before task completion.  </p>\n<p> The connection drops or is closed during WriteToServerAsync execution.  </p>\n<p> Returned in the task object, the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object was closed during the method execution.  </p>\n<p> Returned in the task object, there was a connection pool timeout.  </p>\n<p> Returned in the task object, the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> object is closed before method execution.  </p>\n<p> <code>Context Connection=true</code> is specified in the connection string.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Returned in the task object, any error returned by SQL Server that occurred while opening the connection.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see <a href=\"../topic/asynchronous%20programming\" data-linktype=\"relative-path\">Asynchronous Programming</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_System_Data_IDataReader_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">WriteToServerAsync(IDataReader)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>The asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span>, which copies all rows in the supplied <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>reader</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> whose rows will be copied to the destination table.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A task representing the asynchronous operation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Calling WriteToServerAsync multiple times for the same instance before task completion.  </p>\n<p> Calling WriteToServerAsync and <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span> for the same instance before task completion.  </p>\n<p> The connection drops or is closed during WriteToServerAsync execution.  </p>\n<p> Returned in the task object, the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object was closed during the method execution.  </p>\n<p> Returned in the task object, there was a connection pool timeout.  </p>\n<p> Returned in the task object, the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> object is closed before method execution.  </p>\n<p> The <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> was closed before the completed <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> returned.  </p>\n<p> The <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a>&#39;s associated connection was closed before the completed <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> returned.  </p>\n<p> <code>Context Connection=true</code> is specified in the connection string.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Returned in the task object, any error returned by SQL Server that occurred while opening the connection.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see <a href=\"../topic/asynchronous%20programming\" data-linktype=\"relative-path\">Asynchronous Programming</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_System_Data_Common_DbDataReader_System_Threading_CancellationToken_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">WriteToServerAsync(DbDataReader,CancellationToken)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>The asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span>, which copies all rows from the supplied <a class=\"xref\" href=\"system.data.common.dbdatareader\" data-linktype=\"relative-path\">DbDataReader</a> array to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>reader</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.common.dbdatareader\" data-linktype=\"relative-path\">DbDataReader</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.data.common.dbdatareader\" data-linktype=\"relative-path\">DbDataReader</a> whose rows will be copied to the destination table.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>cancellationToken</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The cancellation instruction. A <span class=\"xref\">stem.Threading.CancellationToken.None*</span> value in this parameter makes this method equivalent to <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*</span>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Returns <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_System_Data_DataRow___System_Threading_CancellationToken_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">WriteToServerAsync(DataRow[],CancellationToken)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>The asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span>, which copies all rows from the supplied <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> array to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.  </p>\n<p> The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.  Exceptions will be reported via the returned Task object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>rows</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An array of <a class=\"xref\" href=\"system.data.datarow\" data-linktype=\"relative-path\">DataRow</a> objects that will be copied to the destination table.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>cancellationToken</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The cancellation instruction. A <span class=\"xref\">stem.Threading.CancellationToken.None*</span> value in this parameter makes this method equivalent to <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*</span>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A task representing the asynchronous operation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Calling <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*</span> multiple times for the same instance before task completion.  </p>\n<p> Calling <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*</span> and <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span> for the same instance before task completion.  </p>\n<p> The connection drops or is closed during <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*</span> execution.  </p>\n<p> Returned in the task object, the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object was closed during the method execution.  </p>\n<p> Returned in the task object, there was a connection pool timeout.  </p>\n<p> Returned in the task object, the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> object is closed before method execution.  </p>\n<p> <code>Context Connection=true</code> is specified in the connection string.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Returned in the task object, any error returned by SQL Server that occurred while opening the connection.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see <a href=\"../topic/asynchronous%20programming\" data-linktype=\"relative-path\">Asynchronous Programming</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_System_Data_DataTable_System_Data_DataRowState_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">WriteToServerAsync(DataTable,DataRowState)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>The asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span>, which copies only rows that match the supplied row state in the supplied <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>table</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> whose rows will be copied to the destination table.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>rowState</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A value from the <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> enumeration. Only rows matching the row state are copied to the destination.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A task representing the asynchronous operation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Calling WriteToServerAsync multiple times for the same instance before task completion.  </p>\n<p> Calling WriteToServerAsync and <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span> for the same instance before task completion.  </p>\n<p> The connection drops or is closed during WriteToServerAsync execution.  </p>\n<p> Returned in the task object, the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object was closed during the method execution.  </p>\n<p> Returned in the task object, there was a connection pool timeout.  </p>\n<p> Returned in the task object, the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> object is closed before method execution.  </p>\n<p> <code>Context Connection=true</code> is specified in the connection string.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Returned in the task object, any error returned by SQL Server that occurred while opening the connection.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see <a href=\"../topic/asynchronous%20programming\" data-linktype=\"relative-path\">Asynchronous Programming</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_System_Data_DataTable_System_Threading_CancellationToken_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">WriteToServerAsync(DataTable,CancellationToken)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>The asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span>, which copies all rows in the supplied <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.  </p>\n<p> The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.  Exceptions will be reported via the returned Task object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>table</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> whose rows will be copied to the destination table.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>cancellationToken</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The cancellation instruction. A <span class=\"xref\">stem.Threading.CancellationToken.None*</span> value in this parameter makes this method equivalent to <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*</span>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A task representing the asynchronous operation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Calling <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*</span> multiple times for the same instance before task completion.  </p>\n<p> Calling <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*</span> and <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span> for the same instance before task completion.  </p>\n<p> The connection drops or is closed during <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*</span> execution.  </p>\n<p> Returned in the task object, the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object was closed during the method execution.  </p>\n<p> Returned in the task object, there was a connection pool timeout.  </p>\n<p> Returned in the task object, the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> object is closed before method execution.  </p>\n<p> <code>Context Connection=true</code> is specified in the connection string.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Returned in the task object, any error returned by SQL Server that occurred while opening the connection.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see <a href=\"../topic/asynchronous%20programming\" data-linktype=\"relative-path\">Asynchronous Programming</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_System_Data_IDataReader_System_Threading_CancellationToken_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">WriteToServerAsync(IDataReader,CancellationToken)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>The asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span>, which copies all rows in the supplied <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.  </p>\n<p> The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.  Exceptions will be reported via the returned Task object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>reader</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> whose rows will be copied to the destination table.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>cancellationToken</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The cancellation instruction. A <span class=\"xref\">stem.Threading.CancellationToken.None*</span> value in this parameter makes this method equivalent to <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*</span>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A task representing the asynchronous operation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Calling <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*</span> multiple times for the same instance before task completion.  </p>\n<p> Calling <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*</span> and <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span> for the same instance before task completion.  </p>\n<p> The connection drops or is closed during <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*</span> execution.  </p>\n<p> Returned in the task object, the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object was closed during the method execution.  </p>\n<p> Returned in the task object, there was a connection pool timeout.  </p>\n<p> Returned in the task object, the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> object is closed before method execution.  </p>\n<p> The <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a> was closed before the completed <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> returned.  </p>\n<p> The <a class=\"xref\" href=\"system.data.idatareader\" data-linktype=\"relative-path\">IDataReader</a>&#39;s associated connection was closed before the completed <a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a> returned.  </p>\n<p> <code>Context Connection=true</code> is specified in the connection string.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Returned in the task object, any error returned by SQL Server that occurred while opening the connection.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see <a href=\"../topic/asynchronous%20programming\" data-linktype=\"relative-path\">Asynchronous Programming</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Data_SqlClient_SqlBulkCopy_WriteToServerAsync_System_Data_DataTable_System_Data_DataRowState_System_Threading_CancellationToken_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">WriteToServerAsync(DataTable,DataRowState,CancellationToken)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>The asynchronous version of <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span>, which copies only rows that match the supplied row state in the supplied <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> to a destination table specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.DestinationTableName*</span> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object.  </p>\n<p> The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.  Exceptions will be reported via the returned Task object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState, System.Threading.CancellationToken cancellationToken);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>table</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.data.datatable\" data-linktype=\"relative-path\">DataTable</a> whose rows will be copied to the destination table.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>rowState</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A value from the <a class=\"xref\" href=\"system.data.datarowstate\" data-linktype=\"relative-path\">DataRowState</a> enumeration. Only rows matching the row state are copied to the destination.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>cancellationToken</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.cancellationtoken\" data-linktype=\"relative-path\">CancellationToken</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The cancellation instruction. A <span class=\"xref\">stem.Threading.CancellationToken.None*</span> value in this parameter makes this method equivalent to <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*</span>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.threading.tasks.task\" data-linktype=\"relative-path\">Task</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A task representing the asynchronous operation.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Calling <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*</span> multiple times for the same instance before task completion.  </p>\n<p> Calling <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*</span> and <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServer*</span> for the same instance before task completion.  </p>\n<p> The connection drops or is closed during <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*</span> execution.  </p>\n<p> Returned in the task object, the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object was closed during the method execution.  </p>\n<p> Returned in the task object, there was a connection pool timeout.  </p>\n<p> Returned in the task object, the <a class=\"xref\" href=\"system.data.sqlclient.sqlconnection\" data-linktype=\"relative-path\">SqlConnection</a> object is closed before method execution.  </p>\n<p> <code>Context Connection=true</code> is specified in the connection string.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.data.sqlclient.sqlexception\" data-linktype=\"relative-path\">SqlException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>Returned in the task object, any error returned by SQL Server that occurred while opening the connection.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see <a href=\"../topic/asynchronous%20programming\" data-linktype=\"relative-path\">Asynchronous Programming</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Events\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Data_SqlClient_SqlBulkCopy_SqlRowsCopied\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SqlRowsCopied</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs every time that the number of rows specified by the <span class=\"xref\">stem.Data.SqlClient.SqlBulkCopy.NotifyAfter*</span> property have been processed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Note that the settings of <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_NotifyAfter_\" data-linktype=\"relative-path\">NotifyAfter</a> and <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_BatchSize_\" data-linktype=\"relative-path\">BatchSize</a> are independent. Receipt of a SqlRowsCopied event does not imply that any rows have been sent to the server or committed.  </p>\n<p> You cannot call SqlBulkCopy.Close (<a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy#System_Data_SqlClient_SqlBulkCopy_Close_\" data-linktype=\"relative-path\">Close</a>) or SqlConnection.Close (<a class=\"xref\" href=\"system.data.sqlclient.sqlconnection#System_Data_SqlClient_SqlConnection_Close_\" data-linktype=\"relative-path\">Close</a>) from this event. Doing this will cause an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> being thrown, and the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object state will not change. If the user wants to cancel the operation from the event, the <a class=\"xref\" href=\"system.data.sqlclient.sqlrowscopiedeventargs#System_Data_SqlClient_SqlRowsCopiedEventArgs_Abort_\" data-linktype=\"relative-path\">Abort</a> property of the <a class=\"xref\" href=\"system.data.sqlclient.sqlrowscopiedeventargs\" data-linktype=\"relative-path\">SqlRowsCopiedEventArgs</a> can be used. (See <a href=\"../topic/transaction%20and%20bulk%20copy%20operations\" data-linktype=\"relative-path\">Transaction and Bulk Copy Operations</a> for examples that use the <a class=\"xref\" href=\"system.data.sqlclient.sqlrowscopiedeventargs#System_Data_SqlClient_SqlRowsCopiedEventArgs_Abort_\" data-linktype=\"relative-path\">Abort</a> property.)  </p>\n<p> No action, such as transaction activity, is supported in the connection during the execution of the bulk copy operation, and it is recommended that you not use the same connection used during the SqlRowsCopied event. However, you can open a different connection.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Explicit Interface Implementations\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Data_SqlClient_SqlBulkCopy_System_IDisposable_Dispose\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IDisposable.Dispose()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Releases all resources used by the current instance of the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">void IDisposable.Dispose ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Call <code>Dispose</code> when you are finished using the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a>. The <code>Dispose</code> method leaves the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> in an unusable state. After calling <code>Dispose</code>, you must release all references to the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> so the garbage collector can reclaim the memory that the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> was occupying.  </p>\n<p> For more information, see <a href=\"../topic/cleaning%20up%20unmanaged%20resources\" data-linktype=\"relative-path\">Cleaning Up Unmanaged Resources</a> and <a href=\"../topic/implementing%20a%20dispose%20method\" data-linktype=\"relative-path\">Implementing a Dispose Method</a>.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Always call <code>Dispose</code> before you release your last reference to the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <a class=\"xref\" href=\"system.data.sqlclient.sqlbulkcopy\" data-linktype=\"relative-path\">SqlBulkCopy</a> object&#39;s <code>Finalize</code> method.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet-all/api/toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Data.SqlClient.SqlBulkCopy.yml\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopy\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopy..ctor\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopy.BatchSize\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopy.Close\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopy.ColumnMappings\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopy.DestinationTableName\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopy.EnableStreaming\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopy.NotifyAfter\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopy.add_SqlRowsCopied\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopy.remove_SqlRowsCopied\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopy.IDisposable.Dispose\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopy.WriteToServer\">\r\n<meta name=\"APIName\" content=\"System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync\">\r\n<meta name=\"APILocation\" content=\"System.Data.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-22 02:45 AM\">\r\n<meta name=\"document_id\" content=\"25499f6d-1c16-8f3a-86c0-ee01f29f5e49\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Lets you efficiently bulk load a SQL Server table with data from another source.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.data.sqlclient/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Data.SqlClient.SqlBulkCopy\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet-internal/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Data.SqlClient.SqlBulkCopy.yml","open_to_public_contributors":false,"api_name":["System.Data.SqlClient.SqlBulkCopy","System.Data.SqlClient.SqlBulkCopy..ctor","System.Data.SqlClient.SqlBulkCopy.BatchSize","System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout","System.Data.SqlClient.SqlBulkCopy.Close","System.Data.SqlClient.SqlBulkCopy.ColumnMappings","System.Data.SqlClient.SqlBulkCopy.DestinationTableName","System.Data.SqlClient.SqlBulkCopy.EnableStreaming","System.Data.SqlClient.SqlBulkCopy.NotifyAfter","System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied","System.Data.SqlClient.SqlBulkCopy.add_SqlRowsCopied","System.Data.SqlClient.SqlBulkCopy.remove_SqlRowsCopied","System.Data.SqlClient.SqlBulkCopy.IDisposable.Dispose","System.Data.SqlClient.SqlBulkCopy.WriteToServer","System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync"],"api_location":["System.Data.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Data.SqlClient.SqlBulkCopy","System::Data::SqlClient::SqlBulkCopy","System.Data.SqlClient.SqlBulkCopy.#ctor","System::Data::SqlClient::SqlBulkCopy::#ctor","System.Data.SqlClient.SqlBulkCopy.BatchSize","System::Data::SqlClient::SqlBulkCopy::BatchSize","System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout","System::Data::SqlClient::SqlBulkCopy::BulkCopyTimeout","System.Data.SqlClient.SqlBulkCopy.Close","System::Data::SqlClient::SqlBulkCopy::Close","System.Data.SqlClient.SqlBulkCopy.ColumnMappings","System::Data::SqlClient::SqlBulkCopy::ColumnMappings","System.Data.SqlClient.SqlBulkCopy.DestinationTableName","System::Data::SqlClient::SqlBulkCopy::DestinationTableName","System.Data.SqlClient.SqlBulkCopy.EnableStreaming","System::Data::SqlClient::SqlBulkCopy::EnableStreaming","System.Data.SqlClient.SqlBulkCopy.NotifyAfter","System::Data::SqlClient::SqlBulkCopy::NotifyAfter","System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied","System::Data::SqlClient::SqlBulkCopy::SqlRowsCopied","System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose","System::Data::SqlClient::SqlBulkCopy::System#IDisposable#Dispose","System.Data.SqlClient.SqlBulkCopy.WriteToServer","System::Data::SqlClient::SqlBulkCopy::WriteToServer","System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync","System::Data::SqlClient::SqlBulkCopy::WriteToServerAsync"],"dev_langs":["csharp"],"updated_at":"2017-03-22 02:45 AM","document_id":"25499f6d-1c16-8f3a-86c0-ee01f29f5e49","content_git_url":"https://github.com/TianqiZhang/ECMA2YamlTestRepo2/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SqlBulkCopy class | Microsoft Docs","_op_ogTitle":"SqlBulkCopy class","description":"Lets you efficiently bulk load a SQL Server table with data from another source.\n","toc_asset_id":"api/_splitted/System.Data.SqlClient/toc.json","toc_rel":"_splitted/System.Data.SqlClient/toc.json","source_url":"","ms.assetid":"System.Data.SqlClient.SqlBulkCopy","canonical_url":"https://docs.microsoft.com/en-us/dotnet-all/api/system.data.sqlclient.sqlbulkcopy","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet-all/api/system.data.sqlclient.sqlbulkcopy","fileRelativePath":"api/System.Data.SqlClient.SqlBulkCopy.html"},"themesRelativePathToOutputRoot":"_themes/"}