{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">PingCompletedEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that will handle the <a class=\"xref\" href=\"system.net.networkinformation.ping#System_Net_NetworkInformation_Ping_PingCompleted\" data-linktype=\"relative-path\">PingCompleted</a> event of a <a class=\"xref\" href=\"system.net.networkinformation.ping\" data-linktype=\"relative-path\">Ping</a> object.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void PingCompletedEventHandler(object sender, PingCompletedEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">PingCompletedEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates specifying a PingCompletedEventHandler to respond to a <a class=\"xref\" href=\"system.net.networkinformation.ping#System_Net_NetworkInformation_Ping_PingCompleted\" data-linktype=\"relative-path\">PingCompleted</a> event.  </p>\n<pre><code class=\"lang-cpp\" name=\"NclPingAsync#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Text;\nusing namespace System::Net;\nusing namespace System::Net::NetworkInformation;\nusing namespace System::ComponentModel;\nusing namespace System::Threading;\nvoid PingCompletedCallback( Object^ sender, PingCompletedEventArgs^ e );\nvoid DisplayReply( PingReply^ reply );\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n   if ( args-&gt;Length == 1 )\n      throw gcnew ArgumentException( &quot;Ping needs a host or IP Address.&quot; );\n\n   String^ who = args[ 1 ];\n   AutoResetEvent^ waiter = gcnew AutoResetEvent( false );\n   \n   Ping ^ pingSender = gcnew Ping;\n   \n   // When the PingCompleted event is raised,\n   // the PingCompletedCallback method is called.\n   pingSender-&gt;PingCompleted += gcnew PingCompletedEventHandler( PingCompletedCallback );\n   \n   // Create a buffer of 32 bytes of data to be transmitted.\n   String^ data = &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;;\n   array&lt;Byte&gt;^buffer = Encoding::ASCII-&gt;GetBytes( data );\n   \n   // Wait 12 seconds for a reply.\n   int timeout = 12000;\n   \n   // Set options for transmission:\n   // The data can go through 64 gateways or routers\n   // before it is destroyed, and the data packet\n   // cannot be fragmented.\n   PingOptions ^ options = gcnew PingOptions( 64,true );\n   Console::WriteLine( &quot;Time to live: {0}&quot;, options-&gt;Ttl );\n   Console::WriteLine( &quot;Don&#39;t fragment: {0}&quot;, options-&gt;DontFragment );\n   \n   // Send the ping asynchronously.\n   // Use the waiter as the user token.\n   // When the callback completes, it can wake up this thread.\n   pingSender-&gt;SendAsync( who, timeout, buffer, options, waiter );\n   \n   // Prevent this example application from ending.\n   // A real application should do something useful\n   // when possible.\n   waiter-&gt;WaitOne();\n   Console::WriteLine( &quot;Ping example completed.&quot; );\n}\n\n\nvoid PingCompletedCallback( Object^ /*sender*/, PingCompletedEventArgs^ e )\n{\n   \n   // If the operation was canceled, display a message to the user.\n   if ( e-&gt;Cancelled )\n   {\n      Console::WriteLine( &quot;Ping canceled.&quot; );\n      \n      // Let the main thread resume. \n      // UserToken is the AutoResetEvent object that the main thread \n      // is waiting for.\n      (dynamic_cast&lt;AutoResetEvent^&gt;(e-&gt;UserState))-&gt;Set();\n   }\n\n   \n   // If an error occurred, display the exception to the user.\n   if ( e-&gt;Error != nullptr )\n   {\n      Console::WriteLine( &quot;Ping failed:&quot; );\n      Console::WriteLine( e-&gt;Error-&gt;ToString() );\n      \n      // Let the main thread resume. \n      (dynamic_cast&lt;AutoResetEvent^&gt;(e-&gt;UserState))-&gt;Set();\n   }\n\n   PingReply ^ reply = e-&gt;Reply;\n   DisplayReply( reply );\n   \n   // Let the main thread resume.\n   (dynamic_cast&lt;AutoResetEvent^&gt;(e-&gt;UserState))-&gt;Set();\n}\n\n\nvoid DisplayReply( PingReply ^ reply )\n{\n   if ( reply == nullptr )\n      return;\n\n   Console::WriteLine( &quot;ping status: {0}&quot;, reply-&gt;Status );\n   if ( reply-&gt;Status == IPStatus::Success )\n   {\n      Console::WriteLine( &quot;Address: {0}&quot;, reply-&gt;Address-&gt;ToString() );\n      Console::WriteLine( &quot;RoundTrip time: {0}&quot;, reply-&gt;RoundtripTime );\n      Console::WriteLine( &quot;Time to live: {0}&quot;, reply-&gt;Options-&gt;Ttl );\n      Console::WriteLine( &quot;Don&#39;t fragment: {0}&quot;, reply-&gt;Options-&gt;DontFragment );\n      Console::WriteLine( &quot;Buffer size: {0}&quot;, reply-&gt;Buffer-&gt;Length );\n   }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"NclPingAsync#1\">using System;\nusing System.Text;\nusing System.Net;\nusing System.Net.NetworkInformation;\nusing System.ComponentModel;\nusing System.Threading;\n\nnamespace Examples.System.Net.NetworkInformation.PingTest\n{\n    public class PingExample\n    {\n        public static void Main (string[] args)\n        {\n            if (args.Length == 0)\n                throw new ArgumentException (&quot;Ping needs a host or IP Address.&quot;);\n\n            string who = args[0];\n            AutoResetEvent waiter = new AutoResetEvent (false);\n\n            Ping pingSender = new Ping ();\n\n            // When the PingCompleted event is raised,\n            // the PingCompletedCallback method is called.\n            pingSender.PingCompleted += new PingCompletedEventHandler (PingCompletedCallback);\n\n            // Create a buffer of 32 bytes of data to be transmitted.\n            string data = &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;;\n            byte[] buffer = Encoding.ASCII.GetBytes (data);\n\n            // Wait 12 seconds for a reply.\n            int timeout = 12000;\n\n            // Set options for transmission:\n            // The data can go through 64 gateways or routers\n            // before it is destroyed, and the data packet\n            // cannot be fragmented.\n            PingOptions options = new PingOptions (64, true);\n\n            Console.WriteLine (&quot;Time to live: {0}&quot;, options.Ttl);\n            Console.WriteLine (&quot;Don&#39;t fragment: {0}&quot;, options.DontFragment);\n\n            // Send the ping asynchronously.\n            // Use the waiter as the user token.\n            // When the callback completes, it can wake up this thread.\n            pingSender.SendAsync(who, timeout, buffer, options, waiter);\n\n            // Prevent this example application from ending.\n            // A real application should do something useful\n            // when possible.\n            waiter.WaitOne ();\n            Console.WriteLine (&quot;Ping example completed.&quot;);\n        }\n\n        private static void PingCompletedCallback (object sender, PingCompletedEventArgs e)\n        {\n            // If the operation was canceled, display a message to the user.\n            if (e.Cancelled)\n            {\n                Console.WriteLine (&quot;Ping canceled.&quot;);\n\n                // Let the main thread resume. \n                // UserToken is the AutoResetEvent object that the main thread \n                // is waiting for.\n                ((AutoResetEvent)e.UserState).Set ();\n            }\n\n            // If an error occurred, display the exception to the user.\n            if (e.Error != null)\n            {\n                Console.WriteLine (&quot;Ping failed:&quot;);\n                Console.WriteLine (e.Error.ToString ());\n\n                // Let the main thread resume. \n                ((AutoResetEvent)e.UserState).Set();\n            }\n\n            PingReply reply = e.Reply;\n\n            DisplayReply (reply);\n\n            // Let the main thread resume.\n            ((AutoResetEvent)e.UserState).Set();\n        }\n\n        public static void DisplayReply (PingReply reply)\n        {\n            if (reply == null)\n                return;\n\n            Console.WriteLine (&quot;ping status: {0}&quot;, reply.Status);\n            if (reply.Status == IPStatus.Success)\n            {\n                Console.WriteLine (&quot;Address: {0}&quot;, reply.Address.ToString ());\n                Console.WriteLine (&quot;RoundTrip time: {0}&quot;, reply.RoundtripTime);\n                Console.WriteLine (&quot;Time to live: {0}&quot;, reply.Options.Ttl);\n                Console.WriteLine (&quot;Don&#39;t fragment: {0}&quot;, reply.Options.DontFragment);\n                Console.WriteLine (&quot;Buffer size: {0}&quot;, reply.Buffer.Length);\n            }\n        }\n    }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>User data that is specified in a <a class=\"xref\" href=\"system.net.networkinformation.ping#System_Net_NetworkInformation_Ping_SendAsync_\" data-linktype=\"relative-path\">SendAsync</a> call is available to the method invoked by this delegate in the <a class=\"xref\" href=\"system.componentmodel.asynccompletedeventargs#System_ComponentModel_AsyncCompletedEventArgs_UserState_\" data-linktype=\"relative-path\">UserState</a> property.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Net.NetworkInformation.PingCompletedEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.PingCompletedEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.PingCompletedEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.PingCompletedEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.PingCompletedEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.PingCompletedEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"e3d4c0a0-028b-cf5e-e3d4-b9bbf2347ab7\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that will handle the  event of a  object.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.net.networkinformation/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.NetworkInformation.PingCompletedEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Net.NetworkInformation.PingCompletedEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Net.NetworkInformation.PingCompletedEventHandler","System.Net.NetworkInformation.PingCompletedEventHandler..ctor","System.Net.NetworkInformation.PingCompletedEventHandler.Invoke","System.Net.NetworkInformation.PingCompletedEventHandler.BeginInvoke","System.Net.NetworkInformation.PingCompletedEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.NetworkInformation.PingCompletedEventHandler","System::Net::NetworkInformation::PingCompletedEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"e3d4c0a0-028b-cf5e-e3d4-b9bbf2347ab7","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Net.NetworkInformation/PingCompletedEventHandler.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"PingCompletedEventHandler delegate | Microsoft Docs","_op_ogTitle":"PingCompletedEventHandler delegate","description":"Represents the method that will handle the  event of a  object.\n","toc_asset_id":"api/_splitted/System.Net.NetworkInformation/toc.json","toc_rel":"_splitted/System.Net.NetworkInformation/toc.json","source_url":"","ms.assetid":"System.Net.NetworkInformation.PingCompletedEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.net.networkinformation.pingcompletedeventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.net.networkinformation.pingcompletedeventhandler","fileRelativePath":"api/System.Net.NetworkInformation.PingCompletedEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}