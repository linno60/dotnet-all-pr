{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">DragDropEffects</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies the possible effects of a drag-and-drop operation.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Flags]\npublic enum DragDropEffects</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">System.Enum</a></span></div><span class=\"lang-csharp\">DragDropEffects</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>This code example demonstrates using the DragDropEffects enumeration when the user moves the mouse over the drop target during a drag-and-drop operation. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method of the <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a> class. See the <a class=\"xref\" href=\"system.windows.forms.control#System_Windows_Forms_Control_DoDragDrop_\" data-linktype=\"relative-path\">DoDragDrop</a> method for the complete code example.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.Control.DoDragDrop#4\">      void ListDragTarget_DragOver( Object^ /*sender*/, System::Windows::Forms::DragEventArgs^ e )\n      {\n         // Determine whether string data exists in the drop data. If not, then\n         // the drop effect reflects that the drop cannot occur.\n         if (  !e-&gt;Data-&gt;GetDataPresent( System::String::typeid ) )\n         {\n            e-&gt;Effect = DragDropEffects::None;\n            DropLocationLabel-&gt;Text = &quot;None - no string data.&quot;;\n            return;\n         }\n\n         // Set the effect based upon the KeyState.\n         if ( (e-&gt;KeyState &amp; (8 + 32)) == (8 + 32) &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Link) == DragDropEffects::Link) )\n         {\n            // KeyState 8 + 32 = CTL + ALT\n            // Link drag-and-drop effect.\n            e-&gt;Effect = DragDropEffects::Link;\n         }\n         else\n         if ( (e-&gt;KeyState &amp; 32) == 32 &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Link) == DragDropEffects::Link) )\n         {\n            // ALT KeyState for link.\n            e-&gt;Effect = DragDropEffects::Link;\n         }\n         else\n         if ( (e-&gt;KeyState &amp; 4) == 4 &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Move) == DragDropEffects::Move) )\n         {\n            // SHIFT KeyState for move.\n            e-&gt;Effect = DragDropEffects::Move;\n         }\n         else\n         if ( (e-&gt;KeyState &amp; 8) == 8 &amp;&amp; ((e-&gt;AllowedEffect &amp; DragDropEffects::Copy) == DragDropEffects::Copy) )\n         {\n            // CTL KeyState for copy.\n            e-&gt;Effect = DragDropEffects::Copy;\n         }\n         else\n         if ( (e-&gt;AllowedEffect &amp; DragDropEffects::Move) == DragDropEffects::Move )\n         {\n            // By default, the drop action should be move, if allowed.\n            e-&gt;Effect = DragDropEffects::Move;\n         }\n         else\n                  e-&gt;Effect = DragDropEffects::None;\n\n\n\n\n\n         \n         // Get the index of the item the mouse is below.\n         // The mouse locations are relative to the screen, so they must be\n         // converted to client coordinates.\n         indexOfItemUnderMouseToDrop = ListDragTarget-&gt;IndexFromPoint( ListDragTarget-&gt;PointToClient( Point(e-&gt;X,e-&gt;Y) ) );\n         \n         // Updates the label text.\n         if ( indexOfItemUnderMouseToDrop != ListBox::NoMatches )\n         {\n            DropLocationLabel-&gt;Text = String::Concat( &quot;Drops before item # &quot;, (indexOfItemUnderMouseToDrop + 1) );\n         }\n         else\n                  DropLocationLabel-&gt;Text = &quot;Drops at the end.&quot;;\n      }\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.Control.DoDragDrop#4\">    Private Sub ListDragTarget_DragOver(ByVal sender As Object, ByVal e As DragEventArgs) Handles ListDragTarget.DragOver\n        &#39; Determine whether string data exists in the drop data. If not, then\n        &#39; the drop effect reflects that the drop cannot occur.\n        If Not (e.Data.GetDataPresent(GetType(System.String))) Then\n\n            e.Effect = DragDropEffects.None\n            DropLocationLabel.Text = &quot;None - no string data.&quot;\n            Return\n        End If\n\n        &#39; Set the effect based upon the KeyState.\n        If ((e.KeyState And (8 + 32)) = (8 + 32) And _\n            (e.AllowedEffect And DragDropEffects.Link) = DragDropEffects.Link) Then\n            &#39; KeyState 8 + 32 = CTL + ALT\n\n            &#39; Link drag-and-drop effect.\n            e.Effect = DragDropEffects.Link\n\n        ElseIf ((e.KeyState And 32) = 32 And _\n            (e.AllowedEffect And DragDropEffects.Link) = DragDropEffects.Link) Then\n\n            &#39; ALT KeyState for link.\n            e.Effect = DragDropEffects.Link\n\n        ElseIf ((e.KeyState And 4) = 4 And _\n            (e.AllowedEffect And DragDropEffects.Move) = DragDropEffects.Move) Then\n\n            &#39; SHIFT KeyState for move.\n            e.Effect = DragDropEffects.Move\n\n        ElseIf ((e.KeyState And 8) = 8 And _\n            (e.AllowedEffect And DragDropEffects.Copy) = DragDropEffects.Copy) Then\n\n            &#39; CTL KeyState for copy.\n            e.Effect = DragDropEffects.Copy\n\n        ElseIf ((e.AllowedEffect And DragDropEffects.Move) = DragDropEffects.Move) Then\n\n            &#39; By default, the drop action should be move, if allowed.\n            e.Effect = DragDropEffects.Move\n\n        Else\n            e.Effect = DragDropEffects.None\n        End If\n\n        &#39; Gets the index of the item the mouse is below. \n\n        &#39; The mouse locations are relative to the screen, so they must be \n        &#39; converted to client coordinates.\n\n        indexOfItemUnderMouseToDrop = _\n            ListDragTarget.IndexFromPoint(ListDragTarget.PointToClient(New Point(e.X, e.Y)))\n\n        &#39; Updates the label text.\n        If (indexOfItemUnderMouseToDrop &lt;&gt; ListBox.NoMatches) Then\n\n            DropLocationLabel.Text = &quot;Drops before item #&quot; &amp; (indexOfItemUnderMouseToDrop + 1)\n        Else\n            DropLocationLabel.Text = &quot;Drops at the end.&quot;\n        End If\n\n    End Sub\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.Control.DoDragDrop#4\">        private void ListDragTarget_DragOver(object sender, System.Windows.Forms.DragEventArgs e) \n        {\n\n            // Determine whether string data exists in the drop data. If not, then\n            // the drop effect reflects that the drop cannot occur.\n            if (!e.Data.GetDataPresent(typeof(System.String))) {\n\n                e.Effect = DragDropEffects.None;\n                DropLocationLabel.Text = &quot;None - no string data.&quot;;\n                return;\n            }\n\n            // Set the effect based upon the KeyState.\n            if ((e.KeyState &amp; (8+32)) == (8+32) &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Link) == DragDropEffects.Link) {\n                // KeyState 8 + 32 = CTL + ALT\n\n                // Link drag-and-drop effect.\n                e.Effect = DragDropEffects.Link;\n\n            } else if ((e.KeyState &amp; 32) == 32 &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Link) == DragDropEffects.Link) {\n\n                // ALT KeyState for link.\n                e.Effect = DragDropEffects.Link;\n\n            } else if ((e.KeyState &amp; 4) == 4 &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Move) == DragDropEffects.Move) {\n\n                // SHIFT KeyState for move.\n                e.Effect = DragDropEffects.Move;\n\n            } else if ((e.KeyState &amp; 8) == 8 &amp;&amp; \n                (e.AllowedEffect &amp; DragDropEffects.Copy) == DragDropEffects.Copy) {\n\n                // CTL KeyState for copy.\n                e.Effect = DragDropEffects.Copy;\n\n            } else if ((e.AllowedEffect &amp; DragDropEffects.Move) == DragDropEffects.Move)  {\n\n                // By default, the drop action should be move, if allowed.\n                e.Effect = DragDropEffects.Move;\n\n            } else\n                e.Effect = DragDropEffects.None;\n                \n            // Get the index of the item the mouse is below. \n\n            // The mouse locations are relative to the screen, so they must be \n            // converted to client coordinates.\n\n            indexOfItemUnderMouseToDrop = \n                ListDragTarget.IndexFromPoint(ListDragTarget.PointToClient(new Point(e.X, e.Y)));\n\n            // Updates the label text.\n            if (indexOfItemUnderMouseToDrop != ListBox.NoMatches){\n\n                DropLocationLabel.Text = &quot;Drops before item #&quot; + (indexOfItemUnderMouseToDrop + 1);\n            } else\n                DropLocationLabel.Text = &quot;Drops at the end.&quot;;\n\n        }\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>This enumeration is used by the following classes: <a class=\"xref\" href=\"system.windows.forms.drageventargs\" data-linktype=\"relative-path\">DragEventArgs</a>, <a class=\"xref\" href=\"system.windows.forms.givefeedbackeventargs\" data-linktype=\"relative-path\">GiveFeedbackEventArgs</a>, and <a class=\"xref\" href=\"system.windows.forms.control\" data-linktype=\"relative-path\">Control</a>.  </p>\n<p> You can use DragDropEffects to display different mouse pointers for drag-and-drop operations. For example, you can display a plus symbol for a Copy drag-and-drop operation, an arrow symbol for a Move drag-and-drop operation, or a red circle with a line through it symbol for a None drag-and-drop operation.  </p>\n<p> If you want to drop data at a position in the target that is not currently visible, you could scroll the target while dragging. If a target does not support scrolling, you must make sure that the drop position is visible in the target before you begin the drag-and-drop operation. The following are some scenarios when you might want to scroll a target:  </p>\n<ul>\n<li><p>You are dragging text into a document, and you want to drop the text at a position not visible in the document window.  </p>\n</li>\n<li><p>You are dragging a file into a file tree, and you want to drop the file on a node not visible in the file tree.</p>\n</li>\n</ul>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Windows_Forms_DragDropEffects_All\">\r\n      \t\t\t<span class=\"lang-csharp\">All</span>\r\n      \t</td>\r\n      \t<td><p>The combination of the <span class=\"xref\">stem.Windows.DragDropEffects.Copy</span>, Move, and Scroll effects.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_DragDropEffects_Copy\">\r\n      \t\t\t<span class=\"lang-csharp\">Copy</span>\r\n      \t</td>\r\n      \t<td><p>The data from the drag source is copied to the drop target.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_DragDropEffects_Link\">\r\n      \t\t\t<span class=\"lang-csharp\">Link</span>\r\n      \t</td>\r\n      \t<td><p>The data from the drag source is linked to the drop target.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_DragDropEffects_Move\">\r\n      \t\t\t<span class=\"lang-csharp\">Move</span>\r\n      \t</td>\r\n      \t<td><p>The data from the drag source is moved to the drop target.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_DragDropEffects_None\">\r\n      \t\t\t<span class=\"lang-csharp\">None</span>\r\n      \t</td>\r\n      \t<td><p>The drop target does not accept the data.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_DragDropEffects_Scroll\">\r\n      \t\t\t<span class=\"lang-csharp\">Scroll</span>\r\n      \t</td>\r\n      \t<td><p>The target can be scrolled while dragging to locate a drop position that is not currently visible in the target.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.DragDropEffects.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DragDropEffects\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DragDropEffects.All\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DragDropEffects.Copy\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DragDropEffects.Link\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DragDropEffects.Move\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DragDropEffects.None\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DragDropEffects.Scroll\">\r\n<meta name=\"APILocation\" content=\"System.Windows.Forms.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-24 01:41 AM\">\r\n<meta name=\"document_id\" content=\"97e2c049-fd8e-8cd9-f1dd-df6de07edc03\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies the possible effects of a drag-and-drop operation.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.windows.forms/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.DragDropEffects\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.DragDropEffects.yml","open_to_public_contributors":false,"api_name":["System.Windows.Forms.DragDropEffects","System.Windows.Forms.DragDropEffects.All","System.Windows.Forms.DragDropEffects.Copy","System.Windows.Forms.DragDropEffects.Link","System.Windows.Forms.DragDropEffects.Move","System.Windows.Forms.DragDropEffects.None","System.Windows.Forms.DragDropEffects.Scroll"],"api_location":["System.Windows.Forms.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.DragDropEffects","System::Windows::Forms::DragDropEffects","System.Windows.Forms.DragDropEffects.All","System::Windows::Forms::DragDropEffects::All","System.Windows.Forms.DragDropEffects.Copy","System::Windows::Forms::DragDropEffects::Copy","System.Windows.Forms.DragDropEffects.Link","System::Windows::Forms::DragDropEffects::Link","System.Windows.Forms.DragDropEffects.Move","System::Windows::Forms::DragDropEffects::Move","System.Windows.Forms.DragDropEffects.None","System::Windows::Forms::DragDropEffects::None","System.Windows.Forms.DragDropEffects.Scroll","System::Windows::Forms::DragDropEffects::Scroll"],"dev_langs":["csharp"],"updated_at":"2017-03-24 01:41 AM","document_id":"97e2c049-fd8e-8cd9-f1dd-df6de07edc03","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/DragDropEffects.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DragDropEffects enum | Microsoft Docs","_op_ogTitle":"DragDropEffects enum","description":"Specifies the possible effects of a drag-and-drop operation.\n","toc_asset_id":"api/_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.DragDropEffects","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.dragdropeffects","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.dragdropeffects","fileRelativePath":"api/System.Windows.Forms.DragDropEffects.html"},"themesRelativePathToOutputRoot":"_themes/"}