{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">CaptureCollection</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the set of captures made by a single capturing group.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public class CaptureCollection : System.Collections.ICollection</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span></div><span class=\"lang-csharp\">CaptureCollection</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object,Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example compares the <a class=\"xref\" href=\"system.text.regularexpressions.capture\" data-linktype=\"relative-path\">Capture</a> objects in the CaptureCollection object returned by the <a class=\"xref\" href=\"system.text.regularexpressions.group#System_Text_RegularExpressions_Group_Captures_\" data-linktype=\"relative-path\">Captures</a> and <code>Match.Captures</code> properties. It also compares <a class=\"xref\" href=\"system.text.regularexpressions.group\" data-linktype=\"relative-path\">Group</a> objects with the <a class=\"xref\" href=\"system.text.regularexpressions.capture\" data-linktype=\"relative-path\">Capture</a> objects in the CaptureCollection returned by the <a class=\"xref\" href=\"system.text.regularexpressions.group#System_Text_RegularExpressions_Group_Captures_\" data-linktype=\"relative-path\">Captures</a> property. The example uses the following two regular expressions to find matches in a single input string:  </p>\n<ul>\n<li><p><code>\\b\\w+\\W{1,2}</code>  </p>\n<p> This regular expression pattern identifies a word that consists of one or more word characters, followed by either one or two non-word characters such as white space or punctuation. The regular expression does not include any capturing groups. The output from the example shows that both the <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> object and the CaptureCollection objects returned by the <a class=\"xref\" href=\"system.text.regularexpressions.group#System_Text_RegularExpressions_Group_Captures_\" data-linktype=\"relative-path\">Captures</a> and <code>Match.Captures</code> properties contain information about the same match.  </p>\n</li>\n<li><p><code>(\\b\\w+\\W{1,2})+</code>  </p>\n<p> This regular expression pattern identifies the words in a sentence. The pattern defines a single capturing group that consists of one or more word characters followed by one or two non-word characters. The regular expression pattern uses the <code>+</code> quantifier to match one or more occurrences of this group. The output from this example shows that the <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> object and the CaptureCollection object returned by the <code>Match.Captures</code> property contain information about the same match. The second <a class=\"xref\" href=\"system.text.regularexpressions.group\" data-linktype=\"relative-path\">Group</a> object, which corresponds to the only capturing group in the regular expression, identifies only the last captured string, whereas the CaptureCollection object returned by the first capturing group&#39;s <a class=\"xref\" href=\"system.text.regularexpressions.group#System_Text_RegularExpressions_Group_Captures_\" data-linktype=\"relative-path\">Captures</a> property includes all captured substrings.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Text.RegularExpressions.CaptureCollection#1\">using System;\nusing System.Text.RegularExpressions;\n\npublic class Example\n{\n   public static void Main()\n   {\n      string pattern;  \n      string input = &quot;The young, hairy, and tall dog slowly walked across the yard.&quot;;\n      Match match;\n\n      // Match a word with a pattern that has no capturing groups.\n      pattern = @&quot;\\b\\w+\\W{1,2}&quot;;\n      match = Regex.Match(input, pattern);\n      Console.WriteLine(&quot;Pattern: &quot; + pattern);\n      Console.WriteLine(&quot;Match: &quot; + match.Value);\n      Console.WriteLine(&quot;  Match.Captures: {0}&quot;, match.Captures.Count);\n      for (int ctr = 0; ctr &lt; match.Captures.Count; ctr++)\n         Console.WriteLine(&quot;    {0}: &#39;{1}&#39;&quot;, ctr, match.Captures[ctr].Value);\n      Console.WriteLine(&quot;  Match.Groups: {0}&quot;, match.Groups.Count);\n      for (int groupCtr = 0; groupCtr &lt; match.Groups.Count; groupCtr++)\n      {\n         Console.WriteLine(&quot;    Group {0}: &#39;{1}&#39;&quot;, \n                           groupCtr, match.Groups[groupCtr].Value);\n         Console.WriteLine(&quot;    Group({0}).Captures: {1}&quot;, \n                           groupCtr, match.Groups[groupCtr].Captures.Count);\n         for (int captureCtr = 0; captureCtr &lt; match.Groups[groupCtr].Captures.Count; captureCtr++)\n            Console.WriteLine(&quot;      Capture {0}: &#39;{1}&#39;&quot;, \n                              captureCtr, \n                              match.Groups[groupCtr].Captures[captureCtr].Value);\n      }\n      Console.WriteLine(&quot;-----\\n&quot;);\n\n      // Match a sentence with a pattern that has a quantifier that \n      // applies to the entire group.\n      pattern = @&quot;(\\b\\w+\\W{1,2})+&quot;;\n      match = Regex.Match(input, pattern);\n      Console.WriteLine(&quot;Pattern: &quot; + pattern);\n      Console.WriteLine(&quot;Match: &quot; + match.Value);\n      Console.WriteLine(&quot;  Match.Captures: {0}&quot;, match.Captures.Count);\n      for (int ctr = 0; ctr &lt; match.Captures.Count; ctr++)\n         Console.WriteLine(&quot;    {0}: &#39;{1}&#39;&quot;, ctr, match.Captures[ctr].Value);\n      \n      Console.WriteLine(&quot;  Match.Groups: {0}&quot;, match.Groups.Count);\n      for (int groupCtr = 0; groupCtr &lt; match.Groups.Count; groupCtr++)\n      {\n         Console.WriteLine(&quot;    Group {0}: &#39;{1}&#39;&quot;, groupCtr, match.Groups[groupCtr].Value);\n         Console.WriteLine(&quot;    Group({0}).Captures: {1}&quot;, \n                           groupCtr, match.Groups[groupCtr].Captures.Count);\n         for (int captureCtr = 0; captureCtr &lt; match.Groups[groupCtr].Captures.Count; captureCtr++)\n            Console.WriteLine(&quot;      Capture {0}: &#39;{1}&#39;&quot;, captureCtr, match.Groups[groupCtr].Captures[captureCtr].Value);\n      }\n   }\n}\n// The example displays the following output:\n//    Pattern: \\b\\w+\\W{1,2}\n//    Match: The\n//      Match.Captures: 1\n//        0: &#39;The &#39;\n//      Match.Groups: 1\n//        Group 0: &#39;The &#39;\n//        Group(0).Captures: 1\n//          Capture 0: &#39;The &#39;\n//    -----\n//    \n//    Pattern: (\\b\\w+\\W{1,2})+\n//    Match: The young, hairy, and tall dog slowly walked across the yard.\n//      Match.Captures: 1\n//        0: &#39;The young, hairy, and tall dog slowly walked across the yard.&#39;\n//      Match.Groups: 2\n//        Group 0: &#39;The young, hairy, and tall dog slowly walked across the yard.&#39;\n//        Group(0).Captures: 1\n//          Capture 0: &#39;The young, hairy, and tall dog slowly walked across the yard.&#39;\n//        Group 1: &#39;yard.&#39;\n//        Group(1).Captures: 11\n//          Capture 0: &#39;The &#39;\n//          Capture 1: &#39;young, &#39;\n//          Capture 2: &#39;hairy, &#39;\n//          Capture 3: &#39;and &#39;\n//          Capture 4: &#39;tall &#39;\n//          Capture 5: &#39;dog &#39;\n//          Capture 6: &#39;slowly &#39;\n//          Capture 7: &#39;walked &#39;\n//          Capture 8: &#39;across &#39;\n//          Capture 9: &#39;the &#39;\n//          Capture 10: &#39;yard.&#39;\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Text.RegularExpressions.CaptureCollection#1\">Imports System.Text.RegularExpressions\n\nModule Example\n   Public Sub Main()\n      Dim pattern As String  \n      Dim input As String = &quot;The young, hairy, and tall dog slowly walked across the yard.&quot;\n      Dim match As Match\n\n      &#39; Match a word with a pattern that has no capturing groups.\n      pattern = &quot;\\b\\w+\\W{1,2}&quot;\n      match = Regex.Match(input, pattern)\n      Console.WriteLine(&quot;Pattern: &quot; + pattern)\n      Console.WriteLine(&quot;Match: &quot; + match.Value)\n      Console.WriteLine(&quot;  Match.Captures: {0}&quot;, match.Captures.Count)\n      For ctr As Integer = 0 To match.Captures.Count - 1\n         Console.WriteLine(&quot;    {0}: &#39;{1}&#39;&quot;, ctr, match.Captures(ctr).Value)\n      Next\n      Console.WriteLine(&quot;  Match.Groups: {0}&quot;, match.Groups.Count)\n      For groupCtr As Integer = 0 To match.Groups.Count - 1\n         Console.WriteLine(&quot;    Group {0}: &#39;{1}&#39;&quot;, groupCtr, match.Groups(groupCtr).Value)\n         Console.WriteLine(&quot;    Group({0}).Captures: {1}&quot;, _\n                           groupCtr, match.Groups(groupCtr).Captures.Count)\n         For captureCtr As Integer = 0 To match.Groups(groupCtr).Captures.Count - 1\n            Console.WriteLine(&quot;      Capture {0}: &#39;{1}&#39;&quot;, _\n                              captureCtr, _\n                              match.Groups(groupCtr).Captures(captureCtr).Value)\n         Next\n      Next\n      Console.WriteLine(&quot;-----&quot;)\n      Console.WriteLine()\n\n      &#39; Match a sentence with a pattern that has a quantifier that \n      &#39; applies to the entire group.\n      pattern = &quot;(\\b\\w+\\W{1,2})+&quot;\n      match = Regex.Match(input, pattern)\n      Console.WriteLine(&quot;Pattern: &quot; + pattern)\n      Console.WriteLine(&quot;Match: &quot; + match.Value)\n      Console.WriteLine(&quot;  Match.Captures: {0}&quot;, match.Captures.Count)\n      For ctr As Integer = 0 To match.Captures.Count - 1\n         Console.WriteLine(&quot;    {0}: &#39;{1}&#39;&quot;, ctr, match.Captures(ctr).Value)\n      Next\n      Console.WriteLine(&quot;  Match.Groups: {0}&quot;, match.Groups.Count)\n      For groupCtr As Integer = 0 To match.Groups.Count - 1\n         Console.WriteLine(&quot;    Group {0}: &#39;{1}&#39;&quot;, groupCtr, match.Groups(groupCtr).Value)\n         Console.WriteLine(&quot;    Group({0}).Captures: {1}&quot;, _\n                           groupCtr, match.Groups(groupCtr).Captures.Count)\n         For captureCtr As Integer = 0 To match.Groups(groupCtr).Captures.Count - 1\n            Console.WriteLine(&quot;      Capture {0}: &#39;{1}&#39;&quot;, captureCtr, match.Groups(groupCtr).Captures(captureCtr).Value)\n         Next\n      Next\n   End Sub\nEnd Module\n&#39; The example displays the following output:\n&#39;    Pattern: \\b\\w+\\W{1,2}\n&#39;    Match: The\n&#39;      Match.Captures: 1\n&#39;        0: &#39;The &#39;\n&#39;      Match.Groups: 1\n&#39;        Group 0: &#39;The &#39;\n&#39;        Group(0).Captures: 1\n&#39;          Capture 0: &#39;The &#39;\n&#39;    -----\n&#39;    \n&#39;    Pattern: (\\b\\w+\\W{1,2})+\n&#39;    Match: The young, hairy, and tall dog slowly walked across the yard.\n&#39;      Match.Captures: 1\n&#39;        0: &#39;The young, hairy, and tall dog slowly walked across the yard.&#39;\n&#39;      Match.Groups: 2\n&#39;        Group 0: &#39;The young, hairy, and tall dog slowly walked across the yard.&#39;\n&#39;        Group(0).Captures: 1\n&#39;          Capture 0: &#39;The young, hairy, and tall dog slowly walked across the yard.&#39;\n&#39;        Group 1: &#39;yard.&#39;\n&#39;        Group(1).Captures: 11\n&#39;          Capture 0: &#39;The &#39;\n&#39;          Capture 1: &#39;young, &#39;\n&#39;          Capture 2: &#39;hairy, &#39;\n&#39;          Capture 3: &#39;and &#39;\n&#39;          Capture 4: &#39;tall &#39;\n&#39;          Capture 5: &#39;dog &#39;\n&#39;          Capture 6: &#39;slowly &#39;\n&#39;          Capture 7: &#39;walked &#39;\n&#39;          Capture 8: &#39;across &#39;\n&#39;          Capture 9: &#39;the &#39;\n&#39;          Capture 10: &#39;yard.&#39;\n</code></pre></li>\n</ul>\n\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The collection is immutable (read-only) and has no public constructor. The CaptureCollection object contains one or more <a class=\"xref\" href=\"system.text.regularexpressions.capture\" data-linktype=\"relative-path\">Capture</a> objects.  </p>\n<p> Instances of the CaptureCollection class are returned by the following properties:  </p>\n<ul>\n<li><p>The <a class=\"xref\" href=\"system.text.regularexpressions.group#System_Text_RegularExpressions_Group_Captures_\" data-linktype=\"relative-path\">Captures</a> property. Each member of the collection represents a substring captured by a capturing group. If a quantifier is not applied to a capturing group, the CaptureCollection includes a single <a class=\"xref\" href=\"system.text.regularexpressions.capture\" data-linktype=\"relative-path\">Capture</a> object that represents the same captured substring as the <a class=\"xref\" href=\"system.text.regularexpressions.group\" data-linktype=\"relative-path\">Group</a> object. If a quantifier is applied to a capturing group, the CaptureCollection includes one <a class=\"xref\" href=\"system.text.regularexpressions.capture\" data-linktype=\"relative-path\">Capture</a> object for each captured substring, and the <a class=\"xref\" href=\"system.text.regularexpressions.group\" data-linktype=\"relative-path\">Group</a> object provides information only about the last captured substring.  </p>\n</li>\n<li><p>The <code>Match.Captures</code> property. In this case, the collection consists of a single <a class=\"xref\" href=\"system.text.regularexpressions.capture\" data-linktype=\"relative-path\">Capture</a> object that provides information about the match as a whole. That is, the CaptureCollection object provides the same information as the <a class=\"xref\" href=\"system.text.regularexpressions.match\" data-linktype=\"relative-path\">Match</a> object.  </p>\n<p>To iterate through the members of the collection, you should use the collection iteration construct provided by your language (such as <code>foreach</code> in C# and <code>For Each</code>…<code>Next</code> in Visual Basic) instead of retrieving the enumerator that is returned by the <a class=\"xref\" href=\"system.text.regularexpressions.capturecollection#System_Text_RegularExpressions_CaptureCollection_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> method.</p>\n</li>\n</ul>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_CaptureCollection_Count\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Count</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the number of substrings captured by the group.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public int Count { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of items in the <a class=\"xref\" href=\"system.text.regularexpressions.capturecollection\" data-linktype=\"relative-path\">CaptureCollection</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_CaptureCollection_IsReadOnly\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsReadOnly</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether the collection is read only.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsReadOnly { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> in all cases.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_CaptureCollection_IsSynchronized\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsSynchronized</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether access to the collection is synchronized (thread-safe).</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsSynchronized { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>false</code> in all cases.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"WARNING\"><h5>Warning</h5><p> This member is not present in the Portable Class Library. If you are developing applications that target the Portable Class Library, use the &lt;xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23IsSynchronized%2A?displayProperty=fullName&gt; property instead.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_CaptureCollection_Item_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Item(Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets an individual member of the collection.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Text.RegularExpressions.Capture this[int i] { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>i</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Index into the capture collection.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.regularexpressions.capture\" data-linktype=\"relative-path\">Capture</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The captured substring at position <code>i</code> in the collection.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>i</code> is less than 0 or greater than <span class=\"xref\">stem.Text.RegularExpressions.CaptureCollection.Count*</span>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_CaptureCollection_SyncRoot\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SyncRoot</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets an object that can be used to synchronize access to the collection.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public object SyncRoot { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">System.Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that can be used to synchronize access to the collection.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<div class=\"WARNING\"><h5>Warning</h5><p> This member is not present in the Portable Class Library. If you are developing applications that target the Portable Class Library, use the &lt;xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23SyncRoot%2A?displayProperty=fullName&gt; property instead.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_CaptureCollection_CopyTo_System_Array_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CopyTo(Array,Int32)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Copies all the elements of the collection to the given array beginning at the given index.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void CopyTo (Array array, int arrayIndex);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>array</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.array\" data-linktype=\"relative-path\">Array</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The array the collection is to be copied into.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>arrayIndex</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The position in the destination array where copying is to begin.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentnullexception\" data-linktype=\"relative-path\">ArgumentNullException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>array </code>is <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentoutofrangeexception\" data-linktype=\"relative-path\">ArgumentOutOfRangeException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>arrayIndex</code> is outside the bounds of <code>array</code>.  </p>\n<p> -or-  </p>\n<p> <code>arrayIndex</code> plus <span class=\"xref\">stem.Text.RegularExpressions.CaptureCollection.Count*</span> is outside the bounds of <code>array</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Because the entire collection is copied into the array starting at the given index, the destination array must be at least as large as the collection.  </p>\n<div class=\"WARNING\"><h5>Warning</h5><p> This member is not present in the Portable Class Library. If you are developing applications that target the Portable Class Library, use the &lt;xref:System.Text.RegularExpressions.CaptureCollection.System%23Collections%23ICollection%23CopyTo%2A?displayProperty=fullName&gt; method instead.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_RegularExpressions_CaptureCollection_GetEnumerator\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetEnumerator()</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Provides an enumerator that iterates through the collection.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Collections.IEnumerator GetEnumerator ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.ienumerator\" data-linktype=\"relative-path\">IEnumerator</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that contains all <a class=\"xref\" href=\"system.text.regularexpressions.capture\" data-linktype=\"relative-path\">Capture</a> objects within the <a class=\"xref\" href=\"system.text.regularexpressions.capturecollection\" data-linktype=\"relative-path\">CaptureCollection</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Instead of calling the <a class=\"xref\" href=\"system.text.regularexpressions.groupcollection#System_Text_RegularExpressions_GroupCollection_GetEnumerator_\" data-linktype=\"relative-path\">GetEnumerator</a> method to retrieve an enumerator that lets you iterate through the <a class=\"xref\" href=\"system.text.regularexpressions.group\" data-linktype=\"relative-path\">Group</a> objects in the collection, you should use the group iteration construct (such as <code>foreach</code> in C# and <code>For Each</code>…<code>Next</code> in Visual Basic) that is provided by your programming language.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Text.RegularExpressions.CaptureCollection.yml\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.CaptureCollection\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.CaptureCollection.CopyTo\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.CaptureCollection.Count\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.CaptureCollection.GetEnumerator\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.CaptureCollection.IsReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.CaptureCollection.IsSynchronized\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.CaptureCollection.Item\">\r\n<meta name=\"APIName\" content=\"System.Text.RegularExpressions.CaptureCollection.SyncRoot\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-24 01:41 AM\">\r\n<meta name=\"document_id\" content=\"7ae68d09-8a00-8129-a4ed-2f9d00619c94\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the set of captures made by a single capturing group.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.text.regularexpressions/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Text.RegularExpressions.CaptureCollection\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Text.RegularExpressions.CaptureCollection.yml","open_to_public_contributors":false,"api_name":["System.Text.RegularExpressions.CaptureCollection","System.Text.RegularExpressions.CaptureCollection.CopyTo","System.Text.RegularExpressions.CaptureCollection.Count","System.Text.RegularExpressions.CaptureCollection.GetEnumerator","System.Text.RegularExpressions.CaptureCollection.IsReadOnly","System.Text.RegularExpressions.CaptureCollection.IsSynchronized","System.Text.RegularExpressions.CaptureCollection.Item","System.Text.RegularExpressions.CaptureCollection.SyncRoot"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Text.RegularExpressions.CaptureCollection","System::Text::RegularExpressions::CaptureCollection","System.Text.RegularExpressions.CaptureCollection.CopyTo","System::Text::RegularExpressions::CaptureCollection::CopyTo","System.Text.RegularExpressions.CaptureCollection.Count","System::Text::RegularExpressions::CaptureCollection::Count","System.Text.RegularExpressions.CaptureCollection.GetEnumerator","System::Text::RegularExpressions::CaptureCollection::GetEnumerator","System.Text.RegularExpressions.CaptureCollection.IsReadOnly","System::Text::RegularExpressions::CaptureCollection::IsReadOnly","System.Text.RegularExpressions.CaptureCollection.IsSynchronized","System::Text::RegularExpressions::CaptureCollection::IsSynchronized","System.Text.RegularExpressions.CaptureCollection.Item","System::Text::RegularExpressions::CaptureCollection::Item","System.Text.RegularExpressions.CaptureCollection.SyncRoot","System::Text::RegularExpressions::CaptureCollection::SyncRoot"],"dev_langs":["csharp"],"updated_at":"2017-03-24 01:41 AM","document_id":"7ae68d09-8a00-8129-a4ed-2f9d00619c94","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/CaptureCollection.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"CaptureCollection class | Microsoft Docs","_op_ogTitle":"CaptureCollection class","description":"Represents the set of captures made by a single capturing group.\n","toc_asset_id":"api/_splitted/System.Text.RegularExpressions/toc.json","toc_rel":"_splitted/System.Text.RegularExpressions/toc.json","source_url":"","ms.assetid":"System.Text.RegularExpressions.CaptureCollection","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.capturecollection","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.capturecollection","fileRelativePath":"api/System.Text.RegularExpressions.CaptureCollection.html"},"themesRelativePathToOutputRoot":"_themes/"}