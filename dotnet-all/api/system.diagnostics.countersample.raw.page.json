{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">CounterSample</span>\r\n      Struct\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Defines a structure that holds the raw data for a performance counter.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public struct CounterSample</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><span class=\"lang-csharp\">CounterSample</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example demonstrates the use of the CounterSample class to display data for a performance counter.  </p>\n<pre><code class=\"lang-cpp\" name=\"PerformanceCounterType.AverageCounter64#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Collections::Specialized;\nusing namespace System::Diagnostics;\n\n// Output information about the counter sample.\nvoid OutputSample( CounterSample s )\n{\n   Console::WriteLine( &quot;\\r\\n+++++++++++&quot; );\n   Console::WriteLine( &quot;Sample values - \\r\\n&quot; );\n   Console::WriteLine( &quot;   BaseValue        = {0}&quot;, s.BaseValue );\n   Console::WriteLine( &quot;   CounterFrequency = {0}&quot;, s.CounterFrequency );\n   Console::WriteLine( &quot;   CounterTimeStamp = {0}&quot;, s.CounterTimeStamp );\n   Console::WriteLine( &quot;   CounterType      = {0}&quot;, s.CounterType );\n   Console::WriteLine( &quot;   RawValue         = {0}&quot;, s.RawValue );\n   Console::WriteLine( &quot;   SystemFrequency  = {0}&quot;, s.SystemFrequency );\n   Console::WriteLine( &quot;   TimeStamp        = {0}&quot;, s.TimeStamp );\n   Console::WriteLine( &quot;   TimeStamp100nSec = {0}&quot;, s.TimeStamp100nSec );\n   Console::WriteLine( &quot;++++++++++++++++++++++&quot; );\n}\n\n//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n//    Description - This counter type shows how many items are processed, on average,\n//        during an operation. Counters of this type display a ratio of the items \n//        processed (such as bytes sent) to the number of operations completed. The  \n//        ratio is calculated by comparing the number of items processed during the \n//        last interval to the number of operations completed during the last interval. \n// Generic type - Average\n//      Formula - (N1 - N0) / (D1 - D0), where the numerator (N) represents the number \n//        of items processed during the last sample interval and the denominator (D) \n//        represents the number of operations completed during the last two sample \n//        intervals. \n//    Average (Nx - N0) / (Dx - D0)  \n//    Example PhysicalDisk\\ Avg. Disk Bytes/Transfer \n//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\nfloat MyComputeCounterValue( CounterSample s0, CounterSample s1 )\n{\n   float numerator = (float)s1.RawValue - (float)s0.RawValue;\n   float denomenator = (float)s1.BaseValue - (float)s0.BaseValue;\n   float counterValue = numerator / denomenator;\n   return counterValue;\n}\n\nbool SetupCategory()\n{\n   if (  !PerformanceCounterCategory::Exists( &quot;AverageCounter64SampleCategory&quot; ) )\n   {\n      CounterCreationDataCollection^ CCDC = gcnew CounterCreationDataCollection;\n      \n      // Add the counter.\n      CounterCreationData^ averageCount64 = gcnew CounterCreationData;\n      averageCount64-&gt;CounterType = PerformanceCounterType::AverageCount64;\n      averageCount64-&gt;CounterName = &quot;AverageCounter64Sample&quot;;\n      CCDC-&gt;Add( averageCount64 );\n      \n      // Add the base counter.\n      CounterCreationData^ averageCount64Base = gcnew CounterCreationData;\n      averageCount64Base-&gt;CounterType = PerformanceCounterType::AverageBase;\n      averageCount64Base-&gt;CounterName = &quot;AverageCounter64SampleBase&quot;;\n      CCDC-&gt;Add( averageCount64Base );\n      \n      // Create the category.\n      PerformanceCounterCategory::Create( &quot;AverageCounter64SampleCategory&quot;, &quot;Demonstrates usage of the AverageCounter64 performance counter type.&quot;, CCDC );\n      return (true);\n   }\n   else\n   {\n      Console::WriteLine( &quot;Category exists - AverageCounter64SampleCategory&quot; );\n      return (false);\n   }\n}\n\nvoid CreateCounters( PerformanceCounter^% PC, PerformanceCounter^% BPC )\n{\n   \n   // Create the counters.\n   PC = gcnew PerformanceCounter( &quot;AverageCounter64SampleCategory&quot;,&quot;AverageCounter64Sample&quot;,false );\n\n   BPC = gcnew PerformanceCounter( &quot;AverageCounter64SampleCategory&quot;,&quot;AverageCounter64SampleBase&quot;,false );\n   PC-&gt;RawValue = 0;\n   BPC-&gt;RawValue = 0;\n}\nvoid CollectSamples( ArrayList^ samplesList, PerformanceCounter^ PC, PerformanceCounter^ BPC )\n{\n   Random^ r = gcnew Random( DateTime::Now.Millisecond );\n\n   // Loop for the samples.\n   for ( int j = 0; j &lt; 100; j++ )\n   {\n      int value = r-&gt;Next( 1, 10 );\n      Console::Write( &quot;{0} = {1}&quot;, j, value );\n      PC-&gt;IncrementBy( value );\n      BPC-&gt;Increment();\n      if ( (j % 10) == 9 )\n      {\n         OutputSample( PC-&gt;NextSample() );\n         samplesList-&gt;Add( PC-&gt;NextSample() );\n      }\n      else\n            Console::WriteLine();\n      System::Threading::Thread::Sleep( 50 );\n   }\n}\n\nvoid CalculateResults( ArrayList^ samplesList )\n{\n   for ( int i = 0; i &lt; (samplesList-&gt;Count - 1); i++ )\n   {\n      // Output the sample.\n      OutputSample(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i ]) );\n      OutputSample(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i + 1 ]) );\n      \n      // Use .NET to calculate the counter value.\n      Console::WriteLine( &quot;.NET computed counter value = {0}&quot;, CounterSampleCalculator::ComputeCounterValue(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i ]),  *safe_cast&lt;CounterSample^&gt;(samplesList[ i + 1 ]) ) );\n      \n      // Calculate the counter value manually.\n      Console::WriteLine( &quot;My computed counter value = {0}&quot;, MyComputeCounterValue(  *safe_cast&lt;CounterSample^&gt;(samplesList[ i ]),  *safe_cast&lt;CounterSample^&gt;(samplesList[ i + 1 ]) ) );\n   }\n}\n\nint main()\n{\n   ArrayList^ samplesList = gcnew ArrayList;\n   PerformanceCounter^ PC;\n   PerformanceCounter^ BPC;\n   SetupCategory();\n   CreateCounters( PC, BPC );\n   CollectSamples( samplesList, PC, BPC );\n   CalculateResults( samplesList );\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"PerformanceCounterType.AverageCounter64#1\">\nusing System;\nusing System.Collections;\nusing System.Collections.Specialized;\nusing System.Diagnostics;\n\npublic class App {\n\n    private static PerformanceCounter avgCounter64Sample;\n    private static PerformanceCounter avgCounter64SampleBase;\n\n    public static void Main()\n    {\n    \n        ArrayList samplesList = new ArrayList();\n\n        // If the category does not exist, create the category and exit.\n        // Performance counters should not be created and immediately used.\n        // There is a latency time to enable the counters, they should be created\n        // prior to executing the application that uses the counters.\n        // Execute this sample a second time to use the category.\n        if (SetupCategory())\n            return;\n        CreateCounters();\n        CollectSamples(samplesList);\n        CalculateResults(samplesList);\n\n    }\n\n    private static bool SetupCategory()\n    {\n        if ( !PerformanceCounterCategory.Exists(&quot;AverageCounter64SampleCategory&quot;) ) \n        {\n\n            CounterCreationDataCollection counterDataCollection = new CounterCreationDataCollection();\n\n            // Add the counter.\n            CounterCreationData averageCount64 = new CounterCreationData();\n            averageCount64.CounterType = PerformanceCounterType.AverageCount64;\n            averageCount64.CounterName = &quot;AverageCounter64Sample&quot;;\n            counterDataCollection.Add(averageCount64);\n\n            // Add the base counter.\n            CounterCreationData averageCount64Base = new CounterCreationData();\n            averageCount64Base.CounterType = PerformanceCounterType.AverageBase;\n            averageCount64Base.CounterName = &quot;AverageCounter64SampleBase&quot;;\n            counterDataCollection.Add(averageCount64Base);\n\n            // Create the category.\n            PerformanceCounterCategory.Create(&quot;AverageCounter64SampleCategory&quot;,\n                &quot;Demonstrates usage of the AverageCounter64 performance counter type.&quot;,\n                PerformanceCounterCategoryType.SingleInstance, counterDataCollection);\n\n            return(true);\n        }\n        else\n        {\n            Console.WriteLine(&quot;Category exists - AverageCounter64SampleCategory&quot;);\n            return(false);\n        }\n    }\n\n    private static void CreateCounters()\n    {\n        // Create the counters.\n\n        avgCounter64Sample = new PerformanceCounter(&quot;AverageCounter64SampleCategory&quot;, \n            &quot;AverageCounter64Sample&quot;, \n            false);\n\n\n        avgCounter64SampleBase = new PerformanceCounter(&quot;AverageCounter64SampleCategory&quot;, \n            &quot;AverageCounter64SampleBase&quot;, \n            false);\n\n        avgCounter64Sample.RawValue=0;\n        avgCounter64SampleBase.RawValue=0;\n    }\n    private static void CollectSamples(ArrayList samplesList)\n    {\n\n        Random r = new Random( DateTime.Now.Millisecond );\n\n        // Loop for the samples.\n        for (int j = 0; j &lt; 100; j++) \n        {\n\n            int value = r.Next(1, 10);\n            Console.Write(j + &quot; = &quot; + value);\n\n            avgCounter64Sample.IncrementBy(value);\n\n            avgCounter64SampleBase.Increment();\n\n            if ((j % 10) == 9) \n            {\n                OutputSample(avgCounter64Sample.NextSample());\n                samplesList.Add( avgCounter64Sample.NextSample() );\n            }\n            else\n                Console.WriteLine();\n\n            System.Threading.Thread.Sleep(50);\n        }\n\n    }\n\n    private static void CalculateResults(ArrayList samplesList)\n    {\n        for(int i = 0; i &lt; (samplesList.Count - 1); i++)\n        {\n            // Output the sample.\n            OutputSample( (CounterSample)samplesList[i] );\n            OutputSample( (CounterSample)samplesList[i+1] );\n\n            // Use .NET to calculate the counter value.\n            Console.WriteLine(&quot;.NET computed counter value = &quot; +\n                CounterSampleCalculator.ComputeCounterValue((CounterSample)samplesList[i],\n                (CounterSample)samplesList[i+1]) );\n\n            // Calculate the counter value manually.\n            Console.WriteLine(&quot;My computed counter value = &quot; + \n                MyComputeCounterValue((CounterSample)samplesList[i],\n                (CounterSample)samplesList[i+1]) );\n\n        }\n    }\n\n    //++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n    //    Description - This counter type shows how many items are processed, on average,\n    //        during an operation. Counters of this type display a ratio of the items \n    //        processed (such as bytes sent) to the number of operations completed. The  \n    //        ratio is calculated by comparing the number of items processed during the \n    //        last interval to the number of operations completed during the last interval. \n    // Generic type - Average\n    //      Formula - (N1 - N0) / (D1 - D0), where the numerator (N) represents the number \n    //        of items processed during the last sample interval and the denominator (D) \n    //        represents the number of operations completed during the last two sample \n    //        intervals. \n    //    Average (Nx - N0) / (Dx - D0)  \n    //    Example PhysicalDisk\\ Avg. Disk Bytes/Transfer \n    //++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n    private static Single MyComputeCounterValue(CounterSample s0, CounterSample s1)\n    {\n        Single numerator = (Single)s1.RawValue - (Single)s0.RawValue;\n        Single denomenator = (Single)s1.BaseValue - (Single)s0.BaseValue;\n        Single counterValue = numerator / denomenator;\n        return(counterValue);\n    }\n\n    // Output information about the counter sample.\n    private static void OutputSample(CounterSample s)\n    {\n        Console.WriteLine(&quot;\\r\\n+++++++++++&quot;);\n        Console.WriteLine(&quot;Sample values - \\r\\n&quot;);\n        Console.WriteLine(&quot;   BaseValue        = &quot; + s.BaseValue);\n        Console.WriteLine(&quot;   CounterFrequency = &quot; + s.CounterFrequency);\n        Console.WriteLine(&quot;   CounterTimeStamp = &quot; + s.CounterTimeStamp);\n        Console.WriteLine(&quot;   CounterType      = &quot; + s.CounterType);\n        Console.WriteLine(&quot;   RawValue         = &quot; + s.RawValue);\n        Console.WriteLine(&quot;   SystemFrequency  = &quot; + s.SystemFrequency);\n        Console.WriteLine(&quot;   TimeStamp        = &quot; + s.TimeStamp);\n        Console.WriteLine(&quot;   TimeStamp100nSec = &quot; + s.TimeStamp100nSec);\n        Console.WriteLine(&quot;++++++++++++++++++++++&quot;);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"PerformanceCounterType.AverageCounter64#1\">Imports System\nImports System.Collections\nImports System.Collections.Specialized\nImports System.Diagnostics\n\n _\n\nPublic Class App\n\n    Private Shared avgCounter64Sample As PerformanceCounter\n    Private Shared avgCounter64SampleBase As PerformanceCounter\n\n\n    Public Shared Sub Main()\n\n        Dim samplesList As New ArrayList()\n        &#39;If the category does not exist, create the category and exit.\n        &#39;Performance counters should not be created and immediately used.\n        &#39;There is a latency time to enable the counters, they should be created\n        &#39;prior to executing the application that uses the counters.\n        &#39;Execute this sample a second time to use the counters.\n        If Not (SetupCategory()) Then\n            CreateCounters()\n            CollectSamples(samplesList)\n            CalculateResults(samplesList)\n        End If\n\n    End Sub &#39;Main\n\n    Private Shared Function SetupCategory() As Boolean\n        If Not PerformanceCounterCategory.Exists(&quot;AverageCounter64SampleCategory&quot;) Then\n\n            Dim counterDataCollection As New CounterCreationDataCollection()\n\n            &#39; Add the counter.\n            Dim averageCount64 As New CounterCreationData()\n            averageCount64.CounterType = PerformanceCounterType.AverageCount64\n            averageCount64.CounterName = &quot;AverageCounter64Sample&quot;\n            counterDataCollection.Add(averageCount64)\n\n            &#39; Add the base counter.\n            Dim averageCount64Base As New CounterCreationData()\n            averageCount64Base.CounterType = PerformanceCounterType.AverageBase\n            averageCount64Base.CounterName = &quot;AverageCounter64SampleBase&quot;\n            counterDataCollection.Add(averageCount64Base)\n\n            &#39; Create the category.\n            PerformanceCounterCategory.Create(&quot;AverageCounter64SampleCategory&quot;, _\n               &quot;Demonstrates usage of the AverageCounter64 performance counter type.&quot;, _\n                      PerformanceCounterCategoryType.SingleInstance, counterDataCollection)\n\n            Return True\n        Else\n            Console.WriteLine(&quot;Category exists - AverageCounter64SampleCategory&quot;)\n            Return False\n        End If\n    End Function &#39;SetupCategory\n\n    Private Shared Sub CreateCounters()\n        &#39; Create the counters.\n\n        avgCounter64Sample = New PerformanceCounter(&quot;AverageCounter64SampleCategory&quot;, &quot;AverageCounter64Sample&quot;, False)\n\n        avgCounter64SampleBase = New PerformanceCounter(&quot;AverageCounter64SampleCategory&quot;, &quot;AverageCounter64SampleBase&quot;, False)\n\n        avgCounter64Sample.RawValue = 0\n        avgCounter64SampleBase.RawValue = 0\n    End Sub &#39;CreateCounters\n\n    Private Shared Sub CollectSamples(ByVal samplesList As ArrayList)\n\n        Dim r As New Random(DateTime.Now.Millisecond)\n\n        &#39; Loop for the samples.\n        Dim j As Integer\n        For j = 0 To 99\n\n            Dim value As Integer = r.Next(1, 10)\n            Console.Write(j.ToString() + &quot; = &quot; + value.ToString())\n\n            avgCounter64Sample.IncrementBy(value)\n\n            avgCounter64SampleBase.Increment()\n\n            If j Mod 10 = 9 Then\n                OutputSample(avgCounter64Sample.NextSample())\n                samplesList.Add(avgCounter64Sample.NextSample())\n            Else\n                Console.WriteLine()\n            End If\n            System.Threading.Thread.Sleep(50)\n        Next j\n    End Sub &#39;CollectSamples\n\n    Private Shared Sub CalculateResults(ByVal samplesList As ArrayList)\n        Dim i As Integer\n        For i = 0 To (samplesList.Count - 1) - 1\n            &#39; Output the sample.\n            OutputSample(CType(samplesList(i), CounterSample))\n            OutputSample(CType(samplesList((i + 1)), CounterSample))\n\n            &#39; Use .NET to calculate the counter value.\n            Console.WriteLine(&quot;.NET computed counter value = &quot; + CounterSampleCalculator.ComputeCounterValue(CType(samplesList(i), CounterSample), CType(samplesList((i + 1)), CounterSample)).ToString())\n\n            &#39; Calculate the counter value manually.\n            Console.WriteLine(&quot;My computed counter value = &quot; + MyComputeCounterValue(CType(samplesList(i), CounterSample), CType(samplesList((i + 1)), CounterSample)).ToString())\n        Next i\n    End Sub &#39;CalculateResults\n\n    &#39;++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n    &#39;\tDescription - This counter type shows how many items are processed, on average,\n    &#39;\t\tduring an operation. Counters of this type display a ratio of the items \n    &#39;\t\tprocessed (such as bytes sent) to the number of operations completed. The  \n    &#39;\t\tratio is calculated by comparing the number of items processed during the \n    &#39;\t\tlast interval to the number of operations completed during the last interval. \n    &#39; Generic type - Average\n    &#39;  \tFormula - (N1 - N0) / (D1 - D0), where the numerator (N) represents the number \n    &#39;\t\tof items processed during the last sample interval and the denominator (D) \n    &#39;\t\trepresents the number of operations completed during the last two sample \n    &#39;\t\tintervals. \n    &#39;\tAverage (Nx - N0) / (Dx - D0)  \n    &#39;\tExample PhysicalDisk\\ Avg. Disk Bytes/Transfer \n    &#39;++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++//++++++++\n    Private Shared Function MyComputeCounterValue(ByVal s0 As CounterSample, ByVal s1 As CounterSample) As [Single]\n        Dim numerator As [Single] = CType(s1.RawValue, [Single]) - CType(s0.RawValue, [Single])\n        Dim denomenator As [Single] = CType(s1.BaseValue, [Single]) - CType(s0.BaseValue, [Single])\n        Dim counterValue As [Single] = numerator / denomenator\n        Return counterValue\n    End Function &#39;MyComputeCounterValue\n\n    &#39; Output information about the counter sample.\n    Private Shared Sub OutputSample(ByVal s As CounterSample)\n        Console.WriteLine(ControlChars.Lf + ControlChars.Cr + &quot;+++++++++++&quot;)\n        Console.WriteLine(&quot;Sample values - &quot; + ControlChars.Lf + ControlChars.Cr)\n        Console.WriteLine((&quot;   BaseValue        = &quot; + s.BaseValue.ToString()))\n        Console.WriteLine((&quot;   CounterFrequency = &quot; + s.CounterFrequency.ToString()))\n        Console.WriteLine((&quot;   CounterTimeStamp = &quot; + s.CounterTimeStamp.ToString()))\n        Console.WriteLine((&quot;   CounterType      = &quot; + s.CounterType.ToString()))\n        Console.WriteLine((&quot;   RawValue         = &quot; + s.RawValue.ToString()))\n        Console.WriteLine((&quot;   SystemFrequency  = &quot; + s.SystemFrequency.ToString()))\n        Console.WriteLine((&quot;   TimeStamp        = &quot; + s.TimeStamp.ToString()))\n        Console.WriteLine((&quot;   TimeStamp100nSec = &quot; + s.TimeStamp100nSec.ToString()))\n        Console.WriteLine(&quot;++++++++++++++++++++++&quot;)\n    End Sub &#39;OutputSample\nEnd Class &#39;App\n</code></pre>\r\n  \r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_CounterSample__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_CounterSample__ctor_System_Int64_System_Int64_System_Int64_System_Int64_System_Int64_System_Int64_System_Diagnostics_PerformanceCounterType_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CounterSample(Int64, Int64, Int64, Int64, Int64, Int64, PerformanceCounterType)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a> structure and sets the <span class=\"xref\">stem.Diagnostics.CounterSample.CounterTimeStamp*</span> property to 0 (zero).</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public CounterSample (long rawValue, long baseValue, long counterFrequency, long systemFrequency, long timeStamp, long timeStamp100nSec, System.Diagnostics.PerformanceCounterType counterType);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>rawValue</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The numeric value associated with the performance counter sample.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>baseValue</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An optional, base raw value for the counter, to use only if the sample is based on multiple counters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>counterFrequency</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The frequency with which the counter is read.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>systemFrequency</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The frequency with which the system reads from the counter.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>timeStamp</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The raw time stamp.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>timeStamp100nSec</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The raw, high-fidelity time stamp.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>counterType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.performancecountertype\" data-linktype=\"relative-path\">PerformanceCounterType</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.diagnostics.performancecountertype\" data-linktype=\"relative-path\">PerformanceCounterType</a> object that indicates the type of the counter for which this sample is a snapshot.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use this constructor to take an initial sample of the performance counter. The System Monitor supplies values for these parameters automatically when you call the <a class=\"xref\" href=\"system.diagnostics.performancecounter#System_Diagnostics_PerformanceCounter_NextSample_\" data-linktype=\"relative-path\">NextSample</a> method for the first time.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_CounterSample__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_CounterSample__ctor_System_Int64_System_Int64_System_Int64_System_Int64_System_Int64_System_Int64_System_Diagnostics_PerformanceCounterType_System_Int64_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CounterSample(Int64, Int64, Int64, Int64, Int64, Int64, PerformanceCounterType, Int64)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a> structure and sets the <span class=\"xref\">stem.Diagnostics.CounterSample.CounterTimeStamp*</span> property to the value that is passed in.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public CounterSample (long rawValue, long baseValue, long counterFrequency, long systemFrequency, long timeStamp, long timeStamp100nSec, System.Diagnostics.PerformanceCounterType counterType, long counterTimeStamp);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>rawValue</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The numeric value associated with the performance counter sample.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>baseValue</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An optional, base raw value for the counter, to use only if the sample is based on multiple counters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>counterFrequency</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The frequency with which the counter is read.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>systemFrequency</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The frequency with which the system reads from the counter.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>timeStamp</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The raw time stamp.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>timeStamp100nSec</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The raw, high-fidelity time stamp.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>counterType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.performancecountertype\" data-linktype=\"relative-path\">PerformanceCounterType</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.diagnostics.performancecountertype\" data-linktype=\"relative-path\">PerformanceCounterType</a> object that indicates the type of the counter for which this sample is a snapshot.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>counterTimeStamp</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The time at which the sample was taken.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use this constructor to take samples after you have already taken an initial sample of the performance counter. The System Monitor supplies values for these parameters automatically when you call the <a class=\"xref\" href=\"system.diagnostics.performancecounter#System_Diagnostics_PerformanceCounter_NextSample_\" data-linktype=\"relative-path\">NextSample</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Fields\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_CounterSample_Empty\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Empty</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Defines an empty, uninitialized performance counter sample of type <code>NumberOfItems32</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Diagnostics.CounterSample Empty;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_CounterSample_BaseValue_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_CounterSample_BaseValue\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">BaseValue</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets an optional, base raw value for the counter.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public long BaseValue { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The base raw value, which is used only if the sample is based on multiple counters.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_CounterSample_CounterFrequency_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_CounterSample_CounterFrequency\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CounterFrequency</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the raw counter frequency.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public long CounterFrequency { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The frequency with which the counter is read.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_CounterSample_CounterTimeStamp_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_CounterSample_CounterTimeStamp\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CounterTimeStamp</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the counter&#39;s time stamp.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public long CounterTimeStamp { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The time at which the sample was taken.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_CounterSample_CounterType_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_CounterSample_CounterType\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CounterType</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the performance counter type.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Diagnostics.PerformanceCounterType CounterType { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.performancecountertype\" data-linktype=\"relative-path\">PerformanceCounterType</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.diagnostics.performancecountertype\" data-linktype=\"relative-path\">PerformanceCounterType</a> object that indicates the type of the counter for which this sample is a snapshot.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_CounterSample_RawValue_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_CounterSample_RawValue\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">RawValue</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the raw value of the counter.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public long RawValue { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The numeric value that is associated with the performance counter sample.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_CounterSample_SystemFrequency_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_CounterSample_SystemFrequency\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SystemFrequency</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the raw system frequency.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public long SystemFrequency { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The frequency with which the system reads from the counter.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_CounterSample_TimeStamp_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_CounterSample_TimeStamp\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TimeStamp</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the raw time stamp.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public long TimeStamp { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The system time stamp.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_CounterSample_TimeStamp100nSec_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_CounterSample_TimeStamp100nSec\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">TimeStamp100nSec</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the raw, high-fidelity time stamp.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public long TimeStamp100nSec { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int64\" data-linktype=\"relative-path\">Int64</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The system time stamp, represented within 0.1 millisecond.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_CounterSample_Calculate_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_CounterSample_Calculate_System_Diagnostics_CounterSample_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Calculate(CounterSample)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Calculates the performance data of the counter, using a single sample point. This method is generally used for uncalculated performance counter types.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static float Calculate (System.Diagnostics.CounterSample counterSample);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>counterSample</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a> structure to use as a base point for calculating performance data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The calculated performance value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_CounterSample_Calculate_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_CounterSample_Calculate_System_Diagnostics_CounterSample_System_Diagnostics_CounterSample_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Calculate(CounterSample, CounterSample)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Calculates the performance data of the counter, using two sample points. This method is generally used for calculated performance counter types, such as averages.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static float Calculate (System.Diagnostics.CounterSample counterSample, System.Diagnostics.CounterSample nextCounterSample);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>counterSample</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a> structure to use as a base point for calculating performance data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>nextCounterSample</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a> structure to use as an ending point for calculating performance data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.single\" data-linktype=\"relative-path\">Single</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The calculated performance value.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_CounterSample_Equals_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_CounterSample_Equals_System_Diagnostics_CounterSample_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Equals(CounterSample)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Indicates whether the specified <a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a> structure is equal to the current <a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a> structure.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool Equals (System.Diagnostics.CounterSample sample);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>sample</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a> structure to be compared with this instance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>sample</code> is equal to the current instance; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Two <a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a> structures are equal if they have identical property values.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_CounterSample_Equals_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_CounterSample_Equals_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Equals(Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Indicates whether the specified structure is a <a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a> structure and is identical to the current <a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a> structure.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override bool Equals (object o);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>o</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a> structure to be compared with the current structure.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>o</code> is a <a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a> structure and is identical to the current instance; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Two <a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a> structures are equal if they have identical property values.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_CounterSample_GetHashCode_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_CounterSample_GetHashCode\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetHashCode()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a hash code for the current counter sample.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetHashCode ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A hash code for the current counter sample.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Operators\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_CounterSample_op_Equality_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_CounterSample_op_Equality_System_Diagnostics_CounterSample_System_Diagnostics_CounterSample_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Equality(CounterSample, CounterSample)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether two <a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a> structures are equal.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_Equality (System.Diagnostics.CounterSample a, System.Diagnostics.CounterSample b);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>a</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a> structure.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>b</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Another <a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a> structure to be compared to the structure specified by the <code>a</code> parameter.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>a</code> and <code>b</code> are equal; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Two <a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a> structures are equal if they have identical property values.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_CounterSample_op_Inequality_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_CounterSample_op_Inequality_System_Diagnostics_CounterSample_System_Diagnostics_CounterSample_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">op_Inequality(CounterSample, CounterSample)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a value that indicates whether two <a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a> structures are not equal.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool op_Inequality (System.Diagnostics.CounterSample a, System.Diagnostics.CounterSample b);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>a</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a> structure.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>b</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Another <a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a> structure to be compared to the structure specified by the <code>a</code> parameter.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>a</code> and <code>b</code> are not equal; otherwise, <code>false</code></p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Two <a class=\"xref\" href=\"system.diagnostics.countersample\" data-linktype=\"relative-path\">CounterSample</a> structures are not equal if any of their property values are different.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Diagnostics.CounterSample.yml\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.CounterSample\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.CounterSample..ctor\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.CounterSample.BaseValue\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.CounterSample.Calculate\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.CounterSample.CounterFrequency\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.CounterSample.CounterTimeStamp\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.CounterSample.CounterType\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.CounterSample.Empty\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.CounterSample.Equals\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.CounterSample.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.CounterSample.op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.CounterSample.op_op_Equality\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.CounterSample.op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.CounterSample.op_op_Inequality\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.CounterSample.RawValue\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.CounterSample.SystemFrequency\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.CounterSample.TimeStamp\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.CounterSample.TimeStamp100nSec\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"bc8647de-e4c8-9caf-d562-08d2e4a575d0\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines a structure that holds the raw data for a performance counter.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.diagnostics/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Diagnostics.CounterSample\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Diagnostics.CounterSample.yml","open_to_public_contributors":false,"api_name":["System.Diagnostics.CounterSample","System.Diagnostics.CounterSample..ctor","System.Diagnostics.CounterSample.BaseValue","System.Diagnostics.CounterSample.Calculate","System.Diagnostics.CounterSample.CounterFrequency","System.Diagnostics.CounterSample.CounterTimeStamp","System.Diagnostics.CounterSample.CounterType","System.Diagnostics.CounterSample.Empty","System.Diagnostics.CounterSample.Equals","System.Diagnostics.CounterSample.GetHashCode","System.Diagnostics.CounterSample.op_Equality","System.Diagnostics.CounterSample.op_op_Equality","System.Diagnostics.CounterSample.op_Inequality","System.Diagnostics.CounterSample.op_op_Inequality","System.Diagnostics.CounterSample.RawValue","System.Diagnostics.CounterSample.SystemFrequency","System.Diagnostics.CounterSample.TimeStamp","System.Diagnostics.CounterSample.TimeStamp100nSec"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Diagnostics.CounterSample","System::Diagnostics::CounterSample","System.Diagnostics.CounterSample.#ctor","System::Diagnostics::CounterSample::#ctor","System.Diagnostics.CounterSample.BaseValue","System::Diagnostics::CounterSample::BaseValue","System.Diagnostics.CounterSample.Calculate","System::Diagnostics::CounterSample::Calculate","System.Diagnostics.CounterSample.CounterFrequency","System::Diagnostics::CounterSample::CounterFrequency","System.Diagnostics.CounterSample.CounterTimeStamp","System::Diagnostics::CounterSample::CounterTimeStamp","System.Diagnostics.CounterSample.CounterType","System::Diagnostics::CounterSample::CounterType","System.Diagnostics.CounterSample.Empty","System::Diagnostics::CounterSample::Empty","System.Diagnostics.CounterSample.Equals","System::Diagnostics::CounterSample::Equals","System.Diagnostics.CounterSample.GetHashCode","System::Diagnostics::CounterSample::GetHashCode","System.Diagnostics.CounterSample.op_Equality","System::Diagnostics::CounterSample::op_Equality","System.Diagnostics.CounterSample.op_Inequality","System::Diagnostics::CounterSample::op_Inequality","System.Diagnostics.CounterSample.RawValue","System::Diagnostics::CounterSample::RawValue","System.Diagnostics.CounterSample.SystemFrequency","System::Diagnostics::CounterSample::SystemFrequency","System.Diagnostics.CounterSample.TimeStamp","System::Diagnostics::CounterSample::TimeStamp","System.Diagnostics.CounterSample.TimeStamp100nSec","System::Diagnostics::CounterSample::TimeStamp100nSec"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"bc8647de-e4c8-9caf-d562-08d2e4a575d0","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Diagnostics/CounterSample.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"CounterSample struct | Microsoft Docs","_op_ogTitle":"CounterSample struct","description":"Defines a structure that holds the raw data for a performance counter.\n","toc_asset_id":"api/_splitted/System.Diagnostics/toc.json","toc_rel":"_splitted/System.Diagnostics/toc.json","source_url":"","ms.assetid":"System.Diagnostics.CounterSample","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.countersample","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.countersample","fileRelativePath":"api/System.Diagnostics.CounterSample.html"},"themesRelativePathToOutputRoot":"_themes/"}