{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">DetailsViewUpdateEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that handles the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview#System_Web_UI_WebControls_DetailsView_ItemUpdating\" data-linktype=\"relative-path\">ItemUpdating</a> event of a <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview\" data-linktype=\"relative-path\">DetailsView</a> control.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void DetailsViewUpdateEventHandler(object sender, DetailsViewUpdateEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">DetailsViewUpdateEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates how to programmatically add a DetailsViewUpdateEventHandler delegate to the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview#System_Web_UI_WebControls_DetailsView_ItemUpdating\" data-linktype=\"relative-path\">ItemUpdating</a> event of a <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview\" data-linktype=\"relative-path\">DetailsView</a> control.  </p>\n<pre><code class=\"lang-cs\" name=\"DetailsViewUpdateEventHandlerDynamic#1\">\n&lt;%@ Page language=&quot;C#&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n  void Page_Load(Object sender, EventArgs e)\n  {\n\n    // Create a new DetailsView object.\n    DetailsView customerDetailsView = new DetailsView();\n\n    // Set the DetailsView object&#39;s properties.\n    customerDetailsView.ID = &quot;CustomerDetailsView&quot;;\n    customerDetailsView.DataSourceID = &quot;DetailsViewSource&quot;;\n    customerDetailsView.AutoGenerateRows = true;\n    customerDetailsView.AutoGenerateEditButton = true;\n    customerDetailsView.AllowPaging = true;\n    customerDetailsView.DataKeyNames = new String[1] { &quot;CustomerID&quot; };\n    customerDetailsView.PagerSettings.Position = PagerPosition.Bottom;\n\n    // Programmatically register the event-handling methods\n    // for the DetailsView control.\n    customerDetailsView.ItemUpdating \n      += new DetailsViewUpdateEventHandler(\n      this.CustomerDetailsView_ItemUpdating);\n    customerDetailsView.ModeChanging \n      += new DetailsViewModeEventHandler(\n      this.CustomerDetailsView_ModeChanging);\n\n    // Add the DetailsView object to the Controls collection\n    // of the PlaceHolder control.\n    DetailsViewPlaceHolder.Controls.Add(customerDetailsView);\n\n  }\n  \n  void CustomerDetailsView_ItemUpdating(Object sender, \n    DetailsViewUpdateEventArgs e)\n  {\n\n    // Validate the field values entered by the user. This\n    // example determines whether the user left any fields\n    // empty. Use the NewValues property to access the new \n    // values entered by the user.\n    ArrayList emptyFieldList = \n      ValidateFields((IOrderedDictionary)e.NewValues);\n\n    if (emptyFieldList.Count &gt; 0)\n    {\n\n      // The user left some fields empty. Display an error message.\n      \n      // Use the Keys property to retrieve the key field value.\n      String keyValue = e.Keys[&quot;CustomerID&quot;].ToString();\n\n      MessageLabel.Text = \n        &quot;You must enter a value for all fields of record &quot; +\n        keyValue + &quot;.&lt;br/&gt;The following fields are missing:&lt;br/&gt;&lt;br/&gt;&quot;;\n\n      // Display the missing fields.\n      foreach (String value in emptyFieldList)\n      {\n        // Use the OldValues property access the original value\n        // of a field.\n        MessageLabel.Text += value + &quot; - Original Value = &quot; + \n          e.OldValues[value].ToString() + &quot;&lt;br /&gt;&quot;;\n      }\n\n      // Cancel the update operation.\n      e.Cancel = true;\n\n    }\n    else\n    {\n      // The field values passed validation. Clear the\n      // error message label.\n      MessageLabel.Text = &quot;&quot;;\n    }\n\n  }\n\n  ArrayList ValidateFields(IOrderedDictionary list)\n  {\n    \n    // Create an ArrayList object to store the\n    // names of any empty fields.\n    ArrayList emptyFieldList = new ArrayList();\n\n    // Iterate though the field values entered by\n    // the user and check for an empty field. Empty\n    // fields contain a null value.\n    foreach (DictionaryEntry entry in list)\n    {\n      if (entry.Value == null)\n      {\n        // Add the field name to the ArrayList object.\n        emptyFieldList.Add(entry.Key.ToString());\n      }\n    }\n\n    return emptyFieldList;\n  }\n\n  void CustomerDetailsView_ModeChanging(Object sender, \n    DetailsViewModeEventArgs e)\n  {\n    if (e.CancelingEdit)\n    {\n      // The user canceled the update operation.\n      // Clear the error message label.\n      MessageLabel.Text = &quot;&quot;;\n    }\n  }\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DetailsViewUpdateEventHandler Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;DetailsViewUpdateEventHandler Example&lt;/h3&gt;\n        \n      &lt;!-- Use a PlaceHolder control as the container for the --&gt;\n      &lt;!-- dynamically generated DetailsView control.         --&gt;       \n      &lt;asp:placeholder id=&quot;DetailsViewPlaceHolder&quot;\n        runat=&quot;server&quot;/&gt;\n        \n      &lt;br/&gt;&lt;br/&gt;\n      \n      &lt;asp:label id=&quot;MessageLabel&quot;\n        forecolor=&quot;Red&quot;\n        runat=&quot;server&quot;/&gt;\n          \n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;DetailsViewSource&quot;\n        selectcommand=&quot;Select [CustomerID], [CompanyName], [Address], \n          [City], [PostalCode], [Country] From [Customers]&quot;\n        updatecommand=&quot;Update [Customers] Set \n          [CompanyName]=@CompanyName, [Address]=@Address, \n          [City]=@City, [PostalCode]=@PostalCode, \n          [Country]=@Country \n          Where [CustomerID]=@CustomerID&quot;\n        connectionstring=\n          &quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n          \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"DetailsViewUpdateEventHandlerDynamic#1\">\n&lt;%@ Page language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n  Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)\n    \n    &#39; Create a new DetailsView object.\n    Dim customerDetailsView As New DetailsView()\n\n    &#39; Set the DetailsView object&#39;s properties.\n    customerDetailsView.ID = &quot;CustomerDetailsView&quot;\n    customerDetailsView.DataSourceID = &quot;DetailsViewSource&quot;\n    customerDetailsView.AutoGenerateRows = True\n    customerDetailsView.AutoGenerateEditButton = True\n    customerDetailsView.AllowPaging = True\n    customerDetailsView.PagerSettings.Position = PagerPosition.Bottom\n\n    Dim keyArray() As String = {&quot;CustomerID&quot;}\n    customerDetailsView.DataKeyNames = keyArray\n    \n    &#39; Programmatically register the event-handling methods\n    &#39; for the DetailsView control.\n    AddHandler customerDetailsView.ItemUpdating, _\n      AddressOf CustomerDetailsView_ItemUpdating\n    AddHandler customerDetailsView.ModeChanging, _\n      AddressOf CustomerDetailsView_ModeChanging\n\n    &#39; Add the DetailsView object to the Controls collection\n    &#39; of the PlaceHolder control.\n    DetailsViewPlaceHolder.Controls.Add(customerDetailsView)\n\n  End Sub\n  \n  Sub CustomerDetailsView_ItemUpdating(ByVal sender As Object, _\n    ByVal e As DetailsViewUpdateEventArgs)\n\n    &#39; Validate the field values entered by the user. This\n    &#39; example determines whether the user left any fields\n    &#39; empty. Use the NewValues property to access the new \n    &#39; values entered by the user.\n    Dim emptyFieldList As ArrayList = _\n      ValidateFields(CType(e.NewValues, IOrderedDictionary))\n\n    If emptyFieldList.Count &gt; 0 Then\n\n      &#39; The user left some fields empty. Display an error message.\n      \n      &#39; Use the Keys property to retrieve the key field value.\n      Dim keyValue As String = e.Keys(&quot;CustomerID&quot;).ToString()\n\n      MessageLabel.Text = _\n        &quot;You must enter a value for all fields of record &quot; &amp; _\n        keyValue &amp; &quot;.&lt;br/&gt;The following fields are missing:&lt;br/&gt;&lt;br/&gt;&quot;\n\n      &#39; Display the missing fields.\n      Dim value As String\n      For Each value In emptyFieldList\n      \n        &#39; Use the OldValues property access the original value\n        &#39; of a field.\n        MessageLabel.Text &amp;= value &amp; &quot; - Original Value = &quot; &amp; _\n          e.OldValues(value).ToString() &amp; &quot;&lt;br /&gt;&quot;\n        \n      Next\n\n      &#39; Cancel the update operation.\n      e.Cancel = True\n\n    Else\n    \n      &#39; The field values passed validation. Clear the\n      &#39; error message label.\n      MessageLabel.Text = &quot;&quot;\n      \n    End If\n\n  End Sub\n\n    Function ValidateFields(ByVal list As IOrderedDictionary) _\n      As ArrayList\n    \n        &#39; Create an ArrayList object to store the\n        &#39; names of any empty fields.\n        Dim emptyFieldList As New ArrayList()\n\n        &#39; Iterate though the field values entered by\n        &#39; the user and check for an empty field. Empty\n        &#39; fields contain a null value.\n        Dim entry As DictionaryEntry\n    \n        For Each entry In list\n    \n            If entry.Value Is Nothing Then\n      \n                &#39; Add the field name to the ArrayList object.\n                emptyFieldList.Add(entry.Key.ToString())\n        \n            End If\n        Next\n\n        Return emptyFieldList\n  \n    End Function\n\n  Sub CustomerDetailsView_ModeChanging(ByVal sender As Object, ByVal e As DetailsViewModeEventArgs)\n  \n    If e.CancelingEdit Then\n      \n      &#39; The user canceled the update operation.\n      &#39; Clear the error message label.\n      MessageLabel.Text = &quot;&quot;\n    \n    End If\n    \n  End Sub\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DetailsViewUpdateEventHandler Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;DetailsViewUpdateEventHandler Example&lt;/h3&gt;\n        \n      &lt;!-- Use a PlaceHolder control as the container for the --&gt;\n      &lt;!-- dynamically generated DetailsView control.         --&gt;       \n      &lt;asp:placeholder id=&quot;DetailsViewPlaceHolder&quot;\n        runat=&quot;server&quot;/&gt;\n        \n      &lt;br/&gt;&lt;br/&gt;\n      \n      &lt;asp:label id=&quot;MessageLabel&quot;\n        forecolor=&quot;Red&quot;\n        runat=&quot;server&quot;/&gt;\n          \n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;DetailsViewSource&quot;\n        selectcommand=&quot;Select [CustomerID], [CompanyName], [Address], \n          [City], [PostalCode], [Country] From [Customers]&quot;\n        updatecommand=&quot;Update [Customers] Set \n          [CompanyName]=@CompanyName, [Address]=@Address, \n          [City]=@City, [PostalCode]=@PostalCode, \n          [Country]=@Country Where [CustomerID]=@CustomerID&quot;\n        connectionstring=\n          &quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\ns    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p> The following code example demonstrates how to declaratively add a DetailsViewUpdateEventHandler delegate to the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview#System_Web_UI_WebControls_DetailsView_ItemUpdating\" data-linktype=\"relative-path\">ItemUpdating</a> event of a <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview\" data-linktype=\"relative-path\">DetailsView</a> control.  </p>\n<pre><code class=\"lang-vb\" name=\"DetailsViewUpdateEventHandlerDeclarative#1\">\n&lt;%@ Page language=&quot;VB&quot; autoeventwireup=&quot;false&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n  Sub CustomerDetailsView_ItemUpdating(ByVal sender As Object, ByVal e As DetailsViewUpdateEventArgs) Handles CustomerDetailsView.ItemUpdating\n\n    &#39; Validate the field values entered by the user. This\n    &#39; example determines whether the user left any fields\n    &#39; empty. Use the NewValues property to access the new \n    &#39; values entered by the user.\n        Dim emptyFieldList As ArrayList = ValidateFields(CType(e.NewValues, IOrderedDictionary))\n\n    If emptyFieldList.Count &gt; 0 Then\n\n      &#39; The user left some fields empty. Display an error message.\n      \n      &#39; Use the Keys property to retrieve the key field value.\n      Dim keyValue As String = e.Keys(&quot;CustomerID&quot;).ToString()\n\n      MessageLabel.Text = &quot;You must enter a value for all fields of record &quot; &amp; _\n        keyValue &amp; &quot;.&lt;br/&gt;The following fields are missing:&lt;br/&gt;&lt;br/&gt;&quot;\n\n      &#39; Display the missing fields.\n      Dim value As String\n      For Each value In emptyFieldList\n      \n        &#39; Use the OldValues property access the original value\n        &#39; of a field.\n        MessageLabel.Text &amp;= value &amp; &quot; - Original Value = &quot; &amp; _\n          e.OldValues(value).ToString() &amp; &quot;&lt;br /&gt;&quot;\n        \n      Next\n\n      &#39; Cancel the update operation.\n      e.Cancel = True\n\n    Else\n    \n      &#39; The field values passed validation. Clear the\n      &#39; error message label.\n      MessageLabel.Text = &quot;&quot;\n      \n    End If\n\n  End Sub\n\n    Function ValidateFields(ByVal list As IOrderedDictionary) As ArrayList\n    \n        &#39; Create an ArrayList object to store the\n        &#39; names of any empty fields.\n        Dim emptyFieldList As New ArrayList()\n\n        &#39; Iterate though the field values entered by\n        &#39; the user and check for an empty field. Empty\n        &#39; fields contain a null value.\n        Dim entry As DictionaryEntry\n    \n        For Each entry In list\n    \n            If entry.Value Is Nothing Then\n      \n                &#39; Add the field name to the ArrayList object.\n                emptyFieldList.Add(entry.Key.ToString())\n        \n            End If\n        Next\n\n        Return emptyFieldList\n  \n    End Function\n\n  Sub CustomerDetailsView_ModeChanging(ByVal sender As Object, ByVal e As DetailsViewModeEventArgs) Handles CustomerDetailsView.ModeChanging\n  \n    If e.CancelingEdit Then\n      \n      &#39; The user canceled the update operation.\n      &#39; Clear the error message label.\n      MessageLabel.Text = &quot;&quot;\n    \n    End If\n    \n  End Sub\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DetailsViewUpdateEventHandler Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;DetailsViewUpdateEventHandler Example&lt;/h3&gt;\n                       \n      &lt;asp:detailsview id=&quot;CustomerDetailsView&quot;\n        datasourceid=&quot;DetailsViewSource&quot;\n        autogeneraterows=&quot;true&quot;\n        autogenerateeditbutton=&quot;true&quot;  \n        allowpaging=&quot;true&quot;\n        datakeynames=&quot;CustomerID&quot; \n        runat=&quot;server&quot;&gt;\n          \n        &lt;pagersettings position=&quot;Bottom&quot;/&gt; \n                  \n      &lt;/asp:detailsview&gt;\n      \n      &lt;br/&gt;\n      \n      &lt;asp:label id=&quot;MessageLabel&quot;\n        forecolor=&quot;Red&quot;\n        runat=&quot;server&quot;/&gt;\n          \n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;DetailsViewSource&quot;\n        selectcommand=&quot;Select [CustomerID], [CompanyName], [Address], \n          [City], [PostalCode], [Country] From [Customers]&quot;\n        updatecommand=&quot;Update [Customers] Set \n          [CompanyName]=@CompanyName, [Address]=@Address, \n          [City]=@City, [PostalCode]=@PostalCode, \n          [Country]=@Country \n          Where [CustomerID]=@CustomerID&quot;\n        connectionstring=\n          &quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n          \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"DetailsViewUpdateEventHandlerDeclarative#1\">\n&lt;%@ Page language=&quot;C#&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n  \n  void CustomerDetailsView_ItemUpdating(Object sender, \n    DetailsViewUpdateEventArgs e)\n  {\n\n    // Validate the field values entered by the user. This\n    // example determines whether the user left any fields\n    // empty. Use the NewValues property to access the new \n    // values entered by the user.\n    ArrayList emptyFieldList = \n      ValidateFields((IOrderedDictionary)e.NewValues);\n\n    if (emptyFieldList.Count &gt; 0)\n    {\n\n      // The user left some fields empty. Display an error message.\n      \n      // Use the Keys property to retrieve the key field value.\n      String keyValue = e.Keys[&quot;CustomerID&quot;].ToString();\n\n      MessageLabel.Text = \n        &quot;You must enter a value for all fields of record &quot; +\n        keyValue + &quot;.&lt;br/&gt;The following fields are missing:&lt;br/&gt;&lt;br/&gt;&quot;;\n\n      // Display the missing fields.\n      foreach (String value in emptyFieldList)\n      {\n        // Use the OldValues property access the original value\n        // of a field.\n        MessageLabel.Text += value + &quot; - Original Value = &quot; + \n          e.OldValues[value].ToString() + &quot;&lt;br /&gt;&quot;;\n      }\n\n      // Cancel the update operation.\n      e.Cancel = true;\n\n    }\n    else\n    {\n      // The field values passed validation. Clear the\n      // error message label.\n      MessageLabel.Text = &quot;&quot;;\n    }\n\n  }\n\n  ArrayList ValidateFields(IOrderedDictionary list)\n  {\n    \n    // Create an ArrayList object to store the\n    // names of any empty fields.\n    ArrayList emptyFieldList = new ArrayList();\n\n    // Iterate though the field values entered by\n    // the user and check for an empty field. Empty\n    // fields contain a null value.\n    foreach (DictionaryEntry entry in list)\n    {\n      if (entry.Value == null)\n      {\n        // Add the field name to the ArrayList object.\n        emptyFieldList.Add(entry.Key.ToString());\n      }\n    }\n\n    return emptyFieldList;\n  }\n\n  void CustomerDetailsView_ModeChanging(Object sender, \n    DetailsViewModeEventArgs e)\n  {\n    if (e.CancelingEdit)\n    {\n      // The user canceled the update operation.\n      // Clear the error message label.\n      MessageLabel.Text = &quot;&quot;;\n    }\n  }\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;DetailsViewUpdateEventHandler Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;DetailsViewUpdateEventHandler Example&lt;/h3&gt;\n                       \n      &lt;asp:detailsview id=&quot;CustomerDetailsView&quot;\n        datasourceid=&quot;DetailsViewSource&quot;\n        autogeneraterows=&quot;true&quot;\n        autogenerateeditbutton=&quot;true&quot;  \n        allowpaging=&quot;true&quot;\n        datakeynames=&quot;CustomerID&quot; \n        onitemupdating=&quot;CustomerDetailsView_ItemUpdating&quot;\n        onmodechanging=&quot;CustomerDetailsView_ModeChanging&quot; \n        runat=&quot;server&quot;&gt;\n          \n        &lt;pagersettings position=&quot;Bottom&quot;/&gt; \n                  \n      &lt;/asp:detailsview&gt;\n      \n      &lt;br/&gt;\n      \n      &lt;asp:label id=&quot;MessageLabel&quot;\n        forecolor=&quot;Red&quot;\n        runat=&quot;server&quot;/&gt;\n          \n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;DetailsViewSource&quot;\n        selectcommand=&quot;Select [CustomerID], [CompanyName], [Address], \n          [City], [PostalCode], [Country] From [Customers]&quot;\n        updatecommand=&quot;Update [Customers] Set \n          [CompanyName]=@CompanyName, [Address]=@Address, \n          [City]=@City, [PostalCode]=@PostalCode, \n          [Country]=@Country \n          Where [CustomerID]=@CustomerID&quot;\n        connectionstring=\n          &quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n          \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview\" data-linktype=\"relative-path\">DetailsView</a> control raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview#System_Web_UI_WebControls_DetailsView_ItemUpdating\" data-linktype=\"relative-path\">ItemUpdating</a> event when an Update button (a button with its <code>CommandName</code> property set to &quot;Update&quot;) within the control is clicked, but before the <a class=\"xref\" href=\"system.web.ui.webcontrols.detailsview\" data-linktype=\"relative-path\">DetailsView</a> control updates the record. This allows you to provide an event handler that performs a custom routine, such as HTML-encoding the values of a record before updating it in the data source, whenever this event occurs.  </p>\n<p> When you create a DetailsViewUpdateEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see <a href=\"http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115\" data-linktype=\"external\">NIB: Events and Delegates</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.DetailsViewUpdateEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DetailsViewUpdateEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DetailsViewUpdateEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DetailsViewUpdateEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DetailsViewUpdateEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.DetailsViewUpdateEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"57da79d1-13b3-774b-5373-642c1ffb4cd1\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that handles the  event of a  control.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.web.ui.webcontrols/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.WebControls.DetailsViewUpdateEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.DetailsViewUpdateEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Web.UI.WebControls.DetailsViewUpdateEventHandler","System.Web.UI.WebControls.DetailsViewUpdateEventHandler..ctor","System.Web.UI.WebControls.DetailsViewUpdateEventHandler.Invoke","System.Web.UI.WebControls.DetailsViewUpdateEventHandler.BeginInvoke","System.Web.UI.WebControls.DetailsViewUpdateEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.WebControls.DetailsViewUpdateEventHandler","System::Web::UI::WebControls::DetailsViewUpdateEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"57da79d1-13b3-774b-5373-642c1ffb4cd1","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/DetailsViewUpdateEventHandler.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DetailsViewUpdateEventHandler delegate | Microsoft Docs","_op_ogTitle":"DetailsViewUpdateEventHandler delegate","description":"Represents the method that handles the  event of a  control.\n","toc_asset_id":"api/_splitted/System.Web.UI.WebControls/toc.json","toc_rel":"_splitted/System.Web.UI.WebControls/toc.json","source_url":"","ms.assetid":"System.Web.UI.WebControls.DetailsViewUpdateEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.detailsviewupdateeventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.detailsviewupdateeventhandler","fileRelativePath":"api/System.Web.UI.WebControls.DetailsViewUpdateEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}