{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ICommand</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Defines a command.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.ComponentModel.TypeConverter(&quot;System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null&quot;)]\n[System.Windows.Markup.ValueSerializer(&quot;System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null&quot;)]\npublic interface ICommand</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p><a class=\"xref\" href=\"system.windows.input.routedcommand\" data-linktype=\"relative-path\">RoutedCommand</a> and <a class=\"xref\" href=\"system.windows.input.routeduicommand\" data-linktype=\"relative-path\">RoutedUICommand</a> are two implementations of the ICommand interface in Windows Presentation Foundation (WPF).  </p>\n<h3 class=\"accented\" id=\"icommand-in-windows-runtime-apps\">ICommand in Windows Runtime apps</h3>\n<p> The ICommand interface is the code contract for commands that are written in .NET for Windows Runtime apps. These commands provide the commanding behavior for UI elements such as a Windows Runtime XAML <code>Button</code> and in particular an <code>AppBarButton</code>. If you&#39;re defining commands for Windows Runtime apps you use basically the same techniques you&#39;d use for defining commands for a .NET app. Implement the command by defining a class that implements ICommand and specifically implement the <a class=\"xref\" href=\"system.windows.input.icommand#System_Windows_Input_ICommand_Execute_\" data-linktype=\"relative-path\">Execute</a> method.  </p>\n<p> XAML for Windows Runtime does not support x<code>:Static</code>, so don&#39;t attempt to use the <code>x:Static</code> markup extension if the command is used from Windows Runtime XAML. Also, the Windows Runtime does not have any predefined command libraries, so the XAML syntax shown here doesn&#39;t really apply for the case where you&#39;re implementing the interface and defining the command for Windows Runtime usage.  </p>\n<p><a name=\"xamlTextUsage_ICommand\"></a>   </p>\n<h3 class=\"accented\" id=\"xaml-attribute-usage\">XAML Attribute Usage</h3>\n<p> &lt;<em>object property</em>=&quot;<em>predefinedCommandName</em>&quot;/&gt;  </p>\n<p> - or -  </p>\n<p> &lt;<em>object property</em>=&quot;<em>predefinedCommandName.predefinedCommandName</em>&quot;/&gt;  </p>\n<p> - or -  </p>\n<p> &lt;<em>object property</em>=&quot;{ <em>customClassName.customCommandName</em>}&quot;/&gt;  </p>\n<p><a name=\"xamlValues_ICommand\"></a>   </p>\n<h3 class=\"accented\" id=\"xaml-values\">XAML Values</h3>\n<p> <em>predefinedClassName</em><br> One of the predefined command classes.  </p>\n<p> <em>predefinedCommandName</em><br> One of the predefined commands.  </p>\n<p> <em>customClassName</em><br> A custom class that contains the custom command. Custom classes generally require an <code>xlmns</code> prefix mapping; see <a href=\"../topic/xaml%20namespaces%20and%20namespace%20mapping%20for%20wpf%20xaml\" data-linktype=\"relative-path\">XAML Namespaces and Namespace Mapping for WPF XAML</a>.  </p>\n<p> <em>customCommandName</em><br> A custom command.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Input_ICommand_CanExecute_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CanExecute(Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Defines the method that determines whether the command can execute in its current state.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool CanExecute (object parameter);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>parameter</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Data used by the command.  If the command does not require data to be passed, this object can be set to <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Returns</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if this command can be executed; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Typically, a command source calls the CanExecute method when the <a class=\"xref\" href=\"system.windows.input.icommand#System_Windows_Input_ICommand_CanExecuteChanged\" data-linktype=\"relative-path\">CanExecuteChanged</a> event is raised.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Input_ICommand_Execute_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Execute(Object)</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Defines the method to be called when the command is invoked.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Execute (object parameter);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>parameter</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Data used by the command.  If the command does not require data to be passed, this object can be set to <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Events\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Windows_Input_ICommand_CanExecuteChanged\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CanExecuteChanged</span>        \r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Occurs when changes occur that affect whether or not the command should execute.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public event EventHandler CanExecuteChanged;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Normally, a command source calls <a class=\"xref\" href=\"system.windows.input.icommand#System_Windows_Input_ICommand_CanExecute_\" data-linktype=\"relative-path\">CanExecute</a> on the command when this event occurs.  </p>\n<p> Normally, if the command cannot execute, the command source disables itself.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t  \r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"/dotnet/toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Input.ICommand.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Input.ICommand\">\r\n<meta name=\"APIName\" content=\"System.Windows.Input.ICommand.CanExecute\">\r\n<meta name=\"APIName\" content=\"System.Windows.Input.ICommand.CanExecuteChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Input.ICommand.add_CanExecuteChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Input.ICommand.remove_CanExecuteChanged\">\r\n<meta name=\"APIName\" content=\"System.Windows.Input.ICommand.Execute\">\r\n<meta name=\"APILocation\" content=\"PresentationCore.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-23 07:05 AM\">\r\n<meta name=\"document_id\" content=\"9396c4f7-8eb1-a38d-e32e-693ec1678fc4\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines a command.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.windows.input/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Input.ICommand\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Input.ICommand.yml","open_to_public_contributors":false,"api_name":["System.Windows.Input.ICommand","System.Windows.Input.ICommand.CanExecute","System.Windows.Input.ICommand.CanExecuteChanged","System.Windows.Input.ICommand.add_CanExecuteChanged","System.Windows.Input.ICommand.remove_CanExecuteChanged","System.Windows.Input.ICommand.Execute"],"api_location":["PresentationCore.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Input.ICommand","System::Windows::Input::ICommand","System.Windows.Input.ICommand.CanExecute","System::Windows::Input::ICommand::CanExecute","System.Windows.Input.ICommand.CanExecuteChanged","System::Windows::Input::ICommand::CanExecuteChanged","System.Windows.Input.ICommand.Execute","System::Windows::Input::ICommand::Execute"],"dev_langs":["csharp"],"updated_at":"2017-03-23 07:05 AM","document_id":"9396c4f7-8eb1-a38d-e32e-693ec1678fc4","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/ICommand.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ICommand interface | Microsoft Docs","_op_ogTitle":"ICommand interface","description":"Defines a command.\n","toc_asset_id":"api/_splitted/System.Windows.Input/toc.json","toc_rel":"_splitted/System.Windows.Input/toc.json","source_url":"","ms.assetid":"System.Windows.Input.ICommand","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.input.icommand","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.input.icommand","fileRelativePath":"api/System.Windows.Input.ICommand.html"},"themesRelativePathToOutputRoot":"_themes/"}