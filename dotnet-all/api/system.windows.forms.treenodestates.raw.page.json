{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">TreeNodeStates</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Defines constants that represent the possible states of a <a class=\"xref\" href=\"system.windows.forms.treenode\" data-linktype=\"relative-path\">TreeNode</a>.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Flags]\npublic enum TreeNodeStates</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">TreeNodeStates</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.flagsattribute\" title=\"System.FlagsAttribute\" data-linktype=\"relative-path\">FlagsAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example demonstrates how to customize a <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control using owner drawing. The <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control in the example displays optional node tags alongside the normal node labels. Node tags are specified using the <a class=\"xref\" href=\"system.windows.forms.treenode#System_Windows_Forms_TreeNode_Tag_\" data-linktype=\"relative-path\">Tag</a> property. The <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> control also uses custom colors, including a custom highlight color.  </p>\n<p> You can customize most of the <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> colors by setting color properties, but the selection highlight color is not available as a property. Additionally, the default selection highlight rectangle extends only around a node label. Owner drawing must be used to draw the node tags and to draw a customized highlight rectangle large enough to include a node tag.  </p>\n<p> In the example, a handler for the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawNode\" data-linktype=\"relative-path\">System.Windows.Forms.TreeView.DrawNode</a> event draws unselected nodes by calling methods of the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs\" data-linktype=\"relative-path\">DrawTreeNodeEventArgs</a> class. These methods provide the default appearance for <a class=\"xref\" href=\"system.windows.forms.treeview\" data-linktype=\"relative-path\">TreeView</a> elements that do not need customization. The handler draws the node tags and the custom selection highlight manually.  </p>\n<p> For the complete example, see the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawNode\" data-linktype=\"relative-path\">System.Windows.Forms.TreeView.DrawNode</a> reference topic.  </p>\n<pre><code class=\"lang-vb\" name=\"TreeViewOwnerDraw#3\">&#39; Draws a node.\nPrivate Sub myTreeView_DrawNode(ByVal sender As Object, _\n    ByVal e As DrawTreeNodeEventArgs) Handles myTreeView.DrawNode\n\n    &#39; Draw the background and node text for a selected node.\n    If (e.State And TreeNodeStates.Selected) &lt;&gt; 0 Then\n\n        &#39; Draw the background of the selected node. The NodeBounds\n        &#39; method makes the highlight rectangle large enough to\n        &#39; include the text of a node tag, if one is present.\n        e.Graphics.FillRectangle(Brushes.Green, NodeBounds(e.Node))\n\n        &#39; Retrieve the node font. If the node font has not been set,\n        &#39; use the TreeView font.\n        Dim nodeFont As Font = e.Node.NodeFont\n        If nodeFont Is Nothing Then\n            nodeFont = CType(sender, TreeView).Font\n        End If\n\n        &#39; Draw the node text.\n        e.Graphics.DrawString(e.Node.Text, nodeFont, Brushes.White, _\n            e.Bounds.Left - 2, e.Bounds.Top)\n\n    &#39; Use the default background and node text.\n    Else\n        e.DrawDefault = True\n    End If\n\n    &#39; If a node tag is present, draw its string representation \n    &#39; to the right of the label text.\n    If (e.Node.Tag IsNot Nothing) Then\n        e.Graphics.DrawString(e.Node.Tag.ToString(), tagFont, _\n            Brushes.Yellow, e.Bounds.Right + 2, e.Bounds.Top)\n    End If\n\n    &#39; If the node has focus, draw the focus rectangle large, making\n    &#39; it large enough to include the text of the node tag, if present.\n    If (e.State And TreeNodeStates.Focused) &lt;&gt; 0 Then\n        Dim focusPen As New Pen(Color.Black)\n        Try\n            focusPen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot\n            Dim focusBounds As Rectangle = NodeBounds(e.Node)\n            focusBounds.Size = New Size(focusBounds.Width - 1, _\n                focusBounds.Height - 1)\n            e.Graphics.DrawRectangle(focusPen, focusBounds)\n        Finally\n            focusPen.Dispose()\n        End Try\n    End If\n\nEnd Sub &#39;myTreeView_DrawNode\n</code></pre><pre><code class=\"lang-cpp\" name=\"TreeViewOwnerDraw#3\">   // Draws a node.\nprivate:\n   void myTreeView_DrawNode( Object^ sender, DrawTreeNodeEventArgs^ e )\n   {\n      // Draw the background and node text for a selected node.\n      if ( (e-&gt;State &amp; TreeNodeStates::Selected) != (TreeNodeStates)0 )\n      {\n         // Draw the background of the selected node. The NodeBounds\n         // method makes the highlight rectangle large enough to\n         // include the text of a node tag, if one is present.\n         e-&gt;Graphics-&gt;FillRectangle( Brushes::Green, NodeBounds( e-&gt;Node ) );\n\n         // Retrieve the node font. If the node font has not been set,\n         // use the TreeView font.\n         System::Drawing::Font^ nodeFont = e-&gt;Node-&gt;NodeFont;\n         if ( nodeFont == nullptr )\n                  nodeFont = (dynamic_cast&lt;TreeView^&gt;(sender))-&gt;Font;\n\n         // Draw the node text.\n         e-&gt;Graphics-&gt;DrawString( e-&gt;Node-&gt;Text, nodeFont, Brushes::White, Rectangle::Inflate( e-&gt;Bounds, 2, 0 ) );\n      }\n      // Use the default background and node text.\n      else\n      {\n         e-&gt;DrawDefault = true;\n      }\n\n      // If a node tag is present, draw its string representation \n      // to the right of the label text.\n      if ( e-&gt;Node-&gt;Tag != nullptr )\n      {\n         e-&gt;Graphics-&gt;DrawString( e-&gt;Node-&gt;Tag-&gt;ToString(), tagFont, Brushes::Yellow, (float)e-&gt;Bounds.Right + 2, (float)e-&gt;Bounds.Top );\n      }\n\n      \n      // If the node has focus, draw the focus rectangle large, making\n      // it large enough to include the text of the node tag, if present.\n      if ( (e-&gt;State &amp; TreeNodeStates::Focused) != (TreeNodeStates)0 )\n      {\n         Pen^ focusPen = gcnew Pen( Color::Black );\n         try\n         {\n            focusPen-&gt;DashStyle = System::Drawing::Drawing2D::DashStyle::Dot;\n            Rectangle focusBounds = NodeBounds( e-&gt;Node );\n            focusBounds.Size = System::Drawing::Size( focusBounds.Width - 1, focusBounds.Height - 1 );\n            e-&gt;Graphics-&gt;DrawRectangle( focusPen, focusBounds );\n         }\n         finally\n         {\n            if ( focusPen )\n               delete safe_cast&lt;IDisposable^&gt;(focusPen);\n         }\n\n      }\n   }\n</code></pre><pre><code class=\"lang-cs\" name=\"TreeViewOwnerDraw#3\">// Draws a node.\nprivate void myTreeView_DrawNode(\n    object sender, DrawTreeNodeEventArgs e)\n{\n    // Draw the background and node text for a selected node.\n    if ((e.State &amp; TreeNodeStates.Selected) != 0)\n    {\n        // Draw the background of the selected node. The NodeBounds\n        // method makes the highlight rectangle large enough to\n        // include the text of a node tag, if one is present.\n        e.Graphics.FillRectangle(Brushes.Green, NodeBounds(e.Node));\n\n        // Retrieve the node font. If the node font has not been set,\n        // use the TreeView font.\n        Font nodeFont = e.Node.NodeFont;\n        if (nodeFont == null) nodeFont = ((TreeView)sender).Font;\n\n        // Draw the node text.\n        e.Graphics.DrawString(e.Node.Text, nodeFont, Brushes.White,\n            Rectangle.Inflate(e.Bounds, 2, 0));\n    }\n\n    // Use the default background and node text.\n    else \n    {\n        e.DrawDefault = true;\n    }\n\n    // If a node tag is present, draw its string representation \n    // to the right of the label text.\n    if (e.Node.Tag != null)\n    {\n        e.Graphics.DrawString(e.Node.Tag.ToString(), tagFont,\n            Brushes.Yellow, e.Bounds.Right + 2, e.Bounds.Top);\n    }\n\n    // If the node has focus, draw the focus rectangle large, making\n    // it large enough to include the text of the node tag, if present.\n    if ((e.State &amp; TreeNodeStates.Focused) != 0)\n    {\n        using (Pen focusPen = new Pen(Color.Black))\n        {\n            focusPen.DashStyle = System.Drawing.Drawing2D.DashStyle.Dot;\n            Rectangle focusBounds = NodeBounds(e.Node);\n            focusBounds.Size = new Size(focusBounds.Width - 1, \n            focusBounds.Height - 1);\n            e.Graphics.DrawRectangle(focusPen, focusBounds);\n        }\n    }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>This enumeration is used by the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs#System_Windows_Forms_DrawTreeNodeEventArgs_State_\" data-linktype=\"relative-path\">State</a> property of the <a class=\"xref\" href=\"system.windows.forms.drawtreenodeeventargs\" data-linktype=\"relative-path\">DrawTreeNodeEventArgs</a> class. For more information, see the <a class=\"xref\" href=\"system.windows.forms.treeview#System_Windows_Forms_TreeView_DrawNode\" data-linktype=\"relative-path\">System.Windows.Forms.TreeView.DrawNode</a> event.</p>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Windows_Forms_TreeNodeStates_Checked\">\r\n      \t\t\t<span class=\"lang-csharp\">Checked</span>\r\n      \t</td>\r\n      \t<td><p>The node is checked.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_TreeNodeStates_Default\">\r\n      \t\t\t<span class=\"lang-csharp\">Default</span>\r\n      \t</td>\r\n      \t<td><p>The node is in its default state.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_TreeNodeStates_Focused\">\r\n      \t\t\t<span class=\"lang-csharp\">Focused</span>\r\n      \t</td>\r\n      \t<td><p>The node has focus.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_TreeNodeStates_Grayed\">\r\n      \t\t\t<span class=\"lang-csharp\">Grayed</span>\r\n      \t</td>\r\n      \t<td><p>The node is disabled.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_TreeNodeStates_Hot\">\r\n      \t\t\t<span class=\"lang-csharp\">Hot</span>\r\n      \t</td>\r\n      \t<td><p>The node is hot. This state occurs when the <span class=\"xref\">stem.Windows.Forms.TreeView.HotTracking*</span> property is set to <code>true</code> and the mouse pointer is over the node.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_TreeNodeStates_Indeterminate\">\r\n      \t\t\t<span class=\"lang-csharp\">Indeterminate</span>\r\n      \t</td>\r\n      \t<td><p>The node in an indeterminate state.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_TreeNodeStates_Marked\">\r\n      \t\t\t<span class=\"lang-csharp\">Marked</span>\r\n      \t</td>\r\n      \t<td><p>The node is marked.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_TreeNodeStates_Selected\">\r\n      \t\t\t<span class=\"lang-csharp\">Selected</span>\r\n      \t</td>\r\n      \t<td><p>The node is selected.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Windows_Forms_TreeNodeStates_ShowKeyboardCues\">\r\n      \t\t\t<span class=\"lang-csharp\">ShowKeyboardCues</span>\r\n      \t</td>\r\n      \t<td><p>The node should indicate a keyboard shortcut.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.TreeNodeStates.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNodeStates\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNodeStates.Checked\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNodeStates.Default\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNodeStates.Focused\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNodeStates.Grayed\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNodeStates.Hot\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNodeStates.Indeterminate\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNodeStates.Marked\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNodeStates.Selected\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.TreeNodeStates.ShowKeyboardCues\">\r\n<meta name=\"APILocation\" content=\"System.Windows.Forms.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:59 PM\">\r\n<meta name=\"document_id\" content=\"44753fab-a176-340a-e831-1f407a517fc7\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines constants that represent the possible states of a .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.windows.forms/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.TreeNodeStates\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","uhfHeaderId":"MSDocsHeader-DotNet","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.TreeNodeStates.yml","open_to_public_contributors":false,"api_name":["System.Windows.Forms.TreeNodeStates","System.Windows.Forms.TreeNodeStates.Checked","System.Windows.Forms.TreeNodeStates.Default","System.Windows.Forms.TreeNodeStates.Focused","System.Windows.Forms.TreeNodeStates.Grayed","System.Windows.Forms.TreeNodeStates.Hot","System.Windows.Forms.TreeNodeStates.Indeterminate","System.Windows.Forms.TreeNodeStates.Marked","System.Windows.Forms.TreeNodeStates.Selected","System.Windows.Forms.TreeNodeStates.ShowKeyboardCues"],"api_location":["System.Windows.Forms.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.TreeNodeStates","System::Windows::Forms::TreeNodeStates","System.Windows.Forms.TreeNodeStates.Checked","System::Windows::Forms::TreeNodeStates::Checked","System.Windows.Forms.TreeNodeStates.Default","System::Windows::Forms::TreeNodeStates::Default","System.Windows.Forms.TreeNodeStates.Focused","System::Windows::Forms::TreeNodeStates::Focused","System.Windows.Forms.TreeNodeStates.Grayed","System::Windows::Forms::TreeNodeStates::Grayed","System.Windows.Forms.TreeNodeStates.Hot","System::Windows::Forms::TreeNodeStates::Hot","System.Windows.Forms.TreeNodeStates.Indeterminate","System::Windows::Forms::TreeNodeStates::Indeterminate","System.Windows.Forms.TreeNodeStates.Marked","System::Windows::Forms::TreeNodeStates::Marked","System.Windows.Forms.TreeNodeStates.Selected","System::Windows::Forms::TreeNodeStates::Selected","System.Windows.Forms.TreeNodeStates.ShowKeyboardCues","System::Windows::Forms::TreeNodeStates::ShowKeyboardCues"],"dev_langs":["csharp"],"updated_at":"2017-04-01 05:59 PM","document_id":"44753fab-a176-340a-e831-1f407a517fc7","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Windows.Forms/TreeNodeStates.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"TreeNodeStates enum | Microsoft Docs","_op_ogTitle":"TreeNodeStates enum","description":"Defines constants that represent the possible states of a .\n","toc_asset_id":"api/_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.TreeNodeStates","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.treenodestates","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.treenodestates","fileRelativePath":"api/System.Windows.Forms.TreeNodeStates.html"},"themesRelativePathToOutputRoot":"_themes/"}