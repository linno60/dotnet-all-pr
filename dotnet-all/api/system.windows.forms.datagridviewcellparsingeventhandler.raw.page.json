{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">DataGridViewCellParsingEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that will handle a <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellParsing\" data-linktype=\"relative-path\">CellParsing</a> event of a <a class=\"xref\" href=\"system.windows.forms.datagridview\" data-linktype=\"relative-path\">DataGridView</a>.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void DataGridViewCellParsingEventHandler(object sender, DataGridViewCellParsingEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">DataGridViewCellParsingEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates using DataGridViewCellParsingEventHandler to check the validity of date entries.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Windows.Forms.GridViewUnbound#2\">&#39; Handling CellParsing allows one to accept user input, then map it to a different\n&#39; internal representation.\nPrivate Sub dataGridView1_CellParsing(ByVal sender As Object, _\n    ByVal e As DataGridViewCellParsingEventArgs) _\n    Handles dataGridView1.CellParsing\n\n    If Me.dataGridView1.Columns(e.ColumnIndex).Name = _\n        &quot;Release Date&quot; Then\n        If e IsNot Nothing Then\n            If e.Value IsNot Nothing Then\n                Try\n                    &#39; Map what the user typed into UTC.\n                    e.Value = _\n                    DateTime.Parse(e.Value.ToString()).ToUniversalTime()\n                    &#39; Set the ParsingApplied property to \n                    &#39; Show the event is handled.\n                    e.ParsingApplied = True\n\n                Catch ex As FormatException\n                    &#39; Set to false in case another CellParsing handler\n                    &#39; wants to try to parse this DataGridViewCellParsingEventArgs instance.\n                    e.ParsingApplied = False\n                End Try\n            End If\n        End If\n    End If\nEnd Sub\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.GridViewUnbound#2\">// Handling CellParsing allows one to accept user input, then map it to a different\n// internal representation.\nvoid dataGridView1_CellParsing( Object^ /*sender*/, DataGridViewCellParsingEventArgs^ e )\n{\n   if ( this-&gt;dataGridView1-&gt;Columns[ e-&gt;ColumnIndex ]-&gt;Name-&gt;Equals( &quot;Release Date&quot; ) )\n   {\n      if ( e != nullptr )\n      {\n         if ( e-&gt;Value != nullptr )\n         {\n            try\n            {\n               // Map what the user typed into UTC.\n               e-&gt;Value = DateTime::Parse( e-&gt;Value-&gt;ToString() ).ToUniversalTime();\n\n               // Set the ParsingApplied property to \n               // Show the event is handled.\n               e-&gt;ParsingApplied = true;\n            }\n            catch ( FormatException^ /*ex*/ ) \n            {\n               // Set to false in case another CellParsing handler\n               // wants to try to parse this DataGridViewCellParsingEventArgs instance.\n               e-&gt;ParsingApplied = false;\n            }\n         }\n      }\n   }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Windows.Forms.GridViewUnbound#2\">// Handling CellParsing allows one to accept user input, then map it to a different\n// internal representation.\nprivate void dataGridView1_CellParsing(object sender, DataGridViewCellParsingEventArgs e)\n{\n    if (this.dataGridView1.Columns[e.ColumnIndex].Name == &quot;Release Date&quot;)\n    {\n        if (e != null)\n        {\n            if (e.Value != null)\n            {\n                try\n                {\n                    // Map what the user typed into UTC.\n                    e.Value = DateTime.Parse(e.Value.ToString()).ToUniversalTime();\n                    // Set the ParsingApplied property to \n                    // Show the event is handled.\n                    e.ParsingApplied = true;\n\n                }\n                catch (FormatException)\n                {\n                    // Set to false in case another CellParsing handler\n                    // wants to try to parse this DataGridViewCellParsingEventArgs instance.\n                    e.ParsingApplied = false;\n                }\n            }\n        }\n    }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Handle the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellParsing\" data-linktype=\"relative-path\">CellParsing</a> event to provide custom value conversion from a user-specified value to a value in the type specified by the cell <a class=\"xref\" href=\"system.windows.forms.datagridviewcell#System_Windows_Forms_DataGridViewCell_ValueType_\" data-linktype=\"relative-path\">ValueType</a> property.  </p>\n<p> When you handle the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellParsing\" data-linktype=\"relative-path\">CellParsing</a> event, you can convert the value yourself or you can customize the default conversion. For example, you can convert the value yourself using the cell <a class=\"xref\" href=\"system.windows.forms.datagridviewcell#System_Windows_Forms_DataGridViewCell_ParseFormattedValue_\" data-linktype=\"relative-path\">ParseFormattedValue</a> method with type converters of your choosing. Alternatively, you can let the default type converters parse the value, but modify the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle#System_Windows_Forms_DataGridViewCellStyle_NullValue_\" data-linktype=\"relative-path\">NullValue</a>, <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle#System_Windows_Forms_DataGridViewCellStyle_DataSourceNullValue_\" data-linktype=\"relative-path\">DataSourceNullValue</a>, and <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle#System_Windows_Forms_DataGridViewCellStyle_FormatProvider_\" data-linktype=\"relative-path\">FormatProvider</a> properties of the object returned by the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellparsingeventargs#System_Windows_Forms_DataGridViewCellParsingEventArgs_InheritedCellStyle_\" data-linktype=\"relative-path\">InheritedCellStyle</a> property, which is initialized using the cell <a class=\"xref\" href=\"system.windows.forms.datagridviewcell#System_Windows_Forms_DataGridViewCell_InheritedStyle_\" data-linktype=\"relative-path\">InheritedStyle</a> property.  </p>\n<p> When you convert the value yourself, replace the initial, formatted value of the <a class=\"xref\" href=\"system.windows.forms.converteventargs#System_Windows_Forms_ConvertEventArgs_Value_\" data-linktype=\"relative-path\">Value</a> property with the converted value in the type specified by the cell <a class=\"xref\" href=\"system.windows.forms.datagridviewcell#System_Windows_Forms_DataGridViewCell_ValueType_\" data-linktype=\"relative-path\">ValueType</a> property. To indicate that no further parsing is necessary, set the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellparsingeventargs#System_Windows_Forms_DataGridViewCellParsingEventArgs_ParsingApplied_\" data-linktype=\"relative-path\">ParsingApplied</a> property to <code>true</code>.  </p>\n<p> When the event handler completes, if the <a class=\"xref\" href=\"system.windows.forms.converteventargs#System_Windows_Forms_ConvertEventArgs_Value_\" data-linktype=\"relative-path\">Value</a> is <code>null</code> or is not of the correct type, or the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellparsingeventargs#System_Windows_Forms_DataGridViewCellParsingEventArgs_ParsingApplied_\" data-linktype=\"relative-path\">ParsingApplied</a> property is <code>false</code>, the <a class=\"xref\" href=\"system.windows.forms.converteventargs#System_Windows_Forms_ConvertEventArgs_Value_\" data-linktype=\"relative-path\">Value</a> is parsed using the cell <a class=\"xref\" href=\"system.windows.forms.datagridviewcell#System_Windows_Forms_DataGridViewCell_ParseFormattedValue_\" data-linktype=\"relative-path\">ParseFormattedValue</a> method with default type converters. The default implementation of this method parses the value using the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle#System_Windows_Forms_DataGridViewCellStyle_NullValue_\" data-linktype=\"relative-path\">NullValue</a>, <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle#System_Windows_Forms_DataGridViewCellStyle_DataSourceNullValue_\" data-linktype=\"relative-path\">DataSourceNullValue</a>, and <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle#System_Windows_Forms_DataGridViewCellStyle_FormatProvider_\" data-linktype=\"relative-path\">FormatProvider</a> properties of the cell style passed in. If the value is not equal to <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle#System_Windows_Forms_DataGridViewCellStyle_NullValue_\" data-linktype=\"relative-path\">NullValue</a>, the value is parsed using the <a class=\"xref\" href=\"system.windows.forms.datagridviewcellstyle#System_Windows_Forms_DataGridViewCellStyle_FormatProvider_\" data-linktype=\"relative-path\">FormatProvider</a> property and the type converters passed in.  </p>\n<p> To customize the conversion of a cell value into a formatted value for display, handle the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellFormatting\" data-linktype=\"relative-path\">CellFormatting</a> event.  </p>\n<p> For more information about handling events, see <a href=\"http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67\" data-linktype=\"external\">NIB: Consuming Events</a>.  </p>\n<p> When you create a DataGridViewCellParsingEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see <a href=\"http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115\" data-linktype=\"external\">NIB: Events and Delegates</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.DataGridViewCellParsingEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellParsingEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellParsingEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellParsingEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellParsingEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellParsingEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"d3704b29-9893-3788-d8a4-bc698697fe9c\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that will handle a  event of a .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.windows.forms/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.DataGridViewCellParsingEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.DataGridViewCellParsingEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Windows.Forms.DataGridViewCellParsingEventHandler","System.Windows.Forms.DataGridViewCellParsingEventHandler..ctor","System.Windows.Forms.DataGridViewCellParsingEventHandler.Invoke","System.Windows.Forms.DataGridViewCellParsingEventHandler.BeginInvoke","System.Windows.Forms.DataGridViewCellParsingEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.DataGridViewCellParsingEventHandler","System::Windows::Forms::DataGridViewCellParsingEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"d3704b29-9893-3788-d8a4-bc698697fe9c","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Windows.Forms/DataGridViewCellParsingEventHandler.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DataGridViewCellParsingEventHandler delegate | Microsoft Docs","_op_ogTitle":"DataGridViewCellParsingEventHandler delegate","description":"Represents the method that will handle a  event of a .\n","toc_asset_id":"api/_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.DataGridViewCellParsingEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.datagridviewcellparsingeventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.datagridviewcellparsingeventhandler","fileRelativePath":"api/System.Windows.Forms.DataGridViewCellParsingEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}