{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">DecoderExceptionFallback</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides a failure-handling mechanism, called a fallback, for an encoded input byte sequence that cannot be converted to an input character. The fallback throws an exception instead of decoding the input byte sequence. This class cannot be inherited.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public sealed class DecoderExceptionFallback : System.Text.DecoderFallback</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallback\" data-linktype=\"relative-path\">DecoderFallback</a></span></div><span class=\"lang-csharp\">DecoderExceptionFallback</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallback#System_Text_DecoderFallback_ExceptionFallback\" data-linktype=\"relative-path\">ExceptionFallback</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallback#System_Text_DecoderFallback_ReplacementFallback\" data-linktype=\"relative-path\">ReplacementFallback</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates the DecoderExceptionFallback and <a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a> classes.  </p>\n<pre><code class=\"lang-cpp\" name=\"sys.txt.fallbackDecExc#1\">// This example demonstrates the DecoderExceptionFallback class.\n\nusing namespace System;\nusing namespace System::Text;\n\nint main()\n{\n    // Create an encoding, which is equivalent to calling the\n    // ASCIIEncoding class constructor.\n    // The DecoderExceptionFallback parameter specifies that an exception\n    // is thrown if a character cannot be encoded.\n    // An encoder exception fallback is also specified, but in this code\n    // example the encoding operation cannot fail.\n\n    Encoding^ asciiEncoding = Encoding::GetEncoding(&quot;us-ascii&quot;,\n        gcnew EncoderExceptionFallback(), gcnew DecoderExceptionFallback());\n    String^ inputString = &quot;XYZ&quot;;\n    String^ decodedString;\n    String^ twoNewLines = Environment::NewLine + Environment::NewLine ;\n\n    array&lt;Byte&gt;^ encodedBytes = \n        gcnew array&lt;Byte&gt;(asciiEncoding-&gt;GetByteCount(inputString));\n    int numberOfEncodedBytes = 0;\n\n    // ---------------------------------------------------------------------\n    Console::Clear();\n\n    // Display the name of the encoding.\n    Console::WriteLine(&quot;The name of the encoding is \\&quot;{0}\\&quot;.{1}&quot;,\n        asciiEncoding-&gt;WebName, Environment::NewLine);\n\n    // Display the input string in text.\n    Console::WriteLine(&quot;Input string ({0} characters): \\&quot;{1}\\&quot;&quot;,\n        inputString-&gt;Length, inputString);\n\n    // Display the input string in hexadecimal.\n    Console::Write(&quot;Input string in hexadecimal: &quot;);\n    for each (char c in inputString)\n    {\n        Console::Write(&quot;0x{0:X2} &quot;, c);\n    }\n    Console::Write(twoNewLines);\n\n    // ---------------------------------------------------------------------\n    // Encode the input string.\n\n    Console::WriteLine(&quot;Encode the input string...&quot;);\n\n    numberOfEncodedBytes = asciiEncoding-&gt;GetBytes(inputString, 0,\n        inputString-&gt;Length, encodedBytes, 0);\n\n    // Display the encoded bytes.\n    Console::WriteLine(&quot;Encoded bytes in hexadecimal ({0} bytes):{1}&quot;,\n        numberOfEncodedBytes, Environment::NewLine);\n    for each (Byte b in encodedBytes)\n    {\n        Console::Write(&quot;0x{0:X2} &quot;, b);\n    }\n    Console::Write(twoNewLines);\n\n    // ---------------------------------------------------------------------\n\n    // Replace the encoded byte sequences for the characters &#39;X&#39; and &#39;Z&#39;\n    // with the value 0xFF, which is outside the valid range of 0x00 to 0x7F\n    // for ASCIIEncoding. The resulting byte sequence is actually the\n    // beginning of this code example because it is the input to the decoder\n    // operation, and is equivalent to a corrupted or improperly encoded\n    // byte sequence.\n\n    encodedBytes[0] = 0xFF;\n    encodedBytes[2] = 0xFF;\n\n    Console::WriteLine(&quot;Display the corrupted byte sequence...&quot;);\n    Console::WriteLine(&quot;Encoded bytes in hexadecimal ({0} bytes):{1}&quot;,\n        numberOfEncodedBytes, Environment::NewLine);\n    for each (Byte b in encodedBytes)\n    {\n        Console::Write(&quot;0x{0:X2} &quot;, b);\n    }\n    Console::Write(twoNewLines);\n\n    // ---------------------------------------------------------------------\n    // Attempt to decode the encoded bytes. However, an exception is thrown\n    // before the byte sequence can be decoded.\n\n    Console::WriteLine(&quot;Compare the decoded bytes to the input string...&quot;);\n\n    try\n    {\n        decodedString = asciiEncoding-&gt;GetString(encodedBytes);\n        // This statement is never executed.\n        Console::WriteLine(&quot;This statement is never executed.&quot;);\n    }\n    catch (DecoderFallbackException^ ex)\n    {\n        Console::WriteLine(ex);\n        Console::WriteLine(\n            &quot;{0}*** THE CODE EXAMPLE TERMINATES HERE AS INTENDED. ***&quot;, \n            Environment::NewLine);\n    }\n}\n\n\n/*\nThis code example produces the following results:\n\nThe name of the encoding is &quot;us-ascii&quot;.\n\nInput string (3 characters): &quot;XYZ&quot;\nInput string in hexadecimal: 0x58 0x59 0x5A\n\nEncode the input string...\nEncoded bytes in hexadecimal (3 bytes):\n\n0x58 0x59 0x5A\n\nDisplay the corrupted byte sequence...\nEncoded bytes in hexadecimal (3 bytes):\n\n0xFF 0x59 0xFF\n\nCompare the decoded bytes to the input string...\nSystem.Text.DecoderFallbackException: Unable to translate bytes [FF] at index 0 from speci\nfied code page to Unicode.\nat System.Text.DecoderExceptionFallbackBuffer.Throw(Byte[] bytesUnknown, Int32 index)\nat System.Text.DecoderExceptionFallbackBuffer.Fallback(Byte[] bytesUnknown, Int32 index\n)\nat System.Text.DecoderFallbackBuffer.InternalFallback(Byte[] bytes, Byte* pBytes)\nat System.Text.ASCIIEncoding.GetCharCount(Byte* bytes, Int32 count, DecoderNLS decoder)\n\nat System.String.CreateStringFromEncoding(Byte* bytes, Int32 byteLength, Encoding encod\ning)\nat System.Text.ASCIIEncoding.GetString(Byte[] bytes, Int32 byteIndex, Int32 byteCount)\nat System.Text.Encoding.GetString(Byte[] bytes)\nat Sample.Main()\n\n*** THE CODE EXAMPLE TERMINATES HERE AS INTENDED. ***\n\n*/\n</code></pre><pre><code class=\"lang-cs\" name=\"sys.txt.fallbackDecExc#1\">// This example demonstrates the DecoderExceptionFallback class.\n\nusing System;\nusing System.Text;\n\nclass Sample \n{\n    public static void Main() \n    {\n\n// Create an encoding, which is equivalent to calling the \n// ASCIIEncoding class constructor. \n// The DecoderExceptionFallback parameter specifies that an exception\n// is thrown if a character cannot be encoded. \n// An encoder exception fallback is also specified, but in this code\n// example the encoding operation cannot fail.  \n\n    Encoding ae = Encoding.GetEncoding(\n                  &quot;us-ascii&quot;,\n                  new EncoderExceptionFallback(), \n                  new DecoderExceptionFallback());\n    string inputString = &quot;XYZ&quot;;\n    string decodedString;\n    string twoNewLines = &quot;\\n\\n&quot;;\n    byte[] encodedBytes = new byte[ae.GetByteCount(inputString)];\n    int numberOfEncodedBytes = 0;\n\n// --------------------------------------------------------------------------\n    Console.Clear();\n\n// Display the name of the encoding.\n    Console.WriteLine(&quot;The name of the encoding is \\&quot;{0}\\&quot;.\\n&quot;, ae.WebName);\n\n// Display the input string in text.\n    Console.WriteLine(&quot;Input string ({0} characters): \\&quot;{1}\\&quot;&quot;, \n                       inputString.Length, inputString);\n\n// Display the input string in hexadecimal.\n    Console.Write(&quot;Input string in hexadecimal: &quot;);\n    foreach (char c in inputString.ToCharArray()) \n        {\n        Console.Write(&quot;0x{0:X2} &quot;, (int)c);\n        }\n    Console.Write(twoNewLines);\n\n// --------------------------------------------------------------------------\n// Encode the input string. \n\n    Console.WriteLine(&quot;Encode the input string...&quot;);\n    numberOfEncodedBytes = ae.GetBytes(inputString, 0, inputString.Length, \n                                       encodedBytes, 0);\n// Display the encoded bytes.\n    Console.WriteLine(&quot;Encoded bytes in hexadecimal ({0} bytes):\\n&quot;, \n                       numberOfEncodedBytes);\n    foreach (byte b in encodedBytes)\n        {\n        Console.Write(&quot;0x{0:X2} &quot;, (int)b);\n        }\n    Console.Write(twoNewLines);\n\n// --------------------------------------------------------------------------\n\n// Replace the encoded byte sequences for the characters &#39;X&#39; and &#39;Z&#39; with the \n// value 0xFF, which is outside the valid range of 0x00 to 0x7F for \n// ASCIIEncoding. The resulting byte sequence is actually the beginning of \n// this code example because it is the input to the decoder operation, and \n// is equivalent to a corrupted or improperly encoded byte sequence. \n\n    encodedBytes[0] = 0xFF;\n    encodedBytes[2] = 0xFF;\n\n    Console.WriteLine(&quot;Display the corrupted byte sequence...&quot;);\n    Console.WriteLine(&quot;Encoded bytes in hexadecimal ({0} bytes):\\n&quot;, \n                       numberOfEncodedBytes);\n    foreach (byte b in encodedBytes)\n        {\n        Console.Write(&quot;0x{0:X2} &quot;, (int)b);\n        }\n    Console.Write(twoNewLines);\n\n// --------------------------------------------------------------------------\n// Attempt to decode the encoded bytes. However, an exception is thrown \n// before the byte sequence can be decoded.\n\n    Console.WriteLine(&quot;Compare the decoded bytes to the input string...&quot;);\n\n    try {\n        decodedString = ae.GetString(encodedBytes);\n        }\n    catch (DecoderFallbackException dfe)\n        {\n        Console.WriteLine(dfe);\n        Console.WriteLine(&quot;\\n*** THE CODE EXAMPLE TERMINATES HERE AS INTENDED. ***&quot;);\n        return;\n        }\n\n// This statement is never executed.\n    Console.WriteLine(&quot;This statement is never executed.&quot;);\n    }\n}\n/*\nThis code example produces the following results:\n\nThe name of the encoding is &quot;us-ascii&quot;.\n\nInput string (3 characters): &quot;XYZ&quot;\nInput string in hexadecimal: 0x58 0x59 0x5A\n\nEncode the input string...\nEncoded bytes in hexadecimal (3 bytes):\n\n0x58 0x59 0x5A\n\nDisplay the corrupted byte sequence...\nEncoded bytes in hexadecimal (3 bytes):\n\n0xFF 0x59 0xFF\n\nCompare the decoded bytes to the input string...\nSystem.Text.DecoderFallbackException: Unable to translate bytes [FF] at index 0 from speci\nfied code page to Unicode.\n   at System.Text.DecoderExceptionFallbackBuffer.Throw(Byte[] bytesUnknown, Int32 index)\n   at System.Text.DecoderExceptionFallbackBuffer.Fallback(Byte[] bytesUnknown, Int32 index\n)\n   at System.Text.DecoderFallbackBuffer.InternalFallback(Byte[] bytes, Byte* pBytes)\n   at System.Text.ASCIIEncoding.GetCharCount(Byte* bytes, Int32 count, DecoderNLS decoder)\n\n   at System.String.CreateStringFromEncoding(Byte* bytes, Int32 byteLength, Encoding encod\ning)\n   at System.Text.ASCIIEncoding.GetString(Byte[] bytes, Int32 byteIndex, Int32 byteCount)\n   at System.Text.Encoding.GetString(Byte[] bytes)\n   at Sample.Main()\n\n*** THE CODE EXAMPLE TERMINATES HERE AS INTENDED. ***\n\n*/\n</code></pre><pre><code class=\"lang-vb\" name=\"sys.txt.fallbackDecExc#1\">&#39; This example demonstrates the DecoderExceptionFallback class.\nImports System\nImports System.Text\n\nClass Sample\n    Public Shared Sub Main() \n        \n        &#39; Create an encoding, which is equivalent to calling the \n        &#39; ASCIIEncoding class constructor. \n        &#39; The DecoderExceptionFallback parameter specifies that an exception\n        &#39; is thrown if a character cannot be encoded. \n        &#39; An encoder exception fallback is also specified, but in this code\n        &#39; example the encoding operation cannot fail.  \n\n\n        Dim eef As New EncoderExceptionFallback()\n        Dim def As New DecoderExceptionFallback()\n        Dim ae As Encoding = Encoding.GetEncoding(&quot;us-ascii&quot;, eef, def)\n        Dim inputString As String = &quot;XYZ&quot;\n        Dim decodedString As String\n        Dim twoNewLines As String = vbCrLf &amp; vbCrLf\n        Dim numberOfEncodedBytes As Integer = ae.GetByteCount(inputString)\n        &#39; Counteract the compiler adding an extra element.\n        Dim encodedBytes(numberOfEncodedBytes - 1) As Byte\n        \n        &#39; --------------------------------------------------------------------------\n        Console.Clear()\n        \n        &#39; Display the name of the encoding.\n        Console.WriteLine(&quot;The name of the encoding is &quot;&quot;{0}&quot;&quot;.&quot; &amp; vbCrLf, ae.WebName)\n        \n        &#39; Display the input string in text.\n        Console.WriteLine(&quot;Input string ({0} characters): &quot;&quot;{1}&quot;&quot;&quot;, inputString.Length, inputString)\n        \n        &#39; Display the input string in hexadecimal.\n        &#39; Each element is converted to an integer with Convert.ToInt32.\n        Console.Write(&quot;Input string in hexadecimal: &quot;)\n        Dim c As Char\n        For Each c In  inputString.ToCharArray()\n            Console.Write(&quot;0x{0:X2} &quot;, Convert.ToInt32(c))\n        Next c\n        Console.Write(twoNewLines)\n        \n        &#39; --------------------------------------------------------------------------\n        &#39; Encode the input string. \n        Console.WriteLine(&quot;Encode the input string...&quot;)\n        numberOfEncodedBytes = ae.GetBytes(inputString, 0, inputString.Length, _\n                                           encodedBytes, 0)\n        &#39; Display the encoded bytes.\n        &#39; Each element is converted to an integer with Convert.ToInt32.\n        Console.WriteLine(&quot;Encoded bytes in hexadecimal ({0} bytes):&quot; &amp; vbCrLf, _\n                           numberOfEncodedBytes)\n        Dim b As Byte\n        For Each b In  encodedBytes\n            Console.Write(&quot;0x{0:X2} &quot;, Convert.ToInt32(b))\n        Next b\n        Console.Write(twoNewLines)\n        \n        &#39; --------------------------------------------------------------------------\n        &#39; Replace the encoded byte sequences for the characters &#39;X&#39; and &#39;Z&#39; with the \n        &#39; value 0xFF, which is outside the valid range of 0x00 to 0x7F for \n        &#39; ASCIIEncoding. The resulting byte sequence is actually the beginning of \n        &#39; this code example because it is the input to the decoder operation, and \n        &#39; is equivalent to a corrupted or improperly encoded byte sequence. \n\n        encodedBytes(0) = &amp;HFF\n        encodedBytes(2) = &amp;HFF\n        \n        Console.WriteLine(&quot;Display the corrupted byte sequence...&quot;)\n        &#39; Each element is converted to an integer with Convert.ToInt32.\n        Console.WriteLine(&quot;Encoded bytes in hexadecimal ({0} bytes):&quot; &amp; vbCrLf, _\n                           numberOfEncodedBytes)\n        For Each b In  encodedBytes\n            Console.Write(&quot;0x{0:X2} &quot;, Convert.ToInt32(b))\n        Next b\n        Console.Write(twoNewLines)\n        \n        &#39; --------------------------------------------------------------------------\n        &#39; Attempt to decode the encoded bytes. However, an exception is thrown \n        &#39; before the byte sequence can be decoded.\n        Console.WriteLine(&quot;Compare the decoded bytes to the input string...&quot;)\n        \n        Try\n            decodedString = ae.GetString(encodedBytes)\n        Catch dfe As DecoderFallbackException\n            Console.WriteLine(dfe)\n            Console.WriteLine(vbCrLf &amp; _\n                              &quot;*** THE CODE EXAMPLE TERMINATES HERE AS INTENDED. ***&quot;)\n            Return\n        End Try\n        \n        &#39; This statement is never executed.\n        Console.WriteLine(&quot;This statement is never executed.&quot;)\n    \n    End Sub &#39;Main\nEnd Class &#39;Sample\n&#39;\n&#39;This code example produces the following results:\n&#39;\n&#39;The name of the encoding is &quot;us-ascii&quot;.\n&#39;\n&#39;Input string (3 characters): &quot;XYZ&quot;\n&#39;Input string in hexadecimal: 0x58 0x59 0x5A\n&#39;\n&#39;Encode the input string...\n&#39;Encoded bytes in hexadecimal (3 bytes):\n&#39;\n&#39;0x58 0x59 0x5A\n&#39;\n&#39;Display the corrupted byte sequence...\n&#39;Encoded bytes in hexadecimal (3 bytes):\n&#39;\n&#39;0xFF 0x59 0xFF\n&#39;\n&#39;Compare the decoded bytes to the input string...\n&#39;System.Text.DecoderFallbackException: Unable to translate bytes [FF] at index 0 from speci\n&#39;fied code page to Unicode.\n&#39;   at System.Text.DecoderExceptionFallbackBuffer.Throw(Byte[] bytesUnknown, Int32 index)\n&#39;   at System.Text.DecoderExceptionFallbackBuffer.Fallback(Byte[] bytesUnknown, Int32 index\n&#39;)\n&#39;   at System.Text.DecoderFallbackBuffer.InternalFallback(Byte[] bytes, Byte* pBytes)\n&#39;   at System.Text.ASCIIEncoding.GetCharCount(Byte* bytes, Int32 count, DecoderNLS decoder)\n&#39;\n&#39;   at System.String.CreateStringFromEncoding(Byte* bytes, Int32 byteLength, Encoding encod\n&#39;ing)\n&#39;   at System.Text.ASCIIEncoding.GetString(Byte[] bytes, Int32 byteIndex, Int32 byteCount)\n&#39;   at System.Text.Encoding.GetString(Byte[] bytes)\n&#39;   at Sample.Main()\n&#39;\n&#39;*** THE CODE EXAMPLE TERMINATES HERE AS INTENDED. ***\n&#39;\n&#39;\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>An encoding maps a Unicode character to an encoded sequence of bytes, which can subsequently be transferred to a physical medium, such as a disk, or over a communications link. Characters can be mapped in various ways, and a particular encoding is represented by a type derived from the <a class=\"xref\" href=\"system.text.encoding\" data-linktype=\"relative-path\">Encoding</a> class. Specifically, the encoding type&#39;s <code>GetBytes</code> method encodes a character to a byte sequence, and the <code>GetChars</code> method decodes a byte sequence to a character.  </p>\n<p> A decoding operation can fail if the input byte sequence cannot be mapped by the encoding. For example, an <a class=\"xref\" href=\"system.text.asciiencoding\" data-linktype=\"relative-path\">ASCIIEncoding</a> object cannot decode a byte sequence that yields a character having a code point value that is outside the range U+0000 to U+007F.  </p>\n<p> In cases where an encoding or decoding conversion cannot be performed, the .NET Framework provides a failure-handling mechanism called a fallback. Your application can use the predefined .NET Framework decoder fallback, or it can create a custom decoder fallback derived from the <a class=\"xref\" href=\"system.text.decoderfallback\" data-linktype=\"relative-path\">DecoderFallback</a> and <a class=\"xref\" href=\"system.text.decoderfallbackbuffer\" data-linktype=\"relative-path\">DecoderFallbackBuffer</a> classes.  </p>\n<p> The .NET Framework provides two predefined classes that implement different fallback strategies for handling decoding conversion failures. The <a class=\"xref\" href=\"system.text.decoderreplacementfallback\" data-linktype=\"relative-path\">DecoderReplacementFallback</a> class substitutes a string provided in place of any input byte sequence that cannot be converted. After the substitute string is emitted, the decoding operation continues converting the remainder of the input. In contrast, the DecoderExceptionFallback class throws a <a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a> when an invalid byte sequence is encountered.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_DecoderExceptionFallback__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">DecoderExceptionFallback()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public DecoderExceptionFallback ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_DecoderExceptionFallback_MaxCharCount\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MaxCharCount</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the maximum number of characters this instance can return.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int MaxCharCount { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The return value is always zero.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_DecoderExceptionFallback_CreateFallbackBuffer\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CreateFallbackBuffer()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns a decoder fallback buffer that throws an exception if it cannot convert a sequence of bytes to a character.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override System.Text.DecoderFallbackBuffer CreateFallbackBuffer ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.text.decoderfallbackbuffer\" data-linktype=\"relative-path\">DecoderFallbackBuffer</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A decoder fallback buffer that throws an exception when it cannot decode a byte sequence.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>A decoder fallback buffer is responsible for receiving and handling byte sequences that a decoder cannot convert to characters. This method returns an instance of the <a class=\"xref\" href=\"system.text.decoderexceptionfallbackbuffer\" data-linktype=\"relative-path\">DecoderExceptionFallbackBuffer</a> class, which is a subclass of  the <a class=\"xref\" href=\"system.text.decoderfallbackbuffer\" data-linktype=\"relative-path\">DecoderFallbackBuffer</a> class. A <a class=\"xref\" href=\"system.text.decoderexceptionfallbackbuffer\" data-linktype=\"relative-path\">DecoderExceptionFallbackBuffer</a> object throws an <a class=\"xref\" href=\"system.text.decoderfallbackexception\" data-linktype=\"relative-path\">DecoderFallbackException</a> exception whenever a sequence of bytes is passed to its <a class=\"xref\" href=\"system.text.decoderexceptionfallbackbuffer#System_Text_DecoderExceptionFallbackBuffer_Fallback_\" data-linktype=\"relative-path\">Fallback</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_DecoderExceptionFallback_Equals_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Equals(Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Indicates whether the current <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a> object and a specified object are equal.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override bool Equals (object value);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>An object that derives from the <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a> class.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if <code>value</code> is not <code>null</code> and is a <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a> object; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Text_DecoderExceptionFallback_GetHashCode\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetHashCode()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Retrieves the hash code for this instance.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetHashCode ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The return value is always the same arbitrary value, and has no special significance.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Because the GetHashCode method always returns the same value, the application should not use this value to distinguish one <a class=\"xref\" href=\"system.text.decoderexceptionfallback\" data-linktype=\"relative-path\">DecoderExceptionFallback</a> object from another.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Text.DecoderExceptionFallback.yml\">\r\n<meta name=\"APIName\" content=\"System.Text.DecoderExceptionFallback\">\r\n<meta name=\"APIName\" content=\"System.Text.DecoderExceptionFallback..ctor\">\r\n<meta name=\"APIName\" content=\"System.Text.DecoderExceptionFallback.CreateFallbackBuffer\">\r\n<meta name=\"APIName\" content=\"System.Text.DecoderExceptionFallback.Equals\">\r\n<meta name=\"APIName\" content=\"System.Text.DecoderExceptionFallback.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Text.DecoderExceptionFallback.MaxCharCount\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"409d1590-8c71-27ae-b80f-f4fac1252b37\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides a failure-handling mechanism, called a fallback, for an encoded input byte sequence that cannot be converted to an input character. The fallback throws an exception instead of decoding the i…\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.text/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Text.DecoderExceptionFallback\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Text.DecoderExceptionFallback.yml","open_to_public_contributors":false,"api_name":["System.Text.DecoderExceptionFallback","System.Text.DecoderExceptionFallback..ctor","System.Text.DecoderExceptionFallback.CreateFallbackBuffer","System.Text.DecoderExceptionFallback.Equals","System.Text.DecoderExceptionFallback.GetHashCode","System.Text.DecoderExceptionFallback.MaxCharCount"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Text.DecoderExceptionFallback","System::Text::DecoderExceptionFallback","System.Text.DecoderExceptionFallback.#ctor","System::Text::DecoderExceptionFallback::#ctor","System.Text.DecoderExceptionFallback.CreateFallbackBuffer","System::Text::DecoderExceptionFallback::CreateFallbackBuffer","System.Text.DecoderExceptionFallback.Equals","System::Text::DecoderExceptionFallback::Equals","System.Text.DecoderExceptionFallback.GetHashCode","System::Text::DecoderExceptionFallback::GetHashCode","System.Text.DecoderExceptionFallback.MaxCharCount","System::Text::DecoderExceptionFallback::MaxCharCount"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"409d1590-8c71-27ae-b80f-f4fac1252b37","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Text/DecoderExceptionFallback.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DecoderExceptionFallback class | Microsoft Docs","_op_ogTitle":"DecoderExceptionFallback class","description":"Provides a failure-handling mechanism, called a fallback, for an encoded input byte sequence that cannot be converted to an input character. The fallback throws an exception instead of decoding the i…","toc_asset_id":"api/_splitted/System.Text/toc.json","toc_rel":"_splitted/System.Text/toc.json","source_url":"","ms.assetid":"System.Text.DecoderExceptionFallback","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.text.decoderexceptionfallback","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.text.decoderexceptionfallback","fileRelativePath":"api/System.Text.DecoderExceptionFallback.html"},"themesRelativePathToOutputRoot":"_themes/"}