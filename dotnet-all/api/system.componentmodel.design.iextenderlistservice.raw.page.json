{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">IExtenderListService</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides an interface that can list extender providers.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public interface IExtenderListService</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example demonstrates using the IExtenderListService to obtain the set of currently active extender providers.  </p>\n<pre><code class=\"lang-vb\" name=\"ExtenderListServiceExample#1\">Imports System\nImports System.Collections\nImports System.ComponentModel\nImports System.ComponentModel.Design\nImports System.Drawing\nImports System.Data\nImports System.Windows.Forms\n\n&#39; This control lists any active extender providers.\nPublic Class ExtenderListServiceControl\n   Inherits System.Windows.Forms.UserControl\n   Private extenderListService As IExtenderListService\n   Private extenderNames() As String\n   \n   Public Sub New()\n      extenderNames = New String(-1) {}\n      Me.Width = 600\n    End Sub\n\n    &#39; Queries the IExtenderListService when the control is sited \n    &#39; in design mode.\n    Public Overrides Property Site() As System.ComponentModel.ISite\n        Get\n            Return MyBase.Site\n        End Get\n        Set(ByVal Value As System.ComponentModel.ISite)\n            MyBase.Site = Value\n            If Me.DesignMode Then\n                extenderListService = CType(Me.GetService(GetType(IExtenderListService)), IExtenderListService)\n                If (extenderListService IsNot Nothing) Then\n                    Dim extenders As IExtenderProvider() = extenderListService.GetExtenderProviders()\n                    extenderNames = New String(extenders.Length) {}\n                    Dim i As Integer\n                    For i = 0 To extenders.Length - 1\n                        Dim types As Type() = Type.GetTypeArray(extenders)\n                        extenderNames(i) = &quot;ExtenderProvider #&quot; + i.ToString() + &quot;:  &quot; + types(i).FullName\n                    Next i\n                End If\n            Else\n                extenderListService = Nothing\n                extenderNames = New String(-1) {}\n            End If\n        End Set\n    End Property\n\n    &#39; Draws a list of any active extender providers\n    Protected Overrides Sub OnPaint(ByVal e As System.Windows.Forms.PaintEventArgs)\n        If extenderNames.Length = 0 Then\n            e.Graphics.DrawString(&quot;No active extender providers&quot;, New Font(&quot;Arial&quot;, 9), New SolidBrush(Color.Black), 10, 10)\n        Else\n            e.Graphics.DrawString(&quot;List of types of active extender providers&quot;, New Font(&quot;Arial&quot;, 9), New SolidBrush(Color.Black), 10, 10)\n        End If\n        Dim i As Integer\n        For i = 0 To extenderNames.Length - 1\n            e.Graphics.DrawString(extenderNames(i), New Font(&quot;Arial&quot;, 8), New SolidBrush(Color.Black), 10, 25 + i * 10)\n        Next i\n    End Sub\n\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"ExtenderListServiceExample#1\">using System;\nusing System.Collections;\nusing System.ComponentModel;\nusing System.ComponentModel.Design;\nusing System.Drawing;\nusing System.Data;\nusing System.Windows.Forms;\n\nnamespace ExtenderListServiceExample\n{\n    // This control lists any active extender providers.\n    public class ExtenderListServiceControl : System.Windows.Forms.UserControl\n    {\t\t\n        private IExtenderListService extenderListService;\n        private string[] extenderNames;\n\n        public ExtenderListServiceControl()\n        {\t\t\t\n            extenderNames = new string[0];\n            this.Width = 600;\n        }\n\n        // Queries the IExtenderListService when the control is sited \n        // in design mode.\n        public override System.ComponentModel.ISite Site\n        {\n            get\n            {\n                return base.Site;\n            }\n            set\n            {\n                base.Site = value;\n                if( this.DesignMode )\n                {\n                    extenderListService = (IExtenderListService)this.GetService(typeof(IExtenderListService));\n                    if( extenderListService != null )\n                    {\n                        IExtenderProvider[] extenders = extenderListService.GetExtenderProviders();\n                        extenderNames = new string[extenders.Length];\n                        for( int i=0; i&lt;extenders.Length; i++ )\n                            extenderNames[i] = &quot;ExtenderProvider #&quot;+i.ToString()+&quot;:  &quot;+extenders[i].GetType().FullName;\n                    }\n                }\n                else\n                {\n                    extenderListService = null;\n                    extenderNames = new string[0];\n                }\n            }\n        }\n\n        // Draws a list of any active extender providers\n        protected override void OnPaint(System.Windows.Forms.PaintEventArgs e)\n        {\n            if( extenderNames.Length == 0 )\n                e.Graphics.DrawString(&quot;No active extender providers&quot;, new Font(&quot;Arial&quot;, 9), new SolidBrush(Color.Black), 10, 10);\n            else\n                e.Graphics.DrawString(&quot;List of types of active extender providers&quot;, new Font(&quot;Arial&quot;, 9), new SolidBrush(Color.Black), 10, 10);\n            for(int i=0; i&lt;extenderNames.Length; i++)\n                e.Graphics.DrawString(extenderNames[i], new Font(&quot;Arial&quot;, 8), new SolidBrush(Color.Black), 10, 25+(i*10));\n        }\t\t\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"ExtenderListServiceExample#1\">#using &lt;system.dll&gt;\n#using &lt;system.drawing.dll&gt;\n#using &lt;system.windows.forms.dll&gt;\n\nusing namespace System;\nusing namespace System::Drawing;\nusing namespace System::ComponentModel;\nusing namespace System::ComponentModel::Design;\nusing namespace System::Windows::Forms;\n\nnamespace ExtenderListServiceExample\n{\n   // This control lists any active extender providers.\n   public ref class ExtenderListServiceControl: public UserControl\n   {\n   private:\n      IExtenderListService^ extenderListService;\n      array&lt;String^&gt;^extenderNames;\n\n   public:\n      ExtenderListServiceControl()\n      {\n         this-&gt;Width = 600;\n      }\n\n      property ISite^ Site \n      {\n         // Queries the IExtenderListService when the control is sited\n         // in design mode.\n         virtual ISite^ get() override\n         {\n            return __super::Site;\n         }\n\n         virtual void set( ISite^ value ) override\n         {\n            __super::Site = value;\n            if ( this-&gt;DesignMode )\n            {\n               extenderListService = dynamic_cast&lt;IExtenderListService^&gt;(this-&gt;GetService( IExtenderListService::typeid ));\n               if ( extenderListService != nullptr )\n               {\n                  array&lt;IExtenderProvider^&gt;^extenders = extenderListService-&gt;GetExtenderProviders();\n                  extenderNames = gcnew array&lt;String^&gt;(extenders-&gt;Length);\n                  for ( int i = 0; i &lt; extenders-&gt;Length; i++ )\n                     extenderNames[ i ] = String::Concat( &quot;ExtenderProvider #&quot;, i.ToString(), &quot;:  &quot;, extenders[ i ]-&gt;GetType()-&gt;FullName );\n               }\n            }\n            else\n            {\n               extenderListService = nullptr;\n            }\n         }\n      }\n\n   protected:\n\n      // Draws a list of any active extender providers\n      virtual void OnPaint( PaintEventArgs^ e ) override\n      {\n         if ( extenderNames-&gt;Length == 0 )\n                  e-&gt;Graphics-&gt;DrawString( &quot;No active extender providers&quot;, gcnew System::Drawing::Font( &quot;Arial&quot;,9 ), gcnew SolidBrush( Color::Black ), 10, 10 );\n         else\n                  e-&gt;Graphics-&gt;DrawString( &quot;List of types of active extender providers&quot;, gcnew System::Drawing::Font( &quot;Arial&quot;,9 ), gcnew SolidBrush( Color::Black ), 10, 10 );\n\n         for ( int i = 0; i &lt; extenderNames-&gt;Length; i++ )\n            e-&gt;Graphics-&gt;DrawString( extenderNames[ i ], gcnew System::Drawing::Font( &quot;Arial&quot;,8 ), gcnew SolidBrush( Color::Black ), 10, 25 + (i * 10) );\n      }\n   };\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>A site can implement this service if it wants to provide a list of extender providers. By default, the list of extenders is generated by querying each component in the container that implements <a class=\"xref\" href=\"system.componentmodel.iextenderprovider\" data-linktype=\"relative-path\">IExtenderProvider</a> for the extenders each provides. By implementing this interface on a component site, a container can override the list of providers.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_Design_IExtenderListService_GetExtenderProviders_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_IExtenderListService_GetExtenderProviders\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetExtenderProviders()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the set of extender providers for the component.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.ComponentModel.IExtenderProvider[] GetExtenderProviders ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.iextenderprovider\" data-linktype=\"relative-path\">IExtenderProvider</a>[]</span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An array of type <a class=\"xref\" href=\"system.componentmodel.iextenderprovider\" data-linktype=\"relative-path\">IExtenderProvider</a> that lists the active extender providers. If there are no providers, an empty array is returned.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.Design.IExtenderListService.yml\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IExtenderListService\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IExtenderListService.GetExtenderProviders\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"a91cf164-2bf6-e63c-1083-50b57863d49a\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides an interface that can list extender providers.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.componentmodel.design/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.ComponentModel.Design.IExtenderListService\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.Design.IExtenderListService.yml","open_to_public_contributors":false,"api_name":["System.ComponentModel.Design.IExtenderListService","System.ComponentModel.Design.IExtenderListService.GetExtenderProviders"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.ComponentModel.Design.IExtenderListService","System::ComponentModel::Design::IExtenderListService","System.ComponentModel.Design.IExtenderListService.GetExtenderProviders","System::ComponentModel::Design::IExtenderListService::GetExtenderProviders"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"a91cf164-2bf6-e63c-1083-50b57863d49a","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.ComponentModel.Design/IExtenderListService.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IExtenderListService interface | Microsoft Docs","_op_ogTitle":"IExtenderListService interface","description":"Provides an interface that can list extender providers.\n","toc_asset_id":"api/_splitted/System.ComponentModel.Design/toc.json","toc_rel":"_splitted/System.ComponentModel.Design/toc.json","source_url":"","ms.assetid":"System.ComponentModel.Design.IExtenderListService","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.design.iextenderlistservice","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.design.iextenderlistservice","fileRelativePath":"api/System.ComponentModel.Design.IExtenderListService.html"},"themesRelativePathToOutputRoot":"_themes/"}