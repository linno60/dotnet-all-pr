{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">SessionStateUtility</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides helper methods used by session-state modules and session-state store providers to manage session information for an ASP.NET application. This class cannot be inherited.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public static class SessionStateUtility</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">SessionStateUtility</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example shows a custom session-state module implementation that stores session information in memory using a <a class=\"xref\" href=\"system.collections.hashtable\" data-linktype=\"relative-path\">Hashtable</a>. The module uses the SessionStateUtility class to reference the current <a class=\"xref\" href=\"system.web.httpcontext\" data-linktype=\"relative-path\">HttpContext</a> and <a class=\"xref\" href=\"system.web.sessionstate.sessionidmanager\" data-linktype=\"relative-path\">SessionIDManager</a>, retrieve the current <a class=\"xref\" href=\"system.web.httpstaticobjectscollection\" data-linktype=\"relative-path\">HttpStaticObjectsCollection</a>, and raise the <strong>Session_OnEnd</strong> event defined in the Global.asax file for the ASP.NET application. This application does not prevent simultaneous Web requests from using the same session identifier.  </p>\n<pre><code class=\"lang-vb\" name=\"System.Web.SessionState.SessionStateUtility#1\">Imports System\nImports System.Web\nImports System.Web.SessionState\nImports System.Collections\nImports System.Threading\nImports System.Web.Configuration\nImports System.Configuration\n\nNamespace Samples.AspNet.SessionState\n\n    Public NotInheritable Class MySessionStateModule\n        Implements IHttpModule, IDisposable\n\n        Private pSessionItems As Hashtable = New Hashtable()\n        Private pTimer As Timer\n        Private pTimerSeconds As Integer = 10\n        Private pInitialized As Boolean = False\n        Private pTimeout As Integer\n        Private pCookieMode As HttpCookieMode = HttpCookieMode.UseCookies\n        Private pHashtableLock As ReaderWriterLock = New ReaderWriterLock()\n        Private pSessionIDManager As ISessionIDManager\n        Private pConfig As SessionStateSection\n\n\n        &#39; The SessionItem class is used to store data for a particular session along with\n        &#39; an expiration date and time. SessionItem objects are added to the local Hashtable\n        &#39; in the OnReleaseRequestState event handler and retrieved from the local Hashtable\n        &#39; in the OnAcquireRequestState event handler. The ExpireCallback method is called\n        &#39; periodically by the local Timer to check for all expired SessionItem objects in the\n        &#39; local Hashtable and remove them. \n        Private Class SessionItem\n            Friend Items As SessionStateItemCollection\n            Friend StaticObjects As HttpStaticObjectsCollection\n            Friend Expires As DateTime\n        End Class\n\n\n\n        &#39;\n        &#39; IHttpModule.Init\n        &#39;\n        \n\tPublic Sub Init(ByVal app As HttpApplication) Implements IHttpModule.Init\n            &#39; Add event handlers.\n            AddHandler app.AcquireRequestState, New EventHandler(AddressOf Me.OnAcquireRequestState)\n            AddHandler app.ReleaseRequestState, New EventHandler(AddressOf Me.OnReleaseRequestState)\n\n            &#39; Create a SessionIDManager.\n            pSessionIDManager = New SessionIDManager()\n            pSessionIDManager.Initialize()\n\n            &#39; If not already initialized, initialize timer and configuration.\n            If Not pInitialized Then\n                SyncLock GetType(MySessionStateModule)\n                    If Not pInitialized Then\n                        &#39; Create a Timer to invoke the ExpireCallback method based on\n                        &#39; the pTimerSeconds value (e.g. every 10 seconds).\n                        pTimer = New Timer(New TimerCallback(AddressOf Me.ExpireCallback), _\n                                           Nothing, _\n                                           0, _\n                                           pTimerSeconds * 1000)\n\n                        &#39; Get the configuration section and set timeout and CookieMode values.\n                        Dim cfg As System.Configuration.Configuration = _\n                          WebConfigurationManager.OpenWebConfiguration( _\n                            System.Web.Hosting.HostingEnvironment.ApplicationVirtualPath)\n                        pConfig = CType(cfg.GetSection(&quot;system.web/sessionState&quot;), SessionStateSection)\n\n                        pTimeout = CInt(pConfig.Timeout.TotalMinutes)\n                        pCookieMode = pConfig.Cookieless\n\n                        pInitialized = True\n                    End If\n                End SyncLock\n            End If\n        End Sub\n\n\n\n        &#39;\n        &#39; IHttpModule.Dispose\n        &#39;\n        Public Sub Dispose() Implements IHttpModule.Dispose, IDisposable.Dispose\n            If Not pTimer Is Nothing Then CType(pTimer, IDisposable).Dispose()\n        End Sub\n\n\n        &#39;\n        &#39; Called periodically by the Timer created in the Init method to check for \n        &#39; expired sessions and remove expired data.\n        &#39;\n        Sub ExpireCallback(ByVal state As Object)\n            Try\n                pHashtableLock.AcquireWriterLock(Int32.MaxValue)\n\n                Me.RemoveExpiredSessionData()\n\n            Finally\n                pHashtableLock.ReleaseWriterLock()\n            End Try\n\n        End Sub\n\n        &#39;\n        &#39; Recursivly remove expired session data from session collection.\n        &#39;\n        Private Sub RemoveExpiredSessionData()\n            Dim sessionID As String\n            Dim entry As DictionaryEntry\n\n            For Each entry In pSessionItems\n                Dim item As SessionItem = CType(entry.Value, SessionItem)\n\n                If DateTime.Compare(item.Expires, DateTime.Now) &lt;= 0 Then\n                    sessionID = entry.Key.ToString()\n                    pSessionItems.Remove(entry.Key)\n\n                    Dim stateProvider As HttpSessionStateContainer = _\n                      New HttpSessionStateContainer(sessionID, _\n                                                   item.Items, _\n                                                   item.StaticObjects, _\n                                                   pTimeout, _\n                                                   False, _\n                                                   pCookieMode, _\n                                                   SessionStateMode.Custom, _\n                                                   False)\n\n                    SessionStateUtility.RaiseSessionEnd(stateProvider, Me, EventArgs.Empty)\n                    Me.RemoveExpiredSessionData()\n                    Exit For\n                End If\n            Next entry\n        End Sub\n\n\n    \t\n        &#39;\n        &#39; Event handler for HttpApplication.AcquireRequestState\n        &#39;\n        Private Sub OnAcquireRequestState(ByVal [source] As Object, ByVal args As EventArgs)\n            Dim app As HttpApplication = CType([source], HttpApplication)\n            Dim context As HttpContext = app.Context\n            Dim isNew As Boolean = False\n            Dim sessionID As String\n            Dim sessionData As SessionItem = Nothing\n            Dim supportSessionIDReissue As Boolean = True\n\n            pSessionIDManager.InitializeRequest(context, False, supportSessionIDReissue)\n            sessionID = pSessionIDManager.GetSessionID(context)\n\n\n            If Not (sessionID Is Nothing) Then\n                Try\n                    pHashtableLock.AcquireReaderLock(Int32.MaxValue)\n                    sessionData = CType(pSessionItems(sessionID), SessionItem)\n\n                    If Not (sessionData Is Nothing) Then\n                        sessionData.Expires = DateTime.Now.AddMinutes(pTimeout)\n                    End If\n                Finally\n                    pHashtableLock.ReleaseReaderLock()\n                End Try\n            Else\n                Dim redirected, cookieAdded As Boolean\n\n                sessionID = pSessionIDManager.CreateSessionID(context)\n                pSessionIDManager.SaveSessionID(context, sessionID, redirected, cookieAdded)\n\n                If redirected Then Return\n            End If\n            If sessionData Is Nothing Then\n                &#39; Identify the session as a new session state instance. Create a new SessionItem\n                &#39; and add it to the local Hashtable.\n                isNew = True\n\n                sessionData = New SessionItem()\n\n                sessionData.Items = New SessionStateItemCollection()\n                sessionData.StaticObjects = SessionStateUtility.GetSessionStaticObjects(context)\n                sessionData.Expires = DateTime.Now.AddMinutes(pTimeout)\n\n                Try\n                    pHashtableLock.AcquireWriterLock(Int32.MaxValue)\n                    pSessionItems(sessionID) = sessionData\n                Finally\n                    pHashtableLock.ReleaseWriterLock()\n                End Try\n            End If\n\n            &#39; Add the session data to the current HttpContext.\n            SessionStateUtility.AddHttpSessionStateToContext(context, _\n                             New HttpSessionStateContainer(sessionID, _\n                                                          sessionData.Items, _\n                                                          sessionData.StaticObjects, _\n                                                          pTimeout, _\n                                                          isNew, _\n                                                          pCookieMode, _\n                                                          SessionStateMode.Custom, _\n                                                          False))\n\n            &#39; Execute the Session_OnStart event for a new session.\n            If isNew Then RaiseEvent Start(Me, EventArgs.Empty)\n        End Sub\n\n\n        &#39;\n        &#39; Event for Session_OnStart event in the Global.asax file.\n        &#39;\n\tPublic Event Start As EventHandler\n\n\n\t\n        &#39;\n        &#39; Event handler for HttpApplication.ReleaseRequestState\n        &#39;\n        Private Sub OnReleaseRequestState(ByVal [source] As Object, ByVal args As EventArgs)\n            Dim app As HttpApplication = CType([source], HttpApplication)\n            Dim context As HttpContext = app.Context\n            Dim sessionID As String\n\n            &#39; Read the session state from the context\n            Dim stateProvider As HttpSessionStateContainer = _\n               CType(SessionStateUtility.GetHttpSessionStateFromContext(context), HttpSessionStateContainer)\n\n            &#39; If Session.Abandon() was called, remove the session data from the local Hashtable\n            &#39; and execute the Session_OnEnd event from the Global.asax file.\n            If stateProvider.IsAbandoned Then\n                Try\n                    pHashtableLock.AcquireWriterLock(Int32.MaxValue)\n\n                    sessionID = pSessionIDManager.GetSessionID(context)\n                    pSessionItems.Remove(sessionID)\n                Finally\n                    pHashtableLock.ReleaseWriterLock()\n                End Try\n\n                SessionStateUtility.RaiseSessionEnd(stateProvider, Me, EventArgs.Empty)\n            End If\n\n          SessionStateUtility.RemoveHttpSessionStateFromContext(context)\n        End Sub\n    \n    End Class\nEnd Namespace\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Web.SessionState.SessionStateUtility#1\">using System;\nusing System.Web;\nusing System.Web.SessionState;\nusing System.Collections;\nusing System.Threading;\nusing System.Web.Configuration;\nusing System.Configuration;\n\nnamespace Samples.AspNet.SessionState\n{\n\n    public sealed class MySessionStateModule : IHttpModule, IDisposable\n    {\n        private Hashtable pSessionItems = new Hashtable();\n        private Timer pTimer;\n        private int pTimerSeconds = 10;\n        private bool pInitialized = false;\n        private int pTimeout;\n        private HttpCookieMode pCookieMode = HttpCookieMode.UseCookies;\n        private ReaderWriterLock pHashtableLock = new ReaderWriterLock();\n        private ISessionIDManager pSessionIDManager;\n        private SessionStateSection pConfig;\n\n\n        // The SessionItem class is used to store data for a particular session along with\n        // an expiration date and time. SessionItem objects are added to the local Hashtable\n        // in the OnReleaseRequestState event handler and retrieved from the local Hashtable\n        // in the OnAcquireRequestState event handler. The ExpireCallback method is called\n        // periodically by the local Timer to check for all expired SessionItem objects in the\n        // local Hashtable and remove them.\n\n        private class SessionItem\n        {\n            internal SessionStateItemCollection Items;\n            internal HttpStaticObjectsCollection StaticObjects;\n            internal DateTime Expires;\n        }\n\n\n        //\n        // IHttpModule.Init\n        //\n\n        public void Init(HttpApplication app)\n        {\n            // Add event handlers.\n            app.AcquireRequestState += new EventHandler(this.OnAcquireRequestState);\n            app.ReleaseRequestState += new EventHandler(this.OnReleaseRequestState);\n\n            // Create a SessionIDManager.\n            pSessionIDManager = new SessionIDManager();\n            pSessionIDManager.Initialize();\n\n            // If not already initialized, initialize timer and configuration.\n            if (!pInitialized)\n            {\n                lock (typeof(MySessionStateModule))\n                {\n                    if (!pInitialized)\n                    {\n                        // Create a Timer to invoke the ExpireCallback method based on\n                        // the pTimerSeconds value (e.g. every 10 seconds).\n\n                        pTimer = new Timer(new TimerCallback(this.ExpireCallback),\n                                           null,\n                                           0,\n                                           pTimerSeconds * 1000);\n\n                        // Get the configuration section and set timeout and CookieMode values.\n                        Configuration cfg =\n                          WebConfigurationManager.OpenWebConfiguration(System.Web.Hosting.HostingEnvironment.ApplicationVirtualPath);\n                        pConfig = (SessionStateSection)cfg.GetSection(&quot;system.web/sessionState&quot;);\n\n                        pTimeout = (int)pConfig.Timeout.TotalMinutes;\n                        pCookieMode = pConfig.Cookieless;\n\n                        pInitialized = true;\n                    }\n                }\n            }\n        }\n\n\n\n        //\n        // IHttpModule.Dispose\n        //\n\n        public void Dispose()\n        {\n            if (pTimer != null)\n            {\n                this.pTimer.Dispose();\n               ((IDisposable)pTimer).Dispose();\n            }\n        }\n\n\n        //\n        // Called periodically by the Timer created in the Init method to check for \n        // expired sessions and remove expired data.\n        //\n\n        void ExpireCallback(object state)\n        {\n            try\n            {\n                pHashtableLock.AcquireWriterLock(Int32.MaxValue);\n\n                this.RemoveExpiredSessionData();\n\n            }\n            finally\n            {\n                pHashtableLock.ReleaseWriterLock();\n            }\n        }\n\n\n        //\n        // Recursivly remove expired session data from session collection.\n        //\n        private void RemoveExpiredSessionData()\n        {\n            string sessionID;\n\n            foreach (DictionaryEntry entry in pSessionItems)\n            {\n                SessionItem item = (SessionItem)entry.Value;\n\n                if ( DateTime.Compare(item.Expires, DateTime.Now)&lt;=0 )\n                {\n                    sessionID = entry.Key.ToString();\n                    pSessionItems.Remove(entry.Key);\n\n                    HttpSessionStateContainer stateProvider =\n                      new HttpSessionStateContainer(sessionID,\n                                                   item.Items,\n                                                   item.StaticObjects,\n                                                   pTimeout,\n                                                   false,\n                                                   pCookieMode,\n                                                   SessionStateMode.Custom,\n                                                   false);\n\n                    SessionStateUtility.RaiseSessionEnd(stateProvider, this, EventArgs.Empty);\n                    this.RemoveExpiredSessionData();\n                    break;\n                }\n            }\n\n        }\n\n\n        //\n        // Event handler for HttpApplication.AcquireRequestState\n        //\n\n        private void OnAcquireRequestState(object source, EventArgs args)\n        {\n            HttpApplication app = (HttpApplication)source;\n            HttpContext context = app.Context;\n            bool isNew = false;\n            string sessionID;\n            SessionItem sessionData = null;\n            bool supportSessionIDReissue = true;\n\n            pSessionIDManager.InitializeRequest(context, false, out supportSessionIDReissue);\n            sessionID = pSessionIDManager.GetSessionID(context);\n\n\n            if (sessionID != null)\n            {\n                try\n                {\n                    pHashtableLock.AcquireReaderLock(Int32.MaxValue);\n                    sessionData = (SessionItem)pSessionItems[sessionID];\n\n                    if (sessionData != null)\n                       sessionData.Expires = DateTime.Now.AddMinutes(pTimeout);\n                }\n                finally\n                {\n                    pHashtableLock.ReleaseReaderLock();\n                }\n            }\n            else\n            {\n                bool redirected, cookieAdded;\n\n                sessionID = pSessionIDManager.CreateSessionID(context);\n                pSessionIDManager.SaveSessionID(context, sessionID, out redirected, out cookieAdded);\n\n                if (redirected)\n                    return;\n            }\n\n            if (sessionData == null)\n            {\n                // Identify the session as a new session state instance. Create a new SessionItem\n                // and add it to the local Hashtable.\n\n                isNew = true;\n\n                sessionData = new SessionItem();\n\n                sessionData.Items = new SessionStateItemCollection();\n                sessionData.StaticObjects = SessionStateUtility.GetSessionStaticObjects(context);\n                sessionData.Expires = DateTime.Now.AddMinutes(pTimeout);\n\n                try\n                {\n                    pHashtableLock.AcquireWriterLock(Int32.MaxValue);\n                    pSessionItems[sessionID] = sessionData;\n                }\n                finally\n                {\n                    pHashtableLock.ReleaseWriterLock();\n                }\n            }\n\n            // Add the session data to the current HttpContext.\n            SessionStateUtility.AddHttpSessionStateToContext(context,\n                             new HttpSessionStateContainer(sessionID,\n                                                          sessionData.Items,\n                                                          sessionData.StaticObjects,\n                                                          pTimeout,\n                                                          isNew,\n                                                          pCookieMode,\n                                                          SessionStateMode.Custom,\n                                                          false));\n\n            // Execute the Session_OnStart event for a new session.\n            if (isNew &amp;&amp; Start != null)\n            {\n                Start(this, EventArgs.Empty);\n            }\n        }\n\n        //\n        // Event for Session_OnStart event in the Global.asax file.\n        //\n\n        public event EventHandler Start;\n\n\n        //\n        // Event handler for HttpApplication.ReleaseRequestState\n        //\n\n        private void OnReleaseRequestState(object source, EventArgs args)\n        {\n            HttpApplication app = (HttpApplication)source;\n            HttpContext context = app.Context;\n            string sessionID;\n\n            // Read the session state from the context\n            HttpSessionStateContainer stateProvider =\n              (HttpSessionStateContainer)(SessionStateUtility.GetHttpSessionStateFromContext(context));\n\n            // If Session.Abandon() was called, remove the session data from the local Hashtable\n            // and execute the Session_OnEnd event from the Global.asax file.\n            if (stateProvider.IsAbandoned)\n            {\n                try\n                {\n                    pHashtableLock.AcquireWriterLock(Int32.MaxValue);\n\n                    sessionID = pSessionIDManager.GetSessionID(context);\n                    pSessionItems.Remove(sessionID);\n                }\n                finally\n                {\n                    pHashtableLock.ReleaseWriterLock();\n                }\n\n                SessionStateUtility.RaiseSessionEnd(stateProvider, this, EventArgs.Empty);\n            }\n\n            SessionStateUtility.RemoveHttpSessionStateFromContext(context);\n        }\n\n\n    }\n}\n</code></pre><p> To use this custom session-state module in an ASP.NET application, you can replace the existing <a class=\"xref\" href=\"system.web.sessionstate.sessionstatemodule\" data-linktype=\"relative-path\">SessionStateModule</a> reference in the Web.config file, as shown in the following example.  </p>\n<pre><code>&lt;configuration&gt;  \n  &lt;system.web&gt;  \n    &lt;httpModules&gt;  \n      &lt;remove name=&quot;Session&quot; /&gt;  \n      &lt;add name=&quot;Session&quot;  \n      type=&quot;Samples.AspNet.SessionState.MySessionStateModule&quot; /&gt;  \n    &lt;/httpModules&gt;  \n  &lt;/system.web&gt;  \n&lt;/configuration&gt;  \n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The SessionStateUtility class provides static helper methods that are used by a session-state module or a session-state store provider. Application developers will not need to call these methods from their code.  </p>\n<p> The following table describes the ways the session-state module and session-state store provider use the methods.  </p>\n<table>\n<thead>\n<tr>\n<th>Method</th>\n<th>Use</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a class=\"xref\" href=\"system.web.sessionstate.sessionstateutility#System_Web_SessionState_SessionStateUtility_GetHttpSessionStateFromContext_\" data-linktype=\"relative-path\">GetHttpSessionStateFromContext</a> method</td>\n<td>Can be used by custom session-state modules to either retrieve session information for an existing session or create session information for a new session.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.sessionstate.sessionstateutility#System_Web_SessionState_SessionStateUtility_AddHttpSessionStateToContext_\" data-linktype=\"relative-path\">AddHttpSessionStateToContext</a> method</td>\n<td>Called by the session-state module to add the session data to the current <a class=\"xref\" href=\"system.web.httpcontext\" data-linktype=\"relative-path\">HttpContext</a> and make it available to application code through the <a class=\"xref\" href=\"system.web.httpcontext#System_Web_HttpContext_Session_\" data-linktype=\"relative-path\">Session</a> property.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.sessionstate.sessionstateutility#System_Web_SessionState_SessionStateUtility_RemoveHttpSessionStateFromContext_\" data-linktype=\"relative-path\">RemoveHttpSessionStateFromContext</a> method</td>\n<td>Called by the session-state module during the <a class=\"xref\" href=\"system.web.httpapplication#System_Web_HttpApplication_ReleaseRequestState\" data-linktype=\"relative-path\">ReleaseRequestState</a> or <a class=\"xref\" href=\"system.web.httpapplication#System_Web_HttpApplication_EndRequest\" data-linktype=\"relative-path\">EndRequest</a> events at the end of a request, to clear session data from the current <a class=\"xref\" href=\"system.web.httpcontext\" data-linktype=\"relative-path\">HttpContext</a>.</td>\n</tr>\n<tr>\n<td><a class=\"xref\" href=\"system.web.sessionstate.sessionstateutility#System_Web_SessionState_SessionStateUtility_GetSessionStaticObjects_\" data-linktype=\"relative-path\">GetSessionStaticObjects</a> method</td>\n<td>Called by the session-state module to get a reference to the <a class=\"xref\" href=\"system.web.sessionstate.httpsessionstate#System_Web_SessionState_HttpSessionState_StaticObjects_\" data-linktype=\"relative-path\">StaticObjects</a> collection based on objects defined in the Global.asax file. The <a class=\"xref\" href=\"system.web.httpstaticobjectscollection\" data-linktype=\"relative-path\">HttpStaticObjectsCollection</a> collection returned is included with the session data added to the current <a class=\"xref\" href=\"system.web.httpcontext\" data-linktype=\"relative-path\">HttpContext</a>.</td>\n</tr>\n</tbody>\n</table>\n<p> Session data is passed to and retrieved from the current <a class=\"xref\" href=\"system.web.httpcontext\" data-linktype=\"relative-path\">HttpContext</a> as an <a class=\"xref\" href=\"system.web.sessionstate.httpsessionstatecontainer\" data-linktype=\"relative-path\">HttpSessionStateContainer</a> object or any valid implementation of the <a class=\"xref\" href=\"system.web.sessionstate.ihttpsessionstate\" data-linktype=\"relative-path\">IHttpSessionState</a> interface.  </p>\n<p> For information about implementing a session-state store provider, see <a href=\"../topic/implementing%20a%20session-state%20store%20provider\" data-linktype=\"relative-path\">Implementing a Session-State Store Provider</a>.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_SessionState_SessionStateUtility_SerializationSurrogateSelector\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SerializationSurrogateSelector</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a serialization surrogate selector that is used for session serialization customization.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Runtime.Serialization.ISurrogateSelector SerializationSurrogateSelector { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.runtime.serialization.isurrogateselector\" data-linktype=\"relative-path\">ISurrogateSelector</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A serialization surrogate selector.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_SessionState_SessionStateUtility_AddHttpSessionStateToContext_System_Web_HttpContext_System_Web_SessionState_IHttpSessionState_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">AddHttpSessionStateToContext(HttpContext, IHttpSessionState)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Applies the session data to the context for the current request.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void AddHttpSessionStateToContext (System.Web.HttpContext context, System.Web.SessionState.IHttpSessionState container);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>context</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.httpcontext\" data-linktype=\"relative-path\">HttpContext</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.web.httpcontext\" data-linktype=\"relative-path\">HttpContext</a> object to which to add the <a class=\"xref\" href=\"system.web.sessionstate.httpsessionstate\" data-linktype=\"relative-path\">HttpSessionState</a> object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>container</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.sessionstate.ihttpsessionstate\" data-linktype=\"relative-path\">IHttpSessionState</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.web.sessionstate.ihttpsessionstate\" data-linktype=\"relative-path\">IHttpSessionState</a> implementation instance to add to the specified HTTP context.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.httpexception\" data-linktype=\"relative-path\">HttpException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.web.sessionstate.httpsessionstate\" data-linktype=\"relative-path\">HttpSessionState</a> object for the current session has already been added to the specified <code>context</code>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The AddHttpSessionStateToContext method is used by a session-state module to apply session data to the current request. This occurs during the <a class=\"xref\" href=\"system.web.httpapplication#System_Web_HttpApplication_AcquireRequestState\" data-linktype=\"relative-path\">AcquireRequestState</a> event at the beginning of a request. Session data for the current request is either retrieved for an existing session or created for a new session. The session data is then encapsulated in an <a class=\"xref\" href=\"system.web.sessionstate.ihttpsessionstate\" data-linktype=\"relative-path\">IHttpSessionState</a> implementation instance, which is passed to the AddHttpSessionStateToContext method along with the current <a class=\"xref\" href=\"system.web.httpcontext\" data-linktype=\"relative-path\">HttpContext</a>. The supplied session data is then made available to application code through the <a class=\"xref\" href=\"system.web.httpcontext#System_Web_HttpContext_Session_\" data-linktype=\"relative-path\">Session</a> property of the current context.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_SessionState_SessionStateUtility_GetHttpSessionStateFromContext_System_Web_HttpContext_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetHttpSessionStateFromContext(HttpContext)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Retrieves session data from the context for the current request.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Web.SessionState.IHttpSessionState GetHttpSessionStateFromContext (System.Web.HttpContext context);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>context</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.httpcontext\" data-linktype=\"relative-path\">HttpContext</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.web.httpcontext\" data-linktype=\"relative-path\">HttpContext</a> from which to retrieve session data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.sessionstate.ihttpsessionstate\" data-linktype=\"relative-path\">IHttpSessionState</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.web.sessionstate.ihttpsessionstate\" data-linktype=\"relative-path\">IHttpSessionState</a> implementation instance populated with session data from the current request.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The GetHttpSessionStateFromContext method can be used by a session-state module to retrieve session data from the current request. This occurs during the <a class=\"xref\" href=\"system.web.httpapplication#System_Web_HttpApplication_ReleaseRequestState\" data-linktype=\"relative-path\">ReleaseRequestState</a> event at the end of a request. The returned session data can then be written to the session data store. If the session has been abandoned, the session data can be removed from the data store and <a class=\"xref\" href=\"system.web.httpcontext\" data-linktype=\"relative-path\">HttpContext</a>, and the <strong>Session_OnEnd</strong> event can be executed.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_SessionState_SessionStateUtility_GetSessionStaticObjects_System_Web_HttpContext_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetSessionStaticObjects(HttpContext)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a reference to the static objects collection for the specified context.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static System.Web.HttpStaticObjectsCollection GetSessionStaticObjects (System.Web.HttpContext context);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>context</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.httpcontext\" data-linktype=\"relative-path\">HttpContext</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.web.httpcontext\" data-linktype=\"relative-path\">HttpContext</a> from which to get the static objects collection.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.httpstaticobjectscollection\" data-linktype=\"relative-path\">HttpStaticObjectsCollection</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.web.httpstaticobjectscollection\" data-linktype=\"relative-path\">HttpStaticObjectsCollection</a> collection populated with the <span class=\"xref\">stem.Web.SessionState.HttpSessionState.StaticObjects*</span> property value for the specified <a class=\"xref\" href=\"system.web.httpcontext\" data-linktype=\"relative-path\">HttpContext</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The GetSessionStaticObjects method is used to retrieve the collection of static objects defined in the Global.asax file for the ASP.NET application. A session-state module implementation will supply the returned <a class=\"xref\" href=\"system.web.httpstaticobjectscollection\" data-linktype=\"relative-path\">HttpStaticObjectsCollection</a> collection to the <a class=\"xref\" href=\"system.web.sessionstate.ihttpsessionstate\" data-linktype=\"relative-path\">IHttpSessionState</a> implementation instance that is added to the current context using the <a class=\"xref\" href=\"system.web.sessionstate.sessionstateutility#System_Web_SessionState_SessionStateUtility_AddHttpSessionStateToContext_\" data-linktype=\"relative-path\">AddHttpSessionStateToContext</a> method.  </p>\n<p> A <a class=\"xref\" href=\"system.web.sessionstate.sessionstatestoreproviderbase\" data-linktype=\"relative-path\">SessionStateStoreProviderBase</a> can also use the GetSessionStaticObjects method when creating a <a class=\"xref\" href=\"system.web.sessionstate.sessionstatestoredata\" data-linktype=\"relative-path\">SessionStateStoreData</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.6.2\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_SessionState_SessionStateUtility_IsSessionStateReadOnly_System_Web_HttpContext_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsSessionStateReadOnly(HttpContext)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value which indicates whether the session state is read-only for the specified <a class=\"xref\" href=\"system.web.httpcontext\" data-linktype=\"relative-path\">HttpContext</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool IsSessionStateReadOnly (System.Web.HttpContext context);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>context</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.httpcontext\" data-linktype=\"relative-path\">HttpContext</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Specifies the <a class=\"xref\" href=\"system.web.httpcontext\" data-linktype=\"relative-path\">HttpContext</a> to check.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the session state is read-only; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-4.6.2\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_SessionState_SessionStateUtility_IsSessionStateRequired_System_Web_HttpContext_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsSessionStateRequired(HttpContext)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value which indicates whether the session state is required for the specified <a class=\"xref\" href=\"system.web.httpcontext\" data-linktype=\"relative-path\">HttpContext</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static bool IsSessionStateRequired (System.Web.HttpContext context);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>context</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.httpcontext\" data-linktype=\"relative-path\">HttpContext</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>Specifies the <a class=\"xref\" href=\"system.web.httpcontext\" data-linktype=\"relative-path\">HttpContext</a> to check.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the session state is required; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_SessionState_SessionStateUtility_RaiseSessionEnd_System_Web_SessionState_IHttpSessionState_System_Object_System_EventArgs_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">RaiseSessionEnd(IHttpSessionState, Object, EventArgs)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Executes the <strong>Session_OnEnd</strong> event defined in the Global.asax file for the ASP.NET application.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void RaiseSessionEnd (System.Web.SessionState.IHttpSessionState session, object eventSource, EventArgs eventArgs);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>session</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.sessionstate.ihttpsessionstate\" data-linktype=\"relative-path\">IHttpSessionState</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.web.sessionstate.ihttpsessionstate\" data-linktype=\"relative-path\">IHttpSessionState</a> implementation instance for the session that has ended.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>eventSource</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The event source object to supply to the <code>Session_OnEnd</code> event.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>eventArgs</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.eventargs\" data-linktype=\"relative-path\">EventArgs</a> object to supply to the <code>Session_OnEnd</code> event.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The RaiseSessionEnd method is used by a session-state module to execute the <strong>Session_OnEnd</strong> event defined in the Global.asax file for an ASP.NET application. A session-state module will call the RaiseSessionEnd method when a session has been abandoned, or if the session expires.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_SessionState_SessionStateUtility_RemoveHttpSessionStateFromContext_System_Web_HttpContext_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">RemoveHttpSessionStateFromContext(HttpContext)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Removes session data from the specified context.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public static void RemoveHttpSessionStateFromContext (System.Web.HttpContext context);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>context</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.httpcontext\" data-linktype=\"relative-path\">HttpContext</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.web.httpcontext\" data-linktype=\"relative-path\">HttpContext</a> from which to remove session data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The RemoveHttpSessionStateFromContext method clears session data from the specified <a class=\"xref\" href=\"system.web.httpcontext\" data-linktype=\"relative-path\">HttpContext</a>. A session-state module will call the RemoveHttpSessionStateFromContext method in the handler for the <a class=\"xref\" href=\"system.web.httpapplication#System_Web_HttpApplication_ReleaseRequestState\" data-linktype=\"relative-path\">ReleaseRequestState</a> event.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.SessionState.SessionStateUtility.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.SessionState.SessionStateUtility\">\r\n<meta name=\"APIName\" content=\"System.Web.SessionState.SessionStateUtility.AddHttpSessionStateToContext\">\r\n<meta name=\"APIName\" content=\"System.Web.SessionState.SessionStateUtility.GetHttpSessionStateFromContext\">\r\n<meta name=\"APIName\" content=\"System.Web.SessionState.SessionStateUtility.GetSessionStaticObjects\">\r\n<meta name=\"APIName\" content=\"System.Web.SessionState.SessionStateUtility.IsSessionStateReadOnly\">\r\n<meta name=\"APIName\" content=\"System.Web.SessionState.SessionStateUtility.IsSessionStateRequired\">\r\n<meta name=\"APIName\" content=\"System.Web.SessionState.SessionStateUtility.RaiseSessionEnd\">\r\n<meta name=\"APIName\" content=\"System.Web.SessionState.SessionStateUtility.RemoveHttpSessionStateFromContext\">\r\n<meta name=\"APIName\" content=\"System.Web.SessionState.SessionStateUtility.SerializationSurrogateSelector\">\r\n<meta name=\"APILocation\" content=\"System.Web.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"f0c1ebc5-b1d9-2891-7ad9-71f5a1660976\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides helper methods used by session-state modules and session-state store providers to manage session information for an ASP.NET application. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.web.sessionstate/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.SessionState.SessionStateUtility\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.SessionState.SessionStateUtility.yml","open_to_public_contributors":false,"api_name":["System.Web.SessionState.SessionStateUtility","System.Web.SessionState.SessionStateUtility.AddHttpSessionStateToContext","System.Web.SessionState.SessionStateUtility.GetHttpSessionStateFromContext","System.Web.SessionState.SessionStateUtility.GetSessionStaticObjects","System.Web.SessionState.SessionStateUtility.IsSessionStateReadOnly","System.Web.SessionState.SessionStateUtility.IsSessionStateRequired","System.Web.SessionState.SessionStateUtility.RaiseSessionEnd","System.Web.SessionState.SessionStateUtility.RemoveHttpSessionStateFromContext","System.Web.SessionState.SessionStateUtility.SerializationSurrogateSelector"],"api_location":["System.Web.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.SessionState.SessionStateUtility","System::Web::SessionState::SessionStateUtility","System.Web.SessionState.SessionStateUtility.AddHttpSessionStateToContext","System::Web::SessionState::SessionStateUtility::AddHttpSessionStateToContext","System.Web.SessionState.SessionStateUtility.GetHttpSessionStateFromContext","System::Web::SessionState::SessionStateUtility::GetHttpSessionStateFromContext","System.Web.SessionState.SessionStateUtility.GetSessionStaticObjects","System::Web::SessionState::SessionStateUtility::GetSessionStaticObjects","System.Web.SessionState.SessionStateUtility.IsSessionStateReadOnly","System::Web::SessionState::SessionStateUtility::IsSessionStateReadOnly","System.Web.SessionState.SessionStateUtility.IsSessionStateRequired","System::Web::SessionState::SessionStateUtility::IsSessionStateRequired","System.Web.SessionState.SessionStateUtility.RaiseSessionEnd","System::Web::SessionState::SessionStateUtility::RaiseSessionEnd","System.Web.SessionState.SessionStateUtility.RemoveHttpSessionStateFromContext","System::Web::SessionState::SessionStateUtility::RemoveHttpSessionStateFromContext","System.Web.SessionState.SessionStateUtility.SerializationSurrogateSelector","System::Web::SessionState::SessionStateUtility::SerializationSurrogateSelector"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"f0c1ebc5-b1d9-2891-7ad9-71f5a1660976","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/SessionStateUtility.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SessionStateUtility class | Microsoft Docs","_op_ogTitle":"SessionStateUtility class","description":"Provides helper methods used by session-state modules and session-state store providers to manage session information for an ASP.NET application. This class cannot be inherited.\n","toc_asset_id":"api/_splitted/System.Web.SessionState/toc.json","toc_rel":"_splitted/System.Web.SessionState/toc.json","source_url":"","ms.assetid":"System.Web.SessionState.SessionStateUtility","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.web.sessionstate.sessionstateutility","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.web.sessionstate.sessionstateutility","fileRelativePath":"api/System.Web.SessionState.SessionStateUtility.html"},"themesRelativePathToOutputRoot":"_themes/"}