{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">SHA256Managed</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Computes the <a class=\"xref\" href=\"system.security.cryptography.sha256\" data-linktype=\"relative-path\">SHA256</a> hash for the input data using the managed library.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic class SHA256Managed : System.Security.Cryptography.SHA256</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm\" data-linktype=\"relative-path\">HashAlgorithm</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.sha256\" data-linktype=\"relative-path\">SHA256</a></span></div><span class=\"lang-csharp\">SHA256Managed</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_CanReuseTransform\" data-linktype=\"relative-path\">CanReuseTransform</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_CanTransformMultipleBlocks\" data-linktype=\"relative-path\">CanTransformMultipleBlocks</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_Clear\" data-linktype=\"relative-path\">Clear()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_ComputeHash_System_Byte___\" data-linktype=\"relative-path\">ComputeHash(Byte[])</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_ComputeHash_System_Byte___System_Int32_System_Int32_\" data-linktype=\"relative-path\">ComputeHash(Byte[], Int32, Int32)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_ComputeHash_System_IO_Stream_\" data-linktype=\"relative-path\">ComputeHash(Stream)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_Dispose\" data-linktype=\"relative-path\">Dispose()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_Dispose_System_Boolean_\" data-linktype=\"relative-path\">Dispose(Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_Hash\" data-linktype=\"relative-path\">Hash</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_HashSize\" data-linktype=\"relative-path\">HashSize</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_HashSizeValue\" data-linktype=\"relative-path\">HashSizeValue</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_HashValue\" data-linktype=\"relative-path\">HashValue</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_InputBlockSize\" data-linktype=\"relative-path\">InputBlockSize</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_OutputBlockSize\" data-linktype=\"relative-path\">OutputBlockSize</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_State\" data-linktype=\"relative-path\">State</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_TransformBlock_System_Byte___System_Int32_System_Int32_System_Byte___System_Int32_\" data-linktype=\"relative-path\">TransformBlock(Byte[], Int32, Int32, Byte[], Int32)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.hashalgorithm#System_Security_Cryptography_HashAlgorithm_TransformFinalBlock_System_Byte___System_Int32_System_Int32_\" data-linktype=\"relative-path\">TransformFinalBlock(Byte[], Int32, Int32)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.sha256#System_Security_Cryptography_SHA256_Create\" data-linktype=\"relative-path\">Create()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.cryptography.sha256#System_Security_Cryptography_SHA256_Create_System_String_\" data-linktype=\"relative-path\">Create(String)</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example calculates the SHA-256 hash for all files in a directory.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic SHA256 Example#1\">using namespace System;\nusing namespace System::IO;\nusing namespace System::Security::Cryptography;\n\n// Print the byte array in a readable format.\nvoid PrintByteArray( array&lt;Byte&gt;^array )\n{\n   int i;\n   for ( i = 0; i &lt; array-&gt;Length; i++ )\n   {\n      Console::Write( String::Format( &quot;{0:X2}&quot;, array[ i ] ) );\n      if ( (i % 4) == 3 )\n            Console::Write( &quot; &quot; );\n\n   }\n   Console::WriteLine();\n}\n\nint main()\n{\n   array&lt;String^&gt;^args = Environment::GetCommandLineArgs();\n   if ( args-&gt;Length &lt; 2 )\n   {\n      Console::WriteLine( &quot;Usage: hashdir &lt;directory&gt;&quot; );\n      return 0;\n   }\n\n   try\n   {\n\n      // Create a DirectoryInfo object representing the specified directory.\n      DirectoryInfo^ dir = gcnew DirectoryInfo( args[ 1 ] );\n\n      // Get the FileInfo objects for every file in the directory.\n      array&lt;FileInfo^&gt;^files = dir-&gt;GetFiles();\n\n      // Initialize a SHA256 hash object.\n      SHA256 ^ mySHA256 = SHA256Managed::Create();\n      array&lt;Byte&gt;^hashValue;\n\n      // Compute and print the hash values for each file in directory.\n      System::Collections::IEnumerator^ myEnum = files-&gt;GetEnumerator();\n      while ( myEnum-&gt;MoveNext() )\n      {\n         FileInfo^ fInfo = safe_cast&lt;FileInfo^&gt;(myEnum-&gt;Current);\n\n         // Create a fileStream for the file.\n         FileStream^ fileStream = fInfo-&gt;Open( FileMode::Open );\n\n         // Compute the hash of the fileStream.\n         hashValue = mySHA256-&gt;ComputeHash( fileStream );\n\n         // Write the name of the file to the Console.\n         Console::Write( &quot;{0}: &quot;, fInfo-&gt;Name );\n\n         // Write the hash value to the Console.\n         PrintByteArray( hashValue );\n\n         // Close the file.\n         fileStream-&gt;Close();\n      }\n      return 0;\n   }\n   catch ( DirectoryNotFoundException^ ) \n   {\n      Console::WriteLine( &quot;Error: The directory specified could not be found.&quot; );\n   }\n   catch ( IOException^ ) \n   {\n      Console::WriteLine( &quot;Error: A file in the directory could not be accessed.&quot; );\n   }\n\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic SHA256 Example#1\">using System;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Windows.Forms;\n\npublic class HashDirectory\n{\n\n    [STAThreadAttribute]\n    public static void Main(String[] args)\n    {\n        string directory = &quot;&quot;;\n        if (args.Length &lt; 1)\n        {\n            FolderBrowserDialog fbd = new FolderBrowserDialog();\n            DialogResult dr = fbd.ShowDialog();\n            if (dr == DialogResult.OK)\n                directory = fbd.SelectedPath;\n            else\n            {\n                Console.WriteLine(&quot;No directory selected.&quot;);\n                return;\n            }\n        }\n        else\n            directory = args[0];\n        try\n        {\n            // Create a DirectoryInfo object representing the specified directory.\n            DirectoryInfo dir = new DirectoryInfo(directory);\n            // Get the FileInfo objects for every file in the directory.\n            FileInfo[] files = dir.GetFiles();\n            // Initialize a SHA256 hash object.\n            SHA256 mySHA256 = SHA256Managed.Create();\n           \n            byte[] hashValue;\n            // Compute and print the hash values for each file in directory.\n            foreach (FileInfo fInfo in files)\n            {\n                // Create a fileStream for the file.\n                FileStream fileStream = fInfo.Open(FileMode.Open);\n                // Be sure it&#39;s positioned to the beginning of the stream.\n                fileStream.Position = 0;\n                // Compute the hash of the fileStream.\n                hashValue = mySHA256.ComputeHash(fileStream);\n                // Write the name of the file to the Console.\n                Console.Write(fInfo.Name + &quot;: &quot;);\n                // Write the hash value to the Console.\n                PrintByteArray(hashValue);\n                // Close the file.\n                fileStream.Close();\n            }\n            return;\n        }\n        catch (DirectoryNotFoundException)\n        {\n            Console.WriteLine(&quot;Error: The directory specified could not be found.&quot;);\n        }\n        catch (IOException)\n        {\n            Console.WriteLine(&quot;Error: A file in the directory could not be accessed.&quot;);\n        }\n    }\n    // Print the byte array in a readable format.\n    public static void PrintByteArray(byte[] array)\n    {\n        int i;\n        for (i = 0; i &lt; array.Length; i++)\n        {\n            Console.Write(String.Format(&quot;{0:X2}&quot;, array[i]));\n            if ((i % 4) == 3) Console.Write(&quot; &quot;);\n        }\n        Console.WriteLine();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic SHA256 Example#1\">Imports System\nImports System.IO\nImports System.Security.Cryptography\nImports System.Windows.Forms\n\nPublic Class HashDirectory\n\n    Public Shared Sub Main(ByVal args() As String)\n        Dim directory As String\n        If args.Length &lt; 1 Then\n            Dim fdb As New FolderBrowserDialog\n            Dim dr As DialogResult = fdb.ShowDialog()\n            If (dr = DialogResult.OK) Then\n                directory = fdb.SelectedPath\n            Else\n                Console.WriteLine(&quot;No directory selected&quot;)\n                Return\n            End If\n        Else\n            directory = args(0)\n        End If\n        Try\n            &#39; Create a DirectoryInfo object representing the specified directory.\n            Dim dir As New DirectoryInfo(directory)\n            &#39; Get the FileInfo objects for every file in the directory.\n            Dim files As FileInfo() = dir.GetFiles()\n            &#39; Initialize a SHA256 hash object.\n            Dim mySHA256 As SHA256 = SHA256Managed.Create()\n            Dim hashValue() As Byte\n            &#39; Compute and print the hash values for each file in directory.\n            Dim fInfo As FileInfo\n            For Each fInfo In files\n                &#39; Create a fileStream for the file.\n                Dim fileStream As FileStream = fInfo.Open(FileMode.Open)\n                &#39; Be sure it&#39;s positioned to the beginning of the stream.\n                fileStream.Position = 0\n                &#39; Compute the hash of the fileStream.\n                hashValue = mySHA256.ComputeHash(fileStream)\n                &#39; Write the name of the file to the Console.\n                Console.Write(fInfo.Name + &quot;: &quot;)\n                &#39; Write the hash value to the Console.\n                PrintByteArray(hashValue)\n                &#39; Close the file.\n                fileStream.Close()\n            Next fInfo\n            Return\n        Catch DExc As DirectoryNotFoundException\n            Console.WriteLine(&quot;Error: The directory specified could not be found.&quot;)\n        Catch IOExc As IOException\n            Console.WriteLine(&quot;Error: A file in the directory could not be accessed.&quot;)\n        End Try\n\n    End Sub\n\n    &#39; Print the byte array in a readable format.\n    Public Shared Sub PrintByteArray(ByVal array() As Byte)\n        Dim i As Integer\n        For i = 0 To array.Length - 1\n            Console.Write(String.Format(&quot;{0:X2}&quot;, array(i)))\n            If i Mod 4 = 3 Then\n                Console.Write(&quot; &quot;)\n            End If\n        Next i\n        Console.WriteLine()\n\n    End Sub &#39;PrintByteArray\nEnd Class\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The hash is used as a unique value of fixed size representing a large amount of data. Hashes of two sets of data should match if and only if the corresponding data also matches. Small changes to the data result in large unpredictable changes in the hash.  </p>\n<p> The hash size for the SHA256Managed algorithm is 256 bits.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Cryptography_SHA256Managed__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_SHA256Managed__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SHA256Managed()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.cryptography.sha256managed\" data-linktype=\"relative-path\">SHA256Managed</a> class using the managed library.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public SHA256Managed ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p>The Federal Information Processing Standards (FIPS) security setting is enabled. This implementation is not part of the Windows Platform FIPS-validated cryptographic algorithms.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The hash is used as a unique value of fixed size representing a large amount of data. Hashes of two sets of data should match if and only if the corresponding data also matches. Small changes to the data result in large unpredictable changes in the hash.  </p>\n<p> The hash size for the <a class=\"xref\" href=\"system.security.cryptography.sha256managed\" data-linktype=\"relative-path\">SHA256Managed</a> algorithm is 256 bits.  </p>\n<p> <strong>Important</strong> If you enable the following security setting either in the Local Security Policy or as part of Group Policy you will get an <a class=\"xref\" href=\"system.invalidoperationexception\" data-linktype=\"relative-path\">InvalidOperationException</a> when you attempt to use this constructor:  </p>\n<p> <strong>System cryptography: Use FIPS compliant algorithms for encryption, hashing, and signing</strong></p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Cryptography_SHA256Managed_HashCore_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_SHA256Managed_HashCore_System_Byte___System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">HashCore(Byte[], Int32, Int32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>When overridden in a derived class, routes data written to the object into the <a class=\"xref\" href=\"system.security.cryptography.sha256\" data-linktype=\"relative-path\">SHA256</a> hash algorithm for computing the hash.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected override void HashCore (byte[] rgb, int ibStart, int cbSize);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>rgb</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The input data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>ibStart</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The offset into the byte array from which to begin using data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>cbSize</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of bytes in the array to use as data.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is not called by application code.  </p>\n<p> This abstract method performs the hash computation. Every write to the cryptographic stream object passes the data through this method. For each block of data, this method updates the state of the hash object so a correct hash value is returned at the end of the data stream.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Cryptography_SHA256Managed_HashFinal_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_SHA256Managed_HashFinal\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">HashFinal()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">protected override byte[] HashFinal ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.byte\" data-linktype=\"relative-path\">Byte</a>[]</span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The computed hash code.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is not called by application code. This method finalizes any partial computation and returns the correct hash value of the data stream.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Security_Cryptography_SHA256Managed_Initialize_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Cryptography_SHA256Managed_Initialize\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Initialize()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes an instance of <a class=\"xref\" href=\"system.security.cryptography.sha256managed\" data-linktype=\"relative-path\">SHA256Managed</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override void Initialize ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The hash is used as a unique value of fixed size representing a large amount of data. Hashes of two sets of data should match if and only if the corresponding data also matches. Small changes to the data result in large unpredictable changes in the hash.  </p>\n<p> The hash size for the <a class=\"xref\" href=\"system.security.cryptography.sha256managed\" data-linktype=\"relative-path\">SHA256Managed</a> algorithm is 256 bits.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.SHA256Managed.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SHA256Managed\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SHA256Managed..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SHA256Managed.HashCore\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SHA256Managed.HashFinal\">\r\n<meta name=\"APIName\" content=\"System.Security.Cryptography.SHA256Managed.Initialize\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:59 PM\">\r\n<meta name=\"document_id\" content=\"9d4170dc-4341-dcf1-3362-0b3e4837aa93\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Computes the  hash for the input data using the managed library.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.security.cryptography/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Cryptography.SHA256Managed\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","uhfHeaderId":"MSDocsHeader-DotNet","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Cryptography.SHA256Managed.yml","open_to_public_contributors":false,"api_name":["System.Security.Cryptography.SHA256Managed","System.Security.Cryptography.SHA256Managed..ctor","System.Security.Cryptography.SHA256Managed.HashCore","System.Security.Cryptography.SHA256Managed.HashFinal","System.Security.Cryptography.SHA256Managed.Initialize"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Cryptography.SHA256Managed","System::Security::Cryptography::SHA256Managed","System.Security.Cryptography.SHA256Managed.#ctor","System::Security::Cryptography::SHA256Managed::#ctor","System.Security.Cryptography.SHA256Managed.HashCore","System::Security::Cryptography::SHA256Managed::HashCore","System.Security.Cryptography.SHA256Managed.HashFinal","System::Security::Cryptography::SHA256Managed::HashFinal","System.Security.Cryptography.SHA256Managed.Initialize","System::Security::Cryptography::SHA256Managed::Initialize"],"dev_langs":["csharp"],"updated_at":"2017-04-01 05:59 PM","document_id":"9d4170dc-4341-dcf1-3362-0b3e4837aa93","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Security.Cryptography/SHA256Managed.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SHA256Managed class | Microsoft Docs","_op_ogTitle":"SHA256Managed class","description":"Computes the  hash for the input data using the managed library.\n","toc_asset_id":"api/_splitted/System.Security.Cryptography/toc.json","toc_rel":"_splitted/System.Security.Cryptography/toc.json","source_url":"","ms.assetid":"System.Security.Cryptography.SHA256Managed","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.sha256managed","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.sha256managed","fileRelativePath":"api/System.Security.Cryptography.SHA256Managed.html"},"themesRelativePathToOutputRoot":"_themes/"}