{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ObjectHandle</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Wraps marshal-by-value object references, allowing them to be returned through an indirection.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic class ObjectHandle : MarshalByRefObject, System.Runtime.Remoting.IObjectHandle</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject\" data-linktype=\"relative-path\">MarshalByRefObject</a></span></div><span class=\"lang-csharp\">ObjectHandle</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_CreateObjRef_System_Type_\" data-linktype=\"relative-path\">CreateObjRef(Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_GetLifetimeService\" data-linktype=\"relative-path\">GetLifetimeService()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.marshalbyrefobject#System_MarshalByRefObject_MemberwiseClone_System_Boolean_\" data-linktype=\"relative-path\">MemberwiseClone(Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example shows how to create an object in another <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a>, and retrieve a proxy to the object from a ObjectHandle. In this example, you can assume that the code of the <code>MyType</code> class is compiled into an assembly called &quot;ObjectHandleAssembly&quot;.  </p>\n<pre><code class=\"lang-cpp\" name=\"ObjectHandle#1\">using namespace System;\nusing namespace System::Runtime::Remoting;\npublic ref class MyType: public MarshalByRefObject\n{\npublic:\n   MyType()\n   {\n      Console::Write( &quot;Created an instance of MyType in an AppDomain with the &quot; );\n      Console::WriteLine( &quot;hash code {0}&quot;, AppDomain::CurrentDomain-&gt;GetHashCode() );\n      Console::WriteLine( &quot;&quot; );\n   }\n\n   int GetAppDomainHashCode()\n   {\n      return AppDomain::CurrentDomain-&gt;GetHashCode();\n   }\n\n};\n\nint main()\n{\n   Console::WriteLine( &quot;The hash code of the default AppDomain is {0}.&quot;, AppDomain::CurrentDomain-&gt;GetHashCode() );\n   Console::WriteLine( &quot;&quot; );\n   \n   // Creates another AppDomain.\n   AppDomain^ domain = AppDomain::CreateDomain( &quot;AnotherDomain&quot;, nullptr, (AppDomainSetup^)nullptr );\n   \n   // Creates an instance of MyType defined in the assembly called ObjectHandleAssembly.\n   ObjectHandle^ obj = domain-&gt;CreateInstance( &quot;ObjectHandleAssembly&quot;, &quot;MyType&quot; );\n   \n   // Unwraps the proxy to the MyType object created in the other AppDomain.\n   MyType^ testObj = dynamic_cast&lt;MyType^&gt;(obj-&gt;Unwrap());\n   if ( RemotingServices::IsTransparentProxy( testObj ) )\n      Console::WriteLine( &quot;The unwrapped object is a proxy.&quot; );\n   else\n      Console::WriteLine( &quot;The unwrapped object is not a proxy!&quot; );\n\n   Console::WriteLine( &quot;&quot; );\n   Console::Write( &quot;Calling a method on the object located in an AppDomain with the hash code &quot; );\n   Console::WriteLine( testObj-&gt;GetAppDomainHashCode() );\n   \n}\n</code></pre><pre><code class=\"lang-vb\" name=\"ObjectHandle#1\">Imports System\nImports System.Runtime.Remoting\n\n\nPublic Class MyType\n   Inherits MarshalByRefObject\n      \n   Public Sub New()\n      Console.Write(&quot;Created an instance of MyType in an AppDomain with the &quot;)\n      Console.WriteLine(&quot;hashcode {0}&quot;, AppDomain.CurrentDomain.GetHashCode())\n      Console.WriteLine(&quot;&quot;)\n   End Sub &#39;New\n   \n   \n   Public Function GetAppDomainHashCode() As Integer\n      Return AppDomain.CurrentDomain.GetHashCode()\n   End Function &#39;GetAppDomainHashCode\n\nEnd Class &#39;MyType\n\n\nClass Test\n     \n   Public Shared Sub Main()\n      \n      Console.WriteLine(&quot;The hash code of the default AppDomain is {0}.&quot;, AppDomain.CurrentDomain.GetHashCode())\n      Console.WriteLine(&quot;&quot;)\n      \n      &#39; Creates another AppDomain.\n      Dim domain As AppDomain = AppDomain.CreateDomain(&quot;AnotherDomain&quot;, Nothing, CType(Nothing, AppDomainSetup))\n      \n      &#39; Creates an instance of MyType defined in the assembly called ObjectHandleAssembly.\n      Dim obj As ObjectHandle = domain.CreateInstance(&quot;ObjectHandleAssembly&quot;, &quot;MyType&quot;)\n      \n      &#39; Unwrapps the proxy to the MyType object created in the other AppDomain.\n      Dim testObj As MyType = CType(obj.Unwrap(), MyType)\n      \n      If RemotingServices.IsTransparentProxy(testObj) Then\n         Console.WriteLine(&quot;The unwrapped object is a proxy.&quot;)\n      Else\n         Console.WriteLine(&quot;The unwrapped object is not a proxy!&quot;)\n      End If \n      Console.WriteLine(&quot;&quot;)\n      Console.Write(&quot;Calling a method on the object located in an AppDomain with the hash code &quot;)\n      Console.WriteLine(testObj.GetAppDomainHashCode())\n\n   End Sub &#39;Main \n\nEnd Class &#39;Test \n</code></pre><pre><code class=\"lang-cs\" name=\"ObjectHandle#1\">using System;\nusing System.Runtime.Remoting;\n\n\npublic class MyType : MarshalByRefObject {\n\n   public MyType()  {\n      Console.Write(&quot;Created an instance of MyType in an AppDomain with the &quot;);\n      Console.WriteLine(&quot;hash code {0}&quot;,AppDomain.CurrentDomain.GetHashCode());\n      Console.WriteLine(&quot;&quot;);\n   }\n\n   public int GetAppDomainHashCode() {\n      return AppDomain.CurrentDomain.GetHashCode();\n   }\n}\n\n\nclass Test {\n\n   public static void Main() {\n\n      Console.WriteLine(&quot;The hash code of the default AppDomain is {0}.&quot;, \n                        AppDomain.CurrentDomain.GetHashCode());\n      Console.WriteLine(&quot;&quot;);\n\n      // Creates another AppDomain.\n      AppDomain domain = AppDomain.CreateDomain(&quot;AnotherDomain&quot;, \n                                                null, \n                                                (AppDomainSetup)null);\n\n      // Creates an instance of MyType defined in the assembly called ObjectHandleAssembly.\n      ObjectHandle obj = domain.CreateInstance(&quot;ObjectHandleAssembly&quot;, &quot;MyType&quot;);\n\n      // Unwrapps the proxy to the MyType object created in the other AppDomain.\n      MyType testObj = (MyType)obj.Unwrap();\n\n      if(RemotingServices.IsTransparentProxy(testObj))\n         Console.WriteLine(&quot;The unwrapped object is a proxy.&quot;);\n      else\n         Console.WriteLine(&quot;The unwrapped object is not a proxy!&quot;);    \n\n      Console.WriteLine(&quot;&quot;);\n      Console.Write(&quot;Calling a method on the object located in an AppDomain with the hash code &quot;);\n      Console.WriteLine(testObj.GetAppDomainHashCode());\n   }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The ObjectHandle class is used to pass an object (in a wrapped state) between multiple application domains without loading the metadata for the wrapped object in each <a class=\"xref\" href=\"system.appdomain\" data-linktype=\"relative-path\">AppDomain</a> through which the ObjectHandle travels. Thus, the ObjectHandle class gives the caller control of when the <a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a> of the remote object is loaded into a domain.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_Remoting_ObjectHandle__ctor_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ObjectHandle(Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes an instance of the <a class=\"xref\" href=\"system.runtime.remoting.objecthandle\" data-linktype=\"relative-path\">ObjectHandle</a> class, wrapping the given object <code>o</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public ObjectHandle (object o);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>o</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object that is wrapped by the new <a class=\"xref\" href=\"system.runtime.remoting.objecthandle\" data-linktype=\"relative-path\">ObjectHandle</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_Remoting_ObjectHandle_InitializeLifetimeService\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">InitializeLifetimeService()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes the lifetime lease of the wrapped object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override object InitializeLifetimeService ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An initialized <a class=\"xref\" href=\"system.runtime.remoting.lifetime.ilease\" data-linktype=\"relative-path\">ILease</a> that allows you to control the lifetime of the wrapped object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Runtime_Remoting_ObjectHandle_Unwrap\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Unwrap()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Returns the wrapped object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public object Unwrap ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The wrapped object.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Runtime.Remoting.ObjectHandle.yml\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.ObjectHandle\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.ObjectHandle..ctor\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.ObjectHandle.InitializeLifetimeService\">\r\n<meta name=\"APIName\" content=\"System.Runtime.Remoting.ObjectHandle.Unwrap\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"f0882383-625c-21d1-4678-29810e48ac5a\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Wraps marshal-by-value object references, allowing them to be returned through an indirection.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.runtime.remoting/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Runtime.Remoting.ObjectHandle\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Runtime.Remoting.ObjectHandle.yml","open_to_public_contributors":false,"api_name":["System.Runtime.Remoting.ObjectHandle","System.Runtime.Remoting.ObjectHandle..ctor","System.Runtime.Remoting.ObjectHandle.InitializeLifetimeService","System.Runtime.Remoting.ObjectHandle.Unwrap"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Runtime.Remoting.ObjectHandle","System::Runtime::Remoting::ObjectHandle","System.Runtime.Remoting.ObjectHandle.#ctor","System::Runtime::Remoting::ObjectHandle::#ctor","System.Runtime.Remoting.ObjectHandle.InitializeLifetimeService","System::Runtime::Remoting::ObjectHandle::InitializeLifetimeService","System.Runtime.Remoting.ObjectHandle.Unwrap","System::Runtime::Remoting::ObjectHandle::Unwrap"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"f0882383-625c-21d1-4678-29810e48ac5a","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Runtime.Remoting/ObjectHandle.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ObjectHandle class | Microsoft Docs","_op_ogTitle":"ObjectHandle class","description":"Wraps marshal-by-value object references, allowing them to be returned through an indirection.\n","toc_asset_id":"api/_splitted/System.Runtime.Remoting/toc.json","toc_rel":"_splitted/System.Runtime.Remoting/toc.json","source_url":"","ms.assetid":"System.Runtime.Remoting.ObjectHandle","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.remoting.objecthandle","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.remoting.objecthandle","fileRelativePath":"api/System.Runtime.Remoting.ObjectHandle.html"},"themesRelativePathToOutputRoot":"_themes/"}