{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">NotifyFilters</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies changes to watch for in a file or folder.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Flags]\npublic enum NotifyFilters</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">NotifyFilters</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.flagsattribute\" title=\"System.FlagsAttribute\" data-linktype=\"relative-path\">FlagsAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example creates a <a class=\"xref\" href=\"system.io.filesystemwatcher\" data-linktype=\"relative-path\">FileSystemWatcher</a> to watch the directory that is specified at runtime. The component is set to watch for any changes in LastWrite and LastAccess time, the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file prints to the console. When a file is renamed, the old and new paths print to the console.  </p>\n<p> Use the <a class=\"xref\" href=\"system.diagnostics\" data-linktype=\"relative-path\">System.Diagnostics</a> and <a class=\"xref\" href=\"system.io\" data-linktype=\"relative-path\">System.IO</a> namespaces for this example.  </p>\n<pre><code class=\"lang-cpp\" name=\"Classic NotifyFilters Example#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Security::Permissions;\n\npublic ref class Watcher\n{\nprivate:\n   // Define the event handlers.\n   static void OnChanged( Object^ /*source*/, FileSystemEventArgs^ e )\n   {\n      // Specify what is done when a file is changed, created, or deleted.\n      Console::WriteLine( &quot;File: {0} {1}&quot;, e-&gt;FullPath, e-&gt;ChangeType );\n   }\n\n   static void OnRenamed( Object^ /*source*/, RenamedEventArgs^ e )\n   {\n      // Specify what is done when a file is renamed.\n      Console::WriteLine( &quot;File: {0} renamed to {1}&quot;, e-&gt;OldFullPath, e-&gt;FullPath );\n   }\n\npublic:\n   [PermissionSet(SecurityAction::Demand, Name=&quot;FullTrust&quot;)]\n   int static run()\n   {\n      array&lt;String^&gt;^args = System::Environment::GetCommandLineArgs();\n\n      // If a directory is not specified, exit program.\n      if ( args-&gt;Length != 2 )\n      {\n         // Display the proper way to call the program.\n         Console::WriteLine( &quot;Usage: Watcher.exe (directory)&quot; );\n         return 0;\n      }\n\n      // Create a new FileSystemWatcher and set its properties.\n      FileSystemWatcher^ watcher = gcnew FileSystemWatcher;\n      watcher-&gt;Path = args[ 1 ];\n\n      /* Watch for changes in LastAccess and LastWrite times, and \n          the renaming of files or directories. */\n      watcher-&gt;NotifyFilter = static_cast&lt;NotifyFilters&gt;(NotifyFilters::LastAccess |\n            NotifyFilters::LastWrite | NotifyFilters::FileName | NotifyFilters::DirectoryName);\n\n      // Only watch text files.\n      watcher-&gt;Filter = &quot;*.txt&quot;;\n\n      // Add event handlers.\n      watcher-&gt;Changed += gcnew FileSystemEventHandler( Watcher::OnChanged );\n      watcher-&gt;Created += gcnew FileSystemEventHandler( Watcher::OnChanged );\n      watcher-&gt;Deleted += gcnew FileSystemEventHandler( Watcher::OnChanged );\n      watcher-&gt;Renamed += gcnew RenamedEventHandler( Watcher::OnRenamed );\n\n      // Begin watching.\n      watcher-&gt;EnableRaisingEvents = true;\n\n      // Wait for the user to quit the program.\n      Console::WriteLine( &quot;Press \\&#39;q\\&#39; to quit the sample.&quot; );\n      while ( Console::Read() != &#39;q&#39; );\n\n      return 0;\n   }\n};\n\nint main() {\n   Watcher::run();\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"Classic NotifyFilters Example#1\">using System;\nusing System.IO;\nusing System.Security.Permissions;\n\npublic class Watcher\n{\n\n    public static void Main()\n    {\n    Run();\n\n    }\n\n    [PermissionSet(SecurityAction.Demand, Name=&quot;FullTrust&quot;)]\n    public static void Run()\n    {\n        string[] args = System.Environment.GetCommandLineArgs();\n\n        // If a directory is not specified, exit program.\n        if(args.Length != 2)\n        {\n            // Display the proper way to call the program.\n            Console.WriteLine(&quot;Usage: Watcher.exe (directory)&quot;);\n            return;\n        }\n\n        // Create a new FileSystemWatcher and set its properties.\n        FileSystemWatcher watcher = new FileSystemWatcher();\n        watcher.Path = args[1];\n        /* Watch for changes in LastAccess and LastWrite times, and\n           the renaming of files or directories. */\n        watcher.NotifyFilter = NotifyFilters.LastAccess | NotifyFilters.LastWrite\n           | NotifyFilters.FileName | NotifyFilters.DirectoryName;\n        // Only watch text files.\n        watcher.Filter = &quot;*.txt&quot;;\n\n        // Add event handlers.\n        watcher.Changed += new FileSystemEventHandler(OnChanged);\n        watcher.Created += new FileSystemEventHandler(OnChanged);\n        watcher.Deleted += new FileSystemEventHandler(OnChanged);\n        watcher.Renamed += new RenamedEventHandler(OnRenamed);\n\n        // Begin watching.\n        watcher.EnableRaisingEvents = true;\n\n        // Wait for the user to quit the program.\n        Console.WriteLine(&quot;Press \\&#39;q\\&#39; to quit the sample.&quot;);\n        while(Console.Read()!=&#39;q&#39;);\n    }\n\n    // Define the event handlers.\n    private static void OnChanged(object source, FileSystemEventArgs e)\n    {\n        // Specify what is done when a file is changed, created, or deleted.\n       Console.WriteLine(&quot;File: &quot; +  e.FullPath + &quot; &quot; + e.ChangeType);\n    }\n\n    private static void OnRenamed(object source, RenamedEventArgs e)\n    {\n        // Specify what is done when a file is renamed.\n        Console.WriteLine(&quot;File: {0} renamed to {1}&quot;, e.OldFullPath, e.FullPath);\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"Classic NotifyFilters Example#1\">Imports System\nImports System.IO\nImports Microsoft.VisualBasic\nImports System.Security.Permissions\n\nPublic Class Watcher\n    \n    Public Shared Sub Main()\n\t\n         Run()\n  \n    End Sub\n\n    &lt;PermissionSet(SecurityAction.Demand, Name:=&quot;FullTrust&quot;)&gt; _\n    Private Shared Sub Run\n\n      Dim args() As String = System.Environment.GetCommandLineArgs()\n        &#39; If a directory is not specified, exit the program.\n        If args.Length &lt;&gt; 2 Then\n            &#39; Display the proper way to call the program.\n            Console.WriteLine(&quot;Usage: Watcher.exe (directory)&quot;)\n            Return\n        End If\n        \n        &#39; Create a new FileSystemWatcher and set its properties.\n        Dim watcher As New FileSystemWatcher()\n        watcher.Path = args(1)\n        &#39; Watch for changes in LastAccess and LastWrite times, and\n        &#39; the renaming of files or directories. \n        watcher.NotifyFilter = (NotifyFilters.LastAccess Or NotifyFilters.LastWrite Or NotifyFilters.FileName Or NotifyFilters.DirectoryName)\n        &#39; Only watch text files.\n        watcher.Filter = &quot;*.txt&quot;\n        \n        &#39; Add event handlers.\n        AddHandler watcher.Changed, AddressOf OnChanged\n        AddHandler watcher.Created, AddressOf OnChanged\n        AddHandler watcher.Deleted, AddressOf OnChanged\n        AddHandler watcher.Renamed, AddressOf OnRenamed\n        \n        &#39; Begin watching.\n        watcher.EnableRaisingEvents = True\n        \n        &#39; Wait for the user to quit the program.\n        Console.WriteLine(&quot;Press &#39;q&#39; to quit the sample.&quot;)\n        While Chr(Console.Read()) &lt;&gt; &quot;q&quot;c\n        End While\n    End Sub\n     \n    &#39; Define the event handlers.\n    Private Shared Sub OnChanged(source As Object, e As FileSystemEventArgs)\n        &#39; Specify what is done when a file is changed, created, or deleted.\n        Console.WriteLine(&quot;File: &quot; &amp; e.FullPath &amp; &quot; &quot; &amp; e.ChangeType)\n    End Sub    \n    \n    Private Shared Sub OnRenamed(source As Object, e As RenamedEventArgs)\n        &#39; Specify what is done when a file is renamed.\n        Console.WriteLine(&quot;File: {0} renamed to {1}&quot;, e.OldFullPath, e.FullPath)\n    End Sub\n    \nEnd Class\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>You can combine the members of this enumeration to watch for more than one kind of change. For example, you can watch for changes in the size of a file or folder, and for changes in security settings. This raises an event anytime there is a change in size or security settings of a file or folder.</p>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_IO_NotifyFilters_Attributes\">\r\n      \t\t\t<span class=\"lang-csharp\">Attributes</span>\r\n      \t</td>\r\n      \t<td><p>The attributes of the file or folder.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_IO_NotifyFilters_CreationTime\">\r\n      \t\t\t<span class=\"lang-csharp\">CreationTime</span>\r\n      \t</td>\r\n      \t<td><p>The time the file or folder was created.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_IO_NotifyFilters_DirectoryName\">\r\n      \t\t\t<span class=\"lang-csharp\">DirectoryName</span>\r\n      \t</td>\r\n      \t<td><p>The name of the directory.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_IO_NotifyFilters_FileName\">\r\n      \t\t\t<span class=\"lang-csharp\">FileName</span>\r\n      \t</td>\r\n      \t<td><p>The name of the file.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_IO_NotifyFilters_LastAccess\">\r\n      \t\t\t<span class=\"lang-csharp\">LastAccess</span>\r\n      \t</td>\r\n      \t<td><p>The date the file or folder was last opened.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_IO_NotifyFilters_LastWrite\">\r\n      \t\t\t<span class=\"lang-csharp\">LastWrite</span>\r\n      \t</td>\r\n      \t<td><p>The date the file or folder last had anything written to it.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_IO_NotifyFilters_Security\">\r\n      \t\t\t<span class=\"lang-csharp\">Security</span>\r\n      \t</td>\r\n      \t<td><p>The security settings of the file or folder.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_IO_NotifyFilters_Size\">\r\n      \t\t\t<span class=\"lang-csharp\">Size</span>\r\n      \t</td>\r\n      \t<td><p>The size of the file or folder.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.IO.NotifyFilters.yml\">\r\n<meta name=\"APIName\" content=\"System.IO.NotifyFilters\">\r\n<meta name=\"APIName\" content=\"System.IO.NotifyFilters.Attributes\">\r\n<meta name=\"APIName\" content=\"System.IO.NotifyFilters.CreationTime\">\r\n<meta name=\"APIName\" content=\"System.IO.NotifyFilters.DirectoryName\">\r\n<meta name=\"APIName\" content=\"System.IO.NotifyFilters.FileName\">\r\n<meta name=\"APIName\" content=\"System.IO.NotifyFilters.LastAccess\">\r\n<meta name=\"APIName\" content=\"System.IO.NotifyFilters.LastWrite\">\r\n<meta name=\"APIName\" content=\"System.IO.NotifyFilters.Security\">\r\n<meta name=\"APIName\" content=\"System.IO.NotifyFilters.Size\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 05:47 AM\">\r\n<meta name=\"document_id\" content=\"f928fc83-1127-c6e2-7d59-9a908bb543ea\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies changes to watch for in a file or folder.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.io/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.IO.NotifyFilters\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.IO.NotifyFilters.yml","open_to_public_contributors":false,"api_name":["System.IO.NotifyFilters","System.IO.NotifyFilters.Attributes","System.IO.NotifyFilters.CreationTime","System.IO.NotifyFilters.DirectoryName","System.IO.NotifyFilters.FileName","System.IO.NotifyFilters.LastAccess","System.IO.NotifyFilters.LastWrite","System.IO.NotifyFilters.Security","System.IO.NotifyFilters.Size"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.IO.NotifyFilters","System::IO::NotifyFilters","System.IO.NotifyFilters.Attributes","System::IO::NotifyFilters::Attributes","System.IO.NotifyFilters.CreationTime","System::IO::NotifyFilters::CreationTime","System.IO.NotifyFilters.DirectoryName","System::IO::NotifyFilters::DirectoryName","System.IO.NotifyFilters.FileName","System::IO::NotifyFilters::FileName","System.IO.NotifyFilters.LastAccess","System::IO::NotifyFilters::LastAccess","System.IO.NotifyFilters.LastWrite","System::IO::NotifyFilters::LastWrite","System.IO.NotifyFilters.Security","System::IO::NotifyFilters::Security","System.IO.NotifyFilters.Size","System::IO::NotifyFilters::Size"],"dev_langs":["csharp"],"updated_at":"2017-03-31 05:47 AM","document_id":"f928fc83-1127-c6e2-7d59-9a908bb543ea","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.IO/NotifyFilters.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"NotifyFilters enum | Microsoft Docs","_op_ogTitle":"NotifyFilters enum","description":"Specifies changes to watch for in a file or folder.\n","toc_asset_id":"api/_splitted/System.IO/toc.json","toc_rel":"_splitted/System.IO/toc.json","source_url":"","ms.assetid":"System.IO.NotifyFilters","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.io.notifyfilters","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.io.notifyfilters","fileRelativePath":"api/System.IO.NotifyFilters.html"},"themesRelativePathToOutputRoot":"_themes/"}