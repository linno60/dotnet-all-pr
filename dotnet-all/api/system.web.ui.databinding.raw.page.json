{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">DataBinding</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Contains information about a single data-binding expression in an ASP.NET server control, which allows rapid-application development (RAD) designers, such as Microsoft Visual Studio, to create data-binding expressions at design time. This class cannot be inherited.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public sealed class DataBinding</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">DataBinding</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example creates a DataBinding object and sets it equal to an existing object in the control&#39;s <a class=\"xref\" href=\"system.web.ui.databindingcollection\" data-linktype=\"relative-path\">DataBindingCollection</a> collection that has a <code>propertyName</code> parameter with a value of <code>Text</code>. If the collection contains a DataBinding object with a <code>propertyName</code> value of <code>Text</code>, this code returns the value of the object&#39;s <a class=\"xref\" href=\"system.web.ui.databinding#System_Web_UI_DataBinding_Expression_\" data-linktype=\"relative-path\">Expression</a> property. If there is no such object, it returns an empty string (&quot;&quot;).  </p>\n<pre><code class=\"lang-cs\" name=\"DataBinding_Sample1#2\">// Create the custom class that accesses the DataBinding and\n// DataBindingCollection classes at design time.\npublic class SimpleDesigner : System.Web.UI.Design.ControlDesigner\n{\n    // Create a Text property with accessors that obtain \n    // the property value from and set the property value\n    // to the Text key in the DataBindingCollection class.\n    public string Text\n    {\n        get\n        {\n            DataBinding myBinding = DataBindings[&quot;Text&quot;];\n            if (myBinding != null)\n            {\n                return myBinding.Expression;\n            }\n            return String.Empty;\n        }\n        set\n        {\n\n            if ((value == null) || (value.Length == 0))\n            {\n                DataBindings.Remove(&quot;Text&quot;);\n            }\n            else\n            {\n\n                DataBinding binding = DataBindings[&quot;Text&quot;];\n\n                if (binding == null)\n                {\n                    binding = new DataBinding(&quot;Text&quot;, typeof(string), value);\n                }\n                else\n                {\n                    binding.Expression = value;\n                }\n                // Call the DataBinding constructor, then add\n                // the initialized DataBinding object to the \n                // DataBindingCollection for this custom designer.\n                DataBinding binding1 = (DataBinding)DataBindings.SyncRoot;\n                DataBindings.Add(binding);\n                DataBindings.Add(binding1);\n            }\n            PropertyChanged(&quot;Text&quot;);\n        }\n    }\n    protected void PropertyChanged(string propName)\n    {\n        IControlDesignerTag myHtmlControlDesignBehavior = this.Tag;\n        \n        DataBindingCollection myDataBindingCollection;\n        DataBinding myDataBinding1, myDataBinding2;\n        String myStringReplace1, myDataBindingExpression1, removedBinding, removedBindingAfterReplace, myDataBindingExpression2, myStringReplace2;\n        string[] removedBindings1, removedBindings2;\n        Int32 temp;\n\n        if (myHtmlControlDesignBehavior == null)\n            return;\n        // Use the DataBindingCollection constructor to \n        // create the myDataBindingCollection1 object.\n        // Then set this object equal to the\n        // DataBindings property of the control created\n        // by this custom designer.\n        DataBindingCollection myDataBindingCollection1 = new DataBindingCollection();\n        myDataBindingCollection1 = myDataBindingCollection = DataBindings;\n        if (myDataBindingCollection.Contains(propName))\n        {\n            myDataBinding1 = myDataBindingCollection[propName];\n            myStringReplace1 = propName.Replace(&quot;.&quot;, &quot;-&quot;);\n            if (myDataBinding1 == null)\n            {\n                myHtmlControlDesignBehavior.RemoveAttribute(myStringReplace1);\n                return;\n            }\n            // DataBinding is not null.\n            myDataBindingExpression1 = String.Concat(&quot;&lt;%#&quot;, myDataBinding1.Expression, &quot;%&gt;&quot;);\n            myHtmlControlDesignBehavior.SetAttribute(myStringReplace1, myDataBindingExpression1);\n            int index = myStringReplace1.IndexOf(&quot;-&quot;);\n        }\n        else\n        {\n            // Use the DataBindingCollection.RemovedBindings \n            // property to set the value of the removedBindings\n            // arrays.\n            removedBindings2 = removedBindings1 = DataBindings.RemovedBindings;\n            temp = 0;\n            while (removedBindings2.Length &gt; temp)\n            {\n                removedBinding = removedBindings2[temp];\n                removedBindingAfterReplace = removedBinding.Replace(&#39;.&#39;, &#39;-&#39;);\n                myHtmlControlDesignBehavior.RemoveAttribute(removedBindingAfterReplace);\n                temp = temp + 1;\n            }\n        }\n        // Use the DataBindingCollection.GetEnumerator method\n        // to iterate through the myDataBindingCollection object\n        // and write the PropertyName, PropertyType, and Expression\n        // properties to a file for each DataBinding object\n        // in the MyDataBindingCollection object. \n        myDataBindingCollection = DataBindings;\n        IEnumerator myEnumerator = myDataBindingCollection.GetEnumerator();\n\n        while (myEnumerator.MoveNext())\n        {\n            myDataBinding2 = (DataBinding)myEnumerator.Current;\n            String dataBindingOutput1, dataBindingOutput2, dataBindingOutput3;\n            dataBindingOutput1 = String.Concat(&quot;The property name is &quot;, myDataBinding2.PropertyName);\n            dataBindingOutput2 = String.Concat(&quot;The property type is &quot;, myDataBinding2.PropertyType.ToString(), &quot;-&quot;, dataBindingOutput1);\n            dataBindingOutput3 = String.Concat(&quot;The expression is &quot;, myDataBinding2.Expression, &quot;-&quot;, dataBindingOutput2);\n            WriteToFile(dataBindingOutput3);\n\n            myDataBindingExpression2 = String.Concat(&quot;&lt;%#&quot;, myDataBinding2.Expression, &quot;%&gt;&quot;);\n            myStringReplace2 = myDataBinding2.PropertyName.Replace(&quot;.&quot;, &quot;-&quot;);\n            myHtmlControlDesignBehavior.SetAttribute(myStringReplace2, myDataBindingExpression2);\n            int index = myStringReplace2.IndexOf(&#39;-&#39;);\n        }// while loop ends\n    }\n    public void WriteToFile(string input)\n    {\n        // The WriteToFile custom method writes\n        // the values of the DataBinding properties\n        // to a file on the C drive at design time.\n        StreamWriter myFile = File.AppendText(&quot;C:\\\\DataBindingOutput.txt&quot;);\n        ASCIIEncoding encoder = new ASCIIEncoding();\n        byte[] ByteArray = encoder.GetBytes(input);\n        char[] CharArray = encoder.GetChars(ByteArray);\n        myFile.WriteLine(CharArray, 0, input.Length);\n        myFile.Close();\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"DataBinding_Sample1#2\">&#39; Create the custom class that accesses the DataBinding and\n&#39; DataBindingCollection classes at design time.\n\nPublic Class SimpleDesigner\n    Inherits System.Web.UI.Design.ControlDesigner\n    &#39; Create a Text property with accessors that obtain \n    &#39; the property value from and set the property value\n    &#39; to the Text key in the DataBindingCollection class.\n\n    Public Property [Text]() As String\n        Get\n            Dim myBinding As DataBinding = DataBindings(&quot;Text&quot;)\n            If Not (myBinding Is Nothing) Then\n                Return myBinding.Expression\n            End If\n            Return String.Empty\n        End Get\n        Set(ByVal value As String)\n\n            If value Is Nothing OrElse value.Length = 0 Then\n                DataBindings.Remove(&quot;Text&quot;)\n            Else\n\n                Dim binding As DataBinding = DataBindings(&quot;Text&quot;)\n\n                If binding Is Nothing Then\n                    binding = New DataBinding(&quot;Text&quot;, GetType(String), value)\n                Else\n                    binding.Expression = value\n                End If\n                &#39; Call the DataBinding constructor, then add\n                &#39; the initialized DataBinding object to the \n                &#39; DataBindingCollection for this custom designer.\n                Dim binding1 As DataBinding = CType(DataBindings.SyncRoot, DataBinding)\n                DataBindings.Add(binding)\n                DataBindings.Add(binding1)\n            End If\n            PropertyChanged(&quot;Text&quot;)\n        End Set\n    End Property\n\n    Protected Sub PropertyChanged(ByVal propName As String)\n        Dim myHtmlControlDesignBehavior As IControlDesignerTag = Me.Tag\n        Dim myDataBindingCollection As DataBindingCollection\n        Dim myDataBinding1, myDataBinding2 As DataBinding\n        Dim myStringReplace1, myDataBindingExpression1, removedBinding, removedBindingAfterReplace, myDataBindingExpression2, myStringReplace2 As [String]\n        Dim removedBindings1(), removedBindings2() As String\n        Dim temp As Int32\n\n        If myHtmlControlDesignBehavior Is Nothing Then\n            Return\n        End If\n\n        myDataBindingCollection = DataBindings\n        &#39; Use the DataBindingCollection constructor to \n        &#39; create the myDataBindingCollection1 object.\n        &#39; Then set this object equal to the\n        &#39; DataBindings property of the control created\n        &#39; by this custom designer.\n        Dim myDataBindingCollection1 As New DataBindingCollection()\n        myDataBindingCollection1 = DataBindings\n        myDataBindingCollection = DataBindings\n        If (myDataBindingCollection.Contains(propName)) Then\n            myDataBinding1 = myDataBindingCollection(propName)\n            myStringReplace1 = propName.Replace(&quot;.&quot;, &quot;-&quot;)\n            If myDataBinding1 Is Nothing Then\n                myHtmlControlDesignBehavior.RemoveAttribute(myStringReplace1)\n                Return\n            End If\n            &#39; DataBinding is not null.\n            myDataBindingExpression1 = [String].Concat(&quot;&lt;%#&quot;, myDataBinding1.Expression, &quot;%&gt;&quot;)\n            myHtmlControlDesignBehavior.SetAttribute(myStringReplace1, myDataBindingExpression1)\n            Dim index As Integer = myStringReplace1.IndexOf(&quot;-&quot;)\n        Else\n            &#39; Use the DataBindingCollection.RemovedBindings \n            &#39; property to set the value of the removedBindings\n            &#39; arrays.\n            removedBindings1 = DataBindings.RemovedBindings\n            removedBindings2 = DataBindings.RemovedBindings\n            temp = 0\n            While removedBindings2.Length &gt; temp\n                removedBinding = removedBindings2(temp)\n                removedBindingAfterReplace = removedBinding.Replace(&quot;.&quot;c, &quot;-&quot;c)\n                myHtmlControlDesignBehavior.RemoveAttribute(removedBindingAfterReplace)\n                temp = temp &amp; 1\n            End While\n        End If\n        &#39; Use the DataBindingCollection.GetEnumerator method\n        &#39; to iterate through the myDataBindingCollection object\n        &#39; and write the PropertyName, PropertyType, and Expression\n        &#39; properties to a file for each DataBinding object\n        &#39; in the MyDataBindingCollection object. \n        myDataBindingCollection = DataBindings\n        Dim myEnumerator As IEnumerator = myDataBindingCollection.GetEnumerator()\n\n        While myEnumerator.MoveNext()\n            myDataBinding2 = CType(myEnumerator.Current, DataBinding)\n            Dim dataBindingOutput1, dataBindingOutput2, dataBindingOutput3 As [String]\n            dataBindingOutput1 = [String].Concat(&quot;The property name is &quot;, myDataBinding2.PropertyName)\n            dataBindingOutput2 = [String].Concat(&quot;The property type is &quot;, myDataBinding2.PropertyType.ToString(), &quot;-&quot;, dataBindingOutput1)\n            dataBindingOutput3 = [String].Concat(&quot;The expression is &quot;, myDataBinding2.Expression, &quot;-&quot;, dataBindingOutput2)\n            WriteToFile(dataBindingOutput3)\n\n            myDataBindingExpression2 = [String].Concat(&quot;&lt;%#&quot;, myDataBinding2.Expression, &quot;%&gt;&quot;)\n            myStringReplace2 = myDataBinding2.PropertyName.Replace(&quot;.&quot;, &quot;-&quot;)\n            myHtmlControlDesignBehavior.SetAttribute(myStringReplace2, myDataBindingExpression2)\n            Dim index As Integer = myStringReplace2.IndexOf(&quot;-&quot;c)\n        End While &#39; while loop ends\n    End Sub &#39;OnBindingsCollectionChanged\n    Public Sub WriteToFile(ByVal input As String)\n        &#39; The WriteToFile custom method writes\n        &#39; the values of the DataBinding properties\n        &#39; to a file on the C drive at design time.\n        Dim myFile As StreamWriter = File.AppendText(&quot;C:\\DataBindingOutput.txt&quot;)\n        Dim encoder As New ASCIIEncoding()\n        Dim ByteArray As Byte() = encoder.GetBytes(input)\n        Dim CharArray As Char() = encoder.GetChars(ByteArray)\n        myFile.WriteLine(CharArray, 0, input.Length)\n        myFile.Close()\n    End Sub &#39;WriteToFile\nEnd Class &#39;SimpleDesigner\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Each data-binding expression in a server control is represented at design time by an instance of the DataBinding class. Any server control that contains one or more data-binding expressions has a <a class=\"xref\" href=\"system.web.ui.databindingcollection\" data-linktype=\"relative-path\">DataBindingCollection</a> object that contains the DataBinding objects. This collection is accessible through the <a class=\"xref\" href=\"system.web.ui.control\" data-linktype=\"relative-path\">Control</a> class implementing the <a class=\"xref\" href=\"system.web.ui.idatabindingsaccessor\" data-linktype=\"relative-path\">IDataBindingsAccessor</a> interface. When you create a custom RAD designer, use that implementation to access the collection. Any DataBinding or <a class=\"xref\" href=\"system.web.ui.databindingcollection\" data-linktype=\"relative-path\">DataBindingCollection</a> objects associated with a server control exist only at design time. They do not exist at run time and, therefore, are not accessible during run time.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Web_UI_DataBinding__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_DataBinding__ctor_System_String_System_Type_System_String_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">DataBinding(String, Type, String)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.web.ui.databinding\" data-linktype=\"relative-path\">DataBinding</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public DataBinding (string propertyName, Type propertyType, string expression);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>propertyName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The property to bind data to.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>propertyType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The .NET Framework type of the property to bind data to.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>expression</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The data-binding expression to be evaluated.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Web_UI_DataBinding_Expression_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_DataBinding_Expression\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Expression</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets the data-binding expression to be evaluated.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string Expression { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The data-binding expression to be evaluated.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Web_UI_DataBinding_PropertyName_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_DataBinding_PropertyName\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PropertyName</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the name of the ASP.NET server control property to bind data to.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public string PropertyName { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The property to bind data to.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Web_UI_DataBinding_PropertyType_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_DataBinding_PropertyType\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">PropertyType</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the .NET Framework type of the data-bound ASP.NET server control property.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public Type PropertyType { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The .NET Framework type of the data-bound property.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Web_UI_DataBinding_Equals_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_DataBinding_Equals_System_Object_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Equals(Object)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Determines whether the specified object is the same instance of the <a class=\"xref\" href=\"system.web.ui.databinding\" data-linktype=\"relative-path\">DataBinding</a> class as the current object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override bool Equals (object obj);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>obj</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The object to compare against the current <a class=\"xref\" href=\"system.web.ui.databinding\" data-linktype=\"relative-path\">DataBinding</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the data-binding property names match; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Web_UI_DataBinding_GetHashCode_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_DataBinding_GetHashCode\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetHashCode()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Retrieves the hash code for an instance of the <a class=\"xref\" href=\"system.web.ui.databinding\" data-linktype=\"relative-path\">DataBinding</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override int GetHashCode ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A 32-bit signed integer hash code.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p><a class=\"xref\" href=\"system.web.ui.databinding\" data-linktype=\"relative-path\">DataBinding</a> objects are placed in a <a class=\"xref\" href=\"system.web.ui.databindingcollection\" data-linktype=\"relative-path\">DataBindingCollection</a> object, accessible only at design time. The collection is a hash table that represents the bindings on a control. There can only be one binding per property, so the hash code computation matches the <a class=\"xref\" href=\"system.web.ui.databinding#System_Web_UI_DataBinding_Equals_\" data-linktype=\"relative-path\">Equals</a> implementation and only takes the property name into account.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.DataBinding.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.DataBinding\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.DataBinding..ctor\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.DataBinding.Equals\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.DataBinding.Expression\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.DataBinding.GetHashCode\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.DataBinding.PropertyName\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.DataBinding.PropertyType\">\r\n<meta name=\"APILocation\" content=\"System.Web.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 05:47 AM\">\r\n<meta name=\"document_id\" content=\"ff51cc03-838b-fcac-96b8-26ca402bdc84\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Contains information about a single data-binding expression in an ASP.NET server control, which allows rapid-application development (RAD) designers, such as Microsoft Visual Studio, to create data-b…\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.web.ui/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.DataBinding\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.DataBinding.yml","open_to_public_contributors":false,"api_name":["System.Web.UI.DataBinding","System.Web.UI.DataBinding..ctor","System.Web.UI.DataBinding.Equals","System.Web.UI.DataBinding.Expression","System.Web.UI.DataBinding.GetHashCode","System.Web.UI.DataBinding.PropertyName","System.Web.UI.DataBinding.PropertyType"],"api_location":["System.Web.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.DataBinding","System::Web::UI::DataBinding","System.Web.UI.DataBinding.#ctor","System::Web::UI::DataBinding::#ctor","System.Web.UI.DataBinding.Equals","System::Web::UI::DataBinding::Equals","System.Web.UI.DataBinding.Expression","System::Web::UI::DataBinding::Expression","System.Web.UI.DataBinding.GetHashCode","System::Web::UI::DataBinding::GetHashCode","System.Web.UI.DataBinding.PropertyName","System::Web::UI::DataBinding::PropertyName","System.Web.UI.DataBinding.PropertyType","System::Web::UI::DataBinding::PropertyType"],"dev_langs":["csharp"],"updated_at":"2017-03-31 05:47 AM","document_id":"ff51cc03-838b-fcac-96b8-26ca402bdc84","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Web.UI/DataBinding.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DataBinding class | Microsoft Docs","_op_ogTitle":"DataBinding class","description":"Contains information about a single data-binding expression in an ASP.NET server control, which allows rapid-application development (RAD) designers, such as Microsoft Visual Studio, to create data-b…","toc_asset_id":"api/_splitted/System.Web.UI/toc.json","toc_rel":"_splitted/System.Web.UI/toc.json","source_url":"","ms.assetid":"System.Web.UI.DataBinding","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.databinding","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.databinding","fileRelativePath":"api/System.Web.UI.DataBinding.html"},"themesRelativePathToOutputRoot":"_themes/"}