{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">PeekCompletedEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that will handle the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">PeekCompleted</a> event of a <a class=\"xref\" href=\"system.messaging.messagequeue\" data-linktype=\"relative-path\">MessageQueue</a>.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void PeekCompletedEventHandler(object sender, PeekCompletedEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">PeekCompletedEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example illustrates how to create an event delegate (PeekCompletedEventHandler) for the event handler (<code>MyPeekCompleted</code>) and associate it with the <a class=\"xref\" href=\"system.messaging.messagequeue#System_Messaging_MessageQueue_PeekCompleted\" data-linktype=\"relative-path\">System.Messaging.MessageQueue.PeekCompleted</a> event. The event handler peeks a message and writes its label to the screen.  </p>\n<pre><code class=\"lang-cpp\" name=\"MessageQueue.BeginPeek_noparms#1\">#using &lt;system.dll&gt;\n#using &lt;system.messaging.dll&gt;\n\nusing namespace System;\nusing namespace System::Messaging;\n\n// This example performs asynchronous peek operation\n// processing.\n//*************************************************\nref class MyNewQueue\n{\npublic:\n\n   // Provides an event handler for the PeekCompleted\n   // event.\n   static void MyPeekCompleted( Object^ source, PeekCompletedEventArgs^ asyncResult )\n   {\n      // Connect to the queue.\n      MessageQueue^ mq = dynamic_cast&lt;MessageQueue^&gt;(source);\n\n      // End the asynchronous peek operation.\n      Message^ m = mq-&gt;EndPeek( asyncResult-&gt;AsyncResult );\n\n      // Display message information on the screen.\n      Console::WriteLine( &quot;Message: {0}&quot;, static_cast&lt;String^&gt;(m-&gt;Body) );\n\n      // Restart the asynchronous peek operation.\n      mq-&gt;BeginPeek();\n      return;\n   }\n};\n\n// Provides an entry point into the application.\n//         \nint main()\n{\n   // Create an instance of MessageQueue. Set its formatter.\n   MessageQueue^ myQueue = gcnew MessageQueue( &quot;.\\\\myQueue&quot; );\n   array&lt;Type^&gt;^p = gcnew array&lt;Type^&gt;(1);\n   p[ 0 ] = String::typeid;\n   myQueue-&gt;Formatter = gcnew XmlMessageFormatter( p );\n\n   // Add an event handler for the PeekCompleted event.\n   myQueue-&gt;PeekCompleted += gcnew PeekCompletedEventHandler( MyNewQueue::MyPeekCompleted );\n\n   // Begin the asynchronous peek operation.\n   myQueue-&gt;BeginPeek();\n\n   // Do other work on the current thread.\n   return 0;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"MessageQueue.BeginPeek_noparms#1\">using System;\nusing System.Messaging;\n\nnamespace MyProject\n{\n\t/// &lt;summary&gt;\n\t/// Provides a container class for the example.\n\t/// &lt;/summary&gt;\n\tpublic class MyNewQueue\n\t{\n\n\t\t//**************************************************\n\t\t// Provides an entry point into the application.\n\t\t//\t\t \n\t\t// This example performs asynchronous peek operation\n\t\t// processing.\n\t\t//**************************************************\n\n\t\tpublic static void Main()\n\t\t{\n\t\t\t// Create an instance of MessageQueue. Set its formatter.\n\t\t\tMessageQueue myQueue = new MessageQueue(&quot;.\\\\myQueue&quot;);\n\t\t\tmyQueue.Formatter = new XmlMessageFormatter(new Type[]\n\t\t\t\t{typeof(String)});\n\n\t\t\t// Add an event handler for the PeekCompleted event.\n\t\t\tmyQueue.PeekCompleted += new \n\t\t\t\tPeekCompletedEventHandler(MyPeekCompleted);\n\t\t\t\n\t\t\t// Begin the asynchronous peek operation.\n\t\t\tmyQueue.BeginPeek();\n\t\t\t\n\t\t\t// Do other work on the current thread.\n\n\t\t\treturn;\n\t\t}\n\n\n\t\t//**************************************************\n\t\t// Provides an event handler for the PeekCompleted\n\t\t// event.\n\t\t//**************************************************\n\t\t\n\t\tprivate static void MyPeekCompleted(Object source, \n\t\t\tPeekCompletedEventArgs asyncResult)\n\t\t{\n\t\t\t// Connect to the queue.\n\t\t\tMessageQueue mq = (MessageQueue)source;\n\n\t\t\t// End the asynchronous peek operation.\n\t\t\tMessage m = mq.EndPeek(asyncResult.AsyncResult);\n\n\t\t\t// Display message information on the screen.\n\t\t\tConsole.WriteLine(&quot;Message: &quot; + (string)m.Body);\n\n\t\t\t// Restart the asynchronous peek operation.\n\t\t\tmq.BeginPeek();\n\t\t\t\n\t\t\treturn; \n\t\t}\n\t}\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"MessageQueue.BeginPeek_noparms#1\">Imports System\nImports System.Messaging\n\n\n\n\n\n&#39; Provides a container class for the example.\nPublic Class MyNewQueue\n\n\n\n        &#39; Provides an entry point into the application.\n        &#39;\t\t \n        &#39; This example performs asynchronous peek operation\n        &#39; processing.\n\n\n        Public Shared Sub Main()\n            &#39; Create an instance of MessageQueue. Set its formatter.\n            Dim myQueue As New MessageQueue(&quot;.\\myQueue&quot;)\n            myQueue.Formatter = New XmlMessageFormatter(New Type() _\n                {GetType([String])})\n\n            &#39; Add an event handler for the PeekCompleted event.\n            AddHandler myQueue.PeekCompleted, AddressOf _\n                MyPeekCompleted\n\n            &#39; Begin the asynchronous peek operation.\n            myQueue.BeginPeek()\n\n            &#39; Do other work on the current thread.\n            Return\n        End Sub &#39;Main\n\n\n        &#39;**************************************************\n        &#39; Provides an event handler for the PeekCompleted\n        &#39; event.\n        &#39;**************************************************\n\n        Private Shared Sub MyPeekCompleted(ByVal [source] As _\n            [Object], ByVal asyncResult As PeekCompletedEventArgs)\n\n            &#39; Connect to the queue.\n            Dim mq As MessageQueue = CType([source], MessageQueue)\n\n            &#39; End the asynchronous peek operation.\n            Dim m As Message = mq.EndPeek(asyncResult.AsyncResult)\n\n            &#39; Display message information on the screen.\n            Console.WriteLine((&quot;Message: &quot; + CStr(m.Body)))\n\n            &#39; Restart the asynchronous peek operation.\n            mq.BeginPeek()\n\n            Return\n\n        End Sub &#39;MyPeekCompleted\n\nEnd Class &#39;MyNewQueue\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>When you create a PeekCompletedEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see <a href=\"http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115\" data-linktype=\"external\">NIB: Events and Delegates</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Messaging.PeekCompletedEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Messaging.PeekCompletedEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Messaging.PeekCompletedEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Messaging.PeekCompletedEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Messaging.PeekCompletedEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Messaging.PeekCompletedEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"de7caaf0-e3af-8af6-0a04-d212f3f29f3f\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that will handle the  event of a .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.messaging/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Messaging.PeekCompletedEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Messaging.PeekCompletedEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Messaging.PeekCompletedEventHandler","System.Messaging.PeekCompletedEventHandler..ctor","System.Messaging.PeekCompletedEventHandler.Invoke","System.Messaging.PeekCompletedEventHandler.BeginInvoke","System.Messaging.PeekCompletedEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Messaging.PeekCompletedEventHandler","System::Messaging::PeekCompletedEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"de7caaf0-e3af-8af6-0a04-d212f3f29f3f","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Messaging/PeekCompletedEventHandler.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"PeekCompletedEventHandler delegate | Microsoft Docs","_op_ogTitle":"PeekCompletedEventHandler delegate","description":"Represents the method that will handle the  event of a .\n","toc_asset_id":"api/_splitted/System.Messaging/toc.json","toc_rel":"_splitted/System.Messaging/toc.json","source_url":"","ms.assetid":"System.Messaging.PeekCompletedEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.messaging.peekcompletedeventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.messaging.peekcompletedeventhandler","fileRelativePath":"api/System.Messaging.PeekCompletedEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}