{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">DuplicateAddressDetectionState</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies the current state of an IP address.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public enum DuplicateAddressDetectionState</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">DuplicateAddressDetectionState</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example determines unicast address information.  </p>\n<pre><code class=\"lang-cs\" name=\"NclNetInfo2#45\">public static void DisplayUnicastAddresses()\n{\n    Console.WriteLine(&quot;Unicast Addresses&quot;);\n    NetworkInterface[] adapters  = NetworkInterface.GetAllNetworkInterfaces();\n    foreach (NetworkInterface adapter in adapters)\n    {\n        IPInterfaceProperties adapterProperties = adapter.GetIPProperties();\n        UnicastIPAddressInformationCollection uniCast = adapterProperties.UnicastAddresses;\n        if (uniCast.Count &gt;0)\n        {\n            Console.WriteLine(adapter.Description);\n            string lifeTimeFormat = &quot;dddd, MMMM dd, yyyy  hh:mm:ss tt&quot;;\n            foreach (UnicastIPAddressInformation uni in uniCast)\n            {\n                DateTime when;\n                \n                Console.WriteLine(&quot;  Unicast Address ......................... : {0}&quot;, uni.Address);\n                Console.WriteLine(&quot;     Prefix Origin ........................ : {0}&quot;, uni.PrefixOrigin);\n                Console.WriteLine(&quot;     Suffix Origin ........................ : {0}&quot;, uni.SuffixOrigin);\n                Console.WriteLine(&quot;     Duplicate Address Detection .......... : {0}&quot;, \n                    uni.DuplicateAddressDetectionState);\n                    \n                // Format the lifetimes as Sunday, February 16, 2003 11:33:44 PM\n                // if en-us is the current culture.\n                \n                // Calculate the date and time at the end of the lifetimes.    \n                when = DateTime.UtcNow + TimeSpan.FromSeconds(uni.AddressValidLifetime);\n                when = when.ToLocalTime();    \n                Console.WriteLine(&quot;     Valid Life Time ...................... : {0}&quot;, \n                    when.ToString(lifeTimeFormat,System.Globalization.CultureInfo.CurrentCulture)\n                );\n                when = DateTime.UtcNow + TimeSpan.FromSeconds(uni.AddressPreferredLifetime);   \n                when = when.ToLocalTime();\n                Console.WriteLine(&quot;     Preferred life time .................. : {0}&quot;, \n                    when.ToString(lifeTimeFormat,System.Globalization.CultureInfo.CurrentCulture)\n                ); \n                \n                when = DateTime.UtcNow + TimeSpan.FromSeconds(uni.DhcpLeaseLifetime);\n                when = when.ToLocalTime(); \n                Console.WriteLine(&quot;     DHCP Leased Life Time ................ : {0}&quot;, \n                    when.ToString(lifeTimeFormat,System.Globalization.CultureInfo.CurrentCulture)\n                );\n            }\n            Console.WriteLine();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"NclNetInfo2#45\">Public Shared Sub DisplayUnicastAddresses() \n\n    Console.WriteLine(&quot;Unicast Addresses&quot;)\n    Dim adapters As NetworkInterface() = NetworkInterface.GetAllNetworkInterfaces()\n    Dim adapter As NetworkInterface\n    For Each adapter In  adapters\n        Dim adapterProperties As IPInterfaceProperties = adapter.GetIPProperties()\n        Dim uniCast As UnicastIPAddressInformationCollection = adapterProperties.UnicastAddresses\n        If uniCast.Count &gt; 0 Then\n            Console.WriteLine(adapter.Description)\n            Dim lifeTimeFormat As String = &quot;dddd, MMMM dd, yyyy  hh:mm:ss tt&quot;\n            Dim uni As UnicastIPAddressInformation\n            For Each uni In  uniCast\n                Dim [when] As DateTime\n                \n                Console.WriteLine(&quot;  Unicast Address ......................... : {0}&quot;, uni.Address)\n                Console.WriteLine(&quot;     Prefix Origin ........................ : {0}&quot;, uni.PrefixOrigin)\n                Console.WriteLine(&quot;     Suffix Origin ........................ : {0}&quot;, uni.SuffixOrigin)\n                Console.WriteLine(&quot;     Duplicate Address Detection .......... : {0}&quot;, uni.DuplicateAddressDetectionState)\n                \n                &#39; Format the lifetimes as Sunday, February 16, 2003 11:33:44 PM\n                &#39; if en-us is the current culture.\n                &#39; Calculate the date and time at the end of the lifetimes.    \n                [when] = DateTime.UtcNow + TimeSpan.FromSeconds(uni.AddressValidLifetime)\n                [when] = [when].ToLocalTime()\n                Console.WriteLine(&quot;     Valid Life Time ...................... : {0}&quot;, [when].ToString(lifeTimeFormat, System.Globalization.CultureInfo.CurrentCulture))\n                [when] = DateTime.UtcNow + TimeSpan.FromSeconds(uni.AddressPreferredLifetime)\n                [when] = [when].ToLocalTime()\n                Console.WriteLine(&quot;     Preferred life time .................. : {0}&quot;, [when].ToString(lifeTimeFormat, System.Globalization.CultureInfo.CurrentCulture))\n                \n                [when] = DateTime.UtcNow + TimeSpan.FromSeconds(uni.DhcpLeaseLifetime)\n                [when] = [when].ToLocalTime()\n                Console.WriteLine(&quot;     DHCP Leased Life Time ................ : {0}&quot;, [when].ToString(lifeTimeFormat, System.Globalization.CultureInfo.CurrentCulture))\n            Next uni\n            Console.WriteLine()\n        End If\n    Next adapter\n\nEnd Sub &#39;DisplayUnicastAddresses\n\n</code></pre><pre><code class=\"lang-cpp\" name=\"NclNetInfo2#45\">void DisplayUnicastAddresses()\n{\n   Console::WriteLine( &quot;Unicast Addresses&quot; );\n   array&lt;NetworkInterface^&gt;^adapters = NetworkInterface::GetAllNetworkInterfaces();\n   System::Collections::IEnumerator^ myEnum17 = adapters-&gt;GetEnumerator();\n   while ( myEnum17-&gt;MoveNext() )\n   {\n      NetworkInterface ^ adapter = safe_cast&lt;NetworkInterface ^&gt;(myEnum17-&gt;Current);\n      IPInterfaceProperties ^ adapterProperties = adapter-&gt;GetIPProperties();\n      UnicastIPAddressInformationCollection ^ uniCast = adapterProperties-&gt;UnicastAddresses;\n      if ( uniCast-&gt;Count &gt; 0 )\n      {\n         Console::WriteLine( adapter-&gt;Description );\n         String^ lifeTimeFormat = &quot;dddd, MMMM dd, yyyy  hh:mm:ss tt&quot;;\n         System::Collections::IEnumerator^ myEnum18 = uniCast-&gt;GetEnumerator();\n         while ( myEnum18-&gt;MoveNext() )\n         {\n            UnicastIPAddressInformation ^ uni = safe_cast&lt;UnicastIPAddressInformation ^&gt;(myEnum18-&gt;Current);\n            DateTime when;\n            Console::WriteLine( &quot;  Unicast Address ......................... : {0}&quot;, \n               uni-&gt;Address );\n            Console::WriteLine( &quot;     Prefix Origin ........................ : {0}&quot;, \n               uni-&gt;PrefixOrigin );\n            Console::WriteLine( &quot;     Suffix Origin ........................ : {0}&quot;, \n               uni-&gt;SuffixOrigin );\n            Console::WriteLine( &quot;     Duplicate Address Detection .......... : {0}&quot;, \n               uni-&gt;DuplicateAddressDetectionState );\n            \n            // Format the lifetimes as Sunday, February 16, 2003 11:33:44 PM\n            // if en-us is the current culture.\n            // Calculate the date and time at the end of the lifetimes.    \n            when = DateTime::UtcNow + TimeSpan::FromSeconds( (double)uni-&gt;AddressValidLifetime );\n            when = when.ToLocalTime();\n            Console::WriteLine( &quot;     Valid Life Time ...................... : {0}&quot;, \n               when.ToString( lifeTimeFormat, System::Globalization::CultureInfo::CurrentCulture ) );\n            when = DateTime::UtcNow + TimeSpan::FromSeconds( (double)uni-&gt;AddressPreferredLifetime );\n            when = when.ToLocalTime();\n            Console::WriteLine( &quot;     Preferred life time .................. : {0}&quot;, \n               when.ToString( lifeTimeFormat, System::Globalization::CultureInfo::CurrentCulture ) );\n            when = DateTime::UtcNow + TimeSpan::FromSeconds( (double)uni-&gt;DhcpLeaseLifetime );\n            when = when.ToLocalTime();\n            Console::WriteLine( &quot;     DHCP Leased Life Time ................ : {0}&quot;, \n               when.ToString( lifeTimeFormat, System::Globalization::CultureInfo::CurrentCulture ) );\n         }\n         Console::WriteLine();\n      }\n   }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>To help ensure that all interfaces on a network have a unique address, the interface host is responsible for running a &quot;duplicate address detection&quot; algorithm on unicast addresses. The purpose of this algorithm is to attempt to prevent non-unique addresses on the network. This process is defined in IETF RFC 1971.  </p>\n<p> This enumeration is used by the <a class=\"xref\" href=\"system.net.networkinformation.unicastipaddressinformation\" data-linktype=\"relative-path\">UnicastIPAddressInformation</a> and <a class=\"xref\" href=\"system.net.networkinformation.multicastipaddressinformation\" data-linktype=\"relative-path\">MulticastIPAddressInformation</a> classes. Instances of this class are returned when you retrieve the unicast address information for a <a class=\"xref\" href=\"system.net.networkinformation.networkinterface\" data-linktype=\"relative-path\">NetworkInterface</a> object.</p>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Net_NetworkInformation_DuplicateAddressDetectionState_Deprecated\">\r\n      \t\t\t<span class=\"lang-csharp\">Deprecated</span>\r\n      \t</td>\r\n      \t<td><p>The address is valid, but it is nearing its lease lifetime and should not be used by applications.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_NetworkInformation_DuplicateAddressDetectionState_Duplicate\">\r\n      \t\t\t<span class=\"lang-csharp\">Duplicate</span>\r\n      \t</td>\r\n      \t<td><p>The address is not unique. This address should not be assigned to the network interface.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_NetworkInformation_DuplicateAddressDetectionState_Invalid\">\r\n      \t\t\t<span class=\"lang-csharp\">Invalid</span>\r\n      \t</td>\r\n      \t<td><p>The address is not valid. A nonvalid address is expired and no longer assigned to an interface; applications should not send data packets to it.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_NetworkInformation_DuplicateAddressDetectionState_Preferred\">\r\n      \t\t\t<span class=\"lang-csharp\">Preferred</span>\r\n      \t</td>\r\n      \t<td><p>The address is valid and its use is unrestricted.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_NetworkInformation_DuplicateAddressDetectionState_Tentative\">\r\n      \t\t\t<span class=\"lang-csharp\">Tentative</span>\r\n      \t</td>\r\n      \t<td><p>The duplicate address detection procedure&#39;s evaluation of the address has not completed successfully. Applications should not use the address because it is not yet valid and packets sent to it are discarded.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Net.NetworkInformation.DuplicateAddressDetectionState.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.DuplicateAddressDetectionState\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.DuplicateAddressDetectionState.Deprecated\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.DuplicateAddressDetectionState.Duplicate\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.DuplicateAddressDetectionState.Invalid\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.DuplicateAddressDetectionState.Preferred\">\r\n<meta name=\"APIName\" content=\"System.Net.NetworkInformation.DuplicateAddressDetectionState.Tentative\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"7c44f39f-f3f4-77f1-77fe-066d23be19eb\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies the current state of an IP address.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.net.networkinformation/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.NetworkInformation.DuplicateAddressDetectionState\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Net.NetworkInformation.DuplicateAddressDetectionState.yml","open_to_public_contributors":false,"api_name":["System.Net.NetworkInformation.DuplicateAddressDetectionState","System.Net.NetworkInformation.DuplicateAddressDetectionState.Deprecated","System.Net.NetworkInformation.DuplicateAddressDetectionState.Duplicate","System.Net.NetworkInformation.DuplicateAddressDetectionState.Invalid","System.Net.NetworkInformation.DuplicateAddressDetectionState.Preferred","System.Net.NetworkInformation.DuplicateAddressDetectionState.Tentative"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.NetworkInformation.DuplicateAddressDetectionState","System::Net::NetworkInformation::DuplicateAddressDetectionState","System.Net.NetworkInformation.DuplicateAddressDetectionState.Deprecated","System::Net::NetworkInformation::DuplicateAddressDetectionState::Deprecated","System.Net.NetworkInformation.DuplicateAddressDetectionState.Duplicate","System::Net::NetworkInformation::DuplicateAddressDetectionState::Duplicate","System.Net.NetworkInformation.DuplicateAddressDetectionState.Invalid","System::Net::NetworkInformation::DuplicateAddressDetectionState::Invalid","System.Net.NetworkInformation.DuplicateAddressDetectionState.Preferred","System::Net::NetworkInformation::DuplicateAddressDetectionState::Preferred","System.Net.NetworkInformation.DuplicateAddressDetectionState.Tentative","System::Net::NetworkInformation::DuplicateAddressDetectionState::Tentative"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"7c44f39f-f3f4-77f1-77fe-066d23be19eb","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Net.NetworkInformation/DuplicateAddressDetectionState.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DuplicateAddressDetectionState enum | Microsoft Docs","_op_ogTitle":"DuplicateAddressDetectionState enum","description":"Specifies the current state of an IP address.\n","toc_asset_id":"api/_splitted/System.Net.NetworkInformation/toc.json","toc_rel":"_splitted/System.Net.NetworkInformation/toc.json","source_url":"","ms.assetid":"System.Net.NetworkInformation.DuplicateAddressDetectionState","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.net.networkinformation.duplicateaddressdetectionstate","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.net.networkinformation.duplicateaddressdetectionstate","fileRelativePath":"api/System.Net.NetworkInformation.DuplicateAddressDetectionState.html"},"themesRelativePathToOutputRoot":"_themes/"}