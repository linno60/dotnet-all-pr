{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">PropertyValueUIItemInvokeHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that will handle the <span class=\"xref\">stem.Drawing.Design.PropertyValueUIItem.InvokeHandler*</span> event of a <a class=\"xref\" href=\"system.drawing.design.propertyvalueuiitem\" data-linktype=\"relative-path\">PropertyValueUIItem</a>.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void PropertyValueUIItemInvokeHandler(ITypeDescriptorContext context, PropertyDescriptor descriptor, PropertyValueUIItem invokedItem);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">PropertyValueUIItemInvokeHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example provides a <a class=\"xref\" href=\"system.drawing.design.propertyvalueuiitem\" data-linktype=\"relative-path\">PropertyValueUIItem</a> object for any properties of the component named <code>HorizontalMargin</code> or <code>VerticalMargin</code>. The <a class=\"xref\" href=\"system.drawing.design.propertyvalueuiitem\" data-linktype=\"relative-path\">PropertyValueUIItem</a> for these properties provides an image, a ToolTip, and an event handler that displays a message box when the image for the property is clicked. This code example is part of a larger example provided for the <a class=\"xref\" href=\"system.drawing.design.ipropertyvalueuiservice\" data-linktype=\"relative-path\">IPropertyValueUIService</a> interface.  </p>\n<pre><code class=\"lang-cpp\" name=\"IPropertyValueUIServiceExample#2\">// PropertyValueUIHandler delegate that provides PropertyValueUIItem\n// objects to any properties named horizontalMargin or verticalMargin.\nvoid marginPropertyValueUIHandler( System::ComponentModel::ITypeDescriptorContext^ /*context*/, System::ComponentModel::PropertyDescriptor^ propDesc, ArrayList^ itemList )\n{\n   // A PropertyValueUIHandler added to the IPropertyValueUIService\n   // is queried once for each property of a component and passed\n   // a PropertyDescriptor that represents the characteristics of\n   // the property when the Properties window is set to a new\n   // component. A PropertyValueUIHandler can determine whether\n   // to add a PropertyValueUIItem for the object to its ValueUIItem\n   // list depending on the values of the PropertyDescriptor.\n   if ( propDesc-&gt;DisplayName-&gt;Equals( &quot;horizontalMargin&quot; ) )\n   {\n      Image^ img = DeserializeFromBase64Text( imageBlob1 );\n      itemList-&gt;Add( gcnew PropertyValueUIItem( img,gcnew PropertyValueUIItemInvokeHandler( this, &amp;PropertyUIComponent::marginInvoke ),&quot;Test ToolTip&quot; ) );\n   }\n\n   if ( propDesc-&gt;DisplayName-&gt;Equals( &quot;verticalMargin&quot; ) )\n   {\n      Image^ img = DeserializeFromBase64Text( imageBlob1 );\n      img-&gt;RotateFlip( RotateFlipType::Rotate90FlipNone );\n      itemList-&gt;Add( gcnew PropertyValueUIItem( img,gcnew PropertyValueUIItemInvokeHandler( this, &amp;PropertyUIComponent::marginInvoke ),&quot;Test ToolTip&quot; ) );\n   }\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"IPropertyValueUIServiceExample#2\">// PropertyValueUIHandler delegate that provides PropertyValueUIItem\n// objects to any properties named HorizontalMargin or VerticalMargin.\nprivate void marginPropertyValueUIHandler(System.ComponentModel.ITypeDescriptorContext context, System.ComponentModel.PropertyDescriptor propDesc, ArrayList itemList)\n{\n    // A PropertyValueUIHandler added to the IPropertyValueUIService\n    // is queried once for each property of a component and passed\n    // a PropertyDescriptor that represents the characteristics of \n    // the property when the Properties window is set to a new \n    // component. A PropertyValueUIHandler can determine whether \n    // to add a PropertyValueUIItem for the object to its ValueUIItem \n    // list depending on the values of the PropertyDescriptor.\n    if( propDesc.DisplayName.Equals( &quot;HorizontalMargin&quot; ) )\n    {\n        Image img = DeserializeFromBase64Text(imageBlob1);\n        itemList.Add( new PropertyValueUIItem( img, new PropertyValueUIItemInvokeHandler(this.marginInvoke), &quot;Test ToolTip&quot;) );\n    }\n    if( propDesc.DisplayName.Equals( &quot;VerticalMargin&quot; ) )\n    {\n        Image img = DeserializeFromBase64Text(imageBlob1);\n        img.RotateFlip(RotateFlipType.Rotate90FlipNone);\n        itemList.Add( new PropertyValueUIItem( img, new PropertyValueUIItemInvokeHandler(this.marginInvoke), &quot;Test ToolTip&quot;) );\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"IPropertyValueUIServiceExample#2\">&#39; PropertyValueUIHandler delegate that provides PropertyValueUIItem\n&#39; objects to any properties named HorizontalMargin or VerticalMargin.\nPrivate Sub marginPropertyValueUIHandler(ByVal context As System.ComponentModel.ITypeDescriptorContext, ByVal propDesc As System.ComponentModel.PropertyDescriptor, ByVal itemList As ArrayList)\n    &#39; A PropertyValueUIHandler added to the IPropertyValueUIService\n    &#39; is queried once for each property of a component and passed\n    &#39; a PropertyDescriptor that represents the characteristics of \n    &#39; the property when the Properties window is set to a new \n    &#39; component. A PropertyValueUIHandler can determine whether \n    &#39; to add a PropertyValueUIItem for the object to its ValueUIItem \n    &#39; list depending on the values of the PropertyDescriptor.\n    If propDesc.DisplayName.Equals(&quot;HorizontalMargin&quot;) Then\n        Dim img As Image = DeserializeFromBase64Text(imageBlob1)\n        itemList.Add(New PropertyValueUIItem(img, New PropertyValueUIItemInvokeHandler(AddressOf Me.marginInvoke), &quot;Test ToolTip&quot;))\n    End If\n    If propDesc.DisplayName.Equals(&quot;VerticalMargin&quot;) Then\n        Dim img As Image = DeserializeFromBase64Text(imageBlob1)\n        img.RotateFlip(RotateFlipType.Rotate90FlipNone)\n        itemList.Add(New PropertyValueUIItem(img, New PropertyValueUIItemInvokeHandler(AddressOf Me.marginInvoke), &quot;Test ToolTip&quot;))\n    End If\nEnd Sub\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Double-clicking an icon in the Properties window will raise the <a class=\"xref\" href=\"system.drawing.design.propertyvalueuiitem#System_Drawing_Design_PropertyValueUIItem_InvokeHandler_\" data-linktype=\"relative-path\">InvokeHandler</a> event of the <a class=\"xref\" href=\"system.drawing.design.propertyvalueuiitem\" data-linktype=\"relative-path\">PropertyValueUIItem</a> that the icon is associated with. The <a class=\"xref\" href=\"system.drawing.design.propertyvalueuiitem#System_Drawing_Design_PropertyValueUIItem_InvokeHandler_\" data-linktype=\"relative-path\">InvokeHandler</a> event typically launches a user interface (UI) to edit the property&#39;s value. Add a PropertyValueUIItemInvokeHandler to the <a class=\"xref\" href=\"system.drawing.design.propertyvalueuiitem#System_Drawing_Design_PropertyValueUIItem_InvokeHandler_\" data-linktype=\"relative-path\">InvokeHandler</a> property of a <a class=\"xref\" href=\"system.drawing.design.propertyvalueuiitem\" data-linktype=\"relative-path\">PropertyValueUIItem</a> to assign an event handler to perform the appropriate behavior when the icon displayed next to the property name is double-clicked.  </p>\n<p> When you create a PropertyValueUIItemInvokeHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see <a href=\"../topic/handling%20and%20raising%20events\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Drawing.Design.PropertyValueUIItemInvokeHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Design.PropertyValueUIItemInvokeHandler\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Design.PropertyValueUIItemInvokeHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Design.PropertyValueUIItemInvokeHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Design.PropertyValueUIItemInvokeHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Drawing.Design.PropertyValueUIItemInvokeHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"aa0a9c9f-523f-fc6f-f69b-a9caf7f73562\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that will handle the  event of a .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.drawing.design/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Drawing.Design.PropertyValueUIItemInvokeHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Drawing.Design.PropertyValueUIItemInvokeHandler.yml","open_to_public_contributors":false,"api_name":["System.Drawing.Design.PropertyValueUIItemInvokeHandler","System.Drawing.Design.PropertyValueUIItemInvokeHandler..ctor","System.Drawing.Design.PropertyValueUIItemInvokeHandler.Invoke","System.Drawing.Design.PropertyValueUIItemInvokeHandler.BeginInvoke","System.Drawing.Design.PropertyValueUIItemInvokeHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Drawing.Design.PropertyValueUIItemInvokeHandler","System::Drawing::Design::PropertyValueUIItemInvokeHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"aa0a9c9f-523f-fc6f-f69b-a9caf7f73562","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Drawing.Design/PropertyValueUIItemInvokeHandler.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"PropertyValueUIItemInvokeHandler delegate | Microsoft Docs","_op_ogTitle":"PropertyValueUIItemInvokeHandler delegate","description":"Represents the method that will handle the  event of a .\n","toc_asset_id":"api/_splitted/System.Drawing.Design/toc.json","toc_rel":"_splitted/System.Drawing.Design/toc.json","source_url":"","ms.assetid":"System.Drawing.Design.PropertyValueUIItemInvokeHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.drawing.design.propertyvalueuiiteminvokehandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.drawing.design.propertyvalueuiiteminvokehandler","fileRelativePath":"api/System.Drawing.Design.PropertyValueUIItemInvokeHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}