{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">IPersonalizable</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Defines additional management capabilities for the application and extraction of personalization state.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public interface IPersonalizable</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates how to use the IPersonalizable interface. The example consists of an .aspx page that references a Web Part control named <code>UrlListWebPart</code>. The following code is the .aspx file for the example.  </p>\n<pre><code class=\"lang-vb\" name=\"WebParts_IPersonalizable_Overview#1\">&lt;%@ Page Language=&quot;VB&quot;  %&gt;\n&lt;%@ Register TagPrefix=&quot;dict&quot; \n    namespace=&quot;Samples.AspNet.VB.Controls&quot; %&gt;\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n  &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;IPersonalizable&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;asp:WebPartManager ID=&quot;mgr&quot; runat=&quot;server&quot; /&gt;\n    &lt;div&gt;\n    &lt;asp:WebPartZone ID=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;\n      &lt;ZoneTemplate&gt;\n        &lt;dict:urllistwebpart id=&quot;listwp1&quot; runat=&quot;server&quot;\n          title=&quot;URL List WebPart&quot; /&gt;\n      &lt;/ZoneTemplate&gt;\n    &lt;/asp:WebPartZone&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-cs\" name=\"WebParts_IPersonalizable_Overview#1\">&lt;%@ Page Language=&quot;C#&quot;  %&gt;\n&lt;%@ Register TagPrefix=&quot;dict&quot; \n    namespace=&quot;Samples.AspNet.CS.Controls&quot; %&gt;\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; \n  &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;IPersonalizable&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;asp:WebPartManager ID=&quot;mgr&quot; runat=&quot;server&quot; /&gt;\n    &lt;div&gt;\n    &lt;asp:WebPartZone ID=&quot;WebPartZone1&quot; runat=&quot;server&quot;&gt;\n      &lt;ZoneTemplate&gt;\n        &lt;dict:urllistwebpart id=&quot;listwp1&quot; runat=&quot;server&quot;\n          title=&quot;URL List WebPart&quot; /&gt;\n      &lt;/ZoneTemplate&gt;\n    &lt;/asp:WebPartZone&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p> The following code is the source for the custom <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpart\" data-linktype=\"relative-path\">WebPart</a> control. This file should be placed in the App_Code directory.  </p>\n<pre><code class=\"lang-cs\" name=\"WebParts_IPersonalizable_Overview#2\">namespace Samples.AspNet.CS.Controls\n{\n\n    using System;\n    using System.Collections;\n    using System.ComponentModel;\n    using System.Diagnostics;\n    using System.Drawing;\n    using System.Web;\n    using System.Web.UI;\n    using System.Security.Permissions;\n    using System.Web.UI.WebControls;\n    using System.Web.UI.WebControls.WebParts;\n\n    [AspNetHostingPermission(SecurityAction.Demand,\n      Level = AspNetHostingPermissionLevel.Minimal)]\n    [AspNetHostingPermission(SecurityAction.InheritanceDemand,\n      Level = AspNetHostingPermissionLevel.Minimal)]\n    public class UrlListWebPart : WebPart, IPersonalizable\n    {\n        private ArrayList _sharedUrls;\n        private ArrayList _userUrls;\n        private bool _listDirty;\n\n        private TextBox _nameTextBox;\n        private TextBox _urlTextBox;\n        private Button _addButton;\n        private BulletedList _list;\n\n        protected override void CreateChildControls()\n        {\n            Label nameLabel = new Label();\n            Label urlLabel = new Label();\n            LiteralControl breakLiteral1 = new LiteralControl(&quot;&lt;br /&gt;&quot;);\n            LiteralControl breakLiteral2 = new LiteralControl(&quot;&lt;br /&gt;&quot;);\n            LiteralControl breakLiteral3 = new LiteralControl(&quot;&lt;br /&gt;&quot;);\n\n            _nameTextBox = new TextBox();\n            _urlTextBox = new TextBox();\n            _addButton = new Button();\n            _list = new BulletedList();\n\n            nameLabel.Text = &quot;Name: &quot;;\n            urlLabel.Text = &quot;URL: &quot;;\n            _nameTextBox.ID = &quot;nameTextBox&quot;;\n            _urlTextBox.ID = &quot;urlTextBox&quot;;\n            _addButton.Text = &quot;Add&quot;;\n            _addButton.ID = &quot;addButton&quot;;\n            _addButton.Click += new EventHandler(this.OnClickAddButton);\n            _list.DisplayMode = BulletedListDisplayMode.HyperLink;\n            _list.ID = &quot;list&quot;;\n\n            Controls.Add(nameLabel);\n            Controls.Add(_nameTextBox);\n            Controls.Add(breakLiteral1);\n\n            Controls.Add(urlLabel);\n            Controls.Add(_urlTextBox);\n            Controls.Add(breakLiteral2);\n\n            Controls.Add(_addButton);\n            Controls.Add(breakLiteral3);\n\n            Controls.Add(_list);\n        }\n\n        private void OnClickAddButton(object sender, EventArgs e)\n        {\n            string name = _nameTextBox.Text.Trim();\n            string url = _urlTextBox.Text.Trim();\n\n            Pair p = new Pair(name, url);\n            if (WebPartManager.Personalization.Scope == PersonalizationScope.Shared)\n            {\n                if (_sharedUrls == null)\n                {\n                    _sharedUrls = new ArrayList();\n                }\n                _sharedUrls.Add(p);\n            }\n            else\n            {\n                if (_userUrls == null)\n                {\n                    _userUrls = new ArrayList();\n                }\n                _userUrls.Add(p);\n            }\n\n            OnUrlAdded();\n        }\n\n        protected virtual void OnUrlAdded()\n        {\n            _listDirty = true;\n            ChildControlsCreated = false;\n        }\n\n        protected override void RenderContents(HtmlTextWriter writer)\n        {\n            if (_sharedUrls != null)\n            {\n                foreach (Pair p in _sharedUrls)\n                {\n                    _list.Items.Add(new ListItem((string)p.First, (string)p.Second));\n                }\n            }\n            if (_userUrls != null)\n            {\n                foreach (Pair p in _userUrls)\n                {\n                    _list.Items.Add(new ListItem((string)p.First, (string)p.Second));\n                }\n            }\n\n            base.RenderContents(writer);\n        }\n\n        public virtual bool IsDirty\n        {\n            get\n            {\n                return _listDirty;\n            }\n        }\n        public new virtual void Load(PersonalizationDictionary state)\n        {\n            if (state != null)\n            {\n                PersonalizationEntry sharedUrlsEntry = state[&quot;sharedUrls&quot;];\n                if (sharedUrlsEntry != null)\n                {\n                    _sharedUrls = (ArrayList)sharedUrlsEntry.Value;\n                }\n\n                PersonalizationEntry userUrlsEntry = state[&quot;userUrls&quot;];\n                if (userUrlsEntry != null)\n                {\n                    _userUrls = (ArrayList)userUrlsEntry.Value;\n                }\n            }\n        }\n\n        public virtual void Save(PersonalizationDictionary state)\n        {\n            if ((_sharedUrls != null) &amp;&amp; (_sharedUrls.Count != 0))\n            {\n                state[&quot;sharedUrls&quot;] = new PersonalizationEntry(_sharedUrls, PersonalizationScope.Shared);\n            }\n            if ((_userUrls != null) &amp;&amp; (_userUrls.Count != 0))\n            {\n                state[&quot;userUrls&quot;] = new PersonalizationEntry(_userUrls, PersonalizationScope.User);\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"WebParts_IPersonalizable_Overview#2\">\nImports System\nImports System.Collections\nImports System.ComponentModel\nImports System.Diagnostics\nImports System.Drawing\nImports System.Web\nImports System.Web.UI\nImports System.Security.Permissions\nImports System.Web.UI.WebControls\nImports System.Web.UI.WebControls.WebParts\n\nNamespace Samples.AspNet.VB.Controls\n\n  &lt;AspNetHostingPermission(SecurityAction.Demand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  &lt;AspNetHostingPermission(SecurityAction.InheritanceDemand, _\n    Level:=AspNetHostingPermissionLevel.Minimal)&gt; _\n  Public Class UrlListWebPart\n      Inherits WebPart\n      Implements IPersonalizable\n      Private _sharedUrls As ArrayList\n      Private _userUrls As ArrayList\n      Private _listDirty As Boolean\n\n      Private _nameTextBox As TextBox\n      Private _urlTextBox As TextBox\n      Private _addButton As Button\n      Private _list As BulletedList\n\n\n      Protected Overrides Sub CreateChildControls()\n          Dim nameLabel As New Label()\n          Dim urlLabel As New Label()\n          Dim breakLiteral1 As New LiteralControl(&quot;&lt;br /&gt;&quot;)\n          Dim breakLiteral2 As New LiteralControl(&quot;&lt;br /&gt;&quot;)\n          Dim breakLiteral3 As New LiteralControl(&quot;&lt;br /&gt;&quot;)\n\n          _nameTextBox = New TextBox()\n          _urlTextBox = New TextBox()\n          _addButton = New Button()\n          _list = New BulletedList()\n\n          nameLabel.Text = &quot;Name: &quot;\n          urlLabel.Text = &quot;URL: &quot;\n          _nameTextBox.ID = &quot;nameTextBox&quot;\n          _urlTextBox.ID = &quot;urlTextBox&quot;\n          _addButton.Text = &quot;Add&quot;\n          _addButton.ID = &quot;addButton&quot;\n          AddHandler _addButton.Click, AddressOf Me.OnClickAddButton\n          _list.DisplayMode = BulletedListDisplayMode.HyperLink\n          _list.ID = &quot;list&quot;\n\n          Controls.Add(nameLabel)\n          Controls.Add(_nameTextBox)\n          Controls.Add(breakLiteral1)\n\n          Controls.Add(urlLabel)\n          Controls.Add(_urlTextBox)\n          Controls.Add(breakLiteral2)\n\n          Controls.Add(_addButton)\n          Controls.Add(breakLiteral3)\n\n          Controls.Add(_list)\n\n      End Sub &#39;CreateChildControls\n\n\n      Private Sub OnClickAddButton(ByVal sender As Object, ByVal e As EventArgs)\n          Dim name As String = _nameTextBox.Text.Trim()\n          Dim url As String = _urlTextBox.Text.Trim()\n\n          Dim p As New Pair(name, url)\n          If WebPartManager.Personalization.Scope = PersonalizationScope.Shared Then\n              If _sharedUrls Is Nothing Then\n                  _sharedUrls = New ArrayList()\n              End If\n              _sharedUrls.Add(p)\n          Else\n              If _userUrls Is Nothing Then\n                  _userUrls = New ArrayList()\n              End If\n              _userUrls.Add(p)\n          End If\n\n          OnUrlAdded()\n\n      End Sub &#39;OnClickAddButton\n\n\n      Protected Overridable Sub OnUrlAdded()\n          _listDirty = True\n          ChildControlsCreated = False\n\n      End Sub &#39;OnUrlAdded\n\n\n      Protected Overrides Sub RenderContents(ByVal writer As HtmlTextWriter)\n          If Not (_sharedUrls Is Nothing) Then\n              Dim p As Pair\n              For Each p In _sharedUrls\n                  _list.Items.Add(New ListItem(CStr(p.First), CStr(p.Second)))\n              Next p\n          End If\n          If Not (_userUrls Is Nothing) Then\n              Dim p As Pair\n              For Each p In _userUrls\n                  _list.Items.Add(New ListItem(CStr(p.First), CStr(p.Second)))\n              Next p\n          End If\n\n          MyBase.RenderContents(writer)\n\n      End Sub &#39;RenderContents\n\n\n      Public Overridable ReadOnly Property IsDirty() As Boolean _\n        Implements IPersonalizable.IsDirty\n          Get\n              Return _listDirty\n          End Get\n      End Property\n\n      Public Overridable Shadows Sub Load(ByVal state As PersonalizationDictionary) _\n        Implements IPersonalizable.Load\n          If Not (state Is Nothing) Then\n              Dim sharedUrlsEntry As PersonalizationEntry = state(&quot;sharedUrls&quot;)\n              If Not (sharedUrlsEntry Is Nothing) Then\n                  _sharedUrls = CType(sharedUrlsEntry.Value, ArrayList)\n              End If\n\n              Dim userUrlsEntry As PersonalizationEntry = state(&quot;userUrls&quot;)\n              If Not (userUrlsEntry Is Nothing) Then\n                  _userUrls = CType(userUrlsEntry.Value, ArrayList)\n              End If\n          End If\n\n      End Sub &#39;Load\n\n      Public Overridable Sub Save(ByVal state As PersonalizationDictionary) _\n        Implements IPersonalizable.Save\n          If Not (_sharedUrls Is Nothing) AndAlso _sharedUrls.Count &lt;&gt; 0 Then\n              state(&quot;sharedUrls&quot;) = New PersonalizationEntry(_sharedUrls, PersonalizationScope.Shared)\n          End If\n          If Not (_userUrls Is Nothing) AndAlso _userUrls.Count &lt;&gt; 0 Then\n              state(&quot;userUrls&quot;) = New PersonalizationEntry(_userUrls, PersonalizationScope.User)\n          End If\n\n      End Sub\n  End Class\n\n\nEnd Namespace\n</code></pre><p> Load the page in a browser. Type in a name to represent a URL, then add an actual URL beginning with <code>http://</code>, and click the <strong>Add</strong> button to add the URL.</p>\n\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>In addition to using the <code>Personalizable</code> attribute on control properties, a control can also implement IPersonalizable for additional management capabilities for the application and extraction of personalization state. For example, controls that need to manage private state information should implement this interface. Controls that access personalized data through complex mechanisms, such as custom cache solutions, data persistence to mainframes, or XML Web services, should also implement this interface.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> You should not add types based on classes defined in the App_Code directory and then depend on the default binary serialization mechanism. App_Code-based artifacts are not consistently binary-serializable due to the fact that they can have their assembly names changed at random points in time.</p>\n</div>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Web_UI_WebControls_WebParts_IPersonalizable_IsDirty_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_WebControls_WebParts_IPersonalizable_IsDirty\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">IsDirty</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets a value that indicates whether the custom data that a control manages has changed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool IsDirty { get; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the custom data managed with the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.ipersonalizable\" data-linktype=\"relative-path\">IPersonalizable</a> interface has changed; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When data managed by a control has changed, the control is considered &quot;dirty.&quot; A control should return <code>true</code> if the custom data that it manages through the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.ipersonalizable\" data-linktype=\"relative-path\">IPersonalizable</a> interface has changed. If a control returns <code>true</code> from this property, the control&#39;s <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.ipersonalizable#System_Web_UI_WebControls_WebParts_IPersonalizable_Save_\" data-linktype=\"relative-path\">Save</a> interface method implementation is called during property value extraction.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> This property is checked automatically by the personalization infrastructure during the latter phases of processing a POST request. However, for GET requests, the value returned from the IsDirty property is not checked. Some other event has to have caused the control to be considered &quot;dirty&quot; for any control state--not just data managed by <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.ipersonalizable\" data-linktype=\"relative-path\">IPersonalizable</a>--to be saved. If a control can mark itself as &quot;dirty&quot; during a GET request, or if the personalization infrastructure under some very specific boundary conditions considers a control &quot;dirty&quot; during a GET request, then <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.ipersonalizable#System_Web_UI_WebControls_WebParts_IPersonalizable_Save_\" data-linktype=\"relative-path\">Save</a> will always be called.  </p>\n</div>\n<p> A control can reference its associated <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager\" data-linktype=\"relative-path\">WebPartManager</a> control and check the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartpersonalization#System_Web_UI_WebControls_WebParts_WebPartPersonalization_Scope_\" data-linktype=\"relative-path\">Scope</a> property to determine the current scope. The &quot;dirty&quot; state of a control&#39;s custom data should be appropriate for the current scope.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Web_UI_WebControls_WebParts_IPersonalizable_Load_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_WebControls_WebParts_IPersonalizable_Load_System_Web_UI_WebControls_WebParts_PersonalizationDictionary_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Load(PersonalizationDictionary)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Loads custom data into a control.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Load (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>state</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.personalizationdictionary\" data-linktype=\"relative-path\">PersonalizationDictionary</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.personalizationdictionary\" data-linktype=\"relative-path\">PersonalizationDictionary</a> that contains custom scoped data that was loaded from the underlying data store.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method is called on a control to allow it to load custom data into itself. It can also return a value that indicates whether a control&#39;s custom state must be written back to the underlying data store, regardless of whether any other personalization data on the page has changed. A control can set its own custom properties and carry out additional internal logic based on the values contained in the personalization dictionary. This method is called by the Web Parts control set while applying personalization data to a control.  </p>\n<p> You should also be aware of the merge behavior of <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.personalizationscope\" data-linktype=\"relative-path\">PersonalizationScope</a>-scoped versus <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.personalizationscope\" data-linktype=\"relative-path\">PersonalizationScope</a>-scoped properties contained in the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.personalizationdictionary\" data-linktype=\"relative-path\">PersonalizationDictionary</a> object. The <code>state</code> parameter contains a merged representation of custom data that was loaded from the underlying data store. In <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.personalizationscope\" data-linktype=\"relative-path\">PersonalizationScope</a> scope, all the values that were previously added when the page itself was in <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.personalizationscope\" data-linktype=\"relative-path\">PersonalizationScope</a> scope would be available. In <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.personalizationscope\" data-linktype=\"relative-path\">PersonalizationScope</a> scope, if a value associated with <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.personalizationscope\" data-linktype=\"relative-path\">PersonalizationScope</a> personalization scope had one value added when the page was in <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.personalizationscope\" data-linktype=\"relative-path\">PersonalizationScope</a> scope, and a different value when the page was in <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.personalizationscope\" data-linktype=\"relative-path\">PersonalizationScope</a> scope, then the personalization infrastructure would only include the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.personalizationscope\" data-linktype=\"relative-path\">PersonalizationScope</a>-scoped value (as opposed to the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.personalizationscope\" data-linktype=\"relative-path\">PersonalizationScope</a> scope value) within the <code>state</code> parameter.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5 netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Web_UI_WebControls_WebParts_IPersonalizable_Save_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Web_UI_WebControls_WebParts_IPersonalizable_Save_System_Web_UI_WebControls_WebParts_PersonalizationDictionary_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Save(PersonalizationDictionary)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Saves custom properties and internal state information in the control&#39;s <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.personalizationdictionary\" data-linktype=\"relative-path\">PersonalizationDictionary</a> object.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public void Save (System.Web.UI.WebControls.WebParts.PersonalizationDictionary state);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>state</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.personalizationdictionary\" data-linktype=\"relative-path\">PersonalizationDictionary</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.personalizationdictionary\" data-linktype=\"relative-path\">PersonalizationDictionary</a> that contains custom scoped data that was loaded from the underlying data store.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>A server control can store its own custom properties and internal state information the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.personalizationdictionary\" data-linktype=\"relative-path\">PersonalizationDictionary</a> specified in the <code>state</code> parameter. The information is stored as a series of name/value pairs. It is the responsibility of the control to use name/value pairs that it can recognize during subsequent calls made to the control through the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.ipersonalizable#System_Web_UI_WebControls_WebParts_IPersonalizable_Load_\" data-linktype=\"relative-path\">Load</a> method.  </p>\n<p> A control can reference its associated <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.webpartmanager\" data-linktype=\"relative-path\">WebPartManager</a> control and check the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.personalizationscope\" data-linktype=\"relative-path\">PersonalizationScope</a> object to determine the current scope. Custom state information should be appropriate for the current scope. Note that each <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.personalizationentry\" data-linktype=\"relative-path\">PersonalizationEntry</a> value that is added to the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.personalizationdictionary\" data-linktype=\"relative-path\">PersonalizationDictionary</a> object should be associated with the appropriate scope value, because the personalization infrastructure depends on this when merging <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.personalizationscope\" data-linktype=\"relative-path\">PersonalizationScope</a> and <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.personalizationscope\" data-linktype=\"relative-path\">PersonalizationScope</a>-scoped custom data prior to passing it to the <a class=\"xref\" href=\"system.web.ui.webcontrols.webparts.ipersonalizable#System_Web_UI_WebControls_WebParts_IPersonalizable_Load_\" data-linktype=\"relative-path\">Load</a> method.  </p>\n<p> When using the standard ASP.NET implementation of Web Parts, controls must ensure that objects placed in the state dictionary can be serialized by the ASP.NET <a class=\"xref\" href=\"system.web.ui.objectstateformatter\" data-linktype=\"relative-path\">ObjectStateFormatter</a> class. In practice, this means the following:  </p>\n<ul>\n<li><p>Primitive .NET Framework types, strings, and collection-oriented .NET Framework types such as arrays, array lists, hash tables, and hybrid dictionaries, are automatically serializable.  </p>\n</li>\n<li><p>Custom types that supply their own <a class=\"xref\" href=\"system.componentmodel.typeconverter\" data-linktype=\"relative-path\">TypeConverter</a> classes capable of serializing to and deserializing from strings are considered serializable.  </p>\n</li>\n<li><p>Custom types that can be serialized by the <a class=\"xref\" href=\"system.runtime.serialization.formatters.binary.binaryformatter\" data-linktype=\"relative-path\">BinaryFormatter</a> class are considered serializable.  </p>\n</li>\n</ul>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> You should not add types based on classes defined in the App_Code directory and then depend on the default binary serialization mechanism. App_Code-based artifacts are not consistently binary-serializable due to the fact that they can have their assembly names changed at random points in time.</p>\n</div>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"uhfHeaderId\" content=\"MSDocsHeader-DotNet\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.WebParts.IPersonalizable.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.IPersonalizable\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.IPersonalizable.Load\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.WebParts.IPersonalizable.Save\">\r\n<meta name=\"APILocation\" content=\"System.Web.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-04-01 05:59 PM\">\r\n<meta name=\"document_id\" content=\"a68a7c03-4c13-b176-c20d-4d228c39abf0\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Defines additional management capabilities for the application and extraction of personalization state.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.web.ui.webcontrols.webparts/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.WebControls.WebParts.IPersonalizable\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","uhfHeaderId":"MSDocsHeader-DotNet","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.WebParts.IPersonalizable.yml","open_to_public_contributors":false,"api_name":["System.Web.UI.WebControls.WebParts.IPersonalizable","System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty","System.Web.UI.WebControls.WebParts.IPersonalizable.Load","System.Web.UI.WebControls.WebParts.IPersonalizable.Save"],"api_location":["System.Web.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.WebControls.WebParts.IPersonalizable","System::Web::UI::WebControls::WebParts::IPersonalizable","System.Web.UI.WebControls.WebParts.IPersonalizable.IsDirty","System::Web::UI::WebControls::WebParts::IPersonalizable::IsDirty","System.Web.UI.WebControls.WebParts.IPersonalizable.Load","System::Web::UI::WebControls::WebParts::IPersonalizable::Load","System.Web.UI.WebControls.WebParts.IPersonalizable.Save","System::Web::UI::WebControls::WebParts::IPersonalizable::Save"],"dev_langs":["csharp"],"updated_at":"2017-04-01 05:59 PM","document_id":"a68a7c03-4c13-b176-c20d-4d228c39abf0","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Web.UI.WebControls.WebParts/IPersonalizable.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IPersonalizable interface | Microsoft Docs","_op_ogTitle":"IPersonalizable interface","description":"Defines additional management capabilities for the application and extraction of personalization state.\n","toc_asset_id":"api/_splitted/System.Web.UI.WebControls.WebParts/toc.json","toc_rel":"_splitted/System.Web.UI.WebControls.WebParts/toc.json","source_url":"","ms.assetid":"System.Web.UI.WebControls.WebParts.IPersonalizable","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.webparts.ipersonalizable","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.webparts.ipersonalizable","fileRelativePath":"api/System.Web.UI.WebControls.WebParts.IPersonalizable.html"},"themesRelativePathToOutputRoot":"_themes/"}