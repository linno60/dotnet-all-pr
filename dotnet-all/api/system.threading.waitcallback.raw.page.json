{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">WaitCallback</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents a callback method to be executed by a thread pool thread.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Runtime.InteropServices.ComVisible(true)]\npublic delegate void WaitCallback(object state);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">WaitCallback</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>This section contains two examples. The first example demonstrates how you can queue a simple task for execution by the thread pool.  </p>\n<p> The second example demonstrates how you can queue a task and pass information to it.  </p>\n<p> <strong>Example 1</strong>  </p>\n<p> This example shows how to use the WaitCallback delegate to queue a task for execution by the thread pool. The code example uses the <a class=\"xref\" href=\"system.threading.threadpool#System_Threading_ThreadPool_QueueUserWorkItem_System_Threading_WaitCallback_\" data-linktype=\"relative-path\">System.Threading.ThreadPool.QueueUserWorkItem(WaitCallback)</a> method overload to queue a task, which is represented by a WaitCallback that wraps the <code>ThreadProc</code> method, to execute when a thread becomes available. No task information is supplied with this overload. Therefore, the information that is available to the <code>ThreadProc</code> method is limited to the object the method belongs to.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Threading.ThreadPool QueueUserWorkItem0#1\">using namespace System;\nusing namespace System::Threading;\n\nref class Example\n{\npublic:\n\n   // This thread procedure performs the task.\n   static void ThreadProc(Object^ stateInfo)\n   {\n      \n      // No state object was passed to QueueUserWorkItem, so stateInfo is 0.\n      Console::WriteLine( &quot;Hello from the thread pool.&quot; );\n   }\n};\n\nint main()\n{\n   // Queue the task.\n   ThreadPool::QueueUserWorkItem(gcnew WaitCallback(Example::ThreadProc));\n\n   Console::WriteLine(&quot;Main thread does some work, then sleeps.&quot;);\n   \n   Thread::Sleep(1000);\n   Console::WriteLine(&quot;Main thread exits.&quot;);\n   return 0;\n}\n// The example displays output like the following:\n//       Main thread does some work, then sleeps.\n//       Hello from the thread pool.\n//       Main thread exits.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ThreadPool QueueUserWorkItem0#1\">Imports System.Threading\n\nPublic Module Example\n    Public Sub Main()\n        &#39; Queue the work for execution.\n        ThreadPool.QueueUserWorkItem(AddressOf ThreadProc)\n        \n        Console.WriteLine(&quot;Main thread does some work, then sleeps.&quot;)\n\n        Thread.Sleep(1000)\n\n        Console.WriteLine(&quot;Main thread exits.&quot;)\n    End Sub\n\n    &#39; This thread procedure performs the task.\n    Sub ThreadProc(stateInfo As Object)\n        &#39; No state object was passed to QueueUserWorkItem, so stateInfo is null.\n        Console.WriteLine(&quot;Hello from the thread pool.&quot;)\n    End Sub\nEnd Module\n&#39; The example displays output like the following:\n&#39;       Main thread does some work, then sleeps.\n&#39;       Hello from the thread pool.\n&#39;       Main thread exits.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.ThreadPool QueueUserWorkItem0#1\">using System;\nusing System.Threading;\n\npublic class Example \n{\n    public static void Main() \n    {\n        // Queue the task.\n        ThreadPool.QueueUserWorkItem(ThreadProc);\n        Console.WriteLine(&quot;Main thread does some work, then sleeps.&quot;);\n        Thread.Sleep(1000);\n\n        Console.WriteLine(&quot;Main thread exits.&quot;);\n    }\n\n    // This thread procedure performs the task.\n    static void ThreadProc(Object stateInfo) \n    {\n        // No state object was passed to QueueUserWorkItem, so stateInfo is null.\n        Console.WriteLine(&quot;Hello from the thread pool.&quot;);\n    }\n}\n// The example displays output like the following:\n//       Main thread does some work, then sleeps.\n//       Hello from the thread pool.\n//       Main thread exits.\n</code></pre><p> <strong>Example 2</strong>  </p>\n<p> This example shows how to create an object that contains task information. It also demonstrates how to pass that object to a task that is queued for execution by the thread pool.  </p>\n<pre><code class=\"lang-cpp\" name=\"System.Threading.ThreadPool QueueUserWorkItem1#1\">// This example shows how to create an Object* containing task\n// information, and pass that Object* to a task queued for\n// execution by the thread pool.\nusing namespace System;\nusing namespace System::Threading;\n\n// TaskInfo holds state information for a task that will be\n// executed by a ThreadPool thread.\npublic ref class TaskInfo\n{\npublic:\n\n   // State information for the task.  These members\n   // can be implemented as read-only properties, read/write\n   // properties with validation, and so on, as required.\n   String^ Boilerplate;\n   int Value;\n\n   // Public constructor provides an easy way to supply all\n   // the information needed for the task.\n   TaskInfo( String^ text, int number )\n   {\n      Boilerplate = text;\n      Value = number;\n   }\n\n};\n\npublic ref struct Example\n{\npublic:\n\n   // The thread procedure performs the independent task, in this case\n   // formatting and printing a very simple report.\n   //\n   static void ThreadProc( Object^ stateInfo )\n   {\n      TaskInfo^ ti = dynamic_cast&lt;TaskInfo^&gt;(stateInfo);\n      Console::WriteLine( ti-&gt;Boilerplate, ti-&gt;Value );\n   }\n\n};\n\nvoid main()\n{\n   \n   // Create an object containing the information needed\n   // for the task.\n   TaskInfo^ ti = gcnew TaskInfo( &quot;This report displays the number {0}.&quot;,42 );\n   \n   // Queue the task and data.\n   ThreadPool::QueueUserWorkItem( gcnew WaitCallback( Example::ThreadProc ), ti );\n\n   Console::WriteLine( &quot;Main thread does some work, then sleeps.&quot; );\n      \n   // If you comment out the Sleep, the main thread exits before\n   // the ThreadPool task has a chance to run.  ThreadPool uses \n   // background threads, which do not keep the application \n   // running.  (This is a simple example of a race condition.)\n   Thread::Sleep( 1000 );\n   Console::WriteLine( &quot;Main thread exits.&quot; );\n}\n// The example displays output like the following:\n//       Main thread does some work, then sleeps.\n//       This report displays the number 42.\n//       Main thread exits.\n</code></pre><pre><code class=\"lang-cs\" name=\"System.Threading.ThreadPool QueueUserWorkItem1#1\">// This example shows how to create an object containing task\n// information, and pass that object to a task queued for\n// execution by the thread pool.\nusing System;\nusing System.Threading;\n\n// TaskInfo holds state information for a task that will be\n// executed by a ThreadPool thread.\npublic class TaskInfo \n    {\n    // State information for the task.  These members\n    // can be implemented as read-only properties, read/write\n    // properties with validation, and so on, as required.\n    public string Boilerplate;\n    public int Value;\n\n    // Public constructor provides an easy way to supply all\n    // the information needed for the task.\n    public TaskInfo(string text, int number) {\n        Boilerplate = text;\n        Value = number;\n    }\n}\n\npublic class Example {\n    public static void Main()\n    {\n        // Create an object containing the information needed\n        // for the task.\n        TaskInfo ti = new TaskInfo(&quot;This report displays the number {0}.&quot;, 42);\n\n        // Queue the task and data.\n        ThreadPool.QueueUserWorkItem(new WaitCallback(ThreadProc), ti);\n\n        Console.WriteLine(&quot;Main thread does some work, then sleeps.&quot;);\n\n        // If you comment out the Sleep, the main thread exits before\n        // the ThreadPool task has a chance to run.  ThreadPool uses \n        // background threads, which do not keep the application \n        // running.  (This is a simple example of a race condition.)\n        Thread.Sleep(1000);\n\n        Console.WriteLine(&quot;Main thread exits.&quot;);\n    }\n\n    // The thread procedure performs the independent task, in this case\n    // formatting and printing a very simple report.\n    //\n    static void ThreadProc(Object stateInfo) \n    {\n        TaskInfo ti = (TaskInfo) stateInfo;\n        Console.WriteLine(ti.Boilerplate, ti.Value); \n    }\n}\n// The example displays output like the following:\n//       Main thread does some work, then sleeps.\n//       This report displays the number 42.\n//       Main thread exits.\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Threading.ThreadPool QueueUserWorkItem1#1\">&#39; This example shows how to create an object containing task\n&#39; information, and pass that object to a task queued for\n&#39; execution by the thread pool.\nImports System\nImports System.Threading\n&#39; TaskInfo holds state information for a task that will be\n&#39; executed by a ThreadPool thread.\nPublic Class TaskInfo\n    &#39; State information for the task.  These members\n    &#39; can be implemented as read-only properties, read/write\n    &#39; properties with validation, and so on, as required.\n    Public Boilerplate As String\n    Public Value As Integer\n\n    &#39; Public constructor provides an easy way to supply all\n    &#39; the information needed for the task.\n    Public Sub New(text As String, number As Integer)\n        Boilerplate = text\n        Value = number\n    End Sub\nEnd Class\n\nPublic Class Example\n\n    &lt;MTAThread&gt; _\n    Public Shared Sub Main()\n        &#39; Create an object containing the information needed\n        &#39; for the task.\n        Dim ti As New TaskInfo(&quot;This report displays the number {0}.&quot;, 42)\n\n        &#39; Queue the task and data.\n        ThreadPool.QueueUserWorkItem( _\n                New WaitCallback(AddressOf ThreadProc), ti)\n        \n        Console.WriteLine(&quot;Main thread does some work, then sleeps.&quot;)\n\n        &#39; If you comment out the Sleep, the main thread exits before\n        &#39; the ThreadPool task has a chance to run.  ThreadPool uses \n        &#39; background threads, which do not keep the application \n        &#39; running.  (This is a simple example of a race condition.)\n        Thread.Sleep(1000)\n\n        Console.WriteLine(&quot;Main thread exits.&quot;)\n    End Sub\n\n    &#39; The thread procedure performs the independent task, in this case\n    &#39; formatting and printing a very simple report.\n    &#39;\n    Shared Sub ThreadProc(stateInfo As Object)\n        Dim ti As TaskInfo = CType(stateInfo, TaskInfo)\n        Console.WriteLine(ti.Boilerplate, ti.Value)\n    End Sub\nEnd Class\n&#39; The example displays output like the following:\n&#39;        Main thread does some work, then sleeps.\n&#39;        This report displays the number 42.\n&#39;        Main thread exits.\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>WaitCallback represents a callback method that you want to execute on a <a class=\"xref\" href=\"system.threading.threadpool\" data-linktype=\"relative-path\">ThreadPool</a> thread. Create the delegate by passing your callback method to the WaitCallback constructor. Your method must have the signature shown here.  </p>\n<p> Queue your task for execution by passing the WaitCallback delegate to <a class=\"xref\" href=\"system.threading.threadpool#System_Threading_ThreadPool_QueueUserWorkItem_\" data-linktype=\"relative-path\">QueueUserWorkItem</a>. Your callback method executes when a thread pool thread becomes available.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Visual Basic users can omit the WaitCallback constructor, and simply use the <code>AddressOf</code> operator when passing the callback method to <a class=\"xref\" href=\"system.threading.threadpool#System_Threading_ThreadPool_QueueUserWorkItem_\" data-linktype=\"relative-path\">QueueUserWorkItem</a>. Visual Basic automatically calls the correct delegate constructor.  </p>\n</div>\n<p> If you want to pass information to your callback method, create an object that contains the necessary information and pass it to <a class=\"xref\" href=\"system.threading.threadpool#System_Threading_ThreadPool_QueueUserWorkItem_\" data-linktype=\"relative-path\">QueueUserWorkItem</a> when you queue your task for execution. Each time your callback method executes, the <code>state</code> parameter contains this object.  </p>\n<p> For more information about using callbacks to synchronize thread pool threads, see <a href=\"../topic/the%20managed%20thread%20pool\" data-linktype=\"relative-path\">The Managed Thread Pool</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Threading.WaitCallback.yml\">\r\n<meta name=\"APIName\" content=\"System.Threading.WaitCallback\">\r\n<meta name=\"APIName\" content=\"System.Threading.WaitCallback..ctor\">\r\n<meta name=\"APIName\" content=\"System.Threading.WaitCallback.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Threading.WaitCallback.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Threading.WaitCallback.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"2f65aec4-62c4-4f67-5cab-94b1306b3f56\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents a callback method to be executed by a thread pool thread.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.threading/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Threading.WaitCallback\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Threading.WaitCallback.yml","open_to_public_contributors":false,"api_name":["System.Threading.WaitCallback","System.Threading.WaitCallback..ctor","System.Threading.WaitCallback.Invoke","System.Threading.WaitCallback.BeginInvoke","System.Threading.WaitCallback.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Threading.WaitCallback","System::Threading::WaitCallback"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"2f65aec4-62c4-4f67-5cab-94b1306b3f56","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Threading/WaitCallback.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"WaitCallback delegate | Microsoft Docs","_op_ogTitle":"WaitCallback delegate","description":"Represents a callback method to be executed by a thread pool thread.\n","toc_asset_id":"api/_splitted/System.Threading/toc.json","toc_rel":"_splitted/System.Threading/toc.json","source_url":"","ms.assetid":"System.Threading.WaitCallback","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.threading.waitcallback","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.threading.waitcallback","fileRelativePath":"api/System.Threading.WaitCallback.html"},"themesRelativePathToOutputRoot":"_themes/"}