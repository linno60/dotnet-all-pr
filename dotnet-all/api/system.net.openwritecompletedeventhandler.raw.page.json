{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">OpenWriteCompletedEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that will handle the <a class=\"xref\" href=\"system.net.webclient#System_Net_WebClient_OpenWriteCompleted\" data-linktype=\"relative-path\">OpenWriteCompleted</a> event of a <a class=\"xref\" href=\"system.net.webclient\" data-linktype=\"relative-path\">WebClient</a>.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void OpenWriteCompletedEventHandler(object sender, OpenWriteCompletedEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">OpenWriteCompletedEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates opening a stream to write data to be uploaded.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLWebClientAsync#16\">void OpenResourceForPosting( String^ address )\n{\n   WebClient^ client = gcnew WebClient;\n   Uri ^uri = gcnew Uri(address);\n   \n   // Specify that the OpenWriteCallback method gets called\n   // when the writeable stream is available.\n   client-&gt;OpenWriteCompleted += gcnew OpenWriteCompletedEventHandler( OpenWriteCallback2 );\n   client-&gt;OpenWriteAsync( uri );\n   \n   // Applications can perform other tasks\n   // while waiting for the upload to complete.\n}\n\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLWebClientAsync#16\">public static void OpenResourceForPosting (string address)\n{\n    WebClient client = new WebClient ();\n    Uri uri = new Uri(address);\n\n    // Specify that the OpenWriteCallback method gets called\n    // when the writeable stream is available.\n    client.OpenWriteCompleted += new OpenWriteCompletedEventHandler (OpenWriteCallback2);\n    client.OpenWriteAsync (uri);\n    // Applications can perform other tasks\n    // while waiting for the upload to complete.\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"NCLWebClientAsync#16\">Public Shared Sub OpenResourceForPosting(ByVal address As String)\n\n\tDim client As WebClient = New WebClient()\n\t&#39;  Specify that the OpenWriteCallback method gets called\n\t&#39;  when the writeable stream is available.\n\tAddHandler client.OpenWriteCompleted, AddressOf OpenWriteCallback2\n                      Dim uri as Uri = New Uri(address)\n\tclient.OpenWriteAsync(uri)\n\t&#39;  Applications can perform other tasks\n\t&#39;  while waiting for the upload to complete.\nEnd Sub\n</code></pre><p> The following method is called when the stream is available.  </p>\n<pre><code class=\"lang-cpp\" name=\"NCLWebClientAsync#15\">void OpenWriteCallback2( Object^ /*sender*/, OpenWriteCompletedEventArgs^ e )\n{\n   Stream^ body = nullptr;\n   StreamWriter^ s = nullptr;\n   try\n   {\n      body = dynamic_cast&lt;Stream^&gt;(e-&gt;Result);\n      s = gcnew StreamWriter( body );\n      s-&gt;AutoFlush = true;\n      s-&gt;Write( &quot;This is content data to be sent to the server.&quot; );\n   }\n   finally\n   {\n      if ( s != nullptr )\n      {\n         s-&gt;Close();\n      }\n      if ( body != nullptr )\n      {\n         body-&gt;Close();\n      }\n   }\n\n}\n\n</code></pre><pre><code class=\"lang-cs\" name=\"NCLWebClientAsync#15\">private static void OpenWriteCallback2 (Object sender, OpenWriteCompletedEventArgs e)\n{\n    Stream body = null;\n    StreamWriter s = null;\n\n    try\n    {\n        body = (Stream)e.Result;\n        s = new StreamWriter (body);\n        s.AutoFlush = true;\n        s.Write (&quot;This is content data to be sent to the server.&quot;);\n    }\n    finally\n    {\n        if (s != null)\n        {\n            s.Close ();\n        }\n\n        if (body != null)\n        {\n            body.Close ();\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"NCLWebClientAsync#15\">Private Shared Sub OpenWriteCallback2(ByVal sender As Object, ByVal e As OpenWriteCompletedEventArgs)\n\n    Dim body As Stream = Nothing\n    Dim s As StreamWriter = Nothing\n\n    Try\n\n        body = CType(e.Result, Stream)\n        s = New StreamWriter(body)\n        s.AutoFlush = True\n        s.Write(&quot;This is content data to be sent to the server.&quot;)\n    Finally\n\n        If Not s Is Nothing Then\n\n            s.Close()\n        End If\n\n        If Not body Is Nothing Then\n\n            body.Close()\n        End If\n    End Try\nEnd Sub\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>When you create a OpenWriteCompletedEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Net.OpenWriteCompletedEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.OpenWriteCompletedEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Net.OpenWriteCompletedEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Net.OpenWriteCompletedEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Net.OpenWriteCompletedEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Net.OpenWriteCompletedEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"1c7d35f0-7ae0-4293-fb54-053c961b3e98\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that will handle the  event of a .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.net/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.OpenWriteCompletedEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Net.OpenWriteCompletedEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Net.OpenWriteCompletedEventHandler","System.Net.OpenWriteCompletedEventHandler..ctor","System.Net.OpenWriteCompletedEventHandler.Invoke","System.Net.OpenWriteCompletedEventHandler.BeginInvoke","System.Net.OpenWriteCompletedEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.OpenWriteCompletedEventHandler","System::Net::OpenWriteCompletedEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"1c7d35f0-7ae0-4293-fb54-053c961b3e98","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Net/OpenWriteCompletedEventHandler.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"OpenWriteCompletedEventHandler delegate | Microsoft Docs","_op_ogTitle":"OpenWriteCompletedEventHandler delegate","description":"Represents the method that will handle the  event of a .\n","toc_asset_id":"api/_splitted/System.Net/toc.json","toc_rel":"_splitted/System.Net/toc.json","source_url":"","ms.assetid":"System.Net.OpenWriteCompletedEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.net.openwritecompletedeventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.net.openwritecompletedeventhandler","fileRelativePath":"api/System.Net.OpenWriteCompletedEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}