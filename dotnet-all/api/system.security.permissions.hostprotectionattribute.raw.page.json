{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">HostProtectionAttribute</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Allows the use of declarative security actions to determine host protection requirements. This class cannot be inherited.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Constructor | System.AttributeTargets.Method | System.AttributeTargets.Delegate, AllowMultiple=true, Inherited=false)]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic sealed class HostProtectionAttribute : System.Security.Permissions.CodeAccessSecurityAttribute</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute\" data-linktype=\"relative-path\">Attribute</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissions.securityattribute\" data-linktype=\"relative-path\">SecurityAttribute</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissions.codeaccesssecurityattribute\" data-linktype=\"relative-path\">CodeAccessSecurityAttribute</a></span></div><span class=\"lang-csharp\">HostProtectionAttribute</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_Assembly_System_Type_\" data-linktype=\"relative-path\">GetCustomAttribute(Assembly, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_Assembly_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttribute(Assembly, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_MemberInfo_System_Type_\" data-linktype=\"relative-path\">GetCustomAttribute(MemberInfo, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_MemberInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttribute(MemberInfo, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_Module_System_Type_\" data-linktype=\"relative-path\">GetCustomAttribute(Module, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_Module_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttribute(Module, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_ParameterInfo_System_Type_\" data-linktype=\"relative-path\">GetCustomAttribute(ParameterInfo, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttribute_System_Reflection_ParameterInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttribute(ParameterInfo, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_\" data-linktype=\"relative-path\">GetCustomAttributes(Assembly)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Assembly, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_System_Type_\" data-linktype=\"relative-path\">GetCustomAttributes(Assembly, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Assembly_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Assembly, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_\" data-linktype=\"relative-path\">GetCustomAttributes(MemberInfo)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(MemberInfo, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_System_Type_\" data-linktype=\"relative-path\">GetCustomAttributes(MemberInfo, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_MemberInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(MemberInfo, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Module_\" data-linktype=\"relative-path\">GetCustomAttributes(Module)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Module_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Module, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Module_System_Type_\" data-linktype=\"relative-path\">GetCustomAttributes(Module, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_Module_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(Module, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_\" data-linktype=\"relative-path\">GetCustomAttributes(ParameterInfo)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(ParameterInfo, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_System_Type_\" data-linktype=\"relative-path\">GetCustomAttributes(ParameterInfo, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetCustomAttributes_System_Reflection_ParameterInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">GetCustomAttributes(ParameterInfo, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefaultAttribute\" data-linktype=\"relative-path\">IsDefaultAttribute()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_Assembly_System_Type_\" data-linktype=\"relative-path\">IsDefined(Assembly, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_Assembly_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(Assembly, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_MemberInfo_System_Type_\" data-linktype=\"relative-path\">IsDefined(MemberInfo, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_MemberInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(MemberInfo, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_Module_System_Type_\" data-linktype=\"relative-path\">IsDefined(Module, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_Module_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(Module, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_ParameterInfo_System_Type_\" data-linktype=\"relative-path\">IsDefined(ParameterInfo, Type)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_IsDefined_System_Reflection_ParameterInfo_System_Type_System_Boolean_\" data-linktype=\"relative-path\">IsDefined(ParameterInfo, Type, Boolean)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_Match_System_Object_\" data-linktype=\"relative-path\">Match(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_System_Runtime_InteropServices__Attribute_GetIDsOfNames_System_Guid__System_IntPtr_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_System_Runtime_InteropServices__Attribute_GetTypeInfo_System_UInt32_System_UInt32_System_IntPtr_\" data-linktype=\"relative-path\">_Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_System_Runtime_InteropServices__Attribute_GetTypeInfoCount_System_UInt32__\" data-linktype=\"relative-path\">_Attribute.GetTypeInfoCount(UInt32)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_System_Runtime_InteropServices__Attribute_Invoke_System_UInt32_System_Guid__System_UInt32_System_Int16_System_IntPtr_System_IntPtr_System_IntPtr_System_IntPtr_\" data-linktype=\"relative-path\">_Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.attribute#System_Attribute_TypeId\" data-linktype=\"relative-path\">TypeId</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ToString\" data-linktype=\"relative-path\">ToString()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissions.securityattribute#System_Security_Permissions_SecurityAttribute_Action\" data-linktype=\"relative-path\">Action</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissions.securityattribute#System_Security_Permissions_SecurityAttribute_Unrestricted\" data-linktype=\"relative-path\">Unrestricted</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example illustrates the use of the HostProtectionAttribute attribute with a variety of <a class=\"xref\" href=\"system.security.permissions.hostprotectionresource\" data-linktype=\"relative-path\">HostProtectionResource</a> values.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Security.Permissions.HostProtectionAttribute.1.1#1\">using System;\nusing System.IO;\nusing System.Threading;\nusing System.Security;\nusing System.Security.Policy;\nusing System.Security.Principal;\nusing System.Security.Permissions;\nusing System.Diagnostics;\nusing System.ComponentModel;\nusing System.Windows.Forms;\n\n// If this application is run on a server that implements host protection, the \n// HostProtectionAttribute attribute is applied. If the application is run on   \n// a server that is not host-protected, the attribute evaporates; it is not  \n// detected and therefore not applied. Host protection can be configured with  \n// members of the HostProtectionResource enumeration to customize the  \n// protection offered.\n// The primary intent of this sample is to show situations in which the \n// HostProtectionAttribute attribute might be meaningfully used. The  \n// environment required to demonstrate a particular behavior is\n// too complex to invoke within the scope of this sample.\n\nclass HostProtectionExample\n{\n    public static int Success = 100;\n    \n    // Use the enumeration flags to indicate that this method exposes \n    // shared state and self-affecting process management.\n    // Either of the following attribute statements can be used to set the\n    // resource flags.\n    [HostProtectionAttribute(SharedState = true, \n        SelfAffectingProcessMgmt = true)]\n    [HostProtectionAttribute(Resources = HostProtectionResource.SharedState |\n         HostProtectionResource.SelfAffectingProcessMgmt)]\n    private static void Exit(string Message, int Code)\n    {\n        // Exit the sample when an exception is thrown.\n        Console.WriteLine(&quot;\\nFAILED: &quot; + Message + &quot; &quot; + Code.ToString());\n        Environment.ExitCode = Code;\n        Environment.Exit(Code);\n    }\n\n    // Use the enumeration flags to indicate that this method exposes shared \n    // state, self-affecting process management, and self-affecting threading.\n    [HostProtectionAttribute(SharedState=true, SelfAffectingProcessMgmt=true,\n         SelfAffectingThreading=true, UI=true)]\n    // This method allows the user to quit the sample.\n    private static void ExecuteBreak()\n    {\n        Console.WriteLine(&quot;Executing Debugger.Break.&quot;);\n        Debugger.Break();\n        Debugger.Log(1,&quot;info&quot;,&quot;test message&quot;);\n    }\n    \n    // Use the enumeration flags to indicate that this method exposes shared \n    // state, self-affecting threading, and the security infrastructure.\n    [HostProtectionAttribute(SharedState=true, SelfAffectingThreading=true,\n         SecurityInfrastructure=true)]\n    // ApplyIdentity sets the current identity.\n    private static int ApplyIdentity()\n    {\n        string[] roles = {&quot;User&quot;};\n        try\n        {\n            AppDomain mAD = AppDomain.CurrentDomain;\n            GenericPrincipal mGenPr = \n                new GenericPrincipal(WindowsIdentity.GetCurrent(), roles);\n            mAD.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal);\n            mAD.SetThreadPrincipal(mGenPr);\n            return Success;\n        }\n        catch (Exception e)\n        {\n            Exit(e.ToString(), 5);\n        }\n        return 0;\n    }\n\n    // The following method is started on a separate thread.\n    public static void WatchFileEvents()\n    {\n        try\n        {\n            Console.WriteLine(&quot;In the child thread.&quot;);\n            FileSystemWatcher watcher = new FileSystemWatcher();\n            watcher.Path = &quot;C:\\\\Temp&quot;;\n            \n            // Watch for changes in LastAccess and LastWrite times, and\n            // name changes to files or directories.\n            watcher.NotifyFilter = NotifyFilters.LastAccess \n                | NotifyFilters.LastWrite\n                | NotifyFilters.FileName | NotifyFilters.DirectoryName;\n            \n            // Watch only text files.\n            watcher.Filter = &quot;*.txt&quot;;\n\n            // Add event handlers.\n            watcher.Changed += new FileSystemEventHandler(OnChanged);\n            watcher.Created += new FileSystemEventHandler(OnChanged);\n            watcher.Deleted += new FileSystemEventHandler(OnChanged);\n            \n            // Begin watching.\n            watcher.EnableRaisingEvents = true;\n\n            // Wait for the user to quit the program.\n            Console.WriteLine(&quot;Event handlers have been enabled.&quot;);\n            while(Console.Read()!=&#39;q&#39;);\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine(e.Message);\n        }\n    }\n\n    // Use the enumeration flags to indicate that this method exposes \n    // synchronization and external threading.\n    [HostProtectionAttribute(Synchronization=true, ExternalThreading=true)]\n    private static void StartThread()\n    {\n        Thread t = new Thread(new ThreadStart(WatchFileEvents));\n        \n        // Start the new thread. On a uniprocessor, the thread is not given\n        // any processor time until the main thread yields the processor.\n        t.Start();\n        \n        // Give the new thread a chance to execute.\n        Thread.Sleep(1000);\n    }\n\n    // Call methods that show the use of the HostProtectionResource enumeration.\n    [HostProtectionAttribute(Resources=HostProtectionResource.All)]\n    static int Main(string [] args)\n    {\n        try\n        {\n            // Show use of the HostProtectionResource.SharedState,\n            // HostProtectionResource.SelfAffectingThreading, and\n            // HostProtectionResource.Security enumeration values.\n            ApplyIdentity();\n            Directory.CreateDirectory(&quot;C:\\\\Temp&quot;);\n            \n            // Show use of the HostProtectionResource.Synchronization and\n            // HostProtectionResource.ExternalThreading enumeration values.\n            StartThread();\n            Console.WriteLine(&quot;In the main thread.&quot;);\n            Console.WriteLine(&quot;Deleting and creating &#39;MyTestFile.txt&#39;.&quot;);\n            if (File.Exists(&quot;C:\\\\Temp\\\\MyTestFile.txt&quot;))\n            {\n                File.Delete(&quot;C:\\\\Temp\\\\MyTestFile.txt&quot;);\n            }\n\n            StreamWriter sr = File.CreateText(&quot;C:\\\\Temp\\\\MyTestFile.txt&quot;);\n            sr.WriteLine (&quot;This is my file.&quot;);\n            sr.Close();\n            Thread.Sleep(1000);\n            \n            // Show use of the HostProtectionResource.SharedState,\n            // HostProtectionResource.SelfProcessMgmt,\n            // HostProtectionResource.SelfAffectingThreading, and\n            // HostProtectionResource.UI enumeration values.\n            ExecuteBreak();\n            \n            // Show the use of the \n            // HostProtectionResource.ExternalProcessManagement \n            // enumeration value.\n            MyControl myControl = new MyControl ();\n            Console.WriteLine (&quot;Enter &#39;q&#39; to quit the sample.&quot;);\n            return 100;\n        }\n        catch (Exception e)\n        {\n            Exit(e.ToString(), 0);\n            return 0;\n        }\n    }\n\n    // Define the event handlers.\n    private static void OnChanged(object source, FileSystemEventArgs e)\n    {\n        // Specify whether a file is changed, created, or deleted.\n        Console.WriteLine(&quot;In the OnChanged event handler.&quot;);\n        Console.WriteLine(&quot;File: &quot; + e.FullPath + &quot; &quot; + e.ChangeType);\n    }\n}\n\n// The following class is an example of code that exposes \n// external process management.\n// Add the LicenseProviderAttribute to the control.\n[LicenseProvider (typeof(LicFileLicenseProvider))]\npublic class MyControl : System.Windows.Forms.Control\n{\n    // Create a new, null license.\n    private License license = null;\n\n    [HostProtection (ExternalProcessMgmt = true)]\n    public MyControl ()\n    {\n        // Determine if a valid license can be granted.\n        bool isValid = LicenseManager.IsValid (typeof(MyControl));\n        Console.WriteLine (&quot;The result of the IsValid method call is &quot; + \n            isValid.ToString ());\n    }\n\n    protected override void Dispose (bool disposing)\n    {\n        if (disposing)\n        {\n            if (license != null)\n            {\n                license.Dispose ();\n                license = null;\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Security.Permissions.HostProtectionAttribute.1.1#1\">#using &lt;System.dll&gt;\n#using &lt;System.Windows.Forms.dll&gt;\n#using &lt;System.Drawing.dll&gt;\n\nusing namespace System;\nusing namespace System::IO;\nusing namespace System::Threading;\nusing namespace System::Security;\nusing namespace System::Security::Policy;\nusing namespace System::Security::Principal;\nusing namespace System::Security::Permissions;\nusing namespace System::Diagnostics;\nusing namespace System::ComponentModel;\nusing namespace System::Windows::Forms;\nusing namespace System::Security::Permissions;\n\n// The following class is an example of code that exposes external process management.\n// Add the LicenseProviderAttribute to the control.\n\n[LicenseProvider(LicFileLicenseProvider::typeid)]\npublic ref class MyControl: public System::Windows::Forms::Control\n{\nprivate:\n\n   // Create a new, null license.\n   License^ license;\n\npublic:\n   [HostProtection(ExternalProcessMgmt=true)]\n   MyControl()\n   {\n      license = nullptr;\n      \n      // Determine if a valid license can be granted.\n      bool isValid = LicenseManager::IsValid( MyControl::typeid );\n      Console::WriteLine( &quot;The result of the IsValid method call is {0}&quot;, isValid );\n   }\n\n};\n\n// If this application is run on a server that implements host protection, the HostProtection attribute  \n// is applied. If the application is run on a server that is not host-protected, the attribute \n// evaporates; it is not detected and therefore not applied. HostProtection can be configured with \n// members of the HostProtectionResource enumeration to customize the protection offered. \n// The primary intent of this sample is to show situations in which the HostProtection attribute\n// might be meaningfully used.  The environment required to demonstrate a particular HostProtection is\n// too complex to invoke within the scope of this sample.\npublic ref class HostProtectionExample\n{\npublic:\n   static int Success = 100;\n\nprivate:\n\n   // Use the enumeration flags to indicate that this method exposes shared state and \n   // self-affecting process management.\n   // Either of the following attribute statements can be used to set the \n   // resource flags.\n   // Exit the sample when an exception is thrown.\n\n   [HostProtection(SharedState=true,SelfAffectingProcessMgmt=true)]\n   [HostProtection(Resources=HostProtectionResource::SharedState|\n   HostProtectionResource::SelfAffectingProcessMgmt)]\n   static void Exit( String^ Message, int Code )\n   {\n      Console::WriteLine( &quot;\\nFAILED: {0} {1}&quot;, Message, Code );\n      Environment::ExitCode = Code;\n      Environment::Exit( Code );\n   }\n\n   // Use the enumeration flags to indicate that this method exposes shared state, \n   // self-affecting process management, and self-affecting threading.\n   // This method allows the user to quit the sample.\n\n   [HostProtection(SharedState=true,SelfAffectingProcessMgmt=true,\n   SelfAffectingThreading=true,UI=true)]\n   static void ExecuteBreak()\n   {\n      Console::WriteLine( &quot;Executing Debugger.Break.&quot; );\n      Debugger::Break();\n      Debugger::Log( 1, &quot;info&quot;, &quot;test message&quot; );\n   }\n\n   // Use the enumeration flags to indicate that this method exposes shared state, \n   // self-affecting threading and the security infrastructure.\n   // ApplyIdentity sets the current identity.\n\n   [HostProtection(SharedState=true,SelfAffectingThreading=true,\n   SecurityInfrastructure=true)]\n   static int ApplyIdentity()\n   {\n      array&lt;String^&gt;^roles = {&quot;User&quot;};\n      try\n      {\n         AppDomain^ mAD = AppDomain::CurrentDomain;\n         GenericPrincipal^ mGenPr = gcnew GenericPrincipal( WindowsIdentity::GetCurrent(),roles );\n         mAD-&gt;SetPrincipalPolicy( PrincipalPolicy::WindowsPrincipal );\n         mAD-&gt;SetThreadPrincipal( mGenPr );\n         return Success;\n      }\n      catch ( Exception^ e ) \n      {\n         Exit( e-&gt;ToString(), 5 );\n      }\n\n      return 0;\n   }\n\npublic:\n\n   // The following method is started on a separate thread.\n   [PermissionSet(SecurityAction::Demand, Name=&quot;FullTrust&quot;)]\n   static void WatchFileEvents()\n   {\n      try\n      {\n         Console::WriteLine( &quot;In the child thread.&quot; );\n         FileSystemWatcher^ watcher = gcnew FileSystemWatcher;\n         watcher-&gt;Path = &quot;C:\\\\Temp&quot;;\n         \n         // Watch for changes in LastAccess and LastWrite times, and \n         // name changes to files or directories. \n         watcher-&gt;NotifyFilter = static_cast&lt;NotifyFilters&gt;(NotifyFilters::LastAccess | NotifyFilters::LastWrite | NotifyFilters::FileName | NotifyFilters::DirectoryName);\n         \n         // Watch only text files.\n         watcher-&gt;Filter = &quot;*.txt&quot;;\n         \n         // Add event handlers.\n         watcher-&gt;Changed += gcnew FileSystemEventHandler( OnChanged );\n         watcher-&gt;Created += gcnew FileSystemEventHandler( OnChanged );\n         watcher-&gt;Deleted += gcnew FileSystemEventHandler( OnChanged );\n         \n         // Begin watching.\n         watcher-&gt;EnableRaisingEvents = true;\n         \n         // Wait for the user to quit the program.\n         Console::WriteLine( &quot;Event handlers have been enabled.&quot; );\n         while ( Console::Read() != &#39;q&#39; )\n                  ;\n      }\n      catch ( Exception^ e ) \n      {\n         Console::WriteLine( e-&gt;Message );\n      }\n\n   }\n\n\nprivate:\n\n   // Use the enumeration flags to indicate that this method exposes synchronization \n   //  and external threading.\n\n   [HostProtection(Synchronization=true,ExternalThreading=true)]\n   static void StartThread()\n   {\n      Thread^ t = gcnew Thread( gcnew ThreadStart( WatchFileEvents ) );\n      \n      // Start the new thread.  On a uniprocessor, the thread is not given \n      // any processor time until the main thread yields the processor.  \n      t-&gt;Start();\n      \n      // Give the new thread a chance to execute.\n      Thread::Sleep( 1000 );\n   }\n\npublic:\n\n   // Call methods that show the use of the HostProtectionResource enumeration.\n   [HostProtection(Resources=HostProtectionResource::All)]\n   static int Main()\n   {\n      try\n      {\n         \n         // Show use of the HostProtectionResource.SharedState,\n         //   HostProtectionResource.SelfAffectingThreading, and\n         //   HostProtectionResource.Security enumeration values.\n         ApplyIdentity();\n         Directory::CreateDirectory( &quot;C:\\\\Temp&quot; );\n         \n         // Show use of the HostProtectionResource.Synchronization and\n         //   HostProtectionResource.ExternalThreading enumeration values.\n         StartThread();\n         Console::WriteLine( &quot;In the main thread.&quot; );\n         Console::WriteLine( &quot;Deleting and creating &#39;MyTestFile.txt&#39;.&quot; );\n         if ( File::Exists( &quot;C:\\\\Temp\\\\MyTestFile.txt&quot; ) )\n         {\n            File::Delete( &quot;C:\\\\Temp\\\\MyTestFile.txt&quot; );\n         }\n         StreamWriter^ sr = File::CreateText( &quot;C:\\\\Temp\\\\MyTestFile.txt&quot; );\n         sr-&gt;WriteLine( &quot;This is my file.&quot; );\n         sr-&gt;Close();\n         Thread::Sleep( 1000 );\n         \n         // Show use of the HostProtectionResource.SharedState,\n         //   HostProtectionResource.SelfProcessMgmt,\n         //   HostProtectionResource.SelfAffectingThreading, and\n         //   HostProtectionResource.UI enumeration values.\n         ExecuteBreak();\n         \n         // Show the use of the HostProtectionResource.ExternalProcessManagement enumeration value.\n         MyControl^ myControl = gcnew MyControl;\n         Console::WriteLine( &quot;Enter &#39;q&#39; to quit the sample.&quot; );\n         return 100;\n      }\n      catch ( Exception^ e ) \n      {\n         Exit( e-&gt;ToString(), 0 );\n         return 0;\n      }\n   }\n\n   // Define the event handlers.\n   private:\n   static void OnChanged( Object^ /*source*/, FileSystemEventArgs^ e )\n   {\n      \n      // Specify whether a file is changed, created, or deleted.\n      Console::WriteLine( &quot;In the OnChanged event handler.&quot; );\n      Console::WriteLine( &quot;File: {0} {1}&quot;, e-&gt;FullPath, e-&gt;ChangeType );\n   }\n\n};\n\nint main()\n{\n   return HostProtectionExample::Main();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Security.Permissions.HostProtectionAttribute.1.1#1\">Imports System\nImports System.IO\nImports System.Threading\nImports System.Security\nImports System.Security.Policy\nImports System.Security.Principal\nImports System.Security.Permissions\nImports System.Diagnostics\nImports System.ComponentModel\nImports System.Windows.Forms\n\n\n&#39; If this application is run on a server that implements host protection, the\n&#39; HostProtectionAttribute attribute is applied. If the application is run on \n&#39; a server that is not host-protected, the attribute evaporates; it is not  \n&#39; detected and therefore not applied. Host protection can be configured with  \n&#39; members of the HostProtectionResource enumeration to customize the  \n&#39; protection offered. \n&#39; The primary intent of this sample is to show situations in which the \n&#39; HostProtectionAttribute attribute might be meaningfully used.  The \n&#39; environment required to demonstrate a particular behavior is too \n&#39; complex to invoke within the scope of this sample.\n\nClass HostProtectionExample\n    Public Shared Success As Integer = 100\n\n    &#39; Use the enumeration flags to indicate that this method exposes \n    &#39; shared state and self-affecting process management.\n    &#39; Either of the following attribute statements can be used to set the \n    &#39; resource flags.\n    &lt;HostProtectionAttribute(SharedState := True, _\n        SelfAffectingProcessMgmt := True), _\n        HostProtectionAttribute( _\n        Resources := HostProtectionResource.SharedState Or _\n        HostProtectionResource.SelfAffectingProcessMgmt)&gt; _\n    Private Shared Sub [Exit](ByVal Message As String, ByVal Code As Integer)\n\n        &#39; Exit the sample when an exception is thrown.\n        Console.WriteLine((ControlChars.Lf &amp; &quot;FAILED: &quot; &amp; Message &amp; &quot; &quot; &amp; _\n            Code.ToString()))\n        Environment.ExitCode = Code\n        Environment.Exit(Code)\n    End Sub &#39;Exit\n\n    &#39; Use the enumeration flags to indicate that this method exposes shared\n    &#39; state, self-affecting process management, and self-affecting threading.\n    &lt;HostProtectionAttribute(SharedState := True, _\n        SelfAffectingProcessMgmt := True, _\n        SelfAffectingThreading := True, UI := True)&gt; _\n    Private Shared Sub ExecuteBreak()\n\n        &#39; This method allows the user to quit the sample.\n        Console.WriteLine(&quot;Executing Debugger.Break.&quot;)\n        Debugger.Break()\n        Debugger.Log(1, &quot;info&quot;, &quot;test message&quot;)\n    End Sub &#39;ExecuteBreak\n\n    &#39; Use the enumeration flags to indicate that this method exposes shared  \n    &#39; state, self-affecting threading, and the security infrastructure.\n    &lt;HostProtectionAttribute(SharedState := True, _\n        SelfAffectingThreading := True, _\n        SecurityInfrastructure := True)&gt; _\n    Private Shared Function ApplyIdentity() As Integer\n\n        &#39; ApplyIdentity sets the current identity.\n        Dim roles(1) As String\n        Try\n            Dim mAD As AppDomain = AppDomain.CurrentDomain\n            Dim mGenPr As _\n                New GenericPrincipal(WindowsIdentity.GetCurrent(), roles)\n            mAD.SetPrincipalPolicy(PrincipalPolicy.WindowsPrincipal)\n            mAD.SetThreadPrincipal(mGenPr)\n            Return Success\n        Catch e As Exception\n            [Exit](e.ToString(), 5)\n        End Try\n        Return 0\n    End Function &#39;ApplyIdentity\n\n    &#39; The following method is started on a separate thread.\n    Public Shared Sub WatchFileEvents()\n        Try\n            Console.WriteLine(&quot;In the child thread.&quot;)\n            Dim watcher As New FileSystemWatcher()\n            watcher.Path = &quot;C:\\Temp&quot;\n\n            &#39; Watch for changes in LastAccess and LastWrite times, and \n            &#39; name changes to files or directories. \n            watcher.NotifyFilter = NotifyFilters.LastAccess Or _\n                NotifyFilters.LastWrite Or NotifyFilters.FileName Or _\n                NotifyFilters.DirectoryName\n\n            &#39; Watch only text files.\n            watcher.Filter = &quot;*.txt&quot;\n\n            &#39; Add event handlers.\n            AddHandler watcher.Changed, AddressOf OnChanged\n            AddHandler watcher.Created, AddressOf OnChanged\n            AddHandler watcher.Deleted, AddressOf OnChanged\n\n            &#39; Begin watching.\n            watcher.EnableRaisingEvents = True\n\n            &#39; Wait for the user to quit the program.\n            Console.WriteLine(&quot;Event handlers have been enabled.&quot;)\n            While Console.ReadLine() &lt;&gt; &quot;q&quot;c\n            End While\n        Catch e As Exception\n            Console.WriteLine(e.Message)\n        End Try\n    End Sub &#39;WatchFileEvents\n\n    &#39; Use the enumeration flags to indicate that this method exposes  \n    &#39; synchronization and external threading.\n    &lt;HostProtectionAttribute(Synchronization := True, _\n        ExternalThreading := True)&gt; _\n    Private Shared Sub StartThread()\n        Dim t As New Thread(New ThreadStart(AddressOf WatchFileEvents))\n\n        &#39; Start the new thread. On a uniprocessor, the thread is not given \n        &#39; any processor time until the main thread yields the processor.  \n        t.Start()\n\n        &#39; Give the new thread a chance to execute.\n        Thread.Sleep(1000)\n    End Sub &#39;StartThread\n\n    &#39; Call methods that show the use of the HostProtectionResource enumeration.\n    &lt;HostProtectionAttribute(Resources := HostProtectionResource.All)&gt; _\n    Overloads Shared Function Main(ByVal args() As String) As Integer\n        Try\n            &#39; Show use of the HostProtectionResource.SharedState,\n            &#39; HostProtectionResource.SelfAffectingThreading, and\n            &#39; HostProtectionResource.Security enumeration values.\n            ApplyIdentity()\n            Directory.CreateDirectory(&quot;C:\\Temp&quot;)\n\n            &#39; Show use of the HostProtectionResource.Synchronization and\n            &#39; HostProtectionResource.ExternalThreading enumeration values.\n            StartThread()\n            Console.WriteLine(&quot;In the main thread.&quot;)\n            Console.WriteLine(&quot;Deleting and creating &#39;MyTestFile.txt&#39;.&quot;)\n            If File.Exists(&quot;C:\\Temp\\MyTestFile.txt&quot;) Then\n                File.Delete(&quot;C:\\Temp\\MyTestFile.txt&quot;)\n            End If\n\n            Dim sr As StreamWriter = File.CreateText(&quot;C:\\Temp\\MyTestFile.txt&quot;)\n            sr.WriteLine(&quot;This is my file.&quot;)\n            sr.Close()\n            Thread.Sleep(1000)\n\n            &#39; Show use of the HostProtectionResource.SharedState, \n            &#39; HostProtectionResource.SelfProcessMgmt,\n            &#39; HostProtectionResource.SelfAffectingThreading, and\n            &#39; HostProtectionResource.UI enumeration values.\n            ExecuteBreak()\n\n            &#39; Show the use of the \n            &#39; HostProtectionResource.ExternalProcessManagement \n            &#39; enumeration value.\n            Dim myControl As New MyControl()\n            Console.WriteLine(&quot;Enter &#39;q&#39; to quit the sample.&quot;)\n            Return 100\n        Catch e As Exception\n            [Exit](e.ToString(), 0)\n            Return 0\n        End Try\n    End Function &#39;Main\n\n    &#39; Define the event handlers.\n    Private Shared Sub OnChanged(ByVal [source] As Object, _\n        ByVal e As FileSystemEventArgs)\n\n        &#39; Specify whether a file is changed, created, or deleted.\n        Console.WriteLine(&quot;In the OnChanged event handler.&quot;)\n        Console.WriteLine((&quot;File: &quot; &amp; e.FullPath &amp; &quot; &quot; &amp; _\n            e.ChangeType.ToString()))\n    End Sub &#39;OnChanged\nEnd Class &#39;HostProtectionExample \n\n&#39; The following class is an example of code that exposes \n&#39; external process management.\n&#39; Add the LicenseProviderAttribute to the control.\n&lt;LicenseProvider(GetType(LicFileLicenseProvider))&gt; _\nPublic Class MyControl\n    Inherits System.Windows.Forms.Control\n\n    &#39; Create a new, null license.\n    Private license As License = Nothing\n\n    &lt;HostProtectionAttribute(ExternalProcessMgmt := True)&gt; _\n    Public Sub New()\n\n        &#39; Determine if a valid license can be granted.\n        Dim isValid As Boolean = LicenseManager.IsValid(GetType(MyControl))\n        Console.WriteLine((&quot;The result of the IsValid method call is &quot; &amp; _\n            isValid.ToString()))\n    End Sub &#39;New\n\n    Protected Overrides Sub Dispose(ByVal disposing As Boolean)\n        If disposing Then\n            If Not (license Is Nothing) Then\n                license.Dispose()\n                license = Nothing\n            End If\n        End If\n    End Sub &#39;Dispose\nEnd Class &#39;MyControl\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>This attribute affects only unmanaged applications that host the common language runtime and implement host protection, such as SQL Server. If the code is run in a client application or on a server that is not host-protected, the attribute &quot;evaporates&quot;; it is not detected and therefore not applied. When applied, the security action results in the creation of a link demand based on the host resources the class or method exposes.  </p>\n<div class=\"IMPORTANT\"><h5>Important</h5><p> The purpose of this attribute is to enforce host-specific programming model guidelines, not security behavior.  Although a link demand is used to check for conformance to programming model requirements, the HostProtectionAttribute is not a security permission.  </p>\n</div>\n<p> If the host does not have programming model requirements, the link demands do not occur.  </p>\n<p> This attribute identifies the following:  </p>\n<ul>\n<li><p>Methods or classes that do not fit the host programming model, but are otherwise benign.  </p>\n</li>\n<li><p>Methods or classes that do not fit the host programming model and could lead to destabilizing server-managed user code.  </p>\n</li>\n<li><p>Methods or classes that do not fit the host programming model and could lead to a destabilization of the server process itself.  </p>\n</li>\n</ul>\n<div class=\"NOTE\"><h5>Note</h5><p> If you are creating a class library that is to be called by applications that may execute in a host protected environment, you should apply this attribute to members that expose <a class=\"xref\" href=\"system.security.permissions.hostprotectionresource\" data-linktype=\"relative-path\">HostProtectionResource</a> resource categories. The .NET Framework class library members with this attribute cause only the immediate caller to be checked.  Your library member must also cause a check of its immediate caller in the same manner.  </p>\n</div>\n<div class=\"NOTE\"><h5>Note</h5><p> Do not use the <a href=\"../topic/ngen.exe%20(native%20image%20generator)\" data-linktype=\"relative-path\">Ngen.exe (Native Image Generator)</a> to create a native image of assemblies that are protected by the HostProtectionAttribute. In a full-trust environment, the image is always loaded, without regard to the HostProtectionAttribute, and in a partial-trust environment the image is not loaded.</p>\n</div>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Permissions_HostProtectionAttribute__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">HostProtectionAttribute()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.permissions.hostprotectionattribute\" data-linktype=\"relative-path\">HostProtectionAttribute</a> class with default values.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public HostProtectionAttribute ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor creates a <a class=\"xref\" href=\"system.security.permissions.hostprotectionattribute\" data-linktype=\"relative-path\">HostProtectionAttribute</a> with all Boolean properties set to <code>false</code>.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Permissions_HostProtectionAttribute__ctor_System_Security_Permissions_SecurityAction_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">HostProtectionAttribute(SecurityAction)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.security.permissions.hostprotectionattribute\" data-linktype=\"relative-path\">HostProtectionAttribute</a> class with the specified <a class=\"xref\" href=\"system.security.permissions.securityaction\" data-linktype=\"relative-path\">SecurityAction</a> value.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public HostProtectionAttribute (System.Security.Permissions.SecurityAction action);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>action</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissions.securityaction\" data-linktype=\"relative-path\">SecurityAction</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>One of the <a class=\"xref\" href=\"system.security.permissions.securityaction\" data-linktype=\"relative-path\">SecurityAction</a> values.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Exceptions</div>\r\n  \t\t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.argumentexception\" data-linktype=\"relative-path\">ArgumentException</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t<p><code>action</code> is not <a class=\"xref\" href=\"system.security.permissions.securityaction\" data-linktype=\"relative-path\">SecurityAction</a>.</p>\n\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This constructor should not be used. It is intended for infrastructure use.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Properties\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Permissions_HostProtectionAttribute_ExternalProcessMgmt\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ExternalProcessMgmt</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value indicating whether external process management is exposed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool ExternalProcessMgmt { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if external process management is exposed; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Code that exposes external process management might create or destroy other processes.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Permissions_HostProtectionAttribute_ExternalThreading\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ExternalThreading</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value indicating whether external threading is exposed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool ExternalThreading { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if external threading is exposed; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Code that exposes external threading creates or manipulates threads other than its own, which might be harmful to the host.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Permissions_HostProtectionAttribute_MayLeakOnAbort\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">MayLeakOnAbort</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value indicating whether resources might leak memory if the operation is terminated.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool MayLeakOnAbort { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if resources might leak memory on termination; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Code might cause a resource leak on termination, if not protected by a safe handle or some other means of ensuring the release of resources.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Permissions_HostProtectionAttribute_Resources\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Resources</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets flags specifying categories of functionality that are potentially harmful to the host.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Security.Permissions.HostProtectionResource Resources { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.permissions.hostprotectionresource\" data-linktype=\"relative-path\">HostProtectionResource</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>A bitwise combination of the <a class=\"xref\" href=\"system.security.permissions.hostprotectionresource\" data-linktype=\"relative-path\">HostProtectionResource</a> values. The default is <a class=\"xref\" href=\"system.security.permissions.hostprotectionresource\" data-linktype=\"relative-path\">HostProtectionResource</a>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The <a class=\"xref\" href=\"system.security.permissions.hostprotectionresource\" data-linktype=\"relative-path\">HostProtectionResource</a> flags specify the resources exposed by the method or class that are potentially harmful to the host.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Permissions_HostProtectionAttribute_SecurityInfrastructure\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SecurityInfrastructure</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value indicating whether the security infrastructure is exposed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool SecurityInfrastructure { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the security infrastructure is exposed; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The use of a <a class=\"xref\" href=\"system.security.principal.windowsidentity\" data-linktype=\"relative-path\">WindowsIdentity</a> object to impersonate a user is an example of exposing the security infrastructure.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Permissions_HostProtectionAttribute_SelfAffectingProcessMgmt\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SelfAffectingProcessMgmt</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value indicating whether self-affecting process management is exposed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool SelfAffectingProcessMgmt { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if self-affecting process management is exposed; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Self-affecting process management code might exit the current process, terminating the server.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Permissions_HostProtectionAttribute_SelfAffectingThreading\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SelfAffectingThreading</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value indicating whether self-affecting threading is exposed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool SelfAffectingThreading { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if self-affecting threading is exposed; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Self-affecting threading manipulates threads in a way that only affects user code.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Permissions_HostProtectionAttribute_SharedState\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">SharedState</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value indicating whether shared state is exposed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool SharedState { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if shared state is exposed; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>When SharedState is <code>true</code>, it indicates that a state is exposed that might be shared between threads.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Permissions_HostProtectionAttribute_Synchronization\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">Synchronization</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value indicating whether synchronization is exposed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool Synchronization { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if synchronization is exposed; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Permissions_HostProtectionAttribute_UI\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">UI</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets or sets a value indicating whether the user interface is exposed.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public bool UI { get; set; }</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Value</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> if the user interface is exposed; otherwise, <code>false</code>. The default is <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Security_Permissions_HostProtectionAttribute_CreatePermission\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">CreatePermission()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Creates and returns a new host protection permission.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override System.Security.IPermission CreatePermission ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>An <a class=\"xref\" href=\"system.security.ipermission\" data-linktype=\"relative-path\">IPermission</a> that corresponds to the current attribute.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>This method should be called only by the security system, never by application code.  </p>\n<p> At compile time, attributes convert security declarations to a serialized form in metadata. Declarative security data in metadata is created from the permission corresponding to the attribute that this method returns.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Permissions.HostProtectionAttribute.yml\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.HostProtectionAttribute\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.HostProtectionAttribute..ctor\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.HostProtectionAttribute.CreatePermission\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.HostProtectionAttribute.ExternalProcessMgmt\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.HostProtectionAttribute.ExternalThreading\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.HostProtectionAttribute.MayLeakOnAbort\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.HostProtectionAttribute.Resources\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.HostProtectionAttribute.SecurityInfrastructure\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.HostProtectionAttribute.SelfAffectingProcessMgmt\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.HostProtectionAttribute.SelfAffectingThreading\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.HostProtectionAttribute.SharedState\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.HostProtectionAttribute.Synchronization\">\r\n<meta name=\"APIName\" content=\"System.Security.Permissions.HostProtectionAttribute.UI\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"a5e50dda-5e23-42f3-b878-592813305c2b\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Allows the use of declarative security actions to determine host protection requirements. This class cannot be inherited.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.security.permissions/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Security.Permissions.HostProtectionAttribute\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Security.Permissions.HostProtectionAttribute.yml","open_to_public_contributors":false,"api_name":["System.Security.Permissions.HostProtectionAttribute","System.Security.Permissions.HostProtectionAttribute..ctor","System.Security.Permissions.HostProtectionAttribute.CreatePermission","System.Security.Permissions.HostProtectionAttribute.ExternalProcessMgmt","System.Security.Permissions.HostProtectionAttribute.ExternalThreading","System.Security.Permissions.HostProtectionAttribute.MayLeakOnAbort","System.Security.Permissions.HostProtectionAttribute.Resources","System.Security.Permissions.HostProtectionAttribute.SecurityInfrastructure","System.Security.Permissions.HostProtectionAttribute.SelfAffectingProcessMgmt","System.Security.Permissions.HostProtectionAttribute.SelfAffectingThreading","System.Security.Permissions.HostProtectionAttribute.SharedState","System.Security.Permissions.HostProtectionAttribute.Synchronization","System.Security.Permissions.HostProtectionAttribute.UI"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Security.Permissions.HostProtectionAttribute","System::Security::Permissions::HostProtectionAttribute","System.Security.Permissions.HostProtectionAttribute.#ctor","System::Security::Permissions::HostProtectionAttribute::#ctor","System.Security.Permissions.HostProtectionAttribute.CreatePermission","System::Security::Permissions::HostProtectionAttribute::CreatePermission","System.Security.Permissions.HostProtectionAttribute.ExternalProcessMgmt","System::Security::Permissions::HostProtectionAttribute::ExternalProcessMgmt","System.Security.Permissions.HostProtectionAttribute.ExternalThreading","System::Security::Permissions::HostProtectionAttribute::ExternalThreading","System.Security.Permissions.HostProtectionAttribute.MayLeakOnAbort","System::Security::Permissions::HostProtectionAttribute::MayLeakOnAbort","System.Security.Permissions.HostProtectionAttribute.Resources","System::Security::Permissions::HostProtectionAttribute::Resources","System.Security.Permissions.HostProtectionAttribute.SecurityInfrastructure","System::Security::Permissions::HostProtectionAttribute::SecurityInfrastructure","System.Security.Permissions.HostProtectionAttribute.SelfAffectingProcessMgmt","System::Security::Permissions::HostProtectionAttribute::SelfAffectingProcessMgmt","System.Security.Permissions.HostProtectionAttribute.SelfAffectingThreading","System::Security::Permissions::HostProtectionAttribute::SelfAffectingThreading","System.Security.Permissions.HostProtectionAttribute.SharedState","System::Security::Permissions::HostProtectionAttribute::SharedState","System.Security.Permissions.HostProtectionAttribute.Synchronization","System::Security::Permissions::HostProtectionAttribute::Synchronization","System.Security.Permissions.HostProtectionAttribute.UI","System::Security::Permissions::HostProtectionAttribute::UI"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"a5e50dda-5e23-42f3-b878-592813305c2b","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Security.Permissions/HostProtectionAttribute.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"HostProtectionAttribute class | Microsoft Docs","_op_ogTitle":"HostProtectionAttribute class","description":"Allows the use of declarative security actions to determine host protection requirements. This class cannot be inherited.\n","toc_asset_id":"api/_splitted/System.Security.Permissions/toc.json","toc_rel":"_splitted/System.Security.Permissions/toc.json","source_url":"","ms.assetid":"System.Security.Permissions.HostProtectionAttribute","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.security.permissions.hostprotectionattribute","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.security.permissions.hostprotectionattribute","fileRelativePath":"api/System.Security.Permissions.HostProtectionAttribute.html"},"themesRelativePathToOutputRoot":"_themes/"}