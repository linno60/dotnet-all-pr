{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">EventAttributes</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies the attributes of an event.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Flags]\n[System.Runtime.InteropServices.ComVisible(true)]\npublic enum EventAttributes</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">System.Enum</a></span></div><span class=\"lang-csharp\">EventAttributes</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example uses reflection emit to create a type with two events. It uses None to specify that the events have no attributes.  </p>\n<pre><code class=\"lang-cpp\" name=\"TypeBuilder_GetEvents1#1\">using namespace System;\nusing namespace System::Threading;\nusing namespace System::Reflection;\nusing namespace System::Reflection::Emit;\n\nref class MyApplication\n{\nprivate:\n   delegate void MyEvent( Object^ temp );\n\npublic:\n\n   // Create the callee transient dynamic assembly.\n   static TypeBuilder^ CreateCallee( AppDomain^ myDomain )\n   {\n      AssemblyName^ assemblyName = gcnew AssemblyName;\n      assemblyName-&gt;Name = &quot;EmittedAssembly&quot;;\n      \n      // Create the callee dynamic assembly.\n      AssemblyBuilder^ myAssembly = myDomain-&gt;DefineDynamicAssembly( assemblyName, AssemblyBuilderAccess::Run );\n      \n      // Create a dynamic module\n      ModuleBuilder^ myModule = myAssembly-&gt;DefineDynamicModule( &quot;EmittedModule&quot; );\n      \n      // Define a public class named &quot;HelloWorld&quot; in the assembly.\n      TypeBuilder^ helloWorldClass = myModule-&gt;DefineType( &quot;HelloWorld&quot;, TypeAttributes::Public );\n      array&lt;Type^&gt;^typeArray = gcnew array&lt;Type^&gt;(1);\n      typeArray[ 0 ] = Object::typeid;\n      MethodBuilder^ myMethod1 = helloWorldClass-&gt;DefineMethod( &quot;OnClick&quot;, MethodAttributes::Public, void::typeid, typeArray );\n      ILGenerator^ methodIL1 = myMethod1-&gt;GetILGenerator();\n      methodIL1-&gt;Emit( OpCodes::Ret );\n      MethodBuilder^ myMethod2 = helloWorldClass-&gt;DefineMethod( &quot;OnMouseUp&quot;, MethodAttributes::Public, void::typeid, typeArray );\n      ILGenerator^ methodIL2 = myMethod2-&gt;GetILGenerator();\n      methodIL2-&gt;Emit( OpCodes::Ret );\n      \n      // Create the events.\n      EventBuilder^ myEvent1 = helloWorldClass-&gt;DefineEvent( &quot;Click&quot;, EventAttributes::None, MyEvent::typeid );\n      myEvent1-&gt;SetRaiseMethod( myMethod1 );\n      EventBuilder^ myEvent2 = helloWorldClass-&gt;DefineEvent( &quot;MouseUp&quot;, EventAttributes::None, MyEvent::typeid );\n      myEvent2-&gt;SetRaiseMethod( myMethod2 );\n      helloWorldClass-&gt;CreateType();\n      return (helloWorldClass);\n   }\n};\n\nint main()\n{\n   TypeBuilder^ helloWorldClass = MyApplication::CreateCallee( Thread::GetDomain() );\n   array&lt;EventInfo^&gt;^info = helloWorldClass-&gt;GetEvents( static_cast&lt;BindingFlags&gt;(BindingFlags::Public | BindingFlags::Instance) );\n   Console::WriteLine( &quot;&#39;HelloWorld&#39; type has following events :&quot; );\n   for ( int i = 0; i &lt; info-&gt;Length; i++ )\n      Console::WriteLine( info[ i ]-&gt;Name );\n   return 0;\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"TypeBuilder_GetEvents1#1\">Imports System\nImports System.Threading\nImports System.Reflection\nImports System.Reflection.Emit\n\nPublic Class MyApplication\n\n   Delegate Sub MyEvent(temp As Object)\n\n   Public Shared Sub Main()\n      Dim helloWorldClass As TypeBuilder = CreateCallee(Thread.GetDomain())\n\n      Dim info As EventInfo() = helloWorldClass.GetEvents(BindingFlags.Public Or _\n                                                          BindingFlags.Instance)\n      Console.WriteLine(&quot;&#39;HelloWorld&#39; type has following events :&quot;)\n      Dim i As Integer\n      For i = 0 To info.Length - 1\n         Console.WriteLine(info(i).Name)\n      Next i\n   End Sub &#39;Main\n\n   &#39; Create the callee transient dynamic assembly.\n   Private Shared Function CreateCallee(myDomain As AppDomain) As TypeBuilder\n      Dim myAssemblyName As New AssemblyName()\n      myAssemblyName.Name = &quot;EmittedAssembly&quot;\n\n      &#39; Create the callee dynamic assembly.\n      Dim myAssembly As AssemblyBuilder = myDomain.DefineDynamicAssembly _\n                                          (myAssemblyName, AssemblyBuilderAccess.Run)\n      &#39; Create a dynamic module named &quot;CalleeModule&quot; in the callee\n      Dim myModule As ModuleBuilder = myAssembly.DefineDynamicModule(&quot;EmittedModule&quot;)\n\n      &#39; Define a public class named &quot;HelloWorld&quot; in the assembly.\n      Dim helloWorldClass As TypeBuilder = myModule.DefineType _\n                                           (&quot;HelloWorld&quot;, TypeAttributes.Public)\n\n      Dim myMethod1 As MethodBuilder = helloWorldClass.DefineMethod _\n                    (&quot;OnClick&quot;, MethodAttributes.Public, Nothing, New Type() {GetType(Object)})\n      Dim methodIL1 As ILGenerator = myMethod1.GetILGenerator()\n      methodIL1.Emit(OpCodes.Ret)\n      Dim myMethod2 As MethodBuilder = helloWorldClass.DefineMethod _\n                   (&quot;OnMouseUp&quot;, MethodAttributes.Public, Nothing, New Type() {GetType(Object)})\n      Dim methodIL2 As ILGenerator = myMethod2.GetILGenerator()\n      methodIL2.Emit(OpCodes.Ret)\n\n      &#39; Create the events.\n      Dim myEvent1 As EventBuilder = helloWorldClass.DefineEvent _\n                                         (&quot;Click&quot;, EventAttributes.None, GetType(MyEvent))\n      myEvent1.SetRaiseMethod(myMethod1)\n      Dim myEvent2 As EventBuilder = helloWorldClass.DefineEvent _\n                                         (&quot;MouseUp&quot;, EventAttributes.None, GetType(MyEvent))\n      myEvent2.SetRaiseMethod(myMethod2)\n\n      helloWorldClass.CreateType()\n      Return helloWorldClass\n   End Function &#39;CreateCallee\nEnd Class &#39;MyApplication\n</code></pre><pre><code class=\"lang-cs\" name=\"TypeBuilder_GetEvents1#1\">using System;\nusing System.Threading;\nusing System.Reflection;\nusing System.Reflection.Emit;\n\n\npublic class MyApplication\n{\n   public delegate void MyEvent(Object temp);\n   public static void Main()\n   {\n      TypeBuilder helloWorldClass = CreateCallee(Thread.GetDomain());\n\n      EventInfo[] info =\n         helloWorldClass.GetEvents(BindingFlags.Public | BindingFlags.Instance);\n      Console.WriteLine(&quot;&#39;HelloWorld&#39; type has following events :&quot;);\n      for(int i=0; i &lt; info.Length; i++)\n         Console.WriteLine(info[i].Name);\n   }\n\n   // Create the callee transient dynamic assembly.\n   private static TypeBuilder CreateCallee(AppDomain myDomain)\n   {\n      AssemblyName assemblyName = new AssemblyName();\n      assemblyName.Name = &quot;EmittedAssembly&quot;;\n\n      // Create the callee dynamic assembly.\n      AssemblyBuilder myAssembly =\n         myDomain.DefineDynamicAssembly(assemblyName, AssemblyBuilderAccess.Run);\n      // Create a dynamic module named &quot;CalleeModule&quot; in the callee.\n      ModuleBuilder myModule = myAssembly.DefineDynamicModule(&quot;EmittedModule&quot;);\n\n      // Define a public class named &quot;HelloWorld&quot; in the assembly.\n      TypeBuilder helloWorldClass =\n         myModule.DefineType(&quot;HelloWorld&quot;, TypeAttributes.Public);\n\n      MethodBuilder myMethod1 = helloWorldClass.DefineMethod(&quot;OnClick&quot;,\n         MethodAttributes.Public, typeof(void), new Type[]{typeof(Object)});\n      ILGenerator methodIL1 = myMethod1.GetILGenerator();\n      methodIL1.Emit(OpCodes.Ret);\n      MethodBuilder myMethod2 = helloWorldClass.DefineMethod(&quot;OnMouseUp&quot;,\n         MethodAttributes.Public, typeof(void), new Type[]{typeof(Object)});\n      ILGenerator methodIL2 = myMethod2.GetILGenerator();\n      methodIL2.Emit(OpCodes.Ret);\n\n      // Create the events.\n      EventBuilder myEvent1 = helloWorldClass.DefineEvent(&quot;Click&quot;, EventAttributes.None,\n         typeof(MyEvent));\n      myEvent1.SetRaiseMethod(myMethod1);\n      EventBuilder myEvent2 = helloWorldClass.DefineEvent(&quot;MouseUp&quot;, EventAttributes.None,\n         typeof(MyEvent));\n      myEvent2.SetRaiseMethod(myMethod2);\n\n      helloWorldClass.CreateType();\n      return(helloWorldClass);\n   }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p><code>EventAttributes</code> values may be combined using the bitwise OR operation to get the appropriate combination.  </p>\n<p> These enums are defined in the corhdr.h file and are a combination of bits and enumerators.</p>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Reflection_EventAttributes_None\">\r\n      \t\t\t<span class=\"lang-csharp\">None</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the event has no attributes.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_EventAttributes_ReservedMask\">\r\n      \t\t\t<span class=\"lang-csharp\">ReservedMask</span>\r\n      \t</td>\r\n      \t<td><p>Specifies a reserved flag for common language runtime use only.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_EventAttributes_RTSpecialName\">\r\n      \t\t\t<span class=\"lang-csharp\">RTSpecialName</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the common language runtime should check name encoding.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Reflection_EventAttributes_SpecialName\">\r\n      \t\t\t<span class=\"lang-csharp\">SpecialName</span>\r\n      \t</td>\r\n      \t<td><p>Specifies that the event is special in a way described by the name.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Reflection.EventAttributes.yml\">\r\n<meta name=\"APIName\" content=\"System.Reflection.EventAttributes\">\r\n<meta name=\"APIName\" content=\"System.Reflection.EventAttributes.None\">\r\n<meta name=\"APIName\" content=\"System.Reflection.EventAttributes.ReservedMask\">\r\n<meta name=\"APIName\" content=\"System.Reflection.EventAttributes.RTSpecialName\">\r\n<meta name=\"APIName\" content=\"System.Reflection.EventAttributes.SpecialName\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-24 01:41 AM\">\r\n<meta name=\"document_id\" content=\"2352c727-2a42-7bf8-fc5e-db2f203f1ad1\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies the attributes of an event.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.reflection/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Reflection.EventAttributes\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Reflection.EventAttributes.yml","open_to_public_contributors":false,"api_name":["System.Reflection.EventAttributes","System.Reflection.EventAttributes.None","System.Reflection.EventAttributes.ReservedMask","System.Reflection.EventAttributes.RTSpecialName","System.Reflection.EventAttributes.SpecialName"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Reflection.EventAttributes","System::Reflection::EventAttributes","System.Reflection.EventAttributes.None","System::Reflection::EventAttributes::None","System.Reflection.EventAttributes.ReservedMask","System::Reflection::EventAttributes::ReservedMask","System.Reflection.EventAttributes.RTSpecialName","System::Reflection::EventAttributes::RTSpecialName","System.Reflection.EventAttributes.SpecialName","System::Reflection::EventAttributes::SpecialName"],"dev_langs":["csharp"],"updated_at":"2017-03-24 01:41 AM","document_id":"2352c727-2a42-7bf8-fc5e-db2f203f1ad1","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Reflection/EventAttributes.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"EventAttributes enum | Microsoft Docs","_op_ogTitle":"EventAttributes enum","description":"Specifies the attributes of an event.\n","toc_asset_id":"api/_splitted/System.Reflection/toc.json","toc_rel":"_splitted/System.Reflection/toc.json","source_url":"","ms.assetid":"System.Reflection.EventAttributes","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.eventattributes","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.reflection.eventattributes","fileRelativePath":"api/System.Reflection.EventAttributes.html"},"themesRelativePathToOutputRoot":"_themes/"}