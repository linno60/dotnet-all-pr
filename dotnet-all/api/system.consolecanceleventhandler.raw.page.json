{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">ConsoleCancelEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that will handle the <a class=\"xref\" href=\"system.console#System_Console_CancelKeyPress\" data-linktype=\"relative-path\">CancelKeyPress</a> event of a <a class=\"xref\" href=\"system.console\" data-linktype=\"relative-path\">Console</a>.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void ConsoleCancelEventHandler(object sender, ConsoleCancelEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">ConsoleCancelEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates how to use the ConsoleCancelEventHandler class to handle an event.  </p>\n<pre><code class=\"lang-cs\" name=\"console.cancelkeypress#1\">using System;\n\nclass Sample \n{\n    public static void Main()\n    {\n        ConsoleKeyInfo cki;\n\n        Console.Clear();\n\n        // Establish an event handler to process key press events.\n        Console.CancelKeyPress += new ConsoleCancelEventHandler(myHandler);\n        while (true) {\n            Console.Write(&quot;Press any key, or &#39;X&#39; to quit, or &quot;);\n            Console.WriteLine(&quot;CTRL+C to interrupt the read operation:&quot;);\n\n            // Start a console read operation. Do not display the input.\n            cki = Console.ReadKey(true);\n\n            // Announce the name of the key that was pressed .\n            Console.WriteLine(&quot;  Key pressed: {0}\\n&quot;, cki.Key);\n\n            // Exit if the user pressed the &#39;X&#39; key.\n            if (cki.Key == ConsoleKey.X) break;\n        }\n    }\n\n    protected static void myHandler(object sender, ConsoleCancelEventArgs args)\n    {\n        Console.WriteLine(&quot;\\nThe read operation has been interrupted.&quot;);\n\n        Console.WriteLine(&quot;  Key pressed: {0}&quot;, args.SpecialKey);\n\n        Console.WriteLine(&quot;  Cancel property: {0}&quot;, args.Cancel);\n\n        // Set the Cancel property to true to prevent the process from terminating.\n        Console.WriteLine(&quot;Setting the Cancel property to true...&quot;);\n        args.Cancel = true;\n\n        // Announce the new value of the Cancel property.\n        Console.WriteLine(&quot;  Cancel property: {0}&quot;, args.Cancel);\n        Console.WriteLine(&quot;The read operation will resume...\\n&quot;);\n    }\n}\n// The example displays output similar to the follwoing:\n//    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n//      Key pressed: J\n//    \n//    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n//      Key pressed: Enter\n//    \n//    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n//    \n//    The read operation has been interrupted.\n//      Key pressed: ControlC\n//      Cancel property: False\n//    Setting the Cancel property to true...\n//      Cancel property: True\n//    The read operation will resume...\n//    \n//      Key pressed: Q\n//    \n//    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n//      Key pressed: X\n</code></pre><pre><code class=\"lang-cpp\" name=\"console.cancelkeypress#1\">using namespace System;\n\nvoid OnCancelKeyPressed(Object^ sender, \n    ConsoleCancelEventArgs^ args)\n{\n    Console::WriteLine(&quot;{0}The read operation has been interrupted.&quot;,\n        Environment::NewLine);\n\n    Console::WriteLine(&quot;  Key pressed: {0}&quot;, args-&gt;SpecialKey);\n\n    Console::WriteLine(&quot;  Cancel property: {0}&quot;, args-&gt;Cancel);\n\n    // Set the Cancel property to true to prevent the process from \n    // terminating.\n    Console::WriteLine(&quot;Setting the Cancel property to true...&quot;);\n    args-&gt;Cancel = true;\n\n    // Announce the new value of the Cancel property.\n    Console::WriteLine(&quot;  Cancel property: {0}&quot;, args-&gt;Cancel);\n    Console::WriteLine(&quot;The read operation will resume...{0}&quot;,\n        Environment::NewLine);\n}\n\nint main()\n{       \n    // Clear the screen.\n    Console::Clear();\n\n    // Establish an event handler to process key press events.\n    Console::CancelKeyPress += \n        gcnew ConsoleCancelEventHandler(OnCancelKeyPressed);\n\n    while (true)\n    {\n        // Prompt the user.\n        Console::Write(&quot;Press any key, or &#39;X&#39; to quit, or &quot;);\n        Console::WriteLine(&quot;CTRL+C to interrupt the read operation:&quot;);\n\n        // Start a console read operation. Do not display the input.\n        ConsoleKeyInfo^ keyInfo = Console::ReadKey(true);\n\n        // Announce the name of the key that was pressed .\n        Console::WriteLine(&quot;  Key pressed: {0}{1}&quot;, keyInfo-&gt;Key, \n            Environment::NewLine);\n\n        // Exit if the user pressed the &#39;X&#39; key.\n        if (keyInfo-&gt;Key == ConsoleKey::X)\n        {\n            break;\n        }\n    }\n}\n// The example displays output similar to the following:\n//    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n//    Key pressed: J\n//    \n//    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n//    Key pressed: Enter\n//    \n//    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n//    \n//    The read operation has been interrupted.\n//    Key pressed: ControlC\n//    Cancel property: False\n//    Setting the Cancel property to true...\n//    Cancel property: True\n//    The read operation will resume...\n//    \n//    Key pressed: Q\n//    \n//    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n//    Key pressed: X\n</code></pre><pre><code class=\"lang-vb\" name=\"console.cancelkeypress#1\">Class Sample\n    Public Shared Sub Main() \n        Dim cki As ConsoleKeyInfo\n        \n        Console.Clear()\n        \n        &#39; Establish an event handler to process key press events.\n        AddHandler Console.CancelKeyPress, AddressOf myHandler\n\n        While True\n            Console.Write(&quot;Press any key, or &#39;X&#39; to quit, or &quot;)\n            Console.WriteLine(&quot;CTRL+C to interrupt the read operation:&quot;)\n            \n            &#39; Start a console read operation. Do not display the input.\n            cki = Console.ReadKey(True)\n            \n            &#39; Announce the name of the key that was pressed .\n            Console.WriteLine(&quot;  Key pressed: {0}&quot; &amp; vbCrLf, cki.Key)\n            \n            &#39; Exit if the user pressed the &#39;X&#39; key.\n            If cki.Key = ConsoleKey.X Then Exit While\n        End While\n    End Sub\n\n    Protected Shared Sub myHandler(ByVal sender As Object, _\n                                   ByVal args As ConsoleCancelEventArgs) \n        Console.WriteLine(vbCrLf &amp; &quot;The read operation has been interrupted.&quot;)\n        \n        Console.WriteLine(&quot;  Key pressed: {0}&quot;, args.SpecialKey)\n        \n        Console.WriteLine(&quot;  Cancel property: {0}&quot;, args.Cancel)\n        \n        &#39; Set the Cancel property to true to prevent the process from terminating.\n        Console.WriteLine(&quot;Setting the Cancel property to true...&quot;)\n        args.Cancel = True\n        \n        &#39; Announce the new value of the Cancel property.\n        Console.WriteLine(&quot;  Cancel property: {0}&quot;, args.Cancel)\n        Console.WriteLine(&quot;The read operation will resume...&quot; &amp; vbCrLf)\n    End Sub\nEnd Class\n&#39; The example diplays output similar to the following:\n&#39;    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n&#39;     Key pressed: J\n&#39;    \n&#39;    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n&#39;     Key pressed: Enter\n&#39;    \n&#39;    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n&#39;    \n&#39;    The read operation has been interrupted.\n&#39;     Key pressed: ControlC\n&#39;     Cancel property: False\n&#39;    Setting the Cancel property to true...\n&#39;     Cancel property: True\n&#39;    The read operation will resume...\n&#39;    \n&#39;     Key pressed: Q\n&#39;    \n&#39;    Press any key, or &#39;X&#39; to quit, or CTRL+C to interrupt the read operation:\n&#39;     Key pressed: X\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>When you create a ConsoleCancelEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see <a href=\"../topic/handling%20and%20raising%20events\" data-linktype=\"relative-path\">Events</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.ConsoleCancelEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.ConsoleCancelEventHandler\">\r\n<meta name=\"APIName\" content=\"System.ConsoleCancelEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.ConsoleCancelEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.ConsoleCancelEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.ConsoleCancelEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 05:47 AM\">\r\n<meta name=\"document_id\" content=\"cb196822-9bae-be61-499f-a5a44e121b93\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that will handle the  event of a .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.ConsoleCancelEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.ConsoleCancelEventHandler.yml","open_to_public_contributors":false,"api_name":["System.ConsoleCancelEventHandler","System.ConsoleCancelEventHandler..ctor","System.ConsoleCancelEventHandler.Invoke","System.ConsoleCancelEventHandler.BeginInvoke","System.ConsoleCancelEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.ConsoleCancelEventHandler","System::ConsoleCancelEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-31 05:47 AM","document_id":"cb196822-9bae-be61-499f-a5a44e121b93","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System/ConsoleCancelEventHandler.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"ConsoleCancelEventHandler delegate | Microsoft Docs","_op_ogTitle":"ConsoleCancelEventHandler delegate","description":"Represents the method that will handle the  event of a .\n","toc_asset_id":"api/_splitted/System/toc.json","toc_rel":"_splitted/System/toc.json","source_url":"","ms.assetid":"System.ConsoleCancelEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.consolecanceleventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.consolecanceleventhandler","fileRelativePath":"api/System.ConsoleCancelEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}