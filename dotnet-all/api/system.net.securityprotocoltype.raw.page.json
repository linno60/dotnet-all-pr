{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">SecurityProtocolType</span>\r\n      Enum\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Specifies the security protocols that are supported by the Schannel security package.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\r\n  \t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[System.Flags]\npublic enum SecurityProtocolType</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.valuetype\" data-linktype=\"relative-path\">ValueType</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.enum\" data-linktype=\"relative-path\">Enum</a></span></div><span class=\"lang-csharp\">SecurityProtocolType</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates creating a <a class=\"xref\" href=\"system.net.sockets.tcpclient\" data-linktype=\"relative-path\">TcpClient</a> that uses the <a class=\"xref\" href=\"system.net.security.sslstream\" data-linktype=\"relative-path\">SslStream</a> class to communicate with a server.  </p>\n<pre><code class=\"lang-cpp\" name=\"NclSslClientSync#0\">#using &lt;System.dll&gt;\n#using &lt;System.Security.dll&gt;\n\nusing namespace System;\nusing namespace System::Collections;\nusing namespace System::Globalization;\nusing namespace System::Net;\nusing namespace System::Net::Security;\nusing namespace System::Net::Sockets;\nusing namespace System::Security::Authentication;\nusing namespace System::Text;\nusing namespace System::Security::Cryptography::X509Certificates;\nusing namespace System::IO;\n\nnamespace NlsClientSync\n{\n    public ref class SslTcpClient\n    {\n    private:\n        static Hashtable^ certificateErrors = gcnew Hashtable;\n        // Load a table of errors that might cause \n        // the certificate authentication to fail.\n        static void InitializeCertificateErrors()\n        {\n            certificateErrors-&gt;Add(0x800B0101,\n                &quot;The certification has expired.&quot;);\n            certificateErrors-&gt;Add(0x800B0104,\n                &quot;A path length constraint &quot;\n                &quot;in the certification chain has been violated.&quot;);\n            certificateErrors-&gt;Add(0x800B0105,\n                &quot;A certificate contains an unknown extension &quot;\n                &quot;that is marked critical.&quot;);\n            certificateErrors-&gt;Add(0x800B0107,\n                &quot;A parent of a given certificate in fact &quot;\n                &quot;did not issue that child certificate.&quot;);\n            certificateErrors-&gt;Add(0x800B0108,\n                &quot;A certificate is missing or has an empty value &quot;\n                &quot;for a necessary field.&quot;);\n            certificateErrors-&gt;Add(0x800B0109,\n                &quot;The certificate root is not trusted.&quot;);\n            certificateErrors-&gt;Add(0x800B010C,\n                &quot;The certificate has been revoked.&quot;);\n            certificateErrors-&gt;Add(0x800B010F,\n                &quot;The name in the certificate does not not match &quot;\n                &quot;the host name requested by the client.&quot;);\n            certificateErrors-&gt;Add(0x800B0111,\n                &quot;The certificate was explicitly marked &quot;\n                &quot;as untrusted by the user.&quot;);\n            certificateErrors-&gt;Add(0x800B0112,\n                &quot;A certification chain processed correctly, &quot;\n                &quot;but one of the CA certificates is not trusted.&quot;);\n            certificateErrors-&gt;Add(0x800B0113,\n                &quot;The certificate has an invalid policy.&quot;);\n            certificateErrors-&gt;Add(0x800B0114,\n                &quot;The certificate name is either not &quot;\n                &quot;in the permitted list or is explicitly excluded.&quot;);\n            certificateErrors-&gt;Add(0x80092012,\n                &quot;The revocation function was unable to check &quot;\n                &quot;revocation for the certificate.&quot;);\n            certificateErrors-&gt;Add(0x80090327,\n                &quot;An unknown error occurred while &quot;\n                &quot;processing the certificate.&quot;);\n            certificateErrors-&gt;Add(0x80096001,\n                &quot;A system-level error occurred &quot;\n                &quot;while verifying trust.&quot;);\n            certificateErrors-&gt;Add(0x80096002,\n                &quot;The certificate for the signer of the message &quot;\n                &quot;is invalid or not found.&quot;);\n            certificateErrors-&gt;Add(0x80096003,\n                &quot;One of the counter signatures was invalid.&quot;);\n            certificateErrors-&gt;Add(0x80096004,\n                &quot;The signature of the certificate &quot;\n                &quot;cannot be verified.&quot;);\n            certificateErrors-&gt;Add(0x80096005,\n                &quot;The time stamp signature or certificate &quot;\n                &quot;could not be verified or is malformed.&quot;);\n            certificateErrors-&gt;Add(0x80096010,\n                &quot;The digital signature of the object &quot;\n                &quot;was not verified.&quot;);\n            certificateErrors-&gt;Add(0x80096019,\n                &quot;The basic constraint extension of a certificate &quot;\n                &quot;has not been observed.&quot;);\n        }\n\n        static String^ CertificateErrorDescription(UInt32 problem)\n        {\n            // Initialize the error message dictionary \n            // if it is not yet available.\n            if (certificateErrors-&gt;Count == 0)\n            {\n                InitializeCertificateErrors();\n            }\n\n            String^ description = safe_cast&lt;String^&gt;(\n                certificateErrors[problem]);\n            if (description == nullptr)\n            {\n                description = String::Format(\n                    CultureInfo::CurrentCulture,\n                    &quot;Unknown certificate error - 0x{0:x8}&quot;,\n                    problem);\n            }\n\n            return description;\n        }\n\n    public:\n        // The following method is invoked \n        // by the CertificateValidationDelegate.\n    static bool ValidateServerCertificate(\n            Object^ sender,\n            X509Certificate^ certificate,\n            X509Chain^ chain,\n            SslPolicyErrors sslPolicyErrors)\n        {\n        \n            Console::WriteLine(&quot;Validating the server certificate.&quot;);\n            if (sslPolicyErrors == SslPolicyErrors::None)\n                return true;\n\n            Console::WriteLine(&quot;Certificate error: {0}&quot;, sslPolicyErrors);\n\n            // Do not allow this client to communicate with unauthenticated servers.\n            return false;\n        }\n\n        static void RunClient(String^ machineName, String^ serverName)\n        {\n              \n            // Create a TCP/IP client socket.\n            // machineName is the host running the server application.\n            TcpClient^ client = gcnew TcpClient(machineName, 8080);\n            Console::WriteLine(&quot;Client connected.&quot;);\n              \n            // Create an SSL stream that will close \n            // the client&#39;s stream.\n            SslStream^ sslStream = gcnew SslStream(\n                client-&gt;GetStream(), false,\n                gcnew RemoteCertificateValidationCallback(ValidateServerCertificate),\n                nullptr);\n              \n            // The server name must match the name\n            // on the server certificate.\n            try\n            {\n                sslStream-&gt;AuthenticateAsClient(serverName);\n            }\n            catch (AuthenticationException^ ex) \n            {\n                Console::WriteLine(&quot;Exception: {0}&quot;, ex-&gt;Message);\n                if (ex-&gt;InnerException != nullptr)\n                {\n                    Console::WriteLine(&quot;Inner exception: {0}&quot;, \n                        ex-&gt;InnerException-&gt;Message);\n                }\n\n                Console::WriteLine(&quot;Authentication failed - &quot;\n                    &quot;closing the connection.&quot;);\n                sslStream-&gt;Close();\n                client-&gt;Close();\n                return;\n            }\n            // Encode a test message into a byte array.\n            // Signal the end of the message using the &quot;&lt;EOF&gt;&quot;.\n            array&lt;Byte&gt;^ messsage = Encoding::UTF8-&gt;GetBytes(\n                &quot;Hello from the client.&lt;EOF&gt;&quot;);\n              \n            // Send hello message to the server.\n            sslStream-&gt;Write(messsage);\n            sslStream-&gt;Flush();\n            // Read message from the server.\n            String^ serverMessage = ReadMessage(sslStream);\n            Console::WriteLine(&quot;Server says: {0}&quot;, serverMessage);\n           \n            // Close the client connection.\n            sslStream-&gt;Close();\n            client-&gt;Close();\n            Console::WriteLine(&quot;Client closed.&quot;);\n        }\n    private:\n        static String^ ReadMessage(SslStream^ sslStream)\n        {\n              \n            // Read the  message sent by the server.\n            // The end of the message is signaled using the\n            // &quot;&lt;EOF&gt;&quot; marker.\n            array&lt;Byte&gt;^ buffer = gcnew array&lt;Byte&gt;(2048);\n            StringBuilder^ messageData = gcnew StringBuilder;\n            // Use Decoder class to convert from bytes to UTF8\n            // in case a character spans two buffers.\n            Encoding^ u8 = Encoding::UTF8;\n            Decoder^ decoder = u8-&gt;GetDecoder();\n\n            int bytes = -1;\n            do\n            {\n                bytes = sslStream-&gt;Read(buffer, 0, buffer-&gt;Length);\n                 \n                array&lt;__wchar_t&gt;^ chars = gcnew array&lt;__wchar_t&gt;(\n                    decoder-&gt;GetCharCount(buffer, 0, bytes));\n                decoder-&gt;GetChars(buffer, 0, bytes, chars, 0);\n                messageData-&gt;Append(chars);\n                 \n                // Check for EOF.\n                if (messageData-&gt;ToString()-&gt;IndexOf(&quot;&lt;EOF&gt;&quot;) != -1)\n                {\n                    break;\n                }\n            }\n            while (bytes != 0);\n\n            return messageData-&gt;ToString();\n        }\n    };\n}\n\nint main()\n{\n    array&lt;String^&gt;^ args = Environment::GetCommandLineArgs();\n    String^ serverCertificateName = nullptr;\n    String^ machineName = nullptr;\n    if (args == nullptr || args-&gt;Length &lt; 2)\n    {\n        Console::WriteLine(&quot;To start the client specify:&quot;);\n        Console::WriteLine(&quot;clientSync machineName [serverName]&quot;);\n        return 1;\n    }\n        \n    // User can specify the machine name and server name.\n    // Server name must match the name on \n    // the server&#39;s certificate.\n    machineName = args[1];\n    if (args-&gt;Length &lt; 3)\n    {\n        serverCertificateName = machineName;\n    }\n    else\n    {\n        serverCertificateName = args[2];\n    };\n\n    NlsClientSync::SslTcpClient::RunClient(machineName,\n        serverCertificateName);\n\n    return 0;\n}\n</code></pre><pre><code class=\"lang-cs\" name=\"NclSslClientSync#0\">using System;\nusing System.Collections;\nusing System.Net;\nusing System.Net.Security;\nusing System.Net.Sockets;\nusing System.Security.Authentication;\nusing System.Text;\nusing System.Security.Cryptography.X509Certificates;\nusing System.IO;\n\nnamespace Examples.System.Net\n{\n    public class SslTcpClient \n    {   \n        private static Hashtable certificateErrors = new Hashtable();\n      \n        // The following method is invoked by the RemoteCertificateValidationDelegate.\n        public static bool ValidateServerCertificate(\n              object sender,\n              X509Certificate certificate,\n              X509Chain chain,\n              SslPolicyErrors sslPolicyErrors)\n        {\n           if (sslPolicyErrors == SslPolicyErrors.None)\n                return true;\n\n            Console.WriteLine(&quot;Certificate error: {0}&quot;, sslPolicyErrors);\n            \n            // Do not allow this client to communicate with unauthenticated servers.\n            return false;\n        }\n        public static void RunClient(string machineName, string serverName)  \n        {\n            // Create a TCP/IP client socket.\n            // machineName is the host running the server application.\n            TcpClient client = new TcpClient(machineName,443);\n            Console.WriteLine(&quot;Client connected.&quot;);\n            // Create an SSL stream that will close the client&#39;s stream.\n            SslStream sslStream = new SslStream(\n                client.GetStream(), \n                false, \n                new RemoteCertificateValidationCallback (ValidateServerCertificate), \n                null\n                );\n            // The server name must match the name on the server certificate.\n            try \n            {\n                sslStream.AuthenticateAsClient(serverName);\n            } \n            catch (AuthenticationException e)\n            {\n                Console.WriteLine(&quot;Exception: {0}&quot;, e.Message);\n                if (e.InnerException != null)\n                {\n                    Console.WriteLine(&quot;Inner exception: {0}&quot;, e.InnerException.Message);\n                }\n                Console.WriteLine (&quot;Authentication failed - closing the connection.&quot;);\n                client.Close();\n                return;\n            }\n            // Encode a test message into a byte array.\n            // Signal the end of the message using the &quot;&lt;EOF&gt;&quot;.\n            byte[] messsage = Encoding.UTF8.GetBytes(&quot;Hello from the client.&lt;EOF&gt;&quot;);\n            // Send hello message to the server. \n            sslStream.Write(messsage);\n            sslStream.Flush();\n            // Read message from the server.\n            string serverMessage = ReadMessage(sslStream);\n            Console.WriteLine(&quot;Server says: {0}&quot;, serverMessage);\n            // Close the client connection.\n            client.Close();\n            Console.WriteLine(&quot;Client closed.&quot;);\n        }\n        static string ReadMessage(SslStream sslStream)\n        {\n            // Read the  message sent by the server.\n            // The end of the message is signaled using the\n            // &quot;&lt;EOF&gt;&quot; marker.\n            byte [] buffer = new byte[2048];\n            StringBuilder messageData = new StringBuilder();\n            int bytes = -1;\n            do\n            {\n                bytes = sslStream.Read(buffer, 0, buffer.Length);\n                        \n                // Use Decoder class to convert from bytes to UTF8\n                // in case a character spans two buffers.\n                Decoder decoder = Encoding.UTF8.GetDecoder();\n                char[] chars = new char[decoder.GetCharCount(buffer,0,bytes)];\n                decoder.GetChars(buffer, 0, bytes, chars,0);\n                messageData.Append (chars);\n                // Check for EOF.\n                if (messageData.ToString().IndexOf(&quot;&lt;EOF&gt;&quot;) != -1)\n                {\n                    break;\n                }\n            } while (bytes != 0); \n            \n            return messageData.ToString();\n        }\n        private static void DisplayUsage()\n        { \n            Console.WriteLine(&quot;To start the client specify:&quot;);\n            Console.WriteLine(&quot;clientSync machineName [serverName]&quot;);\n            Environment.Exit(1);\n        }\n        public static int Main(string[] args)\n        {\n            string serverCertificateName = null;\n            string machineName = null;\n            if (args == null ||args.Length &lt;1 )\n            {\n                DisplayUsage();\n            }\n            // User can specify the machine name and server name.\n            // Server name must match the name on the server&#39;s certificate. \n            machineName = args[0];\n            if (args.Length &lt;2 )\n            {\n                serverCertificateName = machineName;\n            }\n            else \n            {\n                serverCertificateName = args[1];\n            }\n            SslTcpClient.RunClient (machineName, serverCertificateName);\n            return 0;\n        }\n    }\n}\n    \n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>This enumeration defines permissible values for the <a class=\"xref\" href=\"system.net.servicepointmanager#System_Net_ServicePointManager_SecurityProtocol_\" data-linktype=\"relative-path\">SecurityProtocol</a> property and specifies the security protocols that are used by instances of the <a class=\"xref\" href=\"system.net.security.sslstream\" data-linktype=\"relative-path\">SslStream</a> class.</p>\n\r\n  \r\n      \t<h2 class=\"accented\">Fields\r\n      </h2>\r\n      <table class=\"nameValue\">\r\n      \t<tr><td id=\"System_Net_SecurityProtocolType_Ssl3\">\r\n      \t\t\t<span class=\"lang-csharp\">Ssl3</span>\r\n      \t</td>\r\n      \t<td><p>Specifies the Secure Socket Layer (SSL) 3.0 security protocol.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_SecurityProtocolType_Tls\">\r\n      \t\t\t<span class=\"lang-csharp\">Tls</span>\r\n      \t</td>\r\n      \t<td><p>Specifies the Transport Layer Security (TLS) 1.0 security protocol.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_SecurityProtocolType_Tls11\">\r\n      \t\t\t<span class=\"lang-csharp\">Tls11</span>\r\n      \t</td>\r\n      \t<td><p>Specifies the Transport Layer Security (TLS) 1.1 security protocol.</p>\n</td>\r\n      \t</tr>\r\n      \t<tr><td id=\"System_Net_SecurityProtocolType_Tls12\">\r\n      \t\t\t<span class=\"lang-csharp\">Tls12</span>\r\n      \t</td>\r\n      \t<td><p>Specifies the Transport Layer Security (TLS) 1.2 security protocol.</p>\n</td>\r\n      \t</tr>\r\n      </table>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Net.SecurityProtocolType.yml\">\r\n<meta name=\"APIName\" content=\"System.Net.SecurityProtocolType\">\r\n<meta name=\"APIName\" content=\"System.Net.SecurityProtocolType.Ssl3\">\r\n<meta name=\"APIName\" content=\"System.Net.SecurityProtocolType.Tls\">\r\n<meta name=\"APIName\" content=\"System.Net.SecurityProtocolType.Tls11\">\r\n<meta name=\"APIName\" content=\"System.Net.SecurityProtocolType.Tls12\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-29 05:54 AM\">\r\n<meta name=\"document_id\" content=\"9e277575-abf0-ffcb-5a82-9968d325d82b\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Specifies the security protocols that are supported by the Schannel security package.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.net/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Net.SecurityProtocolType\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Net.SecurityProtocolType.yml","open_to_public_contributors":false,"api_name":["System.Net.SecurityProtocolType","System.Net.SecurityProtocolType.Ssl3","System.Net.SecurityProtocolType.Tls","System.Net.SecurityProtocolType.Tls11","System.Net.SecurityProtocolType.Tls12"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Net.SecurityProtocolType","System::Net::SecurityProtocolType","System.Net.SecurityProtocolType.Ssl3","System::Net::SecurityProtocolType::Ssl3","System.Net.SecurityProtocolType.Tls","System::Net::SecurityProtocolType::Tls","System.Net.SecurityProtocolType.Tls11","System::Net::SecurityProtocolType::Tls11","System.Net.SecurityProtocolType.Tls12","System::Net::SecurityProtocolType::Tls12"],"dev_langs":["csharp"],"updated_at":"2017-03-29 05:54 AM","document_id":"9e277575-abf0-ffcb-5a82-9968d325d82b","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Net/SecurityProtocolType.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"SecurityProtocolType enum | Microsoft Docs","_op_ogTitle":"SecurityProtocolType enum","description":"Specifies the security protocols that are supported by the Schannel security package.\n","toc_asset_id":"api/_splitted/System.Net/toc.json","toc_rel":"_splitted/System.Net/toc.json","source_url":"","ms.assetid":"System.Net.SecurityProtocolType","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.net.securityprotocoltype","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.net.securityprotocoltype","fileRelativePath":"api/System.Net.SecurityProtocolType.html"},"themesRelativePathToOutputRoot":"_themes/"}