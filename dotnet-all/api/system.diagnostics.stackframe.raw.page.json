{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">StackFrame</span>\r\n    \t\t\t\tClass\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Provides information about a StackFrame, which represents a function call on the call stack for the current thread.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">[ECMA2Yaml.Models.ECMAAttribute]\npublic class StackFrame</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><span class=\"lang-csharp\">StackFrame</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Attributes</dt><dd>\r\n  \t\t<div class=\"cdlHolder\">\r\n  \t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \t<h3 class=\"accented\">Inherited Members</h3>\r\n  \t<h4 class=\"accented\"></h4>\r\n  \t<div class=\"cdlHolder\">\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_\" data-linktype=\"relative-path\">Equals(Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_Equals_System_Object_System_Object_\" data-linktype=\"relative-path\">Equals(Object, Object)</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetHashCode\" data-linktype=\"relative-path\">GetHashCode()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_GetType\" data-linktype=\"relative-path\">GetType()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_MemberwiseClone\" data-linktype=\"relative-path\">MemberwiseClone()</a></span></div>\r\n  \t\t\t<div class=\"cdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object#System_Object_ReferenceEquals_System_Object_System_Object_\" data-linktype=\"relative-path\">ReferenceEquals(Object, Object)</a></span></div>\r\n  \t</div>\r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example demonstrates the use of the StackFrame class to provide the stack frame information for a stack trace.  </p>\n<pre><code class=\"lang-cs\" name=\"StackFrameSample2#1\">using System;\nusing System.Diagnostics;\n\nnamespace StackFrameExample\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            try\n            {\n                Method1();\n            }\n            catch (Exception e)\n            {\n                StackTrace st = new StackTrace();\n                StackTrace st1 = new StackTrace(new StackFrame(true));\n                Console.WriteLine(&quot; Stack trace for Main: {0}&quot;,\n                   st1.ToString());\n                Console.WriteLine(st.ToString());\n            }\n            Console.WriteLine(&quot;Press Enter to exit.&quot;);\n            Console.ReadLine();\n        }\n        private static void Method1()\n        {\n            try\n            {\n                Method2(4);\n            }\n            catch (Exception e)\n            {\n                StackTrace st = new StackTrace();\n                StackTrace st1 = new StackTrace(new StackFrame(true));\n                Console.WriteLine(&quot; Stack trace for Method1: {0}&quot;,\n                   st1.ToString());\n                Console.WriteLine(st.ToString());\n                // Build a stack trace for the next frame.\n                StackTrace st2 = new StackTrace(new StackFrame(1, true));\n                Console.WriteLine(&quot; Stack trace for next level frame: {0}&quot;,\n                   st2.ToString());\n                throw e;\n            }\n\n        }\n        private static void Method2( int count)\n        {\n            try\n            {\n                if (count &lt; 5)\n                    throw new ArgumentException(&quot;count too large&quot;, &quot;count&quot;);\n            }\n            catch (Exception e)\n            {\n                StackTrace st = new StackTrace();              \n                StackTrace st1 = new StackTrace(new StackFrame(2,true));\n                Console.WriteLine(&quot; Stack trace for Method2: {0}&quot;,\n                   st1.ToString());\n                Console.WriteLine(st.ToString());\n                throw e;\n            }\n        }\n    }\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"StackFrameSample2#1\">Imports System\nImports System.Diagnostics\n\n\n\nClass Program\n\n    Shared Sub Main(ByVal args() As String)\n        Try\n            Method1()\n        Catch e As Exception\n            Dim st As New StackTrace()\n            Dim st1 As New StackTrace(New StackFrame(True))\n            Console.WriteLine(&quot; Stack trace for Main: {0}&quot;, st1.ToString())\n            Console.WriteLine(st.ToString())\n        End Try\n        Console.WriteLine(&quot;Press Enter to exit.&quot;)\n        Console.ReadLine()\n\n    End Sub &#39;Main\n\n    Private Shared Sub Method1()\n        Try\n            Method2(4)\n        Catch e As Exception\n            Dim st As New StackTrace()\n            Dim st1 As New StackTrace(New StackFrame(True))\n            Console.WriteLine(&quot; Stack trace for Method1: {0}&quot;, st1.ToString())\n            Console.WriteLine(st.ToString())\n            &#39; Build a stack trace for the next frame.\n            Dim st2 As New StackTrace(New StackFrame(1, True))\n            Console.WriteLine(&quot; Stack trace for next level frame: {0}&quot;, st2.ToString())\n            Throw e\n        End Try\n\n    End Sub &#39;Method1\n\n    Private Shared Sub Method2(ByVal count As Integer)\n        Try\n            If count &lt; 5 Then\n                Throw New ArgumentException(&quot;count too large&quot;, &quot;count&quot;)\n            End If\n        Catch e As Exception\n            Dim st As New StackTrace()\n            Dim st1 As New StackTrace(New StackFrame(2, True))\n            Console.WriteLine(&quot; Stack trace for Method2: {0}&quot;, st1.ToString())\n            Console.WriteLine(st.ToString())\n            Throw e\n        End Try\n\n    End Sub &#39;Method2\nEnd Class &#39;Program\n</code></pre><p> The following example demonstrates the use of  the members of the StackFrame class.  </p>\n<pre><code class=\"lang-cpp\" name=\"StackFrameSample1#1\">#using &lt;System.dll&gt;\n\nusing namespace System;\nusing namespace System::Diagnostics;\n\n// This console application illustrates various uses\n// of the StackTrace and StackFrame classes.\nnamespace SampleInternal\n{\n   public ref class ClassLevel6\n   {\n   public:\n      void Level6Method()\n      {\n         throw gcnew Exception( &quot;An error occurred in the lowest internal class method.&quot; );\n      }\n\n   };\n\n   public ref class ClassLevel5\n   {\n   public:\n\n      void Level5Method()\n      {\n         try\n         {\n            ClassLevel6^ nestedClass = gcnew ClassLevel6;\n            nestedClass-&gt;Level6Method();\n         }\n         catch ( Exception^ e ) \n         {\n            Console::WriteLine( &quot; Level5Method exception handler&quot; );\n            StackTrace^ st = gcnew StackTrace;\n            \n            // Display the most recent function call.\n            StackFrame^ sf = st-&gt;GetFrame( 0 );\n            Console::WriteLine();\n            Console::WriteLine( &quot;  Exception in method: &quot; );\n            Console::WriteLine( &quot;      {0}&quot;, sf-&gt;GetMethod() );\n            if ( st-&gt;FrameCount &gt; 1 )\n            {\n               \n               // Display the highest-level function call\n               // in the trace.\n               sf = st-&gt;GetFrame( st-&gt;FrameCount - 1 );\n               Console::WriteLine( &quot;  Original function call at top of call stack):&quot; );\n               Console::WriteLine( &quot;      {0}&quot;, sf-&gt;GetMethod() );\n            }\n            Console::WriteLine();\n            Console::WriteLine( &quot;   ... throwing exception to next level ...&quot; );\n            Console::WriteLine( &quot;-------------------------------------------------\\n&quot; );\n            throw e;\n         }\n\n      }\n\n   };\n\n   public ref class ClassLevel4\n   {\n   public:\n      void Level4Method()\n      {\n         \n         try\n         {\n            ClassLevel5^ nestedClass = gcnew ClassLevel5;\n            nestedClass-&gt;Level5Method();\n         }\n         catch ( Exception^ e ) \n         {\n            Console::WriteLine( &quot; Level4Method exception handler&quot; );\n            \n            // Build a stack trace from a dummy stack frame.\n            // Explicitly specify the source file name, line number\n            // and column number.\n            StackTrace^ st = gcnew StackTrace( gcnew StackFrame( &quot;source.cs&quot;,79,24 ) );\n            Console::WriteLine( &quot; Stack trace with dummy stack frame: {0}&quot;, st-&gt;ToString() );\n            \n            // Access the StackFrames explicitly to display the file\n            // name, line number and column number properties.\n            // StackTrace.ToString only includes the method name. \n            for ( int i = 0; i &lt; st-&gt;FrameCount; i++ )\n            {\n               StackFrame^ sf = st-&gt;GetFrame( i );\n               Console::WriteLine( &quot; File: {0}&quot;, sf-&gt;GetFileName() );\n               Console::WriteLine( &quot; Line Number: {0}&quot;, sf-&gt;GetFileLineNumber().ToString() );\n               Console::WriteLine( &quot; Column Number: {0}&quot;, sf-&gt;GetFileColumnNumber().ToString() );\n\n            }\n            Console::WriteLine();\n            Console::WriteLine( &quot;   ... throwing exception to next level ...&quot; );\n            Console::WriteLine( &quot;-------------------------------------------------\\n&quot; );\n            throw e;\n         }\n\n         \n      }\n\n   };\n\n   public ref class ClassLevel3\n   {\n   public:\n\n      void Level3Method()\n      {\n         try\n         {\n            ClassLevel4^ nestedClass = gcnew ClassLevel4;\n            nestedClass-&gt;Level4Method();\n         }\n         catch ( Exception^ e ) \n         {\n            Console::WriteLine( &quot; Level3Method exception handler&quot; );\n            \n            // Build a stack trace from a dummy stack frame.\n            // Explicitly specify the source file name and line number.\n            StackTrace^ st = gcnew StackTrace( gcnew StackFrame( &quot;source.cs&quot;,60 ) );\n            Console::WriteLine( &quot; Stack trace with dummy stack frame: {0}&quot;, st-&gt;ToString() );\n            for ( int i = 0; i &lt; st-&gt;FrameCount; i++ )\n            {\n               \n               // Display the stack frame properties.\n               StackFrame^ sf = st-&gt;GetFrame( i );\n               Console::WriteLine( &quot; File: {0}&quot;, sf-&gt;GetFileName() );\n               Console::WriteLine( &quot; Line Number: {0}&quot;, sf-&gt;GetFileLineNumber().ToString() );\n               \n               // Note that the column number defaults to zero\n               // when not initialized.\n               Console::WriteLine( &quot; Column Number: {0}&quot;, sf-&gt;GetFileColumnNumber().ToString() );\n               Console::WriteLine( &quot; Intermediate Language Offset: {0}&quot;, sf-&gt;GetILOffset().ToString() );\n               Console::WriteLine( &quot; Native Offset: {0}&quot;, sf-&gt;GetNativeOffset().ToString() );\n               \n\n            }\n            Console::WriteLine();\n            Console::WriteLine( &quot;   ... throwing exception to next level ...&quot; );\n            Console::WriteLine( &quot;-------------------------------------------------\\n&quot; );\n            throw e;\n         }\n\n      }\n\n   };\n\n   public ref class ClassLevel2\n   {\n   public:\n\n      void Level2Method()\n      {\n         try\n         {\n            ClassLevel3^ nestedClass = gcnew ClassLevel3;\n            nestedClass-&gt;Level3Method();\n         }\n         catch ( Exception^ e ) \n         {\n            Console::WriteLine( &quot; Level2Method exception handler&quot; );\n            \n            // Display the full call stack at this level.\n            StackTrace^ st1 = gcnew StackTrace( true );\n            Console::WriteLine( &quot; Stack trace for this level: {0}&quot;, st1-&gt;ToString() );\n            \n            // Build a stack trace from one frame, skipping the\n            // current frame and using the next frame.\n            StackTrace^ st2 = gcnew StackTrace( gcnew StackFrame( 1,true ) );\n            Console::WriteLine( &quot; Stack trace built with next level frame: {0}&quot;, st2-&gt;ToString() );\n            \n            // Build a stack trace skipping the current frame, and\n            // including all the other frames.\n            StackTrace^ st3 = gcnew StackTrace( 1,true );\n            Console::WriteLine( &quot; Stack trace built from the next level up: {0}&quot;, st3-&gt;ToString() );\n            Console::WriteLine();\n            Console::WriteLine( &quot;   ... throwing exception to next level ...&quot; );\n            Console::WriteLine( &quot;-------------------------------------------------\\n&quot; );\n            throw e;\n         }\n\n      }\n\n   };\n\n   public ref class ClassLevel1\n   {\n   public:\n\n      void InternalMethod()\n      {\n         try\n         {\n            ClassLevel2^ nestedClass = gcnew ClassLevel2;\n            nestedClass-&gt;Level2Method();\n         }\n         catch ( Exception^ e ) \n         {\n            Console::WriteLine( &quot; InternalMethod exception handler&quot; );\n            \n            // Build a stack trace from one frame, skipping the\n            // current frame and using the next frame.  By\n            // default, file and line information are not displayed.\n            StackTrace^ st = gcnew StackTrace( gcnew StackFrame( 1 ) );\n            Console::WriteLine( &quot; Stack trace for next level frame: {0}&quot;, st-&gt;ToString() );\n            Console::WriteLine( &quot; Stack frame for next level: &quot; );\n            Console::WriteLine( &quot;   {0}&quot;, st-&gt;GetFrame( 0 )-&gt;ToString() );\n            Console::WriteLine( &quot; Line Number: {0}&quot;, st-&gt;GetFrame( 0 )-&gt;GetFileLineNumber().ToString() );\n            Console::WriteLine();\n            Console::WriteLine( &quot;   ... throwing exception to next level ...&quot; );\n            Console::WriteLine( &quot;-------------------------------------------------\\n&quot; );\n            throw e;\n         }\n\n      }\n\n   };\n\n}\n\n\nusing namespace SampleInternal;\n\nnamespace SamplePublic\n{\n   class ConsoleApp\n   {\n   public:\n\n\n      [STAThread]\n      static void Main()\n      {\n         ClassLevel1 ^ mainClass = gcnew ClassLevel1;\n         try\n         {\n            mainClass-&gt;InternalMethod();\n         }\n         catch ( Exception^ e ) \n         {\n            Console::WriteLine( &quot; Main method exception handler&quot; );\n            \n            // Display file and line information, if available.\n            StackTrace^ st = gcnew StackTrace( gcnew StackFrame( true ) );\n            Console::WriteLine( &quot; Stack trace for current level: {0}&quot;, st-&gt;ToString() );\n            Console::WriteLine( &quot; File: {0}&quot;, st-&gt;GetFrame( 0 )-&gt;GetFileName() );\n            Console::WriteLine( &quot; Line Number: {0}&quot;, st-&gt;GetFrame( 0 )-&gt;GetFileLineNumber().ToString() );\n            Console::WriteLine();\n            Console::WriteLine( &quot;-------------------------------------------------\\n&quot; );\n         }\n\n      }\n\n   };\n\n}\n\nint main()\n{\n   SamplePublic::ConsoleApp::Main();\n}\n</code></pre><pre><code class=\"lang-vb\" name=\"StackFrameSample1#1\">Imports System\nImports System.Diagnostics\n\nImports SampleInternal\n\nNamespace SamplePublic\n   \n   &#39; This console application illustrates various uses\n   &#39; of the StackTrace and StackFrame classes.\n   \n   Class ConsoleApp\n      \n      &lt;STAThread()&gt;  _\n      Shared Sub Main()\n         Dim mainClass As New ClassLevel1\n         \n         Try\n            mainClass.InternalMethod()\n         Catch\n            Console.WriteLine(&quot; Main method exception handler&quot;)\n            \n            &#39; Display file and line information, if available.\n            Dim st As New StackTrace(New StackFrame(True))\n            Console.WriteLine(&quot; Stack trace for current level: {0}&quot;, _\n               st.ToString())\n            Console.WriteLine(&quot; File: {0}&quot;, _\n               st.GetFrame(0).GetFileName())\n            Console.WriteLine(&quot; Line Number: {0}&quot;, _\n               st.GetFrame(0).GetFileLineNumber().ToString())\n            \n            Console.WriteLine()\n            Console.WriteLine(&quot;-------------------------------------------------&quot;)\n            Console.WriteLine()\n         End Try\n      End Sub &#39;Main\n   End Class &#39;ConsoleApp\nEnd Namespace &#39;StackFramePublic \n\nNamespace SampleInternal\n   \n   Public Class ClassLevel1\n      \n      Public Sub InternalMethod()\n         Try\n            Dim nestedClass As New ClassLevel2\n            nestedClass.Level2Method()\n         Catch e As Exception\n            Console.WriteLine(&quot; InternalMethod exception handler&quot;)\n            \n            &#39; Build a stack trace from one frame, skipping the \n            &#39; current frame and using the next frame.  By default,\n            &#39; file and line information are not displayed.\n            Dim st As New StackTrace(New StackFrame(1))\n            Console.WriteLine(&quot; Stack trace for next level frame: {0}&quot;, _\n               st.ToString())\n            Console.WriteLine(&quot; Stack frame for next level: &quot;)\n            Console.WriteLine(&quot;   {0}&quot;, st.GetFrame(0).ToString())\n            \n            Console.WriteLine(&quot; Line Number: {0}&quot;, _\n               st.GetFrame(0).GetFileLineNumber().ToString())\n            \n            Console.WriteLine()\n            Console.WriteLine(&quot;   ... throwing exception to next level ...&quot;)\n            Console.WriteLine(&quot;-------------------------------------------------&quot;)\n            Console.WriteLine()\n            Throw e\n         End Try\n      End Sub &#39;InternalMethod\n   End Class &#39;ClassLevel1\n   \n   Public Class ClassLevel2\n      \n      Public Sub Level2Method()\n         Try\n            Dim nestedClass As New ClassLevel3\n            nestedClass.Level3Method()\n         \n         Catch e As Exception\n            Console.WriteLine(&quot; Level2Method exception handler&quot;)\n            \n            &#39; Display the full call stack at this level.\n            Dim st1 As New StackTrace(True)\n            Console.WriteLine(&quot; Stack trace for this level: {0}&quot;, _\n               st1.ToString())\n            \n            &#39; Build a stack trace from one frame, skipping the current\n            &#39; frame and using the next frame.\n            Dim st2 As New StackTrace(New StackFrame(1, True))\n            Console.WriteLine(&quot; Stack trace built with next level frame: {0}&quot;, _\n                st2.ToString())\n            \n            &#39; Build a stack trace skipping the current frame, and\n            &#39; including all the other frames.\n            Dim st3 As New StackTrace(1, True)\n            Console.WriteLine(&quot; Stack trace built from the next level up: {0}&quot;, _\n                st3.ToString())\n            \n            Console.WriteLine()\n            Console.WriteLine(&quot;   ... throwing exception to next level ...&quot;)\n            Console.WriteLine(&quot;-------------------------------------------------&quot;)\n            Console.WriteLine()\n            Throw e\n         End Try\n      End Sub &#39;Level2Method\n   End Class &#39;ClassLevel2\n   \n   Public Class ClassLevel3\n      \n      Public Sub Level3Method()\n         Try\n            Dim nestedClass As New ClassLevel4()\n            nestedClass.Level4Method()\n         Catch e As Exception\n            Console.WriteLine(&quot; Level3Method exception handler&quot;)\n            \n            &#39; Build a stack trace from a dummy stack frame.\n            &#39; Explicitly specify the source file name and line number.\n            Dim st As New StackTrace(New StackFrame(&quot;source.cs&quot;, 60))\n            Console.WriteLine(&quot; Stack trace with dummy stack frame: {0}&quot;, _\n               st.ToString())\n            Dim i As Integer\n            For i = 0 To st.FrameCount - 1\n               &#39; Display the stack frame properties.\n               Dim sf As StackFrame = st.GetFrame(i)\n               Console.WriteLine(&quot; File: {0}&quot;, sf.GetFileName())\n               Console.WriteLine(&quot; Line Number: {0}&quot;, _\n                  sf.GetFileLineNumber())\n               &#39; The column number defaults to zero when not initialized.\n               Console.WriteLine(&quot; Column Number: {0}&quot;, _\n                  sf.GetFileColumnNumber())\n               If sf.GetILOffset &lt;&gt; StackFrame.OFFSET_UNKNOWN\n                  Console.WriteLine(&quot; Intermediate Language Offset: {0}&quot;, _\n                      sf.GetILOffset())\n               End If\n               If sf.GetNativeOffset &lt;&gt; StackFrame.OFFSET_UNKNOWN\n                 Console.WriteLine(&quot; Native Offset: {0}&quot;, _\n                     sf.GetNativeOffset())\n               End If\n            Next i \n            Console.WriteLine()\n            Console.WriteLine(&quot;   ... throwing exception to next level ...&quot;)\n            Console.WriteLine(&quot;-------------------------------------------------&quot;)\n            Console.WriteLine()\n            Throw e\n         End Try\n      End Sub &#39;Level3Method\n   End Class &#39;ClassLevel3\n   \n   Public Class ClassLevel4\n      \n      Public Sub Level4Method()\n         Try\n            Dim [nestedClass] As New ClassLevel5()\n            [nestedClass].Level5Method()\n         Catch e As Exception\n            Console.WriteLine(&quot; Level4Method exception handler&quot;)\n            \n            &#39; Build a stack trace from a dummy stack frame.\n            &#39; Explicitly specify the source file name, line number\n            &#39; and column number.\n            Dim st As New StackTrace(New StackFrame(&quot;source.cs&quot;, 79, 24))\n            Console.WriteLine(&quot; Stack trace with dummy stack frame: {0}&quot;, _\n               st.ToString())\n            \n            &#39; Access the StackFrames explicitly to display the file\n            &#39; name, line number and column number properties.\n            &#39; StackTrace.ToString only includes the method name. \n            Dim i As Integer\n            For i = 0 To st.FrameCount - 1\n               Dim sf As StackFrame = st.GetFrame(i)\n               Console.WriteLine(&quot; File: {0}&quot;, sf.GetFileName())\n               Console.WriteLine(&quot; Line Number: {0}&quot;, _\n                  sf.GetFileLineNumber())\n               Console.WriteLine(&quot; Column Number: {0}&quot;, _\n                  sf.GetFileColumnNumber())\n            Next i\n            Console.WriteLine()\n            Console.WriteLine(&quot;   ... throwing exception to next level ...&quot;)\n            Console.WriteLine(&quot;-------------------------------------------------&quot;)\n            Console.WriteLine()\n            Throw e\n         End Try\n      End Sub &#39;Level4Method \n   End Class &#39;ClassLevel4\n  \n   \n   Public Class ClassLevel5\n      \n      Public Sub Level5Method()\n         Try\n            Dim nestedClass As New ClassLevel6()\n            nestedClass.Level6Method()\n         Catch e As Exception\n            Console.WriteLine(&quot; Level5Method exception handler&quot;)\n            \n            Dim st As New StackTrace()\n            \n            &#39; Display the most recent function call.\n            Dim sf As StackFrame = st.GetFrame(0)\n            Console.WriteLine()\n            Console.WriteLine(&quot;  Exception in method: &quot;)\n            Console.WriteLine(&quot;      {0}&quot;, sf.GetMethod())\n            \n            If st.FrameCount &gt; 1 Then\n               &#39; Display the highest-level function call in the trace.\n               sf = st.GetFrame((st.FrameCount - 1))\n               Console.WriteLine(&quot;  Original function call at top of call stack):&quot;)\n               Console.WriteLine(&quot;      {0}&quot;, sf.GetMethod())\n            End If\n            \n            Console.WriteLine()\n            Console.WriteLine(&quot;   ... throwing exception to next level ...&quot;)\n            Console.WriteLine(&quot;-------------------------------------------------&quot;)\n            Console.WriteLine()\n            Throw e\n         End Try\n      End Sub &#39;Level5Method\n   End Class &#39;ClassLevel5 \n  \n   \n   Public Class ClassLevel6\n      Public Sub Level6Method()\n         Throw New Exception(&quot;An error occurred in the lowest internal class method.&quot;)\n      End Sub &#39;Level6Method\n   End Class &#39;ClassLevel6 \n\nEnd Namespace &#39;StackFrameInternal\n</code></pre><pre><code class=\"lang-cs\" name=\"StackFrameSample1#1\">\nusing System;\nusing System.Diagnostics;\n\nusing SampleInternal;\n\nnamespace SamplePublic\n{\n    // This console application illustrates various uses\n    // of the StackTrace and StackFrame classes.\n    class ConsoleApp\n    {\n       [STAThread]\n       static void Main()\n        {\n            ClassLevel1 mainClass = new ClassLevel1();\n\n            try {\n                mainClass.InternalMethod();\n            }\n            catch (Exception) {\n               Console.WriteLine(&quot; Main method exception handler&quot;);\n\n               // Display file and line information, if available.\n               StackTrace st = new StackTrace(new StackFrame(true));\n               Console.WriteLine(&quot; Stack trace for current level: {0}&quot;,\n                   st.ToString());\n               Console.WriteLine(&quot; File: {0}&quot;, \n                  st.GetFrame(0).GetFileName());\n               Console.WriteLine(&quot; Line Number: {0}&quot;,\n                   st.GetFrame(0).GetFileLineNumber().ToString());\n\n               Console.WriteLine();\n               Console.WriteLine(&quot;-------------------------------------------------\\n&quot;);\n            }\n        }\n    }\n}\n\nnamespace SampleInternal\n{\n   public class ClassLevel1\n   {\n      public void InternalMethod()\n      {\n         try\n         {\n            ClassLevel2 nestedClass = new ClassLevel2();\n            nestedClass.Level2Method();\n         }\n         catch (Exception e)\n         {\n            Console.WriteLine(&quot; InternalMethod exception handler&quot;);\n\n            // Build a stack trace from one frame, skipping the\n            // current frame and using the next frame.  By\n            // default, file and line information are not displayed.\n            StackTrace st = new StackTrace(new StackFrame(1));\n            Console.WriteLine(&quot; Stack trace for next level frame: {0}&quot;,\n               st.ToString());\n            Console.WriteLine(&quot; Stack frame for next level: &quot;);\n            Console.WriteLine(&quot;   {0}&quot;, st.GetFrame(0).ToString());\n\n            Console.WriteLine(&quot; Line Number: {0}&quot;,\n               st.GetFrame(0).GetFileLineNumber().ToString());\n\n            Console.WriteLine();\n            Console.WriteLine(&quot;   ... throwing exception to next level ...&quot;);\n            Console.WriteLine(&quot;-------------------------------------------------\\n&quot;);\n            throw e;\n         }\n      }\n   }\n\n   public class ClassLevel2\n   {\n      public void Level2Method()\n      {\n         try \n         {\n            ClassLevel3 nestedClass = new ClassLevel3();\n            nestedClass.Level3Method();\n\n         }\n         catch (Exception e) \n         {\n            Console.WriteLine(&quot; Level2Method exception handler&quot;);\n\n            // Display the full call stack at this level.\n            StackTrace st1 = new StackTrace(true);\n            Console.WriteLine(&quot; Stack trace for this level: {0}&quot;,\n               st1.ToString());\n\n            // Build a stack trace from one frame, skipping the current\n            // frame and using the next frame.\n            StackTrace st2 = new StackTrace(new StackFrame(1, true));\n            Console.WriteLine(&quot; Stack trace built with next level frame: {0}&quot;,\n               st2.ToString());\n\n            // Build a stack trace skipping the current frame, and\n            // including all the other frames.\n            StackTrace st3 = new StackTrace(1, true);\n            Console.WriteLine(&quot; Stack trace built from the next level up: {0}&quot;,\n               st3.ToString());\n\n            Console.WriteLine();\n            Console.WriteLine(&quot;   ... throwing exception to next level ...&quot;);\n            Console.WriteLine(&quot;-------------------------------------------------\\n&quot;);\n            throw e;\n         }\n      }\n   }\n\n   public class ClassLevel3\n   {\n      public void Level3Method()\n      {\n         try \n         {\n            ClassLevel4 nestedClass = new ClassLevel4();\n            nestedClass.Level4Method();\n         }\n         catch (Exception e) \n         {\n            Console.WriteLine(&quot; Level3Method exception handler&quot;);\n\n            // Build a stack trace from a dummy stack frame.\n            // Explicitly specify the source file name and \n            // line number.\n            StackTrace st = new StackTrace(new StackFrame(&quot;source.cs&quot;, 60));\n            Console.WriteLine(&quot; Stack trace with dummy stack frame: {0}&quot;, \n                        st.ToString());\n            for(int i =0; i&lt; st.FrameCount; i++ )\n            {\n               // Display the stack frame properties.\n               StackFrame sf = st.GetFrame(i);\n               Console.WriteLine(&quot; File: {0}&quot;, sf.GetFileName());\n               Console.WriteLine(&quot; Line Number: {0}&quot;, \n                  sf.GetFileLineNumber());\n               // Note that the column number defaults to zero\n               // when not initialized.\n               Console.WriteLine(&quot; Column Number: {0}&quot;, \n                  sf.GetFileColumnNumber());\n               if (sf.GetILOffset() != StackFrame.OFFSET_UNKNOWN)\n               {\n                  Console.WriteLine(&quot; Intermediate Language Offset: {0}&quot;, \n                     sf.GetILOffset());\n               }\n               if (sf.GetNativeOffset() != StackFrame.OFFSET_UNKNOWN)\n               {\n                  Console.WriteLine(&quot; Native Offset: {0}&quot;, \n                     sf.GetNativeOffset());\n               }\n            }\n            Console.WriteLine();\n            Console.WriteLine(&quot;   ... throwing exception to next level ...&quot;);\n            Console.WriteLine(&quot;-------------------------------------------------\\n&quot;);\n            throw e;\n         }\n      }\n   }\n\n   public class ClassLevel4\n   {\n      public void Level4Method()\n      {\n         try \n         {\n            ClassLevel5 nestedClass = new ClassLevel5();\n            nestedClass.Level5Method();\n         }\n         catch (Exception e) \n         {\n            Console.WriteLine(&quot; Level4Method exception handler&quot;);\n\n            // Build a stack trace from a dummy stack frame.\n            // Explicitly specify the source file name, line number\n            // and column number.\n            StackTrace st = new StackTrace(new StackFrame(&quot;source.cs&quot;, 79, 24));\n            Console.WriteLine(&quot; Stack trace with dummy stack frame: {0}&quot;, \n                           st.ToString());\n\n            // Access the StackFrames explicitly to display the file\n            // name, line number and column number properties.\n            // StackTrace.ToString only includes the method name. \n            for(int i =0; i&lt; st.FrameCount; i++ )\n            {\n               StackFrame sf = st.GetFrame(i);\n               Console.WriteLine(&quot; File: {0}&quot;, sf.GetFileName());\n               Console.WriteLine(&quot; Line Number: {0}&quot;, \n                  sf.GetFileLineNumber());\n               Console.WriteLine(&quot; Column Number: {0}&quot;, \n                  sf.GetFileColumnNumber());\n            }\n            Console.WriteLine();\n            Console.WriteLine(&quot;   ... throwing exception to next level ...&quot;);\n            Console.WriteLine(&quot;-------------------------------------------------\\n&quot;);\n            throw e;\n         }\n      }\n   }\n\n   public class ClassLevel5\n   {\n      public void Level5Method()\n      {\n         try \n         {\n            ClassLevel6 nestedClass = new ClassLevel6();\n            nestedClass.Level6Method();\n         }\n         catch (Exception e) \n         {\n            Console.WriteLine(&quot; Level5Method exception handler&quot;);\n\n            StackTrace st = new StackTrace();\n            \n            // Display the most recent function call.\n            StackFrame sf = st.GetFrame(0);\n            Console.WriteLine();\n            Console.WriteLine(&quot;  Exception in method: &quot;);\n            Console.WriteLine(&quot;      {0}&quot;, sf.GetMethod());\n\n            if (st.FrameCount &gt;1)\n            {\n               // Display the highest-level function call \n               // in the trace.\n               sf = st.GetFrame(st.FrameCount-1);\n               Console.WriteLine(&quot;  Original function call at top of call stack):&quot;);\n               Console.WriteLine(&quot;      {0}&quot;, sf.GetMethod());\n            }\n\n            Console.WriteLine();\n            Console.WriteLine(&quot;   ... throwing exception to next level ...&quot;);\n            Console.WriteLine(&quot;-------------------------------------------------\\n&quot;);\n            throw e;\n         }        \n      }\n\n   }\n\n   public class ClassLevel6\n   {\n      public void Level6Method()\n      {\n         throw new Exception(&quot;An error occurred in the lowest internal class method.&quot;);\n      }\n\n   }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>A StackFrame is created and pushed on the call stack for every function call made during the execution of a thread. The stack frame always includes <a class=\"xref\" href=\"system.reflection.methodbase\" data-linktype=\"relative-path\">MethodBase</a> information, and optionally includes file name, line number, and column number information.  </p>\n<p> StackFrame information will be most informative with Debug build configurations. By default, Debug builds include debug symbols, while Release builds do not. The debug symbols contain most of the file, method name, line number, and column information used in constructing StackFrame objects.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Constructors\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_StackFrame__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_StackFrame__ctor\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StackFrame()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public StackFrame ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_StackFrame__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_StackFrame__ctor_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StackFrame(Boolean)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> class, optionally capturing source information.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public StackFrame (bool fNeedFileInfo);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>fNeedFileInfo</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to capture the file name, line number, and column number of the stack frame; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_StackFrame__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_StackFrame__ctor_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StackFrame(Int32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> class that corresponds to a frame above the current stack frame.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public StackFrame (int skipFrames);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>skipFrames</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of frames up the stack to skip.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_StackFrame__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_StackFrame__ctor_System_Int32_System_Boolean_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StackFrame(Int32, Boolean)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> class that corresponds to a frame above the current stack frame, optionally capturing source information.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public StackFrame (int skipFrames, bool fNeedFileInfo);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>skipFrames</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The number of frames up the stack to skip.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>fNeedFileInfo</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.boolean\" data-linktype=\"relative-path\">Boolean</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p><code>true</code> to capture the file name, line number, and column number of the stack frame; otherwise, <code>false</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_StackFrame__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_StackFrame__ctor_System_String_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StackFrame(String, Int32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> class that contains only the given file name and line number.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public StackFrame (string fileName, int lineNumber);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>fileName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The file name.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>lineNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The line number in the specified file.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use this constructor when you do not want to use the debugger&#39;s line mapping logic.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_StackFrame__ctor_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_StackFrame__ctor_System_String_System_Int32_System_Int32_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">StackFrame(String, Int32, Int32)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Initializes a new instance of the <a class=\"xref\" href=\"system.diagnostics.stackframe\" data-linktype=\"relative-path\">StackFrame</a> class that contains only the given file name, line number, and column number.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public StackFrame (string fileName, int lineNumber, int colNumber);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>fileName</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The file name.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>lineNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The line number in the specified file.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>colNumber</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The column number in the specified file.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>Use this constructor when you do not want to use the debugger&#39;s line mapping logic.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Fields\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_StackFrame_OFFSET_UNKNOWN\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">OFFSET_UNKNOWN</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Defines the value that is returned from the <span class=\"xref\">stem.Diagnostics.StackFrame.GetNativeOffset*</span> or <span class=\"xref\">stem.Diagnostics.StackFrame.GetILOffset*</span> method when the native or Microsoft intermediate language (MSIL) offset is unknown. This field is constant.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public const int OFFSET_UNKNOWN = -1;</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The value of this constant is -1.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_StackFrame_GetFileColumnNumber_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_StackFrame_GetFileColumnNumber\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetFileColumnNumber()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the column number in the file that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual int GetFileColumnNumber ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The file column number, or 0 (zero) if the file column number cannot be determined.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_StackFrame_GetFileLineNumber_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_StackFrame_GetFileLineNumber\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetFileLineNumber()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the line number in the file that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual int GetFileLineNumber ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The file line number, or 0 (zero) if the file line number cannot be determined.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_StackFrame_GetFileName_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_StackFrame_GetFileName\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetFileName()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the file name that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual string GetFileName ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The file name, or <code>null</code> if the file name cannot be determined.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.security.securitysafecriticalattribute\" title=\"System.Security.SecuritySafeCriticalAttribute\" data-linktype=\"relative-path\">SecuritySafeCriticalAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_StackFrame_GetILOffset_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_StackFrame_GetILOffset\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetILOffset()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the offset from the start of the Microsoft intermediate language (MSIL) code for the method that is executing. This offset might be an approximation depending on whether or not the just-in-time (JIT) compiler is generating debugging code. The generation of this debugging information is controlled by the <a class=\"xref\" href=\"system.diagnostics.debuggableattribute\" data-linktype=\"relative-path\">DebuggableAttribute</a>.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual int GetILOffset ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The offset from the start of the MSIL code for the method that is executing.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_StackFrame_GetMethod_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_StackFrame_GetMethod\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetMethod()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the method in which the frame is executing.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual System.Reflection.MethodBase GetMethod ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.reflection.methodbase\" data-linktype=\"relative-path\">MethodBase</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The method in which the frame is executing.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The method that is currently executing may be inherited from a base class, although it is called in a derived class. In this case, the <a class=\"xref\" href=\"system.reflection.memberinfo#System_Reflection_MemberInfo_ReflectedType_\" data-linktype=\"relative-path\">ReflectedType</a> property of the <a class=\"xref\" href=\"system.reflection.methodbase\" data-linktype=\"relative-path\">MethodBase</a> object that is returned by GetMethod identifies the base class, not the derived class.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_StackFrame_GetNativeOffset_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_StackFrame_GetNativeOffset\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetNativeOffset()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the offset from the start of the native just-in-time (JIT)-compiled code for the method that is being executed. The generation of this debugging information is controlled by the <a class=\"xref\" href=\"system.diagnostics.debuggableattribute\" data-linktype=\"relative-path\">DebuggableAttribute</a> class.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public virtual int GetNativeOffset ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.int32\" data-linktype=\"relative-path\">Int32</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The offset from the start of the JIT-compiled code for the method that is being executed.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.runtime.interopservices.comvisibleattribute\" title=\"System.Runtime.InteropServices.ComVisibleAttribute\" data-linktype=\"relative-path\">ComVisibleAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_Diagnostics_StackFrame_ToString_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_Diagnostics_StackFrame_ToString\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">ToString()</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Builds a readable representation of the stack trace.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public override string ToString ();</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.string\" data-linktype=\"relative-path\">String</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>A readable representation of the stack trace.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<dl class=\"attributeList stack\">\r\n  \t\t\t\t\t\t\t\t<dt>Attributes</dt><dd>\r\n  \t\t\t\t\t\t\t\t<div class=\"cdlHolder\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"cdl\"><a class=\"xref\" href=\"system.security.securitysafecriticalattribute\" title=\"System.Security.SecuritySafeCriticalAttribute\" data-linktype=\"relative-path\">SecuritySafeCriticalAttribute</a></span>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc1.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Diagnostics.StackFrame.yml\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.StackFrame\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.StackFrame..ctor\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.StackFrame.GetFileColumnNumber\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.StackFrame.GetFileLineNumber\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.StackFrame.GetFileName\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.StackFrame.GetILOffset\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.StackFrame.GetMethod\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.StackFrame.GetNativeOffset\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.StackFrame.OFFSET_UNKNOWN\">\r\n<meta name=\"APIName\" content=\"System.Diagnostics.StackFrame.ToString\">\r\n<meta name=\"APILocation\" content=\"mscorlib.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"51566ad4-ef7d-9c75-7226-4e24100ff977\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Provides information about a StackFrame, which represents a function call on the call stack for the current thread.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.diagnostics/toc1.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Diagnostics.StackFrame\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Diagnostics.StackFrame.yml","open_to_public_contributors":false,"api_name":["System.Diagnostics.StackFrame","System.Diagnostics.StackFrame..ctor","System.Diagnostics.StackFrame.GetFileColumnNumber","System.Diagnostics.StackFrame.GetFileLineNumber","System.Diagnostics.StackFrame.GetFileName","System.Diagnostics.StackFrame.GetILOffset","System.Diagnostics.StackFrame.GetMethod","System.Diagnostics.StackFrame.GetNativeOffset","System.Diagnostics.StackFrame.OFFSET_UNKNOWN","System.Diagnostics.StackFrame.ToString"],"api_location":["mscorlib.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Diagnostics.StackFrame","System::Diagnostics::StackFrame","System.Diagnostics.StackFrame.#ctor","System::Diagnostics::StackFrame::#ctor","System.Diagnostics.StackFrame.GetFileColumnNumber","System::Diagnostics::StackFrame::GetFileColumnNumber","System.Diagnostics.StackFrame.GetFileLineNumber","System::Diagnostics::StackFrame::GetFileLineNumber","System.Diagnostics.StackFrame.GetFileName","System::Diagnostics::StackFrame::GetFileName","System.Diagnostics.StackFrame.GetILOffset","System::Diagnostics::StackFrame::GetILOffset","System.Diagnostics.StackFrame.GetMethod","System::Diagnostics::StackFrame::GetMethod","System.Diagnostics.StackFrame.GetNativeOffset","System::Diagnostics::StackFrame::GetNativeOffset","System.Diagnostics.StackFrame.OFFSET_UNKNOWN","System::Diagnostics::StackFrame::OFFSET_UNKNOWN","System.Diagnostics.StackFrame.ToString","System::Diagnostics::StackFrame::ToString"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"51566ad4-ef7d-9c75-7226-4e24100ff977","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.Diagnostics/StackFrame.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"StackFrame class | Microsoft Docs","_op_ogTitle":"StackFrame class","description":"Provides information about a StackFrame, which represents a function call on the call stack for the current thread.\n","toc_asset_id":"api/_splitted/System.Diagnostics/toc.json","toc_rel":"_splitted/System.Diagnostics/toc.json","source_url":"","ms.assetid":"System.Diagnostics.StackFrame","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.stackframe","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.stackframe","fileRelativePath":"api/System.Diagnostics.StackFrame.html"},"themesRelativePathToOutputRoot":"_themes/"}