{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">DataGridViewCellValueEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that will handle the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellValueNeeded\" data-linktype=\"relative-path\">CellValueNeeded</a> event or <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellValuePushed\" data-linktype=\"relative-path\">CellValuePushed</a> event of a <a class=\"xref\" href=\"system.windows.forms.datagridview\" data-linktype=\"relative-path\">DataGridView</a>.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void DataGridViewCellValueEventHandler(object sender, DataGridViewCellValueEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">DataGridViewCellValueEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example handles the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_CellValuePushed\" data-linktype=\"relative-path\">CellValuePushed</a> event to store updates and new entries in a data store object. This example is part of a larger example available in the <a class=\"xref\" href=\"system.windows.forms.datagridview#System_Windows_Forms_DataGridView_VirtualMode_\" data-linktype=\"relative-path\">VirtualMode</a> reference topic.  </p>\n<pre><code class=\"lang-cs\" name=\"System.Windows.Forms.DataGridView._Virtual#10\">#region &quot;data store maintance&quot;\nconst int initialValue = -1;\n\nprivate void dataGridView1_CellValueNeeded(object sender,\n    DataGridViewCellValueEventArgs e)\n{\n    if (store.ContainsKey(e.RowIndex))\n    {\n        // Use the store if the e value has been modified \n        // and stored.            \n        e.Value = store[e.RowIndex];\n    }\n    else if (newRowNeeded &amp;&amp; e.RowIndex == numberOfRows)\n    {\n        if (dataGridView1.IsCurrentCellInEditMode)\n        {\n            e.Value = initialValue;\n        }\n        else\n        {\n            // Show a blank value if the cursor is just resting\n            // on the last row.\n            e.Value = String.Empty;\n        }\n    }\n    else\n    {\n        e.Value = e.RowIndex;\n    }\n}\n\nprivate void dataGridView1_CellValuePushed(object sender,\n    DataGridViewCellValueEventArgs e)\n{\n    store.Add(e.RowIndex, int.Parse(e.Value.ToString()));\n}\n#endregion\n\nprivate Dictionary&lt;int, int&gt; store = new Dictionary&lt;int, int&gt;();\n</code></pre><pre><code class=\"lang-cpp\" name=\"System.Windows.Forms.DataGridView._Virtual#10\">#pragma region Data store maintance\n\n    void VirtualConnector::dataGridView1_CellValueNeeded\n        (Object^ sender, DataGridViewCellValueEventArgs^ e)\n    {\n        if (store-&gt;ContainsKey(e-&gt;RowIndex))\n        {\n            // Use the store if the e value has been modified \n            // and stored.            \n            e-&gt;Value = gcnew Int32(store-&gt;default[e-&gt;RowIndex]); \n        }\n        else if (newRowNeeded &amp;&amp; e-&gt;RowIndex == numberOfRows)\n        {\n            if (dataGridView1-&gt;IsCurrentCellInEditMode)\n            {\n                e-&gt;Value = initialValue;\n            }\n            else\n            {\n                // Show a blank e if the cursor is just loitering\n                // over(the) last row.\n                e-&gt;Value = String::Empty;\n            }\n        }\n        else\n        {\n            e-&gt;Value = e-&gt;RowIndex;\n        }\n    }\n\n    void VirtualConnector::dataGridView1_CellValuePushed\n        (Object^ sender, DataGridViewCellValueEventArgs^ e)\n    {\n        String^ value = e-&gt;Value-&gt;ToString();\n        store[e-&gt;RowIndex] = Int32::Parse(value, \n            CultureInfo::CurrentCulture);\n    }\n#pragma endregion\n</code></pre><pre><code class=\"lang-vb\" name=\"System.Windows.Forms.DataGridView._Virtual#10\">#Region &quot;data store maintance&quot;\n    Const initialValue As Integer = -1\n\n    Private Sub dataGridView1_CellValueNeeded(ByVal sender As Object, _\n        ByVal e As DataGridViewCellValueEventArgs) _\n        Handles dataGridView1.CellValueNeeded\n\n        If store.ContainsKey(e.RowIndex) Then\n            &#39; Use the store if the e value has been modified \n            &#39; and stored.\n            e.Value = store(e.RowIndex)\n        ElseIf newRowNeeded AndAlso e.RowIndex = numberOfRows Then\n            If dataGridView1.IsCurrentCellInEditMode Then\n                e.Value = initialValue\n            Else\n                &#39; Show a blank value if the cursor is just resting\n                &#39; on the last row.\n                e.Value = String.Empty\n            End If\n        Else\n            e.Value = e.RowIndex\n        End If\n    End Sub\n\n    Private Sub dataGridView1_CellValuePushed(ByVal sender As Object, _\n        ByVal e As DataGridViewCellValueEventArgs) _\n        Handles dataGridView1.CellValuePushed\n\n        store.Add(e.RowIndex, CInt(e.Value))\n\n    End Sub\n#End Region\n\n    Dim store As System.Collections.Generic.Dictionary(Of Integer, Integer) = _\n        New Dictionary(Of Integer, Integer)\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>Use this delegate to implement virtual mode in the <a class=\"xref\" href=\"system.windows.forms.datagridview\" data-linktype=\"relative-path\">DataGridView</a> control. For more information about virtual mode, see <a href=\"../topic/virtual%20mode%20in%20the%20windows%20forms%20datagridview%20control\" data-linktype=\"relative-path\">Virtual Mode in the Windows Forms DataGridView Control</a>.  </p>\n<p> When you create a DataGridViewCellValueEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see <a href=\"http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115\" data-linktype=\"external\">NIB: Events and Delegates</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.DataGridViewCellValueEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellValueEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellValueEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellValueEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellValueEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Windows.Forms.DataGridViewCellValueEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"bb721ab4-2ad7-9b92-ad61-e934b820a5d1\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that will handle the  event or  event of a .\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.windows.forms/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Windows.Forms.DataGridViewCellValueEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Windows.Forms.DataGridViewCellValueEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Windows.Forms.DataGridViewCellValueEventHandler","System.Windows.Forms.DataGridViewCellValueEventHandler..ctor","System.Windows.Forms.DataGridViewCellValueEventHandler.Invoke","System.Windows.Forms.DataGridViewCellValueEventHandler.BeginInvoke","System.Windows.Forms.DataGridViewCellValueEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Windows.Forms.DataGridViewCellValueEventHandler","System::Windows::Forms::DataGridViewCellValueEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"bb721ab4-2ad7-9b92-ad61-e934b820a5d1","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/DataGridViewCellValueEventHandler.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"DataGridViewCellValueEventHandler delegate | Microsoft Docs","_op_ogTitle":"DataGridViewCellValueEventHandler delegate","description":"Represents the method that will handle the  event or  event of a .\n","toc_asset_id":"api/_splitted/System.Windows.Forms/toc.json","toc_rel":"_splitted/System.Windows.Forms/toc.json","source_url":"","ms.assetid":"System.Windows.Forms.DataGridViewCellValueEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.datagridviewcellvalueeventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.windows.forms.datagridviewcellvalueeventhandler","fileRelativePath":"api/System.Windows.Forms.DataGridViewCellValueEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}