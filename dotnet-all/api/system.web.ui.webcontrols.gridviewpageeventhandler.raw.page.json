{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">GridViewPageEventHandler</span>\r\n      Delegate\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Represents the method that handles the <a class=\"xref\" href=\"system.web.ui.webcontrols.gridview#System_Web_UI_WebControls_GridView_PageIndexChanging\" data-linktype=\"relative-path\">PageIndexChanging</a> event of a <a class=\"xref\" href=\"system.web.ui.webcontrols.gridview\" data-linktype=\"relative-path\">GridView</a> control.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public delegate void GridViewPageEventHandler(object sender, GridViewPageEventArgs e);</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \t<dl class=\"attributeList stack\">\r\n  \t\t<dt>Inheritance</dt><dd>\r\n  \t\t<div class=\"pdlHolder\">\r\n  \t\t<div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.object\" data-linktype=\"relative-path\">Object</a></span></div><div class=\"pdl\"><span class=\"lang-csharp\"><a class=\"xref\" href=\"system.delegate\" data-linktype=\"relative-path\">Delegate</a></span></div><span class=\"lang-csharp\">GridViewPageEventHandler</span>\r\n  \t\t</div>\r\n  \t\t</dd>\r\n  \t</dl>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following example demonstrates how to programmatically add a GridViewPageEventHandler delegate to the <a class=\"xref\" href=\"system.web.ui.webcontrols.gridview#System_Web_UI_WebControls_GridView_PageIndexChanging\" data-linktype=\"relative-path\">PageIndexChanging</a> event of a <a class=\"xref\" href=\"system.web.ui.webcontrols.gridview\" data-linktype=\"relative-path\">GridView</a> control.  </p>\n<pre><code class=\"lang-cs\" name=\"GridViewPageEventHandler#1\">\n&lt;%@ Page language=&quot;C#&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  void Page_Load(Object sender, EventArgs e)\n  {\n\n    // Create a new GridView control.\n    GridView customersGridView = new GridView();\n\n    // Set the GridView object&#39;s properties.\n    customersGridView.ID = &quot;CustomersGridView&quot;;\n    customersGridView.DataSourceID = &quot;CustomersSource&quot;;\n    customersGridView.AutoGenerateColumns = true;\n    customersGridView.EmptyDataText = &quot;No data available.&quot;;\n    customersGridView.AllowPaging = true;\n    customersGridView.AutoGenerateEditButton = true;\n    customersGridView.PagerSettings.Mode = PagerButtons.Numeric;\n    customersGridView.PagerSettings.Position = PagerPosition.Bottom;\n    customersGridView.PagerSettings.PageButtonCount = 10;\n    customersGridView.PagerStyle.BackColor = System.Drawing.Color.LightBlue;\n    customersGridView.DataKeyNames = new String[] { &quot;CustomerID&quot; };\n\n    // Programmatically register the event-handling methods.\n    customersGridView.PageIndexChanging += new GridViewPageEventHandler(this.CustomersGridView_PageIndexChanging);\n    customersGridView.RowCancelingEdit += new GridViewCancelEditEventHandler(this.CustomersGridView_RowCancelingEdit);\n\n    // Add the GridView control to the Controls collection\n    // of the PlaceHolder control.\n    GridViewPlaceHolder.Controls.Add(customersGridView);\n    \n  }          \n\n  void CustomersGridView_PageIndexChanging(Object sender, GridViewPageEventArgs e)\n  {\n\n    // User the sender parameter to retrieve the GridView control\n    // that raised the event.\n    GridView customersGridView = (GridView)sender;\n    \n    // Cancel the paging operation if the user attempts to navigate\n    // to another page while the GridView control is in edit mode. \n    if (customersGridView.EditIndex != -1)\n    {\n      // Use the cancel property to cancel the paging operation.\n      e.Cancel = true;\n      \n      // Display an error message.\n      int newPageNumber = e.NewPageIndex + 1;\n      Message.Text = &quot;Please update the record before moving to page &quot; +\n        newPageNumber.ToString() + &quot;.&quot;;\n    }\n    else\n    {\n      // Clear the error message.\n      Message.Text = &quot;&quot;;\n    }\n    \n  }\n\n  void CustomersGridView_RowCancelingEdit(Object sender, GridViewCancelEditEventArgs e)\n  {\n    // Clear the error message.\n    Message.Text = &quot;&quot;;\n  }\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;GridViewPageEventHandler Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;GridViewPageEventHandler Example&lt;/h3&gt;\n            \n      &lt;asp:label id=&quot;Message&quot;\n        forecolor=&quot;Red&quot;\n        runat=&quot;server&quot;/&gt;\n                \n      &lt;br/&gt;  \n\n      &lt;asp:placeholder id=&quot;GridViewPlaceHolder&quot;\n        runat=&quot;server&quot; /&gt;\n            \n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the Web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;CustomersSource&quot;\n        selectcommand=&quot;Select [CustomerID], [CompanyName], [Address], [City], [PostalCode], [Country] From [Customers]&quot;\n        updatecommand=&quot;Update Customers SET CompanyName=@CompanyName, Address=@Address, City=@City, PostalCode=@PostalCode, Country=@Country WHERE (CustomerID = @CustomerID)&quot;\n        connectionstring=&quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n            \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"GridViewPageEventHandler#1\">\n&lt;%@ Page language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs)\n\n    &#39; Create a new GridView control.\n    Dim customersGridView As New GridView()\n\n    &#39; Set the GridView object&#39;s properties.\n    customersGridView.ID = &quot;CustomersGridView&quot;\n    customersGridView.DataSourceID = &quot;CustomersSource&quot;\n    customersGridView.AutoGenerateColumns = True\n    customersGridView.EmptyDataText = &quot;No data available.&quot;\n    customersGridView.AllowPaging = True\n    customersGridView.AutoGenerateEditButton = True\n    customersGridView.PagerSettings.Mode = PagerButtons.Numeric\n    customersGridView.PagerSettings.Position = PagerPosition.Bottom\n    customersGridView.PagerSettings.PageButtonCount = 10\n    customersGridView.PagerStyle.BackColor = System.Drawing.Color.LightBlue\n    Dim keyArray() As String = {&quot;CustomerID&quot;}\n    customersGridView.DataKeyNames = keyArray\n\n    &#39; Programmatically register the event-handling methods.\n    AddHandler customersGridView.PageIndexChanging, AddressOf CustomersGridView_PageIndexChanging\n    AddHandler customersGridView.RowCancelingEdit, AddressOf CustomersGridView_RowCancelingEdit\n\n    &#39; Add the GridView control to the Controls collection\n    &#39; of the PlaceHolder control.\n    GridViewPlaceHolder.Controls.Add(customersGridView)\n    \n  End Sub\n\n  Sub CustomersGridView_PageIndexChanging(ByVal sender As Object, ByVal e As GridViewPageEventArgs)\n\n    &#39; User the sender parameter to retrieve the GridView control\n    &#39; that raised the event.\n    Dim customersGridView As GridView = CType(sender, GridView)\n    \n    &#39; Cancel the paging operation if the user attempts to navigate\n    &#39; to another page while the GridView control is in edit mode. \n    If customersGridView.EditIndex &lt;&gt; -1 Then\n    \n      &#39; Use the cancel property to cancel the paging operation.\n      e.Cancel = True\n      \n      &#39; Display an error message.\n      Dim newPageNumber As Integer = e.NewPageIndex + 1\n      Message.Text = &quot;Please update the record before moving to page &quot; &amp; _\n        newPageNumber.ToString() &amp; &quot;.&quot;\n    \n    Else\n    \n      &#39; Clear the error message.\n      Message.Text = &quot;&quot;\n    \n    End If\n    \n  End Sub\n\n  Sub CustomersGridView_RowCancelingEdit(ByVal sender As Object, ByVal e As GridViewCancelEditEventArgs)\n  \n    &#39; Clear the error message.\n    Message.Text = &quot;&quot;\n    \n  End Sub\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;GridViewPageEventHandler Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;GridViewPageEventHandler Example&lt;/h3&gt;\n            \n      &lt;asp:label id=&quot;Message&quot;\n        forecolor=&quot;Red&quot;\n        runat=&quot;server&quot;/&gt;\n                \n      &lt;br/&gt;  \n\n      &lt;asp:placeholder id=&quot;GridViewPlaceHolder&quot;\n        runat=&quot;server&quot; /&gt;\n            \n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the Web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;CustomersSource&quot;\n        selectcommand=&quot;Select [CustomerID], [CompanyName], [Address], [City], [PostalCode], [Country] From [Customers]&quot;\n        updatecommand=&quot;Update Customers SET CompanyName=@CompanyName, Address=@Address, City=@City, PostalCode=@PostalCode, Country=@Country WHERE (CustomerID = @CustomerID)&quot;\n        connectionstring=&quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n            \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p> The following example demonstrates how to declaratively add a GridViewPageEventHandler delegate to the <a class=\"xref\" href=\"system.web.ui.webcontrols.gridview#System_Web_UI_WebControls_GridView_PageIndexChanging\" data-linktype=\"relative-path\">PageIndexChanging</a> event of a <a class=\"xref\" href=\"system.web.ui.webcontrols.gridview\" data-linktype=\"relative-path\">GridView</a> control.  </p>\n<pre><code class=\"lang-cs\" name=\"GridViewPageIndexChanging#1\">\n&lt;%@ Page language=&quot;C#&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  void CustomersGridView_PageIndexChanging(Object sender, GridViewPageEventArgs e)\n  {\n    \n    // Cancel the paging operation if the user attempts to navigate\n    // to another page while the GridView control is in edit mode. \n    if (CustomersGridView.EditIndex != -1)\n    {\n      // Use the Cancel property to cancel the paging operation.\n      e.Cancel = true;\n      \n      // Display an error message.\n      int newPageNumber = e.NewPageIndex + 1;\n      Message.Text = &quot;Please update the record before moving to page &quot; +\n        newPageNumber.ToString() + &quot;.&quot;;\n    }\n    else\n    {\n      // Clear the error message.\n      Message.Text = &quot;&quot;;\n    }\n    \n  }\n\n  void CustomersGridView_RowCancelingEdit(Object sender, GridViewCancelEditEventArgs e)\n  {\n    // Clear the error message.\n    Message.Text = &quot;&quot;;\n  }\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;GridView PageIndexChanging Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;GridView PageIndexChanging Example&lt;/h3&gt;\n            \n      &lt;asp:label id=&quot;Message&quot;\n        forecolor=&quot;Red&quot;\n        runat=&quot;server&quot;/&gt;\n                \n      &lt;br/&gt;  \n\n      &lt;asp:gridview id=&quot;CustomersGridView&quot; \n        datasourceid=&quot;CustomersSource&quot; \n        autogeneratecolumns=&quot;true&quot;\n        emptydatatext=&quot;No data available.&quot; \n        allowpaging=&quot;true&quot;\n        autogenerateeditbutton=&quot;true&quot;\n        datakeynames=&quot;CustomerID&quot;  \n        onpageindexchanging=&quot;CustomersGridView_PageIndexChanging&quot;\n        onrowcancelingedit=&quot;CustomersGridView_RowCancelingEdit&quot; \n        runat=&quot;server&quot;&gt;\n                \n        &lt;pagersettings mode=&quot;Numeric&quot;\n          position=&quot;Bottom&quot;           \n          pagebuttoncount=&quot;10&quot;/&gt;\n                      \n        &lt;pagerstyle backcolor=&quot;LightBlue&quot;/&gt;\n                \n      &lt;/asp:gridview&gt;\n            \n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the Web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;CustomersSource&quot;\n        selectcommand=&quot;Select [CustomerID], [CompanyName], [Address], [City], [PostalCode], [Country] From [Customers]&quot;\n        updatecommand=&quot;Update Customers SET CompanyName=@CompanyName, Address=@Address, City=@City, PostalCode=@PostalCode, Country=@Country WHERE (CustomerID = @CustomerID)&quot;\n        connectionstring=&quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n            \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><pre><code class=\"lang-vb\" name=\"GridViewPageIndexChanging#1\">\n&lt;%@ Page language=&quot;VB&quot; %&gt;\n\n&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;\n    &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n&lt;script runat=&quot;server&quot;&gt;\n\n  Sub CustomersGridView_PageIndexChanging(ByVal sender As Object, ByVal e As GridViewPageEventArgs)\n    \n    &#39; Cancel the paging operation if the user attempts to navigate\n    &#39; to another page while the GridView control is in edit mode. \n    If CustomersGridView.EditIndex &lt;&gt; -1 Then\n    \n      &#39; Use the Cancel property to cancel the paging operation.\n      e.Cancel = True\n      \n      &#39; Display an error message.\n      Dim newPageNumber As Integer = e.NewPageIndex + 1\n      Message.Text = &quot;Please update the record before moving to page &quot; &amp; _\n        newPageNumber.ToString() &amp; &quot;.&quot;\n    \n    Else\n    \n      &#39; Clear the error message.\n      Message.Text = &quot;&quot;\n    \n    End If\n    \n  End Sub\n\n  Sub CustomersGridView_RowCancelingEdit(ByVal sender As Object, ByVal e As GridViewCancelEditEventArgs)\n  \n    &#39; Clear the error message.\n    Message.Text = &quot;&quot;\n    \n  End Sub\n\n&lt;/script&gt;\n\n&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; &gt;\n  &lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;GridView PageIndexChanging Example&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n        \n      &lt;h3&gt;GridView PageIndexChanging Example&lt;/h3&gt;\n            \n      &lt;asp:label id=&quot;Message&quot;\n        forecolor=&quot;Red&quot;\n        runat=&quot;server&quot;/&gt;\n                \n      &lt;br/&gt;  \n\n      &lt;asp:gridview id=&quot;CustomersGridView&quot; \n        datasourceid=&quot;CustomersSource&quot; \n        autogeneratecolumns=&quot;true&quot;\n        emptydatatext=&quot;No data available.&quot; \n        allowpaging=&quot;true&quot;\n        autogenerateeditbutton=&quot;true&quot;\n        datakeynames=&quot;CustomerID&quot;  \n        onpageindexchanging=&quot;CustomersGridView_PageIndexChanging&quot;\n        onrowcancelingedit=&quot;CustomersGridView_RowCancelingEdit&quot; \n        runat=&quot;server&quot;&gt;\n                \n        &lt;pagersettings mode=&quot;Numeric&quot;\n          position=&quot;Bottom&quot;           \n          pagebuttoncount=&quot;10&quot;/&gt;\n                      \n        &lt;pagerstyle backcolor=&quot;LightBlue&quot;/&gt;\n                \n      &lt;/asp:gridview&gt;\n            \n      &lt;!-- This example uses Microsoft SQL Server and connects  --&gt;\n      &lt;!-- to the Northwind sample database. Use an ASP.NET     --&gt;\n      &lt;!-- expression to retrieve the connection string value   --&gt;\n      &lt;!-- from the Web.config file.                            --&gt;\n      &lt;asp:sqldatasource id=&quot;CustomersSource&quot;\n        selectcommand=&quot;Select [CustomerID], [CompanyName], [Address], [City], [PostalCode], [Country] From [Customers]&quot;\n        updatecommand=&quot;Update Customers SET CompanyName=@CompanyName, Address=@Address, City=@City, PostalCode=@PostalCode, Country=@Country WHERE (CustomerID = @CustomerID)&quot;\n        connectionstring=&quot;&lt;%$ ConnectionStrings:NorthWindConnectionString%&gt;&quot; \n        runat=&quot;server&quot;/&gt;\n            \n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The <a class=\"xref\" href=\"system.web.ui.webcontrols.gridview\" data-linktype=\"relative-path\">GridView</a> control raises the <a class=\"xref\" href=\"system.web.ui.webcontrols.gridview#System_Web_UI_WebControls_GridView_PageIndexChanging\" data-linktype=\"relative-path\">PageIndexChanging</a> event when a pager button (a button with its <code>CommandName</code> property set to &quot;Page&quot;) within the control is clicked, but before the <a class=\"xref\" href=\"system.web.ui.webcontrols.gridview\" data-linktype=\"relative-path\">GridView</a> control handles the paging operation. This allows you to provide an event-handling method that performs a custom routine, such as canceling the paging operation, whenever this event occurs.  </p>\n<div class=\"NOTE\"><h5>Note</h5><p> Pager buttons are usually located in the pager row of a <a class=\"xref\" href=\"system.web.ui.webcontrols.gridview\" data-linktype=\"relative-path\">GridView</a> control.  </p>\n</div>\n<p> When you create a GridViewPageEventHandler delegate, you identify the method that will handle the event. To associate the event with your event handler, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate. For more information about event-handler delegates, see <a href=\"http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115\" data-linktype=\"external\">NIB: Events and Delegates</a>.</p>\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.GridViewPageEventHandler.yml\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.GridViewPageEventHandler\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.GridViewPageEventHandler..ctor\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.GridViewPageEventHandler.Invoke\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.GridViewPageEventHandler.BeginInvoke\">\r\n<meta name=\"APIName\" content=\"System.Web.UI.WebControls.GridViewPageEventHandler.EndInvoke\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-28 03:03 AM\">\r\n<meta name=\"document_id\" content=\"d2d2fbec-1a2e-cb0f-a397-2503aee43e5a\">\r\n<meta name=\"internalonly\" content=\"false\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Represents the method that handles the  event of a  control.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.web.ui.webcontrols/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.Web.UI.WebControls.GridViewPageEventHandler\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.Web.UI.WebControls.GridViewPageEventHandler.yml","open_to_public_contributors":false,"api_name":["System.Web.UI.WebControls.GridViewPageEventHandler","System.Web.UI.WebControls.GridViewPageEventHandler..ctor","System.Web.UI.WebControls.GridViewPageEventHandler.Invoke","System.Web.UI.WebControls.GridViewPageEventHandler.BeginInvoke","System.Web.UI.WebControls.GridViewPageEventHandler.EndInvoke"],"api_location":[],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.Web.UI.WebControls.GridViewPageEventHandler","System::Web::UI::WebControls::GridViewPageEventHandler"],"dev_langs":["csharp"],"updated_at":"2017-03-28 03:03 AM","document_id":"d2d2fbec-1a2e-cb0f-a397-2503aee43e5a","content_git_url":"https://github.com/dotnet/docs/blob/master/xml/System.Web.UI.WebControls/GridViewPageEventHandler.xml","internalonly":false,"layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"GridViewPageEventHandler delegate | Microsoft Docs","_op_ogTitle":"GridViewPageEventHandler delegate","description":"Represents the method that handles the  event of a  control.\n","toc_asset_id":"api/_splitted/System.Web.UI.WebControls/toc.json","toc_rel":"_splitted/System.Web.UI.WebControls/toc.json","source_url":"","ms.assetid":"System.Web.UI.WebControls.GridViewPageEventHandler","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.gridviewpageeventhandler","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.web.ui.webcontrols.gridviewpageeventhandler","fileRelativePath":"api/System.Web.UI.WebControls.GridViewPageEventHandler.html"},"themesRelativePathToOutputRoot":"_themes/"}