{"content":"\r\n  \r\n  <h1>\r\n    <span class=\"lang-csharp\">IComponentDiscoveryService</span>\r\n      Interface\r\n  </h1>\r\n  \r\n  <h2 class=\"hiddenAnchor\">Definition</h2>\r\n  \r\n  <div class=\"metadata\">\r\n  \r\n  \r\n  </div>\r\n  \r\n  <div class=\"summaryHolder\">\r\n  \t<div class=\"summary\">\r\n  \t\t<p>Enables enumeration of components at design time.</p>\n\r\n  \t</div>\r\n  </div><nav id=\"center-doc-outline\" class=\"doc-outline\" ms.cmpgrp=\"intopic toc\" role=\"navigation\" aria-label=\"On page navigation\">\r\n    <h3>In this Article</h3>\r\n  </nav>\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\">public interface IComponentDiscoveryService</code></pre>\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \t<h2 class=\"accented\">Examples</h2>\r\n  \t<p>The following code example demonstrates how to use IComponentDiscoveryService to find all the types that derive from the <a class=\"xref\" href=\"system.windows.forms.scrollablecontrol\" data-linktype=\"relative-path\">ScrollableControl</a> type.  </p>\n<pre><code class=\"lang-vb\" name=\"System.ComponentModel.Design.DesignerServices#13\">&#39; This class defines the smart tags that appear on the control\n&#39; that is being designed.\n\nFriend Class DemoActionList\n    Inherits System.ComponentModel.Design.DesignerActionList\n    &#39; Cache a reference to the designer host.\n    Private host As IDesignerHost = Nothing\n\n    &#39; Cache a reference to the control.\n    Private relatedControl As DemoControl = Nothing\n\n    &#39; Cache a reference to the designer.\n    Private relatedDesigner As DemoControlDesigner = Nothing\n\n    &#39;The constructor associates the control \n    &#39;with the smart tag list.\n    Public Sub New(ByVal component As IComponent)\n        MyBase.New(component)\n        Me.relatedControl = component &#39;\n\n        Me.host = Me.Component.Site.GetService(GetType(IDesignerHost))\n\n        Dim dcd As IDesigner = host.GetDesigner(Me.Component)\n        Me.relatedDesigner = dcd\n\n    End Sub\n\n    &#39; This method creates and populates the \n    &#39; DesignerActionItemCollection which is used to \n    &#39; display smart tag items.\n    Public Overrides Function GetSortedActionItems() As DesignerActionItemCollection\n        Dim items As New DesignerActionItemCollection()\n\n        &#39; If the Timer component has not been created, show the\n        &#39; &quot;Create Timer&quot; DesignerAction item.\n        &#39;\n        &#39; If the Timer component exists, show the timer-related\n        &#39; options.\n        If Me.relatedDesigner.createdTimer Is Nothing Then\n            items.Add(New DesignerActionMethodItem(Me, &quot;CreateTimer&quot;, &quot;Create Timer&quot;, True))\n        Else\n            items.Add(New DesignerActionMethodItem(Me, &quot;ShowEventHandlerCode&quot;, &quot;Show Event Handler Code&quot;, True))\n\n            items.Add(New DesignerActionMethodItem(Me, &quot;RemoveTimer&quot;, &quot;Remove Timer&quot;, True))\n        End If\n\n        items.Add(New DesignerActionMethodItem(Me, &quot;GetExtenderProviders&quot;, &quot;Get Extender Providers&quot;, True))\n\n        items.Add(New DesignerActionMethodItem(Me, &quot;GetDemoControlReferences&quot;, &quot;Get DemoControl References&quot;, True))\n\n        items.Add(New DesignerActionMethodItem(Me, &quot;GetPathOfAssembly&quot;, &quot;Get Path of Executing Assembly&quot;, True))\n\n        items.Add(New DesignerActionMethodItem(Me, &quot;GetComponentTypes&quot;, &quot;Get ScrollableControl Types&quot;, True))\n\n        items.Add(New DesignerActionMethodItem(Me, &quot;GetToolboxCategories&quot;, &quot;Get Toolbox Categories&quot;, True))\n\n        items.Add(New DesignerActionMethodItem(Me, &quot;SetBackColor&quot;, &quot;Set Back Color&quot;, True))\n\n        Return items\n    End Function\n\n    &#39; This method creates a Timer component using the \n    &#39; IDesignerHost.CreateComponent method. It also \n    &#39; creates an event handler for the Timer component&#39;s\n    &#39; tick event.\n    Private Sub CreateTimer()\n        If (Me.host IsNot Nothing) Then\n            If Me.relatedDesigner.createdTimer Is Nothing Then\n                &#39; Create and configure the Timer object.\n                Me.relatedDesigner.createdTimer = Me.host.CreateComponent(GetType(Timer))\n\n                Dim t As Timer = Me.relatedDesigner.createdTimer\n                t.Interval = 1000\n                t.Enabled = True\n\n                Dim eventColl As EventDescriptorCollection = TypeDescriptor.GetEvents(t, New Attribute(-1) {})\n\n                If (eventColl IsNot Nothing) Then\n                    Dim ed As EventDescriptor = eventColl(&quot;Tick&quot;)\n\n                    If (ed IsNot Nothing) Then\n                        Dim epd As PropertyDescriptor = Me.relatedDesigner.eventBindingService.GetEventProperty(ed)\n\n                        epd.SetValue(t, &quot;timer_Tick&quot;)\n                    End If\n                End If\n\n                Me.relatedDesigner.actionUiService.Refresh(Me.relatedControl)\n            End If\n        End If\n    End Sub\n\n    &#39; This method uses the IEventBindingService.ShowCode\n    &#39; method to start the Code Editor. It places the caret\n    &#39; in the timer_tick method created by the CreateTimer method.\n    Private Sub ShowEventHandlerCode()\n        Dim t As Timer = Me.relatedDesigner.createdTimer\n\n        If (t IsNot Nothing) Then\n            Dim eventColl As EventDescriptorCollection = TypeDescriptor.GetEvents(t, New Attribute(-1) {})\n            If (eventColl IsNot Nothing) Then\n                Dim ed As EventDescriptor = eventColl(&quot;Tick&quot;)\n\n                If (ed IsNot Nothing) Then\n                    Me.relatedDesigner.eventBindingService.ShowCode(t, ed)\n                End If\n            End If\n        End If\n    End Sub\n\n    &#39; This method uses the IDesignerHost.DestroyComponent method\n    &#39; to remove the Timer component from the design environment.\n    Private Sub RemoveTimer()\n        If (Me.host IsNot Nothing) Then\n            If (Me.relatedDesigner.createdTimer IsNot Nothing) Then\n                Me.host.DestroyComponent(Me.relatedDesigner.createdTimer)\n\n                Me.relatedDesigner.createdTimer = Nothing\n\n                Me.relatedDesigner.actionUiService.Refresh(Me.relatedControl)\n            End If\n        End If\n    End Sub\n\n    &#39; This method uses IExtenderListService.GetExtenderProviders\n    &#39; to enumerate all the extender providers and display them \n    &#39; in a MessageBox.\n    Private Sub GetExtenderProviders()\n        If (Me.relatedDesigner.listService IsNot Nothing) Then\n            Dim sb As New StringBuilder()\n\n            Dim providers As IExtenderProvider() = Me.relatedDesigner.listService.GetExtenderProviders()\n\n            Dim i As Integer\n            For i = 0 To providers.Length - 1\n                Dim o As Object = providers(i)\n                sb.Append(o.ToString())\n                sb.Append(ControlChars.Cr + ControlChars.Lf)\n            Next i\n\n            MessageBox.Show(sb.ToString(), &quot;Extender Providers&quot;)\n        End If\n    End Sub\n\n    &#39; This method uses the IReferenceService.GetReferences method\n    &#39; to enumerate all the instances of DemoControl on the \n    &#39; design surface.\n    Private Sub GetDemoControlReferences()\n        If (Me.relatedDesigner.referenceService IsNot Nothing) Then\n            Dim sb As New StringBuilder()\n\n            Dim refs As Object() = Me.relatedDesigner.referenceService.GetReferences(GetType(DemoControl))\n\n            Dim i As Integer\n            For i = 0 To refs.Length - 1\n                sb.Append(refs(i).ToString())\n                sb.Append(ControlChars.Cr + ControlChars.Lf)\n            Next i\n\n            MessageBox.Show(sb.ToString(), &quot;DemoControl References&quot;)\n        End If\n    End Sub\n\n    &#39; This method uses the ITypeResolutionService.GetPathOfAssembly\n    &#39; method to display the path of the executing assembly.\n    Private Sub GetPathOfAssembly()\n        If (Me.relatedDesigner.typeResService IsNot Nothing) Then\n            Dim name As System.Reflection.AssemblyName = System.Reflection.Assembly.GetExecutingAssembly().GetName()\n\n            MessageBox.Show(Me.relatedDesigner.typeResService.GetPathOfAssembly(name), &quot;Path of executing assembly&quot;)\n        End If\n    End Sub\n\n\n    &#39; This method uses the IComponentDiscoveryService.GetComponentTypes \n    &#39; method to find all the types that derive from \n    &#39; ScrollableControl.\n    Private Sub GetComponentTypes()\n        If (Me.relatedDesigner.componentDiscoveryService IsNot Nothing) Then\n            Dim components As ICollection = Me.relatedDesigner.componentDiscoveryService.GetComponentTypes(host, GetType(ScrollableControl))\n\n            If (components IsNot Nothing) Then\n                If components.Count &gt; 0 Then\n                    Dim sb As New StringBuilder()\n\n                    Dim e As IEnumerator = components.GetEnumerator()\n\n                    While e.MoveNext()\n                        sb.Append(e.Current.ToString())\n                        sb.Append(ControlChars.Cr + ControlChars.Lf)\n                    End While\n\n                    MessageBox.Show(sb.ToString(), &quot;Controls derived from ScrollableControl&quot;)\n                End If\n            End If\n        End If\n    End Sub\n\n\n    &#39; This method uses the IToolboxService.CategoryNames\n    &#39; method to enumerate all the categories that appear\n    &#39; in the Toolbox.\n    Private Sub GetToolboxCategories()\n        If (Me.relatedDesigner.toolboxService IsNot Nothing) Then\n            Dim sb As New StringBuilder()\n\n            Dim names As CategoryNameCollection = Me.relatedDesigner.toolboxService.CategoryNames\n\n            Dim name As String\n            For Each name In names\n                sb.Append(name.ToString())\n                sb.Append(ControlChars.Cr + ControlChars.Lf)\n            Next name\n\n            MessageBox.Show(sb.ToString(), &quot;Toolbox Categories&quot;)\n        End If\n    End Sub\n\n\n    &#39; This method sets the shadowed BackColor property on the \n    &#39; designer. This is the value that is serialized by the \n    &#39; design environment.\n    Private Sub SetBackColor()\n        Dim d As New ColorDialog()\n        If d.ShowDialog() = DialogResult.OK Then\n            Me.relatedDesigner.BackColor = d.Color\n        End If\n    End Sub\nEnd Class\n</code></pre><pre><code class=\"lang-cs\" name=\"System.ComponentModel.Design.DesignerServices#13\">// This class defines the smart tags that appear on the control\n// that is being designed.\ninternal class DemoActionList :\n      System.ComponentModel.Design.DesignerActionList\n{\n    // Cache a reference to the designer host.\n    private IDesignerHost host = null;\n\n    // Cache a reference to the control.\n    private DemoControl relatedControl = null;\n\n    // Cache a reference to the designer.\n    private DemoControlDesigner relatedDesigner = null;\n\n    //The constructor associates the control \n    //with the smart tag list.\n    public DemoActionList(IComponent component)\n        : base(component)\n    {\n        this.relatedControl = component as DemoControl;\n\n        this.host =\n            this.Component.Site.GetService(typeof(IDesignerHost))\n            as IDesignerHost;\n\n        IDesigner dcd = host.GetDesigner(this.Component);\n        this.relatedDesigner = dcd as DemoControlDesigner;\n    }\n\n    // This method creates and populates the \n    // DesignerActionItemCollection which is used to \n    // display smart tag items.\n    public override DesignerActionItemCollection GetSortedActionItems()\n    {\n        DesignerActionItemCollection items =\n            new DesignerActionItemCollection();\n\n        // If the Timer component has not been created, show the\n        // &quot;Create Timer&quot; DesignerAction item.\n        //\n        // If the Timer component exists, show the timer-related\n        // options.\n\n        if (this.relatedDesigner.createdTimer == null)\n        {\n            items.Add(new DesignerActionMethodItem(\n                this,\n                &quot;CreateTimer&quot;,\n                &quot;Create Timer&quot;,\n                true));\n        }\n        else\n        {   \n            items.Add(new DesignerActionMethodItem(\n                this,\n                &quot;ShowEventHandlerCode&quot;,\n                &quot;Show Event Handler Code&quot;,\n                true));\n\n            items.Add(new DesignerActionMethodItem(\n                this,\n                &quot;RemoveTimer&quot;,\n                &quot;Remove Timer&quot;,\n                true));\n        }\n\n        items.Add(new DesignerActionMethodItem(\n           this,\n           &quot;GetExtenderProviders&quot;,\n           &quot;Get Extender Providers&quot;,\n           true));\n\n        items.Add(new DesignerActionMethodItem(\n          this,\n          &quot;GetDemoControlReferences&quot;,\n          &quot;Get DemoControl References&quot;,\n          true));\n\n        items.Add(new DesignerActionMethodItem(\n          this,\n          &quot;GetPathOfAssembly&quot;,\n          &quot;Get Path of Executing Assembly&quot;,\n          true));\n\n        items.Add(new DesignerActionMethodItem(\n          this,\n          &quot;GetComponentTypes&quot;,\n          &quot;Get ScrollableControl Types&quot;,\n          true));\n\n        items.Add(new DesignerActionMethodItem(\n            this,\n            &quot;GetToolboxCategories&quot;,\n            &quot;Get Toolbox Categories&quot;,\n            true));\n\n        items.Add(new DesignerActionMethodItem(\n            this,\n            &quot;SetBackColor&quot;,\n            &quot;Set Back Color&quot;,\n            true));\n\n        return items;\n    }\n\n    // This method creates a Timer component using the \n    // IDesignerHost.CreateComponent method. It also \n    // creates an event handler for the Timer component&#39;s\n    // tick event.\n    private void CreateTimer()\n    {\n        if (this.host != null)\n        {\n            if (this.relatedDesigner.createdTimer == null)\n            {\n                // Create and configure the Timer object.\n                this.relatedDesigner.createdTimer =\n                    this.host.CreateComponent(typeof(Timer)) as Timer;\n                Timer t = this.relatedDesigner.createdTimer;\n                t.Interval = 1000;\n                t.Enabled = true;\n\n                EventDescriptorCollection eventColl =\n                    TypeDescriptor.GetEvents(t, new Attribute[0]);\n\n                if (eventColl != null)\n                {\n                    EventDescriptor ed =\n                        eventColl[&quot;Tick&quot;] as EventDescriptor;\n                    if (ed != null)\n                    {\n                        PropertyDescriptor epd =\n                            this.relatedDesigner.eventBindingService.GetEventProperty(ed);\n\n                        epd.SetValue(t, &quot;timer_Tick&quot;);\n                    }\n                }\n\n\tthis.relatedDesigner.actionUiService.Refresh(this.relatedControl);\n            }\n        }\n    }\n\n    // This method uses the IEventBindingService.ShowCode\n    // method to start the Code Editor. It places the caret\n    // in the timer_tick method created by the CreateTimer method.\n    private void ShowEventHandlerCode()\n    {\n        Timer t = this.relatedDesigner.createdTimer;\n\n        if (t != null)\n        {\n            EventDescriptorCollection eventColl =\n                TypeDescriptor.GetEvents(t, new Attribute[0]);\n            if (eventColl != null)\n            {\n                EventDescriptor ed =\n                    eventColl[&quot;Tick&quot;] as EventDescriptor;\n                if (ed != null)\n                {\n                    this.relatedDesigner.eventBindingService.ShowCode(t, ed);\n                }\n            }\n        }\n    }\n\n    // This method uses the IDesignerHost.DestroyComponent method\n    // to remove the Timer component from the design environment.\n    private void RemoveTimer()\n    {\n        if (this.host != null)\n        {\n            if (this.relatedDesigner.createdTimer != null)\n            {\n                this.host.DestroyComponent(\n                    this.relatedDesigner.createdTimer);\n\n                this.relatedDesigner.createdTimer = null;\n\n\tthis.relatedDesigner.actionUiService.Refresh(\n                    this.relatedControl);\n            }\n        }\n    }\n\n    // This method uses IExtenderListService.GetExtenderProviders\n    // to enumerate all the extender providers and display them \n    // in a MessageBox.\n    private void GetExtenderProviders()\n    {\n        if (this.relatedDesigner.listService != null)\n        {\n            StringBuilder sb = new StringBuilder();\n\n            IExtenderProvider[] providers =\n                this.relatedDesigner.listService.GetExtenderProviders();\n\n            for (int i = 0; i &lt; providers.Length; i++)\n            {\n                sb.Append(providers[i].ToString());\n                sb.Append(&quot;\\r\\n&quot;);\n            }\n\n            MessageBox.Show(\n                sb.ToString(), \n                &quot;Extender Providers&quot;);\n        }\n    }\n\n    // This method uses the IReferenceService.GetReferences method\n    // to enumerate all the instances of DemoControl on the \n    // design surface.\n    private void GetDemoControlReferences()\n    {\n        if (this.relatedDesigner.referenceService != null)\n        {\n            StringBuilder sb = new StringBuilder();\n\n            object[] refs = this.relatedDesigner.referenceService.GetReferences(typeof(DemoControl));\n\n            for (int i = 0; i &lt; refs.Length; i++)\n            {\n                sb.Append(refs[i].ToString());\n                sb.Append(&quot;\\r\\n&quot;);\n            }\n\n            MessageBox.Show(\n                sb.ToString(), \n                &quot;DemoControl References&quot;);\n        }\n    }\n\n\n    // This method uses the ITypeResolutionService.GetPathOfAssembly\n    // method to display the path of the executing assembly.\n    private void GetPathOfAssembly()\n    {\n        if (this.relatedDesigner.typeResService != null)\n        {\n            System.Reflection.AssemblyName name =\n                System.Reflection.Assembly.GetExecutingAssembly().GetName();\n\n            MessageBox.Show(\n                this.relatedDesigner.typeResService.GetPathOfAssembly(name),\n                &quot;Path of executing assembly&quot;);\n        }\n    }\n\n    // This method uses the IComponentDiscoveryService.GetComponentTypes \n    // method to find all the types that derive from \n    // ScrollableControl.\n    private void GetComponentTypes()\n    {\n        if (this.relatedDesigner.componentDiscoveryService != null)\n        {\n            ICollection components = this.relatedDesigner.componentDiscoveryService.GetComponentTypes(host, typeof(ScrollableControl));\n\n            if (components != null)\n            {\n                if (components.Count &gt; 0)\n                {\n                    StringBuilder sb = new StringBuilder();\n\n                    IEnumerator e = components.GetEnumerator();\n\n                    while (e.MoveNext())\n                    {\n                        sb.Append(e.Current.ToString());\n                        sb.Append(&quot;\\r\\n&quot;);\n\n                    }\n\n                    MessageBox.Show(\n                        sb.ToString(), \n                        &quot;Controls derived from ScrollableControl&quot;);\n                }\n            }\n        }\n    }\n\n    // This method uses the IToolboxService.CategoryNames\n    // method to enumerate all the categories that appear\n    // in the Toolbox.\n    private void GetToolboxCategories()\n    {\n        if (this.relatedDesigner.toolboxService != null)\n        {\n            StringBuilder sb = new StringBuilder();\n\n            CategoryNameCollection names = this.relatedDesigner.toolboxService.CategoryNames;\n\n            foreach (string name in names)\n            {\n                sb.Append(name.ToString());\n                sb.Append(&quot;\\r\\n&quot;);\n            }\n\n            MessageBox.Show(sb.ToString(), &quot;Toolbox Categories&quot;);\n        }\n    }\n\n    // This method sets the shadowed BackColor property on the \n    // designer. This is the value that is serialized by the \n    // design environment.\n    private void SetBackColor()\n    {\n        ColorDialog d = new ColorDialog();\n        if (d.ShowDialog() == DialogResult.OK)\n        {\n            this.relatedDesigner.BackColor = d.Color;\n        }\n    }\n}\n</code></pre>\r\n  \r\n  \t<h2 class=\"accented\">Remarks</h2>\r\n  \t<p>The default implementation of the IComponentDiscoveryService interface enables design-time enumeration of components in the Toolbox.  </p>\n<p> You could provide a custom implementation that enumerates across other types available at design time. For example, your implementation could enumerate the components that are present in a particular designer.</p>\n\r\n  \r\n  \r\n  \t\t<section>\r\n  \t\t\t<h2 class=\"accented \">Methods\r\n  \t\t</h2>\r\n  \t\t\r\n  \t\t\t\t\t<div data-moniker=\" netframework-3.0 netframework-3.5-client netframework-3.5 netframework-4.0-client netframework-4.0 netframework-4.5.1 netframework-4.5.2 netframework-4.5 netframework-4.6.1 netframework-4.6.2 netframework-4.6\">\r\n  \t\t\r\n  \t\t\t\t\t<a id=\"System_ComponentModel_Design_IComponentDiscoveryService_GetComponentTypes_\"></a>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberNameHolder\" id=\"System_ComponentModel_Design_IComponentDiscoveryService_GetComponentTypes_System_ComponentModel_Design_IDesignerHost_System_Type_\">\r\n  \t\t\t\t\t<h3 class=\"accented\">\r\n  \t\t\t\t\t\t<span class=\"lang-csharp\">GetComponentTypes(IDesignerHost, Type)</span>\r\n  \t\t\t\t\t</h3>\r\n  \t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t<div class=\"memberInfo\">\r\n  \t\t\t\t\t<p>Gets the list of available component types.</p>\n\r\n  \t\t\r\n  \t\t\t\t\t\t<pre class=\"wrap loading\"><code class=\"csharp lang-csharp\" dir=\"ltr\">public System.Collections.ICollection GetComponentTypes (System.ComponentModel.Design.IDesignerHost designerHost, Type baseType);</code></pre>\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Parameters</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>designerHost</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.componentmodel.design.idesignerhost\" data-linktype=\"relative-path\">IDesignerHost</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The designer host providing design-time services. Can be <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo stack\">\r\n  \t\t\t\t\t\t\t<dl class=\"parameterList\">\r\n  \t\t\t\t\t\t\t\t<dt>baseType</dt>\r\n  \t\t\t\t\t\t\t\t<dd>\r\n  \t\t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.type\" data-linktype=\"relative-path\">Type</a></span>\r\n  \t\t\t\t\t\t\t\t</dd>\r\n  \t\t\t\t\t\t\t</dl>\r\n  \t\t\t\t\t\t\t<p>The base type specifying the components to retrieve. Can be <code>null</code>.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfoTitle stack\">Returns</div>\r\n  \t\t\t\t\t\t\t<div class=\"propertyInfo\">\r\n  \t\t\t\t\t\t\t<div class=\"subtle\">\r\n  \t\t\t\t\t\t\t\t\t<span class=\"lang-csharp\"><a class=\"xref\" href=\"system.collections.icollection\" data-linktype=\"relative-path\">ICollection</a></span>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<p>The list of available component types.</p>\n\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\r\n  \t\t\t\t\t\t<h4 class=\"accented\">Remarks</h4>\r\n  \t\t\t\t\t\t<p>The GetComponentTypes method retrieves the list of available component types, which are types implementing the <a class=\"xref\" href=\"system.componentmodel.icomponent\" data-linktype=\"relative-path\">IComponent</a> interface. If the <code>baseType</code> parameter is <code>null</code>, all components are retrieved; otherwise, only component types derived from <code>baseType</code> are returned.  </p>\n<p> When you pass in a value for the <code>designerHost</code> parameter, type resolution is scoped to <code>designerHost</code>. This means that if there is a <a class=\"xref\" href=\"system.drawing.design.toolboxitem\" data-linktype=\"relative-path\">ToolboxItem</a> whose type is on disk, and not in the global assembly cache, its type will fail to load through <code>designerHost</code>.  </p>\n<p> If you pass in <code>null</code> for <code>designerHost</code>, it returns all types that can be queried from the global assembly cache or the <a class=\"xref\" href=\"system.reflection.assembly#System_Reflection_Assembly_LoadFrom_\" data-linktype=\"relative-path\">LoadFrom</a> method.</p>\n\r\n  \t\t\r\n  \t\t\t\t</div>\r\n  \t\t\t</div>\r\n  \t\t\r\n  \t\t</section>\r\n  \r\n  \r\n","outputRootRelativePath":"../","pageMetadata":"<meta name=\"author\" content=\"dotnet-bot\">\r\n<meta name=\"ms.author\" content=\"dotnetcontent\">\r\n<meta name=\"manager\" content=\"wpickett\">\r\n<meta name=\"breadcrumb_path\" content=\"../toc2.json\">\r\n<meta name=\"apiPlatform\" content=\"dotnet\">\r\n<meta name=\"ms.topic\" content=\"managed-reference\">\r\n<meta name=\"ms.prod\" content=\".net\">\r\n<meta name=\"search.ms_sitename\" content=\"Docs\">\r\n<meta name=\"search.ms_docsetname\" content=\"docs-internal\">\r\n<meta name=\"version\" content=\"0\">\r\n<meta name=\"locale\" content=\"en-us\">\r\n<meta name=\"site_name\" content=\"Docs\">\r\n<meta name=\"search.ms_product\" content=\"MSDN\">\r\n<meta name=\"depot_name\" content=\"MSDN.docs-internal\">\r\n<meta name=\"original_ref_skeleton_git_url\" content=\"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.Design.IComponentDiscoveryService.yml\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IComponentDiscoveryService\">\r\n<meta name=\"APIName\" content=\"System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes\">\r\n<meta name=\"APILocation\" content=\"System.dll\">\r\n<meta name=\"TopicType\" content=\"apiref\">\r\n<meta name=\"APIType\" content=\"Assembly\">\r\n<meta name=\"updated_at\" content=\"2017-03-31 02:21 PM\">\r\n<meta name=\"document_id\" content=\"cfa84807-e9aa-c473-881a-e6a23b84f322\">\r\n<meta name=\"pagetype\" content=\"Reference\">\r\n<meta name=\"description\" content=\"Enables enumeration of components at design time.\n\">\r\n<meta name=\"toc_rel\" content=\"_splitted/system.componentmodel.design/toc2.json\">\r\n<meta name=\"source_url\" content=\"\">\r\n<meta name=\"ms.assetid\" content=\"System.ComponentModel.Design.IComponentDiscoveryService\">\r\n","rawMetadata":{"author":"dotnet-bot","ms.author":"dotnetcontent","manager":"wpickett","breadcrumb_path":"/dotnet/toc.json","apiPlatform":"dotnet","ms.topic":"managed-reference","ms.prod":".net","search.ms_sitename":"Docs","search.ms_docsetname":"docs-internal","version":0,"_op_canonicalUrlPrefix":"https://docs.microsoft.com/en-us/dotnet-internal/","locale":"en-us","site_name":"Docs","search.ms_product":"MSDN","_op_openToPublicContributors":false,"depot_name":"MSDN.docs-internal","_op_gitRefSkeletonCommitHistory":[],"original_ref_skeleton_git_url":"https://github.com/dotnet/docs-internal/blob/master/api/System.ComponentModel.Design.IComponentDiscoveryService.yml","open_to_public_contributors":false,"api_name":["System.ComponentModel.Design.IComponentDiscoveryService","System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes"],"api_location":["System.dll"],"topic_type":["apiref"],"api_type":["Assembly"],"f1_keywords":["System.ComponentModel.Design.IComponentDiscoveryService","System::ComponentModel::Design::IComponentDiscoveryService","System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes","System::ComponentModel::Design::IComponentDiscoveryService::GetComponentTypes"],"dev_langs":["csharp"],"updated_at":"2017-03-31 02:21 PM","document_id":"cfa84807-e9aa-c473-881a-e6a23b84f322","content_git_url":"https://github.com/dotnet/docs-internal/blob/master/xml/System.ComponentModel.Design/IComponentDiscoveryService.xml","layout":"Reference","_op_layout":"Reference","pagetype":"Reference","title":"IComponentDiscoveryService interface | Microsoft Docs","_op_ogTitle":"IComponentDiscoveryService interface","description":"Enables enumeration of components at design time.\n","toc_asset_id":"api/_splitted/System.ComponentModel.Design/toc.json","toc_rel":"_splitted/System.ComponentModel.Design/toc.json","source_url":"","ms.assetid":"System.ComponentModel.Design.IComponentDiscoveryService","canonical_url":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.design.icomponentdiscoveryservice","_op_searchScope":[".NET"],"_op_canonicalUrl":"https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.design.icomponentdiscoveryservice","fileRelativePath":"api/System.ComponentModel.Design.IComponentDiscoveryService.html"},"themesRelativePathToOutputRoot":"_themes/"}